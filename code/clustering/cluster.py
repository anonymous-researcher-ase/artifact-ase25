import numpy as np
from scipy.cluster.hierarchy import linkage, dendrogram
from scipy.spatial.distance import squareform
import matplotlib.pyplot as plt

# 原始余弦距离表
cosine_distance = {
    'Cpp': [0, 0.86, 1.09, 1.28, 1.47, 1.24, 1.61, 1.17, 1.12, 1.08, 1.52, 1.41, 1.45, 1.32, 1.28, 1.36, 1.65, 1.35, 1.50],
    'Java': [0.86, 0, 1.12, 0.94, 1.52, 1.38, 1.63, 1.16, 1.09, 0.85, 1.35, 1.32, 1.35, 1.22, 1.38, 1.18, 1.40, 1.40, 1.08],
    'JavaScript': [1.09, 1.12, 0, 1.16, 1.37, 1.18, 1.45, 1.26, 1.11, 1.46, 0.97, 1.15, 1.25, 1.09, 1.55, 1.07, 1.30, 1.55, 1.45],
    'Kotlin': [1.28, 0.94, 1.16, 0, 1.52, 1.14, 1.43, 1.56, 1.12, 1.15, 1.43, 1.13, 1.22, 1.03, 1.43, 1.14, 1.44, 1.45, 1.12],
    'Python': [1.47, 1.52, 1.37, 1.52, 0, 1.51, 1.77, 1.60, 1.10, 1.60, 0.85, 0.92, 1.03, 0.86, 1.37, 1.52, 1.48, 1.50, 1.38],
    'Rust': [1.24, 1.38, 1.18, 1.14, 1.51, 0, 1.47, 1.37, 1.12, 1.13, 1.55, 1.31, 1.41, 1.43, 1.51, 1.47, 1.75, 1.60, 1.42],
    'Haskell': [1.61, 1.63, 1.45, 1.43, 1.77, 1.47, 0, 1.85, 1.36, 1.61, 1.68, 1.59, 1.72, 1.52, 1.77, 1.77, 1.85, 1.75, 1.30],
    'C': [1.17, 1.16, 1.26, 1.56, 1.60, 1.37, 1.85, 0, 1.21, 1.10, 1.45, 1.28, 1.43, 1.21, 1.26, 1.42, 1.60, 1.25, 1.55],
    'Go': [1.12, 1.09, 1.11, 1.12, 1.10, 1.12, 1.36, 1.21, 0, 1.07, 1.40, 1.13, 1.22, 1.03, 1.36, 1.12, 1.50, 1.38, 1.40],
    'Swift': [1.08, 0.85, 1.46, 1.15, 1.60, 1.13, 1.61, 1.10, 1.07, 0, 1.41, 1.24, 1.36, 1.12, 1.60, 1.10, 1.38, 1.42, 1.22],
    'AppleScript': [1.52, 1.35, 0.97, 1.43, 0.85, 1.55, 1.68, 1.45, 1.40, 1.41, 0, 1.52, 1.63, 1.51, 1.68, 1.68, 1.20, 1.70, 1.65],
    'Ruby': [1.41, 1.32, 1.15, 1.13, 0.92, 1.31, 1.59, 1.28, 1.13, 1.24, 1.52, 0, 1.05, 1.10, 1.61, 1.55, 1.55, 1.60, 1.48],
    'Raku': [1.45, 1.35, 1.25, 1.22, 1.03, 1.41, 1.72, 1.43, 1.22, 1.36, 1.63, 1.05, 0, 1.23, 1.68, 1.60, 1.60, 1.65, 1.50],
    'PHP': [1.32, 1.22, 1.09, 1.03, 0.86, 1.43, 1.52, 1.21, 1.03, 1.12, 1.51, 1.10, 1.23, 0, 1.55, 1.41, 1.42, 1.48, 1.42],
    'Fortran': [1.28, 1.38, 1.55, 1.43, 1.37, 1.51, 1.77, 1.26, 1.36, 1.60, 1.68, 1.61, 1.68, 1.55, 0, 1.60, 1.68, 1.26, 1.43],
    'Dart': [1.36, 1.18, 1.07, 1.14, 1.52, 1.47, 1.77, 1.42, 1.12, 1.10, 1.68, 1.55, 1.60, 1.41, 1.60, 0, 1.72, 1.48, 1.22],
    'Visual Basic': [1.65, 1.40, 1.30, 1.44, 1.48, 1.75, 1.85, 1.60, 1.50, 1.38, 1.20, 1.55, 1.60, 1.42, 1.68, 1.72, 0, 1.30, 1.50],
    'Pascal': [1.35, 1.40, 1.55, 1.45, 1.50, 1.60, 1.75, 1.25, 1.38, 1.42, 1.70, 1.60, 1.65, 1.48, 1.26, 1.48, 1.30, 0, 1.48],
    'Scala': [1.50, 1.08, 1.45, 1.12, 1.38, 1.42, 1.30, 1.55, 1.40, 1.22, 1.65, 1.48, 1.50, 1.42, 1.43, 1.22, 1.50, 1.48, 0]
}

# 提取语言标签
languages = list(cosine_distance.keys())

# 构造对称距离矩阵
n = len(languages)
distance_matrix = np.zeros((n, n))

for i, lang1 in enumerate(languages):
    for j, lang2 in enumerate(languages):
        if i == j:
            distance_matrix[i, j] = 0  # 确保对角线为0
        elif i < j:
            distance_matrix[i, j] = cosine_distance[lang1][j]
            distance_matrix[j, i] = distance_matrix[i, j]  # 确保对称性

# 转换为压缩形式（下三角）
condensed_distances = squareform(distance_matrix)

# 执行层次聚类
Z = linkage(condensed_distances, method='ward')

# 绘制聚类树并保存
plt.figure(figsize=(10, 4))

dendrogram(Z, labels=languages, leaf_rotation=90)
plt.xticks(rotation=90, fontsize=12)  # 旋转 90 度并设置合适的字号
plt.ylim(0, 1.1)  # 设置 y 轴的范围
plt.savefig("./cluster.pdf", dpi=300, bbox_inches='tight')
plt.show()
