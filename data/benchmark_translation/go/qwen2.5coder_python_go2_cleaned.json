{
    "python": {
        "ruby": [
            "# @param numbers [Array<Float>]\n# @param threshold [Float]\n# @returns {Boolean}\ndef has_close_elements(numbers, threshold)\n    numbers.each_with_index do |num1, i|\n        (i + 1).upto(numbers.length - 1) do |j|\n            return true if (num1 - numbers[j]).abs < threshold\n        end\n    end\n    false\nend\n",
            "def separate_paren_groups(paren_string)\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.gsub(\" \", \"\")\n\n    parens.each_char do |ch|\n        if ch == '('\n            stk.push(ch)\n            current_group += ch\n        elsif ch == ')'\n            stk.pop\n            current_group += ch\n            groups.push(current_group) && (current_group = \"\") if stk.empty?\n        end\n    end\n\n    groups\nend\n",
            "def truncate_number(num)\n    num - num.floor\nend\n",
            "# @param operations [Array<Integer>]\n# @returns {Boolean}\ndef below_zero(operations)\n    balance = 0\n    operations.each do |op|\n        balance += op\n        if balance < 0\n            return true\n        end\n    end\n    false\nend\n",
            "def mean_absolute_deviation(numbers)\n    mean = 0.0\n    numbers.each do |number|\n        mean += number\n    end\n    mean /= numbers.length\n\n    deviation = 0.0\n    numbers.each do |number|\n        deviation += (number - mean).abs\n    end\n    return deviation / numbers.length\nend\n",
            "# @param numbers [Array<Integer>]\n# @param delimiter [Integer]\n# @returns [Array<Integer>]\ndef intersperse(numbers, delimiter)\n    result = []\n    numbers.each_with_index do |number, i|\n        if i != 0\n            result << delimiter\n        end\n        result << number\n    end\n    result\nend\n",
            "def parse_nested_parens(paren_string)\n    result = []\n    paren_groups = paren_string.split(\" \")\n    paren_groups.each do |group|\n        max_depth = 0\n        depth = 0\n        group.each_char do |ch|\n            if ch == '('\n                depth += 1\n                max_depth = depth if depth > max_depth\n            elsif ch == ')'\n                depth -= 1\n            end\n        end\n        result << max_depth\n    end\n    result\nend\n",
            "def filter_by_substring(strs, substring)\n    result = []\n    strs.each do |s|\n        result << s if s.include?(substring)\n    end\n    result\nend\n",
            "def sum_product(numbers)\n  n_sum = numbers.sum\n  n_product = numbers.reduce(1) { |product, num| product * num }\n  [n_sum, n_product]\nend\n",
            "def rolling_max(numbers)\n    max_so_far = -Float::INFINITY\n    result = []\n    numbers.each_with_index do |num, i|\n        if num > max_so_far\n            max_so_far = num\n        end\n        result[i] = max_so_far\n    end\n    result\nend\n",
            "def is_palindrome(s)\n  (0...s.length/2).each do |i|\n    return false if s[i] != s[s.length-1-i]\n  end\n  true\nend\n\n# @param s [String]\n# @returns {String}\ndef make_palindrome(s)\n  return s if is_palindrome(s)\n  \n  (0...s.length).each do |i|\n    return s + suffix.reverse if is_palindrome(s[i..-1])\n  end\n  \n  \"\"\nend\n",
            "def string_xor(a, b)\n    result = \"\"\n    (0...a.length).each do |i|\n        if a[i] == b[i]\n            result += \"0\"\n        else\n            result += \"1\"\n        end\n    end\n    result\nend\n",
            "# @param strs [Array<String>]\n# @return [String, nil]\ndef longest(strs)\n    return nil if strs.empty?\n    longest_s = strs[0]\n    strs.each do |s|\n        longest_s = s if s.length > longest_s.length\n    end\n    longest_s\nend\n",
            "# @param a [Integer]\n# @param b [Integer]\n# @returns {Integer}\ndef greatest_common_divisor(a, b)\n  if b == 0\n    return a\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend\n",
            "def all_prefixes(s)\n    prefixes = []\n    (0...s.length).each do |i|\n        prefixes << s[0..i]\n    end\n    prefixes\nend\n",
            "def string_sequence(n)\n    result = (0..n).map(&:to_s)\n    result.join(\" \")\nend\n",
            "def count_distinct_characters(s)\n    char_set = {}\n    s.each_char do |c|\n        char_set[c.downcase] = true\n    end\n    char_set.keys.length\nend\n",
            "def parse_music(music_string)\n    durations = {\"o\" => 4, \"o|\" => 2, \".|\" => 1}\n    notes = music_string.split(\" \")\n    result = []\n    notes.each do |note|\n        if duration = durations[note]\n            result << duration\n        end\n    end\n    result\nend\n",
            "def how_many_times(s, substring)\n    times = 0\n    (0..s.length - substring.length).each do |i|\n        if s[i, substring.length] == substring\n            times += 1\n        end\n    end\n    return times\nend",
            "NUM_DICT = {\n  \"zero\" => 0,\n  \"one\" => 1,\n  \"two\" => 2,\n  \"three\" => 3,\n  \"four\" => 4,\n  \"five\" => 5,\n  \"six\" => 6,\n  \"seven\" => 7,\n  \"eight\" => 8,\n  \"nine\" => 9\n}\n\n# @param numbers [String]\n# @returns {String}\ndef sort_numbers(numbers)\n  num_slice = numbers.split(\" \")\n  num_slice.sort_by! { |num| NUM_DICT[num] }\n  num_slice.join(\" \")\nend\n",
            "def find_closest_elements(numbers)\n    sorted_numbers = numbers.sort\n\n    min_diff = Float::INFINITY\n    closest_pair = []\n\n    (1...sorted_numbers.length).each do |i|\n        diff = sorted_numbers[i] - sorted_numbers[i-1]\n        if diff < min_diff\n            min_diff = diff\n            closest_pair = [sorted_numbers[i-1], sorted_numbers[i]]\n        end\n    end\n\n    closest_pair\nend\n",
            "def rescale_to_unit(numbers)\n  min_num = numbers[0]\n  max_num = numbers[0]\n\n  numbers.each do |num|\n    min_num = num if num < min_num\n    max_num = num if num > max_num\n  end\n\n  if min_num == max_num\n    return Array.new(numbers.length, 0.0)\n  else\n    result = []\n    numbers.each_with_index do |num, i|\n      result[i] = (num - min_num) / (max_num - min_num)\n    end\n    return result\n  end\nend\n",
            "def filter_integers(values)\n  result = []\n  values.each do |value|\n    if value.is_a?(Integer)\n      result << value\n    end\n  end\n  result\nend\n",
            "# @param s [String]\n# @returns {Integer}\ndef str_length(s)\n    s.length\nend\n",
            "def largest_divisor(n)\n    (2...n).each do |i|\n        if n % i == 0\n            return n / i\n        end\n    end\n    return 1\nend\n",
            "def factorize(n)\n  factors = []\n  divisor = 2\n  while divisor <= n\n    if n % divisor == 0\n      factors << divisor\n      n /= divisor\n    else\n      divisor += 1\n    end\n  end\n  factors\nend\n",
            "def remove_duplicates(numbers)\n  counts = Hash.new(0)\n  numbers.each do |num|\n    counts[num] += 1\n  end\n  res = []\n  numbers.each do |num|\n    res << num if counts[num] == 1\n  end\n  res\nend\n",
            "def flip_case(s)\n    flipped = []\n    s.each_char do |ch|\n        if !ch.match?(/[a-zA-Z]/)\n            flipped << ch\n        elsif ch == ch.downcase\n            flipped << ch.upcase\n        else\n            flipped << ch.downcase\n        end\n    end\n    flipped.join\nend\n",
            "def concatenate(strs)\n    strs.join(\"\")\nend\n",
            "def filter_by_prefix(strs, prefix_str)\n  result = []\n  strs.each do |s|\n    if s.start_with?(prefix_str)\n      result << s\n    end\n  end\n  result\nend\n",
            "def get_positive(l)\n    l.select { |num| num > 0 }\nend\n",
            "def is_prime(n)\n    return false if n < 2\n    (2..Math.sqrt(n)).each do |i|\n        return false if n % i == 0\n    end\n    true\nend\n",
            "def poly(xs, x)\n    res = 0.0\n    xs.each_with_index do |coeff, i|\n        res += coeff.to_f * (x ** i)\n    end\n    res\nend\n\ndef find_zero(xs)\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0\n        x1 *= 2\n        x2 *= 2\n    end\n    until (x1 - x2).abs < 1e-10\n        mid = (x1 + x2) / 2\n        return mid if poly(xs, mid).abs < 1e-10\n        if poly(xs, mid) * poly(xs, x1) < 0\n            x2 = mid\n        else\n            x1 = mid\n        end\n    end\n    (x1 + x2) / 2\nend\n",
            "def sort_third(l)\n  sorted_third = l.select.with_index { |_, i| i % 3 == 0 }.sort\n  l.map.with_index { |v, i| i % 3 == 0 ? sorted_third[i / 3] : v }\nend\n",
            "def list_unique(l)\n    unique_map = {}\n    result = []\n    l.each do |value|\n        if !unique_map.key?(value)\n            unique_map[value] = true\n            result << value\n        end\n    end\n    result.sort\nend\n",
            "def max_element(l)\n    return 0 if l.empty?\n    max = l[0]\n    l.each do |v|\n        max = v if v > max\n    end\n    max\nend\n",
            "def count_sevens(num)\n    cnt = 0\n    while num > 0\n        if num % 10 == 7\n            cnt += 1\n        end\n        num /= 10\n    end\n    cnt\nend\n\n# @param n [Integer]\n# @returns {Integer}\ndef fizz_buzz(n)\n    cnt = 0\n    (0...n).each do |i|\n        if i % 11 == 0 || i % 13 == 0\n            cnt += count_sevens(i)\n        end\n    end\n    cnt\nend\n",
            "def sort_even(l)\n    even_indices = []\n    l.each_index do |i|\n        if i.even?\n            even_indices << l[i]\n        end\n    end\n    even_indices.sort!\n    \n    sorted_list = Array.new(l.length)\n    even_index = 0\n    l.each_index do |i|\n        if i.even?\n            sorted_list[i] = even_indices[even_index]\n            even_index += 1\n        else\n            sorted_list[i] = l[i]\n        end\n    end\n    return sorted_list\nend\n",
            "# @param s [String]\n# @returns [String]\ndef encode_cyclic(s)\n    result = []\n    (0...s.length).step(3) do |i|\n        if i + 3 > s.length\n            result << s[i..-1]\n        else\n            result << s[i+1, 2]\n            result << s[i, 1]\n        end\n    end\n    result.join\nend\n\n# @param s [String]\n# @returns [String]\ndef decode_cyclic(s)\n    encode_cyclic(encode_cyclic(s))\nend\n",
            "# @param n [Integer]\n# @return [Integer]\ndef prime_fib(n)\n  def is_prime(num)\n    return false if num < 2\n    (2..Math.sqrt(num)).each do |i|\n      return false if num % i == 0\n    end\n    true\n  end\n\n  f = [0, 1]\n  cnt = 0\n  while cnt < n\n    f = [f[1], f[0] + f[1]]\n    cnt += 1 if is_prime(f[1])\n  end\n  f[1]\nend\n",
            "def triples_sum_to_zero(l)\n    (0...l.length).each do |i|\n        ((i + 1)...l.length).each do |j|\n            ((j + 1)...l.length).each do |k|\n                return true if l[i] + l[j] + l[k] == 0\n            end\n        end\n    end\n    false\nend\n",
            "# @param n [Integer]\n# @returns {Integer}\ndef car_race_collision(n)\n    n * n\nend\n",
            "# @param l [Array<Integer>]\n# @returns {Array<Integer>}\ndef incr_list(l)\n    result =[]\n    l.each_with_index do |v, i|\n        result[i] = v + 1\n    end\n    result\nend\n",
            "def pairs_sum_to_zero(l)\n    seen = {}\n    l.each do |num|\n        if seen[-num]\n            return true\n        end\n        seen[num] = true\n    end\n    false\nend\n",
            "def change_base(x, bas)\n    if x == 0\n        return \"0\"\n    end\n    digits = []\n    while x > 0\n        digits << (x % bas).to_s\n        x /= bas\n    end\n    digits.reverse.join\nend\n",
            "# @param a [Integer]\n# @param h [Integer]\n# @returns {Float}\ndef triangle_area(a, h)\n    return (a * h).to_f / 2.0\nend\n",
            "def fib4(n)\n    fib = [0, 0, 2, 0]\n    (4..n).each do |i|\n        sum = fib.sum\n        fib[i % 4] = sum\n    end\n    fib[n % 4]\nend\n",
            "def median(l)\n  sl = l.sort\n  if l.length % 2 != 0\n    sl[l.length / 2]\n  else\n    (sl[l.length / 2] + sl[l.length / 2 - 1]) / 2.0\n  end\nend\n",
            "def is_palindrome(txt)\n    n = txt.length\n    (0...n/2).each do |i|\n        return false if txt[i] != txt[n-1-i]\n    end\n    true\nend\n",
            "# @param n [Integer]\n# @param p [Integer]\n# @returns {Integer}\ndef modp(n, p)\n    ret = 1\n    n.times do |i|\n        ret = (ret * 2) % p\n    end\n    ret\nend\n",
            "def encode_shift(s)\n    result = []\n    s.each_char do |ch|\n        shifted_ch = ((ch.ord - 97 + 5) % 26 + 97).chr\n        result << shifted_ch\n    end\n    result.join\nend\n\ndef decode_shift(s)\n    result = []\n    s.each_char do |ch|\n        shifted_ch = ((ch.ord - 97 + 21) % 26 + 97).chr\n        result << shifted_ch\n    end\n    result.join\nend\n",
            "def remove_vowels(txt)\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    txt.each_char do |char|\n        unless vowels.include?(char)\n            result << char\n        end\n    end\n    result\nend\n",
            "def below_threshold(l, t)\n    l.each do |x|\n        return false if x >= t\n    end\n    true\nend\n",
            "def add(x, y)\n    x + y\nend\n",
            "def same_chars(s0, s1)\n  set_equal(string_to_set(s0), string_to_set(s1))\nend\n\ndef string_to_set(s)\n  m = {}\n  s.each_char { |c| m[c] = true }\n  m\nend\n\ndef set_equal(set1, set2)\n  return false if set1.size != set2.size\n  set1.all? { |key| set2.key?(key) }\nend\n",
            "def fib(n)\n  if n <= 1\n    n\n  else\n    fib(n - 1) + fib(n - 2)\n  end\nend\n",
            "def correct_bracketing(brackets)\n    depth = 0\n    brackets.each_char do |b|\n        if b == '<'\n            depth += 1\n        elsif b == '>'\n            depth -= 1\n        end\n        return false if depth < 0\n    end\n    depth == 0\nend\n",
            "def monotonic(l)\n    return true if l.length <= 1\n\n    increasing = true\n    decreasing = true\n\n    (1...l.length).each do |i|\n        decreasing = false if l[i] > l[i-1]\n        increasing = false if l[i] < l[i-1]\n    end\n\n    increasing || decreasing\nend\n",
            "def common(l1, l2)\n    set1 = {}\n    l1.each do |v|\n        set1[v] = true\n    end\n\n    set2 = {}\n    l2.each do |v|\n        set2[v] = true\n    end\n\n    result = []\n    set1.keys.each do |k|\n        if set2.key?(k)\n            result << k\n        end\n    end\n\n    result.sort!.uniq!\nend",
            "def largest_prime_factor(n)\n    i = 2\n    while i * i <= n\n        if n % i != 0\n            i += 1\n        else\n            n /= i\n        end\n    end\n    n\nend\n",
            "# @param n [Integer]\n# @returns {Integer}\ndef sum_to_n(n)\n    sum = 0\n    (0..n).each do |i|\n        sum += i\n    end\n    return sum\nend\n",
            "def correct_bracketing(brackets)\n    depth = 0\n    brackets.each_char do |b|\n        if b == '('\n            depth += 1\n        elsif b == ')'\n            depth -= 1\n        end\n        return false if depth < 0\n    end\n    depth == 0\nend\n",
            "def derivative(xs)\n  result = Array.new(xs.length - 1)\n  (1...xs.length).each do |i|\n    result[i-1] = xs[i] * i\n  end\n  result\nend\n",
            "# @param n [Integer]\n# @returns {Integer}\ndef fibfib(n)\n    if n <= 1\n        return 0\n    end\n    a, b, c = 0, 0, 1\n    while n > 2\n        a, b, c = b, c, a + b + c\n        n -= 1\n    end\n    c\nend\n",
            "def vowels_count(s)\n    vowels = \"aeiou\"\n    cnt = 0\n    s.each_char.with_index do |char, i|\n        if vowels.include?(char.downcase) || (i == s.length - 1 && char.downcase == 'y')\n            cnt += 1\n        end\n    end\n    cnt\nend\n",
            "def circular_shift(x, shift)\n    x_str = x.to_s\n    if shift > x_str.length\n        reverse_string(x_str)\n    else\n        x_str[-shift..-1] + x_str[0...-shift]\n    end\nend\n\ndef reverse_string(s)\n    s.chars.reverse.join\nend\n",
            "def digit_sum(s)\n    sum = 0\n    s.each_char do |c|\n        if c >= 'A' && c <= 'Z'\n            sum += c.ord\n        end\n    end\n    return sum\nend\n",
            "def fruit_distribution(s, n)\n    words = s.split(' ')\n    apples = words[words.index(\"apples\") - 1].to_i\n    oranges = words[words.index(\"oranges\") - 1].to_i\n    return n - apples - oranges\nend\n",
            "def pluck(arr)\n  evens = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  \n  min_even = evens.min\n  index = arr.index(min_even)\n  \n  [min_even, index]\nend\n",
            "def search(lst)\n    freqs = Hash.new(0)\n    lst.each do |n|\n        freqs[n] += 1\n    end\n    good_vals = []\n    freqs.each do |k, v|\n        good_vals << k if v >= k\n    end\n    return -1 if good_vals.empty?\n    max_val = good_vals[0]\n    good_vals.each do |val|\n        max_val = val if val > max_val\n    end\n    max_val\nend\n",
            "def strange_sort_list(lst)\n    sl = lst.dup\n    sl.sort!\n    result = []\n    left, right = 0, sl.length - 1\n    while left <= right\n        result << sl[left]\n        left += 1\n        if left <= right\n            result << sl[right]\n            right -= 1\n        end\n    end\n    result\nend\n",
            "def triangle_area(a, b, c)\n    if a + b > c && a + c > b && b + c > a\n        s = (a.to_f + b.to_f + c.to_f) / 2.0\n        Math.sqrt(s * (s - a.to_f) * (s - b.to_f) * (s - c.to_f))\n    else\n        -1.0\n    end\nend\n",
            "def will_it_fly(q, w)\n    return false if q.empty?\n    is_palin = true\n    q.each_index do |i|\n        is_palin = false and break if q[i] != q[q.length - i - 1]\n    end\n    total = q.sum\n    is_palin && total <= w\nend\n",
            "def smallest_change(arr)\n    ans = 0\n    (arr.length / 2).times do |i|\n        ans += 1 if arr[i] != arr[arr.length - i - 1]\n    end\n    ans\nend\n",
            "def total_match(lst1, lst2)\n    cnt1 = lst1.sum(&:length)\n    cnt2 = lst2.sum(&:length)\n    cnt1 <= cnt2 ? lst1 : lst2\nend\n",
            "def is_multiply_prime(a)\n    cnt = 0\n    i = 2\n    while i * i <= a\n        if a % i == 0\n            cnt += 1\n            a /= i\n        else\n            i += 1\n        end\n    end\n    cnt == 3\nend\n",
            "def is_simple_power(x, n)\n    if n < 2\n        return x == n\n    end\n    tmp = 1\n    while tmp < x\n        tmp *= n\n    end\n    tmp == x\nend\n",
            "# @param a [Integer]\n# @returns {Boolean}\ndef is_cube(a)\n    a = a.abs\n    root = (a ** (1.0 / 3.0)).round.to_i\n    root * root * root == a\nend\n",
            "def hex_key(num)\n    count = 0\n    num.each_char do |x|\n        if x == '2' || x == '3' || x == '5' || x == '7' || x == 'B' || x == 'D'\n            count += 1\n        end\n    end\n    count\nend\n",
            "def decimal_to_binary(dec)\n    binary = dec.to_s(2)\n    \"db#{binary}db\"\nend\n",
            "def is_happy(s)\n    return false if s.length < 3\n    (0...s.length-2).each do |i|\n        return false if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n    end\n    true\nend\n",
            "def numerical_letter_grade(grades)\n    result = []\n    grades.each do |g|\n        if g == 4.0\n            result << \"A+\"\n        elsif g > 3.7\n            result << \"A\"\n        elsif g > 3.3\n            result << \"A-\"\n        elsif g > 3.0\n            result << \"B+\"\n        elsif g > 2.7\n            result << \"B\"\n        elsif g > 2.3\n            result << \"B-\"\n        elsif g > 2.0\n            result << \"C+\"\n        elsif g > 1.7\n            result << \"C\"\n        elsif g > 1.3\n            result << \"C-\"\n        elsif g > 1.0\n            result << \"D+\"\n        elsif g > 0.7\n            result << \"D\"\n        elsif g > 0.0\n            result << \"D-\"\n        else\n            result << \"E\"\n        end\n    end\n    result\nend\n",
            "def prime_length(s)\n    length = s.length\n    return false if length < 2\n    (2..Math.sqrt(length).to_i).each do |i|\n        return false if length % i == 0\n    end\n    true\nend\n",
            "def starts_one_ends(n)\n    if n == 1\n        return 1\n    end\n    return 2 * 9 * (10**(n-2))\nend\n",
            "def solve(n)\n    digits_sum = 0\n    while n > 0\n        digit = n % 10\n        digits_sum += digit\n        n /= 10\n    end\n    format(\"%b\", digits_sum)\nend\n",
            "def add(lst)\n    sum = 0\n    lst.each_with_index do |x, i|\n        if i.odd? && x.even?\n            sum += x\n        end\n    end\n    sum\nend\n",
            "def anti_shuffle(s)\n    words = s.split\n    sorted_words = words.map do |word|\n        word.chars.sort.join\n    end\n    sorted_words.join(' ')\nend\n",
            "def get_row(lst, x)\n    coords = []\n    lst.each_with_index do |row, i|\n        row.each_with_index do |val, j|\n            if val == x\n                coords << [i, j]\n            end\n        end\n    end\n    coords.sort_by { |coord| [coord[0], -coord[1]] }\nend\n",
            "# @param arr [Array<Integer>]\n# @return [Array<Integer>]\ndef sort_array(arr)\n  return [] if arr.empty?\n  return arr.sort.reverse if (arr.first + arr.last) % 2 == 0\n  arr.sort\nend\n",
            "def encrypt(s)\n    result = []\n    s.each_char do |ch|\n        shifted = ch.ord + 4\n        if shifted > 'z'.ord\n            shifted -= 26\n        end\n        result << shifted.chr\n    end\n    result.join\nend\n",
            "# @param lst [Array<Integer>]\n# @returns {Integer, nil}\ndef next_smallest(lst)\n  sl = lst.uniq.sort\n  return nil if sl.length < 2\n  sl[1]\nend\n",
            "def is_bored(s)\n    sentences = s.split(/[\\.\\!\\?]\\s*/)\n    sentences.count { |sentence| sentence.start_with?(\"I \") }\nend\n",
            "def any_int(x, y, z)\n  xInt = x.is_a?(Integer) ? x : nil\n  yInt = y.is_a?(Integer) ? y : nil\n  zInt = z.is_a?(Integer) ? z : nil\n\n  return false unless xInt && yInt && zInt\n\n  (xInt + yInt == zInt) || (xInt + zInt == yInt) || (yInt + zInt == xInt)\nend\n",
            "def encode(message)\n  vowels = \"aeiouAEIOU\"\n  result = []\n\n  message.each_char do |ch|\n    if ch =~ /[a-zA-Z]/\n      ch1 = ch.swapcase\n      if vowels.include?(ch1)\n        ch1 = (ch1.ord + 2).chr\n      end\n      result << ch1\n    else\n      result << ch\n    end\n  end\n\n  result.join\nend\n",
            "def skjkasdkd(lst)\n    primes = lst.select { |n| is_prime(n) }\n    return 0 if primes.empty?\n    \n    largest = primes.max.to_s\n    sum = largest.chars.sum { |digit| digit.to_i }\n    sum\nend\n\nprivate\n\ndef is_prime(n)\n    return false if n < 2\n    (2..Math.sqrt(n)).none? { |i| n % i == 0 }\nend\n",
            "def check_dict_case(d)\n    return false if d.empty?\n    all_lower = d.keys.all? { |k| k.downcase == k }\n    all_upper = d.keys.all? { |k| k.upcase == k }\n    all_lower || all_upper\nend\n",
            "def count_up_to(n)\n    primes = []\n    for num in 2...n\n        is_prime = true\n        primes.each do |p|\n            if num % p == 0\n                is_prime = false\n                break\n            end\n        end\n        if is_prime\n            primes << num\n        end\n    end\n    return primes\nend\n",
            "# @param a [Integer]\n# @param b [Integer]\n# @returns {Integer}\ndef multiply(a, b)\n    (abs(a) % 10) * (abs(b) % 10)\nend\n\ndef abs(x)\n    if x < 0\n        -x\n    else\n        x\n    end\nend\n",
            "def count_upper(s)\n  vowels = \"AEIOU\"\n  count = 0\n  s.chars.each_with_index do |c, i|\n    count += 1 if i.even? && vowels.include?(c)\n  end\n  count\nend\n",
            "def closest_integer(value)\n    num = Float(value)\n    if num >= 0\n        (num + 0.5).to_i\n    else\n        (num - 0.5).to_i\n    end\nend\n",
            "def make_a_pile(n)\n    pile = Array.new(n) do |i|\n        n + 2 * i\n    end\n    return pile\nend\n",
            "# @param s [String]\n# @returns {Array<String>}\ndef words_string(s)\n    words = s.split(/[, ]+/).reject(&:empty?)\n    words\nend\n",
            "def choose_num(x, y)\n  if x > y\n    return -1\n  end\n  if y % 2 == 0\n    return y\n  end\n  if x != y\n    return y - 1\n  end\n  return -1\nend\n",
            "def rounded_avg(n, m)\n    return nil if n > m\n    r_avg = ((m + n) / 2.0 + 0.5).floor\n    r_avg.to_s(2)\nend\n",
            "def all_digits_odd(s)\n  s.each_char do |digit|\n    return false if digit.to_i.even?\n  end\n  true\nend\n\ndef unique_digits(x)\n  result = []\n  x.each do |num|\n    result << num if all_digits_odd(num.to_s)\n  end\n  result.sort!\nend\n",
            "def by_length(arr)\n  digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  sorted_arr = arr.select { |x| x >= 1 && x <= 9 }.sort.reverse\n  sorted_arr.map { |x| digit_names[x - 1] }\nend\n",
            "def f(n)\n    nums = Array.new(n) { |i| i + 1 }\n    \n    result = []\n    (0...n).each do |i|\n        if (i + 1).odd?\n            sum = nums[0..i].sum\n            result << sum\n        else\n            product = nums[0..i].inject(1, :*)\n            result << product\n        end\n    end\n    \n    result\nend\n",
            "def even_odd_palindrome(n)\n    cnt = [0, 0]\n    (1..n).each do |i|\n        if is_palindrome(i.to_s)\n            cnt[i % 2] += 1\n        end\n    end\n    cnt\nend\n\ndef is_palindrome(s)\n    (0...s.length/2).each do |i|\n        return false if s[i] != s[s.length-1-i]\n    end\n    true\nend\n",
            "def count_nums(arr)\n  arr.count { |n| n.to_s.chars.map(&:to_i).sum.positive? }\nend\n",
            "def move_one_ball(arr)\n  return true if arr.empty?\n\n  sorted_arr = arr.sort\n\n  (0...arr.length).each do |i|\n    return true if arr[i..] == sorted_arr[...-i] && arr[..i] == sorted_arr[-i..]\n  end\n\n  false\nend\n",
            "def can_exchange(lst1, lst2)\n    odd_cnt = 0\n    lst1.each do |num|\n        odd_cnt += 1 if num.odd?\n    end\n    even_cnt = 0\n    lst2.each do |num|\n        even_cnt += 1 if num.even?\n    end\n    return \"YES\" if even_cnt >= odd_cnt\n    \"NO\"\nend\n",
            "def histogram(test)\n    freq = {}\n    words = test.split(/\\s+/)\n    words.each do |w|\n        if w.length > 0\n            freq[w] ||= 0\n            freq[w] += 1\n        end\n    end\n    result = {}\n    if freq.size > 0\n        max_freq = freq.values.max\n        freq.each do |k, v|\n            result[k] = v if v == max_freq\n        end\n    end\n    result\nend\n",
            "def reverse_delete(s, c)\n    s1 = \"\"\n    s.chars.each do |ch|\n        s1 << ch unless c.include?(ch)\n    end\n\n    is_palindrome = lambda { |str|\n        n = str.length\n        (0...n/2).each do |i|\n            return false if str[i] != str[n-1-i]\n        end\n        true\n    }\n\n    result = [s1]\n    result << (is_palindrome.call(s1) ? \"yes\" : \"no\")\n    result\nend\n",
            "def odd_count(lst)\n    result = []\n    lst.each do |num|\n        n = 0\n        num.each_char do |d|\n            if d.to_i.odd?\n                n += 1\n            end\n        end\n        rs = \"the number of odd elements in the string i of the input.\"\n        rs.gsub!(\"i\", n.to_s)\n        result << rs\n    end\n    return result\nend\n",
            "def min_sub_array_sum(nums)\n    min_sum = 0\n    cur_sum = 0\n    nums.each do |n|\n        cur_sum = [cur_sum + n, 0].min\n        min_sum = [cur_sum, min_sum].min\n    end\n    if min_sum == 0\n        min_sum = nums.min\n    end\n    min_sum\nend\n",
            "def max_fill(grid, capacity)\n    sum = 0\n    grid.each do |arr|\n        row_sum = arr.sum\n        if row_sum % capacity != 0\n            sum += row_sum / capacity + 1\n        else\n            sum += row_sum / capacity\n        end\n    end\n    return sum\nend\n",
            "def count_ones(num)\n  num.to_s(2).count(\"1\")\nend\n\n def sort_array(arr)\n    arr.sort_by { |x| [count_ones(x), x] }\nend\n",
            "def select_words(s, n)\n  consonants = \"bcdfghjklmnpqrstvwxyz\"\n  words = s.split\n  result = []\n  words.each do |w|\n    count = 0\n    w.downcase.each_char do |c|\n      count += 1 if consonants.include?(c)\n    end\n    result << w if count == n\n  end\n  result\nend\n",
            "def get_closest_vowel(word)\n    vowels = \"aeiouAEIOU\"\n    (word.length - 2).downto(1) do |i|\n        if vowels.include?(word[i]) && !vowels.include?(word[i-1]) && !vowels.include?(word[i+1])\n            return word[i]\n        end\n    end\n    \"\"\nend\n",
            "def check(s)\n    depth = 0\n    s.each_char do |ch|\n        if ch == '('\n            depth += 1\n        else\n            depth -= 1\n        end\n        return false if depth < 0\n    end\n    depth == 0\nend\n\ndef match_parens(lst)\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    return \"Yes\" if check(s1) || check(s2)\n    \"No\"\nend\n",
            "# @param arr [Array<Integer>]\n# @param k [Integer]\n# @returns {Array<Integer>}\ndef maximum(arr, k)\n    return [] if k == 0\n    arr.sort.last(k)\nend\n",
            "def solution(lst)\n    sum = 0\n    lst.each_with_index do |x, i|\n        if i.even? && x.odd?\n            sum += x\n        end\n    end\n    sum\nend\n",
            "def add_elements(arr, k)\n    sum = 0\n    (0...[k, arr.length].min).each do |i|\n        n = arr[i]\n        if n >= -99 && n <= 99\n            sum += n\n        end\n    end\n    sum\nend\n",
            "def get_odd_collatz(n)\n  collatz = [1]\n  while n != 1\n    if n % 2 != 0\n      collatz << n\n      n = 3 * n + 1\n    else\n      n /= 2\n    end\n  end\n  collatz.sort\nend\n",
            "# @param date [String]\n# @returns {Boolean}\ndef valid_date(date)\n    return false if date.length != 10 || date[2] != \"-\" || date[5] != \"-\"\n    m = date[0..1].to_i\n    d = date[3..4].to_i\n    return true if [1, 3, 5, 7, 8, 10, 12].include?(m) && d >= 1 && d <= 31\n    return true if [4, 6, 9, 11].include?(m) && d >= 1 && d <= 30\n    return true if m == 2 && d >= 1 && d <= 29\n    false\nend\n",
            "def split_words(txt)\n    if txt.include?(\" \")\n        txt.split(\" \")\n    elsif txt.include?(\",\")\n        txt.split(\",\")\n    else\n        count = 0\n        txt.each_char do |c|\n            count += 1 if c.ord.even? && c.downcase =~ /[a-z]/\n        end\n        [count.to_s]\n    end\nend\n",
            "def is_sorted(lst)\n    return true if lst.empty?\n    \n    (1...lst.length).each do |i|\n        return false if lst[i-1] > lst[i]\n    end\n    \n    freq = Hash.new(0)\n    lst.each { |i| freq[i] += 1 }\n    \n    freq.values.each do |count|\n        return false if count > 2\n    end\n    \n    true\nend\n",
            "def is_prime(n)\n    return false if n < 2\n    (2..Math.sqrt(n)).each do |i|\n        return false if n % i == 0\n    end\n    true\nend\n\ndef intersection(interval1, interval2)\n    l = [interval1[0], interval2[0]].max\n    r = [interval1[1], interval2[1]].min\n    length = r - l\n    return \"YES\" if length > 0 && is_prime(length)\n    \"NO\"\nend\n",
            "def prod_signs(arr)\n  return nil if arr.empty?\n  \n  return 0 if arr.any? { |n| n == 0 }\n  \n  sign = -1\n  negative_count = arr.count { |n| n < 0 }\n  \n  sign = 1 if negative_count.even?\n  \n  sum = arr.map { |n| n.abs }.sum\n  \n  sign * sum\nend\n",
            "def min_path(grid, k)\n    n = grid.length\n    min_val = n * n + 1\n    (0...n).each do |i|\n        (0...n).each do |j|\n            if grid[i][j] == 1\n                temp = []\n                temp << grid[i-1][j] if i != 0\n                temp << grid[i][j-1] if j != 0\n                temp << grid[i+1][j] if i != n-1\n                temp << grid[i][j+1] if j != n-1\n                min_val = [min_val, *temp].min\n            end\n        end\n    end\n    result = Array.new(k) { |i| i % 2 == 0 ? 1 : min_val }\n    result\nend\n",
            "def tri(n)\n    if n == 0\n        return [1]\n    end\n    seq = [1, 3]\n    (2..n).each do |i|\n        if i.even?\n            seq << i / 2 + 1\n        else\n            seq << seq[i - 1] + seq[i - 2] + (i + 3) / 2\n        end\n    end\n    seq\nend\n",
            "def digits(n)\n  odds = []\n  n.to_s.each_char do |d|\n    digit = d.to_i\n    odds << digit if digit.odd?\n  end\n  result = 1\n  odds.each { |o| result *= o }\n  return len(odds) > 0 ? result : 0\nend\n",
            "def is_nested(s)\n    open_idx = []\n    close_idx = []\n\n    s.chars.each_with_index do |ch, i|\n        if ch == '['\n            open_idx << i\n        elsif ch == ']'\n            close_idx << i\n        end\n    end\n\n    (0...close_idx.length/2).each do |i|\n        close_idx[i], close_idx[close_idx.length - 1 - i] = close_idx[close_idx.length - 1 - i], close_idx[i]\n    end\n\n    cnt = 0\n    i = 0\n    l = close_idx.length\n    open_idx.each do |idx|\n        if i < l && idx < close_idx[i]\n            cnt += 1\n            i += 1\n        end\n    end\n    cnt >= 2\nend\n",
            "def sum_squares(lst)\n    sum = 0\n    lst.each do |n|\n        sum += (Math.ceil(n) ** 2).to_i\n    end\n    return sum\nend\n",
            "# @param txt [String]\n# @returns {Boolean}\ndef check_if_last_char_is_a_letter(txt)\n    return false if txt.empty?\n    last = txt[txt.rindex(' ') + 1..-1]\n    last.length == 1 && last.~r?^[a-zA-Z]$\nend\n",
            "def can_arrange(arr)\n  if arr.length <= 1\n    return -1\n  end\n  idx = -1\n  for i in 1...arr.length\n    if arr[i] < arr[i-1]\n      idx = i\n    end\n  end\n  return idx\nend\n",
            "def largest_smallest_integers(lst)\n  neg = []\n  pos = []\n\n  lst.each do |i|\n    neg << i if i < 0\n    pos << i if i > 0\n  end\n\n  max_neg = nil\n  if !neg.empty?\n    max_neg_val = neg[0]\n    neg.each do |n|\n      max_neg_val = n if n > max_neg_val\n    end\n    max_neg = max_neg_val\n  end\n\n  min_pos = nil\n  if !pos.empty?\n    min_pos_val = pos[0]\n    pos.each do |p|\n      min_pos_val = p if p < min_pos_val\n    end\n    min_pos = min_pos_val\n  end\n\n  [max_neg, min_pos]\nend\n",
            "def compare_one(a, b)\n    def any_to_real(o)\n        case o\n        when String\n            f = Float(o.gsub(',', '.'))\n            return f rescue raise(\"invalid float representation: #{o}\")\n        when Integer\n            return o.to_f\n        when Float\n            return o\n        else\n            raise \"unsupported type: #{o.class}\"\n        end\n    end\n\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n\n    if a1 == b1\n        nil\n    elsif a1 > b1\n        a1.to_f\n    else\n        b1.to_f\n    end\nend\n",
            "def is_equal_to_sum_even(n)\n    n.even? && n >= 8\nend\n",
            "def special_factorial(n)\n    fact = 1\n    result = 1\n    (1..n).each do |i|\n        fact *= i\n        result *= fact\n    end\n    result\nend\n",
            "# @param txt [String]\n# @returns {String}\ndef fix_spaces(txt)\n  txt.gsub(/\\s{3,}/, '-').gsub(' ', '_')\nend\n",
            "# @param file_name[String]\n# @returns {String}\ndef file_name_check(file_name)\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\", 2)\n    if lst.length != 2 || !suf.include?(lst[1]) || lst[0].length == 0 || !lst[0][0].match?(/\\p{L}/) || count_digits(lst[0]) > 3\n        return \"No\"\n    end\n    return \"Yes\"\nend\n\ndef count_digits(s)\n    count = 0\n    s.each_char do |c|\n        count += 1 if c =~ /\\d/\n    end\n    count\nend\n",
            "# @param lst [Array<Integer>]\n# @returns {Integer}\ndef sum_squares(lst)\n    result = 0\n    lst.each_with_index do |val, i|\n        if i % 3 == 0\n            result += val * val\n        elsif i % 4 == 0\n            result += val * val * val\n        else\n            result += val\n        end\n    end\n    result\nend\n",
            "require 'prime'\n\ndef words_in_sentence(sentence)\n    words = sentence.split(\" \")\n    prime_words = words.select { |w| w.length.prime? }\n    prime_words.join(\" \")\nend\n",
            "def simplify(x, n)\n    xs = x.split(\"/\")\n    ns = n.split(\"/\")\n    num = xs[0].to_i\n    den = xs[1].to_i\n    numer = ns[0].to_i\n    denom = ns[1].to_i\n    (num * numer) % (den * denom) == 0\nend\n",
            "def digits_sum(n)\n  n_str = n.to_s\n  if n >= 0\n    n_str.chars.map(&:to_i).sum\n  else\n    n_str[0, 2].to_i * 2 + digits_sum(n.abs)\n  end\nend\n\n# @param nums [Array<Integer>]\n# @returns {Array<Integer>}\ndef order_by_points(nums)\n  nums.sort_by(&digits_sum)\nend\n",
            "def special_filter(nums)\n    odds = \"13579\"\n    count = 0\n    nums.each do |n|\n        if n > 10 && n.odd? && odds.include?(n.to_s[0])\n            count += 1\n        end\n    end\n    count\nend\n",
            "def get_max_triples(n)\n    c = [0, 0, 0]\n    (1..n).each do |i|\n        a = i * i - i + 1\n        c[a % 3] += 1\n    end\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\nend\n",
            "def bf(planet1, planet2)\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    l = -1\n    r = -1\n    names.each_with_index do |name, i|\n        if name == planet1\n            l = i\n        end\n        if name == planet2\n            r = i\n        end\n    end\n    return [] if l == -1 || r == -1\n    l, r = r, l if l > r\n    return [] if l == r\n    names[l+1...r]\nend\n",
            "def sorted_list_sum(lst)\n    result = lst.select { |s| s.length.even? }\n    result.sort_by { |s| [s.length, s] }\nend\n",
            "def x_or_y(n, x, y)\n  return y if n < 2\n  (2..Math.sqrt(n)).each do |i|\n    return y if n % i == 0\n  end\n  x\nend\n",
            "def double_the_difference(lst)\n    sum = 0\n    lst.each do |n|\n        if n >= 0 && n == n.round && n.round.odd?\n            sum += (n * n).round\n        end\n    end\n    return sum\nend\n",
            "def compare(game, guess)\n    result = Array.new(game.length) { 0 }\n    game.each_with_index do |g, i|\n        result[i] = (g - guess[i]).abs\n    end\n    result\nend\n",
            "def strongest_extension(class_name, extensions)\n    max_s = -1000\n    max_ext = \"\"\n    extensions.each do |ext|\n        upper = 0\n        lower = 0\n        ext.chars.each do |c|\n            if c =~ /[A-Z]/\n                upper += 1\n            elsif c =~ /[a-z]/\n                lower += 1\n            end\n        end\n        s = upper - lower\n        if s > max_s\n            max_s = s\n            max_ext = ext\n        end\n    end\n    \"#{class_name}.#{max_ext}\"\nend\n",
            "def cycpattern_check(a, b)\n    return false if a.length < b.length\n    (0...b.length).each do |i|\n        rotated = b[i..] + b[0...i]\n        return true if a.include?(rotated)\n    end\n    false\nend\n",
            "def even_odd_count(num)\n    ds = num.abs.to_s\n    even = 0\n    ds.each_char do |d|\n        if (d.ord - '0'.ord) % 2 == 0\n            even += 1\n        end\n    end\n    [even, ds.length - even]\nend\n",
            "def int_to_mini_roman(num)\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = []\n    i = 0\n    while i < values.length\n        while num >= values[i]\n            res << numerals[i]\n            num -= values[i]\n        end\n        i += 1\n    end\n    res.join(\"\")\nend\n",
            "def right_angle_triangle(a, b, c)\n    s = [a, b, c].sort\n    return s[0]**2 + s[1]**2 == s[2]**2\nend\n",
            "def find_max(words)\n    max_cnt = 0\n    max_w = \"\"\n    words.each do |w|\n        cnt = unique_chars(w).length\n        if cnt > max_cnt\n            max_cnt = cnt\n            max_w = w\n        elsif cnt == max_cnt\n            max_w = w if w < max_w\n        end\n    end\n    max_w\nend\n\ndef unique_chars(s)\n    char_set = {}\n    s.each_char { |c| char_set[c] = true }\n    char_set.keys\nend\n",
            "# @param num [Integer]\n# @param need [Integer]\n# @param remaining [Integer]\n# @returns {Array<Integer>}\ndef eat(num, need, remaining)\n    if need <= remaining\n        return [num + need, remaining - need]\n    else\n        return [num + remaining, 0]\n    end\nend\n",
            "def do_algebra(operators, operands)\n    nums = operands.dup\n    ops = operators.dup\n    i = ops.size - 1\n    while i >= 0\n        if ops[i] == \"**\"\n            nums[i] = nums[i]**nums[i+1]\n            nums = nums.slice(i...i+1) + nums.slice(i+2..-1)\n            ops = ops.slice(i...i) + ops.slice(i+1..-1)\n        end\n        i -= 1\n    end\n    i = 0\n    while i < ops.size\n        if ops[i] == \"*\"\n            nums[i] *= nums[i+1]\n            nums = nums.slice(0...i+1) + nums.slice(i+2..-1)\n            ops = ops.slice(0...i) + ops.slice(i+1..-1)\n            i -= 1\n        elsif ops[i] == \"//\"\n            nums[i] /= nums[i+1]\n            nums = nums.slice(0...i+1) + nums.slice(i+2..-1)\n            ops = ops.slice(0...i) + ops.slice(i+1..-1)\n            i -= 1\n        end\n        i += 1\n    end\n    i = 0\n    while i < ops.size\n        if ops[i] == \"+\"\n            nums[i] += nums[i+1]\n            nums = nums.slice(0...i+1) + nums.slice(i+2..-1)\n            ops = ops.slice(0...i) + ops.slice(i+1..-1)\n            i -= 1\n        elsif ops[i] == \"-\"\n            nums[i] -= nums[i+1]\n            nums = nums.slice(0...i+1) + nums.slice(i+2..-1)\n            ops = ops.slice(0...i) + ops.slice(i+1..-1)\n            i -= 1\n        end\n        i += 1\n    end\n    nums[0]\nend\n",
            "def solve(s)\n    if !has_alpha?(s)\n        return reverse_string(s)\n    end\n\n    result = []\n    s.each_char do |ch|\n        if !(/\\p{Alpha}/ =~ ch)\n            result << ch\n        elsif ch == ch.upcase\n            result << ch.downcase\n        else\n            result << ch.upcase\n        end\n    end\n\n    result.join\nend\n\ndef has_alpha?(s)\n    s.each_char do |ch|\n        return true if /\\p{Alpha}/ =~ ch\n    end\n    false\nend\n\ndef reverse_string(s)\n    s.chars.reverse.join\nend\n",
            "def string_to_md5(txt)\n    return nil if txt.empty?\n    md5_hash = Digest::MD5.new\n    txt_bytes = txt.to_s.encoding == Encoding::UTF_8 ? txt : txt.encode(Encoding::UTF_8)\n    md5_hash.update(txt_bytes)\n    md5_encoded = md5_hash.hexdigest\n    md5_encoded\nend\n",
            "def generate_integers(a, b)\n    lower = [2, [a, b].min].max\n    upper = [[a, b].max, 8].min\n    result = []\n    for i in lower..upper\n        if i.even?\n            result << i\n        end\n    end\n    return result\nend\n"
        ],
        "swift": [
            "func hasCloseElements(_ numbers: [Double], _ threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n        for j in (i + 1)..<numbers.count {\n            if abs(numbers[i] - numbers[j]) < threshold {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc abs(_ x: Double) -> Double {\n    return x < 0 ? -x : x\n}\n",
            "func separateParenGroups(_ parenString: String) -> [String] {\n    var groups: [String] = []\n    var stk: [Character] = []\n    var currentGroup = \"\"\n    let parens = parenString.replacingOccurrences(of: \" \", with: \"\")\n    \n    for ch in parens {\n        if ch == \"(\" {\n            stk.append(ch)\n            currentGroup.append(ch)\n        } else if ch == \")\" {\n            stk.removeLast()\n            currentGroup.append(ch)\n            if stk.isEmpty {\n                groups.append(currentGroup)\n                currentGroup = \"\"\n            }\n        }\n    }\n    return groups\n}\n",
            "func truncateNumber(_ num: Double) -> Double {\n    return num - floor(num)\n}\n",
            "func belowZero(_ operations: [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance += op\n        if balance < 0 {\n            return true\n        }\n    }\n    return false\n}\n",
            "func meanAbsoluteDeviation(_ numbers: [Double]) -> Double {\n    let mean = numbers.reduce(0.0, +) / Double(numbers.count)\n    let deviation = numbers.reduce(0.0, { $0 + abs($1 - mean) })\n    return deviation / Double(numbers.count)\n}\n",
            "func intersperse(_ numbers: [Int], _ delimiter: Int) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        if i != 0 {\n            result.append(delimiter)\n        }\n        result.append(numbers[i])\n    }\n    return result\n}\n",
            "func parseNestedParens(_ parenString: String) -> [Int] {\n    var result = [Int]()\n    let parenGroups = parenString.split(separator: \" \")\n    for group in parenGroups {\n        var maxDepth = 0\n        var depth = 0\n        for ch in group {\n            if ch == \"(\" {\n                depth += 1\n                if depth > maxDepth {\n                    maxDepth = depth\n                }\n            } else if ch == \")\" {\n                depth -= 1\n            }\n        }\n        result.append(maxDepth)\n    }\n    return result\n}\n",
            "func filterBySubstring(_ strs: [String], _ substring: String) -> [String] {\n    var result: [String] = []\n    for s in strs {\n        if s.contains(substring) {\n            result.append(s)\n        }\n    }\n    return result\n}\n",
            "func sumProduct(_ numbers: [Int]) -> [Int] {\n    var n_sum = 0\n    for num in numbers {\n        n_sum += num\n    }\n    \n    var n_product = 1\n    for num in numbers {\n        n_product *= num\n    }\n    \n    return [n_sum, n_product]\n}\n",
            "func rollingMax(_ numbers: [Int]) -> [Int] {\n    var maxSoFar = Int.min\n    var result = [Int](repeating: 0, count: numbers.count)\n    for (i, num) in numbers.enumerated() {\n        if num > maxSoFar {\n            maxSoFar = num\n        }\n        result[i] = maxSoFar\n    }\n    return result\n}\n",
            "func is_palindrome(_ s: String) -> Bool {\n    let chars = Array(s)\n    for i in 0..<chars.count/2 {\n        if chars[i] != chars[chars.count-1-i] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc makePalindrome(_ s: String) -> String {\n    if is_palindrome(s) {\n        return s\n    }\n    for i in 0..<s.utf16.count {\n        let suffix = String(s.dropFirst(i))\n        if is_palindrome(suffix) {\n            let prefix = String(s.prefix(i))\n            let reversed_prefix = String(prefix.reversed())\n            return s + reversed_prefix\n        }\n    }\n    return \"\"\n}\n",
            "func stringXor(_ a: String, _ b: String) -> String {\n    var result = \"\"\n    for (i, charA) in a.enumerated() {\n        let charB = b[b.index(b.startIndex, offsetBy: i)]\n        if charA == charB {\n            result += \"0\"\n        } else {\n            result += \"1\"\n        }\n    }\n    return result\n}\n",
            "func longest(_ strs: [String]) -> String? {\n    guard !strs.isEmpty else { return nil }\n    var longestS = strs[0]\n    for s in strs {\n        if s.count > longestS.count {\n            longestS = s\n        }\n    }\n    return longestS\n}\n",
            "func greatestCommonDivisor(_ a: Int, _ b: Int) -> Int {\n    if b == 0 {\n        return a\n    } else {\n        return greatestCommonDivisor(b, a % b)\n    }\n}\n",
            "func allPrefixes(_ s: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<s.count {\n        let index = s.index(s.startIndex, offsetBy: i + 1)\n        prefixes.append(String(s[..<index]))\n    }\n    return prefixes\n}\n",
            "func stringSequence(_ n: Int) -> String {\n    var result = [String]()\n    for i in 0...n {\n        result.append(String(i))\n    }\n    return result.joined(separator: \" \")\n}\n",
            "func countDistinctCharacters(_ s: String) -> Int {\n    var charSet = Set<Character>()\n    for c in s.lowercased() {\n        charSet.insert(c)\n    }\n    return charSet.count\n}\n",
            "func parseMusic(_ musicString: String) -> [Int] {\n    let durations: [String: Int] = [\"o\": 4, \"o|\": 2, \".|\": 1]\n    let notes = musicString.split(separator: \" \")\n    var result: [Int] = []\n    for note in notes {\n        if let duration = durations[String(note)] {\n            result.append(duration)\n        }\n    }\n    return result\n}\n",
            "func howManyTimes(_ s: String, _ substring: String) -> Int {\n    var times = 0\n    let startIndex = s.startIndex\n    for i in 0...(s.count - substring.count) {\n        let start = s.index(startIndex, offsetBy: i)\n        let end = s.index(start, offsetBy: substring.count)\n        if String(s[start..<end]) == substring {\n            times += 1\n        }\n    }\n    return times\n}\n",
            "func sortNumbers(_ numbers: String) -> String {\n    let numDict = [\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    ]\n    \n    let numSlice = numbers.split(separator: \" \").map { String($0) }\n    let sortedNumbers = numSlice.sorted { numDict[$0]! < numDict[$1]! }\n    return sortedNumbers.joined(separator: \" \")\n}\n",
            "func findClosestElements(_ numbers: [Double]) -> [Double] {\n    var sortedNumbers = numbers.sorted()\n    var minDiff = Double.greatestFiniteMagnitude\n    var closestPair: [Double] = []\n\n    for i in 1..<sortedNumbers.count {\n        let diff = sortedNumbers[i] - sortedNumbers[i-1]\n        if diff < minDiff {\n            minDiff = diff\n            closestPair = [sortedNumbers[i-1], sortedNumbers[i]]\n        }\n    }\n\n    return closestPair\n}\n",
            "func rescaleToUnit(_ numbers: [Double]) -> [Double] {\n    guard !numbers.isEmpty else { return [] }\n    \n    let minNum = numbers.min()!\n    let maxNum = numbers.max()!\n    \n    if minNum == maxNum {\n        return Array(repeating: 0.0, count: numbers.count)\n    } else {\n        return numbers.map { ($0 - minNum) / (maxNum - minNum) }\n    }\n}\n",
            "func filterIntegers(_ values: [Any]) -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if let intValue = value as? Int {\n            result.append(intValue)\n        }\n    }\n    return result\n}\n",
            "func strLength(_ s: String) -> Int {\n    return s.count\n}\n",
            "func largestDivisor(_ n: Int) -> Int {\n    for i in 2..<n {\n        if n % i == 0 {\n            return n / i\n        }\n    }\n    return 1\n}\n",
            "func factorize(_ n: Int) -> [Int] {\n    var factors = [Int]()\n    var divisor = 2\n    var number = n\n    while divisor <= number {\n        if number % divisor == 0 {\n            factors.append(divisor)\n            number /= divisor\n        } else {\n            divisor += 1\n        }\n    }\n    return factors\n}\n",
            "func removeDuplicates(_ numbers: [Int]) -> [Int] {\n    var counts = [Int: Int]()\n    for num in numbers {\n        counts[num, default: 0] += 1\n    }\n    var res = [Int]()\n    for num in numbers {\n        if counts[num] == 1 {\n            res.append(num)\n        }\n    }\n    return res\n}\n",
            "func flipCase(_ s: String) -> String {\n    var flipped = \"\"\n    for ch in s {\n        if !ch.isLetter {\n            flipped.append(ch)\n        } else if ch.isLowercase {\n            flipped.append(String(ch.uppercased()))\n        } else if ch.isUppercase {\n            flipped.append(String(ch.lowercased()))\n        }\n    }\n    return flipped\n}\n",
            "func concatenate(_ strs: [String]) -> String {\n    return strs.joined()\n}\n",
            "func filterByPrefix(_ strs: [String], _ prefixStr: String) -> [String] {\n    var result: [String] = []\n    for s in strs {\n        if s.hasPrefix(prefixStr) {\n            result.append(s)\n        }\n    }\n    return result\n}\n",
            "func getPositive(_ l: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in l {\n        if num > 0 {\n            result.append(num)\n        }\n    }\n    return result\n}\n",
            "func isPrime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func poly(_ xs: [Int], _ x: Double) -> Double {\n    var res = 0.0\n    for i in 0..<xs.count {\n        res += Double(xs[i]) * pow(x, Double(i))\n    }\n    return res\n}\n\nfunc findZero(_ xs: [Int]) -> Double {\n    var x1 = 1.0\n    var x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0 {\n        x1 *= 2\n        x2 *= 2\n    }\n    while abs(x1 - x2) > 1e-10 {\n        let mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0 {\n            return mid\n        } else if poly(xs, mid) * poly(xs, x1) < 0 {\n            x2 = mid\n        } else {\n            x1 = mid\n        }\n    }\n    return (x1 + x2) / 2\n}\n",
            "func sortThird(_ l: [Int]) -> [Int] {\n    let sortedThird = l.enumerated().compactMap { $0.offset % 3 == 0 ? Optional($0.element) : nil }.sorted()\n    return l.enumerated().map { i, value in i % 3 == 0 ? sortedThird[i / 3] : value }\n}\n",
            "func listUnique(_ l: [Int]) -> [Int] {\n    var uniqueMap: [Int: Bool] = [:]\n    var result: [Int] = []\n    \n    for value in l {\n        if uniqueMap[value] == nil {\n            uniqueMap[value] = true\n            result.append(value)\n        }\n    }\n    \n    result.sort()\n    return result\n}\n",
            "func maxElement(_ l: [Int]) -> Int {\n    if l.isEmpty {\n        return 0\n    }\n    var max = l[0]\n    for v in l {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n",
            "func fizzBuzz(_ n: Int) -> Int {\n    var cnt = 0\n    for i in 0..<n {\n        if i % 11 == 0 || i % 13 == 0 {\n            cnt += countSevens(i)\n        }\n    }\n    return cnt\n}\n\nfunc countSevens(_ num: Int) -> Int {\n    var cnt = 0\n    var num = num\n    while num > 0 {\n        if num % 10 == 7 {\n            cnt += 1\n        }\n        num /= 10\n    }\n    return cnt\n}\n",
            "func sortEven(_ l: [Int]) -> [Int] {\n    var evenIndices = [Int]()\n    for (i, value) in l.enumerated() {\n        if i % 2 == 0 {\n            evenIndices.append(value)\n        }\n    }\n    evenIndices.sort()\n    \n    var sortedList = Array(repeating: 0, count: l.count)\n    var evenIndex = 0\n    for (i, _) in l.enumerated() {\n        if i % 2 == 0 {\n            sortedList[i] = evenIndices[evenIndex]\n            evenIndex += 1\n        } else {\n            sortedList[i] = l[i]\n        }\n    }\n    return sortedList\n}\n",
            "func encodeCyclic(_ s: String) -> String {\n    var result = [String]()\n    let characters = Array(s)\n    for i in stride(from: 0, to: characters.count, by: 3) {\n        if i + 3 > characters.count {\n            result.append(String(characters[i..<characters.count]))\n        } else {\n            result.append(String(characters[i+1..<i+3]))\n            result.append(String(characters[i]))\n        }\n    }\n    return result.joined()\n}\n\nfunc decodeCyclic(_ s: String) -> String {\n    return encodeCyclic(encodeCyclic(s))\n}\n",
            "func primeFib(_ n: Int) -> Int {\n    var f = [0, 1]\n    var cnt = 0\n    \n    func isPrime(_ number: Int) -> Bool {\n        if number < 2 {\n            return false\n        }\n        for i in 2...Int(sqrt(Double(number))) + 1 {\n            if number % i == 0 {\n                return false\n            }\n        }\n        return true\n    }\n    \n    while cnt < n {\n        f = [f[1], f[0] + f[1]]\n        if isPrime(f[1]) {\n            cnt += 1\n        }\n    }\n    return f[1]\n}\n",
            "func triplesSumToZero(_ l: [Int]) -> Bool {\n    for i in 0..<l.count {\n        for j in (i + 1)..<l.count {\n            for k in (j + 1)..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n",
            "func carRaceCollision(_ n: Int) -> Int {\n    return n * n\n}\n",
            "func incrList(_ l: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<l.count {\n        result.append(l[i] + 1)\n    }\n    return result\n}\n",
            "func pairsSumToZero(_ l: [Int]) -> Bool {\n    var seen = Set<Int>()\n    for num in l {\n        if seen.contains(-num) {\n            return true\n        }\n        seen.insert(num)\n    }\n    return false\n}\n",
            "func changeBase(_ x: Int, _ bas: Int) -> String {\n    if x == 0 {\n        return \"0\"\n    }\n    var digits = [String]()\n    var number = x\n    while number > 0 {\n        digits.append(String(number % bas))\n        number /= bas\n    }\n    for i in 0..<(digits.count / 2) {\n        let temp = digits[i]\n        digits[i] = digits[digits.count - 1 - i]\n        digits[digits.count - 1 - i] = temp\n    }\n    return digits.joined()\n}\n",
            "func triangleArea(_ a: Int, _ h: Int) -> Double {\n    return Double(a * h) / 2.0\n}\n",
            "func fib4(_ n: Int) -> Int {\n    var fib = [0, 0, 2, 0]\n    for i in 4...n {\n        let sum = fib.reduce(0, +)\n        fib[i % 4] = sum\n    }\n    return fib[n % 4]\n}\n",
            "func median(_ l: [Double]) -> Double {\n    let sl = l.sorted()\n    if l.count % 2 != 0 {\n        return sl[l.count / 2]\n    } else {\n        return (sl[l.count / 2] + sl[l.count / 2 - 1]) / 2\n    }\n}\n",
            "func isPalindrome(_ txt: String) -> Bool {\n    let n = txt.count\n    for i in 0..<n/2 {\n        if txt[txt.index(txt.startIndex, offsetBy: i)] != txt[txt.index(txt.endIndex, offsetBy: -(i+1))] {\n            return false\n        }\n    }\n    return true\n}\n",
            "func modp(_ n: Int, _ p: Int) -> Int {\n    var ret = 1\n    for _ in 0..<n {\n        ret = (ret * 2) % p\n    }\n    return ret\n}\n",
            "func encodeShift(_ s: String) -> String {\n    var result = \"\"\n    for ch in s {\n        let shiftedCh = Character(UnicodeScalar(((ch.asciiValue! - 97 + 5) % 26) + 97))\n        result.append(shiftedCh)\n    }\n    return result\n}\n\nfunc decodeShift(_ s: String) -> String {\n    var result = \"\"\n    for ch in s {\n        let shiftedCh = Character(UnicodeScalar(((ch.asciiValue! - 97 + 21) % 26) + 97))\n        result.append(shiftedCh)\n    }\n    return result\n}\n",
            "func removeVowels(_ txt: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for char in txt {\n        if !vowels.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n",
            "func belowThreshold(_ l: [Int], _ t: Int) -> Bool {\n    for x in l {\n        if x >= t {\n            return false\n        }\n    }\n    return true\n}\n",
            "func add(_ x: Int, _ y: Int) -> Int {\n    return x + y\n}\n",
            "func sameChars(_ s0: String, _ s1: String) -> Bool {\n    return setEqual(stringToSet(s0), stringToSet(s1))\n}\n\nfunc stringToSet(_ s: String) -> Set<Character> {\n    var m = Set<Character>()\n    for c in s {\n        m.insert(c)\n    }\n    return m\n}\n\nfunc setEqual(_ set1: Set<Character>, _ set2: Set<Character>) -> Bool {\n    if set1.count != set2.count {\n        return false\n    }\n    for key in set1 {\n        if !set2.contains(key) {\n            return false\n        }\n    }\n    return true\n}\n",
            "func fib(_ n: Int) -> Int {\n    if n <= 1 {\n        return n\n    } else {\n        return fib(n - 1) + fib(n - 2)\n    }\n}\n",
            "func correctBracketing(_ brackets: String) -> Bool {\n    var depth = 0\n    for b in brackets {\n        if b == \"<\" {\n            depth += 1\n        } else if b == \">\" {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "func monotonic(_ l: [Int]) -> Bool {\n    if l.count <= 1 {\n        return true\n    }\n\n    var increasing = true\n    var decreasing = true\n\n    for i in 1..<l.count {\n        if l[i] > l[i-1] {\n            decreasing = false\n        }\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n    }\n\n    return increasing || decreasing\n}\n",
            "func common(_ l1: [Int], _ l2: [Int]) -> [Int] {\n    let set1 = Set(l1)\n    let set2 = Set(l2)\n\n    var result: [Int] = []\n    for k in set1 {\n        if set2.contains(k) {\n            result.append(k)\n        }\n    }\n\n    return result.sorted()\n}\n",
            "func largestPrimeFactor(_ n: Int) -> Int {\n    var i = 2\n    while i * i <= n {\n        if n % i != 0 {\n            i += 1\n        } else {\n            n /= i\n        }\n    }\n    return n\n}\n",
            "func sumToN(_ n: Int) -> Int {\n    var sum = 0\n    for i in 0...n {\n        sum += i\n    }\n    return sum\n}\n",
            "func correctBracketing(_ brackets: String) -> Bool {\n    var depth = 0\n    for b in brackets {\n        if b == \"(\" {\n            depth += 1\n        } else if b == \")\" {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "func derivative(_ xs: [Int]) -> [Int] {\n\tvar result = Array(repeating: 0, count: xs.count - 1)\n\tfor i in 1..<xs.count {\n\t\tresult[i - 1] = xs[i] * i\n\t}\n\treturn result\n}\n",
            "func fibfib(_ n: Int) -> Int {\n    if n <= 1 {\n        return 0\n    }\n    var a = 0, b = 0, c = 1\n    for _ in 2..<n {\n        a = b\n        b = c\n        c = a + b + c\n    }\n    return c\n}\n",
            "func vowelsCount(_ s: String) -> Int {\n    let vowels = \"aeiou\"\n    var cnt = 0\n    for char in s.lowercased() {\n        if vowels.contains(char) || (char == \"y\" && s.index(of: Character(\"y\")) == s.index(before: s.endIndex)) {\n            cnt += 1\n        }\n    }\n    return cnt\n}\n",
            "func circularShift(_ x: Int, _ shift: Int) -> String {\n    let xStr = String(x)\n    if shift > xStr.count {\n        return reverseString(xStr)\n    } else {\n        let index = xStr.index(xStr.endIndex, offsetBy: -shift)\n        return String(xStr[index...]) + String(xStr[..<index])\n    }\n}\n\nfunc reverseString(_ s: String) -> String {\n    var runes = Array(s)\n    for i in 0 ..< runes.count / 2 {\n        let temp = runes[i]\n        runes[i] = runes[runes.count - 1 - i]\n        runes[runes.count - 1 - i] = temp\n    }\n    return String(runes)\n}\n",
            "func digitSum(_ s: String) -> Int {\n    var sum = 0\n    for c in s {\n        if c >= \"A\" && c <= \"Z\" {\n            sum += Int(c.asciiValue ?? 0)\n        }\n    }\n    return sum\n}\n",
            "func fruitDistribution(_ s: String, _ n: Int) -> Int {\n    let words = s.split(separator: \" \")\n    if let applesIndex = words.firstIndex(of: \"apples\"), let orangesIndex = words.firstIndex(of: \"oranges\") {\n        let apples = Int(words[applesIndex - 1]) ?? 0\n        let oranges = Int(words[orangesIndex - 1]) ?? 0\n        return n - apples - oranges\n    }\n    return n\n}\n",
            "func pluck(_ arr: [Int]) -> [Int] {\n    var evens = [Int]()\n    for n in arr {\n        if n % 2 == 0 {\n            evens.append(n)\n        }\n    }\n    guard !evens.isEmpty else {\n        return []\n    }\n    let minEven = evens.min()!\n    var index = -1\n    for i in stride(from: 0, to: arr.count, by: 1) {\n        if arr[i] == minEven {\n            index = i\n            break\n        }\n    }\n    return [minEven, index]\n}\n",
            "func search(_ lst: [Int]) -> Int {\n    var freqs = [Int: Int]()\n    for n in lst {\n        if let count = freqs[n] {\n            freqs[n] = count + 1\n        } else {\n            freqs[n] = 1\n        }\n    }\n    var goodVals = [Int]()\n    for (k, v) in freqs {\n        if v >= k {\n            goodVals.append(k)\n        }\n    }\n    if goodVals.isEmpty {\n        return -1\n    }\n    let maxVal = goodVals.max()!\n    return maxVal\n}\n",
            "func strangeSortList(_ lst: [Int]) -> [Int] {\n    var sl = lst.sorted()\n    var result: [Int] = []\n    var left = 0\n    var right = sl.count - 1\n    while left <= right {\n        result.append(sl[left])\n        left += 1\n        if left <= right {\n            result.append(sl[right])\n            right -= 1\n        }\n    }\n    return result\n}\n",
            "func triangleArea(_ a: Int, _ b: Int, _ c: Int) -> Double {\n    if a + b > c && a + c > b && b + c > a {\n        let s = Double(a + b + c) / 2.0\n        return sqrt(s * (s - Double(a)) * (s - Double(b)) * (s - Double(c)))\n    } else {\n        return -1.0\n    }\n}\n",
            "func willItFly(_ q: [Int], _ w: Int) -> Bool {\n    if q.isEmpty {\n        return false\n    }\n    var is_palin = true\n    for i in 0..<q.count {\n        if q[i] != q[q.count - i - 1] {\n            is_palin = false\n            break\n        }\n    }\n    let total = q.reduce(0, +)\n    return is_palin && total <= w\n}\n",
            "func smallestChange(_ arr: [Int]) -> Int {\n    var ans = 0\n    for i in 0..<arr.count / 2 {\n        if arr[i] != arr[arr.count - i - 1] {\n            ans += 1\n        }\n    }\n    return ans\n}\n",
            "func totalMatch(_ lst1: [String], _ lst2: [String]) -> [String] {\n    let cnt1 = lst1.reduce(0) { $0 + $1.count }\n    let cnt2 = lst2.reduce(0) { $0 + $1.count }\n    return (cnt1 <= cnt2) ? lst1 : lst2\n}\n",
            "func isPrime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    let limit = Int(sqrt(Double(n)))\n    for i in 2...limit {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc isMultiplyPrime(_ a: Int) -> Bool {\n    var cnt = 0\n    var number = a\n    for i in 2...number {\n        if isPrime(i) {\n            while number % i == 0 {\n                cnt += 1\n                number /= i\n            }\n        }\n    }\n    return cnt == 3\n}\n",
            "func isSimplePower(_ x: Int, _ n: Int) -> Bool {\n    if n < 2 {\n        return x == n\n    }\n    var tmp = 1\n    while tmp < x {\n        tmp *= n\n    }\n    return tmp == x\n}\n",
            "func isCube(_ a: Int) -> Bool {\n    let absA = abs(a)\n    let root = Int(round(pow(Double(absA), 1.0 / 3.0)))\n    return root * root * root == absA\n}\n",
            "func hexKey(_ num: String) -> Int {\n    var count = 0\n    for x in num {\n        if x == \"2\" || x == \"3\" || x == \"5\" || x == \"7\" || x == \"B\" || x == \"D\" {\n            count += 1\n        }\n    }\n    return count\n}\n",
            "func decimalToBinary(_ dec: Int) -> String {\n    let binary = String(dec, radix: 2)\n    return \"db\\(binary)db\"\n}\n",
            "func isHappy(_ s: String) -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    let chars = Array(s)\n    for i in 0..<(chars.count - 2) {\n        if chars[i] == chars[i+1] || chars[i] == chars[i+2] || chars[i+1] == chars[i+2] {\n            return false\n        }\n    }\n    return true\n}\n",
            "func numericalLetterGrade(_ grades: [Double]) -> [String] {\n    var result = [String]()\n    for g in grades {\n        if g == 4.0 {\n            result.append(\"A+\")\n        } else if g > 3.7 {\n            result.append(\"A\")\n        } else if g > 3.3 {\n            result.append(\"A-\")\n        } else if g > 3.0 {\n            result.append(\"B+\")\n        } else if g > 2.7 {\n            result.append(\"B\")\n        } else if g > 2.3 {\n            result.append(\"B-\")\n        } else if g > 2.0 {\n            result.append(\"C+\")\n        } else if g > 1.7 {\n            result.append(\"C\")\n        } else if g > 1.3 {\n            result.append(\"C-\")\n        } else if g > 1.0 {\n            result.append(\"D+\")\n        } else if g > 0.7 {\n            result.append(\"D\")\n        } else if g > 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"E\")\n        }\n    }\n    return result\n}\n",
            "func primeLength(_ s: String) -> Bool {\n    let length = s.count\n    if length < 2 {\n        return false\n    }\n    for i in 2...Int(sqrt(Double(length))) {\n        if length % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func startsOneEnds(_ n: Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    return 2 * 9 * Int(pow(10.0, Double(n - 2)))\n}\n",
            "func solve(_ n: Int) -> String {\n    var digitsSum = 0\n    var number = n\n    \n    while number > 0 {\n        let digit = number % 10\n        digitsSum += digit\n        number /= 10\n    }\n    \n    return String(digitsSum, radix: 2)\n}\n",
            "func add(_ lst: [Int]) -> Int {\n    var sum = 0\n    for (i, x) in lst.enumerated() {\n        if i % 2 == 1 && x % 2 == 0 {\n            sum += x\n        }\n    }\n    return sum\n}\n",
            "func antiShuffle(_ s: String) -> String {\n    let words = s.split(separator: \" \")\n    var sortedWords = [String]()\n    \n    for word in words {\n        let runicArray = Array(word)\n        let sortedRunicArray = runicArray.sorted()\n        let sortedWord = String(sortedRunicArray)\n        sortedWords.append(sortedWord)\n    }\n    \n    return sortedWords.joined(separator: \" \")\n}\n",
            "func getRow(_ lst: [[Int]], _ x: Int) -> [[Int]] {\n    var coords = [[Int]]()\n    for i in 0..<lst.count {\n        for j in 0..<lst[i].count {\n            if lst[i][j] == x {\n                coords.append([i, j])\n            }\n        }\n    }\n    coords.sort { (coord1, coord2) -> Bool in\n        if coord1[0] == coord2[0] {\n            return coord1[1] > coord2[1]\n        }\n        return coord1[0] < coord2[0]\n    }\n    return coords\n}\n",
            "func sortArray(_ arr: [Int]) -> [Int] {\n    if arr.isEmpty {\n        return []\n    }\n    if (arr.first! + arr.last!) % 2 == 0 {\n        return arr.sorted(by: >)\n    } else {\n        return arr.sorted()\n    }\n}\n",
            "func encrypt(_ s: String) -> String {\n    var result = \"\"\n    for ch in s {\n        let shifted = UnicodeScalar(ch.asciiValue! + 4)\n        if shifted.value > 122 { // 'z'\n            let newChar = UnicodeScalar(shifted.value - 26)!\n            result.append(Character(newChar))\n        } else {\n            result.append(Character(shifted))\n        }\n    }\n    return result\n}\n",
            "func nextSmallest(_ lst: [Int]) -> Int? {\n    let sl = Array(Set(lst)).sorted()\n    if sl.count < 2 {\n        return nil\n    }\n    return sl[1]\n}\n",
            "func isBored(_ s: String) -> Int {\n    let sentences = s.split { \".!?\".contains($0) || $0.isWhitespace }\n    return sentences.filter { $0.count >= 2 && String($0.prefix(2)) == \"I \" }.count\n}\n",
            "func anyInt(_ x: Any, _ y: Any, _ z: Any) -> Bool {\n    if let xInt = x as? Int, let yInt = y as? Int, let zInt = z as? Int {\n        return (xInt + yInt == zInt) || (xInt + zInt == yInt) || (yInt + zInt == xInt)\n    }\n    return false\n}\n",
            "func encode(_ message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    var result = \"\"\n\n    for ch in message {\n        if ch.isLetter {\n            var ch1 = ch\n            if ch.isLowercase {\n                ch1 = Character(ch.uppercased())\n            } else {\n                ch1 = Character(ch.lowercased())\n            }\n            if vowels.contains(ch1) {\n                let asciiValue = ch1.asciiValue!\n                ch1 = Character(UnicodeScalar(asciiValue + 2)!)\n            }\n            result.append(ch1)\n        } else {\n            result.append(ch)\n        }\n    }\n\n    return result\n}\n",
            "func skjkasdkd(_ lst: [Int]) -> Int {\n    var primes = [Int]()\n    for n in lst {\n        if isPrime(n) {\n            primes.append(n)\n        }\n    }\n    if primes.isEmpty {\n        return 0\n    }\n    let largest = String(max(primes))\n    var sum = 0\n    for digit in largest {\n        sum += Int(String(digit))!\n    }\n    return sum\n}\n\nfunc isPrime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2...Int(Double(n).squareRoot()) {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func checkDictCase(_ d: [String:String]) -> Bool {\n    if d.isEmpty {\n        return false\n    }\n    let allLowerCase = d.keys.allSatisfy { $0.isLowercase }\n    let allUpperCase = d.keys.allSatisfy { $0.isUppercase }\n    return allLowerCase || allUpperCase\n}\n",
            "func countUpTo(_ n: Int) -> [Int] {\n    var primes = [Int]()\n    for num in 2..<n {\n        var isPrime = true\n        for prime in primes {\n            if num % prime == 0 {\n                isPrime = false\n                break\n            }\n        }\n        if isPrime {\n            primes.append(num)\n        }\n    }\n    return primes\n}\n",
            "func abs(_ x: Int) -> Int {\n    if x < 0 {\n        return -x\n    }\n    return x\n}\n\nfunc multiply(_ a: Int, _ b: Int) -> Int {\n    return (abs(a) % 10) * (abs(b) % 10)\n}\n",
            "func countUpper(_ s: String) -> Int {\n    let vowels = \"AEIOU\"\n    var count = 0\n    for (i, c) in s.enumerated() {\n        if i % 2 == 0 && vowels.contains(c) {\n            count += 1\n        }\n    }\n    return count\n}\n",
            "func closestInteger(_ value: String) -> Int {\n    if let num = Double(value) {\n        return num >= 0 ? Int(num + 0.5) : Int(num - 0.5)\n    }\n    return 0 // or handle the error case as needed\n}\n",
            "func makeAPile(_ n: Int) -> [Int] {\n    var pile = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n        pile[i] = n + 2 * i\n    }\n    return pile\n}\n",
            "func wordsString(_ s: String) -> [String] {\n    let words = s.split { $0 == \",\" || $0 == \" \" }\n    var result: [String] = []\n    for w in words {\n        if !w.isEmpty {\n            result.append(String(w))\n        }\n    }\n    return result\n}\n",
            "func chooseNum(_ x: Int, _ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    if x != y {\n        return y - 1\n    }\n    return -1\n}\n",
            "func roundedAvg(_ n: Int, _ m: Int) -> String? {\n    if n > m {\n        return nil\n    }\n    let r_avg = Int((Double(m) + Double(n)) / 2.0 + 0.5)\n    return String(r_avg, radix: 2)\n}\n",
            "func uniqueDigits(_ x: [Int]) -> [Int] {\n    func allDigitsOdd(_ s: String) -> Bool {\n        for digit in s {\n            if let d = Int(String(digit)), d % 2 == 0 {\n                return false\n            }\n        }\n        return true\n    }\n    \n    var result = [Int]()\n    for num in x {\n        if allDigitsOdd(\"\\(num)\") {\n            result.append(num)\n        }\n    }\n    return result.sorted()\n}\n",
            "func byLength(_ arr: [Int]) -> [String] {\n    let digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    var sortedArr = arr.filter { $0 >= 1 && $0 <= 9 }\n    sortedArr.sort(by: >)\n    return sortedArr.map { digitNames[$0 - 1] }\n}\n",
            "func f(_ n: Int) -> [Int] {\n    var nums = Array(repeating: 0, count: n)\n    for i in 1...n {\n        nums[i - 1] = i\n    }\n    \n    var result = Array(repeating: 0, count: n)\n    for i in 0..<n {\n        if (i + 1) % 2 != 0 {\n            var sum = 0\n            for j in 0...i {\n                sum += nums[j]\n            }\n            result[i] = sum\n        } else {\n            var product = 1\n            for j in 0...i {\n                product *= nums[j]\n            }\n            result[i] = product\n        }\n    }\n    \n    return result\n}\n",
            "func evenOddPalindrome(_ n: Int) -> [Int] {\n    var cnt = [0, 0]\n    for i in 1...n {\n        if isPalindrome(String(i)) {\n            cnt[i % 2] += 1\n        }\n    }\n    return cnt\n}\n\nfunc isPalindrome(_ s: String) -> Bool {\n    let characters = Array(s)\n    let length = characters.count\n    for i in 0..<length / 2 {\n        if characters[i] != characters[length - 1 - i] {\n            return false\n        }\n    }\n    return true\n}\n",
            "func digitsSum(_ n: Int) -> Int {\n    let nStr = String(n)\n    if n >= 0 {\n        return nStr.compactMap { $0.wholeNumberValue }.reduce(0, +)\n    } else {\n        return Int(String(nStr.prefix(2)))! * 2 + digitsSum(abs(n))\n    }\n}\n\nfunc countNums(_ arr: [Int]) -> Int {\n    return arr.filter { digitsSum($0) > 0 }.count\n}\n",
            "func moveOneBall(_ arr: [Int]) -> Bool {\n    if arr.isEmpty {\n        return true\n    }\n    let sortedArr = arr.sorted()\n    for i in 0..<arr.count {\n        if Array(arr[i...]) == Array(sortedArr.prefix(upTo: arr.count - i)) && Array(arr.prefix(upTo: i)) == Array(sortedArr.suffix(from: arr.count - i)) {\n            return true\n        }\n    }\n    return false\n}\n",
            "func canExchange(_ lst1: [Int], _ lst2: [Int]) -> String {\n    var oddCnt = 0\n    for num in lst1 {\n        if num % 2 != 0 {\n            oddCnt += 1\n        }\n    }\n    var evenCnt = 0\n    for num in lst2 {\n        if num % 2 == 0 {\n            evenCnt += 1\n        }\n    }\n    if evenCnt >= oddCnt {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n",
            "func histogram(_ test: String) -> [String:Int] {\n    var freq = [String: Int]()\n    let words = test.split(separator: \" \")\n    for word in words {\n        if !word.isEmpty {\n            let wordStr = String(word)\n            freq[wordStr, default: 0] += 1\n        }\n    }\n    var result = [String:Int]()\n    if freq.count > 0 {\n        let maxFreq = freq.values.max() ?? 0\n        for (k, v) in freq {\n            if v == maxFreq {\n                result[k] = v\n            }\n        }\n    }\n    return result\n}\n",
            "func reverseDelete(_ s: String, _ c: String) -> [String] {\n    var s1 = \"\"\n    for char in s {\n        if !c.contains(char) {\n            s1.append(char)\n        }\n    }\n    func isPalindrome(_ str: String) -> Bool {\n        let n = str.count\n        for i in 0..<n/2 {\n            let index1 = str.index(str.startIndex, offsetBy: i)\n            let index2 = str.index(str.endIndex, offsetBy: -(i + 1))\n            if str[index1] != str[index2] {\n                return false\n            }\n        }\n        return true\n    }\n    var result = [s1]\n    if isPalindrome(s1) {\n        result.append(\"yes\")\n    } else {\n        result.append(\"no\")\n    }\n    return result\n}\n",
            "func oddCount(_ lst: [String]) -> [String] {\n    var result = [String]()\n    for num in lst {\n        var n = 0\n        for d in num {\n            if let digit = Int(String(d)), digit % 2 == 1 {\n                n += 1\n            }\n        }\n        let rs = \"the number of odd elements in the string \\(n) of the input.\"\n        result.append(rs)\n    }\n    return result\n}\n",
            "func minSubArraySum(_ nums: [Int]) -> Int {\n    var min_sum = 0\n    var cur_sum = 0\n    for n in nums {\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    }\n    if min_sum == 0 {\n        min_sum = nums.min() ?? Int.max\n    }\n    return min_sum\n}\n",
            "func maxFill(_ grid: [[Int]], _ capacity: Int) -> Int {\n    var sum = 0\n    for arr in grid {\n        let rowSum = arr.reduce(0, +)\n        if rowSum % capacity != 0 {\n            sum += rowSum / capacity + 1\n        } else {\n            sum += rowSum / capacity\n        }\n    }\n    return sum\n}\n",
            "func countOnes(_ num: Int) -> Int {\n    return String(num, radix: 2).filter { $0 == \"1\" }.count\n}\n\nfunc sortArray(_ arr: [Int]) -> [Int] {\n    return arr.sorted { (x, y) -> Bool in\n        let onesX = countOnes(x)\n        let onesY = countOnes(y)\n        if onesX == onesY {\n            return x < y\n        }\n        return onesX < onesY\n    }\n}\n",
            "func selectWords(_ s: String, _ n: Int) -> [String] {\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    let words = s.split(separator: \" \")\n    var result: [String] = []\n    for word in words {\n        var count = 0\n        for char in word {\n            if consonants.contains(char.lowercased()) {\n                count += 1\n            }\n        }\n        if count == n {\n            result.append(String(word))\n        }\n    }\n    return result\n}\n",
            "func getClosestVowel(_ word: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    for i in stride(from: word.count - 2, through: 0, by: -1) {\n        if let char = word.index(word.startIndex, offsetBy: i, limitedBy: word.endIndex) {\n            let currentChar = word[char]\n            let prevChar = (i > 0 && char > word.startIndex) ? word[word.index(before: char)] : \"\"\n            let nextChar = (char < word.index(before: word.endIndex)) ? word[word.index(after: char)] : \"\"\n            \n            if vowels.contains(currentChar) && !vowels.contains(prevChar) && !vowels.contains(nextChar) {\n                return String(currentChar)\n            }\n        }\n    }\n    return \"\"\n}\n",
            "func matchParens(_ lst: [String]) -> String {\n    func check(_ s: String) -> Bool {\n        var depth = 0\n        for ch in s {\n            if ch == \"(\" {\n                depth += 1\n            } else {\n                depth -= 1\n            }\n            if depth < 0 {\n                return false\n            }\n        }\n        return depth == 0\n    }\n    \n    let s1 = lst[0] + lst[1]\n    let s2 = lst[1] + lst[0]\n    if check(s1) || check(s2) {\n        return \"Yes\"\n    }\n    return \"No\"\n}\n",
            "func maximum(_ arr: [Int], _ k: Int) -> [Int] {\n    if k == 0 {\n        return []\n    }\n    return arr.sorted().suffix(k).map { $0 }\n}\n",
            "func solution(_ lst: [Int]) -> Int {\n    var sum = 0\n    for (i, x) in lst.enumerated() {\n        if i % 2 == 0 && x % 2 != 0 {\n            sum += x\n        }\n    }\n    return sum\n}\n",
            "func addElements(_ arr: [Int], _ k: Int) -> Int {\n    var sum = 0\n    for i in 0..<min(k, arr.count) {\n        if let n = safeElement(at: i, in: arr), n >= -99 && n <= 99 {\n            sum += n\n        }\n    }\n    return sum\n}\n\nfunc safeElement(at index: Int, in array: [Int]) -> Int? {\n    guard index < array.count else { return nil }\n    return array[index]\n}\n",
            "func getOddCollatz(_ n: Int) -> [Int] {\n    var collatz = [1]\n    var current = n\n    while current != 1 {\n        if current % 2 != 0 {\n            collatz.append(current)\n            current = 3 * current + 1\n        } else {\n            current /= 2\n        }\n    }\n    collatz.sort()\n    return collatz\n}\n",
            "func validDate(_ date: String) -> Bool {\n    if date.count != 10 || date[2] != \"-\" || date[5] != \"-\" {\n        return false\n    }\n    let month = Int(String(date.prefix(2))) ?? 0\n    let day = Int(String(date.dropFirst(3).prefix(2))) ?? 0\n    if [1, 3, 5, 7, 8, 10, 12].contains(month) && day >= 1 && day <= 31 {\n        return true\n    }\n    if [4, 6, 9, 11].contains(month) && day >= 1 && day <= 30 {\n        return true\n    }\n    if month == 2 && day >= 1 && day <= 29 {\n        return true\n    }\n    return false\n}\n",
            "func splitWords(_ txt: String) -> [String] {\n    if txt.contains(\" \") {\n        return txt.split(separator: \" \").map { String($0) }\n    } else if txt.contains(\",\") {\n        return txt.split(separator: \",\").map { String($0) }\n    } else {\n        var count = 0\n        for c in txt {\n            if c.isLowercase && Int(String(c))! % 2 == 0 {\n                count += 1\n            }\n        }\n        return [String(count)]\n    }\n}\n",
            "func isSorted(_ lst: [Int]) -> Bool {\n    if lst.isEmpty {\n        return true\n    }\n    for i in 1..<lst.count {\n        if lst[i - 1] > lst[i] {\n            return false\n        }\n    }\n    var freq = [Int: Int]()\n    for num in lst {\n        freq[num, default: 0] += 1\n    }\n    for count in freq.values {\n        if count > 2 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func intersection(_ interval1: [Int], _ interval2: [Int]) -> String {\n    func isPrime(_ n: Int) -> Bool {\n        if n < 2 {\n            return false\n        }\n        for i in stride(from: 2, through: Int(sqrt(Double(n))), by: 1) {\n            if n % i == 0 {\n                return false\n            }\n        }\n        return true\n    }\n\n    let l = max(interval1[0], interval2[0])\n    let r = min(interval1[1], interval2[1])\n    let length = r - l\n    if length > 0 && isPrime(length) {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n",
            "func prodSigns(_ arr: [Int]) -> Int? {\n    guard !arr.isEmpty else { return nil }\n    for n in arr {\n        if n == 0 {\n            return 0\n        }\n    }\n    var sign = -1\n    var negativeCount = 0\n    for n in arr {\n        if n < 0 {\n            negativeCount += 1\n        }\n    }\n    if negativeCount % 2 == 0 {\n        sign = 1\n    }\n    let sum = arr.reduce(0) { $0 + abs($1) }\n    return sign * sum\n}\n",
            "func minPath(_ grid: [[Int]], _ k: Int) -> [Int] {\n    let n = grid.count\n    var minVal = n * n + 1\n    for i in 0..<n {\n        for j in 0..<n {\n            if grid[i][j] == 1 {\n                var temp: [Int] = []\n                if i != 0 {\n                    temp.append(grid[i-1][j])\n                }\n                if j != 0 {\n                    temp.append(grid[i][j-1])\n                }\n                if i != n-1 {\n                    temp.append(grid[i+1][j])\n                }\n                if j != n-1 {\n                    temp.append(grid[i][j+1])\n                }\n                for val in temp {\n                    if val < minVal {\n                        minVal = val\n                    }\n                }\n            }\n        }\n    }\n    var result = [Int](repeating: 1, count: k)\n    for i in 0..<k {\n        if i % 2 != 0 {\n            result[i] = minVal\n        }\n    }\n    return result\n}\n",
            "func tri(_ n: Int) -> [Int] {\n    if n == 0 {\n        return [1]\n    }\n    var seq = [1, 3]\n    for i in 2...n {\n        if i % 2 == 0 {\n            seq.append(i / 2 + 1)\n        } else {\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) / 2)\n        }\n    }\n    return seq\n}\n",
            "func digits(_ n: Int) -> Int {\n    var odds = [Int]()\n    for digit in String(n) {\n        if let num = Int(String(digit)), num % 2 == 1 {\n            odds.append(num)\n        }\n    }\n    var result = 1\n    for o in odds {\n        result *= o\n    }\n    if !odds.isEmpty {\n        return result\n    }\n    return 0\n}\n",
            "func isNested(_ s: String) -> Bool {\n    var openIdx = [Int]()\n    var closeIdx = [Int]()\n\n    for (i, ch) in s.enumerated() {\n        if ch == \"[\" {\n            openIdx.append(i)\n        } else if ch == \"]\" {\n            closeIdx.append(i)\n        }\n    }\n\n    for i in 0..<closeIdx.count / 2 {\n        let j = closeIdx.count - i - 1\n       (closeIdx[i], closeIdx[j]) = (closeIdx[j], closeIdx[i])\n    }\n\n    var cnt = 0\n    var i = 0\n    let l = closeIdx.count\n    for idx in openIdx {\n        if i < l && idx < closeIdx[i] {\n            cnt += 1\n            i += 1\n        }\n    }\n    return cnt >= 2\n}\n",
            "func sumSquares(_ lst: [Double]) -> Int {\n    var sum = 0\n    for n in lst {\n        sum += Int(pow(ceil(n), 2))\n    }\n    return sum\n}\n",
            "func checkIfLastCharIsALetter(_ txt: String) -> Bool {\n    if txt.isEmpty {\n        return false\n    }\n    let last = String(txt.split(separator: \" \").last ?? \"\")\n    return last.count == 1 && last.unicodeScalars.first?.properties.isLetter == true\n}\n",
            "func canArrange(_ arr: [Int]) -> Int {\n    if arr.count <= 1 {\n        return -1\n    }\n    var idx = -1\n    for i in 1..<arr.count {\n        if arr[i] < arr[i - 1] {\n            idx = i\n        }\n    }\n    return idx\n}\n",
            "func largestSmallestIntegers(_ lst: [Int]) -> [Int?] {\n    var neg = [Int]()\n    var pos = [Int]()\n\n    for i in lst {\n        if i < 0 {\n            neg.append(i)\n        }\n        if i > 0 {\n            pos.append(i)\n        }\n    }\n\n    var maxNeg: Int?\n    if let firstNeg = neg.first {\n        maxNeg = firstNeg\n        for n in neg {\n            if n > maxNeg! {\n                maxNeg = n\n            }\n        }\n    }\n\n    var minPos: Int?\n    if let firstPos = pos.first {\n        minPos = firstPos\n        for p in pos {\n            if p < minPos! {\n                minPos = p\n            }\n        }\n    }\n\n    return [maxNeg, minPos]\n}\n",
            "func compareOne(_ a: Any, _ b: Any) -> Double? {\n    func anyToReal(o: Any) throws -> Double {\n        switch o {\n        case let s as String:\n            if let f = Double(s.replacingOccurrences(of: \",\", with: \".\")) {\n                return f\n            } else {\n                throw NSError(domain: \"Invalid float representation\", code: 1, userInfo: [NSLocalizedDescriptionKey: s])\n            }\n        case let i as Int:\n            return Double(i)\n        case let f as Double:\n            return f\n        default:\n            throw NSError(domain: \"Unsupported type\", code: 2, userInfo: [NSLocalizedDescriptionKey: String(describing: types(of: o))])\n        }\n    }\n\n    do {\n        let a1 = try anyToReal(o: a)\n        let b1 = try anyToReal(o: b)\n        if a1 == b1 {\n            return nil\n        } else if a1 > b1 {\n            return a1\n        } else {\n            return b1\n        }\n    } catch {\n        fatalError(\"\\(error)\")\n    }\n}\n",
            "func isEqualToSumEven(_ n: Int) -> Bool {\n    return n % 2 == 0 && n >= 8\n}\n",
            "func specialFactorial(_ n: Int) -> Int {\n    var fact = 1\n    var result = 1\n    for i in 1...n {\n        fact *= i\n        result *= fact\n    }\n    return result\n}\n",
            "func fixSpaces(_ txt: String) -> String {\n    let regex = try! NSRegularExpression(pattern: \"\\\\s{3,}\", options: [])\n    var modifiedTxt = regex.stringByReplacingMatches(in: txt, options: [], range: NSRange(location: 0, length: txt.utf16.count), withTemplate: \"-\")\n    modifiedTxt = modifiedTxt.replacingOccurrences(of: \" \", with: \"_\")\n    return modifiedTxt\n}\n",
            "func fileNameCheck(_ fileName: String) -> String {\n    let suf = [\"txt\", \"exe\", \"dll\"]\n    let lst = fileName.split(separator: \".\")\n    \n    if lst.count != 2 || !suf.contains(String(lst[1])) || lst[0].isEmpty || !lst[0].first!.isLetter || countDigits(in: String(lst[0])) > 3 {\n        return \"No\"\n    }\n    return \"Yes\"\n}\n\nfunc contains<T>(_ array: [T], _ element: T) -> Bool where T : Equatable {\n    for item in array {\n        if item == element {\n            return true\n        }\n    }\n    return false\n}\n\nfunc countDigits(in s: String) -> Int {\n    var count = 0\n    for c in s {\n        if c.isNumber {\n            count += 1\n        }\n    }\n    return count\n}\n",
            "func sumSquares(_ lst: [Int]) -> Int {\n    var result = 0\n    for i in 0..<lst.count {\n        if i % 3 == 0 {\n            result += lst[i] * lst[i]\n        } else if i % 4 == 0 {\n            result += lst[i] * lst[i] * lst[i]\n        } else {\n            result += lst[i]\n        }\n    }\n    return result\n}\n",
            "func wordsInSentence(_ sentence: String) -> String {\n    let words = sentence.split(separator: \" \")\n    var primeWords: [Substring] = []\n    for w in words {\n        if isPrime(Int(w.count)) {\n            primeWords.append(w)\n        }\n    }\n    return primeWords.joined(separator: \" \")\n}\n\nfunc isPrime(_ n: Int) -> Bool {\n    guard n >= 2 else { return false }\n    for i in 2...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func simplify(_ x: String, _ n: String) -> Bool {\n    let xs = x.split(separator: \"/\")\n    let ns = n.split(separator: \"/\")\n    let num = Int(xs[0]) ?? 0\n    let den = Int(xs[1]) ?? 0\n    let numer = Int(ns[0]) ?? 0\n    let denom = Int(ns[1]) ?? 0\n    return (num * numer) % (den * denom) == 0\n}\n",
            "func digitsSum(_ n: Int) -> Int {\n    let nStr = String(n)\n    if n >= 0 {\n        return nStr.compactMap { $0.wholeNumberValue }.reduce(0, +)\n    } else {\n        return (Int(nStr.prefix(2)) ?? 0) * 2 + digitsSum(abs(n))\n    }\n}\n\nfunc orderByPoints(_ nums: [Int]) -> [Int] {\n    return nums.sorted(by: { digitsSum($0) < digitsSum($1) })\n}\n",
            "func specialFilter(_ nums: [Int]) -> Int {\n    let odds = \"13579\"\n    var count = 0\n    for n in nums {\n        let strN = String(n)\n        if n > 10 && n % 2 == 1 && odds.contains(strN.first!) {\n            count += 1\n        }\n    }\n    return count\n}\n",
            "func getMaxTriples(_ n: Int) -> Int {\n    var c = [0, 0, 0]\n    for i in 1...n {\n        let a = i * i - i + 1\n        c[a % 3] += 1\n    }\n    return (c[0] * c[1] * c[2]) + ((c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6)\n}\n",
            "func bf(_ planet1: String, _ planet2: String) -> [String] {\n    let names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    var l = -1\n    var r = -1\n    for (i, name) in names.enumerated() {\n        if name == planet1 {\n            l = i\n        }\n        if name == planet2 {\n            r = i\n        }\n    }\n    if l == -1 || r == -1 {\n        return []\n    }\n    if l > r {\n        (l, r) = (r, l)\n    }\n    if l == r {\n        return []\n    }\n    return Array(names[(l + 1)...r])\n}\n",
            "func sortedListSum(_ lst: [String]) -> [String] {\n    var result = lst.filter { $0.count % 2 == 0 }\n    result.sort {\n        if $0.count == $1.count {\n            return $0 < $1\n        }\n        return $0.count < $1.count\n    }\n    return result\n}\n",
            "func xOrY(_ n: Int, _ x: Int, _ y: Int) -> Int {\n    if n < 2 {\n        return y\n    }\n    for i in 2...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n            return y\n        }\n    }\n    return x\n}\n",
            "func doubleTheDifference(_ lst: [Double]) -> Int {\n    var sum = 0\n    for n in lst {\n        if n >= 0 && n == Double(Int(n)) && Int(n) % 2 == 1 {\n            sum += Int(n * n)\n        }\n    }\n    return sum\n}\n",
            "func compare(_ game: [Int], _ guess: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<game.count {\n        result.append(abs(game[i] - guess[i]))\n    }\n    return result\n}\n\nfunc abs(_ x: Int) -> Int {\n    if x < 0 {\n        return -x\n    }\n    return x\n}\n",
            "func strongestExtension(_ className: String, _ extensions: [String]) -> String {\n    var maxS = -1000\n    var maxExt = \"\"\n    for ext in extensions {\n        var upper = 0\n        var lower = 0\n        for c in ext {\n            if CharacterSet.uppercaseLetters.contains(c.unicodeScalars.first!) {\n                upper += 1\n            } else if CharacterSet.lowercaseLetters.contains(c.unicodeScalars.first!) {\n                lower += 1\n            }\n        }\n        let s = upper - lower\n        if s > maxS {\n            maxS = s\n            maxExt = ext\n        }\n    }\n    return className + \".\" + maxExt\n}\n",
            "func cycpatternCheck(_ a: String, _ b: String) -> Bool {\n    if a.count < b.count {\n        return false\n    }\n    for i in 0..<b.count {\n        let index = b.index(b.startIndex, offsetBy: i)\n        let rotated = b[index...] + b[..<index]\n        if a.contains(rotated) {\n            return true\n        }\n    }\n    return false\n}\n",
            "func evenOddCount(_ num: Int) -> [Int] {\n    let ds = String(abs(num))\n    var even = 0\n    for d in ds {\n        if (d.wholeNumberValue! - 0) % 2 == 0 {\n            even += 1\n        }\n    }\n    return [even, ds.count - even]\n}\n",
            "func intToMiniRoman(_ num: Int) -> String {\n    let values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    let numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    var res: [String] = []\n    var num = num\n    for i in 0..<values.count {\n        while num >= values[i] {\n            res.append(numerals[i])\n            num -= values[i]\n        }\n    }\n    return res.joined()\n}\n",
            "func rightAngleTriangle(_ a: Int, _ b: Int, _ c: Int) -> Bool {\n    var s = [a, b, c]\n    s.sort()\n    return s[0]*s[0] + s[1]*s[1] == s[2]*s[2]\n}\n",
            "func findMax(_ words: [String]) -> String {\n    var maxCnt = 0\n    var maxW = \"\"\n    for w in words {\n        let cnt = uniqueChars(w).count\n        if cnt > maxCnt {\n            maxCnt = cnt\n            maxW = w\n        } else if cnt == maxCnt {\n            if w < maxW {\n                maxW = w\n            }\n        }\n    }\n    return maxW\n}\n\nfunc uniqueChars(_ s: String) -> Set<Character> {\n    var charSet = Set<Character>()\n    for c in s {\n        charSet.insert(c)\n    }\n    return charSet\n}\n",
            "func eat(_ num: Int, _ need: Int, _ remaining: Int) -> [Int] {\n    if need <= remaining {\n        return [num + need, remaining - need]\n    } else {\n        return [num + remaining, 0]\n    }\n}\n",
            "func doAlgebra(_ operators: [String], _ operands: [Int]) -> Int {\n    var ops = operators\n    var nums = operands\n    if ops.contains(\"**\") == true {\n        for i in stride(from: ops.count - 1, through: 0, by: -1) {\n            if ops[i] == \"**\" {\n                nums[i] = Int(pow(Double(nums[i]), Double(nums[i + 1])))\n                nums.remove(at: i + 1)\n                ops.remove(at: i)\n            }\n        }\n    }\n    for i in stride(from: 0, to: ops.count, by: 1) {\n        if ops[i] == \"*\" || ops[i] == \"//\" {\n            if ops[i] == \"*\" {\n                nums[i] *= nums[i + 1]\n            } else {\n                nums[i] /= nums[i + 1]\n            }\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n        }\n    }\n    for i in stride(from: 0, to: ops.count, by: 1) {\n        if ops[i] == \"+\" || ops[i] == \"-\" {\n            if ops[i] == \"+\" {\n                nums[i] += nums[i + 1]\n            } else {\n                nums[i] -= nums[i + 1]\n            }\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n        }\n    }\n    return nums[0]\n}\n\n",
            "func solve(_ s: String) -> String {\n    if !hasAlpha(s) {\n        return reverseString(s)\n    }\n    var result = [Character]()\n    for ch in s {\n        if !ch.isLetter {\n            result.append(ch)\n        } else if ch.isUppercase {\n            result.append(Character(ch.lowercased()))\n        } else {\n            result.append(Character(ch.uppercased()))\n        }\n    }\n    return String(result)\n}\n\nfunc hasAlpha(_ s: String) -> Bool {\n    for ch in s {\n        if ch.isLetter {\n            return true\n        }\n    }\n    return false\n}\n\nfunc reverseString(_ s: String) -> String {\n    return String(s.reversed())\n}\n",
            "func stringToMd5(_ txt: String) -> String? {\n    if txt.isEmpty {\n        return nil\n    }\n    let md5Hash = Insecure.MD5.hash(data: txt.data(using: .utf8)!)\n    let md5Encoded = md5Hash.map { String(format: \"%02x\", $0) }.joined()\n    return md5Encoded\n}\n",
            "func generateIntegers(_ a: Int, _ b: Int) -> [Int] {\n    let lower = max(2, min(a, b))\n    let upper = min(8, max(a, b))\n    var result: [Int] = []\n    for i in lower...upper {\n        if i % 2 == 0 {\n            result.append(i)\n        }\n    }\n    return result\n}\n"
        ],
        "rust": [
            "pub fn has_close_elements(numbers: &Vec<f64>, threshold: f64) -> bool {\n    for i in 0..numbers.len() {\n        for j in (i + 1)..numbers.len() {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n                return true;\n            }\n        }\n    }\n    false\n}\n",
            "pub fn separate_paren_groups(paren_string: &String) -> Vec<String> {\n    let mut groups = Vec::new();\n    let mut stk = Vec::new();\n    let mut current_group = String::new();\n    let parens = paren_string.replace(\" \", \"\");\n\n    for ch in parens.chars() {\n        if ch == '(' {\n            stk.push(ch);\n            current_group.push(ch);\n        } else if ch == ')' {\n            stk.pop();\n            current_group.push(ch);\n            if stk.is_empty() {\n                groups.push(current_group.clone());\n                current_group.clear();\n            }\n        }\n    }\n    \n    groups\n}\n",
            "pub fn truncate_number(num: f64) -> f64 {\n    num - num.floor()\n}\n",
            "pub fn below_zero(operations: &Vec<i32>) -> bool {\n    let mut balance = 0;\n    for op in operations.iter() {\n        balance += op;\n        if balance < 0 {\n            return true;\n        }\n    }\n    false\n}\n",
            "pub fn mean_absolute_deviation(numbers: &Vec<f64>) -> f64 {\n    let sum: f64 = numbers.iter().sum();\n    let mean = sum / numbers.len() as f64;\n\n    let deviation: f64 = numbers\n        .iter()\n        .map(|&number| (number - mean).abs())\n        .sum();\n\n    deviation / numbers.len() as f64\n}\n",
            "pub fn intersperse(numbers: &Vec<i32>, delimiter: i32) -> Vec<i32> {\n    let mut result = Vec::new();\n    for (i, &num) in numbers.iter().enumerate() {\n        if i != 0 {\n            result.push(delimiter);\n        }\n        result.push(num);\n    }\n    result\n}\n",
            "pub fn parse_nested_parens(paren_string: &String) -> Vec<i32> {\n    let mut result = vec![];\n    let paren_groups = paren_string.split_whitespace();\n    for group in paren_groups {\n        let mut max_depth = 0;\n        let mut depth = 0;\n        for ch in group.chars() {\n            if ch == '(' {\n                depth += 1;\n                if depth > max_depth {\n                    max_depth = depth;\n                }\n            } else if ch == ')' {\n                depth -= 1;\n            }\n        }\n        result.push(max_depth);\n    }\n    result\n}\n",
            "pub fn filter_by_substring(strs: &Vec<String>, substring: &String) -> Vec<String> {\n    strs.iter()\n        .filter(|s| s.contains(substring))\n        .cloned()\n        .collect()\n}\n",
            "pub fn sum_product(numbers: &Vec<i32>) -> Vec<i32> {\n    let n_sum = numbers.iter().sum();\n    let n_product = numbers.iter().fold(1, |acc, &x| acc * x);\n    \n    vec![n_sum, n_product]\n}\n",
            "pub fn rolling_max(numbers: &Vec<i32>) -> Vec<i32> {\n    let mut max_so_far = i32::MIN;\n    let mut result = vec![0; numbers.len()];\n    for (i, &num) in numbers.iter().enumerate() {\n        if num > max_so_far {\n            max_so_far = num;\n        }\n        result[i] = max_so_far;\n    }\n    result\n}\n",
            "fn is_palindrome(s: &str) -> bool {\n    let chars: Vec<char> = s.chars().collect();\n    for i in 0..chars.len() / 2 {\n        if chars[i] != chars[chars.len() - 1 - i] {\n            return false;\n        }\n    }\n    true\n}\n\npub fn make_palindrome(s: &String) -> String {\n    if is_palindrome(s) {\n        return s.clone();\n    }\n    for i in 0..s.len() {\n        let suffix = &s[i..];\n        if is_palindrome(suffix) {\n            let prefix = &s[..i];\n            let reversed_prefix: String = prefix.chars().rev().collect();\n            return format!(\"{}{}\", s, reversed_prefix);\n        }\n    }\n    \"\".to_string()\n}\n",
            "pub fn string_xor(a: &String, b: &String) -> String {\n    let mut result = String::new();\n    for (char_a, char_b) in a.chars().zip(b.chars()) {\n        if char_a == char_b {\n            result.push('0');\n        } else {\n            result.push('1');\n        }\n    }\n    result\n}\n",
            "pub fn longest(strs: &Vec<String>) -> Option<String> {\n    if strs.is_empty() {\n        return None;\n    }\n    let mut longest_s = &strs[0];\n    for s in strs.iter() {\n        if s.len() > longest_s.len() {\n            longest_s = s;\n        }\n    }\n    Some(longest_s.clone())\n}\n",
            "pub fn greatest_common_divisor(a: i32, b: i32) -> i32 {\n    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b, a % b)\n    }\n}\n",
            "pub fn all_prefixes(s: &String) -> Vec<String> {\n    let mut prefixes = Vec::with_capacity(s.len());\n    for i in 0..s.len() {\n        prefixes.push(s[..=i].to_string());\n    }\n    prefixes\n}\n",
            "pub fn string_sequence(n: i32) -> String {\n    (0..=n).map(|i| i.to_string()).collect::<Vec<_>>().join(\" \")\n}\n",
            "pub fn count_distinct_characters(s: &String) -> i32 {\n    use std::collections::HashSet;\n    let mut char_set = HashSet::new();\n    for c in s.chars() {\n        char_set.insert(c.to_lowercase().next().unwrap());\n    }\n    char_set.len() as i32\n}\n",
            "pub fn parse_music(music_string: &str) -> Vec<i32> {\n    let durations = [(\"o\", 4), (\"o|\", 2), (\".|\", 1)].iter().cloned().collect::<std::collections::HashMap<_, _>>();\n    let notes = music_string.split_whitespace();\n    let mut result = Vec::new();\n    for note in notes {\n        if let Some(&duration) = durations.get(note) {\n            result.push(duration);\n        }\n    }\n    result\n}\n",
            "pub fn how_many_times(s: &String, substring: &String) -> i32 {\n    let mut times = 0;\n    let len_s = s.len();\n    let len_substring = substring.len();\n\n    for i in 0..=len_s - len_substring {\n        if &s[i..i + len_substring] == substring {\n            times += 1;\n        }\n    }\n\n    times\n}\n",
            "pub fn sort_numbers(numbers: &String) -> String {\n    let num_dict = [\n        (\"zero\", 0),\n        (\"one\", 1),\n        (\"two\", 2),\n        (\"three\", 3),\n        (\"four\", 4),\n        (\"five\", 5),\n        (\"six\", 6),\n        (\"seven\", 7),\n        (\"eight\", 8),\n        (\"nine\", 9),\n    ].iter().cloned().collect::<std::collections::HashMap<_, _>>();\n    \n    let mut num_slice: Vec<&str> = numbers.split_whitespace().collect();\n    num_slice.sort_by_key(|&num| num_dict[num]);\n    \n    num_slice.join(\" \")\n}\n",
            "pub fn find_closest_elements(numbers: &Vec<f64>) -> Vec<f64> {\n    let mut sorted_numbers = numbers.clone();\n    sorted_numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n\n    let mut min_diff = f64::INFINITY;\n    let mut closest_pair = vec![0.0, 0.0];\n\n    for i in 1..sorted_numbers.len() {\n        let diff = sorted_numbers[i] - sorted_numbers[i - 1];\n        if diff < min_diff {\n            min_diff = diff;\n            closest_pair = vec![sorted_numbers[i - 1], sorted_numbers[i]];\n        }\n    }\n\n    closest_pair\n}\n",
            "pub fn rescale_to_unit(numbers: &Vec<f64>) -> Vec<f64> {\n    let mut min_num = numbers[0];\n    let mut max_num = numbers[0];\n    for &num in numbers.iter() {\n        if num < min_num {\n            min_num = num;\n        }\n        if num > max_num {\n            max_num = num;\n        }\n    }\n    if min_num == max_num {\n        vec![0.0; numbers.len()]\n    } else {\n        numbers.iter().map(|&num| (num - min_num) / (max_num - min_num)).collect()\n    }\n}\n",
            "use std::any::Any;\n\npub fn filter_integers(values: &Vec<Box<dyn Any>>) -> Vec<i32> {\n    let mut result = Vec::new();\n    for value in values {\n        if let Some(&intValue) = value.downcast_ref::<i32>() {\n            result.push(intValue);\n        }\n    }\n    result\n}\n",
            "pub fn str_length(s: &String) -> i32 {\n    s.len() as i32\n}\n",
            "pub fn largest_divisor(n: i32) -> i32 {\n    for i in 2..n {\n        if n % i == 0 {\n            return n / i;\n        }\n    }\n    1\n}\n",
            "pub fn factorize(n: i32) -> Vec<i32> {\n    let mut factors = Vec::new();\n    let mut divisor = 2;\n    let mut n = n;\n    while divisor <= n {\n        if n % divisor == 0 {\n            factors.push(divisor);\n            n /= divisor;\n        } else {\n            divisor += 1;\n        }\n    }\n    factors\n}\n",
            "pub fn remove_duplicates(numbers: &Vec<i32>) -> Vec<i32> {\n    let mut counts = std::collections::HashMap::new();\n    for &num in numbers.iter() {\n        *counts.entry(num).or_insert(0) += 1;\n    }\n    let mut res = Vec::new();\n    for &num in numbers.iter() {\n        if counts[&num] == 1 {\n            res.push(num);\n        }\n    }\n    res\n}\n",
            "pub fn flip_case(s: &String) -> String {\n    let mut flipped = String::new();\n    for ch in s.chars() {\n        if !ch.is_alphabetic() {\n            flipped.push(ch);\n        } else if ch.is_lowercase() {\n            flipped.push(ch.to_ascii_uppercase());\n        } else if ch.is_uppercase() {\n            flipped.push(ch.to_ascii_lowercase());\n        }\n    }\n    flipped\n}\n",
            "pub fn concatenate(strs: &Vec<String>) -> String {\n    strs.concat()\n}\n",
            "pub fn filter_by_prefix(strs: &Vec<String>, prefix_str: &String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strs {\n        if s.starts_with(prefix_str) {\n            result.push(s.clone());\n        }\n    }\n    result\n}\n",
            "pub fn get_positive(l: &Vec<i32>) -> Vec<i32> {\n    let mut result = Vec::new();\n    for &num in l.iter() {\n        if num > 0 {\n            result.push(num);\n        }\n    }\n    result\n}\n",
            "pub fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..=((n as f64).sqrt() as i32) {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\n",
            "pub fn poly(xs: &Vec<i32>, x: f64) -> f64 {\n    let mut res = 0.0;\n    for (i, &coeff) in xs.iter().enumerate() {\n        res += coeff as f64 * x.powi(i as i32);\n    }\n    res\n}\n\npub fn find_zero(xs: &Vec<i32>) -> f64 {\n    let mut x1 = 1.0;\n    let mut x2 = -1.0;\n    while poly(xs, x1) * poly(xs, x2) > 0.0 {\n        x1 *= 2.0;\n        x2 *= 2.0;\n    }\n    while (x1 - x2).abs() > 1e-10 {\n        let mid = (x1 + x2) / 2.0;\n        if poly(xs, mid) == 0.0 {\n            return mid;\n        } else if poly(xs, mid) * poly(xs, x1) < 0.0 {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    (x1 + x2) / 2.0\n}\n",
            "pub fn sort_third(l: &Vec<i32>) -> Vec<i32> {\n    let mut sorted_third = l.iter().enumerate()\n        .filter_map(|(i, &x)| if i % 3 == 0 { Some(x) } else { None })\n        .collect::<Vec<_>>();\n    sorted_third.sort_unstable();\n    \n    l.iter().enumerate()\n        .map(|(i, &x)| if i % 3 == 0 { sorted_third[i / 3] } else { x })\n        .collect()\n}\n",
            "pub fn list_unique(l: &Vec<i32>) -> Vec<i32> {\n    let mut unique_map = std::collections::HashMap::new();\n    let mut result = Vec::new();\n    for &value in l.iter() {\n        if !unique_map.contains_key(&value) {\n            unique_map.insert(value, true);\n            result.push(value);\n        }\n    }\n    result.sort();\n    result\n}\n",
            "pub fn max_element(l: &Vec<i32>) -> i32 {\n    if l.is_empty() {\n        return 0;\n    }\n    let mut max = l[0];\n    for &v in l.iter() {\n        if v > max {\n            max = v;\n        }\n    }\n    max\n}\n",
            "pub fn fizz_buzz(n: i32) -> i32 {\n    let mut cnt = 0;\n    for i in 0..n {\n        if i % 11 == 0 || i % 13 == 0 {\n            cnt += count_sevens(i);\n        }\n    }\n    cnt\n}\n\nfn count_sevens(num: i32) -> i32 {\n    let mut cnt = 0;\n    let mut num = num;\n    while num > 0 {\n        if num % 10 == 7 {\n            cnt += 1;\n        }\n        num /= 10;\n    }\n    cnt\n}\n",
            "pub fn sort_even(l: &Vec<i32>) -> Vec<i32> {\n    let mut even_indices = l.iter().enumerate()\n        .filter_map(|(i, &x)| if i % 2 == 0 { Some(x) } else { None })\n        .collect::<Vec<i32>>();\n\n    even_indices.sort();\n\n    let mut sorted_list = Vec::with_capacity(l.len());\n    let mut even_index = 0;\n    for (i, &x) in l.iter().enumerate() {\n        if i % 2 == 0 {\n            sorted_list.push(even_indices[even_index]);\n            even_index += 1;\n        } else {\n            sorted_list.push(x);\n        }\n    }\n    sorted_list\n}\n",
            "pub fn encode_cyclic(s: &String) -> String {\n    let mut result = String::new();\n    for i in (0..s.len()).step_by(3) {\n        if i + 3 > s.len() {\n            result.push_str(&s[i..]);\n        } else {\n            result.push_str(&s[i+1..i+3]);\n            result.push(s.chars().nth(i).unwrap());\n        }\n    }\n    result\n}\n\npub fn decode_cyclic(s: &String) -> String {\n    encode_cyclic(&encode_cyclic(s))\n}\n",
            "fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..=((n as f64).sqrt() as i32) {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\n\npub fn prime_fib(n: i32) -> i32 {\n    let mut f = [0, 1];\n    let mut cnt = 0;\n    while cnt < n {\n        f = [f[1], f[0] + f[1]];\n        if is_prime(f[1]) {\n            cnt += 1;\n        }\n    }\n    f[1]\n}\n",
            "pub fn triples_sum_to_zero(l: &Vec<i32>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len() {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k] == 0 {\n                    return true;\n                }\n            }\n        }\n    }\n    false\n}\n",
            "pub fn car_race_collision(n: i32) -> i32 {\n    n * n\n}\n",
            "pub fn incr_list(l: &Vec<i32>) -> Vec<i32> {\n    let mut result = vec![0; l.len()];\n    for (i, &v) in l.iter().enumerate() {\n        result[i] = v + 1;\n    }\n    result\n}\n",
            "pub fn pairs_sum_to_zero(l: &Vec<i32>) -> bool {\n    let mut seen = std::collections::HashSet::new();\n    for &num in l {\n        if seen.contains(&(-num)) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    false\n}\n",
            "pub fn change_base(x: i32, bas: i32) -> String {\n    if x == 0 {\n        return \"0\".to_string();\n    }\n    let mut digits = Vec::new();\n    let mut num = x;\n    while num > 0 {\n        digits.push((num % bas).to_string());\n        num /= bas;\n    }\n    digits.reverse();\n    digits.join(\"\")\n}\n",
            "pub fn triangle_area(a: i32, h: i32) -> f64 {\n    (a * h) as f64 / 2.0\n}\n",
            "pub fn fib4(n: i32) -> i32 {\n    let mut fib = [0, 0, 2, 0];\n    for i in 4..=n {\n        let sum = fib.iter().sum();\n        fib[(i % 4) as usize] = sum;\n    }\n    fib[(n % 4) as usize]\n}\n",
            "pub fn median(l: &Vec<f64>) -> f64 {\n    let mut sl = l.clone();\n    sl.sort_by(|a, b| a.partial_cmp(b).unwrap());\n    if sl.len() % 2 != 0 {\n        *sl.get(sl.len() / 2).unwrap()\n    } else {\n        (sl.get(sl.len() / 2 - 1).unwrap() + sl.get(sl.len() / 2).unwrap()) / 2.0\n    }\n}\n",
            "pub fn is_palindrome(txt: &String) -> bool {\n    let n = txt.len();\n    for i in 0..n/2 {\n        if txt.chars().nth(i) != txt.chars().nth(n-1-i) {\n            return false;\n        }\n    }\n    true\n}\n",
            "pub fn modp(n: i32, p: i32) -> i32 {\n    let mut ret = 1;\n    for _ in 0..n {\n        ret = (ret * 2) % p;\n    }\n    ret\n}\n",
            "pub fn encode_shift(s: &String) -> String {\n    let mut result = Vec::new();\n    for &ch in s.as_bytes() {\n        let shifted_ch = ((ch - b'a' + 5) % 26) + b'a';\n        result.push(shifted_ch);\n    }\n    String::from_utf8(result).unwrap()\n}\n\npub fn decode_shift(s: &String) -> String {\n    let mut result = Vec::new();\n    for &ch in s.as_bytes() {\n        let shifted_ch = ((ch - b'a' + 21) % 26) + b'a';\n        result.push(shifted_ch);\n    }\n    String::from_utf8(result).unwrap()\n}\n",
            "pub fn remove_vowels(txt: &String) -> String {\n    let vowels = \"aeiouAEIOU\";\n    let result: String = txt.chars().filter(|&c| !vowels.contains(c)).collect();\n    result\n}\n",
            "pub fn below_threshold(l: &Vec<i32>, t: i32) -> bool {\n    for &x in l.iter() {\n        if x >= t {\n            return false;\n        }\n    }\n    true\n}\n",
            "pub fn add(x: i32, y: i32) -> i32 {\n    x + y\n}\n",
            "pub fn same_chars(s0: &String, s1: &String) -> bool {\n    set_equal(string_to_set(s0), string_to_set(s1))\n}\n\nfn string_to_set(s: &String) -> std::collections::HashSet<char> {\n    let mut m = std::collections::HashSet::new();\n    for c in s.chars() {\n        m.insert(c);\n    }\n    m\n}\n\nfn set_equal(set1: std::collections::HashSet<char>, set2: std::collections::HashSet<char>) -> bool {\n    if set1.len() != set2.len() {\n        return false;\n    }\n    set1.is_subset(&set2)\n}\n",
            "pub fn fib(n: i32) -> i32 {\n    if n <= 1 {\n        n\n    } else {\n        fib(n - 1) + fib(n - 2)\n    }\n}\n",
            "pub fn correct_bracketing(brackets: &str) -> bool {\n    let mut depth = 0;\n    for b in brackets.chars() {\n        if b == '<' {\n            depth += 1;\n        } else if b == '>' {\n            depth -= 1;\n        }\n        if depth < 0 {\n            return false;\n        }\n    }\n    depth == 0\n}\n",
            "pub fn monotonic(l: &Vec<i32>) -> bool {\n    if l.len() <= 1 {\n        return true;\n    }\n\n    let mut increasing = true;\n    let mut decreasing = true;\n\n    for i in 1..l.len() {\n        if l[i] > l[i - 1] {\n            decreasing = false;\n        }\n        if l[i] < l[i - 1] {\n            increasing = false;\n        }\n    }\n\n    increasing || decreasing\n}\n",
            "pub fn common(l1: &Vec<i32>, l2: &Vec<i32>) -> Vec<i32> {\n    let mut set1 = std::collections::HashSet::new();\n    for &v in l1.iter() {\n        set1.insert(v);\n    }\n\n    let mut set2 = std::collections::HashSet::new();\n    for &v in l2.iter() {\n        set2.insert(v);\n    }\n\n    let mut result: Vec<i32> = set1.intersection(&set2).cloned().collect();\n    result.sort();\n    result\n}\n",
            "pub fn largest_prime_factor(mut n: i32) -> i32 {\n    let mut i = 2;\n    while i * i <= n {\n        if n % i != 0 {\n            i += 1;\n        } else {\n            n /= i;\n        }\n    }\n    n\n}\n",
            "pub fn sum_to_n(n: i32) -> i32 {\n    let mut sum = 0;\n    for i in 0..=n {\n        sum += i;\n    }\n    sum\n}\n",
            "pub fn correct_bracketing(brackets: &str) -> bool {\n    let mut depth = 0;\n    for b in brackets.chars() {\n        if b == '(' {\n            depth += 1;\n        } else if b == ')' {\n            depth -= 1;\n        }\n        if depth < 0 {\n            return false;\n        }\n    }\n    depth == 0\n}\n",
            "pub fn derivative(xs: &Vec<i32>) -> Vec<i32> {\n    let mut result = vec![0; xs.len() - 1];\n    for i in 1..xs.len() {\n        result[i - 1] = xs[i] * (i as i32);\n    }\n    result\n}\n",
            "pub fn fibfib(n: i32) -> i32 {\n    if n <= 1 {\n        return 0;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 1;\n    let mut n = n - 2;\n    while n > 0 {\n        a = b;\n        b = c;\n        c = a + b + c;\n        n -= 1;\n    }\n    c\n}\n",
            "pub fn vowels_count(s: &String) -> i32 {\n    let vowels = \"aeiou\";\n    let mut cnt = 0;\n    for (i, c) in s.chars().enumerate() {\n        if vowels.contains(c.to_ascii_lowercase()) || (i == s.len() - 1 && c.to_ascii_lowercase() == 'y') {\n            cnt += 1;\n        }\n    }\n    cnt\n}\n",
            "pub fn circular_shift(x: i32, shift: i32) -> String {\n    let x_str = x.to_string();\n    if shift as usize > x_str.len() {\n        reverse_string(&x_str)\n    } else {\n        let shift = shift as usize;\n        format!(\"{}{}\", &x_str[x_str.len()-shift..], &x_str[..x_str.len()-shift])\n    }\n}\n\nfn reverse_string(s: &str) -> String {\n    s.chars().rev().collect()\n}\n",
            "pub fn digit_sum(s: &String) -> i32 {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c >= 'A' && c <= 'Z' {\n            sum += c as i32;\n        }\n    }\n    sum\n}\n",
            "pub fn fruit_distribution(s: &String, n: i32) -> i32 {\n    let words: Vec<&str> = s.split_whitespace().collect();\n    let apples_index = words.iter().position(|&&word| word == \"apples\").unwrap() - 1;\n    let oranges_index = words.iter().position(|&&word| word == \"oranges\").unwrap() - 1;\n    let apples = words[apples_index].parse::<i32>().unwrap();\n    let oranges = words[oranges_index].parse::<i32>().unwrap();\n    n - apples - oranges\n}\n",
            "pub fn pluck(arr: &Vec<i32>) -> Vec<i32> {\n    let mut evens = Vec::new();\n    for &n in arr.iter() {\n        if n % 2 == 0 {\n            evens.push(n);\n        }\n    }\n    if evens.is_empty() {\n        return vec![];\n    }\n    let min_even = *evens.iter().min().unwrap();\n    let index = match arr.iter().position(|&n| n == min_even) {\n        Some(i) => i,\n        None => -1, // This case should not occur because we check if evens is empty\n    } as i32;\n    vec![min_even, index]\n}\n",
            "pub fn search(lst: &Vec<i32>) -> i32 {\n    let mut freqs = std::collections::HashMap::new();\n    for &n in lst.iter() {\n        *freqs.entry(n).or_insert(0) += 1;\n    }\n    let mut good_vals = Vec::new();\n    for (&k, &v) in freqs.iter() {\n        if v >= k {\n            good_vals.push(k);\n        }\n    }\n    if good_vals.is_empty() {\n        -1\n    } else {\n        *good_vals.iter().max().unwrap()\n    }\n}\n",
            "pub fn strange_sort_list(lst: &Vec<i32>) -> Vec<i32> {\n    let mut sl = lst.clone();\n    sl.sort();\n    let mut result = Vec::with_capacity(sl.len());\n    let mut left = 0;\n    let mut right = sl.len() - 1;\n    while left <= right {\n        result.push(sl[left]);\n        left += 1;\n        if left <= right {\n            result.push(sl[right]);\n            right -= 1;\n        }\n    }\n    result\n}\n",
            "pub fn triangle_area(a: i32, b: i32, c: i32) -> f64 {\n    if a + b > c && a + c > b && b + c > a {\n        let s = (a as f64 + b as f64 + c as f64) / 2.0;\n        (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n",
            "pub fn will_it_fly(q: &Vec<i32>, w: i32) -> bool {\n    if q.is_empty() {\n        return false;\n    }\n    let mut is_palin = true;\n    for i in 0..q.len() {\n        if q[i] != q[q.len() - i - 1] {\n            is_palin = false;\n            break;\n        }\n    }\n    let total: i32 = q.iter().sum();\n    is_palin && total <= w\n}\n",
            "pub fn smallest_change(arr: &Vec<i32>) -> i32 {\n    let mut ans = 0;\n    for i in 0..arr.len()/2 {\n        if arr[i] != arr[arr.len() - i - 1] {\n            ans += 1;\n        }\n    }\n    ans\n}\n",
            "pub fn total_match(lst1: &Vec<String>, lst2: &Vec<String>) -> Vec<String> {\n    let cnt1 = lst1.iter().map(|s| s.len()).sum::<usize>();\n    let cnt2 = lst2.iter().map(|s| s.len()).sum::<usize>();\n    \n    if cnt1 <= cnt2 {\n        lst1.clone()\n    } else {\n        lst2.clone()\n    }\n}\n",
            "fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..=((n as f32).sqrt() as i32) {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\n\npub fn is_multiply_prime(a: i32) -> bool {\n    let mut cnt = 0;\n    let mut a = a;\n    for i in 2..=a {\n        if is_prime(i) {\n            while a % i == 0 {\n                cnt += 1;\n                a /= i;\n            }\n        }\n    }\n    cnt == 3\n}\n",
            "pub fn is_simple_power(x: i32, n: i32) -> bool {\n    if n < 2 {\n        return x == n;\n    }\n    let mut tmp = 1;\n    while tmp < x {\n        tmp *= n;\n    }\n    tmp == x\n}\n",
            "pub fn is_cube(a: i32) -> bool {\n    let a = if a < 0 { -a } else { a };\n    let root = (a as f64).cbrt().round() as i32;\n    root * root * root == a\n}\n",
            "pub fn hex_key(num: &String) -> i32 {\n    let mut count = 0;\n    for x in num.chars() {\n        match x {\n            '2' | '3' | '5' | '7' | 'B' | 'D' => count += 1,\n            _ => (),\n        }\n    }\n    count\n}\n",
            "pub fn decimal_to_binary(dec: i32) -> String {\n    format!(\"db{:b}db\", dec)\n}\n",
            "pub fn is_happy(s: &String) -> bool {\n    if s.len() < 3 {\n        return false;\n    }\n    for i in 0..(s.len() - 2) {\n        if s.chars().nth(i) == s.chars().nth(i + 1)\n            || s.chars().nth(i) == s.chars().nth(i + 2)\n            || s.chars().nth(i + 1) == s.chars().nth(i + 2)\n        {\n            return false;\n        }\n    }\n    true\n}\n",
            "pub fn numerical_letter_grade(grades: &Vec<f64>) -> Vec<String> {\n    let mut result = Vec::new();\n    for &g in grades {\n        if g == 4.0 {\n            result.push(\"A+\".to_string());\n        } else if g > 3.7 {\n            result.push(\"A\".to_string());\n        } else if g > 3.3 {\n            result.push(\"A-\".to_string());\n        } else if g > 3.0 {\n            result.push(\"B+\".to_string());\n        } else if g > 2.7 {\n            result.push(\"B\".to_string());\n        } else if g > 2.3 {\n            result.push(\"B-\".to_string());\n        } else if g > 2.0 {\n            result.push(\"C+\".to_string());\n        } else if g > 1.7 {\n            result.push(\"C\".to_string());\n        } else if g > 1.3 {\n            result.push(\"C-\".to_string());\n        } else if g > 1.0 {\n            result.push(\"D+\".to_string());\n        } else if g > 0.7 {\n            result.push(\"D\".to_string());\n        } else if g > 0.0 {\n            result.push(\"D-\".to_string());\n        } else {\n            result.push(\"E\".to_string());\n        }\n    }\n    result\n}\n",
            "pub fn prime_length(s: &String) -> bool {\n    let length = s.len();\n    if length < 2 {\n        return false;\n    }\n    for i in 2..=((length as f64).sqrt() as usize) {\n        if length % i == 0 {\n            return false;\n        }\n    }\n    true\n}\n",
            "pub fn starts_one_ends(n: i32) -> i32 {\n    if n == 1 {\n        return 1;\n    }\n    return 2 * 9 * (10_i32.pow((n - 2) as u32));\n}\n",
            "fn solve(mut n: i32) -> String {\n    let mut digits_sum = 0;\n    while n > 0 {\n        let digit = n % 10;\n        digits_sum += digit;\n        n /= 10;\n    }\n    format!(\"{:b}\", digits_sum)\n}\n",
            "pub fn add(lst: &Vec<i32>) -> i32 {\n    let mut sum = 0;\n    for (i, &x) in lst.iter().enumerate() {\n        if i % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n",
            "pub fn anti_shuffle(s: &String) -> String {\n    s.split_whitespace()\n        .map(|word| {\n            let mut chars: Vec<char> = word.chars().collect();\n            chars.sort_unstable();\n            chars.into_iter().collect::<String>()\n        })\n        .collect::<Vec<String>>()\n        .join(\" \")\n}\n",
            "pub fn get_row(lst: &Vec<Vec<i32>>, x: i32) -> Vec<Vec<i32>> {\n    let mut coords = Vec::new();\n    for (i, row) in lst.iter().enumerate() {\n        for (j, &val) in row.iter().enumerate() {\n            if val == x {\n                coords.push(vec![i as i32, j as i32]);\n            }\n        }\n    }\n    coords.sort_by(|a, b| {\n        if a[0] == b[0] {\n            b[1].cmp(&a[1])\n        } else {\n            a[0].cmp(&b[0])\n        }\n    });\n    coords\n}\n",
            "pub fn sort_array(arr: &Vec<i32>) -> Vec<i32> {\n    if arr.is_empty() {\n        return vec![];\n    }\n    if (arr[0] + arr[arr.len() - 1]) % 2 == 0 {\n        let mut sorted_arr = arr.clone();\n        sorted_arr.sort_by(|a, b| b.cmp(a));\n        sorted_arr\n    } else {\n        let mut sorted_arr = arr.clone();\n        sorted_arr.sort();\n        sorted_arr\n    }\n}\n",
            "pub fn encrypt(s: &String) -> String {\n    let mut result = String::new();\n    for ch in s.chars() {\n        let shifted = if ch + 4 > 'z' { ch + 4 - 26 } else { ch + 4 };\n        result.push(shifted);\n    }\n    result\n}\n",
            "pub fn next_smallest(lst: &Vec<i32>) -> Option<i32> {\n    let mut sl: Vec<i32> = lst.iter().cloned().collect();\n    sl.sort_unstable();\n    sl.dedup();\n    if sl.len() < 2 {\n        None\n    } else {\n        Some(sl[1])\n    }\n}\n",
            "pub fn is_bored(s: &String) -> i32 {\n    let sentences = s.split(|c| c == '.' || c == '!' || c == '?');\n    sentences.filter(|sentence| sentence.len() > 1 && sentence.starts_with(\"I \")).count() as i32\n}\n",
            "use std::any::Any;\n\npub fn any_int(x: &Box<dyn Any>, y: &Box<dyn Any>, z: &Box<dyn Any>) -> bool {\n    if let (Some(&xInt), Some(&yInt), Some(&zInt)) = (x.downcast_ref::<i32>(), y.downcast_ref::<i32>(), z.downcast_ref::<i32>()) {\n        return xInt + yInt == zInt || xInt + zInt == yInt || yInt + zInt == xInt;\n    }\n    false\n}\n",
            "fn encode(message: &String) -> String {\n    let vowels = \"aeiouAEIOU\";\n    let mut result = Vec::new();\n\n    for ch in message.chars() {\n        if ch.is_alphabetic() {\n            let ch1;\n            if ch.is_lowercase() {\n                ch1 = ch.to_ascii_uppercase();\n            } else {\n                ch1 = ch.to_ascii_lowercase();\n            }\n            if vowels.contains(ch1) {\n                ch1 = ((ch1 as u8) + 2) as char;\n            }\n            result.push(ch1);\n        } else {\n            result.push(ch);\n        }\n    }\n\n    result.into_iter().collect()\n}\n",
            "fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    let limit = (n as f64).sqrt() as i32 + 1;\n    for i in 2..limit {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\n\npub fn skjkasdkd(lst: &Vec<i32>) -> i32 {\n    let mut primes = Vec::new();\n    for &n in lst {\n        if is_prime(n) {\n            primes.push(n);\n        }\n    }\n    if primes.is_empty() {\n        return 0;\n    }\n    let largest = *primes.iter().max().unwrap();\n    let sum: i32 = largest.to_string().chars()\n        .map(|c| c as i32 - '0' as i32)\n        .sum();\n    sum\n}\n",
            "pub fn check_dict_case(d: &HashMap<String, String>) -> bool {\n    if d.is_empty() {\n        return false;\n    }\n    let all_lowercase = d.keys().all(|key| key.chars().all(|c| c.is_ascii_lowercase()));\n    let all_uppercase = d.keys().all(|key| key.chars().all(|c| c.is_ascii_uppercase()));\n    all_lowercase || all_uppercase\n}\n",
            "pub fn count_up_to(n: i32) -> Vec<i32> {\n    let mut primes = vec![];\n    for num in 2..n {\n        let mut is_prime = true;\n        for &p in &primes {\n            if num % p == 0 {\n                is_prime = false;\n                break;\n            }\n        }\n        if is_prime {\n            primes.push(num);\n        }\n    }\n    primes\n}\n",
            "pub fn multiply(a: i32, b: i32) -> i32 {\n    (abs(a) % 10) * (abs(b) % 10)\n}\n\nfn abs(x: i32) -> i32 {\n    if x < 0 {\n        -x\n    } else {\n        x\n    }\n}\n",
            "pub fn count_upper(s: &String) -> i32 {\n    let vowels = \"AEIOU\";\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && vowels.contains(c) {\n            count += 1;\n        }\n    }\n    count\n}\n",
            "pub fn closest_integer(value: &String) -> i32 {\n    let num = value.parse::<f64>().unwrap();\n    if num >= 0.0 {\n        (num + 0.5) as i32\n    } else {\n        (num - 0.5) as i32\n    }\n}\n",
            "pub fn make_a_pile(n: i32) -> Vec<i32> {\n    let mut pile = Vec::with_capacity(n as usize);\n    for i in 0..n {\n        pile.push(n + 2 * i);\n    }\n    pile\n}\n",
            "pub fn words_string(s: &String) -> Vec<String> {\n    let mut result = Vec::new();\n    for w in s.split(|c| c == ',' || c == ' ') {\n        if !w.is_empty() {\n            result.push(w.to_string());\n        }\n    }\n    result\n}\n",
            "pub fn choose_num(x: i32, y: i32) -> i32 {\n    if x > y {\n        -1\n    } else if y % 2 == 0 {\n        y\n    } else if x != y {\n        y - 1\n    } else {\n        -1\n    }\n}\n",
            "pub fn rounded_avg(n: i32, m: i32) -> Option<String> {\n    if n > m {\n        return None;\n    }\n    let r_avg = ((m + n) / 2.0 + 0.5) as i32;\n    Some(format!(\"{:b}\", r_avg))\n}\n",
            "pub fn unique_digits(x: &Vec<i32>) -> Vec<i32> {\n    fn all_digits_odd(s: &str) -> bool {\n        for digit in s.chars() {\n            if let Some(d) = digit.to_digit(10) {\n                if d % 2 == 0 {\n                    return false;\n                }\n            }\n        }\n        true\n    }\n\n    let mut result = Vec::new();\n    for &num in x.iter() {\n        if all_digits_odd(&num.to_string()) {\n            result.push(num);\n        }\n    }\n    result.sort_unstable();\n    result\n}\n",
            "pub fn by_length(arr: &Vec<i32>) -> Vec<String> {\n    let digit_names = vec![\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    let mut sorted_arr: Vec<_> = arr.iter().filter(|&&x| x >= 1 && x <= 9).cloned().collect();\n    sorted_arr.sort_by(|a, b| b.cmp(a));\n    sorted_arr.into_iter().map(|x| digit_names[(x - 1) as usize].to_string()).collect()\n}\n",
            "pub fn f(n: i32) -> Vec<i32> {\n    let n = n as usize;\n    let mut nums = vec![0; n];\n    for i in 1..=n {\n        nums[i - 1] = i as i32;\n    }\n\n    let mut result = vec![0; n];\n    for i in 0..n {\n        if (i + 1) % 2 != 0 {\n            let sum: i32 = nums[0..=i].iter().sum();\n            result[i] = sum;\n        } else {\n            let product: i32 = nums[0..=i].iter().product();\n            result[i] = product;\n        }\n    }\n\n    result\n}\n",
            "fn even_odd_palindrome(n: i32) -> Vec<i32> {\n    let mut cnt = [0, 0];\n    for i in 1..=n {\n        if is_palindrome(i.to_string()) {\n            cnt[(i % 2) as usize] += 1;\n        }\n    }\n    cnt.into_iter().collect()\n}\n\nfn is_palindrome(s: String) -> bool {\n    for (i, c) in s.chars().enumerate() {\n        if c != s.chars().rev().nth(i).unwrap() {\n            return false;\n        }\n    }\n    true\n}\n",
            "fn digits_sum(n: i32) -> i32 {\n    let n_str = n.to_string();\n    if n >= 0 {\n        n_str.chars().map(|d| d.to_digit(10).unwrap() as i32).sum()\n    } else {\n        n_str[1..=1].parse::<i32>().unwrap() * 2 + digits_sum(n.abs())\n    }\n}\n\npub fn count_nums(arr: &Vec<i32>) -> i32 {\n    arr.iter().filter(|&&n| digits_sum(n) > 0).count() as i32\n}\n",
            "pub fn move_one_ball(arr: &Vec<i32>) -> bool {\n    if arr.is_empty() {\n        return true;\n    }\n    let mut sorted_arr = arr.clone();\n    sorted_arr.sort();\n    for i in 0..arr.len() {\n        if &arr[i..] == &sorted_arr[..arr.len() - i] && &arr[..i] == &sorted_arr[arr.len() - i..] {\n            return true;\n        }\n    }\n    false\n}\n",
            "pub fn can_exchange(lst1: &Vec<i32>, lst2: &Vec<i32>) -> String {\n    let odd_cnt = lst1.iter().filter(|&&x| x % 2 != 0).count();\n    let even_cnt = lst2.iter().filter(|&&x| x % 2 == 0).count();\n    if even_cnt >= odd_cnt {\n        \"YES\".to_string()\n    } else {\n        \"NO\".to_string()\n    }\n}\n",
            "use std::collections::HashMap;\n\npub fn histogram(test: &String) -> HashMap<String, i32> {\n    let mut freq = HashMap::new();\n    for w in test.split_whitespace() {\n        if !w.is_empty() {\n            *freq.entry(w.to_string()).or_insert(0) += 1;\n        }\n    }\n    let mut result = HashMap::new();\n    if let Some(&max_freq) = freq.values().max() {\n        for (k, &v) in &freq {\n            if v == max_freq {\n                result.insert(k.clone(), v);\n            }\n        }\n    }\n    result\n}\n",
            "pub fn reverse_delete(s: &String, c: &String) -> Vec<String> {\n    let s1: String = s.chars()\n        .filter(|&ch| !c.contains(ch))\n        .collect();\n    \n    let is_palindrome = |str: &String| -> bool {\n        str.len() <= 1 || str == str.chars().rev().collect::<String>()\n    };\n\n    let mut result = vec![s1];\n    if is_palindrome(&s1) {\n        result.push(\"yes\".to_string());\n    } else {\n        result.push(\"no\".to_string());\n    }\n\n    result\n}\n",
            "pub fn odd_count(lst: &Vec<String>) -> Vec<String> {\n    let mut result = Vec::new();\n    for num in lst.iter() {\n        let mut n = 0;\n        for d in num.chars() {\n            if (d.to_digit(10).unwrap_or(0) % 2 == 1) {\n                n += 1;\n            }\n        }\n        let rs = format!(\"the number of odd elements in the string i of the input.\", i = n);\n        result.push(rs);\n    }\n    result\n}\n",
            "pub fn min_sub_array_sum(nums: &Vec<i32>) -> i32 {\n    let mut min_sum = 0;\n    let mut cur_sum = 0;\n    for &n in nums.iter() {\n        cur_sum = n.min(cur_sum + n);\n        min_sum = min_sum.min(cur_sum);\n    }\n    if min_sum == 0 {\n        min_sum = *nums.iter().min().unwrap();\n    }\n    min_sum\n}\n",
            "pub fn max_fill(grid: &Vec<Vec<i32>>, capacity: i32) -> i32 {\n    let mut sum = 0;\n    for arr in grid {\n        let row_sum: i32 = arr.iter().sum();\n        if row_sum % capacity != 0 {\n            sum += row_sum / capacity + 1;\n        } else {\n            sum += row_sum / capacity;\n        }\n    }\n    sum\n}\n",
            "pub fn sort_array(arr: &Vec<i32>) -> Vec<i32> {\n    let mut result = arr.clone();\n    result.sort_by_key(|&x| (count_ones(x), x));\n    result\n}\n\nfn count_ones(mut num: i32) -> usize {\n    let mut count = 0;\n    while num != 0 {\n        count += (num & 1) as usize;\n        num >>= 1;\n    }\n    count\n}\n",
            "pub fn select_words(s: &String, n: i32) -> Vec<String> {\n    let consonants = \"bcdfghjklmnpqrstvwxyz\";\n    let words = s.split_whitespace();\n    let mut result = Vec::new();\n    for w in words {\n        let count = w.chars()\n                     .filter(|c| consonants.contains(c.to_ascii_lowercase()))\n                     .count() as i32;\n        if count == n {\n            result.push(w.to_string());\n        }\n    }\n    result\n}\n",
            "pub fn get_closest_vowel(word: &str) -> String {\n    let vowels = \"aeiouAEIOU\";\n    for i in (1..word.len() - 1).rev() {\n        if vowels.contains(word.chars().nth(i).unwrap()) \n           && !vowels.contains(word.chars().nth(i - 1).unwrap()) \n           && !vowels.contains(word.chars().nth(i + 1).unwrap()) {\n            return word.chars().nth(i).unwrap().to_string();\n        }\n    }\n    String::new()\n}\n",
            "pub fn match_parens(lst: &Vec<String>) -> String {\n    let s1 = lst[0].clone() + &lst[1];\n    let s2 = lst[1].clone() + &lst[0];\n\n    if check(&s1) || check(&s2) {\n        \"Yes\".to_string()\n    } else {\n        \"No\".to_string()\n    }\n}\n\nfn check(s: &str) -> bool {\n    let mut depth = 0;\n    for ch in s.chars() {\n        if ch == '(' {\n            depth += 1;\n        } else {\n            depth -= 1;\n        }\n        if depth < 0 {\n            return false;\n        }\n    }\n    depth == 0\n}\n",
            "pub fn maximum(arr: &Vec<i32>, k: i32) -> Vec<i32> {\n    if k == 0 {\n        return vec![];\n    }\n    let mut sorted_arr = arr.clone();\n    sorted_arr.sort_unstable();\n    sorted_arr.split_off(sorted_arr.len() - k as usize)\n}\n",
            "pub fn solution(lst: &Vec<i32>) -> i32 {\n    let mut sum = 0;\n    for (i, &x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n",
            "pub fn add_elements(arr: &Vec<i32>, k: i32) -> i32 {\n    let mut sum = 0;\n    for i in 0..std::cmp::min(k as usize, arr.len()) {\n        let n = arr[i];\n        if n >= -99 && n <= 99 {\n            sum += n;\n        }\n    }\n    sum\n}\n",
            "pub fn get_odd_collatz(mut n: i32) -> Vec<i32> {\n    let mut collatz = vec![1];\n    while n != 1 {\n        if n % 2 != 0 {\n            collatz.push(n);\n            n = 3 * n + 1;\n        } else {\n            n /= 2;\n        }\n    }\n    collatz.sort();\n    collatz\n}\n",
            "pub fn valid_date(date: &str) -> bool {\n    if date.len() != 10 || date.chars().nth(2).unwrap() != '-' || date.chars().nth(5).unwrap() != '-' {\n        return false;\n    }\n    let m = date[0..2].parse::<u32>().unwrap();\n    let d = date[3..5].parse::<u32>().unwrap();\n    if [1, 3, 5, 7, 8, 10, 12].contains(&m) && d >= 1 && d <= 31 {\n        return true;\n    }\n    if [4, 6, 9, 11].contains(&m) && d >= 1 && d <= 30 {\n        return true;\n    }\n    if m == 2 && d >= 1 && d <= 29 {\n        return true;\n    }\n    false\n}\n",
            "pub fn split_words(txt: &str) -> Vec<String> {\n    if txt.contains(' ') {\n        txt.split_whitespace().map(|s| s.to_string()).collect()\n    } else if txt.contains(',') {\n        txt.split(',').map(|s| s.to_string()).collect()\n    } else {\n        let count = txt.chars().filter(|&c| c.is_lowercase() && (c as u32) % 2 == 0).count();\n        vec![count.to_string()]\n    }\n}\n",
            "pub fn is_sorted(lst: &Vec<i32>) -> bool {\n    if lst.is_empty() {\n        return true;\n    }\n    for i in 1..lst.len() {\n        if lst[i - 1] > lst[i] {\n            return false;\n        }\n    }\n    let mut freq = std::collections::HashMap::new();\n    for &i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    for &count in freq.values() {\n        if count > 2 {\n            return false;\n        }\n    }\n    true\n}\n",
            "fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..=((n as f64).sqrt() as i32) {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\n\npub fn intersection(interval1: &Vec<i32>, interval2: &Vec<i32>) -> String {\n    let l = i32::max(interval1[0], interval2[0]);\n    let r = i32::min(interval1[1], interval2[1]);\n    let length = r - l;\n    if length > 0 && is_prime(length) {\n        \"YES\".to_string()\n    } else {\n        \"NO\".to_string()\n    }\n}\n",
            "pub fn prod_signs(arr: &Vec<i32>) -> Option<i32> {\n    if arr.is_empty() {\n        return None;\n    }\n    for &n in arr.iter() {\n        if n == 0 {\n            return Some(0);\n        }\n    }\n    let mut sign = -1;\n    let mut negative_count = 0;\n    for &n in arr.iter() {\n        if n < 0 {\n            negative_count += 1;\n        }\n    }\n    if negative_count % 2 == 0 {\n        sign = 1;\n    }\n    let sum: i32 = arr.iter().map(|&n| n.abs()).sum();\n    Some(sign * sum)\n}\n",
            "pub fn min_path(grid: &Vec<Vec<i32>>, k: i32) -> Vec<i32> {\n    let n = grid.len();\n    let mut min_val = n * n + 1;\n    for i in 0..n {\n        for j in 0..n {\n            if grid[i][j] == 1 {\n                let mut temp = vec![];\n                if i != 0 {\n                    temp.push(grid[i - 1][j]);\n                }\n                if j != 0 {\n                    temp.push(grid[i][j - 1]);\n                }\n                if i != n - 1 {\n                    temp.push(grid[i + 1][j]);\n                }\n                if j != n - 1 {\n                    temp.push(grid[i][j + 1]);\n                }\n                for &val in &temp {\n                    if val < min_val {\n                        min_val = val;\n                    }\n                }\n            }\n        }\n    }\n    let mut result = vec![0; k as usize];\n    for i in 0..k as usize {\n        result[i] = 1;\n        if i % 2 != 0 {\n            result[i] = min_val;\n        }\n    }\n    result\n}\n",
            "pub fn tri(n: i32) -> Vec<i32> {\n    if n == 0 {\n        return vec![1];\n    }\n    let mut seq = vec![1, 3];\n    for i in 2..=n as usize {\n        if i % 2 == 0 {\n            seq.push(i / 2 + 1);\n        } else {\n            seq.push(seq[i - 1] + seq[i - 2] + (i + 3) / 2);\n        }\n    }\n    seq\n}\n",
            "pub fn digits(n: i32) -> i32 {\n    let mut odds = Vec::new();\n    for digit_char in n.to_string().chars() {\n        let digit = digit_char.to_digit(10).unwrap() as i32;\n        if digit % 2 == 1 {\n            odds.push(digit);\n        }\n    }\n    let mut result = 1;\n    for &o in &odds {\n        result *= o;\n    }\n    if !odds.is_empty() {\n        return result;\n    }\n    0\n}\n",
            "fn is_nested(s: &str) -> bool {\n    let mut open_idx = Vec::new();\n    let mut close_idx = Vec::new();\n\n    for (i, ch) in s.chars().enumerate() {\n        if ch == '[' {\n            open_idx.push(i);\n        } else if ch == ']' {\n            close_idx.push(i);\n        }\n    }\n\n    close_idx.reverse();\n\n    let mut cnt = 0;\n    let mut j = 0;\n    for &idx in &open_idx {\n        if j < close_idx.len() && idx < close_idx[j] {\n            cnt += 1;\n            j += 1;\n        }\n    }\n\n    cnt >= 2\n}\n",
            "pub fn sum_squares(lst: &Vec<f64>) -> i32 {\n    let mut sum = 0;\n    for &n in lst.iter() {\n        sum += (n.ceil() * n.ceil()) as i32;\n    }\n    sum\n}\n",
            "pub fn check_if_last_char_is_a_letter(txt: &String) -> bool {\n    if txt.is_empty() {\n        return false;\n    }\n    let last = match txt.rfind(' ') {\n        Some(pos) => &txt[pos + 1..],\n        None => txt,\n    };\n    last.len() == 1 && last.chars().next().unwrap_or('\\0').is_alphabetic()\n}\n",
            "pub fn can_arrange(arr: &Vec<i32>) -> i32 {\n    if arr.len() <= 1 {\n        return -1;\n    }\n    let mut idx = -1;\n    for i in 1..arr.len() {\n        if arr[i] < arr[i - 1] {\n            idx = i as i32;\n        }\n    }\n    idx\n}\n",
            "pub fn largest_smallest_integers(lst: &Vec<i32>) -> Vec<Option<i32>> {\n    let mut max_neg = None;\n    let mut min_pos = None;\n\n    for &i in lst {\n        if i < 0 {\n            match max_neg {\n                Some(current_max) => {\n                    if i > current_max {\n                        max_neg = Some(i);\n                    }\n                },\n                None => max_neg = Some(i),\n            }\n        } else if i > 0 {\n            match min_pos {\n                Some(current_min) => {\n                    if i < current_min {\n                        min_pos = Some(i);\n                    }\n                },\n                None => min_pos = Some(i),\n            }\n        }\n    }\n\n    vec![max_neg, min_pos]\n}\n",
            "pub fn compare_one(a: &Box<dyn std::any::Any>, b: &Box<dyn std::any::Any>) -> Option<f64> {\n    let a1 = any_to_real(a);\n    let b1 = any_to_real(b);\n\n    match (a1, b1) {\n        (Ok(a), Ok(b)) => {\n            if a == b {\n                None\n            } else if a > b {\n                Some(a)\n            } else {\n                Some(b)\n            }\n        }\n        _ => panic!(\"Invalid input types\"),\n    }\n}\n\nfn any_to_real(o: &Box<dyn std::any::Any>) -> Result<f64, String> {\n    if let Some(v) = o.downcast_ref::<String>() {\n        v.replace(\",\", \".\").parse().map_err(|_e| \"invalid float representation\".to_string())\n    } else if let Some(&v) = o.downcast_ref::<i32>() {\n        Ok(v as f64)\n    } else if let Some(&v) = o.downcast_ref::<f64>() {\n        Ok(v)\n    } else {\n        Err(\"unsupported type\".to_string())\n    }\n}\n",
            "pub fn is_equal_to_sum_even(n: i32) -> bool {\n    n % 2 == 0 && n >= 8\n}\n",
            "pub fn special_factorial(n: i32) -> i32 {\n    let mut fact = 1;\n    let mut result = 1;\n    for i in 1..=n {\n        fact *= i;\n        result *= fact;\n    }\n    result\n}\n",
            "pub fn fix_spaces(txt: &String) -> String {\n    let mut result = txt.clone();\n    result = regex::Regex::new(r\"\\s{3,}\")\n        .unwrap()\n        .replace_all(&result, \"-\")\n        .to_string();\n    result.replace(' ', \"_\")\n}\n",
            "fn contains(slice: &[&str], item: &str) -> bool {\n    for v in slice.iter() {\n        if *v == item {\n            return true;\n        }\n    }\n    false\n}\n\nfn count_digits(s: &str) -> usize {\n    s.chars().filter(|c| c.is_digit(10)).count()\n}\n\npub fn file_name_check(file_name: &String) -> String {\n    let suffixes = [\"txt\", \"exe\", \"dll\"];\n    let lst: Vec<&str> = file_name.split('.').collect();\n    if lst.len() != 2 || !contains(&suffixes, lst[1]) || lst[0].is_empty() || !lst[0].chars().next().unwrap_or('0').is_alphabetic() || count_digits(lst[0]) > 3 {\n        \"No\".to_string()\n    } else {\n        \"Yes\".to_string()\n    }\n}\n",
            "pub fn sum_squares(lst: &Vec<i32>) -> i32 {\n    let mut result = 0;\n    for (i, &x) in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            result += x * x;\n        } else if i % 4 == 0 {\n            result += x * x * x;\n        } else {\n            result += x;\n        }\n    }\n    result\n}\n",
            "pub fn words_in_sentence(sentence: &String) -> String {\n    let words = sentence.split_whitespace();\n    let prime_words: Vec<&str> = words.filter(|&&w| is_prime(w.len())).collect();\n    prime_words.join(\" \")\n}\n\nfn is_prime(n: usize) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..=((n as f64).sqrt() as usize) {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\n",
            "pub fn simplify(x: &String, n: &String) -> bool {\n    let xs: Vec<&str> = x.split('/').collect();\n    let ns: Vec<&str> = n.split('/').collect();\n    let num: i32 = xs[0].parse().unwrap();\n    let den: i32 = xs[1].parse().unwrap();\n    let numer: i32 = ns[0].parse().unwrap();\n    let denom: i32 = ns[1].parse().unwrap();\n    (num * numer) % (den * denom) == 0\n}\n",
            "fn digits_sum(n: i32) -> i32 {\n    let n_str = n.to_string();\n    if n >= 0 {\n        n_str.chars().map(|d| d.to_digit(10).unwrap() as i32).sum()\n    } else {\n        (n_str.get(0..=1).unwrap().parse::<i32>().unwrap()) * 2 + digits_sum(n.abs())\n    }\n}\n\npub fn order_by_points(nums: &Vec<i32>) -> Vec<i32> {\n    let mut nums = nums.to_vec();\n    nums.sort_by_key(digits_sum);\n    nums\n}\n",
            "pub fn special_filter(nums: &Vec<i32>) -> i32 {\n    let odds = \"13579\";\n    let mut count = 0;\n    for &n in nums.iter() {\n        if n > 10 && n % 2 == 1 && odds.contains(&n.to_string()[0..1]) {\n            count += 1;\n        }\n    }\n    count\n}\n",
            "pub fn get_max_triples(n: i32) -> i32 {\n    let mut c = [0, 0, 0];\n    for i in 1..=n {\n        let a = i * i - i + 1;\n        c[(a % 3) as usize] += 1;\n    }\n    c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\n}\n",
            "pub fn bf(planet1: &String, planet2: &String) -> Vec<String> {\n    let names = vec![\n        \"Mercury\".to_string(), \n        \"Venus\".to_string(), \n        \"Earth\".to_string(), \n        \"Mars\".to_string(), \n        \"Jupiter\".to_string(), \n        \"Saturn\".to_string(), \n        \"Uranus\".to_string(), \n        \"Neptune\".to_string()\n    ];\n    let mut l = -1;\n    let mut r = -1;\n    for (i, name) in names.iter().enumerate() {\n        if name == planet1 {\n            l = i as isize;\n        }\n        if name == planet2 {\n            r = i as isize;\n        }\n    }\n    if l == -1 || r == -1 {\n        return vec![];\n    }\n    if l > r {\n        std::mem::swap(&mut l, &mut r);\n    }\n    if l == r {\n        return vec![];\n    }\n    names[l as usize + 1..r as usize].to_vec()\n}\n",
            "pub fn sorted_list_sum(lst: &Vec<String>) -> Vec<String> {\n    let mut result: Vec<String> = lst.iter().filter(|s| s.len() % 2 == 0).cloned().collect();\n    result.sort_by(|a, b| match a.len().cmp(&b.len()) {\n        std::cmp::Ordering::Equal => a.cmp(b),\n        other => other,\n    });\n    result\n}\n",
            "pub fn x_or_y(n: i32, x: i32, y: i32) -> i32 {\n    if n < 2 {\n        return y;\n    }\n    for i in 2..=((n as f64).sqrt() as i32) {\n        if n % i == 0 {\n            return y;\n        }\n    }\n    x\n}\n",
            "pub fn double_the_difference(lst: &Vec<f64>) -> i32 {\n    let mut sum = 0;\n    for &n in lst.iter() {\n        if n >= 0.0 && n.fract() == 0.0 && (n as i32) % 2 == 1 {\n            sum += (n * n) as i32;\n        }\n    }\n    sum\n}\n",
            "pub fn compare(game: &Vec<i32>, guess: &Vec<i32>) -> Vec<i32> {\n    let mut result = Vec::new();\n    for i in 0..game.len() {\n        result.push((game[i] - guess[i]).abs());\n    }\n    result\n}\n",
            "pub fn strongest_extension(class_name: &String, extensions: &Vec<String>) -> String {\n    let mut max_s = -1000;\n    let mut max_ext = \"\";\n    for ext in extensions {\n        let (mut upper, mut lower) = (0, 0);\n        for c in ext.chars() {\n            if c.is_uppercase() {\n                upper += 1;\n            } else if c.is_lowercase() {\n                lower += 1;\n            }\n        }\n        let s = upper - lower;\n        if s > max_s {\n            max_s = s;\n            max_ext = ext;\n        }\n    }\n    format!(\"{}.{}\", class_name, max_ext)\n}\n",
            "pub fn cycpattern_check(a: &String, b: &String) -> bool {\n    if a.len() < b.len() {\n        return false;\n    }\n    for i in 0..b.len() {\n        let rotated = format!(\"{}{}\", &b[i..], &b[..i]);\n        if a.contains(&rotated) {\n            return true;\n        }\n    }\n    false\n}\n",
            "pub fn even_odd_count(num: i32) -> Vec<i32> {\n    let ds = num.abs().to_string();\n    let mut even = 0;\n    for d in ds.chars() {\n        if (d.to_digit(10).unwrap()) % 2 == 0 {\n            even += 1;\n        }\n    }\n    vec![even, ds.len() as i32 - even]\n}\n",
            "pub fn int_to_mini_roman(num: i32) -> String {\n    let values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    let numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    let mut res = Vec::new();\n    let mut num = num;\n    for i in 0..values.len() {\n        while num >= values[i] {\n            res.push(numerals[i]);\n            num -= values[i];\n        }\n    }\n    res.concat()\n}\n",
            "pub fn right_angle_triangle(mut a: i32, mut b: i32, mut c: i32) -> bool {\n    if a > b { std::mem::swap(&mut a, &mut b); }\n    if b > c { std::mem::swap(&mut b, &mut c); }\n    if a > b { std::mem::swap(&mut a, &mut b); }\n    return a * a + b * b == c * c;\n}\n",
            "pub fn find_max(words: &Vec<String>) -> String {\n    let mut max_cnt = 0;\n    let mut max_w = \"\".to_string();\n    \n    for w in words {\n        let cnt = unique_chars(w).len();\n        if cnt > max_cnt {\n            max_cnt = cnt;\n            max_w = w.clone();\n        } else if cnt == max_cnt && w < &max_w {\n            max_w = w.clone();\n        }\n    }\n    \n    max_w\n}\n\nfn unique_chars(s: &str) -> std::collections::HashSet<char> {\n    let mut char_set = std::collections::HashSet::new();\n    for c in s.chars() {\n        char_set.insert(c);\n    }\n    char_set\n}\n",
            "pub fn eat(num: i32, need: i32, remaining: i32) -> Vec<i32> {\n    if need <= remaining {\n        vec![num + need, remaining - need]\n    } else {\n        vec![num + remaining, 0]\n    }\n}\n",
            "pub fn do_algebra(operators: &Vec<String>, operands: &Vec<i32>) -> i32 {\n    let mut ops = operators.clone();\n    let mut nums = operands.clone();\n    \n    let mut i = ops.len() - 1;\n    while i >= 0 {\n        if ops[i] == \"**\" {\n            nums[i] = (nums[i] as f64).powi(nums[i + 1]) as i32;\n            nums.drain(i + 1..=i + 1);\n            ops.drain(i..=i);\n        } else {\n            i -= 1;\n        }\n    }\n\n    let mut i = 0;\n    while i < ops.len() {\n        if ops[i] == \"*\" {\n            nums[i] *= nums[i + 1];\n            nums.drain(i + 1..=i + 1);\n            ops.drain(i..=i);\n            i -= 1;\n        } else if ops[i] == \"//\" {\n            nums[i] /= nums[i + 1];\n            nums.drain(i + 1..=i + 1);\n            ops.drain(i..=i);\n            i -= 1;\n        }\n        i += 1;\n    }\n\n    let mut i = 0;\n    while i < ops.len() {\n        if ops[i] == \"+\" {\n            nums[i] += nums[i + 1];\n            nums.drain(i + 1..=i + 1);\n            ops.drain(i..=i);\n            i -= 1;\n        } else if ops[i] == \"-\" {\n            nums[i] -= nums[i + 1];\n            nums.drain(i + 1..=i + 1);\n            ops.drain(i..=i);\n            i -= 1;\n        }\n        i += 1;\n    }\n\n    nums[0]\n}\n",
            "fn has_alpha(s: &str) -> bool {\n    s.chars().any(|ch| ch.is_alphabetic())\n}\n\nfn reverse_string(s: &str) -> String {\n    let mut chars: Vec<char> = s.chars().collect();\n    chars.reverse();\n    chars.into_iter().collect()\n}\n\npub fn solve(s: &String) -> String {\n    if !has_alpha(s) {\n        return reverse_string(s);\n    }\n    let mut result: Vec<char> = Vec::new();\n    for ch in s.chars() {\n        if !ch.is_alphabetic() {\n            result.push(ch);\n        } else if ch.is_uppercase() {\n            result.push(ch.to_lowercase().next().unwrap());\n        } else {\n            result.push(ch.to_uppercase().next().unwrap());\n        }\n    }\n    result.into_iter().collect()\n}\n",
            "use md5;\n\npub fn string_to_md5(txt: &String) -> Option<String> {\n    if txt.is_empty() {\n        None\n    } else {\n        let mut md5_hash = md5::Md5::new();\n        md5_hash.update(txt);\n        let result = md5_hash.finalize();\n        Some(format!(\"{:x}\", result))\n    }\n}\n",
            "fn min(x: i32, y: i32) -> i32 {\n    if x < y { x } else { y }\n}\n\nfn max(x: i32, y: i32) -> i32 {\n    if x > y { x } else { y }\n}\n\npub fn generate_integers(a: i32, b: i32) -> Vec<i32> {\n    let lower = max(2, min(a, b));\n    let upper = min(8, max(a, b));\n    (lower..=upper).filter(|&i| i % 2 == 0).collect()\n}\n"
        ],
        "php": [
            "/**\n * @param {array<float>} $numbers\n * @param {float} $threshold\n * @returns {bool}\n */\nfunction hasCloseElements($numbers, $threshold) {\n    for ($i = 0; $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n            if (abs($numbers[$i] - $numbers[$j]) < $threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nfunction abs($x) {\n    if ($x < 0) {\n        return -$x;\n    }\n    return $x;\n}\n",
            "/**\n * @param {string} $parenString\n * @returns {array<string>}\n */\nfunction separateParenGroups ($parenString) {\n    $groups = [];\n    $stk = [];\n    $currentGroup = \"\";\n    $parens = str_replace(' ', '', $parenString);\n    \n    for ($i = 0; $i < strlen($parens); $i++) {\n        $ch = $parens[$i];\n        if ($ch === '(') {\n            array_push($stk, $ch);\n            $currentGroup .= $ch;\n        } else if ($ch === ')') {\n            array_pop($stk);\n            $currentGroup .= $ch;\n            if (count($stk) === 0) {\n                array_push($groups, $currentGroup);\n                $currentGroup = \"\";\n            }\n        }\n    }\n    return $groups;\n}\n",
            "/**\n * @param float $num\n * @return float\n */\nfunction truncateNumber($num) {\n    return $num - floor($num);\n}\n",
            "/**\n * @param {array<int>} $operations\n * @returns {bool}\n */\nfunction belowZero ($operations) {\n    $balance = 0;\n    foreach ($operations as $op) {\n        $balance += $op;\n        if ($balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param {array<float>} $numbers\n * @returns {float}\n */\nfunction meanAbsoluteDeviation($numbers) {\n    $mean = 0.0;\n    foreach ($numbers as $number) {\n        $mean += $number;\n    }\n    $mean /= count($numbers);\n\n    $deviation = 0.0;\n    foreach ($numbers as $number) {\n        $deviation += abs($number - $mean);\n    }\n    return $deviation / count($numbers);\n}\n",
            "/**\n * @param {array<int>} $numbers\n * @param {int} $delimiter\n * @returns {array<int>}\n */\nfunction intersperse ($numbers, $delimiter) {\n    $result = [];\n    for ($i = 0; $i < count($numbers); $i++) {\n        if ($i != 0) {\n            $result[] = $delimiter;\n        }\n        $result[] = $numbers[$i];\n    }\n    return $result;\n}\n",
            "/**\n * @param {string} $parenString\n * @returns {array<int>}\n */\nfunction parseNestedParens($parenString) {\n    $result = [];\n    $parenGroups = explode(' ', $parenString);\n    foreach ($parenGroups as $group) {\n        $maxDepth = 0;\n        $depth = 0;\n        for ($i = 0; $i < strlen($group); $i++) {\n            $ch = $group[$i];\n            if ($ch === '(') {\n                $depth++;\n                if ($depth > $maxDepth) {\n                    $maxDepth = $depth;\n                }\n            } elseif ($ch === ')') {\n                $depth--;\n            }\n        }\n        $result[] = $maxDepth;\n    }\n    return $result;\n}\n",
            "/**\n * @param {array<string>} $strs\n * @param {string} $substring\n * @returns {array<string>}\n */\nfunction filterBySubstring ($strs, $substring) {\n    $result = array();\n    foreach ($strs as $s) {\n        if (strpos($s, $substring) !== false) {\n            $result[] = $s;\n        }\n    }\n    return $result;\n}\n",
            "/**\n * @param {array<int>} $numbers\n * @returns {array<int>}\n */\nfunction sumProduct($numbers) {\n    $n_sum = 0;\n    foreach ($numbers as $num) {\n        $n_sum += $num;\n    }\n    \n    $n_product = 1;\n    foreach ($numbers as $num) {\n        $n_product *= $num;\n    }\n    \n    return array($n_sum, $n_product);\n}\n",
            "function rollingMax ($numbers) {\n    $maxSoFar = PHP_INT_MIN;\n    $result = array();\n    foreach ($numbers as $i => $num) {\n        if ($num > $maxSoFar) {\n            $maxSoFar = $num;\n        }\n        $result[$i] = $maxSoFar;\n    }\n    return $result;\n}\n",
            "/**\n * @param {string} $s\n * @returns {string}\n */\nfunction makePalindrome($s) {\n    function is_palindrome($str) {\n        for ($i = 0; $i < strlen($str) / 2; $i++) {\n            if ($str[$i] != $str[strlen($str) - 1 - $i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    if (is_palindrome($s)) {\n        return $s;\n    }\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (is_palindrome(substr($s, $i))) {\n            $suffix = substr($s, 0, $i);\n            $reversed_suffix = strrev($suffix);\n            return $s . $reversed_suffix;\n        }\n    }\n    return \"\";\n}\n",
            "function stringXor($a, $b) {\n    $result = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        if ($a[$i] == $b[$i]) {\n            $result .= \"0\";\n        } else {\n            $result .= \"1\";\n        }\n    }\n    return $result;\n}\n",
            "/**\n * @param {array<string>} $strs\n * @returns {string | null}\n */\nfunction longest ($strs) {\n    if (count($strs) === 0) {\n        return null;\n    }\n    $longestS = $strs[0];\n    foreach ($strs as $s) {\n        if (strlen($s) > strlen($longestS)) {\n            $longestS = $s;\n        }\n    }\n    return $longestS;\n}\n",
            "/**\n * @param {int} $a\n * @param {int} $b\n * @returns {int}\n */\nfunction greatestCommonDivisor($a, $b) {\n    if ($b == 0) {\n        return $a;\n    } else {\n        return greatestCommonDivisor($b, $a % $b);\n    }\n}\n",
            "/**\n * @param {string} $s\n * @returns {array<string>}\n */\nfunction allPrefixes ($s) {\n    $prefixes = [];\n    for ($i = 0; $i < strlen($s); $i++) {\n        $prefixes[$i] = substr($s, 0, $i + 1);\n    }\n    return $prefixes;\n}\n",
            "/**\n * @param {int} $n\n * @returns {string}\n */\nfunction stringSequence($n) {\n    $result = [];\n    for ($i = 0; $i <= $n; $i++) {\n        $result[] = strval($i);\n    }\n    return implode(\" \", $result);\n}\n",
            "/**\n * @param {string} $s\n * @returns {int}\n */\nfunction countDistinctCharacters ($s) {\n    $charSet = [];\n    for ($i = 0; $i < strlen($s); $i++) {\n        $c = strtolower($s[$i]);\n        $charSet[$c] = true;\n    }\n    return count($charSet);\n}\n",
            "/**\n * @param {string} $musicString\n * @returns {array<int>}\n */\nfunction parseMusic($musicString) {\n    $durations = [\"o\" => 4, \"o|\" => 2, \".|\" => 1];\n    $notes = explode(\" \", $musicString);\n    $result = [];\n    foreach ($notes as $note) {\n        if (array_key_exists($note, $durations)) {\n            $result[] = $durations[$note];\n        }\n    }\n    return $result;\n}\n",
            "/**\n * @param {string} $s\n * @param {string} $substring\n * @returns {int}\n */\nfunction howManyTimes($s, $substring) {\n    $times = 0;\n    for ($i = 0; $i <= strlen($s) - strlen($substring); $i++) {\n        if (substr($s, $i, strlen($substring)) == $substring) {\n            $times++;\n        }\n    }\n    return $times;\n}\n",
            "/**\n * @param {string} $numbers\n * @returns {string}\n */\nfunction sortNumbers ($numbers) {\n    $numDict = [\n        \"zero\" => 0,\n        \"one\" => 1,\n        \"two\" => 2,\n        \"three\" => 3,\n        \"four\" => 4,\n        \"five\" => 5,\n        \"six\" => 6,\n        \"seven\" => 7,\n        \"eight\" => 8,\n        \"nine\" => 9\n    ];\n    $numSlice = explode(\" \", $numbers);\n    usort($numSlice, function($a, $b) use ($numDict) {\n        return $numDict[$a] - $numDict[$b];\n    });\n    return implode(\" \", $numSlice);\n}\n",
            "function findClosestElements($numbers) {\n    $sortedNumbers = $numbers;\n    sort($sortedNumbers);\n\n    $minDiff = PHP_FLOAT_MAX;\n    $closestPair = [];\n\n    for ($i = 1; $i < count($sortedNumbers); $i++) {\n        $diff = $sortedNumbers[$i] - $sortedNumbers[$i - 1];\n        if ($diff < $minDiff) {\n            $minDiff = $diff;\n            $closestPair = [$sortedNumbers[$i - 1], $sortedNumbers[$i]];\n        }\n    }\n\n    return $closestPair;\n}\n",
            "/**\n * @param {array<float>} $numbers\n * @returns {array<float>}\n */\nfunction rescaleToUnit($numbers) {\n    $minNum = reset($numbers);\n    $maxNum = $minNum;\n    foreach ($numbers as $num) {\n        if ($num < $minNum) {\n            $minNum = $num;\n        }\n        if ($num > $maxNum) {\n            $maxNum = $num;\n        }\n    }\n    if ($minNum == $maxNum) {\n        $result = array_fill(0, count($numbers), 0.0);\n        return $result;\n    } else {\n        $result = array();\n        foreach ($numbers as $i => $num) {\n            $result[$i] = ($num - $minNum) / ($maxNum - $minNum);\n        }\n        return $result;\n    }\n}\n",
            "/**\n * @param {array<mixed>} $values\n * @returns {array<int>}\n */\nfunction filterIntegers($values) {\n    $result = [];\n    foreach ($values as $value) {\n        if (is_int($value)) {\n            $result[] = $value;\n        }\n    }\n    return $result;\n}\n",
            "/**\n * @param {string} $s\n * @returns {int}\n */\nfunction strLength($s) {\n    return strlen($s);\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction largestDivisor ($n) {\n    for ($i = 2; $i < $n; $i++) {\n        if ($n % $i == 0) {\n            return $n / $i;\n        }\n    }\n    return 1;\n}\n",
            "/**\n * @param {int} $n\n * @returns {array<int>}\n */\nfunction factorize ($n) {\n    $factors = [];\n    $divisor = 2;\n    while ($divisor <= $n) {\n        if ($n % $divisor == 0) {\n            array_push($factors, $divisor);\n            $n /= $divisor;\n        } else {\n            $divisor++;\n        }\n    }\n    return $factors;\n}\n",
            "/**\n * @param {array<int>} $numbers\n * @returns {array<int>}\n */\nfunction removeDuplicates ($numbers) {\n    $counts = array();\n    foreach ($numbers as $num) {\n        if (isset($counts[$num])) {\n            $counts[$num]++;\n        } else {\n            $counts[$num] = 1;\n        }\n    }\n    $res = array();\n    foreach ($numbers as $num) {\n        if ($counts[$num] == 1) {\n            $res[] = $num;\n        }\n    }\n    return $res;\n}\n",
            "/**\n * @param {string} $s\n * @returns {string}\n */\nfunction flipCase ($s) {\n    $flipped = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        $ch = $s[$i];\n        if (!ctype_alpha($ch)) {\n            $flipped .= $ch;\n        } elseif (ctype_lower($ch)) {\n            $flipped .= strtoupper($ch);\n        } elseif (ctype_upper($ch)) {\n            $flipped .= strtolower($ch);\n        }\n    }\n    return $flipped;\n}\n",
            "function concatenate ($strs) {\n    return implode('', $strs);\n}\n",
            "/**\n * @param {array<string>} $strs\n * @param {string} $prefixStr\n * @returns {array<string>}\n */\nfunction filterByPrefix($strs, $prefixStr) {\n    $result = [];\n    foreach ($strs as $s) {\n        if (strpos($s, $prefixStr) === 0) {\n            $result[] = $s;\n        }\n    }\n    return $result;\n}\n",
            "/**\n * @param {array<int>} $l\n * @returns {array<int>}\n */\nfunction getPositive ($l) {\n    $result = [];\n    foreach ($l as $num) {\n        if ($num > 0) {\n            $result[] = $num;\n        }\n    }\n    return $result;\n}\n",
            "    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= sqrt($n); $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "/**\n * @param {array<int>} $xs\n * @param {float} $x\n * @returns {float}\n */\nfunction poly($xs, $x) {\n    $res = 0.0;\n    for ($i = 0; $i < count($xs); $i++) {\n        $res += $xs[$i] * pow($x, $i);\n    }\n    return $res;\n}\n\n/**\n * @param {array<int>} $xs\n * @returns {float}\n */\nfunction findZero($xs) {\n    $x1 = 1.0;\n    $x2 = -1.0;\n    while (poly($xs, $x1) * poly($xs, $x2) > 0) {\n        $x1 *= 2;\n        $x2 *= 2;\n    }\n    while (abs($x1 - $x2) > 1e-10) {\n        $mid = ($x1 + $x2) / 2;\n        if (poly($xs, $mid) == 0) {\n            return $mid;\n        } elseif (poly($xs, $mid) * poly($xs, $x1) < 0) {\n            $x2 = $mid;\n        } else {\n            $x1 = $mid;\n        }\n    }\n    return ($x1 + $x2) / 2;\n}\n",
            "/**\n * @param {array<int>} $l\n * @returns {array<int>}\n */\nfunction sortThird ($l) {\n    $sorted_third = array_slice($l, 0, count($l), true);\n    ksort($sorted_third);\n    foreach ($sorted_third as $key => $value) {\n        $sorted_third[$key] = $l[$key];\n    }\n    usort($sorted_third, function($a, $b) use ($l) {\n        return ($a % 3 == 0 ? $sorted_third[array_search($a, $l)] : $a) <=> ($b % 3 == 0 ? $sorted_third[array_search($b, $l)] : $b);\n    });\n    return array_values($sorted_third);\n}\n",
            "function listUnique ($l) {\n    $uniqueMap = [];\n    $result = [];\n    foreach ($l as $value) {\n        if (!isset($uniqueMap[$value])) {\n            $uniqueMap[$value] = true;\n            $result[] = $value;\n        }\n    }\n    sort($result);\n    return $result;\n}\n",
            "function maxElement ($l) {\n    if (count($l) == 0) {\n        return 0;\n    }\n    $max = $l[0];\n    foreach ($l as $v) {\n        if ($v > $max) {\n            $max = $v;\n        }\n    }\n    return $max;\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction fizzBuzz($n) {\n    $cnt = 0;\n    for ($i = 0; $i < $n; $i++) {\n        if ($i % 11 == 0 || $i % 13 == 0) {\n            $cnt += countSevens($i);\n        }\n    }\n    return $cnt;\n}\n\nfunction countSevens($num) {\n    $cnt = 0;\n    while ($num > 0) {\n        if ($num % 10 == 7) {\n            $cnt++;\n        }\n        $num = intdiv($num, 10);\n    }\n    return $cnt;\n}\n",
            "/**\n * @param {array<int>} $l\n * @returns {array<int>}\n */\nfunction sortEven ($l) {\n    $evenIndices = [];\n    foreach ($l as $i => $value) {\n        if ($i % 2 == 0) {\n            $evenIndices[] = $value;\n        }\n    }\n    sort($evenIndices);\n    \n    $sortedList = array_fill(0, count($l), 0);\n    $evenIndex = 0;\n    foreach ($l as $i => $value) {\n        if ($i % 2 == 0) {\n            $sortedList[$i] = $evenIndices[$evenIndex];\n            $evenIndex++;\n        } else {\n            $sortedList[$i] = $l[$i];\n        }\n    }\n    return $sortedList;\n}\n",
            "/**\n * @param {string} $s\n * @returns {string}\n */\nfunction encodeCyclic($s) {\n    $result = '';\n    for ($i = 0; $i < strlen($s); $i += 3) {\n        if ($i + 3 > strlen($s)) {\n            $result .= substr($s, $i);\n        } else {\n            $result .= substr($s, $i + 1, 2) . $s[$i];\n        }\n    }\n    return $result;\n}\n\n/**\n * @param {string} $s\n * @returns {string}\n */\nfunction decodeCyclic($s) {\n    return encodeCyclic(encodeCyclic($s));\n}\n",
            "/**\n * @param int $n\n * @return int\n */\nfunction primeFib($n) {\n    function isPrime($num) {\n        if ($num < 2) {\n            return false;\n        }\n        for ($i = 2; $i <= sqrt($num); $i++) {\n            if ($num % $i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    $f = [0, 1];\n    $cnt = 0;\n    while ($cnt < $n) {\n        $f = [$f[1], $f[0] + $f[1]];\n        if (isPrime($f[1])) {\n            $cnt++;\n        }\n    }\n    return $f[1];\n}\n",
            "/**\n * @param {array<int>} $l\n * @returns {bool}\n */\nfunction triplesSumToZero($l) {\n    for ($i = 0; $i < count($l); $i++) {\n        for ($j = $i + 1; $j < count($l); $j++) {\n            for ($k = $j + 1; $k < count($l); $k++) {\n                if ($l[$i] + $l[$j] + $l[$k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "/** \n* @param {int} $n \n* @returns {int} \n*/ \nfunction carRaceCollision($n) { \n    return $n * $n; \n}",
            "/**\n * @param {array<int>} $l\n * @returns {array<int>}\n */\nfunction incrList ($l) {\n    $result = array();\n    foreach ($l as $i => $v) {\n        $result[$i] = $v + 1;\n    }\n    return $result;\n}\n",
            "/**\n * @param {array<int>} $l\n * @returns {bool}\n */\nfunction pairsSumToZero ($l) {\n    $seen = [];\n    foreach ($l as $num) {\n        if (isset($seen[-$num])) {\n            return true;\n        }\n        $seen[$num] = true;\n    }\n    return false;\n}\n",
            "/**\n * @param {int} $x\n * @param {int} $bas\n * @returns {string}\n */\nfunction changeBase ($x, $bas) {\n    if ($x == 0) {\n        return \"0\";\n    }\n    $digits = [];\n    while ($x > 0) {\n        $digits[] = strval($x % $bas);\n        $x = intdiv($x, $bas);\n    }\n    $length = count($digits);\n    for ($i = 0; $i < $length / 2; $i++) {\n        $temp = $digits[$i];\n        $digits[$i] = $digits[$length - $i - 1];\n        $digits[$length - $i - 1] = $temp;\n    }\n    return implode(\"\", $digits);\n}\n",
            "/**\n * @param {int} $a\n * @param {int} $h\n * @returns {float}\n */\nfunction triangleArea ($a, $h) {\n    return floatval($a * $h) / 2.0;\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction fib4($n) {\n    $fib = array(0, 0, 2, 0);\n    for ($i = 4; $i <= $n; $i++) {\n        $sum = 0;\n        foreach ($fib as $value) {\n            $sum += $value;\n        }\n        $fib[$i % 4] = $sum;\n    }\n    return $fib[$n % 4];\n}",
            "function median ($l) {\n    sort($l);\n    if (count($l) % 2 != 0) {\n        return $l[floor(count($l) / 2)];\n    } else {\n        return ($l[count($l) / 2] + $l[count($l) / 2 - 1]) / 2;\n    }\n}\n",
            "/**\n * @param {string} $txt\n * @returns {bool}\n */\nfunction isPalindrome($txt) {\n    $n = strlen($txt);\n    for ($i = 0; $i < $n / 2; $i++) {\n        if ($txt[$i] != $txt[$n - 1 - $i]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "/**\n * @param {int} $n\n * @param {int} $p\n * @returns {int}\n */\nfunction modp ($n, $p) {\n    $ret = 1;\n    for ($i = 0; $i < $n; $i++) {\n        $ret = ($ret * 2) % $p;\n    }\n    return $ret;\n}\n",
            "/**\n * @param {string} $s\n * @returns {string}\n */\nfunction encodeShift($s) {\n    $result = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        $ch = ord($s[$i]);\n        $shiftedCh = chr(((($ch - 97 + 5) % 26) + 97));\n        $result .= $shiftedCh;\n    }\n    return $result;\n}\n\n/**\n * @param {string} $s\n * @returns {string}\n */\nfunction decodeShift($s) {\n    $result = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        $ch = ord($s[$i]);\n        $shiftedCh = chr(((($ch - 97 + 21) % 26) + 97));\n        $result .= $shiftedCh;\n    }\n    return $result;\n}\n",
            "/**\n * @param {string} $txt\n * @returns {string}\n */\nfunction removeVowels($txt) {\n    $vowels = \"aeiouAEIOU\";\n    $result = \"\";\n    for ($i = 0; $i < strlen($txt); $i++) {\n        $char = $txt[$i];\n        if (strpos($vowels, $char) === false) {\n            $result .= $char;\n        }\n    }\n    return $result;\n}\n",
            "/**\n * @param array<int> $l\n * @param int $t\n * @return bool\n */\nfunction belowThreshold($l, $t) {\n    foreach ($l as $x) {\n        if ($x >= $t) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "/**\n * @param {int} $x\n * @param {int} $y\n * @returns {int}\n */\nfunction add($x, $y) {\n    return $x + $y;\n}\n",
            "/**\n * @param {string} $s0\n * @param {string} $s1\n * @returns {bool}\n */\nfunction sameChars($s0, $s1) {\n    return setEqual(stringToSet($s0), stringToSet($s1));\n}\n\nfunction stringToSet($s) {\n    $set = [];\n    for ($i = 0; $i < mb_strlen($s, 'UTF-8'); $i++) {\n        $c = mb_substr($s, $i, 1, 'UTF-8');\n        $set[$c] = true;\n    }\n    return $set;\n}\n\nfunction setEqual($set1, $set2) {\n    if (count($set1) !== count($set2)) {\n        return false;\n    }\n    foreach ($set1 as $key => $value) {\n        if (!isset($set2[$key])) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction fib($n) {\n    if ($n <= 1) {\n        return $n;\n    } else {\n        return fib($n - 1) + fib($n - 2);\n    }\n}\n",
            "/**\n * @param {string} $brackets\n * @return {bool}\n */\nfunction correctBracketing($brackets) {\n    $depth = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] == '<') {\n            $depth += 1;\n        } elseif ($brackets[$i] == '>') {\n            $depth -= 1;\n        }\n        if ($depth < 0) {\n            return false;\n        }\n    }\n    return $depth == 0;\n}\n",
            "/**\n * @param {array<int>} $l\n * @returns {bool}\n */\nfunction monotonic ($l) {\n    if (count($l) <= 1) {\n        return true;\n    }\n\n    $increasing = true;\n    $decreasing = true;\n\n    for ($i = 1; $i < count($l); $i++) {\n        if ($l[$i] > $l[$i - 1]) {\n            $decreasing = false;\n        }\n        if ($l[$i] < $l[$i - 1]) {\n            $increasing = false;\n        }\n    }\n\n    return $increasing || $decreasing;\n}\n",
            "/**\n * @param {array<int>} $l1\n * @param {array<int>} $l2\n * @returns {array<int>}\n */\nfunction common ($l1, $l2) {\n    $set1 = array_flip($l1);\n    $set2 = array_flip($l2);\n\n    $result = [];\n    foreach ($set1 as $k => $v) {\n        if (isset($set2[$k])) {\n            $result[] = $k;\n        }\n    }\n\n    sort($result);\n    return $result;\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction largestPrimeFactor ($n) {\n    $i = 2;\n    while ($i*$i <= $n) {\n        if ($n % $i != 0) {\n            $i++;\n        } else {\n            $n /= $i;\n        }\n    }\n    return $n;\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction sumToN($n) {\n    $sum = 0;\n    for ($i = 0; $i <= $n; $i++) {\n        $sum += $i;\n    }\n    return $sum;\n}\n",
            "/**\n * @param {string} $brackets\n * @returns {bool}\n */\nfunction correctBracketing ($brackets) {\n    $depth = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] == '(') {\n            $depth++;\n        } else if ($brackets[$i] == ')') {\n            $depth--;\n        }\n        if ($depth < 0) {\n            return false;\n        }\n    }\n    return $depth == 0;\n}\n",
            "/**\n * @param {array<int>} $xs\n * @returns {array<int>}\n */\nfunction derivative($xs) {\n    $result = array();\n    for ($i = 1; $i < count($xs); $i++) {\n        $result[$i - 1] = $xs[$i] * $i;\n    }\n    return $result;\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction fibfib($n) {\n\tif ($n <= 1) {\n\t\treturn 0;\n\t}\n\t$a = 0;\n\t$b = 0;\n\t$c = 1;\n\twhile ($n > 2) {\n\t\t$a = $b;\n\t\t$b = $c;\n\t\t$c = $a + $b + $c;\n\t\t$n -= 1;\n\t}\n\treturn $c;\n}\n",
            "/**\n * @param {string} $s\n * @returns {int}\n */\nfunction vowelsCount ($s) {\n    $vowels = \"aeiou\";\n    $cnt = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (strpos($vowels, strtolower($s[$i])) !== false || ($i == strlen($s) - 1 && strtolower($s[$i]) == 'y')) {\n            $cnt++;\n        }\n    }\n    return $cnt;\n}\n",
            "/**\n * @param {int} $x\n * @param {int} $shift\n * @returns {string}\n */\nfunction circularShift($x, $shift) {\n    $xStr = strval($x);\n    if ($shift > strlen($xStr)) {\n        return reverseString($xStr);\n    } else {\n        return substr($xStr, -$shift) . substr($xStr, 0, -(int)$shift);\n    }\n}\n\nfunction reverseString($s) {\n    $runes = str_split($s);\n    for ($i = 0, $j = count($runes) - 1; $i < $j; $i++, $j--) {\n        $temp = $runes[$i];\n        $runes[$i] = $runes[$j];\n        $runes[$j] = $temp;\n    }\n    return implode('', $runes);\n}\n",
            "/**\n * @param {string} $s\n * @returns {int}\n */\nfunction digitSum($s) {\n    $sum = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        $c = $s[$i];\n        if ($c >= 'A' && $c <= 'Z') {\n            $sum += ord($c);\n        }\n    }\n    return $sum;\n}\n",
            "/**\n * @param {string} $s\n * @param {int} $n\n * @returns {int}\n */\nfunction fruitDistribution($s, $n) {\n    $words = explode(' ', $s);\n    $applesIndex = array_search(\"apples\", $words);\n    $orangesIndex = array_search(\"oranges\", $words);\n    $apples = (int)$words[$applesIndex - 1];\n    $oranges = (int)$words[$orangesIndex - 1];\n    return $n - $apples - $oranges;\n}\n",
            "function pluck ($arr) {\n    $evens = [];\n    foreach ($arr as $n) {\n        if ($n % 2 == 0) {\n            $evens[] = $n;\n        }\n    }\n    if (count($evens) == 0) {\n        return [];\n    }\n    $min_even = $evens[0];\n    foreach ($evens as $n) {\n        if ($n < $min_even) {\n            $min_even = $n;\n        }\n    }\n    $index = -1;\n    foreach ($arr as $i => $n) {\n        if ($n == $min_even) {\n            $index = $i;\n            break;\n        }\n    }\n    return [$min_even, $index];\n}\n",
            "/**\n * @param {array<int>} $lst\n * @returns {int}\n */\nfunction search ($lst) {\n    $freqs = [];\n    foreach ($lst as $n) {\n        if (array_key_exists($n, $freqs)) {\n            $freqs[$n]++;\n        } else {\n            $freqs[$n] = 1;\n        }\n    }\n    $goodVals = [];\n    foreach ($freqs as $k => $v) {\n        if ($v >= $k) {\n            $goodVals[] = $k;\n        }\n    }\n    if (count($goodVals) == 0) {\n        return -1;\n    }\n    $maxVal = $goodVals[0];\n    foreach ($goodVals as $val) {\n        if ($val > $maxVal) {\n            $maxVal = $val;\n        }\n    }\n    return $maxVal;\n}\n",
            "/**\n * @param {array<int>} $lst\n * @returns {array<int>}\n */\nfunction strangeSortList ($lst) {\n    $sl = $lst;\n    sort($sl);\n    $result = [];\n    $left = 0;\n    $right = count($sl) - 1;\n    while ($left <= $right) {\n        $result[] = $sl[$left];\n        $left++;\n        if ($left <= $right) {\n            $result[] = $sl[$right];\n            $right--;\n        }\n    }\n    return $result;\n}\n",
            "/**\n * @param {int} $a\n * @param {int} $b\n * @param {int} $c\n * @returns {float}\n */\nfunction triangleArea($a, $b, $c) {\n    if (($a + $b > $c) && ($a + $c > $b) && ($b + $c > $a)) {\n        $s = ($a + $b + $c) / 2.0;\n        return sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "/**\n * @param {array<int>} $q\n * @param {int} $w\n * @returns {bool}\n */\nfunction willItFly ($q, $w) {\n    if (count($q) == 0) {\n        return false;\n    }\n    $is_palin = true;\n    for ($i = 0; $i < count($q); $i++) {\n        if ($q[$i] != $q[count($q) - $i - 1]) {\n            $is_palin = false;\n            break;\n        }\n    }\n    $total = 0;\n    foreach ($q as $v) {\n        $total += $v;\n    }\n    return $is_palin && $total <= $w;\n}\n",
            "function smallestChange ($arr) {\n    $ans = 0;\n    for ($i = 0; $i < count($arr) / 2; $i++) {\n        if ($arr[$i] != $arr[count($arr) - $i - 1]) {\n            $ans++;\n        }\n    }\n    return $ans;\n}\n",
            "/**\n * @param {array<string>} $lst1\n * @param {array<string>} $lst2\n * @returns {array<string>}\n */\nfunction totalMatch ($lst1, $lst2) {\n    $cnt1 = 0;\n    foreach ($lst1 as $s) {\n        $cnt1 += strlen($s);\n    }\n    $cnt2 = 0;\n    foreach ($lst2 as $s) {\n        $cnt2 += strlen($s);\n    }\n    if ($cnt1 <= $cnt2) {\n        return $lst1;\n    } else {\n        return $lst2;\n    }\n}\n",
            "/**\n * @param {int} $a\n * @returns {bool}\n */\nfunction isMultiplyPrime ($a) {\n    if ($a < 2) {\n        return false;\n    }\n    function isPrime($n) {\n        if ($n < 2) {\n            return false;\n        }\n        for ($i = 2; $i <= sqrt($n); $i++) {\n            if ($n % $i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    $cnt = 0;\n    for ($i = 2; $i <= $a; $i++) {\n        if (isPrime($i)) {\n            while ($a % $i == 0) {\n                $cnt++;\n                $a /= $i;\n            }\n        }\n    }\n    return $cnt == 3;\n}\n",
            "/**\n * @param {int} $x\n * @param {int} $n\n * @returns {bool}\n */\nfunction isSimplePower($x, $n) {\n    if ($n < 2) {\n        return $x == $n;\n    }\n    $tmp = 1;\n    while ($tmp < $x) {\n        $tmp *= $n;\n    }\n    return $tmp == $x;\n}\n",
            "/**\n * @param {int} $a\n * @returns {bool}\n */\nfunction isCube($a) {\n    $a = abs($a);\n    $root = (int)round(pow($a, 1.0 / 3.0));\n    return $root * $root * $root == $a;\n}\n",
            "/**\n * @param {string} $num\n * @returns {int}\n */\nfunction hexKey($num) {\n    $count = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n        $x = $num[$i];\n        if ($x == '2' || $x == '3' || $x == '5' || $x == '7' || $x == 'B' || $x == 'D') {\n            $count++;\n        }\n    }\n    return $count;\n}\n",
            "function decimalToBinary ($dec) {\n    $binary = decbin($dec);\n    return \"db{$binary}db\";\n}\n",
            "/**\n * @param {string} $s\n * @returns {bool}\n */\nfunction isHappy($s) {\n    if (strlen($s) < 3) {\n        return false;\n    }\n    for ($i = 0; $i < strlen($s) - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i] == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "/**\n * @param {array<float>} $grades\n * @returns {array<string>}\n */\nfunction numericalLetterGrade ($grades) {\n    $result = [];\n    foreach ($grades as $g) {\n        if ($g == 4.0) {\n            $result[] = \"A+\";\n        } elseif ($g > 3.7) {\n            $result[] = \"A\";\n        } elseif ($g > 3.3) {\n            $result[] = \"A-\";\n        } elseif ($g > 3.0) {\n            $result[] = \"B+\";\n        } elseif ($g > 2.7) {\n            $result[] = \"B\";\n        } elseif ($g > 2.3) {\n            $result[] = \"B-\";\n        } elseif ($g > 2.0) {\n            $result[] = \"C+\";\n        } elseif ($g > 1.7) {\n            $result[] = \"C\";\n        } elseif ($g > 1.3) {\n            $result[] = \"C-\";\n        } elseif ($g > 1.0) {\n            $result[] = \"D+\";\n        } elseif ($g > 0.7) {\n            $result[] = \"D\";\n        } elseif ($g > 0.0) {\n            $result[] = \"D-\";\n        } else {\n            $result[] = \"E\";\n        }\n    }\n    return $result;\n}\n",
            "/**\n * @param {string} $s\n * @returns {bool}\n */\nfunction primeLength ($s) {\n    $length = strlen($s);\n    if ($length < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= sqrt($length); $i++) {\n        if ($length % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction startsOneEnds ($n) {\n    if ($n == 1) {\n        return 1;\n    }\n    return 2 * 9 * (int)(pow(10, $n - 2));\n}\n",
            "/**\n * @param {int} $n\n * @returns {string}\n */\nfunction solve($n) {\n    $digitsSum = 0;\n    while ($n > 0) {\n        $digit = $n % 10;\n        $digitsSum += $digit;\n        $n = intdiv($n, 10);\n    }\n    return decbin($digitsSum);\n}\n",
            "function add($lst) {\n    $sum = 0;\n    foreach ($lst as $i => $x) {\n        if ($i % 2 == 1 && $x % 2 == 0) {\n            $sum += $x;\n        }\n    }\n    return $sum;\n}\n",
            "/**\n * @param {string} $s\n * @returns {string}\n */\nfunction antiShuffle ($s) {\n    $words = explode(' ', $s);\n    foreach ($words as &$word) {\n        $runes = str_split($word);\n        sort($runes);\n        $word = implode('', $runes);\n    }\n    return implode(' ', $words);\n}\n",
            "/**\n * @param {array<array<int>>} $lst\n * @param {int} $x\n * @returns {array<array<int>>}\n */\nfunction getRow($lst, $x) {\n    $coords = [];\n    for ($i = 0; $i < count($lst); $i++) {\n        for ($j = 0; $j < count($lst[$i]); $j++) {\n            if ($lst[$i][$j] == $x) {\n                $coords[] = [$i, $j];\n            }\n        }\n    }\n    usort($coords, function($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $a[1] < $b[1] ? 1 : -1;\n        }\n        return $a[0] < $b[0] ? -1 : 1;\n    });\n    return $coords;\n}\n",
            "/**\n * @param {array<int>} $arr\n * @returns {array<int>}\n */\nfunction sortArray ($arr) {\n    if (count($arr) == 0) {\n        return [];\n    }\n    if (($arr[0] + $arr[count($arr) - 1]) % 2 == 0) {\n        rsort($arr);\n        return $arr;\n    } else {\n        sort($arr);\n        return $arr;\n    }\n}\n",
            "/**\n * @param {string} $s\n * @returns {string}\n */\nfunction encrypt ($s) {\n    $result = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        $ch = $s[$i];\n        $shifted = ord($ch) + 4;\n        if ($shifted > ord('z')) {\n            $shifted -= 26;\n        }\n        $result .= chr($shifted);\n    }\n    return $result;\n}\n",
            "/**\n * @param {array<int>} $lst\n * @returns {int | null}\n */\nfunction nextSmallest ($lst) {\n    $sl = array_unique($lst);\n    sort($sl);\n    if (count($sl) < 2) {\n        return null;\n    }\n    return $sl[1];\n}\n",
            "/**\n * @param {string} $s\n * @returns {int}\n */\nfunction isBored ($s) {\n    $sentences = preg_split('/[.!?]\\s*/', $s);\n    $count = 0;\n    foreach ($sentences as $sentence) {\n        if (strlen($sentence) >= 2 && substr($sentence, 0, 2) === \"I \") {\n            $count++;\n        }\n    }\n    return $count;\n}\n",
            "/**\n * @param {mixed} $x\n * @param {mixed} $y\n * @param {mixed} $z\n * @returns {bool}\n */\nfunction anyInt($x, $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        return ($x + $y == $z) || ($x + $z == $y) || ($y + $z == $x);\n    }\n    return false;\n}\n",
            "/**\n * @param {string} $message\n * @returns {string}\n */\nfunction encode ($message) {\n    $vowels = \"aeiouAEIOU\";\n    $result = '';\n\n    for ($i = 0; $i < strlen($message); $i++) {\n        $ch = $message[$i];\n        if (ctype_alpha($ch)) {\n            $ch1 = ctype_lower($ch) ? strtoupper($ch) : strtolower($ch);\n            if (strpos($vowels, $ch1) !== false) {\n                $ch1 = chr(ord($ch1) + 2);\n            }\n            $result .= $ch1;\n        } else {\n            $result .= $ch;\n        }\n    }\n\n    return $result;\n}\n",
            "/**\n * @param {array<int>} $lst\n * @returns {int}\n */\nfunction skjkasdkd ($lst) {\n    function isPrime($n) {\n        if ($n < 2) {\n            return false;\n        }\n        for ($i = 2; $i <= sqrt($n); $i++) {\n            if ($n % $i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    $primes = array_filter($lst, 'isPrime');\n    if (empty($primes)) {\n        return 0;\n    }\n    \n    $largest = max($primes);\n    $sum = 0;\n    foreach (str_split((string)$largest) as $digit) {\n        $sum += (int)$digit;\n    }\n    return $sum;\n}\n",
            "/**\n * @param {array<string, string>} $d\n * @returns {bool}\n */\nfunction checkDictCase ($d) {\n    if (empty($d)) {\n        return false;\n    }\n    $allLower = true;\n    $allUpper = true;\n    foreach ($d as $key => $_) {\n        if (!ctype_lower($key)) {\n            $allLower = false;\n        }\n        if (!ctype_upper($key)) {\n            $allUpper = false;\n        }\n    }\n    return $allLower || $allUpper;\n}\n",
            "/**\n * @param {int} $n\n * @returns {array<int>}\n */\nfunction countUpTo ($n) {\n    $primes = [];\n    for ($num = 2; $num < $n; $num++) {\n        $isPrime = true;\n        foreach ($primes as $p) {\n            if ($num % $p == 0) {\n                $isPrime = false;\n                break;\n            }\n        }\n        if ($isPrime) {\n            $primes[] = $num;\n        }\n    }\n    return $primes;\n}\n",
            "/**\n * @param {int} $a\n * @param {int} $b\n * @returns {int}\n */\nfunction multiply($a, $b) {\n    return (abs($a) % 10) * (abs($b) % 10);\n}\n\nfunction abs($x) {\n    if ($x < 0) {\n        return -$x;\n    }\n    return $x;\n}\n",
            "/**\n * @param {string} $s\n * @returns {int}\n */\nfunction countUpper($s) {\n    $vowels = 'AEIOU';\n    $count = 0;\n    $length = strlen($s);\n    for ($i = 0; $i < $length; $i++) {\n        $c = $s[$i];\n        if ($i % 2 == 0 && strpos($vowels, $c) !== false) {\n            $count++;\n        }\n    }\n    return $count;\n}\n",
            "/**\n * @param {string} $value\n * @returns {int}\n */\nfunction closestInteger ($value) {\n    $num = floatval($value);\n    if ($num >= 0) {\n        return intVal($num + 0.5);\n    } else {\n        return intval($num - 0.5);\n    }\n}\n",
            "/**\n * @param {int} $n\n * @returns {array<int>}\n */\nfunction makeAPile ($n) {\n    $pile = [];\n    for ($i = 0; $i < $n; $i++) {\n        $pile[$i] = $n + 2 * $i;\n    }\n    return $pile;\n}\n",
            "/**\n * @param {string} $s\n * @returns {array<string>}\n */\nfunction wordsString ($s) {\n    $words = preg_split('/[,\\s]+/', $s, -1, PREG_SPLIT_NO_EMPTY);\n    return array_filter($words, function($w) {\n        return strlen($w) > 0;\n    });\n}\n",
            "function chooseNum ($x, $y) {\n    if ($x > $y) {\n        return -1;\n    }\n    if ($y % 2 == 0) {\n        return $y;\n    }\n    if ($x != $y) {\n        return $y - 1;\n    }\n    return -1;\n}\n",
            "function roundedAvg($n, $m) {\n    if ($n > $m) {\n        return null;\n    }\n    $r_avg = intval(($m + $n) / 2.0 + 0.5);\n    return decbin($r_avg);\n}\n",
            "/**\n * @param {array<int>} $x\n * @returns {array<int>}\n */\nfunction uniqueDigits ($x) {\n    $result = [];\n    foreach ($x as $num) {\n        if (allDigitsOdd((string)$num)) {\n            $result[] = $num;\n        }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction allDigitsOdd($s) {\n    for ($i = 0; $i < strlen($s); $i++) {\n        $digit = (int)$s[$i];\n        if ($digit % 2 == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "/**\n * @param {array<int>} $arr\n * @returns {array<string>}\n */\nfunction byLength($arr) {\n    $digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    $sortedArr = array_filter($arr, function($x) {\n        return $x >= 1 && $x <= 9;\n    });\n    rsort($sortedArr);\n    $result = [];\n    foreach ($sortedArr as $i => $x) {\n        $result[$i] = $digitNames[$x - 1];\n    }\n    return $result;\n}\n",
            "/**\n * @param {int} $n\n * @returns {array<int>}\n */\nfunction f ($n) {\n    $nums = array_fill(0, $n, 0);\n    for ($i = 1; $i <= $n; $i++) {\n        $nums[$i - 1] = $i;\n    }\n    \n    $result = array_fill(0, $n, 0);\n    for ($i = 0; $i < $n; $i++) {\n        if (($i + 1) % 2 != 0) {\n            $sum = 0;\n            for ($j = 0; $j <= $i; $j++) {\n                $sum += $nums[$j];\n            }\n            $result[$i] = $sum;\n        } else {\n            $product = 1;\n            for ($j = 0; $j <= $i; $j++) {\n                $product *= $nums[$j];\n            }\n            $result[$i] = $product;\n        }\n    }\n    \n    return $result;\n}\n",
            "/**\n * @param {int} $n\n * @returns {array<int>}\n */\nfunction evenOddPalindrome($n) {\n    $cnt = [0, 0];\n    for ($i = 1; $i <= $n; $i++) {\n        if (isPalindrome(strval($i))) {\n            $cnt[$i % 2]++;\n        }\n    }\n    return $cnt;\n}\n\nfunction isPalindrome($s) {\n    $len = strlen($s);\n    for ($i = 0; $i < $len / 2; $i++) {\n        if ($s[$i] != $s[$len - 1 - $i]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "/**\n * @param {array<int>} $arr\n * @returns {int}\n */\nfunction countNums($arr) {\n    return count(array_filter($arr, function($n) {\n        $sum = 0;\n        if ($n >= 0) {\n            foreach (str_split((string)$n) as $d) {\n                $sum += (int)$d;\n            }\n        } else {\n            $sum = (int)(substr((string)$n, 0, 2)) * 2 + digits_sum(abs($n));\n        }\n        return $sum > 0;\n    }));\n}\n\nfunction digits_sum($n) {\n    if ($n >= 0) {\n        $sum = 0;\n        foreach (str_split((string)$n) as $d) {\n            $sum += (int)$d;\n        }\n        return $sum;\n    } else {\n        return (int)(substr((string)$n, 0, 2)) * 2 + digits_sum(abs($n));\n    }\n}\n",
            "function moveOneBall ($arr) {\n    if (count($arr) === 0) {\n        return true;\n    }\n    $sortedArr = $arr;\n    sort($sortedArr);\n    for ($i = 0; $i < count($arr); $i++) {\n        $firstPartEquals = array_slice($arr, $i) === array_slice($sortedArr, 0, count($arr) - $i);\n        $secondPartEquals = array_slice($arr, 0, $i) === array_slice($sortedArr, count($arr) - $i);\n        if ($firstPartEquals && $secondPartEquals) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param {array<int>} $lst1\n * @param {array<int>} $lst2\n * @returns {string}\n */\nfunction canExchange ($lst1, $lst2) {\n    $oddCnt = 0;\n    foreach ($lst1 as $num) {\n        if ($num % 2 != 0) {\n            $oddCnt++;\n        }\n    }\n    $evenCnt = 0;\n    foreach ($lst2 as $num) {\n        if ($num % 2 == 0) {\n            $evenCnt++;\n        }\n    }\n    if ($evenCnt >= $oddCnt) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n",
            "/**\n * @param {string} $test\n * @returns {array<string, int>}\n */\nfunction histogram($test) {\n    $freq = [];\n    $words = explode(' ', $test);\n    foreach ($words as $w) {\n        if (strlen($w) > 0) {\n            if (isset($freq[$w])) {\n                $freq[$w]++;\n            } else {\n                $freq[$w] = 1;\n            }\n        }\n    }\n    $result = [];\n    if (count($freq) > 0) {\n        $maxFreq = 0;\n        foreach ($freq as $v) {\n            if ($v > $maxFreq) {\n                $maxFreq = $v;\n            }\n        }\n        foreach ($freq as $k => $v) {\n            if ($v == $maxFreq) {\n                $result[$k] = $v;\n            }\n        }\n    }\n    return $result;\n}\n",
            "/**\n * @param {string} $s\n * @param {string} $c\n * @returns {array<string>}\n */\nfunction reverseDelete ($s, $c) {\n    $s1 = \"\";\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (strpos($c, $s[$i]) === false) {\n            $s1 .= $s[$i];\n        }\n    }\n    $isPalindrome = function($str) {\n        $n = strlen($str);\n        for ($i = 0; $i < $n / 2; $i++) {\n            if ($str[$i] != $str[$n - 1 - $i]) {\n                return false;\n            }\n        }\n        return true;\n    };\n    $result = [$s1];\n    if ($isPalindrome($s1)) {\n        array_push($result, \"yes\");\n    } else {\n        array_push($result, \"no\");\n    }\n    return $result;\n}\n",
            "/**\n * @param {array<string>} $lst\n * @returns {array<string>}\n */\nfunction oddCount ($lst) {\n    $result = [];\n    foreach ($lst as $num) {\n        $n = 0;\n        for ($i = 0; $i < strlen($num); $i++) {\n            $d = ord($num[$i]) - ord('0');\n            if ($d % 2 == 1) {\n                $n++;\n            }\n        }\n        $rs = \"the number of odd elements in the string i of the input.\";\n        $rs = str_replace(\"i\", (string)$n, $rs);\n        $result[] = $rs;\n    }\n    return $result;\n}\n",
            "/**\n * @param {array<int>} $nums\n * @returns {int}\n */\nfunction minSubArraySum ($nums) {\n    $min_sum = 0;\n    $cur_sum = 0;\n    foreach ($nums as $n) {\n        $cur_sum = min($cur_sum + $n, 0);\n        $min_sum = min($cur_sum, $min_sum);\n    }\n    if ($min_sum == 0) {\n        $min_sum = min($nums);\n    }\n    return $min_sum;\n}\n",
            "function maxFill ($grid, $capacity) {\n    $sum = 0;\n    foreach ($grid as $arr) {\n        $rowSum = 0;\n        foreach ($arr as $num) {\n            $rowSum += $num;\n        }\n        if ($rowSum % $capacity != 0) {\n            $sum += intdiv($rowSum, $capacity) + 1;\n        } else {\n            $sum += intdiv($rowSum, $capacity);\n        }\n    }\n    return $sum;\n}\n",
            "/**\n * @param {array<int>} $arr\n * @returns {array<int>}\n */\nfunction sortArray ($arr) {\n    usort($arr, function($a, $b) {\n        $countA = substr_count(decbin($a), \"1\");\n        $countB = substr_count(decbin($b), \"1\");\n        if ($countA == $countB) {\n            return $a - $b;\n        }\n        return $countA - $countB;\n    });\n    return $arr;\n}\n",
            "function selectWords ($s, $n) {\n    $consonants = \"bcdfghjklmnpqrstvwxyz\";\n    $words = preg_split('/\\s+/', trim($s));\n    $result = [];\n    foreach ($words as $word) {\n        $count = 0;\n        for ($i = 0; $i < strlen($word); $i++) {\n            $char = strtolower($word[$i]);\n            if (strpos($consonants, $char) !== false) {\n                $count++;\n            }\n        }\n        if ($count == $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n}\n",
            "/**\n * @param {string} $word\n * @returns {string}\n */\nfunction getClosestVowel($word) {\n    $vowels = \"aeiouAEIOU\";\n    for ($i = strlen($word) - 2; $i > 0; $i--) {\n        if (strpos($vowels, $word[$i]) !== false && strpos($vowels, $word[$i - 1]) === false && strpos($vowels, $word[$i + 1]) === false) {\n            return $word[$i];\n        }\n    }\n    return \"\";\n}\n",
            "/**\n * @param {array<string>} $lst\n * @returns {string}\n */\nfunction matchParens($lst) {\n    function check($s) {\n        $depth = 0;\n        for ($i = 0; $i < strlen($s); $i++) {\n            $ch = $s[$i];\n            if ($ch == '(') {\n                $depth++;\n            } else {\n                $depth--;\n            }\n            if ($depth < 0) {\n                return false;\n            }\n        }\n        return $depth == 0;\n    }\n\n    $s1 = $lst[0] . $lst[1];\n    $s2 = $lst[1] . $lst[0];\n    if (check($s1) || check($s2)) {\n        return \"Yes\";\n    }\n    return \"No\";\n}\n",
            "/**\n * @param {array<int>} $arr\n * @param {int} $k\n * @returns {array<int>}\n */\nfunction maximum ($arr, $k) {\n    if ($k == 0) {\n        return [];\n    }\n    rsort($arr);\n    return array_slice($arr, 0, $k);\n}\n",
            "/**\n * @param {array<int>} $lst\n * @returns {int}\n */\nfunction solution ($lst) {\n    $sum = 0;\n    foreach ($lst as $i => $x) {\n        if ($i % 2 == 0 && $x % 2 != 0) {\n            $sum += $x;\n        }\n    }\n    return $sum;\n}\n",
            "/**\n * @param {array<int>} $arr\n * @param {int} $k\n * @returns {int}\n */\nfunction addElements($arr, $k) {\n    $sum = 0;\n    for ($i = 0; $i < $k && $i < count($arr); $i++) {\n        if (($n = $arr[$i]) >= -99 && $n <= 99) {\n            $sum += $n;\n        }\n    }\n    return $sum;\n}\n",
            "/**\n * @param {int} $n\n * @returns {array<int>}\n */\nfunction getOddCollatz ($n) {\n    $collatz = [1];\n    while ($n != 1) {\n        if ($n % 2 != 0) {\n            $collatz[] = $n;\n            $n = 3 * $n + 1;\n        } else {\n            $n = $n / 2;\n        }\n    }\n    sort($collatz);\n    return $collatz;\n}\n",
            "/**\n * @param {string} $date\n * @returns {bool}\n */\nfunction validDate ($date) {\n    if (strlen($date) !== 10 || $date[2] !== \"-\" || $date[5] !== \"-\") {\n        return false;\n    }\n    $m = intval(substr($date, 0, 2));\n    $d = intval(substr($date, 3, 2));\n    if (in_array($m, [1, 3, 5, 7, 8, 10, 12]) && $d >= 1 && $d <= 31) {\n        return true;\n    }\n    if (in_array($m, [4, 6, 9, 11]) && $d >= 1 && $d <= 30) {\n        return true;\n    }\n    if ($m == 2 && $d >= 1 && $d <= 29) {\n        return true;\n    }\n    return false;\n}\n",
            "/**\n * @param {string} $txt\n * @returns {array<string>}\n */\nfunction splitWords ($txt) {\n    if (strpos($txt, \" \") !== false) {\n        return explode(\" \", $txt);\n    } elseif (strpos($txt, \",\") !== false) {\n        return explode(\",\", $txt);\n    } else {\n        $count = 0;\n        for ($i = 0; $i < mb_strlen($txt); $i++) {\n            $c = mb_substr($txt, $i, 1);\n            if (ctype_lower($c) && ord($c) % 2 == 0) {\n                $count++;\n            }\n        }\n        return [$count];\n    }\n}\n",
            "/**\n * @param {array<int>} $lst\n * @returns {bool}\n */\nfunction isSorted ($lst) {\n    if (count($lst) == 0) {\n        return true;\n    }\n    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i - 1] > $lst[$i]) {\n            return false;\n        }\n    }\n    $freq = array_count_values($lst);\n    foreach ($freq as $count) {\n        if ($count > 2) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "/**\n * @param {array<int>} $interval1\n * @param {array<int>} $interval2\n * @returns {string}\n */\nfunction intersection($interval1, $interval2) {\n    function isPrime($n) {\n        if ($n < 2) {\n            return false;\n        }\n        for ($i = 2; $i <= sqrt($n); $i++) {\n            if ($n % $i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    function max($a, $b) {\n        return $a > $b ? $a : $b;\n    }\n\n    function min($a, $b) {\n        return $a < $b ? $a : $b;\n    }\n\n    $l = max($interval1[0], $interval2[0]);\n    $r = min($interval1[1], $interval2[1]);\n    $length = $r - $l;\n    if ($length > 0 && isPrime($length)) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n",
            "/**\n * @param {array<int>} $arr\n * @returns {int | null}\n */\nfunction prodSigns ($arr) {\n    if (count($arr) == 0) {\n        return null;\n    }\n    foreach ($arr as $n) {\n        if ($n == 0) {\n            return 0;\n        }\n    }\n    $sign = -1;\n    $negativeCount = 0;\n    foreach ($arr as $n) {\n        if ($n < 0) {\n            $negativeCount++;\n        }\n    }\n    if ($negativeCount % 2 == 0) {\n        $sign = 1;\n    }\n    $sum = 0;\n    foreach ($arr as $n) {\n        $sum += abs($n);\n    }\n    return $sign * $sum;\n}\n",
            "/**\n * @param {array<array<int>>} $grid\n * @param {int} $k\n * @returns {array<int>}\n */\nfunction minPath ($grid, $k) {\n    $n = count($grid);\n    $minVal = $n * $n + 1;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            if ($grid[$i][$j] == 1) {\n                $temp = [];\n                if ($i != 0) {\n                    $temp[] = $grid[$i - 1][$j];\n                }\n                if ($j != 0) {\n                    $temp[] = $grid[$i][$j - 1];\n                }\n                if ($i != $n - 1) {\n                    $temp[] = $grid[$i + 1][$j];\n                }\n                if ($j != $n - 1) {\n                    $temp[] = $grid[$i][$j + 1];\n                }\n                foreach ($temp as $val) {\n                    if ($val < $minVal) {\n                        $minVal = $val;\n                    }\n                }\n            }\n        }\n    }\n    $result = array_fill(0, $k, 1);\n    for ($i = 0; $i < $k; $i++) {\n        if ($i % 2 != 0) {\n            $result[$i] = $minVal;\n        }\n    }\n    return $result;\n}\n",
            "/**\n * @param {int} $n\n * @returns {array<int>}\n */\nfunction tri($n) {\n    if ($n == 0) {\n        return [1];\n    }\n    $seq = [1, 3];\n    for ($i = 2; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $seq[] = $i / 2 + 1;\n        } else {\n            $seq[] = $seq[$i - 1] + $seq[$i - 2] + ($i + 3) / 2;\n        }\n    }\n    return $seq;\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction digits($n) {\n    $odds = [];\n    foreach (str_split((string)$n) as $d) {\n        $digit = (int)$d;\n        if ($digit % 2 == 1) {\n            $odds[] = $digit;\n        }\n    }\n    $result = 1;\n    foreach ($odds as $o) {\n        $result *= $o;\n    }\n    return count($odds) > 0 ? $result : 0;\n}\n",
            "/**\n * @param {string} $s\n * @returns {bool}\n */\nfunction isNested ($s) {\n    $openIdx = [];\n    $closeIdx = [];\n\n    for ($i = 0; $i < strlen($s); $i++) {\n        if ($s[$i] === '[') {\n            $openIdx[] = $i;\n        } elseif ($s[$i] === ']') {\n            $closeIdx[] = $i;\n        }\n    }\n\n    $closeIdx = array_reverse($closeIdx);\n\n    $cnt = 0;\n    $i = 0;\n    $l = count($closeIdx);\n    foreach ($openIdx as $idx) {\n        if ($i < $l && $idx < $closeIdx[$i]) {\n            $cnt++;\n            $i++;\n        }\n    }\n    return $cnt >= 2;\n}\n",
            "function sumSquares ($lst) {\n    $sum = 0;\n    foreach ($lst as $n) {\n        $sum += (int)(pow(ceil($n), 2));\n    }\n    return $sum;\n}\n",
            "/**\n * @param {string} $txt\n * @returns {bool}\n */\nfunction checkIfLastCharIsALetter ($txt) {\n    if (empty($txt)) {\n        return false;\n    }\n    $last = substr($txt, strpos($txt, ' ') + 1);\n    return strlen($last) === 1 && ctype_alpha($last[0]);\n}\n",
            "/**\n * @param {array<int>} $arr\n * @returns {int}\n */\nfunction canArrange ($arr) {\n    if (count($arr) <= 1) {\n        return -1;\n    }\n    $idx = -1;\n    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] < $arr[$i-1]) {\n            $idx = $i;\n        }\n    }\n    return $idx;\n}\n",
            "/**\n * @param {array<int>} $lst\n * @returns {array<int | null>}\n */\nfunction largestSmallestIntegers($lst) {\n    $neg = array();\n    $pos = array();\n\n    foreach ($lst as $i) {\n        if ($i < 0) {\n            $neg[] = $i;\n        }\n        if ($i > 0) {\n            $pos[] = $i;\n        }\n    }\n\n    $maxNeg = null;\n    if (count($neg) > 0) {\n        $maxNegVal = $neg[0];\n        foreach ($neg as $n) {\n            if ($n > $maxNegVal) {\n                $maxNegVal = $n;\n            }\n        }\n        $maxNeg = $maxNegVal;\n    }\n\n    $minPos = null;\n    if (count($pos) > 0) {\n        $minPosVal = $pos[0];\n        foreach ($pos as $p) {\n            if ($p < $minPosVal) {\n                $minPosVal = $p;\n            }\n        }\n        $minPos = $minPosVal;\n    }\n\n    return array($maxNeg, $minPos);\n}\n",
            "/**\n * @param {mixed} $a\n * @param {mixed} $b\n * @returns {float | null}\n */\nfunction compareOne($a, $b) {\n    function anyToReal($o) {\n        if (is_string($o)) {\n            $f = floatval(str_replace(\",\", \".\", $o));\n            if (!is_numeric($f)) {\n                throw new Exception(\"invalid float representation: \" . $o);\n            }\n            return $f;\n        } elseif (is_int($o)) {\n            return floatval($o);\n        } elseif (is_float($o)) {\n            return $o;\n        } else {\n            throw new Exception(\"unsupported type: \" . gettype($o));\n        }\n    }\n\n    try {\n        $a1 = anyToReal($a);\n        $b1 = anyToReal($b);\n    } catch (Exception $e) {\n        throw $e; // or handle it appropriately\n    }\n\n    if ($a1 == $b1) {\n        return null;\n    } elseif ($a1 > $b1) {\n        return floatval($a1);\n    } else {\n        return floatval($b1);\n    }\n}\n",
            "/**\n * @param {int} $n\n * @returns {bool}\n */\nfunction isEqualToSumEven ($n) {\n    return $n % 2 == 0 && $n >= 8;\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction specialFactorial($n) {\n    $fact = 1;\n    $result = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $fact *= $i;\n        $result *= $fact;\n    }\n    return $result;\n}\n",
            "/**\n * @param {string} $txt\n * @returns {string}\n */\nfunction fixSpaces($txt) {\n    return preg_replace('/\\s{3,}/', '-', str_replace(' ', '_', $txt));\n}\n",
            "/**\n * @param {string} $fileName\n * @returns {string}\n */\nfunction fileNameCheck ($fileName) {\n    $suf = [\"txt\", \"exe\", \"dll\"];\n    $lst = explode(\".\", $fileName);\n    if (count($lst) != 2 || !in_array($lst[1], $suf) || empty($lst[0]) || !ctype_alpha($lst[0][0]) || countDigits($lst[0]) > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n\nfunction countDigits ($s) {\n    $count = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (ctype_digit($s[$i])) {\n            $count++;\n        }\n    }\n    return $count;\n}\n",
            "/**\n * @param {array<int>} $lst\n * @returns {int}\n */\nfunction sumSquares($lst) {\n    $result = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n            $result += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0) {\n            $result += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n            $result += $lst[$i];\n        }\n    }\n    return $result;\n}\n",
            "/**\n * @param {string} $sentence\n * @returns {string}\n */\nfunction wordsInSentence ($sentence) {\n    $words = explode(' ', $sentence);\n    $primeWords = [];\n    \n    foreach ($words as $w) {\n        if (isPrime(strlen($w))) {\n            $primeWords[] = $w;\n        }\n    }\n    \n    return implode(' ', $primeWords);\n}\n\nfunction isPrime($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= sqrt($n); $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "/**\n * @param {string} $x\n * @param {string} $n\n * @returns {bool}\n */\nfunction simplify($x, $n) {\n    $xs = explode(\"/\", $x);\n    $ns = explode(\"/\", $n);\n    $num = (int)$xs[0];\n    $den = (int)$xs[1];\n    $numer = (int)$ns[0];\n    $denom = (int)$ns[1];\n    return (($num * $numer) % ($den * $denom)) == 0;\n}\n",
            "/**\n * @param {array<int>} $nums\n * @returns {array<int>}\n */\nfunction orderByPoints($nums) {\n    usort($nums, function($a, $b) {\n        return digitsSum($a) - digitsSum($b);\n    });\n    return $nums;\n}\n\nfunction digitsSum($n) {\n    $nStr = strval($n);\n    if ($n >= 0) {\n        return array_sum(array_map('intval', str_split($nStr)));\n    } else {\n        return intval(substr($nStr, 0, 2)) * 2 + digitsSum(abs($n));\n    }\n}\n",
            "function specialFilter ($nums) {\n    $odds = '13579';\n    $count = 0;\n    foreach ($nums as $n) {\n        if ($n > 10 && $n % 2 == 1 && strpos($odds, $n[0]) !== false) {\n            $count++;\n        }\n    }\n    return $count;\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction getMaxTriples ($n) {\n    $c = array(0, 0, 0);\n    for ($i = 1; $i <= $n; $i++) {\n        $a = $i*$i - $i + 1;\n        $c[$a % 3]++;\n    }\n    return $c[0]*$c[1]*$c[2] + (($c[0]*($c[0]-1)*($c[0]-2) + $c[1]*($c[1]-1)*($c[1]-2) + $c[2]*($c[2]-1)*($c[2]-2)) / 6);\n}\n",
            "function bf ($planet1, $planet2) {\n    $names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    $l = -1;\n    $r = -1;\n    for ($i = 0; $i < count($names); $i++) {\n        if ($names[$i] == $planet1) {\n            $l = $i;\n        }\n        if ($names[$i] == $planet2) {\n            $r = $i;\n        }\n    }\n    if ($l == -1 || $r == -1) {\n        return [];\n    }\n    if ($l > $r) {\n        list($l, $r) = array($r, $l);\n    }\n    if ($l == $r) {\n        return [];\n    }\n    return array_slice($names, $l + 1, $r - $l - 1);\n}\n",
            "/**\n * @param {array<string>} $lst\n * @returns {array<string>}\n */\nfunction sortedListSum ($lst) {\n    $result = array_filter($lst, function($s) {\n        return strlen($s) % 2 == 0;\n    });\n\n    usort($result, function($a, $b) use ($result) {\n        if (strlen($a) === strlen($b)) {\n            return strcmp($a, $b);\n        }\n        return strlen($a) <=> strlen($b);\n    });\n\n    return $result;\n}\n",
            "function xOrY ($n, $x, $y) {\n    if ($n < 2) {\n        return $y;\n    }\n    for ($i = 2; $i <= sqrt($n); $i++) {\n        if ($n % $i == 0) {\n            return $y;\n        }\n    }\n    return $x;\n}\n",
            "function doubleTheDifference ($lst) {\n    $sum = 0;\n    foreach ($lst as $n) {\n        if ($n >= 0 && $n == (int)$n && (int)$n % 2 == 1) {\n            $sum += intval($n * $n);\n        }\n    }\n    return $sum;\n}\n",
            "/**\n * @param {array<int>} $game\n * @param {array<int>} $guess\n * @returns {array<int>}\n */\nfunction compare ($game, $guess) {\n    $result = array();\n    for ($i = 0; $i < count($game); $i++) {\n        $result[$i] = abs($game[$i] - $guess[$i]);\n    }\n    return $result;\n}\n",
            "/**\n * @param {string} $className\n * @param {array<string>} $extensions\n * @returns {string}\n */\nfunction strongestExtension($className, $extensions) {\n    $maxS = -1000;\n    $maxExt = \"\";\n    foreach ($extensions as $ext) {\n        $upper = 0;\n        $lower = 0;\n        for ($i = 0; $i < strlen($ext); $i++) {\n            $c = $ext[$i];\n            if (ctype_upper($c)) {\n                $upper++;\n            } elseif (ctype_lower($c)) {\n                $lower++;\n            }\n        }\n        $s = $upper - $lower;\n        if ($s > $maxS) {\n            $maxS = $s;\n            $maxExt = $ext;\n        }\n    }\n    return $className . \".\" . $maxExt;\n}\n",
            "/**\n * @param {string} $a\n * @param {string} $b\n * @returns {bool}\n */\nfunction cycpatternCheck ($a, $b) {\n    if (strlen($a) < strlen($b)) {\n        return false;\n    }\n    for ($i = 0; $i < strlen($b); $i++) {\n        $rotated = substr($b, $i) . substr($b, 0, $i);\n        if (strpos($a, $rotated) !== false) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param {int} $num\n * @returns {array<int>}\n */\nfunction evenOddCount ($num) {\n    $ds = strval(abs($num));\n    $even = 0;\n    for ($i = 0; $i < strlen($ds); $i++) {\n        if ((ord($ds[$i]) - ord('0')) % 2 == 0) {\n            $even++;\n        }\n    }\n    return [$even, strlen($ds) - $even];\n}\n",
            "/**\n * @param {int} $num\n * @returns {string}\n */\nfunction intToMiniRoman ($num) {\n    $values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    $numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    $res = [];\n    for ($i = 0; $i < count($values); $i++) {\n        while ($num >= $values[$i]) {\n            $res[] = $numerals[$i];\n            $num -= $values[$i];\n        }\n    }\n    return implode(\"\", $res);\n}\n",
            "/**\n * @param {int} $a\n * @param {int} $b\n * @param {int} $c\n * @returns {bool}\n */\nfunction rightAngleTriangle($a, $b, $c) {\n    $s = [$a, $b, $c];\n    sort($s);\n    return $s[0] * $s[0] + $s[1] * $s[1] == $s[2] * $s[2];\n}\n",
            "function findMax($words) {\n    $maxCnt = 0;\n    $maxW = \"\";\n    foreach ($words as $w) {\n        $cnt = count(uniqueChars($w));\n        if ($cnt > $maxCnt) {\n            $maxCnt = $cnt;\n            $maxW = $w;\n        } elseif ($cnt == $maxCnt && strcmp($w, $maxW) < 0) {\n            $maxW = $w;\n        }\n    }\n    return $maxW;\n}\n\nfunction uniqueChars($s) {\n    $charSet = [];\n    for ($i = 0; $i < strlen($s); $i++) {\n        $charSet[$s[$i]] = true;\n    }\n    return $charSet;\n}\n",
            "function eat ($num, $need, $remaining) {\n    if ($need <= $remaining) {\n        return array($num + $need, $remaining - $need);\n    } else {\n        return array($num + $remaining, 0);\n    }\n}\n",
            "/**\n * @param {array<string>} $operators\n * @param {array<int>} $operands\n * @returns {int}\n */\nfunction doAlgebra($operators, $operands) {\n    $ops = array_slice($operators, 0);\n    $nums = array_slice($operands, 0);\n    $i = count($ops) - 1;\n    while ($i >= 0) {\n        if ($ops[$i] == \"**\") {\n            $nums[$i] = pow($nums[$i], $nums[$i + 1]);\n            array_splice($nums, $i + 1, 1);\n            array_splice($ops, $i, 1);\n        }\n        $i--;\n    }\n    $i = 0;\n    while ($i < count($ops)) {\n        if ($ops[$i] == \"*\") {\n            $nums[$i] *= $nums[$i + 1];\n            array_splice($nums, $i + 1, 1);\n            array_splice($ops, $i, 1);\n            $i--;\n        } elseif ($ops[$i] == \"//\") {\n            $nums[$i] = intdiv($nums[$i], $nums[$i + 1]);\n            array_splice($nums, $i + 1, 1);\n            array_splice($ops, $i, 1);\n            $i--;\n        }\n        $i++;\n    }\n    $i = 0;\n    while ($i < count($ops)) {\n        if ($ops[$i] == \"+\") {\n            $nums[$i] += $nums[$i + 1];\n            array_splice($nums, $i + 1, 1);\n            array_splice($ops, $i, 1);\n            $i--;\n        } elseif ($ops[$i] == \"-\") {\n            $nums[$i] -= $nums[$i + 1];\n            array_splice($nums, $i + 1, 1);\n            array_splice($ops, $i, 1);\n            $i--;\n        }\n        $i++;\n    }\n    return $nums[0];\n}\n",
            "/**\n * @param {string} $s\n * @returns {string}\n */\nfunction solve($s) {\n    if (!hasAlpha($s)) {\n        return reverseString($s);\n    }\n    $result = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        $ch = $s[$i];\n        if (!ctype_alpha($ch)) {\n            $result .= $ch;\n        } elseif (ctype_upper($ch)) {\n            $result .= strtolower($ch);\n        } else {\n            $result .= strtoupper($ch);\n        }\n    }\n    return $result;\n}\n\nfunction hasAlpha($s) {\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (ctype_alpha($s[$i])) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction reverseString($s) {\n    $runes = str_split($s);\n    $len = count($runes);\n    for ($i = 0, $j = $len - 1; $i < $j; $i++, $j--) {\n        list($runes[$i], $runes[$j]) = array($runes[$j], $runes[$i]);\n    }\n    return implode('', $runes);\n}\n",
            "/**\n * @param {string} $txt\n * @returns {string | null}\n */\nfunction stringToMd5($txt) {\n    if ($txt === \"\") {\n        return null;\n    }\n    $md5Hash = md5($txt);\n    return $md5Hash;\n}\n",
            "/**\n * @param {int} $a\n * @param {int} $b\n * @returns {array<int>}\n */\nfunction generateIntegers($a, $b) {\n    $lower = max(2, min($a, $b));\n    $upper = min(8, max($a, $b));\n    $result = array();\n    for ($i = $lower; $i <= $upper; $i++) {\n        if ($i % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n"
        ],
        "dart": [
            "bool hasCloseElements(List<double> numbers, double threshold) {\n    for (int i = 0; i < numbers.length; i++) {\n        for (int j = i + 1; j < numbers.length; j++) {\n            if ((numbers[i] - numbers[j]).abs() < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "List<String> separateParenGroups(String parenString) {\n    List<String> groups = [];\n    List<String> stk = [];\n    String currentGroup = \"\";\n    String parens = parenString.replaceAll(' ', '');\n\n    for (var ch in parens.runes) {\n        if (ch == '(') {\n            stk.add(String.fromCharCode(ch));\n            currentGroup += String.fromCharCode(ch);\n        } else if (ch == ')') {\n            stk.removeLast();\n            currentGroup += String.fromCharCode(ch);\n            if (stk.isEmpty) {\n                groups.add(currentGroup);\n                currentGroup = \"\";\n            }\n        }\n    }\n    return groups;\n}\n",
            "double truncateNumber(double num) {\n    return num - (num < 0 ? -1 : 1) * math.floor(num.abs());\n}\n",
            "bool belowZero(List<int> operations) {\n    int balance = 0;\n    for (int op in operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "double meanAbsoluteDeviation(List<double> numbers) {\n    double mean = 0.0;\n    for (double number in numbers) {\n        mean += number;\n    }\n    mean /= numbers.length;\n\n    double deviation = 0.0;\n    for (double number in numbers) {\n        deviation += (number - mean).abs();\n    }\n    return deviation / numbers.length;\n}\n",
            "List<int> intersperse(List<int> numbers, int delimiter) {\n    List<int> result = [];\n    for (int i = 0; i < numbers.length; i++) {\n        if (i != 0) {\n            result.add(delimiter);\n        }\n        result.add(numbers[i]);\n    }\n    return result;\n}\n",
            "List<int> parseNestedParens(String parenString) {\n    List<int> result = [];\n    List<String> parenGroups = parenString.split(\" \");\n    for (var group in parenGroups) {\n        int maxDepth = 0;\n        int depth = 0;\n        for (var ch in group.codeUnits) {\n            if (ch == '(') {\n                depth++;\n                if (depth > maxDepth) {\n                    maxDepth = depth;\n                }\n            } else if (ch == ')') {\n                depth--;\n            }\n        }\n        result.add(maxDepth);\n    }\n    return result;\n}\n",
            "List<String> filterBySubstring(List<String> strs, String substring) {\n    List<String> result = [];\n    for (String s in strs) {\n        if (s.contains(substring)) {\n            result.add(s);\n        }\n    }\n    return result;\n}\n",
            "List<int> sumProduct(List<int> numbers) {\n    int n_sum = 0;\n    for (var num in numbers) {\n        n_sum += num;\n    }\n    \n    int n_product = 1;\n    for (var num in numbers) {\n        n_product *= num;\n    }\n    \n    return [n_sum, n_product];\n}\n",
            "List<int> rollingMax(List<int> numbers) {\n    int maxSoFar = -9223372036854775808; // equivalent to math.MinInt64 in Go\n    List<int> result = new List<int>.filled(numbers.length, 0);\n    for (int i = 0; i < numbers.length; i++) {\n        int num = numbers[i];\n        if (num > maxSoFar) {\n            maxSoFar = num;\n        }\n        result[i] = maxSoFar;\n    }\n    return result;\n}\n",
            "bool is_palindrome(String s) {\n    for (int i = 0; i < s.length / 2; i++) {\n        if (s[i] != s[s.length - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nString makePalindrome(String s) {\n    if (is_palindrome(s)) {\n        return s;\n    }\n    for (int i = 0; i < s.length; i++) {\n        if (is_palindrome(s.substring(i))) {\n            String suffix = s.substring(0, i);\n            String reversed_suffix = '';\n            for (int j = suffix.length - 1; j >= 0; j--) {\n                reversed_suffix += suffix[j];\n            }\n            return s + reversed_suffix;\n        }\n    }\n    return '';\n}\n",
            "String stringXor(String a, String b) {\n    String result = \"\";\n    for (int i = 0; i < a.length; i++) {\n        if (a[i] == b[i]) {\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    return result;\n}\n",
            "String? longest(List<String> strs) {\n    if (strs.isEmpty) {\n        return null;\n    }\n    String longestS = strs[0];\n    for (var s in strs) {\n        if (s.length > longestS.length) {\n            longestS = s;\n        }\n    }\n    return longestS;\n}\n",
            "int greatestCommonDivisor(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return greatestCommonDivisor(b, a % b);\n    }\n}\n",
            "List<String> allPrefixes(String s) {\n    List<String> prefixes = [];\n    for (int i = 0; i < s.length; i++) {\n        prefixes.add(s.substring(0, i + 1));\n    }\n    return prefixes;\n}\n",
            "String stringSequence(int n) {\n    List<String> result = [];\n    for (int i = 0; i <= n; i++) {\n        result.add(i.toString());\n    }\n    return result.join(' ');\n}\n",
            "int countDistinctCharacters(String s) {\n    Set<String> charSet = {};\n    for (var c in s.toLowerCase().characters) {\n        charSet.add(c);\n    }\n    return charSet.length;\n}\n",
            "List<int> parseMusic(String musicString) {\n    Map<String, int> durations = {\"o\": 4, \"o|\": 2, \".|\": 1};\n    List<String> notes = musicString.split(\" \");\n    List<int> result = [];\n    for (String note in notes) {\n        if (durations.containsKey(note)) {\n            result.add(durations[note]!);\n        }\n    }\n    return result;\n}\n",
            "int howManyTimes(String s, String substring) {\n    int times = 0;\n    for (int i = 0; i <= s.length - substring.length; i++) {\n        if (s.substring(i, i + substring.length) == substring) {\n            times++;\n        }\n    }\n    return times;\n}\n",
            "String sortNumbers(String numbers) {\n    Map<String, int> numDict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    };\n    List<String> numSlice = numbers.split(\" \").toList();\n    numSlice.sort((a, b) => numDict[a]!.compareTo(numDict[b]!));\n    return numSlice.join(\" \");\n}\n",
            "List<double> findClosestElements(List<double> numbers) {\n    List<double> sortedNumbers = List.from(numbers)..sort();\n\n    double minDiff = double.infinity;\n    List<double> closestPair;\n\n    for (int i = 1; i < sortedNumbers.length; i++) {\n        double diff = sortedNumbers[i] - sortedNumbers[i - 1];\n        if (diff < minDiff) {\n            minDiff = diff;\n            closestPair = [sortedNumbers[i - 1], sortedNumbers[i]];\n        }\n    }\n\n    return closestPair;\n}\n",
            "List<double> rescaleToUnit(List<double> numbers) {\n    if (numbers.isEmpty) return [];\n\n    double minNum = numbers[0];\n    double maxNum = numbers[0];\n    for (double num in numbers) {\n        if (num < minNum) {\n            minNum = num;\n        }\n        if (num > maxNum) {\n            maxNum = num;\n        }\n    }\n    if (minNum == maxNum) {\n        return List.filled(numbers.length, 0.0);\n    } else {\n        List<double> result = [];\n        for (int i = 0; i < numbers.length; i++) {\n            double num = numbers[i];\n            result.add((num - minNum) / (maxNum - minNum));\n        }\n        return result;\n    }\n}\n",
            "List<int> filterIntegers(List<Object> values) {\n    List<int> result = [];\n    for (var value in values) {\n        if (value is int) {\n            result.add(value);\n        }\n    }\n    return result;\n}\n",
            "int strLength(String s) {\n    return s.length;\n}\n",
            "int largestDivisor(int n) {\n    for (int i = 2; i < n; i++) {\n        if (n % i == 0) {\n            return n ~/ i;\n        }\n    }\n    return 1;\n}\n",
            "List<int> factorize(int n) {\n    List<int> factors = [];\n    int divisor = 2;\n    while (divisor <= n) {\n        if (n % divisor == 0) {\n            factors.add(divisor);\n            n ~/= divisor;\n        } else {\n            divisor++;\n        }\n    }\n    return factors;\n}\n",
            "List<int> removeDuplicates(List<int> numbers) {\n    Map<int, int> counts = {};\n    for (int num in numbers) {\n        counts[num] = (counts[num] ?? 0) + 1;\n    }\n    List<int> res = [];\n    for (int num in numbers) {\n        if (counts[num] == 1) {\n            res.add(num);\n        }\n    }\n    return res;\n}\n",
            "String flipCase(String s) {\n    List<String> flipped = [];\n    for (var ch in s.runes) {\n        String char = String.fromCharCode(ch);\n        if (!char.codeUnitAt(0).isLetter) {\n            flipped.add(char);\n        } else if (char.codeUnitAt(0).isLowerCase) {\n            flipped.add(char.toUpperCase());\n        } else if (char.codeUnitAt(0).isUpperCase) {\n            flipped.add(char.toLowerCase());\n        }\n    }\n    return flipped.join('');\n}\n",
            "String concatenate(List<String> strs) {\n    return strs.join('');\n}\n",
            "List<String> filterByPrefix(List<String> strs, String prefixStr) {\n    var result = <String>[];\n    for (var s in strs) {\n        if (s.startsWith(prefixStr)) {\n            result.add(s);\n        }\n    }\n    return result;\n}\n",
            "List<int> getPositive(List<int> l) {\n    List<int> result = [];\n    for (var num in l) {\n        if (num > 0) {\n            result.add(num);\n        }\n    }\n    return result;\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= math.sqrt(n).toInt(); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "double poly(List<int> xs, double x) {\n    double res = 0.0;\n    for (int i = 0; i < xs.length; i++) {\n        res += xs[i] * math.pow(x, i);\n    }\n    return res;\n}\n\ndouble findZero(List<int> xs) {\n    double x1 = 1.0, x2 = -1.0;\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2;\n        x2 *= 2;\n    }\n    while ((x1 - x2).abs() > 1e-10) {\n        double mid = (x1 + x2) / 2;\n        if (poly(xs, mid) == 0) {\n            return mid;\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2;\n}\n",
            "List<int> sortThird(List<int> l) {\n  List<int> sortedThird = l.where((value, index) => index % 3 == 0).toList()..sort();\n  return l.map((e, index) => index % 3 == 0 ? sortedThird[index ~/ 3] : e).toList();\n}\n",
            "List<int> listUnique(List<int> l) {\n    Map<int, bool> uniqueMap = {};\n    List<int> result = [];\n    for (var value in l) {\n        if (!uniqueMap.containsKey(value)) {\n            uniqueMap[value] = true;\n            result.add(value);\n        }\n    }\n    result.sort();\n    return result;\n}\n",
            "int maxElement(List<int> l) {\n  if (l.length == 0) {\n    return 0;\n  }\n  int max = l[0];\n  for (var v in l) {\n    if (v > max) {\n      max = v;\n    }\n  }\n  return max;\n}\n",
            "int fizzBuzz(int n) {\n    int cnt = 0;\n    for (int i = 0; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            cnt += countSevens(i);\n        }\n    }\n    return cnt;\n}\n\nint countSevens(num int) {\n    int cnt = 0;\n    while (num > 0) {\n        if (num % 10 == 7) {\n            cnt++;\n        }\n        num ~/= 10;\n    }\n    return cnt;\n}\n",
            "List<int> sortEven(List<int> l) {\n    List<int> evenIndices = [];\n    for (int i = 0; i < l.length; i++) {\n        if (i % 2 == 0) {\n            evenIndices.add(l[i]);\n        }\n    }\n    evenIndices.sort();\n    \n    List<int> sortedList = List.filled(l.length, 0);\n    int evenIndex = 0;\n    for (int i = 0; i < l.length; i++) {\n        if (i % 2 == 0) {\n            sortedList[i] = evenIndices[evenIndex];\n            evenIndex++;\n        } else {\n            sortedList[i] = l[i];\n        }\n    }\n    return sortedList;\n}\n",
            "String encodeCyclic(String s) {\n    List<String> result = [];\n    for (int i = 0; i < s.length; i += 3) {\n        if (i + 3 > s.length) {\n            result.add(s.substring(i));\n        } else {\n            result.add(s.substring(i + 1, i + 3));\n            result.add(s[i]);\n        }\n    }\n    return result.join('');\n}\n\nString decodeCyclic(String s) {\n    return encodeCyclic(encodeCyclic(s));\n}\n",
            "bool isPrime(int n) {\n  if (n < 2) return false;\n  for (int i = 2; i <= sqrt(n).floor(); i++) {\n    if (n % i == 0) return false;\n  }\n  return true;\n}\n\nint primeFib(int n) {\n  List<int> f = [0, 1];\n  int cnt = 0;\n  while (cnt < n) {\n    f = [f[1], f[0] + f[1]];\n    if (isPrime(f[1])) cnt++;\n  }\n  return f[1];\n}\n",
            "bool triplesSumToZero(List<int> l) {\n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            for (int k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "int carRaceCollision(int n) {\n    return n * n;\n}\n",
            "List<int> incrList(List<int> l) {\n    List<int> result = List.generate(l.length, (index) => 0);\n    for (int i = 0; i < l.length; i++) {\n        result[i] = l[i] + 1;\n    }\n    return result;\n}\n",
            "bool pairsSumToZero(List<int> l) {\n    Map<int, dynamic> seen = {};\n    for (int num in l) {\n        if (seen.containsKey(-num)) {\n            return true;\n        }\n        seen[num] = null;\n    }\n    return false;\n}\n",
            "String changeBase(int x, int bas) {\n    if (x == 0) {\n        return \"0\";\n    }\n    List<String> digits = [];\n    while (x > 0) {\n        digits.add((x % bas).toString());\n        x ~/= bas;\n    }\n    for (int i = 0, j = digits.length - 1; i < j; i++, j--) {\n        String temp = digits[i];\n        digits[i] = digits[j];\n        digits[j] = temp;\n    }\n    return digits.join('');\n}\n",
            "double triangleArea(int a, int h) {\n    return (a * h) / 2.0;\n}\n",
            "int fib4(int n) {\n    List<int> fib = [0, 0, 2, 0];\n    for (int i = 4; i <= n; i++) {\n        int sum = 0;\n        for (int value in fib) {\n            sum += value;\n        }\n        fib[i % 4] = sum;\n    }\n    return fib[n % 4];\n}\n",
            "double median(List<double> l) {\n  var sl = List.from(l)..sort();\n  if (l.length % 2 != 0) {\n    return sl[l.length ~/ 2];\n  } else {\n    return (sl[l.length ~/ 2] + sl[l.length ~/ 2 - 1]) / 2;\n  }\n}\n",
            "bool isPalindrome(String txt) {\n    int n = txt.length;\n    for (int i = 0; i < n ~/ 2; i++) {\n        if (txt[i] != txt[n - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "int modp(int n, int p) {\n    int ret = 1;\n    for (int i = 0; i < n; i++) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}\n",
            "String encodeShift(String s) {\n    List<int> result = [];\n    for (var ch in s.codeUnits) {\n        int shiftedCh = ((ch - 97 + 5) % 26) + 97;\n        result.add(shiftedCh);\n    }\n    return String.fromCharCodes(result);\n}\n\nString decodeShift(String s) {\n    List<int> result = [];\n    for (var ch in s.codeUnits) {\n        int shiftedCh = ((ch - 97 + 21) % 26) + 97;\n        result.add(shiftedCh);\n    }\n    return String.fromCharCodes(result);\n}\n",
            "String removeVowels(String txt) {\n    String vowels = \"aeiouAEIOU\";\n    String result = \"\";\n    for (int i = 0; i < txt.length; i++) {\n        if (!vowels.contains(txt[i])) {\n            result += txt[i];\n        }\n    }\n    return result;\n}\n",
            "bool belowThreshold(List<int> l, int t) {\n    for (var x in l) {\n        if (x >= t) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "int add(int x, int y) {\n    return x + y;\n}\n",
            "bool sameChars(String s0, String s1) {\n  return setEqual(stringToSet(s0), stringToSet(s1));\n}\n\nMap<String, bool> stringToSet(String s) {\n  Map<String, bool> m = {};\n  for (var c in s.split('')) {\n    m[c] = true;\n  }\n  return m;\n}\n\nbool setEqual(Map<String, bool> set1, Map<String, bool> set2) {\n  if (set1.length != set2.length) {\n    return false;\n  }\n  for (var key in set1.keys) {\n    if (!set2.containsKey(key)) {\n      return false;\n    }\n  }\n  return true;\n}\n",
            "int fib(int n) {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n",
            "bool correctBracketing(String brackets) {\n    int depth = 0;\n    for (var b in brackets.codeUnits) {\n        if (b == '<'.codeUnitAt(0)) {\n            depth += 1;\n        } else if (b == '>'.codeUnitAt(0)) {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "bool monotonic(List<int> l) {\n    if (l.length <= 1) {\n        return true;\n    }\n\n    bool increasing = true;\n    bool decreasing = true;\n\n    for (int i = 1; i < l.length; i++) {\n        if (l[i] > l[i - 1]) {\n            decreasing = false;\n        }\n        if (l[i] < l[i - 1]) {\n            increasing = false;\n        }\n    }\n\n    return increasing || decreasing;\n}\n",
            "List<int> common(List<int> l1, List<int> l2) {\n    Set<int> set1 = {};\n    for (var v in l1) {\n        set1.add(v);\n    }\n\n    Set<int> set2 = {};\n    for (var v in l2) {\n        set2.add(v);\n    }\n\n    List<int> result = [];\n    for (var k in set1) {\n        if (set2.contains(k)) {\n            result.add(k);\n        }\n    }\n\n    result.sort();\n    return result;\n}\n",
            "int largestPrimeFactor(int n) {\n    int i = 2;\n    while (i * i <= n) {\n        if (n % i != 0) {\n            i++;\n        } else {\n            n ~/= i;\n        }\n    }\n    return n;\n}\n",
            "int sumToN(int n) {\n    int sum = 0;\n    for (int i = 0; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n",
            "bool correctBracketing(String brackets) {\n    int depth = 0;\n    for (var b in brackets.runes) {\n        if (b == '(') {\n            depth++;\n        } else if (b == ')') {\n            depth--;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "List<int> derivative(List<int> xs) {\n    List<int> result = List.filled(xs.length - 1, 0);\n    for (int i = 1; i < xs.length; i++) {\n        result[i - 1] = xs[i] * i;\n    }\n    return result;\n}\n",
            "int fibfib(int n) {\n    if (n <= 1) {\n        return 0;\n    }\n    int a = 0, b = 0, c = 1;\n    while (n > 2) {\n        a = b;\n        b = c;\n        c = a + b + c;\n        n -= 1;\n    }\n    return c;\n}\n",
            "int vowelsCount(String s) {\n    String vowels = \"aeiou\";\n    int cnt = 0;\n    for (int i = 0; i < s.length; i++) {\n        if (vowels.contains(s[i].toLowerCase()) || (i == s.length - 1 && s[i].toLowerCase() == 'y')) {\n            cnt++;\n        }\n    }\n    return cnt;\n}\n",
            "String circularShift(int x, int shift) {\n    String xStr = x.toString();\n    if (shift > xStr.length) {\n        return reverseString(xStr);\n    } else {\n        return xStr.substring(xStr.length - shift) + xStr.substring(0, xStr.length - shift);\n    }\n}\n\nString reverseString(String s) {\n    List<String> runes = s.split('');\n    int i = 0;\n    int j = runes.length - 1;\n    while (i < j) {\n        String temp = runes[i];\n        runes[i] = runes[j];\n        runes[j] = temp;\n        i++;\n        j--;\n    }\n    return runes.join('');\n}\n",
            "int digitSum(String s) {\n    int sum = 0;\n    for (var c in s.codeUnits) {\n        if (c >= 'A'.codeUnitAt(0) && c <= 'Z'.codeUnitAt(0)) {\n            sum += c;\n        }\n    }\n    return sum;\n}\n",
            "int fruitDistribution(String s, int n) {\n    List<String> words = s.split(' ');\n    int apples = int.parse(words[words.indexOf(\"apples\") - 1]);\n    int oranges = int.parse(words[words.indexOf(\"oranges\") - 1]);\n    return n - apples - oranges;\n}\n",
            "List<int> pluck(List<int> arr) {\n    List<int> evens = [];\n    for (var n in arr) {\n        if (n % 2 == 0) {\n            evens.add(n);\n        }\n    }\n    if (evens.isEmpty) {\n        return [];\n    }\n    int min_even = evens[0];\n    for (var n in evens) {\n        if (n < min_even) {\n            min_even = n;\n        }\n    }\n    int index = -1;\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] == min_even) {\n            index = i;\n            break;\n        }\n    }\n    return [min_even, index];\n}\n",
            "int search(List<int> lst) {\n    Map<int, int> freqs = {};\n    for (var n in lst) {\n        if (freqs.containsKey(n)) {\n            freqs[n]++;\n        } else {\n            freqs[n] = 1;\n        }\n    }\n    List<int> goodVals = [];\n    for (var entry in freqs.entries) {\n        int k = entry.key;\n        int v = entry.value;\n        if (v >= k) {\n            goodVals.add(k);\n        }\n    }\n    if (goodVals.isEmpty) {\n        return -1;\n    }\n    int maxVal = goodVals[0];\n    for (var val in goodVals) {\n        if (val > maxVal) {\n            maxVal = val;\n        }\n    }\n    return maxVal;\n}\n",
            "List<int> strangeSortList(List<int> lst) {\n    List<int> sl = [...lst];\n    sl.sort();\n    List<int> result = [];\n    int left = 0;\n    int right = sl.length - 1;\n    while (left <= right) {\n        result.add(sl[left]);\n        left++;\n        if (left <= right) {\n            result.add(sl[right]);\n            right--;\n        }\n    }\n    return result;\n}\n",
            "double triangleArea(int a, int b, int c) {\n    if (a + b > c && a + c > b && b + c > a) {\n        double s = (a + b + c) / 2.0;\n        return sqrt(s * (s - a) * (s - b) * (s - c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "bool willItFly(List<int> q, int w) {\n    if (q.isEmpty) {\n        return false;\n    }\n    bool isPalin = true;\n    for (int i = 0; i < q.length; i++) {\n        if (q[i] != q[q.length - i - 1]) {\n            isPalin = false;\n            break;\n        }\n    }\n    int total = 0;\n    for (var v in q) {\n        total += v;\n    }\n    return isPalin && total <= w;\n}\n",
            "int smallestChange(List<int> arr) {\n    int ans = 0;\n    for (int i = 0; i < arr.length ~/ 2; i++) {\n        if (arr[i] != arr[arr.length - i - 1]) {\n            ans++;\n        }\n    }\n    return ans;\n}\n",
            "List<String> totalMatch(List<String> lst1, List<String> lst2) {\n    int cnt1 = 0;\n    for (var s in lst1) {\n        cnt1 += s.length;\n    }\n    int cnt2 = 0;\n    for (var s in lst2) {\n        cnt2 += s.length;\n    }\n    if (cnt1 <= cnt2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n",
            "bool isMultiplyPrime(int a) {\n    int cnt = 0;\n    for (int i = 2; i <= a; i++) {\n        if (isPrime(i)) {\n            while (a % i == 0) {\n                cnt++;\n                a /= i;\n            }\n        }\n    }\n    return cnt == 3;\n}\n\nbool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= math.sqrt(n).toInt(); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "bool isSimplePower(int x, int n) {\n    if (n < 2) {\n        return x == n;\n    }\n    int tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp == x;\n}\n",
            "bool isCube(int a) {\n    a = a.abs();\n    int root = (pow(a, 1.0 / 3.0).round() as int);\n    return root * root * root == a;\n}\n",
            "int hexKey(String num) {\n    int count = 0;\n    for (var x in num.runes) {\n        if (x == '2'.codeUnitAt(0) || \n            x == '3'.codeUnitAt(0) || \n            x == '5'.codeUnitAt(0) || \n            x == '7'.codeUnitAt(0) || \n            x == 'B'.codeUnitAt(0) || \n            x == 'D'.codeUnitAt(0)) {\n            count++;\n        }\n    }\n    return count;\n}\n",
            "String decimalToBinary(int dec) {\n    String binary = dec.toRadixString(2);\n    return \"db${binary}db\";\n}\n",
            "bool isHappy(String s) {\n    if (s.length < 3) {\n        return false;\n    }\n    for (int i = 0; i < s.length - 2; i++) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "List<String> numericalLetterGrade(List<double> grades) {\n    List<String> result = [];\n    for (double g in grades) {\n        if (g == 4.0) {\n            result.add(\"A+\");\n        } else if (g > 3.7) {\n            result.add(\"A\");\n        } else if (g > 3.3) {\n            result.add(\"A-\");\n        } else if (g > 3.0) {\n            result.add(\"B+\");\n        } else if (g > 2.7) {\n            result.add(\"B\");\n        } else if (g > 2.3) {\n            result.add(\"B-\");\n        } else if (g > 2.0) {\n            result.add(\"C+\");\n        } else if (g > 1.7) {\n            result.add(\"C\");\n        } else if (g > 1.3) {\n            result.add(\"C-\");\n        } else if (g > 1.0) {\n            result.add(\"D+\");\n        } else if (g > 0.7) {\n            result.add(\"D\");\n        } else if (g > 0.0) {\n            result.add(\"D-\");\n        } else {\n            result.add(\"E\");\n        }\n    }\n    return result;\n}\n",
            "bool primeLength(String s) {\n    int length = s.length;\n    if (length < 2) {\n        return false;\n    }\n    for (int i = 2; i <= math.sqrt(length); i++) {\n        if (length % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "int startsOneEnds(int n) {\n    if (n == 1) {\n        return 1;\n    }\n    return 2 * 9 * (10^(n - 2));\n}\n",
            "String solve(int n) {\n    int digitsSum = 0;\n    while (n > 0) {\n        int digit = n % 10;\n        digitsSum += digit;\n        n ~/= 10;\n    }\n    return digitsSum.toRadixString(2);\n}\n",
            "int add(List<int> lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 2 == 1 && lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n",
            "String antiShuffle(String s) {\n    List<String> words = s.split(' ');\n    for (int i = 0; i < words.length; i++) {\n        List<String> runes = words[i].split('');\n        runes.sort();\n        words[i] = runes.join('');\n    }\n    return words.join(' ');\n}\n",
            "List<List<int>> getRow(List<List<int>> lst, int x) {\n    List<List<int>> coords = [];\n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                coords.add([i, j]);\n            }\n        }\n    }\n    coords.sort((a, b) {\n        if (a[0] == b[0]) {\n            return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n    return coords;\n}\n",
            "List<int> sortArray(List<int> arr) {\n    if (arr.isEmpty) {\n        return [];\n    }\n    if ((arr[0] + arr[arr.length - 1]) % 2 == 0) {\n        return arr.toList()..sort((a, b) => b.compareTo(a));\n    } else {\n        return arr.toList()..sort();\n    }\n}\n",
            "String encrypt(String s) {\n    List<int> result = [];\n    for (int i = 0; i < s.length; i++) {\n        int ch = s.codeUnitAt(i);\n        int shifted = ch + 4;\n        if (shifted > 'z'.codeUnitAt(0)) {\n            shifted -= 26;\n        }\n        result.add(shifted);\n    }\n    return String.fromCharCodes(result);\n}\n",
            "int? nextSmallest(List<int> lst) {\n    var sl = lst.toSet().toList()..sort();\n    if (sl.length < 2) {\n        return null;\n    }\n    return sl[1];\n}\n",
            "int isBored(String s) {\n  List<String> sentences = RegExp(r\"[.!?]\\s*\").split(s);\n  return sentences.where((sentence) => sentence.length >= 2).map((sentence) => sentence.startsWith(\"I \") ? 1 : 0).reduce((a, b) => a + b);\n}\n",
            "bool anyInt(Object x, Object y, Object z) {\n    if (x is int && y is int && z is int) {\n        return (x + y == z) || (x + z == y) || (y + z == x);\n    }\n    return false;\n}\n",
            "String encode(String message) {\n  String vowels = \"aeiouAEIOU\";\n  List<String> result = [];\n\n  for (int i = 0; i < message.length; i++) {\n    String ch = message[i];\n    if (isLetter(ch)) {\n      String ch1;\n      if (isLower(ch)) {\n        ch1 = ch.toUpperCase();\n      } else {\n        ch1 = ch.toLowerCase();\n      }\n      if (vowels.contains(ch1)) {\n        int charCode = ch1.codeUnitAt(0);\n        ch1 = String.fromCharCode(charCode + 2);\n      }\n      result.add(ch1);\n    } else {\n      result.add(ch);\n    }\n  }\n\n  return result.join('');\n}\n\nbool isLetter(String ch) {\n  return RegExp(r'[a-zA-Z]').hasMatch(ch);\n}\n\nbool isLower(String ch) {\n  return ch == ch.toLowerCase();\n}\n",
            "int skjkasdkd(List<int> lst) {\n    List<int> primes = [];\n    for (var n in lst) {\n        if (isPrime(n)) {\n            primes.add(n);\n        }\n    }\n    if (primes.isEmpty) {\n        return 0;\n    }\n    String largest = max(primes).toString();\n    int sum = 0;\n    for (var digit in largest.codeUnits) {\n        sum += digit - '0'.codeUnitAt(0);\n    }\n    return sum;\n}\n\nbool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= (n).sqrt().toInt(); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint max(List<int> nums) {\n    if (nums.isEmpty) {\n        return 0;\n    }\n    int maxNum = nums[0];\n    for (var num in nums) {\n        if (num > maxNum) {\n            maxNum = num;\n        }\n    }\n    return maxNum;\n}\n",
            "bool checkDictCase(Map<String, String> d) {\n  if (d.isEmpty) {\n    return false;\n  }\n  final allLower = d.keys.every((key) => key.isLowerCase);\n  final allUpper = d.keys.every((key) => key.isUpperCase);\n  return allLower || allUpper;\n}\n",
            "List<int> countUpTo(int n) {\n    List<int> primes = [];\n    for (int num = 2; num < n; num++) {\n        bool isPrime = true;\n        for (int p in primes) {\n            if (num % p == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            primes.add(num);\n        }\n    }\n    return primes;\n}\n",
            "int multiply(int a, int b) {\n    return (abs(a) % 10) * (abs(b) % 10);\n}\n\nint abs(int x) {\n    if (x < 0) {\n        return -x;\n    }\n    return x;\n}\n",
            "int countUpper(String s) {\n    String vowels = \"AEIOU\";\n    int count = 0;\n    for (int i = 0; i < s.length; i++) {\n        if (i % 2 == 0 && vowels.contains(s[i])) {\n            count++;\n        }\n    }\n    return count;\n}\n",
            "int closestInteger(String value) {\n    double num = double.parse(value);\n    if (num >= 0) {\n        return int(num + 0.5);\n    } else {\n        return int(num - 0.5);\n    }\n}\n",
            "List<int> makeAPile(int n) {\n    List<int> pile = List.filled(n, 0);\n    for (int i = 0; i < n; i++) {\n        pile[i] = n + 2 * i;\n    }\n    return pile;\n}\n",
            "List<String> wordsString(String s) {\n  List<String> words = s.split(RegExp(r'[,\\s]+'));\n  List<String> result = [];\n  for (String w in words) {\n    if (w.isNotEmpty) {\n      result.add(w);\n    }\n  }\n  return result;\n}\n",
            "int chooseNum(int x, int y) {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 == 0) {\n        return y;\n    }\n    if (x != y) {\n        return y - 1;\n    }\n    return -1;\n}\n",
            "String? roundedAvg(int n, int m) {\n    if (n > m) {\n        return null;\n    }\n    int r_avg = ((m + n) / 2.0 + 0.5).round();\n    return r_avg.toRadixString(2);\n}\n",
            "bool allDigitsOdd(String s) {\n  for (var digit in s.codeUnits) {\n    if ((digit - 48) % 2 == 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\nList<int> uniqueDigits(List<int> x) {\n  var result = <int>[];\n  for (var num in x) {\n    if (allDigitsOdd(num.toString())) {\n      result.add(num);\n    }\n  }\n  result.sort();\n  return result;\n}\n",
            "List<String> byLength(List<int> arr) {\n    List<String> digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    List<int> sortedArr = [];\n    for (int x in arr) {\n        if (x >= 1 && x <= 9) {\n            sortedArr.add(x);\n        }\n    }\n    sortedArr.sort((a, b) => b.compareTo(a));\n    List<String> result = List.filled(sortedArr.length, '');\n    for (int i = 0; i < sortedArr.length; i++) {\n        result[i] = digitNames[sortedArr[i] - 1];\n    }\n    return result;\n}\n",
            "List<int> f(int n) {\n    List<int> nums = List<int>.generate(n, (index) => index + 1);\n    \n    List<int> result = List<int>.filled(n, 0);\n    for (int i = 0; i < n; i++) {\n        if ((i + 1) % 2 != 0) {\n            int sum = 0;\n            for (int j = 0; j <= i; j++) {\n                sum += nums[j];\n            }\n            result[i] = sum;\n        } else {\n            int product = 1;\n            for (int j = 0; j <= i; j++) {\n                product *= nums[j];\n            }\n            result[i] = product;\n        }\n    }\n    \n    return result;\n}\n",
            "List<int> evenOddPalindrome(int n) {\n    List<int> cnt = [0, 0];\n    for (int i = 1; i <= n; i++) {\n        if (_isPalindrome(i.toString())) {\n            cnt[i % 2]++;\n        }\n    }\n    return cnt;\n}\n\nbool _isPalindrome(String s) {\n    for (int i = 0; i < s.length / 2; i++) {\n        if (s[i] != s[s.length - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "int digitsSum(int n) {\n  String nStr = n.toString();\n  if (n >= 0) {\n    return nStr.split('').map((d) => int.parse(d)).reduce((a, b) => a + b);\n  } else {\n    return int.parse(nStr.substring(0, 2)) * 2 + digitsSum(-int.parse(nStr.substring(1)));\n  }\n}\n\nint countNums(List<int> arr) {\n  return arr.where((n) => digitsSum(n) > 0).length;\n}\n",
            "bool moveOneBall(List<int> arr) {\n  if (arr.isEmpty) {\n    return true;\n  }\n  List<int> sortedArr = List.from(arr)..sort();\n  for (int i = 0; i < arr.length; i++) {\n    if (arr.sublist(i).toString() == sortedArr.sublist(0, arr.length - i).toString() &&\n        arr.sublist(0, i).toString() == sortedArr.sublist(arr.length - i).toString()) {\n      return true;\n    }\n  }\n  return false;\n}\n",
            "String canExchange(List<int> lst1, List<int> lst2) {\n    int oddCnt = 0;\n    for (var num in lst1) {\n        if (num % 2 != 0) {\n            oddCnt++;\n        }\n    }\n    int evenCnt = 0;\n    for (var num in lst2) {\n        if (num % 2 == 0) {\n            evenCnt++;\n        }\n    }\n    if (evenCnt >= oddCnt) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n",
            "Map<String, int> histogram(String test) {\n    var freq = <String, int>{};\n    var words = test.split(RegExp(r'\\s+'));\n    for (var w in words) {\n        if (w.isNotEmpty) {\n            freq[w] = (freq[w] ?? 0) + 1;\n        }\n    }\n    Map<String, int> result = {};\n    if (freq.isNotEmpty) {\n        var maxFreq = freq.values.reduce((a, b) => a > b ? a : b);\n        for (var k in freq.keys) {\n            if (freq[k] == maxFreq) {\n                result[k] = freq[k];\n            }\n        }\n    }\n    return result;\n}\n",
            "List<String> reverseDelete(String s, String c) {\n    String s1 = '';\n    for (var ch in s.codeUnits) {\n        if (!c.contains(String.fromCharCode(ch))) {\n            s1 += String.fromCharCode(ch);\n        }\n    }\n    bool isPalindrome(String str) {\n        int n = str.length;\n        for (int i = 0; i < n ~/ 2; i++) {\n            if (str[i] != str[n - 1 - i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    List<String> result = [s1];\n    if (isPalindrome(s1)) {\n        result.add('yes');\n    } else {\n        result.add('no');\n    }\n    return result;\n}\n",
            "List<String> oddCount(List<String> lst) {\n    List<String> result = [];\n    for (String num in lst) {\n        int n = 0;\n        for (int d in num.codeUnits) {\n            if (d % 2 == 1) {\n                n++;\n            }\n        }\n        String rs = \"the number of odd elements in the string i of the input.\";\n        rs = rs.replaceAll(\"i\", n.toString());\n        result.add(rs);\n    }\n    return result;\n}\n",
            "int minSubArraySum(List<int> nums) {\n    int min_sum = 0;\n    int cur_sum = 0;\n    for (int n in nums) {\n        cur_sum = (cur_sum + n < 0) ? cur_sum + n : 0;\n        min_sum = (cur_sum < min_sum) ? cur_sum : min_sum;\n    }\n    if (min_sum == 0) {\n        min_sum = nums.reduce((value, element) => value < element ? value : element);\n    }\n    return min_sum;\n}\n",
            "int maxFill(List<List<int>> grid, int capacity) {\n    int sum = 0;\n    for (var arr in grid) {\n        int rowSum = 0;\n        for (var num in arr) {\n            rowSum += num;\n        }\n        if (rowSum % capacity != 0) {\n            sum += rowSum ~/ capacity + 1;\n        } else {\n            sum += rowSum ~/ capacity;\n        }\n    }\n    return sum;\n}\n",
            "int countOnes(int num) => num.toRadixString(2).split(\"0\").join().length;\n\nList<int> sortArray(List<int> arr) {\n  return arr.sort((a, b) {\n    int onesA = countOnes(a);\n    int onesB = countOnes(b);\n    if (onesA == onesB) {\n      return a.compareTo(b);\n    }\n    return onesA.compareTo(onesB);\n  });\n  return arr;\n}\n",
            "List<String> selectWords(String s, int n) {\n    const String consonants = \"bcdfghjklmnpqrstvwxyz\";\n    List<String> words = s.split(' ');\n    List<String> result = [];\n    for (String w in words) {\n        int count = 0;\n        for (int i = 0; i < w.length; i++) {\n            String c = w[i].toLowerCase();\n            if (consonants.contains(c)) {\n                count++;\n            }\n        }\n        if (count == n) {\n            result.add(w);\n        }\n    }\n    return result;\n}\n",
            "String getClosestVowel(String word) {\n    String vowels = \"aeiouAEIOU\";\n    for (int i = word.length - 2; i > 0; i--) {\n        if (vowels.contains(word[i]) && !vowels.contains(word[i-1]) && !vowels.contains(word[i+1])) {\n            return word[i];\n        }\n    }\n    return \"\";\n}\n",
            "bool check(String s) {\n    int depth = 0;\n    for (var ch in s.runes) {\n        if (ch == '(') {\n            depth++;\n        } else {\n            depth--;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n\nString matchParens(List<String> lst) {\n    String s1 = lst[0] + lst[1];\n    String s2 = lst[1] + lst[0];\n    if (check(s1) || check(s2)) {\n        return \"Yes\";\n    }\n    return \"No\";\n}\n",
            "List<int> maximum(List<int> arr, int k) {\n    if (k == 0) {\n        return [];\n    }\n    List<int> sortedArr = List.from(arr)..sort();\n    return sortedArr.sublist(sortedArr.length - k);\n}",
            "int solution(List<int> lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n",
            "int addElements(List<int> arr, int k) {\n    int sum = 0;\n    for (int i = 0; i < k && i < arr.length; i++) {\n        if (arr[i] >= -99 && arr[i] <= 99) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n",
            "List<int> getOddCollatz(int n) {\n    List<int> collatz = [1];\n    while (n != 1) {\n        if (n % 2 != 0) {\n            collatz.add(n);\n            n = 3 * n + 1;\n        } else {\n            n = n ~/ 2;\n        }\n    }\n    collatz.sort();\n    return collatz;\n}\n",
            "bool validDate(String date) {\n    if (date.length != 10 || date[2] != '-' || date[5] != '-') {\n        return false;\n    }\n    int m = int.parse(date.substring(0, 2));\n    int d = int.parse(date.substring(3, 5));\n    if ([1, 3, 5, 7, 8, 10, 12].contains(m) && d >= 1 && d <= 31) {\n        return true;\n    }\n    if ([4, 6, 9, 11].contains(m) && d >= 1 && d <= 30) {\n        return true;\n    }\n    if (m == 2 && d >= 1 && d <= 29) {\n        return true;\n    }\n    return false;\n}\n",
            "List<String> splitWords(String txt) {\n    if (txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if (txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for (var i = 0; i < txt.length; i++) {\n            var c = txt.codeUnitAt(i);\n            if ((c >= 'a'.codeUnitAt(0) && c <= 'z'.codeUnitAt(0)) && c % 2 == 0) {\n                count++;\n            }\n        }\n        return [count.toString()];\n    }\n}\n",
            "bool isSorted(List<int> lst) {\n    if (lst.isEmpty) {\n        return true;\n    }\n    for (int i = 1; i < lst.length; i++) {\n        if (lst[i - 1] > lst[i]) {\n            return false;\n        }\n    }\n    Map<int, int> freq = {};\n    for (int i in lst) {\n        freq[i] = (freq[i] ?? 0) + 1;\n    }\n    for (int count in freq.values) {\n        if (count > 2) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= (n).toInt(); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nString intersection(List<int> interval1, List[int> interval2) {\n    int l = max(interval1[0], interval2[0]);\n    int r = min(interval1[1], interval2[1]);\n    int length = r - l;\n    if (length > 0 && isPrime(length)) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n\nint max(int a, int b) {\n    if (a > b) {\n        return a;\n    }\n    return b;\n}\n\nint min(int a, int b) {\n    if (a < b) {\n        return a;\n    }\n    return b;\n}\n",
            "int? prodSigns(List<int> arr) {\n    if (arr.isEmpty) {\n        return null;\n    }\n    for (var n in arr) {\n        if (n == 0) {\n            return 0;\n        }\n    }\n    int sign = -1;\n    int negativeCount = 0;\n    for (var n in arr) {\n        if (n < 0) {\n            negativeCount++;\n        }\n    }\n    if (negativeCount % 2 == 0) {\n        sign = 1;\n    }\n    int sum = 0;\n    for (var n in arr) {\n        sum += n.abs();\n    }\n    return sign * sum;\n}\n",
            "List<int> minPath(List<List<int>> grid, int k) {\n    int n = grid.length;\n    int minVal = n * n + 1;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            if (grid[i][j] == 1) {\n                List<int> temp = [];\n                if (i != 0) {\n                    temp.add(grid[i - 1][j]);\n                }\n                if (j != 0) {\n                    temp.add(grid[i][j - 1]);\n                }\n                if (i != n - 1) {\n                    temp.add(grid[i + 1][j]);\n                }\n                if (j != n - 1) {\n                    temp.add(grid[i][j + 1]);\n                }\n                for (int val in temp) {\n                    if (val < minVal) {\n                        minVal = val;\n                    }\n                }\n            }\n        }\n    }\n    List<int> result = List.filled(k, 0);\n    for (int i = 0; i < k; i++) {\n        result[i] = 1;\n        if (i % 2 != 0) {\n            result[i] = minVal;\n        }\n    }\n    return result;\n}\n",
            "List<int> tri(int n) {\n    if (n == 0) {\n        return [1];\n    }\n    List<int> seq = [1, 3];\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0) {\n            seq.add(i ~/ 2 + 1);\n        } else {\n            seq.add(seq[i - 1] + seq[i - 2] + (i + 3) ~/ 2);\n        }\n    }\n    return seq;\n}\n",
            "int digits(int n) {\n    List<int> odds = [];\n    String strN = n.toString();\n    for (int i = 0; i < strN.length; i++) {\n        int digit = int.parse(strN[i]);\n        if (digit % 2 == 1) {\n            odds.add(digit);\n        }\n    }\n    int result = 1;\n    for (int o in odds) {\n        result *= o;\n    }\n    return odds.isNotEmpty ? result : 0;\n}\n",
            "bool isNested(String s) {\n    List<int> openIdx = [];\n    List<int> closeIdx = [];\n\n    for (int i = 0; i < s.length; i++) {\n        if (s[i] == '[') {\n            openIdx.add(i);\n        } else if (s[i] == ']') {\n            closeIdx.add(i);\n        }\n    }\n\n    for (int i = 0, j = closeIdx.length - 1; i < j; i++, j--) {\n        int temp = closeIdx[i];\n        closeIdx[i] = closeIdx[j];\n        closeIdx[j] = temp;\n    }\n\n    int cnt = 0;\n    int i = 0;\n    int l = closeIdx.length;\n    for (int idx in openIdx) {\n        if (i < l && idx < closeIdx[i]) {\n            cnt++;\n            i++;\n        }\n    }\n    return cnt >= 2;\n}\n",
            "int sumSquares(List<double> lst) {\n    int sum = 0;\n    for (double n in lst) {\n        sum += (n.ceil() * n.ceil()).toInt();\n    }\n    return sum;\n}\n",
            "bool checkIfLastCharIsALetter(String txt) {\n    if (txt.isEmpty) {\n        return false;\n    }\n    String last = txt.substring(txt.lastIndexOf(' ') + 1);\n    return last.length == 1 && last[0].isLetter;\n}\n",
            "int canArrange(List<int> arr) {\n    if (arr.length <= 1) {\n        return -1;\n    }\n    int idx = -1;\n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i] < arr[i - 1]) {\n            idx = i;\n        }\n    }\n    return idx;\n}\n",
            "List<int?> largestSmallestIntegers(List<int> lst) {\n    List<int> neg = [];\n    List<int> pos = [];\n\n    for (var i in lst) {\n        if (i < 0) {\n            neg.add(i);\n        }\n        if (i > 0) {\n            pos.add(i);\n        }\n    }\n\n    int? maxNeg;\n    if (neg.isNotEmpty) {\n        int maxNegVal = neg[0];\n        for (var n in neg) {\n            if (n > maxNegVal) {\n                maxNegVal = n;\n            }\n        }\n        maxNeg = maxNegVal;\n    }\n\n    int? minPos;\n    if (pos.isNotEmpty) {\n        int minPosVal = pos[0];\n        for (var p in pos) {\n            if (p < minPosVal) {\n                minPosVal = p;\n            }\n        }\n        minPos = minPosVal;\n    }\n\n    return [maxNeg, minPos];\n}\n",
            "double? anyToReal(o) {\n  if (o is String) {\n    var v = o.replaceAll(',', '.').replaceAll(' ', '');\n    try {\n      return double.parse(v);\n    } catch (e) {\n      throw Exception(\"invalid float representation: $v\");\n    }\n  } else if (o is int) {\n    return o.toDouble();\n  } else if (o is double) {\n    return o;\n  } else {\n    throw Exception(\"unsupported type: ${o.runtimeType}\");\n  }\n}\n\ndouble? compareOne(Object a, Object b) {\n  var a1 = anyToReal(a);\n  var b1 = anyToReal(b);\n\n  if (a1 == null || b1 == null) {\n    return null;\n  }\n\n  if (a1 == b1) {\n    return null;\n  } else if (a1 > b1) {\n    return a1;\n  } else {\n    return b1;\n  }\n}\n",
            "bool isEqualToSumEven(int n) {\n    return n % 2 == 0 && n >= 8;\n}\n",
            "int specialFactorial(int n) {\n    int fact = 1;\n    int result = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n        result *= fact;\n    }\n    return result;\n}\n",
            "String fixSpaces(String txt) {\n    return txt.replaceAllMapped(RegExp(r\"\\s{3,}\"), (match) => \"-\").replaceAll(\" \", \"_\");\n}\n",
            "String fileNameCheck(String fileName) {\n  List<String> suf = ['txt', 'exe', 'dll'];\n  List<String> lst = fileName.split('.');\n  if (lst.length != 2 || !suf.contains(lst[1]) || lst[0].isEmpty || !RegExp(r'^[a-zA-Z]').hasMatch(lst[0][0]) || countDigits(lst[0]) > 3) {\n    return \"No\";\n  }\n  return \"Yes\";\n}\n\nint countDigits(String s) {\n  int count = 0;\n  for (var c in s.codeUnits) {\n    if ('0' <= String.fromCharCode(c) && String.fromCharCode(c) <= '9') {\n      count++;\n    }\n  }\n  return count;\n}\n",
            "int sumSquares(List<int> lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            result += lst[i] * lst[i];\n        } else if (i % 4 == 0) {\n            result += lst[i] * lst[i] * lst[i];\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "String wordsInSentence(String sentence) {\n    List<String> words = sentence.split(\" \");\n    List<String> primeWords = [];\n    for (String w in words) {\n        if (isPrime(w.length)) {\n            primeWords.add(w);\n        }\n    }\n    return primeWords.join(\" \");\n}\n\nbool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= math.sqrt(n).toInt(); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "bool simplify(String x, String n) {\n    List<String> xs = x.split('/');\n    List<String> ns = n.split('/');\n    int num = int.parse(xs[0]);\n    int den = int.parse(xs[1]);\n    int numer = int.parse(ns[0]);\n    int denom = int.parse(ns[1]);\n    return (num * numer) % (den * denom) == 0;\n}\n",
            "List<int> orderByPoints(List<int> nums) {\n  int digitsSum(int n) {\n    String nStr = n.toString();\n    if (n >= 0) {\n      return nStr.split('').map((d) => int.parse(d)).reduce((a, b) => a + b);\n    } else {\n      return int.parse(nStr.substring(0, 2)) * 2 + digitsSum(n.abs());\n    }\n  }\n\n  return nums.toList()\n      ..sort((a, b) => digitsSum(a).compareTo(digitsSum(b)));\n}\n",
            "int specialFilter(List<int> nums) {\n    String odds = \"13579\";\n    int count = 0;\n    for (int n in nums) {\n        if (n > 10 && n % 2 == 1 && odds.contains(n.toString()[0])) {\n            count++;\n        }\n    }\n    return count;\n}\n",
            "int getMaxTriples(int n) {\n    var c = [0, 0, 0];\n    for (var i = 1; i <= n; i++) {\n        var a = i * i - i + 1;\n        c[a % 3]++;\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) ~/ 6;\n}\n",
            "List<String> bf(String planet1, String planet2) {\n    List<String> names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    int l = -1;\n    int r = -1;\n    for (int i = 0; i < names.length; i++) {\n        if (names[i] == planet1) {\n            l = i;\n        }\n        if (names[i] == planet2) {\n            r = i;\n        }\n    }\n    if (l == -1 || r == -1) {\n        return [];\n    }\n    if (l > r) {\n        int temp = l;\n        l = r;\n        r = temp;\n    }\n    if (l == r) {\n        return [];\n    }\n    return names.sublist(l + 1, r);\n}\n",
            "List<String> sortedListSum(List<String> lst) {\n    List<String> result = [];\n    for (String s in lst) {\n        if (s.length % 2 == 0) {\n            result.add(s);\n        }\n    }\n    result.sort((a, b) {\n        if (a.length == b.length) {\n            return a.compareTo(b);\n        }\n        return a.length.compareTo(b.length);\n    });\n    return result;\n}\n",
            "int xOrY(int n, int x, int y) {\n    if (n < 2) {\n        return y;\n    }\n    for (int i = 2; i <= math.sqrt(n).toInt(); i++) {\n        if (n % i == 0) {\n            return y;\n        }\n    }\n    return x;\n}\n",
            "int doubleTheDifference(List<double> lst) {\n    int sum = 0;\n    for (var n in lst) {\n        if (n >= 0 && n == n.toInt() && n.toInt() % 2 == 1) {\n            sum += n.toInt() * n.toInt();\n        }\n    }\n    return sum;\n}\n",
            "List<int> compare(List<int> game, List<int> guess) {\n    List<int> result = List.filled(game.length, 0);\n    for (int i = 0; i < game.length; i++) {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n}\n\nint abs(int x) {\n    if (x < 0) {\n        return -x;\n    }\n    return x;\n}\n",
            "String strongestExtension(String className, List<String> extensions) {\n    int maxS = -1000;\n    String maxExt = \"\";\n    for (var ext in extensions) {\n        int upper = 0;\n        int lower = 0;\n        for (var c in ext.codeUnits) {\n            if (c >= 'A'.codeUnitAt(0) && c <= 'Z'.codeUnitAt(0)) {\n                upper++;\n            } else if (c >= 'a'.codeUnitAt(0) && c <= 'z'.codeUnitAt(0)) {\n                lower++;\n            }\n        }\n        int s = upper - lower;\n        if (s > maxS) {\n            maxS = s;\n            maxExt = ext;\n        }\n    }\n    return className + \".\" + maxExt;\n}\n",
            "bool cycpatternCheck(String a, String b) {\n    if (a.length < b.length) {\n        return false;\n    }\n    for (int i = 0; i < b.length; i++) {\n        String rotated = b.substring(i) + b.substring(0, i);\n        if (a.contains(rotated)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "List<int> evenOddCount(int num) {\n    String ds = num.abs().toString();\n    int even = 0;\n    for (var d in ds.split('')) {\n        if ((int.parse(d) - '0') % 2 == 0) {\n            even++;\n        }\n    }\n    return [even, ds.length - even];\n}\n",
            "String intToMiniRoman(int num) {\n    List<int> values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    List<String> numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    List<String> res = [];\n    for (int i = 0; i < values.length; i++) {\n        while (num >= values[i]) {\n            res.add(numerals[i]);\n            num -= values[i];\n        }\n    }\n    return res.join('');\n}\n",
            "bool rightAngleTriangle(int a, int b, int c) {\n  List<int> sides = [a, b, c];\n  sides.sort();\n  return (sides[0] * sides[0] + sides[1] * sides[1]) == (sides[2] * sides[2]);\n}\n",
            "String findMax(List<String> words) {\n  int maxCnt = 0;\n  String maxW = \"\";\n  for (var w in words) {\n    int cnt = uniqueChars(w).length;\n    if (cnt > maxCnt) {\n      maxCnt = cnt;\n      maxW = w;\n    } else if (cnt == maxCnt) {\n      if (w.compareTo(maxW) < 0) {\n        maxW = w;\n      }\n    }\n  }\n  return maxW;\n}\n\nSet<String> uniqueChars(String s) {\n  Set<String> charSet = {};\n  for (var c in s.split('')) {\n    charSet.add(c);\n  }\n  return charSet;\n}\n",
            "List<int> eat(int num, int need, int remaining) {\n    if (need <= remaining) {\n        return [num + need, remaining - need];\n    } else {\n        return [num + remaining, 0];\n    }\n}\n",
            "int doAlgebra(List<String> operators, List<int> operands) {\n    var ops = List.from(operators);\n    var nums = List.from(operands);\n    int i = ops.length - 1;\n    while (i >= 0) {\n        if (ops[i] == \"**\") {\n            nums[i] = nums[i].pow(nums[i + 1]);\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n        }\n        i--;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] == \"*\") {\n            nums[i] *= nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i--;\n        } else if (ops[i] == \"//\") {\n            nums[i] ~/= nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i--;\n        }\n        i++;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] == \"+\") {\n            nums[i] += nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i--;\n        } else if (ops[i] == \"-\") {\n            nums[i] -= nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i--;\n        }\n        i++;\n    }\n    return nums[0];\n}\n",
            "String solve(String s) {\n    if (!hasAlpha(s)) {\n        return reverseString(s);\n    }\n    List<String> result = [];\n    for (var ch in s runes) {\n        if (!RegExp(r'[a-zA-Z]').hasMatch(String.fromCharCode(ch))) {\n            result.add(String.fromCharCode(ch));\n        } else if (String.fromCharCode(ch).toUpperCase() == String.fromCharCode(ch)) {\n            result.add(String.fromCharCode(ch).toLowerCase());\n        } else {\n            result.add(String.fromCharCode(ch).toUpperCase());\n        }\n    }\n    return result.join('');\n}\n\nbool hasAlpha(String s) {\n    for (var ch in s runes) {\n        if (RegExp(r'[a-zA-Z]').hasMatch(String.fromCharCode(ch))) {\n            return true;\n        }\n    }\n    return false;\n}\n\nString reverseString(String s) {\n    List<String> runes = s.split('').reversed.toList();\n    return runes.join('');\n}\n",
            "String? stringToMd5(String txt) {\n    if (txt == \"\") {\n        return null;\n    }\n    var md5 =Md5();\n    var bytes = utf8.encode(txt);\n    var digest = md5.convert(bytes).toString();\n    return digest.toString();\n}\n",
            "List<int> generateIntegers(int a, int b) {\n    int lower = max(2, min(a, b));\n    int upper = min(8, max(a, b));\n    List<int> result = [];\n    for (int i = lower; i <= upper; i++) {\n        if (i % 2 == 0) {\n            result.add(i);\n        }\n    }\n    return result;\n}\n\nint min(int x, int y) {\n    return x < y ? x : y;\n}\n\nint max(int x, int y) {\n    return x > y ? x : y;\n}\n"
        ],
        "javascript": [
            "```js\n/**\n * @param {Array<number>} numbers\n * @param {number} threshold\n * @returns {boolean}\n */\nexport const hasCloseElements = (numbers, threshold) => {\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n```",
            "```js\n/**\n * @param {string} parenString\n * @returns {Array<string>}\n */\nexport const separateParenGroups = (parenString) => {\n    let groups = [];\n    let stk = [];\n    let currentGroup = \"\";\n    let parens = parenString.replace(/\\s/g, '');\n    \n    for (let ch of parens) {\n        if (ch === '(') {\n            stk.push(ch);\n            currentGroup += ch;\n        } else if (ch === ')') {\n            stk.pop();\n            currentGroup += ch;\n            if (stk.length === 0) {\n                groups.push(currentGroup);\n                currentGroup = \"\";\n            }\n        }\n    }\n    return groups;\n}\n```",
            "/**\n * @param {number} num\n * @returns {number}\n */\nexport const truncateNumber = (num) => {\n    return num - Math.floor(num);\n}\n",
            "/**\n * @param {Array<number>} operations\n * @returns {boolean}\n */\nexport const belowZero = (operations) => {\n    let balance = 0;\n    for (let op of operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param {Array<number>} numbers\n * @returns {number}\n */\nexport const meanAbsoluteDeviation = (numbers) => {\n    let mean = 0.0;\n    for (let number of numbers) {\n        mean += number;\n    }\n    mean /= numbers.length;\n\n    let deviation = 0.0;\n    for (let number of numbers) {\n        deviation += Math.abs(number - mean);\n    }\n    return deviation / numbers.length;\n}\n",
            "/**\n * @param {Array<number>} numbers\n * @param {number} delimiter\n * @returns {Array<number>}\n */\nexport const intersperse = (numbers, delimiter) => {\n    let result = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (i !== 0) {\n            result.push(delimiter);\n        }\n        result.push(numbers[i]);\n    }\n    return result;\n}\n",
            "/**\n * @param {string} parenString\n * @returns {Array<number>}\n */\nexport const parseNestedParens = (parenString) => {\n    const result = [];\n    const parenGroups = parenString.split(' ');\n    for (const group of parenGroups) {\n        let maxDepth = 0;\n        let depth = 0;\n        for (const ch of group) {\n            if (ch === '(') {\n                depth++;\n                if (depth > maxDepth) {\n                    maxDepth = depth;\n                }\n            } else if (ch === ')') {\n                depth--;\n            }\n        }\n        result.push(maxDepth);\n    }\n    return result;\n}\n",
            "/**\n * @param {Array<string>} strs\n * @param {string} substring\n * @returns {Array<string>}\n */\nexport const filterBySubstring = (strs, substring) => {\n    let result = [];\n    for (let s of strs) {\n        if (s.includes(substring)) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n",
            "export const sumProduct = (numbers) => {\n    let n_sum = 0;\n    for (const num of numbers) {\n        n_sum += num;\n    }\n    \n    let n_product = 1;\n    for (const num of numbers) {\n        n_product *= num;\n    }\n    \n    return [n_sum, n_product];\n}\n",
            "/**\n * @param {Array<number>} numbers\n * @returns {Array<number>}\n */\nexport const rollingMax = (numbers) => {\n    let maxSoFar = -Infinity;\n    const result = new Array(numbers.length);\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > maxSoFar) {\n            maxSoFar = numbers[i];\n        }\n        result[i] = maxSoFar;\n    }\n    return result;\n}\n",
            "/**\n * @param {string} s\n * @returns {string}\n */\nexport const makePalindrome = (s) => {\n    const is_palindrome = (str) => {\n        for (let i = 0; i < str.length / 2; i++) {\n            if (str[i] !== str[str.length - 1 - i]) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    if (is_palindrome(s)) {\n        return s;\n    }\n\n    for (let i = 0; i < s.length; i++) {\n        if (is_palindrome(s.substring(i))) {\n            const suffix = s.substring(0, i);\n            let reversed_suffix = '';\n            for (let j = suffix.length - 1; j >= 0; j--) {\n                reversed_suffix += suffix[j];\n            }\n            return s + reversed_suffix;\n        }\n    }\n\n    return '';\n};\n",
            "/**\n * @param {string} a\n * @param {string} b\n * @returns {string}\n */\nexport const stringXor = (a, b) => {\n    let result = \"\";\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] === b[i]) {\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    return result;\n}\n",
            "/**\n * @param {Array<string>} strs\n * @returns {?string}\n */\nexport const longest = (strs) => {\n    if (strs.length === 0) {\n        return null;\n    }\n    let longestS = strs[0];\n    for (let s of strs) {\n        if (s.length > longestS.length) {\n            longestS = s;\n        }\n    }\n    return longestS;\n}\n",
            "/**\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */\nexport const greatestCommonDivisor = (a, b) => {\n    if (b === 0) {\n        return a;\n    } else {\n        return greatestCommonDivisor(b, a % b);\n    }\n};\n",
            "export const allPrefixes = (s) => {\n    const prefixes = [];\n    for (let i = 0; i < s.length; i++) {\n        prefixes[i] = s.substring(0, i + 1);\n    }\n    return prefixes;\n}\n",
            "/**\n * @param {number} n\n * @returns {string}\n */\nexport const stringSequence = (n) => {\n    const result = [];\n    for (let i = 0; i <= n; i++) {\n        result.push(i.toString());\n    }\n    return result.join(\" \");\n}\n",
            "/**\n * @param {string} s\n * @returns {number}\n */\nexport const countDistinctCharacters = (s) => {\n    const charSet = new Set();\n    for (const c of s) {\n        charSet.add(c.toLowerCase());\n    }\n    return charSet.size;\n}\n",
            "/**\n * @param {string} musicString\n * @returns {Array<number>}\n */\nexport const parseMusic = (musicString) => {\n    const durations = { \"o\": 4, \"o|\": 2, \".|\": 1 };\n    const notes = musicString.split(\" \");\n    const result = [];\n    for (const note of notes) {\n        if (durations.hasOwnProperty(note)) {\n            result.push(durations[note]);\n        }\n    }\n    return result;\n}\n",
            "/**\n * @param {string} s\n * @param {string} substring\n * @returns {number}\n */\nexport const howManyTimes = (s, substring) => {\n    let times = 0;\n    for (let i = 0; i <= s.length - substring.length; i++) {\n        if (s.substring(i, i + substring.length) === substring) {\n            times++;\n        }\n    }\n    return times;\n}\n",
            "/**\n * @param {string} numbers\n * @returns {string}\n */\nexport const sortNumbers = (numbers) => {\n    const numDict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    };\n    const numArray = numbers.split(\" \");\n    numArray.sort((a, b) => {\n        return numDict[a] - numDict[b];\n    });\n    return numArray.join(\" \");\n}\n",
            "export const findClosestElements = (numbers) => {\n    const sortedNumbers = [...numbers].sort((a, b) => a - b);\n\n    let minDiff = Infinity;\n    let closestPair = [];\n\n    for (let i = 1; i < sortedNumbers.length; i++) {\n        const diff = sortedNumbers[i] - sortedNumbers[i - 1];\n        if (diff < minDiff) {\n            minDiff = diff;\n            closestPair = [sortedNumbers[i - 1], sortedNumbers[i]];\n        }\n    }\n\n    return closestPair;\n}\n",
            "/**\n * @param {Array<number>} numbers\n * @returns {Array<number>}\n */\nexport const rescaleToUnit = (numbers) => {\n    let minNum = numbers[0];\n    let maxNum = numbers[0];\n    for (const num of numbers) {\n        if (num < minNum) {\n            minNum = num;\n        }\n        if (num > maxNum) {\n            maxNum = num;\n        }\n    }\n    if (minNum === maxNum) {\n        const result = new Array(numbers.length).fill(0.0);\n        return result;\n    } else {\n        const result = numbers.map(num => (num - minNum) / (maxNum - minNum));\n        return result;\n    }\n}\n",
            "/**\n * @param {Array<*>} values\n * @returns {Array<number>}\n */\nexport const filterIntegers = (values) => {\n    let result = [];\n    for (let value of values) {\n        if (typeof value === 'number' && Number.isInteger(value)) {\n            result.push(value);\n        }\n    }\n    return result;\n}\n",
            "/**\n * @param {string} s\n * @returns {number}\n */\nexport const strLength = (s) => {\n    return s.length;\n}\n",
            "export const largestDivisor = (n) => {\n    for (let i = 2; i < n; i++) {\n        if (n % i === 0) {\n            return Math.floor(n / i);\n        }\n    }\n    return 1;\n}\n",
            "/**\n * @param {number} n\n * @returns {Array<number>}\n */\nexport const factorize = (n) => {\n    let factors = [];\n    let divisor = 2;\n    while (divisor <= n) {\n        if (n % divisor === 0) {\n            factors.push(divisor);\n            n /= divisor;\n        } else {\n            divisor++;\n        }\n    }\n    return factors;\n}\n",
            "/**\n * @param {Array<number>} numbers\n * @returns {Array<number>}\n */\nexport const removeDuplicates = (numbers) => {\n    const counts = {};\n    for (let num of numbers) {\n        counts[num] = (counts[num] || 0) + 1;\n    }\n    const res = [];\n    for (let num of numbers) {\n        if (counts[num] === 1) {\n            res.push(num);\n        }\n    }\n    return res;\n}\n",
            "/**\n * @param {string} s\n * @returns {string}\n */\nexport const flipCase = (s) => {\n    let flipped = '';\n    for (let ch of s) {\n        if (!/[a-zA-Z]/.test(ch)) {\n            flipped += ch;\n        } else if (ch === ch.toLowerCase()) {\n            flipped += ch.toUpperCase();\n        } else if (ch === ch.toUpperCase()) {\n            flipped += ch.toLowerCase();\n        }\n    }\n    return flipped;\n}\n",
            "/**\n * @param {Array<string>} strs\n * @returns {string}\n */\nexport const concatenate = (strs) => {\n    return strs.join('');\n}\n",
            "/**\n * @param {Array<string>} strs\n * @param {string} prefixStr\n * @returns {Array<string>}\n */\nexport const filterByPrefix = (strs, prefixStr) => {\n    const result = [];\n    for (const s of strs) {\n        if (s.startsWith(prefixStr)) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n",
            "/**\n * @param {Array<number>} l\n * @returns {Array<number>}\n */\nexport const getPositive = (l) => {\n    let result = [];\n    for (let num of l) {\n        if (num > 0) {\n            result.push(num);\n        }\n    }\n    return result;\n}\n",
            "/**\n * @param {number} n\n * @returns {boolean}\n */\nexport const isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "/**\n * @param {Array<number>} xs\n * @param {number} x\n * @returns {number}\n */\nexport const poly = (xs, x) => {\n    let res = 0.0;\n    for (let i = 0; i < xs.length; i++) {\n        res += xs[i] * Math.pow(x, i);\n    }\n    return res;\n}\n\n/**\n * @param {Array<number>} xs\n * @returns {number}\n */\nexport const findZero = (xs) => {\n    let x1 = 1.0, x2 = -1.0;\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2;\n        x2 *= 2;\n    }\n    while (Math.abs(x1 - x2) > 1e-10) {\n        let mid = (x1 + x2) / 2;\n        if (poly(xs, mid) === 0) {\n            return mid;\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2;\n}\n",
            "/**\n * @param {Array<number>} l\n * @returns {Array<number>}\n */\nexport const sortThird = (l) => {\n    const sortedThird = l.filter((_, index) => index % 3 === 0).sort((a, b) => a - b);\n    return l.map((value, index) => index % 3 === 0 ? sortedThird[index / 3] : value);\n}\n",
            "/**\n * @param {Array<number>} l\n * @returns {Array<number>}\n */\nexport const listUnique = (l) => {\n    const uniqueMap = {};\n    const result = [];\n    for (const value of l) {\n        if (!uniqueMap[value]) {\n            uniqueMap[value] = true;\n            result.push(value);\n        }\n    }\n    result.sort((a, b) => a - b);\n    return result;\n}\n",
            "/**\n * @param {Array<number>} l\n * @returns {number}\n */\nexport const maxElement = (l) => {\n    if (l.length === 0) {\n        return 0;\n    }\n    let max = l[0];\n    for (let v of l) {\n        if (v > max) {\n            max = v;\n        }\n    }\n    return max;\n}\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const fizzBuzz = (n) => {\n    let cnt = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            cnt += countSevens(i);\n        }\n    }\n    return cnt;\n}\n\nconst countSevens = (num) => {\n    let cnt = 0;\n    while (num > 0) {\n        if (num % 10 === 7) {\n            cnt++;\n        }\n        num = Math.floor(num / 10);\n    }\n    return cnt;\n}\n",
            "/**\n * @param {Array<number>} l\n * @returns {Array<number>}\n */\nexport const sortEven = (l) => {\n    const evenIndices = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i % 2 === 0) {\n            evenIndices.push(l[i]);\n        }\n    }\n    evenIndices.sort((a, b) => a - b);\n\n    const sortedList = [];\n    let evenIndex = 0;\n    for (let i = 0; i < l.length; i++) {\n        if (i % 2 === 0) {\n            sortedList[i] = evenIndices[evenIndex];\n            evenIndex++;\n        } else {\n            sortedList[i] = l[i];\n        }\n    }\n    return sortedList;\n}\n",
            "/**\n * @param {string} s\n * @returns {string}\n */\nexport const encodeCyclic = (s) => {\n    let result = [];\n    for (let i = 0; i < s.length; i += 3) {\n        if (i + 3 > s.length) {\n            result.push(s.substring(i));\n        } else {\n            result.push(s.substring(i + 1, i + 3));\n            result.push(s[i]);\n        }\n    }\n    return result.join('');\n}\n\n/**\n * @param {string} s\n * @returns {string}\n */\nexport const decodeCyclic = (s) => {\n    return encodeCyclic(encodeCyclic(s));\n}\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const primeFib = (n) => {\n    const isPrime = (num) => {\n        if (num < 2) return false;\n        for (let i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i === 0) return false;\n        }\n        return true;\n    };\n\n    let f = [0, 1];\n    let cnt = 0;\n    while (cnt < n) {\n        f = [f[1], f[0] + f[1]];\n        if (isPrime(f[1])) {\n            cnt += 1;\n        }\n    }\n    return f[1];\n}\n",
            "/**\n * @param {Array<number>} l\n * @returns {boolean}\n */\nexport const triplesSumToZero = (l) => {\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            for (let k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] === 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const carRaceCollision = (n) => {\n    return n * n;\n}\n",
            "/**\n * @param {Array<number>} l\n * @returns {Array<number>}\n */\nexport const incrList = (l) => {\n    return l.map(v => v + 1);\n}\n",
            "export const pairsSumToZero = (l) => {\n    const seen = new Set();\n    for (let num of l) {\n        if (seen.has(-num)) {\n            return true;\n        }\n        seen.add(num);\n    }\n    return false;\n}\n",
            "/**\n * @param {number} x\n * @param {number} bas\n * @returns {string}\n */\nexport const changeBase = (x, bas) => {\n    if (x === 0) {\n        return \"0\";\n    }\n    let digits = [];\n    while (x > 0) {\n        digits.push((x % bas).toString());\n        x = Math.floor(x / bas);\n    }\n    for (let i = 0, j = digits.length - 1; i < j; i++, j--) {\n        [digits[i], digits[j]] = [digits[j], digits[i]];\n    }\n    return digits.join(\"\");\n}\n",
            "/**\n * @param {number} a\n * @param {number} h\n * @returns {number}\n */\nexport const triangleArea = (a, h) => {\n    return (a * h) / 2.0;\n}\n",
            "export const fib4 = (n) => {\n    let fib = [0, 0, 2, 0];\n    for (let i = 4; i <= n; i++) {\n        let sum = 0;\n        for (let value of fib) {\n            sum += value;\n        }\n        fib[i % 4] = sum;\n    }\n    return fib[n % 4];\n}\n",
            "/**\n * @param {Array<number>} l\n * @returns {number}\n */\nexport const median = (l) => {\n    const sl = [...l].sort((a, b) => a - b);\n    if (l.length % 2 !== 0) {\n        return sl[Math.floor(l.length / 2)];\n    } else {\n        return (sl[l.length / 2] + sl[l.length / 2 - 1]) / 2;\n    }\n}\n",
            "/**\n * @param {string} txt\n * @returns {boolean}\n */\nexport const isPalindrome = (txt) => {\n    const n = txt.length;\n    for (let i = 0; i < n / 2; i++) {\n        if (txt[i] !== txt[n - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "/**\n * @param {number} n\n * @param {number} p\n * @returns {number}\n */\nexport const modp = (n, p) => {\n    let ret = 1;\n    for (let i = 0; i < n; i++) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}\n",
            "/**\n * @param {string} s\n * @returns {string}\n */\nexport const encodeShift = (s) => {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let ch = s.charCodeAt(i);\n        let shiftedCh = String.fromCharCode(((ch - 97 + 5) % 26) + 97);\n        result += shiftedCh;\n    }\n    return result;\n}\n\n/**\n * @param {string} s\n * @returns {string}\n */\nexport const decodeShift = (s) => {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let ch = s.charCodeAt(i);\n        let shiftedCh = String.fromCharCode(((ch - 97 + 21) % 26) + 97);\n        result += shiftedCh;\n    }\n    return result;\n}\n",
            "/**\n * @param {string} txt\n * @returns {string}\n */\nexport const removeVowels = (txt) => {\n    const vowels = \"aeiouAEIOU\";\n    let result = \"\";\n    for (let char of txt) {\n        if (!vowels.includes(char)) {\n            result += char;\n        }\n    }\n    return result;\n}\n",
            "/**\n * @param {Array<number>} l\n * @param {number} t\n * @returns {boolean}\n */\nexport const belowThreshold = (l, t) => {\n    for (let x of l) {\n        if (x >= t) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const add = (x, y) => {\n    return x + y;\n}\n",
            "/**\n * @param {string} s0\n * @param {string} s1\n * @returns {boolean}\n */\nexport const sameChars = (s0, s1) => {\n    const stringToSet = (s) => {\n        const m = new Set();\n        for (const c of s) {\n            m.add(c);\n        }\n        return m;\n    };\n\n    const setEqual = (set1, set2) => {\n        if (set1.size !== set2.size) {\n            return false;\n        }\n        for (const key of set1) {\n            if (!set2.has(key)) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    return setEqual(stringToSet(s0), stringToSet(s1));\n}\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const fib = (n) => {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n};\n",
            "/**\n * @param {string} brackets\n * @returns {boolean}\n */\nexport const correctBracketing = (brackets) => {\n    let depth = 0;\n    for (let i = 0; i < brackets.length; i++) {\n        const b = brackets[i];\n        if (b === '<') {\n            depth += 1;\n        } else if (b === '>') {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n",
            "/**\n * @param {Array<number>} l\n * @returns {boolean}\n */\nexport const monotonic = (l) => {\n    if (l.length <= 1) {\n        return true;\n    }\n\n    let increasing = true;\n    let decreasing = true;\n\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] > l[i - 1]) {\n            decreasing = false;\n        }\n        if (l[i] < l[i - 1]) {\n            increasing = false;\n        }\n    }\n\n    return increasing || decreasing;\n}\n",
            "/**\n * @param {Array<number>} l1\n * @param {Array<number>} l2\n * @returns {Array<number>}\n */\nexport const common = (l1, l2) => {\n    const set1 = new Set(l1);\n    const set2 = new Set(l2);\n\n    const result = [];\n    for (const k of set1) {\n        if (set2.has(k)) {\n            result.push(k);\n        }\n    }\n\n    result.sort((a, b) => a - b);\n    return result;\n}\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const largestPrimeFactor = (n) => {\n    let i = 2;\n    while (i * i <= n) {\n        if (n % i !== 0) {\n            i++;\n        } else {\n            n /= i;\n        }\n    }\n    return n;\n}\n",
            "export const sumToN = (n) => {\n    let sum = 0;\n    for (let i = 0; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n",
            "```js\n/**\n * @param {string} brackets\n * @returns {boolean}\n */\nexport const correctBracketing = (brackets) => {\n    let depth = 0;\n    for (let b of brackets) {\n        if (b === '(') {\n            depth++;\n        } else if (b === ')') {\n            depth--;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n```",
            "/**\n * @param {Array<number>} xs\n * @returns {Array<number>}\n */\nexport const derivative = (xs) => {\n    let result = new Array(xs.length - 1);\n    for (let i = 1; i < xs.length; i++) {\n        result[i - 1] = xs[i] * i;\n    }\n    return result;\n}\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const fibfib = (n) => {\n    if (n <= 1) {\n        return 0;\n    }\n    let a = 0, b = 0, c = 1;\n    while (n > 2) {\n        [a, b, c] = [b, c, a + b + c];\n        n -= 1;\n    }\n    return c;\n}\n",
            "/**\n * @param {string} s\n * @returns {number}\n */\nexport const vowelsCount = (s) => {\n    const vowels = \"aeiou\";\n    let cnt = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (vowels.includes(s[i].toLowerCase()) || (i === s.length - 1 && s[i].toLowerCase() === 'y')) {\n            cnt++;\n        }\n    }\n    return cnt;\n}\n",
            "/**\n * @param {number} x\n * @param {number} shift\n * @returns {string}\n */\nexport const circularShift = (x, shift) => {\n    const xStr = x.toString();\n    if (shift > xStr.length) {\n        return reverseString(xStr);\n    } else {\n        return xStr.slice(-shift) + xStr.slice(0, -shift);\n    }\n}\n\nconst reverseString = (s) => {\n    let runes = s.split('');\n    for (let i = 0, j = runes.length - 1; i < j; i++, j--) {\n        [runes[i], runes[j]] = [runes[j], runes[i]];\n    }\n    return runes.join('');\n}\n",
            "export const digitSum = (s) => {\n    let sum = 0;\n    for (let i = 0; i < s.length; i++) {\n        let c = s.charCodeAt(i);\n        if (c >= 'A'.charCodeAt(0) && c <= 'Z'.charCodeAt(0)) {\n            sum += c;\n        }\n    }\n    return sum;\n}\n",
            "/**\n * @param {string} s\n * @param {number} n\n * @returns {number}\n */\nexport const fruitDistribution = (s, n) => {\n    const words = s.split(' ');\n    const applesIndex = words.indexOf(\"apples\");\n    const orangesIndex = words.indexOf(\"oranges\");\n    const apples = parseInt(words[applesIndex - 1], 10);\n    const oranges = parseInt(words[orangesIndex - 1], 10);\n    return n - apples - oranges;\n}\n",
            "/**\n * @param {Array<number>} arr\n * @returns {Array<number>}\n */\nexport const pluck = (arr) => {\n    let evens = [];\n    for (let n of arr) {\n        if (n % 2 === 0) {\n            evens.push(n);\n        }\n    }\n    if (evens.length === 0) {\n        return [];\n    }\n    let min_even = evens[0];\n    for (let n of evens) {\n        if (n < min_even) {\n            min_even = n;\n        }\n    }\n    let index = -1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === min_even) {\n            index = i;\n            break;\n        }\n    }\n    return [min_even, index];\n}\n",
            "/**\n * @param {Array<number>} lst\n * @returns {number}\n */\nexport const search = (lst) => {\n    const freqs = {};\n    for (const n of lst) {\n        if (freqs[n]) {\n            freqs[n]++;\n        } else {\n            freqs[n] = 1;\n        }\n    }\n    const goodVals = [];\n    for (const [k, v] of Object.entries(freqs)) {\n        if (v >= parseInt(k)) {\n            goodVals.push(parseInt(k));\n        }\n    }\n    if (goodVals.length === 0) {\n        return -1;\n    }\n    let maxVal = goodVals[0];\n    for (const val of goodVals) {\n        if (val > maxVal) {\n            maxVal = val;\n        }\n    }\n    return maxVal;\n}\n",
            "/**\n * @param {Array<number>} lst\n * @returns {Array<number>}\n */\nexport const strangeSortList = (lst) => {\n    let sl = [...lst];\n    sl.sort((a, b) => a - b);\n    let result = [];\n    let left = 0;\n    let right = sl.length - 1;\n    while (left <= right) {\n        result.push(sl[left]);\n        left++;\n        if (left <= right) {\n            result.push(sl[right]);\n            right--;\n        }\n    }\n    return result;\n}\n",
            "/**\n * @param {number} a\n * @param {number} b\n * @param {number} c\n * @returns {number}\n */\nexport const triangleArea = (a, b, c) => {\n    if (a + b > c && a + c > b && b + c > a) {\n        const s = (a + b + c) / 2.0;\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "/**\n * @param {Array<number>} q\n * @param {number} w\n * @returns {boolean}\n */\nexport const willItFly = (q, w) => {\n    if (q.length === 0) {\n        return false;\n    }\n    let is_palin = true;\n    for (let i = 0; i < q.length; i++) {\n        if (q[i] !== q[q.length - i - 1]) {\n            is_palin = false;\n            break;\n        }\n    }\n    let total = 0;\n    for (let v of q) {\n        total += v;\n    }\n    return is_palin && total <= w;\n}\n",
            "export const smallestChange = (arr) => {\n    let ans = 0;\n    for (let i = 0; i < Math.floor(arr.length / 2); i++) {\n        if (arr[i] !== arr[arr.length - i - 1]) {\n            ans++;\n        }\n    }\n    return ans;\n}\n",
            "/**\n * @param {Array<string>} lst1\n * @param {Array<string>} lst2\n * @returns {Array<string>}\n */\nexport const totalMatch = (lst1, lst2) => {\n    let cnt1 = 0;\n    for (let s of lst1) {\n        cnt1 += s.length;\n    }\n    let cnt2 = 0;\n    for (let s of lst2) {\n        cnt2 += s.length;\n    }\n    if (cnt1 <= cnt2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n",
            "/**\n * @param {number} a\n * @returns {boolean}\n */\nexport const isMultiplyPrime = (a) => {\n    const isPrime = (n) => {\n        if (n < 2) {\n            return false;\n        }\n        for (let i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i === 0) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    let cnt = 0;\n    for (let i = 2; i <= a; i++) {\n        if (isPrime(i)) {\n            while (a % i === 0) {\n                cnt++;\n                a /= i;\n            }\n        }\n    }\n    return cnt === 3;\n}\n",
            "export const isSimplePower = (x, n) => {\n    if (n < 2) {\n        return x === n;\n    }\n    let tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp === x;\n}\n",
            "export const isCube = (a) => {\n    a = Math.abs(a);\n    root = Math.round(Math.pow(a, 1.0 / 3.0));\n    return root * root * root === a;\n}\n",
            "/** * @param {string} num * @returns {number} */ export const hexKey = (num) => { let count = 0; for (let x of num) { if (x === '2' || x === '3' || x === '5' || x === '7' || x === 'B' || x === 'D') { count++; } } return count; }",
            "/**\n * @param {number} dec\n * @returns {string}\n */\nexport const decimalToBinary = (dec) => {\n    let binary = dec.toString(2);\n    return `db${binary}db`;\n}\n",
            "/**\n * @param {string} s\n * @returns {boolean}\n */\nexport const isHappy = (s) => {\n    if (s.length < 3) {\n        return false;\n    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "/**\n * @param {Array<number>} grades\n * @returns {Array<string>}\n */\nexport const NumericalLetterGrade = (grades) => {\n    let result = [];\n    for (let g of grades) {\n        if (g === 4.0) {\n            result.push(\"A+\");\n        } else if (g > 3.7) {\n            result.push(\"A\");\n        } else if (g > 3.3) {\n            result.push(\"A-\");\n        } else if (g > 3.0) {\n            result.push(\"B+\");\n        } else if (g > 2.7) {\n            result.push(\"B\");\n        } else if (g > 2.3) {\n            result.push(\"B-\");\n        } else if (g > 2.0) {\n            result.push(\"C+\");\n        } else if (g > 1.7) {\n            result.push(\"C\");\n        } else if (g > 1.3) {\n            result.push(\"C-\");\n        } else if (g > 1.0) {\n            result.push(\"D+\");\n        } else if (g > 0.7) {\n            result.push(\"D\");\n        } else if (g > 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n",
            "export const primeLength = (s) => {\n    const length = s.length;\n    if (length < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.sqrt(length); i++) {\n        if (length % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const startsOneEnds = (n) => {\n    if (n === 1) {\n        return 1;\n    }\n    return 2 * 9 * Math.pow(10, n - 2);\n}\n",
            "/**\n * @param {number} n\n * @returns {string}\n */\nexport const solve = (n) => {\n    let digitsSum = 0;\n    while (n > 0) {\n        let digit = n % 10;\n        digitsSum += digit;\n        n = Math.floor(n / 10);\n    }\n    return digitsSum.toString(2);\n}\n",
            "/**\n * @param {Array<number>} lst\n * @returns {number}\n */\nexport const add = (lst) => {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 1 && lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n",
            "export const antiShuffle = (s) => {\n    const words = s.split(' ');\n    for (let i = 0; i < words.length; i++) {\n        const runes = Array.from(words[i]);\n        runes.sort();\n        words[i] = runes.join('');\n    }\n    return words.join(' ');\n}\n",
            "export const getRow = (lst, x) => {\n    let coords = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                coords.push([i, j]);\n            }\n        }\n    }\n    coords.sort((a, b) => {\n        if (a[0] === b[0]) {\n            return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n    return coords;\n}\n",
            "/**\n * @param {Array<number>} arr\n * @returns {Array<number>}\n */\nexport const sortArray = (arr) => {\n    if (arr.length === 0) {\n        return [];\n    }\n    if ((arr[0] + arr[arr.length - 1]) % 2 === 0) {\n        return [...arr].sort((a, b) => b - a);\n    } else {\n        return [...arr].sort((a, b) => a - b);\n    }\n}\n",
            "/**\n * @param {string} s\n * @returns {string}\n */\nexport const encrypt = (s) => {\n    let result = '';\n    for (let ch of s) {\n        let shifted = ch.charCodeAt(0) + 4;\n        if (shifted > 'z'.charCodeAt(0)) {\n            shifted -= 26;\n        }\n        result += String.fromCharCode(shifted);\n    }\n    return result;\n}\n",
            "/**\n * @param {Array<number>} lst\n * @returns {?number}\n */\nexport const nextSmallest = (lst) => {\n    const sl = [...new Set(lst)].sort((a, b) => a - b);\n    if (sl.length < 2) {\n        return null;\n    }\n    return sl[1];\n};\n",
            "/**\n * @param {string} s\n * @returns {number}\n */\nexport const isBored = (s) => {\n    const sentences = s.split(/(?<=[.!?])\\s+/);\n    return sentences.filter(sentence => sentence.length >= 2 && sentence.startsWith(\"I \")).length;\n}\n",
            "/**\n * @param {*} x\n * @param {*} y\n * @param {*} z\n * @returns {boolean}\n */\nexport const anyInt = (x, y, z) => {\n    if (typeof x !== 'number' || typeof y !== 'number' || typeof z !== 'number') {\n        return false;\n    }\n    return (x + y === z) || (x + z === y) || (y + z === x);\n}",
            "/**\n * @param {string} message\n * @returns {string}\n */\nexport const encode = (message) => {\n    const vowels = \"aeiouAEIOU\";\n    let result = '';\n\n    for (let i = 0; i < message.length; i++) {\n        const ch = message[i];\n        if (/[a-zA-Z]/.test(ch)) {\n            let ch1 = ch;\n            if (ch === ch.toLowerCase()) {\n                ch1 = ch.toUpperCase();\n            } else {\n                ch1 = ch.toLowerCase();\n            }\n            if (vowels.includes(ch1)) {\n                ch1 = String.fromCharCode(ch1.charCodeAt(0) + 2);\n            }\n            result += ch1;\n        } else {\n            result += ch;\n        }\n    }\n\n    return result;\n}\n",
            "/**\n * @param {Array<number>} lst\n * @returns {number}\n */\nexport const skjkasdkd = (lst) => {\n    const isPrime = (n) => {\n        if (n < 2) {\n            return false;\n        }\n        for (let i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i === 0) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    const primes = lst.filter(isPrime);\n    if (primes.length === 0) {\n        return 0;\n    }\n\n    const largest = String(Math.max(...primes));\n    let sum = 0;\n    for (const digit of largest) {\n        sum += parseInt(digit, 10);\n    }\n    return sum;\n};\n",
            "/**\n * @param {Map<string, string>} d\n * @returns {boolean}\n */\nexport const checkDictCase = (d) => {\n    if (d.size === 0) {\n        return false;\n    }\n    const keys = Array.from(d.keys());\n    return keys.every(c => c === c.toLowerCase()) || keys.every(c => c === c.toUpperCase());\n}\n",
            "/**\n * @param {number} n\n * @returns {Array<number>}\n */\nexport const countUpTo = (n) => {\n    const primes = [];\n    for (let num = 2; num < n; num++) {\n        let isPrime = true;\n        for (const p of primes) {\n            if (num % p === 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            primes.push(num);\n        }\n    }\n    return primes;\n}\n",
            "/**\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */\nexport const multiply = (a, b) => {\n    return (Math.abs(a) % 10) * (Math.abs(b) % 10);\n};\n",
            "/**\n * @param {string} s\n * @returns {number}\n */\nexport const countUpper = (s) => {\n    const vowels = \"AEIOU\";\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        const c = s[i];\n        if (i % 2 === 0 && vowels.includes(c)) {\n            count++;\n        }\n    }\n    return count;\n}\n",
            "/**\n * @param {string} value\n * @returns {number}\n */\nexport const closestInteger = (value) => {\n    const num = parseFloat(value);\n    if (num >= 0) {\n        return Math.floor(num + 0.5);\n    } else {\n        return Math.ceil(num - 0.5);\n    }\n}\n",
            "/**\n * @param {number} n\n * @returns {Array<number>}\n */\nexport const makeAPile = (n) => {\n    let pile = new Array(n);\n    for (let i = 0; i < n; i++) {\n        pile[i] = n + 2 * i;\n    }\n    return pile;\n}\n",
            "/**\n * @param {string} s\n * @returns {Array<string>}\n */\nexport const wordsString = (s) => {\n    const words = s.split(/[, ]+/);\n    const result = [];\n    for (const w of words) {\n        if (w.length > 0) {\n            result.push(w);\n        }\n    }\n    return result;\n}\n",
            "/**\n * @param {number} x\n * @param {number} y\n * @returns {number}\n */\nexport const chooseNum = (x, y) => {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 === 0) {\n        return y;\n    }\n    if (x !== y) {\n        return y - 1;\n    }\n    return -1;\n}\n",
            "/**\n * @param {number} n\n * @param {number} m\n * @returns {?string}\n */\nexport const roundedAvg = (n, m) => {\n    if (n > m) {\n        return null;\n    }\n    const r_avg = Math.round((m + n) / 2.0);\n    return r_avg.toString(2);\n}\n",
            "/**\n * @param {Array<number>} x\n * @returns {Array<number>}\n */\nexport const uniqueDigits = (x) => {\n    const allDigitsOdd = (s) => {\n        for (let i = 0; i < s.length; i++) {\n            if ((parseInt(s[i]) % 2) === 0) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    let result = [];\n    for (let num of x) {\n        if (allDigitsOdd(num.toString())) {\n            result.push(num);\n        }\n    }\n    result.sort((a, b) => a - b);\n    return result;\n};\n",
            "/**\n * @param {Array<number>} arr\n * @returns {Array<string>}\n */\nexport const byLength = (arr) => {\n    const digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    let sortedArr = [];\n    for (let x of arr) {\n        if (x >= 1 && x <= 9) {\n            sortedArr.push(x);\n        }\n    }\n    sortedArr.sort((a, b) => b - a);\n    const result = sortedArr.map(x => digitNames[x - 1]);\n    return result;\n}\n",
            "/**\n * @param {number} n\n * @returns {Array<number>}\n */\nexport const f = (n) => {\n    const nums = new Array(n).fill(0);\n    for (let i = 1; i <= n; i++) {\n        nums[i - 1] = i;\n    }\n    \n    const result = new Array(n).fill(0);\n    for (let i = 0; i < n; i++) {\n        if ((i + 1) % 2 !== 0) {\n            let sum = 0;\n            for (let j = 0; j <= i; j++) {\n                sum += nums[j];\n            }\n            result[i] = sum;\n        } else {\n            let product = 1;\n            for (let j = 0; j <= i; j++) {\n                product *= nums[j];\n            }\n            result[i] = product;\n        }\n    }\n    \n    return result;\n}\n",
            "/**\n * @param {number} n\n * @returns {Array<number>}\n */\nexport const evenOddPalindrome = (n) => {\n    let cnt = [0, 0];\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i.toString())) {\n            cnt[i % 2]++;\n        }\n    }\n    return [...cnt];\n}\n\nconst isPalindrome = (s) => {\n    for (let i = 0; i < s.length / 2; i++) {\n        if (s[i] !== s[s.length - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "const digitsSum = (n) => {\n    const nStr = Math.abs(n).toString();\n    return n >= 0 ? \n        [...nStr].reduce((sum, d) => sum + parseInt(d), 0) : \n        parseInt(nStr.slice(0, 2)) * 2 + digitsSum(Math.abs(n));\n};\n\nexport const countNums = (arr) => {\n    return arr.filter(n => digitsSum(n) > 0).length;\n};\n",
            "export const moveOneBall = (arr) => {\n    if (arr.length === 0) {\n        return true;\n    }\n    \n    let sortedArr = [...arr].sort((a, b) => a - b);\n    for (let i = 0; i < arr.length; i++) {\n        if (arr.slice(i).every((value, index) => value === sortedArr[sortedArr.length - arr.length + i + index]) && \n            arr.slice(0, i).every((value, index) => value === sortedArr[i + index])) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param {Array<number>} lst1\n * @param {Array<number>} lst2\n * @returns {string}\n */\nexport const canExchange = (lst1, lst2) => {\n    let oddCnt = 0;\n    for (let num of lst1) {\n        if (num % 2 !== 0) {\n            oddCnt++;\n        }\n    }\n    let evenCnt = 0;\n    for (let num of lst2) {\n        if (num % 2 === 0) {\n            evenCnt++;\n        }\n    }\n    if (evenCnt >= oddCnt) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n",
            "export const histogram = (test) => {\n    const freq = new Map();\n    const words = test.split(/\\s+/);\n    for (const w of words) {\n        if (w.length > 0) {\n            freq.set(w, (freq.get(w) || 0) + 1);\n        }\n    }\n    const result = new Map();\n    if (freq.size > 0) {\n        let maxFreq = 0;\n        for (const [_, v] of freq) {\n            if (v > maxFreq) {\n                maxFreq = v;\n            }\n        }\n        for (const [k, v] of freq) {\n            if (v === maxFreq) {\n                result.set(k, v);\n            }\n        }\n    }\n    return result;\n}\n",
            "```js\n/**\n * @param {string} s\n * @param {string} c\n * @returns {Array<string>}\n */\nexport const reverseDelete = (s, c) => {\n    let s1 = '';\n    for (let ch of s) {\n        if (!c.includes(ch)) {\n            s1 += ch;\n        }\n    }\n    const isPalindrome = (str) => {\n        const n = str.length;\n        for (let i = 0; i < n / 2; i++) {\n            if (str[i] !== str[n - 1 - i]) {\n                return false;\n            }\n        }\n        return true;\n    };\n    const result = [s1];\n    if (isPalindrome(s1)) {\n        result.push('yes');\n    } else {\n        result.push('no');\n    }\n    return result;\n}\n```",
            "/**\n * @param {Array<string>} lst\n * @returns {Array<string>}\n */\nexport const oddCount = (lst) => {\n    let result = [];\n    for (let num of lst) {\n        let n = 0;\n        for (let char of num) {\n            if (parseInt(char) % 2 === 1) {\n                n++;\n            }\n        }\n        let rs = \"the number of odd elements in the string i of the input.\";\n        rs = rs.replace(\"i\", n.toString());\n        result.push(rs);\n    }\n    return result;\n}\n",
            "/**\n * @param {Array<number>} nums\n * @returns {number}\n */\nexport const minSubArraySum = (nums) => {\n    let min_sum = 0;\n    let cur_sum = 0;\n    for (let n of nums) {\n        cur_sum = Math.min(cur_sum + n, 0);\n        min_sum = Math.min(cur_sum, min_sum);\n    }\n    if (min_sum === 0) {\n        min_sum = Math.min(...nums);\n    }\n    return min_sum;\n}\n",
            "/**\n * @param {Array<Array<number>>} grid\n * @param {number} capacity\n * @returns {number}\n */\nexport const maxFill = (grid, capacity) => {\n    let sum = 0;\n    for (let arr of grid) {\n        let rowSum = 0;\n        for (let num of arr) {\n            rowSum += num;\n        }\n        if (rowSum % capacity !== 0) {\n            sum += Math.floor(rowSum / capacity) + 1;\n        } else {\n            sum += rowSum / capacity;\n        }\n    }\n    return sum;\n}\n",
            "/**\n * @param {Array<number>} arr\n * @returns {Array<number>}\n */\nexport const sortArray = (arr) => {\n    return arr.sort((a, b) => {\n        const countOnes = (num) => num.toString(2).split('0').join('').length;\n        const onesA = countOnes(a);\n        const onesB = countOnes(b);\n        if (onesA === onesB) {\n            return a - b;\n        }\n        return onesA - onesB;\n    });\n}\n",
            "/**\n * @param {string} s\n * @param {number} n\n * @returns {Array<string>}\n */\nexport const selectWords = (s, n) => {\n    const consonants = \"bcdfghjklmnpqrstvwxyz\";\n    const words = s.split(/\\s+/);\n    const result = [];\n    for (const w of words) {\n        let count = 0;\n        for (const c of w.toLowerCase()) {\n            if (consonants.includes(c)) {\n                count++;\n            }\n        }\n        if (count === n) {\n            result.push(w);\n        }\n    }\n    return result;\n}\n",
            "/**\n * @param {string} word\n * @returns {string}\n */\nexport const getClosestVowel = (word) => {\n    const vowels = \"aeiouAEIOU\";\n    for (let i = word.length - 2; i > 0; i--) {\n        if (vowels.includes(word[i]) && !vowels.includes(word[i - 1]) && !vowels.includes(word[i + 1])) {\n            return word[i];\n        }\n    }\n    return \"\";\n}\n",
            "/**\n * @param {Array<string>} lst\n * @returns {string}\n */\nexport const matchParens = (lst) => {\n    const check = (s) => {\n        let depth = 0;\n        for (let ch of s) {\n            if (ch === '(') {\n                depth++;\n            } else {\n                depth--;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth === 0;\n    };\n\n    const s1 = lst[0] + lst[1];\n    const s2 = lst[1] + lst[0];\n    if (check(s1) || check(s2)) {\n        return \"Yes\";\n    }\n    return \"No\";\n};\n",
            "/**\n * @param {Array<number>} arr\n * @param {number} k\n * @returns {Array<number>}\n */\nexport const maximum = (arr, k) => {\n    if (k === 0) {\n        return [];\n    }\n    return arr.sort((a, b) => a - b).slice(-k);\n}\n",
            "/**\n * @param {Array<number>} lst\n * @returns {number}\n */\nexport const solution = (lst) => {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n",
            "/**\n * @param {Array<number>} arr\n * @param {number} k\n * @returns {number}\n */\nexport const addElements = (arr, k) => {\n    let sum = 0;\n    for (let i = 0; i < k && i < arr.length; i++) {\n        if (arr[i] >= -99 && arr[i] <= 99) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n",
            "/**\n * @param {number} n\n * @returns {Array<number>}\n */\nexport const getOddCollatz = (n) => {\n    let collatz = [1];\n    while (n !== 1) {\n        if (n % 2 !== 0) {\n            collatz.push(n);\n            n = 3 * n + 1;\n        } else {\n            n = Math.floor(n / 2);\n        }\n    }\n    collatz.sort((a, b) => a - b);\n    return collatz;\n}\n",
            "/**\n * @param {string} date\n * @returns {boolean}\n */\nexport const validDate = (date) => {\n    if (date.length !== 10 || date[2] !== \"-\" || date[5] !== \"-\") {\n        return false;\n    }\n    const m = parseInt(date.substring(0, 2), 10);\n    const d = parseInt(date.substring(3, 5), 10);\n    if ([1, 3, 5, 7, 8, 10, 12].includes(m) && d >= 1 && d <= 31) {\n        return true;\n    }\n    if ([4, 6, 9, 11].includes(m) && d >= 1 && d <= 30) {\n        return true;\n    }\n    if (m === 2 && d >= 1 && d <= 29) {\n        return true;\n    }\n    return false;\n}\n",
            "/**\n * @param {string} txt\n * @returns {Array<string>}\n */\nexport const splitWords = (txt) => {\n    if (txt.includes(\" \")) {\n        return txt.split(\" \");\n    } else if (txt.includes(\",\")) {\n        return txt.split(\",\");\n    } else {\n        let count = 0;\n        for (let c of txt) {\n            if (c >= 'a' && c <= 'z' && c.charCodeAt(0) % 2 === 0) {\n                count++;\n            }\n        }\n        return [count.toString()];\n    }\n}\n",
            "/**\n * @param {Array<number>} lst\n * @returns {boolean}\n */\nexport const isSorted = (lst) => {\n    if (lst.length === 0) {\n        return true;\n    }\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i - 1] > lst[i]) {\n            return false;\n        }\n    }\n    const freq = {};\n    for (const i of lst) {\n        freq[i] = (freq[i] || 0) + 1;\n    }\n    for (const count of Object.values(freq)) {\n        if (count > 2) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "/**\n * @param {Array<number>} interval1\n * @param {Array<number>} interval2\n * @returns {string}\n */\nexport const intersection = (interval1, interval2) => {\n    const isPrime = (n) => {\n        if (n < 2) {\n            return false;\n        }\n        for (let i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i === 0) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    const max = (a, b) => a > b ? a : b;\n    const min = (a, b) => a < b ? a : b;\n\n    let l = max(interval1[0], interval2[0]);\n    let r = min(interval1[1], interval2[1]);\n    let length = r - l;\n    if (length > 0 && isPrime(length)) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n",
            "```js\n/**\n * @param {Array<number>} arr\n * @returns {?number}\n */\nexport const prodSigns = (arr) => {\n    if (arr.length === 0) {\n        return null;\n    }\n    for (let n of arr) {\n        if (n === 0) {\n            return 0;\n        }\n    }\n    let sign = -1;\n    let negativeCount = 0;\n    for (let n of arr) {\n        if (n < 0) {\n            negativeCount++;\n        }\n    }\n    if (negativeCount % 2 === 0) {\n        sign = 1;\n    }\n    let sum = 0;\n    for (let n of arr) {\n        sum += Math.abs(n);\n    }\n    return sign * sum;\n}\n```",
            "/**\n * @param {Array<Array<number>>} grid\n * @param {number} k\n * @returns {Array<number>}\n */\nexport const minPath = (grid, k) => {\n    const n = grid.length;\n    let minVal = n * n + 1;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            if (grid[i][j] === 1) {\n                const temp = [];\n                if (i !== 0) {\n                    temp.push(grid[i - 1][j]);\n                }\n                if (j !== 0) {\n                    temp.push(grid[i][j - 1]);\n                }\n                if (i !== n - 1) {\n                    temp.push(grid[i + 1][j]);\n                }\n                if (j !== n - 1) {\n                    temp.push(grid[i][j + 1]);\n                }\n                for (const val of temp) {\n                    if (val < minVal) {\n                        minVal = val;\n                    }\n                }\n            }\n        }\n    }\n    const result = new Array(k);\n    for (let i = 0; i < k; i++) {\n        result[i] = 1;\n        if (i % 2 !== 0) {\n            result[i] = minVal;\n        }\n    }\n    return result;\n};\n",
            "/**\n * @param {number} n\n * @returns {Array<number>}\n */\nexport const tri = (n) => {\n    if (n === 0) {\n        return [1];\n    }\n    let seq = [1, 3];\n    for (let i = 2; i <= n; i++) {\n        if (i % 2 === 0) {\n            seq.push(i / 2 + 1);\n        } else {\n            seq.push(seq[i - 1] + seq[i - 2] + (i + 3) / 2);\n        }\n    }\n    return seq;\n}\n",
            "export const digits = (n) => {\n    const odds = [];\n    for (const d of String(n)) {\n        const digit = parseInt(d, 10);\n        if (digit % 2 === 1) {\n            odds.push(digit);\n        }\n    }\n    let result = 1;\n    for (const o of odds) {\n        result *= o;\n    }\n    return odds.length > 0 ? result : 0;\n}\n",
            "/**\n * @param {string} s\n * @returns {boolean}\n */\nexport const isNested = (s) => {\n    let openIdx = [];\n    let closeIdx = [];\n\n    for (let i = 0; i < s.length; i++) {\n        let ch = s[i];\n        if (ch === '[') {\n            openIdx.push(i);\n        } else if (ch === ']') {\n            closeIdx.push(i);\n        }\n    }\n\n    closeIdx.reverse();\n\n    let cnt = 0;\n    let i = 0;\n    let l = closeIdx.length;\n    for (let idx of openIdx) {\n        if (i < l && idx < closeIdx[i]) {\n            cnt++;\n            i++;\n        }\n    }\n    return cnt >= 2;\n}\n",
            "export const sumSquares = (lst) => {\n    let sum = 0;\n    for (let n of lst) {\n        sum += Math.pow(Math.ceil(n), 2);\n    }\n    return sum;\n}\n",
            "/**\n * @param {string} txt\n * @returns {boolean}\n */\nexport const checkIfLastCharIsALetter = (txt) => {\n    if (!txt) {\n        return false;\n    }\n    last = txt.slice(txt.lastIndexOf(' ') + 1);\n    return last.length === 1 && /^[a-zA-Z]$/.test(last[0]);\n}\n",
            "/**\n * @param {Array<number>} arr\n * @returns {number}\n */\nexport const canArrange = (arr) => {\n    if (arr.length <= 1) {\n        return -1;\n    }\n    let idx = -1;\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] < arr[i - 1]) {\n            idx = i;\n        }\n    }\n    return idx;\n}\n",
            "/**\n * @param {Array<number>} lst\n * @returns {Array<?number>}\n */\nexport const largestSmallestIntegers = (lst) => {\n    let neg = [];\n    let pos = [];\n\n    for (let i of lst) {\n        if (i < 0) {\n            neg.push(i);\n        }\n        if (i > 0) {\n            pos.push(i);\n        }\n    }\n\n    let maxNeg = null;\n    if (neg.length > 0) {\n        let maxNegVal = neg[0];\n        for (let n of neg) {\n            if (n > maxNegVal) {\n                maxNegVal = n;\n            }\n        }\n        maxNeg = maxNegVal;\n    }\n\n    let minPos = null;\n    if (pos.length > 0) {\n        let minPosVal = pos[0];\n        for (let p of pos) {\n            if (p < minPosVal) {\n                minPosVal = p;\n            }\n        }\n        minPos = minPosVal;\n    }\n\n    return [maxNeg, minPos];\n}\n",
            "/**\n * @param {*} a\n * @param {*} b\n * @returns {?number}\n */\nexport const compareOne = (a, b) => {\n    const anyToReal = (o) => {\n        switch (typeof o) {\n            case 'string':\n                let f = parseFloat(o.replace(',', '.'));\n                if (isNaN(f)) {\n                    throw new Error(`invalid float representation: ${o}`);\n                }\n                return f;\n            case 'number':\n                return o;\n            default:\n                throw new Error(`unsupported type: ${typeof o}`);\n        }\n    };\n\n    let a1, b1;\n    try {\n        a1 = anyToReal(a);\n        b1 = anyToReal(b);\n    } catch (err) {\n        throw err; // or handle it appropriately\n    }\n\n    if (a1 === b1) {\n        return null;\n    } else if (a1 > b1) {\n        return a1;\n    } else {\n        return b1;\n    }\n}\n",
            "export const isEqualToSumEven = (n) => {\n    return n % 2 === 0 && n >= 8;\n}\n",
            "export const specialFactorial = (n) => {\n    let fact = 1;\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n        fact *= i;\n        result *= fact;\n    }\n    return result;\n}\n",
            "/**\n * @param {string} txt\n * @returns {string}\n */\nexport const fixSpaces = (txt) => {\n    return txt.replace(/\\s{3,}/g, \"-\").replace(/ /g, \"_\");\n};\n",
            "/**\n * @param {string} fileName\n * @returns {string}\n */\nexport const fileNameCheck = (fileName) => {\n    const suf = [\"txt\", \"exe\", \"dll\"];\n    const lst = fileName.split(\".\");\n    if (lst.length !== 2 || !contains(suf, lst[1]) || lst[0].length === 0 || !/[a-zA-Z]/.test(lst[0][0]) || countDigits(lst[0]) > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n\nconst contains = (slice, item) => {\n    for (let v of slice) {\n        if (v === item) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconst countDigits = (s) => {\n    let count = 0;\n    for (let c of s) {\n        if (/\\d/.test(c)) {\n            count++;\n        }\n    }\n    return count;\n}\n",
            "/**\n * @param {Array<number>} lst\n * @returns {number}\n */\nexport const sumSquares = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            result += lst[i] * lst[i];\n        } else if (i % 4 === 0) {\n            result += lst[i] * lst[i] * lst[i];\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "/**\n * @param {string} sentence\n * @returns {string}\n */\nexport const wordsInSentence = (sentence) => {\n    const words = sentence.split(\" \");\n    const primeWords = [];\n    for (let w of words) {\n        if (isPrime(w.length)) {\n            primeWords.push(w);\n        }\n    }\n    return primeWords.join(\" \");\n}\n\nconst isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const simplify = (x, n) => {\n    const xs = x.split('/');\n    const ns = n.split('/');\n    const num = parseInt(xs[0]);\n    const den = parseInt(xs[1]);\n    const numer = parseInt(ns[0]);\n    const denom = parseInt(ns[1]);\n    return (num * numer) % (den * denom) === 0;\n}\n",
            "const digitsSum = (n) => {\n    const nStr = n.toString();\n    if (n >= 0) {\n        return nStr.split('').reduce((sum, d) => sum + parseInt(d), 0);\n    } else {\n        return parseInt(nStr.slice(0, 2)) * 2 + digitsSum(Math.abs(n));\n    }\n};\n\n/**\n * @param {Array<number>} nums\n * @returns {Array<number>}\n */\nexport const orderByPoints = (nums) => {\n    return nums.slice().sort((a, b) => digitsSum(a) - digitsSum(b));\n};\n",
            "export const specialFilter = (nums) => {\n    const odds = \"13579\";\n    let count = 0;\n    for (const n of nums) {\n        if (n > 10 && n % 2 === 1 && odds.includes(n.toString()[0])) {\n            count++;\n        }\n    }\n    return count;\n}\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const getMaxTriples = (n) => {\n    let c = [0, 0, 0];\n    for (let i = 1; i <= n; i++) {\n        let a = i * i - i + 1;\n        c[a % 3]++;\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6;\n}\n",
            "/**\n * @param {string} planet1\n * @param {string} planet2\n * @returns {Array<string>}\n */\nexport const bf = (planet1, planet2) => {\n    const names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let l = -1;\n    let r = -1;\n    for (let i = 0; i < names.length; i++) {\n        if (names[i] === planet1) {\n            l = i;\n        }\n        if (names[i] === planet2) {\n            r = i;\n        }\n    }\n    if (l === -1 || r === -1) {\n        return [];\n    }\n    if (l > r) {\n        [l, r] = [r, l];\n    }\n    if (l === r) {\n        return [];\n    }\n    return names.slice(l + 1, r);\n}\n",
            "/**\n * @param {Array<string>} lst\n * @returns {Array<string>}\n */\nexport const sortedListSum = (lst) => {\n    let result = [];\n    for (let s of lst) {\n        if (s.length % 2 === 0) {\n            result.push(s);\n        }\n    }\n    result.sort((a, b) => {\n        if (a.length === b.length) {\n            return a.localeCompare(b);\n        }\n        return a.length - b.length;\n    });\n    return result;\n}\n",
            "/**\n * @param {number} n\n * @param {number} x\n * @param {number} y\n * @returns {number}\n */\nexport const xOrY = (n, x, y) => {\n    if (n < 2) {\n        return y;\n    }\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            return y;\n        }\n    }\n    return x;\n}\n",
            "/**\n * @param {Array<number>} lst\n * @returns {number}\n */\nexport const doubleTheDifference = (lst) => {\n    let sum = 0;\n    for (let n of lst) {\n        if (n >= 0 && Math.floor(n) === n && n % 2 !== 0) {\n            sum += n * n;\n        }\n    }\n    return sum;\n}\n",
            "/**\n * @param {Array<number>} game\n * @param {Array<number>} guess\n * @returns {Array<number>}\n */\nexport const compare = (game, guess) => {\n    const result = game.map((value, index) => Math.abs(value - guess[index]));\n    return result;\n}\n",
            "/**\n * @param {string} className\n * @param {Array<string>} extensions\n * @returns {string}\n */\nexport const strongestExtension = (className, extensions) => {\n    let maxS = -1000;\n    let maxExt = \"\";\n    for (const ext of extensions) {\n        let upper = 0;\n        let lower = 0;\n        for (const c of ext) {\n            if (c >= 'A' && c <= 'Z') {\n                upper++;\n            } else if (c >= 'a' && c <= 'z') {\n                lower++;\n            }\n        }\n        const s = upper - lower;\n        if (s > maxS) {\n            maxS = s;\n            maxExt = ext;\n        }\n    }\n    return className + \".\" + maxExt;\n}\n",
            "/**\n * @param {string} a\n * @param {string} b\n * @returns {boolean}\n */\nexport const cycpatternCheck = (a, b) => {\n    if (a.length < b.length) {\n        return false;\n    }\n    for (let i = 0; i < b.length; i++) {\n        const rotated = b.slice(i) + b.slice(0, i);\n        if (a.includes(rotated)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param {number} num\n * @returns {Array<number>}\n */\nexport const evenOddCount = (num) => {\n    const ds = Math.abs(num).toString();\n    let even = 0;\n    for (let i = 0; i < ds.length; i++) {\n        if ((parseInt(ds[i]) - '0') % 2 === 0) {\n            even++;\n        }\n    }\n    return [even, ds.length - even];\n}\n",
            "/**\n * @param {number} num\n * @returns {string}\n */\nexport const intToMiniRoman = (num) => {\n    const values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    const numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    let res = [];\n    for (let i = 0; i < values.length; i++) {\n        while (num >= values[i]) {\n            res.push(numerals[i]);\n            num -= values[i];\n        }\n    }\n    return res.join(\"\");\n}\n",
            "export const rightAngleTriangle = (a, b, c) => {\n    const s = [a, b, c];\n    s.sort((x, y) => x - y);\n    return s[0] * s[0] + s[1] * s[1] === s[2] * s[2];\n}\n",
            "/**\n * @param {Array<string>} words\n * @returns {string}\n */\nexport const findMax = (words) => {\n    let maxCnt = 0;\n    let maxW = \"\";\n    \n    for (const w of words) {\n        const cnt = uniqueChars(w).size;\n        if (cnt > maxCnt) {\n            maxCnt = cnt;\n            maxW = w;\n        } else if (cnt === maxCnt && w < maxW) {\n            maxW = w;\n        }\n    }\n    \n    return maxW;\n};\n\nconst uniqueChars = (s) => {\n    const charSet = new Set();\n    for (const c of s) {\n        charSet.add(c);\n    }\n    return charSet;\n}\n",
            "/**\n * @param {number} num\n * @param {number} need\n * @param {number} remaining\n * @returns {Array<number>}\n */\nexport const eat = (num, need, remaining) => {\n    if (need <= remaining) {\n        return [num + need, remaining - need];\n    } else {\n        return [num + remaining, 0];\n    }\n}\n",
            "export const doAlgebra = (operators, operands) => {\n    let ops = [...operators];\n    let nums = [...operands];\n    let i = ops.length - 1;\n    while (i >= 0) {\n        if (ops[i] === \"**\") {\n            nums[i] = Math.pow(nums[i], nums[i + 1]);\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n        }\n        i--;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] === \"*\") {\n            nums[i] *= nums[i + 1];\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i--;\n        } else if (ops[i] === \"//\") {\n            nums[i] = Math.floor(nums[i] / nums[i + 1]);\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i--;\n        }\n        i++;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] === \"+\") {\n            nums[i] += nums[i + 1];\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i--;\n        } else if (ops[i] === \"-\") {\n            nums[i] -= nums[i + 1];\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i--;\n        }\n        i++;\n    }\n    return nums[0];\n}\n",
            "/**\n * @param {string} s\n * @returns {string}\n */\nexport const solve = (s) => {\n    if (!hasAlpha(s)) {\n        return reverseString(s);\n    }\n    let result = '';\n    for (let ch of s) {\n        if (!/[a-zA-Z]/.test(ch)) {\n            result += ch;\n        } else if (ch === ch.toUpperCase()) {\n            result += ch.toLowerCase();\n        } else {\n            result += ch.toUpperCase();\n        }\n    }\n    return result;\n}\n\nconst hasAlpha = (s) => {\n    for (let ch of s) {\n        if (/^[a-zA-Z]$/.test(ch)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconst reverseString = (s) => {\n    return s.split('').reverse().join('');\n}\n",
            "/**\n * @param {string} txt\n * @returns {?string}\n */\nexport const stringToMd5 = (txt) => {\n    if (txt === \"\") {\n        return null;\n    }\n    const crypto = require('crypto');\n    const md5Hash = crypto.createHash('md5');\n    md5Hash.update(txt);\n    const md5Encoded = md5Hash.digest('hex');\n    return md5Encoded;\n}\n",
            "/**\n * @param {number} a\n * @param {number} b\n * @returns {Array<number>}\n */\nexport const generateIntegers = (a, b) => {\n    const lower = Math.max(2, Math.min(a, b));\n    const upper = Math.min(8, Math.max(a, b));\n    const result = [];\n    for (let i = lower; i <= upper; i++) {\n        if (i % 2 === 0) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n"
        ],
        "cpp": [
            "bool hasCloseElements(const vector<double>& numbers, double threshold) {\n    for (size_t i = 0; i < numbers.size(); i++) {\n        for (size_t j = i + 1; j < numbers.size(); j++) {\n            if (abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "#include <string>\n#include <vector>\n\nusing namespace std;\n\nvector<string> separateParenGroups(const string& paren_string) {\n    vector<string> groups;\n    vector<char> stk;\n    string currentGroup;\n    \n    for (char ch : paren_string) {\n        if (ch == '(') {\n            stk.push_back(ch);\n            currentGroup += ch;\n        } else if (ch == ')') {\n            stk.pop_back();\n            currentGroup += ch;\n            if (stk.empty()) {\n                groups.push_back(currentGroup);\n                currentGroup = \"\";\n            }\n        }\n    }\n    return groups;\n}\n",
            "double truncateNumber(double num) {\n    return num - std::floor(num);\n}\n",
            "bool belowZero(const vector<int>& operations) {\n    int balance = 0;\n    for (int op : operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "double meanAbsoluteDeviation(const vector<double>& numbers) {\n    double mean = 0.0;\n    for (double number : numbers) {\n        mean += number;\n    }\n    mean /= numbers.size();\n\n    double deviation = 0.0;\n    for (double number : numbers) {\n        deviation += abs(number - mean);\n    }\n    return deviation / numbers.size();\n}\n",
            "vector<int> intersperse(const vector<int>& numbers, int delimiter) {\n    vector<int> result;\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        if (i != 0) {\n            result.push_back(delimiter);\n        }\n        result.push_back(numbers[i]);\n    }\n    return result;\n}\n",
            "vector<int> parseNestedParens(const string& paren_string) {\n    vector<int> result;\n    stringstream ss(paren_string);\n    string group;\n    while (ss >> group) {\n        int maxDepth = 0;\n        int depth = 0;\n        for (char ch : group) {\n            if (ch == '(') {\n                depth++;\n                if (depth > maxDepth) {\n                    maxDepth = depth;\n                }\n            } else if (ch == ')') {\n                depth--;\n            }\n        }\n        result.push_back(maxDepth);\n    }\n    return result;\n}\n",
            "vector<string> filterBySubstring(const vector<string>& strs, const string& substring) {\n    vector<string> result;\n    for (const auto& s : strs) {\n        if (s.find(substring) != string::npos) {\n            result.push_back(s);\n        }\n    }\n    return result;\n}\n",
            "vector<int> sumProduct(const vector<int>& numbers) {\n    int n_sum = 0;\n    for (int num : numbers) {\n        n_sum += num;\n    }\n    \n    int n_product = 1;\n    for (int num : numbers) {\n        n_product *= num;\n    }\n    \n    return {n_sum, n_product};\n}\n",
            "vector<int> rollingMax(const vector<int>& numbers) {\n    int maxSoFar = INT_MIN;\n    vector<int> result(numbers.size());\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        if (numbers[i] > maxSoFar) {\n            maxSoFar = numbers[i];\n        }\n        result[i] = maxSoFar;\n    }\n    return result;\n}\n",
            "bool is_palindrome(const string& s) {\n    for (size_t i = 0; i < s.length() / 2; ++i) {\n        if (s[i] != s[s.length() - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nstring makePalindrome(const string& s) {\n    if (is_palindrome(s)) {\n        return s;\n    }\n    for (size_t i = 0; i < s.length(); ++i) {\n        if (is_palindrome(s.substr(i))) {\n            string suffix = s.substr(0, i);\n            string reversed_suffix = \"\";\n            for (int j = suffix.length() - 1; j >= 0; --j) {\n                reversed_suffix += suffix[j];\n            }\n            return s + reversed_suffix;\n        }\n    }\n    return \"\";\n}\n",
            "string stringXor(const string& a, const string& b) {\n    string result;\n    for (size_t i = 0; i < a.length(); ++i) {\n        if (a[i] == b[i]) {\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    return result;\n}\n",
            "optional<string> longest(const vector<string>& strs) {\n    if (strs.empty()) {\n        return nullopt;\n    }\n    string longestS = strs[0];\n    for (const auto& s : strs) {\n        if (s.length() > longestS.length()) {\n            longestS = s;\n        }\n    }\n    return longestS;\n}\n",
            "int greatestCommonDivisor(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return greatestCommonDivisor(b, a % b);\n    }\n}\n",
            "vector<string> allPrefixes(const string& s) {\n    vector<string> prefixes(s.length());\n    for (size_t i = 0; i < s.length(); ++i) {\n        prefixes[i] = s.substr(0, i + 1);\n    }\n    return prefixes;\n}\n",
            "#include <iostream>\n#include <sstream>\n#include <vector>\n\nstd::string stringSequence(int n) {\n    std::ostringstream result;\n    for (int i = 0; i <= n; i++) {\n        result << i;\n        if (i < n) {\n            result << \" \";\n        }\n    }\n    return result.str();\n}\n",
            "int countDistinctCharacters(const string& s) {\n    unordered_set<char> charSet;\n    for (char c : s) {\n        charSet.insert(tolower(c));\n    }\n    return charSet.size();\n}\n",
            "#include <string>\n#include <vector>\n#include <map>\n\nusing namespace std;\n\nvector<int> parseMusic(const string& music_string) {\n    map<string, int> durations = {{\"o\", 4}, {\"o|\", 2}, {\".|\", 1}};\n    vector<string> notes;\n    size_t start = 0, end = 0;\n    while ((end = music_string.find(' ', start)) != string::npos) {\n        notes.push_back(music_string.substr(start, end - start));\n        start = end + 1;\n    }\n    notes.push_back(music_string.substr(start));\n    vector<int> result;\n    for (const auto& note : notes) {\n        if (durations.find(note) != durations.end()) {\n            result.push_back(durations[note]);\n        }\n    }\n    return result;\n}\n",
            "int howManyTimes(const string& s, const string& substring) {\n    int times = 0;\n    for (size_t i = 0; i <= s.length() - substring.length(); ++i) {\n        if (s.substr(i, substring.length()) == substring) {\n            times++;\n        }\n    }\n    return times;\n}\n",
            "string sortNumbers(const string& numbers) {\n    map<string, int> numDict = {\n        {\"zero\", 0},\n        {\"one\", 1},\n        {\"two\", 2},\n        {\"three\", 3},\n        {\"four\", 4},\n        {\"five\", 5},\n        {\"six\", 6},\n        {\"seven\", 7},\n        {\"eight\", 8},\n        {\"nine\", 9}\n    };\n    vector<string> numSlice;\n    stringstream ss(numbers);\n    string temp;\n    while (ss >> temp) {\n        numSlice.push_back(temp);\n    }\n    sort(numSlice.begin(), numSlice.end(), [&](const string& a, const string& b) {\n        return numDict[a] < numDict[b];\n    });\n    string result;\n    for (size_t i = 0; i < numSlice.size(); ++i) {\n        if (i > 0) result += \" \";\n        result += numSlice[i];\n    }\n    return result;\n}\n",
            "vector<double> findClosestElements(const vector<double>& numbers) {\n    vector<double> sortedNumbers(numbers.begin(), numbers.end());\n    sort(sortedNumbers.begin(), sortedNumbers.end());\n\n    double minDiff = numeric_limits<double>::max();\n    vector<double> closestPair;\n\n    for (size_t i = 1; i < sortedNumbers.size(); ++i) {\n        double diff = sortedNumbers[i] - sortedNumbers[i-1];\n        if (diff < minDiff) {\n            minDiff = diff;\n            closestPair = {sortedNumbers[i-1], sortedNumbers[i]};\n        }\n    }\n\n    return closestPair;\n}\n",
            "vector<double> rescaleToUnit(const vector<double>& numbers) {\n    double minNum = numbers[0];\n    double maxNum = numbers[0];\n    for (double num : numbers) {\n        if (num < minNum) {\n            minNum = num;\n        }\n        if (num > maxNum) {\n            maxNum = num;\n        }\n    }\n    if (minNum == maxNum) {\n        vector<double> result(numbers.size(), 0.0);\n        return result;\n    } else {\n        vector<double> result(numbers.size());\n        for (size_t i = 0; i < numbers.size(); ++i) {\n            result[i] = (numbers[i] - minNum) / (maxNum - minNum);\n        }\n        return result;\n    }\n}\n",
            "vector<int> filterIntegers(const vector<variant>& values) {\n    vector<int> result;\n    for (const auto& value : values) {\n        if (value.index() == 0 && std::holds_alternative<int>(value)) {\n            result.push_back(std::get<int>(value));\n        }\n    }\n    return result;\n}\n",
            "int strLength(const string& s) {\n    return s.length();\n}\n",
            "int largestDivisor(int n) {\n    for (int i = 2; i < n; i++) {\n        if (n % i == 0) {\n            return n / i;\n        }\n    }\n    return 1;\n}\n",
            "vector<int> factorize(int n) {\n    vector<int> factors;\n    int divisor = 2;\n    while (divisor <= n) {\n        if (n % divisor == 0) {\n            factors.push_back(divisor);\n            n /= divisor;\n        } else {\n            divisor++;\n        }\n    }\n    return factors;\n}\n",
            "vector<int> removeDuplicates(const vector<int>& numbers) {\n    unordered_map<int, int> counts;\n    for (int num : numbers) {\n        counts[num]++;\n    }\n    vector<int> res;\n    for (int num : numbers) {\n        if (counts[num] == 1) {\n            res.push_back(num);\n        }\n    }\n    return res;\n}\n",
            "string flipCase(const string& s) {\n    string flipped;\n    for (char ch : s) {\n        if (!isalpha(ch)) {\n            flipped += ch;\n        } else if (islower(ch)) {\n            flipped += toupper(ch);\n        } else if (isupper(ch)) {\n            flipped += tolower(ch);\n        }\n    }\n    return flipped;\n}\n",
            "#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring concatenate(const vector<string>& strs) {\n    string result;\n    for (const auto& str : strs) {\n        result += str;\n    }\n    return result;\n}\n",
            "#include <vector>\n#include <string>\n\nvector<string> filterByPrefix(const vector<string>& strs, const string& prefix_str) {\n    vector<string> result;\n    for (const auto& s : strs) {\n        if (s.substr(0, prefix_str.size()) == prefix_str) {\n            result.push_back(s);\n        }\n    }\n    return result;\n}\n",
            "vector<int> getPositive(const vector<int>& l) {\n    vector<int> result;\n    for (int num : l) {\n        if (num > 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= static_cast<int>(std::sqrt(n)); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "double poly(const vector<int>& xs, double x) {\n    double res = 0.0;\n    for (int i = 0; i < xs.size(); i++) {\n        res += double(xs[i]) * pow(x, i);\n    }\n    return res;\n}\n\ndouble findZero(const vector<int>& xs) {\n    double x1 = 1.0, x2 = -1.0;\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2;\n        x2 *= 2;\n    }\n    while (fabs(x1 - x2) > 1e-10) {\n        double mid = (x1 + x2) / 2;\n        if (poly(xs, mid) == 0) {\n            return mid;\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2;\n}\n",
            "vector<int> sortThird(const vector<int>& l) {\n    vector<int> sorted_third;\n    for (size_t i = 0; i < l.size(); i += 3) {\n        sorted_third.push_back(l[i]);\n    }\n    sort(sorted_third.begin(), sorted_third.end());\n    \n    vector<int> result;\n    for (size_t i = 0; i < l.size(); ++i) {\n        if (i % 3 == 0) {\n            result.push_back(sorted_third[i / 3]);\n        } else {\n            result.push_back(l[i]);\n        }\n    }\n    return result;\n}\n",
            "vector<int> listUnique(const vector<int>& l) {\n    unordered_map<int, bool> uniqueMap;\n    vector<int> result;\n    for (int value : l) {\n        if (uniqueMap.find(value) == uniqueMap.end()) {\n            uniqueMap[value] = true;\n            result.push_back(value);\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}\n",
            "int maxElement(const vector<int>& l) {\n    if (l.empty()) {\n        return 0;\n    }\n    int max = l[0];\n    for (int v : l) {\n        if (v > max) {\n            max = v;\n        }\n    }\n    return max;\n}\n",
            "int countSevens(int num) {\n    int cnt = 0;\n    while (num > 0) {\n        if (num % 10 == 7) {\n            cnt++;\n        }\n        num /= 10;\n    }\n    return cnt;\n}\n\nint fizzBuzz(int n) {\n    int cnt = 0;\n    for (int i = 0; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            cnt += countSevens(i);\n        }\n    }\n    return cnt;\n}\n",
            "#include <algorithm>\n#include <vector>\n\nstd::vector<int> sortEven(const std::vector<int>& l) {\n    std::vector<int> evenIndices;\n    for (size_t i = 0; i < l.size(); ++i) {\n        if (i % 2 == 0) {\n            evenIndices.push_back(l[i]);\n        }\n    }\n    std::sort(evenIndices.begin(), evenIndices.end());\n\n    std::vector<int> sortedList(l.size());\n    size_t evenIndex = 0;\n    for (size_t i = 0; i < l.size(); ++i) {\n        if (i % 2 == 0) {\n            sortedList[i] = evenIndices[evenIndex];\n            ++evenIndex;\n        } else {\n            sortedList[i] = l[i];\n        }\n    }\n    return sortedList;\n}\n",
            "#include <string>\nusing namespace std;\n\nstring encodeCyclic(const string& s) {\n    string result;\n    for (size_t i = 0; i < s.length(); i += 3) {\n        if (i + 3 > s.length()) {\n            result.append(s.substr(i));\n        } else {\n            result.append(s.substr(i + 1, 2));\n            result.push_back(s[i]);\n        }\n    }\n    return result;\n}\n\nstring decodeCyclic(const string& s) {\n    return encodeCyclic(encodeCyclic(s));\n}\n",
            "bool is_prime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i <= sqrt(n); ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nint primeFib(int n) {\n    int f[] = {0, 1};\n    int cnt = 0;\n    while (cnt < n) {\n        f[0] = f[1];\n        f[1] += f[0];\n        if (is_prime(f[1])) ++cnt;\n    }\n    return f[1];\n}\n",
            "bool triplesSumToZero(const vector<int>& l) {\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = i + 1; j < l.size(); j++) {\n            for (int k = j + 1; k < l.size(); k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "int carRaceCollision(int n) {\n    return n * n;\n}\n",
            "vector<int> incrList(const vector<int>& l) {\n    vector<int> result(l.size());\n    for (size_t i = 0; i < l.size(); ++i) {\n        result[i] = l[i] + 1;\n    }\n    return result;\n}\n",
            "bool pairsSumToZero(const vector<int>& l) {\n    unordered_set<int> seen;\n    for (int num : l) {\n        if (seen.find(-num) != seen.end()) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    return false;\n}\n",
            "string changeBase(int x, int bas) {\n    if (x == 0) {\n        return \"0\";\n    }\n    vector<string> digits;\n    while (x > 0) {\n        digits.push_back(to_string(x % bas));\n        x /= bas;\n    }\n    std::reverse(digits.begin(), digits.end());\n    string result;\n    for (const auto& digit : digits) {\n        result += digit;\n    }\n    return result;\n}\n",
            "double triangleArea(int a, int h) {\n    return static_cast<double>(a * h) / 2.0;\n}\n",
            "int fib4(int n) {\n    int fib[4] = {0, 0, 2, 0};\n    for (int i = 4; i <= n; i++) {\n        int sum = 0;\n        for (int value : fib) {\n            sum += value;\n        }\n        fib[i % 4] = sum;\n    }\n    return fib[n % 4];\n}\n",
            "double median(const vector<double>& l) {\n    vector<double> sl = l;\n    sort(sl.begin(), sl.end());\n    if (sl.size() % 2 != 0) {\n        return sl[sl.size() / 2];\n    } else {\n        return (sl[sl.size() / 2] + sl[sl.size() / 2 - 1]) / 2.0;\n    }\n}\n",
            "bool isPalindrome(const string& txt) {\n    int n = txt.length();\n    for (int i = 0; i < n/2; i++) {\n        if (txt[i] != txt[n-1-i]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "int modp(int n, int p) {\n    int ret = 1;\n    for (int i = 0; i < n; i++) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}\n",
            "string encodeShift(const string& s) {\n    string result;\n    for (char ch : s) {\n        char shiftedCh = ((ch - 97 + 5) % 26) + 97;\n        result += shiftedCh;\n    }\n    return result;\n}\n\nstring decodeShift(const string& s) {\n    string result;\n    for (char ch : s) {\n        char shiftedCh = ((ch - 97 + 21) % 26) + 97;\n        result += shiftedCh;\n    }\n    return result;\n}\n",
            "string removeVowels(const string& txt) {\n    string vowels = \"aeiouAEIOU\";\n    string result;\n    for (char ch : txt) {\n        if (vowels.find(ch) == string::npos) {\n            result += ch;\n        }\n    }\n    return result;\n}\n",
            "bool belowThreshold(const vector<int>& l, int t) {\n    for (int x : l) {\n        if (x >= t) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "int add(int x, int y) {\n    return x + y;\n}\n",
            "#include <unordered_set>\n\nbool sameChars(const std::string& s0, const std::string& s1) {\n    return setEqual(stringToSet(s0), stringToSet(s1));\n}\n\nstd::unordered_set<char> stringToSet(const std::string& s) {\n    std::unordered_set<char> m;\n    for (char c : s) {\n        m.insert(c);\n    }\n    return m;\n}\n\nbool setEqual(const std::unordered_set<char>& set1, const std::unordered_set<char>& set2) {\n    if (set1.size() != set2.size()) {\n        return false;\n    }\n    for (char key : set1) {\n        if (set2.find(key) == set2.end()) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "int fib(int n) {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n",
            "bool correctBracketing(const string& brackets) {\n    int depth = 0;\n    for (char b : brackets) {\n        if (b == '<') {\n            depth += 1;\n        } else if (b == '>') {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "#include <vector>\n\nbool monotonic(const std::vector<int>& l) {\n    if (l.size() <= 1) {\n        return true;\n    }\n\n    bool increasing = true;\n    bool decreasing = true;\n\n    for (size_t i = 1; i < l.size(); ++i) {\n        if (l[i] > l[i - 1]) {\n            decreasing = false;\n        }\n        if (l[i] < l[i - 1]) {\n            increasing = false;\n        }\n    }\n\n    return increasing || decreasing;\n}\n",
            "#include <vector>\n#include <unordered_set>\n#include <algorithm>\n\nvector<int> common(const vector<int>& l1, const vector<int>& l2) {\n    unordered_set<int> set1;\n    for (int v : l1) {\n        set1.insert(v);\n    }\n\n    unordered_set<int> set2;\n    for (int v : l2) {\n        set2.insert(v);\n    }\n\n    vector<int> result;\n    for (int k : set1) {\n        if (set2.find(k) != set2.end()) {\n            result.push_back(k);\n        }\n    }\n\n    sort(result.begin(), result.end());\n    return result;\n}\n",
            "int largestPrimeFactor(int n) {\n    int i = 2;\n    while (i * i <= n) {\n        if (n % i != 0) {\n            i++;\n        } else {\n            n /= i;\n        }\n    }\n    return n;\n}\n",
            "int sumToN(int n) {\n    int sum = 0;\n    for (int i = 0; i <= n; ++i) {\n        sum += i;\n    }\n    return sum;\n}\n",
            "bool correctBracketing(const string& brackets) {\n    int depth = 0;\n    for (char b : brackets) {\n        if (b == '(') {\n            depth++;\n        } else if (b == ')') {\n            depth--;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "vector<int> derivative(const vector<int>& xs) {\n    vector<int> result(xs.size() - 1);\n    for (int i = 1; i < xs.size(); ++i) {\n        result[i - 1] = xs[i] * i;\n    }\n    return result;\n}\n",
            "int fibfib(int n) {\n    if (n <= 1) {\n        return 0;\n    }\n    int a = 0, b = 0, c = 1;\n    while (n > 2) {\n        a = b;\n        b = c;\n        c = a + b + c;\n        n -= 1;\n    }\n    return c;\n}\n",
            "int vowelsCount(const string& s) {\n    string vowels = \"aeiou\";\n    int cnt = 0;\n    for (size_t i = 0; i < s.length(); ++i) {\n        char ch = tolower(s[i]);\n        if (vowels.find(ch) != string::npos || (i == s.length() - 1 && ch == 'y')) {\n            ++cnt;\n        }\n    }\n    return cnt;\n}\n",
            "string reverseString(const string& s) {\n    string reversed = s;\n    std::reverse(reversed.begin(), reversed.end());\n    return reversed;\n}\n\nstring circularShift(int x, int shift) {\n    string xStr = to_string(x);\n    if (shift > xStr.length()) {\n        return reverseString(xStr);\n    } else {\n        return xStr.substr(xStr.length() - shift) + xStr.substr(0, xStr.length() - shift);\n    }\n}\n",
            "int digitSum(const string& s) {\n    int sum = 0;\n    for (char c : s) {\n        if (c >= 'A' && c <= 'Z') {\n            sum += static_cast<int>(c);\n        }\n    }\n    return sum;\n}\n",
            "int fruitDistribution(const string& s, int n) {\n    stringstream ss(s);\n    string word;\n    vector<string> words;\n    while (ss >> word) {\n        words.push_back(word);\n    }\n    int apples = stoi(words[words.size() - 2]);\n    int oranges = stoi(words[words.size() - 4]);\n    return n - apples - oranges;\n}\n",
            "vector<int> pluck(const vector<int>& arr) {\n    vector<int> evens;\n    for (int n : arr) {\n        if (n % 2 == 0) {\n            evens.push_back(n);\n        }\n    }\n    if (evens.empty()) {\n        return {};\n    }\n    int min_even = evens[0];\n    for (int n : evens) {\n        if (n < min_even) {\n            min_even = n;\n        }\n    }\n    int index = -1;\n    for (size_t i = 0; i < arr.size(); ++i) {\n        if (arr[i] == min_even) {\n            index = static_cast<int>(i);\n            break;\n        }\n    }\n    return {min_even, index};\n}\n",
            "#include <vector>\n#include <unordered_map>\nusing namespace std;\n\nint search(const vector<int>& lst) {\n    unordered_map<int, int> freqs;\n    for (int n : lst) {\n        if (freqs.find(n) != freqs.end()) {\n            freqs[n]++;\n        } else {\n            freqs[n] = 1;\n        }\n    }\n    vector<int> goodVals;\n    for (const auto& p : freqs) {\n        if (p.second >= p.first) {\n            goodVals.push_back(p.first);\n        }\n    }\n    if (goodVals.empty()) {\n        return -1;\n    }\n    int maxVal = goodVals[0];\n    for (int val : goodVals) {\n        if (val > maxVal) {\n            maxVal = val;\n        }\n    }\n    return maxVal;\n}\n",
            "vector<int> strangeSortList(const vector<int>& lst) {\n    vector<int> sl = lst;\n    sort(sl.begin(), sl.end());\n    vector<int> result;\n    int left = 0, right = sl.size() - 1;\n    while (left <= right) {\n        result.push_back(sl[left]);\n        left++;\n        if (left <= right) {\n            result.push_back(sl[right]);\n            right--;\n        }\n    }\n    return result;\n}\n",
            "double triangleArea(int a, int b, int c) {\n    if (a + b > c && a + c > b && b + c > a) {\n        double s = (a + b + c) / 2.0;\n        return sqrt(s * (s - a) * (s - b) * (s - c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "bool willItFly(const vector<int>& q, int w) {\n    if (q.empty()) {\n        return false;\n    }\n    bool is_palin = true;\n    for (size_t i = 0; i < q.size(); ++i) {\n        if (q[i] != q[q.size() - i - 1]) {\n            is_palin = false;\n            break;\n        }\n    }\n    int total = 0;\n    for (int v : q) {\n        total += v;\n    }\n    return is_palin && total <= w;\n}\n",
            "int smallestChange(const vector<int>& arr) {\n    int ans = 0;\n    for (int i = 0; i < arr.size() / 2; ++i) {\n        if (arr[i] != arr[arr.size() - i - 1]) {\n            ++ans;\n        }\n    }\n    return ans;\n}\n",
            "vector<string> totalMatch(const vector<string>& lst1, const vector<string>& lst2) {\n    int cnt1 = 0;\n    for (const string& s : lst1) {\n        cnt1 += s.length();\n    }\n    int cnt2 = 0;\n    for (const string& s : lst2) {\n        cnt2 += s.length();\n    }\n    if (cnt1 <= cnt2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n",
            "bool isMultiplyPrime(int a) {\n    int cnt = 0;\n    for (int i = 2; i <= a; i++) {\n        while (a % i == 0 && IsPrime(i)) {\n            cnt++;\n            a /= i;\n        }\n    }\n    return cnt == 3;\n}\n\nbool IsPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "bool isSimplePower(int x, int n) {\n    if (n < 2) {\n        return x == n;\n    }\n    int tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp == x;\n}\n",
            "bool isCube(int a) {\n    a = abs(a);\n    int root = round(pow(a, 1.0 / 3.0));\n    return root * root * root == a;\n}\n",
            "int hexKey(const string& num) {\n    int count = 0;\n    for (char x : num) {\n        if (x == '2' || x == '3' || x == '5' || x == '7' || x == 'B' || x == 'D') {\n            count++;\n        }\n    }\n    return count;\n}\n",
            "#include <string>\n#include <bitset>\n\nstd::string decimalToBinary(int dec) {\n    return \"db\" + std::bitset<32>(dec).to_string() + \"db\";\n}\n",
            "bool isHappy(const string& s) {\n    if (s.length() < 3) {\n        return false;\n    }\n    for (size_t i = 0; i < s.length() - 2; ++i) {\n        if (s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "#include <vector>\n#include <string>\n\nusing namespace std;\n\nvector<string> numericalLetterGrade(const vector<double>& grades) {\n    vector<string> result;\n    for (double g : grades) {\n        if (g == 4.0) {\n            result.push_back(\"A+\");\n        } else if (g > 3.7) {\n            result.push_back(\"A\");\n        } else if (g > 3.3) {\n            result.push_back(\"A-\");\n        } else if (g > 3.0) {\n            result.push_back(\"B+\");\n        } else if (g > 2.7) {\n            result.push_back(\"B\");\n        } else if (g > 2.3) {\n            result.push_back(\"B-\");\n        } else if (g > 2.0) {\n            result.push_back(\"C+\");\n        } else if (g > 1.7) {\n            result.push_back(\"C\");\n        } else if (g > 1.3) {\n            result.push_back(\"C-\");\n        } else if (g > 1.0) {\n            result.push_back(\"D+\");\n        } else if (g > 0.7) {\n            result.push_back(\"D\");\n        } else if (g > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\n",
            "bool primeLength(const std::string& s) {\n    int length = s.length();\n    if (length < 2) {\n        return false;\n    }\n    for (int i = 2; i <= static_cast<int>(std::sqrt(length)); ++i) {\n        if (length % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "#include <cmath>\n\nint startsOneEnds(int n) {\n    if (n == 1) {\n        return 1;\n    }\n    return 2 * 9 * static_cast<int>(pow(10, n - 2));\n}\n",
            "string solve(int n) {\n    int digitsSum = 0;\n    while (n > 0) {\n        int digit = n % 10;\n        digitsSum += digit;\n        n /= 10;\n    }\n    return bitset<32>(digitsSum).to_string();\n}\n",
            "int add(const vector<int>& lst) {\n    int sum = 0;\n    for (size_t i = 0; i < lst.size(); ++i) {\n        if (i % 2 == 1 && lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n",
            "string antiShuffle(const string& s) {\n    vector<string> words;\n    stringstream ss(s);\n    string word;\n    while (ss >> word) {\n        sort(word.begin(), word.end());\n        words.push_back(word);\n    }\n    return accumulate(words.begin(), words.end(), string(\"\"), [](const string& a, const string& b) { \n        return a + (a.empty() ? \"\" : \" \") + b; \n    });\n}\n",
            "vector<vector<int>> getRow(const vector<vector<int>>& lst, int x) {\n    vector<vector<int>> coords;\n    for (int i = 0; i < lst.size(); ++i) {\n        for (int j = 0; j < lst[i].size(); ++j) {\n            if (lst[i][j] == x) {\n                coords.push_back({i, j});\n            }\n        }\n    }\n    sort(coords.begin(), coords.end(), [](const vector<int>& a, const vector<int>& b) {\n        if (a[0] == b[0]) {\n            return a[1] > b[1];\n        }\n        return a[0] < b[0];\n    });\n    return coords;\n}\n",
            "#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<int> sortArray(const vector<int>& arr) {\n    if (arr.size() == 0) {\n        return {};\n    }\n    if ((arr[0] + arr.back()) % 2 == 0) {\n        vector<int> sortedArr = arr;\n        sort(sortedArr.begin(), sortedArr.end(), greater<int>());\n        return sortedArr;\n    } else {\n        vector<int> sortedArr = arr;\n        sort(sortedArr.begin(), sortedArr.end());\n        return sortedArr;\n    }\n}\n",
            "string encrypt(const string& s) {\n    string result = \"\";\n    for (char ch : s) {\n        char shifted = ch + 4;\n        if (shifted > 'z') {\n            shifted -= 26;\n        }\n        result += shifted;\n    }\n    return result;\n}\n",
            "optional<int> nextSmallest(const vector<int>& lst) {\n    set<int> s(lst.begin(), lst.end());\n    if (s.size() < 2) {\n        return nullopt;\n    }\n    auto it = s.begin();\n    ++it;\n    return *it;\n}\n",
            "#include <string>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint isBored(const string& s) {\n    vector<string> sentences;\n    size_t start = 0, end;\n    while ((end = s.find_first_of(\".!?\", start)) != string::npos) {\n        if (end > start) {\n            sentences.emplace_back(s.substr(start, end - start));\n        }\n        start = end + 1;\n    }\n    if (start < s.size()) {\n        sentences.emplace_back(s.substr(start));\n    }\n    return count_if(sentences.begin(), sentences.end(), [](const string& sentence) {\n        return sentence.length() >= 2 && sentence.substr(0, 2) == \"I \";\n    });\n}\n",
            "bool anyInt(const std::any& x, const std::any& y, const std::any& z) {\n    if (x.type() == typeid(int) && y.type() == typeid(int) && z.type() == typeid(int)) {\n        int xInt = std::any_cast<int>(x);\n        int yInt = std::any_cast<int>(y);\n        int zInt = std::any_cast<int>(z);\n        return (xInt + yInt == zInt) || (xInt + zInt == yInt) || (yInt + zInt == xInt);\n    }\n    return false;\n}\n",
            "#include <string>\nusing namespace std;\n\nstring encode(const string& message) {\n    string vowels = \"aeiouAEIOU\";\n    string result;\n\n    for (char ch : message) {\n        if (isalpha(ch)) {\n            char ch1;\n            if (islower(ch)) {\n                ch1 = toupper(ch);\n            } else {\n                ch1 = tolower(ch);\n            }\n            if (vowels.find(ch1) != string::npos) {\n                ch1 += 2;\n            }\n            result += ch1;\n        } else {\n            result += ch;\n        }\n    }\n\n    return result;\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= std::sqrt(n); ++i) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint skjkasdkd(const vector<int>& lst) {\n    vector<int> primes;\n    for (int n : lst) {\n        if (isPrime(n)) {\n            primes.push_back(n);\n        }\n    }\n    if (primes.empty()) {\n        return 0;\n    }\n    int largest = *std::max_element(primes.begin(), primes.end());\n    string largestStr = to_string(largest);\n    int sum = 0;\n    for (char digit : largestStr) {\n        sum += digit - '0';\n    }\n    return sum;\n}\n",
            "bool checkDictCase(const unordered_map<string, string>& d) {\n    if (d.empty()) {\n        return false;\n    }\n    bool allLower = true;\n    bool allUpper = true;\n    for (const auto& pair : d) {\n        const string& key = pair.first;\n        if (!all_of(key.begin(), key.end(), ::islower)) {\n            allLower = false;\n        }\n        if (!all_of(key.begin(), key.end(), ::isupper)) {\n            allUpper = false;\n        }\n    }\n    return allLower || allUpper;\n}\n",
            "#include <vector>\n\nstd::vector<int> countUpTo(int n) {\n    std::vector<int> primes;\n    for (int num = 2; num < n; num++) {\n        bool isPrime = true;\n        for (int p : primes) {\n            if (num % p == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            primes.push_back(num);\n        }\n    }\n    return primes;\n}\n",
            "int multiply(int a, int b) {\n    return (abs(a) % 10) * (abs(b) % 10);\n}\n",
            "int countUpper(const string& s) {\n\tconst string vowels = \"AEIOU\";\n\tint count = 0;\n\tfor (size_t i = 0; i < s.length(); ++i) {\n\t\tif (i % 2 == 0 && vowels.find(s[i]) != string::npos) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n",
            "int closestInteger(const string& value) {\n    double num;\n    stringstream ss(value);\n    ss >> num;\n    if (num >= 0) {\n        return static_cast<int>(num + 0.5);\n    } else {\n        return static_cast<int>(num - 0.5);\n    }\n}\n",
            "vector<int> makeAPile(int n) {\n    vector<int> pile(n);\n    for (int i = 0; i < n; i++) {\n        pile[i] = n + 2 * i;\n    }\n    return pile;\n}\n",
            "#include <string>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<string> wordsString(const string& s) {\n    vector<string> words;\n    size_t start = 0, end;\n    while ((end = s.find_first_of(\", \", start)) != string::npos) {\n        if (end > start) {\n            words.push_back(s.substr(start, end - start));\n        }\n        start = end + 1;\n    }\n    if (start < s.size()) {\n        words.push_back(s.substr(start));\n    }\n    return words;\n}\n",
            "int chooseNum(int x, int y) {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 == 0) {\n        return y;\n    }\n    if (x != y) {\n        return y - 1;\n    }\n    return -1;\n}\n",
            "#include <string>\n#include <optional>\n\nstd::optional<std::string> roundedAvg(int n, int m) {\n    if (n > m) {\n        return std::nullopt;\n    }\n    int r_avg = static_cast<int>((m + n) / 2.0 + 0.5);\n    return \"0b\" + std::bitset<32>(r_avg).to_string().substr(32 - (1 + (r_avg != 0 ? floor(log2(r_avg)) : 0)));\n}\n",
            "bool allDigitsOdd(int num) {\n    while (num > 0) {\n        int digit = num % 10;\n        if (digit % 2 == 0) {\n            return false;\n        }\n        num /= 10;\n    }\n    return true;\n}\n\nvector<int> uniqueDigits(const vector<int>& x) {\n    vector<int> result;\n    for (int num : x) {\n        if (allDigitsOdd(num)) {\n            result.push_back(num);\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}\n",
            "vector<string> byLength(const vector<int>& arr) {\n    vector<string> digitNames = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    vector<int> sortedArr;\n    for (int x : arr) {\n        if (x >= 1 && x <= 9) {\n            sortedArr.push_back(x);\n        }\n    }\n    sort(sortedArr.begin(), sortedArr.end(), greater<int>());\n    vector<string> result(sortedArr.size());\n    for (size_t i = 0; i < sortedArr.size(); ++i) {\n        result[i] = digitNames[sortedArr[i] - 1];\n    }\n    return result;\n}\n",
            "vector<int> f(int n) {\n    vector<int> nums(n);\n    for (int i = 1; i <= n; ++i) {\n        nums[i - 1] = i;\n    }\n    \n    vector<int> result(n);\n    for (int i = 0; i < n; ++i) {\n        if ((i + 1) % 2 != 0) {\n            int sum = 0;\n            for (int j = 0; j <= i; ++j) {\n                sum += nums[j];\n            }\n            result[i] = sum;\n        } else {\n            int product = 1;\n            for (int j = 0; j <= i; ++j) {\n                product *= nums[j];\n            }\n            result[i] = product;\n        }\n    }\n    \n    return result;\n}\n",
            "#include <string>\n\nbool isPalindrome(const std::string& s) {\n    for (size_t i = 0; i < s.length() / 2; ++i) {\n        if (s[i] != s[s.length() - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nvector<int> evenOddPalindrome(int n) {\n    vector<int> cnt(2, 0);\n    for (int i = 1; i <= n; ++i) {\n        if (isPalindrome(std::to_string(i))) {\n            cnt[i % 2]++;\n        }\n    }\n    return cnt;\n}\n",
            "#include <vector>\n#include <string>\n#include <cmath>\n\nint digitsSum(int n) {\n    std::string n_str = std::to_string(n);\n    if (n >= 0) {\n        int sum = 0;\n        for (char d : n_str) {\n            sum += d - '0';\n        }\n        return sum;\n    } else {\n        return (10 * (n_str[0] - '0') + (n_str[1] - '0')) * 2 + digitsSum(std::abs(n));\n    }\n}\n\nint countNums(const std::vector<int>& arr) {\n    int count = 0;\n    for (int n : arr) {\n        if (digitsSum(n) > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n",
            "bool moveOneBall(const vector<int>& arr) {\n    if (arr.empty()) {\n        return true;\n    }\n    vector<int> sortedArr = arr;\n    sort(sortedArr.begin(), sortedArr.end());\n    for (size_t i = 0; i < arr.size(); ++i) {\n        if (equal(arr.begin() + i, arr.end(), sortedArr.begin()) && equal(arr.begin(), arr.begin() + i, sortedArr.begin() + arr.size() - i)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "string canExchange(const vector<int>& lst1, const vector<int>& lst2) {\n    int oddCnt = 0;\n    for (int num : lst1) {\n        if (num % 2 != 0) {\n            oddCnt++;\n        }\n    }\n    int evenCnt = 0;\n    for (int num : lst2) {\n        if (num % 2 == 0) {\n            evenCnt++;\n        }\n    }\n    if (evenCnt >= oddCnt) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n",
            "unordered_map<string, int> histogram(const string& test) {\n    unordered_map<string, int> freq;\n    istringstream iss(test);\n    string word;\n    while (iss >> word) {\n        freq[word]++;\n    }\n    \n    unordered_map<string, int> result;\n    if (!freq.empty()) {\n        int maxFreq = 0;\n        for (const auto& pair : freq) {\n            if (pair.second > maxFreq) {\n                maxFreq = pair.second;\n            }\n        }\n        for (const auto& pair : freq) {\n            if (pair.second == maxFreq) {\n                result[pair.first] = pair.second;\n            }\n        }\n    }\n    \n    return result;\n}\n",
            "vector<string> reverseDelete(const string& s, const string& c) {\n    string s1 = \"\";\n    for (char ch : s) {\n        if (c.find(ch) == string::npos) {\n            s1 += ch;\n        }\n    }\n    auto isPalindrome = [](const string& str) -> bool {\n        int n = str.length();\n        for (int i = 0; i < n / 2; ++i) {\n            if (str[i] != str[n - 1 - i]) {\n                return false;\n            }\n        }\n        return true;\n    };\n    vector<string> result;\n    result.push_back(s1);\n    if (isPalindrome(s1)) {\n        result.push_back(\"yes\");\n    } else {\n        result.push_back(\"no\");\n    }\n    return result;\n}\n",
            "vector<string> oddCount(const vector<string>& lst) {\n    vector<string> result;\n    for (const auto& num : lst) {\n        int n = 0;\n        for (char d : num) {\n            if ((d - '0') % 2 == 1) {\n                n++;\n            }\n        }\n        string rs = \"the number of odd elements in the string i of the input.\";\n        size_t pos = rs.find(\"i\");\n        if (pos != string::npos) {\n            rs.replace(pos, 1, to_string(n));\n        }\n        result.push_back(rs);\n    }\n    return result;\n}\n",
            "int minSubArraySum(const vector<int>& nums) {\n    int min_sum = 0;\n    int cur_sum = 0;\n    for (int n : nums) {\n        cur_sum = min(cur_sum + n, 0);\n        min_sum = min(cur_sum, min_sum);\n    }\n    if (min_sum == 0) {\n        min_sum = *min_element(nums.begin(), nums.end());\n    }\n    return min_sum;\n}\n",
            "int maxFill(const vector<vector<int>>& grid, int capacity) {\n    int sum = 0;\n    for (const auto& arr : grid) {\n        int rowSum = 0;\n        for (int num : arr) {\n            rowSum += num;\n        }\n        if (rowSum % capacity != 0) {\n            sum += rowSum / capacity + 1;\n        } else {\n            sum += rowSum / capacity;\n        }\n    }\n    return sum;\n}\n",
            "#include <vector>\n#include <algorithm>\n\nint countOnes(int num) {\n    return __builtin_popcount(num);\n}\n\nstd::vector<int> sortArray(const std::vector<int>& arr) {\n    std::vector<int> sortedArr = arr;\n    std::sort(sortedArr.begin(), sortedArr.end(), [](int a, int b) {\n        int countA = countOnes(a);\n        int countB = countOnes(b);\n        if (countA == countB) {\n            return a < b;\n        }\n        return countA < countB;\n    });\n    return sortedArr;\n}\n",
            "#include <string>\n#include <vector>\n#include <unicode/utypes.h>\n#include <unicode/unistr.h>\n\nusing namespace std;\n\nbool isConsonant(char c) {\n    string Consonants = \"bcdfghjklmnpqrstvwxyz\";\n    return Consonants.find(tolower(c)) != string::npos;\n}\n\nvector<string> selectWords(const string& s, int n) {\n    vector<string> result;\n    istringstream iss(s);\n    string w;\n    while (iss >> w) {\n        int count = 0;\n        for (char c : w) {\n            if (isConsonant(c)) {\n                count++;\n            }\n        }\n        if (count == n) {\n            result.push_back(w);\n        }\n    }\n    return result;\n}\n",
            "string getClosestVowel(const string& word) {\n    string vowels = \"aeiouAEIOU\";\n    for (int i = word.length() - 2; i > 0; i--) {\n        if (vowels.find(word[i]) != string::npos && vowels.find(word[i-1]) == string::npos && vowels.find(word[i+1]) == string::npos) {\n            return string(1, word[i]);\n        }\n    }\n    return \"\";\n}\n",
            "bool check(const string& s) {\n    int depth = 0;\n    for (char ch : s) {\n        if (ch == '(') {\n            depth++;\n        } else {\n            depth--;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n\nstring matchParens(const vector<string>& lst) {\n    string s1 = lst[0] + lst[1];\n    string s2 = lst[1] + lst[0];\n    if (check(s1) || check(s2)) {\n        return \"Yes\";\n    }\n    return \"No\";\n}\n",
            "vector<int> maximum(const vector<int>& arr, int k) {\n    if (k == 0) {\n        return {};\n    }\n    vector<int> sortedArr = arr;\n    sort(sortedArr.begin(), sortedArr.end());\n    return vector<int>(sortedArr.end() - k, sortedArr.end());\n}\n",
            "int solution(const vector<int>& lst) {\n    int sum = 0;\n    for (size_t i = 0; i < lst.size(); ++i) {\n        if (i % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n",
            "int addElements(const vector<int>& arr, int k) {\n    int sum = 0;\n    for (int i = 0; i < k && i < arr.size(); i++) {\n        if (int n = arr[i]; n >= -99 && n <= 99) {\n            sum += n;\n        }\n    }\n    return sum;\n}\n",
            "vector<int> getOddCollatz(int n) {\n    vector<int> collatz = {1};\n    while (n != 1) {\n        if (n % 2 != 0) {\n            collatz.push_back(n);\n            n = 3 * n + 1;\n        } else {\n            n = n / 2;\n        }\n    }\n    sort(collatz.begin(), collatz.end());\n    return collatz;\n}\n",
            "bool validDate(const string& date) {\n    if (date.length() != 10 || date[2] != '-' || date[5] != '-') {\n        return false;\n    }\n    int m = stoi(date.substr(0, 2));\n    int d = stoi(date.substr(3, 2));\n    if ((m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) && d >= 1 && d <= 31) {\n        return true;\n    }\n    if ((m == 4 || m == 6 || m == 9 || m == 11) && d >= 1 && d <= 30) {\n        return true;\n    }\n    if (m == 2 && d >= 1 && d <= 29) {\n        return true;\n    }\n    return false;\n}\n",
            "vector<string> splitWords(const string& txt) {\n    if (txt.find(' ') != string::npos) {\n        vector<string> result;\n        stringstream ss(txt);\n        string word;\n        while (getline(ss, word, ' ')) {\n            result.push_back(word);\n        }\n        return result;\n    } else if (txt.find(',') != string::npos) {\n        vector<string> result;\n        stringstream ss(txt);\n        string word;\n        while (getline(ss, word, ',')) {\n            result.push_back(word);\n        }\n        return result;\n    } else {\n        int count = 0;\n        for (char c : txt) {\n            if (islower(c) && (c % 2 == 0)) {\n                count++;\n            }\n        }\n        return {to_string(count)};\n    }\n}\n",
            "bool isSorted(const vector<int>& lst) {\n    if (lst.empty()) {\n        return true;\n    }\n    for (size_t i = 1; i < lst.size(); ++i) {\n        if (lst[i - 1] > lst[i]) {\n            return false;\n        }\n    }\n    map<int, int> freq;\n    for (int i : lst) {\n        freq[i]++;\n    }\n    for (const auto& count : freq) {\n        if (count.second > 2) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "#include <vector>\n#include <cmath>\n#include <algorithm>\n\nbool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= static_cast<int>(std::sqrt(n)); ++i) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nstring intersection(const vector<int>& interval1, const vector<int>& interval2) {\n    int l = std::max(interval1[0], interval2[0]);\n    int r = std::min(interval1[1], interval2[1]);\n    int length = r - l;\n    if (length > 0 && isPrime(length)) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n",
            "optional<int> prodSigns(const vector<int>& arr) {\n    if (arr.empty()) {\n        return nullopt;\n    }\n    for (int n : arr) {\n        if (n == 0) {\n            return 0;\n        }\n    }\n    int sign = -1;\n    int negativeCount = 0;\n    for (int n : arr) {\n        if (n < 0) {\n            negativeCount++;\n        }\n    }\n    if (negativeCount % 2 == 0) {\n        sign = 1;\n    }\n    int sum = 0;\n    for (int n : arr) {\n        sum += abs(n);\n    }\n    return sign * sum;\n}\n",
            "vector<int> minPath(const vector<vector<int>>& grid, int k) {\n    int n = grid.size();\n    int minVal = n * n + 1;\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < n; ++j) {\n            if (grid[i][j] == 1) {\n                vector<int> temp;\n                if (i != 0) {\n                    temp.push_back(grid[i-1][j]);\n                }\n                if (j != 0) {\n                    temp.push_back(grid[i][j-1]);\n                }\n                if (i != n-1) {\n                    temp.push_back(grid[i+1][j]);\n                }\n                if (j != n-1) {\n                    temp.push_back(grid[i][j+1]);\n                }\n                for (int val : temp) {\n                    if (val < minVal) {\n                        minVal = val;\n                    }\n                }\n            }\n        }\n    }\n    vector<int> result(k);\n    for (int i = 0; i < k; ++i) {\n        result[i] = 1;\n        if (i % 2 != 0) {\n            result[i] = minVal;\n        }\n    }\n    return result;\n}\n",
            "vector<int> tri(int n) {\n    if (n == 0) {\n        return {1};\n    }\n    vector<int> seq = {1, 3};\n    for (int i = 2; i <= n; ++i) {\n        if (i % 2 == 0) {\n            seq.push_back(i / 2 + 1);\n        } else {\n            seq.push_back(seq[i - 1] + seq[i - 2] + (i + 3) / 2);\n        }\n    }\n    return seq;\n}\n",
            "int digits(int n) {\n    std::vector<int> odds;\n    std::string numStr = std::to_string(n);\n    for (char d : numStr) {\n        int digit = d - '0';\n        if (digit % 2 == 1) {\n            odds.push_back(digit);\n        }\n    }\n    int result = 1;\n    for (int o : odds) {\n        result *= o;\n    }\n    if (!odds.empty()) {\n        return result;\n    }\n    return 0;\n}\n",
            "bool isNested(const string& s) {\n    vector<int> openIdx;\n    vector<int> closeIdx;\n\n    for (size_t i = 0; i < s.size(); ++i) {\n        if (s[i] == '[') {\n            openIdx.push_back(i);\n        } else if (s[i] == ']') {\n            closeIdx.push_back(i);\n        }\n    }\n\n    int l = closeIdx.size();\n    for (int i = 0, j = l - 1; i < j; ++i, --j) {\n        swap(closeIdx[i], closeIdx[j]);\n    }\n\n    int cnt = 0;\n    int i = 0;\n    for (size_t idx : openIdx) {\n        if (i < l && idx < closeIdx[i]) {\n            ++cnt;\n            ++i;\n        }\n    }\n    return cnt >= 2;\n}\n",
            "int sumSquares(const vector<double>& lst) {\n    int sum = 0;\n    for (double n : lst) {\n        sum += static_cast<int>(pow(ceil(n), 2));\n    }\n    return sum;\n}\n",
            "bool checkIfLastCharIsALetter(const string& txt) {\n    if (txt.empty()) {\n        return false;\n    }\n    size_t lastSpacePos = txt.rfind(' ');\n    string last = txt.substr(lastSpacePos + 1);\n    return last.length() == 1 && isalpha(last[0]);\n}\n",
            "int canArrange(const vector<int>& arr) {\n    if (arr.size() <= 1) {\n        return -1;\n    }\n    int idx = -1;\n    for (size_t i = 1; i < arr.size(); ++i) {\n        if (arr[i] < arr[i-1]) {\n            idx = i;\n        }\n    }\n    return idx;\n}\n",
            "vector<optional<int>> largestSmallestIntegers(const vector<int>& lst) {\n    vector<int> neg;\n    vector<int> pos;\n\n    for (int i : lst) {\n        if (i < 0) {\n            neg.push_back(i);\n        }\n        if (i > 0) {\n            pos.push_back(i);\n        }\n    }\n\n    optional<int> maxNeg;\n    if (!neg.empty()) {\n        int maxNegVal = neg[0];\n        for (int n : neg) {\n            if (n > maxNegVal) {\n                maxNegVal = n;\n            }\n        }\n        maxNeg = maxNegVal;\n    }\n\n    optional<int> minPos;\n    if (!pos.empty()) {\n        int minPosVal = pos[0];\n        for (int p : pos) {\n            if (p < minPosVal) {\n                minPosVal = p;\n            }\n        }\n        minPos = minPosVal;\n    }\n\n    return {maxNeg, minPos};\n}\n",
            "#include <any>\n#include <string>\n#include <variant>\n\nstd::optional<double> anyToReal(const std::any& o) {\n    if (o.type() == typeid(std::string)) {\n        try {\n            std::string v = std::any_cast<std::string>(o);\n            // Replace commas with dots for float conversion\n            std::string modifiedV = \"\";\n            for (char c : v) {\n                if (c == ',') {\n                    modifiedV += '.';\n                } else {\n                    modifiedV += c;\n                }\n            }\n            return std::stod(modifiedV);\n        } catch (...) {\n            throw std::invalid_argument(\"invalid float representation\");\n        }\n    } else if (o.type() == typeid(int)) {\n        return static_cast<double>(std::any_cast<int>(o));\n    } else if (o.type() == typeid(double)) {\n        return std::any_cast<double>(o);\n    } else {\n        throw std::invalid_argument(\"unsupported type\");\n    }\n}\n\nstd::optional<double> compareOne(const std::any& a, const std::any& b) {\n    double a1 = anyToReal(a).value();\n    double b1 = anyToReal(b).value();\n    if (a1 == b1) {\n        return std::nullopt;\n    } else if (a1 > b1) {\n        return a1;\n    } else {\n        return b1;\n    }\n}\n",
            "bool isEqualToSumEven(int n) {\n    return n % 2 == 0 && n >= 8;\n}\n",
            "int specialFactorial(int n) {\n    int fact = 1;\n    int result = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n        result *= fact;\n    }\n    return result;\n}\n",
            "#include <regex>\nusing namespace std;\n\nstring fixSpaces(const string& txt) {\n    return regex_replace(txt, regex(\"\\\\s{3,}\"), \"-\").replace(\" \", \"_\");\n}\n",
            "#include <string>\n#include <vector>\n#include <cctype>\n\nstring fileNameCheck(const string& file_name) {\n\tvector<string> suf = {\"txt\", \"exe\", \"dll\"};\n\tsize_t pos = file_name.find('.');\n\tif (pos == string::npos || pos == 0 || pos == file_name.length() - 1) {\n\t\treturn \"No\";\n\t}\n\tstring namePart = file_name.substr(0, pos);\n\tstring extPart = file_name.substr(pos + 1);\n\t\n\tif (find(suf.begin(), suf.end(), extPart) == suf.end()) {\n\t\treturn \"No\";\n\t}\n\tif (!isalpha(namePart[0])) {\n\t\treturn \"No\";\n\t}\n\tint digitCount = 0;\n\tfor (char c : namePart) {\n\t\tif (isdigit(c)) {\n\t\t\tdigitCount++;\n\t\t}\n\t}\n\tif (digitCount > 3) {\n\t\treturn \"No\";\n\t}\n\t\n\treturn \"Yes\";\n}\n",
            "int sumSquares(const vector<int>& lst) {\n    int result = 0;\n    for (size_t i = 0; i < lst.size(); i++) {\n        if (i % 3 == 0) {\n            result += lst[i] * lst[i];\n        } else if (i % 4 == 0) {\n            result += lst[i] * lst[i] * lst[i];\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "string wordsInSentence(const string& sentence) {\n    vector<string> words;\n    stringstream ss(sentence);\n    string word;\n    while (ss >> word) {\n        words.push_back(word);\n    }\n    vector<string> primeWords;\n    for (const auto& w : words) {\n        if (isPrime(w.length())) {\n            primeWords.push_back(w);\n        }\n    }\n    string result;\n    for (size_t i = 0; i < primeWords.size(); ++i) {\n        result += primeWords[i];\n        if (i != primeWords.size() - 1) {\n            result += \" \";\n        }\n    }\n    return result;\n}\n\nbool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= static_cast<int>(sqrt(n)); ++i) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "bool simplify(const string& x, const string& n) {\n    vector<string> xs = split(x, '/');\n    vector<string> ns = split(n, '/');\n    int num = stoi(xs[0]);\n    int den = stoi(xs[1]);\n    int numer = stoi(ns[0]);\n    int denom = stoi(ns[1]);\n    return (num * numer) % (den * denom) == 0;\n}\n",
            "#include <vector>\n#include <string>\n#include <algorithm>\n\nint digitsSum(int n) {\n    std::string n_str = std::to_string(n);\n    if (n >= 0) {\n        int sum = 0;\n        for (char d : n_str) {\n            sum += d - '0';\n        }\n        return sum;\n    } else {\n        return (n_str[0] - '0') * 2 + digitsSum(std::abs(n));\n    }\n}\n\nvector<int> orderByPoints(const vector<int>& nums) {\n    std::vector<int> sorted_nums = nums;\n    std::sort(sorted_nums.begin(), sorted_nums.end(), [](int a, int b) {\n        return digitsSum(a) < digitsSum(b);\n    });\n    return sorted_nums;\n}\n",
            "#include <vector>\n#include <string>\n\nint specialFilter(const std::vector<int>& nums) {\n    std::string odds = \"13579\";\n    int count = 0;\n    for (int n : nums) {\n        if (n > 10 && n % 2 == 1 && odds.find(std::to_string(n)[0]) != std::string::npos) {\n            count++;\n        }\n    }\n    return count;\n}\n",
            "int getMaxTriples(int n) {\n    int c[3] = {0, 0, 0};\n    for (int i = 1; i <= n; i++) {\n        int a = i * i - i + 1;\n        c[a % 3]++;\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6;\n}\n",
            "#include <string>\n#include <vector>\n\nusing namespace std;\n\nvector<string> bf(const string& planet1, const string& planet2) {\n    vector<string> names = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    int l = -1;\n    int r = -1;\n    for (int i = 0; i < names.size(); ++i) {\n        if (names[i] == planet1) {\n            l = i;\n        }\n        if (names[i] == planet2) {\n            r = i;\n        }\n    }\n    if (l == -1 || r == -1) {\n        return {};\n    }\n    if (l > r) {\n        swap(l, r);\n    }\n    if (l == r) {\n        return {};\n    }\n    return vector<string>(names.begin() + l + 1, names.begin() + r);\n}\n",
            "#include <vector>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nvector<string> sortedListSum(const vector<string>& lst) {\n    vector<string> result;\n    for (const string& s : lst) {\n        if (s.length() % 2 == 0) {\n            result.push_back(s);\n        }\n    }\n    sort(result.begin(), result.end(), [](const string& a, const string& b) {\n        if (a.length() == b.length()) {\n            return a < b;\n        }\n        return a.length() < b.length();\n    });\n    return result;\n}\n",
            "#include <cmath>\n\nint xOrY(int n, int x, int y) {\n    if (n < 2) {\n        return y;\n    }\n    for (int i = 2; i <= std::sqrt(n); i++) {\n        if (n % i == 0) {\n            return y;\n        }\n    }\n    return x;\n}\n",
            "int doubleTheDifference(const vector<double>& lst) {\n    int sum = 0;\n    for (double n : lst) {\n        if (n >= 0 && n == static_cast<int>(n) && static_cast<int>(n) % 2 == 1) {\n            sum += static_cast<int>(n * n);\n        }\n    }\n    return sum;\n}\n",
            "#include <vector>\n#include <cmath>\n\nstd::vector<int> compare(const std::vector<int>& game, const std::vector<int>& guess) {\n    std::vector<int> result(game.size());\n    for (size_t i = 0; i < game.size(); ++i) {\n        result[i] = std::abs(game[i] - guess[i]);\n    }\n    return result;\n}\n",
            "#include <string>\n#include <vector>\n\nusing namespace std;\n\nstring strongestExtension(const string& class_name, const vector<string>& extensions) {\n    int maxS = -1000;\n    string maxExt;\n    for (const auto& ext : extensions) {\n        int upper = 0;\n        int lower = 0;\n        for (char c : ext) {\n            if (isupper(c)) {\n                upper++;\n            } else if (islower(c)) {\n                lower++;\n            }\n        }\n        int s = upper - lower;\n        if (s > maxS) {\n            maxS = s;\n            maxExt = ext;\n        }\n    }\n    return class_name + \".\" + maxExt;\n}\n",
            "bool cycpatternCheck(const std::string& a, const std::string& b) {\n    if (a.length() < b.length()) {\n        return false;\n    }\n    for (size_t i = 0; i < b.length(); ++i) {\n        std::string rotated = b.substr(i) + b.substr(0, i);\n        if (a.find(rotated) != std::string::npos) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "vector<int> evenOddCount(int num) {\n    string ds = to_string(abs(num));\n    int even = 0;\n    for (char d : ds) {\n        if ((d - '0') % 2 == 0) {\n            even++;\n        }\n    }\n    return {even, static_cast<int>(ds.length()) - even};\n}\n",
            "string intToMiniRoman(int num) {\n    vector<int> values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    vector<string> numerals = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    string res;\n    for (int i = 0; i < values.size(); i++) {\n        while (num >= values[i]) {\n            res += numerals[i];\n            num -= values[i];\n        }\n    }\n    return res;\n}\n",
            "bool rightAngleTriangle(int a, int b, int c) {\n    std::vector<int> s = {a, b, c};\n    std::sort(s.begin(), s.end());\n    return s[0]*s[0] + s[1]*s[1] == s[2]*s[2];\n}\n",
            "string findMax(const vector<string>& words) {\n    int maxCnt = 0;\n    string maxW = \"\";\n    for (const auto& w : words) {\n        unordered_set<char> charSet(w.begin(), w.end());\n        int cnt = charSet.size();\n        if (cnt > maxCnt) {\n            maxCnt = cnt;\n            maxW = w;\n        } else if (cnt == maxCnt) {\n            if (w < maxW) {\n                maxW = w;\n            }\n        }\n    }\n    return maxW;\n}\n",
            "vector<int> eat(int num, int need, int remaining) {\n    if (need <= remaining) {\n        return {num + need, remaining - need};\n    } else {\n        return {num + remaining, 0};\n    }\n}\n",
            "#include <vector>\n#include <string>\n#include <cmath>\n\nint doAlgebra(const std::vector<std::string>& operators, const std::vector<int>& operands) {\n    std::vector<std::string> ops = operators;\n    std::vector<int> nums = operands;\n    int i = ops.size() - 1;\n    while (i >= 0) {\n        if (ops[i] == \"**\") {\n            nums[i] = static_cast<int>(std::pow(nums[i], nums[i + 1]));\n            nums.erase(nums.begin() + i + 1);\n            ops.erase(ops.begin() + i);\n        }\n        i--;\n    }\n    i = 0;\n    while (i < ops.size()) {\n        if (ops[i] == \"*\" || ops[i] == \"//\") {\n            if (ops[i] == \"*\") {\n                nums[i] *= nums[i + 1];\n            } else {\n                nums[i] /= nums[i + 1];\n            }\n            nums.erase(nums.begin() + i + 1);\n            ops.erase(ops.begin() + i);\n            i--;\n        }\n        i++;\n    }\n    i = 0;\n    while (i < ops.size()) {\n        if (ops[i] == \"+\" || ops[i] == \"-\") {\n            if (ops[i] == \"+\") {\n                nums[i] += nums[i + 1];\n            } else {\n                nums[i] -= nums[i + 1];\n            }\n            nums.erase(nums.begin() + i + 1);\n            ops.erase(ops.begin() + i);\n            i--;\n        }\n        i++;\n    }\n    return nums[0];\n}\n",
            "bool hasAlpha(const std::string& s) {\n    for (char ch : s) {\n        if (std::isalpha(ch)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nstd::string reverseString(const std::string& s) {\n    std::string reversed = s;\n    std::reverse(reversed.begin(), reversed.end());\n    return reversed;\n}\n\nstd::string solve(const std::string& s) {\n    if (!hasAlpha(s)) {\n        return reverseString(s);\n    }\n    std::string result;\n    for (char ch : s) {\n        if (!std::isalpha(ch)) {\n            result += ch;\n        } else if (std::isupper(ch)) {\n            result += std::tolower(ch);\n        } else {\n            result += std::toupper(ch);\n        }\n    }\n    return result;\n}\n",
            "optional<string> stringToMd5(const string& txt) {\n    if (txt.empty()) {\n        return nullopt;\n    }\n    MD5 md5Hash;\n    md5Hash.update(txt.c_str(), txt.size());\n    Digestible digest = md5Hash.digest();\n    stringstream ss;\n    for (auto byte : digest) {\n        ss << hex << setw(2) << setfill('0') << static_cast<int>(byte);\n    }\n    return ss.str();\n}\n",
            "#include <vector>\n#include <algorithm>\n\nstd::vector<int> generateIntegers(int a, int b) {\n    int lower = std::max(2, std::min(a, b));\n    int upper = std::min(8, std::max(a, b));\n    std::vector<int> result;\n    for (int i = lower; i <= upper; i++) {\n        if (i % 2 == 0) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\n"
        ],
        "java": [
            "class Global {\n    public static boolean hasCloseElements(List<Double> numbers, double threshold) {\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    private static double abs(double x) {\n        if (x < 0) {\n            return -x;\n        }\n        return x;\n    }\n}\n",
            "class Global {\n    public static List<String> separateParenGroups(String parenString) {\n        List<String> groups = new ArrayList<>();\n        Stack<Character> stk = new Stack<>();\n        StringBuilder currentGroup = new StringBuilder();\n        String parens = parenString.replaceAll(\" \", \"\");\n        \n        for (char ch : parens.toCharArray()) {\n            if (ch == '(') {\n                stk.push(ch);\n                currentGroup.append(ch);\n            } else if (ch == ')') {\n                stk.pop();\n                currentGroup.append(ch);\n                if (stk.isEmpty()) {\n                    groups.add(currentGroup.toString());\n                    currentGroup.setLength(0);\n                }\n            }\n        }\n        return groups;\n    }\n}\n",
            "class Global {\n    public static double truncateNumber(double num) {\n        return num - Math.floor(num);\n    }\n}\n",
            "class Global {\n    public static boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (int op : operations) {\n            balance += op;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0.0;\n        for (double number : numbers) {\n            mean += number;\n        }\n        mean /= numbers.size();\n\n        double deviation = 0.0;\n        for (double number : numbers) {\n            deviation += Math.abs(number - mean);\n        }\n        return deviation / numbers.size();\n    }\n}\n",
            "class Global {\n    public static List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i != 0) {\n                result.add(delimiter);\n            }\n            result.add(numbers.get(i));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> parseNestedParens(String parenString) {\n        List<Integer> result = new ArrayList<>();\n        String[] parenGroups = parenString.split(\" \");\n        for (String group : parenGroups) {\n            int maxDepth = 0;\n            int depth = 0;\n            for (char ch : group.toCharArray()) {\n                if (ch == '(') {\n                    depth++;\n                    if (depth > maxDepth) {\n                        maxDepth = depth;\n                    }\n                } else if (ch == ')') {\n                    depth--;\n                }\n            }\n            result.add(maxDepth);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<String> filterBySubstring(List<String> strs, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strs) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> sumProduct(List<Integer> numbers) {\n        int n_sum = 0;\n        for (int num : numbers) {\n            n_sum += num;\n        }\n        \n        int n_product = 1;\n        for (int num : numbers) {\n            n_product *= num;\n        }\n        \n        return Arrays.asList(n_sum, n_product);\n    }\n}\n",
            "class Global {\n    public static List<Integer> rollingMax(List<Integer> numbers) {\n        int maxSoFar = Integer.MIN_VALUE;\n        List<Integer> result = new ArrayList<>(Collections.nCopies(numbers.size(), 0));\n        for (int i = 0; i < numbers.size(); i++) {\n            int num = numbers.get(i);\n            if (num > maxSoFar) {\n                maxSoFar = num;\n            }\n            result.set(i, maxSoFar);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String makePalindrome(String s) {\n        if (is_palindrome(s)) {\n            return s;\n        }\n        for (int i = 0; i < s.length(); i++) {\n            if (is_palindrome(s.substring(i))) {\n                String suffix = s.substring(0, i);\n                String reversed_suffix = \"\";\n                for (int j = suffix.length() - 1; j >= 0; j--) {\n                    reversed_suffix += suffix.charAt(j);\n                }\n                return s + reversed_suffix;\n            }\n        }\n        return \"\";\n    }\n\n    private static boolean is_palindrome(String s) {\n        for (int i = 0; i < s.length() / 2; i++) {\n            if (s.charAt(i) != s.charAt(s.length() - 1 - i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static String stringXor(String a, String b) {\n        String result = \"\";\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n                result += \"0\";\n            } else {\n                result += \"1\";\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static Optional<String> longest(List<String> strs) {\n        if (strs.isEmpty()) {\n            return Optional.empty();\n        }\n        String longestS = strs.get(0);\n        for (String s : strs) {\n            if (s.length() > longestS.length()) {\n                longestS = s;\n            }\n        }\n        return Optional.of(longestS);\n    }\n}\n",
            "class Global {\n    public static int greatestCommonDivisor(int a, int b) {\n        if (b == 0) {\n            return a;\n        } else {\n            return greatestCommonDivisor(b, a % b);\n        }\n    }\n}\n",
            "class Global {\n    public static List<String> allPrefixes(String s) {\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 0; i < s.length(); i++) {\n            prefixes.add(s.substring(0, i + 1));\n        }\n        return prefixes;\n    }\n}\n",
            "class Global {\n    public static String stringSequence(int n) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            result.append(i).append(\" \");\n        }\n        return result.toString().trim();\n    }\n}\n",
            "class Global {\n    public static int countDistinctCharacters(String s) {\n        Set<Character> charSet = new HashSet<>();\n        for (char c : s.toCharArray()) {\n            charSet.add(Character.toLowerCase(c));\n        }\n        return charSet.size();\n    }\n}\n",
            "class Global {\n    public static List<Integer> parseMusic(String musicString) {\n        Map<String, Integer> durations = new HashMap<>();\n        durations.put(\"o\", 4);\n        durations.put(\"o|\", 2);\n        durations.put(\".|\", 1);\n\n        String[] notes = musicString.split(\" \");\n        List<Integer> result = new ArrayList<>();\n\n        for (String note : notes) {\n            if (durations.containsKey(note)) {\n                result.add(durations.get(note));\n            }\n        }\n\n        return result;\n    }\n}\n",
            "class Global {\n    public static int howManyTimes(String s, String substring) {\n        int times = 0;\n        for (int i = 0; i <= s.length() - substring.length(); i++) {\n            if (s.substring(i, i + substring.length()).equals(substring)) {\n                times++;\n            }\n        }\n        return times;\n    }\n}\n",
            "class Global {\n    public static String sortNumbers(String numbers) {\n        Map<String, Integer> numDict = new HashMap<>();\n        numDict.put(\"zero\", 0);\n        numDict.put(\"one\", 1);\n        numDict.put(\"two\", 2);\n        numDict.put(\"three\", 3);\n        numDict.put(\"four\", 4);\n        numDict.put(\"five\", 5);\n        numDict.put(\"six\", 6);\n        numDict.put(\"seven\", 7);\n        numDict.put(\"eight\", 8);\n        numDict.put(\"nine\", 9);\n\n        String[] numSlice = numbers.split(\" \");\n        Arrays.sort(numSlice, Comparator.comparingInt(numDict::get));\n        \n        return String.join(\" \", numSlice);\n    }\n}\n",
            "class Global {\n    public static List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> sortedNumbers = new ArrayList<>(numbers);\n        Collections.sort(sortedNumbers);\n\n        double minDiff = Double.MAX_VALUE;\n        List<Double> closestPair = new ArrayList<>();\n\n        for (int i = 1; i < sortedNumbers.size(); i++) {\n            double diff = sortedNumbers.get(i) - sortedNumbers.get(i - 1);\n            if (diff < minDiff) {\n                minDiff = diff;\n                closestPair = Arrays.asList(sortedNumbers.get(i - 1), sortedNumbers.get(i));\n            }\n        }\n\n        return closestPair;\n    }\n}\n",
            "class Global {\n    public static List<Double> rescaleToUnit(List<Double> numbers) {\n        if (numbers.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        double minNum = numbers.get(0);\n        double maxNum = numbers.get(0);\n\n        for (double num : numbers) {\n            if (num < minNum) {\n                minNum = num;\n            }\n            if (num > maxNum) {\n                maxNum = num;\n            }\n        }\n\n        if (minNum == maxNum) {\n            List<Double> result = new ArrayList<>(Collections.nCopies(numbers.size(), 0.0));\n            return result;\n        } else {\n            List<Double> result = new ArrayList<>();\n            for (double num : numbers) {\n                result.add((num - minNum) / (maxNum - minNum));\n            }\n            return result;\n        }\n    }\n}\n",
            "class Global {\n    public static List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int strLength(String s) {\n        return s.length();\n    }\n}\n",
            "class Global {\n    public static int largestDivisor(int n) {\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return n / i;\n            }\n        }\n        return 1;\n    }\n}\n",
            "class Global {\n    public static List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int divisor = 2;\n        while (divisor <= n) {\n            if (n % divisor == 0) {\n                factors.add(divisor);\n                n /= divisor;\n            } else {\n                divisor++;\n            }\n        }\n        return factors;\n    }\n}\n",
            "class Global {\n    public static List<Integer> removeDuplicates(List<Integer> numbers) {\n        Map<Integer, Integer> counts = new HashMap<>();\n        for (int num : numbers) {\n            counts.put(num, counts.getOrDefault(num, 0) + 1);\n        }\n        List<Integer> res = new ArrayList<>();\n        for (int num : numbers) {\n            if (counts.get(num) == 1) {\n                res.add(num);\n            }\n        }\n        return res;\n    }\n}\n",
            "class Global {\n    public static String flipCase(String s) {\n        StringBuilder flipped = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (!Character.isLetter(ch)) {\n                flipped.append(ch);\n            } else if (Character.isLowerCase(ch)) {\n                flipped.append(Character.toUpperCase(ch));\n            } else if (Character.isUpperCase(ch)) {\n                flipped.append(Character.toLowerCase(ch));\n            }\n        }\n        return flipped.toString();\n    }\n}\n",
            "class Global {\n    public static String concatenate(List<String> strs) {\n        StringBuilder result = new StringBuilder();\n        for (String str : strs) {\n            result.append(str);\n        }\n        return result.toString();\n    }\n}\n",
            "class Global {\n    public static List<String> filterByPrefix(List<String> strs, String prefixStr) {\n        List<String> result = new ArrayList<>();\n        for (String s : strs) {\n            if (s.startsWith(prefixStr)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> getPositive(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (int num : l) {\n            if (num > 0) {\n                result.add(num);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static double poly(List<Integer> xs, double x) {\n        double res = 0.0;\n        for (int i = 0; i < xs.size(); i++) {\n            res += xs.get(i) * Math.pow(x, i);\n        }\n        return res;\n    }\n\n    public static double findZero(List<Integer> xs) {\n        double x1 = 1.0, x2 = -1.0;\n        while (poly(xs, x1) * poly(xs, x2) > 0) {\n            x1 *= 2;\n            x2 *= 2;\n        }\n        while (Math.abs(x1 - x2) > 1e-10) {\n            double mid = (x1 + x2) / 2;\n            if (poly(xs, mid) == 0) {\n                return mid;\n            } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n                x2 = mid;\n            } else {\n                x1 = mid;\n            }\n        }\n        return (x1 + x2) / 2;\n    }\n}\n",
            "class Global {\n    public static List<Integer> sortThird(List<Integer> l) {\n        List<Integer> sortedThird = new ArrayList<>(l.stream().filter((index, value) -> index % 3 == 0).sorted().collect(Collectors.toList()));\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                result.add(sortedThird.get(i / 3));\n            } else {\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}\n",
            "import java.util.*;\n\nclass Global {\n    public static List<Integer> listUnique(List<Integer> l) {\n        Set<Integer> uniqueMap = new HashSet<>();\n        List<Integer> result = new ArrayList<>();\n        for (int value : l) {\n            if (!uniqueMap.contains(value)) {\n                uniqueMap.add(value);\n                result.add(value);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}\n",
            "class Global {\n    public static int maxElement(List<Integer> l) {\n        if (l.size() == 0) {\n            return 0;\n        }\n        int max = l.get(0);\n        for (int v : l) {\n            if (v > max) {\n                max = v;\n            }\n        }\n        return max;\n    }\n}\n",
            "class Global {\n    public static int fizzBuzz(int n) {\n        int cnt = 0;\n        for (int i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                cnt += countSevens(i);\n            }\n        }\n        return cnt;\n    }\n\n    public static int countSevens(int num) {\n        int cnt = 0;\n        while (num > 0) {\n            if (num % 10 == 7) {\n                cnt++;\n            }\n            num /= 10;\n        }\n        return cnt;\n    }\n}\n",
            "class Global {\n    public static List<Integer> sortEven(List<Integer> l) {\n        List<Integer> evenIndices = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                evenIndices.add(l.get(i));\n            }\n        }\n        Collections.sort(evenIndices);\n        \n        List<Integer> sortedList = new ArrayList<>(Collections.nCopies(l.size(), 0));\n        int evenIndex = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                sortedList.set(i, evenIndices.get(evenIndex));\n                evenIndex++;\n            } else {\n                sortedList.set(i, l.get(i));\n            }\n        }\n        return sortedList;\n    }\n}\n",
            "class Global {\n    public static String encodeCyclic(String s) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < s.length(); i += 3) {\n            if (i + 3 > s.length()) {\n                result.append(s.substring(i));\n            } else {\n                result.append(s.charAt(i + 1)).append(s.charAt(i + 2)).append(s.charAt(i));\n            }\n        }\n        return result.toString();\n    }\n    \n    public static String decodeCyclic(String s) {\n        return encodeCyclic(encodeCyclic(s));\n    }\n}\n",
            "class Global {\n    public static int primeFib(int n) {\n        boolean isPrime(int num) {\n            if (num < 2) return false;\n            for (int i = 2; i <= Math.sqrt(num); i++) {\n                if (num % i == 0) return false;\n            }\n            return true;\n        }\n\n        int[] f = {0, 1};\n        int cnt = 0;\n        while (cnt < n) {\n            f = new int[]{f[1], f[0] + f[1]};\n            if (isPrime(f[1])) {\n                cnt++;\n            }\n        }\n        return f[1];\n    }\n}\n",
            "class Global {\n    public static boolean triplesSumToZero(List<Integer> l) {\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static int carRaceCollision(int n) {\n        return n * n;\n    }\n}\n",
            "class Global {\n    public static List<Integer> incrList(List<Integer> l) {\n        List<Integer> result = new ArrayList<>(l.size());\n        for (int i = 0; i < l.size(); i++) {\n            int v = l.get(i);\n            result.add(v + 1);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean pairsSumToZero(List<Integer> l) {\n        Set<Integer> seen = new HashSet<>();\n        for (int num : l) {\n            if (seen.contains(-num)) {\n                return true;\n            }\n            seen.add(num);\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static String changeBase(int x, int bas) {\n        if (x == 0) {\n            return \"0\";\n        }\n        StringBuilder digits = new StringBuilder();\n        while (x > 0) {\n            digits.append(x % bas);\n            x /= bas;\n        }\n        return digits.reverse().toString();\n    }\n}\n",
            "class Global {\n    public static double triangleArea(int a, int h) {\n        return (double) (a * h) / 2.0;\n    }\n}\n",
            "class Global {\n    public static int fib4(int n) {\n        int[] fib = {0, 0, 2, 0};\n        for (int i = 4; i <= n; i++) {\n            int sum = 0;\n            for (int value : fib) {\n                sum += value;\n            }\n            fib[i % 4] = sum;\n        }\n        return fib[n % 4];\n    }\n}\n",
            "class Global {\n    public static double median(List<Double> l) {\n        Collections.sort(l);\n        if (l.size() % 2 != 0) {\n            return l.get(l.size() / 2);\n        } else {\n            return (l.get(l.size() / 2) + l.get(l.size() / 2 - 1)) / 2.0;\n        }\n    }\n}\n",
            "class Global {\n    public static boolean isPalindrome(String txt) {\n        int n = txt.length();\n        for (int i = 0; i < n / 2; i++) {\n            if (txt.charAt(i) != txt.charAt(n - 1 - i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static int modp(int n, int p) {\n        int ret = 1;\n        for (int i = 0; i < n; i++) {\n            ret = (ret * 2) % p;\n        }\n        return ret;\n    }\n}\n",
            "class Global {\n    public static String encodeShift(String s) {\n        StringBuilder result = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            char shiftedCh = (char) (((ch - 'a' + 5) % 26) + 'a');\n            result.append(shiftedCh);\n        }\n        return result.toString();\n    }\n    \n    public static String decodeShift(String s) {\n        StringBuilder result = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            char shiftedCh = (char) (((ch - 'a' + 21) % 26) + 'a');\n            result.append(shiftedCh);\n        }\n        return result.toString();\n    }\n}\n",
            "class Global {\n    public static String removeVowels(String txt) {\n        String vowels = \"aeiouAEIOU\";\n        StringBuilder result = new StringBuilder();\n        for (char char : txt.toCharArray()) {\n            if (vowels.indexOf(char) == -1) {\n                result.append(char);\n            }\n        }\n        return result.toString();\n    }\n}\n",
            "class Global {\n    public static boolean belowThreshold(List<Integer> l, int t) {\n        for (int x : l) {\n            if (x >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static int add(int x, int y) {\n        return x + y;\n    }\n}\n",
            "class Global {\n    public static boolean sameChars(String s0, String s1) {\n        return setEqual(stringToSet(s0), stringToSet(s1));\n    }\n\n    private static Set<Character> stringToSet(String s) {\n        Set<Character> set = new HashSet<>();\n        for (char c : s.toCharArray()) {\n            set.add(c);\n        }\n        return set;\n    }\n\n    private static boolean setEqual(Set<Character> set1, Set<Character> set2) {\n        if (set1.size() != set2.size()) {\n            return false;\n        }\n        for (Character key : set1) {\n            if (!set2.contains(key)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static int fib(int n) {\n        if (n <= 1) {\n            return n;\n        } else {\n            return fib(n - 1) + fib(n - 2);\n        }\n    }\n}\n",
            "class Global {\n    public static boolean correctBracketing(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '<') {\n                depth += 1;\n            } else if (b == '>') {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static boolean monotonic(List<Integer> l) {\n        if (l.size() <= 1) {\n            return true;\n        }\n\n        boolean increasing = true;\n        boolean decreasing = true;\n\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > l.get(i - 1)) {\n                decreasing = false;\n            }\n            if (l.get(i) < l.get(i - 1)) {\n                increasing = false;\n            }\n        }\n\n        return increasing || decreasing;\n    }\n}\n",
            "class Global {\n    public static List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n\n        List<Integer> result = new ArrayList<>();\n        for (Integer k : set1) {\n            if (set2.contains(k)) {\n                result.add(k);\n            }\n        }\n\n        Collections.sort(result);\n        return result;\n    }\n}\n",
            "class Global {\n    public static int largestPrimeFactor(int n) {\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i != 0) {\n                i++;\n            } else {\n                n /= i;\n            }\n        }\n        return n;\n    }\n}\n",
            "class Global {\n    public static int sumToN(int n) {\n        int sum = 0;\n        for (int i = 0; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}\n",
            "class Global {\n    public static boolean correctBracketing(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '(') {\n                depth++;\n            } else if (b == ')') {\n                depth--;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>(xs.size() - 1);\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int fibfib(int n) {\n        if (n <= 1) {\n            return 0;\n        }\n        int a = 0, b = 0, c = 1;\n        for (; n > 2; n--) {\n            a = b;\n            b = c;\n            c = a + b + c;\n        }\n        return c;\n    }\n}\n",
            "class Global {\n    public static int vowelsCount(String s) {\n        String vowels = \"aeiou\";\n        int cnt = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char ch = Character.toLowerCase(s.charAt(i));\n            if (vowels.indexOf(ch) != -1 || (i == s.length() - 1 && ch == 'y')) {\n                cnt++;\n            }\n        }\n        return cnt;\n    }\n}\n",
            "class Global {\n    public static String circularShift(int x, int shift) {\n        String xStr = Integer.toString(x);\n        if (shift > xStr.length()) {\n            return reverseString(xStr);\n        } else {\n            return xStr.substring(xStr.length() - shift) + xStr.substring(0, xStr.length() - shift);\n        }\n    }\n\n    private static String reverseString(String s) {\n        char[] chars = s.toCharArray();\n        int left = 0;\n        int right = chars.length - 1;\n        while (left < right) {\n            char temp = chars[left];\n            chars[left] = chars[right];\n            chars[right] = temp;\n            left++;\n            right--;\n        }\n        return new String(chars);\n    }\n}\n",
            "class Global {\n    public static int digitSum(String s) {\n        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (c >= 'A' && c <= 'Z') {\n                sum += (int) c;\n            }\n        }\n        return sum;\n    }\n}\n",
            "class Global {\n    public static int fruitDistribution(String s, int n) {\n        String[] words = s.split(\" \");\n        int apples = Integer.parseInt(words[findIndexOfWord(words, \"apples\") - 1]);\n        int oranges = Integer.parseInt(words[findIndexOfWord(words, \"oranges\") - 1]);\n        return n - apples - oranges;\n    }\n\n    private static int findIndexOfWord(String[] words, String word) {\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].equals(word)) {\n                return i;\n            }\n        }\n        return -1; // This line should never be reached if input is guaranteed to contain the words \"apples\" and \"oranges\"\n    }\n}\n",
            "class Global {\n    public static List<Integer> pluck(List<Integer> arr) {\n        List<Integer> evens = new ArrayList<>();\n        for (int n : arr) {\n            if (n % 2 == 0) {\n                evens.add(n);\n            }\n        }\n        if (evens.isEmpty()) {\n            return Collections.emptyList();\n        }\n        int min_even = evens.get(0);\n        for (int n : evens) {\n            if (n < min_even) {\n                min_even = n;\n            }\n        }\n        int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == min_even) {\n                index = i;\n                break;\n            }\n        }\n        return Arrays.asList(min_even, index);\n    }\n}\n",
            "class Global {\n    public static int search(List<Integer> lst) {\n        Map<Integer, Integer> freqs = new HashMap<>();\n        for (int n : lst) {\n            if (freqs.containsKey(n)) {\n                freqs.put(n, freqs.get(n) + 1);\n            } else {\n                freqs.put(n, 1);\n            }\n        }\n        List<Integer> goodVals = new ArrayList<>();\n        for (Map.Entry<Integer, Integer> entry : freqs.entrySet()) {\n            int k = entry.getKey();\n            int v = entry.getValue();\n            if (v >= k) {\n                goodVals.add(k);\n            }\n        }\n        if (goodVals.isEmpty()) {\n            return -1;\n        }\n        int maxVal = goodVals.get(0);\n        for (int val : goodVals) {\n            if (val > maxVal) {\n                maxVal = val;\n            }\n        }\n        return maxVal;\n    }\n}\n",
            "class Global {\n    public static List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> sl = new ArrayList<>(lst);\n        Collections.sort(sl);\n        List<Integer> result = new ArrayList<>();\n        int left = 0, right = sl.size() - 1;\n        while (left <= right) {\n            result.add(sl.get(left));\n            left++;\n            if (left <= right) {\n                result.add(sl.get(right));\n                right--;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static double triangleArea(int a, int b, int c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            double s = (a + b + c) / 2.0;\n            return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        } else {\n            return -1.0;\n        }\n    }\n}\n",
            "class Global {\n    public static boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return false;\n        }\n        boolean is_palin = true;\n        for (int i = 0; i < q.size(); i++) {\n            if (!q.get(i).equals(q.get(q.size() - i - 1))) {\n                is_palin = false;\n                break;\n            }\n        }\n        int total = 0;\n        for (int v : q) {\n            total += v;\n        }\n        return is_palin && total <= w;\n    }\n}\n",
            "class Global {\n    public static int smallestChange(List<Integer> arr) {\n        int ans = 0;\n        for (int i = 0; i < arr.size() / 2; i++) {\n            if (!arr.get(i).equals(arr.get(arr.size() - i - 1))) {\n                ans++;\n            }\n        }\n        return ans;\n    }\n}\n",
            "class Global {\n    public static List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        int cnt1 = 0;\n        for (String s : lst1) {\n            cnt1 += s.length();\n        }\n        int cnt2 = 0;\n        for (String s : lst2) {\n            cnt2 += s.length();\n        }\n        if (cnt1 <= cnt2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}\n",
            "class Global {\n    public static boolean isMultiplyPrime(int a) {\n        int cnt = 0;\n        for (int i = 2; i <= a; i++) {\n            if (isPrime(i)) {\n                while (a % i == 0) {\n                    cnt++;\n                    a /= i;\n                }\n            }\n        }\n        return cnt == 3;\n    }\n\n    private static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static boolean isSimplePower(int x, int n) {\n        if (n < 2) {\n            return x == n;\n        }\n        int tmp = 1;\n        while (tmp < x) {\n            tmp *= n;\n        }\n        return tmp == x;\n    }\n}\n",
            "class Global {\n    public static boolean isCube(int a) {\n        a = Math.abs(a);\n        int root = (int) Math.round(Math.pow(a, 1.0 / 3.0));\n        return root * root * root == a;\n    }\n}\n",
            "class Global {\n    public static int hexKey(String num) {\n        int count = 0;\n        for (char x : num.toCharArray()) {\n            if (x == '2' || x == '3' || x == '5' || x == '7' || x == 'B' || x == 'D') {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n",
            "class Global {\n    public static String decimalToBinary(int dec) {\n        return \"db\" + Integer.toBinaryString(dec) + \"db\";\n    }\n}\n",
            "class Global {\n    public static boolean isHappy(String s) {\n        if (s.length() < 3) {\n            return false;\n        }\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> result = new ArrayList<>();\n        for (double g : grades) {\n            if (g == 4.0) {\n                result.add(\"A+\");\n            } else if (g > 3.7) {\n                result.add(\"A\");\n            } else if (g > 3.3) {\n                result.add(\"A-\");\n            } else if (g > 3.0) {\n                result.add(\"B+\");\n            } else if (g > 2.7) {\n                result.add(\"B\");\n            } else if (g > 2.3) {\n                result.add(\"B-\");\n            } else if (g > 2.0) {\n                result.add(\"C+\");\n            } else if (g > 1.7) {\n                result.add(\"C\");\n            } else if (g > 1.3) {\n                result.add(\"C-\");\n            } else if (g > 1.0) {\n                result.add(\"D+\");\n            } else if (g > 0.7) {\n                result.add(\"D\");\n            } else if (g > 0.0) {\n                result.add(\"D-\");\n            } else {\n                result.add(\"E\");\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean primeLength(String s) {\n        int length = s.length();\n        if (length < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static int startsOneEnds(int n) {\n        if (n == 1) {\n            return 1;\n        }\n        return 2 * 9 * ((int)Math.pow(10, n - 2));\n    }\n}\n",
            "class Global {\n    public static String solve(int n) {\n        int digitsSum = 0;\n        while (n > 0) {\n            int digit = n % 10;\n            digitsSum += digit;\n            n /= 10;\n        }\n        return Integer.toBinaryString(digitsSum);\n    }\n}\n",
            "class Global {\n    public static int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int x = lst.get(i);\n            if (i % 2 == 1 && x % 2 == 0) {\n                sum += x;\n            }\n        }\n        return sum;\n    }\n}\n",
            "class Global {\n    public static String antiShuffle(String s) {\n        String words[] = s.split(\"\\\\s+\");\n        for (int i = 0; i < words.length; i++) {\n            char runes[] = words[i].toCharArray();\n            java.util.Arrays.sort(runes);\n            words[i] = new String(runes);\n        }\n        return String.join(\" \", words);\n    }\n}\n",
            "import java.util.*;\n\nclass Global {\n    public static List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> coords = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    coords.add(Arrays.asList(i, j));\n                }\n            }\n        }\n        Collections.sort(coords, new Comparator<List<Integer>>() {\n            @Override\n            public int compare(List<Integer> a, List<Integer> b) {\n                if (a.get(0) == b.get(0)) {\n                    return b.get(1) - a.get(1);\n                }\n                return a.get(0) - b.get(0);\n            }\n        });\n        return coords;\n    }\n}\n",
            "class Global {\n    public static List<Integer> sortArray(List<Integer> arr) {\n        if (arr.size() == 0) {\n            return new ArrayList<>();\n        }\n        if ((arr.get(0) + arr.get(arr.size() - 1)) % 2 == 0) {\n            arr.sort(Collections.reverseOrder());\n        } else {\n            Collections.sort(arr);\n        }\n        return arr;\n    }\n}\n",
            "class Global {\n    public static String encrypt(String s) {\n        StringBuilder result = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            int shifted = ch + 4;\n            if (shifted > 'z') {\n                shifted -= 26;\n            }\n            result.append((char) shifted);\n        }\n        return result.toString();\n    }\n}\n",
            "class Global {\n    public static Optional<Integer> nextSmallest(List<Integer> lst) {\n        Set<Integer> set = new HashSet<>(lst);\n        List<Integer> sl = new ArrayList<>(set);\n        Collections.sort(sl);\n        if (sl.size() < 2) {\n            return Optional.empty();\n        }\n        return Optional.of(sl.get(1));\n    }\n}\n",
            "class Global {\n    public static int isBored(String s) {\n        String[] sentences = s.split(\"[.!?]\\\\s*\");\n        int count = 0;\n        for (String sentence : sentences) {\n            if (sentence.length() >= 2 && sentence.substring(0, 2).equals(\"I \")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n",
            "class Global {\n    public static boolean anyInt(Object x, Object y, Object z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int xInt = (Integer) x;\n            int yInt = (Integer) y;\n            int zInt = (Integer) z;\n\n            return (xInt + yInt == zInt) || (xInt + zInt == yInt) || (yInt + zInt == xInt);\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static String encode(String message) {\n        String vowels = \"aeiouAEIOU\";\n        StringBuilder result = new StringBuilder();\n\n        for (char ch : message.toCharArray()) {\n            if (Character.isLetter(ch)) {\n                char ch1;\n                if (Character.isLowerCase(ch)) {\n                    ch1 = Character.toUpperCase(ch);\n                } else {\n                    ch1 = Character.toLowerCase(ch);\n                }\n                if (vowels.indexOf(ch1) != -1) {\n                    ch1 += 2;\n                }\n                result.append((char) ch1);\n            } else {\n                result.append(ch);\n            }\n        }\n\n        return result.toString();\n    }\n}\n",
            "class Global {\n    public static int skjkasdkd(List<Integer> lst) {\n        List<Integer> primes = new ArrayList<>();\n        for (int n : lst) {\n            if (isPrime(n)) {\n                primes.add(n);\n            }\n        }\n        if (primes.isEmpty()) {\n            return 0;\n        }\n        int largest = max(primes);\n        String largestStr = Integer.toString(largest);\n        int sum = 0;\n        for (char digit : largestStr.toCharArray()) {\n            sum += Character.getNumericValue(digit);\n        }\n        return sum;\n    }\n\n    private static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private static int max(List<Integer> nums) {\n        if (nums.isEmpty()) {\n            return 0;\n        }\n        int maxNum = nums.get(0);\n        for (int num : nums) {\n            if (num > maxNum) {\n                maxNum = num;\n            }\n        }\n        return maxNum;\n    }\n}\n",
            "class Global {\n    public static boolean checkDictCase(Map<String, String> d) {\n        if (d.isEmpty()) {\n            return false;\n        }\n        for (String key : d.keySet()) {\n            if (!key.equals(key.toLowerCase())) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static List<Integer> countUpTo(int n) {\n        List<Integer> primes = new ArrayList<>();\n        for (int num = 2; num < n; num++) {\n            boolean isPrime = true;\n            for (int p : primes) {\n                if (num % p == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                primes.add(num);\n            }\n        }\n        return primes;\n    }\n}\n",
            "class Global {\n    public static int multiply(int a, int b) {\n        return (abs(a) % 10) * (abs(b) % 10);\n    }\n\n    private static int abs(int x) {\n        if (x < 0) {\n            return -x;\n        }\n        return x;\n    }\n}\n",
            "class Global {\n    public static int countUpper(String s) {\n        String vowels = \"AEIOU\";\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (i % 2 == 0 && vowels.indexOf(c) != -1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n",
            "class Global {\n    public static int closestInteger(String value) {\n        double num = Double.parseDouble(value);\n        if (num >= 0) {\n            return (int)(num + 0.5);\n        } else {\n            return (int)(num - 0.5);\n        }\n    }\n}\n",
            "class Global {\n    public static List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>(n);\n        for (int i = 0; i < n; i++) {\n            pile.add(n + 2 * i);\n        }\n        return pile;\n    }\n}\n",
            "class Global {\n    public static List<String> wordsString(String s) {\n        List<String> result = new ArrayList<>();\n        String[] words = s.split(\"[, ]+\");\n        for (String w : words) {\n            if (!w.isEmpty()) {\n                result.add(w);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int chooseNum(int x, int y) {\n        if (x > y) {\n            return -1;\n        }\n        if (y % 2 == 0) {\n            return y;\n        }\n        if (x != y) {\n            return y - 1;\n        }\n        return -1;\n    }\n}\n",
            "class Global {\n    public static Optional<String> roundedAvg(int n, int m) {\n        if (n > m) {\n            return Optional.empty();\n        }\n        int r_avg = (int) Math.round((m + n) / 2.0);\n        return Optional.of(Integer.toBinaryString(r_avg));\n    }\n}\n",
            "class Global {\n    public static List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        for (int num : x) {\n            if (allDigitsOdd(String.valueOf(num))) {\n                result.add(num);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n\n    private static boolean allDigitsOdd(String s) {\n        for (char digit : s.toCharArray()) {\n            if ((digit - '0') % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static List<String> byLength(List<Integer> arr) {\n        String[] digitNames = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n        List<Integer> sortedArr = new ArrayList<>();\n        for (Integer x : arr) {\n            if (x >= 1 && x <= 9) {\n                sortedArr.add(x);\n            }\n        }\n        Collections.sort(sortedArr, Collections.reverseOrder());\n        String[] result = new String[sortedArr.size()];\n        for (int i = 0; i < sortedArr.size(); i++) {\n            result[i] = digitNames[sortedArr.get(i) - 1];\n        }\n        return Arrays.asList(result);\n    }\n}\n",
            "class Global {\n    public static List<Integer> f(int n) {\n        int[] nums = new int[n];\n        for (int i = 1; i <= n; i++) {\n            nums[i - 1] = i;\n        }\n\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            if ((i + 1) % 2 != 0) {\n                int sum = 0;\n                for (int j = 0; j <= i; j++) {\n                    sum += nums[j];\n                }\n                result.add(sum);\n            } else {\n                int product = 1;\n                for (int j = 0; j <= i; j++) {\n                    product *= nums[j];\n                }\n                result.add(product);\n            }\n        }\n\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> evenOddPalindrome(int n) {\n        int[] cnt = {0, 0};\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(Integer.toString(i))) {\n                cnt[i % 2]++;\n            }\n        }\n        return Arrays.stream(cnt).boxed().collect(Collectors.toList());\n    }\n\n    private static boolean isPalindrome(String s) {\n        for (int i = 0; i < s.length() / 2; i++) {\n            if (s.charAt(i) != s.charAt(s.length() - 1 - i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static int digitsSum(int n) {\n        String nStr = Integer.toString(n);\n        if (n >= 0) {\n            int sum = 0;\n            for (char d : nStr.toCharArray()) {\n                sum += Character.getNumericValue(d);\n            }\n            return sum;\n        } else {\n            return Integer.parseInt(nStr.substring(0, 2)) * 2 + digitsSum(Math.abs(n));\n        }\n    }\n\n    public static int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int n : arr) {\n            if (digitsSum(n) > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n",
            "class Global {\n    public static boolean moveOneBall(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return true;\n        }\n        List<Integer> sortedArr = new ArrayList<>(arr);\n        Collections.sort(sortedArr);\n        for (int i = 0; i < arr.size(); i++) {\n            List<Integer> firstPart = new ArrayList<>(arr.subList(i, arr.size()));\n            List<Integer> secondPart = new ArrayList<>(arr.subList(0, i));\n            if (firstPart.equals(sortedArr.subList(0, arr.size() - i)) && secondPart.equals(sortedArr.subList(arr.size() - i, sortedArr.size()))) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static String canExchange(List<Integer> lst1, List<Integer> lst2) {\n        int oddCnt = 0;\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                oddCnt++;\n            }\n        }\n        int evenCnt = 0;\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                evenCnt++;\n            }\n        }\n        if (evenCnt >= oddCnt) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n}\n",
            "class Global {\n    public static Map<String, Integer> histogram(String test) {\n        Map<String, Integer> freq = new HashMap<>();\n        String[] words = test.split(\"\\\\s+\");\n        for (String w : words) {\n            if (!w.isEmpty()) {\n                freq.put(w, freq.getOrDefault(w, 0) + 1);\n            }\n        }\n        Map<String, Integer> result = new HashMap<>();\n        if (!freq.isEmpty()) {\n            int maxFreq = Collections.max(freq.values());\n            for (Map.Entry<String, Integer> entry : freq.entrySet()) {\n                if (entry.getValue() == maxFreq) {\n                    result.put(entry.getKey(), entry.getValue());\n                }\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<String> reverseDelete(String s, String c) {\n        StringBuilder s1 = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (c.indexOf(ch) == -1) {\n                s1.append(ch);\n            }\n        }\n        boolean isPalindrome = true;\n        int n = s1.length();\n        for (int i = 0; i < n / 2; i++) {\n            if (s1.charAt(i) != s1.charAt(n - 1 - i)) {\n                isPalindrome = false;\n                break;\n            }\n        }\n        List<String> result = new ArrayList<>();\n        result.add(s1.toString());\n        if (isPalindrome) {\n            result.add(\"yes\");\n        } else {\n            result.add(\"no\");\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<String> oddCount(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String num : lst) {\n            int n = 0;\n            for (char d : num.toCharArray()) {\n                if ((d - '0') % 2 == 1) {\n                    n++;\n                }\n            }\n            String rs = \"the number of odd elements in the string i of the input.\";\n            rs = rs.replace(\"i\", String.valueOf(n));\n            result.add(rs);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int minSubArraySum(List<Integer> nums) {\n        int min_sum = 0;\n        int cur_sum = 0;\n        for (int n : nums) {\n            cur_sum = Math.min(cur_sum + n, 0);\n            min_sum = Math.min(cur_sum, min_sum);\n        }\n        if (min_sum == 0) {\n            min_sum = Collections.min(nums);\n        }\n        return min_sum;\n    }\n}\n",
            "class Global {\n    public static int maxFill(List<List<Integer>> grid, int capacity) {\n        int sum = 0;\n        for (List<Integer> arr : grid) {\n            int rowSum = 0;\n            for (int num : arr) {\n                rowSum += num;\n            }\n            if (rowSum % capacity != 0) {\n                sum += rowSum / capacity + 1;\n            } else {\n                sum += rowSum / capacity;\n            }\n        }\n        return sum;\n    }\n}\n",
            "class Global {\n    public static List<Integer> sortArray(List<Integer> arr) {\n        return arr.stream()\n                .sorted(Comparator.comparingInt((Integer x) -> countOnes(x)).thenComparingInt(x -> x))\n                .collect(Collectors.toList());\n    }\n\n    private static int countOnes(int num) {\n        return Integer.bitCount(num);\n    }\n}\n",
            "class Global {\n    public static List<String> selectWords(String s, int n) {\n        String consonants = \"bcdfghjklmnpqrstvwxyz\";\n        String[] words = s.split(\"\\\\s+\");\n        List<String> result = new ArrayList<>();\n        for (String w : words) {\n            int count = 0;\n            for (char c : w.toCharArray()) {\n                if (consonants.indexOf(Character.toLowerCase(c)) != -1) {\n                    count++;\n                }\n            }\n            if (count == n) {\n                result.add(w);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String getClosestVowel(String word) {\n        String vowels = \"aeiouAEIOU\";\n        for (int i = word.length() - 2; i > 0; i--) {\n            if (vowels.indexOf(word.charAt(i)) != -1 && vowels.indexOf(word.charAt(i-1)) == -1 && vowels.indexOf(word.charAt(i+1)) == -1) {\n                return String.valueOf(word.charAt(i));\n            }\n        }\n        return \"\";\n    }\n}\n",
            "class Global {\n    public static String matchParens(List<String> lst) {\n        String s1 = lst.get(0) + lst.get(1);\n        String s2 = lst.get(1) + lst.get(0);\n        if (check(s1) || check(s2)) {\n            return \"Yes\";\n        }\n        return \"No\";\n    }\n\n    private static boolean check(String s) {\n        int depth = 0;\n        for (char ch : s.toCharArray()) {\n            if (ch == '(') {\n                depth++;\n            } else {\n                depth--;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static List<Integer> maximum(List<Integer> arr, int k) {\n        if (k == 0) {\n            return new ArrayList<>();\n        }\n        Collections.sort(arr);\n        return arr.subList(arr.size() - k, arr.size());\n    }\n}\n",
            "class Global {\n    public static int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int x = lst.get(i);\n            if (i % 2 == 0 && x % 2 != 0) {\n                sum += x;\n            }\n        }\n        return sum;\n    }\n}\n",
            "class Global {\n    public static int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k && i < arr.size(); i++) {\n            int n = arr.get(i);\n            if (n >= -99 && n <= 99) {\n                sum += n;\n            }\n        }\n        return sum;\n    }\n}\n",
            "class Global {\n    public static List<Integer> getOddCollatz(int n) {\n        List<Integer> collatz = new ArrayList<>();\n        while (n != 1) {\n            if (n % 2 != 0) {\n                collatz.add(n);\n                n = 3 * n + 1;\n            } else {\n                n /= 2;\n            }\n        }\n        Collections.sort(collatz);\n        return collatz;\n    }\n}\n",
            "class Global {\n    public static boolean validDate(String date) {\n        if (date.length() != 10 || date.charAt(2) != '-' || date.charAt(5) != '-') {\n            return false;\n        }\n        int m = Integer.parseInt(date.substring(0, 2));\n        int d = Integer.parseInt(date.substring(3, 5));\n        if ((m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) && d >= 1 && d <= 31) {\n            return true;\n        }\n        if ((m == 4 || m == 6 || m == 9 || m == 11) && d >= 1 && d <= 30) {\n            return true;\n        }\n        if (m == 2 && d >= 1 && d <= 29) {\n            return true;\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static List<String> splitWords(String txt) {\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\" \"));\n        } else if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && c % 2 == 0) {\n                    count++;\n                }\n            }\n            return Collections.singletonList(String.valueOf(count));\n        }\n    }\n}\n",
            "class Global {\n    public static boolean isSorted(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return true;\n        }\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i - 1) > lst.get(i)) {\n                return false;\n            }\n        }\n        Map<Integer, Integer> freq = new HashMap<>();\n        for (int i : lst) {\n            freq.put(i, freq.getOrDefault(i, 0) + 1);\n        }\n        for (int count : freq.values()) {\n            if (count > 2) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "public class Global {\n    public static String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int l = Math.max(interval1.get(0), interval2.get(0));\n        int r = Math.min(interval1.get(1), interval2.get(1));\n        int length = r - l;\n        if (length > 0 && isPrime(length)) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        for (int n : arr) {\n            if (n == 0) {\n                return Optional.of(0);\n            }\n        }\n        int sign = -1;\n        int negativeCount = 0;\n        for (int n : arr) {\n            if (n < 0) {\n                negativeCount++;\n            }\n        }\n        if (negativeCount % 2 == 0) {\n            sign = 1;\n        }\n        int sum = 0;\n        for (int n : arr) {\n            sum += Math.abs(n);\n        }\n        return Optional.of(sign * sum);\n    }\n}\n",
            "class Global {\n    public static List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int minVal = n * n + 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    List<Integer> temp = new ArrayList<>();\n                    if (i != 0) {\n                        temp.add(grid.get(i - 1).get(j));\n                    }\n                    if (j != 0) {\n                        temp.add(grid.get(i).get(j - 1));\n                    }\n                    if (i != n - 1) {\n                        temp.add(grid.get(i + 1).get(j));\n                    }\n                    if (j != n - 1) {\n                        temp.add(grid.get(i).get(j + 1));\n                    }\n                    for (int val : temp) {\n                        if (val < minVal) {\n                            minVal = val;\n                        }\n                    }\n                }\n            }\n        }\n        List<Integer> result = new ArrayList<>(k);\n        for (int i = 0; i < k; i++) {\n            result.add(1);\n            if (i % 2 != 0) {\n                result.set(i, minVal);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> tri(int n) {\n        List<Integer> seq = new ArrayList<>();\n        if (n == 0) {\n            seq.add(1);\n            return seq;\n        }\n        seq.add(1);\n        seq.add(3);\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                seq.add(i / 2 + 1);\n            } else {\n                seq.add(seq.get(i - 1) + seq.get(i - 2) + (i + 3) / 2);\n            }\n        }\n        return seq;\n    }\n}\n",
            "class Global {\n    public static int digits(int n) {\n        List<Integer> odds = new ArrayList<>();\n        for (char d : String.valueOf(n).toCharArray()) {\n            int digit = d - '0';\n            if (digit % 2 == 1) {\n                odds.add(digit);\n            }\n        }\n        int result = 1;\n        for (int o : odds) {\n            result *= o;\n        }\n        if (!odds.isEmpty()) {\n            return result;\n        }\n        return 0;\n    }\n}\n",
            "class Global {\n    public static boolean isNested(String s) {\n        List<Integer> openIdx = new ArrayList<>();\n        List<Integer> closeIdx = new ArrayList<>();\n\n        for (int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n            if (ch == '[') {\n                openIdx.add(i);\n            } else if (ch == ']') {\n                closeIdx.add(i);\n            }\n        }\n\n        Collections.reverse(closeIdx);\n\n        int cnt = 0;\n        int i = 0;\n        int l = closeIdx.size();\n        for (int idx : openIdx) {\n            if (i < l && idx < closeIdx.get(i)) {\n                cnt++;\n                i++;\n            }\n        }\n        return cnt >= 2;\n    }\n}\n",
            "class Global {\n    public static int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (double n : lst) {\n            sum += (int) Math.pow(Math.ceil(n), 2);\n        }\n        return sum;\n    }\n}\n",
            "class Global {\n    public static boolean checkIfLastCharIsALetter(String txt) {\n        if (txt == null || txt.isEmpty()) {\n            return false;\n        }\n        int lastSpaceIndex = txt.lastIndexOf(' ');\n        String lastCharStr = txt.substring(lastSpaceIndex + 1);\n        return lastCharStr.length() == 1 && Character.isLetter(lastCharStr.charAt(0));\n    }\n}\n",
            "class Global {\n    public static int canArrange(List<Integer> arr) {\n        if (arr.size() <= 1) {\n            return -1;\n        }\n        int idx = -1;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                idx = i;\n            }\n        }\n        return idx;\n    }\n}\n",
            "class Global {\n    public static List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst) {\n        List<Integer> neg = new ArrayList<>();\n        List<Integer> pos = new ArrayList<>();\n\n        for (Integer i : lst) {\n            if (i < 0) {\n                neg.add(i);\n            }\n            if (i > 0) {\n                pos.add(i);\n            }\n        }\n\n        Optional<Integer> maxNeg = Optional.empty();\n        if (!neg.isEmpty()) {\n            int maxNegVal =neg.get(0);\n            for (int n : neg) {\n                if (n > maxNegVal) {\n                    maxNegVal = n;\n                }\n            }\n            maxNeg = Optional.of(maxNegVal);\n        }\n\n        Optional<Integer> minPos = Optional.empty();\n        if (!pos.isEmpty()) {\n            int minPosVal = pos.get(0);\n            for (int p : pos) {\n                if (p < minPosVal) {\n                    minPosVal = p;\n                }\n            }\n            minPos = Optional.of(minPosVal);\n        }\n\n        return Arrays.asList(maxNeg, minPos);\n    }\n}\n",
            "class Global {\n    public static Optional<Double> compareOne(Object a, Object b) {\n        Double a1 = anyToReal(a);\n        if (a1 == null) {\n            throw new IllegalArgumentException(\"Invalid input\");\n        }\n        Double b1 = anyToReal(b);\n        if (b1 == null) {\n            throw new IllegalArgumentException(\"Invalid input\");\n        }\n        if (a1.equals(b1)) {\n            return Optional.empty();\n        } else if (a1 > b1) {\n            return Optional.of(a1);\n        } else {\n            return Optional.of(b1);\n        }\n    }\n\n    private static Double anyToReal(Object o) {\n        if (o instanceof String) {\n            try {\n                return Double.parseDouble(((String) o).replace(\",\", \".\"));\n            } catch (NumberFormatException e) {\n                return null;\n            }\n        } else if (o instanceof Integer) {\n            return ((Integer) o).doubleValue();\n        } else if (o instanceof Double) {\n            return (Double) o;\n        } else {\n            return null;\n        }\n    }\n}\n",
            "class Global {\n    public static boolean isEqualToSumEven(int n) {\n        return n % 2 == 0 && n >= 8;\n    }\n}\n",
            "class Global {\n    public static int specialFactorial(int n) {\n        int fact = 1;\n        int result = 1;\n        for (int i = 1; i <= n; i++) {\n            fact *= i;\n            result *= fact;\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String fixSpaces(String txt) {\n        return txt.replaceAll(\"\\\\s{3,}\", \"-\").replace(\" \", \"_\");\n    }\n}\n",
            "class Global {\n    public static String fileNameCheck(String fileName) {\n        String[] suf = {\"txt\", \"exe\", \"dll\"};\n        String[] lst = fileName.split(\"\\\\.\");\n        if (lst.length != 2 || !contains(suf, lst[1]) || lst[0].length() == 0 || !Character.isLetter(lst[0].charAt(0)) || countDigits(lst[0]) > 3) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n\n    private static boolean contains(String[] slice, String item) {\n        for (String v : slice) {\n            if (v.equals(item)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private static int countDigits(String s) {\n        int count = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isDigit(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n",
            "class Global {\n    public static int sumSquares(List<Integer> lst) {\n        int result = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                result += lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0) {\n                result += lst.get(i) * lst.get(i) * lst.get(i);\n            } else {\n                result += lst.get(i);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        List<String> primeWords = new ArrayList<>();\n        for (String w : words) {\n            if (isPrime(w.length())) {\n                primeWords.add(w);\n            }\n        }\n        return String.join(\" \", primeWords);\n    }\n\n    private static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static boolean simplify(String x, String n) {\n        String[] xs = x.split(\"/\");\n        String[] ns = n.split(\"/\");\n        int num = Integer.parseInt(xs[0]);\n        int den = Integer.parseInt(xs[1]);\n        int numer = Integer.parseInt(ns[0]);\n        int denom = Integer.parseInt(ns[1]);\n        return (num * numer) % (den * denom) == 0;\n    }\n}\n",
            "import java.util.List;\n\nclass Global {\n    public static List<Integer> orderByPoints(List<Integer> nums) {\n        return nums.stream().sorted((a, b) -> digitsSum(a) - digitsSum(b)).toList();\n    }\n\n    private static int digitsSum(int n) {\n        String nStr = Integer.toString(n);\n        if (n >= 0) {\n            return nStr.chars().map(Character::getNumericValue).sum();\n        } else {\n            return Integer.parseInt(nStr.substring(0, Math.min(nStr.length(), 2))) * 2 + digitsSum(Math.abs(n));\n        }\n    }\n}\n",
            "class Global {\n    public static int specialFilter(List<Integer> nums) {\n        String odds = \"13579\";\n        int count = 0;\n        for (int n : nums) {\n            if (n > 10 && n % 2 == 1 && odds.indexOf(String.valueOf(n).charAt(0)) != -1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n",
            "class Global {\n    public static int getMaxTriples(int n) {\n        int[] c = {0, 0, 0};\n        for (int i = 1; i <= n; i++) {\n            int a = i * i - i + 1;\n            c[a % 3]++;\n        }\n        return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6;\n    }\n}\n",
            "class Global {\n    public static List<String> bf(String planet1, String planet2) {\n        String[] names = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n        int l = -1;\n        int r = -1;\n        for (int i = 0; i < names.length; i++) {\n            if (names[i].equals(planet1)) {\n                l = i;\n            }\n            if (names[i].equals(planet2)) {\n                r = i;\n            }\n        }\n        if (l == -1 || r == -1) {\n            return new ArrayList<>();\n        }\n        if (l > r) {\n            int temp = l;\n            l = r;\n            r = temp;\n        }\n        if (l == r) {\n            return new ArrayList<>();\n        }\n        List<String> result = new ArrayList<>(Arrays.asList(Arrays.copyOfRange(names, l + 1, r)));\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<String> sortedListSum(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result, (a, b) -> {\n            if (a.length() == b.length()) {\n                return a.compareTo(b);\n            }\n            return Integer.compare(a.length(), b.length());\n        });\n        return result;\n    }\n}\n",
            "class Global {\n    public static int xOrY(int n, int x, int y) {\n        if (n < 2) {\n            return y;\n        }\n        for (int i = 2; i <= Math.sqrt((double)n); i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}\n",
            "class Global {\n    public static int doubleTheDifference(List<Double> lst) {\n        int sum = 0;\n        for (Double n : lst) {\n            if (n >= 0 && n == Math.floor(n) && (int) n % 2 == 1) {\n                sum += (int) (n * n);\n            }\n        }\n        return sum;\n    }\n}\n",
            "class Global {\n    public static List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            result.add(abs(game.get(i) - guess.get(i)));\n        }\n        return result;\n    }\n\n    private static int abs(int x) {\n        if (x < 0) {\n            return -x;\n        }\n        return x;\n    }\n}\n",
            "class Global {\n    public static String strongestExtension(String className, List<String> extensions) {\n        int maxS = -1000;\n        String maxExt = \"\";\n        for (String ext : extensions) {\n            int upper = 0;\n            int lower = 0;\n            for (char c : ext.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    upper++;\n                } else if (Character.isLowerCase(c)) {\n                    lower++;\n                }\n            }\n            int s = upper - lower;\n            if (s > maxS) {\n                maxS = s;\n                maxExt = ext;\n            }\n        }\n        return className + \".\" + maxExt;\n    }\n}\n",
            "class Global {\n    public static boolean cycpatternCheck(String a, String b) {\n        if (a.length() < b.length()) {\n            return false;\n        }\n        for (int i = 0; i < b.length(); i++) {\n            String rotated = b.substring(i) + b.substring(0, i);\n            if (a.contains(rotated)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static List<Integer> evenOddCount(int num) {\n        String ds = \"\" + Math.abs(num);\n        int even = 0;\n        for (char d : ds.toCharArray()) {\n            if ((d - '0') % 2 == 0) {\n                even++;\n            }\n        }\n        return Arrays.asList(even, ds.length() - even);\n    }\n}\n",
            "class Global {\n    public static String intToMiniRoman(int num) {\n        int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        String[] numerals = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n        StringBuilder res = new StringBuilder();\n        for (int i = 0; i < values.length; i++) {\n            while (num >= values[i]) {\n                res.append(numerals[i]);\n                num -= values[i];\n            }\n        }\n        return res.toString();\n    }\n}\n",
            "class Global {\n    public static boolean rightAngleTriangle(int a, int b, int c) {\n        int[] s = {a, b, c};\n        java.util.Arrays.sort(s);\n        return s[0] * s[0] + s[1] * s[1] == s[2] * s[2];\n    }\n}\n",
            "class Global {\n    public static String findMax(List<String> words) {\n        int maxCnt = 0;\n        String maxW = \"\";\n        for (String w : words) {\n            int cnt = uniqueChars(w).size();\n            if (cnt > maxCnt) {\n                maxCnt = cnt;\n                maxW = w;\n            } else if (cnt == maxCnt) {\n                if (w.compareTo(maxW) < 0) {\n                    maxW = w;\n                }\n            }\n        }\n        return maxW;\n    }\n\n    private static Set<Character> uniqueChars(String s) {\n        HashSet<Character> charSet = new HashSet<>();\n        for (char c : s.toCharArray()) {\n            charSet.add(c);\n        }\n        return charSet;\n    }\n}\n",
            "class Global {\n    public static List<Integer> eat(int num, int need, int remaining) {\n        if (need <= remaining) {\n            return Arrays.asList(num + need, remaining - need);\n        } else {\n            return Arrays.asList(num + remaining, 0);\n        }\n    }\n}\n",
            "class Global {\n    public static int doAlgebra(List<String> operators, List<Integer> operands) {\n        List<String> ops = new ArrayList<>(operators);\n        List<Integer> nums = new ArrayList<>(operands);\n        int i = ops.size() - 1;\n        while (i >= 0) {\n            if (ops.get(i).equals(\"**\")) {\n                nums.set(i, (int) Math.pow(nums.get(i), nums.get(i + 1)));\n                nums.remove(i + 1);\n                ops.remove(i);\n            }\n            i--;\n        }\n        i = 0;\n        while (i < ops.size()) {\n            if (ops.get(i).equals(\"*\")) {\n                nums.set(i, nums.get(i) * nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            } else if (ops.get(i).equals(\"//\")) {\n                nums.set(i, nums.get(i) / nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            }\n            i++;\n        }\n        i = 0;\n        while (i < ops.size()) {\n            if (ops.get(i).equals(\"+\")) {\n                nums.set(i, nums.get(i) + nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            } else if (ops.get(i).equals(\"-\")) {\n                nums.set(i, nums.get(i) - nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            }\n            i++;\n        }\n        return nums.get(0);\n    }\n}\n",
            "class Global {\n    public static String solve(String s) {\n        if (!hasAlpha(s)) {\n            return reverseString(s);\n        }\n        StringBuilder result = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (!Character.isLetter(ch)) {\n                result.append(ch);\n            } else if (Character.isUpperCase(ch)) {\n                result.append(Character.toLowerCase(ch));\n            } else {\n                result.append(Character.toUpperCase(ch));\n            }\n        }\n        return result.toString();\n    }\n\n    private static boolean hasAlpha(String s) {\n        for (char ch : s.toCharArray()) {\n            if (Character.isLetter(ch)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private static String reverseString(String s) {\n        char[] chars = s.toCharArray();\n        int i = 0, j = chars.length - 1;\n        while (i < j) {\n            char temp = chars[i];\n            chars[i] = chars[j];\n            chars[j] = temp;\n            i++;\n            j--;\n        }\n        return new String(chars);\n    }\n}\n",
            "class Global {\n    public static Optional<String> stringToMd5(String txt) {\n        if (txt == null || txt.isEmpty()) {\n            return Optional.empty();\n        }\n        MessageDigest md5Hash = MD5.getInstance();\n        byte[] txtBytes = txt.getBytes();\n        md5Hash.update(txtBytes);\n        byte[] digest = md5Hash.digest();\n        String md5Encoded = DatatypeConverter.printHexBinary(digest).toLowerCase();\n        return Optional.of(md5Encoded);\n    }\n}\n",
            "class Global {\n    public static List<Integer> generateIntegers(int a, int b) {\n        int lower = Math.max(2, Math.min(a, b));\n        int upper = Math.min(8, Math.max(a, b));\n        List<Integer> result = new ArrayList<>();\n        for (int i = lower; i <= upper; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}\n"
        ]
    }
}