{
    "python": {
        "go": [
            "func HasCloseElements(numbers []float64, threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            if math.Abs(numbers[i]-numbers[j]) < threshold {\n                return true\n            }\n        }\n    }\n    return false\n}\n",
            "func SeparateParenGroups(parenString string) []string {\n    groups := []string{}\n    stk := []rune{}\n    currentGroup := \"\"\n    parens := strings.ReplaceAll(parenString, \" \", \"\")\n\n    for _, ch := range parens {\n        if ch == '(' {\n            stk = append(stk, ch)\n            currentGroup += string(ch)\n        } else if ch == ')' {\n            stk = stk[:len(stk)-1]\n            currentGroup += string(ch)\n            if len(stk) == 0 {\n                groups = append(groups, currentGroup)\n                currentGroup = \"\"\n            }\n        }\n    }\n\n    return groups\n}\n",
            "func TruncateNumber(num float64) float64 {\n    return num - math.Floor(num)\n}\n",
            "func BelowZero(operations []int) bool {\n    balance := 0\n    for _, op := range operations {\n        balance += op\n        if balance < 0 {\n            return true\n        }\n    }\n    return false\n}\n",
            "func MeanAbsoluteDeviation(numbers []float64) float64 {\n    var sum float64\n    for _, number := range numbers {\n        sum += number\n    }\n    mean := sum / float64(len(numbers))\n\n    var deviation float64\n    for _, number := range numbers {\n        deviation += math.Abs(number - mean)\n    }\n\n    return deviation / float64(len(numbers))\n}\n",
            "func Intersperse(numbers []int, delimiter int) []int {\n    var result []int\n    for i, number := range numbers {\n        if i != 0 {\n            result = append(result, delimiter)\n        }\n        result = append(result, number)\n    }\n    return result\n}\n",
            "func ParseNestedParens(parenString string) []int {\n    result := []int{}\n    parenGroups := strings.Split(parenString, \" \")\n    for _, group := range parenGroups {\n        maxDepth := 0\n        depth := 0\n        for _, ch := range group {\n            if ch == '(' {\n                depth++\n                if depth > maxDepth {\n                    maxDepth = depth\n                }\n            } else if ch == ')' {\n                depth--\n            }\n        }\n        result = append(result, maxDepth)\n    }\n    return result\n}\n",
            "func FilterBySubstring(strs []string, substring string) []string {\n    var result []string\n    for _, s := range strs {\n        if strings.Contains(s, substring) {\n            result = append(result, s)\n        }\n    }\n    return result\n}\n",
            "func SumProduct(numbers []int) []int {\n    n_sum := 0\n    n_product := 1\n    for _, num := range numbers {\n        n_sum += num\n        n_product *= num\n    }\n    return []int{n_sum, n_product}\n}\n",
            "func RollingMax(numbers []int) []int {\n    maxSoFar := math.MinInt64\n    result := []int{}\n    for _, num := range numbers {\n        if num > maxSoFar {\n            maxSoFar = num\n        }\n        result = append(result, maxSoFar)\n    }\n    return result\n}\n",
            "func MakePalindrome(s string) string {\n    if s == reverseString(s) {\n        return s\n    }\n    for i := 0; i < len(s); i++ {\n        if s[i:] == reverseString(s[i:]) {\n            return s + reverseString(s[:i])\n        }\n    }\n    return \"\"\n}\n\nfunc reverseString(str string) string {\n    runes := []rune(str)\n    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        runes[i], runes[j] = runes[j], runes[i]\n    }\n    return string(runes)\n}\n",
            "func StringXor(a string, b string) string {\n    result := \"\"\n    for i := range a {\n        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n            result += \"1\"\n        }\n    }\n    return result\n}\n",
            "func Longest(strs []string) *string {\n    if len(strs) == 0 {\n        return nil\n    }\n    longestS := strs[0]\n    for _, s := range strs {\n        if len(s) > len(longestS) {\n            longestS = s\n        }\n    }\n    return &longestS\n}\n",
            "func GreatestCommonDivisor(a int, b int) int {\n    if b == 0 {\n        return a\n    } else {\n        return GreatestCommonDivisor(b, a % b)\n    }\n}\n",
            "func AllPrefixes(s string) []string {\n    prefixes := []string{}\n    for i := 0; i < len(s); i++ {\n        prefixes = append(prefixes, s[0:i+1])\n    }\n    return prefixes\n}\n",
            "func StringSequence(n int) string {\n    result := \"\"\n    for i := 0; i <= n; i++ {\n        result += strconv.Itoa(i)\n        if i < n {\n            result += \" \"\n        }\n    }\n    return result\n}\n",
            "func CountDistinctCharacters(s string) int {\n    charMap := make(map[rune]bool)\n    for _, char := range s {\n        charMap[char] = true\n    }\n    return len(charMap)\n}\n",
            "func ParseMusic(musicString string) []int {\n    durations := map[string]int{\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes := strings.Fields(musicString)\n    var result []int\n    for _, note := range notes {\n        if duration, exists := durations[note]; exists {\n            result = append(result, duration)\n        }\n    }\n    return result\n}\n",
            "```\nfunc HowManyTimes(s string, substring string) int {\n    times := 0\n    for i := 0; i <= len(s)-len(substring); i++ {\n        if s[i:i+len(substring)] == substring {\n            times++\n        }\n    }\n    return times\n}\n```",
            "func SortNumbers(numbers string) string {\n    numDict := map[string]int{\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    numList := strings.Fields(numbers)\n    var validNums []string\n    for _, x := range numList {\n        if _, ok := numDict[x]; ok {\n            validNums = append(validNums, x)\n        }\n    }\n    sort.Slice(validNums, func(i, j int) bool {\n        return numDict[validNums[i]] < numDict[validNums[j]]\n    })\n    return strings.Join(validNums, \" \")\n}\n",
            "func FindClosestElements(numbers []float64) []float64 {\n    sort.Float64s(numbers)\n    minDiff := math.Inf(1)\n    var closestPair []float64\n    \n    for i := 1; i < len(numbers); i++ {\n        diff := numbers[i] - numbers[i-1]\n        if diff < minDiff {\n            minDiff = diff\n            closestPair = []float64{numbers[i-1], numbers[i]}\n        }\n    }\n    \n    return closestPair\n}\n",
            "func RescaleToUnit(numbers []float64) []float64 {\n    minNum := numbers[0]\n    maxNum := numbers[0]\n    for _, num := range numbers {\n        if num < minNum {\n            minNum = num\n        }\n        if num > maxNum {\n            maxNum = num\n        }\n    }\n    if minNum == maxNum {\n        result := make([]float64, len(numbers))\n        for i := range result {\n            result[i] = 0.0\n        }\n        return result\n    } else {\n        result := make([]float64, len(numbers))\n        for i, num := range numbers {\n            result[i] = (num - minNum) / (maxNum - minNum)\n        }\n        return result\n    }\n}\n",
            "func FilterIntegers(values []interface{}) []int {\n    var result []int\n    for _, v := range values {\n        if num, ok := v.(int); ok {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
            "func StrLength(s string) int {\n    return len(s)\n}\n",
            "func LargestDivisor(n int) int {\n\tfor i := 2; i < n; i++ {\n\t\tif n%i == 0 {\n\t\t\treturn n / i\n\t\t}\n\t}\n\treturn 1\n}\n",
            "func Factorize(n int) []int {\n    factors := []int{}\n    divisor := 2\n    for divisor <= n {\n        if n % divisor == 0 {\n            factors = append(factors, divisor)\n            n /= divisor\n        } else {\n            divisor += 1\n        }\n    }\n    return factors\n}\n",
            "func RemoveDuplicates(numbers []int) []int {\n    counts := make(map[int]int)\n    for _, num := range numbers {\n        counts[num]++\n    }\n    var res []int\n    for _, num := range numbers {\n        if counts[num] == 1 {\n            res = append(res, num)\n        }\n    }\n    return res\n}\n",
            "func FlipCase(s string) string {\n    flipped := []rune{}\n    for _, ch := range s {\n        if !unicode.IsLetter(ch) {\n            flipped = append(flipped, ch)\n        } else if unicode.IsLower(ch) {\n            flipped = append(flipped, unicode.ToUpper(ch))\n        } else if unicode.IsUpper(ch) {\n            flipped = append(flipped, unicode.ToLower(ch))\n        }\n    }\n    return string(flipped)\n}\n",
            "func Concatenate(strs []string) string {\n\treturn strings.Join(strs, \"\")\n}\n",
            "func FilterByPrefix(strs []string, prefixStr string) []string {\n    var result []string\n    for _, s := range strs {\n        if strings.HasPrefix(s, prefixStr) {\n            result = append(result, s)\n        }\n    }\n    return result\n}\n",
            "func GetPositive(l []int) []int {\n    var positiveNumbers []int\n    for _, num := range l {\n        if num > 0 {\n            positiveNumbers = append(positiveNumbers, num)\n        }\n    }\n    return positiveNumbers\n}\n",
            "func IsPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func Poly(xs []int, x float64) float64 {\n    res := 0.0\n    for i, coeff := range xs {\n        res += float64(coeff) * math.Pow(x, float64(i))\n    }\n    return res\n}\n\nfunc FindZero(xs []int) float64 {\n    x1, x2 := 1.0, -1.0\n    for Poly(xs, x1)*Poly(xs, x2) > 0 {\n        x1 *= 2\n        x2 *= 2\n    }\n    for math.Abs(x1-x2) > 1e-10 {\n        mid := (x1 + x2) / 2.0\n        if Poly(xs, mid) == 0 {\n            return mid\n        } else if Poly(xs, mid)*Poly(xs, x1) < 0 {\n            x2 = mid\n        } else {\n            x1 = mid\n        }\n    }\n    return (x1 + x2) / 2.0\n}\n",
            "func SortThird(l []int) []int {\n    var sortedThird []int\n    for i := 0; i < len(l); i++ {\n        if i % 3 == 0 {\n            sortedThird = append(sortedThird, l[i])\n        }\n    }\n    sort.Ints(sortedThird)\n    \n    result := make([]int, len(l))\n    for i := 0; i < len(l); i++ {\n        if i % 3 == 0 {\n            result[i] = sortedThird[i / 3]\n        } else {\n            result[i] = l[i]\n        }\n    }\n    return result\n}\n",
            "func ListUnique(l []int) []int {\n    uniqueMap := make(map[int]bool)\n    var result []int\n\n    for _, value := range l {\n        if _, exists := uniqueMap[value]; !exists {\n            uniqueMap[value] = true\n            result = append(result, value)\n        }\n    }\n\n    sort.Ints(result)\n    return result\n}\n",
            "func MaxElement(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n",
            "func FizzBuzz(n int) int {\n    cnt := 0\n    for i := 0; i < n; i++ {\n        if i%11 == 0 || i%13 == 0 {\n            cnt += countSevens(i)\n        }\n    }\n    return cnt\n}\n\nfunc countSevens(num int) int {\n    count := 0\n    for num > 0 {\n        if num%10 == 7 {\n            count++\n        }\n        num /= 10\n    }\n    return count\n}\n",
            "func SortEven(l []int) []int {\n    var sorted_even []int\n    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n            sorted_even = append(sorted_even, l[i])\n        }\n    }\n    sort.Ints(sorted_even)\n    result := make([]int, len(l))\n    evenIndex := 0\n    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n            result[i] = sorted_even[evenIndex]\n            evenIndex++\n        } else {\n            result[i] = l[i]\n        }\n    }\n    return result\n}\n",
            "func EncodeCyclic(s string) string {\n    var result []byte\n    for i := 0; i < len(s); i += 3 {\n        if i+3 > len(s) {\n            result = append(result, s[i:]...)\n        } else {\n            result = append(result, s[i+1], s[i+2])\n            result = append(result, s[i])\n        }\n    }\n    return string(result)\n}\n\nfunc DecodeCyclic(s string) string {\n    return EncodeCyclic(EncodeCyclic(s))\n}\n",
            "func isPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc PrimeFib(n int) int {\n    f := []int{0, 1}\n    cnt := 0\n    for cnt < n {\n        f = append(f[1:], f[0]+f[1])\n        if isPrime(f[1]) {\n            cnt++\n        }\n    }\n    return f[1]\n}\n",
            "func TriplesSumToZero(l []int) bool {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            for k := j + 1; k < len(l); k++ {\n                if l[i]+l[j]+l[k] == 0 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n",
            "func CarRaceCollision(n int) int {\n    return n * n\n}\n",
            "func IncrList(l []int) []int {\n    for i := range l {\n        l[i]++\n    }\n    return l\n}\n",
            "func PairsSumToZero(l []int) bool {\n    seen := make(map[int]bool)\n    for _, num := range l {\n        if seen[-num] {\n            return true\n        }\n        seen[num] = true\n    }\n    return false\n}\n",
            "func ChangeBase(x int, bas int) string {\n    if x == 0 {\n        return \"0\"\n    }\n    digits := []string{}\n    for x > 0 {\n        digits = append(digits, fmt.Sprintf(\"%d\", x%bas))\n        x /= bas\n    }\n    for i, j := 0, len(digits)-1; i < j; i, j = i+1, j-1 {\n        digits[i], digits[j] = digits[j], digits[i]\n    }\n    return strings.Join(digits, \"\")\n}\n",
            "func TriangleArea(a int, h int) float64 {\n    return float64(a) * float64(h) / 2.0\n}\n",
            "func Fib4(n int) int {\n    fib := [4]int{0, 0, 2, 0}\n    for i := 4; i <= n; i++ {\n        fib[i%4] = fib[0] + fib[1] + fib[2] + fib[3]\n    }\n    return fib[n%4]\n}\n",
            "func Median(l []float64) float64 {\n    sort.Float64s(l)\n    n := len(l)\n    if n%2 != 0 {\n        return l[n/2]\n    } else {\n        return (l[n/2] + l[n/2-1]) / 2.0\n    }\n}\n",
            "func IsPalindrome(txt string) bool {\n    return txt == reverseString(txt)\n}\n\nfunc reverseString(s string) string {\n    runes := []rune(s)\n    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        runes[i], runes[j] = runes[j], runes[i]\n    }\n    return string(runes)\n}\n",
            "func Modp(n int, p int) int {\n    ret := 1\n    for i := 0; i < n; i++ {\n        ret = (ret * 2) % p\n    }\n    return ret\n}\n",
            "func EncodeShift(s string) string {\n    result := make([]byte, len(s))\n    for i, ch := range s {\n        result[i] = byte(((ch - 'a' + 5) % 26 + 'a'))\n    }\n    return string(result)\n}\n\nfunc DecodeShift(s string) string {\n    result := make([]byte, len(s))\n    for i, ch := range s {\n        result[i] = byte(((ch - 'a' + 21) % 26 + 'a'))\n    }\n    return string(result)\n}\n",
            "func RemoveVowels(txt string) string {\n    vowels := \"aeiouAEIOU\"\n    result := \"\"\n    for _, char := range txt {\n        if !strings.ContainsRune(vowels, char) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
            "func BelowThreshold(l []int, t int) bool {\n    for _, x := range l {\n        if x >= t {\n            return false\n        }\n    }\n    return true\n}\n",
            "func Add(x int, y int) int {\n    return x + y\n}\n",
            "func SameChars(s0 string, s1 string) bool {\n    set0 := make(map[rune]bool)\n    set1 := make(map[rune]bool)\n\n    for _, char := range s0 {\n        set0[char] = true\n    }\n    for _, char := range s1 {\n        set1[char] = true\n    }\n\n    if len(set0) != len(set1) {\n        return false\n    }\n\n    for char := range set0 {\n        if !set1[char] {\n            return false\n        }\n    }\n\n    return true\n}\n",
            "func Fib(n int) int {\n    if n <= 1 {\n        return n\n    } else {\n        return Fib(n - 1) + Fib(n - 2)\n    }\n}\n",
            "func CorrectBracketing(brackets string) bool {\n    depth := 0\n    for _, b := range brackets {\n        if b == '<' {\n            depth += 1\n        } else if b == '>' {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "func Monotonic(l []int) bool {\n    if len(l) < 2 {\n        return true\n    }\n    \n    increasing := true\n    decreasing := true\n    \n    for i := 1; i < len(l); i++ {\n        if l[i] > l[i-1] {\n            decreasing = false\n        } else if l[i] < l[i-1] {\n            increasing = false\n        }\n    }\n    \n    return increasing || decreasing\n}\n",
            "func Common(l1 []int, l2 []int) []int {\n    m := make(map[int]bool)\n    var result []int\n\n    for _, v := range l1 {\n        m[v] = true\n    }\n\n    for _, v := range l2 {\n        if m[v] {\n            m[v] = false\n            result = append(result, v)\n        }\n    }\n\n    return result\n}\n",
            "func LargestPrimeFactor(n int) int {\n    i := 2\n    for i * i <= n {\n        if n % i != 0 {\n            i += 1\n        } else {\n            n /= i\n        }\n    }\n    return n\n}\n",
            "func SumToN(n int) int {\n    sum := 0\n    for i := 0; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n",
            "func CorrectBracketing(brackets string) bool {\n    depth := 0\n    for _, b := range brackets {\n        if b == '(' {\n            depth++\n        } else if b == ')' {\n            depth--\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "func Derivative(xs []int) []int {\n    result := make([]int, len(xs)-1)\n    for i := 1; i < len(xs); i++ {\n        result[i-1] = xs[i] * i\n    }\n    return result\n}\n",
            "func Fibfib(n int) int {\n    if n <= 1 {\n        return 0 \n    }\n    a, b, c := 0, 0, 1\n    for n > 2 {\n        a, b, c = b, c, a + b + c\n        n--\n    }\n    return c\n}\n",
            "func VowelsCount(s string) int {\n    vowels := \"aeiou\"\n    cnt := 0\n    for i := range s {\n        if strings.ContainsRune(vowels, unicode.ToLower(rune(s[i]))) || (i == len(s)-1 && unicode.ToLower(rune(s[i])) == 'y') {\n            cnt++\n        }\n    }\n    return cnt\n}\n",
            "func CircularShift(x int, shift int) string {\n    x_str := strconv.Itoa(x)\n    if shift > len(x_str) {\n        return reverseString(x_str)\n    } else {\n        n := len(x_str)\n        return x_str[n-shift:] + x_str[:n-shift]\n    }\n}\n\nfunc reverseString(s string) string {\n    runes := []rune(s)\n    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        runes[i], runes[j] = runes[j], runes[i]\n    }\n    return string(runes)\n}\n",
            "func DigitSum(s string) int {\n    sum := 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c)\n        }\n    }\n    return sum\n}\n",
            "func FruitDistribution(s string, n int) int {\n    words := strings.Split(s, \" \")\n    applesIndex := slices.Index(words, \"apples\")\n    orangesIndex := slices.Index(words, \"oranges\")\n    apples := strconv.Atoi(words[applesIndex-1])\n    oranges := strconv.Atoi(words[orangesIndex-1])\n    return n - apples - oranges\n}\n",
            "func Pluck(arr []int) []int {\n    evens := make([]int, 0)\n    for _, n := range arr {\n        if n%2 == 0 {\n            evens = append(evens, n)\n        }\n    }\n    if len(evens) == 0 {\n        return []int{}\n    }\n    \n    min_even := evens[0]\n    index := -1\n    for i, n := range arr {\n        if n == min_even {\n            index = i\n            break\n        }\n    }\n    return []int{min_even, index}\n}\n",
            "func Search(lst []int) int {\n    freqs := make(map[int]int)\n    for _, n := range lst {\n        freqs[n]++\n    }\n    var goodVals []int\n    for k, v := range freqs {\n        if v >= k {\n            goodVals = append(goodVals, k)\n        }\n    }\n    if len(goodVals) == 0 {\n        return -1\n    }\n    maxVal := goodVals[0]\n    for _, val := range goodVals {\n        if val > maxVal {\n            maxVal = val\n        }\n    }\n    return maxVal\n}\n",
            "func StrangeSortList(lst []int) []int {\n    sl := make([]int, len(lst))\n    copy(sl, lst)\n    sort.Ints(sl)\n    result := []int{}\n    left, right := 0, len(sl) - 1\n    for left <= right {\n        result = append(result, sl[left])\n        left++\n        if left <= right {\n            result = append(result, sl[right])\n            right--\n        }\n    }\n    return result\n}\n",
            "func TriangleArea(a int, b int, c int) float64 {\n    if a+b > c && a+c > b && b+c > a {\n        s := float64(a+b+c) / 2.0\n        return math.Sqrt(s * (s - float64(a)) * (s - float64(b)) * (s - float64(c)))\n    } else {\n        return -1.0\n    }\n}\n",
            "func WillItFly(q []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n    total := 0\n    isPalin := true\n    for i, e := range q {\n        total += e\n        if e != q[len(q)-i-1] {\n            isPalin = false\n            break\n        }\n    }\n    return isPalin && total <= w\n}\n",
            "func SmallestChange(arr []int) int {\n    ans := 0\n    for i := 0; i < len(arr)/2; i++ {\n        if arr[i] != arr[len(arr)-i-1] {\n            ans++\n        }\n    }\n    return ans\n}\n",
            "func TotalMatch(lst1 []string, lst2 []string) []string {\n    cnt1, cnt2 := 0, 0\n    for _, str := range lst1 {\n        cnt1 += len(str)\n    }\n    for _, str := range lst2 {\n        cnt2 += len(str)\n    }\n    if cnt1 <= cnt2 {\n        return lst1\n    } else {\n        return lst2\n    }\n}\n",
            "func IsPrime(n int) bool {\n\tif n < 2 {\n\t\treturn false\n\t}\n\tfor i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n\t\tif n%i == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc IsMultiplyPrime(a int) bool {\n\tcnt := 0\n\tfor i := 2; i <= a; i++ {\n\t\tif IsPrime(i) {\n\t\t\tfor a%i == 0 {\n\t\t\t\tcnt++\n\t\t\t\ta /= i\n\t\t\t}\n\t\t}\n\t}\n\treturn cnt == 3\n}\n",
            "func IsSimplePower(x int, n int) bool {\n    if n < 2 {\n        return x == n\n    }\n    tmp := 1\n    for tmp < x {\n        tmp *= n\n    }\n    return tmp == x\n}\n",
            "func IsCube(a int) bool {\n    a = Abs(a)\n    root := Int(math.Round(math.Cbrt(float64(a))))\n    return root*root*root == a\n}\nfunc Abs(x int) int {\n    if x < 0 {\n        return -x\n    }\n    return x\n}\nfunc Int(x float64) int {\n    return int(x)\n}\n",
            "func HexKey(num string) int {\n    count := 0\n    for _, char := range num {\n        switch char {\n        case '2', '3', '5', '7', 'B', 'D':\n            count++\n        }\n    }\n    return count\n}\n",
            "func DecimalToBinary(dec int) string {\n    binary := fmt.Sprintf(\"%b\", dec)\n    return \"db\" + binary + \"db\"\n}\n",
            "func IsHappy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n    for i := 0; i < len(s)-2; i++ {\n        if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return true\n}\n",
            "func NumericalLetterGrade(grades []float64) []string {\n    result := []string{}\n    for _, g := range grades {\n        if g == 4.0 {\n            result = append(result, \"A+\")\n        } else if g > 3.7 {\n            result = append(result, \"A\")\n        } else if g > 3.3 {\n            result = append(result, \"A-\")\n        } else if g > 3.0 {\n            result = append(result, \"B+\")\n        } else if g > 2.7 {\n            result = append(result, \"B\")\n        } else if g > 2.3 {\n            result = append(result, \"B-\")\n        } else if g > 2.0 {\n            result = append(result, \"C+\")\n        } else if g > 1.7 {\n            result = append(result, \"C\")\n        } else if g > 1.3 {\n            result = append(result, \"C-\")\n        } else if g > 1.0 {\n            result = append(result, \"D+\")\n        } else if g > 0.7 {\n            result = append(result, \"D\")\n        } else if g > 0.0 {\n            result = append(result, \"D-\")\n        } else {\n            result = append(result, \"E\")\n        }\n    }\n    return result\n}\n",
            "func PrimeLength(s string) bool {\n    length := len(s)\n    if length < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Sqrt(float64(length))); i++ {\n        if length % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func StartsOneEnds(n int) int {\n    if n == 1 {\n        return 1\n    }\n    return 2 * 9 * int(math.Pow(10, float64(n-2)))\n}\n",
            "func Solve(n int) string {\n    digitsSum := 0\n    for n > 0 {\n        digitsSum += n % 10\n        n /= 10\n    }\n    return fmt.Sprintf(\"%b\", digitsSum)\n}\n",
            "func Add(lst []int) int {\n    sum := 0\n    for i, x := range lst {\n        if i%2 != 0 && x%2 == 0 {\n            sum += x\n        }\n    }\n    return sum\n}\n",
            "func AntiShuffle(s string) string {\n    words := strings.Split(s, \" \")\n    for i, word := range words {\n        runes := []rune(word)\n        sort.Slice(runes, func(i, j int) bool {\n            return runes[i] < runes[j]\n        })\n        words[i] = string(runes)\n    }\n    return strings.Join(words, \" \")\n}\n",
            "func GetRow(lst [][]int, x int) [][]int {\n    var coords [][]int\n    for i, row := range lst {\n        for j, value := range row {\n            if value == x {\n                coords = append(coords, []int{i, j})\n            }\n        }\n    }\n    sort.Slice(coords, func(i, j int) bool {\n        if coords[i][0] != coords[j][0] {\n            return coords[i][0] < coords[j][0]\n        }\n        return coords[i][1] > coords[j][1]\n    })\n    return coords\n}\n",
            "func SortArray(arr []int) []int {\n    if len(arr) == 0 {\n        return []int{}\n    }\n    if (arr[0] + arr[len(arr)-1]) % 2 == 0 {\n        sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n        return arr\n    }\n    sort.Ints(arr)\n    return arr\n}\n",
            "func Encrypt(s string) string {\n    result := []rune{}\n    for _, ch := range s {\n        shifted := ch + 4\n        if shifted > 'z' {\n            shifted -= 26\n        }\n        result = append(result, shifted)\n    }\n    return string(result)\n}\n",
            "func NextSmallest(lst []int) *int {\n    sl := make(map[int]bool)\n    for _, v := range lst {\n        sl[v] = true\n    }\n    \n    var unique []int\n    for k := range sl {\n        unique = append(unique, k)\n    }\n    \n    sort.Ints(unique)\n    \n    if len(unique) < 2 {\n        return nil\n    }\n    \n    return &unique[1]\n}\n",
            "func IsBored(s string) int {\n    sentences := strings.FieldsFunc(s, func(r rune) bool {\n        return r == '.' || r == '!' || r == '?'\n    })\n    count := 0\n    for _, sentence := range sentences {\n        if len(sentence) > 1 && sentence[:2] == \"I \" {\n            count++\n        }\n    }\n    return count\n}\n",
            "func AnyInt(x interface{}, y interface{}, z interface{}) bool {\n    if xi, ok1 := x.(int); ok1 &&\n       yi, ok2 := y.(int); ok2 &&\n       zi, ok3 := z.(int); ok3 {\n        return (xi+yi == zi) || (xi+zi == yi) || (yi+zi == xi)\n    }\n    return false\n}\n",
            "func Encode(message string) string {\n    vowels := \"aeiouAEIOU\"\n    var result []byte\n    for _, ch := range message {\n        if (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') {\n            if ch >= 'a' && ch <= 'z' {\n                ch = ch - ('a' - 'A')\n            } else {\n                ch = ch + ('a' - 'A')\n            }\n            ch1 := byte(ch)\n            if strings.ContainsRune(vowels, rune(ch1)) {\n                ch1 = (ch1 + 2) % 256\n            }\n            result = append(result, ch1)\n        } else {\n            result = append(result, byte(ch))\n        }\n    }\n    return string(result)\n}\n",
            "func Skjkasdkd(lst []int) int {\n    var primes []int\n    for _, n := range lst {\n        if n < 2 {\n            continue\n        }\n        isPrime := true\n        for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n            if n%i == 0 {\n                isPrime = false\n                break\n            }\n        }\n        if isPrime {\n            primes = append(primes, n)\n        }\n    }\n    if len(primes) == 0 {\n        return 0\n    }\n    largest := fmt.Sprintf(\"%d\", max(primes))\n    sum := 0\n    for _, digit := range largest {\n        sum += int(digit - '0')\n    }\n    return sum\n}\n\nfunc max(a []int) int {\n    if len(a) == 0 {\n        return 0\n    }\n    m := a[0]\n    for _, v := range a {\n        if v > m {\n            m = v\n        }\n    }\n    return m\n}\n",
            "func CheckDictCase(d map[string]string) bool {\n    if len(d) == 0 {\n        return false\n    }\n    allLower := true\n    allUpper := true\n    for key := range d {\n        for _, c := range key {\n            if unicode.IsLetter(c) && !unicode.IsLower(c) {\n                allLower = false\n            }\n            if unicode.IsLetter(c) && !unicode.IsUpper(c) {\n                allUpper = false\n            }\n        }\n    }\n    return allLower || allUpper\n}\n",
            "func CountUpTo(n int) []int {\n    var primes []int\n    for num := 2; num < n; num++ {\n        isPrime := true\n        for _, p := range primes {\n            if num%p == 0 {\n                isPrime = false\n                break\n            }\n        }\n        if isPrime {\n            primes = append(primes, num)\n        }\n    }\n    return primes\n}\n",
            "func Multiply(a int, b int) int {\n    return (abs(a) % 10) * (abs(b) % 10)\n}\nfunc abs(x int) int {\n    if x < 0 {\n        return -x\n    }\n    return x\n}\n",
            "func CountUpper(s string) int {\n    vowels := \"AEIOU\"\n    count := 0\n    for i, c := range s {\n        if i%2 == 0 && strings.ContainsRune(vowels, c) {\n            count++\n        }\n    }\n    return count\n}\n",
            "func ClosestInteger(value string) int {\n    num, _ := strconv.ParseFloat(value, 64)\n    if num >= 0 {\n        return int(num + 0.5)\n    } else {\n        return int(num - 0.5)\n    }\n}\n",
            "func MakeAPile(n int) []int {\n    pile := make([]int, n)\n    for i := 0; i < n; i++ {\n        pile[i] = n + 2*i\n    }\n    return pile\n}\n",
            "func WordsString(s string) []string {\n    return strings.FieldsFunc(s, func(c rune) bool {\n        return c == ',' || c == ' '\n    })\n}\n",
            "func ChooseNum(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if y%2 == 0 {\n        return y\n    }\n    if x != y {\n        return y - 1\n    }\n    return -1\n}\n",
            "func RoundedAvg(n int, m int) *string {\n\tif n > m {\n\t\treturn nil\n\t}\n\tr_avg := ((m + n) / 2.0)\n\tr_avg = math.Round(r_avg)\n\tresult := strconv.Itoa(int(r_avg))\n\treturn &result\n}\n",
            "func allDigitsOdd(s string) bool {\n    for _, digit := range s {\n        if digit%2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc UniqueDigits(x []int) []int {\n    var result []int\n    for _, num := range x {\n        if allDigitsOdd(fmt.Sprintf(\"%d\", num)) {\n            result = append(result, num)\n        }\n    }\n    sort.Ints(result)\n    return result\n}\n",
            "func ByLength(arr []int) []string {\n    digitNames := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n    var sortedArr []int\n    for _, x := range arr {\n        if x >= 1 && x <= 9 {\n            sortedArr = append(sortedArr, x)\n        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(sortedArr)))\n    result := make([]string, len(sortedArr))\n    for i, x := range sortedArr {\n        result[i] = digitNames[x-1]\n    }\n    return result\n}\n",
            "func F(n int) []int {\n    nums := make([]int, n)\n    for i := 0; i < n; i++ {\n        nums[i] = i + 1\n    }\n    result := make([]int, n)\n    for i := 0; i < n; i++ {\n        if (i + 1) % 2 == 1 {\n            sum := 0\n            for j := 0; j <= i; j++ {\n                sum += nums[j]\n            }\n            result[i] = sum\n        } else {\n            product := 1\n            for j := 0; j <= i; j++ {\n                product *= nums[j]\n            }\n            result[i] = product\n        }\n    }\n    return result\n}\n",
            "func EvenOddPalindrome(n int) []int {\n    cnt := [2]int{0, 0}\n    for i := 1; i <= n; i++ {\n        s := strconv.Itoa(i)\n        if s == reverseString(s) {\n            cnt[i%2]++\n        }\n    }\n    return cnt[:]\n}\n\nfunc reverseString(s string) string {\n    runes := []rune(s)\n    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        runes[i], runes[j] = runes[j], runes[i]\n    }\n    return string(runes)\n}\n",
            "func CountNums(arr []int) int {\n    count := 0\n    for _, n := range arr {\n        if digitsSum(n) > 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc digitsSum(n int) int {\n    nStr := strconv.Itoa(n)\n    if n >= 0 {\n        sum := 0\n        for _, digit := range nStr {\n            sum += int(digit - '0')\n        }\n        return sum\n    } else {\n        return (int(nStr[0]-'0')*2) + digitsSum(int(math.Abs(float64(n))))\n    }\n}\n",
            "func MoveOneBall(arr []int) bool {\n    if len(arr) == 0 {\n        return true\n    }\n    sortedArr := make([]int, len(arr))\n    copy(sortedArr, arr)\n    sort.Ints(sortedArr)\n    for i := 0; i < len(arr); i++ {\n        if reflect.DeepEqual(arr[i:], sortedArr[:len(arr)-i]) && reflect.DeepEqual(arr[:i], sortedArr[len(arr)-i:]) {\n            return true\n        }\n    }\n    return false\n}\n",
            "func CanExchange(lst1 []int, lst2 []int) string {\n    oddCnt := 0\n    for _, num := range lst1 {\n        if num%2 != 0 {\n            oddCnt++\n        }\n    }\n    evenCnt := 0\n    for _, num := range lst2 {\n        if num%2 == 0 {\n            evenCnt++\n        }\n    }\n    if evenCnt >= oddCnt {\n        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n",
            "func Histogram(test string) map[string]int {\n    freq := make(map[string]int)\n    words := strings.Fields(test)\n    for _, w := range words {\n        if len(w) > 0 {\n            freq[w]++\n        }\n    }\n    result := make(map[string]int)\n    if len(freq) != 0 {\n        maxFreq := 0\n        for _, v := range freq {\n            if v > maxFreq {\n                maxFreq = v\n            }\n        }\n        for k, v := range freq {\n            if v == maxFreq {\n                result[k] = v\n            }\n        }\n    }\n    return result\n}\n",
            "func ReverseDelete(s string, c string) []string {\n    s1 := \"\"\n    for _, ch := range s {\n        if !strings.ContainsRune(c, ch) {\n            s1 += string(ch)\n        }\n    }\n    isPalindrome := s1 == reverseString(s1)\n    return []string{s1, strconv.FormatBool(isPalindrome)}\n}\n\nfunc reverseString(s string) string {\n    runes := []rune(s)\n    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        runes[i], runes[j] = runes[j], runes[i]\n    }\n    return string(runes)\n}\n",
            "func OddCount(lst []string) []string {\n    result := []string{}\n    for _, num := range lst {\n        n := 0\n        for _, d := range num {\n            if d%2 == 1 {\n                n++\n            }\n        }\n        rs := \"the number of odd elements in the string i of the input.\"\n        result = append(result, strings.ReplaceAll(rs, \"i\", fmt.Sprintf(\"%d\", n)))\n    }\n    return result\n}\n",
            "func MinSubArraySum(nums []int) int {\n    min_sum := 0\n    cur_sum := 0\n    for _, n := range nums {\n        if cur_sum+n < 0 {\n            cur_sum += n\n        } else {\n            cur_sum = 0\n        }\n        if cur_sum < min_sum {\n            min_sum = cur_sum\n        }\n    }\n    if min_sum == 0 {\n        min_sum = nums[0]\n        for _, n := range nums[1:] {\n            if n < min_sum {\n                min_sum = n\n            }\n        }\n    }\n    return min_sum\n}\n",
            "func MaxFill(grid [][]int, capacity int) int {\n    total := 0\n    for _, arr := range grid {\n        sum := 0\n        for _, num := range arr {\n            sum += num\n        }\n        total += (sum + capacity - 1) / capacity\n    }\n    return total\n}\n",
            "func countOnes(num int) int {\n    count := 0\n    for num > 0 {\n        count += num & 1\n        num >>= 1\n    }\n    return count\n}\n\ntype byBitsAndValue []int\n\nfunc (a byBitsAndValue) Len() int           { return len(a) }\nfunc (a byBitsAndValue) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }\nfunc (a byBitsAndValue) Less(i, j int) bool {\n    bitsI, bitsJ := countOnes(a[i]), countOnes(a[j])\n    if bitsI == bitsJ {\n        return a[i] < a[j]\n    }\n    return bitsI < bitsJ\n}\n\nfunc SortArray(arr []int) []int {\n    sort.Sort(byBitsAndValue(arr))\n    return arr\n}\n",
            "func SelectWords(s string, n int) []string {\n    consonants := \"bcdfghjklmnpqrstvwxyz\"\n    words := strings.Fields(s)\n    var result []string\n    for _, w := range words {\n        if len(strings.TrimSpace(w)) > 0 {\n            count := 0\n            for _, c := range strings.ToLower(w) {\n                if strings.ContainsRune(consonants, c) {\n                    count++\n                }\n            }\n            if count == n {\n                result = append(result, w)\n            }\n        }\n    }\n    return result\n}\n",
            "func GetClosestVowel(word string) string {\n    vowels := \"aeiouAEIOU\"\n    for i := len(word) - 2; i > 0; i-- {\n        if strings.ContainsRune(vowels, rune(word[i])) && !strings.ContainsRune(vowels, rune(word[i-1])) && !strings.ContainsRune(vowels, rune(word[i+1])) {\n            return string(word[i])\n        }\n    }\n    return \"\"\n}\n",
            "func matchParens(lst []string) string {\n\ts1 := lst[0] + lst[1]\n\ts2 := lst[1] + lst[0]\n\treturn \"Yes\" if check(s1) || check(s2) else \"No\"\n}\nfunc check(s string) bool {\n\tdepth := 0\n\tfor _, ch := range s {\n\t\tif ch == '(' {\n\t\t\tdepth += 1\n\t\t} else {\n\t\t\tdepth -= 1\n\t\t}\n\t\tif depth < 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn depth == 0\n}\n",
            "func Maximum(arr []int, k int) []int {\n    if k == 0 {\n        return []int{}\n    }\n    sort.Ints(arr)\n    return arr[len(arr)-k:]\n}\n",
            "func Solution(lst []int) int {\n    sum := 0\n    for i, x := range lst {\n        if i%2 == 0 && x%2 != 0 {\n            sum += x\n        }\n    }\n    return sum\n}\n",
            "func AddElements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k && i < len(arr); i++ {\n        if len(fmt.Sprintf(\"%d\", arr[i])) <= 2 {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n",
            "func GetOddCollatz(n int) []int {\n    collatz := []int{1}\n    for n != 1 {\n        if n % 2 != 0 {\n            collatz = append(collatz, n)\n            n = 3 * n + 1\n        } else {\n            n = n / 2\n        }\n    }\n    sort.Ints(collatz)\n    return collatz\n}\n",
            "func ValidDate(date string) bool {\n    if len(date) != 10 || date[2] != '-' || date[5] != '-' {\n        return false\n    }\n    m := date[:2]\n    d := date[3:5]\n    month, _ := strconv.Atoi(m)\n    day, _ := strconv.Atoi(d)\n    if slices.Contains([]int{1, 3, 5, 7, 8, 10, 12}, month) && day >= 1 && day <= 31 {\n        return true\n    }\n    if slices.Contains([]int{4, 6, 9, 11}, month) && day >= 1 && day <= 30 {\n        return true\n    }\n    if month == 2 && day >= 1 && day <= 29 {\n        return true\n    }\n    return false\n}\n",
            "func SplitWords(txt string) []string {\n    if strings.Contains(txt, \" \") {\n        return strings.Split(txt, \" \")\n    } else if strings.Contains(txt, \",\") {\n        return strings.Split(txt, \",\")\n    } else {\n        count := 0\n        for _, c := range txt {\n            if (c >= 'a' && c <= 'z') && c%2 == 0 {\n                count++\n            }\n        }\n        return []string{strconv.Itoa(count)}\n    }\n}\n",
            "func IsSorted(lst []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    for i := 1; i < len(lst); i++ {\n        if lst[i-1] > lst[i] {\n            return false\n        }\n    }\n    freq := make(map[int]int)\n    for _, i := range lst {\n        freq[i]++\n    }\n    maxFreq := 0\n    for _, count := range freq {\n        if count > maxFreq {\n            maxFreq = count\n        }\n    }\n    return maxFreq <= 2\n}\n",
            "func Intersection(interval1 []int, interval2 []int) string {\n    l := max(interval1[0], interval2[0])\n    r := min(interval1[1], interval2[1])\n    length := r - l\n    if length > 0 && isPrime(length) {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\nfunc isPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}\n",
            "func ProdSigns(arr []int) *int {\n    if len(arr) == 0 {\n        return nil\n    }\n    for _, n := range arr {\n        if n == 0 {\n            return func() *int { x := 0; return &x }()\n        }\n    }\n    negativeCount := 0\n    sumAbs := 0\n    for _, n := range arr {\n        if n < 0 {\n            negativeCount++\n        }\n        sumAbs += abs(n)\n    }\n    sign := 1\n    if negativeCount%2 == 1 {\n        sign = -1\n    }\n    result := sign * sumAbs\n    return &result\n}\n\nfunc abs(x int) int {\n    if x < 0 {\n        return -x\n    }\n    return x\n}\n",
            "func MinPath(grid [][]int, k int) []int {\n    n := len(grid)\n    minVal := n*n + 1\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if grid[i][j] == 1 {\n                temp := []int{}\n                if i != 0 {\n                    temp = append(temp, grid[i-1][j])\n                }\n                if j != 0 {\n                    temp = append(temp, grid[i][j-1])\n                }\n                if i != n-1 {\n                    temp = append(temp, grid[i+1][j])\n                }\n                if j != n-1 {\n                    temp = append(temp, grid[i][j+1])\n                }\n                for _, v := range temp {\n                    if v < minVal {\n                        minVal = v\n                    }\n                }\n            }\n        }\n    }\n    result := make([]int, k)\n    for i := 0; i < k; i++ {\n        if i%2 == 0 {\n            result[i] = 1\n        } else {\n            result[i] = minVal\n        }\n    }\n    return result\n}\n",
            "func Tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n    }\n    seq := []int{1, 3}\n    for i := 2; i <= n; i++ {\n        if i%2 == 0 {\n            seq = append(seq, i/2+1)\n        } else {\n            seq = append(seq, seq[i-1]+seq[i-2]+(i+3)/2)\n        }\n    }\n    return seq\n}\n",
            "func Digits(n int) int {\n    odds := []int{}\n    for n > 0 {\n        d := n % 10\n        if d%2 != 0 {\n            odds = append(odds, d)\n        }\n        n /= 10\n    }\n    if len(odds) == 0 {\n        return 0\n    }\n    product := 1\n    for _, d := range odds {\n        product *= d\n    }\n    return product\n}\n",
            "func IsNested(s string) bool {\n    openIdx := []int{}\n    closeIdx := []int{}\n    \n    for i, ch := range s {\n        if ch == '[' {\n            openIdx = append(openIdx, i)\n        } else if ch == ']' {\n            closeIdx = append(closeIdx, i)\n        }\n    }\n    \n    l := len(closeIdx)\n    for i := 0; i < l/2; i++ {\n        closeIdx[i], closeIdx[l-1-i] = closeIdx[l-1-i], closeIdx[i]\n    }\n    \n    cnt := 0\n    i := 0\n    \n    for _, idx := range openIdx {\n        if i < l && idx < closeIdx[i] {\n            cnt++\n            i++\n        }\n    }\n    \n    return cnt >= 2\n}\n",
            "func SumSquares(lst []float64) int {\n    sum := 0\n    for _, n := range lst {\n        sum += int(math.Ceil(n) * math.Ceil(n))\n    }\n    return sum\n}\n",
            "func CheckIfLastCharIsALetter(txt string) bool {\n    if len(txt) == 0 {\n        return false\n    }\n    last := txt[txt.rfind(' ') + 1:]\n    return len(last) == 1 && last[0] >= 'a' && last[0] <= 'z' || last[0] >= 'A' && last[0] <= 'Z'\n}\n",
            "func CanArrange(arr []int) int {\n    if len(arr) <= 1 {\n        return -1\n    }\n    idx := []int{}\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < arr[i-1] {\n            idx = append(idx, i)\n        }\n    }\n    if len(idx) == 0 {\n        return -1\n    }\n    maxIdx := idx[0]\n    for _, value := range idx {\n        if value > maxIdx {\n            maxIdx = value\n        }\n    }\n    return maxIdx\n}\n",
            "func LargestSmallestIntegers(lst []int) []*int {\n\tvar neg, pos []int\n\tfor _, i := range lst {\n\t\tif i < 0 {\n\t\t\tneg = append(neg, i)\n\t\t} else if i > 0 {\n\t\t\tpos = append(pos, i)\n\t\t}\n\t}\n\n\tvar maxNeg *int\n\tif len(neg) > 0 {\n\t\tmaxNeg = new(int)\n\t\t*maxNeg = neg[0]\n\t\tfor _, i := range neg {\n\t\t\tif i > *maxNeg {\n\t\t\t\t*maxNeg = i\n\t\t\t}\n\t\t}\n\t}\n\n\tvar minPos *int\n\tif len(pos) > 0 {\n\t\tminPos = new(int)\n\t\t*minPos = pos[0]\n\t\tfor _, i := range pos {\n\t\t\tif i < *minPos {\n\t\t\t\t*minPos = i\n\t\t\t}\n\t\t}\n\t}\n\n\treturn []*int{maxNeg, minPos}\n}\n",
            "func CompareOne(a interface{}, b interface{}) *float64 {\n    anyToReal := func(o interface{}) float64 {\n        switch v := o.(type) {\n        case string:\n            f, err := strconv.ParseFloat(strings.Replace(v, \",\", \".\", -1), 64)\n            if err != nil {\n                panic(\"Type Error\")\n            }\n            return f\n        case int:\n            return float64(v)\n        case float64:\n            return v\n        default:\n            panic(\"Type Error\")\n        }\n    }\n\n    a1 := anyToReal(a)\n    b1 := anyToReal(b)\n    if a1 == b1 {\n        return nil\n    } else if a1 > b1 {\n        return &a1\n    } else {\n        return &b1\n    }\n}\n",
            "func IsEqualToSumEven(n int) bool {\n    return n%2 == 0 && n >= 8\n}\n",
            "func SpecialFactorial(n int) int {\n    fact := 1\n    result := 1\n    for i := 1; i <= n; i++ {\n        fact *= i\n        result *= fact\n    }\n    return result\n}\n",
            "func FixSpaces(txt string) string {\n    txt = regexp.MustCompile(`\\s{3,}`).ReplaceAllString(txt, \"-\")\n    return strings.ReplaceAll(txt, \" \", \"_\")\n}\n",
            "func FileNameCheck(fileName string) string {\n    suf := []string{\"txt\", \"exe\", \"dll\"}\n    lst := strings.Split(fileName, \".\")\n    if len(lst) != 2 || !slices.Contains(suf, lst[1]) || len(lst[0]) == 0 || !unicode.IsLetter(rune(lst[0][0])) {\n        return \"No\"\n    }\n    digitCount := 0\n    for _, char := range lst[0] {\n        if unicode.IsDigit(char) {\n            digitCount++\n        }\n    }\n    if digitCount > 3 {\n        return \"No\"\n    }\n    return \"Yes\"\n}\n",
            "func SumSquares(lst []int) int {\n    result := 0\n    for i := 0; i < len(lst); i++ {\n        if i % 3 == 0 {\n            result += lst[i] * lst[i]\n        } else if i % 4 == 0 {\n            result += lst[i] * lst[i] * lst[i]\n        } else {\n            result += lst[i]\n        }\n    }\n    return result\n}\n",
            "func isPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc WordsInSentence(sentence string) string {\n    words := strings.Fields(sentence)\n    var filteredWords []string\n    for _, w := range words {\n        if isPrime(len(w)) {\n            filteredWords = append(filteredWords, w)\n        }\n    }\n    return strings.Join(filteredWords, \" \")\n}\n",
            "func Simplify(x string, n string) bool {\n    xs := strings.Split(x, \"/\")\n    ns := strings.Split(n, \"/\")\n    num, _ := strconv.Atoi(xs[0])\n    den, _ := strconv.Atoi(ns[1])\n    return num%den == 0\n}\n",
            "func OrderByPoints(nums []int) []int {\n    digitsSum := func(n int) int {\n        nStr := fmt.Sprint(n)\n        if n >= 0 {\n            sum := 0\n            for _, ch := range nStr {\n                digit, _ := strconv.Atoi(string(ch))\n                sum += digit\n            }\n            return sum\n        } else {\n            twoDigitPart, _ := strconv.Atoi(nStr[:2])\n            return twoDigitPart*2 + digitsSum(int(math.Abs(float64(n))))\n        }\n    }\n\n    sort.Slice(nums, func(i, j int) bool {\n        return digitsSum(nums[i]) < digitsSum(nums[j])\n    })\n\n    return nums\n}\n",
            "func SpecialFilter(nums []int) int {\n    count := 0\n    odds := \"13579\"\n    for _, n := range nums {\n        if n > 10 && n%2 != 0 {\n            numStr := strconv.Itoa(n)\n            if strings.Contains(odds, string(numStr[0])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
            "func GetMaxTriples(n int) int {\n    c := [3]int{0, 0, 0}\n    for i := 1; i <= n; i++ {\n        a := i*i - i + 1\n        c[a%3]++\n    }\n    return c[0]*c[1]*c[2] + (c[0]*(c[0]-1)*(c[0]-2) + c[1]*(c[1]-1)*(c[1]-2) + c[2]*(c[2]-1)*(c[2]-2)) / 6\n}\n",
            "func Bf(planet1 string, planet2 string) []string {\n    names := []string{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n    \n    found1, found2 := false, false\n    l, r := -1, -1\n    \n    for i, name := range names {\n        if name == planet1 {\n            l = i\n            found1 = true\n        }\n        if name == planet2 {\n            r = i\n            found2 = true\n        }\n    }\n    \n    if !found1 || !found2 {\n        return []string{}\n    }\n    \n    if l > r {\n        l, r = r, l\n    }\n    \n    if l == r {\n        return []string{}\n    }\n    \n    return names[l+1 : r]\n}\n",
            "func SortedListSum(lst []string) []string {\n    evenLengthStrings := make([]string, 0)\n    for _, s := range lst {\n        if len(s)%2 == 0 {\n            evenLengthStrings = append(evenLengthStrings, s)\n        }\n    }\n    sort.Slice(evenLengthStrings, func(i, j int) bool {\n        if len(evenLengthStrings[i]) == len(evenLengthStrings[j]) {\n            return evenLengthStrings[i] < evenLengthStrings[j]\n        }\n        return len(evenLengthStrings[i]) < len(evenLengthStrings[j])\n    })\n    return evenLengthStrings\n}\n",
            "func XOrY(n int, x int, y int) int {\n    if n < 2 {\n        return y\n    }\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        if n%i == 0 {\n            return y\n        }\n    }\n    return x\n}\n",
            "func DoubleTheDifference(lst []float64) int {\n    sum := 0\n    for _, n := range lst {\n        if n >= 0 && n == float64(int(n)) && int(n)%2 == 1 {\n            sum += int(n * n)\n        }\n    }\n    return sum\n}\n",
            "func Compare(game []int, guess []int) []int {\n    result := make([]int, len(game))\n    for i := range game {\n        result[i] = int(math.Abs(float64(game[i] - guess[i])))\n    }\n    return result\n}\n",
            "func StrongestExtension(className string, extensions []string) string {\n    maxS := -1\n    maxExt := \"\"\n    for _, ext := range extensions {\n        upper, lower := 0, 0\n        for _, c := range ext {\n            if unicode.IsUpper(c) {\n                upper++\n            } else if unicode.IsLower(c) {\n                lower++\n            }\n        }\n        s := upper - lower\n        if s > maxS {\n            maxS = s\n            maxExt = ext\n        }\n    }\n    return className + \".\" + maxExt\n}\n",
            "func CycpatternCheck(a string, b string) bool {\n    if len(a) < len(b) {\n        return false\n    }\n    for i := 0; i < len(b); i++ {\n        rotated := b[i:] + b[:i]\n        if strings.Contains(a, rotated) {\n            return true\n        }\n    }\n    return false\n}\n",
            "func EvenOddCount(num int) []int {\n    ds := fmt.Sprintf(\"%d\", abs(num))\n    even := 0\n    for _, d := range ds {\n        if (d-'0')%2 == 0 {\n            even++\n        }\n    }\n    return []int{even, len(ds) - even}\n}\n\nfunc abs(x int) int {\n    if x < 0 {\n        return -x\n    }\n    return x\n}\n",
            "func IntToMiniRoman(num int) string {\n    values := []int{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}\n    numerals := []string{\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"}\n    var res []string\n    for i := 0; i < len(values); i++ {\n        for num >= values[i] {\n            res = append(res, numerals[i])\n            num -= values[i]\n        }\n    }\n    return strings.Join(res, \"\")\n}\n",
            "func RightAngleTriangle(a int, b int, c int) bool {\n    s := []int{a, b, c}\n    sort.Ints(s)\n    return s[0]*s[0]+s[1]*s[1] == s[2]*s[2]\n}\n",
            "func FindMax(words []string) string {\n    maxCnt := 0\n    maxW := \"\"\n    for _, w := range words {\n        cnt := make(map[rune]bool)\n        for _, c := range w {\n            cnt[c] = true\n        }\n        if len(cnt) > maxCnt {\n            maxCnt = len(cnt)\n            maxW = w\n        } else if len(cnt) == maxCnt && w < maxW {\n            maxW = w\n        }\n    }\n    return maxW\n}\n",
            "func Eat(num int, need int, remaining int) []int {\n    if need <= remaining {\n        return []int{num + need, remaining - need}\n    } else {\n        return []int{num + remaining, 0}\n    }\n}\n",
            "func DoAlgebra(operators []string, operands []int) int {\n    ops := make([]string, len(operators))\n    copy(ops, operators)\n    nums := make([]int, len(operands))\n    copy(nums, operands)\n    i := len(ops) - 1\n    for i >= 0 {\n        if ops[i] == \"**\" {\n            nums[i] = int(math.Pow(float64(nums[i]), float64(nums[i+1])))\n            nums = append(nums[:i+1], nums[i+2:]...)\n            ops = append(ops[:i], ops[i+1:]...)\n        }\n        i--\n    }\n    i = 0\n    for i < len(ops) {\n        if ops[i] == \"*\" {\n            nums[i] = nums[i] * nums[i+1]\n            nums = append(nums[:i+1], nums[i+2:]...)\n            ops = append(ops[:i], ops[i+1:]...)\n            i--\n        } else if ops[i] == \"//\" {\n            nums[i] = nums[i] / nums[i+1]\n            nums = append(nums[:i+1], nums[i+2:]...)\n            ops = append(ops[:i], ops[i+1:]...)\n            i--\n        }\n        i++\n    }\n    i = 0\n    for i < len(ops) {\n        if ops[i] == \"+\" {\n            nums[i] = nums[i] + nums[i+1]\n            nums = append(nums[:i+1], nums[i+2:]...)\n            ops = append(ops[:i], ops[i+1:]...)\n            i--\n        } else if ops[i] == \"-\" {\n            nums[i] = nums[i] - nums[i+1]\n            nums = append(nums[:i+1], nums[i+2:]...)\n            ops = append(ops[:i], ops[i+1:]...)\n            i--\n        }\n        i++\n    }\n    return nums[0]\n}\n",
            "func Solve(s string) string {\n    hasLetters := false\n    for _, ch := range s {\n        if (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') {\n            hasLetters = true\n        }\n    }\n    if !hasLetters {\n        return reverseString(s)\n    }\n\n    var result []rune\n    for _, ch := range s {\n        if (ch < 'a' || ch > 'z') && (ch < 'A' || ch > 'Z') {\n            result = append(result, ch)\n        } else if ch >= 'A' && ch <= 'Z' {\n            result = append(result, ch+32)\n        } else if ch >= 'a' && ch <= 'z' {\n            result = append(result, ch-32)\n        }\n    }\n\n    return string(result)\n}\n\nfunc reverseString(s string) string {\n    runes := []rune(s)\n    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        runes[i], runes[j] = runes[j], runes[i]\n    }\n    return string(runes)\n}\n",
            "func StringToMd5(txt string) *string {\n    if txt == \"\" {\n        return nil\n    }\n    md5Hash := md5.New()\n    txtBytes := []byte(txt)\n    md5Hash.Write(txtBytes)\n    md5Encoded := fmt.Sprintf(\"%x\", md5Hash.Sum(nil))\n    return &md5Encoded\n}\n",
            "func GenerateIntegers(a int, b int) []int {\n    lower := max(2, min(a, b))\n    upper := min(8, max(a, b))\n    result := []int{}\n    for i := lower; i <= upper; i++ {\n        if i%2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc max(x int, y int) int {\n    if x > y {\n        return x\n    }\n    return y\n}\n\nfunc min(x int, y int) int {\n    if x < y {\n        return x\n    }\n    return y\n}\n"
        ],
        "swift": [
            "func hasCloseElements(_ numbers: [Double], _ threshold: Double) -> Bool {\n    for (i, num1) in numbers.enumerated() {\n        for j in (i + 1..<numbers.count) {\n            if abs(num1 - numbers[j]) < threshold {\n                return true\n            }\n        }\n    }\n    return false\n}\n",
            "func separateParenGroups(_ parenString: String) -> [String] {\n    var groups = [String]()\n    var stk = [Character]()\n    var currentGroup = \"\"\n    let parens = parenString.filter { $0 != \" \" }\n    \n    for ch in parens {\n        if ch == \"(\" {\n            stk.append(ch)\n            currentGroup.append(ch)\n        } else if ch == \")\" {\n            stk.removeLast()\n            currentGroup.append(ch)\n            if stk.isEmpty {\n                groups.append(currentGroup)\n                currentGroup = \"\"\n            }\n        }\n    }\n    \n    return groups\n}\n",
            "func truncateNumber(_ num: Double) -> Double {\n    return num - floor(num)\n}\n",
            "func belowZero(_ operations: [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance += op\n        if balance < 0 {\n            return true\n        }\n    }\n    return false\n}\n",
            "func meanAbsoluteDeviation(_ numbers: [Double]) -> Double {\n    let mean = numbers.reduce(0, +) / Double(numbers.count)\n    let deviation = numbers.map { (x - mean).magnitude }.reduce(0, +)\n    return deviation / Double(numbers.count)\n}\n",
            "func intersperse(_ numbers: [Int], _ delimiter: Int) -> [Int] {\n    var result = [Int]()\n    for (i, number) in numbers.enumerated() {\n        if i != 0 {\n            result.append(delimiter)\n        }\n        result.append(number)\n    }\n    return result\n}\n",
            "func parseNestedParens(_ parenString: String) -> [Int] {\n    var result = [Int]()\n    let parenGroups = parenString.split(separator: \" \")\n    for group in parenGroups {\n        var maxDepth = 0\n        var depth = 0\n        for ch in group {\n            if ch == \"(\" {\n                depth += 1\n                maxDepth = max(maxDepth, depth)\n            } else if ch == \")\" {\n                depth -= 1\n            }\n        }\n        result.append(maxDepth)\n    }\n    return result\n}\n",
            "func filterBySubstring(_ strs: [String], _ substring: String) -> [String] {\n    return strs.filter { $0.contains(substring) }\n}\n",
            "func sumProduct(_ numbers: [Int]) -> [Int] {\n  let n_sum = numbers.reduce(0, +)\n  let n_product = numbers.reduce(1, *)\n  return [n_sum, n_product]\n}\n",
            "func rollingMax(_ numbers: [Int]) -> [Int] {\n    var maxSoFar = Int.min\n    var result: [Int] = []\n    for num in numbers {\n        maxSoFar = max(maxSoFar, num)\n        result.append(maxSoFar)\n    }\n    return result\n}\n",
            "func makePalindrome(_ s: String) -> String {\n    if s == String(s.reversed()) {\n        return s\n    }\n    for i in 0..<s.count {\n        let prefixIndex = s.index(s.startIndex, offsetBy: i)\n        let suffix = String(s[prefixIndex...])\n        if suffix == String(suffix.reversed()) {\n            let prefix = String(s[..<prefixIndex])\n            return s + String(prefix.reversed())\n        }\n    }\n    return \"\"\n}\n",
            "func stringXor(_ a: String, _ b: String) -> String {\n    return zip(a, b).map { $0 == $1 ? \"0\" : \"1\" }.joined()\n}\n",
            "func longest(_ strs: [String]) -> String? {\n    guard !strs.isEmpty else { return nil }\n    var longestS = strs[0]\n    for s in strs {\n        if s.count > longestS.count {\n            longestS = s\n        }\n    }\n    return longestS\n}\n",
            "func greatestCommonDivisor(_ a: Int, _ b: Int) -> Int {\n    if b == 0 {\n        return a\n    } else {\n        return greatestCommonDivisor(b, a % b)\n    }\n}\n",
            "func allPrefixes(_ s: String) -> [String] {\n    var prefixes = [String]()\n    for i in 0..<s.count {\n        let index = s.index(s.startIndex, offsetBy: i)\n        prefixes.append(String(s[...index]))\n    }\n    return prefixes\n}\n",
            "func stringSequence(_ n: Int) -> String {\n    return (0...n).map { String($0) }.joined(separator: \" \")\n}\n",
            "func countDistinctCharacters(_ s: String) -> Int {\n    return Set(s.lowercased()).count\n}\n",
            "func parseMusic(_ musicString: String) -> [Int] {\n    let durations: [String: Int] = [\"o\": 4, \"o|\": 2, \".|\": 1]\n    let notes = musicString.split(separator: \" \").map { String($0) }\n    return notes.compactMap { durations[$0] }\n}\n",
            "func howManyTimes(_ s: String, _ substring: String) -> Int {\n    var times = 0\n    for i in 0...(s.count - substring.count) {\n        let startIndex = s.index(s.startIndex, offsetBy: i)\n        let endIndex = s.index(startIndex, offsetBy: substring.count)\n        let subString = String(s[startIndex..<endIndex])\n        if subString == substring {\n            times += 1\n        }\n    }\n    return times\n}\n",
            "func sortNumbers(_ numbers: String) -> String {\n    let numDict: [String: Int] = [\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    ]\n    \n    let numList = numbers.split(separator: \" \").compactMap { numDict[String($0)] }\n    let sortedList = numList.sorted()\n    return sortedList.map { String(numDict.first(where: { $0.value == $1 })?.key ?? \"\") }.joined(separator: \" \")\n}\n",
            "func findClosestElements(_ numbers: [Double]) -> [Double] {\n    let sortedNumbers = numbers.sorted()\n    var minDiff = Double.greatestFiniteMagnitude\n    var closestPair: [Double] = []\n    \n    for i in 1..<sortedNumbers.count {\n        let diff = sortedNumbers[i] - sortedNumbers[i - 1]\n        if diff < minDiff {\n            minDiff = diff\n            closestPair = [sortedNumbers[i - 1], sortedNumbers[i]]\n        }\n    }\n    \n    return closestPair\n}\n",
            "func rescaleToUnit(_ numbers: [Double]) -> [Double] {\n    guard let minNum = numbers.min(), let maxNum = numbers.max() else {\n        return []\n    }\n    if minNum == maxNum {\n        return Array(repeating: 0.0, count: numbers.count)\n    } else {\n        return numbers.map { (num) in\n            return (num - minNum) / (maxNum - minNum)\n        }\n    }\n}\n",
            "func filterIntegers(_ values: [Any]) -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n",
            "func strLength(_ s: String) -> Int {\n  return s.count\n}\n",
            "func largestDivisor(_ n: Int) -> Int {\n    for i in 2..<n {\n        if n % i == 0 {\n            return n / i\n        }\n    }\n    return 1\n}\n",
            "func factorize(_ n: Int) -> [Int] {\n    var factors = [Int]()\n    var divisor = 2\n    var number = n\n    while divisor <= number {\n        if number % divisor == 0 {\n            factors.append(divisor)\n            number /= divisor\n        } else {\n            divisor += 1\n        }\n    }\n    return factors\n}\n",
            "func removeDuplicates(_ numbers: [Int]) -> [Int] {\n    var counts = [Int : Int]()\n    for num in numbers {\n        counts[num, default: 0] += 1\n    }\n    let res = numbers.filter { counts[$0] == 1 }\n    return res\n}\n",
            "func flipCase(_ s: String) -> String {\n    var flipped = \"\"\n    for ch in s {\n        if !ch.isLetter {\n            flipped.append(ch)\n        } else if ch.isLowercase {\n            flipped.append(ch.uppercased())\n        } else if ch.isUppercase {\n            flipped.append(ch.lowercased())\n        }\n    }\n    return flipped\n}\n",
            "func concatenate(_ strs: [String]) -> String {\n    return strs.joined()\n}\n",
            "func filterByPrefix(_ strs: [String], _ prefixStr: String) -> [String] {\n    return strs.filter { $0.hasPrefix(prefixStr) }\n}\n",
            "func getPositive(_ l: [Int]) -> [Int] {\n    return l.filter { $0 > 0 }\n}\n",
            "func isPrime(_ n: Int) -> Bool {\n    guard n >= 2 else { return false }\n    for i in stride(from: 2, through: Int(sqrt(Double(n))), by: 1) {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func poly(_ xs: [Int], _ x: Double) -> Double {\n    var res = 0.0\n    for (i, coeff) in xs.enumerated() {\n        res += Double(coeff) * pow(x, Double(i))\n    }\n    return res\n}\n\nfunc findZero(_ xs: [Int]) -> Double {\n    var x1 = 1.0, x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0 {\n        x1 *= 2\n        x2 *= 2\n    }\n    while (x1 - x2).magnitude > 1e-10 {\n        let mid = (x1 + x2) / 2.0\n        if poly(xs, mid) == 0 {\n            return mid\n        } else if poly(xs, mid) * poly(xs, x1) < 0 {\n            x2 = mid\n        } else {\n            x1 = mid\n        }\n    }\n    return (x1 + x2) / 2.0\n}\n",
            "func sortThird(_ l: [Int]) -> [Int] {\n    let sortedThird = l.enumerated().filter { $0.offset % 3 == 0 }.map { $0.element }.sorted()\n    return l.enumerated().map { i in\n        i.offset % 3 == 0 ? sortedThird[i.offset / 3] : i.element\n    }\n}\n",
            "func listUnique(_ l: [Int]) -> [Int] {\n    Array(Set(l)).sorted()\n}\n",
            "func maxElement(_ l: [Int]) -> Int {\n    return l.isEmpty ? 0 : l.max()!\n}\n",
            "func fizzBuzz(_ n: Int) -> Int {\n    var cnt = 0\n    for i in 0..<n {\n        if i % 11 == 0 || i % 13 == 0 {\n            let digitCount = String(i).filter { $0 == \"7\" }.count\n            cnt += digitCount\n        }\n    }\n    return cnt\n}\n",
            "func sortEven(_ l: [Int]) -> [Int] {\n    let sorted_even = l.enumerated().filter { $0.offset % 2 == 0 }.map { $0.element }.sorted()\n    return l.enumerated().map { i, x in i % 2 == 0 ? sorted_even[i / 2] : x }\n}\n",
            "func encodeCyclic(_ s: String) -> String {\n    var result = [String]()\n    let characters = Array(s)\n    for i in stride(from: 0, to: characters.count, by: 3) {\n        if i + 3 > characters.count {\n            result.append(String(characters[i...]))\n        } else {\n            result.append(String(characters[i+1...i+2]))\n            result.append(String(characters[i]))\n        }\n    }\n    return result.joined()\n}\n\nfunc decodeCyclic(_ s: String) -> String {\n    return encodeCyclic(encodeCyclic(s))\n}\n",
            "func primeFib(_ n: Int) -> Int {\n    var f = [0, 1]\n    var cnt = 0\n    while cnt < n {\n        f = [f[1], f[0] + f[1]]\n        if isPrime(f[1]) {\n            cnt += 1\n        }\n    }\n    return f[1]\n}\n\nfunc isPrime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2...Int(Double(n).squareRoot()) + 1 {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func triplesSumToZero(_ l: [Int]) -> Bool {\n    for i in 0..<l.count {\n        for j in (i + 1)..<l.count {\n            for k in (j + 1)..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n",
            "func carRaceCollision(_ n: Int) -> Int {\n    return n * n\n}\n",
            "func incrList(_ l: [Int]) -> [Int] {\n    return l.map { $0 + 1 }\n}\n",
            "func pairsSumToZero(_ l: [Int]) -> Bool {\n    var seen = Set<Int>()\n    for num in l {\n        if seen.contains(-num) {\n            return true\n        }\n        seen.insert(num)\n    }\n    return false\n}\n",
            "func changeBase(_ x: Int, _ bas: Int) -> String {\n    if x == 0 {\n        return \"0\"\n    }\n    var digits = [String]()\n    var num = x\n    while num > 0 {\n        let remainder = num % bas\n        digits.append(String(remainder))\n        num /= bas\n    }\n    return digits.reversed().joined()\n}\n",
            "func triangleArea(_ a: Int, _ h: Int) -> Double {\n    return Double(a) * Double(h) / 2.0\n}\n",
            "func fib4(_ n: Int) -> Int {\n    var fib = [0, 0, 2, 0]\n    for i in 4...n {\n        fib[i % 4] = fib.reduce(0, +)\n    }\n    return fib[n % 4]\n}\n",
            "func median(_ l: [Double]) -> Double {\n    let sl = l.sorted()\n    if l.count % 2 != 0 {\n        return sl[l.count / 2]\n    } else {\n        return (sl[l.count / 2] + sl[l.count / 2 - 1]) / 2.0\n    }\n}\n",
            "func isPalindrome(_ txt: String) -> Bool {\n    return txt == String(txt.reversed())\n}\n",
            "func modp(_ n: Int, _ p: Int) -> Int {\n    var ret = 1\n    for _ in 0..<n {\n        ret = (ret * 2) % p\n    }\n    return ret\n}\n",
            "func encodeShift(_ s: String) -> String {\n    let result = s.map { ((Int($0.asciiValue!) - 97 + 5) % 26 + 97).asciiCharacter }\n    return String(result)\n}\n\nfunc decodeShift(_ s: String) -> String {\n    let result = s.map { ((Int($0.asciiValue!) - 97 + 21) % 26 + 97).asciiCharacter }\n    return String(result)\n}\n",
            "func removeVowels(_ txt: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    return txt.filter { !vowels.contains($0) }\n}\n",
            "func belowThreshold(_ l: [Int], _ t: Int) -> Bool {\n  return l.allSatisfy { $0 < t }\n}\n",
            "func add(_ x: Int, _ y: Int) -> Int {\n    return x + y\n}\n",
            "func sameChars(_ s0: String, _ s1: String) -> Bool {\n    return Set(s0) == Set(s1)\n}\n",
            "func fib(_ n: Int) -> Int {\n    if n <= 1 {\n        return n\n    } else {\n        return fib(n - 1) + fib(n - 2)\n    }\n}\n",
            "func correctBracketing(_ brackets: String) -> Bool {\n    var depth = 0\n    for b in brackets {\n        if b == \"<\" {\n            depth += 1\n        } else if b == \">\" {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "func monotonic(_ l: [Int]) -> Bool {\n    let diff = zip(l.dropLast(), l).map { $1 - $0 }\n    return diff.allSatisfy { $0 <= 0 } || diff.allSatisfy { $0 >= 0 }\n}\n",
            "func common(_ l1: [Int], _ l2: [Int]) -> [Int] {\n    Array(Set(l1).intersection(l2)).sorted()\n}\n",
            "func largestPrimeFactor(_ n: Int) -> Int {\n    var i = 2\n    while i * i <= n {\n        if n % i != 0 {\n            i += 1\n        } else {\n            n /= i\n        }\n    }\n    return n\n}\n",
            "func sumToN(_ n: Int) -> Int {\n    return (0...n).reduce(0, +)\n}\n",
            "func correctBracketing(_ brackets: String) -> Bool {\n    var depth = 0\n    for b in brackets {\n        if b == \"(\" {\n            depth += 1\n        } else if b == \")\" {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "func derivative(_ xs: [Int]) -> [Int] {\n    (1..<xs.count).map { $0 * xs[$0] }\n}\n",
            "func fibfib(_ n: Int) -> Int {\n    if n <= 1 {\n        return 0 \n    }\n    var a = 0\n    var b = 0\n    var c = 1\n    while n > 2 {\n        let tempA = a\n        let tempB = b\n        a = b\n        b = c\n        c = tempA + tempB + c\n        n -= 1\n    }\n    return c\n}\n",
            "func vowelsCount(_ s: String) -> Int {\n    let vowels = \"aeiou\"\n    var cnt = 0\n    for (i, char) in s.enumerated() {\n        if vowels.contains(char.lowercased()) || (i == s.count - 1 && char.lowercased() == \"y\") {\n            cnt += 1\n        }\n    }\n    return cnt\n}\n",
            "func circularShift(_ x: Int, _ shift: Int) -> String {\n    let xStr = String(x)\n    if shift > xStr.count {\n        return String(xStr.reversed())\n    } else {\n        let index = xStr.index(xStr.endIndex, offsetBy: -shift)\n        return String(xStr.suffix(from: index)) + String(xStr.prefix(upTo: index))\n    }\n}\n",
            "func digitSum(_ s: String) -> Int {\n    return s.filter { $0.isUppercase }.map { $0.asciiValue! }.reduce(0, +)\n}\n",
            "func fruitDistribution(_ s: String, _ n: Int) -> Int {\n    let words = s.split(separator: \" \")\n    guard let applesIndex = words.firstIndex(of: \"apples\"), \n          let orangesIndex = words.firstIndex(of: \"oranges\") else { return 0 }\n    let apples = Int(words[applesIndex - 1]) ?? 0\n    let oranges = Int(words[orangesIndex - 1]) ?? 0\n    return n - apples - oranges\n}\n",
            "func pluck(_ arr: [Int]) -> [Int] {\n    let evens = arr.filter { $0 % 2 == 0 }\n    guard !evens.isEmpty else { return [] }\n    \n    let minEven = evens.min()!\n    if let index = arr.firstIndex(of: minEven) {\n        return [minEven, index]\n    }\n    return []\n}\n",
            "func search(_ lst: [Int]) -> Int {\n    var freqs = [Int: Int]()\n    \n    for n in lst {\n        freqs[n, default: 0] += 1\n    }\n    \n    let goodVals = freqs.filter { k, v in v >= k }.keys\n    \n    return goodVals.max() ?? -1\n}\n",
            "func strangeSortList(_ lst: [Int]) -> [Int] {\n    let sl = lst.sorted()\n    var result: [Int] = []\n    var left = 0\n    var right = sl.count - 1\n    while left <= right {\n        result.append(sl[left])\n        left += 1\n        if left <= right {\n            result.append(sl[right])\n            right -= 1\n        }\n    }\n    return result\n}\n",
            "func triangleArea(_ a: Int, _ b: Int, _ c: Int) -> Double {\n    if a + b > c && a + c > b && b + c > a {\n        let s = (Double(a) + Double(b) + Double(c)) / 2.0\n        return sqrt(s * (s - Double(a)) * (s - Double(b)) * (s - Double(c)))\n    } else {\n        return -1.0\n    }\n}\n",
            "func willItFly(_ q: [Int], _ w: Int) -> Bool {\n    guard !q.isEmpty else { return false }\n    let isPalin = q.allSatisfy { e in e == q[q.count - q.firstIndex(of: e)! - 1] }\n    let total = q.sum\n    return isPalin && total <= w\n}\n",
            "func smallestChange(_ arr: [Int]) -> Int {\n    var ans = 0\n    for i in 0..<(arr.count / 2) {\n        if arr[i] != arr[arr.count - i - 1] {\n            ans += 1\n        }\n    }\n    return ans\n}\n",
            "func totalMatch(_ lst1: [String], _ lst2: [String]) -> [String] {\n    let cnt1 = lst1.reduce(0, { $0 + $1.count })\n    let cnt2 = lst2.reduce(0, { $0 + $1.count })\n    return cnt1 <= cnt2 ? lst1 : lst2\n}\n",
            "func isPrime(_ n: Int) -> Bool {\n  if n < 2 {\n    return false\n  }\n  for i in 2...Int(sqrt(Double(n))) {\n    if n % i == 0 {\n      return false\n    }\n  }\n  return true\n}\n\nfunc isMultiplyPrime(_ a: Int) -> Bool {\n  var cnt = 0\n  var num = a\n  for i in 2...num {\n    if isPrime(i) {\n      while num % i == 0 {\n        cnt += 1\n        num /= i\n      }\n    }\n  }\n  return cnt == 3\n}\n",
            "func isSimplePower(_ x: Int, _ n: Int) -> Bool {\n    if n < 2 {\n        return x == n\n    }\n    var tmp = 1\n    while tmp < x {\n        tmp *= n\n    }\n    return tmp == x\n}\n",
            "func isCube(_ a: Int) -> Bool {\n    let a = abs(a)\n    let root = Int(round(pow(Double(a), 1.0 / 3.0)))\n    return root * root * root == a\n}\n",
            "func hexKey(_ num: String) -> Int {\n    return num.filter { \"2357BD\".contains($0) }.count\n}\n",
            "func decimalToBinary(_ dec: Int) -> String {\n    let binary = String(dec, radix: 2)\n    return \"db\\(binary)db\"\n}\n",
            "func isHappy(_ s: String) -> Bool {\n    guard s.count >= 3 else { return false }\n    \n    let characters = Array(s)\n    for i in 0..<(characters.count - 2) {\n        if characters[i] == characters[i + 1] || characters[i] == characters[i + 2] || characters[i + 1] == characters[i + 2] {\n            return false\n        }\n    }\n    \n    return true\n}\n",
            "func numericalLetterGrade(_ grades: [Double]) -> [String] {\n    var result: [String] = []\n    for g in grades {\n        if g == 4.0 {\n            result.append(\"A+\")\n        } else if g > 3.7 {\n            result.append(\"A\")\n        } else if g > 3.3 {\n            result.append(\"A-\")\n        } else if g > 3.0 {\n            result.append(\"B+\")\n        } else if g > 2.7 {\n            result.append(\"B\")\n        } else if g > 2.3 {\n            result.append(\"B-\")\n        } else if g > 2.0 {\n            result.append(\"C+\")\n        } else if g > 1.7 {\n            result.append(\"C\")\n        } else if g > 1.3 {\n            result.append(\"C-\")\n        } else if g > 1.0 {\n            result.append(\"D+\")\n        } else if g > 0.7 {\n            result.append(\"D\")\n        } else if g > 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"E\")\n        }\n    }\n    return result\n}\n",
            "func primeLength(_ s: String) -> Bool {\n    let length = s.count\n    guard length >= 2 else { return false }\n    for i in 2...Int(sqrt(Double(length))) {\n        if length % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func startsOneEnds(_ n: Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    return 2 * 9 * (Int(pow(10.0, Double(n - 2))))\n}\n",
            "func solve(_ n: Int) -> String {\n    let digitsSum = String(n).compactMap { $0.wholeNumberValue }.reduce(0, +)\n    return String(digitsSum, radix: 2)\n}\n",
            "func add(_ lst: [Int]) -> Int {\n    return lst.enumerated().filter { index, element in index % 2 == 1 && element % 2 == 0 }.map { $0.element }.reduce(0, +)\n}\n",
            "func antiShuffle(_ s: String) -> String {\n    return s.split(separator: \" \").map { $0.sorted().joined() }.joined(separator: \" \")\n}\n",
            "func getRow(_ lst: [[Int]], _ x: Int) -> [[Int]] {\n    var coords = [[Int]]()\n    \n    for (i, row) in lst.enumerated() {\n        for (j, value) in row.enumerated() {\n            if value == x {\n                coords.append([i, j])\n            }\n        }\n    }\n    \n    return coords.sorted { ($0[0], -$0[1]) < ($1[0], -$1[1]) }\n}\n",
            "func sortArray(_ arr: [Int]) -> [Int] {\n    if arr.isEmpty {\n        return []\n    }\n    if (arr.first! + arr.last!) % 2 == 0 {\n        return arr.sorted().reversed()\n    }\n    return arr.sorted()\n}\n",
            "func encrypt(_ s: String) -> String {\n    var result = \"\"\n    for ch in s {\n        let shifted = ch.unicodeScalars.first!.value + 4\n        if shifted > \"z\".unicodeScalars.first!.value {\n            let newShifted = shifted - 26\n            result.append(Character(UnicodeScalar(newShifted)!))\n        } else {\n            result.append(Character(UnicodeScalar(shifted)!))\n        }\n    }\n    return result\n}\n",
            "func nextSmallest(_ lst: [Int]) -> Int? {\n    let sl = Array(Set(lst)).sorted()\n    if sl.count < 2 {\n        return nil\n    }\n    return sl[1]\n}\n",
            "func isBored(_ s: String) -> Int {\n    let sentences = s.split { \".!?\".contains($0) }\n    return sentences.filter { $0.hasPrefix(\"I \") && $0.count >= 3 }.count\n}",
            "func anyInt(_ x: Any, _ y: Any, _ z: Any) -> Bool {\n    if let intX = x as? Int,\n       let intY = y as? Int,\n       let intZ = z as? Int {\n        return (intX + intY == intZ) || (intX + intZ == intY) || (intY + intZ == intX)\n    }\n    return false\n}\n",
            "func encode(_ message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for ch in message {\n        if ch.isLetter {\n            let ch1 = ch.isLowercase ? ch.uppercased() : ch.lowercased()\n            if vowels.contains(ch1) {\n                let newCh = Character(UnicodeScalar((ch1.asciiValue! + 2)))\n                result.append(newCh)\n            } else {\n                result.append(ch1)\n            }\n        } else {\n            result.append(ch)\n        }\n    }\n    return result\n}\n",
            "func skjkasdkd(_ lst: [Int]) -> Int {\n    func isPrime(_ n: Int) -> Bool {\n        if n < 2 {\n            return false\n        }\n        for i in stride(from: 2, through: Int(sqrt(Double(n))), by: 1) {\n            if n % i == 0 {\n                return false\n            }\n        }\n        return true\n    }\n    \n    let primes = lst.filter { isPrime($0) }\n    guard let largest = primes.max() else {\n        return 0\n    }\n    \n    let largestString = String(largest)\n    return largestString.compactMap { $0.wholeNumberValue }.reduce(0, +)\n}\n",
            "func checkDictCase(_ d: [String:String]) -> Bool {\n    if d.isEmpty {\n        return false\n    }\n    let allLower = d.keys.allSatisfy { $0.isLowercase }\n    let allUpper = d.keys.allSatisfy { $0.isUppercase }\n    return allLower || allUpper\n}\n",
            "func countUpTo(_ n: Int) -> [Int] {\n    var primes = [Int]()\n    for num in 2..<n {\n        if primes.allSatisfy { num % $0 != 0 } {\n            primes.append(num)\n        }\n    }\n    return primes\n}\n",
            "func multiply(_ a: Int, _ b: Int) -> Int {\n    return (a.magnitude % 10) * (b.magnitude % 10)\n}\n",
            "func countUpper(_ s: String) -> Int {\n    let vowels = \"AEIOU\"\n    return s.enumerated().filter { $0.offset % 2 == 0 && vowels.contains($0.element) }.count\n}\n",
            "func closestInteger(_ value: String) -> Int {\n    if let num = Double(value) {\n        if num >= 0 {\n            return Int(num + 0.5)\n        } else {\n            return Int(num - 0.5)\n        }\n    }\n    return 0 // Default return in case of invalid input\n}\n",
            "func makeAPile(_ n: Int) -> [Int] {\n    (0..<n).map { n + 2 * $0 }\n}\n",
            "func wordsString(_ s: String) -> [String] {\n    return s.split(separator: CharacterSet(charactersIn: \", \")).compactMap { String($0) }\n}\n",
            "func chooseNum(_ x: Int, _ y: Int) -> Int {\n  if x > y {\n    return -1\n  }\n  if y % 2 == 0 {\n    return y\n  }\n  if x != y {\n    return y - 1\n  }\n  return -1\n}\n",
            "func roundedAvg(_ n: Int, _ m: Int) -> String? {\n    guard n <= m else { return nil }\n    let r_avg = ((m + n) / 2.0).rounded()\n    return String(Int(r_avg), radix: 2)\n}\n",
            "func uniqueDigits(_ x: [Int]) -> [Int] {\n    func allDigitsOdd(_ s: String) -> Bool {\n        return s.allSatisfy { $0.unicodeScalars.first?.value % 2 != 0 }\n    }\n    \n    return x.filter { allDigitsOdd(String($0)) }.sorted()\n}\n",
            "func byLength(_ arr: [Int]) -> [String] {\n    let digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    let sortedArr = arr.filter { 1 <= $0 && $0 <= 9 }.sorted(by: >)\n    return sortedArr.map { digitNames[$0 - 1] }\n}\n",
            "func f(_ n: Int) -> [Int] {\n    let nums = Array(1...n)\n    return nums.enumerated().map { index, _ in\n        if (index + 1).isMultiple(of: 2) {\n            return nums.prefix(index + 1).reduce(1, *)\n        } else {\n            return nums.prefix(index + 1).sum()\n        }\n    }\n}\n",
            "func evenOddPalindrome(_ n: Int) -> [Int] {\n    var cnt = [0, 0]\n    for i in 1...n {\n        let str = String(i)\n        if str == String(str.reversed()) {\n            cnt[i % 2] += 1\n        }\n    }\n    return cnt\n}\n",
            "func countNums(_ arr: [Int]) -> Int {\n    return arr.filter { digitsSum($0) > 0 }.count\n}\n\nfunc digitsSum(_ n: Int) -> Int {\n    let nStr = String(n)\n    if n >= 0 {\n        return nStr.compactMap { $0.wholeNumberValue }.reduce(0, +)\n    } else {\n        let firstTwoDigits = Int(String(nStr.prefix(2))) ?? 0\n        return (firstTwoDigits * 2) + digitsSum(abs(n))\n    }\n}\n",
            "func moveOneBall(_ arr: [Int]) -> Bool {\n    if arr.isEmpty {\n        return true\n    }\n    let sortedArr = arr.sorted()\n    for i in 0..<arr.count {\n        if Array(arr.dropFirst(i)) == Array(sortedArr.prefix(arr.count - i)) && Array(arr.prefix(i)) == Array(sortedArr.suffix(i)) {\n            return true\n        }\n    }\n    return false\n}\n",
            "func canExchange(_ lst1: [Int], _ lst2: [Int]) -> String {\n    let oddCnt = lst1.filter { $0 % 2 != 0 }.count\n    let evenCnt = lst2.filter { $0 % 2 == 0 }.count\n    return evenCnt >= oddCnt ? \"YES\" : \"NO\"\n}\n",
            "func histogram(_ test: String) -> [String: Int] {\n    var freq = [String: Int]()\n    let words = test.split(separator: \" \").filter { !$0.isEmpty }\n    for w in words {\n        let word = String(w)\n        freq[word, default: 0] += 1\n    }\n    var result = [String: Int]()\n    if !freq.isEmpty {\n        let maxFreq = freq.values.max()!\n        for (k, v) in freq {\n            if v == maxFreq {\n                result[k] = v\n            }\n        }\n    }\n    return result\n}\n",
            "func reverseDelete(_ s: String, _ c: String) -> [String] {\n  let filtered = s.filter { !c.contains($0) }\n  let isPalindrome = filtered == String(filtered.reversed())\n  return [filtered, isPalindrome ? \"yes\" : \"no\"]\n}\n",
            "func oddCount(_ lst: [String]) -> [String] {\n    var result = [String]()\n    for num in lst {\n        let n = num.filter { String($0).unicodeScalars.first!.value % 2 == 1 }.count\n        let rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replacingOccurrences(of: \"i\", with: \"\\(n)\"))\n    }\n    return result\n}\n",
            "func minSubArraySum(_ nums: [Int]) -> Int {\n    var min_sum = 0\n    var cur_sum = 0\n    for n in nums {\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    }\n    if min_sum == 0 {\n        min_sum = nums.min() ?? 0\n    }\n    return min_sum\n}\n",
            "func maxFill(_ grid: [[Int]], _ capacity: Int) -> Int {\n    return grid.reduce(0) { $0 + (($1.reduce(0, +).tof / Double(capacity)).ceil() as Int) }\n}\n",
            "func countOnes(_ num: Int) -> Int {\n    return String(num, radix: 2).filter { $0 == \"1\" }.count\n}\n\nfunc sortArray(_ arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let onesA = countOnes(a)\n        let onesB = countOnes(b)\n        if onesA == onesB {\n            return a < b\n        }\n        return onesA < onesB\n    }\n}\n",
            "func selectWords(_ s: String, _ n: Int) -> [String] {\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    let words = s.split(separator: \" \").compactMap { $0.isEmpty ? nil : String($0) }\n    return words.filter { w in\n        return w.lowercased().filter { consonants.contains($0) }.count == n\n    }\n}\n",
            "func getClosestVowel(_ word: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    for i in stride(from: word.count - 2, through: 1, by: -1) {\n        if let char = word.safeCharacter(at: i),\n           let prevChar = word.safeCharacter(at: i - 1),\n           let nextChar = word.safeCharacter(at: i + 1),\n           vowels.contains(char),\n           !vowels.contains(prevChar),\n           !vowels.contains(nextChar) {\n            return String(char)\n        }\n    }\n    return \"\"\n}\n\nextension String {\n    func safeCharacter(at index: Int) -> Character? {\n        guard let index = self.index(startIndex, offsetBy: index, limitedBy: endIndex) else { return nil }\n        return self[index]\n    }\n}\n",
            "func check(_ s: String) -> Bool {\n    var depth = 0\n    for ch in s {\n        if ch == \"(\" {\n            depth += 1\n        } else {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n\nfunc matchParens(_ lst: [String]) -> String {\n    let s1 = lst[0] + lst[1]\n    let s2 = lst[1] + lst[0]\n    return check(s1) || check(s2) ? \"Yes\" : \"No\"\n}\n",
            "func maximum(_ arr: [Int], _ k: Int) -> [Int] {\n    if k == 0 {\n        return []\n    }\n    return arr.sorted().suffix(k)\n}\n",
            "func solution(_ lst: [Int]) -> Int {\n    return lst.enumerated().filter { index, element in\n        index % 2 == 0 && element % 2 != 0\n    }.map { $0.element }.reduce(0, +)\n}\n",
            "func addElements(_ arr: [Int], _ k: Int) -> Int {\n    return arr.prefix(k).filter { $0.description.count <= 2 }.reduce(0, +)\n}\n",
            "func getOddCollatz(_ n: Int) -> [Int] {\n    var collatz = [1]\n    var current = n\n    while current != 1 {\n        if current % 2 != 0 {\n            collatz.append(current)\n            current = 3 * current + 1\n        } else {\n            current /= 2\n        }\n    }\n    return collatz.sorted()\n}\n",
            "func validDate(_ date: String) -> Bool {\n    guard date.count == 10 && date[2] == \"-\" && date[5] == \"-\" else {\n        return false\n    }\n    \n    let m = Int(date.prefix(2)) ?? 0\n    let d = Int(date.dropFirst(3).prefix(2)) ?? 0\n    \n    if [1, 3, 5, 7, 8, 10, 12].contains(m) && d >= 1 && d <= 31 {\n        return true\n    }\n    \n    if [4, 6, 9, 11].contains(m) && d >= 1 && d <= 30 {\n        return true\n    }\n    \n    if m == 2 && d >= 1 && d <= 29 {\n        return true\n    }\n    \n    return false\n}\n",
            "func splitWords(_ txt: String) -> [String] {\n    if txt.contains(\" \") {\n        return txt.split(separator: \" \").map { String($0) }\n    } else if txt.contains(\",\") {\n        return txt.split(separator: \",\").map { String($0) }\n    } else {\n        let count = txt.filter { $0.isLetter && $0.unicodeScalars.first?.value ?? 0 % 2 == 0 }.count\n        return [String(count)]\n    }\n}\n",
            "func isSorted(_ lst: [Int]) -> Bool {\n    if !(1..<lst.count).allSatisfy({ lst[$0-1] <= lst[$0] }) {\n        return false\n    }\n    var freq: [Int: Int] = [:]\n    for i in lst {\n        freq[i, default: 0] += 1\n    }\n    return (freq.values.max() ?? 0) <= 2\n}\n",
            "func is_prime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc intersection(_ interval1: [Int], _ interval2: [Int]) -> String {\n    let l = max(interval1[0], interval2[0])\n    let r = min(interval1[1], interval2[1])\n    let length = r - l\n    return length > 0 && is_prime(length) ? \"YES\" : \"NO\"\n}\n",
            "func prodSigns(_ arr: [Int]) -> Int? {\n    guard !arr.isEmpty else { return nil }\n    if arr.contains(0) { return 0 }\n    let sign = (arr.filter { $0 < 0 }.count % 2 == 1) ? -1 : 1\n    return sign * arr.reduce(0, +).magnitude\n}\n",
            "func minPath(_ grid: [[Int]], _ k: Int) -> [Int] {\n    let n = grid.count\n    var minVal = n * n + 1\n    \n    for i in 0..<n {\n        for j in 0..<n {\n            if grid[i][j] == 1 {\n                var temp: [Int] = []\n                if i != 0 { temp.append(grid[i - 1][j]) }\n                if j != 0 { temp.append(grid[i][j - 1]) }\n                if i != n - 1 { temp.append(grid[i + 1][j]) }\n                if j != n - 1 { temp.append(grid[i][j + 1]) }\n                minVal = [minVal] + temp\n                minVal.sort()\n            }\n        }\n    }\n    \n    var result: [Int] = []\n    for i in 0..<k {\n        result.append(i % 2 == 0 ? 1 : minVal[0])\n    }\n    \n    return result\n}\n",
            "func tri(_ n: Int) -> [Int] {\n    if n == 0 {\n        return [1]\n    }\n    var seq = [1, 3]\n    for i in 2...n {\n        if i % 2 == 0 {\n            seq.append(i / 2 + 1)\n        } else {\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) / 2)\n        }\n    }\n    return seq\n}\n",
            "func digits(_ n: Int) -> Int {\n    let odds = String(n).compactMap { $0.wholeNumberValue }.filter { $0 % 2 != 0 }\n    return odds.isEmpty ? 0 : odds.reduce(1, *)\n}\n",
            "func isNested(_ s: String) -> Bool {\n    var openIdx = [Int]()\n    var closeIdx = [Int]()\n    \n    for (i, ch) in s.enumerated() {\n        if ch == \"[\" {\n            openIdx.append(i)\n        } else if ch == \"]\" {\n            closeIdx.append(i)\n        }\n    }\n    \n    closeIdx.reverse()\n    var cnt = 0\n    let l = closeIdx.count\n    var i = 0\n    \n    for idx in openIdx {\n        if i < l && idx < closeIdx[i] {\n            cnt += 1\n            i += 1\n        }\n    }\n    \n    return cnt >= 2\n}\n",
            "func sumSquares(_ lst: [Double]) -> Int {\n    return lst.map { (n) in Int(ceil(n)) * Int(ceil(n)) }.reduce(0, +)\n}\n",
            "func checkIfLastCharIsALetter(_ txt: String) -> Bool {\n    if txt.isEmpty {\n        return false\n    }\n    let last = txt.components(separatedBy: \" \").last ?? \"\"\n    return last.count == 1 && last.isLetter\n}\n",
            "func canArrange(_ arr: [Int]) -> Int {\n    if arr.count <= 1 { return -1 }\n    let idx = (0..<arr.count-1).compactMap { i in\n        arr[i+1] < arr[i] ? i + 1 : nil\n    }\n    return idx.isEmpty ? -1 : idx.max() ?? -1\n}\n",
            "func largestSmallestIntegers(_ lst: [Int]) -> [Int?] {\n    let neg = lst.filter { $0 < 0 }\n    let pos = lst.filter { $0 > 0 }\n    let maxNeg = neg.isEmpty ? nil : neg.max()\n    let minPos = pos.isEmpty ? nil : pos.min()\n    return [maxNeg, minPos]\n}\n",
            "func compareOne(_ a: Any, _ b: Any) -> Double? {\n    func anyToReal(_ o: Any) throws -> Double {\n        if let str = o as? String {\n            return Double(str.replacingOccurrences(of: \",\", with: \".\"))\n        } else if let int = o as? Int {\n            return Double(int)\n        } else if let float = o as? Double {\n            return float\n        } else {\n            throw NSError(domain: \"Type Error\", code: 0, userInfo: nil)\n        }\n    }\n\n    do {\n        let a1 = try anyToReal(a)\n        let b1 = try anyToReal(b)\n        if a1 == b1 {\n            return nil\n        } else if a1 > b1 {\n            return a1\n        } else {\n            return b1\n        }\n    } catch {\n        fatalError(error.localizedDescription)\n    }\n}\n",
            "func isEqualToSumEven(_ n: Int) -> Bool {\n    return n % 2 == 0 && n >= 8\n}\n",
            "func specialFactorial(_ n: Int) -> Int {\n    var fact = 1\n    var result = 1\n    for i in 1...n {\n        fact *= i\n        result *= fact\n    }\n    return result\n}\n",
            "func fixSpaces(_ txt: String) -> String {\n    return txt.replacingOccurrences(of: \"\\\\s{3,}\", with: \"-\", options: .regularExpression)\n                .replacingOccurrences(of: \" \", with: \"_\")\n}\n",
            "func fileNameCheck(_ fileName: String) -> String {\n    let suf = [\"txt\", \"exe\", \"dll\"]\n    let lst = fileName.split(separator: \".\")\n    \n    if lst.count != 2 || !suf.contains(String(lst[1])) || lst[0].isEmpty || !lst[0].first!.isLetter || lst[0].filter { $0.isNumber }.count > 3 {\n        return \"No\"\n    }\n    return \"Yes\"\n}\n",
            "func sumSquares(_ lst: [Int]) -> Int {\n    var result = 0\n    for i in 0..<lst.count {\n        if i % 3 == 0 {\n            result += lst[i]**2\n        } else if i % 4 == 0 {\n            result += lst[i]**3\n        } else {\n            result += lst[i]\n        }\n    }\n    return result\n}\n",
            "func wordsInSentence(_ sentence: String) -> String {\n    func isPrime(_ n: Int) -> Bool {\n        guard n >= 2 else { return false }\n        for i in stride(from: 2, through: Int(sqrt(Double(n))), by: 1) {\n            if n % i == 0 {\n                return false\n            }\n        }\n        return true\n    }\n    \n    let words = sentence.split(separator: \" \")\n    let filteredWords = words.filter { isPrime($0.count) }\n    return String(filteredWords.joined(separator: \" \"))\n}\n",
            "func simplify(_ x: String, _ n: String) -> Bool {\n    let xs = x.split(separator: \"/\")\n    let ns = n.split(separator: \"/\")\n    let num = Int(xs[0])! * Int(ns[0])!\n    let den = Int(xs[1])! * Int(ns[1])!\n    return num % den == 0\n}\n",
            "func digitsSum(_ n: Int) -> Int {\n    let nStr = String(abs(n))\n    if n >= 0 {\n        return nStr.compactMap { $0.wholeNumberValue }.reduce(0, +)\n    } else {\n        let twoDigitPart = Int(String(nStr.prefix(2)))!\n        return twoDigitPart * 2 + digitsSum(abs(n))\n    }\n}\n\nfunc orderByPoints(_ nums: [Int]) -> [Int] {\n    nums.sorted { digitsSum($0) < digitsSum($1) }\n}\n",
            "func specialFilter(_ nums: [Int]) -> Int {\n    let odds = \"13579\"\n    return nums.filter { n in\n        n > 10 && (n % 2 != 0) && odds.contains(String(n).first!)\n    }.count\n}\n",
            "func getMaxTriples(_ n: Int) -> Int {\n    var c = [0, 0, 0]\n    for i in 1...n {\n        let a = i * i - i + 1\n        c[a % 3] += 1\n    }\n    return (c[0] * c[1] * c[2]) + ((c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6)\n}\n",
            "func bf(_ planet1: String, _ planet2: String) -> [String] {\n    let names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let l = names.firstIndex(of: planet1), let r = names.firstIndex(of: planet2) else { return [] }\n    \n    if l > r {\n        return []\n    } else if l == r {\n        return []\n    } else {\n        return Array(names[(l + 1)...(r - 1)])\n    }\n}\n",
            "func sortedListSum(_ lst: [String]) -> [String] {\n    let result = lst.filter { $0.length % 2 == 0 }\n    return result.sorted { \n        if $0.length == $1.length {\n            return $0 < $1\n        }\n        return $0.length < $1.length\n    }\n}\n",
            "func xOrY(_ n: Int, _ x: Int, _ y: Int) -> Int {\n  return n < 2 ? y : (2...Int(sqrt(Double(n)))).contains { i in n % i == 0 } ? y : x\n}\n",
            "func doubleTheDifference(_ lst: [Double]) -> Int {\n    return lst.filter { $0 >= 0 && Int($0) % 2 == 1 }.map { Int($0 * $0) }.reduce(0, +)\n}\n",
            "func compare(_ game: [Int], _ guess: [Int]) -> [Int] {\n    zip(game, guess).map { abs($0 - $1) }\n}\n",
            "func strongestExtension(_ className: String, _ extensions: [String]) -> String {\n    var maxS = Int.min\n    var maxExt = \"\"\n    \n    for ext in extensions {\n        let upper = ext.filter { $0.isUppercase }.count\n        let lower = ext.filter { $0.isLowercase }.count\n        let s = upper - lower\n        \n        if s > maxS {\n            maxS = s\n            maxExt = ext\n        }\n    }\n    \n    return \"\\(className).\\(maxExt)\"\n}\n",
            "func cycpatternCheck(_ a: String, _ b: String) -> Bool {\n    if a.count < b.count {\n        return false\n    }\n    let range = 0..<b.count\n    for i in range {\n        let rotatedB = String(b.dropFirst(i) + b.prefix(i))\n        if a.contains(rotatedB) {\n            return true\n        }\n    }\n    return false\n}\n",
            "func evenOddCount(_ num: Int) -> [Int] {\n    let ds = String(abs(num))\n    let even = ds.filter { $0.isNumber && (Int(String($0)) ?? 0) % 2 == 0 }.count\n    return [even, ds.count - even]\n}\n",
            "func intToMiniRoman(_ num: Int) -> String {\n    let values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    let numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    var res = \"\"\n    for i in 0..<values.count {\n        while num >= values[i] {\n            res.append(numerals[i])\n            num -= values[i]\n        }\n    }\n    return res\n}\n",
            "func rightAngleTriangle(_ a: Int, _ b: Int, _ c: Int) -> Bool {\n    let s = [a, b, c].sorted()\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n}\n",
            "func findMax(_ words: [String]) -> String {\n    var maxCnt = 0\n    var maxW = \"\"\n    \n    for w in words {\n        let cnt = Set(w).count\n        if cnt > maxCnt {\n            maxCnt = cnt\n            maxW = w\n        } else if cnt == maxCnt {\n            maxW = [maxW, w].min() ?? \"\"\n        }\n    }\n    \n    return maxW\n}\n",
            "func eat(_ num: Int, _ need: Int, _ remaining: Int) -> [Int] {\n    if need <= remaining {\n        return [num + need, remaining - need]\n    } else {\n        return [num + remaining, 0]\n    }\n}\n",
            "func doAlgebra(_ operators: [String], _ operands: [Int]) -> Int {\n    var ops = operators\n    var nums = operands\n    \n    var i = ops.count - 1\n    while i >= 0 {\n        if ops[i] == \"**\" {\n            nums[i] = Int(pow(Double(nums[i]), Double(nums[i + 1])))\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n        }\n        i -= 1\n    }\n    \n    i = 0\n    while i < ops.count {\n        if ops[i] == \"*\" {\n            nums[i] *= nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            i -= 1\n        } else if ops[i] == \"//\" {\n            nums[i] /= nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            i -= 1\n        }\n        i += 1\n    }\n    \n    i = 0\n    while i < ops.count {\n        if ops[i] == \"+\" {\n            nums[i] += nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            i -= 1\n        } else if ops[i] == \"-\" {\n            nums[i] -= nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            i -= 1\n        }\n        i += 1\n    }\n    \n    return nums[0]\n}\n",
            "func solve(_ s: String) -> String {\n    if !s.contains(where: { $0.isLetter }) {\n        return String(s.reversed())\n    }\n\n    var result = \"\"\n    for ch in s {\n        if !ch.isLetter {\n            result.append(ch)\n        } else if ch.isUppercase {\n            result.append(ch.lowercased())\n        } else if ch.isLowercase {\n            result.append(ch.uppercased())\n        }\n    }\n\n    return result\n}\n",
            "func stringToMd5(_ txt: String) -> String? {\n    guard !txt.isEmpty else { return nil }\n    let md5Digest = Insecure.MD5.hash(data: txt.data(using: .utf8)!)\n    var md5Hash = \"\"\n    for byte in md5Digest {\n        md5Hash += String(format:\"%02x\", byte)\n    }\n    return md5Hash\n}\n",
            "func generateIntegers(_ a: Int, _ b: Int) -> [Int] {\n    let lower = max(2, min(a, b))\n    let upper = min(8, max(a, b))\n    return (lower...upper).filter { $0 % 2 == 0 }\n}\n"
        ],
        "rust": [
            "pub fn has_close_elements(numbers: &Vec<f64>, threshold: f64) -> bool {\n    for (i, &num1) in numbers.iter().enumerate() {\n        for &num2 in &numbers[i + 1..] {\n            if (num1 - num2).abs() < threshold {\n                return true;\n            }\n        }\n    }\n    false\n}\n",
            "pub fn separate_paren_groups(paren_string: &String) -> Vec<String> {\n    let mut groups = Vec::new();\n    let mut stk = Vec::new();\n    let mut current_group = String::new();\n    let parens = paren_string.chars().filter(|&c| c != ' ');\n\n    for ch in parens {\n        if ch == '(' {\n            stk.push(ch);\n            current_group.push(ch);\n        } else if ch == ')' {\n            stk.pop();\n            current_group.push(ch);\n            if stk.is_empty() {\n                groups.push(current_group.clone());\n                current_group.clear();\n            }\n        }\n    }\n    groups\n}\n",
            "pub fn truncate_number(num: f64) -> f64 {\n    num - num.floor()\n}\n",
            "pub fn below_zero(operations: &Vec<i32>) -> bool {\n    let mut balance = 0;\n    for &op in operations.iter() {\n        balance += op;\n        if balance < 0 {\n            return true;\n        }\n    }\n    false\n}\n",
            "pub fn mean_absolute_deviation(numbers: &Vec<f64>) -> f64 {\n    let mean = numbers.iter().sum::<f64>() / numbers.len() as f64;\n    let deviation: f64 = numbers.iter().map(|&x| (x - mean).abs()).sum();\n    deviation / numbers.len() as f64\n}\n",
            "pub fn intersperse(numbers: &Vec<i32>, delimiter: i32) -> Vec<i32> {\n    let mut result = Vec::new();\n    for (i, number) in numbers.iter().enumerate() {\n        if i != 0 {\n            result.push(delimiter);\n        }\n        result.push(*number);\n    }\n    result\n}\n",
            "pub fn parse_nested_parens(paren_string: &String) -> Vec<i32> {\n    let mut result = Vec::new();\n    let paren_groups = paren_string.split_whitespace();\n\n    for group in paren_groups {\n        let mut max_depth = 0;\n        let mut depth = 0;\n\n        for ch in group.chars() {\n            if ch == '(' {\n                depth += 1;\n                max_depth = max_depth.max(depth);\n            } else if ch == ')' {\n                depth -= 1;\n            }\n        }\n\n        result.push(max_depth);\n    }\n\n    result\n}\n",
            "pub fn filter_by_substring(strs: &Vec<String>, substring: &String) -> Vec<String> {\n    strs.iter()\n        .filter(|&s| s.contains(substring))\n        .cloned()\n        .collect()\n}\n",
            "pub fn sum_product(numbers: &Vec<i32>) -> Vec<i32> {\n    let n_sum = numbers.iter().sum();\n    let n_product = numbers.iter().fold(1, |x, y| x * y);\n    vec![n_sum, n_product]\n}\n",
            "pub fn rolling_max(numbers: &Vec<i32>) -> Vec<i32> {\n    let mut max_so_far = i32::MIN;\n    let mut result = Vec::new();\n    for &num in numbers {\n        if num > max_so_far {\n            max_so_far = num;\n        }\n        result.push(max_so_far);\n    }\n    result\n}\n",
            "pub fn make_palindrome(s: &String) -> String {\n    let reversed_s = s.chars().rev().collect::<String>();\n    if s == reversed_s {\n        return s.clone();\n    }\n    for i in 0..s.len() {\n        let suffix = &s[i..];\n        let prefix_reversed = s[0..i].chars().rev().collect::<String>();\n        if suffix == &suffix.chars().rev().collect::<String>() {\n            return format!(\"{}{}\", s, prefix_reversed);\n        }\n    }\n    \"\".to_string()\n}\n",
            "pub fn string_xor(a: &String, b: &String) -> String {\n    a.chars()\n        .zip(b.chars())\n        .map(|(x, y)| if x == y { '0' } else { '1' })\n        .collect()\n}\n",
            "pub fn longest(strs: &Vec<String>) -> Option<String> {\n    if strs.is_empty() {\n        return None;\n    }\n    let mut longest_s = &strs[0];\n    for s in strs.iter() {\n        if s.len() > longest_s.len() {\n            longest_s = s;\n        }\n    }\n    Some(longest_s.clone())\n}\n",
            "pub fn greatest_common_divisor(a: i32, b: i32) -> i32 {\n    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b, a % b)\n    }\n}\n",
            "pub fn all_prefixes(s: &String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for i in 0..s.len() {\n        let prefix = s[0..=i].to_string();\n        prefixes.push(prefix);\n    }\n    prefixes\n}\n",
            "pub fn string_sequence(n: i32) -> String {\n    (0..=n).map(|i| i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n",
            "pub fn count_distinct_characters(s: &String) -> i32 {\n    s.to_lowercase().chars().collect::<std::collections::HashSet<_>>().len() as i32\n}\n",
            "pub fn parse_music(music_string: &String) -> Vec<i32> {\n    let durations = vec![\n        (\"o\", 4),\n        (\"o|\", 2),\n        (\".|\", 1),\n    ].into_iter().collect::<std::collections::HashMap<_, _>>();\n\n    music_string.split_whitespace()\n               .map(|note| durations.get(note).cloned().unwrap_or_default())\n               .collect()\n}\n",
            "pub fn how_many_times(s: &String, substring: &String) -> i32 {\n    let mut times = 0;\n    let s_len = s.len();\n    let sub_len = substring.len();\n\n    for i in 0..=s_len - sub_len {\n        if &s[i..i + sub_len] == substring {\n            times += 1;\n        }\n    }\n\n    times\n}\n",
            "pub fn sort_numbers(numbers: &String) -> String {\n    let num_dict = [\n        (\"zero\", 0),\n        (\"one\", 1),\n        (\"two\", 2),\n        (\"three\", 3),\n        (\"four\", 4),\n        (\"five\", 5),\n        (\"six\", 6),\n        (\"seven\", 7),\n        (\"eight\", 8),\n        (\"nine\", 9),\n    ].iter().cloned().collect::<std::collections::HashMap<_, _>>();\n\n    let mut num_list: Vec<&str> = numbers.split_whitespace()\n        .filter(|x| num_dict.contains_key(*x))\n        .collect();\n    \n    num_list.sort_by_key(|&x| num_dict[x]);\n    \n    num_list.join(\" \")\n}\n",
            "pub fn find_closest_elements(numbers: &Vec<f64>) -> Vec<f64> {\n    let mut sorted_numbers = numbers.clone();\n    sorted_numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n    \n    let mut min_diff = f64::INFINITY;\n    let mut closest_pair = Vec::new();\n    \n    for i in 1..sorted_numbers.len() {\n        let diff = sorted_numbers[i] - sorted_numbers[i - 1];\n        if diff < min_diff {\n            min_diff = diff;\n            closest_pair = vec![sorted_numbers[i - 1], sorted_numbers[i]];\n        }\n    }\n    \n    closest_pair\n}\n",
            "pub fn rescale_to_unit(numbers: &Vec<f64>) -> Vec<f64> {\n    let min_num = numbers.iter().cloned().fold(f64::INFINITY, f64::min);\n    let max_num = numbers.iter().cloned().fold(-f64::INFINITY, f64::max);\n    \n    if min_num == max_num {\n        vec![0.0; numbers.len()]\n    } else {\n        numbers.iter().map(|&num| (num - min_num) / (max_num - min_num)).collect()\n    }\n}\n",
            "pub fn filter_integers(values: &Vec<Box<dyn std::any::Any>>) -> Vec<i32> {\n    values.iter()\n        .filter_map(|x| x.downcast_ref::<i32>().cloned())\n        .collect()\n}\n",
            "pub fn str_length(s: &String) -> i32 {\n    s.len() as i32\n}\n",
            "pub fn largest_divisor(n: i32) -> i32 {\n    for i in 2..n {\n        if n % i == 0 {\n            return n / i;\n        }\n    }\n    return 1;\n}\n",
            "pub fn factorize(mut n: i32) -> Vec<i32> {\n    let mut factors = Vec::new();\n    let mut divisor = 2;\n    while divisor <= n {\n        if n % divisor == 0 {\n            factors.push(divisor);\n            n /= divisor;\n        } else {\n            divisor += 1;\n        }\n    }\n    factors\n}\n",
            "pub fn remove_duplicates(numbers: &Vec<i32>) -> Vec<i32> {\n    let mut counts = std::collections::HashMap::new();\n    for &num in numbers {\n        *counts.entry(num).or_insert(0) += 1;\n    }\n    numbers.iter().filter(|&&num| counts[&num] == 1).cloned().collect()\n}\n",
            "pub fn flip_case(s: &String) -> String {\n    let mut flipped = String::new();\n    for ch in s.chars() {\n        if !ch.is_alphabetic() {\n            flipped.push(ch);\n        } else if ch.is_lowercase() {\n            flipped.push(ch.to_uppercase().next().unwrap());\n        } else if ch.is_uppercase() {\n            flipped.push(ch.to_lowercase().next().unwrap());\n        }\n    }\n    flipped\n}\n",
            "pub fn concatenate(strs: &Vec<String>) -> String {\n    strs.concat()\n}\n",
            "pub fn filter_by_prefix(strs: &Vec<String>, prefix_str: &String) -> Vec<String> {\n    strs.iter()\n        .filter(|s| s.starts_with(prefix_str))\n        .cloned()\n        .collect()\n}\n",
            "pub fn get_positive(l: &Vec<i32>) -> Vec<i32> {\n    l.iter().filter(|&&num| num > 0).cloned().collect()\n}\n",
            "pub fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..=((n as f64).sqrt() as i32) {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\n",
            "pub fn poly(xs: &Vec<i32>, x: f64) -> f64 {\n    let mut res = 0.0;\n    for (i, &coeff) in xs.iter().enumerate() {\n        res += coeff as f64 * x.powi(i as i32);\n    }\n    res\n}\n\npub fn find_zero(xs: &Vec<i32>) -> f64 {\n    let mut x1 = 1.0;\n    let mut x2 = -1.0;\n    while poly(xs, x1) * poly(xs, x2) > 0.0 {\n        x1 *= 2.0;\n        x2 *= 2.0;\n    }\n    while (x1 - x2).abs() > 1e-10 {\n        let mid = (x1 + x2) / 2.0;\n        if poly(xs, mid) == 0.0 {\n            return mid;\n        } else if poly(xs, mid) * poly(xs, x1) < 0.0 {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    (x1 + x2) / 2.0\n}\n",
            "pub fn sort_third(l: &Vec<i32>) -> Vec<i32> {\n    let mut sorted_third: Vec<i32> = l.iter().enumerate()\n        .filter_map(|(i, &x)| if i % 3 == 0 { Some(x) } else { None })\n        .collect();\n    sorted_third.sort();\n\n    l.iter().enumerate()\n        .map(|(i, &x)| {\n            if i % 3 == 0 {\n                sorted_third[i / 3]\n            } else {\n                x\n            }\n        })\n        .collect()\n}\n",
            "pub fn list_unique(l: &Vec<i32>) -> Vec<i32> {\n    let mut unique = l.to_vec();\n    unique.sort_unstable();\n    unique.dedup();\n    unique\n}\n",
            "pub fn max_element(l: &Vec<i32>) -> i32 {\n    if l.is_empty() {\n        0\n    } else {\n        *l.iter().max().unwrap()\n    }\n}\n",
            "pub fn fizz_buzz(n: i32) -> i32 {\n    let mut cnt = 0;\n    for i in 0..n {\n        if i % 11 == 0 || i % 13 == 0 {\n            let count = i.to_string().matches('7').count();\n            cnt += count as i32;\n        }\n    }\n    return cnt;\n}\n",
            "pub fn sort_even(l: &Vec<i32>) -> Vec<i32> {\n    let mut sorted_even: Vec<i32> = l.iter().enumerate()\n        .filter(|&(i, _)| i % 2 == 0)\n        .map(|(_, &x)| x)\n        .collect();\n    sorted_even.sort_unstable();\n\n    l.iter().enumerate()\n        .map(|(i, &x)| if i % 2 == 0 { sorted_even[i / 2] } else { x })\n        .collect()\n}\n",
            "pub fn encode_cyclic(s: &String) -> String {\n    let mut result = Vec::new();\n    let chars: Vec<char> = s.chars().collect();\n    \n    for i in (0..chars.len()).step_by(3) {\n        if i + 3 > chars.len() {\n            result.extend(&chars[i..]);\n        } else {\n            result.extend(&chars[i+1..i+3]);\n            result.push(chars[i]);\n        }\n    }\n    \n    result.into_iter().collect()\n}\n\npub fn decode_cyclic(s: &String) -> String {\n    encode_cyclic(&encode_cyclic(s))\n}\n",
            "fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            return false;\n        }\n        i += 1;\n    }\n    true\n}\n\npub fn prime_fib(n: i32) -> i32 {\n    let mut f = [0, 1];\n    let mut cnt = 0;\n    while cnt < n {\n        f[0] = f[1];\n        f[1] += f[0];\n        if is_prime(f[1]) {\n            cnt += 1;\n        }\n    }\n    f[1]\n}\n",
            "pub fn triples_sum_to_zero(l: &Vec<i32>) -> bool {\n    for i in 0..l.len() {\n        for j in (i + 1)..l.len() {\n            for k in (j + 1)..l.len() {\n                if l[i] + l[j] + l[k] == 0 {\n                    return true;\n                }\n            }\n        }\n    }\n    false\n}\n",
            "pub fn car_race_collision(n: i32) -> i32 {\n    n.pow(2)\n}\n",
            "pub fn incr_list(l: &Vec<i32>) -> Vec<i32> {\n    l.iter().map(|&i| i + 1).collect()\n}\n",
            "use std::collections::HashSet;\n\npub fn pairs_sum_to_zero(l: &Vec<i32>) -> bool {\n    let mut seen = HashSet::new();\n    for &num in l {\n        if seen.contains(&-num) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    false\n}\n",
            "pub fn change_base(x: i32, bas: i32) -> String {\n    if x == 0 {\n        return \"0\".to_string();\n    }\n    let mut digits = Vec::new();\n    let mut num = x;\n    while num > 0 {\n        digits.push((num % bas).to_string());\n        num /= bas;\n    }\n    digits.reverse();\n    digits.join(\"\")\n}\n",
            "fn triangle_area(a: i32, h: i32) -> f64 {\n    (a as f64) * (h as f64) / 2.0\n}\n",
            "pub fn fib4(n: i32) -> i32 {\n    let mut fib = [0, 0, 2, 0];\n    for i in 4..=n {\n        fib[(i % 4) as usize] = fib.iter().sum();\n    }\n    fib[(n % 4) as usize]\n}\n",
            "pub fn median(l: &Vec<f64>) -> f64 {\n    let mut sl = l.clone();\n    sl.sort_by(|a, b| a.partial_cmp(b).unwrap());\n    if l.len() % 2 != 0 {\n        sl[l.len() / 2]\n    } else {\n        (sl[l.len() / 2] + sl[l.len() / 2 - 1]) / 2.0\n    }\n}\n",
            "pub fn is_palindrome(txt: &String) -> bool {\n    txt.chars().eq(txt.chars().rev())\n}\n",
            "pub fn modp(n: i32, p: i32) -> i32 {\n    let mut ret = 1;\n    for _ in 0..n {\n        ret = (ret * 2 % p);\n    }\n    ret\n}\n",
            "pub fn encode_shift(s: &String) -> String {\n    s.chars()\n        .map(|ch| ((ch as u8 - 97 + 5) % 26 + 97) as char)\n        .collect()\n}\n\npub fn decode_shift(s: &String) -> String {\n    s.chars()\n        .map(|ch| ((ch as u8 - 97 + 21) % 26 + 97) as char)\n        .collect()\n}\n",
            "pub fn remove_vowels(txt: &String) -> String {\n    let vowels = \"aeiouAEIOU\";\n    txt.chars()\n        .filter(|c| !vowels.contains(*c))\n        .collect()\n}\n",
            "pub fn below_threshold(l: &Vec<i32>, t: i32) -> bool {\n    l.iter().all(|&x| x < t)\n}\n",
            "pub fn add(x: i32, y: i32) -> i32 {\n    x + y\n}\n",
            "use std::collections::HashSet;\n\npub fn same_chars(s0: &String, s1: &String) -> bool {\n    let set0: HashSet<char> = s0.chars().collect();\n    let set1: HashSet<char> = s1.chars().collect();\n    set0 == set1\n}\n",
            "pub fn fib(n: i32) -> i32 {\n    if n <= 1 {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n",
            "pub fn correct_bracketing(brackets: &String) -> bool {\n    let mut depth = 0;\n    for b in brackets.chars() {\n        if b == '<' {\n            depth += 1;\n        } else if b == '>' {\n            depth -= 1;\n        }\n        if depth < 0 {\n            return false;\n        }\n    }\n    depth == 0\n}\n",
            "pub fn monotonic(l: &Vec<i32>) -> bool {\n    let diff = l.windows(2).map(|w| w[1] - w[0]);\n    diff.all(|&x| x <= 0) || diff.all(|&x| x >= 0)\n}\n",
            "use std::collections::HashSet;\n\npub fn common(l1: &Vec<i32>, l2: &Vec<i32>) -> Vec<i32> {\n    let set1: HashSet<_> = l1.iter().collect();\n    let set2: HashSet<_> = l2.iter().collect();\n    let mut result: Vec<i32> = set1.intersection(&set2).cloned().collect();\n    result.sort();\n    result\n}\n",
            "pub fn largest_prime_factor(mut n: i32) -> i32 {\n    let mut i = 2;\n    while i * i <= n {\n        if n % i != 0 {\n            i += 1;\n        } else {\n            n /= i;\n        }\n    }\n    n\n}\n",
            "pub fn sum_to_n(n: i32) -> i32 {\n    (0..=n).sum()\n}\n",
            "pub fn correct_bracketing(brackets: &String) -> bool {\n    let mut depth = 0;\n    for b in brackets.chars() {\n        if b == '(' {\n            depth += 1;\n        } else if b == ')' {\n            depth -= 1;\n        }\n        if depth < 0 {\n            return false;\n        }\n    }\n    depth == 0\n}\n",
            "pub fn derivative(xs: &Vec<i32>) -> Vec<i32> {\n    (1..xs.len()).map(|i| xs[i] as i32 * i as i32).collect()\n}\n",
            "pub fn fibfib(n: i32) -> i32 {\n    if n <= 1 {\n        return 0;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 1;\n    let mut n = n - 2;\n    while n > 0 {\n        let temp = a + b + c;\n        a = b;\n        b = c;\n        c = temp;\n        n -= 1;\n    }\n    c\n}\n",
            "pub fn vowels_count(s: &String) -> i32 {\n    let vowels = \"aeiou\";\n    let mut cnt = 0;\n    for (i, c) in s.chars().enumerate() {\n        if vowels.contains(c.to_lowercase().to_string().as_str()) || \n           (i == s.len() - 1 && c.to_lowercase().to_string().as_str() == \"y\") {\n            cnt += 1;\n        }\n    }\n    cnt as i32\n}\n",
            "pub fn circular_shift(x: i32, shift: i32) -> String {\n    let x_str = x.to_string();\n    let len = x_str.len();\n    if shift as usize > len {\n        x_str.chars().rev().collect()\n    } else {\n        let shift = shift as usize;\n        x_str[len - shift..].to_string() + &x_str[..len - shift]\n    }\n}\n",
            "pub fn digit_sum(s: &str) -> i32 {\n    s.chars()\n        .filter(|c| c.is_ascii_uppercase())\n        .map(|c| c as i32)\n        .sum()\n}\n",
            "pub fn fruit_distribution(s: &String, n: i32) -> i32 {\n    let words: Vec<&str> = s.split(' ').collect();\n    let apples_index = words.iter().position(|&x| x == \"apples\").unwrap();\n    let oranges_index = words.iter().position(|&x| x == \"oranges\").unwrap();\n    let apples = words[apples_index - 1].parse::<i32>().unwrap();\n    let oranges = words[oranges_index - 1].parse::<i32>().unwrap();\n    n - apples - oranges\n}\n",
            "pub fn pluck(arr: &Vec<i32>) -> Vec<i32> {\n    let evens: Vec<&i32> = arr.iter().filter(|&&n| n % 2 == 0).collect();\n    if evens.is_empty() {\n        return vec![];\n    }\n    \n    let min_even = *evens.iter().min().unwrap();\n    let index = arr.iter().position(|&x| x == min_even).unwrap();\n    vec![min_even, index as i32]\n}\n",
            "use std::collections::HashMap;\n\npub fn search(lst: &Vec<i32>) -> i32 {\n    let mut freqs = HashMap::new();\n    for &n in lst.iter() {\n        *freqs.entry(n).or_insert(0) += 1;\n    }\n    let good_vals: Vec<i32> = freqs\n        .iter()\n        .filter(|(&&k, &v)| v >= k)\n        .map(|(&k, _)| k)\n        .collect();\n    *good_vals.iter().max().unwrap_or(&-1)\n}\n",
            "pub fn strange_sort_list(lst: &Vec<i32>) -> Vec<i32> {\n    let mut sl = lst.clone();\n    sl.sort();\n    let mut result = Vec::new();\n    let (mut left, mut right) = (0, sl.len() - 1);\n    while left <= right {\n        result.push(sl[left]);\n        left += 1;\n        if left <= right {\n            result.push(sl[right]);\n            right -= 1;\n        }\n    }\n    result\n}\n",
            "pub fn triangle_area(a: i32, b: i32, c: i32) -> f64 {\n    if a + b > c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n        (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n",
            "pub fn will_it_fly(q: &Vec<i32>, w: i32) -> bool {\n    if q.is_empty() {\n        return false;\n    }\n    let is_palin = q.iter().zip(q.iter().rev()).all(|(a, b)| a == b);\n    let total: i32 = q.iter().sum();\n    is_palin && total <= w\n}\n",
            "pub fn smallest_change(arr: &Vec<i32>) -> i32 {\n    let mut ans = 0;\n    for i in 0..(arr.len() / 2) {\n        if arr[i] != arr[arr.len() - i - 1] {\n            ans += 1;\n        }\n    }\n    ans\n}\n",
            "pub fn total_match(lst1: &Vec<String>, lst2: &Vec<String>) -> Vec<String> {\n    let cnt1 = lst1.iter().map(|s| s.len()).sum::<usize>();\n    let cnt2 = lst2.iter().map(|s| s.len()).sum::<usize>();\n    if cnt1 <= cnt2 { lst1.clone() } else { lst2.clone() }\n}\n",
            "pub fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..=((n as f64).sqrt() as i32) {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\n\npub fn is_multiply_prime(a: i32) -> bool {\n    let mut cnt = 0;\n    let mut num = a;\n    for i in 2..=num {\n        if is_prime(i) {\n            while num % i == 0 {\n                cnt += 1;\n                num /= i;\n            }\n        }\n    }\n    cnt == 3\n}\n",
            "pub fn is_simple_power(x: i32, n: i32) -> bool {\n    if n < 2 {\n        return x == n;\n    }\n    let mut tmp = 1;\n    while tmp < x {\n        tmp *= n;\n    }\n    tmp == x\n}\n",
            "pub fn is_cube(a: i32) -> bool {\n    let a = a.abs();\n    let root = (a as f64).cbrt().round() as i32;\n    root * root * root == a\n}\n",
            "pub fn hex_key(num: &String) -> i32 {\n    num.chars()\n        .filter(|&c| matches!(c, '2' | '3' | '5' | '7' | 'B' | 'D'))\n        .count() as i32\n}\n",
            "pub fn decimal_to_binary(dec: i32) -> String {\n    format!(\"db{}db\", format!(\"{:b}\", dec))\n}\n",
            "pub fn is_happy(s: &String) -> bool {\n    if s.len() < 3 {\n        return false;\n    }\n    for i in 0..(s.len() - 2) {\n        let chars: Vec<char> = s.chars().collect();\n        if chars[i] == chars[i + 1] || chars[i] == chars[i + 2] || chars[i + 1] == chars[i + 2] {\n            return false;\n        }\n    }\n    true\n}\n",
            "pub fn numerical_letter_grade(grades: &Vec<f64>) -> Vec<String> {\n    let mut result = Vec::new();\n    for &g in grades {\n        if g == 4.0 {\n            result.push(\"A+\".to_string());\n        } else if g > 3.7 {\n            result.push(\"A\".to_string());\n        } else if g > 3.3 {\n            result.push(\"A-\".to_string());\n        } else if g > 3.0 {\n            result.push(\"B+\".to_string());\n        } else if g > 2.7 {\n            result.push(\"B\".to_string());\n        } else if g > 2.3 {\n            result.push(\"B-\".to_string());\n        } else if g > 2.0 {\n            result.push(\"C+\".to_string());\n        } else if g > 1.7 {\n            result.push(\"C\".to_string());\n        } else if g > 1.3 {\n            result.push(\"C-\".to_string());\n        } else if g > 1.0 {\n            result.push(\"D+\".to_string());\n        } else if g > 0.7 {\n            result.push(\"D\".to_string());\n        } else if g > 0.0 {\n            result.push(\"D-\".to_string());\n        } else {\n            result.push(\"E\".to_string());\n        }\n    }\n    result\n}\n",
            "pub fn prime_length(s: &String) -> bool {\n    let length = s.len();\n    if length < 2 {\n        return false;\n    }\n    for i in 2..=((length as f64).sqrt() as usize) {\n        if length % i == 0 {\n            return false;\n        }\n    }\n    true\n}\n",
            "pub fn starts_one_ends(n: i32) -> i32 {\n    if n == 1 {\n        return 1;\n    }\n    return 2 * 9 * (10_i32.pow((n - 2) as u32));\n}\n",
            "pub fn solve(n: i32) -> String {\n    let digits_sum = n.to_string().chars().map(|c| c.to_digit(10).unwrap() as i32).sum::<i32>();\n    format!(\"{:b}\", digits_sum)\n}\n",
            "pub fn add(lst: &Vec<i32>) -> i32 {\n    lst.iter().enumerate()\n       .filter(|&(i, &x)| i % 2 != 0 && x % 2 == 0)\n       .map(|(_, &x)| x)\n       .sum()\n}\n",
            "pub fn anti_shuffle(s: &String) -> String {\n    s.split_whitespace()\n        .map(|word| {\n            let mut chars: Vec<char> = word.chars().collect();\n            chars.sort_unstable();\n            chars.into_iter().collect::<String>()\n        })\n        .collect::<Vec<String>>()\n        .join(\" \")\n}\n",
            "pub fn get_row(lst: &Vec<Vec<i32>>, x: i32) -> Vec<Vec<i32>> {\n    let mut coords = vec![];\n    for (i, row) in lst.iter().enumerate() {\n        for (j, &value) in row.iter().enumerate() {\n            if value == x {\n                coords.push(vec![i as i32, j as i32]);\n            }\n        }\n    }\n    coords.sort_by(|a, b| a[0].cmp(&b[0]).then(b[1].cmp(&a[1])));\n    coords\n}\n",
            "pub fn sort_array(arr: &Vec<i32>) -> Vec<i32> {\n    if arr.is_empty() {\n        return vec![];\n    }\n    let mut sorted_arr = arr.clone();\n    sorted_arr.sort_unstable();\n    if (arr[0] + arr[arr.len() - 1]) % 2 == 0 {\n        sorted_arr.reverse();\n    }\n    sorted_arr\n}\n",
            "pub fn encrypt(s: &String) -> String {\n    let mut result = String::new();\n    for ch in s.chars() {\n        let shifted = ch as u8 + 4;\n        if shifted > 'z' as u8 {\n            result.push((shifted - 26) as char);\n        } else {\n            result.push(shifted as char);\n        }\n    }\n    result\n}\n",
            "pub fn next_smallest(lst: &Vec<i32>) -> Option<i32> {\n    let mut sl = lst.to_vec();\n    sl.sort_unstable();\n    sl.dedup();\n    if sl.len() < 2 {\n        None\n    } else {\n        Some(sl[1])\n    }\n}\n",
            "pub fn is_bored(s: &String) -> i32 {\n    let sentences = s.split(|c: char| matches!(c, '.' | '!' | '?')).filter_map(|sentence| {\n        let trimmed_sentence = sentence.trim();\n        if trimmed_sentence.is_empty() {\n            None\n        } else {\n            Some(trimmed_sentence)\n        }\n    }).collect::<Vec<&str>>();\n\n    sentences.iter().count()\n}\n",
            "pub fn any_int(x: &Box<dyn std::any::Any>, y: &Box<dyn std::any::Any>, z: &Box<dyn std::any::Any>) -> bool {\n    if let (Some(&x_val), Some(&y_val), Some(&z_val)) = (\n        x.downcast_ref::<i32>(),\n        y.downcast_ref::<i32>(),\n        z.downcast_ref::<i32>()\n    ) {\n        return x_val + y_val == z_val || x_val + z_val == y_val || y_val + z_val == x_val;\n    }\n    false\n}\n",
            "pub fn encode(message: &String) -> String {\n    let vowels = \"aeiouAEIOU\";\n    let mut result = Vec::new();\n    \n    for ch in message.chars() {\n        if ch.is_alphabetic() {\n            let ch1 = if ch.is_lowercase() { ch.to_ascii_uppercase() } else { ch.to_ascii_lowercase() };\n            if vowels.contains(ch1) {\n                let new_char = ((ch1 as u8) + 2) as char;\n                result.push(new_char);\n            } else {\n                result.push(ch1);\n            }\n        } else {\n            result.push(ch);\n        }\n    }\n    \n    result.into_iter().collect()\n}\n",
            "fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..=((n as f64).sqrt() as i32) {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\n\npub fn skjkasdkd(lst: &Vec<i32>) -> i32 {\n    let primes: Vec<_> = lst.iter().filter(|&&x| is_prime(x)).collect();\n    if primes.is_empty() {\n        return 0;\n    }\n    let largest = format!(\"{}\", primes.into_iter().max().unwrap());\n    largest.chars().map(|c| c.to_digit(10).unwrap() as i32).sum()\n}\n",
            "use std::collections::HashMap;\n\npub fn check_dict_case(d: &HashMap<String, String>) -> bool {\n    if d.is_empty() {\n        return false;\n    }\n    let all_lowercase = d.keys().all(|k| k.chars().all(|c| c.is_lowercase()));\n    let all_uppercase = d.keys().all(|k| k.chars().all(|c| c.is_uppercase()));\n    all_lowercase || all_uppercase\n}\n",
            "pub fn count_up_to(n: i32) -> Vec<i32> {\n    let mut primes = Vec::new();\n    for num in 2..n {\n        if primes.iter().all(|&p| num % p != 0) {\n            primes.push(num);\n        }\n    }\n    primes\n}\n",
            "pub fn multiply(a: i32, b: i32) -> i32 {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n",
            "pub fn count_upper(s: &String) -> i32 {\n  let vowels = \"AEIOU\";\n  s.chars().enumerate().filter(|&(i, c)| i % 2 == 0 && vowels.contains(c)).count() as i32\n}\n",
            "pub fn closest_integer(value: &String) -> i32 {\n    let num = value.parse::<f64>().unwrap();\n    if num >= 0.0 {\n        (num + 0.5) as i32\n    } else {\n        (num - 0.5) as i32\n    }\n}\n",
            "pub fn make_a_pile(n: i32) -> Vec<i32> {\n    (0..n).map(|i| n + 2 * i).collect()\n}",
            "pub fn words_string(s: &String) -> Vec<String> {\n    s.split(|c: char| c == ',' || c == ' ')\n        .filter_map(|w| if w.trim().is_empty() { None } else { Some(w.trim().to_string()) })\n        .collect()\n}\n",
            "pub fn choose_num(x: i32, y: i32) -> i32 {\n    if x > y {\n        -1\n    } else if y % 2 == 0 {\n        y\n    } else if x != y {\n        y - 1\n    } else {\n        -1\n    }\n}\n",
            "pub fn rounded_avg(n: i32, m: i32) -> Option<String> {\n    if n > m {\n        None\n    } else {\n        let r_avg = ((m + n) as f64 / 2.0).round() as i32;\n        Some(format!(\"{:b}\", r_avg))\n    }\n}\n",
            "pub fn unique_digits(x: &Vec<i32>) -> Vec<i32> {\n    x.iter()\n        .filter(|&&num| num.to_string().chars().all(|c| (c as u8 - b'0') % 2 != 0))\n        .cloned()\n        .collect::<Vec<i32>>()\n}\n",
            "pub fn by_length(arr: &Vec<i32>) -> Vec<String> {\n    let digit_names = vec![\n        \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\",\n    ];\n    let mut sorted_arr: Vec<i32> = arr.iter().cloned().filter(|&x| 1 <= x && x <= 9).collect();\n    sorted_arr.sort_by(|a, b| b.cmp(a));\n    sorted_arr.into_iter().map(|x| digit_names[(x - 1) as usize].to_string()).collect()\n}\n",
            "fn f(n: i32) -> Vec<i32> {\n    let mut nums = (1..=n).collect::<Vec<i32>>();\n    nums.iter().enumerate().map(|(i, _)| {\n        if (i + 1) % 2 != 0 {\n            nums[0..=i].iter().sum()\n        } else {\n            nums[0..=i].iter().product()\n        }\n    }).collect()\n}\n",
            "pub fn even_odd_palindrome(n: i32) -> Vec<i32> {\n    let mut cnt = vec![0, 0];\n    for i in 1..=n {\n        let s = i.to_string();\n        if s == s.chars().rev().collect::<String>() {\n            cnt[(i % 2) as usize] += 1;\n        }\n    }\n    cnt\n}\n",
            "fn digits_sum(n: i32) -> i32 {\n    let n_str = n.to_string();\n    if n >= 0 {\n        n_str.chars().map(|c| c.to_digit(10).unwrap() as i32).sum()\n    } else {\n        (n_str[0..2].parse::<i32>().unwrap() * 2) + digits_sum(n.abs())\n    }\n}\n\npub fn count_nums(arr: &Vec<i32>) -> i32 {\n    arr.iter().filter(|&&n| digits_sum(n) > 0).count() as i32\n}\n",
            "pub fn move_one_ball(arr: &Vec<i32>) -> bool {\n    if arr.is_empty() {\n        return true;\n    }\n    let mut sorted_arr = arr.clone();\n    sorted_arr.sort_unstable();\n    for i in 0..arr.len() {\n        if arr[i..] == sorted_arr[arr.len() - i:] && arr[..i] == sorted_arr[..arr.len() - i] {\n            return true;\n        }\n    }\n    false\n}\n",
            "pub fn can_exchange(lst1: &Vec<i32>, lst2: &Vec<i32>) -> String {\n    let odd_cnt = lst1.iter().filter(|&&num| num % 2 != 0).count();\n    let even_cnt = lst2.iter().filter(|&&num| num % 2 == 0).count();\n    if even_cnt >= odd_cnt {\n        \"YES\".to_string()\n    } else {\n        \"NO\".to_string()\n    }\n}\n",
            "use std::collections::HashMap;\n\npub fn histogram(test: &String) -> HashMap<String, i32> {\n    let mut freq = HashMap::new();\n    let words: Vec<&str> = test.split_whitespace().filter(|w| !w.is_empty()).collect();\n\n    for w in words {\n        *freq.entry(w.to_string()).or_insert(0) += 1;\n    }\n\n    let mut result = HashMap::new();\n    if !freq.is_empty() {\n        let max_freq = freq.values().cloned().max().unwrap();\n        for (k, v) in &freq {\n            if *v == max_freq {\n                result.insert(k.clone(), *v);\n            }\n        }\n    }\n\n    result\n}\n",
            "pub fn reverse_delete(s: &String, c: &String) -> Vec<String> {\n    let s1: String = s.chars()\n                     .filter(|ch| !c.contains(*ch))\n                     .collect();\n    vec![s1.clone(), if s1 == s1.chars().rev().collect::<String>() { \"yes\".to_string() } else { \"no\".to_string() }]\n}\n",
            "pub fn odd_count(lst: &Vec<String>) -> Vec<String> {\n    let mut result = Vec::new();\n    for num in lst.iter() {\n        let n = num.chars().filter(|&c| c.to_digit(10).unwrap_or(0) % 2 == 1).count();\n        let rs = \"the number of odd elements in the string i of the input.\".to_string();\n        let mut rs_with_n = rs.clone();\n        rs_with_n.replace_range(rs.find('i').unwrap()..=rs.find('i').unwrap(), &n.to_string());\n        result.push(rs_with_n);\n    }\n    result\n}\n",
            "pub fn min_sub_array_sum(nums: &Vec<i32>) -> i32 {\n    let mut min_sum = 0;\n    let mut cur_sum = 0;\n    \n    for &n in nums.iter() {\n        cur_sum = cur_sum + n;\n        if cur_sum > 0 {\n            cur_sum = 0;\n        }\n        if cur_sum < min_sum {\n            min_sum = cur_sum;\n        }\n    }\n    \n    if min_sum == 0 {\n        min_sum = *nums.iter().min().unwrap();\n    }\n    \n    min_sum\n}\n",
            "pub fn max_fill(grid: &Vec<Vec<i32>>, capacity: i32) -> i32 {\n    grid.iter().map(|arr| ((arr.iter().sum::<i32>() as f32) / capacity as f32).ceil() as i32).sum()\n}\n",
            "fn count_ones(num: i32) -> usize {\n    num.count_ones() as usize\n}\n\npub fn sort_array(arr: &Vec<i32>) -> Vec<i32> {\n    let mut sorted_arr = arr.clone();\n    sorted_arr.sort_by(|&a, &b| count_ones(a).cmp(&count_ones(b)).then_with(|| a.cmp(&b)));\n    sorted_arr\n}\n",
            "pub fn select_words(s: &String, n: i32) -> Vec<String> {\n    let consonants = \"bcdfghjklmnpqrstvwxyz\";\n    s.split_whitespace()\n        .filter(|w| !w.is_empty())\n        .filter(|w| w.chars().map(|c| c.to_lowercase().next().unwrap_or(c)).filter(|&c| consonants.contains(c)).count() as i32 == n)\n        .map(String::from)\n        .collect()\n}\n",
            "pub fn get_closest_vowel(word: &String) -> String {\n    let vowels = \"aeiouAEIOU\";\n    for i in (1..word.len() - 1).rev() {\n        if vowels.contains(word.chars().nth(i).unwrap()) && \n           !vowels.contains(word.chars().nth(i - 1).unwrap()) && \n           !vowels.contains(word.chars().nth(i + 1).unwrap()) {\n            return word.chars().nth(i).unwrap().to_string();\n        }\n    }\n    String::new()\n}\n",
            "pub fn check(s: &str) -> bool {\n    let mut depth = 0;\n    for ch in s.chars() {\n        if ch == '(' {\n            depth += 1;\n        } else {\n            depth -= 1;\n        }\n        if depth < 0 {\n            return false;\n        }\n    }\n    depth == 0\n}\n\npub fn match_parens(lst: &Vec<String>) -> String {\n    let s1 = format!(\"{}{}\", lst[0], lst[1]);\n    let s2 = format!(\"{}{}\", lst[1], lst[0]);\n    if check(&s1) || check(&s2) {\n        \"Yes\".to_string()\n    } else {\n        \"No\".to_string()\n    }\n}\n",
            "pub fn maximum(arr: &Vec<i32>, k: i32) -> Vec<i32> {\n    if k == 0 {\n        return vec![];\n    }\n    let mut sorted_arr = arr.clone();\n    sorted_arr.sort_unstable_by(|a, b| b.cmp(a));\n    sorted_arr.into_iter().take(k as usize).collect()\n}\n",
            "pub fn solution(lst: &Vec<i32>) -> i32 {\n    lst.iter().enumerate()\n        .filter(|&(i, &x)| i % 2 == 0 && x % 2 != 0)\n        .map(|(_, &x)| x)\n        .sum()\n}\n",
            "pub fn add_elements(arr: &Vec<i32>, k: i32) -> i32 {\n    arr.iter()\n        .take(k as usize)\n        .filter(|&&n| n.to_string().len() <= 2)\n        .sum()\n}\n",
            "pub fn get_odd_collatz(mut n: i32) -> Vec<i32> {\n    let mut collatz = vec![1];\n    while n != 1 {\n        if n % 2 != 0 {\n            collatz.push(n);\n            n = 3 * n + 1;\n        } else {\n            n /= 2;\n        }\n    }\n    collatz.sort();\n    collatz\n}\n",
            "pub fn valid_date(date: &String) -> bool {\n    if date.len() != 10 || date.as_bytes()[2] != b'-' || date.as_bytes()[5] != b'-' {\n        return false;\n    }\n    let m = match date[0..2].parse::<u8>() {\n        Ok(num) => num,\n        Err(_) => return false,\n    };\n    let d = match date[3..5].parse::<u8>() {\n        Ok(num) => num,\n        Err(_) => return false,\n    };\n    if [1, 3, 5, 7, 8, 10, 12].contains(&m) && d >= 1 && d <= 31 {\n        true\n    } else if [4, 6, 9, 11].contains(&m) && d >= 1 && d <= 30 {\n        true\n    } else if m == 2 && d >= 1 && d <= 29 {\n        true\n    } else {\n        false\n    }\n}\n",
            "pub fn split_words(txt: &String) -> Vec<String> {\n    if txt.contains(' ') {\n        txt.split_whitespace().map(|s| s.to_string()).collect()\n    } else if txt.contains(',') {\n        txt.split(',').map(|s| s.to_string()).collect()\n    } else {\n        let count = txt.chars().filter(|c| c.is_ascii_lowercase() && (c as u32) % 2 == 0).count();\n        vec![count.to_string()]\n    }\n}\n",
            "pub fn is_sorted(lst: &Vec<i32>) -> bool {\n    if !lst.windows(2).all(|w| w[0] <= w[1]) {\n        return false;\n    }\n    let mut freq = std::collections::HashMap::new();\n    for &i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    freq.values().max().copied().unwrap_or(0) <= 2\n}\n",
            "fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    let limit = (n as f64).sqrt() as i32 + 1;\n    for i in 2..limit {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\n\npub fn intersection(interval1: &Vec<i32>, interval2: &Vec<i32>) -> String {\n    let l = interval1[0].max(interval2[0]);\n    let r = interval1[1].min(interval2[1]);\n    let length = r - l;\n    if length > 0 && is_prime(length) {\n        \"YES\".to_string()\n    } else {\n        \"NO\".to_string()\n    }\n}\n",
            "pub fn prod_signs(arr: &Vec<i32>) -> Option<i32> {\n    if arr.is_empty() {\n        return None;\n    }\n    if arr.contains(&0) {\n        return Some(0);\n    }\n    let sign = if arr.iter().filter(|&&n| n < 0).count() % 2 == 1 { -1 } else { 1 };\n    Some(sign * arr.iter().map(|&n| n.abs()).sum())\n}\n",
            "pub fn min_path(grid: &Vec<Vec<i32>>, k: i32) -> Vec<i32> {\n    let n = grid.len();\n    let mut min_val = n * n + 1;\n    \n    for i in 0..n {\n        for j in 0..n {\n            if grid[i][j] == 1 {\n                let mut temp = vec![];\n                if i != 0 { temp.push(grid[i - 1][j]); }\n                if j != 0 { temp.push(grid[i][j - 1]); }\n                if i != n - 1 { temp.push(grid[i + 1][j]); }\n                if j != n - 1 { temp.push(grid[i][j + 1]); }\n                min_val = temp.into_iter().min().unwrap_or(min_val);\n            }\n        }\n    }\n    \n    let mut result = Vec::new();\n    for i in 0..k {\n        result.push(if i % 2 == 0 { 1 } else { min_val });\n    }\n    \n    result\n}\n",
            "pub fn tri(n: i32) -> Vec<i32> {\n    if n == 0 {\n        return vec![1];\n    }\n    let mut seq = vec![1, 3];\n    for i in 2..=n as usize {\n        if i % 2 == 0 {\n            seq.push((i / 2 + 1) as i32);\n        } else {\n            seq.push(seq[i - 1] + seq[i - 2] + ((i + 3) / 2) as i32);\n        }\n    }\n    seq\n}\n",
            "pub fn digits(n: i32) -> i32 {\n    let odds: Vec<i32> = n.to_string().chars()\n        .filter_map(|c| c.to_digit(10))\n        .filter(|&d| d % 2 != 0)\n        .map(|d| d as i32)\n        .collect();\n    \n    if odds.is_empty() { 0 } else { odds.iter().product() }\n}\n",
            "pub fn is_nested(s: &String) -> bool {\n    let mut open_idx = Vec::new();\n    let mut close_idx = Vec::new();\n    \n    for (i, ch) in s.chars().enumerate() {\n        if ch == '[' {\n            open_idx.push(i);\n        } else if ch == ']' {\n            close_idx.push(i);\n        }\n    }\n    \n    close_idx.reverse();\n    let mut cnt = 0;\n    let l = close_idx.len();\n    let mut i = 0;\n    \n    for &idx in &open_idx {\n        if i < l && idx < close_idx[i] {\n            cnt += 1;\n            i += 1;\n        }\n    }\n    \n    cnt >= 2\n}\n",
            "pub fn sum_squares(lst: &Vec<f64>) -> i32 {\n    lst.iter()\n        .map(|&n| (n.ceil() as i32).pow(2))\n        .sum()\n}\n",
            "pub fn check_if_last_char_is_a_letter(txt: &str) -> bool {\n    if txt.is_empty() {\n        return false;\n    }\n    let last = match txt.rfind(' ') {\n        Some(pos) => &txt[pos + 1..],\n        None => txt,\n    };\n    last.len() == 1 && last.chars().next().unwrap_or('0').is_alphabetic()\n}\n",
            "pub fn can_arrange(arr: &Vec<i32>) -> i32 {\n    if arr.len() <= 1 {\n        return -1;\n    }\n    \n    let mut idx = Vec::new();\n    for i in 1..arr.len() {\n        if arr[i] < arr[i - 1] {\n            idx.push(i as i32);\n        }\n    }\n\n    if idx.is_empty() {\n        -1\n    } else {\n        *idx.iter().max().unwrap()\n    }\n}\n",
            "pub fn largest_smallest_integers(lst: &Vec<i32>) -> Vec<Option<i32>> {\n    let neg = lst.iter().filter(|&&x| x < 0).cloned().collect::<Vec<i32>>();\n    let pos = lst.iter().filter(|&&x| x > 0).cloned().collect::<Vec<i32>>();\n    let max_neg = if !neg.is_empty() { Some(neg.into_iter().max().unwrap()) } else { None };\n    let min_pos = if !pos.is_empty() { Some(pos.into_iter().min().unwrap()) } else { None };\n    vec![max_neg, min_pos]\n}\n",
            "use std::any::Any;\n\npub fn compare_one(a: &Box<dyn Any>, b: &Box<dyn Any>) -> Option<f64> {\n    fn any_to_real(o: &Box<dyn Any>) -> f64 {\n        if let Some(s) = o.downcast_ref::<String>() {\n            s.replace(',', \".\").parse::<f64>().expect(\"Parse Error\")\n        } else if let Some(&i) = o.downcast_ref::<i32>() {\n            i as f64\n        } else if let Some(&f) = o.downcast_ref::<f64>() {\n            f\n        } else {\n            panic!(\"Type Error\");\n        }\n    }\n\n    let a1 = any_to_real(a);\n    let b1 = any_to_real(b);\n\n    if a1 == b1 {\n        None\n    } else if a1 > b1 {\n        Some(a1)\n    } else {\n        Some(b1)\n    }\n}\n",
            "pub fn is_equal_to_sum_even(n: i32) -> bool {\n    n % 2 == 0 && n >= 8\n}\n",
            "pub fn special_factorial(n: i32) -> i32 {\n    let mut fact = 1;\n    let mut result = 1;\n    for i in 1..=n {\n        fact *= i;\n        result *= fact;\n    }\n    result\n}\n",
            "pub fn fix_spaces(txt: &String) -> String {\n    let mut result = txt.clone();\n    result = result.replace(\"   \", \"-\");\n    result = result.replace(\" \", \"_\");\n    result\n}\n",
            "pub fn file_name_check(file_name: &String) -> String {\n    let suf = [\"txt\", \"exe\", \"dll\"];\n    if let Some((name, ext)) = file_name.split_once('.') {\n        if !suf.iter().any(|&s| s == ext) || name.is_empty() || !name.chars().next().unwrap_or('0').is_alphabetic() || name.chars().filter(|c| c.is_digit(10)).count() > 3 {\n            return \"No\".to_string();\n        }\n    } else {\n        return \"No\".to_string();\n    }\n    \"Yes\".to_string()\n}\n",
            "pub fn sum_squares(lst: &Vec<i32>) -> i32 {\n    let mut result = 0;\n    for (i, &x) in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            result += x.pow(2);\n        } else if i % 4 == 0 {\n            result += x.pow(3);\n        } else {\n            result += x;\n        }\n    }\n    result\n}\n",
            "fn is_prime(n: usize) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..=((n as f64).sqrt() as usize) {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\n\npub fn words_in_sentence(sentence: &String) -> String {\n    let words: Vec<&str> = sentence.split_whitespace().collect();\n    let filtered_words: Vec<&str> = words.into_iter().filter(|w| is_prime(w.len())).collect();\n    filtered_words.join(\" \")\n}\n",
            "pub fn simplify(x: &String, n: &String) -> bool {\n    let xs: Vec<&str> = x.split(\"/\").collect();\n    let ns: Vec<&str> = n.split(\"/\").collect();\n    let num = xs[0].parse::<i32>().unwrap() * ns[0].parse::<i32>().unwrap();\n    let den = xs[1].parse::<i32>().unwrap() * ns[1].parse::<i32>().unwrap();\n    num % den == 0\n}\n",
            "fn digits_sum(n: i32) -> i32 {\n    let n_str = n.to_string();\n    if n >= 0 {\n        n_str.chars().map(|c| c.to_digit(10).unwrap() as i32).sum()\n    } else {\n        let two_digit_part = n_str[0..=1].parse::<i32>().unwrap();\n        two_digit_part * 2 + digits_sum(n.abs())\n    }\n}\n\npub fn order_by_points(nums: &Vec<i32>) -> Vec<i32> {\n    let mut nums = nums.clone();\n    nums.sort_by_key(|&num| digits_sum(num));\n    nums\n}\n",
            "pub fn special_filter(nums: &Vec<i32>) -> i32 {\n    let odds = \"13579\";\n    nums.iter()\n        .filter(|&&n| n > 10 && n % 2 != 0 && odds.contains(&(n.to_string()[0..1])))\n        .count() as i32\n}\n",
            "pub fn get_max_triples(n: i32) -> i32 {\n    let mut c = [0, 0, 0];\n    for i in 1..=n {\n        let a = i * i - i + 1;\n        c[(a % 3) as usize] += 1;\n    }\n    return c[0] * c[1] * c[2] + ((c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6);\n}\n",
            "pub fn bf(planet1: &String, planet2: &String) -> Vec<String> {\n    let names = vec![\n        String::from(\"Mercury\"),\n        String::from(\"Venus\"),\n        String::from(\"Earth\"),\n        String::from(\"Mars\"),\n        String::from(\"Jupiter\"),\n        String::from(\"Saturn\"),\n        String::from(\"Uranus\"),\n        String::from(\"Neptune\"),\n    ];\n\n    if !names.contains(planet1) || !names.contains(planet2) {\n        return vec![];\n    }\n\n    let l = names.iter().position(|&p| &p == planet1).unwrap();\n    let r = names.iter().position(|&p| &p == planet2).unwrap();\n\n    if l > r {\n        return names[(r + 1)..l].to_vec();\n    } else if l < r {\n        return names[(l + 1)..r].to_vec();\n    }\n\n    vec![]\n}\n",
            "pub fn sorted_list_sum(lst: &Vec<String>) -> Vec<String> {\n    let mut result: Vec<String> = lst.iter()\n        .filter(|s| s.len() % 2 == 0)\n        .cloned()\n        .collect();\n    result.sort_by_key(|x| (x.len(), x));\n    result\n}\n",
            "pub fn x_or_y(n: i32, x: i32, y: i32) -> i32 {\n    if n < 2 {\n        return y;\n    }\n    let limit = (n as f64).sqrt() as i32;\n    for i in 2..=limit {\n        if n % i == 0 {\n            return y;\n        }\n    }\n    x\n}\n",
            "pub fn double_the_difference(lst: &Vec<f64>) -> i32 {\n    lst.iter()\n        .map(|&n| if n >= 0.0 && (n as i64) % 2 == 1 { n * n } else { 0.0 })\n        .sum::<f64>() as i32\n}\n",
            "pub fn compare(game: &Vec<i32>, guess: &Vec<i32>) -> Vec<i32> {\n    game.iter().zip(guess.iter()).map(|(&x, &y)| (x - y).abs() as i32).collect()\n}\n",
            "pub fn strongest_extension(class_name: &String, extensions: &Vec<String>) -> String {\n    let mut max_s = i32::MIN;\n    let mut max_ext = \"\";\n    for ext in extensions.iter() {\n        let upper = ext.chars().filter(|&c| c.is_uppercase()).count() as i32;\n        let lower = ext.chars().filter(|&c| c.is_lowercase()).count() as i32;\n        let s = upper - lower;\n        if s > max_s {\n            max_s = s;\n            max_ext = ext;\n        }\n    }\n    format!(\"{}.{}\", class_name, max_ext)\n}\n",
            "pub fn cycpattern_check(a: &String, b: &String) -> bool {\n    if a.len() < b.len() {\n        return false;\n    }\n    for i in 0..b.len() {\n        let rotated = format!(\"{}{}\", &b[i..], &b[..i]);\n        if a.contains(&rotated) {\n            return true;\n        }\n    }\n    false\n}\n",
            "pub fn even_odd_count(num: i32) -> Vec<i32> {\n    let mut ds = num.abs().to_string();\n    let mut even = 0;\n    for d in ds.chars() {\n        if (d.to_digit(10).unwrap()) % 2 == 0 {\n            even += 1;\n        }\n    }\n    vec![even, ds.len() as i32 - even]\n}\n",
            "pub fn int_to_mini_roman(num: i32) -> String {\n    let values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    let numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    let mut res = String::new();\n    let mut num = num;\n    for i in 0..values.len() {\n        while num >= values[i] {\n            res.push_str(numerals[i]);\n            num -= values[i];\n        }\n    }\n    res\n}\n",
            "pub fn right_angle_triangle(a: i32, b: i32, c: i32) -> bool {\n    let mut s = vec![a, b, c];\n    s.sort();\n    s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n}\n",
            "pub fn find_max(words: &Vec<String>) -> String {\n    let mut max_cnt = 0;\n    let mut max_w = \"\".to_string();\n    for w in words {\n        let cnt = w.chars().collect::<std::collections::HashSet<_>>().len();\n        if cnt > max_cnt {\n            max_cnt = cnt;\n            max_w = w.clone();\n        } else if cnt == max_cnt && w < &max_w {\n            max_w = w.clone();\n        }\n    }\n    max_w\n}\n",
            "pub fn eat(num: i32, need: i32, remaining: i32) -> Vec<i32> {\n    if need <= remaining {\n        vec![num + need, remaining - need]\n    } else {\n        vec![num + remaining, 0]\n    }\n}\n",
            "pub fn do_algebra(operators: &Vec<String>, operands: &Vec<i32>) -> i32 {\n    let mut ops = operators.iter().cloned().collect::<Vec<_>>();\n    let mut nums = operands.to_vec();\n    let mut i = ops.len() as isize - 1;\n    while i >= 0 {\n        if ops[i as usize] == \"**\".to_string() {\n            nums[i as usize] = i32::pow(nums[i as usize], nums[(i + 1) as usize]);\n            nums.remove((i + 1) as usize);\n            ops.remove(i as usize);\n        }\n        i -= 1;\n    }\n    i = 0;\n    while i < ops.len() {\n        if ops[i] == \"*\".to_string() {\n            nums[i] *= nums[i + 1];\n            nums.remove(i + 1);\n            ops.remove(i);\n            i -= 1;\n        } else if ops[i] == \"//\".to_string() {\n            nums[i] /= nums[i + 1];\n            nums.remove(i + 1);\n            ops.remove(i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    i = 0;\n    while i < ops.len() {\n        if ops[i] == \"+\".to_string() {\n            nums[i] += nums[i + 1];\n            nums.remove(i + 1);\n            ops.remove(i);\n            i -= 1;\n        } else if ops[i] == \"-\".to_string() {\n            nums[i] -= nums[i + 1];\n            nums.remove(i + 1);\n            ops.remove(i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    nums[0]\n}\n",
            "pub fn solve(s: &String) -> String {\n    if s.chars().all(|ch| !ch.is_alphabetic()) {\n        return s.chars().rev().collect();\n    }\n\n    let mut result = Vec::new();\n    for ch in s.chars() {\n        if !ch.is_alphabetic() {\n            result.push(ch);\n        } else if ch.is_uppercase() {\n            result.push(ch.to_lowercase().next().unwrap());\n        } else if ch.is_lowercase() {\n            result.push(ch.to_uppercase().next().unwrap());\n        }\n    }\n\n    result.into_iter().collect()\n}\n",
            "pub fn string_to_md5(txt: &String) -> Option<String> {\n    if txt.is_empty() {\n        return None;\n    }\n    let md5_hash = md5::compute(txt);\n    let md5_encoded = format!(\"{:x}\", md5_hash);\n    Some(md5_encoded)\n}\n",
            "pub fn generate_integers(a: i32, b: i32) -> Vec<i32> {\n    let lower = std::cmp::max(2, a.min(b));\n    let upper = std::cmp::min(8, a.max(b));\n    (lower..=upper).filter(|&i| i % 2 == 0).collect()\n}\n"
        ],
        "php": [
            "/**\n * @param {array<float>} $numbers\n * @param {float} $threshold\n * @returns {bool}\n */\nfunction hasCloseElements ($numbers, $threshold) {\n    for ($i = 0; $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n            if (abs($numbers[$i] - $numbers[$j]) < $threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param {string} $parenString\n * @returns {array<string>}\n */\nfunction separateParenGroups ($parenString) {\n    $groups = [];\n    $stk = [];\n    $currentGroup = \"\";\n    $parens = str_replace(\" \", \"\", $parenString);\n    \n    for ($i = 0; $i < strlen($parens); $i++) {\n        $ch = $parens[$i];\n        \n        if ($ch === \"(\") {\n            array_push($stk, $ch);\n            $currentGroup .= $ch;\n        } elseif ($ch === \")\") {\n            array_pop($stk);\n            $currentGroup .= $ch;\n            \n            if (empty($stk)) {\n                array_push($groups, $currentGroup);\n                $currentGroup = \"\";\n            }\n        }\n    }\n    \n    return $groups;\n}\n",
            "/**\n * @param {float} $num\n * @returns {float}\n */\nfunction truncateNumber($num) {\n    return $num - floor($num);\n}\n",
            "/**\n * @param {array<int>} $operations\n * @returns {bool}\n */\nfunction belowZero ($operations) {\n    $balance = 0;\n    foreach ($operations as $op) {\n        $balance += $op;\n        if ($balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param {array<float>} $numbers\n * @returns {float}\n */\nfunction meanAbsoluteDeviation ($numbers) {\n    $mean = array_sum($numbers) / count($numbers);\n    $deviation = array_sum(array_map(function($x) use ($mean) {\n        return abs($x - $mean);\n    }, $numbers));\n    return $deviation / count($numbers);\n}\n",
            "/**\n * @param {array<int>} $numbers\n * @param {int} $delimiter\n * @returns {array<int>}\n */\nfunction intersperse($numbers, $delimiter) {\n    $result = [];\n    foreach ($numbers as $i => $number) {\n        if ($i != 0) {\n            $result[] = $delimiter;\n        }\n        $result[] = $number;\n    }\n    return $result;\n}\n",
            "/**\n * @param {string} $parenString\n * @returns {array<int>}\n */\nfunction parseNestedParens ($parenString) {\n    $result = [];\n    $parenGroups = explode(' ', $parenString);\n    foreach ($parenGroups as $group) {\n        $maxDepth = 0;\n        $depth = 0;\n        for ($i = 0; $i < strlen($group); $i++) {\n            $ch = $group[$i];\n            if ($ch === \"(\") {\n                $depth++;\n                $maxDepth = max($maxDepth, $depth);\n            } elseif ($ch === \")\") {\n                $depth--;\n            }\n        }\n        $result[] = $maxDepth;\n    }\n    return $result;\n}\n",
            "/**\n * @param {array<string>} $strs\n * @param {string} $substring\n * @returns {array<string>}\n */\nfunction filterBySubstring($strs, $substring) {\n    return array_filter($strs, function($s) use ($substring) {\n        return strpos($s, $substring) !== false;\n    });\n}\n",
            "/**\n * @param {array<int>} $numbers\n * @returns {array<int>}\n */\nfunction sumProduct($numbers) {\n    $n_sum = array_sum($numbers);\n    $n_product = array_reduce($numbers, function($carry, $item) {\n        return $carry * $item;\n    }, 1);\n    return [$n_sum, $n_product];\n}\n",
            "/**\n * @param {array<int>} $numbers\n * @returns {array<int>}\n */\nfunction rollingMax ($numbers) {\n    $max_so_far = -INF;\n    $result = [];\n    foreach ($numbers as $num) {\n        $max_so_far = max($max_so_far, $num);\n        $result[] = $max_so_far;\n    }\n    return $result;\n}\n",
            "/**\n * @param {string} $s\n * @returns {string}\n */\nfunction makePalindrome ($s) {\n    if ($s === strrev($s)) {\n        return $s;\n    }\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (substr($s, $i) === strrev(substr($s, $i))) {\n            return $s . strrev(substr($s, 0, $i));\n        }\n    }\n    return \"\";\n}\n",
            "/**\n * @param {string} $a\n * @param {string} $b\n * @returns {string}\n */\nfunction stringXor ($a, $b) {\n    $result = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= ($a[$i] === $b[$i]) ? '0' : '1';\n    }\n    return $result;\n}\n",
            "/**\n * @param {array<string>} $strs\n * @returns {string | null}\n */\nfunction longest($strs) {\n    if (empty($strs)) {\n        return null;\n    }\n    $longest_s = $strs[0];\n    foreach ($strs as $s) {\n        if (strlen($s) > strlen($longest_s)) {\n            $longest_s = $s;\n        }\n    }\n    return $longest_s;\n}\n",
            "/**\n * @param {int} $a\n * @param {int} $b\n * @returns {int}\n */\nfunction greatestCommonDivisor ($a, $b) {\n    if ($b == 0) {\n        return $a;\n    } else {\n        return greatestCommonDivisor($b, $a % $b);\n    }\n}\n",
            "/**\n * @param {string} $s\n * @returns {array<string>}\n */\nfunction allPrefixes ($s) {\n    $prefixes = [];\n    for ($i = 0; $i < strlen($s); $i++) {\n        $prefixes[] = substr($s, 0, $i + 1);\n    }\n    return $prefixes;\n}\n",
            "/**\n * @param int $n\n * @return string\n */\nfunction stringSequence($n) {\n    return implode(' ', range(0, $n));\n}\n",
            "/**\n * @param {string} $s\n * @returns {int}\n */\nfunction countDistinctCharacters ($s) {\n    return count(array_unique(str_split(strtolower($s))));\n}\n",
            "/**\n * @param {string} $musicString\n * @returns {array<int>}\n */\nfunction parseMusic ($musicString) {\n    $durations = [\"o\" => 4, \"o|\" => 2, \".|\" => 1];\n    $notes = explode(\" \", $musicString);\n    return array_map(function($note) use ($durations) {\n        return isset($durations[$note]) ? $durations[$note] : null;\n    }, $notes);\n}\n",
            "/**\n * @param {string} $s\n * @param {string} $substring\n * @returns {int}\n */\nfunction howManyTimes ($s, $substring) {\n    $times = 0;\n    for ($i = 0; $i <= strlen($s) - strlen($substring); $i++) {\n        if (substr($s, $i, strlen($substring)) == $substring) {\n            $times += 1;\n        }\n    }\n    return $times;\n}\n",
            "/**\n * @param {string} $numbers\n * @returns {string}\n */\nfunction sortNumbers ($numbers) {\n    $num_dict = [\n        \"zero\" => 0,\n        \"one\" => 1,\n        \"two\" => 2,\n        \"three\" => 3,\n        \"four\" => 4,\n        \"five\" => 5,\n        \"six\" => 6,\n        \"seven\" => 7,\n        \"eight\" => 8,\n        \"nine\" => 9\n    ];\n    $num_list = array_filter(explode(\" \", $numbers), function($x) use ($num_dict) {\n        return array_key_exists($x, $num_dict);\n    });\n    usort($num_list, function($a, $b) use ($num_dict) {\n        return $num_dict[$a] - $num_dict[$b];\n    });\n    return implode(\" \", $num_list);\n}\n",
            "/**\n * @param {array<float>} $numbers\n * @returns {array<float>}\n */\nfunction findClosestElements($numbers) {\n    sort($numbers);\n    $minDiff = INF;\n    $closestPair = [];\n\n    for ($i = 1; $i < count($numbers); $i++) {\n        $diff = $numbers[$i] - $numbers[$i - 1];\n        if ($diff < $minDiff) {\n            $minDiff = $diff;\n            $closestPair = [$numbers[$i - 1], $numbers[$i]];\n        }\n    }\n\n    return $closestPair;\n}\n",
            "/**\n * @param {array<float>} $numbers\n * @returns {array<float>}\n */\nfunction rescaleToUnit ($numbers) {\n    $minNum = min($numbers);\n    $maxNum = max($numbers);\n    if ($minNum == $maxNum) {\n        return array_fill(0, count($numbers), 0.0);\n    } else {\n        return array_map(function($num) use ($minNum, $maxNum) {\n            return ($num - $minNum) / ($maxNum - $minNum);\n        }, $numbers);\n    }\n}\n",
            "/**\n * @param {array<mixed>} $values\n * @returns {array<int>}\n */\nfunction filterIntegers ($values) {\n    return array_filter($values, function($x) {\n        return is_int($x);\n    });\n}\n",
            "function strLength ($s) {\n    return strlen($s);\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction largestDivisor($n) {\n    for ($i = 2; $i < $n; $i++) {\n        if ($n % $i == 0) {\n            return intdiv($n, $i);\n        }\n    }\n    return 1;\n}\n",
            "function factorize ($n) {\n    $factors = [];\n    $divisor = 2;\n    while ($divisor <= $n) {\n        if ($n % $divisor == 0) {\n            $factors[] = $divisor;\n            $n /= $divisor;\n        } else {\n            $divisor += 1;\n        }\n    }\n    return $factors;\n}\n",
            "/**\n * @param array<int> $numbers\n * @return array<int>\n */\nfunction removeDuplicates($numbers) {\n    $counts = array_fill_keys($numbers, 0);\n    foreach ($numbers as $num) {\n        $counts[$num]++;\n    }\n    $res = array_filter($numbers, function($num) use ($counts) {\n        return $counts[$num] === 1;\n    });\n    return array_values($res);\n}\n",
            "/**\n * @param {string} $s\n * @returns {string}\n */\nfunction flipCase ($s) {\n    $flipped = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        $ch = $s[$i];\n        if (!ctype_alpha($ch)) {\n            $flipped .= $ch;\n        } elseif (ctype_lower($ch)) {\n            $flipped .= strtoupper($ch);\n        } elseif (ctype_upper($ch)) {\n            $flipped .= strtolower($ch);\n        }\n    }\n    return $flipped;\n}\n",
            "/**\n * @param {array<string>} $strs\n * @returns {string}\n */\nfunction concatenate($strs) {\n    return implode(\"\", $strs);\n}\n",
            "/**\n * @param {array<string>} $strs\n * @param {string} $prefixStr\n * @returns {array<string>}\n */\nfunction filterByPrefix ($strs, $prefixStr) {\n    return array_filter($strs, function($s) use ($prefixStr) {\n        return strpos($s, $prefixStr) === 0;\n    });\n}\n",
            "/**\n * @param {array<int>} $l\n * @returns {array<int>}\n */\nfunction getPositive($l) {\n    return array_filter($l, function($num) {\n        return $num > 0;\n    });\n}\n",
            "/**\n * @param {int} $n\n * @returns {bool}\n */\nfunction isPrime ($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= sqrt($n); $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "/**\n * @param {array<int>} $xs\n * @param {float} $x\n * @returns {float}\n */\nfunction poly($xs, $x) {\n    $res = 0.0;\n    foreach ($xs as $i => $coeff) {\n        $res += $coeff * pow($x, $i);\n    }\n    return $res;\n}\n\n/**\n * @param {array<int>} $xs\n * @returns {float}\n */\nfunction findZero($xs) {\n    $x1 = 1.0;\n    $x2 = -1.0;\n    while (poly($xs, $x1) * poly($xs, $x2) > 0) {\n        $x1 *= 2;\n        $x2 *= 2;\n    }\n    while (abs($x1 - $x2) > 1e-10) {\n        $mid = ($x1 + $x2) / 2.0;\n        if (poly($xs, $mid) == 0) {\n            return $mid;\n        } elseif (poly($xs, $mid) * poly($xs, $x1) < 0) {\n            $x2 = $mid;\n        } else {\n            $x1 = $mid;\n        }\n    }\n    return ($x1 + $x2) / 2.0;\n}\n",
            "function sortThird($l) {\n    $sorted_third = array_filter($l, function($_, $i) {\n        return $i % 3 == 0;\n    }, ARRAY_FILTER_USE_BOTH);\n    sort($sorted_third);\n    \n    $result = array_map(function($x, $i) use ($sorted_third) {\n        return $i % 3 == 0 ? $sorted_third[$i / 3] : $x;\n    }, $l, array_keys($l));\n    \n    return $result;\n}\n",
            "/**\n * @param {array<int>} $l\n * @returns {array<int>}\n */\nfunction listUnique ($l) {\n    return array_unique($l);\n}\n",
            "/**\n * @param {array<int>} $l\n * @returns {int}\n */\nfunction maxElement ($l) {\n    return empty($l) ? 0 : max($l);\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction fizzBuzz ($n) {\n    $cnt = 0;\n    for ($i = 0; $i < $n; $i++) {\n        if ($i % 11 == 0 || $i % 13 == 0) {\n            $cnt += substr_count((string)$i, '7');\n        }\n    }\n    return $cnt;\n}\n",
            "/**\n * @param {array<int>} $l\n * @returns {array<int>}\n */\nfunction sortEven($l) {\n    $sorted_even = array_filter($l, function($v, $i) { return $i % 2 === 0; }, ARRAY_FILTER_USE_BOTH);\n    sort($sorted_even);\n    $result = [];\n    foreach ($l as $i => $x) {\n        if ($i % 2 === 0) {\n            $result[] = array_shift($sorted_even);\n        } else {\n            $result[] = $x;\n        }\n    }\n    return $result;\n}\n",
            "/**\n * @param {string} $s\n * @returns {string}\n */\nfunction encodeCyclic ($s) {\n    $result = '';\n    for ($i=0; $i<strlen($s); $i+=3) {\n        if ($i + 3 > strlen($s)) {\n            $result .= substr($s, $i);\n        } else {\n            $result .= substr($s, $i+1, 2) . substr($s, $i, 1);\n        }\n    }\n    return $result;\n}\n\n/**\n * @param {string} $s\n * @returns {string}\n */\nfunction decodeCyclic ($s) {\n    return encodeCyclic(encodeCyclic($s));\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction primeFib($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= floor(sqrt($n)); $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/**\n * @param {int} $n\n * @returns {int}\n */\nfunction primeFib($n) {\n    $f = [0, 1];\n    $cnt = 0;\n    while ($cnt < $n) {\n        $f = [$f[1], $f[0] + $f[1]];\n        if (primeFib($f[1])) {\n            $cnt += 1;\n        }\n    }\n    return $f[1];\n}\n",
            "/**\n * @param {array<int>} $l\n * @returns {bool}\n */\nfunction triplesSumToZero ($l) {\n    for ($i = 0; $i < count($l); $i++) {\n        for ($j = $i + 1; $j < count($l); $j++) {\n            for ($k = $j + 1; $k < count($l); $k++) {\n                if ($l[$i] + $l[$j] + $l[$k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction carRaceCollision($n) {\n    return $n ** 2;\n}\n",
            "function incrList ($l) {\n    return array_map(function($i) {\n        return $i + 1;\n    }, $l);\n}\n",
            "function pairsSumToZero ($l) {\n    $seen = [];\n    foreach ($l as $num) {\n        if (in_array(-$num, $seen)) {\n            return true;\n        }\n        $seen[] = $num;\n    }\n    return false;\n}\n",
            "/**\n * @param {int} $x\n * @param {int} $bas\n * @returns {string}\n */\nfunction changeBase ($x, $bas) {\n    if ($x == 0) return \"0\";\n    $digits = [];\n    while ($x > 0) {\n        array_push($digits, strval($x % $bas));\n        $x = intdiv($x, $bas);\n    }\n    return implode(\"\", array_reverse($digits));\n}\n",
            "/**\n * @param {int} $a\n * @param {int} $h\n * @returns {float}\n */\nfunction triangleArea ($a, $h) {\n    return (float)$a * $h / 2;\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction fib4($n) {\n    $fib = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib[$i % 4] = array_sum($fib);\n    }\n    return $fib[$n % 4];\n}\n",
            "/**\n * @param {array<float>} $l\n * @returns {float}\n */\nfunction median ($l) {\n    sort($l);\n    if (count($l) % 2 != 0) {\n        return $l[floor(count($l) / 2)];\n    } else {\n        return ($l[count($l) / 2] + $l[count($l) / 2 - 1]) / 2.0;\n    }\n}\n",
            "/**\n * @param {string} $txt\n * @returns {bool}\n */\nfunction isPalindrome ($txt) {\n    return $txt === strrev($txt);\n}\n",
            "/**\n * @param {int} $n\n * @param {int} $p\n * @returns {int}\n */\nfunction modp ($n, $p) {\n    $ret = 1;\n    for ($i = 0; $i < $n; $i++) {\n        $ret = ($ret * 2) % $p;\n    }\n    return $ret;\n}\n",
            "/**\n * @param {string} $s\n * @returns {string}\n */\nfunction encodeShift($s) {\n    $result = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        $ch = $s[$i];\n        $encodedChar = chr((ord($ch) - 97 + 5) % 26 + 97);\n        $result .= $encodedChar;\n    }\n    return $result;\n}\n\n/**\n * @param {string} $s\n * @returns {string}\n */\nfunction decodeShift($s) {\n    $result = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        $ch = $s[$i];\n        $decodedChar = chr((ord($ch) - 97 + 21) % 26 + 97);\n        $result .= $decodedChar;\n    }\n    return $result;\n}\n",
            "/**\n * @param {string} $txt\n * @returns {string}\n */\nfunction removeVowels($txt) {\n    $vowels = \"aeiouAEIOU\";\n    $result = '';\n    for ($i = 0; $i < strlen($txt); $i++) {\n        if (strpos($vowels, $txt[$i]) === false) {\n            $result .= $txt[$i];\n        }\n    }\n    return $result;\n}\n",
            "/**\n * @param {array<int>} $l\n * @param {int} $t\n * @returns {bool}\n */\nfunction belowThreshold ($l, $t) {\n    foreach ($l as $x) {\n        if ($x >= $t) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "/**\n * @param {int} $x\n * @param {int} $y\n * @returns {int}\n */\nfunction add ($x, $y) {\n    return $x + $y;\n}\n",
            "/**\n * @param {string} $s0\n * @param {string} $s1\n * @returns {bool}\n */\nfunction sameChars ($s0, $s1) {\n    return count(array_unique(str_split($s0))) === count(array_unique(str_split($s1)));\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction fib ($n) {\n    if ($n <= 1) {\n        return $n;\n    } else {\n        return fib($n - 1) + fib($n - 2);\n    }\n}\n",
            "/**\n * @param {string} $brackets\n * @returns {bool}\n */\nfunction correctBracketing ($brackets) {\n    $depth = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        $b = $brackets[$i];\n        if ($b == \"<\") {\n            $depth += 1;\n        } elseif ($b == \">\") {\n            $depth -= 1;\n        }\n        if ($depth < 0) {\n            return false;\n        }\n    }\n    return $depth == 0;\n}\n",
            "/**\n * @param {array<int>} $l\n * @returns {bool}\n */\nfunction monotonic ($l) {\n    $diff = array_map(function($x, $y) { return $y - $x; }, $l, array_slice($l, 1));\n    return all($diff, function($x) { return $x <= 0; }) || all($diff, function($x) { return $x >= 0; });\n}\n\nfunction all($arr, $callback) {\n    foreach ($arr as $item) {\n        if (!$callback($item)) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "/**\n * @param {array<int>} $l1\n * @param {array<int>} $l2\n * @returns {array<int>}\n */\nfunction common ($l1, $l2) {\n    return array_unique(array_merge($l1, $l2));\n}\n",
            "/**\n * @param int $n\n * @return int\n */\nfunction largestPrimeFactor($n) {\n    $i = 2;\n    while ($i * $i <= $n) {\n        if ($n % $i != 0) {\n            $i += 1;\n        } else {\n            $n /= $i;\n        }\n    }\n    return $n;\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction sumToN ($n) {\n    return array_sum(range(0, $n));\n}\n",
            "/**\n * @param {string} $brackets\n * @returns {bool}\n */\nfunction correctBracketing($brackets) {\n    $depth = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        $b = $brackets[$i];\n        if ($b == \"(\") {\n            $depth += 1;\n        } elseif ($b == \")\") {\n            $depth -= 1;\n        }\n        if ($depth < 0) {\n            return false;\n        }\n    }\n    return $depth == 0;\n}\n",
            "/**\n * @param {array<int>} $xs\n * @returns {array<int>}\n */\nfunction derivative ($xs) {\n    $result = [];\n    for ($i = 1; $i < count($xs); $i++) {\n        $result[] = $xs[$i] * $i;\n    }\n    return $result;\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction fibfib($n) {\n    if ($n <= 1) {\n        return 0;\n    }\n    $a = 0;\n    $b = 0;\n    $c = 1;\n    while ($n > 2) {\n        $a = $b;\n        $b = $c;\n        $c = $a + $b + $c;\n        $n -= 1;\n    }\n    return $c;\n}\n",
            "/**\n * @param {string} $s\n * @returns {int}\n */\nfunction vowelsCount ($s) {\n    $vowels = \"aeiou\";\n    $cnt = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (stristr($vowels, strtolower($s[$i])) !== false || ($i == strlen($s) - 1 && strtolower($s[$i]) == \"y\")) {\n            $cnt += 1;\n        }\n    }\n    return $cnt;\n}\n",
            "/**\n * @param {int} $x\n * @param {int} $shift\n * @returns {string}\n */\nfunction circularShift ($x, $shift) {\n    $x_str = strval($x);\n    if ($shift > strlen($x_str)) {\n        return strrev($x_str);\n    } else {\n        return substr($x_str, -$shift) . substr($x_str, 0, -$shift);\n    }\n}\n",
            "/**\n * @param {string} $s\n * @returns {int}\n */\nfunction digitSum ($s) {\n    $sum = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (ctype_upper($s[$i])) {\n            $sum += ord($s[$i]);\n        }\n    }\n    return $sum;\n}\n",
            "/**\n * @param {string} $s\n * @param {int} $n\n * @returns {int}\n */\nfunction fruitDistribution ($s, $n) {\n    $words = explode(' ', $s);\n    $apples = (int)$words[array_search(\"apples\", $words) - 1];\n    $oranges = (int)$words[array_search(\"oranges\", $words) - 1];\n    return $n - $apples - $oranges;\n}\n",
            "/**\n * @param {array<int>} $arr\n * @returns {array<int>}\n */\nfunction pluck ($arr) {\n    $evens = array_filter($arr, function($n) {\n        return $n % 2 === 0;\n    });\n    \n    if (empty($evens)) {\n        return [];\n    }\n    \n    $min_even = min($evens);\n    $index = array_search($min_even, $arr);\n    \n    return [$min_even, $index];\n}\n",
            "/**\n * @param {array<int>} $lst\n * @returns {int}\n */\nfunction search($lst) {\n    $freqs = array_fill_keys($lst, 0);\n    foreach ($lst as $n) {\n        $freqs[$n]++;\n    }\n    $good_vals = array_filter(array_keys($freqs), function($k) use ($freqs) {\n        return $freqs[$k] >= $k;\n    });\n    return !empty($good_vals) ? max($good_vals) : -1;\n}\n",
            "function strangeSortList ($lst) {\n    $sl = $lst;\n    sort($sl);\n    $result = [];\n    $left = 0;\n    $right = count($sl) - 1;\n    while ($left <= $right) {\n        $result[] = $sl[$left];\n        $left += 1;\n        if ($left <= $right) {\n            $result[] = $sl[$right];\n            $right -= 1;\n        }\n    }\n    return $result;\n}\n",
            "/**\n * @param {int} $a\n * @param {int} $b\n * @param {int} $c\n * @returns {float}\n */\nfunction triangleArea ($a, $b, $c) {\n    if ($a + $b > $c && $a + $c > $b && $b + $c > $a) {\n        $s = ($a + $b + $c) / 2.0;\n        return sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "function willItFly ($q, $w) {\n    if (empty($q)) {\n        return false;\n    }\n    $is_palin = true;\n    for ($i = 0; $i < count($q); $i++) {\n        if ($q[$i] !== $q[count($q) - $i - 1]) {\n            $is_palin = false;\n            break;\n        }\n    }\n    $total = array_sum($q);\n    return $is_palin && $total <= $w;\n}\n",
            "/**\n * @param {array<int>} $arr\n * @returns {int}\n */\nfunction smallestChange ($arr) {\n    $ans = 0;\n    for ($i = 0; $i < floor(count($arr) / 2); $i++) {\n        if ($arr[$i] != $arr[count($arr) - $i - 1]) {\n            $ans += 1;\n        }\n    }\n    return $ans;\n}\n",
            "/**\n * @param {array<string>} $lst1\n * @param {array<string>} $lst2\n * @returns {array<string>}\n */\nfunction totalMatch ($lst1, $lst2) {\n    $cnt1 = array_sum(array_map('strlen', $lst1));\n    $cnt2 = array_sum(array_map('strlen', $lst2));\n    return $cnt1 <= $cnt2 ? $lst1 : $lst2;\n}\n",
            "/**\n * @param {int} $a\n * @returns {bool}\n */\nfunction isMultiplyPrime($a) {\n    if ($a < 2) {\n        return false;\n    }\n    \n    function is_prime($n) {\n        if ($n < 2) {\n            return false;\n        }\n        for ($i = 2; $i <= sqrt($n); $i++) {\n            if ($n % $i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    $cnt = 0;\n    for ($i = 2; $i <= $a; $i++) {\n        if (is_prime($i)) {\n            while ($a % $i == 0) {\n                $cnt++;\n                $a /= $i;\n            }\n        }\n    }\n    return $cnt === 3;\n}\n",
            "/**\n * @param {int} $x\n * @param {int} $n\n * @returns {bool}\n */\nfunction isSimplePower ($x, $n) {\n  if ($n < 2) {\n    return $x == $n;\n  }\n  $tmp = 1;\n  while ($tmp < $x) {\n    $tmp *= $n;\n  }\n  return $tmp == $x;\n}\n",
            "/**\n * @param {int} $a\n * @returns {bool}\n */\nfunction isCube($a) {\n    $a = abs($a);\n    $root = round(pow($a, 1.0 / 3.0));\n    return $root * $root * $root == $a;\n}\n",
            "/**\n * @param {string} $num\n * @returns {int}\n */\nfunction hexKey ($num) {\n    return preg_match_all('/[2357BD]/', $num);\n}\n",
            "/**\n * @param {int} $dec\n * @returns {string}\n */\nfunction decimalToBinary ($dec) {\n    $binary = decbin($dec);\n    return \"db{$binary}db\";\n}\n",
            "/**\n * @param {string} $s\n * @returns {bool}\n */\nfunction isHappy($s) {\n    return false if strlen($s) < 3;\n    for ($i = 0; $i < strlen($s) - 2; $i++) {\n        return false if $s[$i] == $s[$i + 1] || $s[$i] == $s[$i + 2] || $s[$i + 1] == $s[$i + 2];\n    }\n    return true;\n}\n",
            "/**\n * @param {array<float>} $grades\n * @returns {array<string>}\n */\nfunction numericalLetterGrade ($grades) {\n    $result = [];\n    foreach ($grades as $g) {\n        if ($g == 4.0) {\n            $result[] = \"A+\";\n        } elseif ($g > 3.7) {\n            $result[] = \"A\";\n        } elseif ($g > 3.3) {\n            $result[] = \"A-\";\n        } elseif ($g > 3.0) {\n            $result[] = \"B+\";\n        } elseif ($g > 2.7) {\n            $result[] = \"B\";\n        } elseif ($g > 2.3) {\n            $result[] = \"B-\";\n        } elseif ($g > 2.0) {\n            $result[] = \"C+\";\n        } elseif ($g > 1.7) {\n            $result[] = \"C\";\n        } elseif ($g > 1.3) {\n            $result[] = \"C-\";\n        } elseif ($g > 1.0) {\n            $result[] = \"D+\";\n        } elseif ($g > 0.7) {\n            $result[] = \"D\";\n        } elseif ($g > 0.0) {\n            $result[] = \"D-\";\n        } else {\n            $result[] = \"E\";\n        }\n    }\n    return $result;\n}\n",
            "/**\n * @param {string} $s\n * @returns {bool}\n */\nfunction primeLength ($s) {\n    $length = strlen($s);\n    if ($length < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= sqrt($length); $i++) {\n        if ($length % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction startsOneEnds($n) {\n    if ($n == 1) {\n        return 1;\n    }\n    return 2 * 9 * pow(10, $n - 2);\n}\n",
            "/**\n * @param {int} $n\n * @returns {string}\n */\nfunction solve ($n) {\n    $digits_sum = array_sum(str_split($n));\n    return decbin($digits_sum);\n}\n",
            "/**\n * @param {array<int>} $lst\n * @returns {int}\n */\nfunction add ($lst) {\n    return array_sum(array_filter($lst, function($x, $i) {\n        return $i % 2 !== 0 && $x % 2 === 0;\n    }, ARRAY_FILTER_USE_BOTH));\n}\n",
            "/**\n * @param {string} $s\n * @returns {string}\n */\nfunction antiShuffle($s) {\n    $words = explode(\" \", $s);\n    foreach ($words as &$word) {\n        $chars = str_split($word);\n        sort($chars);\n        $word = implode(\"\", $chars);\n    }\n    return implode(\" \", $words);\n}\n",
            "/**\n * @param {array<array<int>>} $lst\n * @param {int} $x\n * @returns {array<array<int>>}\n */\nfunction getRow ($lst, $x) {\n    $coords = [];\n    foreach ($lst as $i => $row) {\n        foreach ($row as $j => $value) {\n            if ($value == $x) {\n                $coords[] = [$i, $j];\n            }\n        }\n    }\n    usort($coords, function($a, $b) {\n        if ($a[0] === $b[0]) {\n            return $b[1] <=> $a[1];\n        }\n        return $a[0] <=> $b[0];\n    });\n    return $coords;\n}\n",
            "/**\n * @param {array<int>} $arr\n * @returns {array<int>}\n */\nfunction sortArray ($arr) {\n    if (empty($arr)) {\n        return [];\n    }\n    if (($arr[0] + end($arr)) % 2 == 0) {\n        rsort($arr);\n        return $arr;\n    }\n    sort($arr);\n    return $arr;\n}\n",
            "/**\n * @param {string} $s\n * @returns {string}\n */\nfunction encrypt ($s) {\n    $result = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        $ch = $s[$i];\n        $shifted = ord($ch) + 4;\n        if ($shifted > ord('z')) {\n            $shifted -= 26;\n        }\n        $result .= chr($shifted);\n    }\n    return $result;\n}\n",
            "/**\n * @param array<int> $lst\n * @return int|null\n */\nfunction nextSmallest($lst) {\n    $sl = array_unique($lst);\n    sort($sl);\n    if (count($sl) < 2) {\n        return null;\n    }\n    return $sl[1];\n}\n",
            "/**\n * @param {string} $s\n * @returns {int}\n */\nfunction isBored ($s) {\n    $sentences = preg_split('/(?<=[.!?])\\s*/', $s);\n    return count(array_filter($sentences, function($sentence) {\n        return strpos($sentence, \"I \") === 0 && strlen($sentence) >= 2;\n    }));\n}\n",
            "``` php\n/**\n * @param {mixed} $x\n * @param {mixed} $y\n * @param {mixed} $z\n * @returns {bool}\n */\nfunction anyInt ($x, $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        return true;\n    }\n    return false;\n}\n```",
            "/**\n * @param {string} $message\n * @returns {string}\n */\nfunction encode($message) {\n    $vowels = \"aeiouAEIOU\";\n    $result = [];\n    for ($i = 0; $i < strlen($message); $i++) {\n        $ch = $message[$i];\n        if (ctype_alpha($ch)) {\n            $ch1 = ctype_lower($ch) ? strtoupper($ch) : strtolower($ch);\n            if (strpos($vowels, $ch1) !== false) {\n                $ch1 = chr(ord($ch1) + 2);\n            }\n            $result[] = $ch1;\n        } else {\n            $result[] = $ch;\n        }\n    }\n    return join(\"\", $result);\n}\n",
            "/**\n * @param {array<int>} $lst\n * @returns {int}\n */\nfunction skjkasdkd ($lst) {\n    $is_prime = function($n) {\n        if ($n < 2) {\n            return false;\n        }\n        for ($i = 2; $i <= sqrt($n); $i++) {\n            if ($n % $i == 0) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    $primes = array_filter($lst, $is_prime);\n    if (count($primes) == 0) {\n        return 0;\n    }\n\n    $largest = strval(max($primes));\n    $sum = 0;\n    for ($i = 0; $i < strlen($largest); $i++) {\n        $sum += intval($largest[$i]);\n    }\n    return $sum;\n}\n",
            "/**\n * @param {array<string, string>} $d\n * @returns {bool}\n */\nfunction checkDictCase ($d) {\n    if (empty($d)) {\n        return false;\n    }\n    $allLower = true;\n    $allUpper = true;\n    foreach (array_keys($d) as $key) {\n        if (!ctype_lower($key)) {\n            $allLower = false;\n        }\n        if (!ctype_upper($key)) {\n            $allUpper = false;\n        }\n    }\n    return $allLower || $allUpper;\n}\n",
            "/**\n * @param {int} $n\n * @returns {array<int>}\n */\nfunction countUpTo ($n) {\n    $primes = [];\n    for ($num = 2; $num < $n; $num++) {\n        $isPrime = true;\n        foreach ($primes as $p) {\n            if ($num % $p == 0) {\n                $isPrime = false;\n                break;\n            }\n        }\n        if ($isPrime) {\n            $primes[] = $num;\n        }\n    }\n    return $primes;\n}\n",
            "/**\n * @param {int} $a\n * @param {int} $b\n * @returns {int}\n */\nfunction multiply ($a, $b) {\n    return abs($a) % 10 * abs($b) % 10;\n}\n",
            "function countUpper($s) {\n  $vowels = \"AEIOU\";\n  $count = 0;\n  $chars = str_split($s);\n  foreach ($chars as $i => $c) {\n    if ($i % 2 == 0 && strpos($vowels, $c) !== false) {\n      $count++;\n    }\n  }\n  return $count;\n}\n",
            "/**\n * @param {string} $value\n * @returns {int}\n */\nfunction closestInteger ($value) {\n    $num = floatval($value);\n    if ($num >= 0) {\n        return (int)($num + 0.5);\n    } else {\n        return (int)($num - 0.5);\n    }\n}\n",
            "/**\n * @param {int} $n\n * @returns {array<int>}\n */\nfunction makeAPile($n) {\n    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $n + 2 * $i;\n    }\n    return $result;\n}\n",
            "/**\n * @param {string} $s\n * @returns {array<string>}\n */\nfunction wordsString($s) {\n    return array_filter(preg_split('/[, ]+/', $s), function($value) {\n        return $value !== '';\n    });\n}\n",
            "/**\n * @param {int} $x\n * @param {int} $y\n * @returns {int}\n */\nfunction chooseNum($x, $y) {\n  if ($x > $y) {\n    return -1;\n  }\n  if ($y % 2 == 0) {\n    return $y;\n  }\n  if ($x != $y) {\n    return $y - 1;\n  }\n  return -1;\n}\n",
            "/**\n * @param {int} $n\n * @param {int} $m\n * @returns {string | null}\n */\nfunction roundedAvg ($n, $m) {\n    if ($n > $m) {\n        return null;\n    }\n    $r_avg = round(($m + $n) / 2.0);\n    return decbin($r_avg);\n}\n",
            "/**\n * @param {array<int>} $x\n * @returns {array<int>}\n */\nfunction uniqueDigits ($x) {\n    return array_filter($x, function($num) {\n        $digits = str_split((string)$num);\n        foreach ($digits as $digit) {\n            if ((ord($digit) - ord('0')) % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    });\n}\n",
            "/**\n * @param {array<int>} $arr\n * @returns {array<string>}\n */\nfunction byLength ($arr) {\n    $digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    $sorted_arr = array_reverse(array_filter($arr, function($x) { return 1 <= $x && $x <= 9; }));\n    return array_map(function($x) use ($digit_names) { return $digit_names[$x - 1]; }, $sorted_arr);\n}\n",
            "/**\n * @param {int} $n\n * @returns {array<int>}\n */\nfunction f ($n) {\n    $nums = range(1, $n);\n    $result = [];\n    \n    foreach (range(1, $n) as $i) {\n        if ($i % 2 != 0) {\n            $result[] = array_sum(array_slice($nums, 0, $i));\n        } else {\n            $result[] = array_product(array_slice($nums, 0, $i));\n        }\n    }\n    \n    return $result;\n}\n",
            "function evenOddPalindrome ($n) {\n    $cnt = [0, 0];\n    for ($i = 1; $i <= $n; $i++) {\n        if (strval($i) === strrev(strval($i))) {\n            $cnt[$i % 2]++;\n        }\n    }\n    return $cnt;\n}\n",
            "/**\n * @param {array<int>} $arr\n * @return int\n */\nfunction countNums ($arr) {\n    return array_count_values(array_map(function($n) {\n        return digitsSum($n);\n    }, $arr))['1'] ?? 0;\n}\n\nfunction digitsSum($n) {\n    $nStr = (string)$n;\n    if ($n >= 0) {\n        return array_sum(str_split($nStr));\n    } else {\n        return ($nStr[0] . $nStr[1]) * 2 + digitsSum(abs($n));\n    }\n}\n",
            "/**\n * @param {array<int>} $arr\n * @returns {bool}\n */\nfunction moveOneBall ($arr) {\n    if (count($arr) == 0) {\n        return true;\n    }\n    $sorted_arr = $arr;\n    sort($sorted_arr);\n    for ($i = 0; $i < count($arr); $i++) {\n        $prefix = array_slice($arr, $i);\n        $suffix = array_slice($sorted_arr, 0, count($arr) - $i);\n        if ($prefix == $suffix && array_slice($arr, 0, $i) == array_slice($sorted_arr, count($arr) - $i)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param {array<int>} $lst1\n * @param {array<int>} $lst2\n * @returns {string}\n */\nfunction canExchange($lst1, $lst2) {\n    $odd_cnt = 0;\n    foreach ($lst1 as $num) {\n        if ($num % 2 != 0) {\n            $odd_cnt++;\n        }\n    }\n\n    $even_cnt = 0;\n    foreach ($lst2 as $num) {\n        if ($num % 2 == 0) {\n            $even_cnt++;\n        }\n    }\n\n    return $even_cnt >= $odd_cnt ? \"YES\" : \"NO\";\n}\n",
            "function histogram($test) {\n    $freq = [];\n    $words = array_filter(explode(\" \", $test));\n    foreach ($words as $w) {\n        if (isset($freq[$w])) {\n            $freq[$w]++;\n        } else {\n            $freq[$w] = 1;\n        }\n    }\n    $result = [];\n    if (!empty($freq)) {\n        $max_freq = max($freq);\n        foreach ($freq as $k => $v) {\n            if ($v == $max_freq) {\n                $result[$k] = $v;\n            }\n        }\n    }\n    return $result;\n}\n",
            "/**\n * @param {string} $s\n * @param {string} $c\n * @returns {array<string>}\n */\nfunction reverseDelete ($s, $c) {\n  $s1 = str_replace(str_split($c), '', $s);\n  return [$s1, $s1 === strrev($s1) ? \"yes\" : \"no\"];\n}\n",
            "/**\n * @param {array<string>} $lst\n * @returns {array<string>}\n */\nfunction oddCount ($lst) {\n    $result = [];\n    foreach ($lst as $num) {\n        $n = count(array_filter(str_split($num), function($d) {\n            return ord($d) % 2 == 1;\n        }));\n        $rs = \"the number of odd elements in the string i of the input.\";\n        $result[] = str_replace(\"i\", $n, $rs);\n    }\n    return $result;\n}\n",
            "```\n/**\n * @param {array<int>} $nums\n * @returns {int}\n */\nfunction minSubArraySum ($nums) {\n    $min_sum = 0;\n    $cur_sum = 0;\n    foreach ($nums as $n) {\n        $cur_sum = min($cur_sum + $n, 0);\n        $min_sum = min($cur_sum, $min_sum);\n    }\n    if ($min_sum == 0) {\n        $min_sum = min($nums);\n    }\n    return $min_sum;\n}\n```",
            "function maxFill ($grid, $capacity) {\n    $total = 0;\n    foreach ($grid as $arr) {\n        $total += ceil(array_sum($arr) / $capacity);\n    }\n    return $total;\n}\n",
            "/**\n * @param {array<int>} $arr\n * @returns {array<int>}\n */\nfunction sortArray ($arr) {\n    usort($arr, function($a, $b) {\n        $countA = substr_count(decbin($a), '1');\n        $countB = substr_count(decbin($b), '1');\n        if ($countA == $countB) {\n            return $a <=> $b;\n        }\n        return $countA <=> $countB;\n    });\n    return $arr;\n}\n",
            "/**\n * @param {string} $s\n * @param {int} $n\n * @returns {array<string>}\n */\nfunction selectWords ($s, $n) {\n  $consonants = \"bcdfghjklmnpqrstvwxyz\";\n  $words = array_filter(explode(\" \", $s), function($w) {\n    return strlen($w) > 0;\n  });\n  return array_filter($words, function($w) use ($consonants, $n) {\n    return count(preg_grep('/[' . $consonants . ']/i', str_split(strtolower($w)))) === $n;\n  });\n}\n",
            "/**\n * @param {string} $word\n * @returns {string}\n */\nfunction getClosestVowel ($word) {\n    $vowels = \"aeiouAEIOU\";\n    for ($i = strlen($word) - 2; $i > 0; $i--) {\n        if (strpos($vowels, $word[$i]) !== false && strpos($vowels, $word[$i - 1]) === false && strpos($vowels, $word[$i + 1]) === false) {\n            return $word[$i];\n        }\n    }\n    return \"\";\n}\n",
            "/**\n * @param {array<string>} $lst\n * @returns {string}\n */\nfunction matchParens ($lst) {\n    function check($s) {\n        $depth = 0;\n        for ($i = 0; $i < strlen($s); $i++) {\n            $ch = $s[$i];\n            if ($ch == \"(\") {\n                $depth += 1;\n            } else {\n                $depth -= 1;\n            }\n            if ($depth < 0) {\n                return false;\n            }\n        }\n        return $depth == 0 ? true : false;\n    }\n\n    $s1 = $lst[0] . $lst[1];\n    $s2 = $lst[1] . $lst[0];\n    return check($s1) || check($s2) ? \"Yes\" : \"No\";\n}\n",
            "function maximum ($arr, $k) {\n    if ($k == 0) {\n        return [];\n    }\n    rsort($arr);\n    return array_slice($arr, 0, $k);\n}\n",
            "/**\n * @param {array<int>} $lst\n * @returns {int}\n */\nfunction solution ($lst) {\n    return array_sum(array_map(function($x) {\n        return $x;\n    }, array_filter($lst, function($value, $key) {\n        return $key % 2 === 0 && $value % 2 !== 0;\n    }, ARRAY_FILTER_USE_BOTH)));\n}\n",
            "/**\n * @param {array<int>} $arr\n * @param {int} $k\n * @returns {int}\n */\nfunction addElements ($arr, $k) {\n    return array_sum(array_filter(array_slice($arr, 0, $k), function($n) {\n        return strlen((string)$n) <= 2;\n    }));\n}\n",
            "/**\n * @param {int} $n\n * @returns {array<int>}\n */\nfunction getOddCollatz ($n) {\n    $collatz = array(1);\n    while ($n != 1) {\n        if ($n % 2 != 0) {\n            $collatz[] = $n;\n            $n = 3 * $n + 1;\n        } else {\n            $n = $n / 2;\n        }\n    }\n    sort($collatz);\n    return $collatz;\n}\n",
            "/**\n * @param {string} $date\n * @returns {bool}\n */\nfunction validDate($date) {\n    return false unless strlen($date) == 10 && $date[2] == '-' && $date[5] == '-';\n    $m = intval(substr($date, 0, 2));\n    $d = intval(substr($date, 3, 2));\n    return in_array($m, [1, 3, 5, 7, 8, 10, 12]) && $d >= 1 && $d <= 31;\n    return in_array($m, [4, 6, 9, 11]) && $d >= 1 && $d <= 30;\n    return $m == 2 && $d >= 1 && $d <= 29;\n    return false;\n}\n",
            "/**\n * @param {string} $txt\n * @returns {array<string>}\n */\nfunction splitWords ($txt) {\n    if (strpos($txt, \" \") !== false) {\n        return explode(\" \", $txt);\n    } elseif (strpos($txt, \",\") !== false) {\n        return explode(\",\", $txt);\n    } else {\n        $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            $c = $txt[$i];\n            if (ctype_lower($c) && ord($c) % 2 == 0) {\n                $count++;\n            }\n        }\n        return array((string)$count);\n    }\n}\n",
            "/**\n * @param array<int> $lst\n * @return bool\n */\nfunction isSorted($lst): bool {\n    foreach ($lst as $i => $value) {\n        if ($i > 0 && $lst[$i - 1] > $lst[$i]) {\n            return false;\n        }\n    }\n\n    $freq = array_count_values($lst);\n    return max($freq, default: 0) <= 2;\n}\n",
            "/**\n * @param {array<int>} $interval1\n * @param {array<int>} $interval2\n * @returns {string}\n */\nfunction intersection ($interval1, $interval2) {\n    function is_prime($n) {\n        if ($n < 2) {\n            return false;\n        }\n        for ($i = 2; $i <= floor(sqrt($n)); $i++) {\n            if ($n % $i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    $l = max($interval1[0], $interval2[0]);\n    $r = min($interval1[1], $interval2[1]);\n    $length = $r - $l;\n    return ($length > 0 && is_prime($length)) ? \"YES\" : \"NO\";\n}\n",
            "/**\n * @param {array<int>} $arr\n * @returns {int | null}\n */\nfunction prodSigns ($arr) {\n    if (empty($arr)) {\n        return null;\n    }\n    if (in_array(0, $arr)) {\n        return 0;\n    }\n    $sign = count(array_filter($arr, function($n) { return $n < 0; })) % 2 == 1 ? -1 : 1;\n    return $sign * array_sum(array_map('abs', $arr));\n}\n",
            "/**\n * @param {array<array<int>>} $grid\n * @param {int} $k\n * @returns {array<int>}\n */\nfunction minPath ($grid, $k) {\n    $n = count($grid);\n    $min_val = $n * $n + 1;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            if ($grid[$i][$j] == 1) {\n                $temp = [];\n                if ($i != 0) {\n                    $temp[] = $grid[$i - 1][$j];\n                }\n                if ($j != 0) {\n                    $temp[] = $grid[$i][$j - 1];\n                }\n                if ($i != $n - 1) {\n                    $temp[] = $grid[$i + 1][$j];\n                }\n                if ($j != $n - 1) {\n                    $temp[] = $grid[$i][$j + 1];\n                }\n                $min_val = min($min_val, ...$temp);\n            }\n        }\n    }\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $result[] = ($i % 2 == 0) ? 1 : $min_val;\n    }\n    return $result;\n}\n",
            "/**\n * @param {int} $n\n * @returns {array<int>}\n */\nfunction tri ($n) {\n    if ($n == 0) {\n        return [1];\n    }\n    $seq = [1, 3];\n    for ($i = 2; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $seq[] = $i / 2 + 1;\n        } else {\n            $seq[] = $seq[$i - 1] + $seq[$i - 2] + ($i + 3) / 2;\n        }\n    }\n    return $seq;\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction digits ($n) {\n    $odds = array_filter(str_split((string)$n), function($d) {\n        return (int)$d % 2 !== 0;\n    });\n    return count($odds) > 0 ? array_product($odds) : 0;\n}\n",
            "/**\n * @param {string} $s\n * @returns {bool}\n */\nfunction isNested ($s) {\n    $open_idx = [];\n    $close_idx = [];\n    \n    for ($i = 0; $i < strlen($s); $i++) {\n        $ch = $s[$i];\n        if ($ch == '[') {\n            array_push($open_idx, $i);\n        } elseif ($ch == ']') {\n            array_push($close_idx, $i);\n        }\n    }\n    \n    $close_idx = array_reverse($close_idx);\n    $cnt = 0;\n    $l = count($close_idx);\n    $i = 0;\n    \n    foreach ($open_idx as $idx) {\n        if ($i < $l && $idx < $close_idx[$i]) {\n            $cnt += 1;\n            $i += 1;\n        }\n    }\n    \n    return $cnt >= 2;\n}\n",
            "/**\n * @param {array<float>} $lst\n * @returns {int}\n */\nfunction sumSquares ($lst) {\n    return array_sum(array_map(function($n) {\n        return ceil($n) ** 2;\n    }, $lst));\n}\n",
            "/**\n * @param {string} $txt\n * @returns {bool}\n */\nfunction checkIfLastCharIsALetter ($txt) {\n    if (empty($txt)) {\n        return false;\n    }\n    $parts = explode(' ', $txt);\n    $last = end($parts);\n    return strlen($last) === 1 && ctype_alpha($last[0]);\n}\n",
            "/**\n * @param {array<int>} $arr\n * @returns {int}\n */\nfunction canArrange ($arr) {\n    if (count($arr) <= 1) {\n        return -1;\n    }\n    $idx = range(1, count($arr) - 1);\n    $idx = array_filter($idx, function($i) use ($arr) {\n        return $arr[$i] < $arr[$i - 1];\n    });\n    if (empty($idx)) {\n        return -1;\n    }\n    return max($idx);\n}\n",
            "/**\n * @param {array<int>} $lst\n * @returns {array<int | null>}\n */\nfunction largestSmallestIntegers ($lst) {\n    $neg = array_filter($lst, function($i) { return $i < 0; });\n    $pos = array_filter($lst, function($i) { return $i > 0; });\n    $max_neg = !empty($neg) ? max($neg) : null;\n    $min_pos = !empty($pos) ? min($pos) : null;\n    return [$max_neg, $min_pos];\n}\n",
            "/**\n * @param {mixed} $a\n * @param {mixed} $b\n * @returns {float | null}\n */\nfunction compareOne($a, $b) {\n    function anyToReal($o) {\n        if (is_string($o)) {\n            return floatval(str_replace(',', '.', $o));\n        } elseif (is_int($o)) {\n            return floatval($o);\n        } elseif (is_float($o)) {\n            return $o;\n        } else {\n            throw new RuntimeException(\"Type Error\");\n        }\n    }\n\n    $a1 = anyToReal($a);\n    $b1 = anyToReal($b);\n    if ($a1 == $b1) {\n        return null;\n    } elseif ($a1 > $b1) {\n        return $a1;\n    } else {\n        return $b1;\n    }\n}\n",
            "/**\n * @param {int} $n\n * @returns {bool}\n */\nfunction isEqualToSumEven ($n) {\n    return $n % 2 == 0 && $n >= 8;\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction specialFactorial ($n) {\n    $fact = 1;\n    $result = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $fact *= $i;\n        $result *= $fact;\n    }\n    return $result;\n}\n",
            "/**\n * @param {string} $txt\n * @returns {string}\n */\nfunction fixSpaces ($txt) {\n    $txt = preg_replace('/\\s{3,}/', '-', $txt);\n    $txt = str_replace(' ', '_', $txt);\n    return $txt;\n}\n",
            "/**\n * @param {string} $fileName\n * @returns {string}\n */\nfunction fileNameCheck ($fileName) {\n    $suf = [\"txt\", \"exe\", \"dll\"];\n    $lst = explode(\".\", $fileName);\n    if (count($lst) != 2 || !in_array($lst[1], $suf) || strlen($lst[0]) == 0 || !ctype_alpha($lst[0][0]) || preg_match_all('/\\d/', $lst[0]) > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n",
            "function sumSquares ($lst) {\n    $result = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n            $result += $lst[$i] ** 2;\n        } elseif ($i % 4 == 0) {\n            $result += $lst[$i] ** 3;\n        } else {\n            $result += $lst[$i];\n        }\n    }\n    return $result;\n}\n",
            "/**\n * @param {string} $sentence\n * @returns {string}\n */\nfunction wordsInSentence ($sentence) {\n    function is_prime($n) {\n        if ($n < 2) {\n            return false;\n        }\n        for ($i = 2; $i <= sqrt($n); $i++) {\n            if ($n % $i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    $words = explode(\" \", $sentence);\n    $filtered_words = array_filter($words, function($w) {\n        return is_prime(strlen($w));\n    });\n    return implode(\" \", $filtered_words);\n}\n",
            "/**\n * @param {string} $x\n * @param {string} $n\n * @returns {bool}\n */\nfunction simplify($x, $n) {\n    $xs = explode(\"/\", $x);\n    $ns = explode(\"/\", $n);\n    $num = (int)$xs[0] * (int)$ns[0];\n    $den = (int)$xs[1] * (int)$ns[1];\n    return $num % $den == 0;\n}\n",
            "/**\n * @param {array<int>} $nums\n * @returns {array<int>}\n */\nfunction orderByPoints ($nums) {\n    usort($nums, function($a, $b) {\n        return digits_sum($a) <=> digits_sum($b);\n    });\n    return $nums;\n}\n\n/**\n * Helper function to calculate the sum of digits of a number\n * @param {int} $n\n * @returns {int}\n */\nfunction digits_sum ($n) {\n    $n_str = (string)$n;\n    if ($n >= 0) {\n        return array_sum(str_split($n_str));\n    } else {\n        $two_digit_part = (int)substr($n_str, 0, 2);\n        return $two_digit_part * 2 + digits_sum(abs($n));\n    }\n}\n",
            "/**\n * @param {array<int>} $nums\n * @returns {int}\n */\nfunction specialFilter ($nums) {\n    $odds = \"13579\";\n    $count = 0;\n    foreach ($nums as $n) {\n        if ($n > 10 && $n % 2 != 0 && strpos($odds, (string)$n[0]) !== false) {\n            $count++;\n        }\n    }\n    return $count;\n}\n",
            "function getMaxTriples($n) {\n    $c = [0, 0, 0];\n    for ($i = 1; $i <= $n; $i++) {\n        $a = $i * $i - $i + 1;\n        $c[$a % 3]++;\n    }\n    return $c[0] * $c[1] * $c[2] + (($c[0] * ($c[0] - 1) * ($c[0] - 2) + $c[1] * ($c[1] - 1) * ($c[1] - 2) + $c[2] * ($c[2] - 1) * ($c[2] - 2)) / 6);\n}\n",
            "/**\n * @param {string} $planet1\n * @param {string} $planet2\n * @returns {array<string>}\n */\nfunction bf ($planet1, $planet2) {\n    $names = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    if (!in_array($planet1, $names) || !in_array($planet2, $names)) {\n        return array();\n    }\n    \n    $l = array_search($planet1, $names);\n    $r = array_search($planet2, $names);\n    \n    if ($l > $r) {\n        list($l, $r) = array($r, $l);\n    }\n    if ($l == $r) {\n        return array();\n    }\n    \n    return array_slice($names, $l + 1, $r - $l - 1);\n}\n",
            "/**\n * @param {array<string>} $lst\n * @returns {array<string>}\n */\nfunction sortedListSum ($lst) {\n    $result = array_filter($lst, function($s) {\n        return strlen($s) % 2 === 0;\n    });\n    \n    usort($result, function($a, $b) {\n        $lenA = strlen($a);\n        $lenB = strlen($b);\n        \n        if ($lenA === $lenB) {\n            return strcmp($a, $b);\n        }\n        \n        return $lenA - $lenB;\n    });\n    \n    return $result;\n}\n",
            "/**\n * @param {int} $n\n * @param {int} $x\n * @param {int} $y\n * @returns {int}\n */\nfunction xOrY ($n, $x, $y) {\n    if ($n < 2) {\n        return $y;\n    }\n    for ($i = 2; $i <= sqrt($n); $i++) {\n        if ($n % $i == 0) {\n            return $y;\n        }\n    }\n    return $x;\n}\n",
            "/**\n * @param {array<float>} $lst\n * @returns {int}\n */\nfunction doubleTheDifference ($lst) {\n    return array_sum(array_map(function($n) {\n        if ($n >= 0 && $n % 2 == 1) {\n            return $n * $n;\n        }\n        return 0;\n    }, $lst));\n}\n",
            "/**\n * @param {array<int>} $game\n * @param {array<int>} $guess\n * @returns {array<int>}\n */\nfunction compare ($game, $guess) {\n    $result = [];\n    for ($i = 0; $i < count($game); $i++) {\n        $result[] = abs($game[$i] - $guess[$i]);\n    }\n    return $result;\n}\n",
            "/**\n * @param {string} $className\n * @param {array<string>} $extensions\n * @returns {string}\n */\nfunction strongestExtension ($className, $extensions) {\n    $max_s = -INF;\n    $max_ext = \"\";\n    foreach ($extensions as $ext) {\n        $upper = 0;\n        $lower = 0;\n        for ($i = 0; $i < strlen($ext); $i++) {\n            if (ctype_upper($ext[$i])) {\n                $upper++;\n            } elseif (ctype_lower($ext[$i])) {\n                $lower++;\n            }\n        }\n        $s = $upper - $lower;\n        if ($s > $max_s) {\n            $max_s = $s;\n            $max_ext = $ext;\n        }\n    }\n    return $className . \".\" . $max_ext;\n}\n",
            "/**\n * @param {string} $a\n * @param {string} $b\n * @returns {bool}\n */\nfunction cycpatternCheck ($a, $b) {\n    if (strlen($a) < strlen($b)) {\n        return false;\n    }\n    for ($i = 0; $i < strlen($b); $i++) {\n        if (strpos($a, substr($b, $i) . substr($b, 0, $i)) !== false) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param {int} $num\n * @returns {array<int>}\n */\nfunction evenOddCount ($num) {\n    $ds = strval(abs($num));\n    $even = 0;\n    \n    for ($i = 0; $i < strlen($ds); $i++) {\n        if (intval($ds[$i]) % 2 == 0) {\n            $even++;\n        }\n    }\n    \n    return [$even, strlen($ds) - $even];\n}\n",
            "/**\n * @param {int} $num\n * @returns {string}\n */\nfunction intToMiniRoman ($num) {\n    $values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    $numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    $res = [];\n    for ($i = 0; $i < count($values); $i++) {\n        while ($num >= $values[$i]) {\n            $res[] = $numerals[$i];\n            $num -= $values[$i];\n        }\n    }\n    return implode(\"\", $res);\n}\n",
            "/**\n * @param {int} $a\n * @param {int} $b\n * @param {int} $c\n * @returns {bool}\n */\nfunction rightAngleTriangle ($a, $b, $c) {\n    $s = array($a, $b, $c);\n    sort($s);\n    return $s[0] * $s[0] + $s[1] * $s[1] == $s[2] * $s[2];\n}\n",
            "/**\n * @param {array<string>} $words\n * @returns {string}\n */\nfunction findMax ($words) {\n    $max_cnt = 0;\n    $max_w = \"\";\n    foreach ($words as $w) {\n        $cnt = count(array_unique(str_split($w)));\n        if ($cnt > $max_cnt) {\n            $max_cnt = $cnt;\n            $max_w = $w;\n        } elseif ($cnt == $max_cnt) {\n            $max_w = strcmp($max_w, $w) < 0 ? $max_w : $w;\n        }\n    }\n    return $max_w;\n}\n",
            "/**\n * @param {int} $num\n * @param {int} $need\n * @param {int} $remaining\n * @returns {array<int>}\n */\nfunction eat($num, $need, $remaining) {\n    if ($need <= $remaining) {\n        return [$num + $need, $remaining - $need];\n    } else {\n        return [$num + $remaining, 0];\n    }\n}\n",
            "/**\n * @param {array<string>} $operators\n * @param {array<int>} $operands\n * @returns {int}\n */\nfunction doAlgebra ($operators, $operands) {\n    $ops = array_slice($operators, 0);\n    $nums = array_slice($operands, 0);\n    $i = count($ops) - 1;\n    while ($i >= 0) {\n        if ($ops[$i] == \"**\") {\n            $nums[$i] = pow($nums[$i], $nums[$i + 1]);\n            array_splice($nums, $i + 1, 1);\n            array_splice($ops, $i, 1);\n        }\n        $i--;\n    }\n    $i = 0;\n    while ($i < count($ops)) {\n        if ($ops[$i] == \"*\") {\n            $nums[$i] = $nums[$i] * $nums[$i + 1];\n            array_splice($nums, $i + 1, 1);\n            array_splice($ops, $i, 1);\n            $i--;\n        } elseif ($ops[$i] == \"//\") {\n            $nums[$i] = intdiv($nums[$i], $nums[$i + 1]);\n            array_splice($nums, $i + 1, 1);\n            array_splice($ops, $i, 1);\n            $i--;\n        }\n        $i++;\n    }\n    $i = 0;\n    while ($i < count($ops)) {\n        if ($ops[$i] == \"+\") {\n            $nums[$i] = $nums[$i] + $nums[$i + 1];\n            array_splice($nums, $i + 1, 1);\n            array_splice($ops, $i, 1);\n            $i--;\n        } elseif ($ops[$i] == \"-\") {\n            $nums[$i] = $nums[$i] - $nums[$i + 1];\n            array_splice($nums, $i + 1, 1);\n            array_splice($ops, $i, 1);\n            $i--;\n        }\n        $i++;\n    }\n    return $nums[0];\n}\n",
            "/**\n * @param {string} $s\n * @returns {string}\n */\nfunction solve($s) {\n    if (!preg_match('/[a-zA-Z]/', $s)) {\n        return strrev($s);\n    }\n\n    $result = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        $ch = $s[$i];\n        if (!ctype_alpha($ch)) {\n            $result .= $ch;\n        } elseif (ctype_upper($ch)) {\n            $result .= strtolower($ch);\n        } elseif (ctype_lower($ch)) {\n            $result .= strtoupper($ch);\n        }\n    }\n\n    return $result;\n}\n",
            "function stringToMd5($txt) {\n    if (empty($txt)) {\n        return null;\n    }\n    md5_hash = hash_init('md5');\n    mb_convert_variables('UTF-8', 'auto', $txt);\n    hash_update($md5_hash, $txt);\n    $md5_encoded = hash_final($md5_hash, true);\n    return bin2hex($md5_encoded);\n}\n",
            "/**\n * @param {int} $a\n * @param {int} $b\n * @returns {array<int>}\n */\nfunction generateIntegers($a, $b) {\n    $lower = max(2, min($a, $b));\n    $upper = min(8, max($a, $b));\n    $result = [];\n    for ($i = $lower; $i <= $upper; $i++) {\n        if ($i % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n"
        ],
        "dart": [
            "bool hasCloseElements(List<double> numbers, double threshold) {\n    for (int i = 0; i < numbers.length; i++) {\n        for (int j = i + 1; j < numbers.length; j++) {\n            if ((numbers[i] - numbers[j]).abs < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "List<String> separateParenGroups(String parenString) {\n    List<String> groups = [];\n    List<String> stk = [];\n    String currentGroup = \"\";\n    String parens = parenString.replaceAll(\" \", \"\");\n    for (var ch in parens.runes.map((rune) => String.fromCharCode(rune))) {\n        if (ch == \"(\") {\n            stk.add(ch);\n            currentGroup += ch;\n        } else if (ch == \")\") {\n            stk.removeLast();\n            currentGroup += ch;\n            if (stk.isEmpty) {\n                groups.add(currentGroup);\n                currentGroup = \"\";\n            }\n        }\n    }\n    return groups;\n}\n",
            "double truncateNumber(double num) {\n    return num - num.floor();\n}\n",
            "bool belowZero(List<int> operations) {\n    int balance = 0;\n    for (var op in operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "double meanAbsoluteDeviation(List<double> numbers) {\n    double mean = numbers.reduce((a, b) => a + b) / numbers.length;\n    double deviation = numbers.map((x) => (x - mean).abs()).reduce((a, b) => a + b);\n    return deviation / numbers.length;\n}\n",
            "List<int> intersperse(List<int> numbers, int delimiter) {\n    List<int> result = [];\n    for (int i = 0; i < numbers.length; i++) {\n        if (i != 0) {\n            result.add(delimiter);\n        }\n        result.add(numbers[i]);\n    }\n    return result;\n}\n",
            "List<int> parseNestedParens(String parenString) {\n    List<int> result = [];\n    List<String> parenGroups = parenString.split(\" \");\n    for (String group in parenGroups) {\n        int maxDepth = 0;\n        int depth = 0;\n        for (int i = 0; i < group.length; i++) {\n            String ch = group[i];\n            if (ch == \"(\") {\n                depth += 1;\n                maxDepth = [maxDepth, depth].reduce((a, b) => a > b ? a : b);\n            } else if (ch == \")\") {\n                depth -= 1;\n            }\n        }\n        result.add(maxDepth);\n    }\n    return result;\n}\n",
            "List<String> filterBySubstring(List<String> strs, String substring) {\n  return strs.where((s) => s.contains(substring)).toList();\n}\n",
            "List<int> sumProduct(List<int> numbers) {\n  int n_sum = numbers.reduce((x, y) => x + y);\n  int n_product = numbers.reduce((x, y) => x * y);\n  return [n_sum, n_product];\n}\n",
            "List<int> rollingMax(List<int> numbers) {\n    int maxSoFar = -double.infinity;\n    List<int> result = [];\n    for (int num in numbers) {\n        maxSoFar = [maxSoFar, num].reduce((a, b) => a > b ? a : b);\n        result.add(maxSoFar);\n    }\n    return result;\n}\n",
            "String makePalindrome(String s) {\n  if (s == s.split('').reversed.join()) {\n    return s;\n  }\n  for (int i = 0; i < s.length; i++) {\n    String suffix = s.substring(i);\n    if (suffix == suffix.split('').reversed.join()) {\n      return s + s.substring(0, i).split('').reversed.join();\n    }\n  }\n  return \"\";\n}\n",
            "String stringXor(String a, String b) {\n  return List.generate(a.length, (i) => a[i] == b[i] ? '0' : '1').join();\n}\n",
            "String? longest(List<String> strs) {\n    if (strs.isEmpty) return null;\n    String longestS = strs[0];\n    for (var s in strs) {\n        if (s.length > longestS.length) {\n            longestS = s;\n        }\n    }\n    return longestS;\n}\n",
            "int greatestCommonDivisor(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return greatestCommonDivisor(b, a % b);\n    }\n}\n",
            "List<String> allPrefixes(String s) {\n    List<String> prefixes = [];\n    for (int i = 0; i < s.length; i++) {\n        prefixes.add(s.substring(0, i + 1));\n    }\n    return prefixes;\n}\n",
            "String stringSequence(int n) {\n  return List.generate(n + 1, (i) => i.toString()).join(\" \");\n}\n",
            "int countDistinctCharacters(String s) {\n    return s.toLowerCase().split('').toSet().length;\n}\n",
            "List<int> parseMusic(String musicString) {\n    List<String> notes = musicString.split(\" \");\n    Map<String, int> durations = {\"o\": 4, \"o|\": 2, \".|\": 1};\n    \n    return notes.map((note) => durations[note]).toList();\n}\n",
            "int howManyTimes(String s, String substring) {\n    int times = 0;\n    for (int i = 0; i <= s.length - substring.length; i++) {\n        if (s.substring(i, i + substring.length) == substring) {\n            times++;\n        }\n    }\n    return times;\n}\n",
            "String sortNumbers(String numbers) {\n  Map<String, int> numDict = {\n    \"zero\": 0,\n    \"one\": 1,\n    \"two\": 2,\n    \"three\": 3,\n    \"four\": 4,\n    \"five\": 5,\n    \"six\": 6,\n    \"seven\": 7,\n    \"eight\": 8,\n    \"nine\": 9\n  };\n  \n  List<String> numList = numbers.split(\" \").where((x) => numDict.containsKey(x)).toList();\n  numList.sort((a, b) => numDict[a]!.compareTo(numDict[b]!));\n  \n  return numList.join(\" \");\n}\n",
            "List<double> findClosestElements(List<double> numbers) {\n    List<double> sortedNumbers = List.from(numbers)..sort();\n    double minDiff = double.infinity;\n    List<double> closestPair = [];\n    \n    for (int i = 1; i < sortedNumbers.length; i++) {\n        double diff = sortedNumbers[i] - sortedNumbers[i - 1];\n        if (diff < minDiff) {\n            minDiff = diff;\n            closestPair = [sortedNumbers[i - 1], sortedNumbers[i]];\n        }\n    }\n    \n    return closestPair;\n}\n",
            "List<double> rescaleToUnit(List<double> numbers) {\n    double minNum = numbers.reduce((a, b) => a < b ? a : b);\n    double maxNum = numbers.reduce((a, b) => a > b ? a : b);\n    if (minNum == maxNum) {\n        return List.filled(numbers.length, 0.0);\n    } else {\n        return numbers.map((num) => (num - minNum) / (maxNum - minNum)).toList();\n    }\n}\n",
            "List<int> filterIntegers(List<Object> values) {\n  return values.where((x) => x is int).toList();\n}\n",
            "int strLength(String s) {\n  return s.length;\n}\n",
            "int largestDivisor(int n) {\n  for (int i = 2; i < n; i++) {\n    if (n % i == 0) {\n      return n ~/ i;\n    }\n  }\n  return 1;\n}\n",
            "List<int> factorize(int n) {\n    List<int> factors = [];\n    int divisor = 2;\n    while (divisor <= n) {\n        if (n % divisor == 0) {\n            factors.add(divisor);\n            n ~/= divisor;\n        } else {\n            divisor++;\n        }\n    }\n    return factors;\n}\n",
            "List<int> removeDuplicates(List<int> numbers) {\n    Map<int, int> counts = {};\n    for (int num in numbers) {\n        counts[num] = (counts[num] ?? 0) + 1;\n    }\n    List<int> res = numbers.where((num) => counts[num] == 1).toList();\n    return res;\n}\n",
            "String flipCase(String s) {\n    List<String> flipped = [];\n    for (int i = 0; i < s.length; i++) {\n        String ch = s[i];\n        if (!ch.isLetter()) {\n            flipped.add(ch);\n        } else if (ch.isLowerCase()) {\n            flipped.add(ch.toUpperCase());\n        } else if (ch.isUpperCase()) {\n            flipped.add(ch.toLowerCase());\n        }\n    }\n    return flipped.join('');\n}\n",
            "String concatenate(List<String> strs) {\n    return strs.join(\"\");\n}\n",
            "List<String> filterByPrefix(List<String> strs, String prefixStr) {\n    return strs.where((s) => s.startsWith(prefixStr)).toList();\n}\n",
            "List<int> getPositive(List<int> l) {\n  return l.where((num) => num > 0).toList();\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n",
            "double poly(List<int> xs, double x) {\n    double res = 0.0;\n    for (int i = 0; i < xs.length; i++) {\n        res += xs[i] * pow(x, i);\n    }\n    return res;\n}\n\ndouble findZero(List<int> xs) {\n    double x1 = 1.0, x2 = -1.0;\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2;\n        x2 *= 2;\n    }\n    while ((x1 - x2).abs > 1e-10) {\n        double mid = (x1 + x2) / 2.0;\n        if (poly(xs, mid) == 0) {\n            return mid;\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2.0;\n}\n",
            "List<int> sortThird(List<int> l) {\n  List<int> sortedThird = l.asMap().entries.where((e) => e.key % 3 == 0).map((e) => e.value).toList();\n  sortedThird.sort();\n\n  return l.map((x, i) {\n    return i % 3 == 0 ? sortedThird[i ~/ 3] : x;\n  }).toList();\n}\n",
            "List<int> listUnique(List<int> l) {\n  return l.toSet().toList()..sort();\n}\n",
            "int maxElement(List<int> l) {\n    if (l.isEmpty) return 0;\n    return l.reduce((a, b) => a > b ? a : b);\n}\n",
            "int fizzBuzz(int n) {\n    int cnt = 0;\n    for (int i = 0; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            cnt += i.toString().where((c) => c == '7').length;\n        }\n    }\n    return cnt;\n}\n",
            "List<int> sortEven(List<int> l) {\n  List<int> sortedEven = l.asMap().entries.where((entry) => entry.key % 2 == 0).map((entry) => entry.value).toList()..sort();\n  return l.map((x, i) => i % 2 == 0 ? sortedEven[i ~/ 2] : x).toList();\n}\n",
            "String encodeCyclic(String s) {\n    List<String> result = [];\n    for (int i = 0; i < s.length; i += 3) {\n        if (i + 3 > s.length) {\n            result.add(s.substring(i));\n        } else {\n            result.add(s.substring(i + 1, i + 3));\n            result.add(s[i]);\n        }\n    }\n    return result.join(\"\");\n}\n\nString decodeCyclic(String s) {\n    return encodeCyclic(encodeCyclic(s));\n}\n",
            "bool isPrime(int n) {\n  if (n < 2) {\n    return false;\n  }\n  for (int i = 2; i <= math.sqrt(n).toInt(); i++) {\n    if (n % i == 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\nint primeFib(int n) {\n  List<int> f = [0, 1];\n  int cnt = 0;\n  while (cnt < n) {\n    f = [f[1], f[0] + f[1]];\n    if (isPrime(f[1])) {\n      cnt++;\n    }\n  }\n  return f[1];\n}\n",
            "bool triplesSumToZero(List<int> l) {\n  for (int i = 0; i < l.length; i++) {\n    for (int j = i + 1; j < l.length; j++) {\n      for (int k = j + 1; k < l.length; k++) {\n        if (l[i] + l[j] + l[k] == 0) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n",
            "int carRaceCollision(int n) {\n  return n * n;\n}\n",
            "List<int> incrList(List<int> l) {\n  return l.map((i) => i + 1).toList();\n}\n",
            "bool pairsSumToZero(List<int> l) {\n  Set<int> seen = {};\n  for (int num in l) {\n    if (seen.contains(-num)) {\n      return true;\n    }\n    seen.add(num);\n  }\n  return false;\n}\n",
            "String changeBase(int x, int bas) {\n    if (x == 0) return \"0\";\n    List<String> digits = [];\n    while (x > 0) {\n        digits.add((x % bas).toString());\n        x ~/= bas;\n    }\n    return digits.reversed.join();\n}\n",
            "double triangleArea(int a, int h) {\n    return a.toDouble() * h / 2;\n}\n",
            "int fib4(int n) {\n  List<int> fib = [0, 0, 2, 0];\n  for (int i = 4; i <= n; i++) {\n    fib[i % 4] = fib.reduce((a, b) => a + b);\n  }\n  return fib[n % 4];\n}\n",
            "double median(List<double> l) {\n    final sl = List.from(l)..sort();\n    if (l.length % 2 != 0) {\n        return sl[l.length ~/ 2];\n    } else {\n        return (sl[l.length ~/ 2] + sl[l.length ~/ 2 - 1]) / 2.0;\n    }\n}\n",
            "bool isPalindrome(String txt) {\n    return txt == txt.split('').reversed.join('');\n}\n",
            "int modp(int n, int p) {\n    int ret = 1;\n    for (int i = 0; i < n; i++) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}\n",
            "String encodeShift(String s) {\n    return s.split('').map((ch) => String.fromCharCode(((ch.codeUnitAt(0) - 97 + 5) % 26 + 97))).join('');\n}\n\nString decodeShift(String s) {\n    return s.split('').map((ch) => String.fromCharCode(((ch.codeUnitAt(0) - 97 + 21) % 26 + 97))).join('');\n}\n",
            "String removeVowels(String txt) {\n    String vowels = \"aeiouAEIOU\";\n    return txt.split('').where((char) => !vowels.contains(char)).join('');\n}\n",
            "bool belowThreshold(List<int> l, int t) {\n  return l.every((x) => x < t);\n}\n",
            "int add(int x, int y) {\n  return x + y;\n}\n",
            "bool sameChars(String s0, String s1) {\n    return Set.from(s0.split('')) == Set.from(s1.split(''));\n}\n",
            "int fib(int n) {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n",
            "bool correctBracketing(String brackets) {\n  int depth = 0;\n  for (var b in brackets.runes) {\n    if (String.fromCharCode(b) == \"<\") {\n      depth += 1;\n    } else if (String.fromCharCode(b) == \">\") {\n      depth -= 1;\n    }\n    if (depth < 0) return false;\n  }\n  return depth == 0;\n}\n",
            "bool monotonic(List<int> l) {\n  List<int> diff = [];\n  for (int i = 0; i < l.length - 1; i++) {\n    diff.add(l[i + 1] - l[i]);\n  }\n  return diff.every((x) => x <= 0) || diff.every((x) => x >= 0);\n}\n",
            "List<int> common(List<int> l1, List<int> l2) {\n  return (l1.toSet().intersection(l2.toSet())).toList()..sort();\n}\n",
            "int largestPrimeFactor(int n) {\n    int i = 2;\n    while (i * i <= n) {\n        if (n % i != 0) {\n            i += 1;\n        } else {\n            n ~/= i;\n        }\n    }\n    return n;\n}\n",
            "int sumToN(int n) {\n  return (0..n).toList().reduce(( accumulator, currentValue) => accumulator + currentValue);\n}\n",
            "bool correctBracketing(String brackets) {\n    int depth = 0;\n    for (var b in brackets.codeUnits) {\n        if (b == \"(\") {\n            depth += 1;\n        } else if (b == \")\") {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "List<int> derivative(List<int> xs) {\n    return List.generate(xs.length - 1, (i) => xs[i + 1] * (i + 1));\n}\n",
            "```int fibfib(int n) {\n    if (n <= 1) {\n        return 0;\n    }\n    int a = 0, b = 0, c = 1;\n    while (n > 2) {\n        a = b;\n        b = c;\n        c = a + b + c;\n        n--;\n    }\n    return c;\n}\n```",
            "int vowelsCount(String s) {\n    String vowels = \"aeiou\";\n    int cnt = 0;\n    for (int i = 0; i < s.length; i++) {\n        if (vowels.contains(s[i].toLowerCase()) || (i == s.length - 1 && s[i].toLowerCase() == \"y\")) {\n            cnt++;\n        }\n    }\n    return cnt;\n}\n",
            "String circularShift(int x, int shift) {\n    String xStr = x.toString();\n    if (shift > xStr.length) {\n        return xStr.split('').reversed.join();\n    } else {\n        return xStr.substring(xStr.length - shift) + xStr.substring(0, xStr.length - shift);\n    }\n}\n",
            "int digitSum(String s) {\n  return s.split('').where((c) => c.contains(RegExp(r'[A-Z]'))).map((c) => c.codeUnitAt(0)).reduce((a, b) => a + b);\n}\n",
            "int fruitDistribution(String s, int n) {\n  List<String> words = s.split(' ');\n  int apples = int.parse(words[words.indexOf(\"apples\") - 1]);\n  int oranges = int.parse(words[words.indexOf(\"oranges\") - 1]);\n  return n - apples - oranges;\n}\n",
            "List<int> pluck(List<int> arr) {\n  List<int> evens = arr.where((n) => n % 2 == 0).toList();\n  if (evens.isEmpty) return [];\n  \n  int minEven = evens.reduce((a, b) => a < b ? a : b);\n  int index = arr.indexOf(minEven);\n  return [minEven, index];\n}\n",
            "int search(List<int> lst) {\n    Map<int, int> freqs = {};\n    for (int n in lst) {\n        freqs[n] = (freqs[n] ?? 0) + 1;\n    }\n    List<int> goodVals = freqs.keys.where((k) => freqs[k]! >= k).toList();\n    return goodVals.isNotEmpty ? goodVals.reduce(max) : -1;\n}\n",
            "List<int> strangeSortList(List<int> lst) {\n    List<int> sl = lst.sublist(0)..sort();\n    List<int> result = [];\n    int left = 0, right = sl.length - 1;\n    while (left <= right) {\n        result.add(sl[left]);\n        left += 1;\n        if (left <= right) {\n            result.add(sl[right]);\n            right -= 1;\n        }\n    }\n    return result;\n}\n",
            "double triangleArea(int a, int b, int c) {\n    if (a + b > c && a + c > b && b + c > a) {\n        double s = (a + b + c) / 2.0;\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "bool willItFly(List<int> q, int w) {\n    if (q.isEmpty) return false;\n    bool isPalin = q.every((e) => e == q[q.length - 1 - q.indexOf(e)]);\n    int total = q.reduce((a, b) => a + b);\n    return isPalin && total <= w;\n}\n",
            "int smallestChange(List<int> arr) {\n    int ans = 0;\n    for (int i = 0; i < arr.length ~/ 2; i++) {\n        if (arr[i] != arr[arr.length - i - 1]) {\n            ans += 1;\n        }\n    }\n    return ans;\n}\n",
            "List<String> totalMatch(List<String> lst1, List<String> lst2) {\n    int cnt1 = lst1.map((str) => str.length).reduce((a, b) => a + b);\n    int cnt2 = lst2.map((str) => str.length).reduce((a, b) => a + b);\n    return cnt1 <= cnt2 ? lst1 : lst2;\n}\n",
            "bool isPrime(int n) {\n  if (n < 2) return false;\n  for (int i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i == 0) return false;\n  }\n  return true;\n}\n\nbool isMultiplyPrime(int a) {\n  int cnt = 0;\n  for (int i = 2; i <= a; i++) {\n    if (isPrime(i)) {\n      while (a % i == 0) {\n        cnt++;\n        a ~/= i;\n      }\n    }\n  }\n  return cnt == 3;\n}\n",
            "bool isSimplePower(int x, int n) {\n  if (n < 2) {\n    return x == n;\n  }\n  int tmp = 1;\n  while (tmp < x) {\n    tmp *= n;\n  }\n  return tmp == x;\n}\n",
            "bool isCube(int a) {\n    a = a.abs();\n    int root = (a.pow(1.0 / 3.0)).round();\n    return root * root * root == a;\n}\n",
            "int hexKey(String num) {\n    return num.split('').where((char) => \"2357BD\".contains(char)).length;\n}\n",
            "String decimalToBinary(int dec) {\n    String binary = dec.toRadixString(2);\n    return \"db${binary}db\";\n}\n",
            "bool isHappy(String s) {\n    if (s.length < 3) {\n        return false;\n    }\n    for (int i = 0; i < s.length - 2; i++) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "List<String> numericalLetterGrade(List<double> grades) {\n    List<String> result = [];\n    for (var g in grades) {\n        if (g == 4.0) {\n            result.add(\"A+\");\n        } else if (g > 3.7) {\n            result.add(\"A\");\n        } else if (g > 3.3) {\n            result.add(\"A-\");\n        } else if (g > 3.0) {\n            result.add(\"B+\");\n        } else if (g > 2.7) {\n            result.add(\"B\");\n        } else if (g > 2.3) {\n            result.add(\"B-\");\n        } else if (g > 2.0) {\n            result.add(\"C+\");\n        } else if (g > 1.7) {\n            result.add(\"C\");\n        } else if (g > 1.3) {\n            result.add(\"C-\");\n        } else if (g > 1.0) {\n            result.add(\"D+\");\n        } else if (g > 0.7) {\n            result.add(\"D\");\n        } else if (g > 0.0) {\n            result.add(\"D-\");\n        } else {\n            result.add(\"E\");\n        }\n    }\n    return result;\n}\n",
            "bool primeLength(String s) {\n    int length = s.length;\n    if (length < 2) return false;\n    for (int i = 2; i <= length ~/ i; i++) {\n        if (length % i == 0) return false;\n    }\n    return true;\n}\n",
            "int startsOneEnds(int n) {\n    if (n == 1) {\n        return 1;\n    }\n    return 2 * 9 * (10 ** (n - 2));\n}\n",
            "String solve(int n) {\n    int digitsSum = n.toString().split('').map((e) => int.parse(e)).reduce((a, b) => a + b);\n    return digitsSum.toRadixString(2);\n}\n",
            "int add(List<int> lst) {\n  return lst.asMap().entries.where((entry) => entry.key.isOdd && entry.value.isEven).map((entry) => entry.value).fold(0, (a, b) => a + b);\n}\n",
            "String antiShuffle(String s) {\n    return s.split(\" \").map((word) => word.codeUnits.toList()..sort().join()).join(\" \");\n}\n",
            "List<List<int>> getRow(List<List<int>> lst, int x) {\n    List<List<int>> coords = [];\n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                coords.add([i, j]);\n            }\n        }\n    }\n    coords.sort((a, b) => a[0] != b[0] ? a[0] - b[0] : b[1] - a[1]);\n    return coords;\n}\n",
            "List<int> sortArray(List<int> arr) {\n    if (arr.isEmpty) return [];\n    if ((arr.first + arr.last) % 2 == 0) return arr.toSet().toList()..sort((a, b) => b - a);\n    return arr.toSet().toList()..sort();\n}\n",
            "String encrypt(String s) {\n    List<String> result = [];\n    for (int i = 0; i < s.length; i++) {\n        int ch = s.codeUnitAt(i);\n        int shifted = ch + 4;\n        if (shifted > 'z'.codeUnitAt(0)) {\n            shifted -= 26;\n        }\n        result.add(String.fromCharCode(shifted));\n    }\n    return result.join(\"\");\n}\n",
            "int? nextSmallest(List<int> lst) {\n    var sl = lst.toSet().toList()..sort();\n    if (sl.length < 2) {\n        return null;\n    }\n    return sl[1];\n}\n",
            "int isBored(String s) {\n  List<String> sentences = s.split(RegExp(r'(?<=[.!?])\\s*'));\n  return sentences.where((sentence) => sentence.startsWith(\"I \") && sentence.length >= 2).length;\n}\n",
            "bool anyInt(Object x, Object y, Object z) {\n  if (x is int && y is int && z is int) {\n    return (x + y == z) || (x + z == y) || (y + z == x);\n  }\n  return false;\n}\n",
            "String encode(String message) {\n    String vowels = \"aeiouAEIOU\";\n    List<String> result = [];\n    for (int i = 0; i < message.length; i++) {\n        String ch = message[i];\n        if (RegExp(r'[a-zA-Z]').hasMatch(ch)) {\n            String ch1 = ch == ch.toUpperCase() ? ch.toLowerCase() : ch.toUpperCase();\n            if (vowels.contains(ch1)) {\n                ch1 = String.fromCharCode(ch1.codeUnitAt(0) + 2);\n            }\n            result.add(ch1);\n        } else {\n            result.add(ch);\n        }\n    }\n    return result.join(\"\");\n}\n",
            "bool is_prime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i <= sqrt(n).toInt() + 1; i++) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nint skjkasdkd(List<int> lst) {\n    List<int> primes = lst.where((n) => is_prime(n)).toList();\n    if (primes.isEmpty) return 0;\n    String largest = primes.reduce(max).toString();\n    return largest.split('').map(int.parse).reduce((a, b) => a + b);\n}\n",
            "bool checkDictCase(Map<String, String> d) {\n    if (d.isEmpty) {\n        return false;\n    }\n    bool allLower = d.keys.every((c) => c.toLowerCase() == c);\n    bool allUpper = d.keys.every((c) => c.toUpperCase() == c);\n    return allLower || allUpper;\n}\n",
            "List<int> countUpTo(int n) {\n    List<int> primes = [];\n    for (int num = 2; num < n; num++) {\n        if (primes.every((p) => num % p != 0)) {\n            primes.add(num);\n        }\n    }\n    return primes;\n}\n",
            "int multiply(int a, int b) {\n    return (a.abs() % 10) * (b.abs() % 10);\n}\n",
            "int countUpper(String s) {\n  String vowels = \"AEIOU\";\n  int count = 0;\n  for (int i = 0; i < s.length; i++) {\n    if (i % 2 == 0 && vowels.contains(s[i])) {\n      count++;\n    }\n  }\n  return count;\n}\n",
            "int closestInteger(String value) {\n    var num = double.parse(value);\n    if (num >= 0) {\n        return (num + 0.5).toInt();\n    } else {\n        return (num - 0.5).toInt();\n    }\n}\n",
            "List<int> makeAPile(int n) {\n  return List.generate(n, (i) => n + 2 * i);\n}\n",
            "List<String> wordsString(String s) {\n  return s.split(RegExp(r'[,\\s]+')).where((element) => element.isNotEmpty).toList();\n}\n",
            "int chooseNum(int x, int y) {\n  if (x > y) return -1;\n  if (y % 2 == 0) return y;\n  if (x != y) return y - 1;\n  return -1;\n}\n",
            "String? roundedAvg(int n, int m) {\n    if (n > m) return null;\n    double r_avg = ((m + n) / 2.0).roundToDouble();\n    return r_avg.toRadixString(2);\n}\n",
            "List<int> uniqueDigits(List<int> x) {\n  bool allDigitsOdd(String s) {\n    return s.split('').every((digit) => int.parse(digit) % 2 != 0);\n  }\n\n  return x.where((num) => allDigitsOdd(num.toString())).toList()..sort();\n}\n",
            "List<String> byLength(List<int> arr) {\n  List<String> digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  List<int> sortedArr = arr.where((x) => x >= 1 && x <= 9).toList()..sort((a, b) => b - a);\n  return sortedArr.map((x) => digitNames[x - 1]).toList();\n}\n",
            "List<int> f(int n) {\n  List<int> nums = List.generate(n, (index) => index + 1);\n  return List.generate(n, (i) {\n    i++;\n    if (i % 2 != 0) {\n      return nums.take(i).reduce((a, b) => a + b);\n    } else {\n      return nums.take(i).fold(1, (product, element) => product * element);\n    }\n  });\n}\n",
            "List<int> evenOddPalindrome(int n) {\n    List<int> cnt = [0, 0];\n    for (int i = 1; i <= n; i++) {\n        if (i.toString() == i.toString().split('').reversed.join()) {\n            cnt[i % 2]++;\n        }\n    }\n    return cnt;\n}\n",
            "int countNums(List<int> arr) {\n  return arr.where((n) => digitsSum(n) > 0).length;\n}\n\nint digitsSum(int n) {\n  String nStr = n.toString();\n  if (n >= 0) {\n    return nStr.split('').map((char) => int.parse(char)).reduce((a, b) => a + b);\n  } else {\n    return (int.parse(nStr.substring(0, 2)) * 2) + digitsSum(n.abs());\n  }\n}\n",
            "bool moveOneBall(List<int> arr) {\n    if (arr.isEmpty) {\n        return true;\n    }\n    List<int> sortedArr = List.from(arr)..sort();\n    for (int i = 0; i < arr.length; i++) {\n        if (arr.sublist(i) == sortedArr.sublist(0, arr.length - i) &&\n            arr.sublist(0, i) == sortedArr.sublist(arr.length - i)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "String canExchange(List<int> lst1, List<int> lst2) {\n    int oddCnt = lst1.where((num) => num % 2 != 0).length;\n    int evenCnt = lst2.where((num) => num % 2 == 0).length;\n    return evenCnt >= oddCnt ? \"YES\" : \"NO\";\n}\n",
            "Map<String, int> histogram(String test) {\n    Map<String, int> freq = {};\n    List<String> words = test.split(\" \").where((w) => w.isNotEmpty).toList();\n    for (String w in words) {\n        freq[w] = (freq[w] ?? 0) + 1;\n    }\n    Map<String, int> result = {};\n    if (freq.isNotEmpty) {\n        int maxFreq = freq.values.reduce((a, b) => a > b ? a : b);\n        for (MapEntry<String, int> entry in freq.entries) {\n            if (entry.value == maxFreq) {\n                result[entry.key] = entry.value;\n            }\n        }\n    }\n    return result;\n}\n",
            "List<String> reverseDelete(String s, String c) {\n  String s1 = s.split('').where((ch) => !c.contains(ch)).join('');\n  return [s1, s1 == s1.split('').reversed.join('') ? \"yes\" : \"no\"];\n}\n",
            "List<String> oddCount(List<String> lst) {\n    List<String> result = [];\n    for (var num in lst) {\n        int n = num.split('').where((d) => d.codeUnitAt(0) % 2 == 1).length;\n        String rs = \"the number of odd elements in the string i of the input.\";\n        result.add(rs.replaceAll(\"i\", n.toString()));\n    }\n    return result;\n}\n",
            "int minSubArraySum(List<int> nums) {\n    int min_sum = 0;\n    int cur_sum = 0;\n    for (int n in nums) {\n        cur_sum = [cur_sum + n, 0].reduce((a, b) => a < b ? a : b);\n        min_sum = [cur_sum, min_sum].reduce((a, b) => a < b ? a : b);\n    }\n    if (min_sum == 0) {\n        min_sum = nums.reduce((a, b) => a < b ? a : b);\n    }\n    return min_sum;\n}\n",
            "int maxFill(List<List<int>> grid, int capacity) {\n  return grid.map((arr) => (arr.reduce((a, b) => a + b) / capacity).ceil()).sum;\n}\n",
            "List<int> sortArray(List<int> arr) {\n  int countOnes(int num) {\n    return num.toRadixString(2).split('0').join('').length;\n  }\n\n  arr.sort((a, b) {\n    int onesA = countOnes(a);\n    int onesB = countOnes(b);\n    if (onesA == onesB) {\n      return a.compareTo(b);\n    }\n    return onesA.compareTo(onesB);\n  });\n\n  return arr;\n}\n",
            "List<String> selectWords(String s, int n) {\n  String consonants = \"bcdfghjklmnpqrstvwxyz\";\n  List<String> words = s.split(\" \").where((w) => w.length > 0).toList();\n  return words.where((w) => w.toLowerCase().split('').count((c) => consonants.contains(c)) == n).toList();\n}\n",
            "String getClosestVowel(String word) {\n    String vowels = \"aeiouAEIOU\";\n    for (int i = word.length - 2; i > 0; i--) {\n        if (vowels.contains(word[i]) && !vowels.contains(word[i - 1]) && !vowels.contains(word[i + 1])) {\n            return word[i];\n        }\n    }\n    return \"\";\n}\n",
            "bool check(String s) {\n  int depth = 0;\n  for (var ch in s.runes) {\n    if (s[ch] == '(') {\n      depth += 1;\n    } else {\n      depth -= 1;\n    }\n    if (depth < 0) {\n      return false;\n    }\n  }\n  return depth == 0;\n}\n\nString matchParens(List<String> lst) {\n  String s1 = lst[0] + lst[1];\n  String s2 = lst[1] + lst[0];\n  return check(s1) || check(s2) ? \"Yes\" : \"No\";\n}\n",
            "List<int> maximum(List<int> arr, int k) {\n    if (k == 0) {\n        return [];\n    }\n    List<int> sortedArr = List.from(arr);\n    sortedArr.sort();\n    return sortedArr.sublist(sortedArr.length - k);\n}\n",
            "int solution(List<int> lst) {\n  return lst.asMap().entries.where((entry) => entry.key % 2 == 0 && entry.value % 2 != 0).map((entry) => entry.value).reduce((a, b) => a + b, 0);\n}\n",
            "int addElements(List<int> arr, int k) {\n  return arr.sublist(0, k).where((n) => n.toString().length <= 2).fold(0, (a, b) => a + b);\n}\n",
            "List<int> getOddCollatz(int n) {\n    List<int> collatz = [1];\n    while (n != 1) {\n        if (n % 2 != 0) {\n            collatz.add(n);\n            n = 3 * n + 1;\n        } else {\n            n = n ~/ 2;\n        }\n    }\n    return collatz..sort();\n}\n",
            "bool validDate(String date) {\n    if (date.length != 10 || date[2] != '-' || date[5] != '-') {\n        return false;\n    }\n    int m = int.parse(date.substring(0, 2));\n    int d = int.parse(date.substring(3, 5));\n    if ([1, 3, 5, 7, 8, 10, 12].contains(m) && d >= 1 && d <= 31) {\n        return true;\n    }\n    if ([4, 6, 9, 11].contains(m) && d >= 1 && d <= 30) {\n        return true;\n    }\n    if (m == 2 && d >= 1 && d <= 29) {\n        return true;\n    }\n    return false;\n}\n",
            "List<String> splitWords(String txt) {\n    if (txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if (txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = txt.codeUnits.where((c) => c >= 'a'.codeUnitAt(0) && c <= 'z'.codeUnitAt(0) && c % 2 == 0).length;\n        return [count.toString()];\n    }\n}\n",
            "bool isSorted(List<int> lst) {\n    if (!lst.every((element, index) => index == 0 || element >= lst[index - 1])) {\n        return false;\n    }\n    Map<int, int> freq = {};\n    for (int i in lst) {\n        freq[i] = (freq[i] ?? 0) + 1;\n    }\n    return freq.values.reduce((a, b) => a > b ? a : b) <= 2;\n}\n",
            "bool isPrime(int n) {\n  if (n < 2) return false;\n  for (int i = 2; i <= sqrt(n); i++) {\n    if (n % i == 0) return false;\n  }\n  return true;\n}\n\nString intersection(List<int> interval1, List<int> interval2) {\n  int l = max(interval1[0], interval2[0]);\n  int r = min(interval1[1], interval2[1]);\n  int length = r - l;\n  return (length > 0 && isPrime(length)) ? \"YES\" : \"NO\";\n}\n",
            "int? prodSigns(List<int> arr) {\n    return null if arr.isEmpty;\n    return 0 if arr.contains(0);\n    int sign = arr.where((n) => n < 0).length % 2 == 1 ? -1 : 1;\n    return sign * arr.map((n) => n.abs).reduce((a, b) => a + b);\n}\n",
            "List<int> minPath(List<List<int>> grid, int k) {\n  int n = grid.length;\n  int minVal = n * n + 1;\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < n; j++) {\n      if (grid[i][j] == 1) {\n        List<int> temp = [];\n        if (i != 0) temp.add(grid[i - 1][j]);\n        if (j != 0) temp.add(grid[i][j - 1]);\n        if (i != n - 1) temp.add(grid[i + 1][j]);\n        if (j != n - 1) temp.add(grid[i][j + 1]);\n        minVal = [minVal, ...temp].reduce((a, b) => a < b ? a : b);\n      }\n    }\n  }\n  List<int> result = [];\n  for (int i = 0; i < k; i++) {\n    result.add(i % 2 == 0 ? 1 : minVal);\n  }\n  return result;\n}\n",
            "List<int> tri(int n) {\n    if (n == 0) {\n        return [1];\n    }\n    List<double> seq = [1, 3];\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0) {\n            seq.add(i / 2 + 1);\n        } else {\n            seq.add(seq[i - 1] + seq[i - 2] + (i + 3) / 2);\n        }\n    }\n    return seq.map((x) => x.toInt()).toList();\n}\n",
            "int digits(int n) {\n  List<int> odds = n.toString().split('').map((e) => int.parse(e)).where((d) => d % 2 != 0).toList();\n  return odds.isNotEmpty ? odds.reduce((a, b) => a * b) : 0;\n}\n",
            "bool isNested(String s) {\n    List<int> openIdx = [];\n    List<int> closeIdx = [];\n    \n    for (int i = 0; i < s.length; i++) {\n        if (s[i] == '[') {\n            openIdx.add(i);\n        } else if (s[i] == ']') {\n            closeIdx.add(i);\n        }\n    }\n    \n    closeIdx.reverse();\n    int cnt = 0;\n    int l = closeIdx.length;\n    int i = 0;\n    \n    for (int idx in openIdx) {\n        if (i < l && idx < closeIdx[i]) {\n            cnt++;\n            i++;\n        }\n    }\n    \n    return cnt >= 2;\n}\n",
            "int sumSquares(List<double> lst) {\n    return lst.map((n) => (n.ceil() * n.ceil())).reduce((a, b) => a + b);\n}\n",
            "bool checkIfLastCharIsALetter(String txt) {\n    if (txt.isEmpty) {\n        return false;\n    }\n    String last = txt.substring(txt.lastIndexOf(' ') + 1);\n    return last.length == 1 && last[0].isLetter;\n}\n",
            "int canArrange(List<int> arr) {\n    if (arr.length <= 1) return -1;\n    List<int> idx = [];\n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i] < arr[i - 1]) {\n            idx.add(i);\n        }\n    }\n    return idx.isEmpty ? -1 : idx.reduce((a, b) => a > b ? a : b);\n}\n",
            "List<int?> largestSmallestIntegers(List<int> lst) {\n    List<int> neg = lst.where((i) => i < 0).toList();\n    List<int> pos = lst.where((i) => i > 0).toList();\n    int? maxNeg = (neg.isNotEmpty ? neg.reduce(max) : null);\n    int? minPos = (pos.isNotEmpty ? pos.reduce(min) : null);\n    return [maxNeg, minPos];\n}\n",
            "double? compareOne(Object a, Object b) {\n    double anyToReal(o) {\n        if (o is String) {\n            return double.parse(o.replaceAll(',', '.'));\n        } else if (o is int) {\n            return o.toDouble();\n        } else if (o is double) {\n            return o;\n        } else {\n            throw ArgumentError(\"Type Error\");\n        }\n    }\n\n    double a1 = anyToReal(a);\n    double b1 = anyToReal(b);\n    if (a1 == b1) {\n        return null;\n    } else if (a1 > b1) {\n        return a1;\n    } else {\n        return b1;\n    }\n}\n",
            "bool isEqualToSumEven(int n) {\n    return n % 2 == 0 && n >= 8;\n}\n",
            "int specialFactorial(int n) {\n  int fact = 1;\n  int result = 1;\n  for (int i = 1; i <= n; i++) {\n    fact *= i;\n    result *= fact;\n  }\n  return result;\n}\n",
            "String fixSpaces(String txt) {\n  return txt.replaceAllMapped(RegExp(r'\\s{3,}'), (Match m) => '-').replaceAll(' ', '_');\n}\n",
            "String fileNameCheck(String fileName) {\n    List<String> suf = [\"txt\", \"exe\", \"dll\"];\n    List<String> lst = fileName.split(\".\");\n    if (lst.length != 2 || !suf.contains(lst[1]) || lst[0].isEmpty || !RegExp(r'^[a-zA-Z]').hasMatch(lst[0][0]) || lst[0].where((x) => RegExp(r'\\d').hasMatch(x)).length > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n",
            "int sumSquares(List<int> lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            result += lst[i] * lst[i];\n        } else if (i % 4 == 0) {\n            result += lst[i] * lst[i] * lst[i];\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "bool isPrime(int n) {\n  if (n < 2) return false;\n  for (int i = 2; i <= sqrt(n); i++) {\n    if (n % i == 0) return false;\n  }\n  return true;\n}\n\nString wordsInSentence(String sentence) {\n  List<String> words = sentence.split(\" \");\n  List<String> filteredWords = words.where((w) => isPrime(w.length)).toList();\n  return filteredWords.join(\" \");\n}\n",
            "bool simplify(String x, String n) {\n    List<String> xs = x.split(\"/\");\n    List<String> ns = n.split(\"/\");\n    int num = int.parse(xs[0]) * int.parse(ns[0]);\n    int den = int.parse(xs[1]) * int.parse(ns[1]);\n    return num % den == 0;\n}\n",
            "int digitsSum(int n) {\n  String nStr = n.toString();\n  if (n >= 0) {\n    return nStr.split('').map((char) => int.parse(char)).reduce((a, b) => a + b);\n  } else {\n    int twoDigitPart = int.parse(nStr.substring(0, 2));\n    return twoDigitPart * 2 + digitsSum(n.abs());\n  }\n}\n\nList<int> orderByPoints(List<int> nums) {\n  return nums.toList()..sort((a, b) => digitsSum(a).compareTo(digitsSum(b)));\n}\n",
            "int specialFilter(List<int> nums) {\n  String odds = \"13579\";\n  return nums.where((n) => n > 10 && n.isOdd && odds.contains(n.toString()[0])).length;\n}\n",
            "int getMaxTriples(int n) {\n    List<int> c = [0, 0, 0];\n    for (int i = 1; i <= n; i++) {\n        int a = i * i - i + 1;\n        c[a % 3]++;\n    }\n    return (c[0] * c[1] * c[2]) + ((c[0] * (c[0] - 1) * (c[0] - 2)) ~/ 6) +\n           ((c[1] * (c[1] - 1) * (c[1] - 2)) ~/ 6) +\n           ((c[2] * (c[2] - 1) * (c[2] - 2)) ~/ 6);\n}\n",
            "List<String> bf(String planet1, String planet2) {\n    List<String> names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if (!names.contains(planet1) || !names.contains(planet2)) {\n        return [];\n    }\n    \n    int l = names.indexOf(planet1);\n    int r = names.indexOf(planet2);\n    \n    if (l > r) {\n        int temp = l;\n        l = r;\n        r = temp;\n    }\n    \n    if (l == r) {\n        return [];\n    }\n    \n    return names.sublist(l + 1, r);\n}\n",
            "List<String> sortedListSum(List<String> lst) {\n    List<String> result = lst.where((s) => s.length % 2 == 0).toList();\n    result.sort((a, b) => a.length.compareTo(b.length) != 0 ? a.length.compareTo(b.length) : a.compareTo(b));\n    return result;\n}\n",
            "int xOrY(int n, int x, int y) {\n  if (n < 2) return y;\n  for (int i = 2; i <= sqrt(n).toInt(); i++) {\n    if (n % i == 0) return y;\n  }\n  return x;\n}\n",
            "int doubleTheDifference(List<double> lst) {\n  return lst.where((n) => n >= 0 && n % 2 == 1).map((n) => n * n).reduce((a, b) => a + b, 0);\n}\n",
            "List<int> compare(List<int> game, List<int> guess) {\n  return game.asMap().entries.map((entry) => (game[entry.key] - guess[entry.key]).abs()).toList();\n}\n",
            "String strongestExtension(String className, List<String> extensions) {\n    int maxS = -1;\n    String maxExt = \"\";\n    for (var ext in extensions) {\n        int upper = 0;\n        int lower = 0;\n        for (var c in ext.codeUnits) {\n            if (c >= 'A'.codeUnitAt(0) && c <= 'Z'.codeUnitAt(0)) {\n                upper++;\n            } else if (c >= 'a'.codeUnitAt(0) && c <= 'z'.codeUnitAt(0)) {\n                lower++;\n            }\n        }\n        int s = upper - lower;\n        if (s > maxS) {\n            maxS = s;\n            maxExt = ext;\n        }\n    }\n    return \"$className.$maxExt\";\n}\n",
            "bool cycpatternCheck(String a, String b) {\n    if (a.length < b.length) {\n        return false;\n    }\n    for (int i = 0; i < b.length; i++) {\n        if ('${b.substring(i)}${b.substring(0, i)}' in a) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "List<int> evenOddCount(int num) {\n    String ds = num.abs().toString();\n    int even = ds.codeUnits.where((u) => u % 2 == 0).length;\n    return [even, ds.length - even];\n}\n",
            "String intToMiniRoman(int num) {\n    List<int> values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    List<String> numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    List<String> res = [];\n    for (int i = 0; i < values.length; i++) {\n        while (num >= values[i]) {\n            res.add(numerals[i]);\n            num -= values[i];\n        }\n    }\n    return res.join(\"\");\n}\n",
            "bool rightAngleTriangle(int a, int b, int c) {\n    List<int> sides = [a, b, c];\n    sides.sort();\n    return (sides[0] * sides[0] + sides[1] * sides[1]) == (sides[2] * sides[2]);\n}\n",
            "String findMax(List<String> words) {\n    int maxCnt = 0;\n    String maxW = \"\";\n    for (String w in words) {\n        int cnt = w.split('').toSet().length;\n        if (cnt > maxCnt) {\n            maxCnt = cnt;\n            maxW = w;\n        } else if (cnt == maxCnt) {\n            maxW = [maxW, w].reduce((a, b) => a.compareTo(b) < 0 ? a : b);\n        }\n    }\n    return maxW;\n}\n",
            "List<int> eat(int num, int need, int remaining) {\n  if (need <= remaining) {\n    return [num + need, remaining - need];\n  } else {\n    return [num + remaining, 0];\n  }\n}\n",
            "int doAlgebra(List<String> operators, List<int> operands) {\n  List<String> ops = List.from(operators);\n  List<int> nums = List.from(operands);\n  int i = ops.length - 1;\n  while (i >= 0) {\n    if (ops[i] == \"**\") {\n      nums[i] = pow(nums[i], nums[i + 1]) as int;\n      nums.removeAt(i + 1);\n      ops.removeAt(i);\n    }\n    i -= 1;\n  }\n  i = 0;\n  while (i < ops.length) {\n    if (ops[i] == \"*\") {\n      nums[i] = nums[i] * nums[i + 1];\n      nums.removeAt(i + 1);\n      ops.removeAt(i);\n      i -= 1;\n    } else if (ops[i] == \"//\") {\n      nums[i] = nums[i] ~/ nums[i + 1];\n      nums.removeAt(i + 1);\n      ops.removeAt(i);\n      i -= 1;\n    }\n    i += 1;\n  }\n  i = 0;\n  while (i < ops.length) {\n    if (ops[i] == \"+\") {\n      nums[i] = nums[i] + nums[i + 1];\n      nums.removeAt(i + 1);\n      ops.removeAt(i);\n      i -= 1;\n    } else if (ops[i] == \"-\") {\n      nums[i] = nums[i] - nums[i + 1];\n      nums.removeAt(i + 1);\n      ops.removeAt(i);\n      i -= 1;\n    }\n    i += 1;\n  }\n  return nums[0];\n}\n",
            "String solve(String s) {\n  if (!s.contains(RegExp(r'[a-zA-Z]'))) {\n    return s.split('').reversed.join('');\n  }\n\n  List<String> result = [];\n  for (int i = 0; i < s.length; i++) {\n    String ch = s[i];\n    if (!ch.contains(RegExp(r'[a-zA-Z]'))) {\n      result.add(ch);\n    } else if (RegExp(r'[A-Z]').hasMatch(ch)) {\n      result.add(ch.toLowerCase());\n    } else if (RegExp(r'[a-z]').hasMatch(ch)) {\n      result.add(ch.toUpperCase());\n    }\n  }\n\n  return result.join('');\n}\n",
            "String? stringToMd5(String txt) {\n  if (txt.isEmpty) return null;\n  var md5 = md5 ??= crypto.md5;\n  var bytes = utf8.encode(txt);\n  var digest = md5.convert(bytes).toString();\n  return digest;\n}\n",
            "List<int> generateIntegers(int a, int b) {\n  int lower = [2, [a, b].reduce(min)].reduce(max);\n  int upper = [8, [a, b].reduce(max)].reduce(min);\n  return List.generate(upper - lower + 1, (i) => i + lower).where((i) => i.isEven).toList();\n}\n"
        ],
        "javascript": [
            "/**\n * @param {Array<number>} numbers\n * @param {number} threshold\n * @returns {boolean}\n */\nexport const hasCloseElements = (numbers, threshold) => {\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param {string} parenString\n * @returns {Array<string>}\n */\nexport const separateParenGroups = (parenString) => {\n    const groups = [];\n    const stk = [];\n    let currentGroup = \"\";\n    const parens = parenString.replace(/ /g, \"\");\n    for (const ch of parens) {\n        if (ch === \"(\") {\n            stk.push(ch);\n            currentGroup += ch;\n        } else if (ch === \")\") {\n            stk.pop();\n            currentGroup += ch;\n            if (stk.length === 0) {\n                groups.push(currentGroup);\n                currentGroup = \"\";\n            }\n        }\n    }\n    return groups;\n}\n",
            "/**\n * @param {number} num\n * @returns {number}\n */\nexport const truncateNumber = (num) => {\n    return num - Math.floor(num);\n}\n",
            "/**\n * @param {Array<number>} operations\n * @returns {boolean}\n */\nexport const belowZero = (operations) => {\n    let balance = 0;\n    for (let op of operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param {Array<number>} numbers\n * @returns {number}\n */\nexport const meanAbsoluteDeviation = (numbers) => {\n    const mean = numbers.reduce((sum, num) => sum + num, 0) / numbers.length;\n    const deviation = numbers.reduce((sum, num) => sum + Math.abs(num - mean), 0);\n    return deviation / numbers.length;\n}\n",
            "/**\n * @param {Array<number>} numbers\n * @param {number} delimiter\n * @returns {Array<number>}\n */\nexport const intersperse = (numbers, delimiter) => {\n    const result = [];\n    numbers.forEach((number, i) => {\n        if (i !== 0) {\n            result.push(delimiter);\n        }\n        result.push(number);\n    });\n    return result;\n}\n",
            "/**\n * @param {string} parenString\n * @returns {Array<number>}\n */\nexport const parseNestedParens = (parenString) => {\n    const result = [];\n    const parenGroups = parenString.split(' ');\n\n    parenGroups.forEach((group) => {\n        let maxDepth = 0;\n        let depth = 0;\n\n        group.split('').forEach((ch) => {\n            if (ch === '(') {\n                depth += 1;\n                maxDepth = Math.max(maxDepth, depth);\n            } else if (ch === ')') {\n                depth -= 1;\n            }\n        });\n\n        result.push(maxDepth);\n    });\n\n    return result;\n}\n",
            "/**\n * @param {Array<string>} strs\n * @param {string} substring\n * @returns {Array<string>}\n */\nexport const filterBySubstring = (strs, substring) => {\n  return strs.filter(s => s.includes(substring));\n}\n",
            "export const sumProduct = (numbers) => {\n  const n_sum = numbers.reduce((acc, curr) => acc + curr, 0);\n  const n_product = numbers.reduce((acc, curr) => acc * curr, 1);\n  return [n_sum, n_product];\n}\n",
            "/**\n * @param {Array<number>} numbers\n * @returns {Array<number>}\n */\nexport const rollingMax = (numbers) => {\n    let maxSoFar = -Infinity;\n    const result = [];\n    numbers.forEach(num => {\n        maxSoFar = Math.max(maxSoFar, num);\n        result.push(maxSoFar);\n    });\n    return result;\n}\n",
            "/**\n * @param {string} s\n * @returns {string}\n */\nexport const makePalindrome = (s) => {\n    if (s === s.split('').reverse().join('')) return s;\n    for (let i = 0; i < s.length; i++) {\n        if (s.substring(i) === s.substring(i).split('').reverse().join('')) {\n            return s + s.substring(0, i).split('').reverse().join('');\n        }\n    }\n    return \"\";\n}\n",
            "/**\n * @param {string} a\n * @param {string} b\n * @returns {string}\n */\nexport const stringXor = (a, b) => {\n    return Array.from(a).map((x, i) => x === b[i] ? \"0\" : \"1\").join(\"\");\n}\n",
            "/**\n * @param {Array<string>} strs\n * @returns {?string}\n */\nexport const longest = (strs) => {\n    if (strs.length === 0) return null;\n    let longestS = strs[0];\n    for (let s of strs) {\n        if (s.length > longestS.length) {\n            longestS = s;\n        }\n    }\n    return longestS;\n}\n",
            "/**\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */\nexport const greatestCommonDivisor = (a, b) => {\n    if (b === 0) {\n        return a;\n    } else {\n        return greatestCommonDivisor(b, a % b);\n    }\n}\n",
            "/**\n * @param {string} s\n * @returns {Array<string>}\n */\nexport const allPrefixes = (s) => {\n    const prefixes = [];\n    for (let i = 0; i < s.length; i++) {\n        prefixes.push(s.substring(0, i + 1));\n    }\n    return prefixes;\n}\n",
            "/**\n * @param {number} n\n * @returns {string}\n */\nexport const stringSequence = (n) => {\n    return Array.from({ length: n + 1 }, (_, i) => i.toString()).join(\" \");\n};\n",
            "/**\n * @param {string} s\n * @returns {number}\n */\nexport const countDistinctCharacters = (s) => {\n    return new Set(s.toLowerCase()).size;\n}\n",
            "/**\n * @param {string} musicString\n * @returns {Array<number>}\n */\nexport const parseMusic = (musicString) => {\n    const durations = { \"o\": 4, \"o|\": 2, \".|\": 1 };\n    const notes = musicString.split(\" \");\n    return notes.map(note => durations[note] || null);\n}\n",
            "/**\n * @param {string} s\n * @param {string} substring\n * @returns {number}\n */\nexport const howManyTimes = (s, substring) => {\n    let times = 0;\n    for (let i = 0; i <= s.length - substring.length; i++) {\n        if (s.substring(i, i + substring.length) === substring) {\n            times += 1;\n        }\n    }\n    return times;\n}\n",
            "/**\n * @param {string} numbers\n * @returns {string}\n */\nexport const sortNumbers = (numbers) => {\n  const numDict = {\n    \"zero\": 0,\n    \"one\": 1,\n    \"two\": 2,\n    \"three\": 3,\n    \"four\": 4,\n    \"five\": 5,\n    \"six\": 6,\n    \"seven\": 7,\n    \"eight\": 8,\n    \"nine\": 9\n  };\n  const numList = numbers.split(\" \").filter(x => x in numDict);\n  const sortedList = numList.sort((a, b) => numDict[a] - numDict[b]);\n  return sortedList.join(\" \");\n}\n",
            "/**\n * @param {Array<number>} numbers\n * @returns {Array<number>}\n */\nexport const findClosestElements = (numbers) => {\n    const sortedNumbers = numbers.slice().sort((a, b) => a - b);\n    let minDiff = Infinity;\n    let closestPair = [];\n    \n    for (let i = 1; i < sortedNumbers.length; i++) {\n        const diff = sortedNumbers[i] - sortedNumbers[i - 1];\n        if (diff < minDiff) {\n            minDiff = diff;\n            closestPair = [sortedNumbers[i - 1], sortedNumbers[i]];\n        }\n    }\n    \n    return closestPair;\n}\n",
            "/**\n * @param {Array<number>} numbers\n * @returns {Array<number>}\n */\nexport const rescaleToUnit = (numbers) => {\n    const minNum = Math.min(...numbers);\n    const maxNum = Math.max(...numbers);\n    if (minNum === maxNum) {\n        return Array(numbers.length).fill(0.0);\n    } else {\n        return numbers.map(num => (num - minNum) / (maxNum - minNum));\n    }\n}\n",
            "/**\n * @param {Array<*>} values\n * @returns {Array<number>}\n */\nexport const filterIntegers = (values) => {\n  return values.filter(x => Number.isInteger(x));\n}\n",
            "/**\n * @param {string} s\n * @returns {number}\n */\nexport const strLength = (s) => {\n  return s.length;\n}\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const largestDivisor = (n) => {\n    for (let i = 2; i < n; i++) {\n        if (n % i === 0) {\n            return n / i;\n        }\n    }\n    return 1;\n}\n",
            "/**\n * @param {number} n\n * @returns {Array<number>}\n */\nexport const factorize = (n) => {\n    let factors = [];\n    let divisor = 2;\n    while (divisor <= n) {\n        if (n % divisor === 0) {\n            factors.push(divisor);\n            n /= divisor;\n        } else {\n            divisor += 1;\n        }\n    }\n    return factors;\n}\n",
            "/**\n * @param {Array<number>} numbers\n * @returns {Array<number>}\n */\nexport const removeDuplicates = (numbers) => {\n    const counts = {};\n    numbers.forEach(num => {\n        counts[num] = (counts[num] || 0) + 1;\n    });\n    const res = numbers.filter(num => counts[num] === 1);\n    return res;\n}\n",
            "/**\n * @param {string} s\n * @returns {string}\n */\nexport const flipCase = (s) => {\n    let flipped = [];\n    for (let ch of s) {\n        if (!/[a-zA-Z]/.test(ch)) {\n            flipped.push(ch);\n        } else if (ch === ch.toLowerCase()) {\n            flipped.push(ch.toUpperCase());\n        } else {\n            flipped.push(ch.toLowerCase());\n        }\n    }\n    return flipped.join('');\n}\n",
            "/**\n * @param {Array<string>} strs\n * @returns {string}\n */\nexport const concatenate = (strs) => {\n    return strs.join(\"\");\n}\n",
            "/**\n * @param {Array<string>} strs\n * @param {string} prefixStr\n * @returns {Array<string>}\n */\nexport const filterByPrefix = (strs, prefixStr) => {\n    return strs.filter(s => s.startsWith(prefixStr));\n}\n",
            "/**\n * @param {Array<number>} l\n * @returns {Array<number>}\n */\nexport const getPositive = (l) => {\n  return l.filter(num => num > 0);\n}\n",
            "/**\n * @param {number} n\n * @returns {boolean}\n */\nexport const isPrime = (n) => {\n    if (n < 2) return false;\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) return false;\n    }\n    return true;\n}\n",
            "/**\n * @param {Array<number>} xs\n * @param {number} x\n * @returns {number}\n */\nexport const poly = (xs, x) => {\n    let res = 0.0;\n    for (let i = 0; i < xs.length; i++) {\n        res += xs[i] * Math.pow(x, i);\n    }\n    return res;\n}\n\n/**\n * @param {Array<number>} xs\n * @returns {number}\n */\nexport const findZero = (xs) => {\n    let x1 = 1.0, x2 = -1.0;\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2;\n        x2 *= 2;\n    }\n    while (Math.abs(x1 - x2) > 1e-10) {\n        let mid = (x1 + x2) / 2.0;\n        if (poly(xs, mid) === 0) {\n            return mid;\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2.0;\n}\n",
            "/**\n * @param {Array<number>} l\n * @returns {Array<number>}\n */\nexport const sortThird = (l) => {\n    const sortedThird = l.filter((_, i) => i % 3 === 0).sort((a, b) => a - b);\n    return l.map((x, i) => i % 3 === 0 ? sortedThird[i / 3] : x);\n}\n",
            "/**\n * @param {Array<number>} l\n * @returns {Array<number>}\n */\nexport const listUnique = (l) => {\n    return [...new Set(l)].sort((a, b) => a - b);\n}",
            "export const maxElement = (l) => {\n    return 0 if l.length === 0;\n    return Math.max(...l);\n}\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const fizzBuzz = (n) => {\n    let cnt = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            cnt += i.toString().split('7').length - 1;\n        }\n    }\n    return cnt;\n};\n",
            "/**\n * @param {Array<number>} l\n * @returns {Array<number>}\n */\nexport const sortEven = (l) => {\n  const sortedEven = l.filter((_, i) => i % 2 === 0).sort((a, b) => a - b);\n  return l.map((x, i) => i % 2 === 0 ? sortedEven[i / 2] : x);\n}\n",
            "/**\n * @param {string} s\n * @returns {string}\n */\nexport const encodeCyclic = (s) => {\n    let result = [];\n    for (let i = 0; i < s.length; i += 3) {\n        if (i + 3 > s.length) {\n            result.push(s.substring(i));\n        } else {\n            result.push(s.substring(i + 1, i + 3));\n            result.push(s[i]);\n        }\n    }\n    return result.join(\"\");\n}\n\n/**\n * @param {string} s\n * @returns {string}\n */\nexport const decodeCyclic = (s) => {\n    return encodeCyclic(encodeCyclic(s));\n}\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const primeFib = (n) => {\n    if (n < 2) return false;\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n        if (n % i === 0) return false;\n    }\n    return true;\n}\n\n/**\n * @param {number} n\n * @returns {number}\n */\nexport const primeFib = (n) => {\n    let f = [0, 1];\n    let cnt = 0;\n    while (cnt < n) {\n        f = [f[1], f[0] + f[1]];\n        if (primeFib(f[1])) {\n            cnt += 1;\n        }\n    }\n    return f[1];\n}\n",
            "/**\n * @param {Array<number>} l\n * @returns {boolean}\n */\nexport const triplesSumToZero = (l) => {\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            for (let k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] === 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const carRaceCollision = (n) => {\n  return n ** 2;\n};\n",
            "/**\n * @param {Array<number>} l\n * @returns {Array<number>}\n */\nexport const incrList = (l) => {\n    return l.map(i => i + 1);\n}\n",
            "/**\n * @param {Array<number>} l\n * @returns {boolean}\n */\nexport const pairsSumToZero = (l) => {\n  const seen = new Set();\n  for (const num of l) {\n    if (seen.has(-num)) {\n      return true;\n    }\n    seen.add(num);\n  }\n  return false;\n};\n",
            "/**\n * @param {number} x\n * @param {number} bas\n * @returns {string}\n */\nexport const changeBase = (x, bas) => {\n    if (x === 0) return \"0\";\n    let digits = [];\n    while (x > 0) {\n        digits.push((x % bas).toString());\n        x = Math.floor(x / bas);\n    }\n    return digits.reverse().join('');\n}\n",
            "/**\n * @param {number} a\n * @param {number} h\n * @returns {number}\n */\nexport const triangleArea = (a, h) => {\n    return a * h / 2;\n}\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const fib4 = (n) => {\n  let fib = [0, 0, 2, 0];\n  for (let i = 4; i <= n; i++) {\n    fib[i % 4] = fib.reduce((acc, val) => acc + val, 0);\n  }\n  return fib[n % 4];\n}\n",
            "/**\n * @param {Array<number>} l\n * @returns {number}\n */\nexport const median = (l) => {\n    const sl = [...l].sort((a, b) => a - b);\n    if (l.length % 2 !== 0) {\n        return sl[Math.floor(l.length / 2)];\n    } else {\n        return (sl[l.length / 2] + sl[l.length / 2 - 1]) / 2.0;\n    }\n}\n",
            "/**\n * @param {string} txt\n * @returns {boolean}\n */\nexport const isPalindrome = (txt) => {\n    return txt === txt.split('').reverse().join('');\n}\n",
            "/**\n * @param {number} n\n * @param {number} p\n * @returns {number}\n */\nexport const modp = (n, p) => {\n    let ret = 1;\n    for (let i = 0; i < n; i++) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}\n",
            "```typescript\n/**\n * @param {string} s\n * @returns {string}\n */\nexport const encodeShift = (s) => {\n    return s.split('').map(ch => String.fromCharCode(((ch.charCodeAt(0) - 97 + 5) % 26) + 97))).join('');\n}\n\n/**\n * @param {string} s\n * @returns {string}\n */\nexport const decodeShift = (s) => {\n    return s.split('').map(ch => String.fromCharCode(((ch.charCodeAt(0) - 97 + 21) % 26) + 97))).join('');\n}\n```",
            "/**\n * @param {string} txt\n * @returns {string}\n */\nexport const removeVowels = (txt) => {\n    const vowels = \"aeiouAEIOU\";\n    return Array.from(txt).filter(char => !vowels.includes(char)).join('');\n}\n",
            "/**\n * @param {Array<number>} l\n * @param {number} t\n * @returns {boolean}\n */\nexport const belowThreshold = (l, t) => {\n  return l.every(x => x < t);\n};\n",
            "/**\n * @param {number} x\n * @param {number} y\n * @returns {number}\n */\nexport const add = (x, y) => {\n    return x + y;\n};\n",
            "/**\n * @param {string} s0\n * @param {string} s1\n * @returns {boolean}\n */\nexport const sameChars = (s0, s1) => {\n    return new Set(s0) == new Set(s1);\n}\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const fib = (n) => {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n};\n",
            "```js\n/**\n * @param {string} brackets\n * @returns {boolean}\n */\nexport const correctBracketing = (brackets) => {\n  let depth = 0;\n  for (let i = 0; i < brackets.length; i++) {\n    const b = brackets[i];\n    if (b === \"<\") {\n      depth += 1;\n    } else if (b === \">\") {\n      depth -= 1;\n    }\n    if (depth < 0) {\n      return false;\n    }\n  }\n  return depth === 0;\n};\n```",
            "/**\n * @param {Array<number>} l\n * @returns {boolean}\n */\nexport const monotonic = (l) => {\n    const diff = l.map((_, i) => i > 0 ? l[i] - l[i - 1] : 0);\n    return diff.every(x => x <= 0) || diff.every(x => x >= 0);\n}\n",
            "/**\n * @param {Array<number>} l1\n * @param {Array<number>} l2\n * @returns {Array<number>}\n */\nexport const common = (l1, l2) => {\n  return [...new Set(l1.filter(item => l2.includes(item)))].sort((a, b) => a - b);\n}\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const largestPrimeFactor = (n) => {\n    let i = 2;\n    while (i * i <= n) {\n        if (n % i !== 0) {\n            i += 1;\n        } else {\n            n /= i;\n        }\n    }\n    return n;\n};\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const sumToN = (n) => {\n  return ((n + 1) * n) / 2;\n}\n",
            "/**\n * @param {string} brackets\n * @returns {boolean}\n */\nexport const correctBracketing = (brackets) => {\n    let depth = 0;\n    for (let b of brackets) {\n        if (b === \"(\") {\n            depth += 1;\n        } else if (b === \")\") {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n",
            "/**\n * @param {Array<number>} xs\n * @returns {Array<number>}\n */\nexport const derivative = (xs) => {\n    return Array.from({ length: xs.length - 1 }, (_, i) => xs[i + 1] * (i + 1));\n}\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const fibfib = (n) => {\n    if (n <= 1) return 0;\n    let a = 0, b = 0, c = 1;\n    while (n > 2) {\n        [a, b, c] = [b, c, a + b + c];\n        n -= 1;\n    }\n    return c;\n}\n",
            "/**\n * @param {string} s\n * @returns {number}\n */\nexport const vowelsCount = (s) => {\n    const vowels = \"aeiou\";\n    let cnt = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (vowels.includes(s[i].toLowerCase()) || (i === s.length - 1 && s[i].toLowerCase() === \"y\")) {\n            cnt += 1;\n        }\n    }\n    return cnt;\n}",
            "/**\n * @param {number} x\n * @param {number} shift\n * @returns {string}\n */\nexport const circularShift = (x, shift) => {\n    let x_str = x.toString();\n    if (shift > x_str.length) {\n        return x_str.split('').reverse().join('');\n    } else {\n        return x_str.slice(-shift) + x_str.slice(0, -shift);\n    }\n}\n",
            "/**\n * @param {string} s\n * @returns {number}\n */\nexport const digitSum = (s) => {\n    return Array.from(s).filter(c => /[A-Z]/.test(c)).map(c => c.charCodeAt(0)).reduce((a, b) => a + b, 0);\n}\n",
            "/**\n * @param {string} s\n * @param {number} n\n * @returns {number}\n */\nexport const fruitDistribution = (s, n) => {\n  const words = s.split(' ');\n  const applesIndex = words.indexOf(\"apples\");\n  const orangesIndex = words.indexOf(\"oranges\");\n  const apples = parseInt(words[applesIndex - 1], 10);\n  const oranges = parseInt(words[orangesIndex - 1], 10);\n  return n - apples - oranges;\n}\n",
            "```typescript\n/**\n * @param {Array<number>} arr\n * @returns {Array<number>}\n */\nexport const pluck = (arr) => {\n  const evens = arr.filter(n => n % 2 === 0);\n  if (evens.length === 0) return [];\n  \n  const minEven = Math.min(...evens);\n  return [minEven, arr.indexOf(minEven)];\n}\n```",
            "/**\n * @param {Array<number>} lst\n * @returns {number}\n */\nexport const search = (lst) => {\n    const freqs = new Map();\n    lst.forEach(n => {\n        freqs.set(n, (freqs.get(n) || 0) + 1);\n    });\n    const goodVals = Array.from(freqs.entries()).filter(([k, v]) => v >= k).map(([k, v]) => k);\n    return goodVals.length > 0 ? Math.max(...goodVals) : -1;\n}\n",
            "/**\n * @param {Array<number>} lst\n * @returns {Array<number>}\n */\nexport const strangeSortList = (lst) => {\n    let sl = [...lst].sort((a, b) => a - b);\n    let result = [];\n    let left = 0, right = sl.length - 1;\n    while (left <= right) {\n        result.push(sl[left]);\n        left += 1;\n        if (left <= right) {\n            result.push(sl[right]);\n            right -= 1;\n        }\n    }\n    return result;\n}\n",
            "/**\n * @param {number} a\n * @param {number} b\n * @param {number} c\n * @returns {number}\n */\nexport const triangleArea = (a, b, c) => {\n    if (a + b > c && a + c > b && b + c > a) {\n        const s = (a + b + c) / 2.0;\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "/**\n * @param {Array<number>} q\n * @param {number} w\n * @returns {boolean}\n */\nexport const willItFly = (q, w) => {\n    if (q.length === 0) return false;\n    \n    const isPali = q.every((e, index) => e === q[q.length - index - 1]);\n    const total = q.reduce((acc, curr) => acc + curr, 0);\n    \n    return isPali && total <= w;\n}\n",
            "/**\n * @param {Array<number>} arr\n * @returns {number}\n */\nexport const smallestChange = (arr) => {\n    let ans = 0;\n    for (let i = 0; i < Math.floor(arr.length / 2); i++) {\n        if (arr[i] !== arr[arr.length - i - 1]) {\n            ans += 1;\n        }\n    }\n    return ans;\n}\n",
            "/**\n * @param {Array<string>} lst1\n * @param {Array<string>} lst2\n * @returns {Array<string>}\n */\nexport const totalMatch = (lst1, lst2) => {\n    const cnt1 = lst1.reduce((acc, str) => acc + str.length, 0);\n    const cnt2 = lst2.reduce((acc, str) => acc + str.length, 0);\n    return cnt1 <= cnt2 ? lst1 : lst2;\n}\n",
            "/** * @param {number} a * @returns {boolean} */ export const isPrime = (n) => { if (n < 2) return false; for (let i = 2; i <= Math.sqrt(n); i++) { if (n % i === 0) return false; } return true; }; export const isMultiplyPrime = (a) => { let cnt = 0; for (let i = 2; i <= a; i++) { if (isPrime(i)) { while (a % i === 0) { cnt += 1; a /= i; } } } return cnt === 3; };",
            "/**\n * @param {number} x\n * @param {number} n\n * @returns {boolean}\n */\nexport const isSimplePower = (x, n) => {\n  if (n < 2) {\n    return x === n;\n  }\n  let tmp = 1;\n  while (tmp < x) {\n    tmp *= n;\n  }\n  return tmp === x;\n}\n",
            "/**\n * @param {number} a\n * @returns {boolean}\n */\nexport const isCube = (a) => {\n    a = Math.abs(a);\n    let root = Math.round(Math.pow(a, 1.0 / 3.0));\n    return root * root * root === a;\n}\n",
            "/**\n * @param {string} num\n * @returns {number}\n */\nexport const hexKey = (num) => {\n    return [...num].filter(char => \"2357BD\".includes(char)).length;\n}\n",
            "/**\n * @param {number} dec\n * @returns {string}\n */\nexport const decimalToBinary = (dec) => {\n  const binary = dec.toString(2);\n  return `db${binary}db`;\n}\n",
            "/**\n * @param {string} s\n * @returns {boolean}\n */\nexport const isHappy = (s) => {\n    if (s.length < 3) return false;\n    for (let i = 0; i <= s.length - 3; i++) {\n        if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "/**\n * @param {Array<number>} grades\n * @returns {Array<string>}\n */\nexport const numericalLetterGrade = (grades) => {\n    let result = [];\n    grades.forEach((g) => {\n        if (g === 4.0) {\n            result.push(\"A+\");\n        } else if (g > 3.7) {\n            result.push(\"A\");\n        } else if (g > 3.3) {\n            result.push(\"A-\");\n        } else if (g > 3.0) {\n            result.push(\"B+\");\n        } else if (g > 2.7) {\n            result.push(\"B\");\n        } else if (g > 2.3) {\n            result.push(\"B-\");\n        } else if (g > 2.0) {\n            result.push(\"C+\");\n        } else if (g > 1.7) {\n            result.push(\"C\");\n        } else if (g > 1.3) {\n            result.push(\"C-\");\n        } else if (g > 1.0) {\n            result.push(\"D+\");\n        } else if (g > 0.7) {\n            result.push(\"D\");\n        } else if (g > 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    });\n    return result;\n}\n",
            "/**\n * @param {string} s\n * @returns {boolean}\n */\nexport const primeLength = (s) => {\n    const length = s.length;\n    if (length < 2) return false;\n    for (let i = 2; i <= Math.sqrt(length); i++) {\n        if (length % i === 0) return false;\n    }\n    return true;\n}\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const startsOneEnds = (n) => {\n    if (n === 1) {\n        return 1;\n    }\n    return 2 * 9 * Math.pow(10, n - 2);\n};\n",
            "/**\n * @param {number} n\n * @returns {string}\n */\nexport const solve = (n) => {\n    const digitsSum = Array.from(n.toString()).reduce((sum, digit) => sum + parseInt(digit), 0);\n    return digitsSum.toString(2);\n};\n",
            "/**\n * @param {Array<number>} lst\n * @returns {number}\n */\nexport const add = (lst) => {\n  return lst.reduce((acc, x, i) => {\n    return (i % 2 !== 0 && x % 2 === 0) ? acc + x : acc;\n  }, 0);\n}\n",
            "/**\n * @param {string} s\n * @returns {string}\n */\nexport const antiShuffle = (s) => {\n    return s.split(\" \").map(word => word.split(\"\").sort().join(\"\")).join(\" \");\n};\n",
            "/**\n * @param {Array<Array<number>>} lst\n * @param {number} x\n * @returns {Array<Array<number>>}\n */\nexport const getRow = (lst, x) => {\n    let coords = [];\n    lst.forEach((row, i) => {\n        row.forEach((value, j) => {\n            if (value === x) {\n                coords.push([i, j]);\n            }\n        });\n    });\n    return coords.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n}\n",
            "/**\n * @param {Array<number>} arr\n * @returns {Array<number>}\n */\nexport const sortArray = (arr) => {\n    if (arr.length === 0) return [];\n    if ((arr[0] + arr[arr.length - 1]) % 2 === 0) return arr.slice().sort((a, b) => b - a);\n    return arr.slice().sort((a, b) => a - b);\n}\n",
            "/**\n * @param {string} s\n * @returns {string}\n */\nexport const encrypt = (s) => {\n    let result = '';\n    for (let ch of s) {\n        let shifted = ch.charCodeAt(0) + 4;\n        if (shifted > 'z'.charCodeAt(0)) {\n            shifted -= 26;\n        }\n        result += String.fromCharCode(shifted);\n    }\n    return result;\n}\n",
            "/**\n * @param {Array<number>} lst\n * @returns {?number}\n */\nexport const nextSmallest = (lst) => {\n    let sl = Array.from(new Set(lst)).sort((a, b) => a - b);\n    if (sl.length < 2) {\n        return null;\n    }\n    return sl[1];\n}\n",
            "/**\n * @param {string} s\n * @returns {number}\n */\nexport const isBored = (s) => {\n    const sentences = s.split(/(?<=[.!?])\\s*/);\n    return sentences.filter(sentence => sentence.startsWith(\"I \") && sentence.length >= 2).length;\n};\n",
            "/**\n * @param {*} x\n * @param {*} y\n * @param {*} z\n * @returns {boolean}\n */\nexport const anyInt = (x, y, z) => {\n  if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n    return x + y === z || x + z === y || y + z === x;\n  }\n  return false;\n};\n",
            "/**\n * @param {string} message\n * @returns {string}\n */\nexport const encode = (message) => {\n    const vowels = \"aeiouAEIOU\";\n    let result = \"\";\n    for (let ch of message) {\n        if (/[a-zA-Z]/.test(ch)) {\n            let ch1 = ch === ch.toLowerCase() ? ch.toUpperCase() : ch.toLowerCase();\n            if (vowels.includes(ch1)) {\n                ch1 = String.fromCharCode(ch1.charCodeAt(0) + 2);\n            }\n            result += ch1;\n        } else {\n            result += ch;\n        }\n    }\n    return result;\n}\n",
            "/**\n * @param {Array<number>} lst\n * @returns {number}\n */\nexport const skjkasdkd = (lst) => {\n    const is_prime = (n) => {\n        if (n < 2) return false;\n        for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n            if (n % i === 0) return false;\n        }\n        return true;\n    };\n\n    const primes = lst.filter(is_prime);\n    if (primes.length === 0) return 0;\n\n    const largest = Math.max(...primes).toString();\n    return largest.split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n};\n",
            "export const checkDictCase = (d) => {\n    if (d.size === 0) {\n        return false;\n    }\n    const allLower = [...d.keys()].every(c => c.isLowerCase());\n    const allUpper = [...d.keys()].every(c => c.isUpperCase());\n    return allLower || allUpper;\n}\n",
            "/**\n * @param {number} n\n * @returns {Array<number>}\n */\nexport const countUpTo = (n) => {\n    const primes = [];\n    for (let num = 2; num < n; num++) {\n        if (primes.every(p => num % p !== 0)) {\n            primes.push(num);\n        }\n    }\n    return primes;\n}\n",
            "/**\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */\nexport const multiply = (a, b) => {\n    return Math.abs(a % 10) * Math.abs(b % 10);\n}\n",
            "\n/**\n * @param {string} s\n * @returns {number}\n */\nexport const countUpper = (s) => {\n  const vowels = \"AEIOU\";\n  return Array.from(s).reduce((count, c, i) => {\n    if (i % 2 === 0 && vowels.includes(c)) {\n      count++;\n    }\n    return count;\n  }, 0);\n}\n\n",
            "/**\n * @param {string} value\n * @returns {number}\n */\nexport const closestInteger = (value) => {\n    const num = parseFloat(value);\n    if (num >= 0) {\n        return Math.floor(num + 0.5);\n    } else {\n        return Math.ceil(num - 0.5);\n    }\n}\n",
            "/**\n * @param {number} n\n * @returns {Array<number>}\n */\nexport const makeAPile = (n) => {\n  return Array.from({ length: n }, (_, i) => n + 2 * i);\n}\n",
            "/**\n * @param {string} s\n * @returns {Array<string>}\n */\nexport const wordsString = (s) => {\n  return s.split(/[, ]+/).filter(word => word !== '');\n}\n",
            "/**\n * @param {number} x\n * @param {number} y\n * @returns {number}\n */\nexport const chooseNum = (x, y) => {\n  if (x > y) return -1;\n  if (y % 2 === 0) return y;\n  if (x !== y) return y - 1;\n  return -1;\n}\n",
            "/**\n * @param {number} n\n * @param {number} m\n * @returns {?string}\n */\nexport const roundedAvg = (n, m) => {\n    return n > m ? null : ((m + n) / 2).toFixed(0).toString(2);\n}\n",
            "/**\n * @param {Array<number>} x\n * @returns {Array<number>}\n */\nexport const uniqueDigits = (x) => {\n  const allDigitsOdd = (s) => s.split('').every(digit => parseInt(digit, 10) % 2 !== 0);\n  return x.filter(num => allDigitsOdd(num.toString())).sort((a, b) => a - b);\n}\n",
            "/**\n * @param {Array<number>} arr\n * @returns {Array<string>}\n */\nexport const byLength = (arr) => {\n    const digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    const sortedArr = arr.filter(x => x >= 1 && x <= 9).sort((a, b) => b - a);\n    return sortedArr.map(x => digitNames[x - 1]);\n}\n",
            "/**\n * @param {number} n\n * @returns {Array<number>}\n */\nexport const f = (n) => {\n    const nums = Array.from({ length: n }, (_, i) => i + 1);\n    return nums.map((_, i) => {\n        if ((i + 1) % 2 === 1) {\n            return nums.slice(0, i + 1).reduce((acc, num) => acc + num, 0);\n        } else {\n            return nums.slice(0, i + 1).reduce((acc, num) => acc * num, 1);\n        }\n    });\n}\n",
            "/**\n * @param {number} n\n * @returns {Array<number>}\n */\nexport const evenOddPalindrome = (n) => {\n    let cnt = [0, 0];\n    for (let i = 1; i <= n; i++) {\n        if (i.toString() === i.toString().split('').reverse().join('')) {\n            cnt[i % 2]++;\n        }\n    }\n    return cnt;\n}\n",
            "/**\n * @param {Array<number>} arr\n * @returns {number}\n */\nexport const countNums = (arr) => {\n    return arr.filter(n => digitsSum(n) > 0).length;\n}\n\nconst digitsSum = (n) => {\n    const nStr = n.toString();\n    if (n >= 0) {\n        return nStr.split('').map(Number).reduce((acc, digit) => acc + digit, 0);\n    } else {\n        return (parseInt(nStr.substring(0, 2)) * 2) + digitsSum(Math.abs(n));\n    }\n}\n",
            "/**\n * @param {Array<number>} arr\n * @returns {boolean}\n */\nexport const moveOneBall = (arr) => {\n    if (arr.length === 0) {\n        return true;\n    }\n    const sortedArr = [...arr].sort((a, b) => a - b);\n    for (let i = 0; i < arr.length; i++) {\n        if (arr.slice(i).toString() === sortedArr.slice(0, arr.length - i).toString() && \n            arr.slice(0, i).toString() === sortedArr.slice(arr.length - i).toString()) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "export const canExchange = (lst1, lst2) => {\n    const odd_cnt = lst1.filter(num => num % 2 !== 0).length;\n    const even_cnt = lst2.filter(num => num % 2 === 0).length;\n    return even_cnt >= odd_cnt ? \"YES\" : \"NO\";\n}\n",
            "/**\n * @param {string} test\n * @returns {Map<string, number>}\n */\nexport const histogram = (test) => {\n    const freq = new Map();\n    const words = test.split(\" \").filter(w => w !== \"\");\n    words.forEach(w => {\n        freq.set(w, (freq.get(w) || 0) + 1);\n    });\n    const result = new Map();\n    if (freq.size > 0) {\n        const maxFreq = Math.max(...freq.values());\n        freq.forEach((v, k) => {\n            if (v === maxFreq) {\n                result.set(k, v);\n            }\n        });\n    }\n    return result;\n}\n",
            "/**\n * @param {string} s\n * @param {string} c\n * @returns {Array<string>}\n */\nexport const reverseDelete = (s, c) => {\n  const s1 = s.split('').filter(ch => !c.includes(ch)).join('');\n  return [s1, s1 === s1.split('').reverse().join('') ? 'yes' : 'no'];\n}\n",
            "/**\n * @param {Array<string>} lst\n * @returns {Array<string>}\n */\nexport const oddCount = (lst) => {\n    const result = [];\n    lst.forEach(num => {\n        let n = [...num].filter(d => d.charCodeAt(0) % 2 === 1).length;\n        let rs = \"the number of odd elements in the string i of the input.\";\n        result.push(rs.replace(\"i\", n.toString()));\n    });\n    return result;\n}\n",
            "export const minSubArraySum = (nums) => {\n    let min_sum = 0;\n    let cur_sum = 0;\n    nums.forEach(n => {\n        cur_sum = Math.min(cur_sum + n, 0);\n        min_sum = Math.min(cur_sum, min_sum);\n    });\n    if (min_sum === 0) {\n        min_sum = Math.min(...nums);\n    }\n    return min_sum;\n}\n",
            "/**\n * @param {Array<Array<number>>} grid\n * @param {number} capacity\n * @returns {number}\n */\nexport const maxFill = (grid, capacity) => {\n    return grid.reduce((sum, arr) => sum + Math.ceil(arr.reduce((acc, num) => acc + num, 0) / capacity), 0);\n}",
            "/**\n * @param {Array<number>} arr\n * @returns {Array<number>}\n */\nexport const sortArray = (arr) => {\n  const countOnes = (num) => num.toString(2).split('0').join('').length;\n  return arr.sort((a, b) => {\n    const onesA = countOnes(a);\n    const onesB = countOnes(b);\n    if (onesA === onesB) {\n      return a - b;\n    }\n    return onesA - onesB;\n  });\n}\n",
            "/**\n * @param {string} s\n * @param {number} n\n * @returns {Array<string>}\n */\nexport const selectWords = (s, n) => {\n  const consonants = \"bcdfghjklmnpqrstvwxyz\";\n  const words = s.split(\" \").filter(w => w.length > 0);\n  return words.filter(w => \n    w.toLowerCase().split('').filter(c => consonants.includes(c)).length === n\n  );\n}\n",
            "/**\n * @param {string} word\n * @returns {string}\n */\nexport const getClosestVowel = (word) => {\n    const vowels = \"aeiouAEIOU\";\n    for (let i = word.length - 2; i >= 1; i--) {\n        if (vowels.includes(word[i]) && !vowels.includes(word[i - 1]) && !vowels.includes(word[i + 1])) {\n            return word[i];\n        }\n    }\n    return \"\";\n}\n",
            "/**\n * @param {Array<string>} lst\n * @returns {string}\n */\nexport const matchParens = (lst) => {\n    const check = (s) => {\n        let depth = 0;\n        for (let ch of s) {\n            if (ch === \"(\") {\n                depth += 1;\n            } else {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth === 0;\n    };\n\n    const s1 = lst[0] + lst[1];\n    const s2 = lst[1] + lst[0];\n    return check(s1) || check(s2) ? \"Yes\" : \"No\";\n};\n",
            "/**\n * @param {Array<number>} arr\n * @param {number} k\n * @returns {Array<number>}\n */\nexport const maximum = (arr, k) => {\n    if (k === 0) {\n        return [];\n    }\n    return arr.sort((a, b) => a - b).slice(-k);\n}\n",
            "/**\n * @param {Array<number>} lst\n * @returns {number}\n */\nexport const solution = (lst) => {\n  return lst.filter((x, i) => i % 2 === 0 && x % 2 !== 0).reduce((sum, x) => sum + x, 0);\n}\n",
            "/**\n * @param {Array<number>} arr\n * @param {number} k\n * @returns {number}\n */\nexport const addElements = (arr, k) => {\n  return arr.slice(0, k).filter(n => n.toString().length <= 2).reduce((sum, n) => sum + n, 0);\n}\n",
            "/**\n * @param {number} n\n * @returns {Array<number>}\n */\nexport const getOddCollatz = (n) => {\n    let collatz = [1];\n    while (n !== 1) {\n        if (n % 2 !== 0) {\n            collatz.push(n);\n            n = 3 * n + 1;\n        } else {\n            n = n / 2;\n        }\n    }\n    return collatz.sort((a, b) => a - b);\n}\n",
            "/**\n * @param {string} date\n * @returns {boolean}\n */\nexport const validDate = (date) => {\n    if (date.length !== 10 || date[2] !== '-' || date[5] !== '-') {\n        return false;\n    }\n    const m = parseInt(date.slice(0, 2), 10);\n    const d = parseInt(date.slice(3, 5), 10);\n    if ([1, 3, 5, 7, 8, 10, 12].includes(m) && d >= 1 && d <= 31) {\n        return true;\n    }\n    if ([4, 6, 9, 11].includes(m) && d >= 1 && d <= 30) {\n        return true;\n    }\n    if (m === 2 && d >= 1 && d <= 29) {\n        return true;\n    }\n    return false;\n}\n",
            "/**\n * @param {string} txt\n * @returns {Array<string>}\n */\nexport const splitWords = (txt) => {\n    if (txt.includes(\" \")) {\n        return txt.split(\" \");\n    } else if (txt.includes(\",\")) {\n        return txt.split(\",\");\n    } else {\n        const count = Array.from(txt).reduce((acc, c) => {\n            return acc + (/[a-z]/.test(c) && c.charCodeAt(0) % 2 === 0 ? 1 : 0);\n        }, 0);\n        return [count.toString()];\n    }\n}\n",
            "/**\n * @param {Array<number>} lst\n * @returns {boolean}\n */\nexport const isSorted = (lst) => {\n    if (!lst.every((_, i) => i === 0 || lst[i - 1] <= lst[i])) {\n        return false;\n    }\n    const freq = {};\n    for (let i of lst) {\n        freq[i] = (freq[i] || 0) + 1;\n    }\n    return Math.max(...Object.values(freq), 0) <= 2;\n}\n",
            "/**\n * @param {Array<number>} interval1\n * @param {Array<number>} interval2\n * @returns {string}\n */\nexport const intersection = (interval1, interval2) => {\n    const isPrime = (n) => {\n        if (n < 2) return false;\n        for (let i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i === 0) return false;\n        }\n        return true;\n    };\n\n    const l = Math.max(interval1[0], interval2[0]);\n    const r = Math.min(interval1[1], interval2[1]);\n    const length = r - l;\n\n    return length > 0 && isPrime(length) ? \"YES\" : \"NO\";\n}\n",
            "```js\n\n/**\n * @param {Array<number>} arr\n * @returns {?number}\n */\nexport const prodSigns = (arr) => {\n    if (arr.length === 0) return null;\n    if (arr.includes(0)) return 0;\n    const sign = arr.filter(n => n < 0).length % 2 === 1 ? -1 : 1;\n    return sign * arr.reduce((acc, n) => acc + Math.abs(n), 0);\n}\n```",
            "/**\n * @param {Array<Array<number>>} grid\n * @param {number} k\n * @returns {Array<number>}\n */\nexport const minPath = (grid, k) => {\n  const n = grid.length;\n  let minVal = n * n + 1;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (grid[i][j] === 1) {\n        const temp = [];\n        if (i !== 0) temp.push(grid[i - 1][j]);\n        if (j !== 0) temp.push(grid[i][j - 1]);\n        if (i !== n - 1) temp.push(grid[i + 1][j]);\n        if (j !== n - 1) temp.push(grid[i][j + 1]);\n        minVal = Math.min(minVal, ...temp);\n      }\n    }\n  }\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(i % 2 === 0 ? 1 : minVal);\n  }\n  return result;\n}\n",
            "/**\n * @param {number} n\n * @returns {Array<number>}\n */\nexport const tri = (n) => {\n    if (n === 0) {\n        return [1];\n    }\n    let seq = [1, 3];\n    for (let i = 2; i <= n; i++) {\n        if (i % 2 === 0) {\n            seq.push(i / 2 + 1);\n        } else {\n            seq.push(seq[i - 1] + seq[i - 2] + (i + 3) / 2);\n        }\n    }\n    return seq;\n}\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const digits = (n) => {\n  const odds = Array.from(String(n), Number).filter(d => d % 2 !== 0);\n  return odds.length > 0 ? odds.reduce((a, b) => a * b, 1) : 0;\n};\n",
            "/**\n * @param {string} s\n * @returns {boolean}\n */\nexport const isNested = (s) => {\n    let openIdx = [];\n    let closeIdx = [];\n\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === '[') {\n            openIdx.push(i);\n        } else if (s[i] === ']') {\n            closeIdx.push(i);\n        }\n    }\n\n    closeIdx.reverse();\n    let cnt = 0;\n    const l = closeIdx.length;\n    let i = 0;\n\n    for (let idx of openIdx) {\n        if (i < l && idx < closeIdx[i]) {\n            cnt += 1;\n            i += 1;\n        }\n    }\n\n    return cnt >= 2;\n}\n",
            "/**\n * @param {Array<number>} lst\n * @returns {number}\n */\nexport const sumSquares = (lst) => {\n    return lst.map(n => Math.ceil(n) ** 2).reduce((acc, curr) => acc + curr, 0);\n};\n",
            "/**\n * @param {string} txt\n * @returns {boolean}\n */\nexport const checkIfLastCharIsALetter = (txt) => {\n    if (!txt.trim()) {\n        return false;\n    }\n    const lastWord = txt.split(' ').pop();\n    return lastWord.length === 1 && /^[a-zA-Z]$/.test(lastWord);\n}\n",
            "/**\n * @param {Array<number>} arr\n * @returns {number}\n */\nexport const canArrange = (arr) => {\n    if (arr.length <= 1) return -1;\n    const idx = [];\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] < arr[i - 1]) {\n            idx.push(i);\n        }\n    }\n    return idx.length === 0 ? -1 : Math.max(...idx);\n}\n",
            "/**\n * @param {Array<number>} lst\n * @returns {Array<?number>}\n */\nexport const largestSmallestIntegers = (lst) => {\n    const neg = lst.filter(i => i < 0);\n    const pos = lst.filter(i => i > 0);\n    const maxNeg = (neg.length > 0 ? Math.max(...neg) : null);\n    const minPos = (pos.length > 0 ? Math.min(...pos) : null);\n    return [maxNeg, minPos];\n}\n",
            "/**\n * @param {*} a\n * @param {*} b\n * @returns {?number}\n */\nexport const compareOne = (a, b) => {\n    const anyToReal = (o) => {\n        if (typeof o === 'string') {\n            return parseFloat(o.replace(',', '.'));\n        } else if (typeof o === 'number') {\n            return o;\n        } else {\n            throw new Error('Type Error');\n        }\n    };\n\n    const a1 = anyToReal(a);\n    const b1 = anyToReal(b);\n\n    if (a1 === b1) {\n        return null;\n    } else if (a1 > b1) {\n        return a1;\n    } else {\n        return b1;\n    }\n};\n",
            "/**\n * @param {number} n\n * @returns {boolean}\n */\nexport const isEqualToSumEven = (n) => {\n    return n % 2 === 0 && n >= 8;\n}\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const specialFactorial = (n) => {\n    let fact = 1;\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n        fact *= i;\n        result *= fact;\n    }\n    return result;\n}\n",
            "/**\n * @param {string} txt\n * @returns {string}\n */\nexport const fixSpaces = (txt) => {\n    return txt.replace(/\\s{3,}/g, '-').replace(/ /g, '_');\n}\n",
            "/**\n * @param {string} fileName\n * @returns {string}\n */\nexport const fileNameCheck = (fileName) => {\n    const suf = [\"txt\", \"exe\", \"dll\"];\n    const lst = fileName.split(\".\");\n    if (lst.length !== 2 || !suf.includes(lst[1]) || lst[0].length === 0 || !lst[0][0].match(/[a-zA-Z]/) || [...lst[0]].filter(x => x.match(/\\d/)).length > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n",
            "/**\n * @param {Array<number>} lst\n * @returns {number}\n */\nexport const sumSquares = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            result += lst[i] ** 2;\n        } else if (i % 4 === 0) {\n            result += lst[i] ** 3;\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "/**\n * @param {string} sentence\n * @returns {string}\n */\nexport const wordsInSentence = (sentence) => {\n  const isPrime = (n) => {\n    if (n < 2) return false;\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) return false;\n    }\n    return true;\n  };\n\n  const words = sentence.split(\" \");\n  const filteredWords = words.filter((w) => isPrime(w.length));\n  return filteredWords.join(\" \");\n}\n",
            "/**\n * @param {string} x\n * @param {string} n\n * @returns {boolean}\n */\nexport const simplify = (x, n) => {\n    const xs = x.split(\"/\");\n    const ns = n.split(\"/\");\n    const num = parseInt(xs[0], 10) * parseInt(ns[0], 10);\n    const den = parseInt(xs[1], 10) * parseInt(ns[1], 10);\n    return num % den === 0;\n}\n",
            "/**\n * @param {Array<number>} nums\n * @returns {Array<number>}\n */\nexport const orderByPoints = (nums) => {\n    const digitsSum = (n) => {\n        const nStr = Math.abs(n).toString();\n        if (n >= 0) {\n            return nStr.split('').map(Number).reduce((acc, digit) => acc + digit, 0);\n        } else {\n            const twoDigitPart = parseInt(nStr.substring(0, 2));\n            return (twoDigitPart * 2) + digitsSum(Math.abs(n));\n        }\n    };\n\n    return nums.sort((a, b) => digitsSum(a) - digitsSum(b));\n}\n",
            "/**\n * @param {Array<number>} nums\n * @returns {number}\n */\nexport const specialFilter = (nums) => {\n  const odds = \"13579\";\n  return nums.filter(n => n > 10 && n % 2 !== 0 && odds.includes(n.toString()[0])).length;\n}\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const getMaxTriples = (n) => {\n    let c = [0, 0, 0];\n    for (let i = 1; i <= n; i++) {\n        let a = i * i - i + 1;\n        c[a % 3] += 1;\n    }\n    return c[0] * c[1] * c[2] + ((c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6);\n}\n",
            "/**\n * @param {string} planet1\n * @param {string} planet2\n * @returns {Array<string>}\n */\nexport const bf = (planet1, planet2) => {\n    const names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if (!names.includes(planet1) || !names.includes(planet2)) {\n        return [];\n    }\n    \n    let l = names.indexOf(planet1);\n    let r = names.indexOf(planet2);\n    \n    if (l > r) {\n        [l, r] = [r, l];\n    }\n    \n    if (l === r) {\n        return [];\n    }\n    \n    return names.slice(l + 1, r);\n}\n",
            "/**\n * @param {Array<string>} lst\n * @returns {Array<string>}\n */\nexport const sortedListSum = (lst) => {\n    return lst.filter(s => s.length % 2 === 0)\n              .sort((a, b) => a.length - b.length || a.localeCompare(b));\n}\n",
            "/**\n * @param {number} n\n * @param {number} x\n * @param {number} y\n * @returns {number}\n */\nexport const xOrY = (n, x, y) => {\n  if (n < 2) return y;\n  for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n    if (n % i === 0) return y;\n  }\n  return x;\n}\n",
            "/**\n * @param {Array<number>} lst\n * @returns {number}\n */\nexport const doubleTheDifference = (lst) => {\n    return lst.reduce((acc, n) => (n >= 0 && n % 2 === 1 ? acc + n * n : acc), 0);\n}\n",
            "/**\n * @param {Array<number>} game\n * @param {Array<number>} guess\n * @returns {Array<number>}\n */\nexport const compare = (game, guess) => {\n  return game.map((x, index) => Math.abs(x - guess[index]));\n}\n",
            "/**\n * @param {string} className\n * @param {Array<string>} extensions\n * @returns {string}\n */\nexport const strongestExtension = (className, extensions) => {\n    let max_s = -Infinity;\n    let max_ext = \"\";\n    for (let ext of extensions) {\n        let upper = ext.split('').filter(c => c.isUpperCase()).length;\n        let lower = ext.split('').filter(c => c.isLowerCase()).length;\n        let s = upper - lower;\n        if (s > max_s) {\n            max_s = s;\n            max_ext = ext;\n        }\n    }\n    return `${className}.${max_ext}`;\n}\n",
            "/**\n * @param {string} a\n * @param {string} b\n * @returns {boolean}\n */\nexport const cycpatternCheck = (a, b) => {\n    if (a.length < b.length) {\n        return false;\n    }\n    for (let i = 0; i < b.length; i++) {\n        const rotatedB = b.slice(i) + b.slice(0, i);\n        if (a.includes(rotatedB)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param {number} num\n * @returns {Array<number>}\n */\nexport const evenOddCount = (num) => {\n    const ds = Math.abs(num).toString();\n    let even = 0;\n    for (let i = 0; i < ds.length; i++) {\n        if (parseInt(ds[i]) % 2 === 0) {\n            even++;\n        }\n    }\n    return [even, ds.length - even];\n}\n",
            "/**\n * @param {number} num\n * @returns {string}\n */\nexport const intToMiniRoman = (num) => {\n    const values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    const numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    let res = [];\n    for (let i = 0; i < values.length; i++) {\n        while (num >= values[i]) {\n            res.push(numerals[i]);\n            num -= values[i];\n        }\n    }\n    return res.join(\"\");\n}\n",
            "export const rightAngleTriangle = (a, b, c) => {\n    const s = [a, b, c].sort((x, y) => x - y);\n    return s[0] * s[0] + s[1] * s[1] === s[2] * s[2];\n}\n",
            "/**\n * @param {Array<string>} words\n * @returns {string}\n */\nexport const findMax = (words) => {\n    let maxCnt = 0;\n    let maxW = \"\";\n    words.forEach((w) => {\n        const cnt = new Set(w).size;\n        if (cnt > maxCnt) {\n            maxCnt = cnt;\n            maxW = w;\n        } else if (cnt === maxCnt) {\n            maxW = [maxW, w].sort()[0];\n        }\n    });\n    return maxW;\n}\n",
            "/**\n * @param {number} num\n * @param {number} need\n * @param {number} remaining\n * @returns {Array<number>}\n */\nexport const eat = (num, need, remaining) => {\n  if (need <= remaining) {\n    return [num + need, remaining - need];\n  } else {\n    return [num + remaining, 0];\n  }\n}\n",
            "/**\n * @param {Array<string>} operators\n * @param {Array<number>} operands\n * @returns {number}\n */\nexport const doAlgebra = (operators, operands) => {\n  let ops = [...operators];\n  let nums = [...operands];\n  let i = ops.length - 1;\n  while (i >= 0) {\n    if (ops[i] === \"**\") {\n      nums[i] = Math.pow(nums[i], nums[i + 1]);\n      nums.splice(i + 1, 1);\n      ops.splice(i, 1);\n    }\n    i -= 1;\n  }\n  i = 0;\n  while (i < ops.length) {\n    if (ops[i] === \"*\") {\n      nums[i] = nums[i] * nums[i + 1];\n      nums.splice(i + 1, 1);\n      ops.splice(i, 1);\n      i -= 1;\n    } else if (ops[i] === \"//\") {\n      nums[i] = nums[i] / nums[i + 1];\n      nums.splice(i + 1, 1);\n      ops.splice(i, 1);\n      i -= 1;\n    }\n    i += 1;\n  }\n  i = 0;\n  while (i < ops.length) {\n    if (ops[i] === \"+\") {\n      nums[i] = nums[i] + nums[i + 1];\n      nums.splice(i + 1, 1);\n      ops.splice(i, 1);\n      i -= 1;\n    } else if (ops[i] === \"-\") {\n      nums[i] = nums[i] - nums[i + 1];\n      nums.splice(i + 1, 1);\n      ops.splice(i, 1);\n      i -= 1;\n    }\n    i += 1;\n  }\n  return nums[0];\n}\n",
            "export const solve = (s) => {\n    if (!/[a-zA-Z]/.test(s)) {\n        return s.split('').reverse().join('');\n    }\n\n    let result = [];\n    for (let ch of s) {\n        if (!/[a-zA-Z]/.test(ch)) {\n            result.push(ch);\n        } else if (ch === ch.toUpperCase()) {\n            result.push(ch.toLowerCase());\n        } else if (ch === ch.toLowerCase()) {\n            result.push(ch.toUpperCase());\n        }\n    }\n\n    return result.join('');\n};\n",
            "/**\n * @param {string} txt\n * @returns {?string}\n */\nexport const stringToMd5 = (txt) => {\n    if (txt === \"\") return null;\n    const md5Hash = require('crypto').createHash('md5');\n    const txtBytes = Buffer.from(txt, 'utf-8');\n    md5Hash.update(txtBytes);\n    const md5Encoded = md5Hash.digest('hex');\n    return md5Encoded;\n}\n",
            "/**\n * @param {number} a\n * @param {number} b\n * @returns {Array<number>}\n */\nexport const generateIntegers = (a, b) => {\n  const lower = Math.max(2, Math.min(a, b));\n  const upper = Math.min(8, Math.max(a, b));\n  const result = [];\n  for (let i = lower; i <= upper; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n"
        ],
        "cpp": [
            "bool hasCloseElements(const vector<double>& numbers, double threshold) {\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        for (size_t j = i + 1; j < numbers.size(); ++j) {\n            if (abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "vector<string> separateParenGroups(const string& paren_string) {\n    vector<string> groups;\n    stack<char> stk;\n    string current_group = \"\";\n    string parens = paren_string;\n    for (char ch : parens) {\n        if (ch == '(') {\n            stk.push(ch);\n            current_group += ch;\n        } else if (ch == ')') {\n            stk.pop();\n            current_group += ch;\n            if (stk.empty()) {\n                groups.push_back(current_group);\n                current_group = \"\";\n            }\n        }\n    }\n    return groups;\n}\n",
            "double truncateNumber(double num) {\n    return num - static_cast<int>(num);\n}\n",
            "bool belowZero(const vector<int>& operations) {\n    int balance = 0;\n    for (int op : operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "double meanAbsoluteDeviation(const vector<double>& numbers) {\n    double sum = accumulate(numbers.begin(), numbers.end(), 0.0);\n    double mean = sum / numbers.size();\n    double deviation = accumulate(numbers.begin(), numbers.end(), 0.0, \n                                [mean](double acc, double x) { return acc + abs(x - mean); });\n    return deviation / numbers.size();\n}\n",
            "vector<int> intersperse(const vector<int>& numbers, int delimiter) {\n    vector<int> result;\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        if (i != 0) {\n            result.push_back(delimiter);\n        }\n        result.push_back(numbers[i]);\n    }\n    return result;\n}\n",
            "#include <string>\n#include <vector>\nusing namespace std;\n\nvector<int> parseNestedParens(const string& paren_string) {\n    vector<int> result;\n    int prev_end = 0;\n    for (int i = 0; i <= paren_string.length(); ++i) {\n        if (i == paren_string.length() || paren_string[i] == ' ') {\n            int max_depth = 0;\n            int depth = 0;\n            for (int j = prev_end; j < i; ++j) {\n                char ch = paren_string[j];\n                if (ch == '(') {\n                    depth += 1;\n                    max_depth = max(max_depth, depth);\n                } else if (ch == ')') {\n                    depth -= 1;\n                }\n            }\n            result.push_back(max_depth);\n            prev_end = i + 1;\n        }\n    }\n    return result;\n}\n",
            "vector<string> filterBySubstring(const vector<string>& strs, const string& substring) {\n    vector<string> result;\n    for (const auto& s : strs) {\n        if (s.find(substring) != string::npos) {\n            result.push_back(s);\n        }\n    }\n    return result;\n}\n",
            "#include <vector>\n#include <numeric>\n\nvector<int> sumProduct(const vector<int>& numbers) {\n  int n_sum = accumulate(numbers.begin(), numbers.end(), 0);\n  int n_product = accumulate(numbers.begin(), numbers.end(), 1, multiplies<int>());\n  return {n_sum, n_product};\n}\n",
            "vector<int> rollingMax(const vector<int>& numbers) {\n    int max_so_far = -INT_MAX;\n    vector<int> result;\n    for (int num : numbers) {\n        max_so_far = max(max_so_far, num);\n        result.push_back(max_so_far);\n    }\n    return result;\n}\n",
            "string makePalindrome(const string& s) {\n    if (s == string(s.rbegin(), s.rend())) {\n        return s;\n    }\n    for (size_t i = 0; i < s.length(); ++i) {\n        if (s.substr(i) == string(s.rbegin() + (s.length() - i - 1), s.rend())) {\n            return s + string(s.begin(), s.begin() + i);\n        }\n    }\n    return \"\";\n}\n",
            "string stringXor(const string& a, const string& b) {\n    string result;\n    for (size_t i = 0; i < a.length(); ++i) {\n        result += (a[i] == b[i]) ? '0' : '1';\n    }\n    return result;\n}\n",
            "#include <vector>\n#include <string>\nusing namespace std;\n\noptional<string> longest(const vector<string>& strs) {\n    if (strs.empty()) return nullopt;\n    string longest_s = strs[0];\n    for (const auto& s : strs) {\n        if (s.length() > longest_s.length()) {\n            longest_s = s;\n        }\n    }\n    return longest_s;\n}\n",
            "int greatestCommonDivisor(int a, int b) {\n    if (b == 0)\n        return a;\n    else\n        return greatestCommonDivisor(b, a % b);\n}\n",
            "vector<string> allPrefixes(const string& s) {\n    vector<string> prefixes;\n    for (size_t i = 0; i < s.length(); ++i) {\n        prefixes.push_back(s.substr(0, i + 1));\n    }\n    return prefixes;\n}\n",
            "string stringSequence(int n) {\n    ostringstream oss;\n    for (int i = 0; i <= n; ++i) {\n        if (i > 0) oss << \" \";\n        oss << i;\n    }\n    return oss.str();\n}\n",
            "int countDistinctCharacters(const string& s) {\n    unordered_set<char> uniqueChars(s.begin(), s.end());\n    return uniqueChars.size();\n}\n",
            "vector<int> parseMusic(const string& music_string) {\n    unordered_map<string, int> Durations = {{\"o\", 4}, {\"o|\", 2}, {\".|\", 1}};\n    vector<int> result;\n    stringstream ss(music_string);\n    string note;\n    while (ss >> note) {\n        if (Durations.find(note) != Durations.end()) {\n            result.push_back(Durations[note]);\n        }\n    }\n    return result;\n}\n",
            "int howManyTimes(const string& s, const string& substring) {\n    int times = 0;\n    for (size_t i = 0; i <= s.length() - substring.length(); ++i) {\n        if (s.substr(i, substring.length()) == substring) {\n            ++times;\n        }\n    }\n    return times;\n}\n",
            "#include <unordered_map>\n#include <vector>\n#include <sstream>\n#include <algorithm>\n\nusing namespace std;\n\nstring sortNumbers(const string& numbers) {\n    unordered_map<string, int> num_dict = {\n        {\"zero\", 0}, {\"one\", 1}, {\"two\", 2}, {\"three\", 3},\n        {\"four\", 4}, {\"five\", 5}, {\"six\", 6}, {\"seven\", 7},\n        {\"eight\", 8}, {\"nine\", 9}\n    };\n    \n    vector<string> num_list;\n    stringstream ss(numbers);\n    string word;\n    while (ss >> word) {\n        if (num_dict.find(word) != num_dict.end()) {\n            num_list.push_back(word);\n        }\n    }\n    \n    sort(num_list.begin(), num_list.end(), [&num_dict](const string& a, const string& b) {\n        return num_dict[a] < num_dict[b];\n    });\n    \n    stringstream result;\n    for (size_t i = 0; i < num_list.size(); ++i) {\n        if (i > 0) {\n            result << \" \";\n        }\n        result << num_list[i];\n    }\n    \n    return result.str();\n}\n",
            "vector<double> findClosestElements(const vector<double>& numbers) {\n    vector<double> sorted_numbers = numbers;\n    sort(sorted_numbers.begin(), sorted_numbers.end());\n    double min_diff = numeric_limits<double>::infinity();\n    vector<double> closest_pair;\n\n    for (size_t i = 1; i < sorted_numbers.size(); ++i) {\n        double diff = sorted_numbers[i] - sorted_numbers[i - 1];\n        if (diff < min_diff) {\n            min_diff = diff;\n            closest_pair = {sorted_numbers[i - 1], sorted_numbers[i]};\n        }\n    }\n\n    return closest_pair;\n}\n",
            "vector<double> rescaleToUnit(const vector<double>& numbers) {\n    double min_num = *min_element(numbers.begin(), numbers.end());\n    double max_num = *max_element(numbers.begin(), numbers.end());\n    if (min_num == max_num) {\n        return vector<double>(numbers.size(), 0.0);\n    } else {\n        vector<double> rescaled;\n        for (double num : numbers) {\n            rescaled.push_back((num - min_num) / (max_num - min_num));\n        }\n        return rescaled;\n    }\n}\n",
            "#include <any>\n#include <vector>\n\nusing namespace std;\n\nvector<int> filterIntegers(const vector<any>& values) {\n    vector<int> result;\n    for (const auto& value : values) {\n        if (value.type() == typeid(int)) {\n            result.push_back(any_cast<int>(value));\n        }\n    }\n    return result;\n}\n",
            "int strLength(const string& s) {\n    return s.length();\n}\n",
            "int largestDivisor(int n) {\n    for (int i = 2; i < n; ++i) {\n        if (n % i == 0) {\n            return n / i;\n        }\n    }\n    return 1;\n}\n",
            "vector<int> factorize(int n) {\n    vector<int> factors;\n    int divisor = 2;\n    while (divisor <= n) {\n        if (n % divisor == 0) {\n            factors.push_back(divisor);\n            n /= divisor;\n        } else {\n            divisor += 1;\n        }\n    }\n    return factors;\n}\n",
            "vector<int> removeDuplicates(const vector<int>& numbers) {\n    unordered_map<int, int> counts;\n    for (int num : numbers) {\n        counts[num]++;\n    }\n    vector<int> res;\n    for (int num : numbers) {\n        if (counts[num] == 1) {\n            res.push_back(num);\n        }\n    }\n    return res;\n}\n",
            "string flipCase(const string& s) {\n    string flipped;\n    for (char ch : s) {\n        if (!isalpha(ch)) {\n            flipped += ch;\n        } else if (islower(ch)) {\n            flipped += toupper(ch);\n        } else if (isupper(ch)) {\n            flipped += tolower(ch);\n        }\n    }\n    return flipped;\n}\n",
            "string concatenate(const vector<string>& strs) {\n    string result;\n    for (const auto& str : strs) {\n        result += str;\n    }\n    return result;\n}\n",
            "vector<string> filterByPrefix(const vector<string>& strs, const string& prefix_str) {\n    vector<string> result;\n    for (const auto& s : strs) {\n        if (s.starts_with(prefix_str)) {\n            result.push_back(s);\n        }\n    }\n    return result;\n}\n",
            "vector<int> getPositive(const vector<int>& l) {\n    vector<int> result;\n    for (int num : l) {\n        if (num > 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i <= std::sqrt(n); i++) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n",
            "double poly(const vector<int>& xs, double x) {\n    double res = 0.0;\n    for (size_t i = 0; i < xs.size(); ++i) {\n        res += xs[i] * pow(x, i);\n    }\n    return res;\n}\n\ndouble findZero(const vector<int>& xs) {\n    double x1 = 1.0, x2 = -1.0;\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2;\n        x2 *= 2;\n    }\n    while (abs(x1 - x2) > 1e-10) {\n        double mid = (x1 + x2) / 2.0;\n        if (poly(xs, mid) == 0) {\n            return mid;\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2.0;\n}\n",
            "#include <vector>\n#include <algorithm>\n\nvector<int> sortThird(const vector<int>& l) {\n    std::vector<int> sorted_third;\n    \n    for (size_t i = 0; i < l.size(); ++i) {\n        if (i % 3 == 0) {\n            sorted_third.push_back(l[i]);\n        }\n    }\n    \n    std::sort(sorted_third.begin(), sorted_third.end());\n    \n    std::vector<int> result;\n    \n    for (size_t i = 0; i < l.size(); ++i) {\n        if (i % 3 == 0) {\n            result.push_back(sorted_third[i / 3]);\n        } else {\n            result.push_back(l[i]);\n        }\n    }\n    \n    return result;\n}\n",
            "#include <vector>\n#include <algorithm>\n\nstd::vector<int> listUnique(const std::vector<int>& l) {\n    std::vector<int> result = l;\n    std::sort(result.begin(), result.end());\n    auto it = std::unique(result.begin(), result.end());\n    result.erase(it, result.end());\n    return result;\n}\n",
            "int maxElement(const vector<int>& l) {\n    return l.empty() ? 0 : *max_element(l.begin(), l.end());\n}\n",
            "int fizzBuzz(int n) {\n    int cnt = 0;\n    for (int i = 0; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string str = std::to_string(i);\n            cnt += std::count(str.begin(), str.end(), '7');\n        }\n    }\n    return cnt;\n}\n",
            "#include <vector>\n#include <algorithm>\n\nstd::vector<int> sortEven(const std::vector<int>& l) {\n    std::vector<int> sorted_even;\n    for (size_t i = 0; i < l.size(); ++i) {\n        if (i % 2 == 0) {\n            sorted_even.push_back(l[i]);\n        }\n    }\n    std::sort(sorted_even.begin(), sorted_even.end());\n\n    std::vector<int> result = l;\n    for (size_t i = 0; i < result.size(); ++i) {\n        if (i % 2 == 0) {\n            result[i] = sorted_even[i / 2];\n        }\n    }\n    return result;\n}\n",
            "#include <string>\nusing namespace std;\n\nstring encodeCyclic(const string& s) {\n    string result;\n    for (size_t i = 0; i < s.length(); i += 3) {\n        if (i + 3 > s.length()) {\n            result += s.substr(i);\n        } else {\n            result += s.substr(i + 1, 2);\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nstring decodeCyclic(const string& s) {\n    return encodeCyclic(encodeCyclic(s));\n}\n",
            "int primeFib(int n) {\n    int f[] = {0, 1};\n    int cnt = 0;\n    while (cnt < n) {\n        f[0] = f[1];\n        f[1] += f[0];\n        bool isPrime = true;\n        if (f[1] < 2)\n            isPrime = false;\n        for (int i = 2; i <= sqrt(f[1]); ++i) {\n            if (f[1] % i == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime)\n            cnt += 1;\n    }\n    return f[1];\n}\n",
            "bool triplesSumToZero(const vector<int>& l) {\n    for (size_t i = 0; i < l.size(); ++i) {\n        for (size_t j = i + 1; j < l.size(); ++j) {\n            for (size_t k = j + 1; k < l.size(); ++k) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "int carRaceCollision(int n) {\n    return n * n;\n}\n",
            "vector<int> incrList(const vector<int>& l) {\n    vector<int> result;\n    for (int i : l) {\n        result.push_back(i + 1);\n    }\n    return result;\n}\n",
            "bool pairs_sum_to_zero(const vector<int>& l) {\n    unordered_set<int> seen;\n    for (int num : l) {\n        if (seen.count(-num)) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    return false;\n}\n",
            "string changeBase(int x, int bas) {\n    if (x == 0) return \"0\";\n    string digits;\n    while (x > 0) {\n        digits += to_string(x % bas);\n        x /= bas;\n    }\n    reverse(digits.begin(), digits.end());\n    return digits;\n}\n",
            "double triangleArea(int a, int h) {\n    return static_cast<double>(a) * h / 2;\n}\n",
            "int fib4(int n) {\n    int fib[4] = {0, 0, 2, 0};\n    for (int i = 4; i <= n; ++i) {\n        fib[i % 4] = fib[0] + fib[1] + fib[2] + fib[3];\n    }\n    return fib[n % 4];\n}\n",
            "double median(const vector<double>& l) {\n    vector<double> sl = l;\n    sort(sl.begin(), sl.end());\n    if (sl.size() % 2 != 0) {\n        return sl[sl.size() / 2];\n    } else {\n        return (sl[sl.size() / 2] + sl[sl.size() / 2 - 1]) / 2.0;\n    }\n}\n",
            "bool isPalindrome(const string& txt) {\n    return txt == string(txt.rbegin(), txt.rend());\n}\n",
            "int modp(int n, int p) {\n    int ret = 1;\n    for (int i = 0; i < n; ++i) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}\n",
            "#include <string>\nusing namespace std;\n\nstring encodeShift(const string& s) {\n    string result;\n    for (char ch : s) {\n        result += ((ch - 'a' + 5) % 26 + 'a');\n    }\n    return result;\n}\n\nstring decodeShift(const string& s) {\n    string result;\n    for (char ch : s) {\n        result += ((ch - 'a' + 21) % 26 + 'a');\n    }\n    return result;\n}\n",
            "string removeVowels(const string& txt) {\n    string vowels = \"aeiouAEIOU\";\n    string result;\n    for (char char : txt) {\n        if (vowels.find(char) == string::npos) {\n            result += char;\n        }\n    }\n    return result;\n}\n",
            "bool belowThreshold(const vector<int>& l, int t) {\n    for (int x : l) {\n        if (x >= t) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "int add(int x, int y) {\n    return x + y;\n}\n",
            "bool sameChars(const string& s0, const string& s1) {\n    unordered_set<char> set0(s0.begin(), s0.end());\n    unordered_set<char> set1(s1.begin(), s1.end());\n    return set0 == set1;\n}\n",
            "int fib(int n) {\n    if (n <= 1)\n        return n;\n    else\n        return fib(n - 1) + fib(n - 2);\n}\n",
            "bool correctBracketing(const string& brackets) {\n    int depth = 0;\n    for (char b : brackets) {\n        if (b == '<') {\n            depth += 1;\n        } else if (b == '>') {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "#include <vector>\n#include <algorithm>\n\nbool monotonic(const std::vector<int>& l) {\n    if (l.size() < 2) return true;\n\n    bool non_increasing = true;\n    bool non_decreasing = true;\n\n    for (size_t i = 1; i < l.size(); ++i) {\n        if (l[i] > l[i - 1]) non_decreasing = false;\n        if (l[i] < l[i - 1]) non_increasing = false;\n    }\n\n    return non_increasing || non_decreasing;\n}\n",
            "#include <vector>\n#include <algorithm>\n\nstd::vector<int> common(const std::vector<int>& l1, const std::vector<int>& l2) {\n    std::vector<int> result;\n    std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(result));\n    result.erase(std::unique(result.begin(), result.end()), result.end());\n    std::sort(result.begin(), result.end());\n    return result;\n}\n",
            "int largestPrimeFactor(int n) {\n    int i = 2;\n    while (i * i <= n) {\n        if (n % i != 0) {\n            i += 1;\n        } else {\n            n /= i;\n        }\n    }\n    return n;\n}\n",
            "int sumToN(int n) {\n    return (n * (n + 1)) / 2;\n}\n",
            "```c++\nbool correctBracketing(const std::string& brackets) {\n    int depth = 0;\n    for (char b : brackets) {\n        if (b == '(') {\n            depth += 1;\n        } else if (b == ')') {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n```",
            "vector<int> derivative(const vector<int>& xs) {\n    vector<int> result;\n    for (int i = 1; i < xs.size(); ++i) {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\n",
            "int fibfib(int n) {\n    if (n <= 1) {\n        return 0;\n    }\n    int a = 0, b = 0, c = 1;\n    while (n > 2) {\n        a = b;\n        b = c;\n        c = a + b + c;\n        n -= 1;\n    }\n    return c;\n}\n",
            "int vowelsCount(const string& s) {\n    string vowels = \"aeiou\";\n    int cnt = 0;\n    for (int i = 0; i < s.length(); ++i) {\n        if (vowels.find(tolower(s[i])) != string::npos || (i == s.length() - 1 && tolower(s[i]) == 'y')) {\n            cnt += 1;\n        }\n    }\n    return cnt;\n}\n",
            "string circularShift(int x, int shift) {\n    string x_str = to_string(x);\n    if (shift > x_str.length()) {\n        return string(x_str.rbegin(), x_str.rend());\n    } else {\n        return x_str.substr(x_str.length() - shift) + x_str.substr(0, x_str.length() - shift);\n    }\n}\n",
            "int digitSum(const string& s) {\n    int sum = 0;\n    for (char c : s) {\n        if (isupper(c)) {\n            sum += static_cast<int>(c);\n        }\n    }\n    return sum;\n}\n",
            "int fruitDistribution(const string& s, int n) {\n    stringstream ss(s);\n    string word;\n    int apples = 0, oranges = 0;\n    bool foundApples = false, foundOranges = false;\n\n    while (ss >> word) {\n        if (word == \"apples\") {\n            ss >> apples;\n            foundApples = true;\n        } else if (word == \"oranges\") {\n            ss >> oranges;\n            foundOranges = true;\n        }\n    }\n\n    return n - apples - oranges;\n}\n",
            "vector<int> pluck(const vector<int>& arr) {\n    vector<int> evens;\n    for (int n : arr) {\n        if (n % 2 == 0) {\n            evens.push_back(n);\n        }\n    }\n    if (evens.empty()) {\n        return {};\n    }\n    \n    int min_even = *min_element(evens.begin(), evens.end());\n    auto it = find(arr.begin(), arr.end(), min_even);\n    return {min_even, static_cast<int>(it - arr.begin())};\n}\n",
            "int search(const vector<int>& lst) {\n    unordered_map<int, int> freqs;\n    for (int n : lst) {\n        freqs[n]++;\n    }\n    vector<int> good_vals;\n    for (const auto& p : freqs) {\n        if (p.second >= p.first) {\n            good_vals.push_back(p.first);\n        }\n    }\n    return !good_vals.empty() ? *max_element(good_vals.begin(), good_vals.end()) : -1;\n}\n",
            "vector<int> strangeSortList(const vector<int>& lst) {\n    vector<int> sl = lst;\n    sort(sl.begin(), sl.end());\n    vector<int> result;\n    int left = 0, right = sl.size() - 1;\n    while (left <= right) {\n        result.push_back(sl[left]);\n        left += 1;\n        if (left <= right) {\n            result.push_back(sl[right]);\n            right -= 1;\n        }\n    }\n    return result;\n}\n",
            "double triangleArea(int a, int b, int c) {\n    if (a + b > c && a + c > b && b + c > a) {\n        double s = (a + b + c) / 2.0;\n        return sqrt(s * (s - a) * (s - b) * (s - c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "bool willItFly(const vector<int>& q, int w) {\n    if (q.empty()) return false;\n    bool is_palin = true;\n    for (size_t i = 0; i < q.size() / 2; ++i) {\n        if (q[i] != q[q.size() - 1 - i]) {\n            is_palin = false;\n            break;\n        }\n    }\n    int total = accumulate(q.begin(), q.end(), 0);\n    return is_palin && total <= w;\n}\n",
            "int smallestChange(const vector<int>& arr) {\n    int ans = 0;\n    for (int i = 0; i < arr.size() / 2; ++i) {\n        if (arr[i] != arr[arr.size() - i - 1]) {\n            ++ans;\n        }\n    }\n    return ans;\n}\n",
            "#include <string>\n#include <vector>\n#include <numeric>\n\nusing namespace std;\n\nvector<string> totalMatch(const vector<string>& lst1, const vector<string>& lst2) {\n    int cnt1 = accumulate(lst1.begin(), lst1.end(), 0, [](int sum, const string& str) { return sum + str.length(); });\n    int cnt2 = accumulate(lst2.begin(), lst2.end(), 0, [](int sum, const string& str) { return sum + str.length(); });\n    return cnt1 <= cnt2 ? lst1 : lst2;\n}\n",
            "bool is_multiply_prime(int n) {\n  if (n < 2) return false;\n  for (int i = 2; i <= sqrt(n); i++) {\n    if (n % i == 0) return false;\n  }\n  return true;\n}\n\nbool isMultiplyPrime(int a) {\n  int cnt = 0;\n  for (int i = 2; i <= a; i++) {\n    if (is_multiply_prime(i)) {\n      while (a % i == 0) {\n        cnt += 1;\n        a /= i;\n      }\n    }\n  }\n  return cnt == 3;\n}\n",
            "bool isSimplePower(int x, int n) {\n  if (n < 2) {\n    return x == n;\n  }\n  int tmp = 1;\n  while (tmp < x) {\n    tmp *= n;\n  }\n  return tmp == x;\n}\n",
            "bool isCube(int a) {\n    a = std::abs(a);\n    int root = std::round(std::cbrt(a));\n    return root * root * root == a;\n}\n",
            "int hexKey(const string& num) {\n    int count = 0;\n    for (char c : num) {\n        if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n            count++;\n        }\n    }\n    return count;\n}\n",
            "string decimalToBinary(int dec) {\n    string binary = bitset<32>(dec).to_string();\n    // Remove leading zeros\n    size_t first_one = binary.find('1');\n    if (first_one != string::npos) {\n        binary = binary.substr(first_one);\n    }\n    return \"db\" + binary + \"db\";\n}\n",
            "bool isHappy(const string& s) {\n    if (s.length() < 3) return false;\n    for (size_t i = 0; i < s.length() - 2; ++i) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "#include <vector>\n#include <string>\n\nstd::vector<std::string> numericalLetterGrade(const std::vector<double>& grades) {\n    std::vector<std::string> result;\n    for (double g : grades) {\n        if (g == 4.0) {\n            result.push_back(\"A+\");\n        } else if (g > 3.7) {\n            result.push_back(\"A\");\n        } else if (g > 3.3) {\n            result.push_back(\"A-\");\n        } else if (g > 3.0) {\n            result.push_back(\"B+\");\n        } else if (g > 2.7) {\n            result.push_back(\"B\");\n        } else if (g > 2.3) {\n            result.push_back(\"B-\");\n        } else if (g > 2.0) {\n            result.push_back(\"C+\");\n        } else if (g > 1.7) {\n            result.push_back(\"C\");\n        } else if (g > 1.3) {\n            result.push_back(\"C-\");\n        } else if (g > 1.0) {\n            result.push_back(\"D+\");\n        } else if (g > 0.7) {\n            result.push_back(\"D\");\n        } else if (g > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\n",
            "bool primeLength(const string& s) {\n    int length = s.length();\n    if (length < 2) return false;\n    for (int i = 2; i <= sqrt(length); ++i) {\n        if (length % i == 0) return false;\n    }\n    return true;\n}\n",
            "int startsOneEnds(int n) {\n    if (n == 1)\n        return 1;\n    return 2 * 9 * (int)(pow(10, n - 2));\n}\n",
            "string solve(int n) {\n    int digits_sum = 0;\n    while (n > 0) {\n        digits_sum += n % 10;\n        n /= 10;\n    }\n    return bitset<32>(digits_sum).to_string().substr(32 - log2(digits_sum + 1));\n}\n",
            "int add(const vector<int>& lst) {\n    int sum = 0;\n    for (size_t i = 1; i < lst.size(); i += 2) {\n        if (lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n",
            "string antiShuffle(const string& s) {\n    stringstream ss(s);\n    string word;\n    string result;\n    while (ss >> word) {\n        sort(word.begin(), word.end());\n        if (!result.empty()) result += \" \";\n        result += word;\n    }\n    return result;\n}\n",
            "#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<vector<int>> getRow(const vector<vector<int>>& lst, int x) {\n    vector<vector<int>> coords;\n    for (size_t i = 0; i < lst.size(); ++i) {\n        for (size_t j = 0; j < lst[i].size(); ++j) {\n            if (lst[i][j] == x) {\n                coords.push_back({static_cast<int>(i), static_cast<int>(j)});\n            }\n        }\n    }\n    sort(coords.begin(), coords.end(), [](const vector<int>& a, const vector<int>& b) {\n        return a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]);\n    });\n    return coords;\n}\n",
            "vector<int> sortArray(const vector<int>& arr) {\n    if (arr.empty()) return {};\n    bool evenSum = (arr.front() + arr.back()) % 2 == 0;\n    if (evenSum) {\n        auto sortedArr = arr;\n        sort(sortedArr.begin(), sortedArr.end(), greater<int>());\n        return sortedArr;\n    } else {\n        auto sortedArr = arr;\n        sort(sortedArr.begin(), sortedArr.end());\n        return sortedArr;\n    }\n}\n",
            "string encrypt(const string& s) {\n    string result = \"\";\n    for (char ch : s) {\n        int shifted = static_cast<int>(ch) + 4;\n        if (shifted > 'z') {\n            shifted -= 26;\n        }\n        result += static_cast<char>(shifted);\n    }\n    return result;\n}\n",
            "optional<int> nextSmallest(const vector<int>& lst) {\n    set<int> s(lst.begin(), lst.end());\n    if (s.size() < 2) {\n        return nullopt;\n    }\n    auto it = s.begin();\n    ++it;\n    return *it;\n}\n",
            "#include <sstream>\n#include <vector>\nusing namespace std;\n\nint isBored(const string& s) {\n    stringstream ss(s);\n    string sentence;\n    int count = 0;\n    while (getline(ss, sentence, '.')) {\n        if (!sentence.empty() && sentence[0] == 'I' && sentence.length() >= 2) {\n            count++;\n        }\n    }\n    return count;\n}\n",
            "bool anyInt(auto&& x, auto&& y, auto&& z) {\n    if constexpr (std::is_integral_v<decltype(x)> && std::is_integral_v<decltype(y)> && std::is_integral_v<decltype(z)>) {\n        return (x + y == z) || (x + z == y) || (y + z == x);\n    }\n    return false;\n}\n",
            "string encode(const string& message) {\n    string vowels = \"aeiouAEIOU\";\n    string result;\n    for (char ch : message) {\n        if (isalpha(ch)) {\n            char ch1 = islower(ch) ? toupper(ch) : tolower(ch);\n            if (vowels.find(ch1) != string::npos) {\n                ch1 = (ch1 + 2) % 256; // Ensuring it stays a character\n            }\n            result += ch1;\n        } else {\n            result += ch;\n        }\n    }\n    return result;\n}\n",
            "#include <vector>\n#include <cmath>\n#include <algorithm>\n\nbool is_prime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= std::sqrt(n); ++i) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint skjkasdkd(const std::vector<int>& lst) {\n    std::vector<int> primes;\n    for (int n : lst) {\n        if (is_prime(n)) {\n            primes.push_back(n);\n        }\n    }\n    if (primes.empty()) {\n        return 0;\n    }\n    int largest = *std::max_element(primes.begin(), primes.end());\n    int sum_of_digits = 0;\n    while (largest > 0) {\n        sum_of_digits += largest % 10;\n        largest /= 10;\n    }\n    return sum_of_digits;\n}\n",
            "bool checkDictCase(const unordered_map<string, string>& d) {\n    if (d.empty()) {\n        return false;\n    }\n    bool allLower = true, allUpper = true;\n    for (const auto& pair : d) {\n        const string& key = pair.first;\n        for (char c : key) {\n            if (!islower(c)) {\n                allLower = false;\n            }\n            if (!isupper(c)) {\n                allUpper = false;\n            }\n        }\n    }\n    return allLower || allUpper;\n}\n",
            "vector<int> countUpTo(int n) {\n    vector<int> primes;\n    for (int num = 2; num < n; ++num) {\n        bool isPrime = true;\n        for (const int& p : primes) {\n            if (num % p == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            primes.push_back(num);\n        }\n    }\n    return primes;\n}\n",
            "int multiply(int a, int b) {\n    return (abs(a) % 10) * (abs(b) % 10);\n}\n",
            "int countUpper(const string& s) {\n    string vowels = \"AEIOU\";\n    int count = 0;\n    for (size_t i = 0; i < s.length(); ++i) {\n        if (i % 2 == 0 && vowels.find(s[i]) != string::npos) {\n            ++count;\n        }\n    }\n    return count;\n}\n",
            "int closestInteger(const string& value) {\n    float num = stof(value);\n    if (num >= 0) {\n        return static_cast<int>(num + 0.5);\n    } else {\n        return static_cast<int>(num - 0.5);\n    }\n}\n",
            "vector<int> makeAPile(int n) {\n    vector<int> result;\n    for (int i = 0; i < n; ++i) {\n        result.push_back(n + 2 * i);\n    }\n    return result;\n}\n",
            "#include <string>\n#include <vector>\n#include <sstream>\n\nusing namespace std;\n\nvector<string> wordsString(const string& s) {\n    vector<string> result;\n    stringstream ss(s);\n    string word;\n    while (getline(ss, word, ',')) {\n        stringstream wordStream(word);\n        while (wordStream >> word) {\n            if (!word.empty()) {\n                result.push_back(word);\n            }\n        }\n    }\n    return result;\n}\n",
            "int chooseNum(int x, int y) {\n    if (x > y) return -1;\n    if (y % 2 == 0) return y;\n    if (x != y) return y - 1;\n    return -1;\n}\n",
            "#include <string>\n#include <optional>\n\nstd::optional<std::string> roundedAvg(int n, int m) {\n    if (n > m) return std::nullopt;\n    int r_avg = static_cast<int>(round((m + n) / 2.0));\n    std::string binary = std::bitset<32>(r_avg).to_string();\n    // Remove leading zeros\n    binary.erase(0, binary.find_first_not_of('0'));\n    return binary;\n}\n",
            "vector<int> uniqueDigits(const vector<int>& x) {\n    auto allDigitsOdd = [](const string& s) -> bool {\n        for (char digit : s) {\n            if ((digit - '0') % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    vector<int> result;\n    for (int num : x) {\n        if (allDigitsOdd(to_string(num))) {\n            result.push_back(num);\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}\n",
            "#include <string>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<string> byLength(const vector<int>& arr) {\n    vector<string> digit_names = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    vector<int> sorted_arr;\n    \n    for (int x : arr) {\n        if (1 <= x && x <= 9) {\n            sorted_arr.push_back(x);\n        }\n    }\n    \n    sort(sorted_arr.begin(), sorted_arr.end(), greater<int>());\n    \n    vector<string> result;\n    for (int x : sorted_arr) {\n        result.push_back(digit_names[x - 1]);\n    }\n    \n    return result;\n}\n",
            "vector<int> f(int n) {\n    vector<int> nums(n);\n    for (int i = 0; i < n; ++i) {\n        nums[i] = i + 1;\n    }\n    vector<int> result;\n    for (int i = 1; i <= n; ++i) {\n        if (i % 2 == 1) {\n            int sum = accumulate(nums.begin(), nums.begin() + i, 0);\n            result.push_back(sum);\n        } else {\n            int product = accumulate(nums.begin(), nums.begin() + i, 1, multiplies<int>());\n            result.push_back(product);\n        }\n    }\n    return result;\n}\n",
            "vector<int> evenOddPalindrome(int n) {\n    vector<int> cnt(2, 0);\n    for (int i = 1; i <= n; ++i) {\n        string str = to_string(i);\n        if (equal(str.begin(), str.begin() + str.size()/2, str.rbegin())) {\n            cnt[i % 2] += 1;\n        }\n    }\n    return cnt;\n}\n",
            "int countNums(const vector<int>& arr) {\n    int count = 0;\n    for (int n : arr) {\n        if (digitsSum(n) > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint digitsSum(int n) {\n    string n_str = to_string(n);\n    if (n >= 0) {\n        int sum = 0;\n        for (char c : n_str) {\n            sum += c - '0';\n        }\n        return sum;\n    } else {\n        return (n_str[0] - '0') * 2 + digitsSum(abs(n));\n    }\n}\n",
            "bool moveOneBall(const vector<int>& arr) {\n    if (arr.empty()) {\n        return true;\n    }\n    vector<int> sorted_arr = arr;\n    sort(sorted_arr.begin(), sorted_arr.end());\n    for (size_t i = 0; i < arr.size(); ++i) {\n        if (equal(arr.begin() + i, arr.end(), sorted_arr.begin()) &&\n            equal(arr.begin(), arr.begin() + i, sorted_arr.rbegin())) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "string canExchange(const vector<int>& lst1, const vector<int>& lst2) {\n    int odd_cnt = 0;\n    for (int num : lst1) {\n        if (num % 2 != 0) {\n            odd_cnt++;\n        }\n    }\n    \n    int even_cnt = 0;\n    for (int num : lst2) {\n        if (num % 2 == 0) {\n            even_cnt++;\n        }\n    }\n    \n    return even_cnt >= odd_cnt ? \"YES\" : \"NO\";\n}\n",
            "unordered_map<string, int> histogram(const string& test) {\n    unordered_map<string, int> freq;\n    stringstream ss(test);\n    string word;\n    while (ss >> word) {\n        ++freq[word];\n    }\n    unordered_map<string, int> result;\n    if (!freq.empty()) {\n        int max_freq = 0;\n        for (const auto& pair : freq) {\n            if (pair.second > max_freq) {\n                max_freq = pair.second;\n            }\n        }\n        for (const auto& pair : freq) {\n            if (pair.second == max_freq) {\n                result[pair.first] = pair.second;\n            }\n        }\n    }\n    return result;\n}\n",
            "vector<string> reverseDelete(const string& s, const string& c) {\n    string s1;\n    for (char ch : s) {\n        if (c.find(ch) == string::npos) {\n            s1 += ch;\n        }\n    }\n    string reversed_s1 = s1;\n    reverse(reversed_s1.begin(), reversed_s1.end());\n    return {s1, s1 == reversed_s1 ? \"yes\" : \"no\"};\n}\n",
            "vector<string> oddCount(const vector<string>& lst) {\n    vector<string> result;\n    for (const auto& num : lst) {\n        int n = 0;\n        for (char d : num) {\n            if ((d - '0') % 2 == 1) {\n                n++;\n            }\n        }\n        string rs = \"the number of odd elements in the string i of the input.\";\n        replace(rs.begin(), rs.end(), 'i', '0' + n);\n        result.push_back(rs);\n    }\n    return result;\n}\n",
            "int minSubArraySum(const vector<int>& nums) {\n    int min_sum = 0;\n    int cur_sum = 0;\n    for (int n : nums) {\n        cur_sum = std::min(cur_sum + n, 0);\n        min_sum = std::min(cur_sum, min_sum);\n    }\n    if (min_sum == 0) {\n        min_sum = *std::min_element(nums.begin(), nums.end());\n    }\n    return min_sum;\n}\n",
            "int maxFill(const vector<vector<int>>& grid, int capacity) {\n    int result = 0;\n    for (const auto& arr : grid) {\n        int sum = accumulate(arr.begin(), arr.end(), 0);\n        result += ceil(static_cast<double>(sum) / capacity);\n    }\n    return result;\n}\n",
            "vector<int> sortArray(const vector<int>& arr) {\n    auto countOnes = [](int num) {\n        return bitset<32>(num).count();\n    };\n\n    vector<int> result(arr);\n    sort(result.begin(), result.end(), [&](int a, int b) {\n        int onesA = countOnes(a);\n        int onesB = countOnes(b);\n        return (onesA == onesB) ? a < b : onesA < onesB;\n    });\n\n    return result;\n}\n",
            "vector<string> selectWords(const string& s, int n) {\n    string consonants = \"bcdfghjklmnpqrstvwxyz\";\n    vector<string> words;\n    stringstream ss(s);\n    string word;\n    while (ss >> word) {\n        if (!word.empty()) {\n            int consonantCount = 0;\n            for (char c : word) {\n                char lowerC = tolower(c);\n                if (consonants.find(lowerC) != string::npos) {\n                    consonantCount++;\n                }\n            }\n            if (consonantCount == n) {\n                words.push_back(word);\n            }\n        }\n    }\n    return words;\n}\n",
            "string getClosestVowel(const string& word) {\n    string vowels = \"aeiouAEIOU\";\n    for (int i = word.length() - 2; i > 0; --i) {\n        if (vowels.find(word[i]) != string::npos && \n            vowels.find(word[i - 1]) == string::npos && \n            vowels.find(word[i + 1]) == string::npos) {\n            return string(1, word[i]);\n        }\n    }\n    return \"\";\n}\n",
            "string matchParens(const vector<string>& lst) {\n    string s1 = lst[0] + lst[1];\n    string s2 = lst[1] + lst[0];\n    \n    auto check = [](const string& s) -> bool {\n        int depth = 0;\n        for (char ch : s) {\n            if (ch == '(') {\n                depth += 1;\n            } else {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    };\n    \n    return check(s1) || check(s2) ? \"Yes\" : \"No\";\n}\n",
            "vector<int> maximum(const vector<int>& arr, int k) {\n    if (k == 0)\n        return {};\n    vector<int> sorted_arr = arr;\n    sort(sorted_arr.begin(), sorted_arr.end(), greater<int>());\n    return vector<int>(sorted_arr.begin(), sorted_arr.begin() + k);\n}\n",
            "int solution(const vector<int>& lst) {\n    int sum = 0;\n    for (size_t i = 0; i < lst.size(); ++i) {\n        if (i % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n",
            "int addElements(const vector<int>& arr, int k) {\n    int sum = 0;\n    for (int i = 0; i < k; ++i) {\n        if (to_string(arr[i]).length() <= 2) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n",
            "vector<int> getOddCollatz(int n) {\n    vector<int> collatz = {1};\n    while (n != 1) {\n        if (n % 2 != 0) {\n            collatz.push_back(n);\n            n = 3 * n + 1;\n        } else {\n            n /= 2;\n        }\n    }\n    sort(collatz.begin(), collatz.end());\n    return collatz;\n}\n",
            "bool validDate(const string& date) {\n    if (date.length() != 10 || date[2] != '-' || date[5] != '-') {\n        return false;\n    }\n    int m = stoi(date.substr(0, 2));\n    int d = stoi(date.substr(3, 2));\n    if ((m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) && d >= 1 && d <= 31) {\n        return true;\n    }\n    if ((m == 4 || m == 6 || m == 9 || m == 11) && d >= 1 && d <= 30) {\n        return true;\n    }\n    if (m == 2 && d >= 1 && d <= 29) {\n        return true;\n    }\n    return false;\n}\n",
            "#include <string>\n#include <vector>\nusing namespace std;\n\nvector<string> splitWords(const string& txt) {\n    if (txt.find(\" \") != string::npos) {\n        vector<string> result;\n        size_t start = 0, end;\n        while ((end = txt.find(\" \", start)) != string::npos) {\n            result.push_back(txt.substr(start, end - start));\n            start = end + 1;\n        }\n        result.push_back(txt.substr(start));\n        return result;\n    } else if (txt.find(\",\") != string::npos) {\n        vector<string> result;\n        size_t start = 0, end;\n        while ((end = txt.find(\",\", start)) != string::npos) {\n            result.push_back(txt.substr(start, end - start));\n            start = end + 1;\n        }\n        result.push_back(txt.substr(start));\n        return result;\n    } else {\n        int count = 0;\n        for (char c : txt) {\n            if (islower(c) && (c % 2 == 0)) {\n                count++;\n            }\n        }\n        return {to_string(count)};\n    }\n}\n",
            "bool isSorted(const vector<int>& lst) {\n    for (size_t i = 1; i < lst.size(); ++i) {\n        if (lst[i-1] > lst[i]) {\n            return false;\n        }\n    }\n    unordered_map<int, int> freq;\n    for (int num : lst) {\n        freq[num]++;\n    }\n    for (const auto& pair : freq) {\n        if (pair.second > 2) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "#include <vector>\n#include <cmath>\n\nusing namespace std;\n\nbool is_prime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n); ++i) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nstring intersection(const vector<int>& interval1, const vector<int>& interval2) {\n    int l = max(interval1[0], interval2[0]);\n    int r = min(interval1[1], interval2[1]);\n    int length = r - l;\n    return (length > 0 && is_prime(length)) ? \"YES\" : \"NO\";\n}\n",
            "optional<int> prodSigns(const vector<int>& arr) {\n    if (arr.empty()) return nullopt;\n    if (find(arr.begin(), arr.end(), 0) != arr.end()) return 0;\n    int sign = count_if(arr.begin(), arr.end(), [](int n){ return n < 0; }) % 2 == 1 ? -1 : 1;\n    return sign * accumulate(arr.begin(), arr.end(), 0, [](int sum, int n){ return sum + abs(n); });\n}\n",
            "vector<int> minPath(const vector<vector<int>>& grid, int k) {\n    int n = grid.size();\n    int min_val = n * n + 1;\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < n; ++j) {\n            if (grid[i][j] == 1) {\n                vector<int> temp;\n                if (i != 0) temp.push_back(grid[i - 1][j]);\n                if (j != 0) temp.push_back(grid[i][j - 1]);\n                if (i != n - 1) temp.push_back(grid[i + 1][j]);\n                if (j != n - 1) temp.push_back(grid[i][j + 1]);\n                min_val = *std::min_element(temp.begin(), temp.end());\n            }\n        }\n    }\n    vector<int> result;\n    for (int i = 0; i < k; ++i) {\n        result.push_back((i % 2 == 0) ? 1 : min_val);\n    }\n    return result;\n}\n",
            "#include <vector>\n\nstd::vector<int> tri(int n) {\n    std::vector<int> seq;\n    if (n == 0) {\n        seq.push_back(1);\n        return seq;\n    }\n    seq = {1, 3};\n    for (int i = 2; i <= n; ++i) {\n        if (i % 2 == 0) {\n            seq.push_back(i / 2 + 1);\n        } else {\n            seq.push_back(seq[i - 1] + seq[i - 2] + (i + 3) / 2);\n        }\n    }\n    return seq;\n}\n",
            "int digits(int n) {\n    int product = 1;\n    bool hasOdd = false;\n    \n    while (n > 0) {\n        int digit = n % 10;\n        if (digit % 2 != 0) {\n            product *= digit;\n            hasOdd = true;\n        }\n        n /= 10;\n    }\n    \n    return hasOdd ? product : 0;\n}\n",
            "bool isNested(const string& s) {\n    vector<int> open_idx;\n    vector<int> close_idx;\n    \n    for (size_t i = 0; i < s.length(); ++i) {\n        if (s[i] == '[') {\n            open_idx.push_back(i);\n        } else if (s[i] == ']') {\n            close_idx.push_back(i);\n        }\n    }\n    \n    reverse(close_idx.begin(), close_idx.end());\n    int cnt = 0;\n    int l = close_idx.size();\n    int i = 0;\n    \n    for (int idx : open_idx) {\n        if (i < l && idx < close_idx[i]) {\n            ++cnt;\n            ++i;\n        }\n    }\n    \n    return cnt >= 2;\n}\n",
            "int sumSquares(const vector<double>& lst) {\n    int sum = 0;\n    for (double n : lst) {\n        sum += ceil(n) * ceil(n);\n    }\n    return sum;\n}\n",
            "bool checkIfLastCharIsALetter(const string& txt) {\n    if (txt.empty()) {\n        return false;\n    }\n    size_t lastSpace = txt.rfind(' ');\n    if (lastSpace == string::npos) {\n        return isalpha(txt.back());\n    }\n    string last = txt.substr(lastSpace + 1);\n    return last.length() == 1 && isalpha(last[0]);\n}\n",
            "int canArrange(const vector<int>& arr) {\n    if (arr.size() <= 1) return -1;\n    \n    int idx = -1;\n    for (size_t i = 1; i < arr.size(); ++i) {\n        if (arr[i] < arr[i - 1]) {\n            idx = max(idx, static_cast<int>(i));\n        }\n    }\n    \n    return idx == -1 ? -1 : idx;\n}\n",
            "#include <vector>\n#include <optional>\n#include <algorithm>\n\nstd::vector<std::optional<int>> largestSmallestIntegers(const std::vector<int>& lst) {\n    std::vector<int> neg;\n    std::vector<int> pos;\n\n    for (int i : lst) {\n        if (i < 0) {\n            neg.push_back(i);\n        } else if (i > 0) {\n            pos.push_back(i);\n        }\n    }\n\n    std::optional<int> max_neg = neg.empty() ? std::nullopt : *std::max_element(neg.begin(), neg.end());\n    std::optional<int> min_pos = pos.empty() ? std::nullopt : *std::min_element(pos.begin(), pos.end());\n\n    return {max_neg, min_pos};\n}\n",
            "#include <iostream>\n#include <any>\n#include <string>\n#include <stdexcept>\n\nstd::optional<double> compareOne(const std::any& a, const std::any& b) {\n    auto any_to_real = [](const std::any& o) -> double {\n        if (o.type() == typeid(std::string)) {\n            return std::stod(std::any_cast<std::string>(o));\n        } else if (o.type() == typeid(int)) {\n            return static_cast<double>(std::any_cast<int>(o));\n        } else if (o.type() == typeid(double)) {\n            return std::any_cast<double>(o);\n        } else {\n            throw std::runtime_error(\"Type Error\");\n        }\n    };\n\n    double a1 = any_to_real(a);\n    double b1 = any_to_real(b);\n\n    if (a1 == b1) {\n        return {};\n    } else if (a1 > b1) {\n        return a1;\n    } else {\n        return b1;\n    }\n}\n",
            "bool isEqualToSumEven(int n) {\n    return n % 2 == 0 && n >= 8;\n}\n",
            "int specialFactorial(int n) {\n    int fact = 1;\n    int result = 1;\n    for (int i = 1; i <= n; ++i) {\n        fact *= i;\n        result *= fact;\n    }\n    return result;\n}\n",
            "string fixSpaces(const string& txt) {\n    string result = txt;\n    result.regex_replace(result.begin(), result.end(), regex(\"\\\\s{3,}\"), \"-\");\n    result.regex_replace(result.begin(), result.end(), regex(\" \"), \"_\");\n    return result;\n}\n",
            "#include <vector>\n#include <string>\nusing namespace std;\n\nbool containsOnlyDigits(const string& str) {\n    for (char c : str) {\n        if (!isdigit(c)) return false;\n    }\n    return true;\n}\n\nstring fileNameCheck(const string& file_name) {\n    vector<string> suf = {\"txt\", \"exe\", \"dll\"};\n    size_t dotPos = file_name.find(\".\");\n    \n    if (dotPos == string::npos || dotPos == 0 || dotPos == file_name.length() - 1) return \"No\";\n    \n    string namePart = file_name.substr(0, dotPos);\n    string extPart = file_name.substr(dotPos + 1);\n    \n    if (find(suf.begin(), suf.end(), extPart) == suf.end()) return \"No\";\n    \n    if (!isalpha(namePart[0])) return \"No\";\n    \n    int digitCount = count_if(namePart.begin(), namePart.end(), ::isdigit);\n    if (digitCount > 3) return \"No\";\n    \n    return \"Yes\";\n}\n",
            "int sumSquares(const vector<int>& lst) {\n    int result = 0;\n    for (size_t i = 0; i < lst.size(); ++i) {\n        if (i % 3 == 0) {\n            result += lst[i] * lst[i];\n        } else if (i % 4 == 0) {\n            result += lst[i] * lst[i] * lst[i];\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "string wordsInSentence(const string& sentence) {\n    vector<string> words;\n    stringstream ss(sentence);\n    string word;\n    while (ss >> word) {\n        words.push_back(word);\n    }\n    \n    auto is_prime = [](int n) -> bool {\n        if (n < 2) return false;\n        for (int i = 2; i <= sqrt(n); ++i) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    };\n    \n    vector<string> filtered_words;\n    for (const auto& w : words) {\n        if (is_prime(w.length())) {\n            filtered_words.push_back(w);\n        }\n    }\n    \n    stringstream result;\n    for (size_t i = 0; i < filtered_words.size(); ++i) {\n        result << filtered_words[i];\n        if (i < filtered_words.size() - 1) {\n            result << \" \";\n        }\n    }\n    \n    return result.str();\n}\n",
            "#include <string>\n#include <vector>\n#include <sstream>\n\nbool simplify(const std::string& x, const std::string& n) {\n    std::stringstream ss_x(x);\n    std::stringstream ss_n(n);\n    std::string xs[2];\n    std::string ns[2];\n    \n    std::getline(ss_x, xs[0], '/');\n    std::getline(ss_x, xs[1], '/');\n    std::getline(ss_n, ns[0], '/');\n    std::getline(ss_n, ns[1], '/');\n    \n    int num = std::stoi(xs[0]) * std::stoi(ns[0]);\n    int den = std::stoi(xs[1]) * std::stoi(ns[1]);\n    \n    return num % den == 0;\n}\n",
            "#include <vector>\n#include <string>\n#include <algorithm>\n\nint digitsSum(int n) {\n    std::string nStr = std::to_string(n);\n    if (n >= 0) {\n        return std::accumulate(nStr.begin(), nStr.end(), 0, [](int sum, char c) { return sum + c - '0'; });\n    } else {\n        int twoDigitPart = std::stoi(nStr.substr(0, 2));\n        return twoDigitPart * 2 + digitsSum(std::abs(n));\n    }\n}\n\nstd::vector<int> orderByPoints(const std::vector<int>& nums) {\n    std::vector<int> sortedNums = nums;\n    std::sort(sortedNums.begin(), sortedNums.end(), [](int a, int b) { return digitsSum(a) < digitsSum(b); });\n    return sortedNums;\n}\n",
            "int specialFilter(const vector<int>& nums) {\n    string odds = \"13579\";\n    int count = 0;\n    for (int n : nums) {\n        if (n > 10 && n % 2 != 0 && odds.find(to_string(n)[0]) != string::npos) {\n            count++;\n        }\n    }\n    return count;\n}\n",
            "int getMaxTriples(int n) {\n    int c[3] = {0, 0, 0};\n    for (int i = 1; i <= n; ++i) {\n        int a = i * i - i + 1;\n        c[a % 3]++;\n    }\n    return c[0] * c[1] * c[2] + ((c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6);\n}\n",
            "vector<string> bf(const string& planet1, const string& planet2) {\n    vector<string> names = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    if (find(names.begin(), names.end(), planet1) == names.end() || find(names.begin(), names.end(), planet2) == names.end()) {\n        return {};\n    }\n    \n    int l = find(names.begin(), names.end(), planet1) - names.begin();\n    int r = find(names.begin(), names.end(), planet2) - names.begin();\n    \n    if (l > r) swap(l, r);\n    if (l == r) return {};\n    \n    return vector<string>(names.begin() + l + 1, names.begin() + r);\n}\n",
            "vector<string> sortedListSum(const vector<string>& lst) {\n    vector<string> result;\n    for (const auto& s : lst) {\n        if (s.length() % 2 == 0) {\n            result.push_back(s);\n        }\n    }\n    sort(result.begin(), result.end(), [](const string& a, const string& b) {\n        if (a.length() == b.length()) {\n            return a < b;\n        }\n        return a.length() < b.length();\n    });\n    return result;\n}\n",
            "int xOrY(int n, int x, int y) {\n  if (n < 2) return y;\n  for (int i = 2; i <= sqrt(n); ++i) {\n    if (n % i == 0) return y;\n  }\n  return x;\n}\n",
            "int doubleTheDifference(const vector<double>& lst) {\n    int result = 0;\n    for (double n : lst) {\n        if (n >= 0 && n == static_cast<int>(n) && static_cast<int>(n) % 2 == 1) {\n            result += static_cast<int>(n * n);\n        }\n    }\n    return result;\n}\n",
            "vector<int> compare(const vector<int>& game, const vector<int>& guess) {\n    vector<int> result;\n    for (size_t i = 0; i < game.size(); ++i) {\n        result.push_back(abs(game[i] - guess[i]));\n    }\n    return result;\n}\n",
            "#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring strongestExtension(const string& class_name, const vector<string>& extensions) {\n    int max_s = -1;\n    string max_ext = \"\";\n    for (const auto& ext : extensions) {\n        int upper = 0;\n        int lower = 0;\n        for (char c : ext) {\n            if (isupper(c)) {\n                upper++;\n            } else if (islower(c)) {\n                lower++;\n            }\n        }\n        int s = upper - lower;\n        if (s > max_s) {\n            max_s = s;\n            max_ext = ext;\n        }\n    }\n    return class_name + \".\" + max_ext;\n}\n",
            "bool cycpatternCheck(const std::string& a, const std::string& b) {\n    if (a.length() < b.length()) {\n        return false;\n    }\n    for (size_t i = 0; i < b.length(); ++i) {\n        std::string rotated_b = b.substr(i) + b.substr(0, i);\n        if (a.find(rotated_b) != std::string::npos) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "vector<int> evenOddCount(int num) {\n    string ds = to_string(abs(num));\n    int even = 0;\n    for (char d : ds) {\n        if ((d - '0') % 2 == 0) {\n            even++;\n        }\n    }\n    return {even, static_cast<int>(ds.length()) - even};\n}\n",
            "string intToMiniRoman(int num) {\n    vector<int> values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    vector<string> numerals = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    string res = \"\";\n    for (int i = 0; i < values.size(); ++i) {\n        while (num >= values[i]) {\n            res += numerals[i];\n            num -= values[i];\n        }\n    }\n    return res;\n}\n",
            "bool rightAngleTriangle(int a, int b, int c) {\n    int s[] = {a, b, c};\n    std::sort(s, s + 3);\n    return (s[0] * s[0] + s[1] * s[1] == s[2] * s[2]);\n}\n",
            "string findMax(const vector<string>& words) {\n    int max_cnt = 0;\n    string max_w = \"\";\n    for (const auto& w : words) {\n        int cnt = unordered_set<char>(w.begin(), w.end()).size();\n        if (cnt > max_cnt) {\n            max_cnt = cnt;\n            max_w = w;\n        } else if (cnt == max_cnt) {\n            max_w = min(max_w, w);\n        }\n    }\n    return max_w;\n}\n",
            "vector<int> eat(int num, int need, int remaining) {\n    if (need <= remaining) {\n        return {num + need, remaining - need};\n    } else {\n        return {num + remaining, 0};\n    }\n}\n",
            "int doAlgebra(const vector<string>& operators, const vector<int>& operands) {\n    vector<string> ops = operators;\n    vector<int> nums = operands;\n    int i = ops.size() - 1;\n    while (i >= 0) {\n        if (ops[i] == \"**\") {\n            nums[i] = pow(nums[i], nums[i + 1]);\n            nums.erase(nums.begin() + i + 1);\n            ops.erase(ops.begin() + i);\n        }\n        i -= 1;\n    }\n    i = 0;\n    while (i < ops.size()) {\n        if (ops[i] == \"*\") {\n            nums[i] = nums[i] * nums[i + 1];\n            nums.erase(nums.begin() + i + 1);\n            ops.erase(ops.begin() + i);\n            i -= 1;\n        } else if (ops[i] == \"//\") {\n            nums[i] = nums[i] / nums[i + 1];\n            nums.erase(nums.begin() + i + 1);\n            ops.erase(ops.begin() + i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    i = 0;\n    while (i < ops.size()) {\n        if (ops[i] == \"+\") {\n            nums[i] = nums[i] + nums[i + 1];\n            nums.erase(nums.begin() + i + 1);\n            ops.erase(ops.begin() + i);\n            i -= 1;\n        } else if (ops[i] == \"-\") {\n            nums[i] = nums[i] - nums[i + 1];\n            nums.erase(nums.begin() + i + 1);\n            ops.erase(ops.begin() + i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    return nums[0];\n}\n",
            "string solve(const string& s) {\n    if (s.find_first_of(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\") == string::npos) {\n        return string(s.rbegin(), s.rend());\n    }\n\n    string result;\n    for (char ch : s) {\n        if (!isalpha(ch)) {\n            result += ch;\n        } else if (isupper(ch)) {\n            result += tolower(ch);\n        } else if (islower(ch)) {\n            result += toupper(ch);\n        }\n    }\n\n    return result;\n}\n",
            "optional<string> stringToMd5(const string& txt) {\n    if (txt.empty()) {\n        return nullopt;\n    }\n    MD5 md5_hash;\n    md5_hash.update(txt);\n    string md5_encoded = md5_hash.hexdigest();\n    return md5_encoded;\n}\n",
            "#include <vector>\n#include <algorithm>\n\nstd::vector<int> generateIntegers(int a, int b) {\n    int lower = std::max(2, std::min(a, b));\n    int upper = std::min(8, std::max(a, b));\n    std::vector<int> result;\n    for (int i = lower; i <= upper; ++i) {\n        if (i % 2 == 0) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\n"
        ],
        "java": [
            "class Global {\n    public static boolean hasCloseElements(List<Double> numbers, double threshold) {\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n",
            "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Stack;\n\nclass Global {\n    public static List<String> separateParenGroups(String parenString) {\n        List<String> groups = new ArrayList<>();\n        Stack<Character> stk = new Stack<>();\n        StringBuilder currentGroup = new StringBuilder();\n        String parens = parenString.replaceAll(\" \", \"\");\n        \n        for (char ch : parens.toCharArray()) {\n            if (ch == '(') {\n                stk.push(ch);\n                currentGroup.append(ch);\n            } else if (ch == ')') {\n                stk.pop();\n                currentGroup.append(ch);\n                if (stk.isEmpty()) {\n                    groups.add(currentGroup.toString());\n                    currentGroup.setLength(0);\n                }\n            }\n        }\n        return groups;\n    }\n}\n",
            "class Global {\n    public static double truncateNumber(double num) {\n        return num - Math.floor(num);\n    }\n}\n",
            "Class Global {\n    public static boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (int op : operations) {\n            balance += op;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}",
            "class Global {\n    public static double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n\n        double deviationSum = 0;\n        for (double num : numbers) {\n            deviationSum += Math.abs(num - mean);\n        }\n\n        return deviationSum / numbers.size();\n    }\n}\n",
            "class Global {\n    public static List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i != 0) {\n                result.add(delimiter);\n            }\n            result.add(numbers.get(i));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> parseNestedParens(String parenString) {\n        List<Integer> result = new ArrayList<>();\n        String[] parenGroups = parenString.split(\"\\\\s+\");\n        \n        for (String group : parenGroups) {\n            int maxDepth = 0;\n            int depth = 0;\n            \n            for (char ch : group.toCharArray()) {\n                if (ch == '(') {\n                    depth++;\n                    maxDepth = Math.max(maxDepth, depth);\n                } else if (ch == ')') {\n                    depth--;\n                }\n            }\n            \n            result.add(maxDepth);\n        }\n        \n        return result;\n    }\n}\n",
            "class Global {\n    public static List<String> filterBySubstring(List<String> strs, String substring) {\n        return strs.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n    }\n}\n",
            "import java.util.ArrayList;\nimport java.util.List;\n\nclass Global {\n    public static List<Integer> sumProduct(List<Integer> numbers) {\n        int n_sum = 0;\n        for (int number : numbers) {\n            n_sum += number;\n        }\n\n        int n_product = 1;\n        for (int number : numbers) {\n            n_product *= number;\n        }\n\n        List<Integer> result = new ArrayList<>();\n        result.add(n_sum);\n        result.add(n_product);\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> rollingMax(List<Integer> numbers) {\n        int maxSoFar = Integer.MIN_VALUE;\n        List<Integer> result = new ArrayList<>();\n        for (int num : numbers) {\n            maxSoFar = Math.max(maxSoFar, num);\n            result.add(maxSoFar);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String makePalindrome(String s) {\n        if (s.equals(new StringBuilder(s).reverse().toString())) {\n            return s;\n        }\n        for (int i = 0; i < s.length(); i++) {\n            if (s.substring(i).equals(new StringBuilder(s.substring(i)).reverse().toString())) {\n                return s + new StringBuilder(s.substring(0, i)).reverse().toString();\n            }\n        }\n        return \"\";\n    }\n}\n",
            "class Global {\n    public static String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            char x = a.charAt(i);\n            char y = b.charAt(i);\n            result.append((x == y) ? \"0\" : \"1\");\n        }\n        return result.toString();\n    }\n}\n",
            "class Global {\n    public static Optional<String> longest(List<String> strs) {\n        if (strs.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest_s = strs.get(0);\n        for (String s : strs) {\n            if (s.length() > longest_s.length()) {\n                longest_s = s;\n            }\n        }\n        return Optional.of(longest_s);\n    }\n}\n",
            "class Global {\n    public static int greatestCommonDivisor(int a, int b) {\n        if (b == 0) {\n            return a;\n        } else {\n            return greatestCommonDivisor(b, a % b);\n        }\n    }\n}\n",
            "class Global {\n    public static List<String> allPrefixes(String s) {\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 0; i < s.length(); i++) {\n            prefixes.add(s.substring(0, i + 1));\n        }\n        return prefixes;\n    }\n}\n",
            "class Global {\n    public static String stringSequence(int n) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            result.append(i).append(\" \");\n        }\n        return result.toString().trim();\n    }\n}\n",
            "class Global {\n    public static int countDistinctCharacters(String s) {\n        return (int) s.toLowerCase().chars().distinct().count();\n    }\n}\n",
            "class Global {\n    public static List<Integer> parseMusic(String musicString) {\n        Map<String, Integer> durations = new HashMap<>();\n        durations.put(\"o\", 4);\n        durations.put(\"o|\", 2);\n        durations.put(\".|\", 1);\n\n        String[] notes = musicString.split(\"\\\\s+\");\n        return Arrays.stream(notes)\n                    .map(note -> durations.getOrDefault(note, 0))\n                    .collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static int howManyTimes(String s, String substring) {\n        int times = 0;\n        for (int i = 0; i <= s.length() - substring.length(); i++) {\n            if (s.substring(i, i + substring.length()).equals(substring)) {\n                times += 1;\n            }\n        }\n        return times;\n    }\n}\n",
            "class Global {\n    public static String sortNumbers(String numbers) {\n        Map<String, Integer> numDict = new HashMap<>();\n        numDict.put(\"zero\", 0);\n        numDict.put(\"one\", 1);\n        numDict.put(\"two\", 2);\n        numDict.put(\"three\", 3);\n        numDict.put(\"four\", 4);\n        numDict.put(\"five\", 5);\n        numDict.put(\"six\", 6);\n        numDict.put(\"seven\", 7);\n        numDict.put(\"eight\", 8);\n        numDict.put(\"nine\", 9);\n\n        String[] numList = numbers.split(\" \");\n        List<String> filteredList = new ArrayList<>();\n        for (String x : numList) {\n            if (numDict.containsKey(x)) {\n                filteredList.add(x);\n            }\n        }\n\n        Collections.sort(filteredList, Comparator.comparingInt(numDict::get));\n\n        return String.join(\" \", filteredList);\n    }\n}\n",
            "class Global {\n    public static List<Double> findClosestElements(List<Double> numbers) {\n        Collections.sort(numbers);\n        double minDiff = Double.POSITIVE_INFINITY;\n        List<Double> closestPair = new ArrayList<>();\n        \n        for (int i = 1; i < numbers.size(); i++) {\n            double diff = numbers.get(i) - numbers.get(i - 1);\n            if (diff < minDiff) {\n                minDiff = diff;\n                closestPair = Arrays.asList(numbers.get(i - 1), numbers.get(i));\n            }\n        }\n        \n        return closestPair;\n    }\n}\n",
            "class Global {\n    public static List<Double> rescaleToUnit(List<Double> numbers) {\n        double minNum = Collections.min(numbers);\n        double maxNum = Collections.max(numbers);\n        if (minNum == maxNum) {\n            return Collections.nCopies(numbers.size(), 0.0);\n        } else {\n            return numbers.stream()\n                         .map(num -> (num - minNum) / (maxNum - minNum))\n                         .collect(Collectors.toList());\n        }\n    }\n}\n",
            "class Global {\n    public static List<Integer> filterIntegers(List<Object> values) {\n        return values.stream()\n                    .filter(x -> x instanceof Integer)\n                    .map(x -> (Integer)x)\n                    .collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static int strLength(String s) {\n        return s.length();\n    }\n}\n",
            "class Global {\n    public static int largestDivisor(int n) {\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return n / i;\n            }\n        }\n        return 1;\n    }\n}\n",
            "class Global {\n    public static List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int divisor = 2;\n        while (divisor <= n) {\n            if (n % divisor == 0) {\n                factors.add(divisor);\n                n /= divisor;\n            } else {\n                divisor++;\n            }\n        }\n        return factors;\n    }\n}\n",
            "class Global {\n    public static List<Integer> removeDuplicates(List<Integer> numbers) {\n        Map<Integer, Integer> counts = new HashMap<>();\n        for (int num : numbers) {\n            counts.put(num, counts.getOrDefault(num, 0) + 1);\n        }\n        List<Integer> res = new ArrayList<>();\n        for (int num : numbers) {\n            if (counts.get(num) == 1) {\n                res.add(num);\n            }\n        }\n        return res;\n    }\n}\n",
            "class Global {\n    public static String flipCase(String s) {\n        StringBuilder flipped = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (!Character.isLetter(ch)) {\n                flipped.append(ch);\n            } else if (Character.isLowerCase(ch)) {\n                flipped.append(Character.toUpperCase(ch));\n            } else if (Character.isUpperCase(ch)) {\n                flipped.append(Character.toLowerCase(ch));\n            }\n        }\n        return flipped.toString();\n    }\n}\n",
            "class Global {\n    public static String concatenate(List<String> strs) {\n        return String.join(\"\", strs);\n    }\n}\n",
            "class Global {\n    public static List<String> filterByPrefix(List<String> strs, String prefixStr) {\n        return strs.stream()\n                   .filter(s -> s.startsWith(prefixStr))\n                   .collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(num -> num > 0).collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static double poly(List<Integer> xs, double x) {\n        double res = 0.0;\n        for (int i = 0; i < xs.size(); i++) {\n            int coeff = xs.get(i);\n            res += coeff * Math.pow(x, i);\n        }\n        return res;\n    }\n    \n    public static double findZero(List<Integer> xs) {\n        double x1 = 1.0, x2 = -1.0;\n        while (poly(xs, x1) * poly(xs, x2) > 0) {\n            x1 *= 2;\n            x2 *= 2;\n        }\n        while (Math.abs(x1 - x2) > 1e-10) {\n            double mid = (x1 + x2) / 2.0;\n            if (poly(xs, mid) == 0) {\n                return mid;\n            } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n                x2 = mid;\n            } else {\n                x1 = mid;\n            }\n        }\n        return (x1 + x2) / 2.0;\n    }\n}\n",
            "class Global {\n    public static List<Integer> sortThird(List<Integer> l) {\n        List<Integer> sortedThird = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                sortedThird.add(l.get(i));\n            }\n        }\n        Collections.sort(sortedThird);\n        \n        List<Integer> result = new ArrayList<>(l);\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                result.set(i, sortedThird.get(i / 3));\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> listUnique(List<Integer> l) {\n        Set<Integer> uniqueSet = new HashSet<>(l);\n        List<Integer> sortedList = new ArrayList<>(uniqueSet);\n        Collections.sort(sortedList);\n        return sortedList;\n    }\n}\n",
            "class Global {\n    public static int maxElement(List<Integer> l) {\n        if (l.isEmpty()) {\n            return 0;\n        }\n        return Collections.max(l);\n    }\n}\n",
            "class Global {\n    public static int fizzBuzz(int n) {\n        int cnt = 0;\n        for (int i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String str = Integer.toString(i);\n                for (char c : str.toCharArray()) {\n                    if (c == '7') {\n                        cnt++;\n                    }\n                }\n            }\n        }\n        return cnt;\n    }\n}\n",
            "class Global {\n    public static List<Integer> sortEven(List<Integer> l) {\n        List<Integer> sortedEven = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                sortedEven.add(l.get(i));\n            }\n        }\n        Collections.sort(sortedEven);\n        \n        List<Integer> result = new ArrayList<>(l);\n        int evenIndex = 0;\n        for (int i = 0; i < result.size(); i++) {\n            if (i % 2 == 0) {\n                result.set(i, sortedEven.get(evenIndex));\n                evenIndex++;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String encodeCyclic(String s) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < s.length(); i += 3) {\n            if (i + 3 > s.length()) {\n                result.append(s.substring(i));\n            } else {\n                result.append(s.substring(i + 1, i + 3)).append(s.charAt(i));\n            }\n        }\n        return result.toString();\n    }\n    \n    public static String decodeCyclic(String s) {\n        return encodeCyclic(encodeCyclic(s));\n    }\n}\n",
            "class Global {\n    public static int primeFib(int n) {\n        if (n < 1) return -1; // Handle edge case for n < 1\n        int[] f = {0, 1};\n        int cnt = 0;\n        while (cnt < n) {\n            f[0] = f[1];\n            f[1] = f[0] + f[1];\n            if (isPrime(f[1])) {\n                cnt++;\n            }\n        }\n        return f[1];\n    }\n\n    private static boolean isPrime(int num) {\n        if (num < 2) return false;\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static boolean triplesSumToZero(List<Integer> l) {\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static int carRaceCollision(int n) {\n        return n * n;\n    }\n}\n",
            "class Global {\n    public static List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static boolean pairsSumToZero(List<Integer> l) {\n        Set<Integer> seen = new HashSet<>();\n        for (int num : l) {\n            if (seen.contains(-num)) {\n                return true;\n            }\n            seen.add(num);\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static String changeBase(int x, int bas) {\n        if (x == 0) return \"0\";\n        StringBuilder digits = new StringBuilder();\n        while (x > 0) {\n            digits.append(x % bas);\n            x /= bas;\n        }\n        return digits.reverse().toString();\n    }\n}\n",
            "class Global {\n    public static double triangleArea(int a, int h) {\n        return (double) a * h / 2;\n    }\n}\n",
            "class Global {\n    public static int fib4(int n) {\n        int[] fib = {0, 0, 2, 0};\n        for (int i = 4; i <= n; i++) {\n            fib[i % 4] = Arrays.stream(fib).sum();\n        }\n        return fib[n % 4];\n    }\n}\n",
            "class Global {\n    public static double median(List<Double> l) {\n        Collections.sort(l);\n        int length = l.size();\n        if (length % 2 != 0) {\n            return l.get(length / 2);\n        } else {\n            return (l.get(length / 2) + l.get(length / 2 - 1)) / 2.0;\n        }\n    }\n}\n",
            "class Global {\n    public static boolean isPalindrome(String txt) {\n        return txt.equals(new StringBuilder(txt).reverse().toString());\n    }\n}\n",
            "class Global {\n    public static int modp(int n, int p) {\n        int ret = 1;\n        for (int i = 0; i < n; i++) {\n            ret = (ret * 2) % p;\n        }\n        return ret;\n    }\n}\n",
            "class Global {\n    public static String encodeShift(String s) {\n        StringBuilder result = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            result.append((char) (((ch - 'a' + 5) % 26) + 'a'));\n        }\n        return result.toString();\n    }\n    \n    public static String decodeShift(String s) {\n        StringBuilder result = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            result.append((char) (((ch - 'a' + 21) % 26) + 'a'));\n        }\n        return result.toString();\n    }\n}\n",
            "class Global {\n    public static String removeVowels(String txt) {\n        StringBuilder result = new StringBuilder();\n        String vowels = \"aeiouAEIOU\";\n        for (char c : txt.toCharArray()) {\n            if (!vowels.contains(\"\" + c)) {\n                result.append(c);\n            }\n        }\n        return result.toString();\n    }\n}\n",
            "class Global {\n    public static boolean belowThreshold(List<Integer> l, int t) {\n        for (int x : l) {\n            if (x >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static int add(int x, int y) {\n        return x + y;\n    }\n}\n",
            "class Global {\n    public static boolean sameChars(String s0, String s1) {\n        Set<Character> set0 = new HashSet<>();\n        for (char c : s0.toCharArray()) {\n            set0.add(c);\n        }\n        \n        Set<Character> set1 = new HashSet<>();\n        for (char c : s1.toCharArray()) {\n            set1.add(c);\n        }\n        \n        return set0.equals(set1);\n    }\n}\n",
            "class Global {\n    public static int fib(int n) {\n        if (n <= 1) {\n            return n;\n        } else {\n            return fib(n - 1) + fib(n - 2);\n        }\n    }\n}\n",
            "class Global {\n    public static boolean correctBracketing(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '<') {\n                depth += 1;\n            } else if (b == '>') {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static boolean monotonic(List<Integer> l) {\n        if (l.size() < 2) return true;\n        \n        int direction = 0;\n        \n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > l.get(i - 1)) {\n                if (direction == 0) direction = 1;\n                else if (direction == -1) return false;\n            } else if (l.get(i) < l.get(i - 1)) {\n                if (direction == 0) direction = -1;\n                else if (direction == 1) return false;\n            }\n        }\n        \n        return true;\n    }\n}\n",
            "class Global {\n    public static List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<>(l1);\n        set1.retainAll(new HashSet<>(l2));\n        List<Integer> result = new ArrayList<>(set1);\n        Collections.sort(result);\n        return result;\n    }\n}\n",
            "class Global {\n    public static int largestPrimeFactor(int n) {\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i != 0) {\n                i += 1;\n            } else {\n                n /= i;\n            }\n        }\n        return n;\n    }\n}\n",
            "class Global {\n    public static int sumToN(int n) {\n        int sum = 0;\n        for (int i = 0; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}\n",
            "class Global {\n    public static boolean correctBracketing(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '(') {\n                depth += 1;\n            } else if (b == ')') {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int fibfib(int n) {\n        if (n <= 1) {\n            return 0;\n        }\n        int a = 0, b = 0, c = 1;\n        while (n > 2) {\n            a = b;\n            b = c;\n            c = a + b + c;\n            n -= 1;\n        }\n        return c;\n    }\n}\n",
            "class Global {\n    public static int vowelsCount(String s) {\n        String vowels = \"aeiou\";\n        int cnt = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (vowels.indexOf(Character.toLowerCase(s.charAt(i))) != -1 || \n                (i == s.length() - 1 && Character.toLowerCase(s.charAt(i)) == 'y')) {\n                cnt++;\n            }\n        }\n        return cnt;\n    }\n}\n",
            "class Global {\n    public static String circularShift(int x, int shift) {\n        String x_str = Integer.toString(x);\n        if (shift > x_str.length()) {\n            return new StringBuilder(x_str).reverse().toString();\n        } else {\n            return x_str.substring(x_str.length() - shift) + x_str.substring(0, x_str.length() - shift);\n        }\n    }\n}\n",
            "class Global {\n    public static int digitSum(String s) {\n        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += (int) c;\n            }\n        }\n        return sum;\n    }\n}\n",
            "class Global {\n    public static int fruitDistribution(String s, int n) {\n        String[] words = s.split(\" \");\n        int apples = Integer.parseInt(words[java.util.Arrays.asList(words).indexOf(\"apples\") - 1]);\n        int oranges = Integer.parseInt(words[java.util.Arrays.asList(words).indexOf(\"oranges\") - 1]);\n        return n - apples - oranges;\n    }\n}\n",
            "class Global {\n    public static List<Integer> pluck(List<Integer> arr) {\n        List<Integer> evens = new ArrayList<>();\n        for (Integer n : arr) {\n            if (n % 2 == 0) {\n                evens.add(n);\n            }\n        }\n        \n        if (evens.isEmpty()) {\n            return new ArrayList<>();\n        }\n        \n        int minEven = Collections.min(evens);\n        int index = arr.indexOf(minEven);\n        List<Integer> result = new ArrayList<>();\n        result.add(minEven);\n        result.add(index);\n        return result;\n    }\n}\n",
            "class Global {\n    public static int search(List<Integer> lst) {\n        Map<Integer, Integer> freqs = new HashMap<>();\n        for (int n : lst) {\n            freqs.put(n, freqs.getOrDefault(n, 0) + 1);\n        }\n        List<Integer> goodVals = new ArrayList<>();\n        for (Map.Entry<Integer, Integer> entry : freqs.entrySet()) {\n            if (entry.getValue() >= entry.getKey()) {\n                goodVals.add(entry.getKey());\n            }\n        }\n        return !goodVals.isEmpty() ? Collections.max(goodVals) : -1;\n    }\n}\n",
            "class Global {\n    public static List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> sl = new ArrayList<>(lst);\n        Collections.sort(sl);\n        List<Integer> result = new ArrayList<>();\n        int left = 0, right = sl.size() - 1;\n        while (left <= right) {\n            result.add(sl.get(left));\n            left += 1;\n            if (left <= right) {\n                result.add(sl.get(right));\n                right -= 1;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static double triangleArea(int a, int b, int c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            double s = (a + b + c) / 2.0;\n            return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        } else {\n            return -1.0;\n        }\n    }\n}\n",
            "class Global {\n    public static boolean willItFly(List<Integer> q, int w) {\n        if (q.isEmpty()) {\n            return false;\n        }\n        \n        boolean isPalin = true;\n        for (int i = 0; i < q.size() / 2; i++) {\n            if (!q.get(i).equals(q.get(q.size() - 1 - i))) {\n                isPalin = false;\n                break;\n            }\n        }\n        \n        int total = 0;\n        for (int e : q) {\n            total += e;\n        }\n        \n        return isPalin && total <= w;\n    }\n}\n",
            "class Global {\n    public static int smallestChange(List<Integer> arr) {\n        int ans = 0;\n        for (int i = 0; i < arr.size() / 2; i++) {\n            if (!arr.get(i).equals(arr.get(arr.size() - i - 1))) {\n                ans += 1;\n            }\n        }\n        return ans;\n    }\n}\n",
            "class Global {\n    public static List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        int cnt1 = lst1.stream().mapToInt(String::length).sum();\n        int cnt2 = lst2.stream().mapToInt(String::length).sum();\n        return cnt1 <= cnt2 ? lst1 : lst2;\n    }\n}\n",
            "class Global {\n    public static boolean isMultiplyPrime(int a) {\n        int cnt = 0;\n        for (int i = 2; i <= a; i++) {\n            if (isPrime(i)) {\n                while (a % i == 0) {\n                    cnt++;\n                    a /= i;\n                }\n            }\n        }\n        return cnt == 3;\n    }\n\n    private static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static boolean isSimplePower(int x, int n) {\n        if (n < 2) {\n            return x == n;\n        }\n        int tmp = 1;\n        while (tmp < x) {\n            tmp *= n;\n        }\n        return tmp == x;\n    }\n}\n",
            "class Global {\n    public static boolean isCube(int a) {\n        double cubeRoot = Math.cbrt(a);\n        int roundedCubeRoot = (int) Math.round(cubeRoot);\n        return roundedCubeRoot * roundedCubeRoot * roundedCubeRoot == a;\n    }\n}\n",
            "class Global {\n    public static int hexKey(String num) {\n        int count = 0;\n        for (char c : num.toCharArray()) {\n            if (\"2357BD\".indexOf(c) != -1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n",
            "class Global {\n    public static String decimalToBinary(int dec) {\n        return \"db\" + Integer.toBinaryString(dec) + \"db\";\n    }\n}\n",
            "class Global {\n    public static boolean isHappy(String s) {\n        if (s.length() < 3) {\n            return false;\n        }\n        for (int i = 0; i <= s.length() - 3; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "import java.util.ArrayList;\nimport java.util.List;\n\nclass Global {\n    public static List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> result = new ArrayList<>();\n        for (Double g : grades) {\n            if (g == 4.0) {\n                result.add(\"A+\");\n            } else if (g > 3.7) {\n                result.add(\"A\");\n            } else if (g > 3.3) {\n                result.add(\"A-\");\n            } else if (g > 3.0) {\n                result.add(\"B+\");\n            } else if (g > 2.7) {\n                result.add(\"B\");\n            } else if (g > 2.3) {\n                result.add(\"B-\");\n            } else if (g > 2.0) {\n                result.add(\"C+\");\n            } else if (g > 1.7) {\n                result.add(\"C\");\n            } else if (g > 1.3) {\n                result.add(\"C-\");\n            } else if (g > 1.0) {\n                result.add(\"D+\");\n            } else if (g > 0.7) {\n                result.add(\"D\");\n            } else if (g > 0.0) {\n                result.add(\"D-\");\n            } else {\n                result.add(\"E\");\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean primeLength(String s) {\n        int length = s.length();\n        if (length < 2) return false;\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) return false;\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static int startsOneEnds(int n) {\n        if (n == 1) {\n            return 1;\n        }\n        return 2 * 9 * (int)Math.pow(10, n - 2);\n    }\n}\n",
            "class Global {\n    public static String solve(int n) {\n        int digitsSum = 0;\n        while (n > 0) {\n            digitsSum += n % 10;\n            n /= 10;\n        }\n        return Integer.toBinaryString(digitsSum);\n    }\n}\n",
            "class Global {\n    public static int add(List<Integer> lst) {\n        return lst.stream()\n                   .filter(x -> lst.indexOf(x) % 2 != 0 && x % 2 == 0)\n                   .mapToInt(Integer::intValue)\n                   .sum();\n    }\n}\n",
            "class Global {\n    public static String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        StringBuilder result = new StringBuilder();\n        \n        for (String word : words) {\n            char[] chars = word.toCharArray();\n            java.util.Arrays.sort(chars);\n            result.append(new String(chars)).append(\" \");\n        }\n        \n        return result.toString().trim();\n    }\n}\n",
            "class Global {\n    public static List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> coords = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j) == x) {\n                    List<Integer> coord = Arrays.asList(i, j);\n                    coords.add(coord);\n                }\n            }\n        }\n        coords.sort(Comparator.comparingInt(a -> a.get(0)).thenComparingInt(a -> -a.get(1)));\n        return coords;\n    }\n}\n",
            "class Global {\n    public static List<Integer> sortArray(List<Integer> arr) {\n        if (arr.isEmpty()) return new ArrayList<>();\n        Collections.sort(arr);\n        if ((arr.get(0) + arr.get(arr.size() - 1)) % 2 == 0) {\n            Collections.reverse(arr);\n        }\n        return arr;\n    }\n}\n",
            "class Global {\n    public static String encrypt(String s) {\n        StringBuilder result = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            int shifted = ch + 4;\n            if (shifted > 'z') {\n                shifted -= 26;\n            }\n            result.append((char) shifted);\n        }\n        return result.toString();\n    }\n}\n",
            "class Global {\n    public static Optional<Integer> nextSmallest(List<Integer> lst) {\n        List<Integer> sl = lst.stream().distinct().sorted().collect(Collectors.toList());\n        if (sl.size() < 2) {\n            return Optional.empty();\n        }\n        return Optional.of(sl.get(1));\n    }\n}\n",
            "class Global {\n    public static int isBored(String s) {\n        String[] sentences = s.split(\"[.!?]\\\\s*\");\n        int count = 0;\n        for (String sentence : sentences) {\n            if (sentence.startsWith(\"I \") && sentence.length() >= 2) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n",
            "class Global {\n    public static boolean anyInt(Object x, Object y, Object z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int ix = ((Integer)x).intValue();\n            int iy = ((Integer)y).intValue();\n            int iz = ((Integer)z).intValue();\n            return (ix + iy == iz) || (ix + iz == iy) || (iy + iz == ix);\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static String encode(String message) {\n        String vowels = \"aeiouAEIOU\";\n        StringBuilder result = new StringBuilder();\n        for (char ch : message.toCharArray()) {\n            if (Character.isLetter(ch)) {\n                char ch1;\n                if (Character.isLowerCase(ch)) {\n                    ch1 = Character.toUpperCase(ch);\n                } else {\n                    ch1 = Character.toLowerCase(ch);\n                }\n                if (vowels.indexOf(ch1) != -1) {\n                    ch1 = (char) (ch1 + 2);\n                }\n                result.append(ch1);\n            } else {\n                result.append(ch);\n            }\n        }\n        return result.toString();\n    }\n}\n",
            "class Global {\n    public static boolean is_prime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static int skjkasdkd(List<Integer> lst) {\n        List<Integer> primes = new ArrayList<>();\n        for (int n : lst) {\n            if (is_prime(n)) {\n                primes.add(n);\n            }\n        }\n        if (primes.isEmpty()) {\n            return 0;\n        }\n        String largest = Integer.toString(Collections.max(primes));\n        int sum = 0;\n        for (char digit : largest.toCharArray()) {\n            sum += Character.getNumericValue(digit);\n        }\n        return sum;\n    }\n}\n",
            "class Global {\n    public static boolean checkDictCase(Map<String, String> d) {\n        if (d.isEmpty()) {\n            return false;\n        }\n        boolean allLower = true;\n        boolean allUpper = true;\n        for (String key : d.keySet()) {\n            if (!key.equals(key.toLowerCase())) {\n                allLower = false;\n            }\n            if (!key.equals(key.toUpperCase())) {\n                allUpper = false;\n            }\n        }\n        return allLower || allUpper;\n    }\n}\n",
            "class Global {\n    public static List<Integer> countUpTo(int n) {\n        List<Integer> primes = new ArrayList<>();\n        for (int num = 2; num < n; num++) {\n            boolean isPrime = true;\n            for (int p : primes) {\n                if (num % p == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                primes.add(num);\n            }\n        }\n        return primes;\n    }\n}\n",
            "class Global {\n    public static int multiply(int a, int b) {\n        return Math.abs(a) % 10 * Math.abs(b) % 10;\n    }\n}\n",
            "class Global {\n    public static int countUpper(String s) {\n        String vowels = \"AEIOU\";\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (i % 2 == 0 && vowels.indexOf(c) != -1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n",
            "class Global {\n    public static int closestInteger(String value) {\n        double num = Double.parseDouble(value);\n        if (num >= 0) {\n            return (int) Math.floor(num + 0.5);\n        } else {\n            return (int) Math.ceil(num - 0.5);\n        }\n    }\n}\n",
            "class Global {\n    public static List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            pile.add(n + 2 * i);\n        }\n        return pile;\n    }\n}\n",
            "class Global {\n    public static List<String> wordsString(String s) {\n        return Arrays.asList(s.split(\"[, ]+\")).stream()\n                      .filter(word -> !word.isEmpty())\n                      .collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static int chooseNum(int x, int y) {\n        if (x > y) {\n            return -1;\n        }\n        if (y % 2 == 0) {\n            return y;\n        }\n        if (x != y) {\n            return y - 1;\n        }\n        return -1;\n    }\n}\n",
            "class Global {\n    public static Optional<String> roundedAvg(int n, int m) {\n        if (n > m) return Optional.empty();\n        int r_avg = ((m + n) / 2);\n        r_avg += (((m + n) % 2) != 0) ? 1 : 0; // Rounding up\n        return Optional.of(Integer.toBinaryString(r_avg));\n    }\n}\n",
            "class Global {\n    public static List<Integer> uniqueDigits(List<Integer> x) {\n        return x.stream()\n                .filter(num -> allDigitsOdd(num.toString()))\n                .sorted()\n                .collect(Collectors.toList());\n    }\n\n    private static boolean allDigitsOdd(String s) {\n        for (char digit : s.toCharArray()) {\n            if ((digit - '0') % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static List<String> byLength(List<Integer> arr) {\n        String[] digitNames = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n        List<Integer> sortedArr = arr.stream()\n                                     .filter(x -> x >= 1 && x <= 9)\n                                     .sorted(Comparator.reverseOrder())\n                                     .collect(Collectors.toList());\n        return sortedArr.stream()\n                        .map(x -> digitNames[x - 1])\n                        .collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static List<Integer> f(int n) {\n        List<Integer> nums = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            nums.add(i);\n        }\n\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int index = i + 1;\n            if (index % 2 != 0) {\n                int sum = 0;\n                for (int j = 0; j < index; j++) {\n                    sum += nums.get(j);\n                }\n                result.add(sum);\n            } else {\n                int product = 1;\n                for (int j = 0; j < index; j++) {\n                    product *= nums.get(j);\n                }\n                result.add(product);\n            }\n        }\n\n        return result;\n    }\n}\n",
            "public class Global {\n    public static List<Integer> evenOddPalindrome(int n) {\n        int[] cnt = {0, 0};\n        for (int i = 1; i <= n; i++) {\n            String str = Integer.toString(i);\n            if (str.equals(new StringBuilder(str).reverse().toString())) {\n                cnt[i % 2]++;\n            }\n        }\n        List<Integer> result = new ArrayList<>();\n        result.add(cnt[0]);\n        result.add(cnt[1]);\n        return result;\n    }\n}\n",
            "class Global {\n    public static int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int n : arr) {\n            if (digitsSum(n) > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private static int digitsSum(int n) {\n        String nStr = Integer.toString(n);\n        if (n >= 0) {\n            int sum = 0;\n            for (char c : nStr.toCharArray()) {\n                sum += Character.getNumericValue(c);\n            }\n            return sum;\n        } else {\n            int firstTwoDigits = Integer.parseInt(nStr.substring(0, 2));\n            return (firstTwoDigits * 2) + digitsSum(Math.abs(n));\n        }\n    }\n}\n",
            "import java.util.Collections;\nimport java.util.List;\n\nclass Global {\n    public static boolean moveOneBall(List<Integer> arr) {\n        if (arr.size() == 0) {\n            return true;\n        }\n        List<Integer> sortedArr = new ArrayList<>(arr);\n        Collections.sort(sortedArr);\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.subList(i, arr.size()).equals(sortedArr.subList(0, arr.size() - i)) &&\n                arr.subList(0, i).equals(sortedArr.subList(arr.size() - i, arr.size()))) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static String canExchange(List<Integer> lst1, List<Integer> lst2) {\n        long oddCnt = lst1.stream().filter(num -> num % 2 != 0).count();\n        long evenCnt = lst2.stream().filter(num -> num % 2 == 0).count();\n        return evenCnt >= oddCnt ? \"YES\" : \"NO\";\n    }\n}\n",
            "class Global {\n    public static Map<String, Integer> histogram(String test) {\n        Map<String, Integer> freq = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String w : words) {\n            if (!w.isEmpty()) {\n                freq.put(w, freq.getOrDefault(w, 0) + 1);\n            }\n        }\n        Map<String, Integer> result = new HashMap<>();\n        if (!freq.isEmpty()) {\n            int maxFreq = Collections.max(freq.values());\n            for (Map.Entry<String, Integer> entry : freq.entrySet()) {\n                if (entry.getValue() == maxFreq) {\n                    result.put(entry.getKey(), entry.getValue());\n                }\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<String> reverseDelete(String s, String c) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (c.indexOf(ch) == -1) {\n                sb.append(ch);\n            }\n        }\n        String s1 = sb.toString();\n        return Arrays.asList(s1, s1.equals(new StringBuilder(s1).reverse().toString()) ? \"yes\" : \"no\");\n    }\n}\n",
            "class Global {\n    public static List<String> oddCount(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String num : lst) {\n            int count = 0;\n            for (char d : num.toCharArray()) {\n                if ((d & 1) != 0) {\n                    count++;\n                }\n            }\n            String rs = \"the number of odd elements in the string i of the input.\";\n            result.add(rs.replace(\"i\", Integer.toString(count)));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int minSubArraySum(List<Integer> nums) {\n        int min_sum = 0;\n        int cur_sum = 0;\n        for (int n : nums) {\n            cur_sum = Math.min(cur_sum + n, 0);\n            min_sum = Math.min(cur_sum, min_sum);\n        }\n        if (min_sum == 0) {\n            min_sum = Collections.min(nums);\n        }\n        return min_sum;\n    }\n}\n",
            "class Global {\n    public static int maxFill(List<List<Integer>> grid, int capacity) {\n        return grid.stream()\n            .mapToInt(arr -> (int) Math.ceil((double) arr.stream().mapToInt(Integer::intValue).sum() / capacity))\n            .sum();\n    }\n}\n",
            "class Global {\n    public static List<Integer> sortArray(List<Integer> arr) {\n        return arr.stream()\n                 .sorted(Comparator.comparingInt(Global::countOnes).thenComparingInt(x -> x))\n                 .collect(Collectors.toList());\n    }\n\n    private static int countOnes(int num) {\n        return Integer.bitCount(num);\n    }\n}\n",
            "class Global {\n    public static List<String> selectWords(String s, int n) {\n        String consonants = \"bcdfghjklmnpqrstvwxyz\";\n        String[] wordsArray = s.split(\" \");\n        List<String> words = Arrays.stream(wordsArray).filter(w -> !w.trim().isEmpty()).collect(Collectors.toList());\n        \n        return words.stream()\n                .filter(w -> (int) w.toLowerCase().chars()\n                        .filter(c -> consonants.indexOf(c) != -1)\n                        .count() == n)\n                .collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static String getClosestVowel(String word) {\n        String vowels = \"aeiouAEIOU\";\n        for (int i = word.length() - 2; i > 0; i--) {\n            if (vowels.indexOf(word.charAt(i)) != -1 && \n                vowels.indexOf(word.charAt(i - 1)) == -1 && \n                vowels.indexOf(word.charAt(i + 1)) == -1) {\n                return String.valueOf(word.charAt(i));\n            }\n        }\n        return \"\";\n    }\n}\n",
            "class Global {\n    public static String matchParens(List<String> lst) {\n        String s1 = lst.get(0) + lst.get(1);\n        String s2 = lst.get(1) + lst.get(0);\n        return (check(s1) || check(s2)) ? \"Yes\" : \"No\";\n    }\n\n    private static boolean check(String s) {\n        int depth = 0;\n        for (char ch : s.toCharArray()) {\n            if (ch == '(') {\n                depth += 1;\n            } else {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static List<Integer> maximum(List<Integer> arr, int k) {\n        if (k == 0) {\n            return new ArrayList<>();\n        }\n        Collections.sort(arr, Collections.reverseOrder());\n        return arr.subList(0, k);\n    }\n}\n",
            "class Global {\n    public static int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n",
            "class Global {\n    public static int addElements(List<Integer> arr, int k) {\n        return arr.stream()\n                   .limit(k)\n                   .filter(n -> Integer.toString(n).length() <= 2)\n                   .mapToInt(Integer::intValue)\n                   .sum();\n    }\n}\n",
            "class Global {\n    public static List<Integer> getOddCollatz(int n) {\n        List<Integer> collatz = new ArrayList<>();\n        while (n != 1) {\n            if (n % 2 != 0) {\n                collatz.add(n);\n                n = 3 * n + 1;\n            } else {\n                n = n / 2;\n            }\n        }\n        Collections.sort(collatz);\n        return collatz;\n    }\n}\n",
            "class Global {\n    public static boolean validDate(String date) {\n        return false unless date.length() == 10 && date.charAt(2) == '-' && date.charAt(5) == '-';\n        int m = Integer.parseInt(date.substring(0, 2));\n        int d = Integer.parseInt(date.substring(3, 5));\n        if (Arrays.asList(1, 3, 5, 7, 8, 10, 12).contains(m) && d >= 1 && d <= 31) {\n            return true;\n        }\n        if (Arrays.asList(4, 6, 9, 11).contains(m) && d >= 1 && d <= 30) {\n            return true;\n        }\n        if (m == 2 && d >= 1 && d <= 29) {\n            return true;\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static List<String> splitWords(String txt) {\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\" \"));\n        } else if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && c % 2 == 0) {\n                    count++;\n                }\n            }\n            return Arrays.asList(Integer.toString(count));\n        }\n    }\n}\n",
            "class Global {\n    public static boolean isSorted(List<Integer> lst) {\n        if (lst.size() <= 1) return true;\n        \n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i - 1) > lst.get(i)) {\n                return false;\n            }\n        }\n        \n        Map<Integer, Integer> freq = new HashMap<>();\n        for (int num : lst) {\n            freq.put(num, freq.getOrDefault(num, 0) + 1);\n        }\n        \n        for (int count : freq.values()) {\n            if (count > 2) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}\n",
            "import java.util.List;\n\nclass Global {\n    public static String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int l = Math.max(interval1.get(0), interval2.get(0));\n        int r = Math.min(interval1.get(1), interval2.get(1));\n        int length = r - l;\n        return (length > 0 && isPrime(length)) ? \"YES\" : \"NO\";\n    }\n\n    private static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) return Optional.ofNullable(null);\n        for (Integer n : arr) {\n            if (n == 0) return Optional.of(0);\n        }\n        int sign = arr.stream().filter(n -> n < 0).count() % 2 == 1 ? -1 : 1;\n        int sumAbs = arr.stream().mapToInt(Math::abs).sum();\n        return Optional.of(sign * sumAbs);\n    }\n}\n",
            "class Global {\n    public static List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int minVal = n * n + 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    List<Integer> temp = new ArrayList<>();\n                    if (i != 0) temp.add(grid.get(i - 1).get(j));\n                    if (j != 0) temp.add(grid.get(i).get(j - 1));\n                    if (i != n - 1) temp.add(grid.get(i + 1).get(j));\n                    if (j != n - 1) temp.add(grid.get(i).get(j + 1));\n                    minVal = Math.min(minVal, Collections.min(temp));\n                }\n            }\n        }\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            result.add((i % 2 == 0) ? 1 : minVal);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> tri(int n) {\n        if (n == 0) {\n            return Arrays.asList(1);\n        }\n        List<Integer> seq = new ArrayList<>(Arrays.asList(1, 3));\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                seq.add(i / 2 + 1);\n            } else {\n                int nextValue = seq.get(i - 1) + seq.get(i - 2) + (i + 3) / 2;\n                seq.add(nextValue);\n            }\n        }\n        return seq;\n    }\n}\n",
            "class Global {\n    public static int digits(int n) {\n        String numStr = Integer.toString(n);\n        int product = 1;\n        boolean hasOdd = false;\n        \n        for (char c : numStr.toCharArray()) {\n            int digit = Character.getNumericValue(c);\n            if (digit % 2 != 0) {\n                product *= digit;\n                hasOdd = true;\n            }\n        }\n        \n        return hasOdd ? product : 0;\n    }\n}\n",
            "class Global {\n    public static boolean isNested(String s) {\n        List<Integer> openIdx = new ArrayList<>();\n        List<Integer> closeIdx = new ArrayList<>();\n        \n        for (int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n            if (ch == '[') {\n                openIdx.add(i);\n            } else if (ch == ']') {\n                closeIdx.add(i);\n            }\n        }\n        \n        Collections.reverse(closeIdx);\n        int cnt = 0;\n        int l = closeIdx.size();\n        int i = 0;\n        \n        for (int idx : openIdx) {\n            if (i < l && idx < closeIdx.get(i)) {\n                cnt += 1;\n                i += 1;\n            }\n        }\n        \n        return cnt >= 2;\n    }\n}\n",
            "class Global {\n    public static int sumSquares(List<Double> lst) {\n         return lst.stream().mapToInt(n -> (int) Math.pow(Math.ceil(n), 2)).sum();\n    }\n}\n",
            "class Global {\n    public static boolean checkIfLastCharIsALetter(String txt) {\n        if (txt == null || txt.isEmpty()) {\n            return false;\n        }\n        int lastIndex = txt.lastIndexOf(' ');\n        String last = txt.substring(lastIndex + 1);\n        return last.length() == 1 && Character.isLetter(last.charAt(0));\n    }\n}\n",
            "class Global {\n    public static int canArrange(List<Integer> arr) {\n        if (arr.size() <= 1) return -1;\n        List<Integer> idx = new ArrayList<>();\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                idx.add(i);\n            }\n        }\n        return idx.isEmpty() ? -1 : Collections.max(idx);\n    }\n}\n",
            "class Global {\n    public static List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst) {\n        List<Integer> neg = lst.stream().filter(i -> i < 0).collect(Collectors.toList());\n        List<Integer> pos = lst.stream().filter(i -> i > 0).collect(Collectors.toList());\n        Optional<Integer> maxNeg = neg.isEmpty() ? Optional.empty() : Optional.of(neg.stream().max(Integer::compare).get());\n        Optional<Integer> minPos = pos.isEmpty() ? Optional.empty() : Optional.of(pos.stream().min(Integer::compare).get());\n        return Arrays.asList(maxNeg, minPos);\n    }\n}\n",
            "class Global {\n    public static Optional<Double> compareOne(Object a, Object b) {\n        double anyToReal(Object o) throws RuntimeException {\n            if (o instanceof String) {\n                return Double.parseDouble(((String) o).replace(',', '.'));\n            } else if (o instanceof Integer) {\n                return ((Integer) o).doubleValue();\n            } else if (o instanceof Double) {\n                return (Double) o;\n            } else {\n                throw new RuntimeException(\"Type Error\");\n            }\n        }\n\n        double a1 = anyToReal(a);\n        double b1 = anyToReal(b);\n        if (a1 == b1) {\n            return Optional.empty();\n        } else if (a1 > b1) {\n            return Optional.of(a1);\n        } else {\n            return Optional.of(b1);\n        }\n    }\n}\n",
            "class Global {\n    public static boolean isEqualToSumEven(int n) {\n        return n % 2 == 0 && n >= 8;\n    }\n}\n",
            "class Global {\n    public static int specialFactorial(int n) {\n        int fact = 1;\n        int result = 1;\n        for (int i = 1; i <= n; i++) {\n            fact *= i;\n            result *= fact;\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String fixSpaces(String txt) {\n        return txt.replaceAll(\"\\\\s{3,}\", \"-\").replaceAll(\" \", \"_\");\n    }\n}\n",
            "class Global {\n    public static String fileNameCheck(String fileName) {\n        List<String> suf = Arrays.asList(\"txt\", \"exe\", \"dll\");\n        String[] lst = fileName.split(\"\\\\.\");\n        if (lst.length != 2 || !suf.contains(lst[1]) || lst[0].length() == 0 || !Character.isLetter(lst[0].charAt(0)) || countDigits(lst[0]) > 3) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n\n    private static int countDigits(String str) {\n        int count = 0;\n        for (char c : str.toCharArray()) {\n            if (Character.isDigit(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n",
            "class Global {\n    public static int sumSquares(List<Integer> lst) {\n        int result = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                result += Math.pow(lst.get(i), 2);\n            } else if (i % 4 == 0) {\n                result += Math.pow(lst.get(i), 3);\n            } else {\n                result += lst.get(i);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        StringBuilder filteredWords = new StringBuilder();\n        \n        for (String word : words) {\n            if (isPrime(word.length())) {\n                if (filteredWords.length() > 0) {\n                    filteredWords.append(\" \");\n                }\n                filteredWords.append(word);\n            }\n        }\n        \n        return filteredWords.toString();\n    }\n\n    private static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static boolean simplify(String x, String n) {\n        String[] xs = x.split(\"/\");\n        String[] ns = n.split(\"/\");\n        int num = Integer.parseInt(xs[0]) * Integer.parseInt(ns[0]);\n        int den = Integer.parseInt(xs[1]) * Integer.parseInt(ns[1]);\n        return num % den == 0;\n    }\n}\n",
            "class Global {\n    public static List<Integer> orderByPoints(List<Integer> nums) {\n        return nums.stream()\n                   .sorted(Comparator.comparingInt(Global::digitsSum))\n                   .collect(Collectors.toList());\n    }\n\n    private static int digitsSum(int n) {\n        String nStr = Integer.toString(n);\n        if (n >= 0) {\n            return nStr.chars()\n                       .map(Character::getNumericValue)\n                       .sum();\n        } else {\n            int twoDigitPart = Integer.parseInt(nStr.substring(0, 2));\n            return twoDigitPart * 2 + digitsSum(Math.abs(n));\n        }\n    }\n}\n",
            "class Global {\n    public static int specialFilter(List<Integer> nums) {\n        String odds = \"13579\";\n        int count = 0;\n        for (int n : nums) {\n            if (n > 10 && isOdd(n) && odds.indexOf(Integer.toString(n).charAt(0)) != -1) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    private static boolean isOdd(int number) {\n        return number % 2 != 0;\n    }\n}\n",
            "class Global {\n    public static int getMaxTriples(int n) {\n        int[] c = {0, 0, 0};\n        for (int i = 1; i <= n; i++) {\n            int a = i * i - i + 1;\n            c[a % 3]++;\n        }\n        return c[0] * c[1] * c[2] + ((c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6);\n    }\n}\n",
            "class Global {\n    public static List<String> bf(String planet1, String planet2) {\n        List<String> names = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        if (!names.contains(planet1) || !names.contains(planet2)) {\n            return new ArrayList<>();\n        }\n        \n        int l = names.indexOf(planet1);\n        int r = names.indexOf(planet2);\n        \n        if (l > r) {\n            int temp = l;\n            l = r;\n            r = temp;\n        }\n        \n        if (l == r) {\n            return new ArrayList<>();\n        }\n     \n        return names.subList(l + 1, r);\n    }\n}\n",
            "class Global {\n    public static List<String> sortedListSum(List<String> lst) {\n        return lst.stream()\n                   .filter(s -> s.length() % 2 == 0)\n                   .sorted(Comparator.comparingInt(String::length).thenComparing(Comparator.naturalOrder()))\n                   .collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static int xOrY(int n, int x, int y) {\n        if (n < 2) return y;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) return y;\n        }\n        return x;\n    }\n}\n",
            "class Global {\n    public static int doubleTheDifference(List<Double> lst) {\n        return (int) lst.stream()\n            .filter(n -> n >= 0 && (n % 2 == 1))\n            .mapToDouble(n -> n * n)\n            .sum();\n    }\n}\n",
            "class Global {\n    public static List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            int diff = Math.abs(game.get(i) - guess.get(i));\n            result.add(diff);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String strongestExtension(String className, List<String> extensions) {\n        int max_s = Integer.MIN_VALUE;\n        String max_ext = \"\";\n        for (String ext : extensions) {\n            int upper = 0;\n            int lower = 0;\n            for (char c : ext.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    upper++;\n                } else if (Character.isLowerCase(c)) {\n                    lower++;\n                }\n            }\n            int s = upper - lower;\n            if (s > max_s) {\n                max_s = s;\n                max_ext = ext;\n            }\n        }\n        return className + \".\" + max_ext;\n    }\n}\n",
            "class Global {\n    public static boolean cycpatternCheck(String a, String b) {\n        if (a.length() < b.length()) {\n            return false;\n        }\n        for (int i = 0; i < b.length(); i++) {\n            String rotated = b.substring(i) + b.substring(0, i);\n            if (a.contains(rotated)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "import java.util.ArrayList;\nimport java.util.List;\n\nclass Global {\n    public static List<Integer> evenOddCount(int num) {\n        String ds = Integer.toString(Math.abs(num));\n        int even = 0;\n        for (char c : ds.toCharArray()) {\n            if ((c - '0') % 2 == 0) {\n                even++;\n            }\n        }\n        List<Integer> result = new ArrayList<>();\n        result.add(even);\n        result.add(ds.length() - even);\n        return result;\n    }\n}\n",
            "class Global {\n    public static String intToMiniRoman(int num) {\n        int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        String[] numerals = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n        StringBuilder res = new StringBuilder();\n        for (int i = 0; i < values.length; i++) {\n            while (num >= values[i]) {\n                res.append(numerals[i]);\n                num -= values[i];\n            }\n        }\n        return res.toString();\n    }\n}\n",
            "class Global {\n    public static boolean rightAngleTriangle(int a, int b, int c) {\n        int[] s = {a, b, c};\n        java.util.Arrays.sort(s);\n        return s[0] * s[0] + s[1] * s[1] == s[2] * s[2];\n    }\n}\n",
            "class Global {\n    public static String findMax(List<String> words) {\n        int max_cnt = 0;\n        String max_w = \"\";\n        for (String w : words) {\n            int cnt = (int) w.chars().distinct().count();\n            if (cnt > max_cnt) {\n                max_cnt = cnt;\n                max_w = w;\n            } else if (cnt == max_cnt) {\n                max_w = min(max_w, w);\n            }\n        }\n        return max_w;\n    }\n}\n",
            "class Global {\n    public static List<Integer> eat(int num, int need, int remaining) {\n        if (need <= remaining) {\n            return Arrays.asList(num + need, remaining - need);\n        } else {\n            return Arrays.asList(num + remaining, 0);\n        }\n    }\n}\n",
            "class Global {\n    public static int doAlgebra(List<String> operators, List<Integer> operands) {\n        List<String> ops = new ArrayList<>(operators);\n        List<Integer> nums = new ArrayList<>(operands);\n        int i = ops.size() - 1;\n        while (i >= 0) {\n            if (ops.get(i).equals(\"**\")) {\n                nums.set(i, (int) Math.pow(nums.get(i), nums.get(i + 1)));\n                nums.remove(i + 1);\n                ops.remove(i);\n            }\n            i -= 1;\n        }\n        i = 0;\n        while (i < ops.size()) {\n            if (ops.get(i).equals(\"*\")) {\n                nums.set(i, nums.get(i) * nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i -= 1;\n            } else if (ops.get(i).equals(\"//\")) {\n                nums.set(i, nums.get(i) / nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i -= 1;\n            }\n            i += 1;\n        }\n        i = 0;\n        while (i < ops.size()) {\n            if (ops.get(i).equals(\"+\")) {\n                nums.set(i, nums.get(i) + nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i -= 1;\n            } else if (ops.get(i).equals(\"-\")) {\n                nums.set(i, nums.get(i) - nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i -= 1;\n            }\n            i += 1;\n        }\n        return nums.get(0);\n    }\n}\n",
            "class Global {\n    public static String solve(String s) {\n        if (!s.chars().anyMatch(ch -> Character.isLetter(ch))) {\n            return new StringBuilder(s).reverse().toString();\n        }\n\n        StringBuilder result = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (!Character.isLetter(ch)) {\n                result.append(ch);\n            } else if (Character.isUpperCase(ch)) {\n                result.append(Character.toLowerCase(ch));\n            } else if (Character.isLowerCase(ch)) {\n                result.append(Character.toUpperCase(ch));\n            }\n        }\n\n        return result.toString();\n    }\n}\n",
            "class Global {\n    public static Optional<String> stringToMd5(String txt) {\n        if (txt.isEmpty()) {\n            return Optional.empty();\n        }\n        MessageDigest md5Hash;\n        try {\n            md5Hash = MessageDigest.getInstance(\"MD5\");\n        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n        }\n        byte[] txtBytes = txt.getBytes(StandardCharsets.UTF_8);\n        md5Hash.update(txtBytes);\n        byte[] digest = md5Hash.digest();\n        StringBuilder hexString = new StringBuilder();\n        for (byte b : digest) {\n            String hex = Integer.toHexString(0xff & b);\n            if (hex.length() == 1) {\n                hexString.append('0');\n            }\n            hexString.append(hex);\n        }\n        return Optional.of(hexString.toString());\n    }\n}\n",
            "class Global {\n    public static List<Integer> generateIntegers(int a, int b) {\n        int lower = Math.max(2, Math.min(a, b));\n        int upper = Math.min(8, Math.max(a, b));\n        List<Integer> result = new ArrayList<>();\n        for (int i = lower; i <= upper; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}\n"
        ]
    }
}