{
    "python": {
        "cpp": [
            "```cpp\nbool hasCloseElements(const vector<double>& numbers, double threshold) {\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        for (size_t j = i + 1; j < numbers.size(); ++j) {\n            if (abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n```",
            "```cpp\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nvector<string> separateParenGroups(const string& paren_string) {\n    vector<string> groups;\n    vector<char> stk;\n    string current_group = \"\";\n    string parens = paren_string;\n    for (char ch : parens) {\n        if (ch == '(') {\n            stk.push_back(ch);\n            current_group += ch;\n        } else if (ch == ')') {\n            stk.pop_back();\n            current_group += ch;\n            if (stk.empty()) {\n                groups.push_back(current_group);\n                current_group = \"\";\n            }\n        }\n    }\n    return groups;\n}\n```",
            "```cpp\n#include <cmath>\n\ndouble truncateNumber(double num) {\n    return num - std::floor(num);\n}\n```",
            "```cpp\nbool belowZero(const vector<int>& operations) {\n    int balance = 0;\n    for (int op : operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n```",
            "```cpp\ndouble meanAbsoluteDeviation(const vector<double>& numbers) {\n    double sum = 0.0;\n    for (const auto& num : numbers) {\n        sum += num;\n    }\n    double mean = sum / numbers.size();\n    double deviation = 0.0;\n    for (const auto& num : numbers) {\n        deviation += abs(num - mean);\n    }\n    return deviation / numbers.size();\n}\n```",
            "```cpp\n#include <vector>\n\nusing namespace std;\n\nvector<int> intersperse(const vector<int>& numbers, int delimiter) {\n    vector<int> result;\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        if (i != 0) {\n            result.push_back(delimiter);\n        }\n        result.push_back(numbers[i]);\n    }\n    return result;\n}\n```",
            "```cpp\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nvector<int> parseNestedParens(const string& paren_string) {\n    vector<int> result;\n    size_t start = 0, end = 0;\n    while ((start = paren_string.find_first_not_of(' ', start)) != string::npos) {\n        end = paren_string.find(' ', start);\n        int max_depth = 0, depth = 0;\n        for (size_t i = start; i < (end == string::npos ? paren_string.size() : end); ++i) {\n            char ch = paren_string[i];\n            if (ch == '(') {\n                depth += 1;\n                max_depth = max(max_depth, depth);\n            } else if (ch == ')') {\n                depth -= 1;\n            }\n        }\n        result.push_back(max_depth);\n        start = end + 1;\n    }\n    return result;\n}\n```",
            "```cpp\nvector<string> filterBySubstring(const vector<string>& strs, const string& substring) {\n    vector<string> result;\n    for (const auto& s : strs) {\n        if (s.find(substring) != string::npos) {\n            result.push_back(s);\n        }\n    }\n    return result;\n}\n```",
            "```cpp\n#include <numeric>\n#include <vector>\n\nusing namespace std;\n\nvector<int> sumProduct(const vector<int>& numbers) {\n    int n_sum = accumulate(numbers.begin(), numbers.end(), 0);\n    int n_product = accumulate(numbers.begin(), numbers.end(), 1, multiplies<int>());\n    return {n_sum, n_product};\n}\n```",
            "```cpp\nvector<int> rollingMax(const vector<int>& numbers) {\n    int max_so_far = numeric_limits<int>::min();\n    vector<int> result;\n    for (int num : numbers) {\n        max_so_far = max(max_so_far, num);\n        result.push_back(max_so_far);\n    }\n    return result;\n}\n```",
            "```cpp\n#include <string>\nusing namespace std;\n\nbool is_palindrome(const string& s) {\n    int left = 0;\n    int right = s.length() - 1;\n    while (left < right) {\n        if (s[left] != s[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}\n\nstring make_palindrome(const string& s) {\n    if (is_palindrome(s)) {\n        return s;\n    }\n    for (size_t i = 0; i < s.length(); ++i) {\n        if (is_palindrome(s.substr(i))) {\n            string prefix = s.substr(0, i);\n            reverse(prefix.begin(), prefix.end());\n            return s + prefix;\n        }\n    }\n    return \"\";\n}\n```",
            "```cpp\nstring stringXor(const string& a, const string& b) {\n    string result;\n    for (size_t i = 0; i < a.length(); ++i) {\n        result += (a[i] == b[i]) ? '0' : '1';\n    }\n    return result;\n}\n```",
            "```cpp\n#include <string>\n#include <vector>\n#include <optional>\n\nstd::optional<std::string> longest(const std::vector<std::string>& strs) {\n    if (strs.empty()) {\n        return std::nullopt;\n    }\n    std::string longest_s = strs[0];\n    for (const auto& s : strs) {\n        if (s.length() > longest_s.length()) {\n            longest_s = s;\n        }\n    }\n    return longest_s;\n}\n```",
            "```cpp\nint greatestCommonDivisor(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return greatestCommonDivisor(b, a % b);\n    }\n}\n```",
            "```cpp\n#include <string>\n#include <vector>\n\nstd::vector<std::string> allPrefixes(const std::string& s) {\n    std::vector<std::string> prefixes;\n    for (size_t i = 0; i < s.length(); ++i) {\n        prefixes.push_back(s.substr(0, i + 1));\n    }\n    return prefixes;\n}\n```",
            "```cpp\n#include <string>\n#include <sstream>\n\nstd::string stringSequence(int n) {\n    std::ostringstream oss;\n    for (int i = 0; i <= n; ++i) {\n        oss << i;\n        if (i < n) {\n            oss << \" \";\n        }\n    }\n    return oss.str();\n}\n```",
            "```cpp\nint countDistinctCharacters(const string& s) {\n    unordered_set<char> uniqueChars;\n    for (char c : s) {\n        uniqueChars.insert(tolower(c));\n    }\n    return uniqueChars.size();\n}\n```",
            "```cpp\n#include <string>\n#include <vector>\n#include <unordered_map>\n\nusing namespace std;\n\nvector<int> parseMusic(const string& music_string) {\n    unordered_map<string, int> durations = {{\"o\", 4}, {\"o|\", 2}, {\".|\", 1}};\n    vector<int> result;\n    size_t start = 0;\n    size_t end = 0;\n    \n    while ((end = music_string.find(' ', start)) != string::npos) {\n        string note = music_string.substr(start, end - start);\n        if (durations.find(note) != durations.end()) {\n            result.push_back(durations[note]);\n        }\n        start = end + 1;\n    }\n    \n    // Add the last note\n    string last_note = music_string.substr(start);\n    if (durations.find(last_note) != durations.end()) {\n        result.push_back(durations[last_note]);\n    }\n    \n    return result;\n}\n```",
            "```cpp\nint howManyTimes(const string& s, const string& substring) {\n    int times = 0;\n    for (size_t i = 0; i <= s.length() - substring.length(); ++i) {\n        if (s.substr(i, substring.length()) == substring) {\n            ++times;\n        }\n    }\n    return times;\n}\n```",
            "```cpp\n#include <unordered_map>\n#include <vector>\n#include <sstream>\n#include <algorithm>\n\nusing namespace std;\n\nstring sortNumbers(const string& numbers) {\n    unordered_map<string, int> num_dict = {\n        {\"zero\", 0},\n        {\"one\", 1},\n        {\"two\", 2},\n        {\"three\", 3},\n        {\"four\", 4},\n        {\"five\", 5},\n        {\"six\", 6},\n        {\"seven\", 7},\n        {\"eight\", 8},\n        {\"nine\", 9}\n    };\n\n    vector<string> num_list;\n    stringstream ss(numbers);\n    string word;\n\n    while (ss >> word) {\n        if (num_dict.find(word) != num_dict.end()) {\n            num_list.push_back(word);\n        }\n    }\n\n    sort(num_list.begin(), num_list.end(), [&](const string& a, const string& b) {\n        return num_dict[a] < num_dict[b];\n    });\n\n    string result;\n    for (size_t i = 0; i < num_list.size(); ++i) {\n        if (i > 0) {\n            result += \" \";\n        }\n        result += num_list[i];\n    }\n\n    return result;\n}\n```",
            "```cpp\nvector<double> findClosestElements(const vector<double>& numbers) {\n    if (numbers.size() < 2) {\n        return {};\n    }\n    \n    vector<double> sorted_numbers = numbers;\n    sort(sorted_numbers.begin(), sorted_numbers.end());\n    \n    double min_diff = numeric_limits<double>::max();\n    vector<double> closest_pair;\n    \n    for (size_t i = 1; i < sorted_numbers.size(); ++i) {\n        double diff = sorted_numbers[i] - sorted_numbers[i - 1];\n        if (diff < min_diff) {\n            min_diff = diff;\n            closest_pair = {sorted_numbers[i - 1], sorted_numbers[i]};\n        }\n    }\n    \n    return closest_pair;\n}\n```",
            "```cpp\nvector<double> rescaleToUnit(const vector<double>& numbers) {\n    double min_num = *min_element(numbers.begin(), numbers.end());\n    double max_num = *max_element(numbers.begin(), numbers.end());\n    if (min_num == max_num) {\n        return vector<double>(numbers.size(), 0.0);\n    } else {\n        vector<double> rescaled;\n        for (double num : numbers) {\n            rescaled.push_back((num - min_num) / (max_num - min_num));\n        }\n        return rescaled;\n    }\n}\n```",
            "```cpp\n#include <any>\n#include <vector>\n\nusing namespace std;\n\nvector<int> filterIntegers(const vector<any>& values) {\n    vector<int> result;\n    for (const auto& value : values) {\n        if (value.type() == typeid(int)) {\n            result.push_back(any_cast<int>(value));\n        }\n    }\n    return result;\n}\n```",
            "```cpp\nint strLength(const string& s) {\n    return s.length();\n}\n```",
            "```cpp\nint largestDivisor(int n) {\n    for (int i = 2; i < n; ++i) {\n        if (n % i == 0) {\n            return n / i;\n        }\n    }\n    return 1;\n}\n```",
            "```cpp\n#include <vector>\n\nstd::vector<int> factorize(int n) {\n    std::vector<int> factors;\n    int divisor = 2;\n    while (divisor <= n) {\n        if (n % divisor == 0) {\n            factors.push_back(divisor);\n            n /= divisor;\n        } else {\n            divisor += 1;\n        }\n    }\n    return factors;\n}\n```",
            "```cpp\n#include <unordered_map>\n#include <vector>\n\nusing namespace std;\n\nvector<int> removeDuplicates(const vector<int>& numbers) {\n    unordered_map<int, int> counts;\n    for (int num : numbers) {\n        counts[num]++;\n    }\n    vector<int> res;\n    for (int num : numbers) {\n        if (counts[num] == 1) {\n            res.push_back(num);\n        }\n    }\n    return res;\n}\n```",
            "```cpp\nstring flipCase(const string& s) {\n    string flipped;\n    for (char ch : s) {\n        if (!isalpha(ch)) {\n            flipped += ch;\n        } else if (islower(ch)) {\n            flipped += toupper(ch);\n        } else if (isupper(ch)) {\n            flipped += tolower(ch);\n        }\n    }\n    return flipped;\n}\n```",
            "```cpp\nstring concatenate(const vector<string>& strs) {\n    string result;\n    for (const auto& str : strs) {\n        result += str;\n    }\n    return result;\n}\n```",
            "```cpp\nvector<string> filterByPrefix(const vector<string>& strs, const string& prefix_str) {\n    vector<string> result;\n    for (const auto& s : strs) {\n        if (s.substr(0, prefix_str.size()) == prefix_str) {\n            result.push_back(s);\n        }\n    }\n    return result;\n}\n```",
            "```cpp\nvector<int> getPositive(const vector<int>& l) {\n    vector<int> result;\n    for (int num : l) {\n        if (num > 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\n```",
            "```cpp\n#include <cmath>\n\nbool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n); ++i) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n```",
            "```cpp\n#include <vector>\n#include <cmath>\n\nusing namespace std;\n\ndouble poly(const vector<int>& xs, double x) {\n    double res = 0.0;\n    for (int i = 0; i < xs.size(); ++i) {\n        res += xs[i] * pow(x, i);\n    }\n    return res;\n}\n\ndouble findZero(const vector<int>& xs) {\n    double x1 = 1.0, x2 = -1.0;\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2;\n        x2 *= 2;\n    }\n    while (abs(x1 - x2) > 1e-10) {\n        double mid = (x1 + x2) / 2;\n        if (poly(xs, mid) == 0) {\n            return mid;\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2;\n}\n```",
            "```cpp\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<int> sortThird(const vector<int>& l) {\n    vector<int> sorted_third;\n    for (size_t i = 0; i < l.size(); i += 3) {\n        sorted_third.push_back(l[i]);\n    }\n    sort(sorted_third.begin(), sorted_third.end());\n\n    vector<int> result;\n    for (size_t i = 0, j = 0; i < l.size(); ++i) {\n        if (i % 3 == 0) {\n            result.push_back(sorted_third[j++]);\n        } else {\n            result.push_back(l[i]);\n        }\n    }\n    return result;\n}\n```",
            "```cpp\nvector<int> listUnique(const vector<int>& l) {\n    set<int> uniqueElements(l.begin(), l.end());\n    vector<int> result(uniqueElements.begin(), uniqueElements.end());\n    sort(result.begin(), result.end());\n    return result;\n}\n```",
            "```cpp\nint maxElement(const vector<int>& l) {\n    if (l.empty()) {\n        return 0;\n    }\n    return *max_element(l.begin(), l.end());\n}\n```",
            "```cpp\nint fizzBuzz(int n) {\n    int cnt = 0;\n    for (int i = 0; i < n; ++i) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            std::string str_i = std::to_string(i);\n            cnt += std::count(str_i.begin(), str_i.end(), '7');\n        }\n    }\n    return cnt;\n}\n```",
            "```cpp\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<int> sortEven(const vector<int>& l) {\n    vector<int> even_elements;\n    for (size_t i = 0; i < l.size(); i += 2) {\n        even_elements.push_back(l[i]);\n    }\n    sort(even_elements.begin(), even_elements.end());\n\n    vector<int> result;\n    size_t even_index = 0;\n    for (size_t i = 0; i < l.size(); ++i) {\n        if (i % 2 == 0) {\n            result.push_back(even_elements[even_index++]);\n        } else {\n            result.push_back(l[i]);\n        }\n    }\n    return result;\n}\n```",
            "```cpp\n#include <string>\nusing namespace std;\n\nstring encodeCyclic(const string& s) {\n    string result;\n    for (size_t i = 0; i < s.length(); i += 3) {\n        if (i + 3 > s.length()) {\n            result += s.substr(i);\n        } else {\n            result += s.substr(i + 1, 2);\n            result += s[i];\n        }\n    }\n    return result;\n}\n\nstring decodeCyclic(const string& s) {\n    return encodeCyclic(encodeCyclic(s));\n}\n```",
            "```cpp\n#include <cmath>\nusing namespace std;\n\nbool is_prime(int n) {\n    if (n < 2)\n        return false;\n    for (int i = 2; i <= floor(sqrt(n)); ++i) {\n        if (n % i == 0)\n            return false;\n    }\n    return true;\n}\n\nint primeFib(int n) {\n    vector<int> f = {0, 1};\n    int cnt = 0;\n    while (cnt < n) {\n        f[0] = f[1];\n        f[1] += f[0];\n        if (is_prime(f[1]))\n            ++cnt;\n    }\n    return f[1];\n}\n```",
            "```cpp\nbool triplesSumToZero(const vector<int>& l) {\n    for (int i = 0; i < l.size(); ++i) {\n        for (int j = i + 1; j < l.size(); ++j) {\n            for (int k = j + 1; k < l.size(); ++k) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n```",
            "```cpp\nint carRaceCollision(int n) {\n    return n * n;\n}\n```",
            "```cpp\nvector<int> incrList(const vector<int>& l) {\n    vector<int> result;\n    for (int i : l) {\n        result.push_back(i + 1);\n    }\n    return result;\n}\n```",
            "```cpp\nbool pairsSumToZero(const vector<int>& l) {\n    unordered_set<int> seen;\n    for (int num : l) {\n        if (seen.count(-num)) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    return false;\n}\n```",
            "```cpp\nstring changeBase(int x, int bas) {\n    if (x == 0) {\n        return \"0\";\n    }\n    string digits;\n    while (x > 0) {\n        digits += to_string(x % bas);\n        x /= bas;\n    }\n    reverse(digits.begin(), digits.end());\n    return digits;\n}\n```",
            "```cpp\ndouble triangleArea(int a, int h) {\n    return a * h / 2.0;\n}\n```",
            "```cpp\nint fib4(int n) {\n    int fib[4] = {0, 0, 2, 0};\n    for (int i = 4; i <= n; ++i) {\n        fib[i % 4] = fib[0] + fib[1] + fib[2] + fib[3];\n    }\n    return fib[n % 4];\n}\n```",
            "```cpp\ndouble median(const vector<double>& l) {\n    vector<double> sl = l;\n    sort(sl.begin(), sl.end());\n    if (sl.size() % 2 != 0) {\n        return sl[sl.size() / 2];\n    } else {\n        return (sl[sl.size() / 2] + sl[sl.size() / 2 - 1]) / 2.0;\n    }\n}\n```",
            "```cpp\nbool isPalindrome(const string& txt) {\n    return txt == string(txt.rbegin(), txt.rend());\n}\n```",
            "```cpp\nint modp(int n, int p) {\n    int ret = 1;\n    for (int i = 0; i < n; ++i) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}\n```",
            "```cpp\nstring encodeShift(const string& s) {\n    string result;\n    for (char ch : s) {\n        result += char(((ch - 'a' + 5) % 26) + 'a');\n    }\n    return result;\n}\n\nstring decodeShift(const string& s) {\n    string result;\n    for (char ch : s) {\n        result += char(((ch - 'a' + 21) % 26) + 'a');\n    }\n    return result;\n}\n```",
            "```cpp\nstring removeVowels(const string& txt) {\n    string vowels = \"aeiouAEIOU\";\n    string result;\n    for (char char : txt) {\n        if (vowels.find(char) == string::npos) {\n            result += char;\n        }\n    }\n    return result;\n}\n```",
            "```cpp\nbool belowThreshold(const vector<int>& l, int t) {\n    return all_of(l.begin(), l.end(), [t](int x) { return x < t; });\n}\n```",
            "```cpp\nint add(int x, int y) {\n    return x + y;\n}\n```",
            "```cpp\nbool sameChars(const string& s0, const string& s1) {\n    unordered_set<char> set0(s0.begin(), s0.end());\n    unordered_set<char> set1(s1.begin(), s1.end());\n    return set0 == set1;\n}\n```",
            "```cpp\nint fib(int n) {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n```",
            "```cpp\nbool correctBracketing(const string& brackets) {\n    int depth = 0;\n    for (char b : brackets) {\n        if (b == '<') {\n            depth += 1;\n        } else if (b == '>') {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n```",
            "```cpp\nbool monotonic(const vector<int>& l) {\n    vector<int> diff;\n    for (size_t i = 1; i < l.size(); ++i) {\n        diff.push_back(l[i] - l[i - 1]);\n    }\n    return all_of(diff.begin(), diff.end(), [](int x) { return x <= 0; }) ||\n           all_of(diff.begin(), diff.end(), [](int x) { return x >= 0; });\n}\n```",
            "```cpp\n#include <vector>\n#include <set>\n#include <algorithm>\n\nusing namespace std;\n\nvector<int> common(const vector<int>& l1, const vector<int>& l2) {\n    set<int> s1(l1.begin(), l1.end());\n    set<int> s2(l2.begin(), l2.end());\n    vector<int> result;\n    set_intersection(s1.begin(), s1.end(), s2.begin(), s2.end(), back_inserter(result));\n    return result;\n}\n```",
            "```cpp\nint largestPrimeFactor(int n) {\n    int i = 2;\n    while (i * i <= n) {\n        if (n % i) {\n            i += 1;\n        } else {\n            n /= i;\n        }\n    }\n    return n;\n}\n```",
            "```cpp\nint sumToN(int n) {\n    return (n * (n + 1)) / 2;\n}\n```",
            "```cpp\nbool correctBracketing(const string& brackets) {\n    int depth = 0;\n    for (char b : brackets) {\n        if (b == '(') {\n            depth += 1;\n        } else if (b == ')') {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n```",
            "```cpp\nvector<int> derivative(const vector<int>& xs) {\n    vector<int> result;\n    for (int i = 1; i < xs.size(); ++i) {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\n```",
            "```cpp\nint fibfib(int n) {\n    if (n <= 1) return 0;\n    int a = 0, b = 0, c = 1;\n    while (n > 2) {\n        a = b;\n        b = c;\n        c = a + b + c;\n        n--;\n    }\n    return c;\n}\n```",
            "```cpp\nint vowelsCount(const string& s) {\n    string vowels = \"aeiou\";\n    int cnt = 0;\n    for (int i = 0; i < s.length(); ++i) {\n        if (vowels.find(tolower(s[i])) != string::npos || (i == s.length() - 1 && tolower(s[i]) == 'y')) {\n            ++cnt;\n        }\n    }\n    return cnt;\n}\n```",
            "```cpp\nstring circularShift(int x, int shift) {\n    string x_str = to_string(x);\n    if (shift > x_str.length()) {\n        return string(x_str.rbegin(), x_str.rend());\n    } else {\n        return x_str.substr(x_str.length() - shift) + x_str.substr(0, x_str.length() - shift);\n    }\n}\n```",
            "```cpp\nint digitSum(const string& s) {\n    int sum = 0;\n    for (char c : s) {\n        if (isupper(c)) {\n            sum += static_cast<int>(c);\n        }\n    }\n    return sum;\n}\n```",
            "```cpp\nint fruitDistribution(const string& s, int n) {\n    vector<string> words;\n    stringstream ss(s);\n    string word;\n    while (ss >> word) {\n        words.push_back(word);\n    }\n    int apples = stoi(words[words.size() - 2]);\n    int oranges = stoi(words[words.size() - 1]);\n    return n - apples - oranges;\n}\n```",
            "```cpp\nvector<int> pluck(const vector<int>& arr) {\n    vector<int> evens;\n    for (int n : arr) {\n        if (n % 2 == 0) {\n            evens.push_back(n);\n        }\n    }\n    if (evens.empty()) {\n        return {};\n    }\n    int min_even = *min_element(evens.begin(), evens.end());\n    auto it = find(arr.begin(), arr.end(), min_even);\n    return {min_even, static_cast<int>(it - arr.begin())};\n}\n```",
            "```cpp\n#include <vector>\n#include <unordered_map>\n#include <algorithm>\n\nint search(const std::vector<int>& lst) {\n    std::unordered_map<int, int> freqs;\n    for (int n : lst) {\n        freqs[n]++;\n    }\n    std::vector<int> good_vals;\n    for (const auto& kv : freqs) {\n        if (kv.second >= kv.first) {\n            good_vals.push_back(kv.first);\n        }\n    }\n    return !good_vals.empty() ? *std::max_element(good_vals.begin(), good_vals.end()) : -1;\n}\n```",
            "```cpp\nvector<int> strangeSortList(const vector<int>& lst) {\n    vector<int> sl = lst;\n    sort(sl.begin(), sl.end());\n    vector<int> result;\n    int left = 0, right = sl.size() - 1;\n    while (left <= right) {\n        result.push_back(sl[left]);\n        left += 1;\n        if (left <= right) {\n            result.push_back(sl[right]);\n            right -= 1;\n        }\n    }\n    return result;\n}\n```",
            "```cpp\n#include <cmath>\n\ndouble triangleArea(int a, int b, int c) {\n    if (a + b > c && a + c > b && b + c > a) {\n        double s = (a + b + c) / 2.0;\n        return sqrt(s * (s - a) * (s - b) * (s - c));\n    } else {\n        return -1.0;\n    }\n}\n```",
            "```cpp\nbool willItFly(const vector<int>& q, int w) {\n    if (q.empty()) {\n        return false;\n    }\n    bool is_palin = true;\n    for (size_t i = 0; i < q.size() / 2; ++i) {\n        if (q[i] != q[q.size() - i - 1]) {\n            is_palin = false;\n            break;\n        }\n    }\n    int total = accumulate(q.begin(), q.end(), 0);\n    return is_palin && total <= w;\n}\n```",
            "```cpp\nint smallestChange(const vector<int>& arr) {\n    int ans = 0;\n    for (int i = 0; i < arr.size() / 2; ++i) {\n        if (arr[i] != arr[arr.size() - i - 1]) {\n            ++ans;\n        }\n    }\n    return ans;\n}\n```",
            "```cpp\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nvector<string> totalMatch(const vector<string>& lst1, const vector<string>& lst2) {\n    int cnt1 = 0;\n    int cnt2 = 0;\n    \n    for (const string& s : lst1) {\n        cnt1 += s.length();\n    }\n    \n    for (const string& s : lst2) {\n        cnt2 += s.length();\n    }\n    \n    return cnt1 <= cnt2 ? lst1 : lst2;\n}\n```",
            "```cpp\n#include <cmath>\n\nbool is_prime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i <= std::floor(std::sqrt(n)); ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nbool isMultiplyPrime(int a) {\n    int cnt = 0;\n    for (int i = 2; i <= a; ++i) {\n        if (is_prime(i)) {\n            while (a % i == 0) {\n                ++cnt;\n                a /= i;\n            }\n        }\n    }\n    return cnt == 3;\n}\n```",
            "```cpp\nbool isSimplePower(int x, int n) {\n    if (n < 2) {\n        return x == n;\n    }\n    int tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp == x;\n}\n```",
            "```cpp\nbool isCube(int a) {\n    a = abs(a);\n    int root = static_cast<int>(round(pow(a, 1.0 / 3.0)));\n    return root * root * root == a;\n}\n```",
            "```cpp\nint hexKey(const string& num) {\n    int count = 0;\n    for (char x : num) {\n        if (x == '2' || x == '3' || x == '5' || x == '7' || x == 'B' || x == 'D') {\n            count++;\n        }\n    }\n    return count;\n}\n```",
            "```cpp\nstring decimalToBinary(int dec) {\n    string binary =bitset<32>(dec).to_string();\n    binary.erase(0, binary.find_first_not_of('0'));\n    return \"db\" + binary + \"db\";\n}\n```",
            "```cpp\nbool isHappy(const string& s) {\n    if (s.length() < 3) {\n        return false;\n    }\n    for (size_t i = 0; i < s.length() - 2; ++i) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n```",
            "```cpp\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nvector<string> numericalLetterGrade(const vector<double>& grades) {\n    vector<string> result;\n    for (double g : grades) {\n        if (g == 4.0) {\n            result.push_back(\"A+\");\n        } else if (g > 3.7) {\n            result.push_back(\"A\");\n        } else if (g > 3.3) {\n            result.push_back(\"A-\");\n        } else if (g > 3.0) {\n            result.push_back(\"B+\");\n        } else if (g > 2.7) {\n            result.push_back(\"B\");\n        } else if (g > 2.3) {\n            result.push_back(\"B-\");\n        } else if (g > 2.0) {\n            result.push_back(\"C+\");\n        } else if (g > 1.7) {\n            result.push_back(\"C\");\n        } else if (g > 1.3) {\n            result.push_back(\"C-\");\n        } else if (g > 1.0) {\n            result.push_back(\"D+\");\n        } else if (g > 0.7) {\n            result.push_back(\"D\");\n        } else if (g > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\n```",
            "```cpp\n#include <cmath>\nusing namespace std;\n\nbool primeLength(const string& s) {\n    int length = s.length();\n    if (length < 2) {\n        return false;\n    }\n    for (int i = 2; i <= floor(sqrt(length)); ++i) {\n        if (length % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n```",
            "```cpp\nint startsOneEnds(int n) {\n    if (n == 1) {\n        return 1;\n    }\n    return 2 * 9 * static_cast<int>(pow(10, n - 2));\n}\n```",
            "```cpp\n#include <bitset>\n#include <string>\n\nstd::string solve(int n) {\n    int digits_sum = 0;\n    while (n > 0) {\n        digits_sum += n % 10;\n        n /= 10;\n    }\n    return std::bitset<32>(digits_sum).to_string().substr(32 - std::bitset<32>(digits_sum).count());\n}\n```",
            "```cpp\nint add(const vector<int>& lst) {\n    int result = 0;\n    for (size_t i = 1; i < lst.size(); i += 2) {\n        if (lst[i] % 2 == 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n```",
            "```cpp\nstring antiShuffle(const string& s) {\n    string result;\n    stringstream ss(s);\n    string word;\n    \n    while (ss >> word) {\n        sort(word.begin(), word.end());\n        if (!result.empty()) {\n            result += \" \";\n        }\n        result += word;\n    }\n    \n    return result;\n}\n```",
            "```cpp\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<vector<int>> getRow(const vector<vector<int>>& lst, int x) {\n    vector<vector<int>> coords;\n    for (int i = 0; i < lst.size(); ++i) {\n        for (int j = 0; j < lst[i].size(); ++j) {\n            if (lst[i][j] == x) {\n                coords.push_back({i, j});\n            }\n        }\n    }\n    sort(coords.begin(), coords.end(), [](const vector<int>& a, const vector<int>& b) {\n        return a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]);\n    });\n    return coords;\n}\n```",
            "```cpp\nvector<int> sortArray(const vector<int>& arr) {\n    if (arr.empty()) {\n        return {};\n    }\n    if ((arr.front() + arr.back()) % 2 == 0) {\n        vector<int> sortedArr = arr;\n        sort(sortedArr.begin(), sortedArr.end(), greater<int>());\n        return sortedArr;\n    } else {\n        vector<int> sortedArr = arr;\n        sort(sortedArr.begin(), sortedArr.end());\n        return sortedArr;\n    }\n}\n```",
            "```cpp\nstd::string encrypt(const std::string& s) {\n    std::string result;\n    for (char ch : s) {\n        int shifted = static_cast<int>(ch) + 4;\n        if (shifted > static_cast<int>('z')) {\n            shifted -= 26;\n        }\n        result += static_cast<char>(shifted);\n    }\n    return result;\n}\n```",
            "```cpp\n#include <vector>\n#include <set>\n#include <optional>\n#include <algorithm>\n\nstd::optional<int> nextSmallest(const std::vector<int>& lst) {\n    std::set<int> sl(lst.begin(), lst.end());\n    if (sl.size() < 2) {\n        return std::nullopt;\n    }\n    auto it = sl.begin();\n    std::advance(it, 1);\n    return *it;\n}\n```",
            "```cpp\n#include <string>\n#include <vector>\n#include <sstream>\nusing namespace std;\n\nint isBored(const string& s) {\n    vector<string> sentences;\n    stringstream ss(s);\n    string sentence;\n    while (getline(ss, sentence, '.')) {\n        sentences.push_back(sentence);\n    }\n    while (getline(ss, sentence, '!')) {\n        sentences.push_back(sentence);\n    }\n    while (getline(ss, sentence, '?')) {\n        sentences.push_back(sentence);\n    }\n\n    int count = 0;\n    for (const string& sentence : sentences) {\n        string trimmed_sentence;\n        bool first_space = false;\n        for (char c : sentence) {\n            if (!first_space && c == ' ') {\n                continue;\n            }\n            first_space = true;\n            trimmed_sentence += c;\n        }\n\n        if (trimmed_sentence.length() >= 2 && trimmed_sentence.substr(0, 2) == \"I \") {\n            count++;\n        }\n    }\n\n    return count;\n}\n```",
            "```cpp\nbool anyInt(auto x, auto y, auto z) {\n    if constexpr (std::is_same_v<decltype(x), int> && std::is_same_v<decltype(y), int> && std::is_same_v<decltype(z), int>) {\n        if ((x + y == z) || (x + z == y) || (y + z == x)) {\n            return true;\n        }\n    }\n    return false;\n}\n```",
            "```cpp\nstring encode(const string& message) {\n    string vowels = \"aeiouAEIOU\";\n    string result;\n    for (char ch : message) {\n        if (isalpha(ch)) {\n            char ch1 = islower(ch) ? toupper(ch) : tolower(ch);\n            if (vowels.find(ch1) != string::npos) {\n                ch1 += 2;\n            }\n            result += ch1;\n        } else {\n            result += ch;\n        }\n    }\n    return result;\n}\n```",
            "```cpp\n#include <vector>\n#include <cmath>\n\nbool is_prime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i <= std::floor(std::sqrt(n)); ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nint skjkasdkd(const std::vector<int>& lst) {\n    std::vector<int> primes;\n    for (int n : lst) {\n        if (is_prime(n)) {\n            primes.push_back(n);\n        }\n    }\n    if (primes.empty()) return 0;\n    int largest = *std::max_element(primes.begin(), primes.end());\n    int sum = 0;\n    while (largest > 0) {\n        sum += largest % 10;\n        largest /= 10;\n    }\n    return sum;\n}\n```",
            "```cpp\n#include <unordered_map>\n#include <cctype>\n\nbool checkDictCase(const std::unordered_map<std::string, std::string>& d) {\n    if (d.empty()) {\n        return false;\n    }\n    \n    bool allLower = true;\n    bool allUpper = true;\n    \n    for (const auto& pair : d) {\n        const std::string& key = pair.first;\n        for (char c : key) {\n            if (!std::islower(c)) {\n                allLower = false;\n            }\n            if (!std::isupper(c)) {\n                allUpper = false;\n            }\n        }\n        if (!allLower && !allUpper) {\n            return false;\n        }\n    }\n    \n    return allLower || allUpper;\n}\n```",
            "```cpp\nvector<int> countUpTo(int n) {\n    vector<int> primes;\n    for (int num = 2; num < n; ++num) {\n        bool isPrime = true;\n        for (const int& p : primes) {\n            if (num % p == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            primes.push_back(num);\n        }\n    }\n    return primes;\n}\n```",
            "```cpp\nint multiply(int a, int b) {\n    return (abs(a) % 10) * (abs(b) % 10);\n}\n```",
            "```cpp\nint countUpper(const string& s) {\n    string vowels = \"AEIOU\";\n    int count = 0;\n    for (size_t i = 0; i < s.length(); ++i) {\n        if (i % 2 == 0 && vowels.find(s[i]) != string::npos) {\n            ++count;\n        }\n    }\n    return count;\n}\n```",
            "```cpp\nint closestInteger(const string& value) {\n    float num = stof(value);\n    if (num >= 0) {\n        return static_cast<int>(num + 0.5);\n    } else {\n        return static_cast<int>(num - 0.5);\n    }\n}\n```",
            "```cpp\n#include <vector>\n\nstd::vector<int> makeAPile(int n) {\n    std::vector<int> pile;\n    for (int i = 0; i < n; ++i) {\n        pile.push_back(n + 2 * i);\n    }\n    return pile;\n}\n```",
            "```cpp\n#include <vector>\n#include <string>\n#include <regex>\n\nstd::vector<std::string> wordsString(const std::string& s) {\n    return std::vector<std::string>(std::sregex_token_iterator(s.begin(), s.end(), std::regex(\"[, ]+\"), -1), \n                                   std::sregex_token_iterator());\n}\n```",
            "```cpp\nint chooseNum(int x, int y) {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 == 0) {\n        return y;\n    }\n    return y - 1;\n}\n```",
            "```cpp\noptional<string> roundedAvg(int n, int m) {\n    if (n > m) {\n        return nullopt;\n    }\n    int r_avg = static_cast<int>((m + n) / 2.0 + 0.5);\n    return bitset<32>(r_avg).to_string().substr(32 - count_leading_zeros(r_avg));\n}\n```",
            "```cpp\nvector<int> uniqueDigits(const vector<int>& x) {\n    auto all_digits_odd = [](const string& s) -> bool {\n        for (char digit : s) {\n            if ((digit - '0') % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    vector<int> result;\n    for (int num : x) {\n        if (all_digits_odd(to_string(num))) {\n            result.push_back(num);\n        }\n    }\n    sort(result.begin(), result.end());\n    return result;\n}\n```",
            "```cpp\nvector<string> byLength(const vector<int>& arr) {\n    vector<string> digit_names = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    vector<int> sorted_arr;\n    \n    for (int x : arr) {\n        if (x >= 1 && x <= 9) {\n            sorted_arr.push_back(x);\n        }\n    }\n    \n    sort(sorted_arr.begin(), sorted_arr.end(), greater<int>());\n    \n    vector<string> result;\n    for (int x : sorted_arr) {\n        result.push_back(digit_names[x - 1]);\n    }\n    \n    return result;\n}\n```",
            "```cpp\nvector<int> f(int n) {\n    vector<int> nums(n);\n    for (int i = 0; i < n; ++i) {\n        nums[i] = i + 1;\n    }\n    \n    vector<int> result;\n    for (int i = 0; i < n; ++i) {\n        if ((i + 1) % 2 != 0) {\n            int sum = accumulate(nums.begin(), nums.begin() + i + 1, 0);\n            result.push_back(sum);\n        } else {\n            int product = accumulate(nums.begin(), nums.begin() + i + 1, 1, multiplies<int>());\n            result.push_back(product);\n        }\n    }\n    \n    return result;\n}\n```",
            "```cpp\n#include <vector>\n#include <string>\n\nbool is_palindrome(const std::string& txt) {\n    return txt == std::string(txt.rbegin(), txt.rend());\n}\n\nstd::vector<int> evenOddPalindrome(int n) {\n    std::vector<int> cnt(2, 0);\n    for (int i = 1; i <= n; ++i) {\n        if (is_palindrome(std::to_string(i))) {\n            cnt[i % 2] += 1;\n        }\n    }\n    return cnt;\n}\n```",
            "```cpp\nint digitsSum(int n) {\n    string n_str = to_string(n);\n    if (n >= 0) {\n        return accumulate(n_str.begin(), n_str.end(), 0, [](int sum, char d) {return sum + (d - '0');});\n    } else {\n        return (n_str[0] - '0') * 2 + digitsSum(abs(n));\n    }\n}\n\nint countNums(const vector<int>& arr) {\n    return count_if(arr.begin(), arr.end(), [](int n) {return digitsSum(n) > 0;});\n}\n```",
            "```cpp\n#include <vector>\n#include <algorithm>\n\nbool moveOneBall(const std::vector<int>& arr) {\n    if (arr.empty()) {\n        return true;\n    }\n    std::vector<int> sorted_arr = arr;\n    std::sort(sorted_arr.begin(), sorted_arr.end());\n    for (size_t i = 0; i < arr.size(); ++i) {\n        if (std::equal(arr.begin() + i, arr.end(), sorted_arr.begin()) &&\n            std::equal(arr.begin(), arr.begin() + i, sorted_arr.begin() + arr.size() - i)) {\n            return true;\n        }\n    }\n    return false;\n}\n```",
            "```cpp\nstring canExchange(const vector<int>& lst1, const vector<int>& lst2) {\n    int odd_cnt = 0;\n    for (int num : lst1) {\n        if (num % 2 != 0) {\n            odd_cnt++;\n        }\n    }\n    int even_cnt = 0;\n    for (int num : lst2) {\n        if (num % 2 == 0) {\n            even_cnt++;\n        }\n    }\n    return (even_cnt >= odd_cnt) ? \"YES\" : \"NO\";\n}\n```",
            "```cpp\n#include <string>\n#include <unordered_map>\n#include <sstream>\n\nusing namespace std;\n\nunordered_map<string, int> histogram(const string& test) {\n    unordered_map<string, int> freq;\n    istringstream iss(test);\n    string word;\n    while (iss >> word) {\n        if (!word.empty()) {\n            freq[word]++;\n        }\n    }\n    unordered_map<string, int> result;\n    if (!freq.empty()) {\n        int max_freq = 0;\n        for (const auto& p : freq) {\n            if (p.second > max_freq) {\n                max_freq = p.second;\n            }\n        }\n        for (const auto& p : freq) {\n            if (p.second == max_freq) {\n                result[p.first] = p.second;\n            }\n        }\n    }\n    return result;\n}\n```",
            "```cpp\n#include <string>\n#include <vector>\n\nbool isPalindrome(const std::string& s) {\n    return s == std::string(s.rbegin(), s.rend());\n}\n\nstd::vector<std::string> reverseDelete(const std::string& s, const std::string& c) {\n    std::string s1;\n    for (char ch : s) {\n        if (c.find(ch) == std::string::npos) {\n            s1 += ch;\n        }\n    }\n    return {s1, isPalindrome(s1) ? \"yes\" : \"no\"};\n}\n```",
            "```cpp\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nvector<string> oddCount(const vector<string>& lst) {\n    vector<string> result;\n    for (const string& num : lst) {\n        int n = 0;\n        for (char d : num) {\n            if ((static_cast<int>(d) % 2) == 1) {\n                n++;\n            }\n        }\n        string rs = \"the number of odd elements in the string i of the input.\";\n        result.push_back(rs.replace(rs.find('i'), 1, to_string(n)));\n    }\n    return result;\n}\n```",
            "```cpp\nint minSubArraySum(const vector<int>& nums) {\n    int min_sum = 0;\n    int cur_sum = 0;\n    for (int n : nums) {\n        cur_sum = std::min(cur_sum + n, 0);\n        min_sum = std::min(cur_sum, min_sum);\n    }\n    if (min_sum == 0) {\n        min_sum = *std::min_element(nums.begin(), nums.end());\n    }\n    return min_sum;\n}\n```",
            "```cpp\n#include <vector>\n#include <cmath>\n\nusing namespace std;\n\nint maxFill(const vector<vector<int>>& grid, int capacity) {\n    int total = 0;\n    for (const auto& arr : grid) {\n        total += ceil(static_cast<double>(sum(arr)) / capacity);\n    }\n    return total;\n}\n```",
            "```cpp\n#include <functional>\n#include <algorithm>\n\nvector<int> sortArray(const vector<int>& arr) {\n    auto countOnes = [](int num) -> int {\n        return __builtin_popcount(num);\n    };\n\n    vector<int> sortedArr = arr;\n    std::sort(sortedArr.begin(), sortedArr.end(), [&](int a, int b) {\n        int onesA = countOnes(a);\n        int onesB = countOnes(b);\n        if (onesA == onesB) {\n            return a < b;\n        }\n        return onesA < onesB;\n    });\n\n    return sortedArr;\n}\n```",
            "```cpp\n#include <vector>\n#include <string>\n#include <cctype>\n\nusing namespace std;\n\nvector<string> selectWords(const string& s, int n) {\n    string consonants = \"bcdfghjklmnpqrstvwxyz\";\n    vector<string> words;\n    string word;\n    \n    for (char c : s) {\n        if (isspace(c)) {\n            if (!word.empty()) {\n                words.push_back(word);\n                word.clear();\n            }\n        } else {\n            word += c;\n        }\n    }\n    \n    if (!word.empty()) {\n        words.push_back(word);\n    }\n\n    vector<string> result;\n    for (const string& w : words) {\n        int consonantCount = 0;\n        for (char c : w) {\n            char lowerC = tolower(c);\n            if (consonants.find(lowerC) != string::npos) {\n                consonantCount++;\n            }\n        }\n        if (consonantCount == n) {\n            result.push_back(w);\n        }\n    }\n\n    return result;\n}\n```",
            "```cpp\nstring getClosestVowel(const string& word) {\n    string vowels = \"aeiouAEIOU\";\n    for (int i = word.length() - 2; i > 0; --i) {\n        if (vowels.find(word[i]) != string::npos && vowels.find(word[i - 1]) == string::npos && vowels.find(word[i + 1]) == string::npos) {\n            return string(1, word[i]);\n        }\n    }\n    return \"\";\n}\n```",
            "```cpp\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nbool check(const string& s) {\n    int depth = 0;\n    for (char ch : s) {\n        if (ch == '(') {\n            depth += 1;\n        } else {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n\nstring matchParens(const vector<string>& lst) {\n    string s1 = lst[0] + lst[1];\n    string s2 = lst[1] + lst[0];\n    return check(s1) || check(s2) ? \"Yes\" : \"No\";\n}\n```",
            "```cpp\nvector<int> maximum(const vector<int>& arr, int k) {\n    if (k == 0) {\n        return {};\n    }\n    vector<int> sortedArr = arr;\n    sort(sortedArr.begin(), sortedArr.end());\n    return vector<int>(sortedArr.end() - k, sortedArr.end());\n}\n```",
            "```cpp\nint solution(const vector<int>& lst) {\n    int sum = 0;\n    for (size_t i = 0; i < lst.size(); ++i) {\n        if (i % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n```",
            "```cpp\nint addElements(const vector<int>& arr, int k) {\n    int sum = 0;\n    for (int i = 0; i < k && i < arr.size(); ++i) {\n        if (to_string(arr[i]).length() <= 2) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n```",
            "```cpp\n#include <vector>\nusing namespace std;\n\nvector<int> getOddCollatz(int n) {\n    vector<int> collatz = {1};\n    while (n != 1) {\n        if (n % 2 != 0) {\n            collatz.push_back(n);\n            n = 3 * n + 1;\n        } else {\n            n = n / 2;\n        }\n    }\n    sort(collatz.begin(), collatz.end());\n    return collatz;\n}\n```",
            "```cpp\nbool validDate(const string& date) {\n    if (date.length() != 10 || date[2] != '-' || date[5] != '-') {\n        return false;\n    }\n    int m = stoi(date.substr(0, 2));\n    int d = stoi(date.substr(3, 2));\n    if ((m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) && d >= 1 && d <= 31) {\n        return true;\n    }\n    if ((m == 4 || m == 6 || m == 9 || m == 11) && d >= 1 && d <= 30) {\n        return true;\n    }\n    if (m == 2 && d >= 1 && d <= 29) {\n        return true;\n    }\n    return false;\n}\n```",
            "```cpp\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nvector<string> splitWords(const string& txt) {\n    vector<string> result;\n    if (txt.find(' ') != string::npos) {\n        size_t start = 0, end = 0;\n        while ((end = txt.find(' ', start)) != string::npos) {\n            result.push_back(txt.substr(start, end - start));\n            start = end + 1;\n        }\n        result.push_back(txt.substr(start));\n    } else if (txt.find(',') != string::npos) {\n        size_t start = 0, end = 0;\n        while ((end = txt.find(',', start)) != string::npos) {\n            result.push_back(txt.substr(start, end - start));\n            start = end + 1;\n        }\n        result.push_back(txt.substr(start));\n    } else {\n        int count = 0;\n        for (char c : txt) {\n            if (islower(c) && (c % 2 == 0)) {\n                count++;\n            }\n        }\n        result.push_back(to_string(count));\n    }\n    return result;\n}\n```",
            "```cpp\n#include <vector>\n#include <unordered_map>\n#include <algorithm>\n\nbool isSorted(const std::vector<int>& lst) {\n    if (!std::is_sorted(lst.begin(), lst.end())) {\n        return false;\n    }\n    std::unordered_map<int, int> freq;\n    for (int i : lst) {\n        freq[i]++;\n    }\n    return std::all_of(freq.begin(), freq.end(), [](const auto& pair) { return pair.second <= 2; });\n}\n```",
            "```cpp\nbool is_prime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i <= sqrt(n); ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nstring intersection(const vector<int>& interval1, const vector<int>& interval2) {\n    int l = max(interval1[0], interval2[0]);\n    int r = min(interval1[1], interval2[1]);\n    int length = r - l;\n    return (length > 0 && is_prime(length)) ? \"YES\" : \"NO\";\n}\n```",
            "```cpp\n#include <vector>\n#include <numeric>\n#include <optional>\n#include <cmath>\n\nstd::optional<int> prodSigns(const std::vector<int>& arr) {\n    if (arr.empty()) {\n        return std::nullopt;\n    }\n    if (std::find(arr.begin(), arr.end(), 0) != arr.end()) {\n        return 0;\n    }\n    int sign = std::count_if(arr.begin(), arr.end(), [](int n) { return n < 0; }) % 2 == 1 ? -1 : 1;\n    return sign * std::accumulate(arr.begin(), arr.end(), 0, [](int sum, int n) { return sum + std::abs(n); });\n}\n```",
            "```cpp\nvector<int> minPath(const vector<vector<int>>& grid, int k) {\n    int n = grid.size();\n    int min_val = n * n + 1;\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < n; ++j) {\n            if (grid[i][j] == 1) {\n                vector<int> temp;\n                if (i != 0) {\n                    temp.push_back(grid[i - 1][j]);\n                }\n                if (j != 0) {\n                    temp.push_back(grid[i][j - 1]);\n                }\n                if (i != n - 1) {\n                    temp.push_back(grid[i + 1][j]);\n                }\n                if (j != n - 1) {\n                    temp.push_back(grid[i][j + 1]);\n                }\n                min_val = *min_element(temp.begin(), temp.end());\n            }\n        }\n    }\n    vector<int> result;\n    for (int i = 0; i < k; ++i) {\n        result.push_back(i % 2 == 0 ? 1 : min_val);\n    }\n    return result;\n}\n```",
            "```cpp\nvector<int> tri(int n) {\n    if (n == 0) {\n        return {1};\n    }\n    vector<double> seq = {1, 3};\n    for (int i = 2; i <= n; ++i) {\n        if (i % 2 == 0) {\n            seq.push_back(i / 2.0 + 1);\n        } else {\n            seq.push_back(seq[i - 1] + seq[i - 2] + (i + 3) / 2.0);\n        }\n    }\n    return vector<int>(seq.begin(), seq.end());\n}\n```",
            "```cpp\nint digits(int n) {\n    int product = 1;\n    bool hasOdd = false;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit % 2 == 1) {\n            product *= digit;\n            hasOdd = true;\n        }\n        n /= 10;\n    }\n    return hasOdd ? product : 0;\n}\n```",
            "```cpp\nbool isNested(const string& s) {\n    vector<int> open_idx;\n    vector<int> close_idx;\n    for (int i = 0; i < s.size(); ++i) {\n        if (s[i] == '[') {\n            open_idx.push_back(i);\n        } else if (s[i] == ']') {\n            close_idx.push_back(i);\n        }\n    }\n    reverse(close_idx.begin(), close_idx.end());\n    int cnt = 0;\n    int i = 0;\n    int l = close_idx.size();\n    for (int idx : open_idx) {\n        if (i < l && idx < close_idx[i]) {\n            ++cnt;\n            ++i;\n        }\n    }\n    return cnt >= 2;\n}\n```",
            "```cpp\n#include <vector>\n#include <cmath>\n\nint sumSquares(const std::vector<double>& lst) {\n    int sum = 0;\n    for (double n : lst) {\n        sum += static_cast<int>(std::pow(std::ceil(n), 2));\n    }\n    return sum;\n}\n```",
            "```cpp\nbool checkIfLastCharIsALetter(const string& txt) {\n    if (txt.empty()) {\n        return false;\n    }\n    size_t lastSpace = txt.rfind(' ');\n    string last = txt.substr(lastSpace + 1);\n    return last.length() == 1 && isalpha(last[0]);\n}\n```",
            "```cpp\nint canArrange(const vector<int>& arr) {\n    if (arr.size() <= 1) {\n        return -1;\n    }\n    vector<int> idx;\n    for (size_t i = 1; i < arr.size(); ++i) {\n        if (arr[i] < arr[i - 1]) {\n            idx.push_back(i);\n        }\n    }\n    return !idx.empty() ? *max_element(idx.begin(), idx.end()) : -1;\n}\n```",
            "```cpp\n#include <vector>\n#include <optional>\n#include <algorithm>\n\nusing namespace std;\n\nvector<optional<int>> largestSmallestIntegers(const vector<int>& lst) {\n    vector<int> neg;\n    vector<int> pos;\n    \n    for (int i : lst) {\n        if (i < 0) {\n            neg.push_back(i);\n        } else if (i > 0) {\n            pos.push_back(i);\n        }\n    }\n    \n    optional<int> max_neg = !neg.empty() ? optional<int>(*max_element(neg.begin(), neg.end())) : nullopt;\n    optional<int> min_pos = !pos.empty() ? optional<int>(*min_element(pos.begin(), pos.end())) : nullopt;\n    \n    return {max_neg, min_pos};\n}\n```",
            "```cpp\n#include <any>\n#include <string>\n#include <stdexcept>\n\nstd::optional<double> compareOne(const std::any& a, const std::any& b) {\n    auto any_to_real = [](const std::any& o) -> double {\n        if (o.type() == typeid(std::string)) {\n            return std::stod(std::any_cast<std::string>(o).replace(',', '.'));\n        } else if (o.type() == typeid(int)) {\n            return static_cast<double>(std::any_cast<int>(o));\n        } else if (o.type() == typeid(double)) {\n            return std::any_cast<double>(o);\n        }\n        throw std::runtime_error(\"Type Error\");\n    };\n\n    double a1 = any_to_real(a);\n    double b1 = any_to_real(b);\n\n    if (a1 == b1) {\n        return std::nullopt;\n    } else if (a1 > b1) {\n        return a1;\n    } else {\n        return b1;\n    }\n}\n```",
            "```cpp\nbool isEqualToSumEven(int n) {\n    return n % 2 == 0 && n >= 8;\n}\n```",
            "```cpp\nint specialFactorial(int n) {\n    int fact = 1;\n    int result = 1;\n    for (int i = 1; i <= n; ++i) {\n        fact *= i;\n        result *= fact;\n    }\n    return result;\n}\n```",
            "```cpp\n#include <regex>\nusing namespace std;\n\nstring fixSpaces(const string& txt) {\n    return regex_replace(txt, regex(R\"(\\s{3,})\", \"-\").replace(\" \", \"_\");\n}\n```",
            "```cpp\nstring fileNameCheck(const string& file_name) {\n    vector<string> suf = {\"txt\", \"exe\", \"dll\"};\n    size_t dotPos = file_name.find(\".\");\n    if (dotPos == string::npos || dotPos == 0 || dotPos == file_name.length() - 1) {\n        return \"No\";\n    }\n    string namePart = file_name.substr(0, dotPos);\n    string extension = file_name.substr(dotPos + 1);\n    \n    if (find(suf.begin(), suf.end(), extension) == suf.end() || !isalpha(namePart[0])) {\n        return \"No\";\n    }\n    \n    int digitCount = 0;\n    for (char c : namePart) {\n        if (!isalnum(c)) {\n            return \"No\";\n        }\n        if (isdigit(c)) {\n            digitCount++;\n        }\n    }\n    \n    if (digitCount > 3) {\n        return \"No\";\n    }\n    \n    return \"Yes\";\n}\n```",
            "```cpp\nint sumSquares(const vector<int>& lst) {\n    int result = 0;\n    for (int i = 0; i < lst.size(); ++i) {\n        if (i % 3 == 0) {\n            result += pow(lst[i], 2);\n        } else if (i % 4 == 0) {\n            result += pow(lst[i], 3);\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n```",
            "```cpp\nstring wordsInSentence(const string& sentence) {\n    string result;\n    istringstream iss(sentence);\n    string word;\n    while (iss >> word) {\n        int length = word.length();\n        bool isPrime = true;\n        if (length < 2) {\n            continue;\n        }\n        for (int i = 2; i <= sqrt(length); ++i) {\n            if (length % i == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            if (!result.empty()) {\n                result += \" \";\n            }\n            result += word;\n        }\n    }\n    return result;\n}\n```",
            "```cpp\n#include <string>\nusing namespace std;\n\nbool simplify(const string& x, const string& n) {\n    size_t slash_pos_x = x.find('/');\n    size_t slash_pos_n = n.find('/');\n    int num_x = stoi(x.substr(0, slash_pos_x));\n    int den_x = stoi(x.substr(slash_pos_x + 1));\n    int num_n = stoi(n.substr(0, slash_pos_n));\n    int den_n = stoi(n.substr(slash_pos_n + 1));\n    int num = num_x * num_n;\n    int den = den_x * den_n;\n    return num % den == 0;\n}\n```",
            "```cpp\n#include <vector>\n#include <string>\n#include <algorithm>\n\nint digitsSum(int n) {\n    std::string n_str = std::to_string(n);\n    if (n >= 0) {\n        return std::accumulate(n_str.begin(), n_str.end(), 0, [](int sum, char d) { return sum + (d - '0'); });\n    } else {\n        return (n_str[0] - '0') * 2 + digitsSum(std::abs(n));\n    }\n}\n\nstd::vector<int> orderByPoints(const std::vector<int>& nums) {\n    std::vector<int> sorted_nums = nums;\n    std::sort(sorted_nums.begin(), sorted_nums.end(), [](int a, int b) { return digitsSum(a) < digitsSum(b); });\n    return sorted_nums;\n}\n```",
            "```cpp\nint specialFilter(const vector<int>& nums) {\n    string odds = \"13579\";\n    int count = 0;\n    for (int n : nums) {\n        if (n > 10 && n % 2 == 1 && odds.find(to_string(n)[0]) != string::npos) {\n            count++;\n        }\n    }\n    return count;\n}\n```",
            "```cpp\nint getMaxTriples(int n) {\n    int c[3] = {0, 0, 0};\n    for (int i = 1; i <= n; ++i) {\n        int a = i * i - i + 1;\n        c[a % 3]++;\n    }\n    return c[0] * c[1] * c[2] + ((c[0] * (c[0] - 1) * (c[0] - 2)) + (c[1] * (c[1] - 1) * (c[1] - 2)) + (c[2] * (c[2] - 1) * (c[2] - 2))) / 6;\n}\n```",
            "```cpp\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nvector<string> bf(const string& planet1, const string& planet2) {\n    vector<string> names = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    if (find(names.begin(), names.end(), planet1) == names.end() || find(names.begin(), names.end(), planet2) == names.end()) {\n        return {};\n    }\n    int l = distance(names.begin(), find(names.begin(), names.end(), planet1));\n    int r = distance(names.begin(), find(names.begin(), names.end(), planet2));\n    if (l > r) {\n        swap(l, r);\n    }\n    if (l == r) {\n        return {};\n    }\n    return vector<string>(names.begin() + l + 1, names.begin() + r);\n}\n```",
            "```cpp\n#include <string>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<string> sortedListSum(const vector<string>& lst) {\n    vector<string> result;\n    for (const auto& s : lst) {\n        if (s.length() % 2 == 0) {\n            result.push_back(s);\n        }\n    }\n    sort(result.begin(), result.end(), [](const string& a, const string& b) {\n        return a.length() < b.length() || (a.length() == b.length() && a < b);\n    });\n    return result;\n}\n```",
            "```cpp\n#include <cmath>\nusing namespace std;\n\nint xOrY(int n, int x, int y) {\n    if (n < 2) {\n        return y;\n    }\n    for (int i = 2; i <= floor(sqrt(n)); ++i) {\n        if (n % i == 0) {\n            return y;\n        }\n    }\n    return x;\n}\n```",
            "```cpp\nint doubleTheDifference(const vector<double>& lst) {\n    int result = 0;\n    for (const auto& n : lst) {\n        if (n >= 0 && fmod(n, 2.0) == 1.0) {\n            result += n * n;\n        }\n    }\n    return result;\n}\n```",
            "```cpp\n#include <vector>\n#include <cmath>\n\nusing namespace std;\n\nvector<int> compare(const vector<int>& game, const vector<int>& guess) {\n    vector<int> result;\n    for (size_t i = 0; i < game.size(); ++i) {\n        result.push_back(abs(game[i] - guess[i]));\n    }\n    return result;\n}\n```",
            "```cpp\n#include <vector>\n#include <string>\nusing namespace std;\n\nstring strongestExtension(const string& class_name, const vector<string>& extensions) {\n    int max_s = -1;\n    string max_ext = \"\";\n    for (const string& ext : extensions) {\n        int upper = 0;\n        int lower = 0;\n        for (char c : ext) {\n            if (isupper(c)) upper++;\n            if (islower(c)) lower++;\n        }\n        int s = upper - lower;\n        if (s > max_s) {\n            max_s = s;\n            max_ext = ext;\n        }\n    }\n    return class_name + \".\" + max_ext;\n}\n```",
            "```cpp\nbool cycpatternCheck(const string& a, const string& b) {\n    if (a.length() < b.length()) {\n        return false;\n    }\n    for (size_t i = 0; i < b.length(); ++i) {\n        string rotated = b.substr(i) + b.substr(0, i);\n        if (a.find(rotated) != string::npos) {\n            return true;\n        }\n    }\n    return false;\n}\n```",
            "```cpp\n#include <vector>\n#include <string>\n\nstd::vector<int> evenOddCount(int num) {\n    std::string ds = std::to_string(std::abs(num));\n    int even = 0;\n    for (char d : ds) {\n        if ((d - '0') % 2 == 0) {\n            even++;\n        }\n    }\n    return {even, static_cast<int>(ds.length()) - even};\n}\n```",
            "```cpp\nstring intToMiniRoman(int num) {\n    vector<int> values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    vector<string> numerals = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    string res = \"\";\n    for (int i = 0; i < values.size(); ++i) {\n        while (num >= values[i]) {\n            res += numerals[i];\n            num -= values[i];\n        }\n    }\n    return res;\n}\n```",
            "```cpp\nbool rightAngleTriangle(int a, int b, int c) {\n    int s[3] = {a, b, c};\n    std::sort(s, s + 3);\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2];\n}\n```",
            "```cpp\nstring findMax(const vector<string>& words) {\n    int max_cnt = 0;\n    string max_w = \"\";\n    for (const auto& w : words) {\n        unordered_set<char> unique_chars(w.begin(), w.end());\n        int cnt = unique_chars.size();\n        if (cnt > max_cnt) {\n            max_cnt = cnt;\n            max_w = w;\n        } else if (cnt == max_cnt) {\n            max_w = min(max_w, w);\n        }\n    }\n    return max_w;\n}\n```",
            "```cpp\nvector<int> eat(int num, int need, int remaining) {\n    if (need <= remaining) {\n        return {num + need, remaining - need};\n    } else {\n        return {num + remaining, 0};\n    }\n}\n```",
            "```cpp\n#include <vector>\n#include <string>\n#include <cmath>\n\nint doAlgebra(const std::vector<std::string>& operators, const std::vector<int>& operands) {\n    std::vector<std::string> ops = operators;\n    std::vector<int> nums = operands;\n    int i = ops.size() - 1;\n    while (i >= 0) {\n        if (ops[i] == \"**\") {\n            nums[i] = static_cast<int>(pow(nums[i], nums[i + 1]));\n            nums.erase(nums.begin() + i + 1);\n            ops.erase(ops.begin() + i);\n        }\n        i -= 1;\n    }\n    i = 0;\n    while (i < ops.size()) {\n        if (ops[i] == \"*\") {\n            nums[i] = nums[i] * nums[i + 1];\n            nums.erase(nums.begin() + i + 1);\n            ops.erase(ops.begin() + i);\n            i -= 1;\n        } else if (ops[i] == \"//\") {\n            nums[i] = nums[i] / nums[i + 1]; // Using / for integer division in C++\n            nums.erase(nums.begin() + i + 1);\n            ops.erase(ops.begin() + i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    i = 0;\n    while (i < ops.size()) {\n        if (ops[i] == \"+\") {\n            nums[i] = nums[i] + nums[i + 1];\n            nums.erase(nums.begin() + i + 1);\n            ops.erase(ops.begin() + i);\n            i -= 1;\n        } else if (ops[i] == \"-\") {\n            nums[i] = nums[i] - nums[i + 1];\n            nums.erase(nums.begin() + i + 1);\n            ops.erase(ops.begin() + i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    return nums[0];\n}\n```",
            "```cpp\nstring solve(const string& s) {\n    if (!any_of(s.begin(), s.end(), ::isalpha)) {\n        return string(s.rbegin(), s.rend());\n    }\n    string result;\n    for (char ch : s) {\n        if (!::isalpha(ch)) {\n            result += ch;\n        } else if (::isupper(ch)) {\n            result += tolower(ch);\n        } else if (::islower(ch)) {\n            result += toupper(ch);\n        }\n    }\n    return result;\n}\n```",
            "```cpp\n#include <string>\n#include <openssl/md5.h>\n\nusing namespace std;\n\noptional<string> stringToMd5(const string& txt) {\n    if (txt.empty()) {\n        return nullopt;\n    }\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)txt.c_str(), txt.length(), (unsigned char*)&digest);    \n    char mdString[33];\n    for(int i = 0; i < 16; ++i)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n    return string(mdString);\n}\n```",
            "```cpp\nvector<int> generateIntegers(int a, int b) {\n    int lower = max(2, min(a, b));\n    int upper = min(8, max(a, b));\n    vector<int> result;\n    for (int i = lower; i <= upper; ++i) {\n        if (i % 2 == 0) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\n```"
        ]
    }
}