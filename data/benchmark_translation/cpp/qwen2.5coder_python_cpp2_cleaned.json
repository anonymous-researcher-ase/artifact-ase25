{
    "python": {
        "go": [
            "func HasCloseElements(numbers []float64, threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            if Abs(numbers[i]-numbers[j]) < threshold {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc Abs(x float64) float64 {\n    if x < 0 {\n        return -x\n    }\n    return x\n}\n",
            "func SeparateParenGroups(parenString string) []string {\n    var groups []string\n    var stk []rune\n    var currentGroup strings.Builder\n\n    for _, ch := range parenString {\n        if ch == '(' {\n            stk = append(stk, ch)\n            currentGroup.WriteRune(ch)\n        } else if ch == ')' {\n            stk = stk[:len(stk)-1]\n            currentGroup.WriteRune(ch)\n            if len(stk) == 0 {\n                groups = append(groups, currentGroup.String())\n                currentGroup.Reset()\n            }\n        }\n    }\n    return groups\n}\n",
            "func TruncateNumber(num float64) float64 {\n    return num - math.Floor(num)\n}\n",
            "func BelowZero(operations []int) bool {\n    balance := 0\n    for _, op := range operations {\n        balance += op\n        if balance < 0 {\n            return true\n        }\n    }\n    return false\n}\n",
            "func MeanAbsoluteDeviation(numbers []float64) float64 {\n    sum := 0.0\n    for _, num := range numbers {\n        sum += num\n    }\n    mean := sum / float64(len(numbers))\n    deviation := 0.0\n    for _, num := range numbers {\n        deviation += abs(num - mean)\n    }\n    return deviation / float64(len(numbers))\n}\n",
            "func Intersperse(numbers []int, delimiter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i != 0 {\n            result = append(result, delimiter)\n        }\n        result = append(result, numbers[i])\n    }\n    return result\n}\n",
            "func ParseNestedParens(parenString string) []int {\n    var result []int\n    parenGroups := strings.Fields(parenString)\n    for _, group := range parenGroups {\n        maxDepth := 0\n        depth := 0\n        for _, ch := range group {\n            if ch == '(' {\n                depth++\n                if depth > maxDepth {\n                    maxDepth = depth\n                }\n            } else if ch == ')' {\n                depth--\n            }\n        }\n        result = append(result, maxDepth)\n    }\n    return result\n}\n",
            "func FilterBySubstring(strs []string, substring string) []string {\n    var result []string\n    for _, s := range strs {\n        if strings.Contains(s, substring) {\n            result = append(result, s)\n        }\n    }\n    return result\n}\n",
            "func SumProduct(numbers []int) []int {\n    n_sum := 0\n    n_product := 1\n    for _, num := range numbers {\n        n_sum += num\n        n_product *= num\n    }\n    return []int{n_sum, n_product}\n}\n",
            "func RollingMax(numbers []int) []int {\n    maxSoFar := math.MinInt32\n    result := make([]int, len(numbers))\n    for i, num := range numbers {\n        if num > maxSoFar {\n            maxSoFar = num\n        }\n        result[i] = maxSoFar\n    }\n    return result\n}\n",
            "func MakePalindrome(s string) string {\n\tif s == reverseString(s) {\n\t\treturn s\n\t}\n\tfor i := range s {\n\t\tif isPalindrome(s[i:]) {\n\t\t\treturn s + reverseString(s[:i])\n\t\t}\n\t}\n\treturn \"\"\n}\n\nfunc reverseString(s string) string {\n\trunes := []rune(s)\n\tfor i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n\t\trunes[i], runes[j] = runes[j], runes[i]\n\t}\n\treturn string(runes)\n}\n\nfunc isPalindrome(s string) bool {\n\tfor i := 0; i < len(s)/2; i++ {\n\t\tif s[i] != s[len(s)-1-i] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n",
            "func StringXor(a string, b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n            result += \"1\"\n        }\n    }\n    return result\n}\n",
            "func Longest(strs []string) *string {\n    if len(strs) == 0 {\n        return nil\n    }\n    longest_s := strs[0]\n    for _, s := range strs {\n        if len(s) > len(longest_s) {\n            longest_s = s\n        }\n    }\n    return &longest_s\n}\n",
            "func GreatestCommonDivisor(a int, b int) int {\n    if b == 0 {\n        return a\n    } else {\n        return GreatestCommonDivisor(b, a % b)\n    }\n}\n",
            "func AllPrefixes(s string) []string {\n    var prefixes []string\n    for i := 0; i < len(s); i++ {\n        prefixes = append(prefixes, s[:i+1])\n    }\n    return prefixes\n}\n",
            "func StringSequence(n int) string {\n    var result string\n    for i := 0; i <= n; i++ {\n        if i > 0 {\n            result += \" \"\n        }\n        result += fmt.Sprintf(\"%d\", i)\n    }\n    return result\n}\n",
            "func CountDistinctCharacters(s string) int {\n    uniqueChars := make(map[rune]bool)\n    for _, c := range s {\n        uniqueChars[unicode.ToLower(c)] = true\n    }\n    return len(uniqueChars)\n}\n",
            "func ParseMusic(musicString string) []int {\n    durations := map[string]int{\"o\": 4, \"o|\": 2, \".|\": 1}\n    result := []int{}\n    start := 0\n    end := 0\n    \n    for end = strings.Index(musicString[start:], \" \"); end != -1; end = strings.Index(musicString[start:], \" \") {\n        note := musicString[start : start+end]\n        if _, exists := durations[note]; exists {\n            result = append(result, durations[note])\n        }\n        start += end + 1\n    }\n    \n    // Add the last note\n    lastNote := musicString[start:]\n    if _, exists := durations[lastNote]; exists {\n        result = append(result, durations[lastNote])\n    }\n    \n    return result\n}\n",
            "func HowManyTimes(s string, substring string) int {\n    times := 0\n    for i := 0; i <= len(s)-len(substring); i++ {\n        if s[i:i+len(substring)] == substring {\n            times++\n        }\n    }\n    return times\n}\n",
            "func SortNumbers(numbers string) string {\n    numDict := map[string]int{\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n\n    var numList []string\n    ss := strings.Fields(numbers)\n    for _, word := range ss {\n        if _, found := numDict[word]; found {\n            numList = append(numList, word)\n        }\n    }\n\n    sort.Slice(numList, func(i, j int) bool {\n        return numDict[numList[i]] < numDict[numList[j]]\n    })\n\n    var result strings.Builder\n    for i, word := range numList {\n        if i > 0 {\n            result.WriteString(\" \")\n        }\n        result.WriteString(word)\n    }\n\n    return result.String()\n}\n",
            "func FindClosestElements(numbers []float64) []float64 {\n    if len(numbers) < 2 {\n        return []float64{}\n    }\n    \n    sorted_numbers := append([]float64{}, numbers...)\n    sort.Float64s(sorted_numbers)\n    \n    min_diff := math.MaxFloat64\n    closest_pair := make([]float64, 0, 2)\n    \n    for i := 1; i < len(sorted_numbers); i++ {\n        diff := sorted_numbers[i] - sorted_numbers[i-1]\n        if diff < min_diff {\n            min_diff = diff\n            closest_pair = []float64{sorted_numbers[i-1], sorted_numbers[i]}\n        }\n    }\n    \n    return closest_pair\n}\n",
            "func RescaleToUnit(numbers []float64) []float64 {\n    min_num := numbers[0]\n    max_num := numbers[0]\n    for _, num := range numbers {\n        if num < min_num {\n            min_num = num\n        }\n        if num > max_num {\n            max_num = num\n        }\n    }\n    if min_num == max_num {\n        return make([]float64, len(numbers))\n    } else {\n        rescaled := make([]float64, len(numbers))\n        for i, num := range numbers {\n            rescaled[i] = (num - min_num) / (max_num - min_num)\n        }\n        return rescaled\n    }\n}\n",
            "func FilterIntegers(values []interface{}) []int {\n    var result []int\n    for _, value := range values {\n        if intValue, ok := value.(int); ok {\n            result = append(result, intValue)\n        }\n    }\n    return result\n}\n",
            "func StrLength(s string) int {\n    return len(s)\n}\n",
            "func LargestDivisor(n int) int {\n    for i := 2; i < n; i++ {\n        if n%i == 0 {\n            return n / i\n        }\n    }\n    return 1\n}\n",
            "func Factorize(n int) []int {\n    factors := []int{}\n    divisor := 2\n    for divisor <= n {\n        if n%divisor == 0 {\n            factors = append(factors, divisor)\n            n /= divisor\n        } else {\n            divisor += 1\n        }\n    }\n    return factors\n}\n",
            "func RemoveDuplicates(numbers []int) []int {\n    counts := make(map[int]int)\n    for _, num := range numbers {\n        counts[num]++\n    }\n    var res []int\n    for _, num := range numbers {\n        if counts[num] == 1 {\n            res = append(res, num)\n        }\n    }\n    return res\n}\n",
            "func FlipCase(s string) string {\n    flipped := []rune{}\n    for _, ch := range s {\n        if !unicode.IsLetter(ch) {\n            flipped = append(flipped, ch)\n        } else if unicode.IsLower(ch) {\n            flipped = append(flipped, unicode.ToUpper(ch))\n        } else if unicode.IsUpper(ch) {\n            flipped = append(flipped, unicode.ToLower(ch))\n        }\n    }\n    return string(flipped)\n}\n",
            "func Concatenate(strs []string) string {\n    result := \"\"\n    for _, str := range strs {\n        result += str\n    }\n    return result\n}\n",
            "func FilterByPrefix(strs []string, prefixStr string) []string {\n    var result []string\n    for _, s := range strs {\n        if len(s) >= len(prefixStr) && s[:len(prefixStr)] == prefixStr {\n            result = append(result, s)\n        }\n    }\n    return result\n}\n",
            "func GetPositive(l []int) []int {\n    var result []int\n    for _, num := range l {\n        if num > 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
            "func IsPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func Poly(xs []int, x float64) float64 {\n\tres := 0.0\n\tfor i, coeff := range xs {\n\t\tres += float64(coeff) * math.Pow(x, float64(i))\n\t}\n\treturn res\n}\n\nfunc FindZero(xs []int) float64 {\n\tx1, x2 := 1.0, -1.0\n\tfor Poly(xs, x1)*Poly(xs, x2) > 0 {\n\t\tx1 *= 2\n\t\tx2 *= 2\n\t}\n\tfor math.Abs(x1-x2) > 1e-10 {\n\t\tmid := (x1 + x2) / 2\n\t\tif Poly(xs, mid) == 0 {\n\t\t\treturn mid\n\t\t} else if Poly(xs, mid)*Poly(xs, x1) < 0 {\n\t\t\tx2 = mid\n\t\t} else {\n\t\t\tx1 = mid\n\t\t}\n\t}\n\treturn (x1 + x2) / 2\n}\n",
            "func SortThird(l []int) []int {\n    sorted_third := make([]int, 0)\n    for i := 0; i < len(l); i += 3 {\n        sorted_third = append(sorted_third, l[i])\n    }\n    sort.Ints(sorted_third)\n\n    result := make([]int, 0)\n    for i, j := 0, 0; i < len(l); i++ {\n        if i%3 == 0 {\n            result = append(result, sorted_third[j])\n            j++\n        } else {\n            result = append(result, l[i])\n        }\n    }\n    return result\n}\n",
            "func ListUnique(l []int) []int {\n    uniqueElements := make(map[int]bool)\n    for _, v := range l {\n        uniqueElements[v] = true\n    }\n    result := make([]int, 0, len(uniqueElements))\n    for k := range uniqueElements {\n        result = append(result, k)\n    }\n    sort.Ints(result)\n    return result\n}\n",
            "func MaxElement(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n    max := l[0]\n    for _, value := range l {\n        if value > max {\n            max = value\n        }\n    }\n    return max\n}\n",
            "func FizzBuzz(n int) int {\n    cnt := 0\n    for i := 0; i < n; i++ {\n        if i%11 == 0 || i%13 == 0 {\n            str_i := strconv.Itoa(i)\n            for _, char := range str_i {\n                if char == '7' {\n                    cnt++\n                }\n            }\n        }\n    }\n    return cnt\n}\n",
            "func SortEven(l []int) []int {\n    evenElements := make([]int, 0)\n    for i := 0; i < len(l); i += 2 {\n        evenElements = append(evenElements, l[i])\n    }\n    \n    sort.Ints(evenElements)\n\n    result := make([]int, len(l))\n    evenIndex := 0\n    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n            result[i] = evenElements[evenIndex]\n            evenIndex++\n        } else {\n            result[i] = l[i]\n        }\n    }\n    return result\n}\n",
            "func EncodeCyclic(s string) string {\n    result := \"\"\n    for i := 0; i < len(s); i += 3 {\n        if i+3 > len(s) {\n            result += s[i:]\n        } else {\n            result += s[i+1:i+3]\n            result += string(s[i])\n        }\n    }\n    return result\n}\n\nfunc DecodeCyclic(s string) string {\n    return EncodeCyclic(EncodeCyclic(s))\n}\n",
            "func PrimeFib(n int) int {\n    f := []int{0, 1}\n    cnt := 0\n    for cnt < n {\n        f = append(f, f[len(f)-2] + f[len(f)-1])\n        if isPrime(f[len(f)-1]) {\n            cnt++\n        }\n    }\n    return f[len(f)-1]\n}\n\nfunc isPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func TriplesSumToZero(l []int) bool {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            for k := j + 1; k < len(l); k++ {\n                if l[i] + l[j] + l[k] == 0 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n",
            "func CarRaceCollision(n int) int {\n    return n * n\n}\n",
            "func IncrList(l []int) []int {\n    result := make([]int, len(l))\n    for i, v := range l {\n        result[i] = v + 1\n    }\n    return result\n}\n",
            "func PairsSumToZero(l []int) bool {\n    seen := make(map[int]bool)\n    for _, num := range l {\n        if seen[-num] {\n            return true\n        }\n        seen[num] = true\n    }\n    return false\n}\n",
            "func ChangeBase(x int, bas int) string {\n    if x == 0 {\n        return \"0\"\n    }\n    digits := \"\"\n    for x > 0 {\n        digits += strconv.Itoa(x % bas)\n        x /= bas\n    }\n    runes := []rune(digits)\n    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        runes[i], runes[j] = runes[j], runes[i]\n    }\n    return string(runes)\n}\n",
            "func TriangleArea(a int, h int) float64 {\n    return float64(a * h) / 2.0\n}\n",
            "func Fib4(n int) int {\n    fib := [4]int{0, 0, 2, 0}\n    for i := 4; i <= n; i++ {\n        fib[i%4] = fib[0] + fib[1] + fib[2] + fib[3]\n    }\n    return fib[n%4]\n}\n",
            "func Median(l []float64) float64 {\n    sl := make([]float64, len(l))\n    copy(sl, l)\n    sort.Float64s(sl)\n    if len(sl)%2 != 0 {\n        return sl[len(sl)/2]\n    } else {\n        return (sl[len(sl)/2] + sl[len(sl)/2-1]) / 2.0\n    }\n}\n",
            "func IsPalindrome(txt string) bool {\n    return txt == reverseString(txt)\n}\n\nfunc reverseString(s string) string {\n    runes := []rune(s)\n    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        runes[i], runes[j] = runes[j], runes[i]\n    }\n    return string(runes)\n}\n",
            "func Modp(n int, p int) int {\n    ret := 1\n    for i := 0; i < n; i++ {\n        ret = (ret * 2) % p\n    }\n    return ret\n}\n",
            "func EncodeShift(s string) string {\n    result := \"\"\n    for _, ch := range s {\n        result += string(((ch - 'a' + 5) % 26) + 'a')\n    }\n    return result\n}\n\nfunc DecodeShift(s string) string {\n    result := \"\"\n    for _, ch := range s {\n        result += string(((ch - 'a' + 21) % 26) + 'a')\n    }\n    return result\n}\n",
            "func RemoveVowels(txt string) string {\n    vowels := \"aeiouAEIOU\"\n    result := \"\"\n    for _, char := range txt {\n        if !strings.ContainsRune(vowels, char) {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
            "func BelowThreshold(l []int, t int) bool {\n    for _, x := range l {\n        if x >= t {\n            return false\n        }\n    }\n    return true\n}\n",
            "func Add(x int, y int) int {\n    return x + y\n}\n",
            "func SameChars(s0 string, s1 string) bool {\n    set0 := make(map[rune]bool)\n    set1 := make(map[rune]bool)\n\n    for _, char := range s0 {\n        set0[char] = true\n    }\n\n    for _, char := range s1 {\n        set1[char] = true\n    }\n\n    if len(set0) != len(set1) {\n        return false\n    }\n\n    for char := range set0 {\n        if !set1[char] {\n            return false\n        }\n    }\n\n    return true\n}\n",
            "func Fib(n int) int {\n    if n <= 1 {\n        return n\n    } else {\n        return Fib(n - 1) + Fib(n - 2)\n    }\n}\n",
            "func CorrectBracketing(brackets string) bool {\n    depth := 0\n    for _, b := range brackets {\n        if b == '<' {\n            depth += 1\n        } else if b == '>' {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "func Monotonic(l []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    \n    increasing := true\n    decreasing := true\n    \n    for i := 1; i < len(l); i++ {\n        if l[i] > l[i-1] {\n            decreasing = false\n        }\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n    }\n    \n    return increasing || decreasing\n}\n",
            "func Common(l1 []int, l2 []int) []int {\n    s1 := make(map[int]struct{})\n    for _, num := range l1 {\n        s1[num] = struct{}{}\n    }\n    \n    s2 := make(map[int]struct{})\n    for _, num := range l2 {\n        s2[num] = struct{}{}\n    }\n    \n    var result []int\n    for num := range s1 {\n        if _, found := s2[num]; found {\n            result = append(result, num)\n        }\n    }\n    \n    return result\n}\n",
            "func LargestPrimeFactor(n int) int {\n    i := 2\n    for i * i <= n {\n        if n % i == 0 {\n            n /= i\n        } else {\n            i += 1\n        }\n    }\n    return n\n}\n",
            "func SumToN(n int) int {\n    return (n * (n + 1)) / 2\n}\n",
            "func CorrectBracketing(brackets string) bool {\n    depth := 0\n    for _, b := range brackets {\n        if b == '(' {\n            depth += 1\n        } else if b == ')' {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "func Derivative(xs []int) []int {\n    result := []int{}\n    for i := 1; i < len(xs); i++ {\n        result = append(result, xs[i]*i)\n    }\n    return result\n}\n",
            "func Fibfib(n int) int {\n\tif n <= 1 {\n\t\treturn 0\n\t}\n\ta, b, c := 0, 0, 1\n\tfor n > 2 {\n\t\ta, b, c = b, c, a+b+c\n\t\tn -= 1\n\t}\n\treturn c\n}\n",
            "func VowelsCount(s string) int {\n    vowels := \"aeiou\"\n    cnt := 0\n    for i := 0; i < len(s); i++ {\n        if strings.ContainsRune(vowels, unicode.ToLower(rune(s[i]))) || (i == len(s)-1 && unicode.ToLower(rune(s[i])) == 'y') {\n            cnt++\n        }\n    }\n    return cnt\n}\n",
            "func CircularShift(x int, shift int) string {\n    x_str := strconv.Itoa(x)\n    if shift > len(x_str) {\n        return reverseString(x_str)\n    } else {\n        return x_str[len(x_str)-shift:] + x_str[:len(x_str)-shift]\n    }\n}\n\nfunc reverseString(s string) string {\n    runes := []rune(s)\n    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        runes[i], runes[j] = runes[j], runes[i]\n    }\n    return string(runes)\n}\n",
            "func DigitSum(s string) int {\n    sum := 0\n    for _, c := range s {\n        if unicode.IsUpper(c) {\n            sum += int(c)\n        }\n    }\n    return sum\n}\n",
            "func FruitDistribution(s string, n int) int {\n    words := strings.Fields(s)\n    applesIndex := strings.Index(words, \"apples\") - 1\n    orangesIndex := strings.Index(words, \"oranges\") - 1\n    apples, _ := strconv.Atoi(words[applesIndex])\n    oranges, _ := strconv.Atoi(words[orangesIndex])\n    return n - apples - oranges\n}\n",
            "func Pluck(arr []int) []int {\n    evens := []int{}\n    for _, n := range arr {\n        if n%2 == 0 {\n            evens = append(evens, n)\n        }\n    }\n    if len(evens) == 0 {\n        return []int{}\n    }\n    minEven := evens[0]\n    for _, even := range evens {\n        if even < minEven {\n            minEven = even\n        }\n    }\n    for i, n := range arr {\n        if n == minEven {\n            return []int{minEven, i}\n        }\n    }\n    return []int{}\n}\n",
            "func Search(lst []int) int {\n    freqs := make(map[int]int)\n    for _, n := range lst {\n        freqs[n]++\n    }\n    var goodVals []int\n    for k, v := range freqs {\n        if v >= k {\n            goodVals = append(goodVals, k)\n        }\n    }\n    if len(goodVals) > 0 {\n        maxVal := goodVals[0]\n        for _, val := range goodVals {\n            if val > maxVal {\n                maxVal = val\n            }\n        }\n        return maxVal\n    }\n    return -1\n}\n",
            "func StrangeSortList(lst []int) []int {\n    sl := make([]int, len(lst))\n    copy(sl, lst)\n    sort.Ints(sl)\n    result := []int{}\n    left, right := 0, len(sl)-1\n    for left <= right {\n        result = append(result, sl[left])\n        left += 1\n        if left <= right {\n            result = append(result, sl[right])\n            right -= 1\n        }\n    }\n    return result\n}\n",
            "func TriangleArea(a int, b int, c int) float64 {\n    if a+b > c && a+c > b && b+c > a {\n        s := (a + b + c) / 2.0\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    } else {\n        return -1.0\n    }\n}\n",
            "func WillItFly(q []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n    isPalin := true\n    for i := 0; i < len(q)/2; i++ {\n        if q[i] != q[len(q)-i-1] {\n            isPalin = false\n            break\n        }\n    }\n    total := 0\n    for _, v := range q {\n        total += v\n    }\n    return isPalin && total <= w\n}\n",
            "func SmallestChange(arr []int) int {\n    ans := 0\n    for i := 0; i < len(arr) / 2; i++ {\n        if arr[i] != arr[len(arr) - i - 1] {\n            ans++\n        }\n    }\n    return ans\n}\n",
            "func TotalMatch(lst1 []string, lst2 []string) []string {\n    cnt1 := 0\n    cnt2 := 0\n    \n    for _, s := range lst1 {\n        cnt1 += len(s)\n    }\n    \n    for _, s := range lst2 {\n        cnt2 += len(s)\n    }\n    \n    if cnt1 <= cnt2 {\n        return lst1\n    }\n    return lst2\n}\n",
            "func IsMultiplyPrime(a int) bool {\n    cnt := 0\n    for i := 2; i <= a; i++ {\n        if is_prime(i) {\n            for a%i == 0 {\n                cnt++\n                a /= i\n            }\n        }\n    }\n    return cnt == 3\n}\n\nfunc is_prime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func IsSimplePower(x int, n int) bool {\n    if n < 2 {\n        return x == n\n    }\n    tmp := 1\n    for tmp < x {\n        tmp *= n\n    }\n    return tmp == x\n}\n",
            "func IsCube(a int) bool {\n    a = abs(a)\n    root := int(math.Round(math.Pow(float64(a), 1.0/3.0)))\n    return root*root*root == a\n}\n",
            "func HexKey(num string) int {\n    count := 0\n    for _, x := range num {\n        if x == '2' || x == '3' || x == '5' || x == '7' || x == 'B' || x == 'D' {\n            count++\n        }\n    }\n    return count\n}\n",
            "func DecimalToBinary(dec int) string {\n    return fmt.Sprintf(\"db%bdb\", dec)\n}\n",
            "func IsHappy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n    for i := 0; i < len(s)-2; i++ {\n        if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return true\n}\n",
            "func NumericalLetterGrade(grades []float64) []string {\n    result := []string{}\n    for _, g := range grades {\n        if g == 4.0 {\n            result = append(result, \"A+\")\n        } else if g > 3.7 {\n            result = append(result, \"A\")\n        } else if g > 3.3 {\n            result = append(result, \"A-\")\n        } else if g > 3.0 {\n            result = append(result, \"B+\")\n        } else if g > 2.7 {\n            result = append(result, \"B\")\n        } else if g > 2.3 {\n            result = append(result, \"B-\")\n        } else if g > 2.0 {\n            result = append(result, \"C+\")\n        } else if g > 1.7 {\n            result = append(result, \"C\")\n        } else if g > 1.3 {\n            result = append(result, \"C-\")\n        } else if g > 1.0 {\n            result = append(result, \"D+\")\n        } else if g > 0.7 {\n            result = append(result, \"D\")\n        } else if g > 0.0 {\n            result = append(result, \"D-\")\n        } else {\n            result = append(result, \"E\")\n        }\n    }\n    return result\n}\n",
            "func PrimeLength(s string) bool {\n    length := len(s)\n    if length < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Sqrt(float64(length))); i++ {\n        if length%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func StartsOneEnds(n int) int {\n    if n == 1 {\n        return 1\n    }\n    return 2 * 9 * int(math.Pow(10, float64(n-2)))\n}\n",
            "func Solve(n int) string {\n    digitsSum := 0\n    for n > 0 {\n        digitsSum += n % 10\n        n /= 10\n    }\n    return fmt.Sprintf(\"%b\", digitsSum)\n}\n",
            "func Add(lst []int) int {\n    result := 0\n    for i := 1; i < len(lst); i += 2 {\n        if lst[i]%2 == 0 {\n            result += lst[i]\n        }\n    }\n    return result\n}\n",
            "func AntiShuffle(s string) string {\n    result := \"\"\n    words := strings.Fields(s)\n    \n    for _, word := range words {\n        sortString(word)\n        if result != \"\" {\n            result += \" \"\n        }\n        result += word\n    }\n    \n    return result\n}\n\nfunc sortString(w string) string {\n    s := []rune(w)\n    sort.Slice(s, func(i, j int) bool {\n        return s[i] < s[j]\n    })\n    return string(s)\n}\n",
            "func GetRow(lst [][]int, x int) [][]int {\n    var coords [][]int\n    for i := 0; i < len(lst); i++ {\n        for j := 0; j < len(lst[i]); j++ {\n            if lst[i][j] == x {\n                coords = append(coords, []int{i, j})\n            }\n        }\n    }\n    sort.Slice(coords, func(a, b int) bool {\n        return coords[a][0] < coords[b][0] || (coords[a][0] == coords[b][0] && coords[a][1] > coords[b][1])\n    })\n    return coords\n}\n",
            "func SortArray(arr []int) []int {\n    if len(arr) == 0 {\n        return []int{}\n    }\n    if (arr[0] + arr[len(arr)-1])%2 == 0 {\n        sortedArr := make([]int, len(arr))\n        copy(sortedArr, arr)\n        sort.Sort(sort.Reverse(sort.IntSlice(sortedArr)))\n        return sortedArr\n    } else {\n        sortedArr := make([]int, len(arr))\n        copy(sortedArr, arr)\n        sort.Ints(sortedArr)\n        return sortedArr\n    }\n}\n",
            "func Encrypt(s string) string {\n    result := \"\"\n    for _, ch := range s {\n        shifted := int(ch) + 4\n        if shifted > 'z' {\n            shifted -= 26\n        }\n        result += string(rune(shifted))\n    }\n    return result\n}\n",
            "func NextSmallest(lst []int) *int {\n    sl := make(map[int]struct{})\n    for _, v := range lst {\n        sl[v] = struct{}{}\n    }\n    if len(sl) < 2 {\n        return nil\n    }\n    smallest := int(^uint(0) >> 1)\n    secondSmallest := int(^uint(0) >> 1)\n    for k := range sl {\n        if k < smallest {\n            secondSmallest = smallest\n            smallest = k\n        } else if k < secondSmallest {\n            secondSmallest = k\n        }\n    }\n    return &secondSmallest\n}\n",
            "func IsBored(s string) int {\n    sentences := strings.FieldsFunc(s, func(r rune) bool {\n        return r == '.' || r == '!' || r == '?'\n    })\n\n    count := 0\n    for _, sentence := range sentences {\n        trimmed_sentence := sentence\n        if strings.HasPrefix(trimmed_sentence, \" \") {\n            trimmed_sentence = strings.TrimPrefix(trimmed_sentence, \" \")\n        }\n\n        if len(trimmed_sentence) >= 2 && trimmed_sentence[:2] == \"I \" {\n            count++\n        }\n    }\n\n    return count\n}\n",
            "func AnyInt(x interface{}, y interface{}, z interface{}) bool {\n    xInt, okX := x.(int)\n    yInt, okY := y.(int)\n    zInt, okZ := z.(int)\n\n    if okX && okY && okZ {\n        if (xInt + yInt == zInt) || (xInt + zInt == yInt) || (yInt + zInt == xInt) {\n            return true\n        }\n    }\n    return false\n}\n",
            "func Encode(message string) string {\n    vowels := \"aeiouAEIOU\"\n    result := \"\"\n    for _, ch := range message {\n        if unicode.IsLetter(ch) {\n            var ch1 rune\n            if unicode.IsLower(ch) {\n                ch1 = unicode.ToUpper(ch)\n            } else {\n                ch1 = unicode.ToLower(ch)\n            }\n            if strings.ContainsRune(vowels, ch1) {\n                ch1 += 2\n            }\n            result += string(ch1)\n        } else {\n            result += string(ch)\n        }\n    }\n    return result\n}\n",
            "func is_prime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc Skjkasdkd(lst []int) int {\n    var primes []int\n    for _, n := range lst {\n        if is_prime(n) {\n            primes = append(primes, n)\n        }\n    }\n    if len(primes) == 0 {\n        return 0\n    }\n    largest := primes[0]\n    for _, prime := range primes {\n        if prime > largest {\n            largest = prime\n        }\n    }\n    sum := 0\n    for largest > 0 {\n        sum += largest % 10\n        largest /= 10\n    }\n    return sum\n}\n",
            "func CheckDictCase(d map[string]string) bool {\n    if len(d) == 0 {\n        return false\n    }\n    \n    allLower := true\n    allUpper := true\n    \n    for key, _ := range d {\n        for _, c := range key {\n            if !unicode.IsLower(c) {\n                allLower = false\n            }\n            if !unicode.IsUpper(c) {\n                allUpper = false\n            }\n        }\n        if !allLower && !allUpper {\n            return false\n        }\n    }\n    \n    return allLower || allUpper\n}\n",
            "func CountUpTo(n int) []int {\n    var primes []int\n    for num := 2; num < n; num++ {\n        isPrime := true\n        for _, p := range primes {\n            if num%p == 0 {\n                isPrime = false\n                break\n            }\n        }\n        if isPrime {\n            primes = append(primes, num)\n        }\n    }\n    return primes\n}\n",
            "func Multiply(a int, b int) int {\n    return (abs(a) % 10) * (abs(b) % 10)\n}\n",
            "func CountUpper(s string) int {\n    vowels := \"AEIOU\"\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if i%2 == 0 {\n            for _, v := range vowels {\n                if s[i] == v {\n                    count++\n                    break\n                }\n            }\n        }\n    }\n    return count\n}\n",
            "func ClosestInteger(value string) int {\n    num, _ := strconv.ParseFloat(value, 64)\n    if num >= 0 {\n        return int(num + 0.5)\n    } else {\n        return int(num - 0.5)\n    }\n}\n",
            "func MakeAPile(n int) []int {\n    pile := make([]int, n)\n    for i := 0; i < n; i++ {\n        pile[i] = n + 2*i\n    }\n    return pile\n}\n",
            "func WordsString(s string) []string {\n    var result []string\n    words := strings.FieldsFunc(s, func(c rune) bool {\n        return c == ',' || c == ' '\n    })\n    for _, w := range words {\n        if len(w) > 0 {\n            result = append(result, w)\n        }\n    }\n    return result\n}\n",
            "func ChooseNum(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return y - 1\n}\n",
            "func RoundedAvg(n int, m int) *string {\n    if n > m {\n        return nil\n    }\n    rAvg := int((m + n) / 2.0 + 0.5)\n    result := fmt.Sprintf(\"%b\", rAvg)\n    return &result\n}\n",
            "func UniqueDigits(x []int) []int {\n    all_digits_odd := func(s string) bool {\n        for _, digit := range s {\n            if (digit-'0')%2 == 0 {\n                return false\n            }\n        }\n        return true\n    }\n\n    var result []int\n    for _, num := range x {\n        if all_digits_odd(fmt.Sprintf(\"%d\", num)) {\n            result = append(result, num)\n        }\n    }\n    sort.Ints(result)\n    return result\n}\n",
            "func ByLength(arr []int) []string {\n    digit_names := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n    var sorted_arr []int\n    \n    for _, x := range arr {\n        if x >= 1 && x <= 9 {\n            sorted_arr = append(sorted_arr, x)\n        }\n    }\n    \n    sort.Slice(sorted_arr, func(i, j int) bool {\n        return sorted_arr[i] > sorted_arr[j]\n    })\n    \n    var result []string\n    for _, x := range sorted_arr {\n        result = append(result, digit_names[x-1])\n    }\n    \n    return result\n}\n",
            "func F(n int) []int {\n    nums := make([]int, n)\n    for i := 0; i < n; i++ {\n        nums[i] = i + 1\n    }\n    \n    result := []int{}\n    for i := 0; i < n; i++ {\n        if (i + 1) % 2 != 0 {\n            sum := 0\n            for j := 0; j <= i; j++ {\n                sum += nums[j]\n            }\n            result = append(result, sum)\n        } else {\n            product := 1\n            for j := 0; j <= i; j++ {\n                product *= nums[j]\n            }\n            result = append(result, product)\n        }\n    }\n    \n    return result\n}\n",
            "func EvenOddPalindrome(n int) []int {\n    cnt := make([]int, 2)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(fmt.Sprintf(\"%d\", i)) {\n            cnt[i%2]++\n        }\n    }\n    return cnt\n}\n\nfunc isPalindrome(txt string) bool {\n    for i := 0; i < len(txt)/2; i++ {\n        if txt[i] != txt[len(txt)-1-i] {\n            return false\n        }\n    }\n    return true\n}\n",
            "func digitsSum(n int) int {\n    nStr := fmt.Sprintf(\"%d\", n)\n    if n >= 0 {\n        sum := 0\n        for _, d := range nStr {\n            digit, _ := strconv.Atoi(string(d))\n            sum += digit\n        }\n        return sum\n    } else {\n        absN := Abs(n)\n        firstTwoDigits, _ := strconv.Atoi(nStr[:2])\n        return (firstTwoDigits * 2) + digitsSum(absN)\n    }\n}\n\nfunc CountNums(arr []int) int {\n    count := 0\n    for _, n := range arr {\n        if digitsSum(n) > 0 {\n            count++\n        }\n    }\n    return count\n}\n",
            "func MoveOneBall(arr []int) bool {\n    if len(arr) == 0 {\n        return true\n    }\n    sortedArr := make([]int, len(arr))\n    copy(sortedArr, arr)\n    sort.Ints(sortedArr)\n    for i := 0; i < len(arr); i++ {\n        if equal(arr[i:], sortedArr[:len(arr)-i]) && equal(arr[:i], sortedArr[len(arr)-i:]) {\n            return true\n        }\n    }\n    return false\n}\n\nfunc equal(a, b []int) bool {\n    if len(a) != len(b) {\n        return false\n    }\n    for i := range a {\n        if a[i] != b[i] {\n            return false\n        }\n    }\n    return true\n}\n",
            "func CanExchange(lst1 []int, lst2 []int) string {\n    odd_cnt := 0\n    for _, num := range lst1 {\n        if num%2 != 0 {\n            odd_cnt++\n        }\n    }\n    even_cnt := 0\n    for _, num := range lst2 {\n        if num%2 == 0 {\n            even_cnt++\n        }\n    }\n    if even_cnt >= odd_cnt {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n",
            "func Histogram(test string) map[string]int {\n    freq := make(map[string]int)\n    words := strings.Fields(test)\n    for _, word := range words {\n        if word != \"\" {\n            freq[word]++\n        }\n    }\n    result := make(map[string]int)\n    if len(freq) > 0 {\n        maxFreq := 0\n        for _, count := range freq {\n            if count > maxFreq {\n                maxFreq = count\n            }\n        }\n        for word, count := range freq {\n            if count == maxFreq {\n                result[word] = count\n            }\n        }\n    }\n    return result\n}\n",
            "func ReverseDelete(s string, c string) []string {\n    s1 := \"\"\n    for _, ch := range s {\n        if !strings.ContainsRune(c, ch) {\n            s1 += string(ch)\n        }\n    }\n    isPal := func(str string) bool {\n        run := []rune(str)\n        for i, j := 0, len(run)-1; i < j; i, j = i+1, j-1 {\n            if run[i] != run[j] {\n                return false\n            }\n        }\n        return true\n    }\n    return []string{s1, if isPal(s1) { \"yes\" } else { \"no\" }}\n}\n",
            "func OddCount(lst []string) []string {\n    result := []string{}\n    for _, num := range lst {\n        n := 0\n        for _, d := range num {\n            if d%2 == 1 {\n                n++\n            }\n        }\n        rs := \"the number of odd elements in the string i of the input.\"\n        result = append(result, strings.Replace(rs, \"i\", strconv.Itoa(n), -1))\n    }\n    return result\n}\n",
            "func MinSubArraySum(nums []int) int {\n    min_sum := 0\n    cur_sum := 0\n    for _, n := range nums {\n        if cur_sum+n < 0 {\n            cur_sum += n\n        } else {\n            cur_sum = 0\n        }\n        if cur_sum < min_sum {\n            min_sum = cur_sum\n        }\n    }\n    if min_sum == 0 {\n        min_sum = nums[0]\n        for _, n := range nums {\n            if n < min_sum {\n                min_sum = n\n            }\n        }\n    }\n    return min_sum\n}\n",
            "func MaxFill(grid [][]int, capacity int) int {\n    result := 0\n    for _, arr := range grid {\n        sum := 0\n        for _, num := range arr {\n            sum += num\n        }\n        result += (sum + capacity - 1) / capacity\n    }\n    return result\n}\n",
            "func SortArray(arr []int) []int {\n    countOnes := func(num int) int {\n        count := 0\n        for num > 0 {\n            count += num & 1\n            num >>= 1\n        }\n        return count\n    }\n\n    sortedArr := make([]int, len(arr))\n    copy(sortedArr, arr)\n\n    sort.Slice(sortedArr, func(i, j int) bool {\n        onesI := countOnes(sortedArr[i])\n        onesJ := countOnes(sortedArr[j])\n        if onesI == onesJ {\n            return sortedArr[i] < sortedArr[j]\n        }\n        return onesI < onesJ\n    })\n\n    return sortedArr\n}\n",
            "func SelectWords(s string, n int) []string {\n    consonants := \"bcdfghjklmnpqrstvwxyz\"\n    words := make([]string, 0)\n    word := \"\"\n\n    for _, c := range s {\n        if unicode.IsSpace(c) {\n            if word != \"\" {\n                words = append(words, word)\n                word = \"\"\n            }\n        } else {\n            word += string(c)\n        }\n    }\n\n    if word != \"\" {\n        words = append(words, word)\n    }\n\n    result := make([]string, 0)\n    for _, w := range words {\n        consonantCount := 0\n        for _, c := range w {\n            lowerC := unicode.ToLower(c)\n            if strings.ContainsRune(consonants, lowerC) {\n                consonantCount++\n            }\n        }\n        if consonantCount == n {\n            result = append(result, w)\n        }\n    }\n\n    return result\n}\n",
            "func GetClosestVowel(word string) string {\n    vowels := \"aeiouAEIOU\"\n    for i := len(word) - 2; i > 0; i-- {\n        if strings.ContainsRune(vowels, rune(word[i])) && !strings.ContainsRune(vowels, rune(word[i-1])) && !strings.ContainsRune(vowels, rune(word[i+1])) {\n            return string(word[i])\n        }\n    }\n    return \"\"\n}\n",
            "func MatchParens(lst []string) string {\n    s1 := lst[0] + lst[1]\n    s2 := lst[1] + lst[0]\n    \n    check := func(s string) bool {\n        depth := 0\n        for _, ch := range s {\n            if ch == '(' {\n                depth += 1\n            } else {\n                depth -= 1\n            }\n            if depth < 0 {\n                return false\n            }\n        }\n        return depth == 0\n    }\n    \n    if check(s1) || check(s2) {\n        return \"Yes\"\n    }\n    return \"No\"\n}\n",
            "func Maximum(arr []int, k int) []int {\n    if k == 0 {\n        return []int{}\n    }\n    sortedArr := make([]int, len(arr))\n    copy(sortedArr, arr)\n    sort.Ints(sortedArr)\n    start := len(sortedArr) - k\n    return sortedArr[start:]\n}\n",
            "func Solution(lst []int) int {\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 && lst[i] % 2 != 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n",
            "func AddElements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k && i < len(arr); i++ {\n        if len(fmt.Sprintf(\"%d\", arr[i])) <= 2 {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n",
            "func GetOddCollatz(n int) []int {\n    collatz := []int{1}\n    for n != 1 {\n        if n%2 != 0 {\n            collatz = append(collatz, n)\n            n = 3*n + 1\n        } else {\n            n /= 2\n        }\n    }\n    sort.Ints(collatz)\n    return collatz\n}\n",
            "func ValidDate(date string) bool {\n    if len(date) != 10 || date[2] != '-' || date[5] != '-' {\n        return false\n    }\n    m, _ := strconv.Atoi(date[:2])\n    d, _ := strconv.Atoi(date[3:5])\n    if (m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) && d >= 1 && d <= 31 {\n        return true\n    }\n    if (m == 4 || m == 6 || m == 9 || m == 11) && d >= 1 && d <= 30 {\n        return true\n    }\n    if m == 2 && d >= 1 && d <= 29 {\n        return true\n    }\n    return false\n}\n",
            "func SplitWords(txt string) []string {\n    var result []string\n    if strings.Contains(txt, \" \") {\n        start, end := 0, 0\n        for end = strings.Index(txt[start:], \" \"); end != -1; {\n            result = append(result, txt[start:start+end])\n            start += end + 1\n            end = strings.Index(txt[start:], \" \")\n        }\n        result = append(result, txt[start:])\n    } else if strings.Contains(txt, \",\") {\n        start, end := 0, 0\n        for end = strings.Index(txt[start:], \",\"); end != -1; {\n            result = append(result, txt[start:start+end])\n            start += end + 1\n            end = strings.Index(txt[start:], \",\")\n        }\n        result = append(result, txt[start:])\n    } else {\n        count := 0\n        for _, c := range txt {\n            if unicode.IsLower(c) && (int(c) % 2 == 0) {\n                count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"%d\", count))\n    }\n    return result\n}\n",
            "func IsSorted(lst []int) bool {\n    for i := 1; i < len(lst); i++ {\n        if lst[i-1] > lst[i] {\n            return false\n        }\n    }\n    freq := make(map[int]int)\n    for _, num := range lst {\n        freq[num]++\n    }\n    for _, count := range freq {\n        if count > 2 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func is_prime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc Intersection(interval1 []int, interval2 []int) string {\n    l := max(interval1[0], interval2[0])\n    r := min(interval1[1], interval2[1])\n    length := r - l\n    if length > 0 && is_prime(length) {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}\n",
            "func ProdSigns(arr []int) *int {\n    if len(arr) == 0 {\n        return nil\n    }\n    for _, n := range arr {\n        if n == 0 {\n            result := 0\n            return &result\n        }\n    }\n    sign := 1\n    countNegatives := 0\n    for _, n := range arr {\n        if n < 0 {\n            countNegatives++\n        }\n    }\n    if countNegatives%2 == 1 {\n        sign = -1\n    }\n    sumOfAbs := 0\n    for _, n := range arr {\n        sumOfAbs += int(math.Abs(float64(n)))\n    }\n    result := sign * sumOfAbs\n    return &result\n}\n",
            "func MinPath(grid [][]int, k int) []int {\n    n := len(grid)\n    min_val := n*n + 1\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if grid[i][j] == 1 {\n                temp := []int{}\n                if i != 0 {\n                    temp = append(temp, grid[i-1][j])\n                }\n                if j != 0 {\n                    temp = append(temp, grid[i][j-1])\n                }\n                if i != n-1 {\n                    temp = append(temp, grid[i+1][j])\n                }\n                if j != n-1 {\n                    temp = append(temp, grid[i][j+1])\n                }\n                for _, val := range temp {\n                    if val < min_val {\n                        min_val = val\n                    }\n                }\n            }\n        }\n    }\n    result := []int{}\n    for i := 0; i < k; i++ {\n        if i%2 == 0 {\n            result = append(result, 1)\n        } else {\n            result = append(result, min_val)\n        }\n    }\n    return result\n}\n",
            "func Tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n    }\n    seq := []float64{1, 3}\n    for i := 2; i <= n; i++ {\n        if i%2 == 0 {\n            seq = append(seq, float64(i)/2.0+1)\n        } else {\n            seq = append(seq, seq[i-1]+seq[i-2]+float64(i+3)/2.0)\n        }\n    }\n    result := make([]int, len(seq))\n    for i := range seq {\n        result[i] = int(seq[i])\n    }\n    return result\n}\n",
            "func Digits(n int) int {\n    product := 1\n    hasOdd := false\n    for n > 0 {\n        digit := n % 10\n        if digit%2 == 1 {\n            product *= digit\n            hasOdd = true\n        }\n        n /= 10\n    }\n    if hasOdd {\n        return product\n    } else {\n        return 0\n    }\n}\n",
            "func IsNested(s string) bool {\n    openIdx := []int{}\n    closeIdx := []int{}\n    for i := 0; i < len(s); i++ {\n        if s[i] == '[' {\n            openIdx = append(openIdx, i)\n        } else if s[i] == ']' {\n            closeIdx = append(closeIdx, i)\n        }\n    }\n    l := len(closeIdx)\n    for j := 0; j < l/2; j++ {\n        closeIdx[j], closeIdx[l-j-1] = closeIdx[l-j-1], closeIdx[j]\n    }\n    cnt := 0\n    l = len(closeIdx)\n    i := 0\n    for _, idx := range openIdx {\n        if i < l && idx < closeIdx[i] {\n            cnt++\n            i++\n        }\n    }\n    return cnt >= 2\n}\n",
            "func SumSquares(lst []float64) int {\n    sum := 0\n    for _, n := range lst {\n        sum += int(math.Pow(math.Ceil(n), 2))\n    }\n    return sum\n}\n",
            "func CheckIfLastCharIsALetter(txt string) bool {\n    if txt == \"\" {\n        return false\n    }\n    lastSpace := strings.LastIndex(txt, \" \")\n    last := txt[lastSpace+1:]\n    return len(last) == 1 && unicode.IsLetter(rune(last[0]))\n}\n",
            "func CanArrange(arr []int) int {\n    if len(arr) <= 1 {\n        return -1\n    }\n    var idx []int\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < arr[i-1] {\n            idx = append(idx, i)\n        }\n    }\n    if len(idx) > 0 {\n        maxIdx := idx[0]\n        for _, v := range idx {\n            if v > maxIdx {\n                maxIdx = v\n            }\n        }\n        return maxIdx\n    }\n    return -1\n}\n",
            "func LargestSmallestIntegers(lst []int) []*int {\n    var neg []int\n    var pos []int\n    \n    for _, i := range lst {\n        if i < 0 {\n            neg = append(neg, i)\n        } else if i > 0 {\n            pos = append(pos, i)\n        }\n    }\n    \n    var maxNeg *int\n    if len(neg) > 0 {\n        maxNeg = new(int)\n        *maxNeg = neg[0]\n        for _, n := range neg {\n            if n > *maxNeg {\n                *maxNeg = n\n            }\n        }\n    }\n    \n    var minPos *int\n    if len(pos) > 0 {\n        minPos = new(int)\n        *minPos = pos[0]\n        for _, p := range pos {\n            if p < *minPos {\n                *minPos = p\n            }\n        }\n    }\n    \n    return []*int{maxNeg, minPos}\n}\n",
            "func anyToReal(o interface{}) (float64, error) {\n    switch v := o.(type) {\n    case string:\n        f, err := strconv.ParseFloat(strings.ReplaceAll(v, \",\", \".\"), 64)\n        if err != nil {\n            return 0, fmt.Errorf(\"type Error\")\n        }\n        return f, nil\n    case int:\n        return float64(v), nil\n    case float64:\n        return v, nil\n    default:\n        return 0, fmt.Errorf(\"type Error\")\n    }\n}\n\nfunc CompareOne(a interface{}, b interface{}) *float64 {\n    a1, err := anyToReal(a)\n    if err != nil {\n        panic(err.Error())\n    }\n    b1, err := anyToReal(b)\n    if err != nil {\n        panic(err.Error())\n    }\n    if a1 == b1 {\n        return nil\n    } else if a1 > b1 {\n        r := a1\n        return &r\n    } else {\n        r := b1\n        return &r\n    }\n}\n",
            "func IsEqualToSumEven(n int) bool {\n    return n%2 == 0 && n >= 8\n}\n",
            "func SpecialFactorial(n int) int {\n    fact := 1\n    result := 1\n    for i := 1; i <= n; i++ {\n        fact *= i\n        result *= fact\n    }\n    return result\n}\n",
            "func FixSpaces(txt string) string {\n    return regexp.MustCompile(`\\s{3,}`).ReplaceAllString(strings.ReplaceAll(txt, \" \", \"_\"), \"-\")\n}\n",
            "func FileNameCheck(fileName string) string {\n    suf := []string{\"txt\", \"exe\", \"dll\"}\n    lst := strings.Split(fileName, \".\")\n    if len(lst) != 2 || !contains(suf, lst[1]) || len(lst[0]) == 0 || !isAlpha(lst[0][0]) || countDigits(lst[0]) > 3 {\n        return \"No\"\n    }\n    return \"Yes\"\n}\n\nfunc contains(slice []string, item string) bool {\n    for _, v := range slice {\n        if v == item {\n            return true\n        }\n    }\n    return false\n}\n\nfunc isAlpha(char byte) bool {\n    return (char >= 'a' && char <= 'z') || (char >= 'A' && char <= 'Z')\n}\n\nfunc countDigits(str string) int {\n    count := 0\n    for _, char := range str {\n        if unicode.IsDigit(char) {\n            count++\n        }\n    }\n    return count\n}\n",
            "func SumSquares(lst []int) int {\n    result := 0\n    for i := 0; i < len(lst); i++ {\n        if i%3 == 0 {\n            result += lst[i] * lst[i]\n        } else if i%4 == 0 {\n            result += lst[i] * lst[i] * lst[i]\n        } else {\n            result += lst[i]\n        }\n    }\n    return result\n}\n",
            "func WordsInSentence(sentence string) string {\n    var result []string\n    words := strings.Fields(sentence)\n    for _, word := range words {\n        length := len(word)\n        if length < 2 {\n            continue\n        }\n        isPrime := true\n        for i := 2; i*i <= length; i++ {\n            if length%i == 0 {\n                isPrime = false\n                break\n            }\n        }\n        if isPrime {\n            result = append(result, word)\n        }\n    }\n    return strings.Join(result, \" \")\n}\n",
            "func Simplify(x string, n string) bool {\n    slash_pos_x := strings.Index(x, \"/\")\n    slash_pos_n := strings.Index(n, \"/\")\n    num_x, _ := strconv.Atoi(x[:slash_pos_x])\n    den_x, _ := strconv.Atoi(x[slash_pos_x+1:])\n    num_n, _ := strconv.Atoi(n[:slash_pos_n])\n    den_n, _ := strconv.Atoi(n[slash_pos_n+1:])\n    num := num_x * num_n\n    den := den_x * den_n\n    return num%den == 0\n}\n",
            "func digitsSum(n int) int {\n    nStr := fmt.Sprintf(\"%d\", n)\n    sum := 0\n    if n >= 0 {\n        for _, d := range nStr {\n            sum += int(d - '0')\n        }\n    } else {\n        prefix := nStr[:2]\n        sum += (int(prefix[0] - '0') * 10 + int(prefix[1] - '0')) * 2\n        sum += digitsSum(abs(n))\n    }\n    return sum\n}\n\nfunc OrderByPoints(nums []int) []int {\n    sort.Slice(nums, func(i, j int) bool {\n        return digitsSum(nums[i]) < digitsSum(nums[j])\n    })\n    return nums\n}\n\nfunc abs(n int) int {\n    if n < 0 {\n        return -n\n    }\n    return n\n}\n",
            "func SpecialFilter(nums []int) int {\n    odds := \"13579\"\n    count := 0\n    for _, n := range nums {\n        if n > 10 && n%2 == 1 && strings.ContainsRune(odds, rune(n/10)%10+'0') {\n            count++\n        }\n    }\n    return count\n}\n",
            "func GetMaxTriples(n int) int {\n    c := [3]int{0, 0, 0}\n    for i := 1; i <= n; i++ {\n        a := i * i - i + 1\n        c[a%3]++\n    }\n    return c[0]*c[1]*c[2] + ((c[0]*(c[0]-1)*(c[0]-2))+(c[1]*(c[1]-1)*(c[1]-2))+(c[2]*(c[2]-1)*(c[2]-2))) / 6\n}\n",
            "func Bf(planet1 string, planet2 string) []string {\n    names := []string{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n    l := -1\n    r := -1\n    for i, name := range names {\n        if name == planet1 {\n            l = i\n        }\n        if name == planet2 {\n            r = i\n        }\n    }\n    if l == -1 || r == -1 {\n        return []string{}\n    }\n    if l > r {\n        l, r = r, l\n    }\n    if l == r {\n        return []string{}\n    }\n    return names[l+1 : r]\n}\n",
            "func SortedListSum(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        if len(s)%2 == 0 {\n            result = append(result, s)\n        }\n    }\n    sort.Slice(result, func(i, j int) bool {\n        return len(result[i]) < len(result[j]) || (len(result[i]) == len(result[j]) && result[i] < result[j])\n    })\n    return result\n}\n",
            "func XOrY(n int, x int, y int) int {\n    if n < 2 {\n        return y\n    }\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        if n%i == 0 {\n            return y\n        }\n    }\n    return x\n}\n",
            "func DoubleTheDifference(lst []float64) int {\n    result := 0\n    for _, n := range lst {\n        if n >= 0 && n-float64(int(n)) == 1.0 {\n            result += int(n * n)\n        }\n    }\n    return result\n}\n",
            "func Compare(game []int, guess []int) []int {\n    result := make([]int, len(game))\n    for i := 0; i < len(game); i++ {\n        result[i] = int(math.Abs(float64(game[i] - guess[i])))\n    }\n    return result\n}\n",
            "func StrongestExtension(className string, extensions []string) string {\n    max_s := -1\n    max_ext := \"\"\n    for _, ext := range extensions {\n        upper := 0\n        lower := 0\n        for _, c := range ext {\n            if c >= 'A' && c <= 'Z' {\n                upper++\n            }\n            if c >= 'a' && c <= 'z' {\n                lower++\n            }\n        }\n        s := upper - lower\n        if s > max_s {\n            max_s = s\n            max_ext = ext\n        }\n    }\n    return className + \".\" + max_ext\n}\n",
            "func CycpatternCheck(a string, b string) bool {\n    if len(a) < len(b) {\n        return false\n    }\n    for i := 0; i < len(b); i++ {\n        rotated := b[i:] + b[:i]\n        if strings.Contains(a, rotated) {\n            return true\n        }\n    }\n    return false\n}\n",
            "func EvenOddCount(num int) []int {\n    ds := fmt.Sprintf(\"%d\", abs(num))\n    even := 0\n    for _, d := range ds {\n        if (d - '0') % 2 == 0 {\n            even++\n        }\n    }\n    return []int{even, len(ds) - even}\n}\n\nfunc abs(x int) int {\n    if x < 0 {\n        return -x\n    }\n    return x\n}\n",
            "func IntToMiniRoman(num int) string {\n    values := []int{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}\n    numerals := []string{\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"}\n    res := \"\"\n    for i := 0; i < len(values); i++ {\n        for num >= values[i] {\n            res += numerals[i]\n            num -= values[i]\n        }\n    }\n    return res\n}\n",
            "func RightAngleTriangle(a int, b int, c int) bool {\n    s := []int{a, b, c}\n    sort.Ints(s)\n    return s[0]*s[0]+s[1]*s[1] == s[2]*s[2]\n}\n",
            "func FindMax(words []string) string {\n\tmaxCnt := 0\n\tmaxW := \"\"\n\tfor _, w := range words {\n\t\tuniqueChars := make(map[rune]bool)\n\t\tfor _, c := range w {\n\t\t\tuniqueChars[c] = true\n\t\t}\n\t\tcnt := len(uniqueChars)\n\t\tif cnt > maxCnt {\n\t\t\tmaxCnt = cnt\n\t\t\tmaxW = w\n\t\t} else if cnt == maxCnt {\n\t\t\tif w < maxW {\n\t\t\t\tmaxW = w\n\t\t\t}\n\t\t}\n\t}\n\treturn maxW\n}\n",
            "func Eat(num int, need int, remaining int) []int {\n    if need <= remaining {\n        return []int{num + need, remaining - need}\n    } else {\n        return []int{num + remaining, 0}\n    }\n}\n",
            "func DoAlgebra(operators []string, operands []int) int {\n    ops := make([]string, len(operators))\n    copy(ops, operators)\n    nums := make([]int, len(operands))\n    copy(nums, operands)\n    i := len(ops) - 1\n    for i >= 0 {\n        if ops[i] == \"**\" {\n            nums[i] = int(math.Pow(float64(nums[i]), float64(nums[i+1])))\n            nums = append(nums[:i+1], nums[i+2:]...)\n            ops = append(ops[:i], ops[i+1:]...)\n        }\n        i--\n    }\n    i = 0\n    for i < len(ops) {\n        if ops[i] == \"*\" {\n            nums[i] = nums[i] * nums[i+1]\n            nums = append(nums[:i+1], nums[i+2:]...)\n            ops = append(ops[:i], ops[i+1:]...)\n            i--\n        } else if ops[i] == \"//\" {\n            nums[i] = nums[i] / nums[i+1]\n            nums = append(nums[:i+1], nums[i+2:]...)\n            ops = append(ops[:i], ops[i+1:]...)\n            i--\n        }\n        i++\n    }\n    i = 0\n    for i < len(ops) {\n        if ops[i] == \"+\" {\n            nums[i] = nums[i] + nums[i+1]\n            nums = append(nums[:i+1], nums[i+2:]...)\n            ops = append(ops[:i], ops[i+1:]...)\n            i--\n        } else if ops[i] == \"-\" {\n            nums[i] = nums[i] - nums[i+1]\n            nums = append(nums[:i+1], nums[i+2:]...)\n            ops = append(ops[:i], ops[i+1:]...)\n            i--\n        }\n        i++\n    }\n    return nums[0]\n}\n",
            "func Solve(s string) string {\n    hasAlpha := false\n    for _, ch := range s {\n        if unicode.IsLetter(ch) {\n            hasAlpha = true\n            break\n        }\n    }\n\n    if !hasAlpha {\n        runes := []rune(s)\n        for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n            runes[i], runes[j] = runes[j], runes[i]\n        }\n        return string(runes)\n    }\n\n    var result strings.Builder\n    for _, ch := range s {\n        if !unicode.IsLetter(ch) {\n            result.WriteRune(ch)\n        } else if unicode.IsUpper(ch) {\n            result.WriteRune(unicode.ToLower(ch))\n        } else if unicode.IsLower(ch) {\n            result.WriteRune(unicode.ToUpper(ch))\n        }\n    }\n    return result.String()\n}\n",
            "import (\n\t\"crypto/md5\"\n\t\"encoding/hex\"\n)\n\nfunc StringToMd5(txt string) *string {\n\tif txt == \"\" {\n\t\treturn nil\n\t}\n\thash := md5.New()\n\thash.Write([]byte(txt))\n\tdigest := hash.Sum(nil)\n\tmdString := hex.EncodeToString(digest)\n\treturn &mdString\n}\n",
            "func GenerateIntegers(a int, b int) []int {\n    lower := max(2, min(a, b))\n    upper := min(8, max(a, b))\n    result := make([]int, 0)\n    for i := lower; i <= upper; i++ {\n        if i%2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n"
        ],
        "ruby": [
            "def has_close_elements(numbers, threshold)\n    (0...numbers.size).each do |i|\n        ((i + 1)...numbers.size).each do |j|\n            return true if (numbers[i] - numbers[j]).abs < threshold\n        end\n    end\n    false\nend\n",
            "def separate_paren_groups(paren_string)\n    groups = []\n    stk = []\n    current_group = \"\"\n    paren_string.each_char do |ch|\n        if ch == '('\n            stk.push(ch)\n            current_group += ch\n        elsif ch == ')'\n            stk.pop\n            current_group += ch\n            if stk.empty?\n                groups.push(current_group)\n                current_group = \"\"\n            end\n        end\n    end\n    return groups\nend\n",
            "def truncate_number(num)\n    num - num.floor\nend\n",
            "def below_zero(operations)\n    balance = 0\n    operations.each do |op|\n        balance += op\n        return true if balance < 0\n    end\n    false\nend\n",
            "def mean_absolute_deviation(numbers)\n    sum = numbers.sum\n    mean = sum / numbers.size.to_f\n    deviation = numbers.sum { |num| (num - mean).abs }\n    deviation / numbers.size.to_f\nend\n",
            "def intersperse(numbers, delimiter)\n    result = []\n    numbers.each_with_index do |number, index|\n        if index != 0\n            result.push(delimiter)\n        end\n        result.push(number)\n    end\n    result\nend\n",
            "def parse_nested_parens(paren_string)\n    result = []\n    paren_groups = paren_string.split()\n    paren_groups.each do |group|\n        max_depth = 0\n        depth = 0\n        group.each_char do |ch|\n            if ch == \"(\"\n                depth += 1\n                max_depth = [max_depth, depth].max\n            elsif ch == \")\"\n                depth -= 1\n            end\n        end\n        result << max_depth\n    end\n    result\nend\n",
            "def filter_by_substring(strs, substring)\n    result = []\n    strs.each do |s|\n        if s.include?(substring)\n            result.push(s)\n        end\n    end\n    result\nend\n",
            "def sum_product(numbers)\n    n_sum = numbers.sum\n    n_product = numbers.reduce(1, :*)\n    [n_sum, n_product]\nend\n",
            "def rolling_max(numbers)\n    max_so_far = -Float::INFINITY\n    result = []\n    numbers.each do |num|\n        max_so_far = [max_so_far, num].max\n        result << max_so_far\n    end\n    result\nend\n",
            "# @param s [String]\n# @returns {String}\ndef make_palindrome(s)\n    return s if s == s.reverse\n    (0...s.length).each do |i|\n        return s + s[0...i].reverse if s[i..-1] == s[i..-1].reverse\n    end\n    \"\"\nend\n",
            "def string_xor(a, b)\n    result = ''\n    (0...a.length).each do |i|\n        result += (a[i] == b[i]) ? '0' : '1'\n    end\n    return result\nend\n",
            "def longest(strs)\n    return nil if strs.empty?\n    longest_s = strs[0]\n    strs.each do |s|\n        longest_s = s if s.length > longest_s.length\n    end\n    longest_s\nend\n",
            "def greatest_common_divisor(a, b)\n    if b == 0\n        return a\n    else\n        return greatest_common_divisor(b, a % b)\n    end\nend\n",
            "def all_prefixes(s)\n    prefixes = []\n    (0...s.length).each do |i|\n        prefixes << s[0..i]\n    end\n    prefixes\nend\n",
            "def string_sequence(n)\n  (0..n).map(&:to_s).join(' ')\nend\n",
            "# @param s [String]\n# @returns {Integer}\ndef count_distinct_characters(s)\n    unique_chars = Set.new\n    s.downcase.each_char do |c|\n        unique_chars.add(c)\n    end\n    unique_chars.size\nend\n",
            "def parse_music(music_string)\n    durations = {\"o\" => 4, \"o|\" => 2, \".|\" => 1}\n    result = []\n    start = 0\n    \n    while (end_index = music_string.index(' ', start))\n        note = music_string[start...end_index]\n        if durations.key?(note)\n            result << durations[note]\n        end\n        start = end_index + 1\n    end\n    \n    # Add the last note\n    last_note = music_string[start..-1]\n    if durations.key?(last_note)\n        result << durations[last_note]\n    end\n    \n    return result\nend\n",
            "# @param s [String]\n# @param substring [String]\n# @returns {Integer}\ndef how_many_times(s, substring)\n    times = 0\n    (0..s.length - substring.length).each do |i|\n        if s[i, substring.length] == substring\n            times += 1\n        end\n    end\n    return times\nend\n",
            "def sort_numbers(numbers)\n    num_dict = {\n        \"zero\" => 0,\n        \"one\" => 1,\n        \"two\" => 2,\n        \"three\" => 3,\n        \"four\" => 4,\n        \"five\" => 5,\n        \"six\" => 6,\n        \"seven\" => 7,\n        \"eight\" => 8,\n        \"nine\" => 9\n    }\n\n    num_list = numbers.split.select { |word| num_dict.key?(word) }\n    num_list.sort_by! { |word| num_dict[word] }\n\n    num_list.join(' ')\nend\n",
            "# @param numbers [Array<Float>]\n# @returns {Array<Float>}\ndef find_closest_elements(numbers)\n    return [] if numbers.size < 2\n    \n    sorted_numbers = numbers.sort\n    \n    min_diff = Float::INFINITY\n    closest_pair = []\n    \n    (1...sorted_numbers.size).each do |i|\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n        end\n    end\n    \n    closest_pair\nend\n",
            "def rescale_to_unit(numbers)\n    min_num = numbers.min\n    max_num = numbers.max\n    if min_num == max_num\n        Array.new(numbers.size, 0.0)\n    else\n        numbers.map { |num| (num - min_num) / (max_num - min_num) }\n    end\nend\n",
            "# @param values [Array<Object>]\n# @returns {Array<Integer>}\ndef filter_integers(values)\n    result = []\n    values.each do |value|\n        if value.is_a?(Integer)\n            result << value\n        end\n    end\n    return result\nend\n",
            "def str_length(s)\n    return s.length\nend\n",
            "def largest_divisor(n)\n    for i in 2...n\n        if n % i == 0\n            return n / i\n        end\n    end\n    return 1\nend\n",
            "def factorize(n)\n  factors = []\n  divisor = 2\n  while divisor <= n\n    if n % divisor == 0\n      factors.push(divisor)\n      n /= divisor\n    else\n      divisor += 1\n    end\n  end\n  factors\nend\n",
            "def remove_duplicates(numbers)\n    counts = Hash.new(0)\n    numbers.each do |num|\n        counts[num] += 1\n    end\n    res = []\n    numbers.each do |num|\n        res << num if counts[num] == 1\n    end\n    res\nend\n",
            "def flip_case(s)\n    flipped = \"\"\n    s.each_char do |ch|\n        if !ch.letter?\n            flipped += ch\n        elsif ch.downcase? == ch\n            flipped += ch.upcase\n        elsif ch.upcase? == ch\n            flipped += ch.downcase\n        end\n    end\n    return flipped\nend\n",
            "def concatenate(strs)\n    result = \"\"\n    strs.each do |str|\n        result += str\n    end\n    result\nend\n",
            "def filter_by_prefix(strs, prefix_str)\n    result = []\n    strs.each do |s|\n        if s.start_with?(prefix_str)\n            result << s\n        end\n    end\n    result\nend\n",
            "# @param l [Array<Integer>]\n# @returns {Array<Integer>}\ndef get_positive(l)\n    result = []\n    l.each do |num|\n        if num > 0\n            result.push(num)\n        end\n    end\n    result\nend\n",
            "def is_prime(n)\n    return false if n < 2\n    (2..Math.sqrt(n)).each do |i|\n        return false if n % i == 0\n    end\n    true\nend\n",
            "def poly(xs, x)\n    res = 0.0\n    xs.each_with_index do |coeff, i|\n        res += coeff * (x ** i)\n    end\n    res\nend\n\ndef find_zero(xs)\n    x1 = 1.0\n    x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0\n        x1 *= 2\n        x2 *= 2\n    end\n    while (x1 - x2).abs > 1e-10\n        mid = (x1 + x2) / 2\n        if poly(xs, mid).abs < 1e-10\n            return mid\n        elsif poly(xs, mid) * poly(xs, x1) < 0\n            x2 = mid\n        else\n            x1 = mid\n        end\n    end\n    (x1 + x2) / 2\nend\n",
            "# @param l [Array<Integer>]\n# @returns {Array<Integer>}\ndef sort_third(l)\n    sorted_third = []\n    (0...l.size).step(3) do |i|\n        sorted_third << l[i]\n    end\n    sorted_third.sort!\n\n    result = []\n    j = 0\n    (0...l.size).each do |i|\n        if i % 3 == 0\n            result << sorted_third[j]\n            j += 1\n        else\n            result << l[i]\n        end\n    end\n    result\nend\n",
            "# @param l [Array<Integer>]\n# @returns {Array<Integer>}\ndef list_unique(l)\n    unique_elements = l.uniq\n    unique_elements.sort\nend\n",
            "# @param l [Array<Integer>]\n# @returns {Integer}\ndef max_element(l)\n    return 0 if l.empty?\n    l.max\nend\n",
            "def fizz_buzz(n)\n    cnt = 0\n    (0...n).each do |i|\n        if i % 11 == 0 || i % 13 == 0\n            str_i = i.to_s\n            cnt += str_i.count('7')\n        end\n    end\n    cnt\nend\n",
            "def sort_even(l)\n  even_elements = l.select.with_index { |_, index| index.even? }.sort\n\n  result = []\n  even_index = 0\n  l.each_with_index do |element, index|\n    if index.even?\n      result << even_elements[even_index]\n      even_index += 1\n    else\n      result << element\n    end\n  end\n\n  result\nend\n",
            "# @param s [String]\n# @returns [String]\ndef encode_cyclic(s)\n    result = \"\"\n    (0...s.length).step(3) do |i|\n        if i + 3 > s.length\n            result += s[i..-1]\n        else\n            result += s[i+1, 2] + s[i]\n        end\n    end\n    result\nend\n\n# @param s [String]\n# @returns [String]\ndef decode_cyclic(s)\n    encode_cyclic(encode_cyclic(s))\nend\n",
            "def is_prime?(n)\n  return false if n < 2\n  (2..Math.sqrt(n)).each do |i|\n    return false if n % i == 0\n  end\n  true\nend\n\n# @param n [Integer]\n# @returns {Integer}\ndef prime_fib(n)\n  f = [0, 1]\n  cnt = 0\n  while cnt < n\n    f = [f[1], f[0] + f[1]]\n    cnt += 1 if is_prime?(f[1])\n  end\n  f[1]\nend\n",
            "# @param l [Array<Integer>]\n# @returns {Boolean}\ndef triples_sum_to_zero(l)\n    (0...l.size).each do |i|\n        ((i + 1)...l.size).each do |j|\n            ((j + 1)...l.size).each do |k|\n                return true if l[i] + l[j] + l[k] == 0\n            end\n        end\n    end\n    false\nend\n",
            "def car_race_collision(n)\n    return n * n\nend\n",
            "def incr_list(l)\n  result = []\n  l.each do |i|\n    result.push(i + 1)\n  end\n  return result\nend\n",
            "# @param l [Array<Integer>]\n# @returns {Boolean}\ndef pairs_sum_to_zero(l)\n    seen = {}\n    l.each do |num|\n        if seen[-num]\n            return true\n        end\n        seen[num] = true\n    end\n    false\nend\n",
            "def change_base(x, bas)\n    return \"0\" if x == 0\n    digits = \"\"\n    while x > 0\n        digits += (x % bas).to_s\n        x /= bas\n    end\n    digits.reverse\nend\n",
            "def triangle_area(a, h)\n    a * h / 2.0\nend\n",
            "# @param n [Integer]\n# @return [Integer]\ndef fib4(n)\n    fib = [0, 0, 2, 0]\n    (4..n).each do |i|\n        fib[i % 4] = fib[0] + fib[1] + fib[2] + fib[3]\n    end\n    fib[n % 4]\nend\n",
            "def median(l)\n  sl = l.sort\n  n = sl.size\n  if n.odd?\n    sl[n / 2]\n  else\n    (sl[n / 2] + sl[n / 2 - 1]) / 2.0\n  end\nend\n",
            "def is_palindrome(txt)\n    txt == txt.reverse\nend\n",
            "def modp(n, p)\n    ret = 1\n    for i in 0...n\n        ret = (ret * 2) % p\n    end\n    return ret\nend\n",
            "# @param s [String]\n# @returns {String}\ndef encode_shift(s)\n    result = ''\n    s.each_char do |ch|\n        result += ((ch.ord - 'a'.ord + 5) % 26 + 'a'.ord).chr\n    end\n    result\nend\n\n# @param s [String]\n# @returns {String}\ndef decode_shift(s)\n    result = ''\n    s.each_char do |ch|\n        result += ((ch.ord - 'a'.ord + 21) % 26 + 'a'.ord).chr\n    end\n    result\nend\n",
            "# @param txt [String]\n# @returns {String}\ndef remove_vowels(txt)\n  vowels = \"aeiouAEIOU\"\n  txt.chars.select { |char| !vowels.include?(char) }.join\nend\n",
            "def below_threshold(l, t)\n  l.all? { |x| x < t }\nend\n",
            "# @param x [Integer]\n# @param y [Integer]\n# @returns {Integer}\ndef add(x, y)\n    x + y\nend\n",
            "def same_chars(s0, s1)\n    set0 = Set.new(s0.chars)\n    set1 = Set.new(s1.chars)\n    set0 == set1\nend\n",
            "def fib(n)\n    if n <= 1\n        return n\n    else\n        return fib(n - 1) + fib(n - 2)\n    end\nend\n",
            "def correct_bracketing(brackets)\n    depth = 0\n    brackets.each_char do |b|\n        if b == '<'\n            depth += 1\n        elsif b == '>'\n            depth -= 1\n        end\n        return false if depth < 0\n    end\n    depth == 0\nend\n",
            "def monotonic(l)\n    diff = []\n    (1...l.size).each do |i|\n        diff << l[i] - l[i - 1]\n    end\n    diff.all? { |x| x <= 0 } || diff.all? { |x| x >= 0 }\nend\n",
            "def common(l1, l2)\n    s1 = l1.to_set\n    s2 = l2.to_set\n    result = []\n    s1.intersect(s2).each { |element| result << element }\n    result\nend\n",
            "def largest_prime_factor(n)\n  i = 2\n  while i * i <= n\n    if n % i != 0\n      i += 1\n    else\n      n /= i\n    end\n  end\n  n\nend\n",
            "def sum_to_n(n)\n    (n * (n + 1)) / 2\nend\n",
            "def correct_bracketing(brackets)\n    depth = 0\n    brackets.each_char do |b|\n        if b == '('\n            depth += 1\n        elsif b == ')'\n            depth -= 1\n        end\n        return false if depth < 0\n    end\n    return depth == 0\nend\n",
            "def derivative(xs)\n  result = []\n  (1...xs.size).each do |i|\n    result << xs[i] * i\n  end\n  result\nend\n",
            "# @param n [Integer]\n# @returns {Integer}\ndef fibfib(n)\n    if n <= 1\n        return 0 \n    end\n    a, b, c = 0, 0, 1\n    while n > 2\n        a, b, c = b, c, a + b + c\n        n -= 1\n    end\n    c\nend\n",
            "# @param s [String]\n# @returns {Integer}\ndef vowels_count(s)\n    vowels = \"aeiou\"\n    cnt = 0\n    s.length.times do |i|\n        if vowels.include?(s[i].downcase) || (i == s.length - 1 && s[i].downcase == 'y')\n            cnt += 1\n        end\n    end\n    cnt\nend\n",
            "def circular_shift(x, shift)\n    x_str = x.to_s\n    if shift > x_str.length\n        return x_str.reverse\n    else\n        return x_str[-shift..] + x_str[0...-shift]\n    end\nend\n",
            "# @param s [String]\n# @returns {Integer}\ndef digit_sum(s)\n    sum = 0\n    s.each_char do |c|\n        if c.uptcase == c && c != \"A\"..\"Z\"\n            sum += c.ord\n        end\n    end\n    return sum\nend\n",
            "# @param s [String]\n# @param n [Integer]\n# @returns {Integer}\ndef fruit_distribution(s, n)\n    words = s.split(' ')\n    apples = Integer(words[words.index(\"apples\") - 1])\n    oranges = Integer(words[words.index(\"oranges\") - 1])\n    return n - apples - oranges\nend\n",
            "def pluck(arr)\n    evens = arr.select { |n| n.even? }\n    return [] if evens.empty?\n    \n    min_even = evens.min\n    index = arr.index(min_even)\n    [min_even, index]\nend\n",
            "def search(lst)\n    freqs = Hash.new(0)\n    lst.each do |n|\n        freqs[n] += 1\n    end\n    good_vals = []\n    freqs.each do |n, count|\n        if count >= n\n            good_vals << n\n        end\n    end\n    return good_vals.any? ? good_vals.max : -1\nend\n",
            "def strange_sort_list(lst)\n    sl = lst.sort\n    result = []\n    left = 0\n    right = sl.size - 1\n    while left <= right\n        result << sl[left]\n        left += 1\n        if left <= right\n            result << sl[right]\n            right -= 1\n        end\n    end\n    result\nend\n",
            "# @param a [Integer]\n# @param b [Integer]\n# @param c [Integer]\n# @returns {Float}\ndef triangle_area(a, b, c)\n    if a + b > c && a + c > b && b + c > a\n        s = (a + b + c) / 2.0\n        Math.sqrt(s * (s - a) * (s - b) * (s - c))\n    else\n        -1.0\n    end\nend\n",
            "def will_it_fly(q, w)\n    return false if q.empty?\n    \n    is_palin = true\n    q.size.times do |i|\n        break unless i < q.size / 2 && q[i] == q[q.size - i - 1]\n        is_palin = false\n    end\n    \n    total = q.sum\n    return is_palin && total <= w\nend\n",
            "def smallest_change(arr)\n    ans = 0\n    (0...arr.size / 2).each do |i|\n        unless arr[i] == arr[arr.size - i - 1]\n            ans += 1\n        end\n    end\n    ans\nend\n",
            "def total_match(lst1, lst2)\n    cnt1 = 0\n    cnt2 = 0\n    \n    lst1.each do |s|\n        cnt1 += s.length\n    end\n    \n    lst2.each do |s|\n        cnt2 += s.length\n    end\n    \n    cnt1 <= cnt2 ? lst1 : lst2\nend\n",
            "# @param a [Integer]\n# @returns {Boolean}\ndef is_multiply_prime(a)\n    def is_prime(n)\n        return false if n < 2\n        (2..Math.sqrt(n).floor).each do |i|\n            return false if n % i == 0\n        end\n        true\n    end\n\n    cnt = 0\n    (2..a).each do |i|\n        if is_prime(i)\n            while a % i == 0\n                cnt += 1\n                a /= i\n            end\n        end\n    end\n    cnt == 3\nend\n",
            "# @param x [Integer]\n# @param n [Integer]\n# @returns {Boolean}\ndef is_simple_power(x, n)\n    return x == n if n < 2\n    tmp = 1\n    while tmp < x\n        tmp *= n\n    end\n    tmp == x\nend\n",
            "def is_cube(a)\n    a = a.abs\n    root = (a ** (1.0 / 3.0)).round\n    root * root * root == a\nend\n",
            "def hex_key(num)\n    count = 0\n    num.each_char do |x|\n        if x == '2' || x == '3' || x == '5' || x == '7' || x == 'B' || x == 'D'\n            count += 1\n        end\n    end\n    count\nend\n",
            "def decimal_to_binary(dec)\n  binary = dec.to_s(2)\n  \"db#{binary}db\"\nend\n",
            "def is_happy(s)\n    return false if s.length < 3\n    (0..s.length - 3).each do |i|\n        if s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]\n            return false\n        end\n    end\n    true\nend\n",
            "def numerical_letter_grade(grades)\n    result = []\n    grades.each do |g|\n        if g == 4.0\n            result << \"A+\"\n        elsif g > 3.7\n            result << \"A\"\n        elsif g > 3.3\n            result << \"A-\"\n        elsif g > 3.0\n            result << \"B+\"\n        elsif g > 2.7\n            result << \"B\"\n        elsif g > 2.3\n            result << \"B-\"\n        elsif g > 2.0\n            result << \"C+\"\n        elsif g > 1.7\n            result << \"C\"\n        elsif g > 1.3\n            result << \"C-\"\n        elsif g > 1.0\n            result << \"D+\"\n        elsif g > 0.7\n            result << \"D\"\n        elsif g > 0.0\n            result << \"D-\"\n        else\n            result << \"E\"\n        end\n    end\n    result\nend\n",
            "def prime_length(s)\n    length = s.length\n    return false if length < 2\n    (2..Math.sqrt(length)).each do |i|\n        return false if length % i == 0\n    end\n    true\nend\n",
            "def starts_one_ends(n)\n    if n == 1\n        return 1\n    end\n    return 2 * 9 * 10**(n - 2)\nend\n",
            "def solve(n)\n    digits_sum = n.to_s.chars.map(&:to_i).sum\n    format('%b', digits_sum)\nend\n",
            "def add(lst)\n    result = 0\n    (1...lst.size).step(2) do |i|\n        if lst[i] % 2 == 0\n            result += lst[i]\n        end\n    end\n    result\nend\n",
            "# @param s [String]\n# @returns {String}\ndef anti_shuffle(s)\n    result = \"\"\n    ss = StringIO.new(s)\n    \n    while word = ss.readline.split[0]\n        word.chars.sort.join(\"\")\n        if !result.empty?\n            result += \" \"\n        end\n        result += word\n    end\n    \n    return result\nend\n",
            "def get_row(lst, x)\n    coords = []\n    lst.each_with_index do |row, i|\n        row.each_with_index do |value, j|\n            if value == x\n                coords << [i, j]\n            end\n        end\n    end\n    coords.sort_by { |a, b| [a[0], -b[1]] }\nend\n",
            "def sort_array(arr)\n    return [] if arr.empty?\n    \n    if (arr.first + arr.last) % 2 == 0\n        sorted_arr = arr.sort.reverse\n    else\n        sorted_arr = arr.sort\n    end\n    \n    sorted_arr\nend\n",
            "# @param s [String]\n# @returns {String}\ndef encrypt(s)\n    result = \"\"\n    s.each_char do |ch|\n        shifted = ch.ord + 4\n        if shifted > 'z'.ord\n            shifted -= 26\n        end\n        result += shifted.chr\n    end\n    result\nend\n",
            "# @param lst [Array<Integer>]\n# @returns {Integer, nil}\ndef next_smallest(lst)\n    sl = lst.uniq.sort\n    return nil if sl.size < 2\n    return sl[1]\nend\n",
            "def is_bored(s)\n    sentences = []\n    sentences += s.split('.')\n    sentences += s.split('!')\n    sentences += s.split('?')\n\n    count = 0\n    sentences.each do |sentence|\n        trimmed_sentence = \"\"\n        first_space = false\n        sentence.each_char do |c|\n            if !first_space && c == ' '\n                next\n            end\n            first_space = true\n            trimmed_sentence << c\n        end\n\n        if trimmed_sentence.length >= 2 && trimmed_sentence[0..1] == \"I \"\n            count += 1\n        end\n    end\n\n    return count\nend\n",
            "# @param x [Object]\n# @param y [Object]\n# @param z [Object]\n# @returns {Boolean}\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer) && z.is_a?(Integer)\n    return true if (x + y == z) || (x + z == y) || (y + z == x)\n  end\n  false\nend\n",
            "def encode(message)\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    message.each_char do |ch|\n        if ch =~ /[a-zA-Z]/\n            ch1 = ch.ord\n            ch1 = ch1 <= 90 ? ch1 + 32 : ch1 - 32 if ch.ord.between?(65, 90) || ch.ord.between?(97, 122)\n            ch1 += 2 if vowels.include?(ch.chr(ch1))\n            result << ch.chr(ch1)\n        else\n            result << ch\n        end\n    end\n    return result\nend\n",
            "def skjkasdkd(lst)\n    primes = lst.select { |n| (2..Math.sqrt(n).floor).all? { |i| n % i != 0 } }\n    return 0 if primes.empty?\n    largest = primes.max\n    sum = 0\n    while largest > 0\n        sum += largest % 10\n        largest /= 10\n    end\n    sum\nend\n",
            "def check_dict_case(d)\n    return false if d.empty?\n\n    all_lower = true\n    all_upper = true\n\n    d.each do |key, value|\n        key.each_char do |c|\n            all_lower = false unless c.downcase == c\n            all_upper = false unless c.upcase == c\n        end\n        return false if !all_lower && !all_upper\n    end\n\n    return all_lower || all_upper\nend\n",
            "def count_up_to(n)\n    primes = []\n    (2...n).each do |num|\n        is_prime = true\n        primes.each do |p|\n            if num % p == 0\n                is_prime = false\n                break\n            end\n        end\n        primes << num if is_prime\n    end\n    primes\nend\n",
            "# @param a [Integer]\n# @param b [Integer]\n# @returns {Integer}\ndef multiply(a, b)\n    (a.abs % 10) * (b.abs % 10)\nend\n",
            "# @param s [String]\n# @return {Integer}\ndef count_upper(s)\n    vowels = \"AEIOU\"\n    count = 0\n    (0...s.length).each do |i|\n        if i.even? && vowels.include?(s[i])\n            count += 1\n        end\n    end\n    count\nend\n",
            "# @param value [String]\n# @returns {Integer}\ndef closest_integer(value)\n    num = Float(value)\n    if num >= 0\n        num.floor + 1\n    else\n        num.ceil - 1\n    end\nend\n",
            "def make_a_pile(n)\n    pile = []\n    (0...n).each do |i|\n        pile << (n + 2 * i)\n    end\n    pile\nend\n",
            "def words_string(s)\n  s.split(/[,\\s]+/).reject(&:empty?)\nend\n",
            "# @param x [Integer]\n# @param y [Integer]\n# @returns {Integer}\ndef choose_num(x, y)\n    if x > y\n        return -1\n    end\n    if y.even?\n        return y\n    end\n    return y - 1 if x != y else -1\nend\n",
            "def rounded_avg(n, m)\n    return nil if n > m\n    r_avg = ((m + n) / 2.0 + 0.5).to_i\n    r_avg.to_s(2)\nend\n",
            "def unique_digits(x)\n    all_digits_odd = ->(s) {\n        s.each_char do |digit|\n            return false if digit.to_i.even?\n        end\n        true\n    }\n\n    result = []\n    x.each do |num|\n        result << num if all_digits_odd.call(num.to_s)\n    end\n    result.sort\nend\n",
            "# @param arr [Array<Integer>]\n# @returns {Array<String>}\ndef by_length(arr)\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    \n    sorted_arr = arr.select { |x| x >= 1 && x <= 9 }.sort_by { |x| -x }\n    \n    result = sorted_arr.map { |x| digit_names[x - 1] }\n    \n    return result\nend\n",
            "def f(n)\n  nums = Array.new(n) { |i| i + 1 }\n  \n  result = []\n  (0...n).each do |i|\n    if (i + 1) % 2 != 0\n      sum = nums[0..i].sum\n      result << sum\n    else\n      product = nums[0..i].reduce(1, :*)\n      result << product\n    end\n  end\n  \n  result\nend\n",
            "def even_odd_palindrome(n)\n    cnt = [0, 0]\n    (1..n).each do |i|\n        if i.to_s == i.to_s.reverse\n            cnt[i % 2] += 1\n        end\n    end\n    cnt\nend\n",
            "def digits_sum(n: int) -> int\n    n_str = str(n)\n    if n >= 0\n        return sum(int(d) for d in n_str)\n    else\n        return int(n_str[:2]) * 2 + digits_sum(abs(n))\nend\n\n# @param arr [Array<Integer>]\n# @returns {Integer}\ndef count_nums(arr)\n    arr.count { |n| digits_sum(n) > 0 }\nend\n",
            "def move_one_ball(arr)\n    return true if arr.empty?\n    \n    sorted_arr = arr.sort\n    (0...arr.size).each do |i|\n        return true if arr[i..-1] == sorted_arr[0...arr.size-i] && arr[0...i] == sorted_arr[arr.size-i..-1]\n    end\n    \n    return false\nend\n",
            "def can_exchange(lst1, lst2)\n    odd_cnt = lst1.count { |num| num.odd? }\n    even_cnt = lst2.count { |num| num.even? }\n    (even_cnt >= odd_cnt) ? \"YES\" : \"NO\"\nend\n",
            "def histogram(test)\n    freq = {}\n    words = test.split\n    words.each do |word|\n        next if word.empty?\n        freq[word] ||= 0\n        freq[word] += 1\n    end\n    \n    result = {}\n    unless freq.empty?\n        max_freq = freq.values.max\n        freq.each do |word, count|\n            result[word] = count if count == max_freq\n        end\n    end\n    \n    result\nend\n",
            "def is_palindrome(str)\n  str == str.reverse\nend\n\ndef reverse_delete(s, c)\n  s1 = s.chars.reject { |ch| c.include?(ch) }.join\n  [s1, is_palindrome(s1) ? \"yes\" : \"no\"]\nend\n",
            "def odd_count(lst)\n    result = []\n    lst.each do |num|\n        n = num.chars.map { |d| d.ord % 2 == 1 }.count(true)\n        rs = \"the number of odd elements in the string i of the input.\"\n        result << rs.gsub(\"i\", n.to_s)\n    end\n    result\nend\n",
            "def min_sub_array_sum(nums)\n    min_sum = 0\n    cur_sum = 0\n    nums.each do |n|\n        cur_sum = [cur_sum + n, 0].min\n        min_sum = [cur_sum, min_sum].min\n    end\n    if min_sum == 0\n        min_sum = nums.min\n    end\n    min_sum\nend\n",
            "def max_fill(grid, capacity)\n    grid.map { |arr| (arr.sum.to_f / capacity).ceil }.sum\nend\n",
            "```\ndef sort_array(arr)\n    sorted_arr = arr.sort_by do |num|\n        ones_count = num.to_s(2).count('1')\n        [ones_count, num]\n    end\n    sorted_arr\nend\n```",
            "def select_words(s, n)\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = []\n    word = \"\"\n\n    s.each_char do |c|\n        if c =~ /\\s/\n            words.push(word) unless word.empty?\n            word = \"\"\n        else\n            word += c\n        end\n    end\n\n    words.push(word) unless word.empty?\n\n    result = []\n    words.each do |w|\n        consonant_count = 0\n        w.each_char do |c|\n            lower_c = c.downcase\n            consonant_count += 1 if consonants.include?(lower_c)\n        end\n        result.push(w) if consonant_count == n\n    end\n\n    result\nend\n",
            "def get_closest_vowel(word)\n    vowels = \"aeiouAEIOU\"\n    (word.length - 2).downto(1) do |i|\n        if vowels.include?(word[i]) && !vowels.include?(word[i - 1]) && !vowels.include?(word[i + 1])\n            return word[i]\n        end\n    end\n    \"\"\nend\n",
            "# @param lst [Array<String>]\n# @returns {String}\ndef match_parens(lst)\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    \n    def check(s)\n        depth = 0\n        s.each_char do |ch|\n            if ch == '('\n                depth += 1\n            else\n                depth -= 1\n            end\n            return false if depth < 0\n        end\n        return depth == 0\n    end\n    \n    return \"Yes\" if check(s1) || check(s2)\n    \"No\"\nend\n",
            "def maximum(arr, k)\n    if k == 0\n        return []\n    end\n    sorted_arr = arr.sort\n    sorted_arr[-k..-1]\nend\n",
            "# @param lst [Array<Integer>]\n# @returns {Integer}\ndef solution(lst)\n    sum = 0\n    lst.each_with_index do |num, i|\n        if i.even? && num.odd?\n            sum += num\n        end\n    end\n    sum\nend\n",
            "def add_elements(arr, k)\n    sum = 0\n    for i in 0...[k, arr.size].min\n        if arr[i].to_s.length <= 2\n            sum += arr[i]\n        end\n    end\n    return sum\nend\n",
            "def get_odd_collatz(n)\n    collatz = [1]\n    while n != 1\n        if n % 2 != 0\n            collatz << n\n            n = 3 * n + 1\n        else\n            n /= 2\n        end\n    end\n    collatz.sort\nend\n",
            "# @param date [String]\n# @returns {Boolean}\ndef valid_date(date)\n    return false unless date.length == 10 && date[2] == '-' && date[5] == '-'\n    m = date[0, 2].to_i\n    d = date[3, 2].to_i\n    if [1, 3, 5, 7, 8, 10, 12].include?(m) && d >= 1 && d <= 31\n        return true\n    end\n    if [4, 6, 9, 11].include?(m) && d >= 1 && d <= 30\n        return true\n    end\n    if m == 2 && d >= 1 && d <= 29\n        return true\n    end\n    false\nend\n",
            "def split_words(txt)\n    result = []\n    if txt.include?(' ')\n        start_index = 0\n        end_index = 0\n        while (end_index = txt.index(' ', start_index)) != nil\n            result.push(txt[start_index, end_index - start_index])\n            start_index = end_index + 1\n        end\n        result.push(txt[start_index..-1])\n    elsif txt.include?(',')\n        start_index = 0\n        end_index = 0\n        while (end_index = txt.index(',', start_index)) != nil\n            result.push(txt[start_index, end_index - start_index])\n            start_index = end_index + 1\n        end\n        result.push(txt[start_index..-1])\n    else\n        count = 0\n        txt.each_char do |c|\n            if c.ord.even? && ('a'..'z').include?(c)\n                count += 1\n            end\n        end\n        result.push(count.to_s)\n    end\n    result\nend\n",
            "# @param lst [Array<Integer>]\n# @returns {Boolean}\ndef is_sorted(lst)\n    return false unless lst == lst.sort\n\n    freq = Hash.new(0)\n    lst.each do |i|\n        freq[i] += 1\n    end\n\n    freq.all? { |_, v| v <= 2 }\nend\n",
            "def intersection(interval1, interval2)\n    l = [interval1[0], interval2[0]].max\n    r = [interval1[1], interval2[1]].min\n    length = r - l\n    \n    def is_prime(n)\n        return false if n < 2\n        (2..Math.sqrt(n)).each do |i|\n            return false if n % i == 0\n        end\n        true\n    end\n    \n    (length > 0 && is_prime(length)) ? \"YES\" : \"NO\"\nend\n",
            "def prod_signs(arr)\n    return nil if arr.empty?\n    return 0 if arr.include?(0)\n    sign = arr.count { |n| n < 0 }.odd? ? -1 : 1\n    sign * arr.sum(&:abs)\nend\n",
            "def min_path(grid, k)\n    n = grid.size\n    min_val = n * n + 1\n    (0...n).each do |i|\n        (0...n).each do |j|\n            if grid[i][j] == 1\n                temp = []\n                temp << grid[i - 1][j] if i != 0\n                temp << grid[i][j - 1] if j != 0\n                temp << grid[i + 1][j] if i != n - 1\n                temp << grid[i][j + 1] if j != n - 1\n                min_val = [min_val, *temp].min\n            end\n        end\n    end\n    result = []\n    (0...k).each do |i|\n        result << (i % 2 == 0 ? 1 : min_val)\n    end\n    result\nend\n",
            "def tri(n)\n    return [1] if n == 0\n    seq = [1, 3.0]\n    (2..n).each do |i|\n        if i.even?\n            seq.push(i / 2.0 + 1)\n        else\n            seq.push(seq[i - 1] + seq[i - 2] + (i + 3) / 2.0)\n        end\n    end\n    seq.map(&:to_i)\nend\n",
            "def digits(n)\n    product = 1\n    has_odd = false\n    while n > 0\n        digit = n % 10\n        if digit % 2 == 1\n            product *= digit\n            has_odd = true\n        end\n        n /= 10\n    end\n    has_odd ? product : 0\nend\n",
            "def is_nested(s)\n    open_idx = []\n    close_idx = []\n    (0...s.size).each do |i|\n        if s[i] == '['\n            open_idx << i\n        elsif s[i] == ']'\n            close_idx << i\n        end\n    end\n    close_idx.reverse!\n    cnt = 0\n    i = 0\n    l = close_idx.size\n    open_idx.each do |idx|\n        if i < l && idx < close_idx[i]\n            cnt += 1\n            i += 1\n        end\n    end\n    cnt >= 2\nend\n",
            "def sum_squares(lst)\n    sum = 0\n    lst.each do |n|\n        sum += (Math.ceil(n) ** 2).to_i\n    end\n    sum\nend\n",
            "def check_if_last_char_is_a_letter(txt)\n    return false if txt.empty?\n    last_space = txt.rindex(' ')\n    last = txt[(last_space || -1) + 1]\n    last.length == 1 && last =~ /[a-zA-Z]/\nend\n",
            "def can_arrange(arr)\n    return -1 if arr.size <= 1\n    idx = []\n    (1...arr.size).each do |i|\n        idx << i if arr[i] < arr[i - 1]\n    end\n    !idx.empty? ? idx.max : -1\nend\n",
            "def largest_smallest_integers(lst)\n    neg = lst.select { |i| i < 0 }\n    pos = lst.select { |i| i > 0 }\n    \n    max_neg = neg.empty? ? nil : neg.max\n    min_pos = pos.empty? ? nil : pos.min\n    \n    [max_neg, min_pos]\nend\n",
            "# @param a [Object]\n# @param b [Object]\n# @returns {Float, nil}\ndef compare_one(a, b)\n  a1 = if a.is_a?(String)\n         a.gsub(',', '.').to_f\n       elsif a.is_a?(Integer) || a.is_a?(Float)\n         a.to_f\n       else\n         raise RuntimeError.new(\"Type Error\")\n       end\n\n  b1 = if b.is_a?(String)\n         b.gsub(',', '.').to_f\n       elsif b.is_a?(Integer) || b.is_a?(Float)\n         b.to_f\n       else\n         raise RuntimeError.new(\"Type Error\")\n       end\n\n  return nil if a1 == b1\n  a1 > b1 ? a1 : b1\nend\n",
            "# @param n [Integer]\n# @returns {Boolean}\ndef is_equal_to_sum_even(n)\n    n % 2 == 0 && n >= 8\nend\n",
            "def special_factorial(n)\n    fact = 1\n    result = 1\n    (1..n).each do |i|\n        fact *= i\n        result *= fact\n    end\n    result\nend\n",
            "def fix_spaces(txt)\n  txt.gsub(/\\s{3,}/, '-').gsub(' ', '_')\nend\n",
            "def file_name_check(file_name)\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if lst.length != 2 || !suf.include?(lst[1]) || lst[0].length == 0 || !lst[0][0].match?(/[a-zA-Z]/) || lst[0].count(\"0-9\") > 3\n        return \"No\"\n    end\n    return \"Yes\"\nend\n",
            "# @param lst [Array<Integer>]\n# @return [Integer]\ndef sum_squares(lst)\n    result = 0\n    lst.each_with_index do |value, index|\n        if index % 3 == 0\n            result += value**2\n        elsif index % 4 == 0\n            result += value**3\n        else\n            result += value\n        end\n    end\n    result\nend\n",
            "def words_in_sentence(sentence)\n    result = []\n    iss = StringScanner.new(sentence)\n    \n    while word = iss.scan(/\\S+/)\n        length = word.length\n        is_prime = true\n        \n        if length < 2\n            next\n        end\n        \n        (2..Math.sqrt(length)).each do |i|\n            if length % i == 0\n                is_prime = false\n                break\n            end\n        end\n        \n        if is_prime\n            result << word\n        end\n    end\n    \n    result.join(' ')\nend\n",
            "def simplify(x, n)\n    slash_pos_x = x.index('/')\n    slash_pos_n = n.index('/')\n    num_x = x[0, slash_pos_x].to_i\n    den_x = x[slash_pos_x + 1..-1].to_i\n    num_n = n[0, slash_pos_n].to_i\n    den_n = n[slash_pos_n + 1..-1].to_i\n    num = num_x * num_n\n    den = den_x * den_n\n    num % den == 0\nend\n",
            "```ruby\ndef digits_sum(n: int) -> int:\n    n_str = str(n)\n    if n >= 0:\n        return sum(int(d) for d in n_str)\n    else:\n        return int(n_str[:2]) * 2 + digits_sum(abs(n))\ndef order_by_points(nums: List[int]) -> List[int]:\n    return sorted(nums, key=digits_sum)\n\n# @param nums [Array<Integer>]\n# @returns {Array<Integer>}",
            "def special_filter(nums)\n    odds = \"13579\"\n    count = 0\n    nums.each do |n|\n        if n > 10 && n.odd? && odds.include?(n.to_s[0])\n            count += 1\n        end\n    end\n    count\nend\n",
            "# @param n [Integer]\n# @returns {Integer}\ndef get_max_triples(n)\n    c = [0, 0, 0]\n    (1..n).each do |i|\n        a = i * i - i + 1\n        c[a % 3] += 1\n    end\n    return c[0] * c[1] * c[2] + ((c[0] * (c[0] - 1) * (c[0] - 2)) + (c[1] * (c[1] - 1) * (c[1] - 2)) + (c[2] * (c[2] - 1) * (c[2] - 2))) / 6\nend\n",
            "def bf(planet1, planet2)\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    return [] unless names.include?(planet1) && names.include?(planet2)\n    \n    l = names.index(planet1)\n    r = names.index(planet2)\n    \n    [l, r] = [r, l] if l > r\n    return [] if l == r\n    \n    return names[l + 1...r]\nend\n",
            "def sorted_list_sum(lst)\n    result = lst.select { |s| s.length % 2 == 0 }\n    result.sort_by { |s| [s.length, s] }\nend\n",
            "def x_or_y(n, x, y)\n    if n < 2\n        return y\n    end\n    (2..Math.sqrt(n)).each do |i|\n        if n % i == 0\n            return y\n        end\n    end\n    return x\nend\n",
            "def double_the_difference(lst)\n    result = 0\n    lst.each do |n|\n        if n >= 0 && (n % 2.0).round == 1\n            result += n * n\n        end\n    end\n    result\nend\n",
            "def compare(game, guess)\n    result = []\n    (0...game.size).each do |i|\n        result << (game[i] - guess[i]).abs\n    end\n    result\nend\n",
            "def strongest_extension(class_name, extensions)\n  max_s = -1\n  max_ext = \"\"\n  extensions.each do |ext|\n    upper = ext.count(\"A-Z\")\n    lower = ext.count(\"a-z\")\n    s = upper - lower\n    if s > max_s\n      max_s = s\n      max_ext = ext\n    end\n  end\n  \"#{class_name}.#{max_ext}\"\nend\n",
            "def cycpattern_check(a, b)\n    return false if a.length < b.length\n    b.length.times do |i|\n        rotated = b[i..-1] + b[0...i]\n        return true if a.include?(rotated)\n    end\n    return false\nend\n",
            "def even_odd_count(num)\n  ds = num.abs.to_s\n  even = 0\n  ds.each_char do |d|\n    even += 1 if (d.to_i % 2).zero?\n  end\n  [even, ds.length - even]\nend\n",
            "def int_to_mini_roman(num)\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = \"\"\n    for i in 0...values.size\n        while num >= values[i]\n            res += numerals[i]\n            num -= values[i]\n        end\n    end\n    res\nend\n",
            "# @param a [Integer]\n# @param b [Integer]\n# @param c [Integer]\n# @returns {Boolean}\ndef right_angle_triangle(a, b, c)\n    s = [a, b, c].sort\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\nend\n",
            "def find_max(words)\n    max_cnt = 0\n    max_w = \"\"\n    words.each do |w|\n        unique_chars = w.chars.uniq.size\n        if unique_chars > max_cnt\n            max_cnt = unique_chars\n            max_w = w\n        elsif unique_chars == max_cnt\n            max_w = [max_w, w].min\n        end\n    end\n    max_w\nend\n",
            "# @param num [Integer]\n# @param need [Integer]\n# @param remaining [Integer]\n# @returns {Array<Integer>}\ndef eat(num, need, remaining)\n    if need <= remaining\n        [num + need, remaining - need]\n    else\n        [num + remaining, 0]\n    end\nend\n",
            "def do_algebra(operators, operands)\n    ops = operators.dup\n    nums = operands.dup\n    i = ops.size - 1\n    while i >= 0\n        if ops[i] == \"**\"\n            nums[i] = nums[i] ** nums[i + 1]\n            nums.delete_at(i + 1)\n            ops.delete_at(i)\n        end\n        i -= 1\n    end\n    i = 0\n    while i < ops.size\n        if ops[i] == \"*\"\n            nums[i] *= nums[i + 1]\n            nums.delete_at(i + 1)\n            ops.delete_at(i)\n            i -= 1\n        elsif ops[i] == \"//\"\n            nums[i] /= nums[i + 1]\n            nums.delete_at(i + 1)\n            ops.delete_at(i)\n            i -= 1\n        end\n        i += 1\n    end\n    i = 0\n    while i < ops.size\n        if ops[i] == \"+\"\n            nums[i] += nums[i + 1]\n            nums.delete_at(i + 1)\n            ops.delete_at(i)\n            i -= 1\n        elsif ops[i] == \"-\"\n            nums[i] -= nums[i + 1]\n            nums.delete_at(i + 1)\n            ops.delete_at(i)\n            i -= 1\n        end\n        i += 1\n    end\n    nums[0]\nend\n",
            "def solve(s)\n    if !s.chars.any? { |ch| ch =~ /[a-zA-Z]/ }\n        return s.reverse\n    end\n    result = \"\"\n    s.each_char do |ch|\n        if !ch.match?(/[a-zA-Z]/)\n            result += ch\n        elsif ch == ch.upcase\n            result += ch.downcase\n        else\n            result += ch.upcase\n        end\n    end\n    result\nend\n",
            "require 'openssl'\n\ndef string_to_md5(txt)\n  return nil if txt.empty?\n  \n  digest = OpenSSL::Digest.digest('MD5', txt)\n  [digest].pack('H*')\nend\n",
            "def generate_integers(a, b)\n    lower = [2, [a, b].min].max\n    upper = [8, [a, b].max].min\n    result = []\n    (lower..upper).each do |i|\n        if i.even?\n            result.push(i)\n        end\n    end\n    result\nend\n"
        ],
        "swift": [
            "func hasCloseElements(_ numbers: [Double], _ threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n        for j in (i + 1)..<numbers.count {\n            if abs(numbers[i] - numbers[j]) < threshold {\n                return true\n            }\n        }\n    }\n    return false\n}\n",
            "func separateParenGroups(_ parenString: String) -> [String] {\n    var groups: [String] = []\n    var stk: [Character] = []\n    var currentGroup = \"\"\n    \n    for ch in parenString {\n        if ch == \"(\" {\n            stk.append(ch)\n            currentGroup.append(ch)\n        } else if ch == \")\" {\n            stk.removeLast()\n            currentGroup.append(ch)\n            if stk.isEmpty {\n                groups.append(currentGroup)\n                currentGroup = \"\"\n            }\n        }\n    }\n    \n    return groups\n}\n",
            "func truncateNumber(_ num: Double) -> Double {\n    return num - floor(num)\n}\n",
            "func belowZero(_ operations: [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance += op\n        if balance < 0 {\n            return true\n        }\n    }\n    return false\n}\n",
            "```\nfunc meanAbsoluteDeviation(_ numbers: [Double]) -> Double {\n    let sum = numbers.reduce(0.0, +)\n    let mean = sum / Double(numbers.count)\n    let deviation = numbers.reduce(0.0) { $0 + abs($1 - mean) }\n    return deviation / Double(numbers.count)\n}\n```",
            "func intersperse(_ numbers: [Int], _ delimiter: Int) -> [Int] {\n    var result = [Int]()\n    for (i, number) in numbers.enumerated() {\n        if i != 0 {\n            result.append(delimiter)\n        }\n        result.append(number)\n    }\n    return result\n}\n",
            "func parseNestedParens(_ parenString: String) -> [Int] {\n    var result = [Int]()\n    let parenGroups = parenString.split(separator: \" \")\n    \n    for group in parenGroups {\n        var maxDepth = 0\n        var depth = 0\n        \n        for ch in group {\n            if ch == \"(\" {\n                depth += 1\n                maxDepth = max(maxDepth, depth)\n            } else if ch == \")\" {\n                depth -= 1\n            }\n        }\n        \n        result.append(maxDepth)\n    }\n    \n    return result\n}\n",
            "func filterBySubstring(_ strs: [String], _ substring: String) -> [String] {\n    var result: [String] = []\n    for s in strs {\n        if s.contains(substring) {\n            result.append(s)\n        }\n    }\n    return result\n}\n",
            "func sumProduct(_ numbers: [Int]) -> [Int] {\n    let n_sum = numbers.reduce(0, +)\n    let n_product = numbers.reduce(1, *)\n    return [n_sum, n_product]\n}\n",
            "func rollingMax(_ numbers: [Int]) -> [Int] {\n    var max_so_far = Int.min\n    var result: [Int] = []\n    for num in numbers {\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    }\n    return result\n}\n",
            "func makePalindrome(_ s: String) -> String {\n    func isPalindrome(_ str: String) -> Bool {\n        return str == String(str.reversed())\n    }\n    \n    if isPalindrome(s) {\n        return s\n    }\n    for i in stride(from: 0, to: s.count, by: 1) {\n        let index = s.index(s.startIndex, offsetBy: i)\n        let substring = String(s[index...])\n        if isPalindrome(substring) {\n            let prefix = String(s.prefix(upTo: index))\n            return s + String(prefix.reversed())\n        }\n    }\n    return \"\"\n}\n",
            "func stringXor(_ a: String, _ b: String) -> String {\n    var result = \"\"\n    for (index, _) in a.enumerated() {\n        let charA = a[a.index(a.startIndex, offsetBy: index)]\n        let charB = b[b.index(b.startIndex, offsetBy: index)]\n        result.append(charA == charB ? \"0\" : \"1\")\n    }\n    return result\n}\n",
            "func longest(_ strs: [String]) -> String? {\n    if strs.isEmpty {\n        return nil\n    }\n    \n    var longest_s = strs[0]\n    for s in strs {\n        if s.length > longest_s.length {\n            longest_s = s\n        }\n    }\n    return longest_s\n}\n",
            "func greatestCommonDivisor(_ a: Int, _ b: Int) -> Int {\n    if b == 0 {\n        return a\n    } else {\n        return greatestCommonDivisor(b, a % b)\n    }\n}\n",
            "func allPrefixes(_ s: String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<s.length {\n        let prefix = NSString(string: s).substring(to: i + 1)\n        prefixes.append(prefix)\n    }\n    return prefixes\n}\n",
            "func stringSequence(_ n: Int) -> String {\n    var sequence = \"\"\n    for i in 0...n {\n        sequence += \"\\(i)\"\n        if i < n {\n            sequence += \" \"\n        }\n    }\n    return sequence\n}\n",
            "func countDistinctCharacters(_ s: String) -> Int {\n    let uniqueChars = Set(s.lowercased())\n    return uniqueChars.count\n}\n",
            "func parseMusic(_ musicString: String) -> [Int] {\n    let durations: [String: Int] = [\"o\": 4, \"o|\": 2, \".|\": 1]\n    var result: [Int] = []\n    var start = musicString.startIndex\n    var end = musicString.startIndex\n    \n    while start != musicString.endIndex {\n        end = musicString.firstIndex(of: \" \", from: start) ?? musicString.endIndex\n        let note = String(musicString[start..<end])\n        if let duration = durations[note] {\n            result.append(duration)\n        }\n        start = end == musicString.endIndex ? end : musicString.index(after: end)\n    }\n    \n    return result\n}\n",
            "func howManyTimes(_ s: String, _ substring: String) -> Int {\n    var times = 0\n    let range = stride(from: 0, to: s.count - substring.count + 1, by: 1)\n    \n    for i in range {\n        let startIndex = s.index(s.startIndex, offsetBy: i)\n        let endIndex = s.index(startIndex, offsetBy: substring.count)\n        if String(s[startIndex..<endIndex]) == substring {\n            times += 1\n        }\n    }\n    return times\n}\n",
            "func sortNumbers(_ numbers: String) -> String {\n    let numDict: [String: Int] = [\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    ]\n\n    var numList: [String] = []\n    let words = numbers.split(separator: \" \")\n    for word in words {\n        if let _ = numDict[String(word)] {\n            numList.append(String(word))\n        }\n    }\n\n    numList.sort { numDict[$0]! < numDict[$1]! }\n\n    return numList.joined(separator: \" \")\n}\n",
            "func findClosestElements(_ numbers: [Double]) -> [Double] {\n    if numbers.count < 2 {\n        return []\n    }\n    \n    var sorted_numbers = numbers\n    sorted_numbers.sort()\n    \n    var min_diff = Double.greatestFiniteMagnitude\n    var closest_pair: [Double] = []\n    \n    for i in 1..<sorted_numbers.count {\n        let diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff {\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n        }\n    }\n    \n    return closest_pair\n}\n",
            "func rescaleToUnit(_ numbers: [Double]) -> [Double] {\n    guard let minNum = numbers.min(), let maxNum = numbers.max() else { return [] }\n    \n    if minNum == maxNum {\n        return Array(repeating: 0.0, count: numbers.count)\n    } else {\n        return numbers.map { ($0 - minNum) / (maxNum - minNum) }\n    }\n}\n",
            "func filterIntegers(_ values: [Any]) -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if let intValue = value as? Int {\n            result.append(intValue)\n        }\n    }\n    return result\n}\n",
            "func strLength(_ s: String) -> Int {\n    return s.count\n}\n",
            "func largestDivisor(_ n: Int) -> Int {\n    for i in 2..<n {\n        if n % i == 0 {\n            return n / i\n        }\n    }\n    return 1\n}\n",
            "func factorize(_ n: Int) -> [Int] {\n    var factors: [Int] = []\n    var divisor = 2\n    var number = n\n    while divisor <= number {\n        if number % divisor == 0 {\n            factors.append(divisor)\n            number /= divisor\n        } else {\n            divisor += 1\n        }\n    }\n    return factors\n}\n",
            "func removeDuplicates(_ numbers: [Int]) -> [Int] {\n    var counts = [Int: Int]()\n    for num in numbers {\n        counts[num, default: 0] += 1\n    }\n    var res = [Int]()\n    for num in numbers {\n        if let count = counts[num], count == 1 {\n            res.append(num)\n        }\n    }\n    return res\n}\n",
            "func flipCase(_ s: String) -> String {\n    var flipped = \"\"\n    for ch in s {\n        if !ch.isLetter {\n            flipped.append(ch)\n        } else if ch.isLowercase {\n            flipped.append(ch.uppercased())\n        } else if ch.isUppercase {\n            flipped.append(ch.lowercased())\n        }\n    }\n    return flipped\n}\n",
            "func concatenate(_ strs: [String]) -> String {\n    var result = \"\"\n    for str in strs {\n        result += str\n    }\n    return result\n}\n",
            "func filterByPrefix(_ strs: [String], _ prefixStr: String) -> [String] {\n    var result: [String] = []\n    for s in strs {\n        if s.hasPrefix(prefixStr) {\n            result.append(s)\n        }\n    }\n    return result\n}\n",
            "func getPositive(_ l: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in l {\n        if num > 0 {\n            result.append(num)\n        }\n    }\n    return result\n}\n",
            "func isPrime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func poly(_ xs: [Int], _ x: Double) -> Double {\n    var res = 0.0\n    for i in 0..<xs.count {\n        res += Double(xs[i]) * pow(x, Double(i))\n    }\n    return res\n}\n\nfunc findZero(_ xs: [Int]) -> Double {\n    var x1 = 1.0, x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0 {\n        x1 *= 2\n        x2 *= 2\n    }\n    while abs(x1 - x2) > 1e-10 {\n        let mid = (x1 + x2) / 2\n        ifpoly(xs, mid) == 0 {\n            return mid\n        } else if poly(xs, mid) * poly(xs, x1) < 0 {\n            x2 = mid\n        } else {\n            x1 = mid\n        }\n    }\n    return (x1 + x2) / 2\n}\n",
            "func sortThird(_ l: [Int]) -> [Int] {\n    var sorted_third = [Int]()\n    for i in stride(from: 0, to: l.count, by: 3) {\n        sorted_third.append(l[i])\n    }\n    sorted_third.sort()\n\n    var result = [Int]()\n    var j = 0\n    for i in 0..<l.count {\n        if i % 3 == 0 {\n            result.append(sorted_third[j])\n            j += 1\n        } else {\n            result.append(l[i])\n        }\n    }\n    return result\n}\n",
            "func listUnique(_ l: [Int]) -> [Int] {\n    let uniqueElements = Set(l)\n    var result = Array(uniqueElements)\n    result.sort()\n    return result\n}\n",
            "func maxElement(_ l: [Int]) -> Int {\n    if l.isEmpty {\n        return 0\n    }\n    return l.max()!\n}\n",
            "func fizzBuzz(_ n: Int) -> Int {\n    var cnt = 0\n    for i in 0..<n {\n        if i % 11 == 0 || i % 13 == 0 {\n            let str_i = String(i)\n            cnt += str_i.filter { $0 == \"7\" }.count\n        }\n    }\n    return cnt\n}\n",
            "func sortEven(_ l: [Int]) -> [Int] {\n    var evenElements = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n        evenElements.append(l[i])\n    }\n    evenElements.sort()\n\n    var result = [Int]()\n    var evenIndex = 0\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n            result.append(evenElements[evenIndex])\n            evenIndex += 1\n        } else {\n            result.append(l[i])\n        }\n    }\n    return result\n}\n",
            "func encodeCyclic(_ s: String) -> String {\n    var result = \"\"\n    let characters = Array(s)\n    \n    for i in stride(from: 0, to: characters.count, by: 3) {\n        if i + 3 > characters.count {\n            result += String(characters[i..<characters.count])\n        } else {\n            result += String(characters[i+1...i+2]) + String(characters[i])\n        }\n    }\n    \n    return result\n}\n\nfunc decodeCyclic(_ s: String) -> String {\n    return encodeCyclic(encodeCyclic(s))\n}\n",
            "func primeFib(_ n: Int) -> Int {\n    if n < 1 {\n        return 0\n    }\n    \n    func isPrime(_ num: Int) -> Bool {\n        if num < 2 {\n            return false\n        }\n        for i in 2...Int(sqrt(Double(num))) {\n            if num % i == 0 {\n                return false\n            }\n        }\n        return true\n    }\n    \n    var f = [0, 1]\n    var cnt = 0\n    \n    while cnt < n {\n        f = [f[1], f[0] + f[1]]\n        if isPrime(f[1]) {\n            cnt += 1\n        }\n    }\n    \n    return f[1]\n}\n",
            "func triplesSumToZero(_ l: [Int]) -> Bool {\n    for i in 0..<l.count {\n        for j in (i+1)..<l.count {\n            for k in (j+1)..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n",
            "func carRaceCollision(_ n: Int) -> Int {\n    return n * n\n}\n",
            "func incrList(_ l: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l {\n        result.append(i + 1)\n    }\n    return result\n}\n",
            "func pairsSumToZero(_ l: [Int]) -> Bool {\n    var seen = Set<Int>()\n    for num in l {\n        if seen.contains(-num) {\n            return true\n        }\n        seen.insert(num)\n    }\n    return false\n}\n",
            "func changeBase(_ x: Int, _ bas: Int) -> String {\n    if x == 0 {\n        return \"0\"\n    }\n    var digits = \"\"\n    var number = abs(x)\n    while number > 0 {\n        digits += String(number % bas)\n        number /= bas\n    }\n    \n    // Reverse the string to get the correct base representation\n    let result = String(digits.reversed())\n    return x < 0 ? \"-\" + result : result\n}\n",
            "func triangleArea(_ a: Int, _ h: Int) -> Double {\n    return Double(a * h) / 2.0\n}\n",
            "func fib4(_ n: Int) -> Int {\n    var fib = [0, 0, 2, 0]\n    for i in stride(from: 4, through: n, by: 1) {\n        fib[i % 4] = fib[0] + fib[1] + fib[2] + fib[3]\n    }\n    return fib[n % 4]\n}\n",
            "func median(_ l: [Double]) -> Double {\n    var sl = l\n    sl.sort()\n    if sl.count % 2 != 0 {\n        return sl[sl.count / 2]\n    } else {\n        return (sl[sl.count / 2] + sl[sl.count / 2 - 1]) / 2.0\n    }\n}\n",
            "func isPalindrome(_ txt: String) -> Bool {\n    return txt == String(txt.reversed())\n}\n",
            "func modp(_ n: Int, _ p: Int) -> Int {\n    var ret = 1\n    for _ in 0..<n {\n        ret = (ret * 2) % p\n    }\n    return ret\n}\n",
            "func encodeShift(_ s: String) -> String {\n    var result = \"\"\n    for ch in s {\n        let shiftedChar = Character(UnicodeScalar(((ch.asciiValue! - UnicodeScalar(\"a\").asciiValue! + 5) % 26) + UnicodeScalar(\"a\").asciiValue!).unwrap())\n        result.append(shiftedChar)\n    }\n    return result\n}\n\nfunc decodeShift(_ s: String) -> String {\n    var result = \"\"\n    for ch in s {\n        let shiftedChar = Character(UnicodeScalar(((ch.asciiValue! - UnicodeScalar(\"a\").asciiValue! + 21) % 26) + UnicodeScalar(\"a\").asciiValue!).unwrap())\n        result.append(shiftedChar)\n    }\n    return result\n}\n",
            "func removeVowels(_ txt: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    return String(txt.filter { !vowels.contains($0) })\n}\n",
            "func belowThreshold(_ l: [Int], _ t: Int) -> Bool {\n    return l.allSatisfy { $0 < t }\n}\n",
            "func add(_ x: Int, _ y: Int) -> Int {\n    return x + y\n}\n",
            "func sameChars(_ s0: String, _ s1: String) -> Bool {\n    let set0 = Set(s0)\n    let set1 = Set(s1)\n    return set0 == set1\n}\n",
            "func fib(_ n: Int) -> Int {\n    if n <= 1 {\n        return n\n    } else {\n        return fib(n - 1) + fib(n - 2)\n    }\n}\n",
            "func correctBracketing(_ brackets: String) -> Bool {\n    var depth = 0\n    for b in brackets {\n        if b == \"<\" {\n            depth += 1\n        } else if b == \">\" {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "func monotonic(_ l: [Int]) -> Bool {\n    var diff = [Int]()\n    for i in 1..<l.count {\n        diff.append(l[i] - l[i - 1])\n    }\n    return diff.allSatisfy { $0 <= 0 } || diff.allSatisfy { $0 >= 0 }\n}\n",
            "func common(_ l1: [Int], _ l2: [Int]) -> [Int] {\n    let s1 = Set(l1)\n    let s2 = Set(l2)\n    return Array(s1.intersection(s2))\n}\n",
            "func largestPrimeFactor(_ n: Int) -> Int {\n    var n = n\n    var i = 2\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i\n        } else {\n            i += 1\n        }\n    }\n    return n\n}\n",
            "func sumToN(_ n: Int) -> Int {\n    return (n * (n + 1)) / 2\n}\n",
            "func correctBracketing(_ brackets: String) -> Bool {\n    var depth = 0\n    for b in brackets {\n        if b == \"(\" {\n            depth += 1\n        } else if b == \")\" {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "func derivative(_ xs: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 1..<xs.count {\n        result.append(xs[i] * i)\n    }\n    return result\n}\n",
            "func fibfib(_ n: Int) -> Int {\n    if n <= 1 {\n        return 0 \n    }\n    var a = 0, b = 0, c = 1\n    while n > 2 {\n        a = b\n        b = c\n        c = a + b + c\n        n -= 1\n    }\n    return c\n}\n",
            "func vowelsCount(_ s: String) -> Int {\n    let vowels = \"aeiou\"\n    var cnt = 0\n    for (i, char) in s.enumerated() {\n        if vowels.contains(char.lowercased()) || (i == s.count - 1 && char.lowercased() == \"y\") {\n            cnt += 1\n        }\n    }\n    return cnt\n}\n",
            "func circularShift(_ x: Int, _ shift: Int) -> String {\n    let x_str = String(x)\n    if shift > x_str.count {\n        return String(x_str.reversed())\n    } else {\n        let index = x_str.index(x_str.endIndex, offsetBy: -shift)\n        return String(x_str.suffix(from: index)) + String(x_str.prefix(upTo: index))\n    }\n}\n",
            "func digitSum(_ s: String) -> Int {\n    var sum = 0\n    for c in s {\n        if c.isUppercase {\n            sum += Int(c.asciiValue!)\n        }\n    }\n    return sum\n}\n",
            "func fruitDistribution(_ s: String, _ n: Int) -> Int {\n    let words = s.split(separator: \" \")\n    guard let applesIndex = words.firstIndex(of: \"apples\"),\n          let orangesIndex = words.firstIndex(of: \"oranges\") else {\n        return 0\n    }\n    let apples = Int(words[applesIndex - 1]) ?? 0\n    let oranges = Int(words[orangesIndex - 1]) ?? 0\n    return n - apples - oranges\n}\n",
            "func pluck(_ arr: [Int]) -> [Int] {\n    let evens = arr.filter { $0 % 2 == 0 }\n    guard !evens.isEmpty else { return [] }\n    \n    let minEven = evens.min()!\n    if let index = arr.firstIndex(of: minEven) {\n        return [minEven, index]\n    }\n    \n    return []\n}\n",
            "func search(_ lst: [Int]) -> Int {\n    var freqs = [Int: Int]()\n    for n in lst {\n        freqs[n, default: 0] += 1\n    }\n    var goodVals = [Int]()\n    for (key, value) in freqs where value >= key {\n        goodVals.append(key)\n    }\n    return !goodVals.isEmpty ? goodVals.max() ?? -1 : -1\n}\n",
            "func strangeSortList(_ lst: [Int]) -> [Int] {\n    var sl = lst.sorted()\n    var result: [Int] = []\n    var left = 0\n    var right = sl.count - 1\n    while left <= right {\n        result.append(sl[left])\n        left += 1\n        if left <= right {\n            result.append(sl[right])\n            right -= 1\n        }\n    }\n    return result\n}\n",
            "func triangleArea(_ a: Int, _ b: Int, _ c: Int) -> Double {\n    if a + b > c && a + c > b && b + c > a {\n        let s = Double(a + b + c) / 2.0\n        return sqrt(s * (s - Double(a)) * (s - Double(b)) * (s - Double(c)))\n    } else {\n        return -1.0\n    }\n}\n",
            "func willItFly(_ q: [Int], _ w: Int) -> Bool {\n    if q.isEmpty {\n        return false\n    }\n    \n    var is_palin = true\n    for i in 0..<q.count / 2 {\n        if q[i] != q[q.count - 1 - i] {\n            is_palin = false\n            break\n        }\n    }\n    \n    let total = q.reduce(0, +)\n    return is_palin && total <= w\n}\n",
            "func smallestChange(_ arr: [Int]) -> Int {\n    var ans = 0\n    for i in 0..<arr.count / 2 {\n        if arr[i] != arr[arr.count - i - 1] {\n            ans += 1\n        }\n    }\n    return ans\n}\n",
            "func totalMatch(_ lst1: [String], _ lst2: [String]) -> [String] {\n    let cnt1 = lst1.reduce(0) { $0 + $1.count }\n    let cnt2 = lst2.reduce(0) { $0 + $1.count }\n    \n    return cnt1 <= cnt2 ? lst1 : lst2\n}\n",
            "func is_prime(_ n: Int) -> Bool {\n    if n < 2 { return false }\n    for i in 2...Int(sqrt(Double(n))) {\n        if n % i == 0 { return false }\n    }\n    return true\n}\n\nfunc isMultiplyPrime(_ a: Int) -> Bool {\n    var cnt = 0\n    var num = a\n    for i in 2...num {\n        if is_prime(i) {\n            while num % i == 0 {\n                cnt += 1\n                num /= i\n            }\n        }\n    }\n    return cnt == 3\n}\n",
            "func isSimplePower(_ x: Int, _ n: Int) -> Bool {\n    if n < 2 {\n        return x == n\n    }\n    var tmp = 1\n    while tmp < x {\n        tmp *= n\n    }\n    return tmp == x\n}\n",
            "func isCube(_ a: Int) -> Bool {\n    let absA = abs(a)\n    let root = Int(round(pow(Double(absA), 1.0 / 3.0)))\n    return root * root * root == absA\n}\n",
            "func hexKey(_ num: String) -> Int {\n    var count = 0\n    for x in num {\n        if x == \"2\" || x == \"3\" || x == \"5\" || x == \"7\" || x == \"B\" || x == \"D\" {\n            count += 1\n        }\n    }\n    return count\n}\n",
            "func decimalToBinary(_ dec: Int) -> String {\n    let binary = String(dec, radix: 2)\n    return \"db\\(binary)db\"\n}\n",
            "func isHappy(_ s: String) -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in stride(from: 0, to: s.count - 2, by: 1) {\n        let index1 = s.index(s.startIndex, offsetBy: i)\n        let index2 = s.index(index1, offsetBy: 1)\n        let index3 = s.index(index1, offsetBy: 2)\n        \n        if s[index1] == s[index2] || s[index1] == s[index3] || s[index2] == s[index3] {\n            return false\n        }\n    }\n    return true\n}\n",
            "func numericalLetterGrade(_ grades: [Double]) -> [String] {\n    var result: [String] = []\n    for g in grades {\n        if g == 4.0 {\n            result.append(\"A+\")\n        } else if g > 3.7 {\n            result.append(\"A\")\n        } else if g > 3.3 {\n            result.append(\"A-\")\n        } else if g > 3.0 {\n            result.append(\"B+\")\n        } else if g > 2.7 {\n            result.append(\"B\")\n        } else if g > 2.3 {\n            result.append(\"B-\")\n        } else if g > 2.0 {\n            result.append(\"C+\")\n        } else if g > 1.7 {\n            result.append(\"C\")\n        } else if g > 1.3 {\n            result.append(\"C-\")\n        } else if g > 1.0 {\n            result.append(\"D+\")\n        } else if g > 0.7 {\n            result.append(\"D\")\n        } else if g > 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"E\")\n        }\n    }\n    return result\n}\n",
            "func primeLength(_ s: String) -> Bool {\n    let length = s.count\n    if length < 2 {\n        return false\n    }\n    for i in 2...Int(sqrt(Double(length))) {\n        if length % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func startsOneEnds(_ n: Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    return 2 * 9 * Int(pow(10.0, Double(n - 2)))\n}\n",
            "func solve(_ n: Int) -> String {\n    let digitsSum = String(n).compactMap { $0.wholeNumberValue }.reduce(0, +)\n    return String(digitsSum, radix: 2)\n}\n",
            "func add(_ lst: [Int]) -> Int {\n    var result = 0\n    for i in stride(from: 1, to: lst.count, by: 2) {\n        if lst[i] % 2 == 0 {\n            result += lst[i]\n        }\n    }\n    return result\n}\n",
            "func antiShuffle(_ s: String) -> String {\n    var result = \"\"\n    let words = s.split(separator: \" \")\n    \n    for word in words {\n        let sortedWord = String(word.sorted())\n        if !result.isEmpty {\n            result += \" \"\n        }\n        result += sortedWord\n    }\n    \n    return result\n}\n",
            "func getRow(_ lst: [[Int]], _ x: Int) -> [[Int]] {\n    var coords = [[Int]]()\n    for i in 0..<lst.count {\n        for j in 0..<lst[i].count {\n            if lst[i][j] == x {\n                coords.append([i, j])\n            }\n        }\n    }\n    coords.sort { a, b in\n        return a[0] < b[0] || (a[0] == b[0] && a[1] > b[1])\n    }\n    return coords\n}\n",
            "func sortArray(_ arr: [Int]) -> [Int] {\n    if arr.isEmpty {\n        return []\n    }\n    if (arr.first! + arr.last!) % 2 == 0 {\n        var sortedArr = arr\n        sortedArr.sort(by: >)\n        return sortedArr\n    } else {\n        var sortedArr = arr\n        sortedArr.sort()\n        return sortedArr\n    }\n}\n",
            "func encrypt(_ s: String) -> String {\n    var result = \"\"\n    for ch in s {\n        let shifted = UInt8(ch.asciiValue! + 4)\n        if shifted > UInt8(122) {\n            let wrapped = shifted - 26\n            result.append(Character(UnicodeScalar(wrapped)))\n        } else {\n            result.append(Character(UnicodeScalar(shifted)))\n        }\n    }\n    return result\n}\n",
            "func nextSmallest(_ lst: [Int]) -> Int? {\n    let sl = Set(lst)\n    if sl.count < 2 {\n        return nil\n    }\n    var it = sl.sorted().makeIterator()\n    _ = it.next()\n    return it.next()\n}\n",
            "func isBored(_ s: String) -> Int {\n    let sentences = s.split(separator: \".\")\n                  .flatMap { sentence in sentence.split(separator: \"!\") }\n                  .flatMap { sentence in sentence.split(separator: \"?\") }\n\n    var count = 0\n    for sentence in sentences {\n        let trimmedSentence = sentence.trimmingCharacters(in: .whitespaces)\n        if trimmedSentence.hasPrefix(\"I \") {\n            count += 1\n        }\n    }\n\n    return count\n}\n",
            "func anyInt(_ x: Any, _ y: Any, _ z: Any) -> Bool {\n    if let intX = x as? Int, let intY = y as? Int, let intZ = z as? Int {\n        if (intX + intY == intZ) || (intX + intZ == intY) || (intY + intZ == intX) {\n            return true\n        }\n    }\n    return false\n}\n",
            "func encode(_ message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    \n    for ch in message {\n        if ch.isLetter {\n            let ch1 = ch.isLowercase ? ch.uppercased() : ch.lowercased()\n            if vowels.contains(ch1) {\n                let unicodeScalar = (ch1 as UnicodeScalar).value\n                let newUnicodeScalar = UnicodeScalar(unicodeScalar + 2)\n                result.append(Character(newUnicodeScalar!))\n            } else {\n                result.append(ch1)\n            }\n        } else {\n            result.append(ch)\n        }\n    }\n    \n    return result\n}\n",
            "func skjkasdkd(_ lst: [Int]) -> Int {\n    func is_prime(_ n: Int) -> Bool {\n        if n < 2 { return false }\n        for i in 2...Int(sqrt(Double(n))) {\n            if n % i == 0 { return false }\n        }\n        return true\n    }\n    \n    var primes = [Int]()\n    for n in lst {\n        if is_prime(n) {\n            primes.append(n)\n        }\n    }\n    if primes.isEmpty { return 0 }\n    let largest = primes.max()!\n    var sum = 0\n    var number = largest\n    while number > 0 {\n        sum += number % 10\n        number /= 10\n    }\n    return sum\n}\n",
            "func checkDictCase(_ d: [String:String]) -> Bool {\n    if d.isEmpty {\n        return false\n    }\n    \n    var allLower = true\n    var allUpper = true\n    \n    for key in d.keys {\n        for c in key {\n            if !c.isLowercase {\n                allLower = false\n            }\n            if !c.isUppercase {\n                allUpper = false\n            }\n        }\n        if !allLower && !allUpper {\n            return false\n        }\n    }\n    \n    return allLower || allUpper\n}\n",
            "func countUpTo(_ n: Int) -> [Int] {\n    var primes: [Int] = []\n    for num in 2..<n {\n        var isPrime = true\n        for p in primes {\n            if num % p == 0 {\n                isPrime = false\n                break\n            }\n        }\n        if isPrime {\n            primes.append(num)\n        }\n    }\n    return primes\n}\n",
            "func multiply(_ a: Int, _ b: Int) -> Int {\n    return (abs(a) % 10) * (abs(b) % 10)\n}\n",
            "func countUpper(_ s: String) -> Int {\n    let vowels = \"AEIOU\"\n    var count = 0\n    \n    for (i, char) in s.enumerated() {\n        if i % 2 == 0 && vowels.contains(char) {\n            count += 1\n        }\n    }\n    \n    return count\n}\n",
            "func closestInteger(_ value: String) -> Int {\n    if let num = Float(value) {\n        return num >= 0 ? Int(num + 0.5) : Int(num - 0.5)\n    }\n    return 0\n}\n",
            "func makeAPile(_ n: Int) -> [Int] {\n    var pile = [Int]()\n    for i in 0..<n {\n        pile.append(n + 2 * i)\n    }\n    return pile\n}\n",
            "func wordsString(_ s: String) -> [String] {\n    return s.split(separator: \" \").compactMap { $0.isEmpty ? nil : String($0) }\n}\n",
            "func chooseNum(_ x: Int, _ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return y - 1\n}\n",
            "func roundedAvg(_ n: Int, _ m: Int) -> String? {\n    if n > m {\n        return nil\n    }\n    let r_avg = Int((Double(m) + Double(n)) / 2.0 + 0.5)\n    return String(r_avg, radix: 2)\n}\n",
            "func uniqueDigits(_ x: [Int]) -> [Int] {\n    let allDigitsOdd: (String) -> Bool = { s in\n        for digitChar in s {\n            if Int(String(digitChar))! % 2 == 0 {\n                return false\n            }\n        }\n        return true\n    }\n\n    var result: [Int] = []\n    for num in x {\n        if allDigitsOdd(String(num)) {\n            result.append(num)\n        }\n    }\n    result.sort()\n    return result\n}\n",
            "func byLength(_ arr: [Int]) -> [String] {\n    let digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    var sorted_arr = arr.filter { $0 >= 1 && $0 <= 9 }\n    \n    sorted_arr.sort(by: >)\n    \n    return sorted_arr.map { digit_names[$0 - 1] }\n}\n",
            "func f(_ n: Int) -> [Int] {\n    var nums = Array(1...n)\n    var result: [Int] = []\n    \n    for i in 0..<n {\n        if (i + 1) % 2 != 0 {\n            let sum = nums.prefix(i + 1).reduce(0, +)\n            result.append(sum)\n        } else {\n            let product = nums.prefix(i + 1).reduce(1, *)\n            result.append(product)\n        }\n    }\n    \n    return result\n}\n",
            "func is_palindrome(_ txt: String) -> Bool {\n    return txt == String(txt.reversed())\n}\n\nfunc evenOddPalindrome(_ n: Int) -> [Int] {\n    var cnt = [0, 0]\n    for i in 1...n {\n        if is_palindrome(String(i)) {\n            cnt[i % 2] += 1\n        }\n    }\n    return cnt\n}\n",
            "func digitsSum(_ n: Int) -> Int {\n    let nStr = String(n)\n    if n >= 0 {\n        return nStr.compactMap { $0.wholeNumberValue }.reduce(0, +)\n    } else {\n        guard let firstTwoDigits = Int(nStr.prefix(2)) else { return 0 }\n        return firstTwoDigits * 2 + digitsSum(abs(n))\n    }\n}\n\nfunc countNums(_ arr: [Int]) -> Int {\n    return arr.filter { digitsSum($0) > 0 }.count\n}\n",
            "func moveOneBall(_ arr: [Int]) -> Bool {\n    if arr.isEmpty {\n        return true\n    }\n    let sortedArr = arr.sorted()\n    for i in 0..<arr.count {\n        if Array(arr[i...]) == Array(sortedArr.dropFirst(i)) &&\n           Array(arr.prefix(i)) == Array(sortedArr.suffix(i)) {\n            return true\n        }\n    }\n    return false\n}\n",
            "func canExchange(_ lst1: [Int], _ lst2: [Int]) -> String {\n    var odd_cnt = 0\n    for num in lst1 {\n        if num % 2 != 0 {\n            odd_cnt += 1\n        }\n    }\n    var even_cnt = 0\n    for num in lst2 {\n        if num % 2 == 0 {\n            even_cnt += 1\n        }\n    }\n    return (even_cnt >= odd_cnt) ? \"YES\" : \"NO\"\n}\n",
            "func histogram(_ test: String) -> [String: Int] {\n    var freq = [String: Int]()\n    let words = test.split(separator: \" \")\n    for word in words {\n        if !word.isEmpty {\n            let wordStr = String(word)\n            freq[wordStr, default: 0] += 1\n        }\n    }\n    var result = [String: Int]()\n    if let maxFreq = freq.values.max() {\n        for (word, count) in freq where count == maxFreq {\n            result[word] = count\n        }\n    }\n    return result\n}\n",
            "func reverseDelete(_ s: String, _ c: String) -> [String] {\n    let filtered = s.filter { !c.contains($0) }\n    let isPalindrome = filtered == String(filtered.reversed())\n    return [filtered, isPalindrome ? \"yes\" : \"no\"]\n}\n",
            "func oddCount(_ lst: [String]) -> [String] {\n    var result = [String]()\n    for num in lst {\n        let n = num.filter { Int(String($0))?.isMultiple(of: 2) == false }.count\n        let rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replacingOccurrences(of: \"i\", with: String(n)))\n    }\n    return result\n}\n",
            "func minSubArraySum(_ nums: [Int]) -> Int {\n    var min_sum = 0\n    var cur_sum = 0\n    for n in nums {\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    }\n    if min_sum == 0 {\n        min_sum = nums.min() ?? 0\n    }\n    return min_sum\n}\n",
            "func maxFill(_ grid: [[Int]], _ capacity: Int) -> Int {\n    return grid.map { ceil(Double($0.reduce(0, +)) / Double(capacity)) }.reduce(0, +)\n}\n",
            "func sortArray(_ arr: [Int]) -> [Int] {\n    let countOnes = { (num: Int) -> Int in\n        var n = num\n        var count = 0\n        while n > 0 {\n            count += n & 1\n            n >>= 1\n        }\n        return count\n    }\n\n    var sortedArr = arr\n    sortedArr.sort { a, b in\n        let onesA = countOnes(a)\n        let onesB = countOnes(b)\n        if onesA == onesB {\n            return a < b\n        }\n        return onesA < onesB\n    }\n\n    return sortedArr\n}\n",
            "func selectWords(_ s: String, _ n: Int) -> [String] {\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    var words: [String] = []\n    var word = \"\"\n    \n    for c in s {\n        if c.isWhitespace {\n            if !word.isEmpty {\n                words.append(word)\n                word = \"\"\n            }\n        } else {\n            word += String(c)\n        }\n    }\n    \n    if !word.isEmpty {\n        words.append(word)\n    }\n\n    var result: [String] = []\n    for w in words {\n        let consonantCount = w.lowercased().filter { consonants.contains($0) }.count\n        if consonantCount == n {\n            result.append(w)\n        }\n    }\n\n    return result\n}\n",
            "func getClosestVowel(_ word: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    for i in (1..<word.count-1).reversed() {\n        if vowels.contains(word[word.index(word.startIndex, offsetBy: i)]) && !vowels.contains(word[word.index(word.startIndex, offsetBy: i - 1)]) && !vowels.contains(word[word.index(word.startIndex, offsetBy: i + 1)]) {\n            return String(word[word.index(word.startIndex, offsetBy: i)])\n        }\n    }\n    return \"\"\n}\n",
            "func matchParens(_ lst: [String]) -> String {\n    func check(_ s: String) -> Bool {\n        var depth = 0\n        for ch in s {\n            if ch == \"(\" {\n                depth += 1\n            } else {\n                depth -= 1\n            }\n            if depth < 0 {\n                return false\n            }\n        }\n        return depth == 0\n    }\n\n    let s1 = lst[0] + lst[1]\n    let s2 = lst[1] + lst[0]\n    return check(s1) || check(s2) ? \"Yes\" : \"No\"\n}\n",
            "func maximum(_ arr: [Int], _ k: Int) -> [Int] {\n    if k == 0 {\n        return []\n    }\n    let sortedArr = arr.sorted()\n    return Array(sortedArr.suffix(k))\n}\n",
            "func solution(_ lst: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<lst.count {\n        if i % 2 == 0 && lst[i] % 2 != 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n",
            "func addElements(_ arr: [Int], _ k: Int) -> Int {\n    var sum = 0\n    for i in 0..<min(k, arr.count) {\n        if \"\\(arr[i])\".count <= 2 {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n",
            "func getOddCollatz(_ n: Int) -> [Int] {\n    var collatz = [1]\n    var current = n\n    \n    while current != 1 {\n        if current % 2 != 0 {\n            collatz.append(current)\n            current = 3 * current + 1\n        } else {\n            current /= 2\n        }\n    }\n    \n    collatz.sort()\n    return collatz\n}\n",
            "func validDate(_ date: String) -> Bool {\n    if date.length != 10 || date[2] != \"-\" || date[5] != \"-\" {\n        return false\n    }\n    let m = Int(String(date.prefix(2)))!\n    let d = Int(String(date.dropFirst(3).prefix(2)))!\n    if (m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) && d >= 1 && d <= 31 {\n        return true\n    }\n    if (m == 4 || m == 6 || m == 9 || m == 11) && d >= 1 && d <= 30 {\n        return true\n    }\n    if m == 2 && d >= 1 && d <= 29 {\n        return true\n    }\n    return false\n}\n",
            "func splitWords(_ txt: String) -> [String] {\n    var result: [String] = []\n    if txt.contains(\" \") {\n        var start = txt.startIndex, end = txt.startIndex\n        while let endIndex = txt.range(of: \" \", options: .byWordBoundaries, range: start...)?.lowerBound {\n            end = endIndex\n            result.append(String(txt[start..<end]))\n            start = txt.index(end, offsetBy: 1)\n        }\n        result.append(String(txt[start...]))\n    } else if txt.contains(\",\") {\n        var start = txt.startIndex, end = txt.startIndex\n        while let endIndex = txt.range(of: \",\", options: .byWordBoundaries, range: start...)?.lowerBound {\n            end = endIndex\n            result.append(String(txt[start..<end]))\n            start = txt.index(end, offsetBy: 1)\n        }\n        result.append(String(txt[start...]))\n    } else {\n        var count = 0\n        for c in txt {\n            if c.isLowercase && (c.asciiValue ?? 0) % 2 == 0 {\n                count += 1\n            }\n        }\n        result.append(\"\\(count)\")\n    }\n    return result\n}\n",
            "func isSorted(_ lst: [Int]) -> Bool {\n    if lst != lst.sorted() {\n        return false\n    }\n    var freq = [Int: Int]()\n    for i in lst {\n        freq[i, default: 0] += 1\n    }\n    return freq.allSatisfy { $0.value <= 2 }\n}\n",
            "func intersection(_ interval1: [Int], _ interval2: [Int]) -> String {\n    if interval1.count < 2 || interval2.count < 2 {\n        return \"NO\"\n    }\n    \n    let l = max(interval1[0], interval2[0])\n    let r = min(interval1[1], interval2[1])\n    let length = r - l\n    \n    func is_prime(_ n: Int) -> Bool {\n        if n < 2 { return false }\n        for i in 2...Int(sqrt(Double(n))) {\n            if n % i == 0 { return false }\n        }\n        return true\n    }\n    \n    return (length > 0 && is_prime(length)) ? \"YES\" : \"NO\"\n}\n",
            "func prodSigns(_ arr: [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n    if arr.contains(0) {\n        return 0\n    }\n    let sign = arr.filter { $0 < 0 }.count % 2 == 1 ? -1 : 1\n    return sign * arr.reduce(0, { $0 + abs($1) })\n}\n",
            "func minPath(_ grid: [[Int]], _ k: Int) -> [Int] {\n    let n = grid.count\n    var min_val = n * n + 1\n    for i in 0..<n {\n        for j in 0..<n {\n            if grid[i][j] == 1 {\n                var temp: [Int] = []\n                if i > 0 {\n                    temp.append(grid[i - 1][j])\n                }\n                if j > 0 {\n                    temp.append(grid[i][j - 1])\n                }\n                if i < n - 1 {\n                    temp.append(grid[i + 1][j])\n                }\n                if j < n - 1 {\n                    temp.append(grid[i][j + 1])\n                }\n                min_val = temp.min() ?? min_val\n            }\n        }\n    }\n    var result: [Int] = []\n    for i in 0..<k {\n        result.append(i % 2 == 0 ? 1 : min_val)\n    }\n    return result\n}\n",
            "func tri(_ n: Int) -> [Int] {\n    if n == 0 {\n        return [1]\n    }\n    var seq = [1.0, 3.0]\n    for i in 2...n {\n        if i % 2 == 0 {\n            seq.append(Double(i) / 2.0 + 1)\n        } else {\n            seq.append(seq[i - 1] + seq[i - 2] + Double(i + 3) / 2.0)\n        }\n    }\n    return seq.map { Int($0) }\n}\n",
            "func digits(_ n: Int) -> Int {\n    var product = 1\n    var hasOdd = false\n    var number = n\n    while number > 0 {\n        let digit = number % 10\n        if digit % 2 == 1 {\n            product *= digit\n            hasOdd = true\n        }\n        number /= 10\n    }\n    return hasOdd ? product : 0\n}\n",
            "func isNested(_ s: String) -> Bool {\n    var open_idx = [Int]()\n    var close_idx = [Int]()\n    for (i, char) in s.enumerated() {\n        if char == \"[\" {\n            open_idx.append(i)\n        } else if char == \"]\" {\n            close_idx.append(i)\n        }\n    }\n    close_idx.reverse()\n    var cnt = 0\n    var i = 0\n    let l = close_idx.count\n    for idx in open_idx {\n        if i < l && idx < close_idx[i] {\n            cnt += 1\n            i += 1\n        }\n    }\n    return cnt >= 2\n}\n",
            "func sumSquares(_ lst: [Double]) -> Int {\n    var sum = 0\n    for n in lst {\n        sum += Int(pow(ceil(n), 2))\n    }\n    return sum\n}\n",
            "func checkIfLastCharIsALetter(_ txt: String) -> Bool {\n    if txt.isEmpty {\n        return false\n    }\n    if let lastSpace = txt.lastIndex(of: \" \") {\n        let last = txt[lastSpace...]\n        if let lastChar = last.last, last.length == 1 {\n            return lastChar.isLetter\n        }\n    }\n    return false\n}\n",
            "func canArrange(_ arr: [Int]) -> Int {\n    if arr.count <= 1 {\n        return -1\n    }\n    var idx = [Int]()\n    for i in 1..<arr.count {\n        if arr[i] < arr[i - 1] {\n            idx.append(i)\n        }\n    }\n    return !idx.isEmpty ? idx.max() ?? -1 : -1\n}\n",
            "func largestSmallestIntegers(_ lst: [Int]) -> [Int?] {\n    let neg = lst.filter { $0 < 0 }\n    let pos = lst.filter { $0 > 0 }\n    \n    let maxNeg = neg.isEmpty ? nil : neg.max()\n    let minPos = pos.isEmpty ? nil : pos.min()\n    \n    return [maxNeg, minPos]\n}\n",
            "func compareOne(_ a: Any, _ b: Any) -> Double? {\n    func anyToReal(_ o: Any) -> Double {\n        if let string = o as? String {\n            return Double(string.replacingOccurrences(of: \",\", with: \".\")) ?? 0.0\n        } else if let integer = o as? Int {\n            return Double(integer)\n        } else if let double = o as? Double {\n            return double\n        }\n        fatalError(\"Type Error\")\n    }\n    \n    let a1 = anyToReal(a)\n    let b1 = anyToReal(b)\n    \n    if a1 == b1 {\n        return nil\n    } else if a1 > b1 {\n        return a1\n    } else {\n        return b1\n    }\n}\n",
            "func isEqualToSumEven(_ n: Int) -> Bool {\n    return n % 2 == 0 && n >= 8\n}\n",
            "func specialFactorial(_ n: Int) -> Int {\n    var fact = 1\n    var result = 1\n    for i in 1...n {\n        fact *= i\n        result *= fact\n    }\n    return result\n}\n",
            "func fixSpaces(_ txt: String) -> String {\n    return txt.replacingOccurrences(of: \"\\\\s{3,}\", with: \"-\", options: .regularExpression).replacingOccurrences(of: \" \", with: \"_\")\n}\n",
            "func fileNameCheck(_ fileName: String) -> String {\n    let suf = [\"txt\", \"exe\", \"dll\"]\n    let lst = fileName.split(separator: \".\")\n    \n    if lst.count != 2 || !suf.contains(lst[1]) || lst[0].isEmpty || !lst[0].first!.isLetter || lst[0].filter({ $0.isNumber }).count > 3 {\n        return \"No\"\n    }\n    return \"Yes\"\n}\n",
            "func sumSquares(_ lst: [Int]) -> Int {\n    var result = 0\n    for (i, element) in lst.enumerated() {\n        if i % 3 == 0 {\n            result += Int(pow(Double(element), 2))\n        } else if i % 4 == 0 {\n            result += Int(pow(Double(element), 3))\n        } else {\n            result += element\n        }\n    }\n    return result\n}\n",
            "func wordsInSentence(_ sentence: String) -> String {\n    var result = \"\"\n    let words = sentence.split(separator: \" \")\n    for word in words {\n        let length = word.count\n        var isPrime = true\n        if length < 2 {\n            continue\n        }\n        let sqrtLength = Int(sqrt(Double(length)))\n        for i in 2...sqrtLength {\n            if length % i == 0 {\n                isPrime = false\n                break\n            }\n        }\n        if isPrime {\n            if !result.isEmpty {\n                result += \" \"\n            }\n            result += String(word)\n        }\n    }\n    return result\n}\n",
            "func simplify(_ x: String, _ n: String) -> Bool {\n    let slash_pos_x = x.firstIndex(of: \"/\")?.utf16Offset(in: x) ?? 0\n    let slash_pos_n = n.firstIndex(of: \"/\")?.utf16Offset(in: n) ?? 0\n    let num_x = Int(x.prefix(upTo: x.index(x.startIndex, offsetBy: slash_pos_x))) ?? 0\n    let den_x = Int(x.suffix(from: x.index(x.startIndex, offsetBy: slash_pos_x + 1))) ?? 0\n    let num_n = Int(n.prefix(upTo: n.index(n.startIndex, offsetBy: slash_pos_n))) ?? 0\n    let den_n = Int(n.suffix(from: n.index(n.startIndex, offsetBy: slash_pos_n + 1))) ?? 0\n    let num = num_x * num_n\n    let den = den_x * den_n\n    return num % den == 0\n}\n",
            "func digitsSum(_ n: Int) -> Int {\n    let nStr = String(n)\n    if n >= 0 {\n        return nStr.map { Int(String($0))! }.reduce(0, +)\n    } else {\n        return Int(nStr.prefix(2))! * 2 + digitsSum(abs(n))\n    }\n}\n\nfunc orderByPoints(_ nums: [Int]) -> [Int] {\n    return nums.sorted(by: { digitsSum($0) < digitsSum($1) })\n}\n",
            "func specialFilter(_ nums: [Int]) -> Int {\n    let odds = \"13579\"\n    var count = 0\n    for n in nums {\n        if n > 10 && n % 2 == 1 && odds.contains(String(n).first!) {\n            count += 1\n        }\n    }\n    return count\n}\n",
            "func getMaxTriples(_ n: Int) -> Int {\n    var c = [0, 0, 0]\n    for i in 1...n {\n        let a = i * i - i + 1\n        c[a % 3] += 1\n    }\n    return c[0] * c[1] * c[2] + ((c[0] * (c[0] - 1) * (c[0] - 2)) + (c[1] * (c[1] - 1) * (c[1] - 2)) + (c[2] * (c[2] - 1) * (c[2] - 2))) / 6\n}\n",
            "func bf(_ planet1: String, _ planet2: String) -> [String] {\n    let names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let l = names.firstIndex(of: planet1), let r = names.firstIndex(of: planet2) else {\n        return []\n    }\n    if l > r {\n        swap(&l, &r)\n    }\n    if l == r {\n        return []\n    }\n    return Array(names[(l + 1)...r])\n}\n",
            "func sortedListSum(_ lst: [String]) -> [String] {\n    var result = lst.filter { $0.count % 2 == 0 }\n    result.sort { a, b in\n        if a.count != b.count {\n            return a.count < b.count\n        } else {\n            return a < b\n        }\n    }\n    return result\n}\n",
            "func xOrY(_ n: Int, _ x: Int, _ y: Int) -> Int {\n    if n < 2 {\n        return y\n    }\n    for i in 2...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n            return y\n        }\n    }\n    return x\n}\n",
            "func doubleTheDifference(_ lst: [Double]) -> Int {\n    var result = 0\n    for n in lst {\n        if n >= 0 && fmod(n, 2.0) == 1.0 {\n            result += Int(n * n)\n        }\n    }\n    return result\n}\n",
            "func compare(_ game: [Int], _ guess: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<game.count {\n        result.append(abs(game[i] - guess[i]))\n    }\n    return result\n}\n",
            "func strongestExtension(_ className: String, _ extensions: [String]) -> String {\n    var max_s = -1\n    var max_ext = \"\"\n    for ext in extensions {\n        var upper = 0\n        var lower = 0\n        for c in ext {\n            if c.isUppercase { upper += 1 }\n            if c.isLowercase { lower += 1 }\n        }\n        let s = upper - lower\n        if s > max_s {\n            max_s = s\n            max_ext = ext\n        }\n    }\n    return className + \".\" + max_ext\n}\n",
            "func cycpatternCheck(_ a: String, _ b: String) -> Bool {\n    if a.count < b.count {\n        return false\n    }\n    for i in 0..<b.count {\n        let index = b.index(b.startIndex, offsetBy: i)\n        let rotated = b[index...] + b[..<index]\n        if a.contains(rotated) {\n            return true\n        }\n    }\n    return false\n}\n",
            "func evenOddCount(_ num: Int) -> [Int] {\n    let ds = String(abs(num))\n    var even = 0\n    for d in ds {\n        if (d.wholeNumberValue ?? 0) % 2 == 0 {\n            even += 1\n        }\n    }\n    return [even, ds.count - even]\n}\n",
            "func intToMiniRoman(_ num: Int) -> String {\n    let values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    let numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    var res = \"\"\n    for i in 0..<values.count {\n        while num >= values[i] {\n            res += numerals[i]\n            num -= values[i]\n        }\n    }\n    return res\n}\n",
            "func rightAngleTriangle(_ a: Int, _ b: Int, _ c: Int) -> Bool {\n    let s = [a, b, c].sorted()\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n}\n",
            "func findMax(_ words: [String]) -> String {\n    var maxCnt = 0\n    var maxW = \"\"\n    \n    for w in words {\n        let uniqueChars = Set(w)\n        let cnt = uniqueChars.count\n        \n        if cnt > maxCnt {\n            maxCnt = cnt\n            maxW = w\n        } else if cnt == maxCnt {\n            maxW = min(maxW, w)\n        }\n    }\n    \n    return maxW\n}\n",
            "func eat(_ num: Int, _ need: Int, _ remaining: Int) -> [Int] {\n    if need <= remaining {\n        return [num + need, remaining - need]\n    } else {\n        return [num + remaining, 0]\n    }\n}\n",
            "func doAlgebra(_ operators: [String], _ operands: [Int]) -> Int {\n    var ops = operators\n    var nums = operands\n    var i = ops.count - 1\n    while i >= 0 {\n        if ops[i] == \"**\" {\n            nums[i] = Int(pow(Double(nums[i]), Double(nums[i + 1])))\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n        }\n        i -= 1\n    }\n    i = 0\n    while i < ops.count {\n        if ops[i] == \"*\" {\n            nums[i] = nums[i] * nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            i -= 1\n        } else if ops[i] == \"//\" {\n            nums[i] = nums[i] / nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            i -= 1\n        }\n        i += 1\n    }\n    i = 0\n    while i < ops.count {\n        if ops[i] == \"+\" {\n            nums[i] = nums[i] + nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            i -= 1\n        } else if ops[i] == \"-\" {\n            nums[i] = nums[i] - nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            i -= 1\n        }\n        i += 1\n    }\n    return nums[0]\n}\n",
            "func solve(_ s: String) -> String {\n    if !s.contains(where: { $0.isLetter }) {\n        return String(s.reversed())\n    }\n    var result = \"\"\n    for ch in s {\n        if !ch.isLetter {\n            result.append(ch)\n        } else if ch.isUppercase {\n            result.append(Character(ch.lowercased()))\n        } else if ch.isLowercase {\n            result.append(Character(ch.uppercased()))\n        }\n    }\n    return result\n}\n",
            "func stringToMd5(_ txt: String) -> String? {\n    guard !txt.isEmpty else { return nil }\n    let data = txt.data(using: .utf8)!\n    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    CC_MD5(data.getBytes(), CC_LONG(data.count), &digest)\n    let mdString = digest.map { String(format: \"%02x\", $0) }.joined()\n    return mdString\n}\n",
            "func generateIntegers(_ a: Int, _ b: Int) -> [Int] {\n    let lower = max(2, min(a, b))\n    let upper = min(8, max(a, b))\n    var result: [Int] = []\n    for i in lower...upper {\n        if i % 2 == 0 {\n            result.append(i)\n        }\n    }\n    return result\n}\n"
        ],
        "rust": [
            "pub fn has_close_elements(numbers: &Vec<f64>, threshold: f64) -> bool {\n    for i in 0..numbers.len() {\n        for j in i + 1..numbers.len() {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n                return true;\n            }\n        }\n    }\n    false\n}\n",
            "pub fn separate_paren_groups(paren_string: &String) -> Vec<String> {\n    let mut groups = Vec::new();\n    let mut stk = Vec::new();\n    let mut current_group = String::new();\n    for ch in paren_string.chars() {\n        if ch == '(' {\n            stk.push(ch);\n            current_group.push(ch);\n        } else if ch == ')' {\n            stk.pop();\n            current_group.push(ch);\n            if stk.is_empty() {\n                groups.push(current_group.clone());\n                current_group.clear();\n            }\n        }\n    }\n    groups\n}\n",
            "pub fn truncate_number(num: f64) -> f64 {\n    num - num.floor()\n}\n",
            "pub fn below_zero(operations: &Vec<i32>) -> bool {\n    let mut balance = 0;\n    for op in operations.iter() {\n        balance += op;\n        if balance < 0 {\n            return true;\n        }\n    }\n    false\n}\n",
            "pub fn mean_absolute_deviation(numbers: &Vec<f64>) -> f64 {\n    let sum: f64 = numbers.iter().sum();\n    let mean = sum / numbers.len() as f64;\n    let deviation: f64 = numbers.iter().map(|&num| (num - mean).abs()).sum();\n    deviation / numbers.len() as f64\n}\n",
            "pub fn intersperse(numbers: &Vec<i32>, delimiter: i32) -> Vec<i32> {\n    let mut result = Vec::new();\n    for (i, &num) in numbers.iter().enumerate() {\n        if i != 0 {\n            result.push(delimiter);\n        }\n        result.push(num);\n    }\n    result\n}\n",
            "pub fn parse_nested_parens(paren_string: &String) -> Vec<i32> {\n    let paren_groups = paren_string.split_whitespace();\n    let mut result = Vec::new();\n\n    for group in paren_groups {\n        let mut max_depth = 0;\n        let mut depth = 0;\n\n        for ch in group.chars() {\n            if ch == '(' {\n                depth += 1;\n                max_depth = max(max_depth, depth);\n            } else if ch == ')' {\n                depth -= 1;\n            }\n        }\n\n        result.push(max_depth);\n    }\n\n    result\n}\n",
            "pub fn filter_by_substring(strs: &Vec<String>, substring: &String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strs {\n        if s.contains(substring) {\n            result.push(s.clone());\n        }\n    }\n    result\n}\n",
            "pub fn sum_product(numbers: &Vec<i32>) -> Vec<i32> {\n    let n_sum = numbers.iter().sum();\n    let n_product = numbers.iter().product();\n    vec![n_sum, n_product]\n}\n",
            "pub fn rolling_max(numbers: &Vec<i32>) -> Vec<i32> {\n    let mut max_so_far = i32::MIN;\n    let mut result = Vec::new();\n    for &num in numbers.iter() {\n        max_so_far = num.max(max_so_far);\n        result.push(max_so_far);\n    }\n    result\n}\n",
            "pub fn make_palindrome(s: &String) -> String {\n    if s == s.chars().rev().collect::<String>() {\n        return s.clone();\n    }\n    for i in 0..s.len() {\n        if s[i..] == s[i..].chars().rev().collect::<String>() {\n            let mut result = s.clone();\n            result.push_str(&s[..i].chars().rev().collect::<String>());\n            return result;\n        }\n    }\n    \"\".to_string()\n}\n",
            "pub fn string_xor(a: &String, b: &String) -> String {\n    let mut result = String::with_capacity(a.len());\n    for (char_a, char_b) in a.chars().zip(b.chars()) {\n        result.push(if char_a == char_b { '0' } else { '1' });\n    }\n    result\n}\n",
            "pub fn longest(strs: &Vec<String>) -> Option<String> {\n    if strs.is_empty() {\n        return None;\n    }\n    let mut longest_s = strs[0].clone();\n    for s in strs.iter() {\n        if s.len() > longest_s.len() {\n            longest_s = s.clone();\n        }\n    }\n    Some(longest_s)\n}\n",
            "pub fn greatest_common_divisor(a: i32, b: i32) -> i32 {\n    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b, a % b)\n    }\n}\n",
            "pub fn all_prefixes(s: &String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for i in 0..s.len() {\n        prefixes.push(s[0..=i].to_string());\n    }\n    prefixes\n}\n",
            "pub fn string_sequence(n: i32) -> String {\n    let mut result = String::new();\n    for i in 0..=n {\n        result.push_str(&i.to_string());\n        if i < n {\n            result.push(' ');\n        }\n    }\n    result\n}\n",
            "pub fn count_distinct_characters(s: &String) -> i32 {\n    let mut unique_chars = std::collections::HashSet::new();\n    for c in s.chars() {\n        unique_chars.insert(c.to_lowercase().next().unwrap());\n    }\n    unique_chars.len() as i32\n}\n",
            "use std::collections::HashMap;\n\npub fn parse_music(music_string: &String) -> Vec<i32> {\n    let mut durations = HashMap::new();\n    durations.insert(\"o\", 4);\n    durations.insert(\"o|\", 2);\n    durations.insert(\".|\", 1);\n\n    let mut result = Vec::new();\n    let mut start = 0;\n    \n    while let Some(end) = music_string[start..].find(' ') {\n        let note = &music_string[start..start + end];\n        if let Some(&duration) = durations.get(note) {\n            result.push(duration);\n        }\n        start += end + 1;\n    }\n    \n    let last_note = &music_string[start..];\n    if let Some(&duration) = durations.get(last_note) {\n        result.push(duration);\n    }\n    \n    result\n}\n",
            "pub fn how_many_times(s: &String, substring: &String) -> i32 {\n    let mut times = 0;\n    for i in 0..=s.len() - substring.len() {\n        if &s[i..i + substring.len()] == substring {\n            times += 1;\n        }\n    }\n    times\n}\n",
            "pub fn sort_numbers(numbers: &String) -> String {\n    let num_dict = [\n        (\"zero\", 0),\n        (\"one\", 1),\n        (\"two\", 2),\n        (\"three\", 3),\n        (\"four\", 4),\n        (\"five\", 5),\n        (\"six\", 6),\n        (\"seven\", 7),\n        (\"eight\", 8),\n        (\"nine\", 9)\n    ].iter().cloned().collect::<std::collections::HashMap<_, _>>();\n\n    let mut num_list: Vec<&str> = numbers.split_whitespace()\n        .filter(|word| num_dict.contains_key(word))\n        .collect();\n\n    num_list.sort_by_key(|&word| num_dict[word]);\n\n    num_list.join(\" \")\n}\n",
            "pub fn find_closest_elements(numbers: &Vec<f64>) -> Vec<f64> {\n    if numbers.len() < 2 {\n        return vec![];\n    }\n    \n    let mut sorted_numbers = numbers.clone();\n    sorted_numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n    \n    let mut min_diff = f64::MAX;\n    let mut closest_pair: Vec<f64> = Vec::new();\n    \n    for i in 1..sorted_numbers.len() {\n        let diff = sorted_numbers[i] - sorted_numbers[i - 1];\n        if diff < min_diff {\n            min_diff = diff;\n            closest_pair = vec![sorted_numbers[i - 1], sorted_numbers[i]];\n        }\n    }\n    \n    closest_pair\n}\n",
            "pub fn rescale_to_unit(numbers: &Vec<f64>) -> Vec<f64> {\n    let min_num = *numbers.iter().min_by(|a, b| a.partial_cmp(b).unwrap()).unwrap();\n    let max_num = *numbers.iter().max_by(|a, b| a.partial_cmp(b).unwrap()).unwrap();\n    if min_num == max_num {\n        vec![0.0; numbers.len()]\n    } else {\n        numbers.iter().map(|&num| (num - min_num) / (max_num - min_num)).collect()\n    }\n}\n",
            "pub fn filter_integers(values: &Vec<Box<dyn Any>>) -> Vec<i32> {\n    let mut result = Vec::new();\n    for value in values.iter() {\n        if let Some(&int_value) = value.downcast_ref::<i32>() {\n            result.push(int_value);\n        }\n    }\n    result\n}\n",
            "pub fn str_length(s: &String) -> i32 {\n    s.len() as i32\n}\n",
            "pub fn largest_divisor(n: i32) -> i32 {\n    for i in 2..n {\n        if n % i == 0 {\n            return n / i;\n        }\n    }\n    1\n}\n",
            "pub fn factorize(n: i32) -> Vec<i32> {\n    let mut factors = Vec::new();\n    let mut divisor = 2;\n    while divisor <= n {\n        if n % divisor == 0 {\n            factors.push(divisor);\n            let quotient = n / divisor;\n            divisor = 2;\n            n = quotient;\n        } else {\n            divisor += 1;\n        }\n    }\n    factors\n}",
            "use std::collections::HashMap;\n\npub fn remove_duplicates(numbers: &Vec<i32>) -> Vec<i32> {\n    let mut counts = HashMap::new();\n    for &num in numbers.iter() {\n        *counts.entry(num).or_insert(0) += 1;\n    }\n    let mut res = Vec::new();\n    for &num in numbers.iter() {\n        if let Some(&count) = counts.get(&num) {\n            if count == 1 {\n                res.push(num);\n            }\n        }\n    }\n    res\n}\n",
            "pub fn flip_case(s: &str) -> String {\n    let mut flipped = String::new();\n    for ch in s.chars() {\n        if !ch.is_alphabetic() {\n            flipped.push(ch);\n        } else if ch.is_lowercase() {\n            flipped.push(ch.to_ascii_uppercase());\n        } else if ch.is_uppercase() {\n            flipped.push(ch.to_ascii_lowercase());\n        }\n    }\n    flipped\n}\n",
            "pub fn concatenate(strs: &Vec<String>) -> String {\n    let mut result = String::new();\n    for str in strs {\n        result.push_str(str);\n    }\n    result\n}\n",
            "pub fn filter_by_prefix(strs: &Vec<String>, prefix_str: &String) -> Vec<String> {\n    strs.iter()\n        .filter(|&s| s.starts_with(prefix_str))\n        .cloned()\n        .collect()\n}\n",
            "pub fn get_positive(l: &Vec<i32>) -> Vec<i32> {\n    let mut result = Vec::new();\n    for &num in l {\n        if num > 0 {\n            result.push(num);\n        }\n    }\n    result\n}\n",
            "pub fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..=((n as f64).sqrt() as i32) {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\n",
            "pub fn poly(xs: &Vec<i32>, x: f64) -> f64 {\n    let mut res = 0.0;\n    for (i, &coeff) in xs.iter().enumerate() {\n        res += coeff as f64 * x.powi(i);\n    }\n    res\n}\n\npub fn find_zero(xs: &Vec<i32>) -> f64 {\n    let mut x1 = 1.0;\n    let mut x2 = -1.0;\n    while poly(xs, x1) * poly(xs, x2) > 0.0 {\n        x1 *= 2.0;\n        x2 *= 2.0;\n    }\n    while (x1 - x2).abs() > 1e-10 {\n        let mid = (x1 + x2) * 0.5;\n        if poly(xs, mid) == 0.0 {\n            return mid;\n        } else if poly(xs, mid) * poly(xs, x1) < 0.0 {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    (x1 + x2) * 0.5\n}\n",
            "pub fn sort_third(l: &Vec<i32>) -> Vec<i32> {\n    let mut sorted_third = l.iter().enumerate()\n        .filter(|&(i, _)| i % 3 == 0)\n        .map(|(_, &val)| val)\n        .collect::<Vec<i32>>();\n    \n    sorted_third.sort();\n\n    let mut result = Vec::with_capacity(l.len());\n    let mut j = 0;\n    for (i, &val) in l.iter().enumerate() {\n        if i % 3 == 0 {\n            result.push(sorted_third[j]);\n            j += 1;\n        } else {\n            result.push(val);\n        }\n    }\n    result\n}\n",
            "pub fn list_unique(l: &Vec<i32>) -> Vec<i32> {\n    let mut unique_elements: std::collections::HashSet<i32> = l.iter().cloned().collect();\n    let mut result: Vec<i32> = unique_elements.drain().collect();\n    result.sort();\n    result\n}\n",
            "pub fn max_element(l: &Vec<i32>) -> i32 {\n    if l.is_empty() {\n        0\n    } else {\n        *l.iter().max().unwrap()\n    }\n}\n",
            "pub fn fizz_buzz(n: i32) -> i32 {\n    let mut cnt = 0;\n    for i in 0..n as usize {\n        if i % 11 == 0 || i % 13 == 0 {\n            let str_i = i.to_string();\n            cnt += str_i.matches('7').count() as i32;\n        }\n    }\n    cnt\n}\n",
            "pub fn sort_even(l: &Vec<i32>) -> Vec<i32> {\n    let mut even_elements: Vec<i32> = l.iter().enumerate()\n        .filter_map(|(i, &x)| if i % 2 == 0 { Some(x) } else { None })\n        .collect();\n    \n    even_elements.sort();\n\n    let mut result = Vec::new();\n    let mut even_index = 0;\n    for (i, &x) in l.iter().enumerate() {\n        if i % 2 == 0 {\n            result.push(even_elements[even_index]);\n            even_index += 1;\n        } else {\n            result.push(x);\n        }\n    }\n    result\n}\n",
            "pub fn encode_cyclic(s: &String) -> String {\n    let mut result = String::new();\n    let chars: Vec<char> = s.chars().collect();\n    let length = chars.len();\n\n    for i in (0..length).step_by(3) {\n        if i + 3 > length {\n            result.extend(&chars[i..]);\n        } else {\n            result.push(chars[i + 1]);\n            result.push(chars[i + 2]);\n            result.push(chars[i]);\n        }\n    }\n    result\n}\n\npub fn decode_cyclic(s: &String) -> String {\n    encode_cyclic(&encode_cyclic(s))\n}\n",
            "pub fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    let limit = (n as f64).sqrt() as i32 + 1;\n    for i in 2..limit {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\n\npub fn prime_fib(n: i32) -> i32 {\n    let mut f = [0, 1];\n    let mut cnt = 0;\n    while cnt < n {\n        f = [f[1], f[0] + f[1]];\n        if is_prime(f[1]) {\n            cnt += 1;\n        }\n    }\n    f[1]\n}\n",
            "pub fn triples_sum_to_zero(l: &Vec<i32>) -> bool {\n    for i in 0..l.len() {\n        for j in i + 1..l.len() {\n            for k in j + 1..l.len() {\n                if l[i] + l[j] + l[k] == 0 {\n                    return true;\n                }\n            }\n        }\n    }\n    false\n}\n",
            "pub fn car_race_collision(n: i32) -> i32 {\n    n * n\n}\n",
            "pub fn incr_list(l: &Vec<i32>) -> Vec<i32> {\n    let mut result = Vec::new();\n    for &i in l {\n        result.push(i + 1);\n    }\n    result\n}\n",
            "pub fn pairs_sum_to_zero(l: &Vec<i32>) -> bool {\n    let mut seen = std::collections::HashSet::new();\n    for &num in l.iter() {\n        if seen.contains(&-num) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    false\n}\n",
            "pub fn change_base(mut x: i32, bas: i32) -> String {\n    if x == 0 {\n        return \"0\".to_string();\n    }\n    let mut digits = String::new();\n    while x > 0 {\n        digits.push_str(&(x % bas).to_string());\n        x /= bas;\n    }\n    digits.chars().rev().collect()\n}\n",
            "pub fn triangle_area(a: i32, h: i32) -> f64 {\n    (a * h) as f64 / 2.0\n}\n",
            "pub fn fib4(n: i32) -> i32 {\n    let mut fib = [0; 4];\n    fib[2] = 2;\n    for i in 4..=n {\n        fib[(i % 4) as usize] = fib.iter().sum();\n    }\n    fib[(n % 4) as usize]\n}\n",
            "pub fn median(l: &Vec<f64>) -> f64 {\n    let mut sl = l.clone();\n    sl.sort_by(|a, b| a.partial_cmp(b).unwrap());\n    if sl.len() % 2 != 0 {\n        sl[sl.len() / 2]\n    } else {\n        (sl[sl.len() / 2] + sl[sl.len() / 2 - 1]) / 2.0\n    }\n}\n",
            "pub fn is_palindrome(txt: &str) -> bool {\n    txt.chars().eq(txt.chars().rev())\n}\n",
            "pub fn modp(n: i32, p: i32) -> i32 {\n    let mut ret = 1;\n    for _ in 0..n {\n        ret = (ret * 2) % p;\n    }\n    ret\n}\n",
            "pub fn encode_shift(s: &String) -> String {\n    s.chars()\n        .map(|ch| ((ch as u8 - b'a' + 5) % 26 + b'a') as char)\n        .collect()\n}\n\npub fn decode_shift(s: &String) -> String {\n    s.chars()\n        .map(|ch| ((ch as u8 - b'a' + 21) % 26 + b'a') as char)\n        .collect()\n}\n",
            "pub fn remove_vowels(txt: &String) -> String {\n    txt.chars()\n        .filter(|c| !matches!(c, 'a' | 'e' | 'i' | 'o' | 'u' | 'A' | 'E' | 'I' | 'O' | 'U'))\n        .collect()\n}\n",
            "pub fn below_threshold(l: &Vec<i32>, t: i32) -> bool {\n    l.iter().all(|&x| x < t)\n}\n",
            "pub fn add(x: i32, y: i32) -> i32 {\n    x + y\n}\n",
            "pub fn same_chars(s0: &String, s1: &String) -> bool {\n    let set0: std::collections::HashSet<char> = s0.chars().collect();\n    let set1: std::collections::HashSet<char> = s1.chars().collect();\n    set0 == set1\n}\n",
            "pub fn fib(n: i32) -> i32 {\n    if n <= 1 {\n        n\n    } else {\n        fib(n - 1) + fib(n - 2)\n    }\n}\n",
            "pub fn correct_bracketing(brackets: &String) -> bool {\n    let mut depth = 0;\n    for b in brackets.chars() {\n        if b == '<' {\n            depth += 1;\n        } else if b == '>' {\n            depth -= 1;\n        }\n        if depth < 0 {\n            return false;\n        }\n    }\n    depth == 0\n}\n",
            "pub fn monotonic(l: &Vec<i32>) -> bool {\n    let diff: Vec<i32> = l.windows(2).map(|w| w[1] - w[0]).collect();\n    diff.iter().all(|&x| x <= 0) || diff.iter().all(|&x| x >= 0)\n}\n",
            "pub fn common(l1: &Vec<i32>, l2: &Vec<i32>) -> Vec<i32> {\n    let s1: std::collections::HashSet<i32> = l1.iter().cloned().collect();\n    let s2: std::collections::HashSet<i32> = l2.iter().cloned().collect();\n    let mut result: Vec<i32> = s1.intersection(&s2).cloned().collect();\n    result.sort_unstable();\n    result\n}\n",
            "pub fn largest_prime_factor(mut n: i32) -> i32 {\n    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    n\n}\n",
            "pub fn sum_to_n(n: i32) -> i32 {\n    (n * (n + 1)) / 2\n}\n",
            "pub fn correct_bracketing(brackets: &String) -> bool {\n    let mut depth = 0;\n    for b in brackets.chars() {\n        if b == '(' {\n            depth += 1;\n        } else if b == ')' {\n            depth -= 1;\n        }\n        if depth < 0 {\n            return false;\n        }\n    }\n    depth == 0\n}\n",
            "fn derivative(xs: &Vec<i32>) -> Vec<i32> {\n    let mut result = Vec::new();\n    for i in 1..xs.len() {\n        result.push(xs[i] * (i as i32));\n    }\n    result\n}\n",
            "pub fn fibfib(n: i32) -> i32 {\n    if n <= 1 {\n        return 0;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 1;\n    let mut n = n - 2;\n    while n > 0 {\n        let temp = a + b + c;\n        a = b;\n        b = c;\n        c = temp;\n        n -= 1;\n    }\n    c\n}\n",
            "pub fn vowels_count(s: &String) -> i32 {\n    let vowels = \"aeiou\";\n    let mut cnt = 0;\n    for (i, c) in s.chars().enumerate() {\n        if vowels.contains(c.to_ascii_lowercase()) || (i == s.len() - 1 && c.to_ascii_lowercase() == 'y') {\n            cnt += 1;\n        }\n    }\n    cnt\n}\n",
            "pub fn circular_shift(x: i32, shift: i32) -> String {\n    let x_str = x.to_string();\n    let len = x_str.len() as i32;\n    if shift > len {\n        x_str.chars().rev().collect()\n    } else {\n        let shift = shift as usize;\n        let len = len as usize;\n        format!(\"{}{}\", &x_str[len - shift..], &x_str[..len - shift])\n    }\n}\n",
            "pub fn digit_sum(s: &String) -> i32 {\n    let mut sum = 0;\n    for c in s.chars() {\n        if c.is_ascii_uppercase() {\n            sum += c as i32;\n        }\n    }\n    sum\n}\n",
            "pub fn fruit_distribution(s: &String, n: i32) -> i32 {\n    let words: Vec<&str> = s.split_whitespace().collect();\n    let apples_index = words.iter().position(|&word| word == \"apples\").unwrap();\n    let oranges_index = words.iter().position(|&word| word == \"oranges\").unwrap();\n    let apples = words[apples_index - 1].parse::<i32>().unwrap();\n    let oranges = words[oranges_index - 1].parse::<i32>().unwrap();\n    n - apples - oranges\n}\n",
            "pub fn pluck(arr: &Vec<i32>) -> Vec<i32> {\n    let evens: Vec<&i32> = arr.iter().filter(|&&n| n % 2 == 0).collect();\n    if evens.is_empty() {\n        return vec![];\n    }\n    let min_even = **evens.iter().min().unwrap();\n    let pos = arr.iter().position(|&n| n == min_even).unwrap();\n    vec![min_even, pos as i32]\n}\n",
            "pub fn search(lst: &Vec<i32>) -> i32 {\n    let mut freqs = std::collections::HashMap::new();\n    for &n in lst {\n        *freqs.entry(n).or_insert(0) += 1;\n    }\n    let mut good_vals = Vec::new();\n    for (&key, &val) in &freqs {\n        if val >= key {\n            good_vals.push(key);\n        }\n    }\n    good_vals.into_iter().max().unwrap_or(-1)\n}\n",
            "pub fn strange_sort_list(lst: &Vec<i32>) -> Vec<i32> {\n    let mut sl = lst.clone();\n    sl.sort();\n    let mut result = Vec::new();\n    let mut left = 0;\n    let mut right = sl.len() - 1;\n    while left <= right {\n        result.push(sl[left]);\n        left += 1;\n        if left <= right {\n            result.push(sl[right]);\n            right -= 1;\n        }\n    }\n    result\n}\n",
            "pub fn triangle_area(a: i32, b: i32, c: i32) -> f64 {\n    if a + b > c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n        (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n",
            "pub fn will_it_fly(q: &Vec<i32>, w: i32) -> bool {\n    if q.is_empty() {\n        return false;\n    }\n    let mut is_palin = true;\n    for i in 0..q.len() / 2 {\n        if q[i] != q[q.len() - i - 1] {\n            is_palin = false;\n            break;\n        }\n    }\n    let total: i32 = q.iter().sum();\n    is_palin && total <= w\n}\n",
            "pub fn smallest_change(arr: &Vec<i32>) -> i32 {\n    let mut ans = 0;\n    for i in 0..arr.len() / 2 {\n        if arr[i] != arr[arr.len() - i - 1] {\n            ans += 1;\n        }\n    }\n    ans\n}\n",
            "fn total_match(lst1: &Vec<String>, lst2: &Vec<String>) -> Vec<String> {\n    let cnt1 = lst1.iter().map(|s| s.len()).sum::<usize>();\n    let cnt2 = lst2.iter().map(|s| s.len()).sum::<usize>();\n    \n    if cnt1 <= cnt2 {\n        lst1.clone()\n    } else {\n        lst2.clone()\n    }\n}\n",
            "pub fn is_multiply_prime(a: i32) -> bool {\n    let mut cnt = 0;\n    let mut n = a;\n    for i in 2..=((n as f64).sqrt() as i32) {\n        if is_prime(i) {\n            while n % i == 0 {\n                cnt += 1;\n                n /= i;\n            }\n        }\n    }\n    cnt == 3\n}\n\nfn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..=((n as f64).sqrt() as i32) {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\n",
            "pub fn is_simple_power(x: i32, n: i32) -> bool {\n    if n < 2 {\n        return x == n;\n    }\n    let mut tmp = 1;\n    while tmp < x {\n        tmp *= n;\n    }\n    tmp == x\n}\n",
            "pub fn is_cube(a: i32) -> bool {\n    let a = a.abs();\n    let root = ((a as f64).powi(1)/3.0).round() as i32;\n    root * root * root == a\n}\n",
            "pub fn hex_key(num: &String) -> i32 {\n    let mut count = 0;\n    for x in num.chars() {\n        if x == '2' || x == '3' || x == '5' || x == '7' || x == 'B' || x == 'D' {\n            count += 1;\n        }\n    }\n    count\n}\n",
            "pub fn decimal_to_binary(dec: i32) -> String {\n    format!(\"db{:b}db\", dec)\n}\n",
            "pub fn is_happy(s: &String) -> bool {\n    if s.len() < 3 {\n        return false;\n    }\n    for i in 0..s.len() - 2 {\n        if s.as_bytes()[i] == s.as_bytes()[i + 1] ||\n           s.as_bytes()[i] == s.as_bytes()[i + 2] ||\n           s.as_bytes()[i + 1] == s.as_bytes()[i + 2] {\n            return false;\n        }\n    }\n    true\n}\n",
            "```pub fn numerical_letter_grade(grades: &Vec<f64>) -> Vec<String> {\n    let mut result = Vec::new();\n    for &g in grades {\n        if g == 4.0 {\n            result.push(\"A+\".to_string());\n        } else if g > 3.7 {\n            result.push(\"A\".to_string());\n        } else if g > 3.3 {\n            result.push(\"A-\".to_string());\n        } else if g > 3.0 {\n            result.push(\"B+\".to_string());\n        } else if g > 2.7 {\n            result.push(\"B\".to_string());\n        } else if g > 2.3 {\n            result.push(\"B-\".to_string());\n        } else if g > 2.0 {\n            result.push(\"C+\".to_string());\n        } else if g > 1.7 {\n            result.push(\"C\".to_string());\n        } else if g > 1.3 {\n            result.push(\"C-\".to_string());\n        } else if g > 1.0 {\n            result.push(\"D+\".to_string());\n        } else if g > 0.7 {\n            result.push(\"D\".to_string());\n        } else if g > 0.0 {\n            result.push(\"D-\".to_string());\n        } else {\n            result.push(\"E\".to_string());\n        }\n    }\n    result\n}",
            "pub fn prime_length(s: &str) -> bool {\n    let length = s.len();\n    if length < 2 {\n        return false;\n    }\n    for i in 2..=((length as f64).sqrt() as usize) {\n        if length % i == 0 {\n            return false;\n        }\n    }\n    true\n}\n",
            "pub fn starts_one_ends(n: i32) -> i32 {\n    if n == 1 {\n        return 1;\n    }\n    return 2 * 9 * (10i32.pow((n - 2) as u32));\n}\n",
            "pub fn solve(n: i32) -> String {\n    let digits_sum = n.to_string()\n        .chars()\n        .map(|d| d.to_digit(10).unwrap() as u32)\n        .sum::<u32>();\n    format!(\"{:b}\", digits_sum)\n}\n",
            "pub fn add(lst: &[i32]) -> i32 {\n    let mut result = 0;\n    for &value in lst.iter().skip(1).step_by(2) {\n        if value % 2 == 0 {\n            result += value;\n        }\n    }\n    result\n}\n",
            "pub fn anti_shuffle(s: &String) -> String {\n    let mut result = Vec::new();\n    for word in s.split_whitespace() {\n        let mut chars: Vec<char> = word.chars().collect();\n        chars.sort_unstable();\n        if !result.is_empty() {\n            result.push(' ');\n        }\n        result.extend(chars);\n    }\n    result.into_iter().collect()\n}\n",
            "pub fn get_row(lst: &Vec<Vec<i32>>, x: i32) -> Vec<Vec<i32>> {\n    let mut coords = Vec::new();\n    for (i, row) in lst.iter().enumerate() {\n        for (j, &val) in row.iter().enumerate() {\n            if val == x {\n                coords.push(vec![i as i32, j as i32]);\n            }\n        }\n    }\n    coords.sort_by(|a, b| a[0].cmp(&b[0]).then_with(|| b[1].cmp(&a[1])));\n    coords\n}\n",
            "pub fn sort_array(arr: &Vec<i32>) -> Vec<i32> {\n    if arr.is_empty() {\n        return vec![];\n    }\n    if (arr[0] + arr[arr.len() - 1]) % 2 == 0 {\n        let mut sorted_arr = arr.clone();\n        sorted_arr.sort_by(|a, b| b.cmp(a));\n        sorted_arr\n    } else {\n        let mut sorted_arr = arr.clone();\n        sorted_arr.sort();\n        sorted_arr\n    }\n}\n",
            "pub fn encrypt(s: &String) -> String {\n    let mut result = String::new();\n    for ch in s.chars() {\n        if let Some(shifted) = ch.is_ascii_lowercase().then(|| {\n            let shifted = (ch as u8 + 4) % b'z';\n            if shifted == 0 { b'z' } else { b'a' + shifted }\n        }) {\n            result.push(shifted as char);\n        } else {\n            result.push(ch);\n        }\n    }\n    result\n}\n",
            "pub fn next_smallest(lst: &Vec<i32>) -> Option<i32> {\n    let mut sl: std::collections::BTreeSet<i32> = lst.iter().cloned().collect();\n    if sl.len() < 2 {\n        return None;\n    }\n    let _ = sl.take(&lst[0]);\n    sl.iter().next().copied()\n}\n",
            "pub fn is_bored(s: &String) -> i32 {\n    let sentences = s.split(&['.', '!', '?']).collect::<Vec<&str>>();\n    let mut count = 0;\n\n    for sentence in sentences {\n        let trimmed_sentence = sentence.trim_start();\n        if trimmed_sentence.starts_with(\"I \") {\n            count += 1;\n        }\n    }\n\n    count\n}\n",
            "use std::any::Any;\n\npub fn any_int(x: &Box<dyn Any>, y: &Box<dyn Any>, z: &Box<dyn Any>) -> bool {\n    if let (Some(&x_val), Some(&y_val), Some(&z_val)) = (\n        x.downcast_ref::<i32>(),\n        y.downcast_ref::<i32>(),\n        z.downcast_ref::<i32>()\n    ) {\n        if (x_val + y_val == z_val) || (x_val + z_val == y_val) || (y_val + z_val == x_val) {\n            return true;\n        }\n    }\n    false\n}\n",
            "pub fn encode(message: &String) -> String {\n    let vowels = \"aeiouAEIOU\";\n    let mut result = String::new();\n    for ch in message.chars() {\n        if ch.is_alphabetic() {\n            let ch1 = if ch.is_lowercase() { ch.to_ascii_uppercase() } else { ch.to_ascii_lowercase() };\n            if vowels.contains(ch1) {\n                let shifted_char = ((ch1 as u8 - b'A' + 2) % 26) + b'A';\n                result.push(shifted_char as char);\n            } else {\n                result.push(ch1);\n            }\n        } else {\n            result.push(ch);\n        }\n    }\n    result\n}\n",
            "pub fn skjkasdkd(lst: &Vec<i32>) -> i32 {\n    let mut primes = Vec::new();\n    for &n in lst {\n        if is_prime(n) {\n            primes.push(n);\n        }\n    }\n    if primes.is_empty() {\n        return 0;\n    }\n    let largest = *primes.iter().max().unwrap();\n    let mut sum = 0;\n    let mut num = largest;\n    while num > 0 {\n        sum += num % 10;\n        num /= 10;\n    }\n    sum\n}\n\nfn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..=((n as f64).sqrt() as i32) {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\n",
            "pub fn check_dict_case(d: &HashMap<String, String>) -> bool {\n    if d.is_empty() {\n        return false;\n    }\n    \n    let mut all_lower = true;\n    let mut all_upper = true;\n    \n    for key in d.keys() {\n        for c in key.chars() {\n            if !c.is_lowercase() {\n                all_lower = false;\n            }\n            if !c.is_uppercase() {\n                all_upper = false;\n            }\n        }\n        if !all_lower && !all_upper {\n            return false;\n        }\n    }\n    \n    all_lower || all_upper\n}\n",
            "pub fn count_up_to(n: i32) -> Vec<i32> {\n    let mut primes = Vec::new();\n    for num in 2..n {\n        let mut is_prime = true;\n        for &p in &primes {\n            if num % p == 0 {\n                is_prime = false;\n                break;\n            }\n        }\n        if is_prime {\n            primes.push(num);\n        }\n    }\n    primes\n}\n",
            "pub fn multiply(a: i32, b: i32) -> i32 {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n",
            "pub fn count_upper(s: &String) -> i32 {\n    let vowels = \"AEIOU\";\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && vowels.contains(c) {\n            count += 1;\n        }\n    }\n    count\n}\n",
            "pub fn closest_integer(value: &String) -> i32 {\n    let num = value.parse::<f32>().unwrap();\n    if num >= 0.0 {\n        (num + 0.5).round() as i32\n    } else {\n        (num - 0.5).round() as i32\n    }\n}\n",
            "pub fn make_a_pile(n: i32) -> Vec<i32> {\n    let mut pile = Vec::new();\n    for i in 0..n {\n        pile.push(n + 2 * i);\n    }\n    pile\n}\n",
            "pub fn words_string(s: &String) -> Vec<String> {\n    s.split(|c: char| c == ',' || c == ' ')\n        .filter(|w| !w.is_empty())\n        .map(String::from)\n        .collect()\n}\n",
            "pub fn choose_num(x: i32, y: i32) -> i32 {\n    if x > y {\n        -1\n    } else if y % 2 == 0 {\n        y\n    } else if x != y {\n        y - 1\n    } else {\n        -1\n    }\n}\n",
            "pub fn rounded_avg(n: i32, m: i32) -> Option<String> {\n    if n > m {\n        return None;\n    }\n    let r_avg = (m as f64 + n as f64) / 2.0 + 0.5;\n    Some(format!(\"{:b}\", r_avg.round() as u32))\n}\n",
            "pub fn unique_digits(x: &Vec<i32>) -> Vec<i32> {\n    let all_digits_odd = |s: &str| -> bool {\n        s.chars().all(|digit| (digit.to_digit(10).unwrap() % 2) != 0)\n    };\n\n    let mut result: Vec<i32> = x\n        .iter()\n        .filter(|&&num| all_digits_odd(&num.to_string()))\n        .cloned()\n        .collect();\n    \n    result.sort_unstable();\n    result\n}\n",
            "pub fn by_length(arr: &Vec<i32>) -> Vec<String> {\n    let digit_names = vec![\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    let mut sorted_arr: Vec<i32> = arr.iter().cloned().filter(|&x| x >= 1 && x <= 9).collect();\n    \n    sorted_arr.sort_by(|a, b| b.cmp(a));\n    \n    sorted_arr.into_iter().map(|x| digit_names[(x - 1) as usize].to_string()).collect()\n}\n",
            "pub fn f(n: i32) -> Vec<i32> {\n    let n = n as usize;\n    let mut nums = vec![0; n];\n    for i in 0..n {\n        nums[i] = (i + 1) as i32;\n    }\n    \n    let mut result = Vec::new();\n    for i in 0..n {\n        if (i + 1) % 2 != 0 {\n            let sum: i32 = nums[0..=i].iter().sum();\n            result.push(sum);\n        } else {\n            let product: i32 = nums[0..=i].iter().product();\n            result.push(product);\n        }\n    }\n    \n    result\n}\n",
            "fn is_palindrome(txt: &str) -> bool {\n    txt == txt.chars().rev().collect::<String>()\n}\n\npub fn even_odd_palindrome(n: i32) -> Vec<i32> {\n    let mut cnt = vec![0; 2];\n    for i in 1..=n {\n        if is_palindrome(&i.to_string()) {\n            cnt[(i % 2) as usize] += 1;\n        }\n    }\n    cnt\n}\n",
            "fn digits_sum(n: i32) -> i32 {\n    let n_str = n.to_string();\n    if n >= 0 {\n        n_str.chars().map(|d| d.to_digit(10).unwrap() as i32).sum()\n    } else {\n        let first_two_digits: i32 = n_str[1..3].parse().unwrap();\n        first_two_digits * 2 + digits_sum(n.abs())\n    }\n}\n\npub fn count_nums(arr: &Vec<i32>) -> i32 {\n    arr.iter().filter(|&&n| digits_sum(n) > 0).count() as i32\n}\n",
            "pub fn move_one_ball(arr: &Vec<i32>) -> bool {\n    if arr.is_empty() {\n        return true;\n    }\n    let mut sorted_arr = arr.clone();\n    sorted_arr.sort_unstable();\n    for i in 0..arr.len() {\n        if arr[i..] == sorted_arr[..arr.len() - i] && arr[..i] == sorted_arr[arr.len() - i..] {\n            return true;\n        }\n    }\n    false\n}\n",
            "pub fn can_exchange(lst1: &Vec<i32>, lst2: &Vec<i32>) -> String {\n    let odd_cnt = lst1.iter().filter(|&&x| x % 2 != 0).count();\n    let even_cnt = lst2.iter().filter(|&&x| x % 2 == 0).count();\n    if even_cnt >= odd_cnt {\n        \"YES\".to_string()\n    } else {\n        \"NO\".to_string()\n    }\n}\n",
            "use std::collections::HashMap;\nuse std::io::BufRead;\n\npub fn histogram(test: &String) -> HashMap<String, i32> {\n    let mut freq = HashMap::new();\n    for word in test.split_whitespace() {\n        if !word.is_empty() {\n            *freq.entry(word.to_string()).or_insert(0) += 1;\n        }\n    }\n    let mut result = HashMap::new();\n    if !freq.is_empty() {\n        let max_freq = freq.values().cloned().max().unwrap();\n        for (k, &v) in &freq {\n            if v == max_freq {\n                result.insert(k.clone(), v);\n            }\n        }\n    }\n    result\n}\n",
            "pub fn reverse_delete(s: &String, c: &String) -> Vec<String> {\n    let s1: String = s.chars()\n                      .filter(|ch| !c.contains(*ch))\n                      .collect();\n    let is_palindrome = s1 == s1.chars().rev().collect::<String>();\n    vec![s1, if is_palindrome { \"yes\".to_string() } else { \"no\".to_string() }]\n}\n",
            "pub fn odd_count(lst: &Vec<String>) -> Vec<String> {\n    let mut result = Vec::new();\n    for num in lst {\n        let n = num.chars().filter(|&c| c.to_digit(10).unwrap_or(0) % 2 == 1).count();\n        let rs = \"the number of odd elements in the string i of the input.\".to_string();\n        result.push(rs.replace(\"i\", &n.to_string()));\n    }\n    result\n}\n",
            "fn min_sub_array_sum(nums: &Vec<i32>) -> i32 {\n    let mut min_sum = 0;\n    let mut cur_sum = 0;\n    for &n in nums.iter() {\n        cur_sum = std::cmp::min(cur_sum + n, 0);\n        min_sum = std::cmp::min(cur_sum, min_sum);\n    }\n    if min_sum == 0 {\n        min_sum = *nums.iter().min().unwrap();\n    }\n    min_sum\n}\n",
            "use std::f64;\n\npub fn max_fill(grid: &Vec<Vec<i32>>, capacity: i32) -> i32 {\n    grid.iter().map(|arr| {\n        let sum: f64 = arr.iter().sum::<i32>() as f64;\n        (sum / capacity as f64).ceil() as i32\n    }).sum()\n}\n",
            "pub fn sort_array(arr: &Vec<i32>) -> Vec<i32> {\n    let mut sorted_arr = arr.clone();\n    sorted_arr.sort_by(|&a, &b| {\n        let ones_a = a.count_ones();\n        let ones_b = b.count_ones();\n        if ones_a == ones_b {\n            a.cmp(&b)\n        } else {\n            ones_a.cmp(&ones_b)\n        }\n    });\n    sorted_arr\n}\n",
            "pub fn select_words(s: &String, n: i32) -> Vec<String> {\n    let consonants = \"bcdfghjklmnpqrstvwxyz\";\n    let mut words = Vec::new();\n    let mut word = String::new();\n\n    for c in s.chars() {\n        if c.is_whitespace() {\n            if !word.is_empty() {\n                words.push(word.clone());\n                word.clear();\n            }\n        } else {\n            word.push(c);\n        }\n    }\n\n    if !word.is_empty() {\n        words.push(word);\n    }\n\n    let mut result = Vec::new();\n    for w in &words {\n        let mut consonant_count = 0;\n        for c in w.chars() {\n            let lower_c = c.to_ascii_lowercase();\n            if consonants.contains(lower_c) {\n                consonant_count += 1;\n            }\n        }\n        if consonant_count == n {\n            result.push(w.clone());\n        }\n    }\n\n    result\n}\n",
            "pub fn get_closest_vowel(word: &String) -> String {\n    let vowels = \"aeiouAEIOU\";\n    for i in (1..word.len() - 1).rev() {\n        if vowels.contains(&word[i]) && !vowels.contains(&word[i - 1]) && !vowels.contains(&word[i + 1]) {\n            return word.chars().nth(i).unwrap().to_string();\n        }\n    }\n    \"\".to_string()\n}\n",
            "fn check(s: &str) -> bool {\n    let mut depth = 0;\n    for ch in s.chars() {\n        if ch == '(' {\n            depth += 1;\n        } else {\n            depth -= 1;\n        }\n        if depth < 0 {\n            return false;\n        }\n    }\n    depth == 0\n}\n\npub fn match_parens(lst: &Vec<String>) -> String {\n    let s1 = lst[0].clone() + &lst[1];\n    let s2 = lst[1].clone() + &lst[0];\n    if check(&s1) || check(&s2) {\n        \"Yes\".to_string()\n    } else {\n        \"No\".to_string()\n    }\n}\n",
            "pub fn maximum(arr: &Vec<i32>, k: i32) -> Vec<i32> {\n    if k == 0 {\n        return vec![];\n    }\n    let mut sortedArr = arr.clone();\n    sortedArr.sort();\n    sortedArr.split_off(sortedArr.len() - k as usize)\n}\n",
            "pub fn solution(lst: &Vec<i32>) -> i32 {\n    let mut sum = 0;\n    for (i, &x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n",
            "pub fn add_elements(arr: &Vec<i32>, k: i32) -> i32 {\n    let mut sum = 0;\n    for (i, &x) in arr.iter().enumerate().take(k as usize) {\n        if x.to_string().len() <= 2 {\n            sum += x;\n        }\n    }\n    sum\n}\n",
            "pub fn get_odd_collatz(mut n: i32) -> Vec<i32> {\n    let mut collatz = vec![1];\n    while n != 1 {\n        if n % 2 != 0 {\n            collatz.push(n);\n            n = 3 * n + 1;\n        } else {\n            n /= 2;\n        }\n    }\n    collatz.sort();\n    collatz\n}\n",
            "pub fn valid_date(date: &String) -> bool {\n    if date.len() != 10 || date.chars().nth(2) != Some('-') || date.chars().nth(5) != Some('-') {\n        return false;\n    }\n    let m: u32 = match date[0..2].parse() {\n        Ok(num) => num,\n        Err(_) => return false,\n    };\n    let d: u32 = match date[3..5].parse() {\n        Ok(num) => num,\n        Err(_) => return false,\n    };\n    if (m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) && d >= 1 && d <= 31 {\n        return true;\n    }\n    if (m == 4 || m == 6 || m == 9 || m == 11) && d >= 1 && d <= 30 {\n        return true;\n    }\n    if m == 2 && d >= 1 && d <= 29 {\n        return true;\n    }\n    false\n}\n",
            "fn split_words(txt: &String) -> Vec<String> {\n    let mut result = Vec::new();\n    if txt.contains(' ') {\n        let mut start = 0;\n        while let Some(end) = txt[start..].find(' ') {\n            let end = start + end;\n            result.push(txt[start..end].to_string());\n            start = end + 1;\n        }\n        result.push(txt[start..].to_string());\n    } else if txt.contains(',') {\n        let mut start = 0;\n        while let Some(end) = txt[start..].find(',') {\n            let end = start + end;\n            result.push(txt[start..end].to_string());\n            start = end + 1;\n        }\n        result.push(txt[start..].to_string());\n    } else {\n        let count = txt.chars()\n                      .filter(|&c| c.is_lowercase() && (c as u8) % 2 == 0)\n                      .count();\n        result.push(count.to_string());\n    }\n    result\n}\n",
            "fn is_sorted(lst: &Vec<i32>) -> bool {\n    if !lst.windows(2).all(|w| w[0] <= w[1]) {\n        return false;\n    }\n    let mut freq = std::collections::HashMap::new();\n    for &i in lst {\n        *freq.entry(i).or_insert(0) += 1;\n    }\n    freq.values().all(|&v| v <= 2)\n}\n",
            "fn is_prime(n: i32) -> bool {\n    if n < 2 { return false; }\n    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 { return false; }\n        i += 1;\n    }\n    true\n}\n\npub fn intersection(interval1: &Vec<i32>, interval2: &Vec<i32>) -> String {\n    let l = std::cmp::max(interval1[0], interval2[0]);\n    let r = std::cmp::min(interval1[1], interval2[1]);\n    let length = r - l;\n    if length > 0 && is_prime(length) {\n        \"YES\".to_string()\n    } else {\n        \"NO\".to_string()\n    }\n}\n",
            "fn prod_signs(arr: &Vec<i32>) -> Option<i32> {\n    if arr.is_empty() {\n        return None;\n    }\n    if arr.contains(&0) {\n        return Some(0);\n    }\n    let sign = if arr.iter().filter(|&&n| n < 0).count() % 2 == 1 { -1 } else { 1 };\n    Some(sign * arr.iter().map(|&n| n.abs()).sum())\n}\n",
            "pub fn min_path(grid: &Vec<Vec<i32>>, k: i32) -> Vec<i32> {\n    let n = grid.len();\n    let mut min_val = n * n + 1;\n    for i in 0..n {\n        for j in 0..n {\n            if grid[i][j] == 1 {\n                let mut temp = Vec::new();\n                if i != 0 {\n                    temp.push(grid[i - 1][j]);\n                }\n                if j != 0 {\n                    temp.push(grid[i][j - 1]);\n                }\n                if i != n - 1 {\n                    temp.push(grid[i + 1][j]);\n                }\n                if j != n - 1 {\n                    temp.push(grid[i][j + 1]);\n                }\n                min_val = *temp.iter().min().unwrap_or(&min_val);\n            }\n        }\n    }\n    let mut result = Vec::new();\n    for i in 0..k {\n        result.push(if i % 2 == 0 { 1 } else { min_val });\n    }\n    result\n}\n",
            "pub fn tri(n: i32) -> Vec<i32> {\n    if n == 0 {\n        return vec![1];\n    }\n    let mut seq = vec![1.0, 3.0];\n    for i in 2..=n {\n        if i % 2 == 0 {\n            seq.push(i as f64 / 2.0 + 1.0);\n        } else {\n            seq.push(seq[i as usize - 1] + seq[i as usize - 2] + (i + 3) as f64 / 2.0);\n        }\n    }\n    seq.into_iter().map(|x| x.round() as i32).collect()\n}\n",
            "pub fn digits(n: i32) -> i32 {\n    let mut product = 1;\n    let mut hasOdd = false;\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        if digit % 2 == 1 {\n            product *= digit;\n            hasOdd = true;\n        }\n        n /= 10;\n    }\n    if hasOdd { product } else { 0 }\n}\n",
            "pub fn is_nested(s: &String) -> bool {\n    let mut open_idx = Vec::new();\n    let mut close_idx = Vec::new();\n\n    for (i, c) in s.chars().enumerate() {\n        if c == '[' {\n            open_idx.push(i);\n        } else if c == ']' {\n            close_idx.push(i);\n        }\n    }\n\n    close_idx.reverse();\n    let mut cnt = 0;\n    let mut i = 0;\n    let l = close_idx.len();\n\n    for idx in open_idx {\n        if i < l && idx < close_idx[i] {\n            cnt += 1;\n            i += 1;\n        }\n    }\n\n    cnt >= 2\n}\n",
            "pub fn sum_squares(lst: &Vec<f64>) -> i32 {\n    let mut sum = 0;\n    for &n in lst {\n        sum += std::f64::ceil(n).powi(2) as i32;\n    }\n    sum\n}\n",
            "pub fn check_if_last_char_is_a_letter(txt: &String) -> bool {\n    if txt.is_empty() {\n        return false;\n    }\n    match txt.rfind(' ') {\n        Some(last_space) => {\n            let last = &txt[last_space + 1..];\n            last.len() == 1 && last.chars().next().unwrap_or('\\0').is_alphabetic()\n        },\n        None => txt.len() == 1 && txt.chars().next().unwrap_or('\\0').is_alphabetic(),\n    }\n}\n",
            "pub fn can_arrange(arr: &Vec<i32>) -> i32 {\n    if arr.len() <= 1 {\n        return -1;\n    }\n    let mut idx = Vec::new();\n    for i in 1..arr.len() {\n        if arr[i] < arr[i - 1] {\n            idx.push(i as i32);\n        }\n    }\n    if !idx.is_empty() {\n        *idx.iter().max().unwrap()\n    } else {\n        -1\n    }\n}\n",
            "pub fn largest_smallest_integers(lst: &Vec<i32>) -> Vec<Option<i32>> {\n    let mut neg = Vec::new();\n    let mut pos = Vec::new();\n    \n    for &i in lst {\n        if i < 0 {\n            neg.push(i);\n        } else if i > 0 {\n            pos.push(i);\n        }\n    }\n    \n    let max_neg = if !neg.is_empty() { Some(*neg.iter().max().unwrap()) } else { None };\n    let min_pos = if !pos.is_empty() { Some(*pos.iter().min().unwrap()) } else { None };\n    \n    vec![max_neg, min_pos]\n}\n",
            "use std::any::Any;\n\nfn any_to_real(o: &Box<dyn Any>) -> Result<f64, String> {\n    if o.is::<String>() {\n        let s = o.downcast_ref::<String>().unwrap();\n        match s.replace(',', \".\").parse::<f64>() {\n            Ok(num) => Ok(num),\n            Err(_) => Err(String::from(\"Parse Error\")),\n        }\n    } else if o.is::<i32>() {\n        Ok(*o.downcast_ref::<i32>().unwrap() as f64)\n    } else if o.is::<f64>() {\n        Ok(*o.downcast_ref::<f64>().unwrap())\n    } else {\n        Err(String::from(\"Type Error\"))\n    }\n}\n\npub fn compare_one(a: &Box<dyn Any>, b: &Box<dyn Any>) -> Option<f64> {\n    let a1 = any_to_real(a).ok()?;\n    let b1 = any_to_real(b).ok()?;\n    if a1 == b1 {\n        None\n    } else if a1 > b1 {\n        Some(a1)\n    } else {\n        Some(b1)\n    }\n}\n",
            "pub fn is_equal_to_sum_even(n: i32) -> bool {\n    n % 2 == 0 && n >= 8\n}\n",
            "pub fn special_factorial(n: i32) -> i32 {\n    let mut fact = 1;\n    let mut result = 1;\n    for i in 1..=n {\n        fact *= i;\n        result *= fact;\n    }\n    result\n}\n",
            "use regex::Regex;\n\npub fn fix_spaces(txt: &String) -> String {\n    let re = Regex::new(r\"\\s{3,}\").unwrap();\n    re.replace_all(&re.replace_all(txt, \"-\"), \"_\").to_string()\n}\n",
            "pub fn file_name_check(file_name: &str) -> String {\n    let suf = [\"txt\", \"exe\", \"dll\"];\n    if !file_name.contains('.') || \n       !suf.contains(&file_name.split('.').last().unwrap_or_default()) ||\n       file_name == \".\" ||\n       !file_name.starts_with(char::is_alphabetic) ||\n       file_name.split('.').next().unwrap_or_default().chars().filter(|c| c.is_digit(10)).count() > 3 {\n        return \"No\".to_string();\n    }\n    \"Yes\".to_string()\n}\n",
            "pub fn sum_squares(lst: &Vec<i32>) -> i32 {\n    let mut result = 0;\n    for (i, &x) in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            result += x.pow(2);\n        } else if i % 4 == 0 {\n            result += x.pow(3);\n        } else {\n            result += x;\n        }\n    }\n    result\n}\n",
            "pub fn words_in_sentence(sentence: &String) -> String {\n    let mut result = String::new();\n    for word in sentence.split_whitespace() {\n        let length = word.len();\n        let is_prime = if length < 2 {\n            false\n        } else {\n            (2..=(length as f64).sqrt() as usize).all(|i| length % i != 0)\n        };\n        if is_prime {\n            if !result.is_empty() {\n                result.push(' ');\n            }\n            result.push_str(word);\n        }\n    }\n    result\n}\n",
            "pub fn simplify(x: &String, n: &String) -> bool {\n    let slash_pos_x = x.find('/').unwrap();\n    let slash_pos_n = n.find('/').unwrap();\n    let num_x: i32 = x[0..slash_pos_x].parse().unwrap();\n    let den_x: i32 = x[slash_pos_x + 1..].parse().unwrap();\n    let num_n: i32 = n[0..slash_pos_n].parse().unwrap();\n    let den_n: i32 = n[slash_pos_n + 1..].parse().unwrap();\n    let num = num_x * num_n;\n    let den = den_x * den_n;\n    num % den == 0\n}\n",
            "pub fn digits_sum(n: i32) -> i32 {\n    let n_str = n.to_string();\n    if n >= 0 {\n        n_str.chars().map(|d| d.to_digit(10).unwrap() as i32).sum()\n    } else {\n        (n_str[0..2].parse::<i32>().unwrap()) * 2 + digits_sum(n.abs())\n    }\n}\n\npub fn order_by_points(nums: &Vec<i32>) -> Vec<i32> {\n    let mut nums = nums.to_vec();\n    nums.sort_by_key(|&n| digits_sum(n));\n    nums\n}\n",
            "pub fn special_filter(nums: &Vec<i32>) -> i32 {\n    let odds = \"13579\";\n    let mut count = 0;\n    for &n in nums.iter() {\n        if n > 10 && n % 2 == 1 && odds.contains(&n.to_string()[0..1]) {\n            count += 1;\n        }\n    }\n    count\n}\n",
            "pub fn get_max_triples(n: i32) -> i32 {\n    let mut c = [0, 0, 0];\n    for i in 1..=n {\n        let a = i * i - i + 1;\n        c[(a % 3) as usize] += 1;\n    }\n    (c[0] * c[1] * c[2]) + ((c[0] * (c[0] - 1) * (c[0] - 2)) + (c[1] * (c[1] - 1) * (c[1] - 2)) + (c[2] * (c[2] - 1) * (c[2] - 2))) / 6\n}\n",
            "pub fn bf(planet1: &String, planet2: &String) -> Vec<String> {\n    let names = vec![\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if !names.contains(&planet1.as_str()) || !names.contains(&planet2.as_str()) {\n        return vec![];\n    }\n    let l = names.iter().position(|&name| name == planet1).unwrap();\n    let r = names.iter().position(|&name| name == planet2).unwrap();\n    if l > r {\n        return bf(planet2, planet1);\n    }\n    if l == r {\n        return vec![];\n    }\n    names[l + 1..r].to_vec()\n}\n",
            "pub fn sorted_list_sum(lst: &Vec<String>) -> Vec<String> {\n    let mut result: Vec<String> = lst.iter()\n                                      .filter(|&&s| s.len() % 2 == 0)\n                                      .cloned()\n                                      .collect();\n    \n    result.sort_by_key(|s| (s.len(), s.clone()));\n    \n    result\n}\n",
            "pub fn x_or_y(n: i32, x: i32, y: i32) -> i32 {\n    if n < 2 {\n        return y;\n    }\n    for i in 2..=((n as f64).sqrt() as i32) {\n        if n % i == 0 {\n            return y;\n        }\n    }\n    x\n}\n",
            "pub fn double_the_difference(lst: &Vec<f64>) -> i32 {\n    let mut result = 0;\n    for &n in lst.iter() {\n        if n >= 0.0 && n.fract() == 0.5 {\n            result += (n * n) as i32;\n        }\n    }\n    result\n}\n",
            "pub fn compare(game: &Vec<i32>, guess: &Vec<i32>) -> Vec<i32> {\n    let mut result = Vec::new();\n    for i in 0..game.len() {\n        result.push((game[i] - guess[i]).abs());\n    }\n    result\n}\n",
            "pub fn strongest_extension(class_name: &String, extensions: &Vec<String>) -> String {\n    let mut max_s = -1;\n    let mut max_ext = \"\";\n\n    for ext in extensions {\n        let mut upper = 0;\n        let mut lower = 0;\n\n        for c in ext.chars() {\n            if c.is_uppercase() {\n                upper += 1;\n            }\n            if c.is_lowercase() {\n                lower += 1;\n            }\n        }\n\n        let s = upper - lower;\n\n        if s > max_s {\n            max_s = s;\n            max_ext = ext;\n        }\n    }\n\n    format!(\"{}.{}\", class_name, max_ext)\n}\n",
            "pub fn cycpattern_check(a: &String, b: &String) -> bool {\n    if a.len() < b.len() {\n        return false;\n    }\n    for i in 0..b.len() {\n        let rotated = [&b[i..], &b[..i]].concat();\n        if a.contains(&rotated) {\n            return true;\n        }\n    }\n    false\n}\n",
            "pub fn even_odd_count(num: i32) -> Vec<i32> {\n    let ds = num.abs().to_string();\n    let mut even = 0;\n    for d in ds.chars() {\n        if (d.to_digit(10).unwrap() % 2 == 0) {\n            even += 1;\n        }\n    }\n    vec![even, ds.len() as i32 - even]\n}\n",
            "pub fn int_to_mini_roman(mut num: i32) -> String {\n    let values = vec![1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    let numerals = vec![\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    let mut res = String::new();\n    for i in 0..values.len() {\n        while num >= values[i] {\n            res.push_str(numerals[i]);\n            num -= values[i];\n        }\n    }\n    res\n}\n",
            "pub fn right_angle_triangle(a: i32, b: i32, c: i32) -> bool {\n    let mut s = [a, b, c];\n    s.sort();\n    s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n}\n",
            "pub fn find_max(words: &Vec<String>) -> String {\n    let mut max_cnt = 0;\n    let mut max_w = String::new();\n    for w in words {\n        let unique_chars: std::collections::HashSet<char> = w.chars().collect();\n        let cnt = unique_chars.len();\n        if cnt > max_cnt {\n            max_cnt = cnt;\n            max_w = w.clone();\n        } else if cnt == max_cnt {\n            if w < &max_w {\n                max_w = w.clone();\n            }\n        }\n    }\n    max_w\n}\n",
            "pub fn eat(num: i32, need: i32, remaining: i32) -> Vec<i32> {\n    if need <= remaining {\n        vec![num + need, remaining - need]\n    } else {\n        vec![num + remaining, 0]\n    }\n}\n",
            "pub fn do_algebra(operators: &Vec<String>, operands: &Vec<i32>) -> i32 {\n    let mut ops = operators.clone();\n    let mut nums = operands.clone();\n    let mut i = ops.len() as isize - 1;\n    while i >= 0 {\n        if ops[i as usize] == \"**\" {\n            nums[i as usize] = (nums[i as usize] as f64).powi(nums[(i + 1) as usize]) as i32;\n            nums.remove((i + 1) as usize);\n            ops.remove(i as usize);\n        }\n        i -= 1;\n    }\n    i = 0;\n    while (i as usize) < ops.len() {\n        if ops[i as usize] == \"*\" {\n            nums[i as usize] *= nums[(i + 1) as usize];\n            nums.remove((i + 1) as usize);\n            ops.remove(i as usize);\n            i -= 1;\n        } else if ops[i as usize] == \"//\" {\n            nums[i as usize] /= nums[(i + 1) as usize]; // Integer division in Rust\n            nums.remove((i + 1) as usize);\n            ops.remove(i as usize);\n            i -= 1;\n        }\n        i += 1;\n    }\n    i = 0;\n    while (i as usize) < ops.len() {\n        if ops[i as usize] == \"+\" {\n            nums[i as usize] += nums[(i + 1) as usize];\n            nums.remove((i + 1) as usize);\n            ops.remove(i as usize);\n        } else if ops[i as usize] == \"-\" {\n            nums[i as usize] -= nums[(i + 1) as usize];\n            nums.remove((i + 1) as usize);\n            ops.remove(i as usize);\n        }\n        i += 1;\n    }\n    nums[0]\n}\n",
            "fn solve(s: &String) -> String {\n    if !s.chars().any(|c| c.is_alphabetic()) {\n        return s.chars().rev().collect();\n    }\n    let mut result = String::new();\n    for ch in s.chars() {\n        if !ch.is_alphabetic() {\n            result.push(ch);\n        } else if ch.is_uppercase() {\n            result.push(ch.to_ascii_lowercase());\n        } else if ch.is_lowercase() {\n            result.push(ch.to_ascii_uppercase());\n        }\n    }\n    result\n}\n",
            "pub fn string_to_md5(txt: &String) -> Option<String> {\n    if txt.is_empty() {\n        return None;\n    }\n    let mut digest = [0u8; 16];\n    unsafe {\n        openssl::hash::MessageDigest::md5().expect(\"MD5 not available\");\n        openssl::hash::Hasher::new(openssl::hash::MessageDigest::md5()).expect(\"Hasher creation failed\")\n            .update(txt.as_bytes())\n            .finalize(&mut digest)\n            .expect(\"Finalize failed\");\n    }\n    let mut md_string = String::with_capacity(32);\n    for &byte in &digest {\n        md_string.push_str(format!(\"{:02x}\", byte).as_str());\n    }\n    Some(md_string)\n}\n",
            "pub fn generate_integers(a: i32, b: i32) -> Vec<i32> {\n    let lower = std::cmp::max(2, std::cmp::min(a, b));\n    let upper = std::cmp::min(8, std::cmp::max(a, b));\n    let mut result = Vec::new();\n    for i in lower..=upper {\n        if i % 2 == 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n"
        ],
        "php": [
            "/**\n * @param {array<float>} $numbers\n * @param {float} $threshold\n * @returns {bool}\n */\nfunction hasCloseElements ($numbers, $threshold) {\n    for ($i = 0; $i < count($numbers); ++$i) {\n        for ($j = $i + 1; $j < count($numbers); ++$j) {\n            if (abs($numbers[$i] - $numbers[$j]) < $threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param {string} $parenString\n * @returns {array<string>}\n */\nfunction separateParenGroups ($parenString) {\n    $groups = [];\n    $stk = [];\n    $current_group = \"\";\n    for ($i = 0; $i < strlen($parenString); $i++) {\n        $ch = $parenString[$i];\n        if ($ch == '(') {\n            array_push($stk, $ch);\n            $current_group .= $ch;\n        } else if ($ch == ')') {\n            array_pop($stk);\n            $current_group .= $ch;\n            if (empty($stk)) {\n                array_push($groups, $current_group);\n                $current_group = \"\";\n            }\n        }\n    }\n    return $groups;\n}\n",
            "/**\n * @param {float} $num\n * @returns {float}\n */\nfunction truncateNumber($num) {\n    return $num - floor($num);\n}\n",
            "/**\n * @param {array<int>} $operations\n * @returns {bool}\n */\nfunction belowZero ($operations) {\n    $balance = 0;\n    foreach ($operations as $op) {\n        $balance += $op;\n        if ($balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param {array<float>} $numbers\n * @returns {float}\n */\nfunction meanAbsoluteDeviation ($numbers) {\n    $sum = 0.0;\n    foreach ($numbers as $num) {\n        $sum += $num;\n    }\n    $mean = $sum / count($numbers);\n    $deviation = 0.0;\n    foreach ($numbers as $num) {\n        $deviation += abs($num - $mean);\n    }\n    return $deviation / count($numbers);\n}\n",
            "/**\n * @param {array<int>} $numbers\n * @param {int} $delimiter\n * @returns {array<int>}\n */\nfunction intersperse($numbers, $delimiter) {\n    $result = [];\n    for ($i = 0; $i < count($numbers); ++$i) {\n        if ($i != 0) {\n            $result[] = $delimiter;\n        }\n        $result[] = $numbers[$i];\n    }\n    return $result;\n}\n",
            "/**\n * @param {string} $parenString\n * @returns {array<int>}\n */\nfunction parseNestedParens($parenString) {\n    $result = [];\n    $parenGroups = explode(' ', $parenString);\n    foreach ($parenGroups as $group) {\n        $maxDepth = 0;\n        $depth = 0;\n        for ($i = 0; $i < strlen($group); $i++) {\n            $ch = $group[$i];\n            if ($ch === \"(\") {\n                $depth += 1;\n                $maxDepth = max($maxDepth, $depth);\n            } elseif ($ch === \")\") {\n                $depth -= 1;\n            }\n        }\n        array_push($result, $maxDepth);\n    }\n    return $result;\n}\n",
            "/**\n * @param {array<string>} $strs\n * @param {string} $substring\n * @returns {array<string>}\n */\nfunction filterBySubstring($strs, $substring) {\n    $result = [];\n    foreach ($strs as $s) {\n        if (strpos($s, $substring) !== false) {\n            $result[] = $s;\n        }\n    }\n    return $result;\n}\n",
            "function sumProduct ($numbers) {\n    $n_sum = array_sum($numbers);\n    $n_product = array_product($numbers);\n    return [$n_sum, $n_product];\n}\n",
            "/**\n * @param {array<int>} $numbers\n * @returns {array<int>}\n */\nfunction rollingMax ($numbers) {\n    $max_so_far = PHP_INT_MIN;\n    $result = [];\n    foreach ($numbers as $num) {\n        $max_so_far = max($max_so_far, $num);\n        $result[] = $max_so_far;\n    }\n    return $result;\n}\n",
            "/**\n * @param {string} $s\n * @returns {string}\n */\nfunction makePalindrome($s) {\n    if ($s === strrev($s)) {\n        return $s;\n    }\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (substr($s, $i) === strrev(substr($s, $i))) {\n            return $s . strrev(substr($s, 0, $i));\n        }\n    }\n    return \"\";\n}\n",
            "/**\n * @param {string} $a\n * @param {string} $b\n * @returns {string}\n */\nfunction stringXor($a, $b) {\n    $result = '';\n    for ($i = 0; $i < strlen($a); ++$i) {\n        $result .= ($a[$i] === $b[$i]) ? '0' : '1';\n    }\n    return $result;\n}\n",
            "/**\n * @param {array<string>} $strs\n * @returns {string | null}\n */\nfunction longest ($strs) {\n    if (empty($strs)) {\n        return null;\n    }\n    $longest_s = $strs[0];\n    foreach ($strs as $s) {\n        if (strlen($s) > strlen($longest_s)) {\n            $longest_s = $s;\n        }\n    }\n    return $longest_s;\n}\n",
            "/**\n * @param {int} $a\n * @param {int} $b\n * @returns {int}\n */\nfunction greatestCommonDivisor ($a, $b) {\n    if ($b == 0) {\n        return $a;\n    } else {\n        return greatestCommonDivisor($b, $a % $b);\n    }\n}\n",
            "function allPrefixes($s) {\n    $prefixes = [];\n    for ($i = 0; $i < strlen($s); ++$i) {\n        $prefixes[] = substr($s, 0, $i + 1);\n    }\n    return $prefixes;\n}\n",
            "/**\n * @param {int} $n\n * @returns {string}\n */\nfunction stringSequence($n) {\n    $result = '';\n    for ($i = 0; $i <= $n; ++$i) {\n        $result .= $i;\n        if ($i < $n) {\n            $result .= ' ';\n        }\n    }\n    return $result;\n}\n",
            "/**\n * @param {string} $s\n * @returns {int}\n */\nfunction countDistinctCharacters ($s) {\n    $uniqueChars = [];\n    for ($i = 0; $i < strlen($s); $i++) {\n        $char = strtolower($s[$i]);\n        if (!in_array($char, $uniqueChars)) {\n            $uniqueChars[] = $char;\n        }\n    }\n    return count($uniqueChars);\n}\n",
            "/**\n * @param {string} $musicString\n * @returns {array<int>}\n */\nfunction parseMusic ($musicString) {\n    $durations = [\n        \"o\" => 4,\n        \"o|\" => 2,\n        \".|\" => 1\n    ];\n    $result = [];\n    $start = 0;\n    \n    while (($end = strpos($musicString, ' ', $start)) !== false) {\n        $note = substr($musicString, $start, $end - $start);\n        if (array_key_exists($note, $durations)) {\n            $result[] = $durations[$note];\n        }\n        $start = $end + 1;\n    }\n    \n    // Add the last note\n    $last_note = substr($musicString, $start);\n    if (array_key_exists($last_note, $durations)) {\n        $result[] = $durations[$last_note];\n    }\n    \n    return $result;\n}\n",
            "/**\n * @param {string} $s\n * @param {string} $substring\n * @returns {int}\n */\nfunction howManyTimes ($s, $substring) {\n    $times = 0;\n    for ($i = 0; $i <= strlen($s) - strlen($substring); $i++) {\n        if (substr($s, $i, strlen($substring)) == $substring) {\n            $times++;\n        }\n    }\n    return $times;\n}\n",
            "/**\n * @param {string} $numbers\n * @returns {string}\n */\nfunction sortNumbers($numbers) {\n    $num_dict = [\n        \"zero\" => 0,\n        \"one\" => 1,\n        \"two\" => 2,\n        \"three\" => 3,\n        \"four\" => 4,\n        \"five\" => 5,\n        \"six\" => 6,\n        \"seven\" => 7,\n        \"eight\" => 8,\n        \"nine\" => 9\n    ];\n\n    $ss = explode(\" \", $numbers);\n    $num_list = array_filter($ss, function($word) use ($num_dict) {\n        return array_key_exists($word, $num_dict);\n    });\n\n    usort($num_list, function($a, $b) use ($num_dict) {\n        return $num_dict[$a] - $num_dict[$b];\n    });\n\n    return implode(\" \", $num_list);\n}\n",
            "/**\n * @param {array<float>} $numbers\n * @returns {array<float>}\n */\nfunction findClosestElements($numbers) {\n    if (count($numbers) < 2) {\n        return [];\n    }\n    \n    sort($numbers);\n    \n    $min_diff = PHP_FLOAT_MAX;\n    $closest_pair = [];\n    \n    for ($i = 1; $i < count($numbers); ++$i) {\n        $diff = $numbers[$i] - $numbers[$i - 1];\n        if ($diff < $min_diff) {\n            $min_diff = $diff;\n            $closest_pair = [$numbers[$i - 1], $numbers[$i]];\n        }\n    }\n    \n    return $closest_pair;\n}\n",
            "/**\n * @param {array<float>} $numbers\n * @returns {array<float>}\n */\nfunction rescaleToUnit($numbers) {\n    $min_num = min($numbers);\n    $max_num = max($numbers);\n    if ($min_num == $max_num) {\n        return array_fill(0, count($numbers), 0.0);\n    } else {\n        $rescaled = array_map(function($num) use ($min_num, $max_num) {\n            return ($num - $min_num) / ($max_num - $min_num);\n        }, $numbers);\n        return $rescaled;\n    }\n}\n",
            "/**\n * @param {array<mixed>} $values\n * @returns {array<int>}\n */\nfunction filterIntegers($values) {\n    $result = [];\n    foreach ($values as $value) {\n        if (is_int($value)) {\n            $result[] = $value;\n        }\n    }\n    return $result;\n}\n",
            "/**\n * @param string $s\n * @return int\n */\nfunction strLength ($s) {\n    return strlen($s);\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction largestDivisor ($n) {\n    for ($i = 2; $i < $n; ++$i) {\n        if ($n % $i == 0) {\n            return $n / $i;\n        }\n    }\n    return 1;\n}\n",
            "/**\n * @param {int} $n\n * @returns {array<int>}\n */\nfunction factorize ($n) {\n    $factors = array();\n    $divisor = 2;\n    while ($divisor <= $n) {\n        if ($n % $divisor == 0) {\n            array_push($factors, $divisor);\n            $n /= $divisor;\n        } else {\n            $divisor += 1;\n        }\n    }\n    return $factors;\n}\n",
            "function removeDuplicates ($numbers) {\n    $counts = [];\n    foreach ($numbers as $num) {\n        if (isset($counts[$num])) {\n            $counts[$num]++;\n        } else {\n            $counts[$num] = 1;\n        }\n    }\n    $res = [];\n    foreach ($numbers as $num) {\n        if ($counts[$num] == 1) {\n            $res[] = $num;\n        }\n    }\n    return $res;\n}\n",
            "/**\n * @param {string} $s\n * @returns {string}\n */\nfunction flipCase ($s) {\n    $flipped = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        $ch = $s[$i];\n        if (!ctype_alpha($ch)) {\n            $flipped .= $ch;\n        } else if (ctype_lower($ch)) {\n            $flipped .= strtoupper($ch);\n        } else if (ctype_upper($ch)) {\n            $flipped .= strtolower($ch);\n        }\n    }\n    return $flipped;\n}\n",
            "/**\n * @param {array<string>} $strs\n * @returns {string}\n */\nfunction concatenate($strs) {\n    $result = \"\";\n    foreach ($strs as $str) {\n        $result .= $str;\n    }\n    return $result;\n}\n",
            "/**\n * @param {array<string>} $strs\n * @param {string} $prefixStr\n * @returns {array<string>}\n */\nfunction filterByPrefix ($strs, $prefixStr) {\n    $result = [];\n    foreach ($strs as $s) {\n        if (substr($s, 0, strlen($prefixStr)) === $prefixStr) {\n            $result[] = $s;\n        }\n    }\n    return $result;\n}\n",
            "/**\n * @param {array<int>} $l\n * @returns {array<int>}\n */\nfunction getPositive ($l) {\n    $result = [];\n    foreach ($l as $num) {\n        if ($num > 0) {\n            $result[] = $num;\n        }\n    }\n    return $result;\n}\n",
            "/**\n * @param {int} $n\n * @returns {bool}\n */\nfunction isPrime ($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= sqrt($n); ++$i) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "/**\n * @param {array<int>} $xs\n * @param {float} $x\n * @returns {float}\n */\nfunction poly($xs, $x) {\n    $res = 0.0;\n    for ($i = 0; $i < count($xs); ++$i) {\n        $res += $xs[$i] * pow($x, $i);\n    }\n    return $res;\n}\n\n/**\n * @param {array<int>} $xs\n * @returns {float}\n */\nfunction findZero($xs) {\n    $x1 = 1.0;\n    $x2 = -1.0;\n    while (poly($xs, $x1) * poly($xs, $x2) > 0) {\n        $x1 *= 2;\n        $x2 *= 2;\n    }\n    while (abs($x1 - $x2) > 1e-10) {\n        $mid = ($x1 + $x2) / 2;\n        if (poly($xs, $mid) == 0) {\n            return $mid;\n        } elseif (poly($xs, $mid) * poly($xs, $x1) < 0) {\n            $x2 = $mid;\n        } else {\n            $x1 = $mid;\n        }\n    }\n    return ($x1 + $x2) / 2;\n}\n",
            "/**\n * @param {array<int>} $l\n * @returns {array<int>}\n */\nfunction sortThird($l) {\n    $sorted_third = [];\n    for ($i = 0; $i < count($l); $i += 3) {\n        $sorted_third[] = $l[$i];\n    }\n    sort($sorted_third);\n\n    $result = [];\n    $j = 0;\n    for ($i = 0; $i < count($l); ++$i) {\n        if ($i % 3 == 0) {\n            $result[] = $sorted_third[$j++];\n        } else {\n            $result[] = $l[$i];\n        }\n    }\n    return $result;\n}\n",
            "/**\n * @param {array<int>} $l\n * @returns {array<int>}\n */\nfunction listUnique($l) {\n    $uniqueElements = array_unique($l);\n    sort($uniqueElements);\n    return $uniqueElements;\n}\n",
            "/**\n * @param {array<int>} $l\n * @returns {int}\n */\nfunction maxElement($l) {\n    if (empty($l)) {\n        return 0;\n    }\n    return max($l);\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction fizzBuzz($n) {\n    $cnt = 0;\n    for ($i = 0; $i < $n; ++$i) {\n        if ($i % 11 == 0 || $i % 13 == 0) {\n            $str_i = strval($i);\n            $cnt += substr_count($str_i, '7');\n        }\n    }\n    return $cnt;\n}\n",
            "/**\n * @param {array<int>} $l\n * @returns {array<int>}\n */\nfunction sortEven($l) {\n    $even_elements = [];\n    for ($i = 0; $i < count($l); $i += 2) {\n        $even_elements[] = $l[$i];\n    }\n    sort($even_elements);\n\n    $result = [];\n    $even_index = 0;\n    for ($i = 0; $i < count($l); ++$i) {\n        if ($i % 2 == 0) {\n            $result[] = $even_elements[$even_index++];\n        } else {\n            $result[] = $l[$i];\n        }\n    }\n    return $result;\n}\n",
            "/**\n * @param {string} $s\n * @returns {string}\n */\nfunction encodeCyclic ($s) {\n    $result = '';\n    for ($i = 0; $i < strlen($s); $i += 3) {\n        if ($i + 3 > strlen($s)) {\n            $result .= substr($s, $i);\n        } else {\n            $result .= substr($s, $i + 1, 2) . $s[$i];\n        }\n    }\n    return $result;\n}\n\n/**\n * @param {string} $s\n * @returns {string}\n */\nfunction decodeCyclic ($s) {\n    return encodeCyclic(encodeCyclic($s));\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction primeFib($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= floor(sqrt($n)); $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction primeFibCount($n) {\n    $f = [0, 1];\n    $cnt = 0;\n    while ($cnt < $n) {\n        $f = [$f[1], $f[0] + $f[1]];\n        if (primeFib($f[1])) {\n            $cnt++;\n        }\n    }\n    return $f[1];\n}\n",
            "/**\n * @param {array<int>} $l\n * @returns {bool}\n */\nfunction triplesSumToZero ($l) {\n    for ($i = 0; $i < count($l); ++$i) {\n        for ($j = $i + 1; $j < count($l); ++$j) {\n            for ($k = $j + 1; $k < count($l); ++$k) {\n                if ($l[$i] + $l[$j] + $l[$k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction carRaceCollision($n) {\n    return $n * $n;\n}\n",
            "function incrList ($l) {\n    $result = array();\n    foreach ($l as $i) {\n        $result[] = $i + 1;\n    }\n    return $result;\n}\n",
            "/**\n * @param {array<int>} $l\n * @returns {bool}\n */\nfunction pairsSumToZero ($l) {\n    $seen = [];\n    foreach ($l as $num) {\n        if (isset($seen[-$num])) {\n            return true;\n        }\n        $seen[$num] = true;\n    }\n    return false;\n}\n",
            "/**\n * @param {int} $x\n * @param {int} $bas\n * @returns {string}\n */\nfunction changeBase ($x, $bas) {\n    if ($x == 0) {\n        return \"0\";\n    }\n    $digits = \"\";\n    while ($x > 0) {\n        $digits .= strval($x % $bas);\n        $x /= $bas;\n    }\n    $digits = strrev($digits);\n    return $digits;\n}\n",
            "function triangleArea($a, $h) {\n    return ($a * $h) / 2.0;\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction fib4 ($n) {\n    $fib = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; ++$i) {\n        $fib[$i % 4] = $fib[0] + $fib[1] + $fib[2] + $fib[3];\n    }\n    return $fib[$n % 4];\n}\n",
            "/**\n * @param {array<float>} $l\n * @returns {float}\n */\nfunction median ($l) {\n    sort($l);\n    if (count($l) % 2 != 0) {\n        return $l[floor(count($l) / 2)];\n    } else {\n        return ($l[count($l) / 2] + $l[count($l) / 2 - 1]) / 2.0;\n    }\n}\n",
            "/**\n * @param {string} $txt\n * @returns {bool}\n */\nfunction isPalindrome ($txt) {\n    return $txt === strrev($txt);\n}\n",
            "/**\n * @param {int} $n\n * @param {int} $p\n * @returns {int}\n */\nfunction modp($n, $p) {\n    $ret = 1;\n    for ($i = 0; $i < $n; ++$i) {\n        $ret = ($ret * 2) % $p;\n    }\n    return $ret;\n}\n",
            "/**\n * @param {string} $s\n * @returns {string}\n */\nfunction encodeShift($s) {\n    $result = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        $ch = $s[$i];\n        $result .= chr((ord($ch) - ord('a') + 5) % 26 + ord('a'));\n    }\n    return $result;\n}\n\n/**\n * @param {string} $s\n * @returns {string}\n */\nfunction decodeShift($s) {\n    $result = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        $ch = $s[$i];\n        $result .= chr((ord($ch) - ord('a') + 21) % 26 + ord('a'));\n    }\n    return $result;\n}\n",
            "/**\n * @param {string} $txt\n * @returns {string}\n */\nfunction removeVowels($txt) {\n    $vowels = \"aeiouAEIOU\";\n    $result = '';\n    for ($i = 0; $i < strlen($txt); $i++) {\n        if (strpos($vowels, $txt[$i]) === false) {\n            $result .= $txt[$i];\n        }\n    }\n    return $result;\n}\n",
            "/**\n * @param {array<int>} $l\n * @param {int} $t\n * @returns {bool}\n */\nfunction belowThreshold($l, $t) {\n    foreach ($l as $x) {\n        if ($x >= $t) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "/**\n * @param {int} $x\n * @param {int} $y\n * @returns {int}\n */\nfunction add($x, $y) {\n    return $x + $y;\n}\n",
            "/**\n * @param {string} $s0\n * @param {string} $s1\n * @returns {bool}\n */\nfunction sameChars ($s0, $s1) {\n    $set0 = array_unique(str_split($s0));\n    $set1 = array_unique(str_split($s1));\n    sort($set0);\n    sort($set1);\n    return $set0 === $set1;\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction fib ($n) {\n    if ($n <= 1) {\n        return $n;\n    } else {\n        return fib($n - 1) + fib($n - 2);\n    }\n}\n",
            "/**\n * @param {string} $brackets\n * @returns {bool}\n */\nfunction correctBracketing ($brackets) {\n    $depth = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        $b = $brackets[$i];\n        if ($b == '<') {\n            $depth += 1;\n        } else if ($b == '>') {\n            $depth -= 1;\n        }\n        if ($depth < 0) {\n            return false;\n        }\n    }\n    return $depth == 0;\n}\n",
            "/**\n * @param {array<int>} $l\n * @returns {bool}\n */\nfunction monotonic ($l) {\n    $diff = [];\n    for ($i = 1; $i < count($l); ++$i) {\n        $diff[] = $l[$i] - $l[$i - 1];\n    }\n    return array_reduce($diff, function ($carry, $item) { return $carry && $item <= 0; }, true) ||\n           array_reduce($diff, function ($carry, $item) { return $carry && $item >= 0; }, true);\n}\n",
            "/**\n * @param {array<int>} $l1\n * @param {array<int>} $l2\n * @returns {array<int>}\n */\nfunction common ($l1, $l2) {\n    $s1 = array_unique($l1);\n    $s2 = array_unique($l2);\n    sort($s1);\n    sort($s2);\n    $result = [];\n    $i = 0;\n    $j = 0;\n    while ($i < count($s1) && $j < count($s2)) {\n        if ($s1[$i] == $s2[$j]) {\n            $result[] = $s1[$i];\n            $i++;\n            $j++;\n        } elseif ($s1[$i] < $s2[$j]) {\n            $i++;\n        } else {\n            $j++;\n        }\n    }\n    return $result;\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction largestPrimeFactor ($n) {\n    $i = 2;\n    while ($i * $i <= $n) {\n        if ($n % $i) {\n            $i += 1;\n        } else {\n            $n /= $i;\n        }\n    }\n    return $n;\n}\n",
            "function sumToN ($n) {\n    return (int)((($n * ($n + 1)) / 2));\n}\n",
            "/**\n * @param {string} $brackets\n * @returns {bool}\n */\nfunction correctBracketing ($brackets) {\n    $depth = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] == '(') {\n            $depth += 1;\n        } else if ($brackets[$i] == ')') {\n            $depth -= 1;\n        }\n        if ($depth < 0) {\n            return false;\n        }\n    }\n    return $depth == 0;\n}\n",
            "/**\n * @param {array<int>} $xs\n * @returns {array<int>}\n */\nfunction derivative ($xs) {\n    $result = [];\n    for ($i = 1; $i < count($xs); ++$i) {\n        $result[] = $xs[$i] * $i;\n    }\n    return $result;\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction fibfib($n) {\n    if ($n <= 1) {\n        return 0;\n    }\n    $a = 0;\n    $b = 0;\n    $c = 1;\n    while ($n > 2) {\n        $a = $b;\n        $b = $c;\n        $c = $a + $b + $c;\n        $n--;\n    }\n    return $c;\n}\n",
            "function vowelsCount ($s) {\n    $vowels = \"aeiou\";\n    $cnt = 0;\n    for ($i = 0; $i < strlen($s); ++$i) {\n        if (strpos($vowels, strtolower($s[$i])) !== false || ($i == strlen($s) - 1 && strtolower($s[$i]) == 'y')) {\n            ++$cnt;\n        }\n    }\n    return $cnt;\n}\n",
            "/**\n * @param {int} $x\n * @param {int} $shift\n * @returns {string}\n */\nfunction circularShift ($x, $shift) {\n    $x_str = strval($x);\n    if ($shift > strlen($x_str)) {\n        return strrev($x_str);\n    } else {\n        return substr($x_str, -$shift) . substr($x_str, 0, -$shift);\n    }\n}\n",
            "/**\n * @param {string} $s\n * @returns {int}\n */\nfunction digitSum($s) {\n    $sum = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        $c = $s[$i];\n        if (ctype_upper($c)) {\n            $sum += ord($c);\n        }\n    }\n    return $sum;\n}\n",
            "/**\n * @param {string} $s\n * @param {int} $n\n * @returns {int}\n */\nfunction fruitDistribution ($s, $n) {\n    $words = explode(' ', $s);\n    $apples = (int)$words[array_search(\"apples\", $words) - 1];\n    $oranges = (int)$words[array_search(\"oranges\", $words) - 1];\n    return $n - $apples - $oranges;\n}\n",
            "/**\n * @param {array<int>} $arr\n * @returns {array<int>}\n */\nfunction pluck ($arr) {\n    $evens = array();\n    foreach ($arr as $n) {\n        if ($n % 2 == 0) {\n            $evens[] = $n;\n        }\n    }\n    if (empty($evens)) {\n        return array();\n    }\n    $min_even = min($evens);\n    $index = array_search($min_even, $arr);\n    return array($min_even, $index);\n}\n",
            "/**\n * @param {array<int>} $lst\n * @returns {int}\n */\nfunction search ($lst) {\n    $freqs = array();\n    foreach ($lst as $n) {\n        if (isset($freqs[$n])) {\n            $freqs[$n]++;\n        } else {\n            $freqs[$n] = 1;\n        }\n    }\n    $good_vals = array();\n    foreach ($freqs as $key => $value) {\n        if ($value >= $key) {\n            $good_vals[] = $key;\n        }\n    }\n    return !empty($good_vals) ? max($good_vals) : -1;\n}\n",
            "/**\n * @param {array<int>} $lst\n * @returns {array<int>}\n */\nfunction strangeSortList($lst) {\n    $sl = $lst;\n    sort($sl);\n    $result = [];\n    $left = 0;\n    $right = count($sl) - 1;\n    while ($left <= $right) {\n        $result[] = $sl[$left];\n        $left += 1;\n        if ($left <= $right) {\n            $result[] = $sl[$right];\n            $right -= 1;\n        }\n    }\n    return $result;\n}\n",
            "/**\n * @param {int} $a\n * @param {int} $b\n * @param {int} $c\n * @returns {float}\n */\nfunction triangleArea($a, $b, $c) {\n    if ($a + $b > $c && $a + $c > $b && $b + $c > $a) {\n        $s = ($a + $b + $c) / 2.0;\n        return sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "/**\n * @param {array<int>} $q\n * @param {int} $w\n * @returns {bool}\n */\nfunction willItFly ($q, $w) {\n    if (empty($q)) {\n        return false;\n    }\n    $is_palin = true;\n    for ($i = 0; $i < count($q) / 2; ++$i) {\n        if ($q[$i] != $q[count($q) - $i - 1]) {\n            $is_palin = false;\n            break;\n        }\n    }\n    $total = array_sum($q);\n    return $is_palin && $total <= $w;\n}",
            "/**\n * @param {array<int>} $arr\n * @returns {int}\n */\nfunction smallestChange ($arr) {\n    $ans = 0;\n    for ($i = 0; $i < count($arr) / 2; ++$i) {\n        if ($arr[$i] != $arr[count($arr) - $i - 1]) {\n            ++$ans;\n        }\n    }\n    return $ans;\n}\n",
            "/**\n * @param {array<string>} $lst1\n * @param {array<string>} $lst2\n * @returns {array<string>}\n */\nfunction totalMatch ($lst1, $lst2) {\n    $cnt1 = 0;\n    $cnt2 = 0;\n    \n    foreach ($lst1 as $s) {\n        $cnt1 += strlen($s);\n    }\n    \n    foreach ($lst2 as $s) {\n        $cnt2 += strlen($s);\n    }\n    \n    return $cnt1 <= $cnt2 ? $lst1 : $lst2;\n}\n",
            "/**\n * @param {int} $a\n * @returns {bool}\n */\nfunction isMultiplyPrime ($a) {\n    if ($a < 2) return false;\n\n    function is_prime($n) {\n        if ($n < 2) return false;\n        for ($i = 2; $i <= floor(sqrt($n)); ++$i) {\n            if ($n % $i == 0) return false;\n        }\n        return true;\n    }\n\n    $cnt = 0;\n    for ($i = 2; $i <= $a; ++$i) {\n        if (is_prime($i)) {\n            while ($a % $i == 0) {\n                ++$cnt;\n                $a /= $i;\n            }\n        }\n    }\n    return $cnt == 3;\n}\n",
            "/**\n * @param {int} $x\n * @param {int} $n\n * @returns {bool}\n */\nfunction isSimplePower ($x, $n) {\n    if ($n < 2) {\n        return $x == $n;\n    }\n    $tmp = 1;\n    while ($tmp < $x) {\n        $tmp *= $n;\n    }\n    return $tmp == $x;\n}\n",
            "/**\n * @param {int} $a\n * @returns {bool}\n */\nfunction isCube ($a) {\n    $a = abs($a);\n    $root = (int)(round(pow($a, 1.0 / 3.0)));\n    return $root * $root * $root == $a;\n}\n",
            "/**\n * @param {string} $num\n * @returns {int}\n */\nfunction hexKey($num) {\n    $count = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n        $x = $num[$i];\n        if ($x == '2' || $x == '3' || $x == '5' || $x == '7' || $x == 'B' || $x == 'D') {\n            $count++;\n        }\n    }\n    return $count;\n}\n",
            "/**\n * @param {int} $dec\n * @returns {string}\n */\nfunction decimalToBinary ($dec) {\n    $binary = decbin($dec);\n    return \"db\" . $binary . \"db\";\n}\n",
            "/**\n * @param {string} $s\n * @returns {bool}\n */\nfunction isHappy ($s) {\n    if (strlen($s) < 3) {\n        return false;\n    }\n    for ($i = 0; $i < strlen($s) - 2; ++$i) {\n        if ($s[$i] == $s[$i + 1] || $s[$i] == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "/**\n * @param {array<float>} $grades\n * @returns {array<string>}\n */\nfunction numericalLetterGrade($grades) {\n    $result = array();\n    foreach ($grades as $g) {\n        if ($g == 4.0) {\n            $result[] = \"A+\";\n        } else if ($g > 3.7) {\n            $result[] = \"A\";\n        } else if ($g > 3.3) {\n            $result[] = \"A-\";\n        } else if ($g > 3.0) {\n            $result[] = \"B+\";\n        } else if ($g > 2.7) {\n            $result[] = \"B\";\n        } else if ($g > 2.3) {\n            $result[] = \"B-\";\n        } else if ($g > 2.0) {\n            $result[] = \"C+\";\n        } else if ($g > 1.7) {\n            $result[] = \"C\";\n        } else if ($g > 1.3) {\n            $result[] = \"C-\";\n        } else if ($g > 1.0) {\n            $result[] = \"D+\";\n        } else if ($g > 0.7) {\n            $result[] = \"D\";\n        } else if ($g > 0.0) {\n            $result[] = \"D-\";\n        } else {\n            $result[] = \"E\";\n        }\n    }\n    return $result;\n}\n",
            "/**\n * @param {string} $s\n * @returns {bool}\n */\nfunction primeLength($s) {\n    $length = strlen($s);\n    if ($length < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= floor(sqrt($length)); ++$i) {\n        if ($length % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction startsOneEnds ($n) {\n    if ($n == 1) {\n        return 1;\n    }\n    return 2 * 9 * (int)(pow(10, $n - 2));\n}\n",
            "/**\n * @param {int} $n\n * @returns {string}\n */\nfunction solve ($n) {\n    $digits_sum = array_sum(str_split($n));\n    return decbin($digits_sum);\n}\n",
            "function add($lst) {\n    $result = 0;\n    for ($i = 1; $i < count($lst); $i += 2) {\n        if ($lst[$i] % 2 == 0) {\n            $result += $lst[$i];\n        }\n    }\n    return $result;\n}\n",
            "/**\n * @param {string} $s\n * @returns {string}\n */\nfunction antiShuffle($s) {\n    $result = [];\n    $words = explode(' ', $s);\n    \n    foreach ($words as $word) {\n        $chars = str_split($word);\n        sort($chars);\n        $sortedWord = implode('', $chars);\n        $result[] = $sortedWord;\n    }\n    \n    return implode(' ', $result);\n}\n",
            "/**\n * @param {array<array<int>>} $lst\n * @param {int} $x\n * @returns {array<array<int>>}\n */\nfunction getRow ($lst, $x) {\n    $coords = [];\n    for ($i = 0; $i < count($lst); ++$i) {\n        for ($j = 0; $j < count($lst[$i]); ++$j) {\n            if ($lst[$i][$j] == $x) {\n                $coords[] = [$i, $j];\n            }\n        }\n    }\n    usort($coords, function($a, $b) {\n        return $a[0] <=> $b[0] ?: $b[1] <=> $a[1];\n    });\n    return $coords;\n}\n",
            "/**\n * @param {array<int>} $arr\n * @returns {array<int>}\n */\nfunction sortArray ($arr) {\n    if (empty($arr)) {\n        return [];\n    }\n    if (($arr[0] + end($arr)) % 2 == 0) {\n        $sortedArr = $arr;\n        rsort($sortedArr);\n        return $sortedArr;\n    } else {\n        $sortedArr = $arr;\n        sort($sortedArr);\n        return $sortedArr;\n    }\n}\n",
            "/**\n * @param {string} $s\n * @returns {string}\n */\nfunction encrypt($s) {\n    $result = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        $ch = $s[$i];\n        $shifted = ord($ch) + 4;\n        if ($shifted > ord('z')) {\n            $shifted -= 26;\n        }\n        $result .= chr($shifted);\n    }\n    return $result;\n}\n",
            "/**\n * @param {array<int>} $lst\n * @returns {int | null}\n */\nfunction nextSmallest($lst) {\n    $sl = array_unique($lst);\n    sort($sl);\n    if (count($sl) < 2) {\n        return null;\n    }\n    return $sl[1];\n}\n",
            "/**\n * @param {string} $s\n * @returns {int}\n */\nfunction isBored($s) {\n    $sentences = [];\n    $ss = new StringReader($s);\n    \n    while (($sentence = $ss->readUntil(['.', '!', '?'])) !== false) {\n        $sentences[] = $sentence;\n    }\n\n    $count = 0;\n    foreach ($sentences as $sentence) {\n        $trimmed_sentence = '';\n        $first_space = false;\n        for ($i = 0; $i < strlen($sentence); $i++) {\n            if (!$first_space && $sentence[$i] === ' ') {\n                continue;\n            }\n            $first_space = true;\n            $trimmed_sentence .= $sentence[$i];\n        }\n\n        if (strlen($trimmed_sentence) >= 2 && substr($trimmed_sentence, 0, 2) === \"I \") {\n            $count++;\n        }\n    }\n\n    return $count;\n}\n\nclass StringReader {\n    private $string;\n    private $position;\n\n    public function __construct($string) {\n        $this->string = $string;\n        $this->position = 0;\n    }\n\n    public function readUntil(array $delimiters) {\n        $end = false;\n        for ($i = $this->position; $i < strlen($this->string); $i++) {\n            foreach ($delimiters as $delimiter) {\n                if (substr($this->string, $i, strlen($delimiter)) === $delimiter) {\n                    $result = substr($this->string, $this->position, $i - $this->position);\n                    $this->position = $i + 1;\n                    return $result;\n                }\n            }\n        }\n        if ($this->position < strlen($this->string)) {\n            $result = substr($this->string, $this->position);\n            $this->position = strlen($this->string);\n            return $result;\n        }\n        return false;\n    }\n}\n",
            "/**\n * @param {mixed} $x\n * @param {mixed} $y\n * @param {mixed} $z\n * @returns {bool}\n */\nfunction anyInt ($x, $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if (($x + $y == $z) || ($x + $z == $y) || ($y + $z == $x)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param {string} $message\n * @returns {string}\n */\nfunction encode ($message) {\n    $vowels = \"aeiouAEIOU\";\n    $result = \"\";\n    for ($i = 0; $i < strlen($message); $i++) {\n        $ch = $message[$i];\n        if (ctype_alpha($ch)) {\n            $ch1 = ctype_lower($ch) ? strtoupper($ch) : strtolower($ch);\n            if (strpos($vowels, $ch1) !== false) {\n                $ch1 = chr(ord($ch1) + 2);\n            }\n            $result .= $ch1;\n        } else {\n            $result .= $ch;\n        }\n    }\n    return $result;\n}\n",
            "/**\n * @param {array<int>} $lst\n * @returns {int}\n */\nfunction skjkasdkd ($lst) {\n    function is_prime($n) {\n        if ($n < 2) return false;\n        for ($i = 2; $i <= floor(sqrt($n)); ++$i) {\n            if ($n % $i == 0) return false;\n        }\n        return true;\n    }\n\n    $primes = array_filter($lst, function($n) {\n        return is_prime($n);\n    });\n\n    if (empty($primes)) return 0;\n    $largest = max($primes);\n    $sum = 0;\n    while ($largest > 0) {\n        $sum += $largest % 10;\n        $largest = intdiv($largest, 10);\n    }\n    return $sum;\n}\n",
            "/**\n * @param {array<string, string>} $d\n * @returns {bool}\n */\nfunction checkDictCase($d) {\n    if (empty($d)) {\n        return false;\n    }\n    \n    $allLower = true;\n    $allUpper = true;\n    \n    foreach ($d as $key => $value) {\n        for ($i = 0; $i < strlen($key); $i++) {\n            $c = $key[$i];\n            if (!ctype_lower($c)) {\n                $allLower = false;\n            }\n            if (!ctype_upper($c)) {\n                $allUpper = false;\n            }\n        }\n        if (!$allLower && !$allUpper) {\n            return false;\n        }\n    }\n    \n    return $allLower || $allUpper;\n}\n",
            "/**\n * @param {int} $n\n * @returns {array<int>}\n */\nfunction countUpTo ($n) {\n    $primes = array();\n    for ($num = 2; $num < $n; ++$num) {\n        $isPrime = true;\n        foreach ($primes as $p) {\n            if ($num % $p == 0) {\n                $isPrime = false;\n                break;\n            }\n        }\n        if ($isPrime) {\n            array_push($primes, $num);\n        }\n    }\n    return $primes;\n}\n",
            "/**\n * @param {int} $a\n * @param {int} $b\n * @returns {int}\n */\nfunction multiply ($a, $b) {\n    return (abs($a) % 10) * (abs($b) % 10);\n}\n",
            "/**\n * @param {string} $s\n * @returns {int}\n */\nfunction countUpper($s) {\n    $vowels = \"AEIOU\";\n    $count = 0;\n    for ($i = 0; $i < strlen($s); ++$i) {\n        if ($i % 2 == 0 && strpos($vowels, $s[$i]) !== false) {\n            ++$count;\n        }\n    }\n    return $count;\n}\n",
            "/**\n * @param {string} $value\n * @returns {int}\n */\nfunction closestInteger ($value) {\n    $num = floatval($value);\n    if ($num >= 0) {\n        return intval($num + 0.5);\n    } else {\n        return intval($num - 0.5);\n    }\n}\n",
            "/**\n * @param {int} $n\n * @returns {array<int>}\n */\nfunction makeAPile ($n) {\n    $pile = array();\n    for ($i = 0; $i < $n; ++$i) {\n        $pile[] = $n + 2 * $i;\n    }\n    return $pile;\n}\n",
            "/**\n * @param {string} $s\n * @returns {array<string>}\n */\nfunction wordsString ($s) {\n    return array_filter(preg_split('/[, ]/', $s), function($w) {\n        return strlen($w) > 0;\n    });\n}\n",
            "/**\n * @param {int} $x\n * @param {int} $y\n * @returns {int}\n */\nfunction chooseNum ($x, $y) {\n    if ($x > $y) {\n        return -1;\n    }\n    if ($y % 2 == 0) {\n        return $y;\n    }\n    return $y - 1;\n}\n",
            "/**\n * @param {int} $n\n * @param {int} $m\n * @returns {string | null}\n */\nfunction roundedAvg($n, $m) {\n    if ($n > $m) {\n        return null;\n    }\n    $r_avg = intval(($m + $n) / 2.0 + 0.5);\n    return substr(decbin($r_avg), 2);\n}\n",
            "/**\n * @param {array<int>} $x\n * @returns {array<int>}\n */\nfunction uniqueDigits ($x) {\n    $all_digits_odd = function($s) {\n        for ($i = 0; $i < strlen($s); $i++) {\n            if ((int)$s[$i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    $result = [];\n    foreach ($x as $num) {\n        if ($all_digits_odd((string)$num)) {\n            array_push($result, $num);\n        }\n    }\n    sort($result);\n    return $result;\n}\n",
            "/**\n * @param array<int> $arr\n * @returns array<string>\n */\nfunction byLength($arr) {\n    $digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    $sorted_arr = [];\n    \n    foreach ($arr as $x) {\n        if ($x >= 1 && $x <= 9) {\n            $sorted_arr[] = $x;\n        }\n    }\n    \n    rsort($sorted_arr);\n    \n    $result = [];\n    foreach ($sorted_arr as $x) {\n        $result[] = $digit_names[$x - 1];\n    }\n    \n    return $result;\n}\n",
            "/**\n * @param {int} $n\n * @returns {array<int>}\n */\nfunction f ($n) {\n    $nums = array_fill(0, $n, 0);\n    for ($i = 0; $i < $n; ++$i) {\n        $nums[$i] = $i + 1;\n    }\n    \n    $result = [];\n    for ($i = 0; $i < $n; ++$i) {\n        if (($i + 1) % 2 != 0) {\n            $sum = array_sum(array_slice($nums, 0, $i + 1));\n            $result[] = $sum;\n        } else {\n            $product = array_product(array_slice($nums, 0, $i + 1));\n            $result[] = $product;\n        }\n    }\n    \n    return $result;\n}\n",
            "/**\n * @param {int} $n\n * @returns {array<int>}\n */\nfunction evenOddPalindrome ($n) {\n    $cnt = array(0, 0);\n    for ($i = 1; $i <= $n; ++$i) {\n        if (is_palindrome(strval($i))) {\n            $cnt[$i % 2] += 1;\n        }\n    }\n    return $cnt;\n}\n\nfunction is_palindrome($txt) {\n    return $txt === strrev($txt);\n}\n",
            "/**\n * @param {array<int>} $arr\n * @returns {int}\n */\nfunction countNums ($arr) {\n    function digitsSum($n) {\n        $nStr = strval($n);\n        if ($n >= 0) {\n            return array_sum(array_map('intval', str_split($nStr)));\n        } else {\n            return intval(substr($nStr, 0, 2)) * 2 + digitsSum(abs($n));\n        }\n    }\n\n    return count(array_filter($arr, function($n) use ($digitsSum) {\n        return $digitsSum($n) > 0;\n    }));\n}\n",
            "/**\n * @param {array<int>} $arr\n * @returns {bool}\n */\nfunction moveOneBall ($arr) {\n    if (empty($arr)) {\n        return true;\n    }\n    $sorted_arr = $arr;\n    sort($sorted_arr);\n    for ($i = 0; $i < count($arr); ++$i) {\n        if (array_slice($arr, $i) == array_slice($sorted_arr, 0) &&\n            array_slice($arr, 0, $i) == array_slice($sorted_arr, count($arr) - $i)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param {array<int>} $lst1\n * @param {array<int>} $lst2\n * @returns {string}\n */\nfunction canExchange ($lst1, $lst2) {\n    $odd_cnt = 0;\n    foreach ($lst1 as $num) {\n        if ($num % 2 != 0) {\n            $odd_cnt++;\n        }\n    }\n    $even_cnt = 0;\n    foreach ($lst2 as $num) {\n        if ($num % 2 == 0) {\n            $even_cnt++;\n        }\n    }\n    return ($even_cnt >= $odd_cnt) ? \"YES\" : \"NO\";\n}\n",
            "/**\n * @param {string} $test\n * @returns {array<string, int>}\n */\nfunction histogram ($test) {\n    $freq = [];\n    $words = explode(' ', $test);\n    foreach ($words as $word) {\n        if (!empty($word)) {\n            if (array_key_exists($word, $freq)) {\n                $freq[$word]++;\n            } else {\n                $freq[$word] = 1;\n            }\n        }\n    }\n    $result = [];\n    if (!empty($freq)) {\n        $max_freq = max($freq);\n        foreach ($freq as $word => $count) {\n            if ($count == $max_freq) {\n                $result[$word] = $count;\n            }\n        }\n    }\n    return $result;\n}\n",
            "function reverseDelete($s, $c) {\n    $s1 = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (strpos($c, $s[$i]) === false) {\n            $s1 .= $s[$i];\n        }\n    }\n    $isPalindrome = $s1 === strrev($s1);\n    return [$s1, $isPalindrome ? 'yes' : 'no'];\n}\n",
            "/**\n * @param {array<string>} $lst\n * @returns {array<string>}\n */\nfunction oddCount ($lst) {\n    $result = [];\n    foreach ($lst as $num) {\n        $n = 0;\n        for ($i = 0; $i < strlen($num); $i++) {\n            if (ord($num[$i]) % 2 == 1) {\n                $n++;\n            }\n        }\n        $rs = \"the number of odd elements in the string i of the input.\";\n        $result[] = str_replace(\"i\", strval($n), $rs);\n    }\n    return $result;\n}\n",
            "/**\n * @param {array<int>} $nums\n * @returns {int}\n */\nfunction minSubArraySum ($nums) {\n    $min_sum = 0;\n    $cur_sum = 0;\n    foreach ($nums as $n) {\n        $cur_sum = min($cur_sum + $n, 0);\n        $min_sum = min($cur_sum, $min_sum);\n    }\n    if ($min_sum == 0) {\n        $min_sum = min($nums);\n    }\n    return $min_sum;\n}\n",
            "function maxFill ($grid, $capacity) {\n    $total = 0;\n    foreach ($grid as $arr) {\n        $sum = array_sum($arr);\n        $total += ceil($sum / $capacity);\n    }\n    return $total;\n}\n",
            "/**\n * @param {array<int>} $arr\n * @returns {array<int>}\n */\nfunction sortArray($arr) {\n    usort($arr, function($a, $b) {\n        $countOnes = function($num) {\n            return substr_count(decbin($num), '1');\n        };\n\n        $onesA = $countOnes($a);\n        $onesB = $countOnes($b);\n\n        if ($onesA === $onesB) {\n            return $a <=> $b;\n        }\n\n        return $onesA <=> $onesB;\n    });\n\n    return $arr;\n}\n",
            "/**\n * @param {string} $s\n * @param {int} $n\n * @returns {array<string>}\n */\nfunction selectWords ($s, $n) {\n    $consonants = \"bcdfghjklmnpqrstvwxyz\";\n    $words = [];\n    $word = '';\n\n    for ($i = 0; $i < strlen($s); $i++) {\n        $c = $s[$i];\n        if (ctype_space($c)) {\n            if (!empty($word)) {\n                $words[] = $word;\n                $word = '';\n            }\n        } else {\n            $word .= $c;\n        }\n    }\n\n    if (!empty($word)) {\n        $words[] = $word;\n    }\n\n    $result = [];\n    foreach ($words as $w) {\n        $consonantCount = 0;\n        for ($i = 0; $i < strlen($w); $i++) {\n            $c = strtolower($w[$i]);\n            if (strpos($consonants, $c) !== false) {\n                $consonantCount++;\n            }\n        }\n        if ($consonantCount == $n) {\n            $result[] = $w;\n        }\n    }\n\n    return $result;\n}\n",
            "/**\n * @param {string} $word\n * @returns {string}\n */\nfunction getClosestVowel($word) {\n    $vowels = \"aeiouAEIOU\";\n    for ($i = strlen($word) - 2; $i > 0; --$i) {\n        if (strpos($vowels, $word[$i]) !== false && strpos($vowels, $word[$i - 1]) === false && strpos($vowels, $word[$i + 1]) === false) {\n            return $word[$i];\n        }\n    }\n    return \"\";\n}\n",
            "/**\n * @param {array<string>} $lst\n * @returns {string}\n */\nfunction matchParens ($lst) {\n    function check($s) {\n        $depth = 0;\n        for ($i = 0; $i < strlen($s); $i++) {\n            $ch = $s[$i];\n            if ($ch == '(') {\n                $depth += 1;\n            } else {\n                $depth -= 1;\n            }\n            if ($depth < 0) {\n                return false;\n            }\n        }\n        return $depth === 0;\n    }\n\n    $s1 = $lst[0] . $lst[1];\n    $s2 = $lst[1] . $lst[0];\n    return (check($s1) || check($s2)) ? \"Yes\" : \"No\";\n}\n",
            "/**\n * @param {array<int>} $arr\n * @param {int} $k\n * @returns {array<int>}\n */\nfunction maximum ($arr, $k) {\n    if ($k == 0) {\n        return [];\n    }\n    $sortedArr = $arr;\n    sort($sortedArr);\n    return array_slice($sortedArr, -$k);\n}\n",
            "/**\n * @param {array<int>} $lst\n * @returns {int}\n */\nfunction solution ($lst) {\n    $sum = 0;\n    for ($i = 0; $i < count($lst); ++$i) {\n        if ($i % 2 == 0 && $lst[$i] % 2 != 0) {\n            $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n",
            "/**\n * @param {array<int>} $arr\n * @param {int} $k\n * @returns {int}\n */\nfunction addElements($arr, $k) {\n    $sum = 0;\n    for ($i = 0; $i < $k && $i < count($arr); ++$i) {\n        if (strlen((string)$arr[$i]) <= 2) {\n            $sum += $arr[$i];\n        }\n    }\n    return $sum;\n}\n",
            "/**\n * @param {int} $n\n * @returns {array<int>}\n */\nfunction getOddCollatz ($n) {\n    $collatz = [1];\n    while ($n != 1) {\n        if ($n % 2 != 0) {\n            $collatz[] = $n;\n            $n = 3 * $n + 1;\n        } else {\n            $n = $n / 2;\n        }\n    }\n    sort($collatz);\n    return $collatz;\n}\n",
            "/**\n * @param {string} $date\n * @returns {bool}\n */\nfunction validDate ($date) {\n    if (strlen($date) != 10 || $date[2] != '-' || $date[5] != '-') {\n        return false;\n    }\n    $m = intval(substr($date, 0, 2));\n    $d = intval(substr($date, 3, 2));\n    if (($m == 1 || $m == 3 || $m == 5 || $m == 7 || $m == 8 || $m == 10 || $m == 12) && $d >= 1 && $d <= 31) {\n        return true;\n    }\n    if (($m == 4 || $m == 6 || $m == 9 || $m == 11) && $d >= 1 && $d <= 30) {\n        return true;\n    }\n    if ($m == 2 && $d >= 1 && $d <= 29) {\n        return true;\n    }\n    return false;\n}\n",
            "/**\n * @param {string} $txt\n * @returns {array<string>}\n */\nfunction splitWords($txt) {\n    $result = [];\n    if (strpos($txt, ' ') !== false) {\n        $start = 0;\n        $end = 0;\n        while (($end = strpos($txt, ' ', $start)) !== false) {\n            $result[] = substr($txt, $start, $end - $start);\n            $start = $end + 1;\n        }\n        $result[] = substr($txt, $start);\n    } elseif (strpos($txt, ',') !== false) {\n        $start = 0;\n        $end = 0;\n        while (($end = strpos($txt, ',', $start)) !== false) {\n            $result[] = substr($txt, $start, $end - $start);\n            $start = $end + 1;\n        }\n        $result[] = substr($txt, $start);\n    } else {\n        $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if (ctype_lower($txt[$i]) && ($txt[$i] % 2 == 0)) {\n                $count++;\n            }\n        }\n        $result[] = strval($count);\n    }\n    return $result;\n}\n",
            "/**\n * @param {array<int>} $lst\n * @returns {bool}\n */\nfunction isSorted($lst) {\n    $n = count($lst);\n    if ($n <= 1) {\n        return true;\n    }\n    \n    for ($i = 0; $i < $n - 1; $i++) {\n        if ($lst[$i] > $lst[$i + 1]) {\n            return false;\n        }\n    }\n    \n    $freq = array_count_values($lst);\n    foreach ($freq as $count) {\n        if ($count > 2) {\n            return false;\n        }\n    }\n    \n    return true;\n}\n",
            "/**\n * @param {array<int>} $interval1\n * @param {array<int>} $interval2\n * @returns {string}\n */\nfunction intersection ($interval1, $interval2) {\n    if ($interval1[0] < 2 || $interval1[1] < 2 || $interval2[0] < 2 || $interval2[1] < 2) return false;\n    function is_prime($n) {\n        for ($i = 2; $i <= sqrt($n); ++$i) {\n            if ($n % $i == 0) return false;\n        }\n        return true;\n    }\n    $l = max($interval1[0], $interval2[0]);\n    $r = min($interval1[1], $interval2[1]);\n    $length = $r - $l;\n    return ($length > 0 && is_prime($length)) ? \"YES\" : \"NO\";\n}\n",
            "/**\n * @param {array<int>} $arr\n * @returns {int | null}\n */\nfunction prodSigns ($arr) {\n    if (empty($arr)) {\n        return null;\n    }\n    foreach ($arr as $n) {\n        if ($n === 0) {\n            return 0;\n        }\n    }\n    $sign = count(array_filter($arr, function($n) { return $n < 0; })) % 2 == 1 ? -1 : 1;\n    return $sign * array_sum(array_map('abs', $arr));\n}\n",
            "function minPath ($grid, $k) {\n    $n = count($grid);\n    $min_val = $n * $n + 1;\n    for ($i = 0; $i < $n; ++$i) {\n        for ($j = 0; $j < $n; ++$j) {\n            if ($grid[$i][$j] == 1) {\n                $temp = [];\n                if ($i != 0) {\n                    $temp[] = $grid[$i - 1][$j];\n                }\n                if ($j != 0) {\n                    $temp[] = $grid[$i][$j - 1];\n                }\n                if ($i != $n - 1) {\n                    $temp[] = $grid[$i + 1][$j];\n                }\n                if ($j != $n - 1) {\n                    $temp[] = $grid[$i][$j + 1];\n                }\n                $min_val = min($temp);\n            }\n        }\n    }\n    $result = [];\n    for ($i = 0; $i < $k; ++$i) {\n        $result[] = $i % 2 == 0 ? 1 : $min_val;\n    }\n    return $result;\n}\n",
            "/**\n * @param int $n\n * @return array<int>\n */\nfunction tri($n) {\n    if ($n == 0) {\n        return [1];\n    }\n    $seq = [1, 3];\n    for ($i = 2; $i <= $n; ++$i) {\n        if ($i % 2 == 0) {\n            $seq[] = $i / 2.0 + 1;\n        } else {\n            $seq[] = $seq[$i - 1] + $seq[$i - 2] + ($i + 3) / 2.0;\n        }\n    }\n    return array_map('intval', $seq);\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction digits ($n) {\n    $product = 1;\n    $hasOdd = false;\n    while ($n > 0) {\n        $digit = $n % 10;\n        if ($digit % 2 == 1) {\n            $product *= $digit;\n            $hasOdd = true;\n        }\n        $n = intdiv($n, 10);\n    }\n    return $hasOdd ? $product : 0;\n}\n",
            "/**\n * @param {string} $s\n * @returns {bool}\n */\nfunction isNested ($s) {\n    $open_idx = array();\n    $close_idx = array();\n    for ($i = 0; $i < strlen($s); ++$i) {\n        if ($s[$i] == '[') {\n            $open_idx[] = $i;\n        } elseif ($s[$i] == ']') {\n            $close_idx[] = $i;\n        }\n    }\n    $close_idx = array_reverse($close_idx);\n    $cnt = 0;\n    $i = 0;\n    $l = count($close_idx);\n    foreach ($open_idx as $idx) {\n        if ($i < $l && $idx < $close_idx[$i]) {\n            ++$cnt;\n            ++$i;\n        }\n    }\n    return $cnt >= 2;\n}\n",
            "/**\n * @param {array<float>} $lst\n * @returns {int}\n */\nfunction sumSquares ($lst) {\n    $sum = 0;\n    foreach ($lst as $n) {\n        $sum += (int)(pow(ceil($n), 2));\n    }\n    return $sum;\n}\n",
            "/**\n * @param {string} $txt\n * @returns {bool}\n */\nfunction checkIfLastCharIsALetter ($txt) {\n    if (empty($txt)) {\n        return false;\n    }\n    $lastSpace = strrpos($txt, ' ');\n    $last = substr($txt, $lastSpace + 1);\n    return strlen($last) == 1 && ctype_alpha($last[0]);\n}\n",
            "/**\n * @param {array<int>} $arr\n * @returns {int}\n */\nfunction canArrange ($arr) {\n    if (count($arr) <= 1) {\n        return -1;\n    }\n    $idx = [];\n    for ($i = 1; $i < count($arr); ++$i) {\n        if ($arr[$i] < $arr[$i - 1]) {\n            $idx[] = $i;\n        }\n    }\n    return !empty($idx) ? max($idx) : -1;\n}\n",
            "/**\n * @param {array<int>} $lst\n * @returns {array<int | null>}\n */\nfunction largestSmallestIntegers($lst) {\n    $neg = [];\n    $pos = [];\n\n    foreach ($lst as $i) {\n        if ($i < 0) {\n            $neg[] = $i;\n        } elseif ($i > 0) {\n            $pos[] = $i;\n        }\n    }\n\n    $max_neg = !empty($neg) ? max($neg) : null;\n    $min_pos = !empty($pos) ? min($pos) : null;\n\n    return [$max_neg, $min_pos];\n}\n",
            "/**\n * @param {mixed} $a\n * @param {mixed} $b\n * @returns {float | null}\n */\nfunction compareOne ($a, $b) {\n    $a1 = any_to_real($a);\n    $b1 = any_to_real($b);\n    if ($a1 == $b1) {\n        return null;\n    } elseif ($a1 > $b1) {\n        return $a1;\n    } else {\n        return $b1;\n    }\n}\n\nfunction any_to_real($o) {\n    if (is_string($o)) {\n        return floatval(str_replace(',', '.', $o));\n    } elseif (is_int($o)) {\n        return floatval($o);\n    } elseif (is_float($o)) {\n        return $o;\n    }\n    throw new RuntimeException(\"Type Error\");\n}\n",
            "/**\n * @param {int} $n\n * @returns {bool}\n */\nfunction isEqualToSumEven ($n) {\n    return $n % 2 == 0 && $n >= 8;\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction specialFactorial($n) {\n    $fact = 1;\n    $result = 1;\n    for ($i = 1; $i <= $n; ++$i) {\n        $fact *= $i;\n        $result *= $fact;\n    }\n    return $result;\n}\n",
            "/**\n * @param {string} $txt\n * @returns {string}\n */\nfunction fixSpaces ($txt) {\n    return preg_replace('/\\s{3,}/', '-', preg_replace('/ /', '_', $txt));\n}\n",
            "/**\n * @param {string} $fileName\n * @returns {string}\n */\nfunction fileNameCheck ($fileName) {\n    $suf = [\"txt\", \"exe\", \"dll\"];\n    $lst = explode(\".\", $fileName);\n    if (count($lst) != 2 || !in_array($lst[1], $suf) || strlen($lst[0]) == 0 || !ctype_alpha($lst[0][0]) || preg_match_all('/\\d/', $lst[0]) > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n",
            "/**\n * @param {array<int>} $lst\n * @returns {int}\n */\nfunction sumSquares ($lst) {\n    $result = 0;\n    for ($i = 0; $i < count($lst); ++$i) {\n        if ($i % 3 == 0) {\n            $result += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n            $result += pow($lst[$i], 3);\n        } else {\n            $result += $lst[$i];\n        }\n    }\n    return $result;\n}\n",
            "/**\n * @param {string} $sentence\n * @returns {string}\n */\nfunction wordsInSentence ($sentence) {\n    $result = [];\n    $words = explode(' ', $sentence);\n    foreach ($words as $word) {\n        $length = strlen($word);\n        $isPrime = true;\n        if ($length < 2) {\n            continue;\n        }\n        for ($i = 2; $i <= sqrt($length); ++$i) {\n            if ($length % $i == 0) {\n                $isPrime = false;\n                break;\n            }\n        }\n        if ($isPrime) {\n            $result[] = $word;\n        }\n    }\n    return implode(' ', $result);\n}\n",
            "/**\n * @param {string} $x\n * @param {string} $n\n * @returns {bool}\n */\nfunction simplify($x, $n) {\n    $slash_pos_x = strpos($x, '/');\n    $slash_pos_n = strpos($n, '/');\n    $num_x = (int)substr($x, 0, $slash_pos_x);\n    $den_x = (int)substr($x, $slash_pos_x + 1);\n    $num_n = (int)substr($n, 0, $slash_pos_n);\n    $den_n = (int)substr($n, $slash_pos_n + 1);\n    $num = $num_x * $num_n;\n    $den = $den_x * $den_n;\n    return $num % $den === 0;\n}\n",
            "/**\n * @param {array<int>} $nums\n * @returns {array<int>}\n */\nfunction orderByPoints ($nums) {\n    usort($nums, function($a, $b) {\n        return digitsSum($a) - digitsSum($b);\n    });\n    return $nums;\n}\n\nfunction digitsSum($n) {\n    if ($n < 0) {\n        return intval(substr((string)$n, 1, 2)) * 2 + digitsSum(abs($n));\n    }\n    $sum = 0;\n    foreach (str_split((string)$n) as $d) {\n        $sum += intval($d);\n    }\n    return $sum;\n}\n",
            "/**\n * @param {array<int>} $nums\n * @returns {int}\n */\nfunction specialFilter ($nums) {\n    $odds = \"13579\";\n    $count = 0;\n    foreach ($nums as $n) {\n        if ($n > 10 && $n % 2 == 1 && strpos($odds, strval($n)[0]) !== false) {\n            $count++;\n        }\n    }\n    return $count;\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction getMaxTriples ($n) {\n    $c = array(0, 0, 0);\n    for ($i = 1; $i <= $n; ++$i) {\n        $a = $i * $i - $i + 1;\n        $c[$a % 3]++;\n    }\n    return $c[0] * $c[1] * $c[2] + (($c[0] * ($c[0] - 1) * ($c[0] - 2)) + ($c[1] * ($c[1] - 1) * ($c[1] - 2)) + ($c[2] * ($c[2] - 1) * ($c[2] - 2))) / 6;\n}\n",
            "/**\n * @param {string} $planet1\n * @param {string} $planet2\n * @returns {array<string>}\n */\nfunction bf ($planet1, $planet2) {\n    $names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if (!in_array($planet1, $names) || !in_array($planet2, $names)) {\n        return [];\n    }\n    $l = array_search($planet1, $names);\n    $r = array_search($planet2, $names);\n    if ($l > $r) {\n        list($l, $r) = [$r, $l];\n    }\n    if ($l == $r) {\n        return [];\n    }\n    return array_slice($names, $l + 1, $r - $l - 1);\n}\n",
            "/**\n * @param {array<string>} $lst\n * @returns {array<string>}\n */\nfunction sortedListSum ($lst) {\n    $result = array_filter($lst, function($s) {\n        return strlen($s) % 2 == 0;\n    });\n\n    usort($result, function($a, $b) {\n        if (strlen($a) === strlen($b)) {\n            return strcmp($a, $b);\n        }\n        return strlen($a) - strlen($b);\n    });\n\n    return $result;\n}\n",
            "function xOrY ($n, $x, $y) {\n    if ($n < 2) {\n        return $y;\n    }\n    for ($i = 2; $i <= floor(sqrt($n)); ++$i) {\n        if ($n % $i == 0) {\n            return $y;\n        }\n    }\n    return $x;\n}\n",
            "/**\n * @param {array<float>} $lst\n * @returns {int}\n */\nfunction doubleTheDifference ($lst) {\n    $result = 0;\n    foreach ($lst as $n) {\n        if ($n >= 0 && fmod($n, 2.0) == 1.0) {\n            $result += $n * $n;\n        }\n    }\n    return $result;\n}\n",
            "/**\n * @param {array<int>} $game\n * @param {array<int>} $guess\n * @returns {array<int>}\n */\nfunction compare ($game, $guess) {\n    $result = [];\n    for ($i = 0; $i < count($game); ++$i) {\n        $result[] = abs($game[$i] - $guess[$i]);\n    }\n    return $result;\n}\n",
            "/**\n * @param {string} $className\n * @param {array<string>} $extensions\n * @returns {string}\n */\nfunction strongestExtension($className, $extensions) {\n    $max_s = -1;\n    $max_ext = \"\";\n    foreach ($extensions as $ext) {\n        $upper = 0;\n        $lower = 0;\n        for ($i = 0; $i < strlen($ext); $i++) {\n            $c = $ext[$i];\n            if (ctype_upper($c)) {\n                $upper++;\n            }\n            if (ctype_lower($c)) {\n                $lower++;\n            }\n        }\n        $s = $upper - $lower;\n        if ($s > $max_s) {\n            $max_s = $s;\n            $max_ext = $ext;\n        }\n    }\n    return $className . \".\" . $max_ext;\n}\n",
            "/**\n * @param {string} $a\n * @param {string} $b\n * @returns {bool}\n */\nfunction cycpatternCheck($a, $b) {\n    if (strlen($a) < strlen($b)) {\n        return false;\n    }\n    for ($i = 0; $i < strlen($b); ++$i) {\n        $rotated = substr($b, $i) . substr($b, 0, $i);\n        if (strpos($a, $rotated) !== false) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param {int} $num\n * @returns {array<int>}\n */\nfunction evenOddCount ($num) {\n    $ds = strval(abs($num));\n    $even = 0;\n    for ($i = 0; $i < strlen($ds); $i++) {\n        if (($ds[$i] - '0') % 2 == 0) {\n            $even++;\n        }\n    }\n    return array($even, strlen($ds) - $even);\n}\n",
            "/**\n * @param {int} $num\n * @returns {string}\n */\nfunction intToMiniRoman ($num) {\n    $values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    $numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    $res = \"\";\n    for ($i = 0; $i < count($values); ++$i) {\n        while ($num >= $values[$i]) {\n            $res .= $numerals[$i];\n            $num -= $values[$i];\n        }\n    }\n    return $res;\n}\n",
            "/**\n * @param {int} $a\n * @param {int} $b\n * @param {int} $c\n * @returns {bool}\n */\nfunction rightAngleTriangle($a, $b, $c) {\n    $s = [$a, $b, $c];\n    sort($s);\n    return $s[0] * $s[0] + $s[1] * $s[1] == $s[2] * $s[2];\n}\n",
            "/**\n * @param {array<string>} $words\n * @returns {string}\n */\nfunction findMax ($words) {\n    $max_cnt = 0;\n    $max_w = \"\";\n    foreach ($words as $w) {\n        $unique_chars = count(array_unique(str_split($w)));\n        $cnt = $unique_chars;\n        if ($cnt > $max_cnt) {\n            $max_cnt = $cnt;\n            $max_w = $w;\n        } else if ($cnt == $max_cnt) {\n            $max_w = strcmp($max_w, $w) < 0 ? $max_w : $w;\n        }\n    }\n    return $max_w;\n}\n",
            "/**\n * @param {int} $num\n * @param {int} $need\n * @param {int} $remaining\n * @returns {array<int>}\n */\nfunction eat ($num, $need, $remaining) {\n    if ($need <= $remaining) {\n        return [$num + $need, $remaining - $need];\n    } else {\n        return [$num + $remaining, 0];\n    }\n}\n",
            "/**\n * @param {array<string>} $operators\n * @param {array<int>} $operands\n * @returns {int}\n */\nfunction doAlgebra ($operators, $operands) {\n    $ops = $operators;\n    $nums = $operands;\n    $i = count($ops) - 1;\n    while ($i >= 0) {\n        if ($ops[$i] == \"**\") {\n            $nums[$i] = pow($nums[$i], $nums[$i + 1]);\n            array_splice($nums, $i + 1, 1);\n            array_splice($ops, $i, 1);\n        }\n        $i -= 1;\n    }\n    $i = 0;\n    while ($i < count($ops)) {\n        if ($ops[$i] == \"*\") {\n            $nums[$i] = $nums[$i] * $nums[$i + 1];\n            array_splice($nums, $i + 1, 1);\n            array_splice($ops, $i, 1);\n            $i -= 1;\n        } else if ($ops[$i] == \"//\") {\n            $nums[$i] = intdiv($nums[$i], $nums[$i + 1]);\n            array_splice($nums, $i + 1, 1);\n            array_splice($ops, $i, 1);\n            $i -= 1;\n        }\n        $i += 1;\n    }\n    $i = 0;\n    while ($i < count($ops)) {\n        if ($ops[$i] == \"+\") {\n            $nums[$i] = $nums[$i] + $nums[$i + 1];\n            array_splice($nums, $i + 1, 1);\n            array_splice($ops, $i, 1);\n            $i -= 1;\n        } else if ($ops[$i] == \"-\") {\n            $nums[$i] = $nums[$i] - $nums[$i + 1];\n            array_splice($nums, $i + 1, 1);\n            array_splice($ops, $i, 1);\n            $i -= 1;\n        }\n        $i += 1;\n    }\n    return $nums[0];\n}\n",
            "/**\n * @param {string} $s\n * @returns {string}\n */\nfunction solve ($s) {\n    if (preg_match('/[a-zA-Z]/', $s) == 0) {\n        return strrev($s);\n    }\n    $result = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        $ch = $s[$i];\n        if (!ctype_alpha($ch)) {\n            $result .= $ch;\n        } else if (ctype_upper($ch)) {\n            $result .= strtolower($ch);\n        } else if (ctype_lower($ch)) {\n            $result .= strtoupper($ch);\n        }\n    }\n    return $result;\n}\n",
            "/**\n * @param {string} $txt\n * @returns {string | null}\n */\nfunction stringToMd5($txt) {\n    if (empty($txt)) {\n        return null;\n    }\n    $digest = md5($txt);\n    return $digest;\n}\n",
            "/**\n * @param {int} $a\n * @param {int} $b\n * @returns {array<int>}\n */\nfunction generateIntegers ($a, $b) {\n    $lower = max(2, min($a, $b));\n    $upper = min(8, max($a, $b));\n    $result = array();\n    for ($i = $lower; $i <= $upper; ++$i) {\n        if ($i % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n"
        ],
        "dart": [
            "bool hasCloseElements(List<double> numbers, double threshold) {\n    for (int i = 0; i < numbers.length; ++i) {\n        for (int j = i + 1; j < numbers.length; ++j) {\n            if ((numbers[i] - numbers[j]).abs() < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "List<String> separateParenGroups(String parenString) {\n    List<String> groups = [];\n    List<String> stk = [];\n    String currentGroup = \"\";\n    for (var ch in parenString.split('')) {\n        if (ch == '(') {\n            stk.add(ch);\n            currentGroup += ch;\n        } else if (ch == ')') {\n            stk.removeLast();\n            currentGroup += ch;\n            if (stk.isEmpty) {\n                groups.add(currentGroup);\n                currentGroup = \"\";\n            }\n        }\n    }\n    return groups;\n}\n",
            "double truncateNumber(double num) {\n    return num - num.floor();\n}\n",
            "bool belowZero(List<int> operations) {\n    int balance = 0;\n    for (int op in operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "double meanAbsoluteDeviation(List<double> numbers) {\n    double sum = 0.0;\n    for (final num in numbers) {\n        sum += num;\n    }\n    double mean = sum / numbers.length;\n    double deviation = 0.0;\n    for (final num in numbers) {\n        deviation += (num - mean).abs();\n    }\n    return deviation / numbers.length;\n}\n",
            "List<int> intersperse(List<int> numbers, int delimiter) {\n    List<int> result = [];\n    for (int i = 0; i < numbers.length; ++i) {\n        if (i != 0) {\n            result.add(delimiter);\n        }\n        result.add(numbers[i]);\n    }\n    return result;\n}\n",
            "List<int> parseNestedParens(String parenString) {\n    List<int> result = [];\n    List<String> parenGroups = parenString.split(' ');\n    for (String group in parenGroups) {\n        int maxDepth = 0;\n        int depth = 0;\n        for (int i = 0; i < group.length; i++) {\n            String ch = group[i];\n            if (ch == \"(\") {\n                depth += 1;\n                maxDepth = max(maxDepth, depth);\n            } else if (ch == \")\") {\n                depth -= 1;\n            }\n        }\n        result.add(maxDepth);\n    }\n    return result;\n}\n",
            "List<String> filterBySubstring(List<String> strs, String substring) {\n    List<String> result = [];\n    for (String s in strs) {\n        if (s.contains(substring)) {\n            result.add(s);\n        }\n    }\n    return result;\n}\n",
            "List<int> sumProduct(List<int> numbers) {\n  int n_sum = numbers.reduce((a, b) => a + b);\n  int n_product = numbers.reduce((a, b) => a * b);\n  return [n_sum, n_product];\n}\n",
            "List<int> rollingMax(List<int> numbers) {\n    int max_so_far = -2147483648; // numeric_limits<int>::min() in Dart\n    List<int> result = [];\n    for (int num in numbers) {\n        max_so_far = (max_so_far > num) ? max_so_far : num;\n        result.add(max_so_far);\n    }\n    return result;\n}\n",
            "bool isPalindrome(String s) {\n  return s == s.split('').reversed.join('');\n}\n\nString makePalindrome(String s) {\n  if (isPalindrome(s)) {\n    return s;\n  }\n  for (int i = 0; i < s.length; i++) {\n    if (isPalindrome(s.substring(i))) {\n      return s + s.substring(0, i).split('').reversed.join('');\n    }\n  }\n  return \"\";\n}\n",
            "String stringXor(String a, String b) {\n    String result = '';\n    for (int i = 0; i < a.length; ++i) {\n        result += (a[i] == b[i]) ? '0' : '1';\n    }\n    return result;\n}\n",
            "String? longest(List<String> strs) {\n    if (strs.isEmpty) {\n        return null;\n    }\n    String longest_s = strs[0];\n    for (final s in strs) {\n        if (s.length > longest_s.length) {\n            longest_s = s;\n        }\n    }\n    return longest_s;\n}\n",
            "int greatestCommonDivisor(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return greatestCommonDivisor(b, a % b);\n    }\n}\n",
            "List<String> allPrefixes(String s) {\n    List<String> prefixes = [];\n    for (int i = 0; i < s.length; ++i) {\n        prefixes.add(s.substring(0, i + 1));\n    }\n    return prefixes;\n}\n",
            "String stringSequence(int n) {\n    StringBuffer sb = StringBuffer();\n    for (int i = 0; i <= n; ++i) {\n        sb.write(i);\n        if (i < n) {\n            sb.write(\" \");\n        }\n    }\n    return sb.toString();\n}\n",
            "int countDistinctCharacters(String s) {\n    Set<String> uniqueChars = {};\n    for (String c in s.toLowerCase()) {\n        uniqueChars.add(c);\n    }\n    return uniqueChars.length;\n}\n",
            "List<int> parseMusic(String musicString) {\n    Map<String, int> durations = {'o': 4, 'o|': 2, '.|': 1};\n    List<int> result = [];\n    int start = 0;\n    int end = 0;\n    \n    while ((end = musicString.indexOf(' ', start)) != -1) {\n        String note = musicString.substring(start, end);\n        if (durations.containsKey(note)) {\n            result.add(durations[note]!);\n        }\n        start = end + 1;\n    }\n    \n    // Add the last note\n    String lastNote = musicString.substring(start);\n    if (durations.containsKey(lastNote)) {\n        result.add(durations[lastNote]!);\n    }\n    \n    return result;\n}\n",
            "int howManyTimes(String s, String substring) {\n    int times = 0;\n    for (int i = 0; i <= s.length - substring.length; i++) {\n        if (s.substring(i, i + substring.length) == substring) {\n            times++;\n        }\n    }\n    return times;\n}\n",
            "String sortNumbers(String numbers) {\n  Map<String, int> numDict = {\n    \"zero\": 0,\n    \"one\": 1,\n    \"two\": 2,\n    \"three\": 3,\n    \"four\": 4,\n    \"five\": 5,\n    \"six\": 6,\n    \"seven\": 7,\n    \"eight\": 8,\n    \"nine\": 9\n  };\n\n  List<String> numList = numbers.split(' ');\n\n  numList.sort((a, b) {\n    return numDict[a]!.compareTo(numDict[b]!);\n  });\n\n  return numList.join(' ');\n}\n",
            "List<double> findClosestElements(List<double> numbers) {\n    if (numbers.length < 2) {\n        return [];\n    }\n    \n    List<double> sortedNumbers = List.from(numbers)..sort();\n    \n    double minDiff = double.maxFinite;\n    List<double> closestPair;\n    \n    for (int i = 1; i < sortedNumbers.length; ++i) {\n        double diff = sortedNumbers[i] - sortedNumbers[i - 1];\n        if (diff < minDiff) {\n            minDiff = diff;\n            closestPair = [sortedNumbers[i - 1], sortedNumbers[i]];\n        }\n    }\n    \n    return closestPair;\n}\n",
            "List<double> rescaleToUnit(List<double> numbers) {\n    double minNum = numbers.reduce((a, b) => a < b ? a : b);\n    double maxNum = numbers.reduce((a, b) => a > b ? a : b);\n    if (minNum == maxNum) {\n        return List.filled(numbers.length, 0.0);\n    } else {\n        List<double> rescaled = [];\n        for (double num in numbers) {\n            rescaled.add((num - minNum) / (maxNum - minNum));\n        }\n        return rescaled;\n    }\n}\n",
            "List<int> filterIntegers(List<Object> values) {\n    List<int> result = [];\n    for (var value in values) {\n        if (value is int) {\n            result.add(value);\n        }\n    }\n    return result;\n}\n",
            "int strLength(String s) {\n    return s.length;\n}\n",
            "int largestDivisor(int n) {\n    for (int i = 2; i < n; ++i) {\n        if (n % i == 0) {\n            return n / i;\n        }\n    }\n    return 1;\n}\n",
            "List<int> factorize(int n) {\n    List<int> factors = [];\n    int divisor = 2;\n    while (divisor <= n) {\n        if (n % divisor == 0) {\n            factors.add(divisor);\n            n ~/= divisor;\n        } else {\n            divisor += 1;\n        }\n    }\n    return factors;\n}\n",
            "List<int> removeDuplicates(List<int> numbers) {\n    Map<int, int> counts = {};\n    for (int num in numbers) {\n        counts[num] = (counts[num] ?? 0) + 1;\n    }\n    List<int> res = [];\n    for (int num in numbers) {\n        if (counts[num] == 1) {\n            res.add(num);\n        }\n    }\n    return res;\n}\n",
            "String flipCase(String s) {\n    String flipped = '';\n    for (var ch in s.codeUnits) {\n        if (!isAlpha(ch)) {\n            flipped += String.fromCharCode(ch);\n        } else if (isLower(ch)) {\n            flipped += String.fromCharCode(toupper(ch));\n        } else if (isUpper(ch)) {\n            flipped += String.fromCharCode(tolower(ch));\n        }\n    }\n    return flipped;\n}\n\nbool isAlpha(int codeUnit) {\n    return (codeUnit >= 65 && codeUnit <= 90) || (codeUnit >= 97 && codeUnit <= 122);\n}\n\nbool isLower(int codeUnit) {\n    return codeUnit >= 97 && codeUnit <= 122;\n}\n\nbool isUpper(int codeUnit) {\n    return codeUnit >= 65 && codeUnit <= 90;\n}\n\nint toupper(int codeUnit) {\n    if (isLower(codeUnit)) {\n        return codeUnit - ('a'.codeUnits[0] - 'A'.codeUnits[0]);\n    }\n    return codeUnit;\n}\n\nint tolower(int codeUnit) {\n    if (isUpper(codeUnit)) {\n        return codeUnit + ('a'.codeUnits[0] - 'A'.codeUnits[0]);\n    }\n    return codeUnit;\n}\n",
            "String concatenate(List<String> strs) {\n    String result = '';\n    for (final str in strs) {\n        result += str;\n    }\n    return result;\n}\n",
            "List<String> filterByPrefix(List<String> strs, String prefixStr) {\n    List<String> result = [];\n    for (var s in strs) {\n        if (s.startsWith(prefixStr)) {\n            result.add(s);\n        }\n    }\n    return result;\n}\n",
            "List<int> getPositive(List<int> l) {\n    List<int> result = [];\n    for (int num in l) {\n        if (num > 0) {\n            result.add(num);\n        }\n    }\n    return result;\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n).toInt(); ++i) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "double poly(List<int> xs, double x) {\n    double res = 0.0;\n    for (int i = 0; i < xs.length; ++i) {\n        res += xs[i] * pow(x, i);\n    }\n    return res;\n}\n\ndouble findZero(List<int> xs) {\n    double x1 = 1.0, x2 = -1.0;\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2;\n        x2 *= 2;\n    }\n    while ((x1 - x2).abs() > 1e-10) {\n        double mid = (x1 + x2) / 2;\n        if (poly(xs, mid) == 0) {\n            return mid;\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2;\n}\n",
            "List<int> sortThird(List<int> l) {\n    List<int> sorted_third = [];\n    for (int i = 0; i < l.length; i += 3) {\n        sorted_third.add(l[i]);\n    }\n    sorted_third.sort();\n\n    List<int> result = [];\n    int j = 0;\n    for (int i = 0; i < l.length; ++i) {\n        if (i % 3 == 0) {\n            result.add(sorted_third[j++]);\n        } else {\n            result.add(l[i]);\n        }\n    }\n    return result;\n}\n",
            "List<int> listUnique(List<int> l) {\n    Set<int> uniqueElements = l.toSet();\n    List<int> result = uniqueElements.toList();\n    result.sort();\n    return result;\n}\n",
            "int maxElement(List<int> l) {\n    if (l.isEmpty) {\n        return 0;\n    }\n    return l.reduce((a, b) => a > b ? a : b);\n}\n",
            "int fizzBuzz(int n) {\n    int cnt = 0;\n    for (int i = 0; i < n; ++i) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            String str_i = i.toString();\n            cnt += str_i.split('').where((char) => char == '7').length;\n        }\n    }\n    return cnt;\n}\n",
            "List<int> sortEven(List<int> l) {\n    List<int> even_elements = [];\n    for (int i = 0; i < l.length; i += 2) {\n        even_elements.add(l[i]);\n    }\n    even_elements.sort();\n\n    List<int> result = [];\n    int even_index = 0;\n    for (int i = 0; i < l.length; ++i) {\n        if (i % 2 == 0) {\n            result.add(even_elements[even_index++]);\n        } else {\n            result.add(l[i]);\n        }\n    }\n    return result;\n}\n",
            "String encodeCyclic(String s) {\n  StringBuffer result = StringBuffer();\n  for (int i = 0; i < s.length; i += 3) {\n    if (i + 3 > s.length) {\n      result.write(s.substring(i));\n    } else {\n      result.write(s.substring(i + 1, i + 3));\n      result.write(s[i]);\n    }\n  }\n  return result.toString();\n}\n\nString decodeCyclic(String s) {\n  return encodeCyclic(encodeCyclic(s));\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i <= sqrt(n).toInt(); i++) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nint primeFib(int n) {\n    List<int> f = [0, 1];\n    int cnt = 0;\n    while (cnt < n) {\n        f = [f[1], f[0] + f[1]];\n        if (isPrime(f[1])) {\n            cnt++;\n        }\n    }\n    return f[1];\n}\n",
            "bool triplesSumToZero(List<int> l) {\n    for (int i = 0; i < l.length; ++i) {\n        for (int j = i + 1; j < l.length; ++j) {\n            for (int k = j + 1; k < l.length; ++k) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "int carRaceCollision(int n) {\n    return n * n;\n}\n",
            "List<int> incrList(List<int> l) {\n    List<int> result = [];\n    for (int i in l) {\n        result.add(i + 1);\n    }\n    return result;\n}\n",
            "bool pairsSumToZero(List<int> l) {\n    Set<int> seen = {};\n    for (int num in l) {\n        if (seen.contains(-num)) {\n            return true;\n        }\n        seen.add(num);\n    }\n    return false;\n}\n",
            "String changeBase(int x, int bas) {\n    if (x == 0) {\n        return \"0\";\n    }\n    String digits = \"\";\n    while (x > 0) {\n        digits += (x % bas).toString();\n        x ~/= bas;\n    }\n    List<String> reversedDigits = digits.split('').reversed.toList();\n    return reversedDigits.join('');\n}\n",
            "double triangleArea(int a, int h) {\n    return a * h / 2.0;\n}\n",
            "int fib4(int n) {\n    List<int> fib = [0, 0, 2, 0];\n    for (int i = 4; i <= n; ++i) {\n        fib[i % 4] = fib[0] + fib[1] + fib[2] + fib[3];\n    }\n    return fib[n % 4];\n}\n",
            "double median(List<double> l) {\n  List<double> sl = List.from(l);\n  sl.sort();\n  if (sl.length % 2 != 0) {\n    return sl[sl.length ~/ 2];\n  } else {\n    return (sl[sl.length ~/ 2] + sl[sl.length ~/ 2 - 1]) / 2.0;\n  }\n}\n",
            "bool isPalindrome(String txt) {\n    return txt == txt.split('').reversed.join('');\n}\n",
            "int modp(int n, int p) {\n    int ret = 1;\n    for (int i = 0; i < n; ++i) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}\n",
            "String encodeShift(String s) {\n    StringBuffer result = StringBuffer();\n    for (int i = 0; i < s.length; i++) {\n        String ch = s[i];\n        int encodedChar = ((ch.codeUnitAt(0) - 'a'.codeUnitAt(0) + 5) % 26) + 'a'.codeUnitAt(0);\n        result.writeCharCode(encodedChar);\n    }\n    return result.toString();\n}\n\nString decodeShift(String s) {\n    StringBuffer result = StringBuffer();\n    for (int i = 0; i < s.length; i++) {\n        String ch = s[i];\n        int decodedChar = ((ch.codeUnitAt(0) - 'a'.codeUnitAt(0) + 21) % 26) + 'a'.codeUnitAt(0);\n        result.writeCharCode(decodedChar);\n    }\n    return result.toString();\n}\n",
            "String removeVowels(String txt) {\n    String vowels = \"aeiouAEIOU\";\n    StringBuffer result = StringBuffer();\n    for (int i = 0; i < txt.length; i++) {\n        if (!vowels.contains(txt[i])) {\n            result.write(txt[i]);\n        }\n    }\n    return result.toString();\n}\n",
            "bool belowThreshold(List<int> l, int t) {\n    return l.every((x) => x < t);\n}\n",
            "int add(int x, int y) {\n    return x + y;\n}\n",
            "bool sameChars(String s0, String s1) {\n    Set<int> set0 = s0.codeUnits.toSet();\n    Set<int> set1 = s1.codeUnits.toSet();\n    return set0 == set1;\n}\n",
            "int fib(int n) {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n",
            "bool correctBracketing(String brackets) {\n    int depth = 0;\n    for (var b in brackets runes) {\n        if (b == '<'.codeUnitAt(0)) {\n            depth += 1;\n        } else if (b == '>'.codeUnitAt(0)) {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "bool monotonic(List<int> l) {\n    List<int> diff = [];\n    for (int i = 1; i < l.length; ++i) {\n        diff.add(l[i] - l[i - 1]);\n    }\n    return diff.every((x) => x <= 0) || diff.every((x) => x >= 0);\n}\n",
            "List<int> common(List<int> l1, List<int> l2) {\n    Set<int> s1 = l1.toSet();\n    Set<int> s2 = l2.toSet();\n    return s1.intersection(s2).toList();\n}\n",
            "int largestPrimeFactor(int n) {\n    int i = 2;\n    while (i * i <= n) {\n        if (n % i != 0) {\n            i += 1;\n        } else {\n            n ~/= i;\n        }\n    }\n    return n;\n}\n",
            "int sumToN(int n) {\n    return (n * (n + 1)) / 2;\n}\n",
            "bool correctBracketing(String brackets) {\n    int depth = 0;\n    for (var b in brackets.runes) {\n        if (b == '(') {\n            depth += 1;\n        } else if (b == ')') {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "List<int> derivative(List<int> xs) {\n    List<int> result = [];\n    for (int i = 1; i < xs.length; ++i) {\n        result.add(xs[i] * i);\n    }\n    return result;\n}\n",
            "int fibfib(int n) {\n    if (n <= 1) {\n        return 0;\n    }\n    int a = 0, b = 0, c = 1;\n    while (n > 2) {\n        a = b;\n        b = c;\n        c = a + b + c;\n        n -= 1;\n    }\n    return c;\n}\n",
            "int vowelsCount(String s) {\n    String vowels = \"aeiou\";\n    int cnt = 0;\n    for (int i = 0; i < s.length; ++i) {\n        if (vowels.contains(s.toLowerCase()[i]) || (i == s.length - 1 && s.toLowerCase()[i] == 'y')) {\n            ++cnt;\n        }\n    }\n    return cnt;\n}\n",
            "String circularShift(int x, int shift) {\n    String x_str = x.toString();\n    if (shift > x_str.length) {\n        return String.fromCharCodes(x_str.codeUnits.reversed);\n    } else {\n        return x_str.substring(x_str.length - shift) + x_str.substring(0, x_str.length - shift);\n    }\n}\n",
            "int digitSum(String s) {\n    int sum = 0;\n    for (var c in s.codeUnits) {\n        if (c >= 65 && c <= 90) { // ASCII values for uppercase letters\n            sum += c;\n        }\n    }\n    return sum;\n}\n",
            "int fruitDistribution(String s, int n) {\n    List<String> words = s.split(' ');\n    int apples = int.parse(words[words.indexOf(\"apples\") - 1]);\n    int oranges = int.parse(words[words.indexOf(\"oranges\") - 1]);\n    return n - apples - oranges;\n}\n",
            "List<int> pluck(List<int> arr) {\n    List<int> evens = [];\n    for (int n in arr) {\n        if (n % 2 == 0) {\n            evens.add(n);\n        }\n    }\n    if (evens.isEmpty) {\n        return [];\n    }\n    int minEven = evens.reduce((a, b) => a < b ? a : b);\n    int index = arr.indexOf(minEven);\n    return [minEven, index];\n}\n",
            "int search(List<int> lst) {\n    Map<int, int> freqs = {};\n    for (int n in lst) {\n        if (freqs.containsKey(n)) {\n            freqs[n]++;\n        } else {\n            freqs[n] = 1;\n        }\n    }\n    List<int> goodVals = [];\n    for (var kv in freqs.entries) {\n        if (kv.value >= kv.key) {\n            goodVals.add(kv.key);\n        }\n    }\n    return goodVals.isNotEmpty ? goodVals.reduce((a, b) => a > b ? a : b) : -1;\n}\n",
            "List<int> strangeSortList(List<int> lst) {\n    List<int> sl = [...lst];\n    sl.sort();\n    List<int> result = [];\n    int left = 0, right = sl.length - 1;\n    while (left <= right) {\n        result.add(sl[left]);\n        left += 1;\n        if (left <= right) {\n            result.add(sl[right]);\n            right -= 1;\n        }\n    }\n    return result;\n}\n",
            "double triangleArea(int a, int b, int c) {\n    if (a + b > c && a + c > b && b + c > a) {\n        double s = (a + b + c) / 2.0;\n        return sqrt(s * (s - a) * (s - b) * (s - c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "bool willItFly(List<int> q, int w) {\n    if (q.isEmpty) {\n        return false;\n    }\n    bool is_palin = true;\n    for (int i = 0; i < q.length ~/ 2; ++i) {\n        if (q[i] != q[q.length - i - 1]) {\n            is_palin = false;\n            break;\n        }\n    }\n    int total = q.reduce((a, b) => a + b);\n    return is_palin && total <= w;\n}\n",
            "int smallestChange(List<int> arr) {\n    int ans = 0;\n    for (int i = 0; i < arr.length ~/ 2; ++i) {\n        if (arr[i] != arr[arr.length - i - 1]) {\n            ++ans;\n        }\n    }\n    return ans;\n}\n",
            "List<String> totalMatch(List<String> lst1, List<String> lst2) {\n    int cnt1 = 0;\n    int cnt2 = 0;\n    \n    for (String s in lst1) {\n        cnt1 += s.length;\n    }\n    \n    for (String s in lst2) {\n        cnt2 += s.length;\n    }\n    \n    return cnt1 <= cnt2 ? lst1 : lst2;\n}\n",
            "bool is_prime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i <= (n).floor().sqrt(); ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nbool isMultiplyPrime(int a) {\n    int cnt = 0;\n    for (int i = 2; i <= a; ++i) {\n        if (is_prime(i)) {\n            while (a % i == 0) {\n                ++cnt;\n                a ~/= i;\n            }\n        }\n    }\n    return cnt == 3;\n}\n",
            "bool isSimplePower(int x, int n) {\n    if (n < 2) {\n        return x == n;\n    }\n    int tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp == x;\n}\n",
            "bool isCube(int a) {\n    a = a.abs();\n    int root = (a.toDouble() / 3).round().toInt();\n    return root * root * root == a;\n}\n",
            "int hexKey(String num) {\n    int count = 0;\n    for (var x in num.split('')) {\n        if (x == '2' || x == '3' || x == '5' || x == '7' || x == 'B' || x == 'D') {\n            count++;\n        }\n    }\n    return count;\n}\n",
            "String decimalToBinary(int dec) {\n    String binary = dec.toRadixString(2);\n    return \"db$binary\"db\";\n}\n",
            "bool isHappy(String s) {\n    if (s.length < 3) {\n        return false;\n    }\n    for (int i = 0; i < s.length - 2; ++i) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "List<String> numericalLetterGrade(List<double> grades) {\n    List<String> result = [];\n    for (double g in grades) {\n        if (g == 4.0) {\n            result.add(\"A+\");\n        } else if (g > 3.7) {\n            result.add(\"A\");\n        } else if (g > 3.3) {\n            result.add(\"A-\");\n        } else if (g > 3.0) {\n            result.add(\"B+\");\n        } else if (g > 2.7) {\n            result.add(\"B\");\n        } else if (g > 2.3) {\n            result.add(\"B-\");\n        } else if (g > 2.0) {\n            result.add(\"C+\");\n        } else if (g > 1.7) {\n            result.add(\"C\");\n        } else if (g > 1.3) {\n            result.add(\"C-\");\n        } else if (g > 1.0) {\n            result.add(\"D+\");\n        } else if (g > 0.7) {\n            result.add(\"D\");\n        } else if (g > 0.0) {\n            result.add(\"D-\");\n        } else {\n            result.add(\"E\");\n        }\n    }\n    return result;\n}\n",
            "bool primeLength(String s) {\n    int length = s.length;\n    if (length < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(length).floor(); ++i) {\n        if (length % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "int startsOneEnds(int n) {\n    if (n == 1) {\n        return 1;\n    }\n    return 2 * 9 * (10^(n - 2));\n}\n",
            "String solve(int n) {\n    int digitsSum = 0;\n    String nStr = n.toString();\n    for (int i = 0; i < nStr.length; i++) {\n        digitsSum += int.parse(nStr[i]);\n    }\n    return digitsSum.toRadixString(2);\n}\n",
            "int add(List<int> lst) {\n    int result = 0;\n    for (int i = 1; i < lst.length; i += 2) {\n        if (lst[i] % 2 == 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "String antiShuffle(String s) {\n    List<String> words = s.split(' ');\n    List<String> sortedWords = words.map((word) => word.split('').toList()..sort()).map((letters) => letters.join()).toList();\n    return sortedWords.join(' ');\n}\n",
            "List<List<int>> getRow(List<List<int>> lst, int x) {\n    List<List<int>> coords = [];\n    for (int i = 0; i < lst.length; ++i) {\n        for (int j = 0; j < lst[i].length; ++j) {\n            if (lst[i][j] == x) {\n                coords.add([i, j]);\n            }\n        }\n    }\n    coords.sort((a, b) => a[0] == b[0] ? b[1] - a[1] : a[0] - b[0]);\n    return coords;\n}\n",
            "List<int> sortArray(List<int> arr) {\n    if (arr.isEmpty) {\n        return [];\n    }\n    if ((arr.first + arr.last) % 2 == 0) {\n        var sortedArr = List.from(arr);\n        sortedArr.sort((a, b) => b - a);\n        return sortedArr;\n    } else {\n        var sortedArr = List.from(arr);\n        sortedArr.sort();\n        return sortedArr;\n    }\n}\n",
            "String encrypt(String s) {\n    String result = '';\n    for (var ch in s.codeUnits) {\n        int shifted = ch + 4;\n        if (shifted > 'z'.codeUnitAt(0)) {\n            shifted -= 26;\n        }\n        result += String.fromCharCode(shifted);\n    }\n    return result;\n}\n",
            "int? nextSmallest(List<int> lst) {\n    if (lst.length < 2) {\n        return null;\n    }\n    Set<int> sl = lst.toSet();\n    List<int> sortedList = sl.toList()..sort();\n    return sortedList[1];\n}\n",
            "int isBored(String s) {\n    List<String> sentences = [];\n    String sentence;\n    var ss = new StringBuffer(s);\n\n    while (ss.length > 0) {\n        int end = ss.indexOfAny(['.', '!', '?']);\n        if (end == -1) {\n            sentence = ss.toString();\n            ss.clear();\n        } else {\n            sentence = ss.substring(0, end);\n            ss.delete(0, end + 1);\n        }\n        sentences.add(sentence.trim());\n    }\n\n    int count = 0;\n    for (var sentence in sentences) {\n        if (sentence.length >= 2 && sentence.startsWith(\"I \")) {\n            count++;\n        }\n    }\n\n    return count;\n}\n",
            "bool anyInt(Object x, Object y, Object z) {\n  if (x is int && y is int && z is int) {\n    if ((x + y == z) || (x + z == y) || (y + z == x)) {\n      return true;\n    }\n  }\n  return false;\n}\n",
            "String encode(String message) {\n    String vowels = \"aeiouAEIOU\";\n    String result = '';\n    for (var ch in message.codeUnits) {\n        if (RegExp(r'[a-zA-Z]').hasMatch(String.fromCharCode(ch))) {\n            var ch1 = String.fromCharCode(ch).toLowerCase() == String.fromCharCode(ch) ? ch.toUpperCase() : ch.toLowerCase();\n            if (vowels.indexOf(String.fromCharCode(ch1)) != -1) {\n                ch1 += 2;\n            }\n            result += String.fromCharCode(ch1);\n        } else {\n            result += String.fromCharCode(ch);\n        }\n    }\n    return result;\n}\n",
            "bool is_prime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i <= (n).floor().sqrt(); ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nint skjkasdkd(List<int> lst) {\n    List<int> primes = [];\n    for (int n in lst) {\n        if (is_prime(n)) {\n            primes.add(n);\n        }\n    }\n    if (primes.isEmpty) return 0;\n    int largest = primes.reduce((a, b) => a > b ? a : b);\n    int sum = 0;\n    while (largest > 0) {\n        sum += largest % 10;\n        largest ~/= 10;\n    }\n    return sum;\n}\n",
            "bool checkDictCase(Map<String, String> d) {\n    if (d.isEmpty) {\n        return false;\n    }\n    \n    bool allLower = true;\n    bool allUpper = true;\n    \n    for (final key in d.keys) {\n        for (var c in key.codeUnits) {\n            if (!RegExp(r'[a-z]').hasMatch(String.fromCharCode(c))) {\n                allLower = false;\n            }\n            if (!RegExp(r'[A-Z]').hasMatch(String.fromCharCode(c))) {\n                allUpper = false;\n            }\n        }\n        if (!allLower && !allUpper) {\n            return false;\n        }\n    }\n    \n    return allLower || allUpper;\n}\n",
            "List<int> countUpTo(int n) {\n    List<int> primes = [];\n    for (int num = 2; num < n; ++num) {\n        bool isPrime = true;\n        for (final int p in primes) {\n            if (num % p == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            primes.add(num);\n        }\n    }\n    return primes;\n}\n",
            "int multiply(int a, int b) {\n    return (a.abs() % 10) * (b.abs() % 10);\n}\n",
            "int countUpper(String s) {\n    String vowels = \"AEIOU\";\n    int count = 0;\n    for (int i = 0; i < s.length; ++i) {\n        if (i % 2 == 0 && vowels.indexOf(s[i]) != -1) {\n            ++count;\n        }\n    }\n    return count;\n}\n",
            "int closestInteger(String value) {\n    double num = double.parse(value);\n    if (num >= 0) {\n        return (num + 0.5).toInt();\n    } else {\n        return (num - 0.5).toInt();\n    }\n}\n",
            "List<int> makeAPile(int n) {\n    List<int> pile = [];\n    for (int i = 0; i < n; ++i) {\n        pile.add(n + 2 * i);\n    }\n    return pile;\n}\n",
            "List<String> wordsString(String s) {\n  return s.split(RegExp(r'[,\\s]+')).where((w) => w.isNotEmpty).toList();\n}\n",
            "int chooseNum(int x, int y) {\n  if (x > y) {\n    return -1;\n  }\n  if (y % 2 == 0) {\n    return y;\n  }\n  return x != y ? y - 1 : -1;\n}\n",
            "String? roundedAvg(int n, int m) {\n  if (n > m) {\n    return null;\n  }\n  int rAvg = ((m + n) / 2.0 + 0.5).toInt();\n  return rAvg.toRadixString(2);\n}\n",
            "List<int> uniqueDigits(List<int> x) {\n    List<int> result = [];\n    for (int num in x) {\n        String numStr = num.toString();\n        bool allDigitsOdd = true;\n        for (String digit in numStr.split('')) {\n            if ((int.parse(digit) % 2 == 0)) {\n                allDigitsOdd = false;\n                break;\n            }\n        }\n        if (allDigitsOdd) {\n            result.add(num);\n        }\n    }\n    result.sort();\n    return result;\n}\n",
            "List<String> byLength(List<int> arr) {\n    List<String> digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    List<int> sorted_arr = [];\n    \n    for (int x in arr) {\n        if (x >= 1 && x <= 9) {\n            sorted_arr.add(x);\n        }\n    }\n    \n    sorted_arr.sort((a, b) => b.compareTo(a));\n    \n    List<String> result = [];\n    for (int x in sorted_arr) {\n        result.add(digit_names[x - 1]);\n    }\n    \n    return result;\n}\n",
            "List<int> f(int n) {\n    List<int> nums = List.generate(n, (i) => i + 1);\n    \n    List<int> result = [];\n    for (int i = 0; i < n; ++i) {\n        if ((i + 1) % 2 != 0) {\n            int sum = nums.sublist(0, i + 1).reduce((a, b) => a + b);\n            result.add(sum);\n        } else {\n            int product = nums.sublist(0, i + 1).reduce((a, b) => a * b);\n            result.add(product);\n        }\n    }\n    \n    return result;\n}\n",
            "bool is_palindrome(String txt) {\n    return txt == txt.split('').reversed.join('');\n}\n\nList<int> evenOddPalindrome(int n) {\n    List<int> cnt = [0, 0];\n    for (int i = 1; i <= n; ++i) {\n        if (is_palindrome(i.toString())) {\n            cnt[i % 2] += 1;\n        }\n    }\n    return cnt;\n}\n",
            "int digitsSum(int n) {\n  String nStr = n.toString();\n  if (n >= 0) {\n    return nStr.split('').map((d) => int.parse(d)).reduce((a, b) => a + b);\n  } else {\n    return int.parse(nStr.substring(0, 2)) * 2 + digitsSum(-n);\n  }\n}\n\nint countNums(List<int> arr) {\n  return arr.where((n) => digitsSum(n) > 0).length;\n}\n",
            "bool moveOneBall(List<int> arr) {\n    if (arr.isEmpty) {\n        return true;\n    }\n    List<int> sortedArr = List.from(arr)..sort();\n    for (int i = 0; i < arr.length; ++i) {\n        if (arr.skip(i).toList() == sortedArr.sublist(i) &&\n            arr.take(i).toList() == sortedArr.sublist(arr.length - i)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "String canExchange(List<int> lst1, List<int> lst2) {\n    int odd_cnt = 0;\n    for (int num in lst1) {\n        if (num % 2 != 0) {\n            odd_cnt++;\n        }\n    }\n    int even_cnt = 0;\n    for (int num in lst2) {\n        if (num % 2 == 0) {\n            even_cnt++;\n        }\n    }\n    return (even_cnt >= odd_cnt) ? \"YES\" : \"NO\";\n}\n",
            "Map<String, int> histogram(String test) {\n    Map<String, int> freq = {};\n    List<String> words = test.split(\" \");\n    for (String word in words) {\n        if (word.isNotEmpty) {\n            freq[word] = (freq[word] ?? 0) + 1;\n        }\n    }\n    Map<String, int> result = {};\n    if (freq.isNotEmpty) {\n        int maxFreq = freq.values.reduce((a, b) => a > b ? a : b);\n        for (var entry in freq.entries) {\n            if (entry.value == maxFreq) {\n                result[entry.key] = entry.value;\n            }\n        }\n    }\n    return result;\n}\n",
            "List<String> reverseDelete(String s, String c) {\n  List<String> result = [];\n  for (var ch in s.codeUnits) {\n    if (!c.containsCharCode(ch)) {\n      result.add(String.fromCharCode(ch));\n    }\n  }\n  String s1 = result.join('');\n  bool isPalindrome = s1 == s1.split('').reversed.join('');\n  return [s1, isPalindrome ? 'yes' : 'no'];\n}\n",
            "List<String> oddCount(List<String> lst) {\n    List<String> result = [];\n    for (var num in lst) {\n        int n = 0;\n        for (var d in num) {\n            if (d.codeUnitAt(0) % 2 == 1) {\n                n++;\n            }\n        }\n        String rs = \"the number of odd elements in the string i of the input.\";\n        result.add(rs.replaceFirst('i', n.toString()));\n    }\n    return result;\n}\n",
            "int minSubArraySum(List<int> nums) {\n    int min_sum = 0;\n    int cur_sum = 0;\n    for (var n in nums) {\n        cur_sum = cur_sum + n < 0 ? cur_sum + n : 0;\n        min_sum = cur_sum < min_sum ? cur_sum : min_sum;\n    }\n    if (min_sum == 0) {\n        min_sum = nums.reduce((a, b) => a < b ? a : b);\n    }\n    return min_sum;\n}\n",
            "import 'dart:math';\n\nint maxFill(List<List<int>> grid, int capacity) {\n  return grid.map((arr) => ceil(arr.reduce((a, b) => a + b) / capacity).toInt()).reduce((a, b) => a + b);\n}\n",
            "List<int> sortArray(List<int> arr) {\n  int countOnes(int num) {\n    return num.toRadixString(2).split('0').join('').length;\n  }\n\n  List<int> sortedArr = List.from(arr);\n  sortedArr.sort((a, b) {\n    int onesA = countOnes(a);\n    int onesB = countOnes(b);\n    if (onesA == onesB) {\n      return a.compareTo(b);\n    }\n    return onesA.compareTo(onesB);\n  });\n\n  return sortedArr;\n}\n",
            "List<String> selectWords(String s, int n) {\n    String consonants = \"bcdfghjklmnpqrstvwxyz\";\n    List<String> words = [];\n    String word = '';\n\n    for (int i = 0; i < s.length; i++) {\n        if (s[i].isWhitespace) {\n            if (word.isNotEmpty) {\n                words.add(word);\n                word = '';\n            }\n        } else {\n            word += s[i];\n        }\n    }\n\n    if (word.isNotEmpty) {\n        words.add(word);\n    }\n\n    List<String> result = [];\n    for (String w in words) {\n        int consonantCount = 0;\n        for (int i = 0; i < w.length; i++) {\n            String lowerC = w[i].toLowerCase();\n            if (consonants.contains(lowerC)) {\n                consonantCount++;\n            }\n        }\n        if (consonantCount == n) {\n            result.add(w);\n        }\n    }\n\n    return result;\n}\n",
            "String getClosestVowel(String word) {\n    String vowels = \"aeiouAEIOU\";\n    for (int i = word.length - 2; i > 0; --i) {\n        if (vowels.contains(word[i]) && !vowels.contains(word[i - 1]) && !vowels.contains(word[i + 1])) {\n            return String.fromCharCode(word.codeUnitAt(i));\n        }\n    }\n    return \"\";\n}\n",
            "String matchParens(List<String> lst) {\n  bool check(String s) {\n    int depth = 0;\n    for (var ch in s.runes) {\n      if (String.fromCharCode(ch) == '(') {\n        depth += 1;\n      } else {\n        depth -= 1;\n      }\n      if (depth < 0) {\n        return false;\n      }\n    }\n    return depth == 0;\n  }\n\n  String s1 = lst[0] + lst[1];\n  String s2 = lst[1] + lst[0];\n  return (check(s1) || check(s2)) ? \"Yes\" : \"No\";\n}\n",
            "List<int> maximum(List<int> arr, int k) {\n    if (k == 0) {\n        return [];\n    }\n    List<int> sortedArr = List.from(arr);\n    sortedArr.sort();\n    return sortedArr.sublist(sortedArr.length - k);\n}\n",
            "int solution(List<int> lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; ++i) {\n        if (i % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n",
            "int addElements(List<int> arr, int k) {\n    int sum = 0;\n    for (int i = 0; i < k && i < arr.length; ++i) {\n        if (arr[i].toString().length <= 2) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n",
            "List<int> getOddCollatz(int n) {\n    List<int> collatz = [1];\n    while (n != 1) {\n        if (n % 2 != 0) {\n            collatz.add(n);\n            n = 3 * n + 1;\n        } else {\n            n = n ~/ 2;\n        }\n    }\n    collatz.sort();\n    return collatz;\n}\n",
            "bool validDate(String date) {\n    if (date.length != 10 || date[2] != '-' || date[5] != '-') {\n        return false;\n    }\n    int m = int.parse(date.substring(0, 2));\n    int d = int.parse(date.substring(3, 2));\n    if ((m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) && d >= 1 && d <= 31) {\n        return true;\n    }\n    if ((m == 4 || m == 6 || m == 9 || m == 11) && d >= 1 && d <= 30) {\n        return true;\n    }\n    if (m == 2 && d >= 1 && d <= 29) {\n        return true;\n    }\n    return false;\n}\n",
            "List<String> splitWords(String txt) {\n    List<String> result = [];\n    if (txt.contains(' ')) {\n        int start = 0, end = 0;\n        while ((end = txt.indexOf(' ', start)) != -1) {\n            result.add(txt.substring(start, end));\n            start = end + 1;\n        }\n        result.add(txt.substring(start));\n    } else if (txt.contains(',')) {\n        int start = 0, end = 0;\n        while ((end = txt.indexOf(',', start)) != -1) {\n            result.add(txt.substring(start, end));\n            start = end + 1;\n        }\n        result.add(txt.substring(start));\n    } else {\n        int count = 0;\n        for (int i = 0; i < txt.length; i++) {\n            String c = txt[i];\n            if ((c.codeUnitAt(0) >= 'a'.codeUnitAt(0) && c.codeUnitAt(0) <= 'z'.codeUnitAt(0)) && (c.codeUnitAt(0) % 2 == 0)) {\n                count++;\n            }\n        }\n        result.add(count.toString());\n    }\n    return result;\n}\n",
            "bool isSorted(List<int> lst) {\n  if (!lst.every((value, index) => index == 0 || value >= lst[index - 1])) {\n    return false;\n  }\n  Map<int, int> freq = {};\n  for (int i in lst) {\n    freq[i] = (freq[i] ?? 0) + 1;\n  }\n  return freq.values.every((count) => count <= 2);\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i <= sqrt(n); ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nString intersection(List<int> interval1, List<int> interval2) {\n    int l = max(interval1[0], interval2[0]);\n    int r = min(interval1[1], interval2[1]);\n    int length = r - l;\n    return (length > 0 && isPrime(length)) ? \"YES\" : \"NO\";\n}\n",
            "int? prodSigns(List<int> arr) {\n  if (arr.isEmpty) {\n    return null;\n  }\n  if (arr.contains(0)) {\n    return 0;\n  }\n  int sign = arr.where((n) => n < 0).length % 2 == 1 ? -1 : 1;\n  return sign * arr.map((n) => n.abs()).reduce((sum, n) => sum + n);\n}\n",
            "List<int> minPath(List<List<int>> grid, int k) {\n    int n = grid.length;\n    int minValue = n * n + 1;\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < n; ++j) {\n            if (grid[i][j] == 1) {\n                List<int> temp = [];\n                if (i != 0) {\n                    temp.add(grid[i - 1][j]);\n                }\n                if (j != 0) {\n                    temp.add(grid[i][j - 1]);\n                }\n                if (i != n - 1) {\n                    temp.add(grid[i + 1][j]);\n                }\n                if (j != n - 1) {\n                    temp.add(grid[i][j + 1]);\n                }\n                minValue = temp.reduce((a, b) => a < b ? a : b);\n            }\n        }\n    }\n    List<int> result = [];\n    for (int i = 0; i < k; ++i) {\n        result.add(i % 2 == 0 ? 1 : minValue);\n    }\n    return result;\n}\n",
            "List<int> tri(int n) {\n    if (n == 0) {\n        return [1];\n    }\n    List<double> seq = [1, 3];\n    for (int i = 2; i <= n; ++i) {\n        if (i % 2 == 0) {\n            seq.add(i / 2.0 + 1);\n        } else {\n            seq.add(seq[i - 1] + seq[i - 2] + (i + 3) / 2.0);\n        }\n    }\n    return List<int>.from(seq.map((e) => e.round()));\n}\n",
            "int digits(int n) {\n    int product = 1;\n    bool hasOdd = false;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit % 2 == 1) {\n            product *= digit;\n            hasOdd = true;\n        }\n        n ~/= 10;\n    }\n    return hasOdd ? product : 0;\n}\n",
            "bool isNested(String s) {\n    List<int> open_idx = [];\n    List<int> close_idx = [];\n    for (int i = 0; i < s.length; ++i) {\n        if (s[i] == '[') {\n            open_idx.add(i);\n        } else if (s[i] == ']') {\n            close_idx.add(i);\n        }\n    }\n    close_idx.reverse();\n    int cnt = 0;\n    int i = 0;\n    int l = close_idx.length;\n    for (int idx in open_idx) {\n        if (i < l && idx < close_idx[i]) {\n            ++cnt;\n            ++i;\n        }\n    }\n    return cnt >= 2;\n}\n",
            "int sumSquares(List<double> lst) {\n    int sum = 0;\n    for (double n in lst) {\n        sum += (n.ceil()).toInt() * (n.ceil()).toInt();\n    }\n    return sum;\n}\n",
            "bool checkIfLastCharIsALetter(String txt) {\n    if (txt.isEmpty) {\n        return false;\n    }\n    int lastSpace = txt.lastIndexOf(' ');\n    String last = txt.substring(lastSpace + 1);\n    return last.length == 1 && last.codeUnitAt(0).isLetter();\n}\n",
            "int canArrange(List<int> arr) {\n    if (arr.length <= 1) {\n        return -1;\n    }\n    List<int> idx = [];\n    for (int i = 1; i < arr.length; ++i) {\n        if (arr[i] < arr[i - 1]) {\n            idx.add(i);\n        }\n    }\n    return idx.isNotEmpty ? idx.reduce((a, b) => a > b ? a : b) : -1;\n}\n",
            "List<int?> largestSmallestIntegers(List<int> lst) {\n    List<int> neg = [];\n    List<int> pos = [];\n    \n    for (int i in lst) {\n        if (i < 0) {\n            neg.add(i);\n        } else if (i > 0) {\n            pos.add(i);\n        }\n    }\n    \n    int? max_neg = neg.isNotEmpty ? neg.reduce(max) : null;\n    int? min_pos = pos.isNotEmpty ? pos.reduce(min) : null;\n    \n    return [max_neg, min_pos];\n}\n",
            "double? compareOne(Object a, Object b) {\n  double anyToReal(dynamic o) {\n    if (o is String) {\n      return double.parse(o.replaceAll(',', '.'));\n    } else if (o is int) {\n      return o.toDouble();\n    } else if (o is double) {\n      return o;\n    }\n    throw RuntimeError(\"Type Error\");\n  }\n\n  final a1 = anyToReal(a);\n  final b1 = anyToReal(b);\n\n  if (a1 == b1) {\n    return null;\n  } else if (a1 > b1) {\n    return a1;\n  } else {\n    return b1;\n  }\n}\n",
            "bool isEqualToSumEven(int n) {\n  return n % 2 == 0 && n >= 8;\n}\n",
            "int specialFactorial(int n) {\n    int fact = 1;\n    int result = 1;\n    for (int i = 1; i <= n; ++i) {\n        fact *= i;\n        result *= fact;\n    }\n    return result;\n}\n",
            "String fixSpaces(String txt) {\n  return txt.replaceAllMapped(RegExp(r\"\\s{3,}\"), (match) => \"-\").replaceAll(\" \", \"_\");\n}\n",
            "String fileNameCheck(String fileName) {\n    List<String> suf = [\"txt\", \"exe\", \"dll\"];\n    List<String> lst = fileName.split(\".\");\n    if (lst.length != 2 || !suf.contains(lst[1]) || lst[0].isEmpty || !lst[0][0].isLetter() || lst[0].where((x) => x.isDigit()).length > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n",
            "int sumSquares(List<int> lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; ++i) {\n        if (i % 3 == 0) {\n            result += lst[i] * lst[i];\n        } else if (i % 4 == 0) {\n            result += lst[i] * lst[i] * lst[i];\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "String wordsInSentence(String sentence) {\n    List<String> result = [];\n    var words = sentence.split(' ');\n    for (var word in words) {\n        int length = word.length;\n        bool isPrime = true;\n        if (length < 2) continue;\n        for (int i = 2; i <= sqrt(length); ++i) {\n            if (length % i == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            result.add(word);\n        }\n    }\n    return result.join(' ');\n}\n",
            "bool simplify(String x, String n) {\n    int slash_pos_x = x.indexOf('/');\n    int slash_pos_n = n.indexOf('/');\n    int num_x = int.parse(x.substring(0, slash_pos_x));\n    int den_x = int.parse(x.substring(slash_pos_x + 1));\n    int num_n = int.parse(n.substring(0, slash_pos_n));\n    int den_n = int.parse(n.substring(slash_pos_n + 1));\n    int num = num_x * num_n;\n    int den = den_x * den_n;\n    return num % den == 0;\n}\n",
            "int digitsSum(int n) {\n  String nStr = n.toString();\n  if (n >= 0) {\n    return nStr.split('').map((d) => int.parse(d)).reduce((a, b) => a + b);\n  } else {\n    return int.parse(nStr.substring(0, 2)) * 2 + digitsSum(n.abs());\n  }\n}\n\nList<int> orderByPoints(List<int> nums) {\n  return nums.sort((a, b) => digitsSum(a).compareTo(digitsSum(b)));\n}\n",
            "int specialFilter(List<int> nums) {\n    String odds = \"13579\";\n    int count = 0;\n    for (int n in nums) {\n        if (n > 10 && n % 2 == 1 && odds.contains(n.toString()[0])) {\n            count++;\n        }\n    }\n    return count;\n}\n",
            "int getMaxTriples(int n) {\n    List<int> c = [0, 0, 0];\n    for (int i = 1; i <= n; ++i) {\n        int a = i * i - i + 1;\n        c[a % 3]++;\n    }\n    return c[0] * c[1] * c[2] + ((c[0] * (c[0] - 1) * (c[0] - 2)) + (c[1] * (c[1] - 1) * (c[1] - 2)) + (c[2] * (c[2] - 1) * (c[2] - 2))) ~/ 6;\n}\n",
            "List<String> bf(String planet1, String planet2) {\n    List<String> names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if (!names.contains(planet1) || !names.contains(planet2)) {\n        return [];\n    }\n    int l = names.indexOf(planet1);\n    int r = names.indexOf(planet2);\n    if (l > r) {\n        int temp = l;\n        l = r;\n        r = temp;\n    }\n    if (l == r) {\n        return [];\n    }\n    return names.sublist(l + 1, r);\n}\n",
            "List<String> sortedListSum(List<String> lst) {\n  List<String> result = [];\n  for (String s in lst) {\n    if (s.length % 2 == 0) {\n      result.add(s);\n    }\n  }\n  result.sort((a, b) {\n    if (a.length != b.length) {\n      return a.length.compareTo(b.length);\n    } else {\n      return a.compareTo(b);\n    }\n  });\n  return result;\n}\n",
            "int xOrY(int n, int x, int y) {\n    if (n < 2) {\n        return y;\n    }\n    for (int i = 2; i <= sqrt(n); ++i) {\n        if (n % i == 0) {\n            return y;\n        }\n    }\n    return x;\n}\n",
            "int doubleTheDifference(List<double> lst) {\n    int result = 0;\n    for (var n in lst) {\n        if (n >= 0 && (n % 2.0 == 1.0)) {\n            result += (n * n).toInt();\n        }\n    }\n    return result;\n}\n",
            "List<int> compare(List<int> game, List<int> guess) {\n  List<int> result = [];\n  for (int i = 0; i < game.length; ++i) {\n    result.add((game[i] - guess[i]).abs());\n  }\n  return result;\n}\n",
            "String strongestExtension(String className, List<String> extensions) {\n    int maxS = -1;\n    String maxExt = \"\";\n    for (String ext in extensions) {\n        int upper = 0;\n        int lower = 0;\n        for (int i = 0; i < ext.length; i++) {\n            if (ext[i].toUpperCase() == ext[i]) upper++;\n            if (ext[i].toLowerCase() == ext[i]) lower++;\n        }\n        int s = upper - lower;\n        if (s > maxS) {\n            maxS = s;\n            maxExt = ext;\n        }\n    }\n    return \"$className.$maxExt\";\n}\n",
            "bool cycpatternCheck(String a, String b) {\n    if (a.length < b.length) {\n        return false;\n    }\n    for (int i = 0; i < b.length; ++i) {\n        String rotated = b.substring(i) + b.substring(0, i);\n        if (a.contains(rotated)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "List<int> evenOddCount(int num) {\n    String ds = num.abs().toString();\n    int even = 0;\n    for (String d in ds.split('')) {\n        if (int.parse(d) % 2 == 0) {\n            even++;\n        }\n    }\n    return [even, ds.length - even];\n}\n",
            "String intToMiniRoman(int num) {\n    List<int> values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    List<String> numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    String res = \"\";\n    for (int i = 0; i < values.length; ++i) {\n        while (num >= values[i]) {\n            res += numerals[i];\n            num -= values[i];\n        }\n    }\n    return res;\n}\n",
            "bool rightAngleTriangle(int a, int b, int c) {\n    List<int> s = [a, b, c];\n    s.sort();\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2];\n}\n",
            "String findMax(List<String> words) {\n    int max_cnt = 0;\n    String max_w = \"\";\n    for (var w in words) {\n        Set<char> unique_chars = Set.from(w.split(''));\n        int cnt = unique_chars.length;\n        if (cnt > max_cnt) {\n            max_cnt = cnt;\n            max_w = w;\n        } else if (cnt == max_cnt) {\n            max_w = [max_w, w].reduce((a, b) => a.compareTo(b) < 0 ? a : b);\n        }\n    }\n    return max_w;\n}\n",
            "List<int> eat(int num, int need, int remaining) {\n    if (need <= remaining) {\n        return [num + need, remaining - need];\n    } else {\n        return [num + remaining, 0];\n    }\n}\n",
            "int doAlgebra(List<String> operators, List<int> operands) {\n    List<String> ops = operators;\n    List<int> nums = operands;\n    int i = ops.length - 1;\n    while (i >= 0) {\n        if (ops[i] == \"**\") {\n            nums[i] = pow(nums[i], nums[i + 1]).toInt();\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n        }\n        i -= 1;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] == \"*\") {\n            nums[i] = nums[i] * nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i -= 1;\n        } else if (ops[i] == \"//\") {\n            nums[i] = nums[i] ~/ nums[i + 1]; // Integer division in Dart\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] == \"+\") {\n            nums[i] = nums[i] + nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i -= 1;\n        } else if (ops[i] == \"-\") {\n            nums[i] = nums[i] - nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    return nums[0];\n}\n",
            "String solve(String s) {\n    if (s.split('').every((c) => !RegExp(r'[a-zA-Z]').hasMatch(c))) {\n        return String.fromCharCodes(s.codeUnits.reversed);\n    }\n    StringBuffer result = StringBuffer();\n    for (String ch in s.split('')) {\n        if (!RegExp(r'[a-zA-Z]').hasMatch(ch)) {\n            result.write(ch);\n        } else if (ch == ch.toUpperCase()) {\n            result.write(ch.toLowerCase());\n        } else if (ch == ch.toLowerCase()) {\n            result.write(ch.toUpperCase());\n        }\n    }\n    return result.toString();\n}\n",
            "String? stringToMd5(String txt) {\n  if (txt.isEmpty) {\n    return null;\n  }\n  var bytes = txt.codeUnits.map((unit) => unit.toUnsigned(8)).toList();\n  var md5Digest = md5.convert(bytes);\n  return md5Digest.toString();\n}\n",
            "List<int> generateIntegers(int a, int b) {\n    int lower = max(2, min(a, b));\n    int upper = min(8, max(a, b));\n    List<int> result = [];\n    for (int i = lower; i <= upper; ++i) {\n        if (i % 2 == 0) {\n            result.add(i);\n        }\n    }\n    return result;\n}\n"
        ],
        "javascript": [
            "/**\n * @param {Array<number>} numbers\n * @param {number} threshold\n * @returns {boolean}\n */\nexport const hasCloseElements = (numbers, threshold) => {\n    for (let i = 0; i < numbers.length; ++i) {\n        for (let j = i + 1; j < numbers.length; ++j) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n};\n",
            "/**\n * @param {string} parenString\n * @returns {Array<string>}\n */\nexport const separateParenGroups = (parenString) => {\n    const groups = [];\n    const stk = [];\n    let currentGroup = '';\n    for (const ch of parenString) {\n        if (ch === '(') {\n            stk.push(ch);\n            currentGroup += ch;\n        } else if (ch === ')') {\n            stk.pop();\n            currentGroup += ch;\n            if (stk.length === 0) {\n                groups.push(currentGroup);\n                currentGroup = '';\n            }\n        }\n    }\n    return groups;\n}\n",
            "export const truncateNumber = (num) => {\n    return num - Math.floor(num);\n}\n",
            "export const belowZero = (operations) => {\n    let balance = 0;\n    for (let op of operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param {Array<number>} numbers\n * @returns {number}\n */\nexport const meanAbsoluteDeviation = (numbers) => {\n    const sum = numbers.reduce((acc, num) => acc + num, 0);\n    const mean = sum / numbers.length;\n    const deviation = numbers.reduce((acc, num) => acc + Math.abs(num - mean), 0);\n    return deviation / numbers.length;\n}\n",
            "/**\n * @param {Array<number>} numbers\n * @param {number} delimiter\n * @returns {Array<number>}\n */\nexport const intersperse = (numbers, delimiter) => {\n    let result = [];\n    for (let i = 0; i < numbers.length; ++i) {\n        if (i !== 0) {\n            result.push(delimiter);\n        }\n        result.push(numbers[i]);\n    }\n    return result;\n}\n",
            "/**\n * @param {string} parenString\n * @returns {Array<number>}\n */\nexport const parseNestedParens = (parenString) => {\n    const result = [];\n    const parenGroups = parenString.split(' ');\n    for (const group of parenGroups) {\n        let maxDepth = 0;\n        let depth = 0;\n        for (const ch of group) {\n            if (ch === '(') {\n                depth += 1;\n                maxDepth = Math.max(maxDepth, depth);\n            } else if (ch === ')') {\n                depth -= 1;\n            }\n        }\n        result.push(maxDepth);\n    }\n    return result;\n}\n",
            "/**\n * @param {Array<string>} strs\n * @param {string} substring\n * @returns {Array<string>}\n */\nexport const filterBySubstring = (strs, substring) => {\n    let result = [];\n    for (const s of strs) {\n        if (s.includes(substring)) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n",
            "/**\n * @param {Array<number>} numbers\n * @returns {Array<number>}\n */\nexport const sumProduct = (numbers) => {\n    let n_sum = numbers.reduce((acc, curr) => acc + curr, 0);\n    let n_product = numbers.reduce((acc, curr) => acc * curr, 1);\n    return [n_sum, n_product];\n}\n",
            "/**\n * @param {Array<number>} numbers\n * @returns {Array<number>}\n */\nexport const rollingMax = (numbers) => {\n    let max_so_far = Number.NEGATIVE_INFINITY;\n    const result = [];\n    for (const num of numbers) {\n        max_so_far = Math.max(max_so_far, num);\n        result.push(max_so_far);\n    }\n    return result;\n}\n",
            "/**\n * @param {string} s\n * @returns {boolean}\n */\nconst isPalindrome = (s) => {\n    return s === s.split('').reverse().join('');\n}\n\n/**\n * @param {string} s\n * @returns {string}\n */\nexport const makePalindrome = (s) => {\n    if (isPalindrome(s)) {\n        return s;\n    }\n    for (let i = 0; i < s.length; i++) {\n        if (isPalindrome(s.substring(i))) {\n            return s + s.substring(0, i).split('').reverse().join('');\n        }\n    }\n    return \"\";\n}\n",
            "/**\n * @param {string} a\n * @param {string} b\n * @returns {string}\n */\nexport const stringXor = (a, b) => {\n    let result = '';\n    for (let i = 0; i < a.length; ++i) {\n        result += (a[i] === b[i]) ? '0' : '1';\n    }\n    return result;\n}\n",
            "/**\n * @param {Array<string>} strs\n * @returns {?string}\n */\nexport const longest = (strs) => {\n    if (strs.length === 0) {\n        return null;\n    }\n    let longest_s = strs[0];\n    for (const s of strs) {\n        if (s.length > longest_s.length) {\n            longest_s = s;\n        }\n    }\n    return longest_s;\n}\n",
            "/**\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */\nexport const greatestCommonDivisor = (a, b) => {\n    if (b === 0) {\n        return a;\n    } else {\n        return greatestCommonDivisor(b, a % b);\n    }\n}\n",
            "/**\n * @param {string} s\n * @returns {Array<string>}\n */\nexport const allPrefixes = (s) => {\n    const prefixes = [];\n    for (let i = 0; i < s.length; ++i) {\n        prefixes.push(s.substring(0, i + 1));\n    }\n    return prefixes;\n}\n",
            "/**\n * @param {number} n\n * @returns {string}\n */\nexport const stringSequence = (n) => {\n    let result = '';\n    for (let i = 0; i <= n; ++i) {\n        result += i;\n        if (i < n) {\n            result += ' ';\n        }\n    }\n    return result;\n}\n",
            "/**\n * @param {string} s\n * @returns {number}\n */\nexport const countDistinctCharacters = (s) => {\n    const uniqueChars = new Set();\n    for (const c of s) {\n        uniqueChars.add(c.toLowerCase());\n    }\n    return uniqueChars.size;\n}\n",
            "```js\n/**\n * @param {string} musicString\n * @returns {Array<number>}\n */\nexport const parseMusic = (musicString) => {\n    const durations = { \"o\": 4, \"o|\": 2, \".|\": 1 };\n    const result = [];\n    let start = 0;\n    let end = 0;\n\n    while ((end = musicString.indexOf(' ', start)) !== -1) {\n        const note = musicString.substring(start, end);\n        if (durations.hasOwnProperty(note)) {\n            result.push(durations[note]);\n        }\n        start = end + 1;\n    }\n\n    // Add the last note\n    const lastNote = musicString.substring(start);\n    if (durations.hasOwnProperty(lastNote)) {\n        result.push(durations[lastNote]);\n    }\n\n    return result;\n}\n```",
            "/**\n * @param {string} s\n * @param {string} substring\n * @returns {number}\n */\nexport const howManyTimes = (s, substring) => {\n    let times = 0;\n    for (let i = 0; i <= s.length - substring.length; i++) {\n        if (s.substring(i, i + substring.length) === substring) {\n            times += 1;\n        }\n    }\n    return times;\n}\n",
            "/**\n * @param {string} numbers\n * @returns {string}\n */\nexport const sortNumbers = (numbers) => {\n    const numDict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    };\n\n    const numList = numbers.split(' ').filter(word => word in numDict);\n\n    numList.sort((a, b) => numDict[a] - numDict[b]);\n\n    return numList.join(' ');\n}\n",
            "/**\n * @param {Array<number>} numbers\n * @returns {Array<number>}\n */\nexport const findClosestElements = (numbers) => {\n    if (numbers.length < 2) {\n        return [];\n    }\n    \n    let sorted_numbers = [...numbers].sort((a, b) => a - b);\n    \n    let min_diff = Number.MAX_VALUE;\n    let closest_pair = [];\n    \n    for (let i = 1; i < sorted_numbers.length; ++i) {\n        let diff = sorted_numbers[i] - sorted_numbers[i - 1];\n        if (diff < min_diff) {\n            min_diff = diff;\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]];\n        }\n    }\n    \n    return closest_pair;\n}\n",
            "/**\n * @param {Array<number>} numbers\n * @returns {Array<number>}\n */\nexport const rescaleToUnit = (numbers) => {\n    const min_num = Math.min(...numbers);\n    const max_num = Math.max(...numbers);\n    if (min_num === max_num) {\n        return new Array(numbers.length).fill(0.0);\n    } else {\n        return numbers.map(num => (num - min_num) / (max_num - min_num));\n    }\n}\n",
            "export const filterIntegers = (values) => {\n    return values.filter(value => typeof value === 'number' && Number.isInteger(value));\n}\n",
            "/**\n * @param {string} s\n * @returns {number}\n */\nexport const strLength = (s) => {\n    return s.length;\n};\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const largestDivisor = (n) => {\n    for (let i = 2; i < n; ++i) {\n        if (n % i === 0) {\n            return n / i;\n        }\n    }\n    return 1;\n}\n",
            "/**\n * @param {number} n\n * @returns {Array<number>}\n */\nexport const factorize = (n) => {\n    let factors = [];\n    let divisor = 2;\n    while (divisor <= n) {\n        if (n % divisor === 0) {\n            factors.push(divisor);\n            n /= divisor;\n        } else {\n            divisor += 1;\n        }\n    }\n    return factors;\n}\n",
            "export const removeDuplicates = (numbers) => {\n    const counts = new Map();\n    for (const num of numbers) {\n        counts.set(num, (counts.get(num) || 0) + 1);\n    }\n    const res = [];\n    for (const num of numbers) {\n        if (counts.get(num) === 1) {\n            res.push(num);\n        }\n    }\n    return res;\n}\n",
            "/**\n * @param {string} s\n * @returns {string}\n */\nexport const flipCase = (s) => {\n    let flipped = '';\n    for (let ch of s) {\n        if (!/[a-zA-Z]/.test(ch)) {\n            flipped += ch;\n        } else if (ch >= 'a' && ch <= 'z') {\n            flipped += ch.toUpperCase();\n        } else if (ch >= 'A' && ch <= 'Z') {\n            flipped += ch.toLowerCase();\n        }\n    }\n    return flipped;\n}\n",
            "/**\n * @param {Array<string>} strs\n * @returns {string}\n */\nexport const concatenate = (strs) => {\n    let result = '';\n    for (const str of strs) {\n        result += str;\n    }\n    return result;\n};\n",
            "export const filterByPrefix = (strs, prefixStr) => {\n    const result = [];\n    for (const s of strs) {\n        if (s.substring(0, prefixStr.length) === prefixStr) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n",
            "/**\n * @param {Array<number>} l\n * @returns {Array<number>}\n */\nexport const getPositive = (l) => {\n    const result = [];\n    for (const num of l) {\n        if (num > 0) {\n            result.push(num);\n        }\n    }\n    return result;\n}\n",
            "/**\n * @param {number} n\n * @returns {boolean}\n */\nexport const isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.sqrt(n); ++i) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "/**\n * @param {Array<number>} xs\n * @param {number} x\n * @returns {number}\n */\nexport const poly = (xs, x) => {\n    let res = 0.0;\n    for (let i = 0; i < xs.length; ++i) {\n        res += xs[i] * Math.pow(x, i);\n    }\n    return res;\n}\n\n/**\n * @param {Array<number>} xs\n * @returns {number}\n */\nexport const findZero = (xs) => {\n    let x1 = 1.0, x2 = -1.0;\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2;\n        x2 *= 2;\n    }\n    while (Math.abs(x1 - x2) > 1e-10) {\n        let mid = (x1 + x2) / 2;\n        if (poly(xs, mid) === 0) {\n            return mid;\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2;\n}\n",
            "/**\n * @param {Array<number>} l\n * @returns {Array<number>}\n */\nexport const sortThird = (l) => {\n    const sorted_third = [];\n    for (let i = 0; i < l.length; i += 3) {\n        sorted_third.push(l[i]);\n    }\n    sorted_third.sort((a, b) => a - b);\n\n    const result = [];\n    let j = 0;\n    for (let i = 0; i < l.length; ++i) {\n        if (i % 3 === 0) {\n            result.push(sorted_third[j++]);\n        } else {\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\n",
            "/**\n * @param {Array<number>} l\n * @returns {Array<number>}\n */\nexport const listUnique = (l) => {\n    return [...new Set(l)].sort((a, b) => a - b);\n}\n",
            "/**\n * @param {Array<number>} l\n * @returns {number}\n */\nexport const maxElement = (l) => {\n    if (l.length === 0) {\n        return 0;\n    }\n    return Math.max(...l);\n}\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const fizzBuzz = (n) => {\n    let cnt = 0;\n    for (let i = 0; i < n; ++i) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            const str_i = i.toString();\n            cnt += str_i.split('7').length - 1;\n        }\n    }\n    return cnt;\n}\n",
            "/**\n * @param {Array<number>} l\n * @returns {Array<number>}\n */\nexport const sortEven = (l) => {\n    let evenElements = [];\n    for (let i = 0; i < l.length; i += 2) {\n        evenElements.push(l[i]);\n    }\n    evenElements.sort((a, b) => a - b);\n\n    let result = [];\n    let evenIndex = 0;\n    for (let i = 0; i < l.length; ++i) {\n        if (i % 2 === 0) {\n            result.push(evenElements[evenIndex++]);\n        } else {\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\n",
            "/**\n * @param {string} s\n * @returns {string}\n */\nexport const encodeCyclic = (s) => {\n    let result = '';\n    for (let i = 0; i < s.length; i += 3) {\n        if (i + 3 > s.length) {\n            result += s.substring(i);\n        } else {\n            result += s.substring(i + 1, i + 3);\n            result += s[i];\n        }\n    }\n    return result;\n}\n\n/**\n * @param {string} s\n * @returns {string}\n */\nexport const decodeCyclic = (s) => {\n    return encodeCyclic(encodeCyclic(s));\n}\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const primeFib = (n) => {\n    const isPrime = (num) => {\n        if (num < 2) return false;\n        for (let i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i === 0) return false;\n        }\n        return true;\n    };\n\n    let f = [0, 1];\n    let cnt = 0;\n    while (cnt < n) {\n        f = [f[1], f[0] + f[1]];\n        if (isPrime(f[1])) {\n            cnt += 1;\n        }\n    }\n    return f[1];\n}\n",
            "/**\n * @param {Array<number>} l\n * @returns {boolean}\n */\nexport const triplesSumToZero = (l) => {\n    for (let i = 0; i < l.length; ++i) {\n        for (let j = i + 1; j < l.length; ++j) {\n            for (let k = j + 1; k < l.length; ++k) {\n                if (l[i] + l[j] + l[k] === 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const carRaceCollision = (n) => {\n    return n * n;\n}\n",
            "export const incrList = (l) => {\n    let result = [];\n    for (let i of l) {\n        result.push(i + 1);\n    }\n    return result;\n}\n",
            "/**\n * @param {Array<number>} l\n * @returns {boolean}\n */\nexport const pairsSumToZero = (l) => {\n    const seen = new Set();\n    for (const num of l) {\n        if (seen.has(-num)) {\n            return true;\n        }\n        seen.add(num);\n    }\n    return false;\n}\n",
            "/**\n * @param {number} x\n * @param {number} bas\n * @returns {string}\n */\nexport const changeBase = (x, bas) => {\n    if (x === 0) {\n        return \"0\";\n    }\n    let digits = \"\";\n    while (x > 0) {\n        digits += (x % bas).toString();\n        x = Math.floor(x / bas);\n    }\n    return digits.split(\"\").reverse().join(\"\");\n}\n",
            "/**\n * @param {number} a\n * @param {number} h\n * @returns {number}\n */\nexport const triangleArea = (a, h) => {\n    return a * h / 2.0;\n}\n",
            "export const fib4 = (n) => {\n    let fib = [0, 0, 2, 0];\n    for (let i = 4; i <= n; ++i) {\n        fib[i % 4] = fib[0] + fib[1] + fib[2] + fib[3];\n    }\n    return fib[n % 4];\n}\n",
            "/**\n * @param {Array<number>} l\n * @returns {number}\n */\nexport const median = (l) => {\n    let sl = [...l];\n    sl.sort((a, b) => a - b);\n    if (sl.length % 2 !== 0) {\n        return sl[Math.floor(sl.length / 2)];\n    } else {\n        return (sl[sl.length / 2] + sl[sl.length / 2 - 1]) / 2.0;\n    }\n}\n",
            "/**\n * @param {string} txt\n * @returns {boolean}\n */\nexport const isPalindrome = (txt) => {\n    return txt === txt.split('').reverse().join('');\n}\n",
            "/**\n * @param {number} n\n * @param {number} p\n * @returns {number}\n */\nexport const modp = (n, p) => {\n    let ret = 1;\n    for (let i = 0; i < n; ++i) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}\n",
            "/**\n * @param {string} s\n * @returns {string}\n */\nexport const encodeShift = (s) => {\n    let result = '';\n    for (let ch of s) {\n        result += String.fromCharCode(((ch.charCodeAt(0) - 'a'.charCodeAt(0) + 5) % 26) + 'a'.charCodeAt(0));\n    }\n    return result;\n}\n\n/**\n * @param {string} s\n * @returns {string}\n */\nexport const decodeShift = (s) => {\n    let result = '';\n    for (let ch of s) {\n        result += String.fromCharCode(((ch.charCodeAt(0) - 'a'.charCodeAt(0) + 21) % 26) + 'a'.charCodeAt(0));\n    }\n    return result;\n}\n",
            "/**\n * @param {string} txt\n * @returns {string}\n */\nexport const removeVowels = (txt) => {\n    const vowels = \"aeiouAEIOU\";\n    return Array.from(txt).filter(char => !vowels.includes(char)).join('');\n}\n",
            "/**\n * @param {Array<number>} l\n * @param {number} t\n * @returns {boolean}\n */\nexport const belowThreshold = (l, t) => {\n    return l.every(x => x < t);\n};\n",
            "/**\n * @param {number} x\n * @param {number} y\n * @returns {number}\n */\nexport const add = (x, y) => {\n    return x + y;\n}\n",
            "export const sameChars = (s0, s1) => {\n    const set0 = new Set(s0);\n    const set1 = new Set(s1);\n    if (set0.size !== set1.size) return false;\n    for (let char of set0) {\n        if (!set1.has(char)) return false;\n    }\n    return true;\n}\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const fib = (n) => {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n",
            "/**\n * @param {string} brackets\n * @returns {boolean}\n */\nexport const correctBracketing = (brackets) => {\n    let depth = 0;\n    for (let b of brackets) {\n        if (b === '<') {\n            depth += 1;\n        } else if (b === '>') {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n",
            "/**\n * @param {Array<number>} l\n * @returns {boolean}\n */\nexport const monotonic = (l) => {\n    let diff = [];\n    for (let i = 1; i < l.length; ++i) {\n        diff.push(l[i] - l[i - 1]);\n    }\n    return diff.every(x => x <= 0) || diff.every(x => x >= 0);\n}\n",
            "/**\n * @param {Array<number>} l1\n * @param {Array<number>} l2\n * @returns {Array<number>}\n */\nexport const common = (l1, l2) => {\n    const s1 = new Set(l1);\n    const s2 = new Set(l2);\n    const result = [];\n    for (let num of s1) {\n        if (s2.has(num)) {\n            result.push(num);\n        }\n    }\n    return result;\n}\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const largestPrimeFactor = (n) => {\n    let i = 2;\n    while (i * i <= n) {\n        if (n % i) {\n            i += 1;\n        } else {\n            n /= i;\n        }\n    }\n    return n;\n}\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const sumToN = (n) => {\n    return (n * (n + 1)) / 2;\n}\n",
            "/**\n * @param {string} brackets\n * @returns {boolean}\n */\nexport const correctBracketing = (brackets) => {\n    let depth = 0;\n    for (let b of brackets) {\n        if (b === '(') {\n            depth += 1;\n        } else if (b === ')') {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n",
            "/**\n * @param {Array<number>} xs\n * @returns {Array<number>}\n */\nexport const derivative = (xs) => {\n    let result = [];\n    for (let i = 1; i < xs.length; ++i) {\n        result.push(xs[i] * i);\n    }\n    return result;\n}\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const fibfib = (n) => {\n    if (n <= 1) return 0;\n    let a = 0, b = 0, c = 1;\n    while (n > 2) {\n        [a, b, c] = [b, c, a + b + c];\n        n -= 1;\n    }\n    return c;\n}\n",
            "/**\n * @param {string} s\n * @returns {number}\n */\nexport const vowelsCount = (s) => {\n    const vowels = \"aeiou\";\n    let cnt = 0;\n    for (let i = 0; i < s.length; ++i) {\n        if (vowels.includes(s[i].toLowerCase()) || (i === s.length - 1 && s[i].toLowerCase() === 'y')) {\n            ++cnt;\n        }\n    }\n    return cnt;\n}\n",
            "/**\n * @param {number} x\n * @param {number} shift\n * @returns {string}\n */\nexport const circularShift = (x, shift) => {\n    const x_str = x.toString();\n    if (shift > x_str.length) {\n        return x_str.split('').reverse().join('');\n    } else {\n        return x_str.slice(-shift) + x_str.slice(0, -shift);\n    }\n}\n",
            "/**\n * @param {string} s\n * @returns {number}\n */\nexport const digitSum = (s) => {\n    let sum = 0;\n    for (let c of s) {\n        if (c >= 'A' && c <= 'Z') {\n            sum += c.charCodeAt(0);\n        }\n    }\n    return sum;\n}\n",
            "/**\n * @param {string} s\n * @param {number} n\n * @returns {number}\n */\nexport const fruitDistribution = (s, n) => {\n    const words = s.split(' ');\n    const applesIndex = words.indexOf(\"apples\");\n    const orangesIndex = words.indexOf(\"oranges\");\n    const apples = parseInt(words[applesIndex - 1], 10);\n    const oranges = parseInt(words[orangesIndex - 1], 10);\n    return n - apples - oranges;\n}\n",
            "/**\n * @param {Array<number>} arr\n * @returns {Array<number>}\n */\nexport const pluck = (arr) => {\n    let evens = [];\n    for (let n of arr) {\n        if (n % 2 === 0) {\n            evens.push(n);\n        }\n    }\n    if (evens.length === 0) {\n        return [];\n    }\n    let minEven = Math.min(...evens);\n    let index = arr.indexOf(minEven);\n    return [minEven, index];\n}\n",
            "/**\n * @param {Array<number>} lst\n * @returns {number}\n */\nexport const search = (lst) => {\n    const freqs = {};\n    for (const n of lst) {\n        if (freqs[n] === undefined) {\n            freqs[n] = 0;\n        }\n        freqs[n]++;\n    }\n    const goodVals = [];\n    for (const key in freqs) {\n        const kv = { first: parseInt(key, 10), second: freqs[key] };\n        if (kv.second >= kv.first) {\n            goodVals.push(kv.first);\n        }\n    }\n    return goodVals.length > 0 ? Math.max(...goodVals) : -1;\n}\n",
            "/**\n * @param {Array<number>} lst\n * @returns {Array<number>}\n */\nexport const strangeSortList = (lst) => {\n    let sl = [...lst];\n    sl.sort((a, b) => a - b);\n    let result = [];\n    let left = 0, right = sl.length - 1;\n    while (left <= right) {\n        result.push(sl[left]);\n        left += 1;\n        if (left <= right) {\n            result.push(sl[right]);\n            right -= 1;\n        }\n    }\n    return result;\n}\n",
            "/**\n * @param {number} a\n * @param {number} b\n * @param {number} c\n * @returns {number}\n */\nexport const triangleArea = (a, b, c) => {\n    if (a + b > c && a + c > b && b + c > a) {\n        let s = (a + b + c) / 2.0;\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "/**\n * @param {Array<number>} q\n * @param {number} w\n * @returns {boolean}\n */\nexport const willItFly = (q, w) => {\n    if (q.length === 0) {\n        return false;\n    }\n    let is_palin = true;\n    for (let i = 0; i < q.length / 2; ++i) {\n        if (q[i] !== q[q.length - i - 1]) {\n            is_palin = false;\n            break;\n        }\n    }\n    const total = q.reduce((acc, val) => acc + val, 0);\n    return is_palin && total <= w;\n}\n",
            "export const smallestChange = (arr) => {\n    let ans = 0;\n    for (let i = 0; i < arr.length / 2; ++i) {\n        if (arr[i] !== arr[arr.length - i - 1]) {\n            ++ans;\n        }\n    }\n    return ans;\n}\n",
            "/**\n * @param {Array<string>} lst1\n * @param {Array<string>} lst2\n * @returns {Array<string>}\n */\nexport const totalMatch = (lst1, lst2) => {\n    let cnt1 = 0;\n    let cnt2 = 0;\n\n    for (const s of lst1) {\n        cnt1 += s.length;\n    }\n\n    for (const s of lst2) {\n        cnt2 += s.length;\n    }\n\n    return cnt1 <= cnt2 ? lst1 : lst2;\n}\n",
            "/**\n * @param {number} a\n * @returns {boolean}\n */\nexport const isMultiplyPrime = (a) => {\n    const is_prime = (n) => {\n        if (n < 2) return false;\n        for (let i = 2; i <= Math.floor(Math.sqrt(n)); ++i) {\n            if (n % i === 0) return false;\n        }\n        return true;\n    };\n\n    let cnt = 0;\n    for (let i = 2; i <= a; ++i) {\n        if (is_prime(i)) {\n            while (a % i === 0) {\n                ++cnt;\n                a /= i;\n            }\n        }\n    }\n    return cnt === 3;\n}\n",
            "/**\n * @param {number} x\n * @param {number} n\n * @returns {boolean}\n */\nexport const isSimplePower = (x, n) => {\n    if (n < 2) {\n        return x === n;\n    }\n    let tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp === x;\n};\n",
            "/**\n * @param {number} a\n * @returns {boolean}\n */\nexport const isCube = (a) => {\n    a = Math.abs(a);\n    let root = Math.round(Math.pow(a, 1.0 / 3.0));\n    return Math.pow(root, 3) === a;\n}\n",
            "/**\n * @param {string} num\n * @returns {number}\n */\nexport const hexKey = (num) => {\n    let count = 0;\n    for (let x of num) {\n        if (x === '2' || x === '3' || x === '5' || x === '7' || x === 'B' || x === 'D') {\n            count++;\n        }\n    }\n    return count;\n}\n",
            "/**\n * @param {number} dec\n * @returns {string}\n */\nexport const decimalToBinary = (dec) => {\n    binary = dec.toString(2);\n    return `db${binary}db`;\n}\n",
            "/**\n * @param {string} s\n * @returns {boolean}\n */\nexport const isHappy = (s) => {\n    if (s.length < 3) {\n        return false;\n    }\n    for (let i = 0; i < s.length - 2; ++i) {\n        if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "export const numericalLetterGrade = (grades) => {\n    const result = [];\n    for (let g of grades) {\n        if (g === 4.0) {\n            result.push(\"A+\");\n        } else if (g > 3.7) {\n            result.push(\"A\");\n        } else if (g > 3.3) {\n            result.push(\"A-\");\n        } else if (g > 3.0) {\n            result.push(\"B+\");\n        } else if (g > 2.7) {\n            result.push(\"B\");\n        } else if (g > 2.3) {\n            result.push(\"B-\");\n        } else if (g > 2.0) {\n            result.push(\"C+\");\n        } else if (g > 1.7) {\n            result.push(\"C\");\n        } else if (g > 1.3) {\n            result.push(\"C-\");\n        } else if (g > 1.0) {\n            result.push(\"D+\");\n        } else if (g > 0.7) {\n            result.push(\"D\");\n        } else if (g > 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n",
            "/**\n * @param {string} s\n * @returns {boolean}\n */\nexport const primeLength = (s) => {\n    const length = s.length;\n    if (length < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(length)); ++i) {\n        if (length % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const startsOneEnds = (n) => {\n    if (n === 1) {\n        return 1;\n    }\n    return 2 * 9 * Math.pow(10, n - 2);\n}\n",
            "/**\n * @param {number} n\n * @returns {string}\n */\nexport const solve = (n) => {\n    const digitsSum = String(n).split('').reduce((sum, digit) => sum + parseInt(digit, 10), 0);\n    return digitsSum.toString(2);\n}\n",
            "/**\n * @param {Array<number>} lst\n * @returns {number}\n */\nexport const add = (lst) => {\n    let result = 0;\n    for (let i = 1; i < lst.length; i += 2) {\n        if (lst[i] % 2 === 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "/**\n * @param {string} s\n * @returns {string}\n */\nexport const antiShuffle = (s) => {\n    let result = '';\n    const words = s.split(' ');\n\n    for (let word of words) {\n        const sortedWord = word.split('').sort().join('');\n        if (result !== '') {\n            result += ' ';\n        }\n        result += sortedWord;\n    }\n\n    return result;\n}\n",
            "export const getRow = (lst, x) => {\n    const coords = [];\n    for (let i = 0; i < lst.length; ++i) {\n        for (let j = 0; j < lst[i].length; ++j) {\n            if (lst[i][j] === x) {\n                coords.push([i, j]);\n            }\n        }\n    }\n    coords.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n    return coords;\n}\n",
            "/**\n * @param {Array<number>} arr\n * @returns {Array<number>}\n */\nexport const sortArray = (arr) => {\n    if (arr.length === 0) {\n        return [];\n    }\n    if ((arr[0] + arr[arr.length - 1]) % 2 === 0) {\n        let sortedArr = [...arr];\n        sortedArr.sort((a, b) => b - a);\n        return sortedArr;\n    } else {\n        let sortedArr = [...arr];\n        sortedArr.sort((a, b) => a - b);\n        return sortedArr;\n    }\n}\n",
            "/**\n * @param {string} s\n * @returns {string}\n */\nexport const encrypt = (s) => {\n    let result = '';\n    for (let char of s) {\n        let shifted = char.charCodeAt(0) + 4;\n        if (shifted > 'z'.charCodeAt(0)) {\n            shifted -= 26;\n        }\n        result += String.fromCharCode(shifted);\n    }\n    return result;\n}\n",
            "export const nextSmallest = (lst) => {\n    const sl = new Set(lst);\n    if (sl.size < 2) {\n        return null;\n    }\n    const arr = Array.from(sl);\n    arr.sort((a, b) => a - b);\n    return arr[1];\n}\n",
            "/**\n * @param {string} s\n * @returns {number}\n */\nexport const isBored = (s) => {\n    const sentences = [];\n    const ss = new String(s);\n    let sentence;\n\n    while ((sentence = ss.match(/^[^.!?]*[.!?]/)) !== null) {\n        sentences.push(sentence[0].slice(0, -1));\n        s = s.slice(sentence[0].length);\n    }\n\n    if (s.length > 0) {\n        sentences.push(s);\n    }\n\n    let count = 0;\n    for (const sentence of sentences) {\n        let trimmedSentence = '';\n        let firstSpace = false;\n        for (let c of sentence) {\n            if (!firstSpace && c === ' ') {\n                continue;\n            }\n            firstSpace = true;\n            trimmedSentence += c;\n        }\n\n        if (trimmedSentence.length >= 2 && trimmedSentence.startsWith(\"I \")) {\n            count++;\n        }\n    }\n\n    return count;\n}\n",
            "/**\n * @param {*} x\n * @param {*} y\n * @param {*} z\n * @returns {boolean}\n */\nexport const anyInt = (x, y, z) => {\n    if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n        if ((x + y === z) || (x + z === y) || (y + z === x)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param {string} message\n * @returns {string}\n */\nexport const encode = (message) => {\n    const vowels = \"aeiouAEIOU\";\n    let result = '';\n    for (const ch of message) {\n        if (/^[a-zA-Z]$/.test(ch)) {\n            let ch1 = /[a-z]/.test(ch) ? ch.toUpperCase() : ch.toLowerCase();\n            if (vowels.includes(ch1)) {\n                ch1 = String.fromCharCode(ch1.charCodeAt(0) + 2);\n            }\n            result += ch1;\n        } else {\n            result += ch;\n        }\n    }\n    return result;\n}\n",
            "/**\n * @param {Array<number>} lst\n * @returns {number}\n */\nexport const skjkasdkd = (lst) => {\n    const is_prime = (n) => {\n        if (n < 2) return false;\n        for (let i = 2; i <= Math.floor(Math.sqrt(n)); ++i) {\n            if (n % i === 0) return false;\n        }\n        return true;\n    };\n\n    const primes = lst.filter(is_prime);\n    if (primes.length === 0) return 0;\n\n    const largest = Math.max(...primes);\n    let sum = 0;\n    while (largest > 0) {\n        sum += largest % 10;\n        largest = Math.floor(largest / 10);\n    }\n    return sum;\n}\n",
            "/**\n * @param {Map<string, string>} d\n * @returns {boolean}\n */\nexport const checkDictCase = (d) => {\n    if (d.size === 0) {\n        return false;\n    }\n    \n    let allLower = true;\n    let allUpper = true;\n    \n    for (const [key] of d) {\n        for (let c of key) {\n            if (!c.toLowerCase() === c) {\n                allLower = false;\n            }\n            if (!c.toUpperCase() === c) {\n                allUpper = false;\n            }\n        }\n        if (!allLower && !allUpper) {\n            return false;\n        }\n    }\n    \n    return allLower || allUpper;\n}\n",
            "/**\n * @param {number} n\n * @returns {Array<number>}\n */\nexport const countUpTo = (n) => {\n    let primes = [];\n    for (let num = 2; num < n; ++num) {\n        let isPrime = true;\n        for (const p of primes) {\n            if (num % p === 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            primes.push(num);\n        }\n    }\n    return primes;\n}\n",
            "/**\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */\nexport const multiply = (a, b) => {\n    return Math.abs(a % 10) * Math.abs(b % 10);\n}\n",
            "/**\n * @param {string} s\n * @returns {number}\n */\nexport const countUpper = (s) => {\n    const vowels = \"AEIOU\";\n    let count = 0;\n    for (let i = 0; i < s.length; ++i) {\n        if (i % 2 === 0 && vowels.includes(s[i])) {\n            ++count;\n        }\n    }\n    return count;\n}\n",
            "/**\n * @param {string} value\n * @returns {number}\n */\nexport const closestInteger = (value) => {\n    let num = parseFloat(value);\n    if (num >= 0) {\n        return Math.floor(num + 0.5);\n    } else {\n        return Math.ceil(num - 0.5);\n    }\n}\n",
            "/**\n * @param {number} n\n * @returns {Array<number>}\n */\nexport const makeAPile = (n) => {\n    const pile = [];\n    for (let i = 0; i < n; ++i) {\n        pile.push(n + 2 * i);\n    }\n    return pile;\n}\n",
            "/**\n * @param {string} s\n * @returns {Array<string>}\n */\nexport const wordsString = (s) => {\n    return s.split(/[, ]+/).filter(w => w.length > 0);\n}\n",
            "/**\n * @param {number} x\n * @param {number} y\n * @returns {number}\n */\nexport const chooseNum = (x, y) => {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 === 0) {\n        return y;\n    }\n    return y - 1;\n};\n",
            "/**\n * @param {number} n\n * @param {number} m\n * @returns {?string}\n */\nexport const roundedAvg = (n, m) => {\n    if (n > m) {\n        return null;\n    }\n    const r_avg = Math.round((m + n) / 2.0);\n    return r_avg.toString(2);\n}\n",
            "/**\n * @param {Array<number>} x\n * @returns {Array<number>}\n */\nexport const uniqueDigits = (x) => {\n    const all_digits_odd = (s) => {\n        for (let digit of s) {\n            if ((digit - '0') % 2 === 0) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    let result = [];\n    for (let num of x) {\n        if (all_digits_odd(num.toString())) {\n            result.push(num);\n        }\n    }\n    result.sort((a, b) => a - b);\n    return result;\n}\n",
            "/**\n * @param {Array<number>} arr\n * @returns {Array<string>}\n */\nexport const byLength = (arr) => {\n    const digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    const sorted_arr = [];\n    \n    for (const x of arr) {\n        if (x >= 1 && x <= 9) {\n            sorted_arr.push(x);\n        }\n    }\n    \n    sorted_arr.sort((a, b) => b - a);\n    \n    const result = [];\n    for (const x of sorted_arr) {\n        result.push(digit_names[x - 1]);\n    }\n    \n    return result;\n}\n",
            "    let nums = new Array(n).fill(0);\n    for (let i = 0; i < n; ++i) {\n        nums[i] = i + 1;\n    }\n    \n    let result = [];\n    for (let i = 0; i < n; ++i) {\n        if ((i + 1) % 2 !== 0) {\n            let sum = nums.slice(0, i + 1).reduce((acc, val) => acc + val, 0);\n            result.push(sum);\n        } else {\n            let product = nums.slice(0, i + 1).reduce((acc, val) => acc * val, 1);\n            result.push(product);\n        }\n    }\n    \n    return result;\n}\n",
            "/**\n * @param {number} n\n * @returns {Array<number>}\n */\nexport const evenOddPalindrome = (n) => {\n    const cnt = [0, 0];\n    for (let i = 1; i <= n; ++i) {\n        if (is_palindrome(i.toString())) {\n            cnt[i % 2] += 1;\n        }\n    }\n    return cnt;\n};\n\nconst is_palindrome = (txt) => {\n    return txt === txt.split('').reverse().join('');\n};\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nconst digitsSum = (n) => {\n    const nStr = Math.abs(n).toString();\n    return n >= 0 \n        ? Array.from(nStr).reduce((sum, d) => sum + parseInt(d, 10), 0)\n        : parseInt(nStr[0], 10) * 2 + digitsSum(Math.abs(n));\n};\n\n/**\n * @param {Array<number>} arr\n * @returns {number}\n */\nexport const countNums = (arr) => {\n    return arr.filter(n => digitsSum(n) > 0).length;\n};\n",
            "export const moveOneBall = (arr) => {\n    if (arr.length === 0) {\n        return true;\n    }\n    const sortedArr = [...arr].sort((a, b) => a - b);\n    for (let i = 0; i < arr.length; ++i) {\n        if (arr.slice(i).every((value, index) => value === sortedArr[index + i]) &&\n            arr.slice(0, i).every((value, index) => value === sortedArr[arr.length - i + index])) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param {Array<number>} lst1\n * @param {Array<number>} lst2\n * @returns {string}\n */\nexport const canExchange = (lst1, lst2) => {\n    let odd_cnt = 0;\n    for (let num of lst1) {\n        if (num % 2 !== 0) {\n            odd_cnt++;\n        }\n    }\n    let even_cnt = 0;\n    for (let num of lst2) {\n        if (num % 2 === 0) {\n            even_cnt++;\n        }\n    }\n    return (even_cnt >= odd_cnt) ? \"YES\" : \"NO\";\n}\n",
            "export const histogram = (test) => {\n    const freq = new Map();\n    const words = test.split(/\\s+/);\n    for (const word of words) {\n        if (word.trim() !== '') {\n            freq.set(word, (freq.get(word) || 0) + 1);\n        }\n    }\n    const result = new Map();\n    let max_freq = 0;\n    for (const [key, value] of freq.entries()) {\n        if (value > max_freq) {\n            max_freq = value;\n        }\n    }\n    for (const [key, value] of freq.entries()) {\n        if (value === max_freq) {\n            result.set(key, value);\n        }\n    }\n    return result;\n}\n",
            "export const reverseDelete = (s, c) => {\n    const isPalindrome = (str) => {\n        return str === str.split('').reverse().join('');\n    };\n\n    let s1 = '';\n    for (let ch of s) {\n        if (!c.includes(ch)) {\n            s1 += ch;\n        }\n    }\n    return [s1, isPalindrome(s1) ? \"yes\" : \"no\"];\n}\n",
            "/**\n * @param {Array<string>} lst\n * @returns {Array<string>}\n */\nexport const oddCount = (lst) => {\n    const result = [];\n    for (const num of lst) {\n        const n = [...num].reduce((acc, d) => acc + (parseInt(d) % 2 === 1), 0);\n        const rs = \"the number of odd elements in the string i of the input.\";\n        result.push(rs.replace(\"i\", String(n)));\n    }\n    return result;\n}\n",
            "export const minSubArraySum = (nums) => {\n    let min_sum = 0;\n    let cur_sum = 0;\n    for (let n of nums) {\n        cur_sum = Math.min(cur_sum + n, 0);\n        min_sum = Math.min(cur_sum, min_sum);\n    }\n    if (min_sum === 0) {\n        min_sum = Math.min(...nums);\n    }\n    return min_sum;\n}\n",
            "/**\n * @param {Array<Array<number>>} grid\n * @param {number} capacity\n * @returns {number}\n */\nexport const maxFill = (grid, capacity) => {\n    return grid.reduce((total, arr) => total + Math.ceil(arr.reduce((sum, num) => sum + num, 0) / capacity), 0);\n}\n",
            "/**\n * @param {Array<number>} arr\n * @returns {Array<number>}\n */\nexport const sortArray = (arr) => {\n    const countOnes = (num) => {\n        return num.toString(2).split('0').join('').length;\n    };\n\n    let sortedArr = [...arr];\n    sortedArr.sort((a, b) => {\n        let onesA = countOnes(a);\n        let onesB = countOnes(b);\n        if (onesA === onesB) {\n            return a - b;\n        }\n        return onesA - onesB;\n    });\n\n    return sortedArr;\n}\n",
            "/**\n * @param {string} s\n * @param {number} n\n * @returns {Array<string>}\n */\nexport const selectWords = (s, n) => {\n    const consonants = \"bcdfghjklmnpqrstvwxyz\";\n    let words = [];\n    let word = \"\";\n\n    for (let c of s) {\n        if (/\\s/.test(c)) {\n            if (word.length > 0) {\n                words.push(word);\n                word = \"\";\n            }\n        } else {\n            word += c;\n        }\n    }\n\n    if (word.length > 0) {\n        words.push(word);\n    }\n\n    let result = [];\n    for (let w of words) {\n        let consonantCount = 0;\n        for (let c of w) {\n            let lowerC = c.toLowerCase();\n            if (consonants.includes(lowerC)) {\n                consonantCount++;\n            }\n        }\n        if (consonantCount === n) {\n            result.push(w);\n        }\n    }\n\n    return result;\n}\n",
            "/**\n * @param {string} word\n * @returns {string}\n */\nexport const getClosestVowel = (word) => {\n    const vowels = \"aeiouAEIOU\";\n    for (let i = word.length - 2; i > 0; --i) {\n        if (vowels.includes(word[i]) && !vowels.includes(word[i - 1]) && !vowels.includes(word[i + 1])) {\n            return word[i];\n        }\n    }\n    return \"\";\n}\n",
            "const check = (s) => {\n    let depth = 0;\n    for (let ch of s) {\n        if (ch === '(') {\n            depth += 1;\n        } else {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n};\n\n/**\n * @param {Array<string>} lst\n * @returns {string}\n */\nexport const matchParens = (lst) => {\n    let s1 = lst[0] + lst[1];\n    let s2 = lst[1] + lst[0];\n    return check(s1) || check(s2) ? \"Yes\" : \"No\";\n};\n",
            "/**\n * @param {Array<number>} arr\n * @param {number} k\n * @returns {Array<number>}\n */\nexport const maximum = (arr, k) => {\n    if (k === 0) {\n        return [];\n    }\n    let sortedArr = [...arr];\n    sortedArr.sort((a, b) => a - b);\n    return sortedArr.slice(sortedArr.length - k);\n}\n",
            "/**\n * @param {Array<number>} lst\n * @returns {number}\n */\nexport const solution = (lst) => {\n    let sum = 0;\n    for (let i = 0; i < lst.length; ++i) {\n        if (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n",
            "/**\n * @param {Array<number>} arr\n * @param {number} k\n * @returns {number}\n */\nexport const addElements = (arr, k) => {\n    let sum = 0;\n    for (let i = 0; i < k && i < arr.length; ++i) {\n        if (arr[i].toString().length <= 2) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n",
            "/**\n * @param {number} n\n * @returns {Array<number>}\n */\nexport const getOddCollatz = (n) => {\n    let collatz = [1];\n    while (n !== 1) {\n        if (n % 2 !== 0) {\n            collatz.push(n);\n            n = 3 * n + 1;\n        } else {\n            n = Math.floor(n / 2);\n        }\n    }\n    collatz.sort((a, b) => a - b);\n    return collatz;\n}\n",
            "/**\n * @param {string} date\n * @returns {boolean}\n */\nexport const validDate = (date) => {\n    if (date.length !== 10 || date[2] !== '-' || date[5] !== '-') {\n        return false;\n    }\n    let m = parseInt(date.substr(0, 2), 10);\n    let d = parseInt(date.substr(3, 2), 10);\n    if ((m === 1 || m === 3 || m === 5 || m === 7 || m === 8 || m === 10 || m === 12) && d >= 1 && d <= 31) {\n        return true;\n    }\n    if ((m === 4 || m === 6 || m === 9 || m === 11) && d >= 1 && d <= 30) {\n        return true;\n    }\n    if (m === 2 && d >= 1 && d <= 29) {\n        return true;\n    }\n    return false;\n}\n",
            "/**\n * @param {string} txt\n * @returns {Array<string>}\n */\nexport const splitWords = (txt) => {\n    let result = [];\n    if (txt.includes(' ')) {\n        let start = 0, end = 0;\n        while ((end = txt.indexOf(' ', start)) !== -1) {\n            result.push(txt.substring(start, end));\n            start = end + 1;\n        }\n        result.push(txt.substring(start));\n    } else if (txt.includes(',')) {\n        let start = 0, end = 0;\n        while ((end = txt.indexOf(',', start)) !== -1) {\n            result.push(txt.substring(start, end));\n            start = end + 1;\n        }\n        result.push(txt.substring(start));\n    } else {\n        let count = 0;\n        for (let c of txt) {\n            if (c >= 'a' && c <= 'z' && c.charCodeAt(0) % 2 === 0) {\n                count++;\n            }\n        }\n        result.push(count.toString());\n    }\n    return result;\n}\n",
            "/**\n * @param {Array<number>} lst\n * @returns {boolean}\n */\nexport const isSorted = (lst) => {\n    if (!lst.every((value, index, array) => !index || value >= array[index - 1])) {\n        return false;\n    }\n    const freq = {};\n    for (let i of lst) {\n        freq[i] = (freq[i] || 0) + 1;\n    }\n    return Object.values(freq).every(count => count <= 2);\n}\n",
            "/**\n * @param {Array<number>} interval1\n * @param {Array<number>} interval2\n * @returns {string}\n */\nexport const intersection = (interval1, interval2) => {\n    const is_prime = (n) => {\n        if (n < 2) return false;\n        for (let i = 2; i <= Math.sqrt(n); ++i) {\n            if (n % i === 0) return false;\n        }\n        return true;\n    };\n\n    let l = Math.max(interval1[0], interval2[0]);\n    let r = Math.min(interval1[1], interval2[1]);\n    let length = r - l;\n    return (length > 0 && is_prime(length)) ? \"YES\" : \"NO\";\n};\n",
            "/**\n * @param {Array<number>} arr\n * @returns {?number}\n */\nexport const prodSigns = (arr) => {\n    if (arr.length === 0) {\n        return null;\n    }\n    if (arr.includes(0)) {\n        return 0;\n    }\n    let sign = arr.filter(n => n < 0).length % 2 === 1 ? -1 : 1;\n    return sign * arr.reduce((sum, n) => sum + Math.abs(n), 0);\n}\n",
            "/**\n * @param {Array<Array<number>>} grid\n * @param {number} k\n * @returns {Array<number>}\n */\nexport const minPath = (grid, k) => {\n    const n = grid.length;\n    let min_val = n * n + 1;\n    for (let i = 0; i < n; ++i) {\n        for (let j = 0; j < n; ++j) {\n            if (grid[i][j] === 1) {\n                const temp = [];\n                if (i !== 0) {\n                    temp.push(grid[i - 1][j]);\n                }\n                if (j !== 0) {\n                    temp.push(grid[i][j - 1]);\n                }\n                if (i !== n - 1) {\n                    temp.push(grid[i + 1][j]);\n                }\n                if (j !== n - 1) {\n                    temp.push(grid[i][j + 1]);\n                }\n                min_val = Math.min(...temp);\n            }\n        }\n    }\n    const result = [];\n    for (let i = 0; i < k; ++i) {\n        result.push(i % 2 === 0 ? 1 : min_val);\n    }\n    return result;\n}\n",
            "/**\n * @param {number} n\n * @returns {Array<number>}\n */\nexport const tri = (n) => {\n    if (n === 0) {\n        return [1];\n    }\n    let seq = [1, 3];\n    for (let i = 2; i <= n; ++i) {\n        if (i % 2 === 0) {\n            seq.push(i / 2.0 + 1);\n        } else {\n            seq.push(seq[i - 1] + seq[i - 2] + (i + 3) / 2.0);\n        }\n    }\n    return seq.map(x => Math.round(x));\n}\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const digits = (n) => {\n    let product = 1;\n    let hasOdd = false;\n    while (n > 0) {\n        let digit = n % 10;\n        if (digit % 2 == 1) {\n            product *= digit;\n            hasOdd = true;\n        }\n        n = Math.floor(n / 10);\n    }\n    return hasOdd ? product : 0;\n}\n",
            "/**\n * @param {string} s\n * @returns {boolean}\n */\nexport const isNested = (s) => {\n    let open_idx = [];\n    let close_idx = [];\n    for (let i = 0; i < s.length; ++i) {\n        if (s[i] === '[') {\n            open_idx.push(i);\n        } else if (s[i] === ']') {\n            close_idx.push(i);\n        }\n    }\n    close_idx.reverse();\n    let cnt = 0;\n    let i = 0;\n    let l = close_idx.length;\n    for (let idx of open_idx) {\n        if (i < l && idx < close_idx[i]) {\n            ++cnt;\n            ++i;\n        }\n    }\n    return cnt >= 2;\n}\n",
            "/**\n * @param {Array<number>} lst\n * @returns {number}\n */\nexport const sumSquares = (lst) => {\n    let sum = 0;\n    for (let n of lst) {\n        sum += Math.pow(Math.ceil(n), 2);\n    }\n    return sum;\n}\n",
            "/**\n * @param {string} txt\n * @returns {boolean}\n */\nexport const checkIfLastCharIsALetter = (txt) => {\n    if (txt.length === 0) {\n        return false;\n    }\n    const lastSpace = txt.lastIndexOf(' ');\n    const last = txt.substring(lastSpace + 1);\n    return last.length === 1 && /[a-zA-Z]/.test(last[0]);\n}\n",
            "export const canArrange = (arr) => {\n    if (arr.length <= 1) {\n        return -1;\n    }\n    let idx = [];\n    for (let i = 1; i < arr.length; ++i) {\n        if (arr[i] < arr[i - 1]) {\n            idx.push(i);\n        }\n    }\n    return idx.length > 0 ? Math.max(...idx) : -1;\n}\n",
            "export const largestSmallestIntegers = (lst) => {\n    let neg = [];\n    let pos = [];\n    \n    for (let i of lst) {\n        if (i < 0) {\n            neg.push(i);\n        } else if (i > 0) {\n            pos.push(i);\n        }\n    }\n    \n    const max_neg = neg.length > 0 ? Math.max(...neg) : null;\n    const min_pos = pos.length > 0 ? Math.min(...pos) : null;\n    \n    return [max_neg, min_pos];\n}\n",
            "/**\n * @param {*} a\n * @param {*} b\n * @returns {?number}\n */\nexport const compareOne = (a, b) => {\n    const anyToReal = (o) => {\n        if (typeof o === 'string') {\n            return parseFloat(o.replace(',', '.'));\n        } else if (typeof o === 'number') {\n            return o;\n        }\n        throw new Error(\"Type Error\");\n    };\n\n    const a1 = anyToReal(a);\n    const b1 = anyToReal(b);\n    if (a1 === b1) {\n        return null;\n    } else if (a1 > b1) {\n        return a1;\n    } else {\n        return b1;\n    }\n}\n",
            "/**\n * @param {number} n\n * @returns {boolean}\n */\nexport const isEqualToSumEven = (n) => {\n    return n % 2 === 0 && n >= 8;\n};\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const specialFactorial = (n) => {\n    let fact = 1;\n    let result = 1;\n    for (let i = 1; i <= n; ++i) {\n        fact *= i;\n        result *= fact;\n    }\n    return result;\n}\n",
            "/**\n * @param {string} txt\n * @returns {string}\n */\nexport const fixSpaces = (txt) => {\n    return txt.replace(/\\s{3,}/g, \"-\").replace(/\\s/g, \"_\");\n}\n",
            "/**\n * @param {string} fileName\n * @returns {string}\n */\nexport const fileNameCheck = (fileName) => {\n    const suf = [\"txt\", \"exe\", \"dll\"];\n    const lst = fileName.split(\".\");\n    if (lst.length !== 2 || !suf.includes(lst[1]) || lst[0].length === 0 || !/^[a-zA-Z]/.test(lst[0][0]) || (lst[0].match(/\\d/g) || []).length > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n",
            "/**\n * @param {Array<number>} lst\n * @returns {number}\n */\nexport const sumSquares = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; ++i) {\n        if (i % 3 === 0) {\n            result += Math.pow(lst[i], 2);\n        } else if (i % 4 === 0) {\n            result += Math.pow(lst[i], 3);\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "export const wordsInSentence = (sentence) => {\n    let result = '';\n    const words = sentence.split(' ');\n    for (const word of words) {\n        const length = word.length;\n        let isPrime = true;\n        if (length < 2) {\n            continue;\n        }\n        for (let i = 2; i <= Math.sqrt(length); ++i) {\n            if (length % i === 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            if (result !== '') {\n                result += ' ';\n            }\n            result += word;\n        }\n    }\n    return result;\n};\n",
            "```js\n/**\n * @param {string} x\n * @param {string} n\n * @returns {boolean}\n */\nexport const simplify = (x, n) => {\n    const slash_pos_x = x.indexOf('/');\n    const slash_pos_n = n.indexOf('/');\n    const num_x = parseInt(x.substring(0, slash_pos_x), 10);\n    const den_x = parseInt(x.substring(slash_pos_x + 1), 10);\n    const num_n = parseInt(n.substring(0, slash_pos_n), 10);\n    const den_n = parseInt(n.substring(slash_pos_n + 1), 10);\n    const num = num_x * num_n;\n    const den = den_x * den_n;\n    return num % den === 0;\n}\n```",
            "/**\n * @param {number} n\n * @returns {number}\n */\nconst digitsSum = (n) => {\n    const nStr = Math.abs(n).toString();\n    let sum = 0;\n    for (let char of nStr) {\n        sum += parseInt(char, 10);\n    }\n    return n < 0 ? (parseInt(nStr.slice(0, 2), 10) * 2) + digitsSum(Math.abs(n)) : sum;\n};\n\n/**\n * @param {Array<number>} nums\n * @returns {Array<number>}\n */\nexport const orderByPoints = (nums) => {\n    return nums.sort((a, b) => digitsSum(a) - digitsSum(b));\n};\n",
            "export const specialFilter = (nums) => {\n    const odds = \"13579\";\n    let count = 0;\n    for (let n of nums) {\n        if (n > 10 && n % 2 == 1 && odds.includes(n.toString()[0])) {\n            count++;\n        }\n    }\n    return count;\n}\n",
            "/**\n * @param {number} n\n * @returns {number}\n */\nexport const getMaxTriples = (n) => {\n    let c = [0, 0, 0];\n    for (let i = 1; i <= n; ++i) {\n        let a = i * i - i + 1;\n        c[a % 3]++;\n    }\n    return c[0] * c[1] * c[2] + ((c[0] * (c[0] - 1) * (c[0] - 2)) + (c[1] * (c[1] - 1) * (c[1] - 2)) + (c[2] * (c[2] - 1) * (c[2] - 2))) / 6;\n}\n",
            "/**\n * @param {string} planet1\n * @param {string} planet2\n * @returns {Array<string>}\n */\nexport const bf = (planet1, planet2) => {\n    const names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if (!names.includes(planet1) || !names.includes(planet2)) {\n        return [];\n    }\n    let l = names.indexOf(planet1);\n    let r = names.indexOf(planet2);\n    if (l > r) {\n        [l, r] = [r, l];\n    }\n    if (l === r) {\n        return [];\n    }\n    return names.slice(l + 1, r);\n}\n",
            "/**\n * @param {Array<string>} lst\n * @returns {Array<string>}\n */\nexport const sortedListSum = (lst) => {\n    let result = [];\n    for (const s of lst) {\n        if (s.length % 2 === 0) {\n            result.push(s);\n        }\n    }\n    result.sort((a, b) => {\n        return a.length - b.length || a.localeCompare(b);\n    });\n    return result;\n}\n",
            "export const xOrY = (n, x, y) => {\n    if (n < 2) {\n        return y;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)); ++i) {\n        if (n % i === 0) {\n            return y;\n        }\n    }\n    return x;\n}\n",
            "/**\n * @param {Array<number>} lst\n * @returns {number}\n */\nexport const doubleTheDifference = (lst) => {\n    let result = 0;\n    for (const n of lst) {\n        if (n >= 0 && n % 2 === 1.0) {\n            result += n * n;\n        }\n    }\n    return result;\n}\n",
            "export const compare = (game, guess) => {\n    const result = [];\n    for (let i = 0; i < game.length; ++i) {\n        result.push(Math.abs(game[i] - guess[i]));\n    }\n    return result;\n}\n",
            "export const strongestExtension = (className, extensions) => {\n    let max_s = -1;\n    let max_ext = \"\";\n    for (const ext of extensions) {\n        let upper = 0;\n        let lower = 0;\n        for (let c of ext) {\n            if (c >= 'A' && c <= 'Z') upper++;\n            if (c >= 'a' && c <= 'z') lower++;\n        }\n        let s = upper - lower;\n        if (s > max_s) {\n            max_s = s;\n            max_ext = ext;\n        }\n    }\n    return className + \".\" + max_ext;\n}\n",
            "/**\n * @param {string} a\n * @param {string} b\n * @returns {boolean}\n */\nexport const cycpatternCheck = (a, b) => {\n    if (a.length < b.length) {\n        return false;\n    }\n    for (let i = 0; i < b.length; ++i) {\n        let rotated = b.substring(i) + b.substring(0, i);\n        if (a.includes(rotated)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param {number} num\n * @returns {Array<number>}\n */\nexport const evenOddCount = (num) => {\n    const ds = Math.abs(num).toString();\n    let even = 0;\n    for (const d of ds) {\n        if ((parseInt(d, 10)) % 2 === 0) {\n            even++;\n        }\n    }\n    return [even, ds.length - even];\n}\n",
            "/**\n * @param {number} num\n * @returns {string}\n */\nexport const intToMiniRoman = (num) => {\n    const values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    const numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    let res = \"\";\n    for (let i = 0; i < values.length; ++i) {\n        while (num >= values[i]) {\n            res += numerals[i];\n            num -= values[i];\n        }\n    }\n    return res;\n}\n",
            "/**\n * @param {number} a\n * @param {number} b\n * @param {number} c\n * @returns {boolean}\n */\nexport const rightAngleTriangle = (a, b, c) => {\n    const s = [a, b, c];\n    s.sort((x, y) => x - y);\n    return s[0] * s[0] + s[1] * s[1] === s[2] * s[2];\n}\n",
            "export const findMax = (words) => {\n    let max_cnt = 0;\n    let max_w = \"\";\n    for (const w of words) {\n        const unique_chars = new Set(w);\n        const cnt = unique_chars.size;\n        if (cnt > max_cnt) {\n            max_cnt = cnt;\n            max_w = w;\n        } else if (cnt === max_cnt) {\n            max_w = min(max_w, w);\n        }\n    }\n    return max_w;\n}\n",
            "export const eat = (num, need, remaining) => {\n    if (need <= remaining) {\n        return [num + need, remaining - need];\n    } else {\n        return [num + remaining, 0];\n    }\n}\n",
            "/**\n * @param {Array<string>} operators\n * @param {Array<number>} operands\n * @returns {number}\n */\nexport const doAlgebra = (operators, operands) => {\n    let ops = [...operators];\n    let nums = [...operands];\n    let i = ops.length - 1;\n    while (i >= 0) {\n        if (ops[i] === \"**\") {\n            nums[i] = Math.pow(nums[i], nums[i + 1]);\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n        }\n        i -= 1;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] === \"*\") {\n            nums[i] = nums[i] * nums[i + 1];\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i -= 1;\n        } else if (ops[i] === \"//\") {\n            nums[i] = Math.floor(nums[i] / nums[i + 1]);\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i -= 1;\n        }\n        i += 1;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] === \"+\") {\n            nums[i] = nums[i] + nums[i + 1];\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i -= 1;\n        } else if (ops[i] === \"-\") {\n            nums[i] = nums[i] - nums[i + 1];\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i -= 1;\n        }\n        i += 1;\n    }\n    return nums[0];\n}\n",
            "/**\n * @param {string} s\n * @returns {string}\n */\nexport const solve = (s) => {\n    if (!/[a-zA-Z]/.test(s)) {\n        return s.split('').reverse().join('');\n    }\n    let result = '';\n    for (let ch of s) {\n        if (!/[a-zA-Z]/.test(ch)) {\n            result += ch;\n        } else if (ch === ch.toUpperCase()) {\n            result += ch.toLowerCase();\n        } else if (ch === ch.toLowerCase()) {\n            result += ch.toUpperCase();\n        }\n    }\n    return result;\n}\n",
            "/**\n * @param {string} txt\n * @returns {?string}\n */\nexport const stringToMd5 = (txt) => {\n    if (!txt) {\n        return null;\n    }\n    const md5sum = require('crypto').createHash('md5');\n    md5sum.update(txt);\n    return md5sum.digest('hex');\n}\n",
            "export const generateIntegers = (a, b) => {\n    let lower = Math.max(2, Math.min(a, b));\n    let upper = Math.min(8, Math.max(a, b));\n    let result = [];\n    for (let i = lower; i <= upper; ++i) {\n        if (i % 2 === 0) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n"
        ],
        "java": [
            "class Global {\n    public static boolean hasCloseElements(List<Double> numbers, double threshold) {\n        for (int i = 0; i < numbers.size(); ++i) {\n            for (int j = i + 1; j < numbers.size(); ++j) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n",
            "public class Global {\n    public static List<String> separateParenGroups(String parenString) {\n        List<String> groups = new ArrayList<>();\n        Stack<Character> stk = new Stack<>();\n        StringBuilder currentGroup = new StringBuilder();\n        for (char ch : parenString.toCharArray()) {\n            if (ch == '(') {\n                stk.push(ch);\n                currentGroup.append(ch);\n            } else if (ch == ')') {\n                stk.pop();\n                currentGroup.append(ch);\n                if (stk.isEmpty()) {\n                    groups.add(currentGroup.toString());\n                    currentGroup.setLength(0); // Clear the StringBuilder\n                }\n            }\n        }\n        return groups;\n    }\n}\n",
            "class Global {\n    public static double truncateNumber(double num) {\n        return num - Math.floor(num);\n    }\n}\n",
            "class Global {\n    public static boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (int op : operations) {\n            balance += op;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0.0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n        double deviation = 0.0;\n        for (double num : numbers) {\n            deviation += Math.abs(num - mean);\n        }\n        return deviation / numbers.size();\n    }\n}\n",
            "class Global {\n    public static List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); ++i) {\n            if (i != 0) {\n                result.add(delimiter);\n            }\n            result.add(numbers.get(i));\n        }\n        return result;\n    }\n}\n",
            "import java.util.ArrayList;\nimport java.util.List;\n\nclass Global {\n    public static List<Integer> parseNestedParens(String parenString) {\n        List<Integer> result = new ArrayList<>();\n        String[] parenGroups = parenString.split(\"\\\\s+\");\n        for (String group : parenGroups) {\n            int maxDepth = 0;\n            int depth = 0;\n            for (char ch : group.toCharArray()) {\n                if (ch == '(') {\n                    depth += 1;\n                    maxDepth = Math.max(maxDepth, depth);\n                } else if (ch == ')') {\n                    depth -= 1;\n                }\n            }\n            result.add(maxDepth);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<String> filterBySubstring(List<String> strs, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strs) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> sumProduct(List<Integer> numbers) {\n        int n_sum = 0;\n        int n_product = 1;\n        for (int number : numbers) {\n            n_sum += number;\n            n_product *= number;\n        }\n        return Arrays.asList(n_sum, n_product);\n    }\n}\n",
            "class Global {\n    public static List<Integer> rollingMax(List<Integer> numbers) {\n        int max_so_far = Integer.MIN_VALUE;\n        List<Integer> result = new ArrayList<>();\n        for (int num : numbers) {\n            max_so_far = Math.max(max_so_far, num);\n            result.add(max_so_far);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean isPalindrome(String s) {\n        return s.equals(new StringBuilder(s).reverse().toString());\n    }\n\n    public static String makePalindrome(String s) {\n        if (isPalindrome(s)) {\n            return s;\n        }\n        for (int i = 0; i < s.length(); i++) {\n            if (isPalindrome(s.substring(i))) {\n                StringBuilder prefix = new StringBuilder(s.substring(0, i)).reverse();\n                return s + prefix.toString();\n            }\n        }\n        return \"\";\n    }\n}\n",
            "class Global {\n    public static String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < a.length(); ++i) {\n            result.append((a.charAt(i) == b.charAt(i)) ? '0' : '1');\n        }\n        return result.toString();\n    }\n}\n",
            "class Global {\n    public static Optional<String> longest(List<String> strs) {\n        if (strs.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest_s = strs.get(0);\n        for (String s : strs) {\n            if (s.length() > longest_s.length()) {\n                longest_s = s;\n            }\n        }\n        return Optional.of(longest_s);\n    }\n}\n",
            "class Global {\n    public static int greatestCommonDivisor(int a, int b) {\n        if (b == 0) {\n            return a;\n        } else {\n            return greatestCommonDivisor(b, a % b);\n        }\n    }\n}\n",
            "class Global {\n    public static List<String> allPrefixes(String s) {\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 0; i < s.length(); ++i) {\n            prefixes.add(s.substring(0, i + 1));\n        }\n        return prefixes;\n    }\n}\n",
            "class Global {\n    public static String stringSequence(int n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; ++i) {\n            sb.append(i);\n            if (i < n) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n}\n",
            "class Global {\n    public static int countDistinctCharacters(String s) {\n        Set<Character> uniqueChars = new HashSet<>();\n        for (char c : s.toCharArray()) {\n            uniqueChars.add(Character.toLowerCase(c));\n        }\n        return uniqueChars.size();\n    }\n}\n",
            "class Global {\n    public static List<Integer> parseMusic(String musicString) {\n        Map<String, Integer> durations = new HashMap<>();\n        durations.put(\"o\", 4);\n        durations.put(\"o|\", 2);\n        durations.put(\".|\", 1);\n        \n        List<Integer> result = new ArrayList<>();\n        int start = 0;\n        int end = 0;\n        \n        while ((end = musicString.indexOf(' ', start)) != -1) {\n            String note = musicString.substring(start, end);\n            if (durations.containsKey(note)) {\n                result.add(durations.get(note));\n            }\n            start = end + 1;\n        }\n        \n        // Add the last note\n        String last_note = musicString.substring(start);\n        if (durations.containsKey(last_note)) {\n            result.add(durations.get(last_note));\n        }\n        \n        return result;\n    }\n}\n",
            "class Global {\n    public static int howManyTimes(String s, String substring) {\n        int times = 0;\n        for (int i = 0; i <= s.length() - substring.length(); i++) {\n            if (s.substring(i, i + substring.length()).equals(substring)) {\n                times++;\n            }\n        }\n        return times;\n    }\n}\n",
            "class Global {\n    public static String sortNumbers(String numbers) {\n        HashMap<String, Integer> num_dict = new HashMap<>();\n        num_dict.put(\"zero\", 0);\n        num_dict.put(\"one\", 1);\n        num_dict.put(\"two\", 2);\n        num_dict.put(\"three\", 3);\n        num_dict.put(\"four\", 4);\n        num_dict.put(\"five\", 5);\n        num_dict.put(\"six\", 6);\n        num_dict.put(\"seven\", 7);\n        num_dict.put(\"eight\", 8);\n        num_dict.put(\"nine\", 9);\n\n        List<String> num_list = new ArrayList<>();\n        String[] words = numbers.split(\"\\\\s+\");\n        for (String word : words) {\n            if (num_dict.containsKey(word)) {\n                num_list.add(word);\n            }\n        }\n\n        Collections.sort(num_list, Comparator.comparingInt(num_dict::get));\n\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < num_list.size(); ++i) {\n            if (i > 0) {\n                result.append(\" \");\n            }\n            result.append(num_list.get(i));\n        }\n\n        return result.toString();\n    }\n}\n",
            "class Global {\n    public static List<Double> findClosestElements(List<Double> numbers) {\n        if (numbers.size() < 2) {\n            return new ArrayList<>();\n        }\n        \n        List<Double> sorted_numbers = new ArrayList<>(numbers);\n        Collections.sort(sorted_numbers);\n        \n        double min_diff = Double.MAX_VALUE;\n        List<Double> closest_pair = new ArrayList<>();\n        \n        for (int i = 1; i < sorted_numbers.size(); ++i) {\n            double diff = sorted_numbers.get(i) - sorted_numbers.get(i - 1);\n            if (diff < min_diff) {\n                min_diff = diff;\n                closest_pair.clear();\n                closest_pair.add(sorted_numbers.get(i - 1));\n                closest_pair.add(sorted_numbers.get(i));\n            }\n        }\n        \n        return closest_pair;\n    }\n}\n",
            "class Global {\n    public static List<Double> rescaleToUnit(List<Double> numbers) {\n        double min_num = Collections.min(numbers);\n        double max_num = Collections.max(numbers);\n        if (min_num == max_num) {\n            return new ArrayList<>(Collections.nCopies(numbers.size(), 0.0));\n        } else {\n            List<Double> rescaled = new ArrayList<>();\n            for (double num : numbers) {\n                rescaled.add((num - min_num) / (max_num - min_num));\n            }\n            return rescaled;\n        }\n    }\n}\n",
            "class Global {\n    public static List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int strLength(String s) {\n        return s.length();\n    }\n}\n",
            "class Global {\n    public static int largestDivisor(int n) {\n        for (int i = 2; i < n; ++i) {\n            if (n % i == 0) {\n                return n / i;\n            }\n        }\n        return 1;\n    }\n}\n",
            "class Global {\n    public static List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int divisor = 2;\n        while (divisor <= n) {\n            if (n % divisor == 0) {\n                factors.add(divisor);\n                n /= divisor;\n            } else {\n                divisor += 1;\n            }\n        }\n        return factors;\n    }\n}\n",
            "class Global {\n    public static List<Integer> removeDuplicates(List<Integer> numbers) {\n        Map<Integer, Integer> counts = new HashMap<>();\n        for (int num : numbers) {\n            counts.put(num, counts.getOrDefault(num, 0) + 1);\n        }\n        List<Integer> res = new ArrayList<>();\n        for (int num : numbers) {\n            if (counts.get(num) == 1) {\n                res.add(num);\n            }\n        }\n        return res;\n    }\n}\n",
            "class Global {\n    public static String flipCase(String s) {\n        StringBuilder flipped = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (!Character.isLetter(ch)) {\n                flipped.append(ch);\n            } else if (Character.isLowerCase(ch)) {\n                flipped.append(Character.toUpperCase(ch));\n            } else if (Character.isUpperCase(ch)) {\n                flipped.append(Character.toLowerCase(ch));\n            }\n        }\n        return flipped.toString();\n    }\n}\n",
            "class Global {\n    public static String concatenate(List<String> strs) {\n        StringBuilder result = new StringBuilder();\n        for (String str : strs) {\n            result.append(str);\n        }\n        return result.toString();\n    }\n}\n",
            "class Global {\n    public static List<String> filterByPrefix(List<String> strs, String prefixStr) {\n        List<String> result = new ArrayList<>();\n        for (String s : strs) {\n            if (s.startsWith(prefixStr)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> getPositive(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (int num : l) {\n            if (num > 0) {\n                result.add(num);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); ++i) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static double poly(List<Integer> xs, double x) {\n        double res = 0.0;\n        for (int i = 0; i < xs.size(); ++i) {\n            res += xs.get(i) * Math.pow(x, i);\n        }\n        return res;\n    }\n    \n    public static double findZero(List<Integer> xs) {\n        double x1 = 1.0, x2 = -1.0;\n        while (poly(xs, x1) * poly(xs, x2) > 0) {\n            x1 *= 2;\n            x2 *= 2;\n        }\n        while (Math.abs(x1 - x2) > 1e-10) {\n            double mid = (x1 + x2) / 2;\n            if (poly(xs, mid) == 0) {\n                return mid;\n            } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n                x2 = mid;\n            } else {\n                x1 = mid;\n            }\n        }\n        return (x1 + x2) / 2;\n    }\n}\n",
            "class Global {\n    public static List<Integer> sortThird(List<Integer> l) {\n        List<Integer> sorted_third = new ArrayList<>();\n        for (int i = 0; i < l.size(); i += 3) {\n            sorted_third.add(l.get(i));\n        }\n        Collections.sort(sorted_third);\n\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0, j = 0; i < l.size(); ++i) {\n            if (i % 3 == 0) {\n                result.add(sorted_third.get(j++));\n            } else {\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> listUnique(List<Integer> l) {\n        Set<Integer> uniqueElements = new HashSet<>(l);\n        List<Integer> result = new ArrayList<>(uniqueElements);\n        Collections.sort(result);\n        return result;\n    }\n}\n",
            "class Global {\n    public static int maxElement(List<Integer> l) {\n        if (l.isEmpty()) {\n            return 0;\n        }\n        return Collections.max(l);\n    }\n}\n",
            "class Global {\n    public static int fizzBuzz(int n) {\n        int cnt = 0;\n        for (int i = 0; i < n; ++i) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String str_i = Integer.toString(i);\n                cnt += countSevens(str_i);\n            }\n        }\n        return cnt;\n    }\n\n    private static int countSevens(String s) {\n        int count = 0;\n        for (char c : s.toCharArray()) {\n            if (c == '7') {\n                ++count;\n            }\n        }\n        return count;\n    }\n}\n",
            "class Global {\n    public static List<Integer> sortEven(List<Integer> l) {\n        List<Integer> even_elements = new ArrayList<>();\n        for (int i = 0; i < l.size(); i += 2) {\n            even_elements.add(l.get(i));\n        }\n        Collections.sort(even_elements);\n\n        List<Integer> result = new ArrayList<>();\n        int even_index = 0;\n        for (int i = 0; i < l.size(); ++i) {\n            if (i % 2 == 0) {\n                result.add(even_elements.get(even_index++));\n            } else {\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String encodeCyclic(String s) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < s.length(); i += 3) {\n            if (i + 3 > s.length()) {\n                result.append(s.substring(i));\n            } else {\n                result.append(s.substring(i + 1, i + 3));\n                result.append(s.charAt(i));\n            }\n        }\n        return result.toString();\n    }\n    \n    public static String decodeCyclic(String s) {\n        return encodeCyclic(encodeCyclic(s));\n    }\n}\n",
            "class Global {\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static int primeFib(int n) {\n        int[] f = {0, 1};\n        int cnt = 0;\n        while (cnt < n) {\n            f[0] = f[1];\n            f[1] = f[0] + f[1];\n            if (isPrime(f[1])) {\n                cnt++;\n            }\n        }\n        return f[1];\n    }\n}\n",
            "class Global {\n    public static boolean triplesSumToZero(List<Integer> l) {\n        for (int i = 0; i < l.size(); ++i) {\n            for (int j = i + 1; j < l.size(); ++j) {\n                for (int k = j + 1; k < l.size(); ++k) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static int carRaceCollision(int n) {\n        return n * n;\n    }\n}\n",
            "class Global {\n    public static List<Integer> incrList(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (int i : l) {\n            result.add(i + 1);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean pairsSumToZero(List<Integer> l) {\n        Set<Integer> seen = new HashSet<>();\n        for (int num : l) {\n            if (seen.contains(-num)) {\n                return true;\n            }\n            seen.add(num);\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static String changeBase(int x, int bas) {\n        if (x == 0) {\n            return \"0\";\n        }\n        StringBuilder digits = new StringBuilder();\n        while (x > 0) {\n            digits.append(x % bas);\n            x /= bas;\n        }\n        return digits.reverse().toString();\n    }\n}\n",
            "class Global {\n    public static double triangleArea(int a, int h) {\n        return a * h / 2.0;\n    }\n}\n",
            "class Global {\n    public static int fib4(int n) {\n        int[] fib = {0, 0, 2, 0};\n        for (int i = 4; i <= n; ++i) {\n            fib[i % 4] = fib[0] + fib[1] + fib[2] + fib[3];\n        }\n        return fib[n % 4];\n    }\n}\n",
            "class Global {\n    public static double median(List<Double> l) {\n        List<Double> sl = new ArrayList<>(l);\n        Collections.sort(sl);\n        if (sl.size() % 2 != 0) {\n            return sl.get(sl.size() / 2);\n        } else {\n            return (sl.get(sl.size() / 2 - 1) + sl.get(sl.size() / 2)) / 2.0;\n        }\n    }\n}\n",
            "class Global {\n    public static boolean isPalindrome(String txt) {\n        return txt.equals(new StringBuilder(txt).reverse().toString());\n    }\n}\n",
            "class Global {\n    public static int modp(int n, int p) {\n        int ret = 1;\n        for (int i = 0; i < n; ++i) {\n            ret = (ret * 2) % p;\n        }\n        return ret;\n    }\n}\n",
            "class Global {\n    public static String encodeShift(String s) {\n        StringBuilder result = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            result.append((char)(((ch - 'a' + 5) % 26) + 'a'));\n        }\n        return result.toString();\n    }\n    \n    public static String decodeShift(String s) {\n        StringBuilder result = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            result.append((char)(((ch - 'a' + 21) % 26) + 'a'));\n        }\n        return result.toString();\n    }\n}\n",
            "class Global {\n    public static String removeVowels(String txt) {\n        StringBuilder result = new StringBuilder();\n        for (char c : txt.toCharArray()) {\n            if (!\"aeiouAEIOU\".contains(String.valueOf(c))) {\n                result.append(c);\n            }\n        }\n        return result.toString();\n    }\n}\n",
            "class Global {\n    public static boolean belowThreshold(List<Integer> l, int t) {\n        return l.stream().allMatch(x -> x < t);\n    }\n}\n",
            "class Global {\n    public static int add(int x, int y) {\n        return x + y;\n    }\n}\n",
            "class Global {\n    public static boolean sameChars(String s0, String s1) {\n        Set<Character> set0 = new HashSet<>();\n        for (char c : s0.toCharArray()) {\n            set0.add(c);\n        }\n        Set<Character> set1 = new HashSet<>();\n        for (char c : s1.toCharArray()) {\n            set1.add(c);\n        }\n        return set0.equals(set1);\n    }\n}\n",
            "class Global {\n    public static int fib(int n) {\n        if (n <= 1) {\n            return n;\n        } else {\n            return fib(n - 1) + fib(n - 2);\n        }\n    }\n}\n",
            "class Global {\n    public static boolean correctBracketing(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '<') {\n                depth += 1;\n            } else if (b == '>') {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static boolean monotonic(List<Integer> l) {\n        List<Integer> diff = new ArrayList<>();\n        for (int i = 1; i < l.size(); ++i) {\n            diff.add(l.get(i) - l.get(i - 1));\n        }\n        return diff.stream().allMatch(x -> x <= 0) || \n               diff.stream().allMatch(x -> x >= 0);\n    }\n}\n",
            "class Global {\n    public static List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> s1 = new HashSet<>(l1);\n        Set<Integer> s2 = new HashSet<>(l2);\n        List<Integer> result = new ArrayList<>();\n        s1.retainAll(s2);\n        result.addAll(s1);\n        return result;\n    }\n}\n",
            "class Global {\n    public static int largestPrimeFactor(int n) {\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i != 0) {\n                i += 1;\n            } else {\n                n /= i;\n            }\n        }\n        return n;\n    }\n}\n",
            "class Global {\n    public static int sumToN(int n) {\n        return (n * (n + 1)) / 2;\n    }\n}\n",
            "class Global {\n    public static boolean correctBracketing(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '(') {\n                depth += 1;\n            } else if (b == ')') {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); ++i) {\n            result.add(xs.get(i) * i);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int fibfib(int n) {\n        if (n <= 1) {\n            return 0;\n        }\n        int a = 0, b = 0, c = 1;\n        while (n > 2) {\n            a = b;\n            b = c;\n            c = a + b + c;\n            n -= 1;\n        }\n        return c;\n    }\n}\n",
            "class Global {\n    public static int vowelsCount(String s) {\n        String vowels = \"aeiou\";\n        int cnt = 0;\n        for (int i = 0; i < s.length(); ++i) {\n            if (vowels.indexOf(Character.toLowerCase(s.charAt(i))) != -1 || (i == s.length() - 1 && Character.toLowerCase(s.charAt(i)) == 'y')) {\n                ++cnt;\n            }\n        }\n        return cnt;\n    }\n}\n",
            "class Global {\n    public static String circularShift(int x, int shift) {\n        String x_str = Integer.toString(x);\n        if (shift > x_str.length()) {\n            return new StringBuilder(x_str).reverse().toString();\n        } else {\n            return x_str.substring(x_str.length() - shift) + x_str.substring(0, x_str.length() - shift);\n        }\n    }\n}\n",
            "class Global {\n    public static int digitSum(String s) {\n        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += (int) c;\n            }\n        }\n        return sum;\n    }\n}\n",
            "class Global {\n    public static int fruitDistribution(String s, int n) {\n        String[] words = s.split(\" \");\n        int applesIndex = java.util.Arrays.asList(words).indexOf(\"apples\");\n        int orangesIndex = java.util.Arrays.asList(words).indexOf(\"oranges\");\n        int apples = Integer.parseInt(words[applesIndex - 1]);\n        int oranges = Integer.parseInt(words[orangesIndex - 1]);\n        return n - apples - oranges;\n    }\n}\n",
            "public class Global {\n    public static List<Integer> pluck(List<Integer> arr) {\n        List<Integer> evens = new ArrayList<>();\n        for (int n : arr) {\n            if (n % 2 == 0) {\n                evens.add(n);\n            }\n        }\n        if (evens.isEmpty()) {\n            return Collections.emptyList();\n        }\n        int min_even = Collections.min(evens);\n        int index = arr.indexOf(min_even);\n        return Arrays.asList(min_even, index);\n    }\n}\n",
            "class Global {\n    public static int search(List<Integer> lst) {\n        Map<Integer, Integer> freqs = new HashMap<>();\n        for (int n : lst) {\n            freqs.put(n, freqs.getOrDefault(n, 0) + 1);\n        }\n        List<Integer> goodVals = new ArrayList<>();\n        for (Map.Entry<Integer, Integer> entry : freqs.entrySet()) {\n            if (entry.getValue() >= entry.getKey()) {\n                goodVals.add(entry.getKey());\n            }\n        }\n        return !goodVals.isEmpty() ? Collections.max(goodVals) : -1;\n    }\n}\n",
            "class Global {\n    public static List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> sl = new ArrayList<>(lst);\n        Collections.sort(sl);\n        List<Integer> result = new ArrayList<>();\n        int left = 0, right = sl.size() - 1;\n        while (left <= right) {\n            result.add(sl.get(left));\n            left += 1;\n            if (left <= right) {\n                result.add(sl.get(right));\n                right -= 1;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static double triangleArea(int a, int b, int c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            double s = (a + b + c) / 2.0;\n            return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        } else {\n            return -1.0;\n        }\n    }\n}\n",
            "class Global {\n    public static boolean willItFly(List<Integer> q, int w) {\n        if (q.isEmpty()) {\n            return false;\n        }\n        boolean is_palin = true;\n        for (int i = 0; i < q.size() / 2; ++i) {\n            if (!q.get(i).equals(q.get(q.size() - i - 1))) {\n                is_palin = false;\n                break;\n            }\n        }\n        int total = 0;\n        for (int num : q) {\n            total += num;\n        }\n        return is_palin && total <= w;\n    }\n}\n",
            "class Global {\n    public static int smallestChange(List<Integer> arr) {\n        int ans = 0;\n        for (int i = 0; i < arr.size() / 2; ++i) {\n            if (!arr.get(i).equals(arr.get(arr.size() - i - 1))) {\n                ++ans;\n            }\n        }\n        return ans;\n    }\n}\n",
            "class Global {\n    public static List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        int cnt1 = 0;\n        int cnt2 = 0;\n        \n        for (String s : lst1) {\n            cnt1 += s.length();\n        }\n        \n        for (String s : lst2) {\n            cnt2 += s.length();\n        }\n        \n        return cnt1 <= cnt2 ? lst1 : lst2;\n    }\n}\n",
            "class Global {\n    public static boolean isMultiplyPrime(int a) {\n        int cnt = 0;\n        for (int i = 2; i <= Math.sqrt(a); ++i) {\n            if (is_prime(i)) {\n                while (a % i == 0) {\n                    ++cnt;\n                    a /= i;\n                }\n            }\n        }\n        return cnt == 3;\n    }\n\n    private static boolean is_prime(int n) {\n        if (n < 2) return false;\n        for (int i = 2; i <= Math.sqrt(n); ++i) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static boolean isSimplePower(int x, int n) {\n        if (n < 2) {\n            return x == n;\n        }\n        int tmp = 1;\n        while (tmp < x) {\n            tmp *= n;\n        }\n        return tmp == x;\n    }\n}\n",
            "class Global {\n    public static boolean isCube(int a) {\n        a = Math.abs(a);\n        int root = (int) Math.round(Math.pow(a, 1.0 / 3.0));\n        return root * root * root == a;\n    }\n}\n",
            "class Global {\n    public static int hexKey(String num) {\n        int count = 0;\n        for (char x : num.toCharArray()) {\n            if (x == '2' || x == '3' || x == '5' || x == '7' || x == 'B' || x == 'D') {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n",
            "class Global {\n    public static String decimalToBinary(int dec) {\n        String binary = Integer.toBinaryString(dec);\n        return \"db\" + binary + \"db\";\n    }\n}\n",
            "class Global {\n    public static boolean isHappy(String s) {\n        if (s.length() < 3) {\n            return false;\n        }\n        for (int i = 0; i < s.length() - 2; ++i) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> result = new ArrayList<>();\n        for (double g : grades) {\n            if (g == 4.0) {\n                result.add(\"A+\");\n            } else if (g > 3.7) {\n                result.add(\"A\");\n            } else if (g > 3.3) {\n                result.add(\"A-\");\n            } else if (g > 3.0) {\n                result.add(\"B+\");\n            } else if (g > 2.7) {\n                result.add(\"B\");\n            } else if (g > 2.3) {\n                result.add(\"B-\");\n            } else if (g > 2.0) {\n                result.add(\"C+\");\n            } else if (g > 1.7) {\n                result.add(\"C\");\n            } else if (g > 1.3) {\n                result.add(\"C-\");\n            } else if (g > 1.0) {\n                result.add(\"D+\");\n            } else if (g > 0.7) {\n                result.add(\"D\");\n            } else if (g > 0.0) {\n                result.add(\"D-\");\n            } else {\n                result.add(\"E\");\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean primeLength(String s) {\n        int length = s.length();\n        if (length < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.floor(Math.sqrt(length)); ++i) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static int startsOneEnds(int n) {\n        if (n == 1) {\n            return 1;\n        }\n        return 2 * 9 * (int)Math.pow(10, n - 2);\n    }\n}\n",
            "class Global {\n    public static String solve(int n) {\n        int digitsSum = 0;\n        while (n > 0) {\n            digitsSum += n % 10;\n            n /= 10;\n        }\n        return Integer.toBinaryString(digitsSum);\n    }\n}\n",
            "class Global {\n    public static int add(List<Integer> lst) {\n        int result = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                result += lst.get(i);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String antiShuffle(String s) {\n        StringBuilder result = new StringBuilder();\n        java.util.StringTokenizer st = new java.util.StringTokenizer(s);\n        \n        while (st.hasMoreTokens()) {\n            char[] wordArray = st.nextToken().toCharArray();\n            java.util.Arrays.sort(wordArray);\n            if (result.length() > 0) {\n                result.append(\" \");\n            }\n            result.append(new String(wordArray));\n        }\n        \n        return result.toString();\n    }\n}\n",
            "class Global {\n    public static List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> coords = new ArrayList<>();\n        for (int i = 0; i < lst.size(); ++i) {\n            for (int j = 0; j < lst.get(i).size(); ++j) {\n                if (lst.get(i).get(j) == x) {\n                    coords.add(Arrays.asList(i, j));\n                }\n            }\n        }\n        Collections.sort(coords, new Comparator<List<Integer>>() {\n            @Override\n            public int compare(List<Integer> a, List<Integer> b) {\n                if (!a.get(0).equals(b.get(0))) {\n                    return a.get(0) - b.get(0);\n                } else {\n                    return b.get(1) - a.get(1);\n                }\n            }\n        });\n        return coords;\n    }\n}\n",
            "class Global {\n    public static List<Integer> sortArray(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return new ArrayList<>();\n        }\n        if ((arr.get(0) + arr.get(arr.size() - 1)) % 2 == 0) {\n            List<Integer> sortedArr = new ArrayList<>(arr);\n            Collections.sort(sortedArr, Collections.reverseOrder());\n            return sortedArr;\n        } else {\n            List<Integer> sortedArr = new ArrayList<>(arr);\n            Collections.sort(sortedArr);\n            return sortedArr;\n        }\n    }\n}\n",
            "class Global {\n    public static String encrypt(String s) {\n        StringBuilder result = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            int shifted = (int) ch + 4;\n            if (shifted > (int) 'z') {\n                shifted -= 26;\n            }\n            result.append((char) shifted);\n        }\n        return result.toString();\n    }\n}\n",
            "class Global {\n    public static Optional<Integer> nextSmallest(List<Integer> lst) {\n        Set<Integer> sl = new HashSet<>(lst);\n        if (sl.size() < 2) {\n            return Optional.empty();\n        }\n        List<Integer> sortedList = new ArrayList<>(sl);\n        Collections.sort(sortedList);\n        return Optional.of(sortedList.get(1));\n    }\n}\n",
            "class Global {\n    public static int isBored(String s) {\n        String[] sentences = s.split(\"[.!?]\");\n        int count = 0;\n        for (String sentence : sentences) {\n            String trimmed_sentence = sentence.trim();\n            if (trimmed_sentence.length() >= 2 && trimmed_sentence.startsWith(\"I \")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n",
            "class Global {\n    public static boolean anyInt(Object x, Object y, Object z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int a = (Integer) x;\n            int b = (Integer) y;\n            int c = (Integer) z;\n            if ((a + b == c) || (a + c == b) || (b + c == a)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static String encode(String message) {\n        String vowels = \"aeiouAEIOU\";\n        StringBuilder result = new StringBuilder();\n        for (char ch : message.toCharArray()) {\n            if (Character.isLetter(ch)) {\n                char ch1 = Character.isLowerCase(ch) ? Character.toUpperCase(ch) : Character.toLowerCase(ch);\n                if (vowels.indexOf(ch1) != -1) {\n                    ch1 += 2;\n                }\n                result.append((char) ch1);\n            } else {\n                result.append(ch);\n            }\n        }\n        return result.toString();\n    }\n}\n",
            "class Global {\n    public static int skjkasdkd(List<Integer> lst) {\n        List<Integer> primes = new ArrayList<>();\n        for (int n : lst) {\n            if (isPrime(n)) {\n                primes.add(n);\n            }\n        }\n        if (primes.isEmpty()) return 0;\n        int largest = Collections.max(primes);\n        int sum = 0;\n        while (largest > 0) {\n            sum += largest % 10;\n            largest /= 10;\n        }\n        return sum;\n    }\n\n    private static boolean isPrime(int n) {\n        if (n < 2) return false;\n        for (int i = 2; i <= Math.floor(Math.sqrt(n)); ++i) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static boolean checkDictCase(Map<String, String> d) {\n        if (d.isEmpty()) {\n            return false;\n        }\n\n        boolean allLower = true;\n        boolean allUpper = true;\n\n        for (Map.Entry<String, String> entry : d.entrySet()) {\n            final String key = entry.getKey();\n            for (char c : key.toCharArray()) {\n                if (!Character.isLowerCase(c)) {\n                    allLower = false;\n                }\n                if (!Character.isUpperCase(c)) {\n                    allUpper = false;\n                }\n            }\n            if (!allLower && !allUpper) {\n                return false;\n            }\n        }\n\n        return allLower || allUpper;\n    }\n}\n",
            "class Global {\n    public static List<Integer> countUpTo(int n) {\n        List<Integer> primes = new ArrayList<>();\n        for (int num = 2; num < n; ++num) {\n            boolean isPrime = true;\n            for (int p : primes) {\n                if (num % p == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                primes.add(num);\n            }\n        }\n        return primes;\n    }\n}\n",
            "class Global {\n    public static int multiply(int a, int b) {\n        return (Math.abs(a) % 10) * (Math.abs(b) % 10);\n    }\n}\n",
            "class Global {\n    public static int countUpper(String s) {\n        String vowels = \"AEIOU\";\n        int count = 0;\n        for (int i = 0; i < s.length(); ++i) {\n            if (i % 2 == 0 && vowels.indexOf(s.charAt(i)) != -1) {\n                ++count;\n            }\n        }\n        return count;\n    }\n}\n",
            "class Global {\n    public static int closestInteger(String value) {\n        float num = Float.parseFloat(value);\n        if (num >= 0) {\n            return (int)(num + 0.5);\n        } else {\n            return (int)(num - 0.5);\n        }\n    }\n}\n",
            "class Global {\n    public static List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        for (int i = 0; i < n; ++i) {\n            pile.add(n + 2 * i);\n        }\n        return pile;\n    }\n}\n",
            "import java.util.ArrayList;\nimport java.util.List;\n\nclass Global {\n    public static List<String> wordsString(String s) {\n        String[] words = s.split(\"[, ]\");\n        List<String> result = new ArrayList<>();\n        for (String w : words) {\n            if (!w.isEmpty()) {\n                result.add(w);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int chooseNum(int x, int y) {\n        if (x > y) {\n            return -1;\n        }\n        if (y % 2 == 0) {\n            return y;\n        }\n        return y - 1;\n    }\n}\n",
            "class Global {\n    public static Optional<String> roundedAvg(int n, int m) {\n        if (n > m) {\n            return Optional.empty();\n        }\n        int r_avg = (int) ((m + n) / 2.0 + 0.5);\n        return Optional.of(Integer.toBinaryString(r_avg));\n    }\n}\n",
            "class Global {\n    public static List<Integer> uniqueDigits(List<Integer> x) {\n        Predicate<String> all_digits_odd = s -> {\n            for (char digit : s.toCharArray()) {\n                if ((digit - '0') % 2 == 0) {\n                    return false;\n                }\n            }\n            return true;\n        };\n\n        List<Integer> result = new ArrayList<>();\n        for (int num : x) {\n            if (all_digits_odd.test(Integer.toString(num))) {\n                result.add(num);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<String> byLength(List<Integer> arr) {\n        String[] digit_names = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n        List<Integer> sorted_arr = new ArrayList<>();\n        \n        for (int x : arr) {\n            if (x >= 1 && x <= 9) {\n                sorted_arr.add(x);\n            }\n        }\n        \n        Collections.sort(sorted_arr, Collections.reverseOrder());\n        \n        List<String> result = new ArrayList<>();\n        for (int x : sorted_arr) {\n            result.add(digit_names[x - 1]);\n        }\n        \n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> f(int n) {\n        List<Integer> nums = new ArrayList<>();\n        for (int i = 0; i < n; ++i) {\n            nums.add(i + 1);\n        }\n        \n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < n; ++i) {\n            if ((i + 1) % 2 != 0) {\n                int sum = nums.subList(0, i + 1).stream().mapToInt(Integer::intValue).sum();\n                result.add(sum);\n            } else {\n                int product = nums.subList(0, i + 1).stream().reduce(1, (a, b) -> a * b);\n                result.add(product);\n            }\n        }\n        \n        return result;\n    }\n}\n",
            "\tclass Global {\n\t    public static List<Integer> evenOddPalindrome(int n) {\n\t        int[] cnt = new int[2];\n\t        for (int i = 1; i <= n; ++i) {\n\t            if (is_palindrome(Integer.toString(i))) {\n\t                cnt[i % 2] += 1;\n\t            }\n\t        }\n\t        return Arrays.stream(cnt).boxed().collect(Collectors.toList());\n\t    }\n\n\t    private static boolean is_palindrome(String txt) {\n\t        int len = txt.length();\n\t        for (int i = 0; i < len / 2; ++i) {\n\t            if (txt.charAt(i) != txt.charAt(len - 1 - i)) {\n\t                return false;\n\t            }\n\t        }\n\t        return true;\n\t    }\n\t}\n",
            "import java.util.List;\n\nclass Global {\n    public static int digitsSum(int n) {\n        String nStr = Integer.toString(n);\n        if (n >= 0) {\n            return nStr.chars().map(Character::getNumericValue).sum();\n        } else {\n            return Character.getNumericValue(nStr.charAt(0)) * 2 + digitsSum(Math.abs(n));\n        }\n    }\n\n    public static int countNums(List<Integer> arr) {\n        return (int) arr.stream().filter(n -> digitsSum(n) > 0).count();\n    }\n}\n",
            "class Global {\n    public static boolean moveOneBall(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return true;\n        }\n        List<Integer> sortedArr = new ArrayList<>(arr);\n        Collections.sort(sortedArr);\n        for (int i = 0; i < arr.size(); ++i) {\n            if (arr.subList(i, arr.size()).equals(sortedArr.subList(0, arr.size() - i)) &&\n                arr.subList(0, i).equals(sortedArr.subList(arr.size() - i, sortedArr.size()))) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static String canExchange(List<Integer> lst1, List<Integer> lst2) {\n        int odd_cnt = 0;\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                odd_cnt++;\n            }\n        }\n        int even_cnt = 0;\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                even_cnt++;\n            }\n        }\n        return (even_cnt >= odd_cnt) ? \"YES\" : \"NO\";\n    }\n}\n",
            "class Global {\n    public static Map<String, Integer> histogram(String test) {\n        Map<String, Integer> freq = new HashMap<>();\n        String[] words = test.split(\"\\\\s+\");\n        for (String word : words) {\n            if (!word.isEmpty()) {\n                freq.put(word, freq.getOrDefault(word, 0) + 1);\n            }\n        }\n        Map<String, Integer> result = new HashMap<>();\n        int max_freq = Collections.max(freq.values());\n        for (Map.Entry<String, Integer> entry : freq.entrySet()) {\n            if (entry.getValue() == max_freq) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<String> reverseDelete(String s, String c) {\n        StringBuilder s1 = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (c.indexOf(ch) == -1) {\n                s1.append(ch);\n            }\n        }\n        String result = s1.toString();\n        return Arrays.asList(result, isPalindrome(result) ? \"yes\" : \"no\");\n    }\n\n    private static boolean isPalindrome(String s) {\n        int left = 0;\n        int right = s.length() - 1;\n        while (left < right) {\n            if (s.charAt(left) != s.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static List<String> oddCount(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String num : lst) {\n            int n = 0;\n            for (char d : num.toCharArray()) {\n                if ((d % 2) == 1) {\n                    n++;\n                }\n            }\n            String rs = \"the number of odd elements in the string i of the input.\";\n            result.add(rs.replace(\"i\", Integer.toString(n)));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int minSubArraySum(List<Integer> nums) {\n        int min_sum = 0;\n        int cur_sum = 0;\n        for (int n : nums) {\n            cur_sum = Math.min(cur_sum + n, 0);\n            min_sum = Math.min(cur_sum, min_sum);\n        }\n        if (min_sum == 0) {\n            min_sum = Collections.min(nums);\n        }\n        return min_sum;\n    }\n}\n",
            "class Global {\n    public static int maxFill(List<List<Integer>> grid, int capacity) {\n        int total = 0;\n        for (List<Integer> arr : grid) {\n            int sum = 0;\n            for (int num : arr) {\n                sum += num;\n            }\n            total += Math.ceil((double) sum / capacity);\n        }\n        return total;\n    }\n}\n",
            "class Global {\n    public static List<Integer> sortArray(List<Integer> arr) {\n        arr.sort((a, b) -> {\n            int onesA = Integer.bitCount(a);\n            int onesB = Integer.bitCount(b);\n            if (onesA == onesB) {\n                return a.compareTo(b);\n            }\n            return Integer.compare(onesA, onesB);\n        });\n        return arr;\n    }\n}\n",
            "class Global {\n    public static List<String> selectWords(String s, int n) {\n        String consonants = \"bcdfghjklmnpqrstvwxyz\";\n        List<String> words = new ArrayList<>();\n        StringBuilder word = new StringBuilder();\n        \n        for (char c : s.toCharArray()) {\n            if (Character.isWhitespace(c)) {\n                if (word.length() > 0) {\n                    words.add(word.toString());\n                    word.setLength(0);\n                }\n            } else {\n                word.append(c);\n            }\n        }\n        \n        if (word.length() > 0) {\n            words.add(word.toString());\n        }\n\n        List<String> result = new ArrayList<>();\n        for (String w : words) {\n            int consonantCount = 0;\n            for (char c : w.toCharArray()) {\n                char lowerC = Character.toLowerCase(c);\n                if (consonants.indexOf(lowerC) != -1) {\n                    consonantCount++;\n                }\n            }\n            if (consonantCount == n) {\n                result.add(w);\n            }\n        }\n\n        return result;\n    }\n}\n",
            "class Global {\n    public static String getClosestVowel(String word) {\n        String vowels = \"aeiouAEIOU\";\n        for (int i = word.length() - 2; i > 0; --i) {\n            if (vowels.indexOf(word.charAt(i)) != -1 && vowels.indexOf(word.charAt(i - 1)) == -1 && vowels.indexOf(word.charAt(i + 1)) == -1) {\n                return String.valueOf(word.charAt(i));\n            }\n        }\n        return \"\";\n    }\n}\n",
            "class Global {\n    public static String matchParens(List<String> lst) {\n        String s1 = lst.get(0) + lst.get(1);\n        String s2 = lst.get(1) + lst.get(0);\n        return (check(s1) || check(s2)) ? \"Yes\" : \"No\";\n    }\n\n    private static boolean check(String s) {\n        int depth = 0;\n        for (char ch : s.toCharArray()) {\n            if (ch == '(') {\n                depth += 1;\n            } else {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static List<Integer> maximum(List<Integer> arr, int k) {\n        if (k == 0) {\n            return new ArrayList<>();\n        }\n        List<Integer> sortedArr = new ArrayList<>(arr);\n        Collections.sort(sortedArr);\n        return sortedArr.subList(sortedArr.size() - k, sortedArr.size());\n    }\n}\n",
            "class Global {\n    public static int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); ++i) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n",
            "class Global {\n    public static int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k && i < arr.size(); ++i) {\n            if (String.valueOf(arr.get(i)).length() <= 2) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n}\n",
            "class Global {\n    public static List<Integer> getOddCollatz(int n) {\n        List<Integer> collatz = new ArrayList<>();\n        collatz.add(1);\n        while (n != 1) {\n            if (n % 2 != 0) {\n                collatz.add(n);\n                n = 3 * n + 1;\n            } else {\n                n = n / 2;\n            }\n        }\n        Collections.sort(collatz);\n        return collatz;\n    }\n}\n",
            "class Global {\n    public static boolean validDate(String date) {\n        if (date.length() != 10 || date.charAt(2) != '-' || date.charAt(5) != '-') {\n            return false;\n        }\n        int m = Integer.parseInt(date.substring(0, 2));\n        int d = Integer.parseInt(date.substring(3, 2));\n        if ((m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) && d >= 1 && d <= 31) {\n            return true;\n        }\n        if ((m == 4 || m == 6 || m == 9 || m == 11) && d >= 1 && d <= 30) {\n            return true;\n        }\n        if (m == 2 && d >= 1 && d <= 29) {\n            return true;\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static List<String> splitWords(String txt) {\n        List<String> result = new ArrayList<>();\n        if (txt.indexOf(' ') != -1) {\n            int start = 0, end = 0;\n            while ((end = txt.indexOf(' ', start)) != -1) {\n                result.add(txt.substring(start, end));\n                start = end + 1;\n            }\n            result.add(txt.substring(start));\n        } else if (txt.indexOf(',') != -1) {\n            int start = 0, end = 0;\n            while ((end = txt.indexOf(',', start)) != -1) {\n                result.add(txt.substring(start, end));\n                start = end + 1;\n            }\n            result.add(txt.substring(start));\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && (c % 2 == 0)) {\n                    count++;\n                }\n            }\n            result.add(Integer.toString(count));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean isSorted(List<Integer> lst) {\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < lst.get(i - 1)) {\n                return false;\n            }\n        }\n        Map<Integer, Integer> freq = new HashMap<>();\n        for (int num : lst) {\n            freq.put(num, freq.getOrDefault(num, 0) + 1);\n        }\n        for (int count : freq.values()) {\n            if (count > 2) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int l = Math.max(interval1.get(0), interval2.get(0));\n        int r = Math.min(interval1.get(1), interval2.get(1));\n        int length = r - l;\n        return (length > 0 && is_prime(length)) ? \"YES\" : \"NO\";\n    }\n\n    private static boolean is_prime(int n) {\n        if (n < 2) return false;\n        for (int i = 2; i <= Math.sqrt(n); ++i) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        if (arr.contains(0)) {\n            return Optional.of(0);\n        }\n        int sign = (int) arr.stream().filter(n -> n < 0).count() % 2 == 1 ? -1 : 1;\n        int sumOfAbs = arr.stream().mapToInt(Math::abs).sum();\n        return Optional.of(sign * sumOfAbs);\n    }\n}\n",
            "class Global {\n    public static List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int min_val = n * n + 1;\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < n; ++j) {\n                if (grid.get(i).get(j) == 1) {\n                    List<Integer> temp = new ArrayList<>();\n                    if (i != 0) {\n                        temp.add(grid.get(i - 1).get(j));\n                    }\n                    if (j != 0) {\n                        temp.add(grid.get(i).get(j - 1));\n                    }\n                    if (i != n - 1) {\n                        temp.add(grid.get(i + 1).get(j));\n                    }\n                    if (j != n - 1) {\n                        temp.add(grid.get(i).get(j + 1));\n                    }\n                    min_val = Collections.min(temp);\n                }\n            }\n        }\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < k; ++i) {\n            result.add(i % 2 == 0 ? 1 : min_val);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> tri(int n) {\n        if (n == 0) {\n            return Arrays.asList(1);\n        }\n        List<Double> seq = new ArrayList<>(Arrays.asList(1.0, 3.0));\n        for (int i = 2; i <= n; ++i) {\n            if (i % 2 == 0) {\n                seq.add(i / 2.0 + 1);\n            } else {\n                seq.add(seq.get(i - 1) + seq.get(i - 2) + (i + 3) / 2.0);\n            }\n        }\n        return seq.stream().mapToInt(Double::intValue).boxed().collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static int digits(int n) {\n        int product = 1;\n        boolean hasOdd = false;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 == 1) {\n                product *= digit;\n                hasOdd = true;\n            }\n            n /= 10;\n        }\n        return hasOdd ? product : 0;\n    }\n}\n",
            "class Global {\n    public static boolean isNested(String s) {\n        List<Integer> open_idx = new ArrayList<>();\n        List<Integer> close_idx = new ArrayList<>();\n        for (int i = 0; i < s.length(); ++i) {\n            if (s.charAt(i) == '[') {\n                open_idx.add(i);\n            } else if (s.charAt(i) == ']') {\n                close_idx.add(i);\n            }\n        }\n        Collections.reverse(close_idx);\n        int cnt = 0;\n        int i = 0;\n        int l = close_idx.size();\n        for (int idx : open_idx) {\n            if (i < l && idx < close_idx.get(i)) {\n                ++cnt;\n                ++i;\n            }\n        }\n        return cnt >= 2;\n    }\n}\n",
            "class Global {\n    public static int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (double n : lst) {\n            sum += (int) Math.pow(Math.ceil(n), 2);\n        }\n        return sum;\n    }\n}\n",
            "class Global {\n    public static boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.isEmpty()) {\n            return false;\n        }\n        int lastSpace = txt.lastIndexOf(' ');\n        String last = txt.substring(lastSpace + 1);\n        return last.length() == 1 && Character.isLetter(last.charAt(0));\n    }\n}\n",
            "class Global {\n    public static int canArrange(List<Integer> arr) {\n        if (arr.size() <= 1) {\n            return -1;\n        }\n        List<Integer> idx = new ArrayList<>();\n        for (int i = 1; i < arr.size(); ++i) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                idx.add(i);\n            }\n        }\n        return !idx.isEmpty() ? Collections.max(idx) : -1;\n    }\n}\n",
            "class Global {\n    public static List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst) {\n        List<Integer> neg = new ArrayList<>();\n        List<Integer> pos = new ArrayList<>();\n        \n        for (int i : lst) {\n            if (i < 0) {\n                neg.add(i);\n            } else if (i > 0) {\n                pos.add(i);\n            }\n        }\n        \n        Optional<Integer> max_neg = !neg.isEmpty() ? Optional.of(Collections.max(neg)) : Optional.empty();\n        Optional<Integer> min_pos = !pos.isEmpty() ? Optional.of(Collections.min(pos)) : Optional.empty();\n        \n        return Arrays.asList(max_neg, min_pos);\n    }\n}\n",
            "```Java\nclass Global {\n    public static Optional<Double> compareOne(Object a, Object b) {\n        double a1 = anyToReal(a);\n        double b1 = anyToReal(b);\n        if (a1 == b1) {\n            return Optional.empty();\n        } else if (a1 > b1) {\n            return Optional.of(a1);\n        } else {\n            return Optional.of(b1);\n        }\n    }\n\n    private static double anyToReal(Object o) {\n        if (o instanceof String) {\n            return Double.parseDouble(((String) o).replace(',', '.'));\n        } else if (o instanceof Integer) {\n            return ((Integer) o).doubleValue();\n        } else if (o instanceof Double) {\n            return (Double) o;\n        } else {\n            throw new RuntimeException(\"Type Error\");\n        }\n    }\n}\n```",
            "class Global {\n    public static boolean isEqualToSumEven(int n) {\n        return n % 2 == 0 && n >= 8;\n    }\n}\n",
            "class Global {\n    public static int specialFactorial(int n) {\n        int fact = 1;\n        int result = 1;\n        for (int i = 1; i <= n; ++i) {\n            fact *= i;\n            result *= fact;\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String fixSpaces(String txt) {\n        return txt.replaceAll(\"\\\\s{3,}\", \"-\").replace(\" \", \"_\");\n    }\n}\n",
            "class Global {\n    public static String fileNameCheck(String fileName) {\n        String[] suf = {\"txt\", \"exe\", \"dll\"};\n        String[] lst = fileName.split(\"\\\\.\");\n        if (lst.length != 2 || java.util.Arrays.stream(suf).noneMatch(lst[1]::equals) || lst[0].length() == 0 || !Character.isLetter(lst[0].charAt(0)) || lst[0].replaceAll(\"[^\\\\d]\", \"\").length() > 3) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}\n",
            "class Global {\n    public static int sumSquares(List<Integer> lst) {\n        int result = 0;\n        for (int i = 0; i < lst.size(); ++i) {\n            if (i % 3 == 0) {\n                result += Math.pow(lst.get(i), 2);\n            } else if (i % 4 == 0) {\n                result += Math.pow(lst.get(i), 3);\n            } else {\n                result += lst.get(i);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String wordsInSentence(String sentence) {\n        StringBuilder result = new StringBuilder();\n        String[] words = sentence.split(\"\\\\s+\");\n        for (String word : words) {\n            int length = word.length();\n            boolean isPrime = true;\n            if (length < 2) {\n                continue;\n            }\n            for (int i = 2; i <= Math.sqrt(length); ++i) {\n                if (length % i == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                if (result.length() > 0) {\n                    result.append(\" \");\n                }\n                result.append(word);\n            }\n        }\n        return result.toString();\n    }\n}\n",
            "class Global {\n    public static boolean simplify(String x, String n) {\n        int slash_pos_x = x.indexOf('/');\n        int slash_pos_n = n.indexOf('/');\n        int num_x = Integer.parseInt(x.substring(0, slash_pos_x));\n        int den_x = Integer.parseInt(x.substring(slash_pos_x + 1));\n        int num_n = Integer.parseInt(n.substring(0, slash_pos_n));\n        int den_n = Integer.parseInt(n.substring(slash_pos_n + 1));\n        int num = num_x * num_n;\n        int den = den_x * den_n;\n        return num % den == 0;\n    }\n}\n",
            "import java.util.*;\nclass Global {\n    public static List<Integer> orderByPoints(List<Integer> nums) {\n        nums.sort(Comparator.comparingInt(Global::digitsSum));\n        return nums;\n    }\n\n    private static int digitsSum(int n) {\n        String nStr = Integer.toString(n);\n        if (n >= 0) {\n            return nStr.chars().map(Character::getNumericValue).sum();\n        } else {\n            return Character.getNumericValue(nStr.charAt(0)) * 2 + digitsSum(Math.abs(n));\n        }\n    }\n}\n",
            "class Global {\n    public static int specialFilter(List<Integer> nums) {\n        String odds = \"13579\";\n        int count = 0;\n        for (int n : nums) {\n            if (n > 10 && n % 2 == 1 && odds.indexOf(String.valueOf(n).charAt(0)) != -1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n",
            "class Global {\n    public static int getMaxTriples(int n) {\n        int[] c = {0, 0, 0};\n        for (int i = 1; i <= n; ++i) {\n            int a = i * i - i + 1;\n            c[a % 3]++;\n        }\n        return c[0] * c[1] * c[2] + ((c[0] * (c[0] - 1) * (c[0] - 2)) + (c[1] * (c[1] - 1) * (c[1] - 2)) + (c[2] * (c[2] - 1) * (c[2] - 2))) / 6;\n    }\n}\n",
            "class Global {\n    public static List<String> bf(String planet1, String planet2) {\n        List<String> names = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        if (!names.contains(planet1) || !names.contains(planet2)) {\n            return new ArrayList<>();\n        }\n        int l = names.indexOf(planet1);\n        int r = names.indexOf(planet2);\n        if (l > r) {\n            int temp = l;\n            l = r;\n            r = temp;\n        }\n        if (l == r) {\n            return new ArrayList<>();\n        }\n        return names.subList(l + 1, r);\n    }\n}\n",
            "class Global {\n    public static List<String> sortedListSum(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result, (a, b) -> a.length() != b.length() ? Integer.compare(a.length(), b.length()) : a.compareTo(b));\n        return result;\n    }\n}\n",
            "class Global {\n    public static int xOrY(int n, int x, int y) {\n        if (n < 2) {\n            return y;\n        }\n        for (int i = 2; i <= Math.floor(Math.sqrt(n)); ++i) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}\n",
            "class Global {\n    public static int doubleTheDifference(List<Double> lst) {\n        int result = 0;\n        for (double n : lst) {\n            if (n >= 0 && n % 2.0 == 1.0) {\n                result += n * n;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); ++i) {\n            result.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String strongestExtension(String className, List<String> extensions) {\n        int max_s = -1;\n        String max_ext = \"\";\n        for (String ext : extensions) {\n            int upper = 0;\n            int lower = 0;\n            for (char c : ext.toCharArray()) {\n                if (Character.isUpperCase(c)) upper++;\n                if (Character.isLowerCase(c)) lower++;\n            }\n            int s = upper - lower;\n            if (s > max_s) {\n                max_s = s;\n                max_ext = ext;\n            }\n        }\n        return className + \".\" + max_ext;\n    }\n}\n",
            "class Global {\n    public static boolean cycpatternCheck(String a, String b) {\n        if (a.length() < b.length()) {\n            return false;\n        }\n        for (int i = 0; i < b.length(); ++i) {\n            String rotated = b.substring(i) + b.substring(0, i);\n            if (a.contains(rotated)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static List<Integer> evenOddCount(int num) {\n        String ds = Integer.toString(Math.abs(num));\n        int even = 0;\n        for (char d : ds.toCharArray()) {\n            if ((d - '0') % 2 == 0) {\n                even++;\n            }\n        }\n        return Arrays.asList(even, ds.length() - even);\n    }\n}\n",
            "class Global {\n    public static String intToMiniRoman(int num) {\n        int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        String[] numerals = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n        StringBuilder res = new StringBuilder();\n        for (int i = 0; i < values.length; ++i) {\n            while (num >= values[i]) {\n                res.append(numerals[i]);\n                num -= values[i];\n            }\n        }\n        return res.toString();\n    }\n}\n",
            "class Global {\n    public static boolean rightAngleTriangle(int a, int b, int c) {\n        int[] s = {a, b, c};\n        java.util.Arrays.sort(s);\n        return s[0] * s[0] + s[1] * s[1] == s[2] * s[2];\n    }\n}\n",
            "class Global {\n    public static String findMax(List<String> words) {\n        int max_cnt = 0;\n        String max_w = \"\";\n        for (String w : words) {\n            Set<Character> unique_chars = new HashSet<>();\n            for (char c : w.toCharArray()) {\n                unique_chars.add(c);\n            }\n            int cnt = unique_chars.size();\n            if (cnt > max_cnt) {\n                max_cnt = cnt;\n                max_w = w;\n            } else if (cnt == max_cnt) {\n                max_w = min(max_w, w);\n            }\n        }\n        return max_w;\n    }\n\n    private static String min(String s1, String s2) {\n        return s1.compareTo(s2) <= 0 ? s1 : s2;\n    }\n}\n",
            "class Global {\n    public static List<Integer> eat(int num, int need, int remaining) {\n        if (need <= remaining) {\n            return Arrays.asList(num + need, remaining - need);\n        } else {\n            return Arrays.asList(num + remaining, 0);\n        }\n    }\n}\n",
            "class Global {\n    public static int doAlgebra(List<String> operators, List<Integer> operands) {\n        List<String> ops = new ArrayList<>(operators);\n        List<Integer> nums = new ArrayList<>(operands);\n        int i = ops.size() - 1;\n        while (i >= 0) {\n            if (ops.get(i).equals(\"**\")) {\n                nums.set(i, (int) Math.pow(nums.get(i), nums.get(i + 1)));\n                nums.remove(i + 1);\n                ops.remove(i);\n            }\n            i -= 1;\n        }\n        i = 0;\n        while (i < ops.size()) {\n            if (ops.get(i).equals(\"*\")) {\n                nums.set(i, nums.get(i) * nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i -= 1;\n            } else if (ops.get(i).equals(\"//\")) {\n                nums.set(i, nums.get(i) / nums.get(i + 1)); // Using / for integer division in Java\n                nums.remove(i + 1);\n                ops.remove(i);\n                i -= 1;\n            }\n            i += 1;\n        }\n        i = 0;\n        while (i < ops.size()) {\n            if (ops.get(i).equals(\"+\")) {\n                nums.set(i, nums.get(i) + nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i -= 1;\n            } else if (ops.get(i).equals(\"-\")) {\n                nums.set(i, nums.get(i) - nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i -= 1;\n            }\n            i += 1;\n        }\n        return nums.get(0);\n    }\n}\n",
            "class Global {\n    public static String solve(String s) {\n        boolean hasAlphabetic = s.chars().anyMatch(Character::isLetter);\n        if (!hasAlphabetic) {\n            return new StringBuilder(s).reverse().toString();\n        }\n        StringBuilder result = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (!Character.isLetter(ch)) {\n                result.append(ch);\n            } else if (Character.isUpperCase(ch)) {\n                result.append(Character.toLowerCase(ch));\n            } else if (Character.isLowerCase(ch)) {\n                result.append(Character.toUpperCase(ch));\n            }\n        }\n        return result.toString();\n    }\n}\n",
            "class Global {\n    public static Optional<String> stringToMd5(String txt) {\n        if (txt.isEmpty()) {\n            return Optional.empty();\n        }\n        MessageDigest md;\n        try {\n            md = MessageDigest.getInstance(\"MD5\");\n        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n        }\n        byte[] message digest = md.digest(txt.getBytes());\n        BigInteger no = new BigInteger(1, messageDigest);\n        String hashtext = no.toString(16);\n        while (hashtext.length() < 32) {\n            hashtext = \"0\" + hashtext;\n        }\n        return Optional.of(hashtext);\n    }\n}\n",
            "class Global {\n    public static List<Integer> generateIntegers(int a, int b) {\n        int lower = Math.max(2, Math.min(a, b));\n        int upper = Math.min(8, Math.max(a, b));\n        List<Integer> result = new ArrayList<>();\n        for (int i = lower; i <= upper; ++i) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}\n"
        ]
    }
}