{
    "python": {
        "go": [
            "func HasCloseElements(numbers []float64, threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            if math.Abs(numbers[i]-numbers[j]) < threshold {\n                return true\n            }\n        }\n    }\n    return false\n}\n",
            "func SeparateParenGroups(parenString string) []string {\n    var groups []string\n    stk := []rune{}\n    currentGroup := \"\"\n    parens := strings.ReplaceAll(parenString, \" \", \"\")\n    for _, ch := range parens {\n        if ch == '(' {\n            stk = append(stk, ch)\n            currentGroup += string(ch)\n        } else if ch == ')' {\n            stk = stk[:len(stk)-1]\n            currentGroup += string(ch)\n            if len(stk) == 0 {\n                groups = append(groups, currentGroup)\n                currentGroup = \"\"\n            }\n        }\n    }\n    return groups\n}\n",
            "func TruncateNumber(num float64) float64 {\n    return num - math.Floor(num)\n}\n",
            "func BelowZero(operations []int) bool {\n    balance := 0\n    for _, op := range operations {\n        balance += op\n        if balance < 0 {\n            return true\n        }\n    }\n    return false\n}\n",
            "func MeanAbsoluteDeviation(numbers []float64) float64 {\n    mean := 0.0\n    for _, num := range numbers {\n        mean += num\n    }\n    mean /= float64(len(numbers))\n\n    deviation := 0.0\n    for _, num := range numbers {\n        deviation += math.Abs(num - mean)\n    }\n    return deviation / float64(len(numbers))\n}\n",
            "func Intersperse(numbers []int, delimiter int) []int {\n    result := make([]int, 0)\n    for i := 0; i < len(numbers); i++ {\n        if i != 0 {\n            result = append(result, delimiter)\n        }\n        result = append(result, numbers[i])\n    }\n    return result\n}\n",
            "func ParseNestedParens(parenString string) []int {\n    result := []int{}\n    parenGroups := strings.Split(parenString, \" \")\n    for _, group := range parenGroups {\n        maxDepth := 0\n        depth := 0\n        for _, ch := range group {\n            if ch == '(' {\n                depth += 1\n                if depth > maxDepth {\n                    maxDepth = depth\n                }\n            } else if ch == ')' {\n                depth -= 1\n            }\n        }\n        result = append(result, maxDepth)\n    }\n    return result\n}\n",
            "func FilterBySubstring(strs []string, substring string) []string {\n    var result []string\n    for _, s := range strs {\n        if strings.Contains(s, substring) {\n            result = append(result, s)\n        }\n    }\n    return result\n}\n",
            "func SumProduct(numbers []int) []int {\n    n_sum := 0\n    n_product := 1\n    for _, num := range numbers {\n        n_sum += num\n        n_product *= num\n    }\n    return []int{n_sum, n_product}\n}\n",
            "func RollingMax(numbers []int) []int {\n    maxSoFar := -1<<31 // Initialize to the smallest int value\n    result := make([]int, len(numbers))\n    for i, num := range numbers {\n        if num > maxSoFar {\n            maxSoFar = num\n        }\n        result[i] = maxSoFar\n    }\n    return result\n}\n",
            "func isPalindrome(s string) bool {\n    for i := 0; i < len(s)/2; i++ {\n        if s[i] != s[len(s)-1-i] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc MakePalindrome(s string) string {\n    if isPalindrome(s) {\n        return s\n    }\n    for i := 0; i < len(s); i++ {\n        if isPalindrome(s[i:]) {\n            suffix := s[:i]\n            runes := []rune(suffix)\n            for j, k := 0, len(runes)-1; j < k; j, k = j+1, k-1 {\n                runes[j], runes[k] = runes[k], runes[j]\n            }\n            return s + string(runes)\n        }\n    }\n    return \"\"\n}\n",
            "func StringXor(a string, b string) string {\n    result := make([]byte, len(a))\n    for i := range a {\n        if a[i] == b[i] {\n            result[i] = '0'\n        } else {\n            result[i] = '1'\n        }\n    }\n    return string(result)\n}\n",
            "func Longest(strs []string) *string {\n    if len(strs) == 0 {\n        return nil\n    }\n    longestS := strs[0]\n    for _, s := range strs {\n        if len(s) > len(longestS) {\n            longestS = s\n        }\n    }\n    return &longestS\n}\n",
            "func GreatestCommonDivisor(a int, b int) int {\n    if b == 0 {\n        return a\n    } else {\n        return GreatestCommonDivisor(b, a % b)\n    }\n}\n",
            "func AllPrefixes(s string) []string {\n    prefixes := make([]string, len(s))\n    for i := 0; i < len(s); i++ {\n        prefixes[i] = s[:i+1]\n    }\n    return prefixes\n}\n",
            "func StringSequence(n int) string {\n    var result []string\n    for i := 0; i <= n; i++ {\n        result = append(result, fmt.Sprintf(\"%d\", i))\n    }\n    return strings.Join(result, \" \")\n}\n",
            "func CountDistinctCharacters(s string) int {\n    charMap := make(map[rune]bool)\n    for _, char := range s {\n        charMap[char] = true\n    }\n    return len(charMap)\n}\n",
            "func ParseMusic(musicString string) []int {\n    durations := map[string]int{\"o\": 4, \"o|\": 2, \".|\": 1}\n    notes := strings.Split(musicString, \" \")\n    result := make([]int, len(notes))\n    for i, note := range notes {\n        if duration, exists := durations[note]; exists {\n            result[i] = duration\n        }\n    }\n    return result\n}\n",
            "func HowManyTimes(s string, substring string) int {\n    times := 0\n    for i := 0; i <= len(s)-len(substring); i++ {\n        if s[i:i+len(substring)] == substring {\n            times++\n        }\n    }\n    return times\n}\n",
            "func SortNumbers(numbers string) string {\n    numDict := map[string]int{\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    numList := strings.Fields(numbers)\n    for i, num := range numList {\n        if _, exists := numDict[num]; !exists {\n            numList = append(numList[:i], numList[i+1:]...)\n            i--\n        }\n    }\n    sort.SliceStable(numList, func(i, j int) bool {\n        return numDict[numList[i]] < numDict[numList[j]]\n    })\n    return strings.Join(numList, \" \")\n}\n",
            "func FindClosestElements(numbers []float64) []float64 {\n    sort.Float64s(numbers)\n    minDiff := math.Inf(1)\n    var closestPair []float64\n    for i := 1; i < len(numbers); i++ {\n        diff := numbers[i] - numbers[i-1]\n        if diff < minDiff {\n            minDiff = diff\n            closestPair = []float64{numbers[i-1], numbers[i]}\n        }\n    }\n    return closestPair\n}\n",
            "func RescaleToUnit(numbers []float64) []float64 {\n    if len(numbers) == 0 {\n        return []float64{}\n    }\n\n    minNum := numbers[0]\n    maxNum := numbers[0]\n\n    for _, num := range numbers {\n        if num < minNum {\n            minNum = num\n        }\n        if num > maxNum {\n            maxNum = num\n        }\n    }\n\n    if minNum == maxNum {\n        return make([]float64, len(numbers))\n    } else {\n        rescaled := make([]float64, len(numbers))\n        for i, num := range numbers {\n            rescaled[i] = (num - minNum) / (maxNum - minNum)\n        }\n        return rescaled\n    }\n}\n",
            "func FilterIntegers(values []interface{}) []int {\n    var result []int\n    for _, v := range values {\n        if num, ok := v.(int); ok {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
            "func StrLength(s string) int {\n    return len(s)\n}\n",
            "func LargestDivisor(n int) int {\n    for i := 2; i < n; i++ {\n        if n%i == 0 {\n            return n / i\n        }\n    }\n    return 1\n}\n",
            "func Factorize(n int) []int {\n    var factors []int\n    divisor := 2\n    for divisor <= n {\n        if n%divisor == 0 {\n            factors = append(factors, divisor)\n            n /= divisor\n        } else {\n            divisor += 1\n        }\n    }\n    return factors\n}\n",
            "func RemoveDuplicates(numbers []int) []int {\n    counts := make(map[int]int)\n    for _, num := range numbers {\n        counts[num]++\n    }\n    var res []int\n    for _, num := range numbers {\n        if counts[num] == 1 {\n            res = append(res, num)\n        }\n    }\n    return res\n}\n",
            "func FlipCase(s string) string {\n    flipped := []rune{}\n    for _, ch := range s {\n        if !unicode.IsLetter(ch) {\n            flipped = append(flipped, ch)\n        } else if unicode.IsLower(ch) {\n            flipped = append(flipped, unicode.ToUpper(ch))\n        } else {\n            flipped = append(flipped, unicode.ToLower(ch))\n        }\n    }\n    return string(flipped)\n}\n",
            "func Concatenate(strs []string) string {\n    return strings.Join(strs, \"\")\n}\n",
            "func FilterByPrefix(strs []string, prefixStr string) []string {\n    var result []string\n    for _, s := range strs {\n        if strings.HasPrefix(s, prefixStr) {\n            result = append(result, s)\n        }\n    }\n    return result\n}\n",
            "func GetPositive(l []int) []int {\n    var result []int\n    for _, num := range l {\n        if num > 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
            "func IsPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func Poly(xs []int, x float64) float64 {\n    var res float64 = 0.0\n    for i := 0; i < len(xs); i++ {\n        res += float64(xs[i]) * math.Pow(x, float64(i))\n    }\n    return res\n}\n\nfunc FindZero(xs []int) float64 {\n    x1 := 1.0\n    x2 := -1.0\n    for Poly(xs, x1)*Poly(xs, x2) > 0 {\n        x1 *= 2\n        x2 *= 2\n    }\n    for math.Abs(x1-x2) > 1e-10 {\n        mid := (x1 + x2) / 2\n        if Poly(xs, mid) == 0 {\n            return mid\n        } else if Poly(xs, mid)*Poly(xs, x1) < 0 {\n            x2 = mid\n        } else {\n            x1 = mid\n        }\n    }\n    return (x1 + x2) / 2\n}\n",
            "func SortThird(l []int) []int {\n    thirdElements := make([]int, 0)\n    for i := 0; i < len(l); i += 3 {\n        thirdElements = append(thirdElements, l[i])\n    }\n    sort.Ints(thirdElements)\n    \n    sortedList := make([]int, len(l))\n    thirdIndex := 0\n    for i := 0; i < len(l); i++ {\n        if i%3 == 0 {\n            sortedList[i] = thirdElements[thirdIndex]\n            thirdIndex++\n        } else {\n            sortedList[i] = l[i]\n        }\n    }\n    return sortedList\n}\n",
            "func ListUnique(l []int) []int {\n    uniqueMap := make(map[int]bool)\n    var result []int\n\n    for _, value := range l {\n        if _, exists := uniqueMap[value]; !exists {\n            uniqueMap[value] = true\n            result = append(result, value)\n        }\n    }\n\n    sort.Ints(result)\n    return result\n}\n",
            "func MaxElement(l []int) int {\n    if l == nil || len(l) == 0 {\n        return 0\n    }\n    max := l[0]\n    for _, value := range l {\n        if value > max {\n            max = value\n        }\n    }\n    return max\n}\n",
            "func FizzBuzz(n int) int {\n\tcnt := 0\n\tfor i := 0; i < n; i++ {\n\t\tif i%11 == 0 || i%13 == 0 {\n\t\t\tcnt += countSevens(i)\n\t\t}\n\t}\n\treturn cnt\n}\n\nfunc countSevens(num int) int {\n\tcount := 0\n\ts := strconv.Itoa(num)\n\tfor _, c := range s {\n\t\tif c == '7' {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n",
            "func SortEven(l []int) []int {\n    var sortedEven []int\n    for index, value := range l {\n        if index%2 == 0 {\n            sortedEven = append(sortedEven, value)\n        }\n    }\n    sort.Ints(sortedEven)\n\n    result := make([]int, len(l))\n    evenIndex := 0\n    for index := range l {\n        if index%2 == 0 {\n            result[index] = sortedEven[evenIndex]\n            evenIndex++\n        } else {\n            result[index] = l[index]\n        }\n    }\n    return result\n}\n",
            "func EncodeCyclic(s string) string {\n    var result []rune\n    for i := 0; i < len(s); i += 3 {\n        if i+3 > len(s) {\n            result = append(result, []rune(s[i:])...)\n        } else {\n            result = append(result, rune(s[i+1]), rune(s[i+2]))\n            result = append(result, rune(s[i]))\n        }\n    }\n    return string(result)\n}\n\nfunc DecodeCyclic(s string) string {\n    return EncodeCyclic(EncodeCyclic(s))\n}\n",
            "func PrimeFib(n int) int {\n    isPrime := func(num int) bool {\n        if num < 2 {\n            return false\n        }\n        for i := 2; i <= int(math.Sqrt(float64(num))); i++ {\n            if num%i == 0 {\n                return false\n            }\n        }\n        return true\n    }\n\n    f := []int{0, 1}\n    cnt := 0\n    for cnt < n {\n        f = append(f[1:], f[0]+f[1])\n        if isPrime(f[1]) {\n            cnt++\n        }\n    }\n    return f[1]\n}\n",
            "func TriplesSumToZero(l []int) bool {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            for k := j + 1; k < len(l); k++ {\n                if l[i] + l[j] + l[k] == 0 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n",
            "func CarRaceCollision(n int) int {\n    return n * n\n}\n",
            "func IncrList(l []int) []int {\n    result := make([]int, len(l))\n    for i, v := range l {\n        result[i] = v + 1\n    }\n    return result\n}\n",
            "func PairsSumToZero(l []int) bool {\n    seen := make(map[int]bool)\n    for _, num := range l {\n        if seen[-num] {\n            return true\n        }\n        seen[num] = true\n    }\n    return false\n}\n",
            "func ChangeBase(x int, bas int) string {\n    if x == 0 {\n        return \"0\"\n    }\n    var digits []string\n    for x > 0 {\n        digits = append(digits, strconv.Itoa(x%bas))\n        x = x / bas\n    }\n    for i, j := 0, len(digits)-1; i < j; i, j = i+1, j-1 {\n        digits[i], digits[j] = digits[j], digits[i]\n    }\n    return strings.Join(digits, \"\")\n}\n",
            "func TriangleArea(a int, h int) float64 {\n    return float64(a * h) / 2.0\n}\n",
            "func Fib4(n int) int {\n    fib := []int{0, 0, 2, 0}\n    for i := 4; i <= n; i++ {\n        sum := 0\n        for _, val := range fib {\n            sum += val\n        }\n        fib[i%4] = sum\n    }\n    return fib[n%4]\n}\n",
            "func Median(l []float64) float64 {\n    sl := make([]float64, len(l))\n    copy(sl, l)\n    sort.Float64s(sl)\n    if len(sl)%2 != 0 {\n        return sl[len(sl)/2]\n    } else {\n        return (sl[len(sl)/2] + sl[len(sl)/2-1]) / 2\n    }\n}\n",
            "func IsPalindrome(txt string) bool {\n    runes := []rune(txt)\n    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        if runes[i] != runes[j] {\n            return false\n        }\n    }\n    return true\n}\n",
            "func Modp(n int, p int) int {\n    ret := 1\n    for i := 0; i < n; i++ {\n        ret = (ret * 2) % p\n    }\n    return ret\n}\n",
            "func EncodeShift(s string) string {\n    result := \"\"\n    for _, ch := range s {\n        result += string(((ch - 'a' + 5) % 26) + 'a')\n    }\n    return result\n}\n\nfunc DecodeShift(s string) string {\n    result := \"\"\n    for _, ch := range s {\n        result += string(((ch - 'a' + 21) % 26) + 'a')\n    }\n    return result\n}\n",
            "func RemoveVowels(txt string) string {\n    vowels := \"aeiouAEIOU\"\n    result := []rune{}\n    for _, char := range txt {\n        if !strings.ContainsRune(vowels, char) {\n            result = append(result, char)\n        }\n    }\n    return string(result)\n}\n",
            "func BelowThreshold(l []int, t int) bool {\n    for _, x := range l {\n        if x >= t {\n            return false\n        }\n    }\n    return true\n}\n",
            "func Add(x int, y int) int {\n    return x + y;\n}\n",
            "func SameChars(s0 string, s1 string) bool {\n    set0 := make(map[rune]bool)\n    set1 := make(map[rune]bool)\n\n    for _, char := range s0 {\n        set0[char] = true\n    }\n\n    for _, char := range s1 {\n        set1[char] = true\n    }\n\n    if len(set0) != len(set1) {\n        return false\n    }\n\n    for char := range set0 {\n        if !set1[char] {\n            return false\n        }\n    }\n\n    return true\n}\n",
            "func Fib(n int) int {\n    if n <= 1 {\n        return n\n    } else {\n        return Fib(n - 1) + Fib(n - 2)\n    }\n}\n",
            "func CorrectBracketing(brackets string) bool {\n    depth := 0\n    for _, b := range brackets {\n        if b == '<' {\n            depth += 1\n        } else if b == '>' {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "func Monotonic(l []int) bool {\n    diff := make([]int, len(l)-1)\n    for i := 0; i < len(l)-1; i++ {\n        diff[i] = l[i+1] - l[i]\n    }\n    isNonIncreasing := true\n    isNonDecreasing := true\n    for _, x := range diff {\n        if x > 0 {\n            isNonIncreasing = false\n        }\n        if x < 0 {\n            isNonDecreasing = false\n        }\n    }\n    return isNonIncreasing || isNonDecreasing\n}\n",
            "```\nfunc Common(l1 []int, l2 []int) []int {\n    set1 := make(map[int]struct{})\n    for _, num := range l1 {\n        set1[num] = struct{}{}\n    }\n\n    var result []int\n    set2 := make(map[int]struct{})\n    for _, num := range l2 {\n        if _, found := set1[num]; found && !set2[num] {\n            result = append(result, num)\n            set2[num] = struct{}{}\n        }\n    }\n\n    sort.Ints(result)\n    return result\n}\n```",
            "func LargestPrimeFactor(n int) int {\n    i := 2\n    for i * i <= n {\n        if n % i != 0 {\n            i += 1\n        } else {\n            n /= i\n        }\n    }\n    return n\n}\n",
            "func SumToN(n int) int {\n    return (n + 1) * n / 2\n}\n",
            "func CorrectBracketing(brackets string) bool {\n    depth := 0\n    for _, b := range brackets {\n        if b == '(' {\n            depth += 1\n        } else if b == ')' {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "func Derivative(xs []int) []int {\n    result := make([]int, len(xs)-1)\n    for i := 1; i < len(xs); i++ {\n        result[i-1] = xs[i] * i\n    }\n    return result\n}\n",
            "func Fibfib(n int) int {\n    if n <= 1 {\n        return 0\n    }\n    a, b, c := 0, 0, 1\n    for n > 2 {\n        a, b, c = b, c, a+b+c\n        n -= 1\n    }\n    return c\n}\n",
            "func VowelsCount(s string) int {\n    vowels := \"aeiou\"\n    cnt := 0\n    for i := 0; i < len(s); i++ {\n        if strings.ContainsRune(vowels, unicode.ToLower(rune(s[i]))) || (i == len(s)-1 && unicode.ToLower(rune(s[i])) == 'y') {\n            cnt++\n        }\n    }\n    return cnt\n}\n",
            "func CircularShift(x int, shift int) string {\n    x_str := strconv.Itoa(x)\n    if shift > len(x_str) {\n        return reverseString(x_str)\n    } else {\n        return x_str[len(x_str)-shift:] + x_str[:len(x_str)-shift]\n    }\n}\n\nfunc reverseString(s string) string {\n    runes := []rune(s)\n    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        runes[i], runes[j] = runes[j], runes[i]\n    }\n    return string(runes)\n}\n",
            "func DigitSum(s string) int {\n    sum := 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c)\n        }\n    }\n    return sum\n}\n",
            "func FruitDistribution(s string, n int) int {\n    words := strings.Split(s, \" \")\n    applesIndex := slices.Index(words, \"apples\")\n    orangesIndex := slices.Index(words, \"oranges\")\n    \n    apples, _ := strconv.Atoi(words[applesIndex - 1])\n    oranges, _ := strconv.Atoi(words[orangesIndex - 1])\n    \n    return n - apples - oranges\n}\n",
            "func Pluck(arr []int) []int {\n    var evens []int\n    for _, n := range arr {\n        if n%2 == 0 {\n            evens = append(evens, n)\n        }\n    }\n    if len(evens) == 0 {\n        return []int{}\n    }\n    minEven := evens[0]\n    for _, e := range evens {\n        if e < minEven {\n            minEven = e\n        }\n    }\n    for i, n := range arr {\n        if n == minEven {\n            return []int{minEven, i}\n        }\n    }\n    return []int{}\n}\n",
            "func Search(lst []int) int {\n    freqs := make(map[int]int)\n    for _, n := range lst {\n        freqs[n]++\n    }\n    var goodVals []int\n    for k, v := range freqs {\n        if v >= k {\n            goodVals = append(goodVals, k)\n        }\n    }\n    if len(goodVals) > 0 {\n        maxVal := 0\n        for _, val := range goodVals {\n            if val > maxVal {\n                maxVal = val\n            }\n        }\n        return maxVal\n    }\n    return -1\n}\n",
            "func StrangeSortList(lst []int) []int {\n    sl := make([]int, len(lst))\n    copy(sl, lst)\n    sort.Ints(sl)\n    result := []int{}\n    left, right := 0, len(sl)-1\n    for left <= right {\n        result = append(result, sl[left])\n        left++\n        if left <= right {\n            result = append(result, sl[right])\n            right--\n        }\n    }\n    return result\n}\n",
            "func TriangleArea(a int, b int, c int) float64 {\n    if a+b > c && a+c > b && b+c > a {\n        s := float64(a+b+c) / 2.0\n        return math.Sqrt(s * (s - float64(a)) * (s - float64(b)) * (s - float64(c)))\n    } else {\n        return -1.0\n    }\n}\n",
            "func WillItFly(q []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n    var isPalin bool = true\n    for i := range q {\n        if q[i] != q[len(q)-i-1] {\n            isPalin = false\n            break\n        }\n    }\n    total := 0\n    for _, value := range q {\n        total += value\n    }\n    return isPalin && total <= w\n}\n",
            "func SmallestChange(arr []int) int {\n    ans := 0\n    for i := 0; i < len(arr)/2; i++ {\n        if arr[i] != arr[len(arr)-i-1] {\n            ans++\n        }\n    }\n    return ans\n}\n",
            "func TotalMatch(lst1 []string, lst2 []string) []string {\n    cnt1 := 0\n    for _, s := range lst1 {\n        cnt1 += len(s)\n    }\n    cnt2 := 0\n    for _, s := range lst2 {\n        cnt2 += len(s)\n    }\n    if cnt1 <= cnt2 {\n        return lst1\n    }\n    return lst2\n}\n",
            "func IsMultiplyPrime(a int) bool {\n    isPrime := func(n int) bool {\n        if n < 2 {\n            return false\n        }\n        for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n            if n%i == 0 {\n                return false\n            }\n        }\n        return true\n    }\n\n    cnt := 0\n    for i := 2; i <= a; i++ {\n        if isPrime(i) {\n            for a%i == 0 {\n                cnt++\n                a /= i\n            }\n        }\n    }\n    return cnt == 3\n}\n",
            "func IsSimplePower(x int, n int) bool {\n    if n < 2 {\n        return x == n\n    }\n    tmp := 1\n    for tmp < x {\n        tmp *= n\n    }\n    return tmp == x\n}\n",
            "func IsCube(a int) bool {\n    a = abs(a)\n    root := int(math.Round(math.Pow(float64(a), 1.0/3.0)))\n    return root*root*root == a\n}\n",
            "func HexKey(num string) int {\n    count := 0\n    for _, x := range num {\n        if strings.ContainsRune(\"2357BD\", x) {\n            count++\n        }\n    }\n    return count\n}\n",
            "func DecimalToBinary(dec int) string {\n    binary := fmt.Sprintf(\"%b\", dec)\n    return \"db\" + binary + \"db\"\n}\n",
            "func IsHappy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n    for i := 0; i < len(s)-2; i++ {\n        if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return true\n}\n",
            "func NumericalLetterGrade(grades []float64) []string {\n    result := []string{}\n    for _, g := range grades {\n        if g == 4.0 {\n            result = append(result, \"A+\")\n        } else if g > 3.7 {\n            result = append(result, \"A\")\n        } else if g > 3.3 {\n            result = append(result, \"A-\")\n        } else if g > 3.0 {\n            result = append(result, \"B+\")\n        } else if g > 2.7 {\n            result = append(result, \"B\")\n        } else if g > 2.3 {\n            result = append(result, \"B-\")\n        } else if g > 2.0 {\n            result = append(result, \"C+\")\n        } else if g > 1.7 {\n            result = append(result, \"C\")\n        } else if g > 1.3 {\n            result = append(result, \"C-\")\n        } else if g > 1.0 {\n            result = append(result, \"D+\")\n        } else if g > 0.7 {\n            result = append(result, \"D\")\n        } else if g > 0.0 {\n            result = append(result, \"D-\")\n        } else {\n            result = append(result, \"E\")\n        }\n    }\n    return result\n}\n",
            "func PrimeLength(s string) bool {\n    length := len(s)\n    if length < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Sqrt(float64(length))); i++ {\n        if length%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func StartsOneEnds(n int) int {\n    if n == 1 {\n        return 1\n    }\n    return 2 * 9 * int(math.Pow(10, float64(n-2)))\n}\n",
            "func Solve(n int) string {\n    digitsSum := 0\n    for n > 0 {\n        digitsSum += n % 10\n        n /= 10\n    }\n    return strconv.FormatInt(int64(digitsSum), 2)\n}\n",
            "func Add(lst []int) int {\n    acc := 0\n    for i, x := range lst {\n        if i%2 == 1 && x%2 == 0 {\n            acc += x\n        }\n    }\n    return acc\n}\n",
            "func AntiShuffle(s string) string {\n    words := strings.Fields(s)\n    for i := range words {\n        runes := []rune(words[i])\n        sort.Slice(runes, func(i, j int) bool {\n            return runes[i] < runes[j]\n        })\n        words[i] = string(runes)\n    }\n    return strings.Join(words, \" \")\n}\n",
            "func GetRow(lst [][]int, x int) [][]int {\n    var coords [][]int\n    for i := 0; i < len(lst); i++ {\n        for j := 0; j < len(lst[i]); j++ {\n            if lst[i][j] == x {\n                coords = append(coords, []int{i, j})\n            }\n        }\n    }\n    sort.Slice(coords, func(i, j int) bool {\n        if coords[i][0] == coords[j][0] {\n            return coords[i][1] > coords[j][1]\n        }\n        return coords[i][0] < coords[j][0]\n    })\n    return coords\n}\n",
            "func SortArray(arr []int) []int {\n    if len(arr) == 0 {\n        return []int{}\n    }\n    if (arr[0] + arr[len(arr)-1])%2 == 0 {\n        sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n        return arr\n    } else {\n        sort.Ints(arr)\n        return arr\n    }\n}\n",
            "func Encrypt(s string) string {\n    result := \"\"\n    for _, ch := range s {\n        shifted := ch + 4\n        if shifted > 'z' {\n            shifted -= 26\n        }\n        result += string(shifted)\n    }\n    return result\n}\n",
            "func NextSmallest(lst []int) *int {\n    sl := make(map[int]struct{})\n    for _, v := range lst {\n        sl[v] = struct{}{}\n    }\n    \n    if len(sl) < 2 {\n        return nil\n    }\n    \n    keys := make([]int, 0, len(sl))\n    for k := range sl {\n        keys = append(keys, k)\n    }\n    sort.Ints(keys)\n    \n    result := keys[1]\n    return &result\n}\n",
            "func IsBored(s string) int {\n    sentences := strings.FieldsFunc(s, func(r rune) bool {\n        return r == '.' || r == '!' || r == '?'\n    })\n    count := 0\n    for _, sentence := range sentences {\n        trimmed := strings.TrimSpace(sentence)\n        if len(trimmed) >= 2 && strings.HasPrefix(trimmed, \"I \") {\n            count++\n        }\n    }\n    return count\n}\n",
            "func AnyInt(x interface{}, y interface{}, z interface{}) bool {\n    xInt, ok1 := x.(int)\n    yInt, ok2 := y.(int)\n    zInt, ok3 := z.(int)\n    \n    if ok1 && ok2 && ok3 {\n        return (xInt+yInt == zInt) || (xInt+zInt == yInt) || (yInt+zInt == xInt)\n    }\n    return false\n}\n",
            "func Encode(message string) string {\n    vowels := \"aeiouAEIOU\"\n    var result []rune\n    for _, ch := range message {\n        if (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') {\n            ch1 := ch\n            if ch1 >= 'a' && ch1 <= 'z' {\n                ch1 = ch1 - 32\n            } else {\n                ch1 = ch1 + 32\n            }\n            if strings.ContainsRune(vowels, ch1) {\n                ch1 = ch1 + 2\n            }\n            result = append(result, ch1)\n        } else {\n            result = append(result, ch)\n        }\n    }\n    return string(result)\n}\n",
            "func Skjkasdkd(lst []int) int {\n    is_prime := func(n int) bool {\n        if n < 2 {\n            return false\n        }\n        for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n            if n%i == 0 {\n                return false\n            }\n        }\n        return true\n    }\n\n    var primes []int\n    for _, num := range lst {\n        if is_prime(num) {\n            primes = append(primes, num)\n        }\n    }\n    if len(primes) == 0 {\n        return 0\n    }\n\n    largest := fmt.Sprintf(\"%d\", primes[len(primes)-1])\n    sum := 0\n    for _, digitRune := range largest {\n        digit, _ := strconv.Atoi(string(digitRune))\n        sum += digit\n    }\n    return sum\n}\n",
            "func CheckDictCase(d map[string]string) bool {\n    if len(d) == 0 {\n        return false\n    }\n    allLower := true\n    allUpper := true\n    for k := range d {\n        for _, c := range k {\n            if !unicode.IsLower(c) {\n                allLower = false\n            }\n            if !unicode.IsUpper(c) {\n                allUpper = false\n            }\n        }\n    }\n    return allLower || allUpper\n}\n",
            "func CountUpTo(n int) []int {\n    primes := []int{}\n    for num := 2; num < n; num++ {\n        isPrime := true\n        for _, p := range primes {\n            if num%p == 0 {\n                isPrime = false\n                break\n            }\n        }\n        if isPrime {\n            primes = append(primes, num)\n        }\n    }\n    return primes\n}\n",
            "func Multiply(a int, b int) int {\n    return (abs(a) % 10) * (abs(b) % 10)\n}\n\nfunc abs(x int) int {\n    if x < 0 {\n        return -x\n    }\n    return x\n}\n",
            "func CountUpper(s string) int {\n    vowels := \"AEIOU\"\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if i%2 == 0 && strings.ContainsRune(vowels, rune(s[i])) {\n            count++\n        }\n    }\n    return count\n}\n",
            "func ClosestInteger(value string) int {\n\tnum, _ := strconv.ParseFloat(value, 64)\n\tif num >= 0 {\n\t\treturn int(math.Floor(num + 0.5))\n\t} else {\n\t\treturn int(math.Ceil(num - 0.5))\n\t}\n}\n",
            "func MakeAPile(n int) []int {\n    pile := make([]int, n)\n    for i := 0; i < n; i++ {\n        pile[i] = n + 2*i\n    }\n    return pile\n}\n",
            "func WordsString(s string) []string {\n    return strings.FieldsFunc(s, func(c rune) bool {\n        return !unicode.IsLetter(c)\n    })\n}\n",
            "func ChooseNum(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if y%2 == 0 {\n        return y\n    }\n    return x != y ? y-1 : -1\n}\n",
            "func RoundedAvg(n int, m int) *string {\n    if n > m {\n        return nil\n    }\n    r_avg := (m + n) / 2\n    result := fmt.Sprintf(\"%b\", r_avg)\n    return &result\n}\n",
            "func UniqueDigits(x []int) []int {\n    allDigitsOdd := func(s string) bool {\n        for _, digit := range s {\n            if (digit - '0') % 2 == 0 {\n                return false\n            }\n        }\n        return true\n    }\n\n    var result []int\n    for _, num := range x {\n        if allDigitsOdd(fmt.Sprintf(\"%d\", num)) {\n            result = append(result, num)\n        }\n    }\n    \n    sort.Ints(result)\n    return result\n}\n",
            "func ByLength(arr []int) []string {\n    digitNames := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n    sortedArr := []int{}\n    \n    for _, x := range arr {\n        if x >= 1 && x <= 9 {\n            sortedArr = append(sortedArr, x)\n        }\n    }\n    \n    sort.Slice(sortedArr, func(i, j int) bool {\n        return sortedArr[i] > sortedArr[j]\n    })\n    \n    result := []string{}\n    for _, x := range sortedArr {\n        result = append(result, digitNames[x-1])\n    }\n    \n    return result\n}\n",
            "func F(n int) []int {\n    nums := make([]int, n)\n    for i := 0; i < n; i++ {\n        nums[i] = i + 1\n    }\n    result := make([]int, n)\n    for i := 0; i < n; i++ {\n        if nums[i]%2 != 0 {\n            sum := 0\n            for j := 0; j <= i; j++ {\n                sum += nums[j]\n            }\n            result[i] = sum\n        } else {\n            product := 1\n            for j := 0; j <= i; j++ {\n                product *= nums[j]\n            }\n            result[i] = product\n        }\n    }\n    return result\n}\n",
            "func EvenOddPalindrome(n int) []int {\n    cnt := [2]int{0, 0}\n    for i := 1; i <= n; i++ {\n        txt := strconv.Itoa(i)\n        if txt == reverseString(txt) {\n            cnt[i%2]++\n        }\n    }\n    return cnt[:]\n}\n\nfunc reverseString(s string) string {\n    runes := []rune(s)\n    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        runes[i], runes[j] = runes[j], runes[i]\n    }\n    return string(runes)\n}\n",
            "func digitsSum(n int) int {\n    if n >= 0 {\n        sum := 0\n        for _, digit := range fmt.Sprintf(\"%d\", n) {\n            sum += int(digit - '0')\n        }\n        return sum\n    } else {\n        return 2 * (int(fmt.Sprintf(\"%d%c\", n, '0')[0] - '0')) + digitsSum(-n)\n    }\n}\n\nfunc CountNums(arr []int) int {\n    count := 0\n    for _, num := range arr {\n        if digitsSum(num) > 0 {\n            count++\n        }\n    }\n    return count\n}\n",
            "func MoveOneBall(arr []int) bool {\n    if len(arr) == 0 {\n        return true\n    }\n    sortedArr := make([]int, len(arr))\n    copy(sortedArr, arr)\n    sort.Ints(sortedArr)\n    for i := 0; i < len(arr); i++ {\n        if reflect.DeepEqual(arr[i:], sortedArr[:len(arr)-i]) &&\n            reflect.DeepEqual(arr[:i], sortedArr[len(arr)-i:]) {\n            return true\n        }\n    }\n    return false\n}\n",
            "func CanExchange(lst1 []int, lst2 []int) string {\n    odd_cnt := 0\n    for _, num := range lst1 {\n        if num % 2 != 0 {\n            odd_cnt++\n        }\n    }\n    even_cnt := 0\n    for _, num := range lst2 {\n        if num % 2 == 0 {\n            even_cnt++\n        }\n    }\n    if even_cnt >= odd_cnt {\n        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n",
            "func Histogram(test string) map[string]int {\n    freq := make(map[string]int)\n    words := strings.Fields(test)\n    for _, w := range words {\n        if len(w) > 0 {\n            freq[w]++\n        }\n    }\n    result := make(map[string]int)\n    if len(freq) > 0 {\n        max_freq := 0\n        for _, v := range freq {\n            if v > max_freq {\n                max_freq = v\n            }\n        }\n        for k, v := range freq {\n            if v == max_freq {\n                result[k] = v\n            }\n        }\n    }\n    return result\n}\n",
            "func ReverseDelete(s string, c string) []string {\n\tisPalindrome := func(str string) bool {\n\t\tfor i, j := 0, len(str)-1; i < j; i, j = i+1, j-1 {\n\t\t\tif str[i] != str[j] {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\treturn true\n\t}\n\n\tvar s1 []rune\n\tfor _, ch := range s {\n\t\tif !strings.ContainsRune(c, ch) {\n\t\t\ts1 = append(s1, ch)\n\t\t}\n\t}\n\n\tpalindromeResult := \"no\"\n\tif isPalindrome(string(s1)) {\n\t\tpalindromeResult = \"yes\"\n\t}\n\n\treturn []string{string(s1), palindromeResult}\n}\n",
            "func OddCount(lst []string) []string {\n    result := []string{}\n    for _, num := range lst {\n        n := 0\n        for _, d := range num {\n            if d%2 == 1 {\n                n++\n            }\n        }\n        rs := \"the number of odd elements in the string i of the input.\"\n        result = append(result, strings.Replace(rs, \"i\", fmt.Sprintf(\"%d\", n), -1))\n    }\n    return result\n}\n",
            "func MinSubArraySum(nums []int) int {\n    min_sum := 0\n    cur_sum := 0\n    for _, n := range nums {\n        if cur_sum+n < 0 {\n            cur_sum += n\n        } else {\n            cur_sum = 0\n        }\n        if min_sum > cur_sum {\n            min_sum = cur_sum\n        }\n    }\n    if min_sum == 0 {\n        min_sum = nums[0]\n        for _, n := range nums {\n            if n < min_sum {\n                min_sum = n\n            }\n        }\n    }\n    return min_sum\n}\n",
            "func MaxFill(grid [][]int, capacity int) int {\n    total := 0\n    for _, arr := range grid {\n        sum := 0\n        for _, num := range arr {\n            sum += num\n        }\n        total += (sum + capacity - 1) / capacity // Ceiling division\n    }\n    return total\n}\n",
            "func countOnes(num int) int {\n    count := 0\n    for num > 0 {\n        count += num & 1\n        num >>= 1\n    }\n    return count\n}\n\nfunc SortArray(arr []int) []int {\n    sort.Slice(arr, func(i, j int) bool {\n        if onesI, onesJ := countOnes(arr[i]), countOnes(arr[j]); onesI == onesJ {\n            return arr[i] < arr[j]\n        }\n        return onesI < onesJ\n    })\n    return arr\n}\n",
            "func SelectWords(s string, n int) []string {\n    consonants := \"bcdfghjklmnpqrstvwxyz\"\n    words := strings.Fields(s)\n    var result []string\n\n    for _, w := range words {\n        if len(w) > 0 {\n            consonantCount := 0\n            for _, c := range strings.ToLower(w) {\n                if strings.ContainsRune(consonants, c) {\n                    consonantCount++\n                }\n            }\n            if consonantCount == n {\n                result = append(result, w)\n            }\n        }\n    }\n\n    return result\n}\n",
            "func GetClosestVowel(word string) string {\n    vowels := \"aeiouAEIOU\"\n    for i := len(word) - 2; i > 0; i-- {\n        if strings.ContainsRune(vowels, rune(word[i])) && !strings.ContainsRune(vowels, rune(word[i-1])) && !strings.ContainsRune(vowels, rune(word[i+1])) {\n            return string(word[i])\n        }\n    }\n    return \"\"\n}\n",
            "func MatchParens(lst []string) string {\n    check := func(s string) bool {\n        depth := 0\n        for _, ch := range s {\n            if ch == '(' {\n                depth += 1\n            } else {\n                depth -= 1\n            }\n            if depth < 0 {\n                return false\n            }\n        }\n        return depth == 0\n    }\n\n    s1 := lst[0] + lst[1]\n    s2 := lst[1] + lst[0]\n    if check(s1) || check(s2) {\n        return \"Yes\"\n    }\n    return \"No\"\n}\n",
            "func Maximum(arr []int, k int) []int {\n    if k == 0 {\n        return []int{}\n    }\n    sort.Ints(arr)\n    return arr[len(arr)-k:]\n}\n",
            "func Solution(lst []int) int {\n    acc := 0\n    for i, x := range lst {\n        if i%2 == 0 && x%2 != 0 {\n            acc += x\n        }\n    }\n    return acc\n}\n",
            "func AddElements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k && i < len(arr); i++ {\n        n := arr[i]\n        if n >= -99 && n <= 99 {\n            sum += n\n        }\n    }\n    return sum\n}\n",
            "func GetOddCollatz(n int) []int {\n    collatz := []int{1}\n    for n != 1 {\n        if n % 2 != 0 {\n            collatz = append(collatz, n)\n            n = 3 * n + 1\n        } else {\n            n /= 2\n        }\n    }\n    return collatz\n}\n",
            "func ValidDate(date string) bool {\n    if len(date) != 10 || date[2] != '-' || date[5] != '-' {\n        return false\n    }\n    m, _ := strconv.Atoi(date[:2])\n    d, _ := strconv.Atoi(date[3:5])\n    if contains([7]int{1, 3, 5, 7, 8, 10, 12}, m) && d >= 1 && d <= 31 {\n        return true\n    }\n    if contains([4]int{4, 6, 9, 11}, m) && d >= 1 && d <= 30 {\n        return true\n    }\n    if m == 2 && d >= 1 && d <= 29 {\n        return true\n    }\n    return false\n}\n\nfunc contains(s []int, e int) bool {\n    for _, a := range s {\n        if a == e {\n            return true\n        }\n    }\n    return false\n}\n",
            "func SplitWords(txt string) []string {\n    if strings.Contains(txt, \" \") {\n        return strings.Split(txt, \" \")\n    } else if strings.Contains(txt, \",\") {\n        return strings.Split(txt, \",\")\n    } else {\n        count := 0\n        for _, c := range txt {\n            if c >= 'a' && c <= 'z' && c%2 == 0 {\n                count++\n            }\n        }\n        return []string{strconv.Itoa(count)}\n    }\n}\n",
            "func IsSorted(lst []int) bool {\n    if len(lst) > 1 {\n        for i := 1; i < len(lst); i++ {\n            if lst[i] < lst[i-1] {\n                return false\n            }\n        }\n    }\n    \n    freq := make(map[int]int)\n    for _, num := range lst {\n        freq[num]++\n    }\n    \n    maxFreq := 0\n    for _, count := range freq {\n        if count > maxFreq {\n            maxFreq = count\n        }\n    }\n    \n    return maxFreq <= 2\n}\n",
            "func Intersection(interval1 []int, interval2 []int) string {\n    isPrime := func(n int) bool {\n        if n < 2 {\n            return false\n        }\n        for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n            if n%i == 0 {\n                return false\n            }\n        }\n        return true\n    }\n\n    l := int(math.Max(float64(interval1[0]), float64(interval2[0])))\n    r := int(math.Min(float64(interval1[1]), float64(interval2[1])))\n    length := r - l\n    if length > 0 && isPrime(length) {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n",
            "func ProdSigns(arr []int) *int {\n    if len(arr) == 0 {\n        return nil\n    }\n    for _, n := range arr {\n        if n == 0 {\n            result := 0\n            return &result\n        }\n    }\n    sign := 1\n    negativeCount := 0\n    for _, n := range arr {\n        if n < 0 {\n            negativeCount++\n        }\n    }\n    if negativeCount%2 == 1 {\n        sign = -1\n    }\n    absSum := 0\n    for _, n := range arr {\n        absSum += int(math.Abs(float64(n)))\n    }\n    result := sign * absSum\n    return &result\n}\n",
            "func MinPath(grid [][]int, k int) []int {\n    n := len(grid)\n    min_val := n*n + 1\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if grid[i][j] == 1 {\n                temp := []int{}\n                if i != 0 {\n                    temp = append(temp, grid[i-1][j])\n                }\n                if j != 0 {\n                    temp = append(temp, grid[i][j-1])\n                }\n                if i != n-1 {\n                    temp = append(temp, grid[i+1][j])\n                }\n                if j != n-1 {\n                    temp = append(temp, grid[i][j+1])\n                }\n                for _, val := range temp {\n                    if val < min_val {\n                        min_val = val\n                    }\n                }\n            }\n        }\n    }\n    result := []int{}\n    for i := 0; i < k; i++ {\n        if i%2 == 0 {\n            result = append(result, 1)\n        } else {\n            result = append(result, min_val)\n        }\n    }\n    return result\n}\n",
            "func Tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n    }\n    seq := []int{1, 3}\n    for i := 2; i <= n; i++ {\n        if i%2 == 0 {\n            seq = append(seq, i/2+1)\n        } else {\n            seq = append(seq, seq[i-1]+seq[i-2]+(i+3)/2)\n        }\n    }\n    return seq\n}\n",
            "func Digits(n int) int {\n    odds := []int{}\n    for n > 0 {\n        d := n % 10\n        if d%2 == 1 {\n            odds = append(odds, d)\n        }\n        n /= 10\n    }\n    if len(odds) > 0 {\n        product := 1\n        for _, x := range odds {\n            product *= x\n        }\n        return product\n    }\n    return 0\n}\n",
            "func IsNested(s string) bool {\n    openIdx := []int{}\n    closeIdx := []int{}\n\n    for i, ch := range s {\n        if ch == '[' {\n            openIdx = append(openIdx, i)\n        } else if ch == ']' {\n            closeIdx = append(closeIdx, i)\n        }\n    }\n\n    l := len(closeIdx)\n    for i := 0; i < l/2; i++ {\n        closeIdx[i], closeIdx[l-1-i] = closeIdx[l-1-i], closeIdx[i]\n    }\n\n    cnt := 0\n    i := 0\n\n    for _, idx := range openIdx {\n        if i < l && idx < closeIdx[i] {\n            cnt++\n            i++\n        }\n    }\n\n    return cnt >= 2\n}\n",
            "func SumSquares(lst []float64) int {\n    acc := 0\n    for _, n := range lst {\n        squared := int(math.Pow(math.Ceil(n), 2))\n        acc += squared\n    }\n    return acc\n}\n",
            "func CheckIfLastCharIsALetter(txt string) bool {\n    if len(txt) == 0 {\n        return false\n    }\n    last := txt[strings.LastIndex(txt, \" \") + 1:]\n    return len(last) == 1 && (last[0] >= 'a' && last[0] <= 'z') || (last[0] >= 'A' && last[0] <= 'Z')\n}\n",
            "func CanArrange(arr []int) int {\n    if len(arr) <= 1 {\n        return -1\n    }\n    idx := make([]int, 0)\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < arr[i-1] {\n            idx = append(idx, i)\n        }\n    }\n    if len(idx) > 0 {\n        return idx[len(idx)-1]\n    }\n    return -1\n}\n",
            "func LargestSmallestIntegers(lst []int) []*int {\n    var neg []int\n    var pos []int\n\n    for _, i := range lst {\n        if i < 0 {\n            neg = append(neg, i)\n        } else if i > 0 {\n            pos = append(pos, i)\n        }\n    }\n\n    var maxNeg *int\n    if len(neg) > 0 {\n        maxNegVal := neg[0]\n        for _, val := range neg {\n            if val > maxNegVal {\n                maxNegVal = val\n            }\n        }\n        maxNeg = &maxNegVal\n    }\n\n    var minPos *int\n    if len(pos) > 0 {\n        minPosVal := pos[0]\n        for _, val := range pos {\n            if val < minPosVal {\n                minPosVal = val\n            }\n        }\n        minPos = &minPosVal\n    }\n\n    return []*int{maxNeg, minPos}\n}\n",
            "func CompareOne(a interface{}, b interface{}) *float64 {\n    anyToReal := func(o interface{}) (float64, error) {\n        switch v := o.(type) {\n        case string:\n            f, err := strconv.ParseFloat(strings.ReplaceAll(v, \",\", \".\"), 64)\n            if err != nil {\n                return 0, err\n            }\n            return f, nil\n        case float64:\n            return v, nil\n        default:\n            return 0, errors.New(\"Type Error\")\n        }\n    }\n\n    a1, err := anyToReal(a)\n    if err != nil {\n        return nil\n    }\n\n    b1, err := anyToReal(b)\n    if err != nil {\n        return nil\n    }\n\n    if a1 == b1 {\n        return nil\n    } else if a1 > b1 {\n        result := a1\n        return &result\n    } else {\n        result := b1\n        return &result\n    }\n}\n",
            "func IsEqualToSumEven(n int) bool {\n    return n%2 == 0 && n >= 8\n}\n",
            "func SpecialFactorial(n int) int {\n    fact := 1\n    result := 1\n    for i := 1; i <= n; i++ {\n        fact *= i\n        result *= fact\n    }\n    return result\n}\n",
            "func FixSpaces(txt string) string {\n    return strings.NewReplacer(\"   \", \"-\").Replace(strings.ReplaceAll(txt, \" \", \"_\"))\n}\n",
            "func FileNameCheck(fileName string) string {\n    suf := []string{\"txt\", \"exe\", \"dll\"}\n    lst := strings.Split(fileName, \".\")\n    if len(lst) != 2 || !contains(suf, lst[1]) || len(lst[0]) == 0 || !regex.MatchString(`^[a-zA-Z]`, lst[0]) || countDigits(lst[0]) > 3 {\n        return \"No\"\n    }\n    return \"Yes\"\n}\n\nfunc contains(slice []string, item string) bool {\n    for _, elem := range slice {\n        if elem == item {\n            return true\n        }\n    }\n    return false\n}\n\nfunc countDigits(s string) int {\n    count := 0\n    for _, char := range s {\n        if unicode.IsDigit(char) {\n            count++\n        }\n    }\n    return count\n}\n",
            "func SumSquares(lst []int) int {\n    result := 0\n    for i := 0; i < len(lst); i++ {\n        if i % 3 == 0 {\n            result += lst[i] * lst[i]\n        } else if i % 4 == 0 {\n            result += lst[i] * lst[i] * lst[i]\n        } else {\n            result += lst[i]\n        }\n    }\n    return result\n}\n",
            "func isPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i*i <= n; i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc WordsInSentence(sentence string) string {\n    words := strings.Fields(sentence)\n    var primeWords []string\n    for _, w := range words {\n        if isPrime(len(w)) {\n            primeWords = append(primeWords, w)\n        }\n    }\n    return strings.Join(primeWords, \" \")\n}\n",
            "func Simplify(x string, n string) bool {\n    xs := strings.Split(x, \"/\")\n    ns := strings.Split(n, \"/\")\n    num, _ := strconv.Atoi(xs[0])\n    den, _ := strconv.Atoi(ns[0])\n    return (num * ns[1]) % (den * xs[1]) == 0\n}\n",
            "func digitsSum(n int) int {\n    nStr := fmt.Sprintf(\"%d\", n)\n    sum := 0\n    if n >= 0 {\n        for _, d := range nStr {\n            sum += int(d - '0')\n        }\n    } else {\n        sum = (int(nStr[1] - '0') * 2) + digitsSum(abs(n))\n    }\n    return sum\n}\n\nfunc OrderByPoints(nums []int) []int {\n    sort.Slice(nums, func(i, j int) bool {\n        return digitsSum(nums[i]) < digitsSum(nums[j])\n    })\n    return nums\n}\n\nfunc abs(x int) int {\n    if x < 0 {\n        return -x\n    }\n    return x\n}\n",
            "func SpecialFilter(nums []int) int {\n    var count int\n    for _, n := range nums {\n        if n > 10 && n%2 == 1 && strings.Contains(\"13579\", fmt.Sprintf(\"%d\", n)[0:1]) {\n            count++\n        }\n    }\n    return count\n}\n",
            "func GetMaxTriples(n int) int {\n    c := [3]int{0, 0, 0}\n    for i := 1; i <= n; i++ {\n        a := i*i - i + 1\n        c[a%3]++\n    }\n    return c[0]*c[1]*c[2] + (c[0]*(c[0]-1)*(c[0]-2) + c[1]*(c[1]-1)*(c[1]-2) + c[2]*(c[2]-1)*(c[2]-2)) / 6\n}\n",
            "func Bf(planet1 string, planet2 string) []string {\n    names := []string{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n    l := -1\n    r := -1\n    for i, name := range names {\n        if name == planet1 {\n            l = i\n        }\n        if name == planet2 {\n            r = i\n        }\n    }\n    if l == -1 || r == -1 {\n        return []string{}\n    }\n    if l > r {\n        l, r = r, l\n    }\n    if l == r {\n        return []string{}\n    }\n    return names[l+1 : r]\n}\n",
            "func SortedListSum(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        if len(s)%2 == 0 {\n            result = append(result, s)\n        }\n    }\n    sort.SliceStable(result, func(i, j int) bool {\n        if len(result[i]) == len(result[j]) {\n            return result[i] < result[j]\n        }\n        return len(result[i]) < len(result[j])\n    })\n    return result\n}\n",
            "func XOrY(n int, x int, y int) int {\n    if n < 2 {\n        return y\n    }\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        if n%i == 0 {\n            return y\n        }\n    }\n    return x\n}\n",
            "func DoubleTheDifference(lst []float64) int {\n    sum := 0\n    for _, n := range lst {\n        if n >= 0 && int(n)%2 == 1 {\n            sum += int(n * n)\n        }\n    }\n    return sum\n}\n",
            "func Compare(game []int, guess []int) []int {\n    result := make([]int, len(game))\n    for i := range game {\n        result[i] = int(math.Abs(float64(game[i] - guess[i])))\n    }\n    return result\n}\n",
            "func StrongestExtension(className string, extensions []string) string {\n    maxS := -1\n    maxExt := \"\"\n    for _, ext := range extensions {\n        upper, lower := 0, 0\n        for _, c := range ext {\n            if c >= 'A' && c <= 'Z' {\n                upper++\n            } else if c >= 'a' && c <= 'z' {\n                lower++\n            }\n        }\n        s := upper - lower\n        if s > maxS {\n            maxS = s\n            maxExt = ext\n        }\n    }\n    return className + \".\" + maxExt\n}\n",
            "func CycpatternCheck(a string, b string) bool {\n    if len(a) < len(b) {\n        return false\n    }\n    for i := 0; i < len(b); i++ {\n        rotated := b[i:] + b[:i]\n        if contains(a, rotated) {\n            return true\n        }\n    }\n    return false\n}\n\nfunc contains(s string, substr string) bool {\n    return strings.Contains(s, substr)\n}\n",
            "func EvenOddCount(num int) []int {\n    ds := num\n    if ds < 0 {\n        ds = -ds\n    }\n    even := 0\n    for ds > 0 {\n        digit := ds % 10\n        if digit%2 == 0 {\n            even++\n        }\n        ds /= 10\n    }\n    return []int{even, len(fmt.Sprintf(\"%d\", num)) - even}\n}\n",
            "func IntToMiniRoman(num int) string {\n    values := []int{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}\n    numerals := []string{\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"}\n    var res []string\n    for i := 0; i < len(values); i++ {\n        for num >= values[i] {\n            res = append(res, numerals[i])\n            num -= values[i]\n        }\n    }\n    return strings.Join(res, \"\")\n}\n",
            "func RightAngleTriangle(a int, b int, c int) bool {\n    s := []int{a, b, c}\n    for i := 1; i < len(s); i++ {\n        for j := i; j > 0 && s[j-1] > s[j]; j-- {\n            s[j], s[j-1] = s[j-1], s[j]\n        }\n    }\n    return s[0]*s[0]+s[1]*s[1] == s[2]*s[2]\n}\n",
            "func FindMax(words []string) string {\n    maxCnt := 0\n    maxW := \"\"\n    for _, w := range words {\n        charSet := make(map[rune]bool)\n        for _, c := range w {\n            charSet[c] = true\n        }\n        cnt := len(charSet)\n        if cnt > maxCnt {\n            maxCnt = cnt\n            maxW = w\n        } else if cnt == maxCnt {\n            if w < maxW {\n                maxW = w\n            }\n        }\n    }\n    return maxW\n}\n",
            "func Eat(num int, need int, remaining int) []int {\n    if need <= remaining {\n        return []int{num + need, remaining - need}\n    } else {\n        return []int{num + remaining, 0}\n    }\n}\n",
            "func DoAlgebra(operators []string, operands []int) int {\n    ops := append([]string(nil), operators...)\n    nums := append([]int(nil), operands...)\n\n    i := len(ops) - 1\n    for i >= 0 {\n        if ops[i] == \"**\" {\n            nums[i] = pow(nums[i], nums[i+1])\n            nums = append(nums[:i+1], nums[i+2:]...)\n            ops = append(ops[:i], ops[i+1:]...)\n        }\n        i--\n    }\n\n    i = 0\n    for i < len(ops) {\n        if ops[i] == \"*\" {\n            nums[i] = nums[i] * nums[i+1]\n            nums = append(nums[:i+1], nums[i+2:]...)\n            ops = append(ops[:i], ops[i+1:]...)\n            i--\n        } else if ops[i] == \"//\" {\n            nums[i] = nums[i] / nums[i+1]\n            nums = append(nums[:i+1], nums[i+2:]...)\n            ops = append(ops[:i], ops[i+1:]...)\n            i--\n        }\n        i++\n    }\n\n    i = 0\n    for i < len(ops) {\n        if ops[i] == \"+\" {\n            nums[i] = nums[i] + nums[i+1]\n            nums = append(nums[:i+1], nums[i+2:]...)\n            ops = append(ops[:i], ops[i+1:]...)\n            i--\n        } else if ops[i] == \"-\" {\n            nums[i] = nums[i] - nums[i+1]\n            nums = append(nums[:i+1], nums[i+2:]...)\n            ops = append(ops[:i], ops[i+1:]...)\n            i--\n        }\n        i++\n    }\n\n    return nums[0]\n}\n\nfunc pow(base, exponent int) int {\n    result := 1\n    for i := 0; i < exponent; i++ {\n        result *= base\n    }\n    return result\n}\n",
            "func Solve(s string) string {\n    if !/[a-zA-Z]/.MatchString(s) {\n        runes := []rune(s)\n        for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n            runes[i], runes[j] = runes[j], runes[i]\n        }\n        return string(runes)\n    }\n    var result []rune\n    for _, ch := range s {\n        if !/[a-zA-Z]/.MatchString(string(ch)) {\n            result = append(result, ch)\n        } else if ch >= 'A' && ch <= 'Z' {\n            result = append(result, ch+32)\n        } else if ch >= 'a' && ch <= 'z' {\n            result = append(result, ch-32)\n        }\n    }\n    return string(result)\n}\n",
            "func StringToMd5(txt string) *string {\n    if txt == \"\" {\n        return nil\n    }\n    md5Hash := md5.New()\n    txtBytes := []byte(txt)\n    md5Hash.Write(txtBytes)\n    md5Encoded := fmt.Sprintf(\"%x\", md5Hash.Sum(nil))\n    return &md5Encoded\n}\n",
            "func GenerateIntegers(a int, b int) []int {\n\tlower := max(2, min(a, b))\n\tupper := min(8, max(a, b))\n\tresult := []int{}\n\tfor i := lower; i <= upper; i++ {\n\t\tif i%2 == 0 {\n\t\t\tresult = append(result, i)\n\t\t}\n\t}\n\treturn result\n}\n\nfunc min(x int, y int) int {\n\tif x < y {\n\t\treturn x\n\t}\n\treturn y\n}\n\nfunc max(x int, y int) int {\n\tif x > y {\n\t\treturn x\n\t}\n\treturn y\n}\n"
        ],
        "ruby": [
            "# @param numbers [Array<Float>]\n# @param threshold [Float]\n# @returns [Boolean]\ndef has_close_elements(numbers, threshold)\n    numbers.each_with_index do |num_i, i|\n        (i + 1...numbers.length).each do |j|\n            if (numbers[i] - numbers[j]).abs < threshold\n                return true\n            end\n        end\n    end\n    false\nend\n",
            "def separate_paren_groups(paren_string)\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.gsub(\" \", \"\")\n    parens.each_char do |ch|\n        if ch == \"(\"\n            stk.push(ch)\n            current_group += ch\n        elsif ch == \")\"\n            stk.pop\n            current_group += ch\n            if stk.empty?\n                groups.push(current_group)\n                current_group = \"\"\n            end\n        end\n    end\n    return groups\nend\n",
            "# @param num [Float]\n# @returns {Float}\ndef truncate_number(num)\n    num - num.floor\nend\n",
            "# @param operations [Array<Integer>]\n# @returns {Boolean}\ndef below_zero(operations)\n    balance = 0\n    operations.each do |op|\n        balance += op\n        return true if balance < 0\n    end\n    false\nend\n",
            "# @param numbers [Array<Float>]\n# @returns {Float}\ndef mean_absolute_deviation(numbers)\n    mean = numbers.reduce(0.0) { |acc, num| acc + num } / numbers.length\n    deviation = numbers.reduce(0.0) { |acc, num| acc + (num - mean).abs }\n    deviation / numbers.length\nend\n",
            "def intersperse(numbers, delimiter)\n    result = []\n    for i in 0...numbers.length\n        if i != 0\n            result.push(delimiter)\n        end\n        result.push(numbers[i])\n    end\n    return result\nend\n",
            "def parse_nested_parens(paren_string)\n    result = []\n    paren_groups = paren_string.split(' ')\n    for group in paren_groups\n        max_depth = 0\n        depth = 0\n        for ch in group.chars\n            if ch == '('\n                depth += 1\n                max_depth = [max_depth, depth].max\n            elsif ch == ')'\n                depth -= 1\n            end\n        end\n        result.push(max_depth)\n    end\n    result\nend\n",
            "def filter_by_substring(strs, substring)\n    strs.select { |s| s.include?(substring) }\nend\n",
            "def sum_product(numbers)\n  n_sum = numbers.reduce(0) { |acc, num| acc + num }\n  n_product = numbers.reduce(1) { |acc, num| acc * num }\n  [n_sum, n_product]\nend\n",
            "def rolling_max(numbers)\n    max_so_far = -Float::INFINITY\n    result = []\n    numbers.each do |num|\n        max_so_far = [max_so_far, num].max\n        result << max_so_far\n    end\n    result\nend\n",
            "def make_palindrome(s)\n  if s == s.reverse\n    return s\n  end\n  (0...s.length).each do |i|\n    if s[i..-1] == s[i..-1].reverse\n      return s + s[0...i].reverse\n    end\n  end\n  \"\"\nend\n",
            "# @param a [String]\n# @param b [String]\n# @returns {String}\ndef string_xor(a, b)\n    a.chars.map.with_index { |x, i| x == b[i] ? '0' : '1' }.join('')\nend\n",
            "def longest(strs)\n  return nil if !strs || strs.empty?\n  longest_s = strs[0]\n  strs.each do |s|\n    longest_s = s if s.length > longest_s.length\n  end\n  longest_s\nend\n",
            "# @param a [Integer]\n# @param b [Integer]\n# @returns {Integer}\ndef greatest_common_divisor(a, b)\n    if b == 0\n        return a\n    else\n        return greatest_common_divisor(b, a % b)\n    end\nend\n",
            "# @param s [String]\n# @returns {Array<String>}\ndef all_prefixes(s)\n    prefixes = []\n    (0...s.length).each do |i|\n        prefixes << s[0..i]\n    end\n    return prefixes\nend\n",
            "def string_sequence(n)\n  (0..n).to_a.join(' ')\nend\n",
            "# @param s [String]\n# @returns {Integer}\ndef count_distinct_characters(s)\n    s.downcase.chars.uniq.size\nend\n",
            "def parse_music(music_string)\n    durations = {\"o\" => 4, \"o|\" => 2, \".|\" => 1}\n    notes = music_string.split\n    notes.map { |note| durations[note] }\nend\n",
            "# @param s [String]\n# @param substring [String]\n# @returns {Integer}\ndef how_many_times(s, substring)\n    times = 0\n    (0..s.length - substring.length).each do |i|\n        if s[i, substring.length] == substring\n            times += 1\n        end\n    end\n    return times\nend\n",
            "# @param numbers [String]\n# @returns {String}\ndef sort_numbers(numbers)\n    num_dict = {\n        \"zero\" => 0,\n        \"one\" => 1,\n        \"two\" => 2,\n        \"three\" => 3,\n        \"four\" => 4,\n        \"five\" => 5,\n        \"six\" => 6,\n        \"seven\" => 7,\n        \"eight\" => 8,\n        \"nine\" => 9\n    }\n    num_list = numbers.split(\" \").select { |x| num_dict.key?(x) }\n    num_list.sort_by! { |a| num_dict[a] }\n    num_list.join(\" \")\nend\n",
            "# @param numbers [Array<Float>]\n# @returns {Array<Float>}\ndef find_closest_elements(numbers)\n    sorted_numbers = numbers.sort\n    min_diff = Float::INFINITY\n    closest_pair = []\n    (1...sorted_numbers.length).each do |i|\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n        end\n    end\n    closest_pair\nend\n",
            "# @param numbers [Array<Float>]\n# @returns Array<Float>\ndef rescale_to_unit(numbers)\n  min_num = numbers.min\n  max_num = numbers.max\n  if min_num == max_num\n    Array.new(numbers.length, 0.0)\n  else\n    numbers.map { |num| (num - min_num) / (max_num - min_num) }\n  end\nend\n",
            "# @param values [Array<Object>]\n# @returns {Array<Integer>}\ndef filter_integers(values)\n    values.select { |x| x.is_a?(Integer) }\nend\n",
            "# @param s [String]\n# @returns {Integer}\ndef str_length(s)\n    s.length\nend\n",
            "# @param n [Integer]\n# @returns {Integer}\ndef largest_divisor(n)\n    for i in 2...n\n        if n % i == 0\n            return (n / i).floor\n        end\n    end\n    return 1\nend\n",
            "# @param n [Integer]\n# @returns {Array<Integer>}\ndef factorize(n)\n    factors = []\n    divisor = 2\n    while divisor <= n\n        if n % divisor == 0\n            factors.push(divisor)\n            n /= divisor\n        else\n            divisor += 1\n        end\n    end\n    factors\nend\n",
            "def remove_duplicates(numbers)\n    counts = Hash.new(0)\n    numbers.each do |num|\n        counts[num] += 1\n    end\n    res = []\n    numbers.each do |num|\n        res << num if counts[num] == 1\n    end\n    res\nend\n",
            "# @param s [String]\n# @returns {String}\ndef flip_case(s)\n    flipped = []\n    s.each_char do |ch|\n        if !/[a-zA-Z]/.match?(ch)\n            flipped << ch\n        elsif ch == ch.downcase\n            flipped << ch.upcase\n        else\n            flipped << ch.downcase\n        end\n    end\n    flipped.join('')\nend\n",
            "# @param strs [Array<String>]\n# @returns {String}\ndef concatenate(strs)\n    strs.join(\"\")\nend\n",
            "# @param strs [Array<String>]\n# @param prefix_str [String]\n# @returns [Array<String>]\ndef filter_by_prefix(strs, prefix_str)\n    strs.select { |s| s.start_with?(prefix_str) }\nend\n",
            "# @param l [Array<Integer>]\n# @returns {Array<Integer>}\ndef get_positive(l)\n    return l.select { |num| num > 0 }\nend\n",
            "def is_prime(n)\n    return false if n < 2\n    (2..Math.sqrt(n).floor).each do |i|\n        return false if n % i == 0\n    end\n    true\nend\n",
            "# @param xs [Array<Integer>]\n# @param x [Float]\n# @returns {Float}\ndef poly(xs, x)\n    res = 0.0\n    (0...xs.length).each do |i|\n        res += xs[i] * x**i\n    end\n    res\nend\n\n# @param xs [Array<Integer>]\n# @returns {Float}\ndef find_zero(xs)\n    x1, x2 = 1.0, -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0\n        x1 *= 2\n        x2 *= 2\n    end\n    while (x1 - x2).abs > 1e-10\n        mid = (x1 + x2) / 2.0\n        if poly(xs, mid) === 0\n            return mid\n        elsif poly(xs, mid) * poly(xs, x1) < 0\n            x2 = mid\n        else\n            x1 = mid\n        end\n    end\n    (x1 + x2) / 2.0\nend\n",
            "# @param l [Array<Integer>]\n# @returns {Array<Integer>}\ndef sort_third(l)\n    sorted_third = l.select.with_index { |_, index| index % 3 == 0 }.sort\n    l.map.with_index { |value, index| index % 3 == 0 ? sorted_third[index / 3] : value }\nend\n",
            "# @param l [Array<Integer>]\n# @returns {Array<Integer>}\ndef list_unique(l)\n  l.uniq.sort\nend\n",
            "# @param l [Array<Integer>]\n# @returns {Integer}\ndef max_element(l)\n  return 0 if l.nil? || l.empty?\n  l.max\nend\n",
            "def fizz_buzz(n)\n    cnt = 0\n    for i in 0...(n)\n        if i % 11 == 0 || i % 13 == 0\n            cnt += (i.to_s.split('7').length - 1)\n        end\n    end\n    return cnt\nend\n",
            "def sort_even(l)\n  sorted_even = l.select.with_index { |_, index| index.even? }.sort\n  l.map.with_index { |value, index| index.even? ? sorted_even.shift : value }\nend\n",
            "# @param s [String]\n# @returns {String}\ndef encode_cyclic(s)\n    result = []\n    i = 0\n    while i < s.length\n        if i + 3 > s.length\n            result << s[i..-1]\n        else\n            result << s[i+1, 2]\n            result << s[i]\n        end\n        i += 3\n    end\n    result.join('')\nend\n\n# @param s [String]\n# @returns {String}\ndef decode_cyclic(s)\n    encode_cyclic(encode_cyclic(s))\nend\n",
            "def prime_fib(n)\n    is_prime = ->(num) {\n        return false if num < 2\n        (2..Math.sqrt(num)).each do |i|\n            return false if num % i == 0\n        end\n        true\n    }\n\n    f = [0, 1]\n    cnt = 0\n    while cnt < n\n        f[0], f[1] = f[1], f[0] + f[1]\n        cnt += 1 if is_prime.call(f[1])\n    end\n    f[1]\nend\n",
            "def triples_sum_to_zero(l)\n    (0...l.length).each do |i|\n        ((i + 1)...l.length).each do |j|\n            ((j + 1)...l.length).each do |k|\n                return true if l[i] + l[j] + l[k] == 0\n            end\n        end\n    end\n    false\nend\n",
            "# @param n [Integer]\n# @returns {Integer}\ndef car_race_collision(n)\n    n ** 2\nend\n",
            "# @param l [Array<Integer>]\n# @returns [Array<Integer>]\ndef incr_list(l)\n    l.map { |i| i + 1 }\nend\n",
            "def pairs_sum_to_zero(l)\n    seen = Set.new\n    l.each do |num|\n        return true if seen.include?(-num)\n        seen.add(num)\n    end\n    false\nend\n",
            "def change_base(x, bas)\n    if x == 0\n        return \"0\"\n    end\n    digits = []\n    while x > 0\n        digits.push((x % bas).to_s)\n        x = x / bas\n    end\n    digits.reverse.join('')\nend\n",
            "# @param a [Integer]\n# @param h [Integer]\n# @returns {Float}\ndef triangle_area(a, h)\n    return a * h / 2.0\nend\n",
            "# @param n [Integer]\n# @returns {Integer}\ndef fib4(n)\n    fib = [0, 0, 2, 0]\n    for i in 4..n\n        fib[i % 4] = fib.reduce(:+)\n    end\n    return fib[n % 4]\nend\n",
            "def median(l)\n    sl = l.sort\n    if sl.length.odd?\n        return sl[sl.length / 2]\n    else\n        return (sl[sl.length / 2] + sl[sl.length / 2 - 1]) / 2.0\n    end\nend\n",
            "# @param txt [String]\n# @returns [Boolean]\ndef is_palindrome(txt)\n    txt == txt.split('').reverse.join('')\nend\n",
            "# @param n [Integer]\n# @param p [Integer]\n# @returns {Integer}\ndef modp(n, p)\n    ret = 1\n    n.times do |i|\n        ret = (ret * 2) % p\n    end\n    return ret\nend\n",
            "# @param s [String]\n# @returns {String}\ndef encode_shift(s)\n    result = ''\n    s.each_char do |ch|\n        result += (ch.ord - 97 + 5) % 26 + 97).chr\n    end\n    result\nend\n\n# @param s [String]\n# @returns {String}\ndef decode_shift(s)\n    result = ''\n    s.each_char do |ch|\n        result += (ch.ord - 97 + 21) % 26 + 97).chr\n    end\n    result\nend\n",
            "# @param txt [String]\n# @returns {String}\ndef remove_vowels(txt)\n    vowels = \"aeiouAEIOU\"\n    txt.chars.reject { |char| vowels.include?(char) }.join('')\nend\n",
            "# @param l [Array<Integer>]\n# @param t [Integer]\n# @returns [Boolean]\ndef below_threshold(l, t)\n    l.all? { |x| x < t }\nend\n",
            "# @param x [Integer]\n# @param y [Integer]\n# @returns {Integer}\ndef add(x, y)\n    x + y\nend\n",
            "def same_chars(s0, s1)\n    s0.chars.to_set == s1.chars.to_set\nend\n",
            "def fib(n)\n    if n <= 1\n        return n\n    else\n        return fib(n - 1) + fib(n - 2)\n    end\nend\n",
            "# @param brackets [String]\n# @returns {Boolean}\ndef correct_bracketing(brackets)\n    depth = 0\n    brackets.each_char do |b|\n        if b == \"<\"\n            depth += 1\n        elsif b == \">\"\n            depth -= 1\n        end\n        return false if depth < 0\n    end\n    depth == 0\nend\n",
            "# @param l [Array<Integer>]\n# @returns {Boolean}\ndef monotonic(l)\n    diff = []\n    (0...l.length - 1).each do |i|\n        diff.push(l[i + 1] - l[i])\n    end\n    diff.all? { |x| x <= 0 } || diff.all? { |x| x >= 0 }\nend\n",
            "def common(l1, l2)\n    (l1.uniq & l2.uniq).sort\nend\n",
            "def largest_prime_factor(n)\n  i = 2\n  while i * i <= n\n    if n % i > 0\n      i += 1\n    else\n      n /= i\n    end\n  end\n  n\nend\n",
            "# @param n [Integer]\n# @returns {Integer}\ndef sum_to_n(n)\n    ((n + 1) * n) / 2\nend\n",
            "# @param brackets [String]\n# @returns {Boolean}\ndef correct_bracketing(brackets)\n    depth = 0\n    brackets.each_char do |b|\n        if b == \"(\"\n            depth += 1\n        elsif b == \")\"\n            depth -= 1\n        end\n        return false if depth < 0\n    end\n    depth == 0\nend\n",
            "# @param xs [Array<Integer>]\n# @returns {Array<Integer>}\ndef derivative(xs)\n    xs.map.with_index { |x, i| x * i }[1..-1]\nend\n",
            "# @param n [Integer]\n# @returns {Integer}\ndef fibfib(n)\n    return 0 if n <= 1\n    a, b, c = 0, 0, 1\n    (n - 2).times do\n        a, b, c = b, c, a + b + c\n    end\n    c\nend\n",
            "def vowels_count(s)\n    vowels = \"aeiou\"\n    cnt = 0\n    (0...s.length).each do |i|\n        if vowels.include?(s[i].downcase) || (i == s.length - 1 && s[i].downcase == \"y\")\n            cnt += 1\n        end\n    end\n    cnt\nend\n",
            "# @param x [Integer]\n# @param shift [Integer]\n# @returns {String}\ndef circular_shift(x, shift)\n    x_str = x.to_s\n    if shift > x_str.length\n        return x_str.reverse\n    else\n        return x_str[-shift..-1] + x_str[0...-shift]\n    end\nend\n",
            "def digit_sum(s)\n  s.chars.select { |c| c.uptcase == c }.sum { |c| c.ord }\nend\n",
            "def fruit_distribution(s, n)\n  words = s.split(' ')\n  apples = Integer(words[words.index(\"apples\") - 1])\n  oranges = Integer(words[words.index(\"oranges\") - 1])\n  n - apples - oranges\nend\n",
            "# @param arr [Array<Integer>]\n# @returns {Array<Integer>}\ndef pluck(arr)\n  evens = arr.select { |n| n.even? }\n  return [] if evens.empty?\n  \n  min_even = evens.min\n  [min_even, arr.index(min_even)]\nend\n",
            "def search(lst)\n    freqs = Hash.new(0)\n    lst.each { |n| freqs[n] += 1 }\n    good_vals = freqs.keys.select { |k| freqs[k] >= k.to_i }\n    good_vals.any? ? good_vals.map(&:to_i).max : -1\nend\n",
            "def strange_sort_list(lst)\n    sl = lst.sort\n    result = []\n    left = 0\n    right = sl.length - 1\n    while left <= right\n        result << sl[left]\n        left += 1\n        if left <= right\n            result << sl[right]\n            right -= 1\n        end\n    end\n    result\nend\n",
            "def triangle_area(a, b, c)\n    if a + b > c && a + c > b && b + c > a\n        s = (a + b + c) / 2.0\n        Math.sqrt(s * (s - a) * (s - b) * (s - c))\n    else\n        -1.0\n    end\nend\n",
            "def will_it_fly(q, w)\n    return false if q.empty?\n    is_palin = q.all? { |value| value == q[q.length - q.index(value) - 1] }\n    total = q.sum\n    is_palin && total <= w\nend\n",
            "# @param arr [Array<Integer>]\n# @returns {Integer}\ndef smallest_change(arr)\n    ans = 0\n    (0...arr.length / 2).each do |i|\n        if arr[i] != arr[arr.length - i - 1]\n            ans += 1\n        end\n    end\n    ans\nend\n",
            "def total_match(lst1, lst2)\n    cnt1 = lst1.map(&:length).sum\n    cnt2 = lst2.map(&:length).sum\n    cnt1 <= cnt2 ? lst1 : lst2\nend\n",
            "# @param a [Integer]\n# @returns Boolean\ndef is_multiply_prime(a)\n    def is_prime(n)\n        return false if n < 2\n        (2..Math.sqrt(n).floor).each do |i|\n            return false if n % i == 0\n        end\n        true\n    end\n\n    cnt = 0\n    (2..a).each do |i|\n        if is_prime(i)\n            while a % i == 0\n                cnt += 1\n                a /= i\n            end\n        end\n    end\n    cnt == 3\nend\n",
            "def is_simple_power(x, n)\n    return false if n < 2 && x != n\n    tmp = 1\n    while tmp < x\n        tmp *= n\n    end\n    tmp == x\nend\n",
            "# @param a [Integer]\n# @returns {Boolean}\ndef is_cube(a)\n    a = a.abs\n    root = (a ** (1.0 / 3.0)).round\n    return root * root * root == a\nend\n",
            "def hex_key(num)\n    num.chars.count { |x| \"2357BD\".include?(x) }\nend\n",
            "# @param dec [Integer]\n# @return [String]\ndef decimal_to_binary(dec)\n  binary = dec.to_s(2)\n  \"db#{binary}db\"\nend\n",
            "# @param s [String]\n# @returns {Boolean}\ndef is_happy(s)\n    return false if s.length < 3\n    (0...s.length - 2).each do |i|\n        return false if s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]\n    end\n    true\nend\n",
            "def numerical_letter_grade(grades)\n    result = []\n    grades.each do |g|\n        if g == 4.0\n            result << \"A+\"\n        elsif g > 3.7\n            result << \"A\"\n        elsif g > 3.3\n            result << \"A-\"\n        elsif g > 3.0\n            result << \"B+\"\n        elsif g > 2.7\n            result << \"B\"\n        elsif g > 2.3\n            result << \"B-\"\n        elsif g > 2.0\n            result << \"C+\"\n        elsif g > 1.7\n            result << \"C\"\n        elsif g > 1.3\n            result << \"C-\"\n        elsif g > 1.0\n            result << \"D+\"\n        elsif g > 0.7\n            result << \"D\"\n        elsif g > 0.0\n            result << \"D-\"\n        else\n            result << \"E\"\n        end\n    end\n    result\nend\n",
            "def prime_length(s)\n    length = s.length\n    return false if length < 2\n    (2..Math.sqrt(length)).each do |i|\n        return false if length % i == 0\n    end\n    true\nend\n",
            "def starts_one_ends(n)\n    if n == 1\n        return 1\n    end\n    return 2 * 9 * 10**(n - 2)\nend\n",
            "def solve(n)\n    digits_sum = n.to_s.chars.map(&:to_i).reduce(:+)\n    digits_sum.to_s(2)\nend\n",
            "def add(lst)\n    lst.reduce(0) do |acc, x, i|\n        if i % 2 == 1 && x.even?\n            acc += x\n        end\n        acc\n    end\nend\n",
            "# @param s [String]\n# @returns {String}\ndef anti_shuffle(s)\n    s.split(\" \").map do |word|\n        word.chars.sort.join(\"\")\n    end.join(\" \")\nend\n",
            "# @param lst [Array<Array<Integer>>]\n# @param x [Integer]\n# @returns {Array<Array<Integer>>}\ndef get_row(lst, x)\n    coords = []\n    lst.each_with_index do |row, i|\n        row.each_with_index do |val, j|\n            coords << [i, j] if val == x\n        end\n    end\n    coords.sort_by { |a, b| [a, -b] }\nend\n",
            "def sort_array(arr)\n    if arr.empty?\n        return []\n    elsif (arr.first + arr.last) % 2 == 0\n        return arr.sort.reverse\n    else\n        return arr.sort\n    end\nend\n",
            "# @param s [String]\n# @returns {String}\ndef encrypt(s)\n    result = ''\n    s.each_char do |ch|\n        shifted = ch.ord + 4\n        if shifted > 'z'.ord\n            shifted -= 26\n        end\n        result += shifted.chr\n    end\n    return result\nend\n",
            "# @param lst [Array<Integer>]\n# @returns {Integer, nil}\ndef next_smallest(lst)\n    sl = lst.uniq.sort\n    return nil if sl.length < 2\n    return sl[1]\nend\n",
            "def is_bored(s)\n    sentences = s.split(/[\\.\\!\\?]\\s*/)\n    sentences.count { |sentence| sentence.length >= 2 && sentence.start_with?(\"I \") }\nend\n",
            "# @param x [Object]\n# @param y [Object]\n# @param z [Object]\n# @returns {Boolean}\ndef any_int(x, y, z)\n  if x.is_a?(Integer) && y.is_a?(Integer) && z.is_a?(Integer)\n    return true if (x + y == z) || (x + z == y) || (y + z == x)\n  end\n  false\nend\n",
            "def encode(message)\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    message.each_char do |ch|\n        if ch =~ /[a-zA-Z]/\n            ch1 = ch == ch.downcase ? ch.upcase : ch.downcase\n            if vowels.include?(ch1)\n                ch1 = (ch1.ord + 2).chr\n            end\n            result << ch1\n        else\n            result << ch\n        end\n    end\n    return result\nend\n",
            "# @param lst [Array<Integer>]\n# @returns {Integer}\ndef skjkasdkd(lst)\n    is_prime = ->(n) {\n        return false if n < 2\n        (2..Math.sqrt(n)).each do |i|\n            return false if n % i == 0\n        end\n        true\n    }\n\n    primes = lst.select(&is_prime)\n    return 0 if primes.empty?\n\n    largest = primes.max.to_s\n    largest.chars.reduce(0) { |sum, digit| sum + digit.to_i }\nend\n",
            "# @param d [Hash{String => String}]\n# @returns {Boolean}\ndef check_dict_case(d)\n  return false if d.empty?\n  all_lower = d.keys.all? { |c| c.islower? }\n  all_upper = d.keys.all? { |c| c.isupper? }\n  all_lower || all_upper\nend\n",
            "def count_up_to(n)\n    primes = []\n    (2...n).each do |num|\n        if primes.all? { |p| num % p != 0 }\n            primes << num\n        end\n    end\n    primes\nend\n",
            "# @param a [Integer]\n# @param b [Integer]\n# @returns {Integer}\ndef multiply(a, b)\n  (a.abs % 10) * (b.abs % 10)\nend\n",
            "def count_upper(s)\n    vowels = \"AEIOU\"\n    count = 0\n    for i in 0...s.length\n        if i.even? && vowels.include?(s[i])\n            count += 1\n        end\n    end\n    count\nend\n",
            "# @param value [String]\n# @returns {Integer}\ndef closest_integer(value)\n    num = Float(value)\n    if num >= 0\n        (num + 0.5).floor\n    else\n        (num - 0.5).ceil\n    end\nend\n",
            "def make_a_pile(n)\n  Array.new(n) { |i| n + 2 * i }\nend\n",
            "```rb\ndef words_string(s)\n    s.split(/[,\\s]+/).reject { |w| w.empty? }\nend\n```",
            "def choose_num(x, y)\n    if x > y\n        return -1\n    end\n    if y.even?\n        return y\n    end\n    return x != y ? y - 1 : -1\nend\n",
            "def rounded_avg(n, m)\n    return nil if n > m\n    r_avg = ((m + n) / 2.0).round\n    r_avg.to_s(2)\nend\n",
            "def unique_digits(x)\n    all_digits_odd = ->(s) {\n        s.each_char do |digit|\n            return false if digit.to_i.even?\n        end\n        true\n    }\n\n    x.select { |num| all_digits_odd.call(num.to_s) }.sort\nend\n",
            "def by_length(arr)\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = arr.select { |x| x >= 1 && x <= 9 }.sort.reverse\n    sorted_arr.map { |x| digit_names[x - 1] }\nend\n",
            "def f(n)\n  nums = Array(1..n)\n  nums.map do |i|\n    if i.odd?\n      nums.slice(0, i).sum\n    else\n      nums.slice(0, i).reduce(:*)\n    end\n  end\nend\n",
            "# @param n [Integer]\n# @returns {Array<Integer>}\ndef even_odd_palindrome(n)\n    cnt = [0, 0]\n    (1..n).each do |i|\n        txt = i.to_s\n        if txt == txt.reverse\n            cnt[i % 2] += 1\n        end\n    end\n    cnt\nend\n",
            "# @param arr [Array<Integer>]\n# @returns {Integer}\ndef count_nums(arr)\n    def digits_sum(n)\n        if n >= 0\n            n.to_s.chars.map(&:to_i).sum\n        else\n            (n.to_s[0, 2].to_i * 2) + digits_sum(n.abs)\n        end\n    end\n\n    arr.count { |n| digits_sum(n) > 0 }\nend\n",
            "# @param arr [Array<Integer>]\n# @returns {Boolean}\ndef move_one_ball(arr)\n    return true if arr.empty?\n    sorted_arr = arr.sort\n    (0..arr.length).each do |i|\n        return true if arr[i..] == sorted_arr[0, arr.length - i] && arr[0...i] == sorted_arr[arr.length - i..]\n    end\n    false\nend\n",
            "# @param lst1 [Array<Integer>]\n# @param lst2 [Array<Integer>]\n# @returns {String}\ndef can_exchange(lst1, lst2)\n    odd_cnt = lst1.count { |num| num % 2 != 0 }\n    even_cnt = lst2.count { |num| num % 2 == 0 }\n    even_cnt >= odd_cnt ? \"YES\" : \"NO\"\nend\n",
            "def histogram(test)\n    freq = Hash.new(0)\n    words = test.split(\" \").select { |w| w.length > 0 }\n    words.each do |w|\n        freq[w] += 1\n    end\n    result = {}\n    if freq.size > 0\n        max_freq = freq.values.max\n        freq.each_pair do |k, v|\n            if v == max_freq\n                result[k] = v\n            end\n        end\n    end\n    return result\nend\n",
            "def reverse_delete(s, c)\n    def is_palindrome(str)\n        str == str.reverse\n    end\n\n    s1 = s.chars.select { |ch| !c.include?(ch) }.join('')\n    [s1, is_palindrome(s1) ? \"yes\" : \"no\"]\nend\n",
            "def odd_count(lst)\n    result = []\n    lst.each do |num|\n        n = num.chars.count { |d| d.ord % 2 == 1 }\n        rs = \"the number of odd elements in the string i of the input.\"\n        result << rs.gsub(\"i\", n.to_s)\n    end\n    result\nend\n",
            "# @param nums [Array<Integer>]\n# @returns {Integer}\ndef min_sub_array_sum(nums)\n    min_sum = 0\n    cur_sum = 0\n    nums.each do |n|\n        cur_sum = [cur_sum + n, 0].min\n        min_sum = [cur_sum, min_sum].min\n    end\n    if min_sum == 0\n        min_sum = nums.min\n    end\n    return min_sum\nend\n",
            "def max_fill(grid, capacity)\n  grid.reduce(0) do |total, arr|\n    total + (arr.sum.to_f / capacity).ceil\n  end\nend\n",
            "# @param arr [Array<Integer>]\n# @return [Array<Integer>]\ndef sort_array(arr)\n    arr.sort_by { |x| [count_ones(x), x] }\nend\n\ndef count_ones(num)\n    num.to_s(2).count(\"1\")\nend\n",
            "def select_words(s, n)\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \").reject { |w| w.empty? }\n    words.select do |w|\n        w.downcase.chars.count { |c| consonants.include?(c) } == n\n    end\nend\n",
            "def get_closest_vowel(word)\n    vowels = \"aeiouAEIOU\"\n    (word.length - 2).downto(1) do |i|\n        if vowels.include?(word[i]) && !vowels.include?(word[i - 1]) && !vowels.include?(word[i + 1])\n            return word[i]\n        end\n    end\n    \"\"\nend\n",
            "# @param lst [Array<String>]\n# @returns {String}\ndef match_parens(lst)\n    check = ->(s) {\n        depth = 0\n        s.each_char do |ch|\n            if ch == \"(\"\n                depth += 1\n            else\n                depth -= 1\n            end\n            return false if depth < 0\n        end\n        depth == 0\n    }\n\n    s1 = lst[0] + lst[1]\n    s2 = lst[1] + lst[0]\n    check.call(s1) || check.call(s2) ? \"Yes\" : \"No\"\nend\n",
            "def maximum(arr, k)\n    return [] if k == 0\n    arr.sort.last(k)\nend\n",
            "def solution(lst)\n  lst.reduce(0) do |acc, x|\n    acc += x if index.even? && x.odd?\n    acc\n  end\nend\n",
            "# @param arr [Array<Integer>]\n# @param k [Integer]\n# @returns {Integer}\ndef add_elements(arr, k)\n    arr.take(k).reduce(0) do |sum, n|\n        sum + (n.to_s.length <= 2 ? n : 0)\n    end\nend\n",
            "# @param n [Integer]\n# @returns {Array<Integer>}\ndef get_odd_collatz(n)\n    collatz = [1]\n    while n != 1\n        if n % 2 != 0\n            collatz.push(n)\n            n = 3 * n + 1\n        else\n            n = (n / 2).floor\n        end\n    end\n    collatz.sort\nend\n",
            "# @param date [String]\n# @returns {Boolean}\ndef valid_date(date)\n    return false unless date.length == 10 && date[2] == \"-\" && date[5] == \"-\"\n    \n    m = date[0, 2].to_i\n    d = date[3, 2].to_i\n    \n    return true if [1, 3, 5, 7, 8, 10, 12].include?(m) && d >= 1 && d <= 31\n    return true if [4, 6, 9, 11].include?(m) && d >= 1 && d <= 30\n    return true if m == 2 && d >= 1 && d <= 29\n    \n    false\nend\n",
            "# @param txt [String]\n# @returns {Array<String>}\ndef split_words(txt)\n    if txt.include?(\" \")\n        txt.split(\" \")\n    elsif txt.include?(\",\")\n        txt.split(\",\")\n    else\n        count = txt.chars.count { |c| c >= 'a' && c <= 'z' && c.ord % 2 == 0 }\n        [count.to_s]\n    end\nend\n",
            "# @param lst [Array<Integer>]\n# @returns [Boolean]\ndef is_sorted(lst)\n    (0...lst.length).each do |i|\n        return false if i > 0 && lst[i - 1] > lst[i]\n    end\n    freq = {}\n    lst.each do |num|\n        freq[num] ||= 0\n        freq[num] += 1\n    end\n    freq.values.max <= 2\nend\n",
            "def intersection(interval1, interval2)\n    def is_prime(n)\n        return false if n < 2\n        (2..Math.sqrt(n)).each do |i|\n            return false if n % i == 0\n        end\n        true\n    end\n\n    l = [interval1[0], interval2[0]].max\n    r = [interval1[1], interval2[1]].min\n    length = r - l\n    length > 0 && is_prime(length) ? \"YES\" : \"NO\"\nend\n",
            "# @param arr [Array<Integer>]\n# @returns {Integer, nil}\ndef prod_signs(arr)\n    return nil if arr.empty?\n    return 0 if arr.include?(0)\n    \n    sign = arr.count { |n| n < 0 }.odd? ? -1 : 1\n    return sign * arr.map(&:abs).reduce(:+)\nend\n",
            "def min_path(grid, k)\n    n = grid.length\n    min_val = n * n + 1\n    (0...n).each do |i|\n        (0...n).each do |j|\n            if grid[i][j] == 1\n                temp = []\n                temp << grid[i - 1][j] if i != 0\n                temp << grid[i][j - 1] if j != 0\n                temp << grid[i + 1][j] if i != n - 1\n                temp << grid[i][j + 1] if j != n - 1\n                min_val = [min_val, *temp].min\n            end\n        end\n    end\n    result = []\n    (0...k).each do |i|\n        result << (i % 2 == 0 ? 1 : min_val)\n    end\n    result\nend\n",
            "def tri(n)\n    return [1] if n == 0\n    seq = [1, 3]\n    (2..n).each do |i|\n        if i.even?\n            seq.push(i / 2.0 + 1)\n        else\n            seq.push(seq[i - 1] + seq[i - 2] + (i + 3) / 2.0)\n        end\n    end\n    seq\nend\n",
            "# @param n [Integer]\n# @returns {Integer}\ndef digits(n)\n    odds = n.to_s.chars.map(&:to_i).select { |d| d.odd? }\n    odds.any? ? odds.reduce(:*) : 0\nend\n",
            "def is_nested(s)\n    open_idx = []\n    close_idx = []\n    \n    (0...s.length).each do |i|\n        ch = s[i]\n        if ch == '['\n            open_idx.push(i)\n        elsif ch == ']'\n            close_idx.push(i)\n        end\n    end\n    \n    close_idx.reverse!\n    cnt = 0\n    i = 0\n    l = close_idx.length\n    \n    open_idx.each do |idx|\n        if i < l && idx < close_idx[i]\n            cnt += 1\n            i += 1\n        end\n    end\n    \n    return cnt >= 2\nend\n",
            "# @param lst [Array<Float>]\n# @returns {Integer}\ndef sum_squares(lst)\n    lst.reduce(0) { |acc, n| acc + (Math.ceil(n).to_i ** 2) }\nend\n",
            "# @param txt [String]\n# @returns {Boolean}\ndef check_if_last_char_is_a_letter(txt)\n    return false if txt.nil? || txt.empty?\n    last = txt.split(' ').last\n    last.length == 1 && last =~ /[a-zA-Z]/\nend\n",
            "# @param arr [Array<Integer>]\n# @returns {Integer}\ndef can_arrange(arr)\n    if arr.length <= 1\n        return -1\n    end\n    idx = []\n    (1...arr.length).each do |i|\n        if arr[i] < arr[i - 1]\n            idx << i\n        end\n    end\n    idx.length > 0 ? idx.max : -1\nend\n",
            "def largest_smallest_integers(lst)\n    neg = lst.select { |i| i < 0 }\n    pos = lst.select { |i| i > 0 }\n    max_neg = neg.any? ? neg.max : nil\n    min_pos = pos.any? ? pos.min : nil\n    [max_neg, min_pos]\nend\n",
            "def compare_one(a, b)\n    def any_to_real(o)\n        if o.is_a?(String)\n            Float(o.gsub(',', '.'))\n        elsif o.is_a?(Numeric)\n            o.to_f\n        else\n            raise ArgumentError, \"Type Error\"\n        end\n    end\n\n    a1 = any_to_real(a)\n    b1 = any_to_real(b)\n\n    if a1 == b1\n        nil\n    elsif a1 > b1\n        a1\n    else\n        b1\n    end\nend\n",
            "# @param n [Integer]\n# @returns {Boolean}\ndef is_equal_to_sum_even(n)\n    n % 2 == 0 && n >= 8\nend\n",
            "def special_factorial(n)\n    fact = 1\n    result = 1\n    (1..n).each do |i|\n        fact *= i\n        result *= fact\n    end\n    result\nend\n",
            "def fix_spaces(txt)\n  txt.gsub(/\\s{3,}/, \"-\").gsub(/ /, \"_\")\nend\n",
            "# @param file_name [String]\n# @returns {String}\ndef file_name_check(file_name)\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if lst.length != 2 || !suf.include?(lst[1]) || lst[0].length == 0 || !lst[0][0] =~ /[a-zA-Z]/ || (lst[0].scan(/\\d/).length > 3)\n        return \"No\"\n    end\n    return \"Yes\"\nend\n",
            "# @param lst [Array<Integer>]\n# @returns {Integer}\ndef sum_squares(lst)\n    result = 0\n    lst.each_with_index do |num, i|\n        if i % 3 == 0\n            result += num**2\n        elsif i % 4 == 0\n            result += num**3\n        else\n            result += num\n        end\n    end\n    result\nend\n",
            "def is_prime(n)\n  return false if n < 2\n  (2..Math.sqrt(n).floor).each do |i|\n    return false if n % i == 0\n  end\n  true\nend\n\n# @param sentence [String]\n# @returns {String}\ndef words_in_sentence(sentence)\n  words = sentence.split(\" \")\n  prime_length_words = words.select { |w| is_prime(w.length) }\n  prime_length_words.join(\" \")\nend\n",
            "# @param x [String]\n# @param n [String]\n# @returns {Boolean}\ndef simplify(x, n)\n    xs = x.split(\"/\")\n    ns = n.split(\"/\")\n    num = xs[0].to_i * ns[0].to_i\n    den = xs[1].to_i * ns[1].to_i\n    num % den == 0\nend\n",
            "def digits_sum(n)\n  n_str = n.to_s\n  if n >= 0\n    n_str.chars.map(&:to_i).sum\n  else\n    (n_str[0, 2].to_i * 2) + digits_sum(n.abs)\n  end\nend\n\n# @param nums [Array<Integer>]\n# @returns {Array<Integer>}\ndef order_by_points(nums)\n  nums.sort_by { |num| digits_sum(num) }\nend\n",
            "def special_filter(nums)\n    odds = \"13579\"\n    nums.count { |n| n > 10 && n.odd? && odds.include?(n.to_s[0]) }\nend\n",
            "# @param n [Integer]\n# @return [Integer]\ndef get_max_triples(n)\n    c = [0, 0, 0]\n    (1..n).each do |i|\n        a = i * i - i + 1\n        c[a % 3] += 1\n    end\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\nend\n",
            "def bf(planet1, planet2)\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    return [] unless names.include?(planet1) && names.include?(planet2)\n\n    l = names.index(planet1)\n    r = names.index(planet2)\n    l, r = r, l if l > r\n    return [] if l == r\n\n    names[l + 1...r]\nend\n",
            "def sorted_list_sum(lst)\n    result = lst.select { |s| s.length.even? }\n    result.sort_by { |x| [x.length, x] }\nend\n",
            "def x_or_y(n, x, y)\n    return y if n < 2\n    (2..Math.sqrt(n).floor).each do |i|\n        return y if n % i == 0\n    end\n    x\nend\n",
            "# @param lst [Array<Float>]\n# @returns {Integer}\ndef double_the_difference(lst)\n  lst.select { |n| n >= 0 && n.odd? }.map { |n| n * n }.sum\nend\n",
            "def compare(game, guess)\n  game.map.with_index { |x, i| (x - guess[i]).abs }\nend\n",
            "def strongest_extension(class_name, extensions)\n    max_s = -Float::INFINITY\n    max_ext = \"\"\n    extensions.each do |ext|\n        upper = ext.count('A-Z')\n        lower = ext.count('a-z')\n        s = upper - lower\n        if s > max_s\n            max_s = s\n            max_ext = ext\n        end\n    end\n    \"#{class_name}.#{max_ext}\"\nend\n",
            "def cycpattern_check(a, b)\n    return false if a.length < b.length\n    (0..b.length-1).each do |i|\n        return true if (b[i..-1] + b[0...i]).include?(a)\n    end\n    false\nend\n",
            "def even_odd_count(num)\n    ds = num.abs.to_s\n    even_count = 0\n    ds.each_char do |d|\n        if d.to_i % 2 == 0\n            even_count += 1\n        end\n    end\n    [even_count, ds.length - even_count]\nend\n",
            "def int_to_mini_roman(num)\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = []\n    i = 0\n    while i < values.length\n        while num >= values[i]\n            res << numerals[i]\n            num -= values[i]\n        end\n        i += 1\n    end\n    res.join('')\nend\n",
            "def right_angle_triangle(a, b, c)\n    s = [a, b, c].sort\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\nend\n",
            "def find_max(words)\n    max_cnt = 0\n    max_w = \"\"\n    words.each do |w|\n        cnt = w.chars.uniq.size\n        if cnt > max_cnt\n            max_cnt = cnt\n            max_w = w\n        elsif cnt == max_cnt\n            max_w = [max_w, w].min\n        end\n    end\n    return max_w\nend\n",
            "def eat(num, need, remaining)\n    if need <= remaining\n        [num + need, remaining - need]\n    else\n        [num + remaining, 0]\n    end\nend\n",
            "# @param operators [Array<String>]\n# @param operands [Array<Integer>]\n# @return [Integer]\ndef do_algebra(operators, operands)\n    ops = operators.clone\n    nums = operands.clone\n    i = ops.size - 1\n    while i >= 0\n        if ops[i] == \"**\"\n            nums[i] = nums[i].pow(nums[i + 1])\n            nums.delete_at(i + 1)\n            ops.delete_at(i)\n        end\n        i -= 1\n    end\n    i = 0\n    while i < ops.size\n        if ops[i] == \"*\"\n            nums[i] = nums[i] * nums[i + 1]\n            nums.delete_at(i + 1)\n            ops.delete_at(i)\n            i -= 1\n        elsif ops[i] == \"//\"\n            nums[i] = nums[i].div(nums[i + 1])\n            nums.delete_at(i + 1)\n            ops.delete_at(i)\n            i -= 1\n        end\n        i += 1\n    end\n    i = 0\n    while i < ops.size\n        if ops[i] == \"+\"\n            nums[i] = nums[i] + nums[i + 1]\n            nums.delete_at(i + 1)\n            ops.delete_at(i)\n            i -= 1\n        elsif ops[i] == \"-\"\n            nums[i] = nums[i] - nums[i + 1]\n            nums.delete_at(i + 1)\n            ops.delete_at(i)\n            i -= 1\n        end\n        i += 1\n    end\n    return nums[0]\nend\n",
            "# @param s [String]\n# @returns {String}\ndef solve(s)\n    if !s.match?(/[a-zA-Z]/)\n        return s.reverse\n    end\n    result = []\n    s.each_char do |ch|\n        if !ch.match?(/[a-zA-Z]/)\n            result << ch\n        elsif ch === ch.upcase\n            result << ch.downcase\n        elsif ch === ch.downcase\n            result << ch.upcase\n        end\n    end\n    result.join\nend\n",
            "def string_to_md5(txt)\n    return nil if txt.empty?\n    md5_hash = Digest::MD5.new\n    txt_bytes = txt.encode\n    md5_hash.update(txt_bytes)\n    md5_encoded = md5_hash.hexdigest\n    md5_encoded\nend\n",
            "# @param a [Integer]\n# @param b [Integer]\n# @returns {Array<Integer>}\ndef generate_integers(a, b)\n    lower = [2, [a, b].min].max\n    upper = [8, [a, b].max].min\n    result = []\n    (lower..upper).each do |i|\n        if i.even?\n            result << i\n        end\n    end\n    result\nend\n"
        ],
        "swift": [
            "func hasCloseElements(_ numbers: [Double], _ threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n        for j in (i + 1)..<numbers.count {\n            if abs(numbers[i] - numbers[j]) < threshold {\n                return true\n            }\n        }\n    }\n    return false\n}\n",
            "func separateParenGroups(_ parenString: String) -> [String] {\n    var groups = [String]()\n    var stk = [Character]()\n    var currentGroup = \"\"\n    let parens = parenString.replacingOccurrences(of: \" \", with: \"\")\n    \n    for ch in parens {\n        if ch == \"(\" {\n            stk.append(ch)\n            currentGroup += String(ch)\n        } else if ch == \")\" {\n            stk.removeLast()\n            currentGroup += String(ch)\n            if stk.isEmpty {\n                groups.append(currentGroup)\n                currentGroup = \"\"\n            }\n        }\n    }\n    return groups\n}\n",
            "func truncateNumber(_ num: Double) -> Double {\n    return num - floor(num)\n}\n",
            "func belowZero(_ operations: [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance += op\n        if balance < 0 {\n            return true\n        }\n    }\n    return false\n}\n",
            "func meanAbsoluteDeviation(_ numbers: [Double]) -> Double {\n    let mean = numbers.reduce(0.0, +) / Double(numbers.count)\n    let deviation = numbers.reduce(0.0) { $0 + abs($1 - mean) }\n    return deviation / Double(numbers.count)\n}\n",
            "func intersperse(_ numbers: [Int], _ delimiter: Int) -> [Int] {\n    var result = [Int]()\n    for (i, number) in numbers.enumerated() {\n        if i != 0 {\n            result.append(delimiter)\n        }\n        result.append(number)\n    }\n    return result\n}\n",
            "func parseNestedParens(_ parenString: String) -> [Int] {\n    var result = [Int]()\n    let parenGroups = parenString.split(separator: \" \")\n    for group in parenGroups {\n        var maxDepth = 0\n        var depth = 0\n        for ch in group {\n            if ch == \"(\" {\n                depth += 1\n                maxDepth = max(maxDepth, depth)\n            } else if ch == \")\" {\n                depth -= 1\n            }\n        }\n        result.append(maxDepth)\n    }\n    return result\n}\n",
            "func filterBySubstring(_ strs: [String], _ substring: String) -> [String] {\n    return strs.filter { $0.contains(substring) }\n}\n",
            "func sumProduct(_ numbers: [Int]) -> [Int] {\n    let n_sum = numbers.reduce(0) { $0 + $1 }\n    let n_product = numbers.reduce(1) { $0 * $1 }\n    return [n_sum, n_product]\n}\n",
            "func rollingMax(_ numbers: [Int]) -> [Int] {\n    var maxSoFar = Int.min\n    var result: [Int] = []\n    for num in numbers {\n        maxSoFar = max(maxSoFar, num)\n        result.append(maxSoFar)\n    }\n    return result\n}\n",
            "func makePalindrome(_ s: String) -> String {\n    if s == String(s.reversed()) {\n        return s\n    }\n    for i in 0..<s.count {\n        let index = s.index(s.startIndex, offsetBy: i)\n        let substring = String(s[index...])\n        if substring == String(substring.reversed()) {\n            let prefix = String(s.prefix(upTo: index))\n            return s + String(prefix.reversed())\n        }\n    }\n    return \"\"\n}\n",
            "func stringXor(_ a: String, _ b: String) -> String {\n    return zip(a, b).map { $0 == $1 ? \"0\" : \"1\" }.joined()\n}\n",
            "func longest(_ strs: [String]) -> String? {\n    guard !strs.isEmpty else { return nil }\n    var longest_s = strs[0]\n    for s in strs {\n        if s.count > longest_s.count {\n            longest_s = s\n        }\n    }\n    return longest_s\n}\n",
            "func greatestCommonDivisor(_ a: Int, _ b: Int) -> Int {\n    if b == 0 {\n        return a\n    } else {\n        return greatestCommonDivisor(b, a % b)\n    }\n}\n",
            "func allPrefixes(_ s: String) -> [String] {\n    var prefixes = [String]()\n    for i in 0..<s.count {\n        let index = s.index(s.startIndex, offsetBy: i)\n        let prefix = String(s[...index])\n        prefixes.append(prefix)\n    }\n    return prefixes\n}\n",
            "func stringSequence(_ n: Int) -> String {\n    return (0...n).map { String($0) }.joined(separator: \" \")\n}\n",
            "func countDistinctCharacters(_ s: String) -> Int {\n    return Set(s.lowercased()).count\n}\n",
            "func parseMusic(_ musicString: String) -> [Int] {\n    let durations: [String: Int] = [\"o\": 4, \"o|\": 2, \".|\": 1]\n    let notes = musicString.split(separator: \" \")\n    return notes.compactMap { durations[String($0)] }\n}\n",
            "func howManyTimes(_ s: String, _ substring: String) -> Int {\n    var times = 0\n    let substringLength = substring.count\n    for i in 0...(s.count - substringLength) {\n        if let start = s.index(s.startIndex, offsetBy: i),\n           let end = s.index(start, offsetBy: substringLength) {\n            if s[start..<end] == substring {\n                times += 1\n            }\n        }\n    }\n    return times\n}\n",
            "func sortNumbers(_ numbers: String) -> String {\n    let numDict = [\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    ]\n    let numList = numbers.split(separator: \" \").compactMap { numDict[$0] }\n    let sortedNumList = numList.sorted()\n    return sortedNumList.map { String($0) }.joined(separator: \" \")\n}\n",
            "func findClosestElements(_ numbers: [Double]) -> [Double] {\n    let sortedNumbers = numbers.sorted()\n    var minDiff = Double.infinity\n    var closestPair: [Double] = []\n    for i in 1..<sortedNumbers.count {\n        let diff = sortedNumbers[i] - sortedNumbers[i - 1]\n        if diff < minDiff {\n            minDiff = diff\n            closestPair = [sortedNumbers[i - 1], sortedNumbers[i]]\n        }\n    }\n    return closestPair\n}\n",
            "func rescaleToUnit(_ numbers: [Double]) -> [Double] {\n    guard let minNum = numbers.min(), let maxNum = numbers.max() else { return [] }\n    if minNum == maxNum {\n        return Array(repeating: 0.0, count: numbers.count)\n    } else {\n        return numbers.map { ($0 - minNum) / (maxNum - minNum) }\n    }\n}\n",
            "func filterIntegers(_ values: [Any]) -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n",
            "func strLength(_ s: String) -> Int {\n    return s.count\n}\n",
            "func largestDivisor(_ n: Int) -> Int {\n    for i in 2..<n {\n        if n % i == 0 {\n            return Int(n / i)\n        }\n    }\n    return 1\n}\n",
            "func factorize(_ n: Int) -> [Int] {\n    var factors = [Int]()\n    var divisor = 2\n    var number = n\n    while divisor <= number {\n        if number % divisor == 0 {\n            factors.append(divisor)\n            number /= divisor\n        } else {\n            divisor += 1\n        }\n    }\n    return factors\n}\n",
            "func removeDuplicates(_ numbers: [Int]) -> [Int] {\n    var counts = [Int: Int]()\n    for num in numbers {\n        counts[num, default: 0] += 1\n    }\n    var res = [Int]()\n    for num in numbers {\n        if let count = counts[num], count == 1 {\n            res.append(num)\n        }\n    }\n    return res\n}\n",
            "func flipCase(_ s: String) -> String {\n    var flipped = \"\"\n    for ch in s {\n        if !ch.isLetter {\n            flipped.append(ch)\n        } else if ch.isLowercase {\n            flipped.append(ch.uppercased())\n        } else {\n            flipped.append(ch.lowercased())\n        }\n    }\n    return flipped\n}\n",
            "func concatenate(_ strs: [String]) -> String {\n    return strs.joined()\n}\n",
            "func filterByPrefix(_ strs: [String], _ prefixStr: String) -> [String] {\n    return strs.filter { $0.hasPrefix(prefixStr) }\n}\n",
            "func getPositive(_ l: [Int]) -> [Int] {\n    return l.filter { $0 > 0 }\n}\n",
            "func isPrime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func poly(_ xs: [Int], _ x: Double) -> Double {\n    var res = 0.0\n    for (i, coeff) in xs.enumerated() {\n        res += Double(coeff) * pow(x, Double(i))\n    }\n    return res\n}\n\nfunc findZero(_ xs: [Int]) -> Double {\n    var x1 = 1.0, x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0 {\n        x1 *= 2\n        x2 *= 2\n    }\n    while abs(x1 - x2) > 1e-10 {\n        let mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0 {\n            return mid\n        } else if poly(xs, mid) * poly(xs, x1) < 0 {\n            x2 = mid\n        } else {\n            x1 = mid\n        }\n    }\n    return (x1 + x2) / 2\n}\n",
            "func sortThird(_ l: [Int]) -> [Int] {\n    let sortedThird = l.enumerated().compactMap { $0.offset % 3 == 0 ? $0.element : nil }.sorted()\n    return l.enumerated().map { $0.offset % 3 == 0 ? sortedThird[$0.offset / 3] : $0.element }\n}\n",
            "func listUnique(_ l: [Int]) -> [Int] {\n    return Array(Set(l)).sorted()\n}\n",
            "func maxElement(_ l: [Int]) -> Int {\n    guard !l.isEmpty else { return 0 }\n    return l.max() ?? 0\n}\n",
            "func fizzBuzz(_ n: Int) -> Int {\n    var cnt = 0\n    for i in 0..<n {\n        if i % 11 == 0 || i % 13 == 0 {\n            let countOfSevens = String(i).filter { $0 == \"7\" }.count\n            cnt += countOfSevens\n        }\n    }\n    return cnt\n}\n",
            "func sortEven(_ l: [Int]) -> [Int] {\n    var sortedEven = l.enumerated().compactMap { (index, value) in index % 2 == 0 ? value : nil }.sorted()\n    return l.map { index % 2 == 0 ? sortedEven.removeFirst() : $0 }\n}\n",
            "func encodeCyclic(_ s: String) -> String {\n    var result = \"\"\n    let charArray = Array(s)\n    for i in stride(from: 0, to: charArray.count, by: 3) {\n        if i + 3 > charArray.count {\n            result += String(charArray[i..<charArray.count])\n        } else {\n            result += String(charArray[i+1...i+2])\n            result.append(charArray[i])\n        }\n    }\n    return result\n}\n\nfunc decodeCyclic(_ s: String) -> String {\n    return encodeCyclic(encodeCyclic(s))\n}\n",
            "func primeFib(_ n: Int) -> Int {\n    func isPrime(_ num: Int) -> Bool {\n        if num < 2 { return false }\n        for i in 2...Int(Double(num).squareRoot()) {\n            if num % i == 0 { return false }\n        }\n        return true\n    }\n\n    var f = [0, 1]\n    var cnt = 0\n    while cnt < n {\n        f = [f[1], f[0] + f[1]]\n        if isPrime(f[1]) {\n            cnt += 1\n        }\n    }\n    return f[1]\n}\n",
            "func triplesSumToZero(_ l: [Int]) -> Bool {\n    for i in 0..<l.count {\n        for j in (i + 1)..<l.count {\n            for k in (j + 1)..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n",
            "func carRaceCollision(_ n: Int) -> Int {\n    return n * n\n}\n",
            "func incrList(_ l: [Int]) -> [Int] {\n    return l.map { $0 + 1 }\n}\n",
            "func pairsSumToZero(_ l: [Int]) -> Bool {\n    var seen = Set<Int>()\n    for num in l {\n        if seen.contains(-num) {\n            return true\n        }\n        seen.insert(num)\n    }\n    return false\n}\n",
            "func changeBase(_ x: Int, _ bas: Int) -> String {\n    if x == 0 {\n        return \"0\"\n    }\n    var digits = [String]()\n    var number = x\n    while number > 0 {\n        digits.append(String(number % bas))\n        number /= bas\n    }\n    return digits.reversed().joined()\n}\n",
            "func triangleArea(_ a: Int, _ h: Int) -> Double {\n    return Double(a * h) / 2.0\n}\n",
            "func fib4(_ n: Int) -> Int {\n    var fib = [0, 0, 2, 0]\n    for i in 4...n {\n        fib[i % 4] = fib.reduce(0, +)\n    }\n    return fib[n % 4]\n}\n",
            "func median(_ l: [Double]) -> Double {\n    let sl = l.sorted()\n    if sl.count % 2 != 0 {\n        return sl[sl.count / 2]\n    } else {\n        return (sl[sl.count / 2] + sl[sl.count / 2 - 1]) / 2.0\n    }\n}\n",
            "func isPalindrome(_ txt: String) -> Bool {\n    return txt == String(txt.reversed())\n}\n",
            "func modp(_ n: Int, _ p: Int) -> Int {\n    var ret = 1\n    for _ in 0..<n {\n        ret = (ret * 2) % p\n    }\n    return ret\n}\n",
            "func encodeShift(_ s: String) -> String {\n    var result = \"\"\n    for ch in s {\n        let shiftedChar = Character(UnicodeScalar(((ch.asciiValue! - 97 + 5) % 26) + 97))\n        result.append(shiftedChar)\n    }\n    return result\n}\n\nfunc decodeShift(_ s: String) -> String {\n    var result = \"\"\n    for ch in s {\n        let shiftedChar = Character(UnicodeScalar(((ch.asciiValue! - 97 + 21) % 26) + 97))\n        result.append(shiftedChar)\n    }\n    return result\n}\n",
            "func removeVowels(_ txt: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    return String(txt.filter { !vowels.contains($0) })\n}\n",
            "func belowThreshold(_ l: [Int], _ t: Int) -> Bool {\n    return l.allSatisfy { $0 < t }\n}\n",
            "func add(_ x: Int, _ y: Int) -> Int {\n    return x + y\n}\n",
            "func sameChars(_ s0: String, _ s1: String) -> Bool {\n    return Set(s0) == Set(s1)\n}\n",
            "func fib(_ n: Int) -> Int {\n    if n <= 1 {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n",
            "func correctBracketing(_ brackets: String) -> Bool {\n    var depth = 0\n    for b in brackets {\n        if b == \"<\" {\n            depth += 1\n        } else if b == \">\" {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "func monotonic(_ l: [Int]) -> Bool {\n    guard l.count > 1 else { return true }\n    \n    var diff = [Int]()\n    for i in 0..<l.count - 1 {\n        diff.append(l[i + 1] - l[i])\n    }\n    \n    return diff.allSatisfy { $0 <= 0 } || diff.allSatisfy { $0 >= 0 }\n}\n",
            "func common(_ l1: [Int], _ l2: [Int]) -> [Int] {\n    let set1 = Set(l1)\n    let set2 = Set(l2)\n    let commonElements = set1.intersection(set2).sorted()\n    return Array(commonElements)\n}\n",
            "func largestPrimeFactor(_ n: Int) -> Int {\n    var i = 2\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i\n        } else {\n            i += 1\n        }\n    }\n    return n\n}\n",
            "func sumToN(_ n: Int) -> Int {\n    return (n + 1) * n / 2\n}\n",
            "func correctBracketing(_ brackets: String) -> Bool {\n    var depth = 0\n    for b in brackets {\n        if b == \"(\" {\n            depth += 1\n        } else if b == \")\" {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n",
            "func derivative(_ xs: [Int]) -> [Int] {\n    return (0..<xs.count).map { i in xs[i] * i }.dropFirst()\n}\n",
            "func fibfib(_ n: Int) -> Int {\n    if n <= 1 { return 0 }\n    var a = 0, b = 0, c = 1\n    while n > 2 {\n        let next = a + b + c\n        a = b\n        b = c\n        c = next\n        n -= 1\n    }\n    return c\n}\n",
            "func vowelsCount(_ s: String) -> Int {\n    let vowels = \"aeiou\"\n    var cnt = 0\n    for (i, char) in s.enumerated() {\n        if vowels.contains(char.lowercased()) || (i == s.count - 1 && char.lowercased() == \"y\") {\n            cnt += 1\n        }\n    }\n    return cnt\n}\n",
            "func circularShift(_ x: Int, _ shift: Int) -> String {\n    let x_str = String(x)\n    if shift > x_str.count {\n        return String(x_str.reversed())\n    } else {\n        let index = x_str.index(x_str.endIndex, offsetBy: -shift)\n        return String(x_str.suffix(from: index)) + String(x_str.prefix(upTo: index))\n    }\n}\n",
            "func digitSum(_ s: String) -> Int {\n    return s.compactMap { $0.isUppercase ? Int($0.asciiValue ?? 0) : nil }.sum()\n}\n",
            "func fruitDistribution(_ s: String, _ n: Int) -> Int {\n    let words = s.split(separator: \" \")\n    if let applesIndex = words.firstIndex(of: \"apples\"), applesIndex > 0,\n       let orangesIndex = words.firstIndex(of: \"oranges\"), orangesIndex > 0,\n       let apples = Int(words[words.index(applesIndex, offsetBy: -1)]),\n       let oranges = Int(words[words.index(orangesIndex, offsetBy: -1)]) {\n        return n - apples - oranges\n    }\n    return n // or handle error case as needed\n}\n",
            "func pluck(_ arr: [Int]) -> [Int] {\n    let evens = arr.filter { $0 % 2 == 0 }\n    if evens.isEmpty {\n        return []\n    }\n    guard let minEven = evens.min() else { return [] }\n    if let index = arr.firstIndex(of: minEven) {\n        return [minEven, index]\n    }\n    return []\n}\n",
            "func search(_ lst: [Int]) -> Int {\n    var freqs: [Int: Int] = [:]\n    for n in lst {\n        freqs[n, default: 0] += 1\n    }\n    let goodVals = freqs.filter { $0.value >= $0.key }.map { $0.key }\n    return goodVals.isEmpty ? -1 : goodVals.max()!\n}\n",
            "func strangeSortList(_ lst: [Int]) -> [Int] {\n    let sl = lst.sorted()\n    var result: [Int] = []\n    var left = 0\n    var right = sl.count - 1\n    while left <= right {\n        result.append(sl[left])\n        left += 1\n        if left <= right {\n            result.append(sl[right])\n            right -= 1\n        }\n    }\n    return result\n}\n",
            "func triangleArea(_ a: Int, _ b: Int, _ c: Int) -> Double {\n    if a + b > c && a + c > b && b + c > a {\n        let s = (Double(a) + Double(b) + Double(c)) / 2.0\n        return sqrt(s * (s - Double(a)) * (s - Double(b)) * (s - Double(c)))\n    } else {\n        return -1.0\n    }\n}\n",
            "func willItFly(_ q: [Int], _ w: Int) -> Bool {\n    if q.isEmpty {\n        return false\n    }\n    let isPalin = q.enumerated().allSatisfy { (index, value) in\n        value == q[q.count - index - 1]\n    }\n    let total = q.reduce(0, +)\n    return isPalin && total <= w\n}\n",
            "func smallestChange(_ arr: [Int]) -> Int {\n    var ans = 0\n    for i in 0..<arr.count / 2 {\n        if arr[i] != arr[arr.count - i - 1] {\n            ans += 1\n        }\n    }\n    return ans\n}\n",
            "func totalMatch(_ lst1: [String], _ lst2: [String]) -> [String] {\n    let cnt1 = lst1.reduce(0) { $0 + $1.count }\n    let cnt2 = lst2.reduce(0) { $0 + $1.count }\n    return cnt1 <= cnt2 ? lst1 : lst2\n}\n",
            "func isMultiplyPrime(_ a: Int) -> Bool {\n    let isPrime = { (n: Int) -> Bool in\n        if n < 2 { return false }\n        for i in 2...Int(sqrt(Double(n))) {\n            if n % i == 0 { return false }\n        }\n        return true\n    }\n\n    var cnt = 0\n    var a = a\n    for i in 2...a {\n        if isPrime(i) {\n            while a % i == 0 {\n                cnt += 1\n                a /= i\n            }\n        }\n    }\n    return cnt == 3\n}\n",
            "func isSimplePower(_ x: Int, _ n: Int) -> Bool {\n    if n < 2 {\n        return x == n\n    }\n    var tmp = 1\n    while tmp < x {\n        tmp *= n\n    }\n    return tmp == x\n}\n",
            "func isCube(_ a: Int) -> Bool {\n    let absA = abs(a)\n    let root = Int(round(pow(Double(absA), 1.0 / 3.0)))\n    return root * root * root == absA\n}\n",
            "func hexKey(_ num: String) -> Int {\n    return Array(num).filter { \"2357BD\".contains($0) }.count\n}\n",
            "func decimalToBinary(_ dec: Int) -> String {\n    let binary = String(dec, radix: 2)\n    return \"db\\(binary)db\"\n}\n",
            "func isHappy(_ s: String) -> Bool {\n    guard s.count >= 3 else { return false }\n    \n    let characters = Array(s)\n    for i in 0..<characters.count - 2 {\n        if characters[i] == characters[i + 1] || characters[i] == characters[i + 2] || characters[i + 1] == characters[i + 2] {\n            return false\n        }\n    }\n    return true\n}\n",
            "func numericalLetterGrade(_ grades: [Double]) -> [String] {\n    var result: [String] = []\n    for g in grades {\n        if g == 4.0 {\n            result.append(\"A+\")\n        } else if g > 3.7 {\n            result.append(\"A\")\n        } else if g > 3.3 {\n            result.append(\"A-\")\n        } else if g > 3.0 {\n            result.append(\"B+\")\n        } else if g > 2.7 {\n            result.append(\"B\")\n        } else if g > 2.3 {\n            result.append(\"B-\")\n        } else if g > 2.0 {\n            result.append(\"C+\")\n        } else if g > 1.7 {\n            result.append(\"C\")\n        } else if g > 1.3 {\n            result.append(\"C-\")\n        } else if g > 1.0 {\n            result.append(\"D+\")\n        } else if g > 0.7 {\n            result.append(\"D\")\n        } else if g > 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"E\")\n        }\n    }\n    return result\n}\n",
            "func primeLength(_ s: String) -> Bool {\n    let length = s.count\n    if length < 2 {\n        return false\n    }\n    for i in 2...Int(sqrt(Double(length))) {\n        if length % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n",
            "func startsOneEnds(_ n: Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    return 2 * 9 * Int(pow(10.0, Double(n - 2)))\n}\n",
            "func solve(_ n: Int) -> String {\n    let digitsSum = String(n).compactMap { $0.wholeNumberValue }.reduce(0, +)\n    return String(digitsSum, radix: 2)\n}\n",
            "func add(_ lst: [Int]) -> Int {\n    return lst.enumerated().reduce(0) { acc, element in\n        let (i, x) = element\n        if i % 2 == 1 && x % 2 == 0 {\n            return acc + x\n        }\n        return acc\n    }\n}\n",
            "func antiShuffle(_ s: String) -> String {\n    return s.split(separator: \" \").map { word in\n        let sortedWord = String(word.sorted())\n        return sortedWord\n    }.joined(separator: \" \")\n}\n",
            "func getRow(_ lst: [[Int]], _ x: Int) -> [[Int]] {\n    var coords = [[Int]]()\n    for i in 0..<lst.count {\n        for j in 0..<lst[i].count {\n            if lst[i][j] == x {\n                coords.append([i, j])\n            }\n        }\n    }\n    return coords.sorted { $0[0] == $1[0] ? $0[1] > $1[1] : $0[0] < $1[0] }\n}\n",
            "func sortArray(_ arr: [Int]) -> [Int] {\n    if arr.isEmpty {\n        return []\n    }\n    if (arr.first! + arr.last!) % 2 == 0 {\n        return arr.sorted(by: >)\n    } else {\n        return arr.sorted()\n    }\n}\n",
            "func encrypt(_ s: String) -> String {\n    var result = \"\"\n    for ch in s {\n        let shifted = UInt32(ch.asciiValue!) + 4\n        if shifted > UInt32(UnicodeScalar(\"z\").value) {\n            result.append(Character(UnicodeScalar(shifted - 26)!))\n        } else {\n            result.append(Character(UnicodeScalar(shifted)!))\n        }\n    }\n    return result\n}\n",
            "func nextSmallest(_ lst: [Int]) -> Int? {\n    let sl = Array(Set(lst)).sorted()\n    if sl.count < 2 {\n        return nil\n    }\n    return sl[1]\n}\n",
            "func isBored(_ s: String) -> Int {\n    let sentences = s.split { \".!?\".contains($0) && $0.isWhitespace }\n    return sentences.filter { $0.count >= 2 && $0.hasPrefix(\"I \") }.count\n}\n",
            "func anyInt(_ x: Any, _ y: Any, _ z: Any) -> Bool {\n    if let intX = x as? Int, let intY = y as? Int, let intZ = z as? Int {\n        if (intX + intY == intZ) || (intX + intZ == intY) || (intY + intZ == intX) {\n            return true\n        }\n    }\n    return false\n}\n",
            "func encode(_ message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for ch in message {\n        if ch.isLetter {\n            var ch1 = ch.isLowercase ? ch.uppercased() : ch.lowercased()\n            if vowels.contains(ch1) {\n                let asciiValue = UInt32(ch1.utf16.first!)\n                ch1 = Character(UnicodeScalar(asciiValue + 2)!)\n            }\n            result.append(ch1)\n        } else {\n            result.append(ch)\n        }\n    }\n    return result\n}\n",
            "func skjkasdkd(_ lst: [Int]) -> Int {\n    func is_prime(_ n: Int) -> Bool {\n        if n < 2 { return false }\n        for i in 2...Int(sqrt(Double(n))) {\n            if n % i == 0 { return false }\n        }\n        return true\n    }\n\n    let primes = lst.filter { is_prime($0) }\n    guard !primes.isEmpty else { return 0 }\n\n    let largest = String(primes.max()!)\n    return largest.reduce(0) { $0 + Int(String($1))! }\n}\n",
            "func checkDictCase(_ d: [String:String]) -> Bool {\n    if d.isEmpty {\n        return false\n    }\n    let allLower = d.keys.allSatisfy { $0.isLowercase }\n    let allUpper = d.keys.allSatisfy { $0.isUppercase }\n    return allLower || allUpper\n}\n",
            "func countUpTo(_ n: Int) -> [Int] {\n    var primes = [Int]()\n    for num in 2..<n {\n        if primes.allSatisfy({ num % $0 != 0 }) {\n            primes.append(num)\n        }\n    }\n    return primes\n}\n",
            "func multiply(_ a: Int, _ b: Int) -> Int {\n    return (abs(a) % 10) * (abs(b) % 10)\n}\n",
            "func countUpper(_ s: String) -> Int {\n    let vowels = \"AEIOU\"\n    var count = 0\n    \n    for (i, char) in s.enumerated() {\n        if i % 2 == 0 && vowels.contains(char) {\n            count += 1\n        }\n    }\n    \n    return count\n}\n",
            "func closestInteger(_ value: String) -> Int {\n    if let num = Double(value) {\n        return (num >= 0) ? Int(floor(num + 0.5)) : Int(ceil(num - 0.5))\n    }\n    return 0 // or handle the error case as needed\n}\n",
            "func makeAPile(_ n: Int) -> [Int] {\n    return (0..<n).map { n + 2 * $0 }\n}\n",
            "func wordsString(_ s: String) -> [String] {\n    return s.split { $0.isWhitespace || $0 == \",\" }\n        .map(String.init)\n        .filter { !$0.isEmpty }\n}\n",
            "func chooseNum(_ x: Int, _ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return x != y ? y - 1 : -1\n}\n",
            "func roundedAvg(_ n: Int, _ m: Int) -> String? {\n    if n > m {\n        return nil\n    }\n    let r_avg = (m + n) / 2.0\n    return String(Int(r_avg), radix: 2)\n}\n",
            "func uniqueDigits(_ x: [Int]) -> [Int] {\n    func allDigitsOdd(_ numStr: String) -> Bool {\n        for digit in numStr {\n            if let digitInt = Int(String(digit)), digitInt % 2 == 0 {\n                return false\n            }\n        }\n        return true\n    }\n\n    return x.filter { allDigitsOdd(\"\\($0)\") }.sorted()\n}\n",
            "func byLength(_ arr: [Int]) -> [String] {\n    let digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    let sortedArr = arr.filter { $0 >= 1 && $0 <= 9 }.sorted(by: >)\n    return sortedArr.map { digitNames[$0 - 1] }\n}\n",
            "func f(_ n: Int) -> [Int] {\n    let nums = Array(1...n)\n    return nums.map { i in\n        i % 2 != 0 ? nums.prefix(i).reduce(0, +) : nums.prefix(i).reduce(1, *)\n    }\n}\n",
            "func evenOddPalindrome(_ n: Int) -> [Int] {\n    var cnt = [0, 0]\n    for i in 1...n {\n        let txt = String(i)\n        if txt == String(txt.reversed()) {\n            cnt[i % 2] += 1\n        }\n    }\n    return cnt\n}\n",
            "func digitsSum(_ n: Int) -> Int {\n    let nStr = String(n)\n    if n >= 0 {\n        return nStr.compactMap { $0.wholeNumberValue }.reduce(0, +)\n    } else {\n        return (n < -9 ? -18 : -2 * n % 10) + digitsSum(abs(n))\n    }\n}\n\nfunc countNums(_ arr: [Int]) -> Int {\n    return arr.filter { digitsSum($0) > 0 }.count\n}\n",
            "func moveOneBall(_ arr: [Int]) -> Bool {\n    if arr.isEmpty {\n        return true\n    }\n    let sortedArr = arr.sorted()\n    for i in 0..<arr.count {\n        if arr[i...] == sortedArr.prefix(arr.count - i) && arr[0..<i] == sortedArr.suffix(i) {\n            return true\n        }\n    }\n    return false\n}\n",
            "func canExchange(_ lst1: [Int], _ lst2: [Int]) -> String {\n    let odd_cnt = lst1.filter { $0 % 2 != 0 }.count\n    let even_cnt = lst2.filter { $0 % 2 == 0 }.count\n    return even_cnt >= odd_cnt ? \"YES\" : \"NO\"\n}\n",
            "func histogram(_ test: String) -> [String:Int] {\n    var freq = [String: Int]()\n    let words = test.split(separator: \" \").filter { !$0.isEmpty }\n    for word in words {\n        let w = String(word)\n        freq[w, default: 0] += 1\n    }\n    var result = [String: Int]()\n    if !freq.isEmpty {\n        if let max_freq = freq.values.max() {\n            for (k, v) in freq where v == max_freq {\n                result[k] = v\n            }\n        }\n    }\n    return result\n}\n",
            "func reverseDelete(_ s: String, _ c: String) -> [String] {\n    let isPalindrome = { (str: String) -> Bool in\n        return str == String(str.reversed())\n    }\n\n    let filteredChars = s.filter { !c.contains($0) }\n    let resultString = String(filteredChars)\n    return [resultString, isPalindrome(resultString) ? \"yes\" : \"no\"]\n}\n",
            "func oddCount(_ lst: [String]) -> [String] {\n    var result = [String]()\n    for num in lst {\n        let n = num.compactMap { $0.wholeNumberValue }.filter { $0 % 2 == 1 }.count\n        let rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replacingOccurrences(of: \"i\", with: String(n)))\n    }\n    return result\n}\n",
            "func minSubArraySum(_ nums: [Int]) -> Int {\n    var min_sum = 0\n    var cur_sum = 0\n    for n in nums {\n        cur_sum = min(cur_sum + n, 0)\n        min_sum = min(cur_sum, min_sum)\n    }\n    if min_sum == 0 {\n        min_sum = nums.min() ?? 0\n    }\n    return min_sum\n}\n",
            "func maxFill(_ grid: [[Int]], _ capacity: Int) -> Int {\n    return grid.reduce(0) { total, arr in\n        let sum = arr.reduce(0, +)\n        return total + Int(ceil(Double(sum) / Double(capacity)))\n    }\n}\n",
            "func countOnes(_ num: Int) -> Int {\n    return String(num, radix: 2).filter { $0 == \"1\" }.count\n}\n\nfunc sortArray(_ arr: [Int]) -> [Int] {\n    return arr.sorted { (x, y) -> Bool in\n        let onesX = countOnes(x)\n        let onesY = countOnes(y)\n        if onesX == onesY {\n            return x < y\n        }\n        return onesX < onesY\n    }\n}\n",
            "func selectWords(_ s: String, _ n: Int) -> [String] {\n    let consonants = Set(\"bcdfghjklmnpqrstvwxyz\")\n    return s.split(separator: \" \")\n               .compactMap { $0.isEmpty ? nil : String($0) }\n               .filter { word in\n                   word.lowercased().filter { consonants.contains($0) }.count == n\n               }\n}\n",
            "func getClosestVowel(_ word: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    for i in stride(from: word.count - 2, through: 1, by: -1) {\n        if let vowelIndex = word.index(word.startIndex, offsetBy: i, limitedBy: word.endIndex),\n           let prevVowelIndex = word.index(vowelIndex, offsetBy: -1, limitedBy: word.endIndex),\n           let nextVowelIndex = word.index(vowelIndex, offsetBy: 1, limitedBy: word.endIndex),\n           vowels.contains(word[vowelIndex]) && !vowels.contains(word[prevVowelIndex]) && !vowels.contains(word[nextVowelIndex]) {\n            return String(word[vowelIndex])\n        }\n    }\n    return \"\"\n}\n",
            "func matchParens(_ lst: [String]) -> String {\n    let check = { (s: String) -> Bool in\n        var depth = 0\n        for ch in s {\n            if ch == \"(\" {\n                depth += 1\n            } else {\n                depth -= 1\n            }\n            if depth < 0 {\n                return false\n            }\n        }\n        return depth == 0\n    }\n\n    let s1 = lst[0] + lst[1]\n    let s2 = lst[1] + lst[0]\n    return check(s1) || check(s2) ? \"Yes\" : \"No\"\n}\n",
            "func maximum(_ arr: [Int], _ k: Int) -> [Int] {\n    if k == 0 {\n        return []\n    }\n    return arr.sorted().suffix(k)\n}\n",
            "func solution(_ lst: [Int]) -> Int {\n    return lst.enumerated().reduce(0) { acc, element in\n        if element.offset % 2 == 0 && element.element % 2 != 0 {\n            return acc + element.element\n        }\n        return acc\n    }\n}\n",
            "func addElements(_ arr: [Int], _ k: Int) -> Int {\n    return Array(arr.prefix(k)).reduce(0) { sum, n in\n        return sum + (String(n).count <= 2 ? n : 0)\n    }\n}\n",
            "func getOddCollatz(_ n: Int) -> [Int] {\n    var collatz = [1]\n    var current = n\n    while current != 1 {\n        if current % 2 != 0 {\n            collatz.append(current)\n            current = 3 * current + 1\n        } else {\n            current /= 2\n        }\n    }\n    return collatz.sorted()\n}\n",
            "func validDate(_ date: String) -> Bool {\n    if date.count != 10 || date.prefix(2).contains(\"-\") || !date.containsSubstring(\"-\", atOffset: 2) || !date.containsSubstring(\"-\", atOffset: 5) {\n        return false\n    }\n    let m = Int(date.prefix(2)) ?? 0\n    let d = Int(date.dropFirst(3).prefix(2)) ?? 0\n    if [1, 3, 5, 7, 8, 10, 12].contains(m) && d >= 1 && d <= 31 {\n        return true\n    }\n    if [4, 6, 9, 11].contains(m) && d >= 1 && d <= 30 {\n        return true\n    }\n    if m == 2 && d >= 1 && d <= 29 {\n        return true\n    }\n    return false\n}\n",
            "func splitWords(_ txt: String) -> [String] {\n    if txt.contains(\" \") {\n        return txt.split(separator: \" \").map { String($0) }\n    } else if txt.contains(\",\") {\n        return txt.split(separator: \",\").map { String($0) }\n    } else {\n        let count = txt.filter { $0 >= \"a\" && $0 <= \"z\" && $0.unicodeScalars.first?.value ?? 0 % 2 == 0 }.count\n        return [String(count)]\n    }\n}\n",
            "func isSorted(_ lst: [Int]) -> Bool {\n    if !lst.enumerated().allSatisfy({ $0.offset == 0 || $0.element >= lst[$0.offset - 1] }) {\n        return false\n    }\n    var freq: [Int: Int] = [:]\n    for num in lst {\n        freq[num, default: 0] += 1\n    }\n    return freq.values.max() ?? 0 <= 2\n}\n",
            "func intersection(_ interval1: [Int], _ interval2: [Int]) -> String {\n    func isPrime(_ n: Int) -> Bool {\n        if n < 2 { return false }\n        for i in 2...Int(Double(n).squareRoot()) {\n            if n % i == 0 { return false }\n        }\n        return true\n    }\n\n    let l = max(interval1[0], interval2[0])\n    let r = min(interval1[1], interval2[1])\n    let length = r - l\n    return length > 0 && isPrime(length) ? \"YES\" : \"NO\"\n}\n",
            "func prodSigns(_ arr: [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n    if arr.contains(0) {\n        return 0\n    }\n    let sign = (arr.filter { $0 < 0 }.count % 2 == 1 ? -1 : 1)\n    return sign * arr.map(abs).reduce(0, +)\n}\n",
            "func minPath(_ grid: [[Int]], _ k: Int) -> [Int] {\n    let n = grid.count\n    var min_val = n * n + 1\n    for i in 0..<n {\n        for j in 0..<n {\n            if grid[i][j] == 1 {\n                var temp: [Int] = []\n                if i != 0 {\n                    temp.append(grid[i - 1][j])\n                }\n                if j != 0 {\n                    temp.append(grid[i][j - 1])\n                }\n                if i != n - 1 {\n                    temp.append(grid[i + 1][j])\n                }\n                if j != n - 1 {\n                    temp.append(grid[i][j + 1])\n                }\n                min_val = min(min_val, temp.min() ?? Int.max)\n            }\n        }\n    }\n    var result: [Int] = []\n    for i in 0..<k {\n        result.append(i % 2 == 0 ? 1 : min_val)\n    }\n    return result\n}\n",
            "func tri(_ n: Int) -> [Int] {\n    if n == 0 { return [1] }\n    var seq = [1, 3]\n    for i in 2...n {\n        if i % 2 == 0 {\n            seq.append(i / 2 + 1)\n        } else {\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) / 2)\n        }\n    }\n    return seq\n}\n",
            "func digits(_ n: Int) -> Int {\n    let odds = String(n).compactMap { $0.wholeNumberValue }.filter { $0 % 2 == 1 }\n    return odds.count > 0 ? odds.reduce(1, *) : 0\n}\n",
            "func isNested(_ s: String) -> Bool {\n    var openIdx = [Int]()\n    var closeIdx = [Int]()\n    \n    for (i, ch) in s.enumerated() {\n        if ch == \"[\" {\n            openIdx.append(i)\n        } else if ch == \"]\" {\n            closeIdx.append(i)\n        }\n    }\n    \n    closeIdx.reverse()\n    var cnt = 0\n    var i = 0\n    let l = closeIdx.count\n    \n    for idx in openIdx {\n        if i < l && idx < closeIdx[i] {\n            cnt += 1\n            i += 1\n        }\n    }\n    \n    return cnt >= 2\n}\n",
            "func sumSquares(_ lst: [Double]) -> Int {\n    return lst.reduce(0) { $0 + Int(pow(ceil($1), 2)) }\n}\n",
            "func checkIfLastCharIsALetter(_ txt: String) -> Bool {\n    if txt.isEmpty {\n        return false\n    }\n    let last = txt.split(separator: \" \").last ?? \"\"\n    return last.count == 1 && /[a-zA-Z]/.firstMatch(in: String(last), options: [], range: NSRange(location: 0, length: last.utf16.count)) != nil\n}\n",
            "func canArrange(_ arr: [Int]) -> Int {\n    if arr.count <= 1 {\n        return -1\n    }\n    var idx = [Int]()\n    for i in 1..<arr.count {\n        if arr[i] < arr[i - 1] {\n            idx.append(i)\n        }\n    }\n    return idx.isEmpty ? -1 : idx.max() ?? -1\n}\n",
            "func largestSmallestIntegers(_ lst: [Int]) -> [Int?] {\n    let neg = lst.filter { $0 < 0 }\n    let pos = lst.filter { $0 > 0 }\n    let maxNeg = neg.count > 0 ? neg.max() : nil\n    let minPos = pos.count > 0 ? pos.min() : nil\n    return [maxNeg, minPos]\n}\n",
            "func compareOne(_ a: Any, _ b: Any) -> Double? {\n    func anyToReal(_ o: Any) -> Double {\n        if let str = o as? String {\n            return (str.replacingOccurrences(of: \",\", with: \".\") as NSString).doubleValue\n        } else if let num = o as? Double {\n            return num\n        }\n        fatalError(\"Type Error\")\n    }\n\n    let a1 = anyToReal(a)\n    let b1 = anyToReal(b)\n\n    if a1 == b1 {\n        return nil\n    } else if a1 > b1 {\n        return a1\n    } else {\n        return b1\n    }\n}\n",
            "func isEqualToSumEven(_ n: Int) -> Bool {\n    return n % 2 == 0 && n >= 8\n}\n",
            "func specialFactorial(_ n: Int) -> Int {\n    var fact = 1\n    var result = 1\n    for i in 1...n {\n        fact *= i\n        result *= fact\n    }\n    return result\n}\n",
            "func fixSpaces(_ txt: String) -> String {\n    return txt.replacingOccurrences(of: \"\\\\s{3,}\", with: \"-\", options: .regularExpression)\n               .replacingOccurrences(of: \" \", with: \"_\")\n}\n",
            "func fileNameCheck(_ fileName: String) -> String {\n    let suf = [\"txt\", \"exe\", \"dll\"]\n    let lst = fileName.split(separator: \".\")\n    if lst.count != 2 || !suf.contains(lst[1]) || lst[0].isEmpty || !(lst[0].first?.isLetter ?? false) || (lst[0].filter { $0.isNumber }.count > 3) {\n        return \"No\"\n    }\n    return \"Yes\"\n}\n",
            "func sumSquares(_ lst: [Int]) -> Int {\n    var result = 0\n    for i in 0..<lst.count {\n        if i % 3 == 0 {\n            result += lst[i] * lst[i]\n        } else if i % 4 == 0 {\n            result += lst[i] * lst[i] * lst[i]\n        } else {\n            result += lst[i]\n        }\n    }\n    return result\n}\n",
            "func isPrime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc wordsInSentence(_ sentence: String) -> String {\n    let words = sentence.split(separator: \" \")\n    let filteredWords = words.filter { isPrime($0.count) }\n    return filteredWords.joined(separator: \" \")\n}\n",
            "func simplify(_ x: String, _ n: String) -> Bool {\n    let xs = x.split(separator: \"/\")\n    let ns = n.split(separator: \"/\")\n    guard let num = Int(xs[0]), let den = Int(ns[0]) else { return false }\n    let product = num * (xs.count > 1 ? Int(xs[1]) ?? 1 : 1)\n    let denominatorProduct = den * (ns.count > 1 ? Int(ns[1]) ?? 1 : 1)\n    return product % denominatorProduct == 0\n}\n",
            "func digitsSum(_ n: Int) -> Int {\n    let nStr = String(n)\n    if n >= 0 {\n        return nStr.compactMap { $0.wholeNumberValue }.reduce(0, +)\n    } else {\n        return (nStr.prefix(2).compactMap { $0.wholeNumberValue }.first! * 2) + digitsSum(abs(n))\n    }\n}\n\nfunc orderByPoints(_ nums: [Int]) -> [Int] {\n    return nums.sorted(by: { digitsSum($0) < digitsSum($1) })\n}\n",
            "func specialFilter(_ nums: [Int]) -> Int {\n    let odds = \"13579\"\n    return nums.filter { n in\n        n > 10 && n % 2 == 1 && odds.contains(String(n).first!)\n    }.count\n}\n",
            "func getMaxTriples(_ n: Int) -> Int {\n    var c = [0, 0, 0]\n    for i in 1...n {\n        let a = i * i - i + 1\n        c[a % 3] += 1\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\n}\n",
            "func bf(_ planet1: String, _ planet2: String) -> [String] {\n    let names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if !names.contains(planet1) || !names.contains(planet2) {\n        return []\n    }\n    guard let l = names.firstIndex(of: planet1), let r = names.firstIndex(of: planet2) else {\n        return []\n    }\n    let startIndex = min(l, r)\n    let endIndex = max(l, r)\n    if startIndex == endIndex {\n        return []\n    }\n    return Array(names[(startIndex + 1)...endIndex])\n}\n",
            "func sortedListSum(_ lst: [String]) -> [String] {\n    let result = lst.filter { $0.count % 2 == 0 }\n    return result.sorted { a, b in\n        if a.count == b.count {\n            return a < b\n        } else {\n            return a.count < b.count\n        }\n    }\n}\n",
            "func xOrY(_ n: Int, _ x: Int, _ y: Int) -> Int {\n    if n < 2 {\n        return y\n    }\n    for i in 2...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n            return y\n        }\n    }\n    return x\n}\n",
            "func doubleTheDifference(_ lst: [Double]) -> Int {\n    return lst.filter { $0 >= 0 && $0.truncatingRemainder(dividingBy: 2) == 1 }\n               .map { Int($0 * $0) }\n               .reduce(0, +)\n}\n",
            "func compare(_ game: [Int], _ guess: [Int]) -> [Int] {\n    return game.map { (x, i) in abs(x - guess[i]) }\n}\n",
            "func strongestExtension(_ className: String, _ extensions: [String]) -> String {\n    var max_s = -Int.max\n    var max_ext = \"\"\n    for ext in extensions {\n        let upper = ext.filter { $0 >= \"A\" && $0 <= \"Z\" }.count\n        let lower = ext.filter { $0 >= \"a\" && $0 <= \"z\" }.count\n        let s = upper - lower\n        if s > max_s {\n            max_s = s\n            max_ext = ext\n        }\n    }\n    return \"\\(className).\\(max_ext)\"\n}\n",
            "func cycpatternCheck(_ a: String, _ b: String) -> Bool {\n    if a.count < b.count {\n        return false\n    }\n    for i in 0..<b.count {\n        let index = b.index(b.startIndex, offsetBy: i)\n        let rotatedB = String(b[index...]) + String(b[..<index])\n        if a.contains(rotatedB) {\n            return true\n        }\n    }\n    return false\n}\n",
            "func evenOddCount(_ num: Int) -> [Int] {\n    let ds = String(abs(num))\n    var even = 0\n    for d in ds {\n        if (d.wholeNumberValue ?? 0) % 2 == 0 {\n            even += 1\n        }\n    }\n    return [even, ds.count - even]\n}\n",
            "func intToMiniRoman(_ num: Int) -> String {\n    let values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    let numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    var res = \"\"\n    var numCopy = num\n    for i in 0..<values.count {\n        while numCopy >= values[i] {\n            res.append(numerals[i])\n            numCopy -= values[i]\n        }\n    }\n    return res\n}\n",
            "func rightAngleTriangle(_ a: Int, _ b: Int, _ c: Int) -> Bool {\n    let s = [a, b, c].sorted()\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n}\n",
            "func findMax(_ words: [String]) -> String {\n    var maxCnt = 0\n    var maxW = \"\"\n    for w in words {\n        let cnt = Set(w).count\n        if cnt > maxCnt {\n            maxCnt = cnt\n            maxW = w\n        } else if cnt == maxCnt {\n            maxW = min(maxW, w)\n        }\n    }\n    return maxW\n}\n",
            "func eat(_ num: Int, _ need: Int, _ remaining: Int) -> [Int] {\n    if need <= remaining {\n        return [num + need, remaining - need]\n    } else {\n        return [num + remaining, 0]\n    }\n}\n",
            "func doAlgebra(_ operators: [String], _ operands: [Int]) -> Int {\n    var ops = Array(operators)\n    var nums =\tArray(operands)\n    var i = ops.count - 1\n    while i >= 0 {\n        if ops[i] == \"**\" {\n            nums[i] = Int(pow(Double(nums[i]), Double(nums[i + 1])))\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n        }\n        i -= 1\n    }\n    i = 0\n    while i < ops.count {\n        if ops[i] == \"*\" {\n            nums[i] = nums[i] * nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            i -= 1\n        } else if ops[i] == \"//\" {\n            nums[i] = nums[i] / nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            i -= 1\n        }\n        i += 1\n    }\n    i = 0\n    while i < ops.count {\n        if ops[i] == \"+\" {\n            nums[i] = nums[i] + nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            i -= 1\n        } else if ops[i] == \"-\" {\n            nums[i] = nums[i] - nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            i -= 1\n        }\n        i += 1\n    }\n    return nums[0]\n}\n",
            "func solve(_ s: String) -> String {\n    if !s.contains(where: { $0.isLetter }) {\n        return String(s.reversed())\n    }\n    var result = \"\"\n    for ch in s {\n        if !ch.isLetter {\n            result.append(ch)\n        } else if ch.isUppercase {\n            result.append(ch.lowercased())\n        } else if ch.isLowercase {\n            result.append(ch.uppercased())\n        }\n    }\n    return result\n}\n",
            "func stringToMd5(_ txt: String) -> String? {\n    if txt.isEmpty {\n        return nil\n    }\n    let md5Data = Insecure.MD5.hash(data: txt.data(using: .utf8)!)\n    let md5String = md5Data.map { String(format: \"%02x\", $0) }.joined()\n    return md5String\n}\n",
            "func generateIntegers(_ a: Int, _ b: Int) -> [Int] {\n    let lower = max(2, min(a, b))\n    let upper = min(8, max(a, b))\n    var result: [Int] = []\n    for i in lower...upper {\n        if i % 2 == 0 {\n            result.append(i)\n        }\n    }\n    return result\n}\n"
        ],
        "rust": [
            "pub fn has_close_elements(numbers: &Vec<f64>, threshold: f64) -> bool {\n    for i in 0..numbers.len() {\n        for j in i + 1..numbers.len() {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n                return true;\n            }\n        }\n    }\n    false\n}\n",
            "pub fn separate_paren_groups(paren_string: &String) -> Vec<String> {\n    let mut groups = Vec::new();\n    let mut stk = Vec::new();\n    let mut current_group = String::new();\n\n    for ch in paren_string.chars().filter(|&c| c != ' ') {\n        if ch == '(' {\n            stk.push(ch);\n            current_group.push(ch);\n        } else if ch == ')' {\n            if let Some('(') = stk.pop() {\n                current_group.push(ch);\n                if stk.is_empty() {\n                    groups.push(current_group.clone());\n                    current_group.clear();\n                }\n            }\n        }\n    }\n\n    groups\n}\n",
            "pub fn truncate_number(num: f64) -> f64 {\n    num - num.floor()\n}\n",
            "pub fn below_zero(operations: &Vec<i32>) -> bool {\n    let mut balance = 0;\n    for op in operations {\n        balance += op;\n        if balance < 0 {\n            return true;\n        }\n    }\n    false\n}\n",
            "pub fn mean_absolute_deviation(numbers: &Vec<f64>) -> f64 {\n    let mean = numbers.iter().sum::<f64>() / numbers.len() as f64;\n    let deviation = numbers.iter().map(|&num| (num - mean).abs()).sum::<f64>();\n    deviation / numbers.len() as f64\n}\n",
            "pub fn intersperse(numbers: &Vec<i32>, delimiter: i32) -> Vec<i32> {\n    let mut result = Vec::new();\n    for (i, &num) in numbers.iter().enumerate() {\n        if i != 0 {\n            result.push(delimiter);\n        }\n        result.push(num);\n    }\n    result\n}\n",
            "pub fn parse_nested_parens(paren_string: &String) -> Vec<i32> {\n    let paren_groups = paren_string.split(' ');\n    let mut result = Vec::new();\n\n    for group in paren_groups {\n        let mut max_depth = 0;\n        let mut depth = 0;\n\n        for ch in group.chars() {\n            if ch == '(' {\n                depth += 1;\n                max_depth = max_depth.max(depth);\n            } else if ch == ')' {\n                depth -= 1;\n            }\n        }\n\n        result.push(max_depth);\n    }\n\n    result\n}\n",
            "pub fn filter_by_substring(strs: &Vec<String>, substring: &String) -> Vec<String> {\n    strs.iter().filter(|&s| s.contains(substring)).cloned().collect()\n}\n",
            "pub fn sum_product(numbers: &Vec<i32>) -> Vec<i32> {\n    let n_sum = numbers.iter().sum();\n    let n_product = numbers.iter().product();\n    vec![n_sum, n_product]\n}\n",
            "pub fn rolling_max(numbers: &Vec<i32>) -> Vec<i32> {\n    let mut max_so_far = i32::MIN;\n    let mut result = Vec::new();\n    for &num in numbers {\n        if num > max_so_far {\n            max_so_far = num;\n        }\n        result.push(max_so_far);\n    }\n    result\n}\n",
            "pub fn make_palindrome(s: &String) -> String {\n    if is_palindrome(s) {\n        return s.clone();\n    }\n    for i in 0..s.len() {\n        let substring = &s[i..];\n        if is_palindrome(substring) {\n            let prefix = &s[0..i];\n            let reversed_prefix: String = prefix.chars().rev().collect();\n            return format!(\"{}{}\", s, reversed_prefix);\n        }\n    }\n    \"\".to_string()\n}\n\nfn is_palindrome(s: &String) -> bool {\n    s == &s.chars().rev().collect::<String>()\n}\n",
            "pub fn string_xor(a: &String, b: &String) -> String {\n    a.chars()\n        .zip(b.chars())\n        .map(|(x, y)| if x == y { '0' } else { '1' })\n        .collect()\n}\n",
            "pub fn longest(strs: &Vec<String>) -> Option<String> {\n    if strs.is_empty() {\n        return None;\n    }\n    let mut longest_s = &strs[0];\n    for s in strs {\n        if s.len() > longest_s.len() {\n            longest_s = s;\n        }\n    }\n    Some(longest_s.clone())\n}\n",
            "pub fn greatest_common_divisor(a: i32, b: i32) -> i32 {\n    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b, a % b)\n    }\n}\n",
            "pub fn all_prefixes(s: &String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for i in 0..s.len() {\n        prefixes.push(s[0..=i].to_string());\n    }\n    return prefixes;\n}\n",
            "pub fn string_sequence(n: i32) -> String {\n    (0..=n).map(|i| i.to_string()).collect::<Vec<String>>().join(\" \")\n}\n",
            "pub fn count_distinct_characters(s: &String) -> i32 {\n    s.to_lowercase().chars().collect::<std::collections::HashSet<_>>().len() as i32\n}\n",
            "pub fn parse_music(music_string: &String) -> Vec<i32> {\n    let durations = vec![(\"o\", 4), (\"o|\", 2), (\".|\", 1)].into_iter().collect::<std::collections::HashMap<_, _>>();\n    music_string.split_whitespace().filter_map(|note| durations.get(note).cloned()).collect()\n}\n",
            "fn how_many_times(s: &str, substring: &str) -> i32 {\n    let mut times = 0;\n    for i in 0..=s.len() - substring.len() {\n        if s[i..i + substring.len()] == substring {\n            times += 1;\n        }\n    }\n    times\n}\n",
            "pub fn sort_numbers(numbers: &String) -> String {\n    let num_dict = [\n        (\"zero\", 0),\n        (\"one\", 1),\n        (\"two\", 2),\n        (\"three\", 3),\n        (\"four\", 4),\n        (\"five\", 5),\n        (\"six\", 6),\n        (\"seven\", 7),\n        (\"eight\", 8),\n        (\"nine\", 9),\n    ].iter().cloned().collect::<std::collections::HashMap<_, _>>();\n\n    let mut num_list: Vec<&str> = numbers.split_whitespace()\n        .filter(|&&x| num_dict.contains_key(x))\n        .collect();\n\n    num_list.sort_by_key(|&x| num_dict[x]);\n\n    num_list.join(\" \")\n}\n",
            "pub fn find_closest_elements(numbers: &Vec<f64>) -> Vec<f64> {\n    let mut sorted_numbers = numbers.clone();\n    sorted_numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n    let mut min_diff = f64::INFINITY;\n    let mut closest_pair = vec![];\n    for i in 1..sorted_numbers.len() {\n        let diff = sorted_numbers[i] - sorted_numbers[i - 1];\n        if diff < min_diff {\n            min_diff = diff;\n            closest_pair = vec![sorted_numbers[i - 1], sorted_numbers[i]];\n        }\n    }\n    closest_pair\n}\n",
            "pub fn rescale_to_unit(numbers: &Vec<f64>) -> Vec<f64> {\n    let min_num = *numbers.iter().fold(&f64::INFINITY, |a, b| a.min(b));\n    let max_num = *numbers.iter().fold(&f64::NEG_INFINITY, |a, b| a.max(b));\n    \n    if (max_num - min_num).abs() < f64::EPSILON {\n        vec![0.0; numbers.len()]\n    } else {\n        numbers.iter().map(|&num| (num - min_num) / (max_num - min_num)).collect()\n    }\n}\n",
            "use std::any::Any;\n\npub fn filter_integers(values: &Vec<Box<dyn Any>>) -> Vec<i32> {\n    values\n        .iter()\n        .filter_map(|x| x.downcast_ref::<i32>().cloned())\n        .collect()\n}\n",
            "pub fn str_length(s: &String) -> i32 {\n    s.len() as i32\n}\n",
            "pub fn largest_divisor(n: i32) -> i32 {\n    for i in 2..n {\n        if n % i == 0 {\n            return n / i;\n        }\n    }\n    return 1;\n}\n",
            "pub fn factorize(mut n: i32) -> Vec<i32> {\n    let mut factors = Vec::new();\n    let mut divisor = 2;\n    while divisor <= n {\n        if n % divisor == 0 {\n            factors.push(divisor);\n            n /= divisor;\n        } else {\n            divisor += 1;\n        }\n    }\n    factors\n}\n",
            "pub fn remove_duplicates(numbers: &Vec<i32>) -> Vec<i32> {\n    let mut counts = std::collections::HashMap::new();\n    for &num in numbers.iter() {\n        *counts.entry(num).or_insert(0) += 1;\n    }\n    let mut res = Vec::new();\n    for &num in numbers.iter() {\n        if let Some(&count) = counts.get(&num) {\n            if count == 1 {\n                res.push(num);\n            }\n        }\n    }\n    res\n}\n",
            "pub fn flip_case(s: &String) -> String {\n    let mut flipped = String::new();\n    for ch in s.chars() {\n        if !ch.is_alphabetic() {\n            flipped.push(ch);\n        } else if ch.is_lowercase() {\n            flipped.push(ch.to_ascii_uppercase());\n        } else {\n            flipped.push(ch.to_ascii_lowercase());\n        }\n    }\n    flipped\n}\n",
            "pub fn concatenate(strs: &Vec<String>) -> String {\n    strs.concat()\n}\n",
            "pub fn filter_by_prefix(strs: &Vec<String>, prefix_str: &String) -> Vec<String> {\n    strs.iter()\n        .filter(|s| s.starts_with(prefix_str))\n        .cloned()\n        .collect()\n}\n",
            "pub fn get_positive(l: &Vec<i32>) -> Vec<i32> {\n    l.iter().filter(|&&num| num > 0).cloned().collect()\n}\n",
            "pub fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..=((n as f64).sqrt() as i32) {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\n",
            "pub fn poly(xs: &Vec<i32>, x: f64) -> f64 {\n    let mut res = 0.0;\n    for (i, &coeff) in xs.iter().enumerate() {\n        res += coeff as f64 * x.powi(i as i32);\n    }\n    res\n}\n\npub fn find_zero(xs: &Vec<i32>) -> f64 {\n    let mut x1 = 1.0;\n    let mut x2 = -1.0;\n    while poly(xs, x1) * poly(xs, x2) > 0.0 {\n        x1 *= 2.0;\n        x2 *= 2.0;\n    }\n    while (x1 - x2).abs() > 1e-10 {\n        let mid = (x1 + x2) / 2.0;\n        if poly(xs, mid).abs() < 1e-10 {\n            return mid;\n        } else if poly(xs, mid) * poly(xs, x1) < 0.0 {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    (x1 + x2) / 2.0\n}\n",
            "pub fn sort_third(l: &Vec<i32>) -> Vec<i32> {\n    let mut sorted_third: Vec<i32> = l.iter().enumerate()\n        .filter(|&(index, _)| index % 3 == 0)\n        .map(|(_, &value)| value)\n        .collect();\n    \n    sorted_third.sort();\n\n    l.iter().enumerate()\n        .map(|(index, &value)| {\n            if index % 3 == 0 {\n                sorted_third[index / 3]\n            } else {\n                value\n            }\n        }).collect()\n}\n",
            "pub fn list_unique(l: &Vec<i32>) -> Vec<i32> {\n    let mut unique_set = l.iter().cloned().collect::<std::collections::HashSet<_>>();\n    let mut result = unique_set.into_iter().collect::<Vec<i32>>();\n    result.sort();\n    result\n}\n",
            "pub fn max_element(l: &Vec<i32>) -> i32 {\n    if l.is_empty() {\n        0\n    } else {\n        *l.iter().max().unwrap()\n    }\n}\n",
            "pub fn fizz_buzz(n: i32) -> i32 {\n    let mut cnt = 0;\n    for i in 0..n {\n        if i % 11 == 0 || i % 13 == 0 {\n            cnt += i.to_string().matches('7').count() as i32;\n        }\n    }\n    cnt\n}\n",
            "pub fn sort_even(l: &Vec<i32>) -> Vec<i32> {\n    let mut sorted_even: Vec<i32> = l.iter().enumerate()\n        .filter(|&(index, _)| index % 2 == 0)\n        .map(|(_, &value)| value)\n        .collect();\n    sorted_even.sort_unstable();\n\n    l.iter().enumerate()\n        .map(|(index, &value)| {\n            if index % 2 == 0 {\n                sorted_even.remove(0)\n            } else {\n                value\n            }\n        })\n        .collect()\n}\n",
            "pub fn encode_cyclic(s: &String) -> String {\n    let mut result = Vec::new();\n    for i in (0..s.len()).step_by(3) {\n        if i + 3 > s.len() {\n            result.push_str(&s[i..]);\n        } else {\n            result.push_str(&s[i + 1..i + 3]);\n            result.push(s.chars().nth(i).unwrap());\n        }\n    }\n    result.into_iter().collect()\n}\n\npub fn decode_cyclic(s: &String) -> String {\n    encode_cyclic(&encode_cyclic(s))\n}\n",
            "pub fn prime_fib(n: i32) -> i32 {\n    let is_prime = |num| {\n        if num < 2 {\n            return false;\n        }\n        for i in 2..=((num as f64).sqrt() as i32) {\n            if num % i == 0 {\n                return false;\n            }\n        }\n        true\n    };\n\n    let mut f = [0, 1];\n    let mut cnt = 0;\n    while cnt < n {\n        f = [f[1], f[0] + f[1]];\n        if is_prime(f[1]) {\n            cnt += 1;\n        }\n    }\n    f[1]\n}\n",
            "pub fn triples_sum_to_zero(l: &Vec<i32>) -> bool {\n    for i in 0..l.len() {\n        for j in (i + 1)..l.len() {\n            for k in (j + 1)..l.len() {\n                if l[i] + l[j] + l[k] == 0 {\n                    return true;\n                }\n            }\n        }\n    }\n    false\n}\n",
            "pub fn car_race_collision(n: i32) -> i32 {\n    n.pow(2)\n}\n",
            "pub fn incr_list(l: &Vec<i32>) -> Vec<i32> {\n    l.iter().map(|&i| i + 1).collect()\n}\n",
            "pub fn pairs_sum_to_zero(l: &Vec<i32>) -> bool {\n    let mut seen = std::collections::HashSet::new();\n    for &num in l.iter() {\n        if seen.contains(&-num) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    false\n}\n",
            "pub fn change_base(mut x: i32, bas: i32) -> String {\n    if x == 0 {\n        return \"0\".to_string();\n    }\n    let mut digits = Vec::new();\n    while x > 0 {\n        digits.push((x % bas).to_string());\n        x /= bas;\n    }\n    digits.reverse();\n    digits.join(\"\")\n}\n",
            "pub fn triangle_area(a: i32, h: i32) -> f64 {\n    (a * h) as f64 / 2.0\n}\n",
            "pub fn fib4(n: i32) -> i32 {\n    let mut fib = [0, 0, 2, 0];\n    for i in 4..=n {\n        fib[(i % 4) as usize] = fib.iter().sum();\n    }\n    fib[(n % 4) as usize]\n}\n",
            "pub fn median(l: &Vec<f64>) -> f64 {\n    let mut sl = l.clone();\n    sl.sort_by(|a, b| a.partial_cmp(b).unwrap());\n    if sl.len() % 2 != 0 {\n        sl[sl.len() / 2]\n    } else {\n        (sl[sl.len() / 2] + sl[sl.len() / 2 - 1]) / 2.0\n    }\n}\n",
            "pub fn is_palindrome(txt: &String) -> bool {\n    txt.chars().eq(txt.chars().rev())\n}\n",
            "pub fn modp(n: i32, p: i32) -> i32 {\n    let mut ret = 1;\n    for _ in 0..n {\n        ret = (ret * 2 % p) as i32;\n    }\n    ret\n}\n",
            "pub fn encode_shift(s: &String) -> String {\n    let mut result = String::new();\n    for ch in s.chars() {\n        if ch.is_ascii_lowercase() {\n            let shifted = ((ch as u8 - b'a' + 5) % 26) + b'a';\n            result.push(shifted as char);\n        } else {\n            result.push(ch);\n        }\n    }\n    result\n}\n\npub fn decode_shift(s: &String) -> String {\n    let mut result = String::new();\n    for ch in s.chars() {\n        if ch.is_ascii_lowercase() {\n            let shifted = ((ch as u8 - b'a' + 21) % 26) + b'a';\n            result.push(shifted as char);\n        } else {\n            result.push(ch);\n        }\n    }\n    result\n}\n",
            "pub fn remove_vowels(txt: &String) -> String {\n    let vowels = \"aeiouAEIOU\";\n    txt.chars()\n        .filter(|c| !vowels.contains(*c))\n        .collect()\n}\n",
            "pub fn below_threshold(l: &Vec<i32>, t: i32) -> bool {\n    l.iter().all(|&x| x < t)\n}\n",
            "pub fn add(x: i32, y: i32) -> i32 {\n    x + y\n}\n",
            "pub fn same_chars(s0: &String, s1: &String) -> bool {\n    let set0: std::collections::HashSet<char> = s0.chars().collect();\n    let set1: std::collections::HashSet<char> = s1.chars().collect();\n    set0 == set1\n}\n",
            "pub fn fib(n: i32) -> i32 {\n    if n <= 1 {\n        n\n    } else {\n        fib(n - 1) + fib(n - 2)\n    }\n}\n",
            "pub fn correct_bracketing(brackets: &String) -> bool {\n    let mut depth = 0;\n    for b in brackets.chars() {\n        if b == '<' {\n            depth += 1;\n        } else if b == '>' {\n            depth -= 1;\n        }\n        if depth < 0 {\n            return false;\n        }\n    }\n    depth == 0\n}\n",
            "pub fn monotonic(l: &[i32]) -> bool {\n    if l.len() <= 1 {\n        return true;\n    }\n\n    let mut non_decreasing = true;\n    let mut non_increasing = true;\n\n    for i in 0..l.len() - 1 {\n        if l[i + 1] < l[i] {\n            non_decreasing = false;\n        }\n        if l[i + 1] > l[i] {\n            non_increasing = false;\n        }\n    }\n\n    non_decreasing || non_increasing\n}\n",
            "pub fn common(l1: &Vec<i32>, l2: &Vec<i32>) -> Vec<i32> {\n    let mut result = vec![];\n    let set1: std::collections::HashSet<i32> = l1.iter().cloned().collect();\n    for &item in l2 {\n        if set1.contains(&item) && !result.contains(&item) {\n            result.push(item);\n        }\n    }\n    result.sort_unstable();\n    result\n}\n",
            "pub fn largest_prime_factor(mut n: i32) -> i32 {\n    let mut i = 2;\n    while i * i <= n {\n        if n % i != 0 {\n            i += 1;\n        } else {\n            n /= i;\n        }\n    }\n    n\n}\n",
            "pub fn sum_to_n(n: i32) -> i32 {\n    ((n + 1) * n) / 2\n}\n",
            "pub fn correct_bracketing(brackets: &str) -> bool {\n    let mut depth = 0;\n    for b in brackets.chars() {\n        if b == '(' {\n            depth += 1;\n        } else if b == ')' {\n            depth -= 1;\n        }\n        if depth < 0 {\n            return false;\n        }\n    }\n    depth == 0\n}\n",
            "pub fn derivative(xs: &Vec<i32>) -> Vec<i32> {\n    (0..xs.len())\n        .map(|i| xs[i] * i as i32)\n        .skip(1)\n        .collect()\n}\n",
            "pub fn fibfib(n: i32) -> i32 {\n    if n <= 1 { return 0; }\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 1;\n    let mut nn = n - 2;\n    while nn > 0 {\n        let new_c = a + b + c;\n        a = b;\n        b = c;\n        c = new_c;\n        nn -= 1;\n    }\n    c\n}\n",
            "pub fn vowels_count(s: &String) -> i32 {\n    let vowels = \"aeiou\";\n    let mut cnt = 0;\n    for (i, c) in s.chars().enumerate() {\n        if vowels.contains(c.to_ascii_lowercase()) || (i == s.len() - 1 && c.to_ascii_lowercase() == 'y') {\n            cnt += 1;\n        }\n    }\n    cnt\n}\n",
            "pub fn circular_shift(x: i32, shift: i32) -> String {\n    let x_str = x.to_string();\n    if shift > x_str.len() as i32 {\n        x_str.chars().rev().collect()\n    } else {\n        let shift = shift as usize;\n        x_str.chars().skip(x_str.len() - shift).chain(x_str.chars().take(x_str.len() - shift)).collect()\n    }\n}\n",
            "pub fn digit_sum(s: &String) -> i32 {\n    s.chars()\n        .filter(|c| c.is_ascii_uppercase())\n        .map(|c| c as i32)\n        .sum()\n}\n",
            "pub fn fruit_distribution(s: &String, n: i32) -> i32 {\n    let words: Vec<&str> = s.split_whitespace().collect();\n    let apples_index = words.iter().position(|&word| word == \"apples\").unwrap() - 1;\n    let oranges_index = words.iter().position(|&word| word == \"oranges\").unwrap() - 1;\n    let apples = words[apples_index].parse::<i32>().unwrap();\n    let oranges = words[oranges_index].parse::<i32>().unwrap();\n    n - apples - oranges\n}\n",
            "pub fn pluck(arr: &Vec<i32>) -> Vec<i32> {\n    let mut evens: Vec<i32> = arr.iter().filter(|&&n| n % 2 == 0).cloned().collect();\n    if evens.is_empty() {\n        return vec![];\n    }\n    let min_even = *evens.iter().min().unwrap();\n    let index = arr.iter().position(|&x| x == min_even).unwrap();\n    vec![min_even, index as i32]\n}\n",
            "pub fn search(lst: &Vec<i32>) -> i32 {\n    let mut freqs = std::collections::HashMap::new();\n    for &n in lst {\n        *freqs.entry(n).or_insert(0) += 1;\n    }\n    let good_vals: Vec<i32> = freqs.iter()\n        .filter(|(&&k, &v)| v as i32 >= k)\n        .map(|(&k, _)| k)\n        .collect();\n    if good_vals.is_empty() {\n        -1\n    } else {\n        *good_vals.iter().max().unwrap()\n    }\n}\n",
            "pub fn strange_sort_list(lst: &Vec<i32>) -> Vec<i32> {\n    let mut sl = lst.clone();\n    sl.sort();\n    let mut result = Vec::new();\n    let mut left = 0;\n    let mut right = sl.len() - 1;\n    while left <= right {\n        result.push(sl[left]);\n        left += 1;\n        if left <= right {\n            result.push(sl[right]);\n            right -= 1;\n        }\n    }\n    result\n}\n",
            "pub fn triangle_area(a: i32, b: i32, c: i32) -> f64 {\n    if a + b > c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n        (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n",
            "pub fn will_it_fly(q: &Vec<i32>, w: i32) -> bool {\n    if q.is_empty() {\n        return false;\n    }\n    let is_palin = q.iter().enumerate().all(|(index, &value)| value == q[q.len() - index - 1]);\n    let total = q.iter().sum::<i32>();\n    is_palin && total <= w\n}\n",
            "pub fn smallest_change(arr: &Vec<i32>) -> i32 {\n    let mut ans = 0;\n    for i in 0..arr.len() / 2 {\n        if arr[i] != arr[arr.len() - i - 1] {\n            ans += 1;\n        }\n    }\n    ans\n}\n",
            "pub fn total_match(lst1: &Vec<String>, lst2: &Vec<String>) -> Vec<String> {\n    let cnt1 = lst1.iter().map(|s| s.len()).sum::<usize>();\n    let cnt2 = lst2.iter().map(|s| s.len()).sum::<usize>();\n    if cnt1 <= cnt2 { lst1.clone() } else { lst2.clone() }\n}\n",
            "pub fn is_multiply_prime(mut a: i32) -> bool {\n    fn is_prime(n: i32) -> bool {\n        if n < 2 {\n            return false;\n        }\n        for i in 2..=((n as f64).sqrt() as i32) {\n            if n % i == 0 {\n                return false;\n            }\n        }\n        true\n    }\n\n    let mut cnt = 0;\n    for i in 2..=a {\n        if is_prime(i) {\n            while a % i == 0 {\n                cnt += 1;\n                a /= i;\n            }\n        }\n    }\n    cnt == 3\n}\n",
            "pub fn is_simple_power(x: i32, n: i32) -> bool {\n    if n < 2 {\n        return x == n;\n    }\n    let mut tmp = 1;\n    while tmp < x {\n        tmp *= n;\n    }\n    tmp == x\n}\n",
            "pub fn is_cube(a: i32) -> bool {\n    let a = a.abs() as f64;\n    let root = (a.cbrt()).round();\n    return root.powi(3) == a;\n}\n",
            "pub fn hex_key(num: &String) -> i32 {\n    num.chars()\n        .filter(|&x| \"2357BD\".contains(x))\n        .count() as i32\n}\n",
            "pub fn decimal_to_binary(dec: i32) -> String {\n    let binary = format!(\"{:b}\", dec);\n    format!(\"db{}db\", binary)\n}\n",
            "pub fn is_happy(s: &String) -> bool {\n    if s.len() < 3 {\n        return false;\n    }\n    for i in 0..s.len() - 2 {\n        if s.chars().nth(i) == s.chars().nth(i + 1)\n            || s.chars().nth(i) == s.chars().nth(i + 2)\n            || s.chars().nth(i + 1) == s.chars().nth(i + 2)\n        {\n            return false;\n        }\n    }\n    true\n}\n",
            "pub fn numerical_letter_grade(grades: &Vec<f64>) -> Vec<String> {\n    let mut result = Vec::new();\n    for &g in grades {\n        if g == 4.0 {\n            result.push(\"A+\".to_string());\n        } else if g > 3.7 {\n            result.push(\"A\".to_string());\n        } else if g > 3.3 {\n            result.push(\"A-\".to_string());\n        } else if g > 3.0 {\n            result.push(\"B+\".to_string());\n        } else if g > 2.7 {\n            result.push(\"B\".to_string());\n        } else if g > 2.3 {\n            result.push(\"B-\".to_string());\n        } else if g > 2.0 {\n            result.push(\"C+\".to_string());\n        } else if g > 1.7 {\n            result.push(\"C\".to_string());\n        } else if g > 1.3 {\n            result.push(\"C-\".to_string());\n        } else if g > 1.0 {\n            result.push(\"D+\".to_string());\n        } else if g > 0.7 {\n            result.push(\"D\".to_string());\n        } else if g > 0.0 {\n            result.push(\"D-\".to_string());\n        } else {\n            result.push(\"E\".to_string());\n        }\n    }\n    result\n}\n",
            "pub fn prime_length(s: &String) -> bool {\n    let length = s.len();\n    if length < 2 {\n        return false;\n    }\n    for i in 2..=((length as f64).sqrt() as usize) {\n        if length % i == 0 {\n            return false;\n        }\n    }\n    true\n}\n",
            "pub fn starts_one_ends(n: i32) -> i32 {\n    if n == 1 {\n        return 1;\n    }\n    2 * 9 * 10_i32.pow((n - 2) as u32)\n}\n",
            "pub fn solve(n: i32) -> String {\n    let digits_sum = n.to_string().chars().map(|c| c.to_digit(10).unwrap() as i32).sum::<i32>();\n    format!(\"{:b}\", digits_sum)\n}\n",
            "pub fn add(lst: &Vec<i32>) -> i32 {\n    lst.iter().enumerate().fold(0, |acc, (i, &x)| {\n        if i % 2 == 1 && x % 2 == 0 {\n            acc + x\n        } else {\n            acc\n        }\n    })\n}\n",
            "pub fn anti_shuffle(s: &String) -> String {\n    s.split_whitespace()\n        .map(|word| {\n            let mut chars: Vec<char> = word.chars().collect();\n            chars.sort_unstable();\n            chars.into_iter().collect::<String>()\n        })\n        .collect::<Vec<String>>()\n        .join(\" \")\n}\n",
            "pub fn get_row(lst: &Vec<Vec<i32>>, x: i32) -> Vec<Vec<i32>> {\n    let mut coords = Vec::new();\n    for (i, row) in lst.iter().enumerate() {\n        for (j, &val) in row.iter().enumerate() {\n            if val == x {\n                coords.push(vec![i as i32, j as i32]);\n            }\n        }\n    }\n    coords.sort_by(|a, b| a[0].cmp(&b[0]).then_with(|| b[1].cmp(&a[1])));\n    coords\n}\n",
            "pub fn sort_array(arr: &Vec<i32>) -> Vec<i32> {\n    if arr.is_empty() {\n        return vec![];\n    }\n    if (arr[0] + arr[arr.len() - 1]) % 2 == 0 {\n        let mut sorted_arr = arr.clone();\n        sorted_arr.sort_by(|a, b| b.cmp(a));\n        sorted_arr\n    } else {\n        let mut sorted_arr = arr.clone();\n        sorted_arr.sort();\n        sorted_arr\n    }\n}\n",
            "pub fn encrypt(s: &String) -> String {\n    let mut result = String::new();\n    for ch in s.chars() {\n        let shifted = ch as u8 + 4;\n        let shifted_char = if shifted > 'z' as u8 {\n            (shifted - 26) as char\n        } else {\n            shifted as char\n        };\n        result.push(shifted_char);\n    }\n    result\n}\n",
            "pub fn next_smallest(lst: &Vec<i32>) -> Option<i32> {\n    let mut sl: Vec<i32> = lst.iter().cloned().collect();\n    sl.sort_unstable();\n    sl.dedup();\n    if sl.len() < 2 {\n        None\n    } else {\n        Some(sl[1])\n    }\n}\n",
            "pub fn is_bored(s: &String) -> i32 {\n    s.split(|c: char| c.is_ascii_punctuation() || c.is_whitespace())\n     .filter(|sentence| sentence.starts_with(\"I \") && sentence.len() >= 2)\n     .count() as i32\n}\n",
            "use std::any::Any;\n\npub fn any_int(x: &Box<dyn Any>, y: &Box<dyn Any>, z: &Box<dyn Any>) -> bool {\n    if let (Some(&xi), Some(&yi), Some(&zi)) = \n        (x.downcast_ref::<i32>(), y.downcast_ref::<i32>(), z.downcast_ref::<i32>()) {\n        \n        return (xi + yi == zi) || (xi + zi == yi) || (yi + zi == xi);\n    }\n    false\n}\n",
            "pub fn encode(message: &String) -> String {\n    let vowels = \"aeiouAEIOU\";\n    let mut result = Vec::new();\n    for ch in message.chars() {\n        if ch.is_alphabetic() {\n            let ch1 = if ch.is_lowercase() { ch.to_uppercase().next().unwrap() } else { ch.to_lowercase().next().unwrap() };\n            if vowels.contains(ch1) {\n                let next_char = ((ch1 as u8 + 2) as char);\n                result.push(next_char);\n            } else {\n                result.push(ch1);\n            }\n        } else {\n            result.push(ch);\n        }\n    }\n    result.into_iter().collect()\n}\n",
            "pub fn skjkasdkd(lst: &Vec<i32>) -> i32 {\n    let is_prime = |n: i32| {\n        if n < 2 { return false; }\n        for i in 2..=((n as f64).sqrt() as i32) {\n            if n % i == 0 { return false; }\n        }\n        true\n    };\n\n    let primes: Vec<i32> = lst.iter().cloned().filter(is_prime).collect();\n    if primes.is_empty() { return 0; }\n\n    let largest = format!(\"{}\", primes.iter().max().unwrap());\n    largest.chars().map(|c| c.to_digit(10).unwrap() as i32).sum()\n}\n",
            "use std::collections::HashMap;\n\npub fn check_dict_case(d: &HashMap<String, String>) -> bool {\n    if d.is_empty() {\n        return false;\n    }\n    let all_lowercase = d.keys().all(|k| k.to_ascii_lowercase() == *k);\n    let all_uppercase = d.keys().all(|k| k.to_ascii_uppercase() == *k);\n    all_lowercase || all_uppercase\n}\n",
            "pub fn count_up_to(n: i32) -> Vec<i32> {\n    let mut primes = Vec::new();\n    for num in 2..n {\n        if primes.iter().all(|&p| num % p != 0) {\n            primes.push(num);\n        }\n    }\n    primes\n}\n",
            "pub fn multiply(a: i32, b: i32) -> i32 {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n",
            "pub fn count_upper(s: &str) -> i32 {\n    let vowels = \"AEIOU\";\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && vowels.contains(c) {\n            count += 1;\n        }\n    }\n    count\n}\n",
            "pub fn closest_integer(value: &String) -> i32 {\n    let num = value.parse::<f64>().unwrap_or(0.0);\n    if num >= 0.0 {\n        (num + 0.5).floor() as i32\n    } else {\n        (num - 0.5).ceil() as i32\n    }\n}\n",
            "pub fn make_a_pile(n: i32) -> Vec<i32> {\n    (0..n).map(|i| n + 2 * i).collect()\n}\n",
            "pub fn words_string(s: &String) -> Vec<String> {\n    s.split(|c: char| c == ',' || c.is_whitespace())\n        .filter(|w| !w.trim().is_empty())\n        .map(String::from)\n        .collect()\n}\n",
            "pub fn choose_num(x: i32, y: i32) -> i32 {\n    if x > y {\n        -1\n    } else if y % 2 == 0 {\n        y\n    } else {\n        if x != y { y - 1 } else { -1 }\n    }\n}\n",
            "pub fn rounded_avg(n: i32, m: i32) -> Option<String> {\n    if n > m {\n        None\n    } else {\n        let r_avg = ((m + n) / 2.0).round() as i32;\n        Some(format!(\"{:b}\", r_avg))\n    }\n}\n",
            "pub fn unique_digits(x: &Vec<i32>) -> Vec<i32> {\n    x.iter()\n        .filter(|&&num| num.to_string().chars().all(|digit| digit.to_digit(10).unwrap() % 2 != 0))\n        .cloned()\n        .collect::<Vec<i32>>()\n        .sort_unstable();\n        *x\n}\n",
            "fn digit_names(n: i32) -> String {\n    match n {\n        1 => \"One\".to_string(),\n        2 => \"Two\".to_string(),\n        3 => \"Three\".to_string(),\n        4 => \"Four\".to_string(),\n        5 => \"Five\".to_string(),\n        6 => \"Six\".to_string(),\n        7 => \"Seven\".to_string(),\n        8 => \"Eight\".to_string(),\n        9 => \"Nine\".to_string(),\n        _ => unreachable!(),\n    }\n}\n\npub fn by_length(arr: &Vec<i32>) -> Vec<String> {\n    let mut sorted_arr: Vec<i32> = arr.iter().cloned().filter(|&x| x >= 1 && x <= 9).collect();\n    sorted_arr.sort_unstable_by(|a, b| b.cmp(a));\n    sorted_arr.into_iter().map(digit_names).collect()\n}\n",
            "pub fn f(n: i32) -> Vec<i32> {\n    let mut result = Vec::with_capacity(n as usize);\n    for i in 1..=n {\n        if i % 2 != 0 {\n            result.push((1..=i).sum());\n        } else {\n            result.push((1..=i).product());\n        }\n    }\n    result\n}\n",
            "pub fn even_odd_palindrome(n: i32) -> Vec<i32> {\n    let mut cnt = vec![0, 0];\n    for i in 1..=n {\n        let txt = i.to_string();\n        let rev_txt: String = txt.chars().rev().collect();\n        if txt == rev_txt {\n            cnt[(i % 2) as usize] += 1;\n        }\n    }\n    cnt\n}\n",
            "fn digits_sum(mut n: i32) -> i32 {\n    let mut sum = 0;\n    if n >= 0 {\n        while n > 0 {\n            sum += n % 10;\n            n /= 10;\n        }\n    } else {\n        let first_two_digit_str = format!(\"{:02}\", n).chars().take(2).collect::<String>();\n        let first_two_digit_num = first_two_digit_str.parse::<i32>().unwrap();\n        sum += first_two_digit_num * 2 + digits_sum(n.abs());\n    }\n    sum\n}\n\npub fn count_nums(arr: &Vec<i32>) -> i32 {\n    arr.iter().filter(|&&n| digits_sum(n) > 0).count() as i32\n}\n",
            "pub fn move_one_ball(arr: &Vec<i32>) -> bool {\n    if arr.is_empty() {\n        return true;\n    }\n    let mut sorted_arr = arr.clone();\n    sorted_arr.sort_unstable();\n    for i in 0..arr.len() {\n        if arr[i..] == sorted_arr[sorted_arr.len() - arr.len() + i..]\n            && arr[..i] == sorted_arr[arr.len() - i..]\n        {\n            return true;\n        }\n    }\n    false\n}\n",
            "pub fn can_exchange(lst1: &Vec<i32>, lst2: &Vec<i32>) -> String {\n    let odd_cnt = lst1.iter().filter(|&&num| num % 2 != 0).count();\n    let even_cnt = lst2.iter().filter(|&&num| num % 2 == 0).count();\n    if even_cnt >= odd_cnt {\n        \"YES\".to_string()\n    } else {\n        \"NO\".to_string()\n    }\n}\n",
            "use std::collections::HashMap;\n\npub fn histogram(test: &String) -> HashMap<String, i32> {\n    let mut freq = HashMap::new();\n    let words = test.split_whitespace().filter(|w| !w.is_empty());\n    for w in words {\n        *freq.entry(w.to_string()).or_insert(0) += 1;\n    }\n    let mut result = HashMap::new();\n    if !freq.is_empty() {\n        let max_freq = freq.values().cloned().max().unwrap();\n        for (k, v) in freq {\n            if v == max_freq {\n                result.insert(k, v);\n            }\n        }\n    }\n    result\n}\n",
            "pub fn reverse_delete(s: &String, c: &String) -> Vec<String> {\n    let is_palindrome = |str: &String| {\n        str.chars().eq(str.chars().rev())\n    };\n\n    let s1: String = s.chars()\n                      .filter(|ch| !c.contains(*ch))\n                      .collect();\n    vec![s1, if is_palindrome(&s1) { \"yes\".to_string() } else { \"no\".to_string() }]\n}\n",
            "pub fn odd_count(lst: &Vec<String>) -> Vec<String> {\n    let mut result = Vec::new();\n    for num in lst {\n        let n: usize = num.chars().filter(|&d| d.to_digit(10).unwrap_or(0) % 2 == 1).count();\n        let rs = \"the number of odd elements in the string i of the input.\".replace(\"i\", &n.to_string());\n        result.push(rs);\n    }\n    result\n}\n",
            "pub fn min_sub_array_sum(nums: &Vec<i32>) -> i32 {\n    let mut min_sum = 0;\n    let mut cur_sum = 0;\n    for &n in nums.iter() {\n        cur_sum = if cur_sum + n < 0 { cur_sum + n } else { 0 };\n        min_sum = if cur_sum < min_sum { cur_sum } else { min_sum };\n    }\n    if min_sum == 0 {\n        min_sum = *nums.iter().min().unwrap_or(&0);\n    }\n    min_sum\n}\n",
            "pub fn max_fill(grid: &Vec<Vec<i32>>, capacity: i32) -> i32 {\n    grid.iter().map(|arr| {\n        let sum: i32 = arr.iter().sum();\n        (sum + capacity - 1) / capacity // Ceiling division in Rust\n    }).sum()\n}\n",
            "pub fn sort_array(arr: &Vec<i32>) -> Vec<i32> {\n    let mut sorted_arr = arr.clone();\n    sorted_arr.sort_by_key(|&x| (x.count_ones(), x));\n    sorted_arr\n}\n",
            "pub fn select_words(s: &String, n: i32) -> Vec<String> {\n    let consonants = \"bcdfghjklmnpqrstvwxyz\";\n    s.split_whitespace()\n        .filter(|&w| !w.is_empty())\n        .filter(|w| w.chars().filter(|c| consonants.contains(c.to_ascii_lowercase())).count() as i32 == n)\n        .map(|s| s.to_string())\n        .collect()\n}\n",
            "pub fn get_closest_vowel(word: &String) -> String {\n    let vowels = \"aeiouAEIOU\";\n    for i in (1..word.len() - 1).rev() {\n        if vowels.contains(word.chars().nth(i).unwrap()) \n            && !vowels.contains(word.chars().nth(i - 1).unwrap()) \n            && !vowels.contains(word.chars().nth(i + 1).unwrap()) \n        {\n            return word chars().nth(i).unwrap().to_string();\n        }\n    }\n    \"\".to_string()\n}\n",
            "pub fn match_parens(lst: &Vec<String>) -> String {\n    let check = |s: &str| {\n        let mut depth = 0;\n        for ch in s.chars() {\n            if ch == '(' {\n                depth += 1;\n            } else {\n                depth -= 1;\n            }\n            if depth < 0 {\n                return false;\n            }\n        }\n        depth == 0\n    };\n\n    let s1 = lst[0].clone() + &lst[1];\n    let s2 = lst[1].clone() + &lst[0];\n    if check(&s1) || check(&s2) {\n        \"Yes\".to_string()\n    } else {\n        \"No\".to_string()\n    }\n}\n",
            "pub fn maximum(arr: &Vec<i32>, k: i32) -> Vec<i32> {\n    if k == 0 {\n        return vec![];\n    }\n    let mut arr_sorted = arr.clone();\n    arr_sorted.sort_unstable();\n    arr_sorted.split_off(arr_sorted.len() - k as usize)\n}\n",
            "pub fn solution(lst: &Vec<i32>) -> i32 {\n    lst.iter().enumerate().fold(0, |acc, (i, &x)| {\n        if i % 2 == 0 && x % 2 != 0 {\n            acc + x\n        } else {\n            acc\n        }\n    })\n}\n",
            "pub fn add_elements(arr: &Vec<i32>, k: i32) -> i32 {\n    arr.iter()\n        .take(k as usize)\n        .filter(|&&n| n.abs() < 100)\n        .sum()\n}\n",
            "pub fn get_odd_collatz(mut n: i32) -> Vec<i32> {\n    let mut collatz = vec![1];\n    while n != 1 {\n        if n % 2 != 0 {\n            collatz.push(n);\n            n = 3 * n + 1;\n        } else {\n            n /= 2;\n        }\n    }\n    collatz.sort_unstable();\n    collatz\n}\n",
            "pub fn valid_date(date: &String) -> bool {\n    if date.len() != 10 || &date[2..3] != \"-\" || &date[5..6] != \"-\" {\n        return false;\n    }\n    let m: u32 = match date[0..2].parse() {\n        Ok(num) => num,\n        Err(_) => return false,\n    };\n    let d: u32 = match date[3..5].parse() {\n        Ok(num) => num,\n        Err(_) => return false,\n    };\n    if [1, 3, 5, 7, 8, 10, 12].contains(&m) && d >= 1 && d <= 31 {\n        return true;\n    }\n    if [4, 6, 9, 11].contains(&m) && d >= 1 && d <= 30 {\n        return true;\n    }\n    if m == 2 && d >= 1 && d <= 29 {\n        return true;\n    }\n    false\n}\n",
            "pub fn split_words(txt: &String) -> Vec<String> {\n    if txt.contains(\" \") {\n        txt.split_whitespace().map(|s| s.to_string()).collect()\n    } else if txt.contains(\",\") {\n        txt.split(\",\").map(|s| s.to_string()).collect()\n    } else {\n        let count = txt.chars().filter(|&c| c.is_ascii_lowercase() && c as u32 % 2 == 0).count();\n        vec![count.to_string()]\n    }\n}\n",
            "pub fn is_sorted(lst: &Vec<i32>) -> bool {\n    if !lst.windows(2).all(|w| w[0] <= w[1]) {\n        return false;\n    }\n    let mut freq = std::collections::HashMap::new();\n    for &num in lst {\n        *freq.entry(num).or_insert(0) += 1;\n    }\n    freq.values().cloned().max().unwrap_or(0) <= 2\n}\n",
            "fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..=((n as f64).sqrt() as i32) {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\n\npub fn intersection(interval1: &Vec<i32>, interval2: &Vec<i32>) -> String {\n    let l = interval1[0].max(interval2[0]);\n    let r = interval1[1].min(interval2[1]);\n    let length = r - l;\n    if length > 0 && is_prime(length) {\n        \"YES\".to_string()\n    } else {\n        \"NO\".to_string()\n    }\n}\n",
            "pub fn prod_signs(arr: &Vec<i32>) -> Option<i32> {\n    if arr.is_empty() {\n        return None;\n    }\n    if arr.contains(&0) {\n        return Some(0);\n    }\n    let sign = if arr.iter().filter(|&&n| n < 0).count() % 2 == 1 { -1 } else { 1 };\n    Some(sign * arr.iter().map(|&n| n.abs()).sum())\n}\n",
            "pub fn min_path(grid: &Vec<Vec<i32>>, k: i32) -> Vec<i32> {\n    let n = grid.len();\n    let mut min_val = n * n + 1;\n    for i in 0..n {\n        for j in 0..n {\n            if grid[i][j] == 1 {\n                let mut temp = Vec::new();\n                if i != 0 {\n                    temp.push(grid[i - 1][j]);\n                }\n                if j != 0 {\n                    temp.push(grid[i][j - 1]);\n                }\n                if i != n - 1 {\n                    temp.push(grid[i + 1][j]);\n                }\n                if j != n - 1 {\n                    temp.push(grid[i][j + 1]);\n                }\n                min_val = *temp.iter().min().unwrap_or(&min_val);\n            }\n        }\n    }\n    let mut result = Vec::new();\n    for i in 0..k {\n        result.push(if i % 2 == 0 { 1 } else { min_val });\n    }\n    result\n}\n",
            "pub fn tri(n: i32) -> Vec<i32> {\n    if n == 0 {\n        return vec![1];\n    }\n    let mut seq = vec![1, 3];\n    for i in 2..=n as usize {\n        if i % 2 == 0 {\n            seq.push(i as i32 / 2 + 1);\n        } else {\n            seq.push(seq[i - 1] + seq[i - 2] + (i as i32 + 3) / 2);\n        }\n    }\n    seq\n}\n",
            "pub fn digits(n: i32) -> i32 {\n    let odds: Vec<i32> = n.to_string()\n        .chars()\n        .filter_map(|c| c.to_digit(10))\n        .map(|d| d as i32)\n        .filter(|&d| d % 2 == 1)\n        .collect();\n    \n    if odds.is_empty() {\n        0\n    } else {\n        odds.iter().fold(1, |x, &y| x * y)\n    }\n}\n",
            "pub fn is_nested(s: &str) -> bool {\n    let mut open_idx = Vec::new();\n    let mut close_idx = Vec::new();\n    \n    for (i, ch) in s.chars().enumerate() {\n        if ch == '[' {\n            open_idx.push(i);\n        } else if ch == ']' {\n            close_idx.push(i);\n        }\n    }\n    \n    close_idx.reverse();\n    let mut cnt = 0;\n    let mut i = 0;\n    let l = close_idx.len();\n    \n    for idx in open_idx {\n        if i < l && idx < close_idx[i] {\n            cnt += 1;\n            i += 1;\n        }\n    }\n    \n    cnt >= 2\n}\n",
            "pub fn sum_squares(lst: &Vec<f64>) -> i32 {\n    lst.iter()\n       .map(|&n| ((n.ceil()) as i32).pow(2))\n       .sum()\n}\n",
            "pub fn check_if_last_char_is_a_letter(txt: &String) -> bool {\n    if txt.is_empty() {\n        return false;\n    }\n    let last = txt.split_whitespace().last().unwrap_or(\"\");\n    last.len() == 1 && last.chars().next().map_or(false, |c| c.is_alphabetic())\n}\n",
            "pub fn can_arrange(arr: &Vec<i32>) -> i32 {\n    if arr.len() <= 1 {\n        return -1;\n    }\n    let mut idx = Vec::new();\n    for (i, &value) in arr.iter().enumerate().skip(1) {\n        if value < arr[i - 1] {\n            idx.push(i as i32);\n        }\n    }\n    match idx.is_empty() {\n        true => -1,\n        false => *idx.iter().max().unwrap(),\n    }\n}\n",
            "pub fn largest_smallest_integers(lst: &Vec<i32>) -> Vec<Option<i32>> {\n    let mut neg = lst.iter().filter(|&&x| x < 0).cloned().collect::<Vec<i32>>();\n    let mut pos = lst.iter().filter(|&&x| x > 0).cloned().collect::<Vec<i32>>();\n    \n    let max_neg = if neg.is_empty() { None } else { Some(*neg.iter().max().unwrap()) };\n    let min_pos = if pos.is_empty() { None } else { Some(*pos.iter().min().unwrap()) };\n    \n    vec![max_neg, min_pos]\n}\n",
            "use std::any::Any;\n\npub fn compare_one(a: &Box<dyn Any>, b: &Box<dyn Any>) -> Option<f64> {\n    fn any_to_real(o: &dyn Any) -> Result<f64, &'static str> {\n        if let Some(s) = o.downcast_ref::<String>() {\n            s.replace(\",\", \".\").parse::<f64>().map_err(|_| \"Parse Error\")\n        } else if let Some(&n) = o.downcast_ref::<f64>() {\n            Ok(n)\n        } else {\n            Err(\"Type Error\")\n        }\n    }\n\n    let a1 = any_to_real(a.as_ref()).ok()?;\n    let b1 = any_to_real(b.as_ref()).ok()?;\n\n    if a1 == b1 {\n        None\n    } else if a1 > b1 {\n        Some(a1)\n    } else {\n        Some(b1)\n    }\n}\n",
            "pub fn is_equal_to_sum_even(n: i32) -> bool {\n    n % 2 == 0 && n >= 8\n}\n",
            "pub fn special_factorial(n: i32) -> i32 {\n    let mut fact = 1;\n    let mut result = 1;\n    for i in 1..=n {\n        fact *= i;\n        result *= fact;\n    }\n    result\n}\n",
            "pub fn fix_spaces(txt: &String) -> String {\n    let mut result = String::new();\n    let mut space_count = 0;\n\n    for char in txt.chars() {\n        if char == ' ' {\n            space_count += 1;\n        } else {\n            if space_count >= 3 {\n                result.push('-');\n            } else {\n                result.push_str(&\"_\"[..space_count]);\n            }\n            result.push(char);\n            space_count = 0;\n        }\n    }\n\n    if space_count >= 3 {\n        result.push('-');\n    } else {\n        result.push_str(&\"_\"[..space_count]);\n    }\n\n    result\n}\n",
            "pub fn file_name_check(file_name: &String) -> String {\n    let suf = vec![\"txt\", \"exe\", \"dll\"];\n    let lst: Vec<&str> = file_name.split(\".\").collect();\n    if lst.len() != 2 || !suf.contains(&lst[1]) || lst[0].is_empty() || !matches!(lst[0].chars().next(), Some(c) if c.is_alphabetic()) || lst[0].chars().filter(|c| c.is_digit(10)).count() > 3 {\n        return \"No\".to_string();\n    }\n    \"Yes\".to_string()\n}\n",
            "pub fn sum_squares(lst: &Vec<i32>) -> i32 {\n    let mut result = 0;\n    for (i, &x) in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            result += x.pow(2);\n        } else if i % 4 == 0 {\n            result += x.pow(3);\n        } else {\n            result += x;\n        }\n    }\n    result\n}\n",
            "use std::f64;\n\nfn is_prime(n: usize) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..=((n as f64).sqrt() as usize) {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\n\npub fn words_in_sentence(sentence: &String) -> String {\n    sentence.split_whitespace()\n            .filter(|w| is_prime(w.len()))\n            .collect::<Vec<&str>>()\n            .join(\" \")\n}\n",
            "pub fn simplify(x: &String, n: &String) -> bool {\n    let xs: Vec<&str> = x.split(\"/\").collect();\n    let ns: Vec<&str> = n.split(\"/\").collect();\n    let num = xs[0].parse::<i32>().unwrap() * ns[0].parse::<i32>().unwrap();\n    let den = xs[1].parse::<i32>().unwrap() * ns[1].parse::<i32>().unwrap();\n    num % den == 0\n}\n",
            "fn digits_sum(n: i32) -> i32 {\n    let n_str = n.to_string();\n    if n >= 0 {\n        n_str.chars().map(|d| d.to_digit(10).unwrap() as i32).sum()\n    } else {\n        (n_str[0..2].parse::<i32>().unwrap() * 2) + digits_sum(n.abs())\n    }\n}\n\npub fn order_by_points(nums: &Vec<i32>) -> Vec<i32> {\n    let mut nums_clone = nums.clone();\n    nums_clone.sort_by_key(|&n| digits_sum(n));\n    nums_clone\n}\n",
            "pub fn special_filter(nums: &Vec<i32>) -> i32 {\n    nums.iter()\n        .filter(|&&n| n > 10 && n % 2 == 1 && \"13579\".contains(&n.to_string().chars().next().unwrap()))\n        .count() as i32\n}\n",
            "pub fn get_max_triples(n: i32) -> i32 {\n    let mut c = [0, 0, 0];\n    for i in 1..=n {\n        let a = i * i - i + 1;\n        c[(a % 3) as usize] += 1;\n    }\n    (c[0] * c[1] * c[2]) + ((c[0] * (c[0] - 1) * (c[0] - 2)) / 6 + (c[1] * (c[1] - 1) * (c[1] - 2)) / 6 + (c[2] * (c[2] - 1) * (c[2] - 2)) / 6)\n}\n",
            "pub fn bf(planet1: &String, planet2: &String) -> Vec<String> {\n    let names = vec![\n        \"Mercury\".to_string(),\n        \"Venus\".to_string(),\n        \"Earth\".to_string(),\n        \"Mars\".to_string(),\n        \"Jupiter\".to_string(),\n        \"Saturn\".to_string(),\n        \"Uranus\".to_string(),\n        \"Neptune\".to_string(),\n    ];\n\n    if !names.contains(planet1) || !names.contains(planet2) {\n        return Vec::new();\n    }\n\n    let l = names.iter().position(|p| p == planet1).unwrap();\n    let r = names.iter().position(|p| p == planet2).unwrap();\n\n    if l > r {\n        return names[(r + 1)..l].to_vec();\n    }\n\n    names[(l + 1)..r].to_vec()\n}\n",
            "pub fn sorted_list_sum(lst: &Vec<String>) -> Vec<String> {\n    let mut result: Vec<String> = lst.iter().filter(|s| s.len() % 2 == 0).cloned().collect();\n    result.sort_by_key(|x| (x.len(), x));\n    result\n}\n",
            "pub fn x_or_y(n: i32, x: i32, y: i32) -> i32 {\n    if n < 2 {\n        return y;\n    }\n    for i in 2..=((n as f64).sqrt() as i32) {\n        if n % i == 0 {\n            return y;\n        }\n    }\n    x\n}\n",
            "pub fn double_the_difference(lst: &Vec<f64>) -> i32 {\n    lst.iter()\n        .filter(|&&n| n >= 0.0 && n.fract() == 0.5)\n        .map(|&n| (n * n) as i32)\n        .sum()\n}\n",
            "pub fn compare(game: &Vec<i32>, guess: &Vec<i32>) -> Vec<i32> {\n    game.iter().zip(guess.iter()).map(|(&x, &y)| (x - y).abs()).collect()\n}\n",
            "pub fn strongest_extension(class_name: &String, extensions: &Vec<String>) -> String {\n    let mut max_s = i32::MIN;\n    let mut max_ext = \"\";\n\n    for ext in extensions {\n        let upper = ext.chars().filter(|c| c.is_uppercase()).count() as i32;\n        let lower = ext.chars().filter(|c| c.is_lowercase()).count() as i32;\n        let s = upper - lower;\n\n        if s > max_s {\n            max_s = s;\n            max_ext = ext;\n        }\n    }\n\n    format!(\"{}.{}\", class_name, max_ext)\n}\n",
            "pub fn cycpattern_check(a: &String, b: &String) -> bool {\n    if a.len() < b.len() {\n        return false;\n    }\n    for i in 0..b.len() {\n        let rotated_b = format!(\"{}{}\", &b[i..], &b[..i]);\n        if a.contains(&rotated_b) {\n            return true;\n        }\n    }\n    false\n}\n",
            "pub fn even_odd_count(num: i32) -> Vec<i32> {\n    let ds = num.abs().to_string();\n    let mut even = 0;\n    for d in ds.chars() {\n        if d.to_digit(10).unwrap_or(0) % 2 == 0 {\n            even += 1;\n        }\n    }\n    vec![even, ds.len() as i32 - even]\n}\n",
            "pub fn int_to_mini_roman(num: i32) -> String {\n    let values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    let numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    let mut res = String::new();\n    let mut num = num;\n    for i in 0..values.len() {\n        while num >= values[i] {\n            res.push_str(numerals[i]);\n            num -= values[i];\n        }\n    }\n    res\n}\n",
            "pub fn right_angle_triangle(a: i32, b: i32, c: i32) -> bool {\n    let mut s = [a, b, c];\n    s.sort_unstable();\n    s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n}\n",
            "pub fn find_max(words: &Vec<String>) -> String {\n    let mut max_cnt = 0;\n    let mut max_w = \"\".to_string();\n    for w in words {\n        let cnt = w.chars().collect::<std::collections::HashSet<_>>().len();\n        if cnt > max_cnt {\n            max_cnt = cnt;\n            max_w = w.clone();\n        } else if cnt == max_cnt {\n            max_w = std::cmp::min(max_w.clone(), w);\n        }\n    }\n    max_w\n}\n",
            "pub fn eat(num: i32, need: i32, remaining: i32) -> Vec<i32> {\n    if need <= remaining {\n        vec![num + need, remaining - need]\n    } else {\n        vec![num + remaining, 0]\n    }\n}\n",
            "pub fn do_algebra(operators: &Vec<String>, operands: &Vec<i32>) -> i32 {\n    let mut ops = operators.clone();\n    let mut nums = operands.clone();\n\n    let mut i = ops.len() - 1;\n    while i >= 0 {\n        if ops[i] == \"**\" {\n            nums[i] = i32::pow(nums[i], nums[i + 1]);\n            nums.remove(i + 1);\n            ops.remove(i);\n        }\n        i -= 1;\n    }\n\n    i = 0;\n    while i < ops.len() {\n        if ops[i] == \"*\" {\n            nums[i] *= nums[i + 1];\n            nums.remove(i + 1);\n            ops.remove(i);\n            i -= 1;\n        } else if ops[i] == \"//\" {\n            nums[i] /= nums[i + 1];\n            nums.remove(i + 1);\n            ops.remove(i);\n            i -= 1;\n        }\n        i += 1;\n    }\n\n    i = 0;\n    while i < ops.len() {\n        if ops[i] == \"+\" {\n            nums[i] += nums[i + 1];\n            nums.remove(i + 1);\n            ops.remove(i);\n            i -= 1;\n        } else if ops[i] == \"-\" {\n            nums[i] -= nums[i + 1];\n            nums.remove(i + 1);\n            ops.remove(i);\n            i -= 1;\n        }\n        i += 1;\n    }\n\n    nums[0]\n}\n",
            "pub fn solve(s: &String) -> String {\n    if !s.chars().any(|c| c.is_alphabetic()) {\n        return s.chars().rev().collect();\n    }\n    let mut result = Vec::new();\n    for ch in s.chars() {\n        if !ch.is_alphabetic() {\n            result.push(ch);\n        } else if ch.is_uppercase() {\n            result.push(ch.to_lowercase().next().unwrap());\n        } else if ch.is_lowercase() {\n            result.push(ch.to_uppercase().next().unwrap());\n        }\n    }\n    result.into_iter().collect()\n}\n",
            "pub fn string_to_md5(txt: &String) -> Option<String> {\n    if txt.is_empty() {\n        return None;\n    }\n    let mut md5_hash = md5::Md5::new();\n    md5_hash.update(txt);\n    let md5_encoded = format!(\"{:x}\", md5_hash.finalize());\n    Some(md5_encoded)\n}\n",
            "pub fn generate_integers(a: i32, b: i32) -> Vec<i32> {\n    let lower = std::cmp::max(2, std::cmp::min(a, b));\n    let upper = std::cmp::min(8, std::cmp::max(a, b));\n    let mut result = vec![];\n    for i in lower..=upper {\n        if i % 2 == 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n"
        ],
        "php": [
            "/**\n * @param {array<float>} $numbers\n * @param {float} $threshold\n * @returns {bool}\n */\nfunction hasCloseElements ($numbers, $threshold) {\n    for ($i = 0; $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n            if (abs($numbers[$i] - $numbers[$j]) < $threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param {string} $parenString\n * @returns {array<string>}\n */\nfunction separateParenGroups ($parenString) {\n    $groups = [];\n    $stk = [];\n    $currentGroup = \"\";\n    $parens = str_replace(\" \", \"\", $parenString);\n    for ($i = 0; $i < strlen($parens); $i++) {\n        $ch = $parens[$i];\n        if ($ch === \"(\") {\n            array_push($stk, $ch);\n            $currentGroup .= $ch;\n        } else if ($ch === \")\") {\n            array_pop($stk);\n            $currentGroup .= $ch;\n            if (empty($stk)) {\n                array_push($groups, $currentGroup);\n                $currentGroup = \"\";\n            }\n        }\n    }\n    return $groups;\n}\n",
            "/**\n * @param {float} $num\n * @returns {float}\n */\nfunction truncateNumber ($num) {\n    return $num - floor($num);\n}\n",
            "/**\n * @param {array<int>} $operations\n * @returns {bool}\n */\nfunction belowZero ($operations) {\n    $balance = 0;\n    foreach ($operations as $op) {\n        $balance += $op;\n        if ($balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param {array<float>} $numbers\n * @returns {float}\n */\nfunction meanAbsoluteDeviation ($numbers) {\n    $mean = array_sum($numbers) / count($numbers);\n    $deviation = array_reduce($numbers, function($acc, $num) use ($mean) {\n        return $acc + abs($num - $mean);\n    }, 0);\n    return $deviation / count($numbers);\n}\n",
            "/**\n * @param {array<int>} $numbers\n * @param {int} $delimiter\n * @returns {array<int>}\n */\nfunction intersperse ($numbers, $delimiter) {\n    $result = [];\n    for ($i = 0; $i < count($numbers); $i++) {\n        if ($i !== 0) {\n            $result[] = $delimiter;\n        }\n        $result[] = $numbers[$i];\n    }\n    return $result;\n}\n",
            "/**\n * @param {string} $parenString\n * @returns {array<int>}\n */\nfunction parseNestedParens ($parenString) {\n    $result = [];\n    $parenGroups = explode(' ', $parenString);\n    foreach ($parenGroups as $group) {\n        $maxDepth = 0;\n        $depth = 0;\n        for ($i = 0; $i < strlen($group); $i++) {\n            $ch = $group[$i];\n            if ($ch === '(') {\n                $depth += 1;\n                $maxDepth = max($maxDepth, $depth);\n            } elseif ($ch === ')') {\n                $depth -= 1;\n            }\n        }\n        array_push($result, $maxDepth);\n    }\n    return $result;\n}\n",
            "/**\n * @param {array<string>} $strs\n * @param {string} $substring\n * @returns {array<string>}\n */\nfunction filterBySubstring ($strs, $substring) {\n    return array_filter($strs, function($s) use ($substring) {\n        return strpos($s, $substring) !== false;\n    });\n}\n",
            "/**\n * @param {array<int>} $numbers\n * @returns {array<int>}\n */\nfunction sumProduct ($numbers) {\n    $n_sum = array_sum($numbers);\n    $n_product = array_product($numbers);\n    return [$n_sum, $n_product];\n}\n",
            "/**\n * @param {array<int>} $numbers\n * @returns {array<int>}\n */\nfunction rollingMax ($numbers) {\n    $maxSoFar = -INF;\n    $result = [];\n    foreach ($numbers as $num) {\n        $maxSoFar = max($maxSoFar, $num);\n        $result[] = $maxSoFar;\n    }\n    return $result;\n}\n",
            "/**\n * @param {string} $s\n * @returns {string}\n */\nfunction makePalindrome ($s) {\n    if (isPalindrome($s)) {\n        return $s;\n    }\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (isPalindrome(substr($s, $i))) {\n            return $s . strrev(substr($s, 0, $i));\n        }\n    }\n    return \"\";\n}\n\n/**\n * @param {string} $s\n * @returns {boolean}\n */\nfunction isPalindrome ($s) {\n    return $s === strrev($s);\n}\n",
            "/**\n * @param {string} $a\n * @param {string} $b\n * @returns {string}\n */\nfunction stringXor ($a, $b) {\n    $result = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= $a[$i] === $b[$i] ? '0' : '1';\n    }\n    return $result;\n}\n",
            "/**\n * @param {array<string>} $strs\n * @returns {string | null}\n */\nfunction longest ($strs) {\n    if (!is_array($strs) || count($strs) === 0) {\n        return null;\n    }\n    $longest_s = $strs[0];\n    foreach ($strs as $s) {\n        if (strlen($s) > strlen($longest_s)) {\n            $longest_s = $s;\n        }\n    }\n    return $longest_s;\n}\n",
            "/**\n * @param int $a\n * @param int $b\n * @return int\n */\nfunction greatestCommonDivisor($a, $b) {\n    if ($b === 0) {\n        return $a;\n    } else {\n        return greatestCommonDivisor($b, $a % $b);\n    }\n}\n",
            "/**\n * @param {string} $s\n * @returns {array<string>}\n */\nfunction allPrefixes ($s) {\n    $prefixes = [];\n    for ($i = 0; $i < strlen($s); $i++) {\n        $prefixes[] = substr($s, 0, $i + 1);\n    }\n    return $prefixes;\n}\n",
            "/**\n * @param {int} $n\n * @returns {string}\n */\nfunction stringSequence ($n) {\n    return implode(' ', range(0, $n));\n}\n",
            "/**\n * @param {string} $s\n * @returns {int}\n */\nfunction countDistinctCharacters ($s) {\n    return count(array_unique(str_split(strtolower($s))));\n}\n",
            "<?php\n/**\n * @param {string} $musicString\n * @returns {array<int>}\n */\nfunction parseMusic ($musicString) {\n    $durations = [\"o\" => 4, \"o|\" => 2, \".|\" => 1];\n    $notes = explode(\" \", $musicString);\n    $result = [];\n    foreach ($notes as $note) {\n        if (array_key_exists($note, $durations)) {\n            $result[] = $durations[$note];\n        }\n    }\n    return $result;\n}\n",
            "/**\n * @param {string} $s\n * @param {string} $substring\n * @returns {int}\n */\nfunction howManyTimes ($s, $substring) {\n    $times = 0;\n    for ($i = 0; $i <= strlen($s) - strlen($substring); $i++) {\n        if (substr($s, $i, strlen($substring)) === $substring) {\n            $times += 1;\n        }\n    }\n    return $times;\n}\n",
            "/**\n * @param {string} $numbers\n * @returns {string}\n */\nfunction sortNumbers ($numbers) {\n    $numDict = [\n        \"zero\" => 0,\n        \"one\" => 1,\n        \"two\" => 2,\n        \"three\" => 3,\n        \"four\" => 4,\n        \"five\" => 5,\n        \"six\" => 6,\n        \"seven\" => 7,\n        \"eight\" => 8,\n        \"nine\" => 9,\n    ];\n    $numList = array_filter(explode(\" \", $numbers), function($x) use ($numDict) {\n        return isset($numDict[$x]);\n    });\n    usort($numList, function($a, $b) use ($numDict) {\n        return $numDict[$a] - $numDict[$b];\n    });\n    return implode(\" \", $numList);\n}\n",
            "/**\n * @param {array<float>} $numbers\n * @returns {array<float>}\n */\nfunction findClosestElements ($numbers) {\n    sort($numbers);\n    $minDiff = PHP_FLOAT_MAX;\n    $closestPair = [];\n    for ($i = 1; $i < count($numbers); $i++) {\n        $diff = $numbers[$i] - $numbers[$i - 1];\n        if ($diff < $minDiff) {\n            $minDiff = $diff;\n            $closestPair = [$numbers[$i - 1], $numbers[$i]];\n        }\n    }\n    return $closestPair;\n}\n",
            "/**\n * @param {array<float>} $numbers\n * @returns {array<float>}\n */\nfunction rescaleToUnit ($numbers) {\n    $minNum = min($numbers);\n    $maxNum = max($numbers);\n    if ($minNum === $maxNum) {\n        return array_fill(0, count($numbers), 0.0);\n    } else {\n        return array_map(function($num) use ($minNum, $maxNum) {\n            return ($num - $minNum) / ($maxNum - $minNum);\n        }, $numbers);\n    }\n}\n",
            "/**\n * @param {array<mixed>} $values\n * @returns {array<int>}\n */\nfunction filterIntegers($values) {\n    return array_filter($values, function($x) {\n        return is_int($x);\n    });\n}\n",
            "/**\n * @param {string} $s\n * @returns {int}\n */\nfunction strLength ($s) {\n    return strlen($s);\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction largestDivisor ($n) {\n    for ($i = 2; $i < $n; $i++) {\n        if ($n % $i === 0) {\n            return floor($n / $i);\n        }\n    }\n    return 1;\n}\n",
            "function factorize ($n) {\n    $factors = [];\n    $divisor = 2;\n    while ($divisor <= $n) {\n        if ($n % $divisor === 0) {\n            array_push($factors, $divisor);\n            $n /= $divisor;\n        } else {\n            $divisor += 1;\n        }\n    }\n    return $factors;\n}\n",
            "/**\n * @param array<int> $numbers\n * @return array<int>\n */\nfunction removeDuplicates($numbers) {\n    $counts = [];\n    foreach ($numbers as $num) {\n        if (isset($counts[$num])) {\n            $counts[$num]++;\n        } else {\n            $counts[$num] = 1;\n        }\n    }\n    $res = [];\n    foreach ($numbers as $num) {\n        if ($counts[$num] === 1) {\n            $res[] = $num;\n        }\n    }\n    return $res;\n}\n",
            "<?php\n/**\n * @param {string} $s\n * @returns {string}\n */\nfunction flipCase($s) {\n    $flipped = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        $ch = $s[$i];\n        if (!ctype_alpha($ch)) {\n            $flipped .= $ch;\n        } else if (ctype_lower($ch)) {\n            $flipped .= strtoupper($ch);\n        } else {\n            $flipped .= strtolower($ch);\n        }\n    }\n    return $flipped;\n}\n",
            "/**\n * @param {array<string>} $strs\n * @returns {string}\n */\nfunction concatenate ($strs) {\n    return implode(\"\", $strs);\n}\n",
            "/**\n * @param array<string> $strs\n * @param string $prefixStr\n * @return array<string>\n */\nfunction filterByPrefix ($strs, $prefixStr) {\n    return array_filter($strs, function($s) use ($prefixStr) {\n        return strpos($s, $prefixStr) === 0;\n    });\n}\n",
            "/**\n * @param {array<int>} $l\n * @returns {array<int>}\n */\nfunction getPositive ($l) {\n    return array_filter($l, function($num) {\n        return $num > 0;\n    });\n}\n",
            "/**\n * @param {int} $n\n * @returns {bool}\n */\nfunction isPrime ($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= floor(sqrt($n)); $i++) {\n        if ($n % $i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "/**\n * @param {array<int>} $xs\n * @param {float} $x\n * @returns {float}\n */\nfunction poly ($xs, $x) {\n    $res = 0.0;\n    for ($i = 0; $i < count($xs); $i++) {\n        $res += $xs[$i] * pow($x, $i);\n    }\n    return $res;\n}\n\n/**\n * @param {array<int>} $xs\n * @returns {float}\n */\nfunction findZero ($xs) {\n    $x1 = 1.0;\n    $x2 = -1.0;\n    while (($poly_x1 = poly($xs, $x1)) * ($poly_x2 = poly($xs, $x2)) > 0) {\n        $x1 *= 2;\n        $x2 *= 2;\n    }\n    while (abs($x1 - $x2) > 1e-10) {\n        $mid = ($x1 + $x2) / 2;\n        if (($poly_mid = poly($xs, $mid)) === 0) {\n            return $mid;\n        } elseif ($poly_mid * $poly_x1 < 0) {\n            $x2 = $mid;\n        } else {\n            $x1 = $mid;\n        }\n    }\n    return ($x1 + $x2) / 2;\n}\n",
            "/**\n * @param {array<int>} $l\n * @returns {array<int>}\n */\nfunction sortThird ($l) {\n    $sortedThird = array_filter($l, function($_, $index) {\n        return $index % 3 === 0;\n    }, ARRAY_FILTER_USE_BOTH);\n    sort($sortedThird);\n    \n    return array_map(function($value, $index) use ($sortedThird) {\n        return $index % 3 === 0 ? $sortedThird[$index / 3] : $value;\n    }, $l);\n}\n",
            "/**\n * @param {array<int>} $l\n * @returns {array<int>}\n */\nfunction listUnique ($l) {\n    return array_values(array_unique($l));\n}\n",
            "/**\n * @param {array<int>} $l\n * @returns {int}\n */\nfunction maxElement ($l) {\n    if (!is_array($l) || count($l) === 0) {\n        return 0;\n    }\n    return max($l);\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction fizzBuzz($n) {\n    $cnt = 0;\n    for ($i = 0; $i < $n; $i++) {\n        if ($i % 11 === 0 || $i % 13 === 0) {\n            $cnt += (substr_count((string)$i, '7'));\n        }\n    }\n    return $cnt;\n}\n",
            "/**\n * @param {array<int>} $l\n * @returns {array<int>}\n */\nfunction sortEven($l) {\n    $sortedEven = array_filter($l, function($_, $index) {\n        return $index % 2 === 0;\n    }, ARRAY_FILTER_USE_BOTH);\n    sort($sortedEven);\n    \n    $result = [];\n    foreach ($l as $index => $value) {\n        if ($index % 2 === 0) {\n            $result[] = array_shift($sortedEven);\n        } else {\n            $result[] = $value;\n        }\n    }\n    return $result;\n}\n",
            "/**\n * @param string $s\n * @return string\n */\nfunction encodeCyclic($s) {\n    $result = [];\n    for ($i = 0; $i < strlen($s); $i += 3) {\n        if ($i + 3 > strlen($s)) {\n            array_push($result, substr($s, $i));\n        } else {\n            array_push($result, substr($s, $i + 1, 2));\n            array_push($result, $s[$i]);\n        }\n    }\n    return implode('', $result);\n}\n\n/**\n * @param string $s\n * @return string\n */\nfunction decodeCyclic($s) {\n    return encodeCyclic(encodeCyclic($s));\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction primeFib($n) {\n    $isPrime = function($num) {\n        if ($num < 2) return false;\n        for ($i = 2; $i <= floor(sqrt($num)); $i++) {\n            if ($num % $i === 0) return false;\n        }\n        return true;\n    };\n\n    $f = [0, 1];\n    $cnt = 0;\n    while ($cnt < $n) {\n        $f = [$f[1], $f[0] + $f[1]];\n        if ($isPrime($f[1])) {\n            $cnt += 1;\n        }\n    }\n    return $f[1];\n}\n",
            "/**\n * @param {array<int>} $l\n * @returns {bool}\n */\nfunction triplesSumToZero ($l) {\n    for ($i = 0; $i < count($l); $i++) {\n        for ($j = $i + 1; $j < count($l); $j++) {\n            for ($k = $j + 1; $k < count($l); $k++) {\n                if ($l[$i] + $l[$j] + $l[$k] === 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param int $n\n * @return int\n */\nfunction carRaceCollision ($n) {\n    return $n ** 2;\n}\n",
            "/**\n * @param {array<int>} $l\n * @returns {array<int>}\n */\nfunction incrList ($l) {\n    return array_map(function($i) {\n        return $i + 1;\n    }, $l);\n}\n",
            "/**\n * @param {array<int>} $l\n * @returns {bool}\n */\nfunction pairsSumToZero ($l) {\n    $seen = [];\n    foreach ($l as $num) {\n        if (in_array(-$num, $seen)) {\n            return true;\n        }\n        $seen[] = $num;\n    }\n    return false;\n}\n",
            "/**\n * @param {int} $x\n * @param {int} $bas\n * @returns {string}\n */\nfunction changeBase ($x, $bas) {\n    if ($x === 0) {\n        return \"0\";\n    }\n    $digits = [];\n    while ($x > 0) {\n        $digits[] = (string)($x % $bas);\n        $x = intdiv($x, $bas);\n    }\n    return implode('', array_reverse($digits));\n}\n",
            "/**\n * @param {int} $a\n * @param {int} $h\n * @returns {float}\n */\nfunction triangleArea ($a, $h) {\n    return $a * $h / 2;\n}\n",
            "/**\n * @param int $n\n * @return int\n */\nfunction fib4($n) {\n    $fib = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib[$i % 4] = array_sum($fib);\n    }\n    return $fib[$n % 4];\n}\n",
            "function median ($l) {\n    sort($l);\n    $length = count($l);\n    if ($length % 2 !== 0) {\n        return $l[floor($length / 2)];\n    } else {\n        return ($l[$length / 2] + $l[$length / 2 - 1]) / 2;\n    }\n}\n",
            "/**\n * @param {string} $txt\n * @returns {bool}\n */\nfunction isPalindrome ($txt) {\n    return $txt === strrev($txt);\n}\n",
            "/**\n * @param {int} $n\n * @param {int} $p\n * @returns {int}\n */\nfunction modp ($n, $p) {\n    $ret = 1;\n    for ($i = 0; $i < $n; $i++) {\n        $ret = ($ret * 2) % $p;\n    }\n    return $ret;\n}\n",
            "/**\n * @param {string} $s\n * @returns {string}\n */\nfunction encodeShift ($s) {\n    $result = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        $ch = $s[$i];\n        $result .= chr((ord($ch) - ord('a') + 5) % 26 + ord('a'));\n    }\n    return $result;\n}\n\n/**\n * @param {string} $s\n * @returns {string}\n */\nfunction decodeShift ($s) {\n    $result = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        $ch = $s[$i];\n        $result .= chr((ord($ch) - ord('a') + 21) % 26 + ord('a'));\n    }\n    return $result;\n}\n",
            "function removeVowels($txt) {\n    $vowels = \"aeiouAEIOU\";\n    $chars = str_split($txt);\n    $filteredChars = array_filter($chars, function($char) use ($vowels) {\n        return strpos($vowels, $char) === false;\n    });\n    return implode('', $filteredChars);\n}\n",
            "/**\n * @param {array<int>} $l\n * @param {int} $t\n * @returns {bool}\n */\nfunction belowThreshold ($l, $t) {\n    foreach ($l as $x) {\n        if ($x >= $t) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "/**\n * @param int $x\n * @param int $y\n * @return int\n */\nfunction add($x, $y) {\n    return $x + $y;\n}\n",
            "/**\n * @param {string} $s0\n * @param {string} $s1\n * @returns {bool}\n */\nfunction sameChars ($s0, $s1) {\n    return count(array_unique(str_split($s0))) == count(array_unique(str_split($s1)));\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction fib($n) {\n    if ($n <= 1) {\n        return $n;\n    } else {\n        return fib($n - 1) + fib($n - 2);\n    }\n}\n",
            "/**\n * @param {string} $brackets\n * @returns {bool}\n */\nfunction correctBracketing ($brackets) {\n    $depth = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] === \"<\") {\n            $depth += 1;\n        } else if ($brackets[$i] === \">\") {\n            $depth -= 1;\n        }\n        if ($depth < 0) {\n            return false;\n        }\n    }\n    return $depth === 0;\n}\n",
            "/**\n * @param {array<int>} $l\n * @returns {bool}\n */\nfunction monotonic ($l) {\n    $diff = [];\n    for ($i = 0; $i < count($l) - 1; $i++) {\n        $diff[] = $l[$i + 1] - $l[$i];\n    }\n    return array_filter($diff, function($x) { return $x > 0; }) === [] || array_filter($diff, function($x) { return $x < 0; }) === [];\n}\n",
            "/**\n * @param {array<int>} $l1\n * @param {array<int>} $l2\n * @returns {array<int>}\n */\nfunction common ($l1, $l2) {\n    return array_values(array_intersect(array_unique($l1), array_unique($l2)));\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction largestPrimeFactor ($n) {\n    $i = 2;\n    while ($i * $i <= $n) {\n        if ($n % $i) {\n            $i += 1;\n        } else {\n            $n //= $i;\n        }\n    }\n    return $n;\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction sumToN ($n) {\n    return (($n + 1) * $n) / 2;\n}\n",
            "/**\n * @param {string} $brackets\n * @returns {bool}\n */\nfunction correctBracketing ($brackets) {\n    $depth = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] === \"(\") {\n            $depth += 1;\n        } else if ($brackets[$i] === \")\") {\n            $depth -= 1;\n        }\n        if ($depth < 0) {\n            return false;\n        }\n    }\n    return $depth === 0;\n}\n",
            "/**\n * @param array<int> $xs\n * @return array<int>\n */\nfunction derivative ($xs) {\n    return array_map(function($x, $i) use ($xs) {\n        return $x * $i;\n    }, array_slice($xs, 1), range(0, count($xs) - 2));\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction fibfib ($n) {\n    if ($n <= 1) return 0;\n    $a = 0; $b = 0; $c = 1;\n    while ($n > 2) {\n        list($a, $b, $c) = array($b, $c, $a + $b + $c);\n        $n -= 1;\n    }\n    return $c;\n}\n",
            "/**\n * @param {string} $s\n * @returns {int}\n */\nfunction vowelsCount ($s) {\n    $vowels = \"aeiou\";\n    $cnt = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (strpos($vowels, strtolower($s[$i])) !== false || ($i === strlen($s) - 1 && strtolower($s[$i]) === \"y\")) {\n            $cnt += 1;\n        }\n    }\n    return $cnt;\n}\n",
            "/**\n * @param {int} $x\n * @param {int} $shift\n * @returns {string}\n */\nfunction circularShift($x, $shift) {\n    $x_str = strval($x);\n    if ($shift > strlen($x_str)) {\n        return strrev($x_str);\n    } else {\n        return substr($x_str, -$shift) . substr($x_str, 0, -$shift);\n    }\n}\n",
            "/**\n * @param {string} $s\n * @returns {int}\n */\nfunction digitSum ($s) {\n    $sum = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        $c = $s[$i];\n        if (ctype_upper($c)) {\n            $sum += ord($c);\n        }\n    }\n    return $sum;\n}\n",
            "/**\n * @param {string} $s\n * @param {int} $n\n * @returns {int}\n */\nfunction fruitDistribution ($s, $n) {\n    $words = explode(' ', $s);\n    $applesIndex = array_search(\"apples\", $words);\n    $orangesIndex = array_search(\"oranges\", $words);\n    $apples = (int)$words[$applesIndex - 1];\n    $oranges = (int)$words[$orangesIndex - 1];\n    return $n - $apples - $oranges;\n}\n",
            "/**\n * @param array<int> $arr\n * @return array<int>\n */\nfunction pluck($arr) {\n    $evens = array_filter($arr, function($n) {\n        return $n % 2 === 0;\n    });\n    if (empty($evens)) {\n        return [];\n    }\n    $minEven = min($evens);\n    $index = array_search($minEven, $arr);\n    return [$minEven, $index];\n}\n",
            "/**\n * @param {array<int>} $lst\n * @returns {int}\n */\nfunction search ($lst) {\n    $freqs = [];\n    foreach ($lst as $n) {\n        if (isset($freqs[$n])) {\n            $freqs[$n]++;\n        } else {\n            $freqs[$n] = 1;\n        }\n    }\n    $goodVals = array_filter(array_keys($freqs), function($k) use ($freqs) {\n        return $freqs[$k] >= (int)$k;\n    });\n    return count($goodVals) > 0 ? max($goodVals) : -1;\n}\n",
            "/**\n * @param {array<int>} $lst\n * @returns {array<int>}\n */\nfunction strangeSortList ($lst) {\n    sort($lst);\n    $result = [];\n    $left = 0;\n    $right = count($lst) - 1;\n    while ($left <= $right) {\n        $result[] = $lst[$left];\n        $left += 1;\n        if ($left <= $right) {\n            $result[] = $lst[$right];\n            $right -= 1;\n        }\n    }\n    return $result;\n}\n",
            "/**\n * @param {int} $a\n * @param {int} $b\n * @param {int} $c\n * @returns {float}\n */\nfunction triangleArea ($a, $b, $c) {\n    if ($a + $b > $c && $a + $c > $b && $b + $c > $a) {\n        $s = ($a + $b + $c) / 2.0;\n        return sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "/**\n * @param {array<int>} $q\n * @param {int} $w\n * @returns {bool}\n */\nfunction willItFly ($q, $w) {\n    if (count($q) === 0) {\n        return false;\n    }\n    $isPalin = true;\n    for ($i = 0; $i < count($q); $i++) {\n        if ($q[$i] !== $q[count($q) - $i - 1]) {\n            $isPalin = false;\n            break;\n        }\n    }\n    $total = array_sum($q);\n    return $isPalin && $total <= $w;\n}\n",
            "/**\n * @param array<int> $arr\n * @return int\n */\nfunction smallestChange ($arr) {\n    $ans = 0;\n    for ($i = 0; $i < floor(count($arr) / 2); $i++) {\n        if ($arr[$i] !== $arr[count($arr) - $i - 1]) {\n            $ans += 1;\n        }\n    }\n    return $ans;\n}\n",
            "/**\n * @param array<string> $lst1\n * @param array<string> $lst2\n * @returns array<string>\n */\nfunction totalMatch ($lst1, $lst2) {\n    $cnt1 = array_reduce($lst1, function($acc, $s) { return $acc + strlen($s); }, 0);\n    $cnt2 = array_reduce($lst2, function($acc, $s) { return $acc + strlen($s); }, 0);\n    return $cnt1 <= $cnt2 ? $lst1 : $lst2;\n}\n",
            "/**\n * @param {int} $a\n * @returns {bool}\n */\nfunction isMultiplyPrime ($a) {\n    $isPrime = function($n) {\n        if ($n < 2) return false;\n        for ($i = 2; $i <= floor(sqrt($n)); $i++) {\n            if ($n % $i === 0) return false;\n        }\n        return true;\n    };\n\n    $cnt = 0;\n    for ($i = 2; $i <= $a; $i++) {\n        if ($isPrime($i)) {\n            while ($a % $i === 0) {\n                $cnt += 1;\n                $a /= $i;\n            }\n        }\n    }\n    return $cnt === 3;\n}\n",
            "/**\n * @param {int} $x\n * @param {int} $n\n * @returns {bool}\n */\nfunction isSimplePower ($x, $n) {\n    if ($n < 2) {\n        return $x === $n;\n    }\n    $tmp = 1;\n    while ($tmp < $x) {\n        $tmp *= $n;\n    }\n    return $tmp === $x;\n}\n",
            "/**\n * @param {int} $a\n * @returns {bool}\n */\nfunction isCube($a) {\n    $a = abs($a);\n    $root = round(pow($a, 1.0 / 3.0));\n    return $root * $root * $root === $a;\n}\n",
            "/**\n * @param string $num\n * @return int\n */\nfunction hexKey ($num) {\n    return strlen(preg_replace('/[^2357BD]/', '', $num));\n}\n",
            "/**\n * @param {int} $dec\n * @returns {string}\n */\nfunction decimalToBinary($dec) {\n    $binary = decbin($dec);\n    return \"db\" . $binary . \"db\";\n}\n",
            "/**\n * @param {string} $s\n * @returns {bool}\n */\nfunction isHappy ($s) {\n    if (strlen($s) < 3) {\n        return false;\n    }\n    for ($i = 0; $i < strlen($s) - 2; $i++) {\n        if ($s[$i] === $s[$i + 1] || $s[$i] === $s[$i + 2] || $s[$i + 1] === $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "/**\n * @param {array<float>} $grades\n * @returns {array<string>}\n */\nfunction numericalLetterGrade ($grades) {\n    $result = [];\n    foreach ($grades as $g) {\n        if ($g == 4.0) {\n            $result[] = \"A+\";\n        } elseif ($g > 3.7) {\n            $result[] = \"A\";\n        } elseif ($g > 3.3) {\n            $result[] = \"A-\";\n        } elseif ($g > 3.0) {\n            $result[] = \"B+\";\n        } elseif ($g > 2.7) {\n            $result[] = \"B\";\n        } elseif ($g > 2.3) {\n            $result[] = \"B-\";\n        } elseif ($g > 2.0) {\n            $result[] = \"C+\";\n        } elseif ($g > 1.7) {\n            $result[] = \"C\";\n        } elseif ($g > 1.3) {\n            $result[] = \"C-\";\n        } elseif ($g > 1.0) {\n            $result[] = \"D+\";\n        } elseif ($g > 0.7) {\n            $result[] = \"D\";\n        } elseif ($g > 0.0) {\n            $result[] = \"D-\";\n        } else {\n            $result[] = \"E\";\n        }\n    }\n    return $result;\n}\n",
            "/**\n * @param {string} $s\n * @returns {bool}\n */\nfunction primeLength ($s) {\n    $length = strlen($s);\n    if ($length < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= floor(sqrt($length)); $i++) {\n        if ($length % $i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction startsOneEnds ($n) {\n    if ($n === 1) {\n        return 1;\n    }\n    return 2 * 9 * pow(10, $n - 2);\n}\n",
            "/**\n * @param {int} $n\n * @returns {string}\n */\nfunction solve ($n) {\n    $digitsSum = array_sum(str_split($n));\n    return decbin($digitsSum);\n}\n",
            "/**\n * @param {array<int>} $lst\n * @returns {int}\n */\nfunction add ($lst) {\n    return array_reduce($lst, function($acc, $x, $i) {\n        if ($i % 2 === 1 && $x % 2 === 0) {\n            $acc += $x;\n        }\n        return $acc;\n    }, 0);\n}\n",
            "function antiShuffle ($s) {\n    return implode(\" \", array_map(function($word) {\n        $chars = str_split($word);\n        sort($chars);\n        return implode(\"\", $chars);\n    }, explode(\" \", $s)));\n}\n",
            "/**\n * @param array<array<int>> $lst\n * @param int $x\n * @return array<array<int>>\n */\nfunction getRow ($lst, $x) {\n    $coords = [];\n    for ($i = 0; $i < count($lst); $i++) {\n        for ($j = 0; $j < count($lst[$i]); $j++) {\n            if ($lst[$i][$j] === $x) {\n                $coords[] = [$i, $j];\n            }\n        }\n    }\n    usort($coords, function ($a, $b) {\n        return $a[0] - $b[0] || $b[1] - $a[1];\n    });\n    return $coords;\n}\n",
            "/**\n * @param {array<int>} $arr\n * @returns {array<int>}\n */\nfunction sortArray($arr) {\n    if (count($arr) == 0) {\n        return [];\n    }\n    if (($arr[0] + end($arr)) % 2 == 0) {\n        rsort($arr);\n        return $arr;\n    } else {\n        sort($arr);\n        return $arr;\n    }\n}\n",
            "/**\n * @param string $s\n * @returns string\n */\nfunction encrypt($s) {\n    $result = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        $ch = $s[$i];\n        $shifted = ord($ch) + 4;\n        if ($shifted > ord('z')) {\n            $shifted -= 26;\n        }\n        $result .= chr($shifted);\n    }\n    return $result;\n}\n",
            "/**\n * @param array<int> $lst\n * @return int|null\n */\nfunction nextSmallest ($lst) {\n    $sl = array_unique($lst);\n    sort($sl);\n    if (count($sl) < 2) {\n        return null;\n    }\n    return $sl[1];\n}\n",
            "/**\n * @param {string} $s\n * @returns {int}\n */\nfunction isBored ($s) {\n    $sentences = preg_split('/[\\.\\!\\?]\\s*/', $s);\n    return count(array_filter($sentences, function($sentence) {\n        return strlen($sentence) >= 2 && strpos($sentence, \"I \") === 0;\n    }));\n}\n",
            "function anyInt($x, $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if (($x + $y == $z) || ($x + $z == $y) || ($y + $z == $x)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "function encode ($message) {\n    $vowels = \"aeiouAEIOU\";\n    $result = [];\n    for ($i = 0; $i < strlen($message); $i++) {\n        $ch = $message[$i];\n        if (ctype_alpha($ch)) {\n            $ch1 = ctype_lower($ch) ? strtoupper($ch) : strtolower($ch);\n            if (strpos($vowels, $ch1) !== false) {\n                $ch1 = chr(ord($ch1) + 2);\n            }\n            array_push($result, $ch1);\n        } else {\n            array_push($result, $ch);\n        }\n    }\n    return implode(\"\", $result);\n}\n",
            "/**\n * @param {array<int>} $lst\n * @returns {int}\n */\nfunction skjkasdkd ($lst) {\n    function is_prime($n) {\n        if ($n < 2) return false;\n        for ($i = 2; $i <= sqrt($n); $i++) {\n            if ($n % $i === 0) return false;\n        }\n        return true;\n    }\n\n    $primes = array_filter($lst, 'is_prime');\n    if (empty($primes)) return 0;\n\n    $largest = strval(max($primes));\n    $sum = 0;\n    for ($i = 0; $i < strlen($largest); $i++) {\n        $sum += intval($largest[$i]);\n    }\n    return $sum;\n}\n",
            "/**\n * @param {array<string, string>} $d\n * @returns {bool}\n */\nfunction checkDictCase ($d) {\n    if (empty($d)) {\n        return false;\n    }\n    $allLower = true;\n    $allUpper = true;\n    foreach ($d as $key => $value) {\n        if (!ctype_lower($key)) {\n            $allLower = false;\n        }\n        if (!ctype_upper($key)) {\n            $allUpper = false;\n        }\n    }\n    return $allLower || $allUpper;\n}\n",
            "/**\n * @param {int} $n\n * @returns {array<int>}\n */\nfunction countUpTo ($n) {\n    $primes = [];\n    for ($num = 2; $num < $n; $num++) {\n        if (empty(array_filter($primes, function($p) use ($num) {\n            return $num % $p === 0;\n        }))) {\n            $primes[] = $num;\n        }\n    }\n    return $primes;\n}\n",
            "/**\n * @param {int} $a\n * @param {int} $b\n * @returns {int}\n */\nfunction multiply ($a, $b) {\n    return abs($a) % 10 * abs($b) % 10;\n}\n",
            "/**\n * @param {string} $s\n * @returns {int}\n */\nfunction countUpper ($s) {\n    $vowels = \"AEIOU\";\n    $count = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if ($i % 2 === 0 && strpos($vowels, $s[$i]) !== false) {\n            $count++;\n        }\n    }\n    return $count;\n}\n",
            "/**\n * @param {string} $value\n * @returns {int}\n */\nfunction closestInteger ($value) {\n    $num = floatval($value);\n    if ($num >= 0) {\n        return floor($num + 0.5);\n    } else {\n        return ceil($num - 0.5);\n    }\n}\n",
            "/**\n * @param {int} $n\n * @returns {array<int>}\n */\nfunction makeAPile ($n) {\n    return array_map(function($i) use ($n) {\n        return $n + 2 * $i;\n    }, range(0, $n - 1));\n}\n",
            "/**\n * @param {string} $s\n * @returns {array<string>}\n */\nfunction wordsString ($s) {\n    return array_filter(preg_split('/[,\\s]+/', $s, -1, PREG_SPLIT_NO_EMPTY));\n}\n",
            "/**\n * @param {int} $x\n * @param {int} $y\n * @returns {int}\n */\nfunction chooseNum ($x, $y) {\n    if ($x > $y) {\n        return -1;\n    }\n    if ($y % 2 === 0) {\n        return $y;\n    }\n    return $x !== $y ? $y - 1 : -1;\n}\n",
            "/**\n * @param {int} $n\n * @param {int} $m\n * @returns {string | null}\n */\nfunction roundedAvg ($n, $m) {\n    if ($n > $m) {\n        return null;\n    }\n    $r_avg = round(($m + $n) / 2.0);\n    return decbin($r_avg);\n}\n",
            "function uniqueDigits ($x) {\n    $allDigitsOdd = function($s) {\n        for ($i = 0; $i < strlen($s); $i++) {\n            if (intval($s[$i]) % 2 === 0) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    return array_filter($x, function($num) use ($allDigitsOdd) {\n        return $allDigitsOdd(strval($num));\n    });\n}\n",
            "/**\n * @param {array<int>} $arr\n * @returns {array<string>}\n */\nfunction byLength ($arr) {\n    $digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    $sortedArr = array_filter($arr, function($x) { return $x >= 1 && $x <= 9; });\n    rsort($sortedArr);\n    $result = array_map(function($x) use ($digitNames) { return $digitNames[$x - 1]; }, $sortedArr);\n    return $result;\n}\n",
            "function f ($n) {\n    $nums = range(1, $n);\n    return array_map(function($i) use ($nums) {\n        if ($i % 2 !== 0) {\n            return array_sum(array_slice($nums, 0, $i));\n        } else {\n            return array_product(array_slice($nums, 0, $i));\n        }\n    }, range(1, $n));\n}\n",
            "/**\n * @param {int} $n\n * @returns {array<int>}\n */\nfunction evenOddPalindrome ($n) {\n    $cnt = [0, 0];\n    for ($i = 1; $i <= $n; $i++) {\n        $txt = strval($i);\n        if ($txt === strrev($txt)) {\n            $cnt[$i % 2] += 1;\n        }\n    }\n    return $cnt;\n}\n",
            "/**\n * @param {array<int>} $arr\n * @returns {int}\n */\nfunction countNums ($arr) {\n    /**\n     * \n     * @param {number} n \n     * @returns {number}\n     */\n    function digitsSum($n) {\n        $nStr = strval($n);\n        if ($n >= 0) {\n            return array_reduce(str_split($nStr), function($sum, $digit) {\n                return $sum + intval($digit);\n            }, 0);\n        } else {\n            return intval(substr($nStr, 0, 2)) * 2 + digitsSum(abs($n));\n        }\n    }\n\n    return count(array_filter($arr, function($n) {\n        return digitsSum($n) > 0;\n    }));\n}\n",
            "/**\n * @param array<int> $arr\n * @return bool\n */\nfunction moveOneBall ($arr) {\n    if (count($arr) === 0) {\n        return true;\n    }\n    $sortedArr = $arr;\n    sort($sortedArr);\n    for ($i = 0; $i < count($arr); $i++) {\n        if (\n            json_encode(array_slice($arr, $i)) === json_encode(array_slice($sortedArr, count($arr) - $i)) &&\n            json_encode(array_slice($arr, 0, $i)) === json_encode(array_slice($sortedArr, 0, count($arr) - $i))\n        ) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param {array<int>} $lst1\n * @param {array<int>} $lst2\n * @returns {string}\n */\nfunction canExchange ($lst1, $lst2) {\n    $odd_cnt = count(array_filter($lst1, function($num) {\n        return $num % 2 !== 0;\n    }));\n    \n    $even_cnt = count(array_filter($lst2, function($num) {\n        return $num % 2 === 0;\n    }));\n    \n    return $even_cnt >= $odd_cnt ? \"YES\" : \"NO\";\n}\n",
            "/**\n * @param {string} $test\n * @returns {array<string, int>}\n */\nfunction histogram ($test) {\n    $freq = [];\n    $words = array_filter(explode(\" \", $test), function($w) {\n        return strlen($w) > 0;\n    });\n    foreach ($words as $w) {\n        if (isset($freq[$w])) {\n            $freq[$w]++;\n        } else {\n            $freq[$w] = 1;\n        }\n    }\n    $result = [];\n    if (!empty($freq)) {\n        $max_freq = max(array_values($freq));\n        foreach ($freq as $k => $v) {\n            if ($v === $max_freq) {\n                $result[$k] = $v;\n            }\n        }\n    }\n    return $result;\n}\n",
            "/**\n * @param {string} $s\n * @param {string} $c\n * @returns {array<string>}\n */\nfunction reverseDelete ($s, $c) {\n    $isPalindrome = function($str) {\n        return $str === strrev($str);\n    };\n\n    $s1 = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (strpos($c, $s[$i]) === false) {\n            $s1 .= $s[$i];\n        }\n    }\n\n    return [$s1, $isPalindrome($s1) ? \"yes\" : \"no\"];\n}\n",
            "/**\n * @param {array<string>} $lst\n * @returns {array<string>}\n */\nfunction oddCount ($lst) {\n    $result = [];\n    foreach ($lst as $num) {\n        $n = 0;\n        for ($i = 0; $i < strlen($num); $i++) {\n            if (ord($num[$i]) % 2 == 1) {\n                $n++;\n            }\n        }\n        $rs = \"the number of odd elements in the string i of the input.\";\n        $result[] = str_replace(\"i\", strval($n), $rs);\n    }\n    return $result;\n}\n",
            "function minSubArraySum ($nums) {\n    $min_sum = 0;\n    $cur_sum = 0;\n    foreach ($nums as $n) {\n        $cur_sum = min($cur_sum + $n, 0);\n        $min_sum = min($cur_sum, $min_sum);\n    }\n    if ($min_sum === 0) {\n        $min_sum = min(...$nums);\n    }\n    return $min_sum;\n}\n",
            "/**\n * @param {array<array<int>>} $grid\n * @param {int} $capacity\n * @returns {int}\n */\nfunction maxFill ($grid, $capacity) {\n    return array_reduce($grid, function($total, $arr) use ($capacity) {\n        return $total + ceil(array_sum($arr) / $capacity);\n    }, 0);\n}\n",
            "/**\n * @param {array<int>} $arr\n * @returns {array<int>}\n */\nfunction sortArray ($arr) {\n    usort($arr, function($a, $b) {\n        $countA = substr_count(decbin($a), '1');\n        $countB = substr_count(decbin($b), '1');\n        if ($countA == $countB) {\n            return $a - $b;\n        }\n        return $countA - $countB;\n    });\n    return $arr;\n}\n",
            "/**\n * @param {string} $s\n * @param {int} $n\n * @returns {array<string>}\n */\nfunction selectWords ($s, $n) {\n    $consonants = \"bcdfghjklmnpqrstvwxyz\";\n    $words = array_filter(explode(\" \", $s), function($w) { return strlen(trim($w)) > 0; });\n    return array_filter($words, function($w) use ($consonants, $n) {\n        return count(array_filter(str_split(strtolower($w)), function($c) use ($consonants) {\n            return strpos($consonants, $c) !== false;\n        })) === $n;\n    });\n}\n",
            "/**\n * @param {string} $word\n * @returns {string}\n */\nfunction getClosestVowel ($word) {\n    $vowels = \"aeiouAEIOU\";\n    for ($i = strlen($word) - 2; $i > 0; $i--) {\n        if (strpos($vowels, $word[$i]) !== false && strpos($vowels, $word[$i - 1]) === false && strpos($vowels, $word[$i + 1]) === false) {\n            return $word[$i];\n        }\n    }\n    return \"\";\n}\n",
            "/**\n * @param {array<string>} $lst\n * @returns {string}\n */\nfunction matchParens ($lst) {\n    $check = function($s) {\n        $depth = 0;\n        for ($i = 0; $i < strlen($s); $i++) {\n            $ch = $s[$i];\n            if ($ch === \"(\") {\n                $depth += 1;\n            } else {\n                $depth -= 1;\n            }\n            if ($depth < 0) {\n                return false;\n            }\n        }\n        return $depth === 0;\n    };\n\n    $s1 = $lst[0] . $lst[1];\n    $s2 = $lst[1] . $lst[0];\n    return $check($s1) || $check($s2) ? \"Yes\" : \"No\";\n}\n",
            "/**\n * @param {array<int>} $arr\n * @param {int} $k\n * @returns {array<int>}\n */\nfunction maximum ($arr, $k) {\n    if ($k == 0) {\n        return [];\n    }\n    rsort($arr);\n    return array_slice($arr, 0, $k);\n}\n",
            "/**\n * @param {array<int>} $lst\n * @returns {int}\n */\nfunction solution ($lst) {\n    return array_reduce($lst, function($acc, $x, $i) {\n        if ($i % 2 === 0 && $x % 2 !== 0) {\n            $acc += $x;\n        }\n        return $acc;\n    }, 0);\n}",
            "function addElements ($arr, $k) {\n    return array_reduce(array_slice($arr, 0, $k), function($sum, $n) {\n        return $sum + (strlen((string)$n) <= 2 ? $n : 0);\n    }, 0);\n}\n",
            "/**\n * @param {int} $n\n * @returns {array<int>}\n */\nfunction getOddCollatz($n) {\n    $collatz = [1];\n    while ($n !== 1) {\n        if ($n % 2 !== 0) {\n            $collatz[] = $n;\n            $n = 3 * $n + 1;\n        } else {\n            $n = intdiv($n, 2);\n        }\n    }\n    sort($collatz);\n    return $collatz;\n}\n",
            "/**\n * @param {string} $date\n * @returns {bool}\n */\nfunction validDate ($date) {\n    if (strlen($date) !== 10 || $date[2] !== \"-\" || $date[5] !== \"-\") {\n        return false;\n    }\n    $m = intval(substr($date, 0, 2), 10);\n    $d = intval(substr($date, 3, 2), 10);\n    if (in_array($m, [1, 3, 5, 7, 8, 10, 12]) && $d >= 1 && $d <= 31) {\n        return true;\n    }\n    if (in_array($m, [4, 6, 9, 11]) && $d >= 1 && $d <= 30) {\n        return true;\n    }\n    if ($m === 2 && $d >= 1 && $d <= 29) {\n        return true;\n    }\n    return false;\n}\n",
            "/**\n * @param {string} $txt\n * @returns {array<string>}\n */\nfunction splitWords ($txt) {\n    if (strpos($txt, \" \") !== false) {\n        return explode(\" \", $txt);\n    } else if (strpos($txt, \",\") !== false) {\n        return explode(\",\", $txt);\n    } else {\n        $count = preg_match_all('/[a-z]/i', $txt);\n        $evenCount = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if (ctype_lower($txt[$i]) && ord($txt[$i]) % 2 === 0) {\n                $evenCount++;\n            }\n        }\n        return [$evenCount];\n    }\n}\n",
            "/**\n * @param array<int> $lst\n * @returns bool\n */\nfunction isSorted ($lst) {\n    $n = count($lst);\n    for ($i = 1; $i < $n; $i++) {\n        if ($lst[$i - 1] > $lst[$i]) {\n            return false;\n        }\n    }\n    $freq = array_count_values($lst);\n    foreach ($freq as $count) {\n        if ($count > 2) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "/**\n * @param {array<int>} $interval1\n * @param {array<int>} $interval2\n * @returns {string}\n */\nfunction intersection ($interval1, $interval2) {\n    function isPrime($n) {\n        if ($n < 2) return false;\n        for ($i = 2; $i <= floor(sqrt($n)); $i++) {\n            if ($n % $i === 0) return false;\n        }\n        return true;\n    }\n\n    $l = max($interval1[0], $interval2[0]);\n    $r = min($interval1[1], $interval2[1]);\n    $length = $r - $l;\n    return $length > 0 && isPrime($length) ? \"YES\" : \"NO\";\n}\n",
            "/**\n * @param {array<int>} $arr\n * @returns {int | null}\n */\nfunction prodSigns ($arr) {\n    if (empty($arr)) {\n        return null;\n    }\n    if (in_array(0, $arr)) {\n        return 0;\n    }\n    $sign = count(array_filter($arr, function($n) { return $n < 0; })) % 2 === 1 ? -1 : 1;\n    return $sign * array_sum(array_map('abs', $arr));\n}\n",
            "/**\n * @param {array<array<int>>} $grid\n * @param {int} $k\n * @returns {array<int>}\n */\nfunction minPath ($grid, $k) {\n    $n = count($grid);\n    $min_val = $n * $n + 1;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            if ($grid[$i][$j] === 1) {\n                $temp = [];\n                if ($i !== 0) {\n                    $temp[] = $grid[$i - 1][$j];\n                }\n                if ($j !== 0) {\n                    $temp[] = $grid[$i][$j - 1];\n                }\n                if ($i !== $n - 1) {\n                    $temp[] = $grid[$i + 1][$j];\n                }\n                if ($j !== $n - 1) {\n                    $temp[] = $grid[$i][$j + 1];\n                }\n                $min_val = min($min_val, ...$temp);\n            }\n        }\n    }\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $result[] = $i % 2 === 0 ? 1 : $min_val;\n    }\n    return $result;\n}\n",
            "/**\n * @param {int} $n\n * @returns {array<int>}\n */\nfunction tri ($n) {\n    if ($n === 0) return [1];\n    $seq = [1, 3];\n    for ($i = 2; $i <= $n; $i++) {\n        if ($i % 2 === 0) {\n            $seq[] = $i / 2 + 1;\n        } else {\n            $seq[] = $seq[$i - 1] + $seq[$i - 2] + ($i + 3) / 2;\n        }\n    }\n    return $seq;\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction digits ($n) {\n    $odds = array_filter(str_split((string)$n), function($d) {\n        return (int)$d % 2 === 1;\n    });\n    return count($odds) > 0 ? array_product($odds) : 0;\n}\n",
            "/**\n * @param {string} $s\n * @returns {bool}\n */\nfunction isNested ($s) {\n    $openIdx = [];\n    $closeIdx = [];\n\n    for ($i = 0; $i < strlen($s); $i++) {\n        $ch = $s[$i];\n        if ($ch === '[') {\n            array_push($openIdx, $i);\n        } else if ($ch === ']') {\n            array_push($closeIdx, $i);\n        }\n    }\n\n    $closeIdx = array_reverse($closeIdx);\n    $cnt = 0;\n    $i = 0;\n    $l = count($closeIdx);\n\n    foreach ($openIdx as $idx) {\n        if ($i < $l && $idx < $closeIdx[$i]) {\n            $cnt += 1;\n            $i += 1;\n        }\n    }\n\n    return $cnt >= 2;\n}\n",
            "/**\n * @param {array<float>} $lst\n * @returns {int}\n */\nfunction sumSquares ($lst) {\n    return array_sum(array_map(function($n) {\n        return pow(ceil($n), 2);\n    }, $lst));\n}\n",
            "function checkIfLastCharIsALetter ($txt) {\n    if (!$txt) {\n        return false;\n    }\n    $last = substr($txt, strrpos($txt, ' ') + 1);\n    return strlen($last) === 1 && preg_match('/[a-zA-Z]/', $last);\n}\n",
            "/**\n * @param {array<int>} $arr\n * @returns {int}\n */\nfunction canArrange ($arr) {\n    if (count($arr) <= 1) {\n        return -1;\n    }\n    $idx = [];\n    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] < $arr[$i - 1]) {\n            $idx[] = $i;\n        }\n    }\n    return !empty($idx) ? max($idx) : -1;\n}\n",
            "/**\n * @param array<int> $lst\n * @return array<int|null>\n */\nfunction largestSmallestIntegers($lst) {\n    $neg = array_filter($lst, function($i) { return $i < 0; });\n    $pos = array_filter($lst, function($i) { return $i > 0; });\n    $maxNeg = !empty($neg) ? max($neg) : null;\n    $minPos = !empty($pos) ? min($pos) : null;\n    return [$maxNeg, $minPos];\n}\n",
            "/**\n * @param mixed $a\n * @param mixed $b\n * @returns float|null\n */\nfunction compareOne($a, $b) {\n    $anyToReal = function($o) {\n        if (is_string($o)) {\n            return floatval(str_replace(',', '.', $o));\n        } elseif (is_numeric($o)) {\n            return $o;\n        }\n        throw new Exception(\"Type Error\");\n    };\n\n    $a1 = $anyToReal($a);\n    $b1 = $anyToReal($b);\n\n    if ($a1 === $b1) {\n        return null;\n    } elseif ($a1 > $b1) {\n        return $a1;\n    } else {\n        return $b1;\n    }\n}\n",
            "/**\n * @param {int} $n\n * @returns {bool}\n */\nfunction isEqualToSumEven ($n) {\n    return $n % 2 === 0 && $n >= 8;\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction specialFactorial ($n) {\n    $fact = 1;\n    $result = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $fact *= $i;\n        $result *= $fact;\n    }\n    return $result;\n}\n",
            "```\n/**\n * @param {string} $txt\n * @returns {string}\n */\nfunction fixSpaces ($txt) {\n    return preg_replace('/\\s{3,}/', '-', preg_replace('/ /', '_', $txt));\n}\n```",
            "/**\n * @param {string} $fileName\n * @returns {string}\n */\nfunction fileNameCheck($fileName) {\n    $suf = [\"txt\", \"exe\", \"dll\"];\n    $lst = explode(\".\", $fileName);\n    if (count($lst) !== 2 || !in_array(end($lst), $suf) || strlen(reset($lst)) === 0 || !ctype_alpha(reset($lst)[0]) || preg_match_all('/\\d/', reset($lst)) > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n",
            "/**\n * @param {array<int>} $lst\n * @returns {int}\n */\nfunction sumSquares ($lst) {\n    $result = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 === 0) {\n            $result += pow($lst[$i], 2);\n        } else if ($i % 4 === 0) {\n            $result += pow($lst[$i], 3);\n        } else {\n            $result += $lst[$i];\n        }\n    }\n    return $result;\n}\n",
            "/**\n * @param {int} $n\n * @returns {bool}\n */\nfunction is_prime($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= sqrt($n); $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/**\n * @param {string} $sentence\n * @returns {string}\n */\nfunction wordsInSentence ($sentence) {\n    $words = explode(\" \", $sentence);\n    $filtered_words = array_filter($words, function($w) {\n        return is_prime(strlen($w));\n    });\n    return implode(\" \", $filtered_words);\n}\n",
            "/**\n * @param {string} $x\n * @param {string} $n\n * @returns {bool}\n */\nfunction simplify ($x, $n) {\n    $xs = explode(\"/\", $x);\n    $ns = explode(\"/\", $n);\n    $num = (int)$xs[0] * (int)$ns[0];\n    $den = (int)$xs[1] * (int)$ns[1];\n    return $num % $den === 0;\n}\n",
            "/**\n * @param {array<int>} $nums\n * @returns {array<int>}\n */\nfunction orderByPoints($nums) {\n    usort($nums, function($a, $b) {\n        return digitsSum($a) - digitsSum($b);\n    });\n    return $nums;\n}\n\n/**\n * @param {int} $n\n * @returns {int}\n */\nfunction digitsSum($n) {\n    if ($n >= 0) {\n        return array_sum(array_map('intval', str_split((string)$n)));\n    } else {\n        return (intval(substr((string)$n, 0, 2))) * 2 + digitsSum(abs($n));\n    }\n}\n",
            "/**\n * @param array<int> $nums\n * @returns int\n */\nfunction specialFilter ($nums) {\n    $odds = \"13579\";\n    return count(array_filter($nums, function($n) use ($odds) {\n        return $n > 10 && $n % 2 === 1 && strpos($odds, strval($n)[0]) !== false;\n    }));\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction getMaxTriples ($n) {\n    $c = array(0, 0, 0);\n    for ($i = 1; $i <= $n; $i++) {\n        $a = $i * $i - $i + 1;\n        $c[$a % 3]++;\n    }\n    return $c[0] * $c[1] * $c[2] + (($c[0] * ($c[0] - 1) * ($c[0] - 2)) + ($c[1] * ($c[1] - 1) * ($c[1] - 2)) + ($c[2] * ($c[2] - 1) * ($c[2] - 2))) / 6;\n}\n",
            "/**\n * @param {string} $planet1\n * @param {string} $planet2\n * @returns {array<string>}\n */\nfunction bf ($planet1, $planet2) {\n    $names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if (!in_array($planet1, $names) || !in_array($planet2, $names)) {\n        return [];\n    }\n    $l = array_search($planet1, $names);\n    $r = array_search($planet2, $names);\n    if ($l > $r) {\n        list($l, $r) = array($r, $l);\n    }\n    if ($l === $r) {\n        return [];\n    }\n    return array_slice($names, $l + 1, $r - $l - 1);\n}\n",
            "/**\n * @param {array<string>} $lst\n * @returns {array<string>}\n */\nfunction sortedListSum ($lst) {\n    $result = array_filter($lst, function($s) {\n        return strlen($s) % 2 === 0;\n    });\n\n    usort($result, function($a, $b) {\n        return (strlen($a) === strlen($b)) ? strcmp($a, $b) : strlen($a) - strlen($b);\n    });\n\n    return $result;\n}\n",
            "\n/**\n * @param {int} $n\n * @param {int} $x\n * @param {int} $y\n * @returns {int}\n */\nfunction xOrY($n, $x, $y) {\n    if ($n < 2) {\n        return $y;\n    }\n    for ($i = 2; $i <= floor(sqrt($n)); $i++) {\n        if ($n % $i === 0) {\n            return $y;\n        }\n    }\n    return $x;\n}\n\n",
            "/**\n * @param {array<float>} $lst\n * @returns {int}\n */\nfunction doubleTheDifference ($lst) {\n    return array_reduce(array_map(function($n) {\n        return $n * $n;\n    }, array_filter($lst, function($n) {\n        return $n >= 0 && $n % 2 === 1;\n    })), function($acc, $curr) {\n        return $acc + $curr;\n    }, 0);\n}\n",
            "/**\n * @param array<int> $game\n * @param array<int> $guess\n * @returns array<int>\n */\nfunction compare ($game, $guess) {\n    return array_map(function($x, $i) use ($guess) {\n        return abs($x - $guess[$i]);\n    }, $game);\n}\n",
            "/**\n * @param {string} $className\n * @param {array<string>} $extensions\n * @returns {string}\n */\nfunction strongestExtension ($className, $extensions) {\n    $max_s = -INF;\n    $max_ext = \"\";\n    foreach ($extensions as $ext) {\n        $upper = strlen(preg_replace('/[^A-Z]/', '', $ext));\n        $lower = strlen(preg_replace('/[^a-z]/', '', $ext));\n        $s = $upper - $lower;\n        if ($s > $max_s) {\n            $max_s = $s;\n            $max_ext = $ext;\n        }\n    }\n    return $className . \".\" . $max_ext;\n}\n",
            "/**\n * @param {string} $a\n * @param {string} $b\n * @returns {bool}\n */\nfunction cycpatternCheck($a, $b) {\n    if (strlen($a) < strlen($b)) {\n        return false;\n    }\n    for ($i = 0; $i < strlen($b); $i++) {\n        $rotated = substr($b, $i) . substr($b, 0, $i);\n        if (strpos($a, $rotated) !== false) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param {int} $num\n * @returns {array<int>}\n */\nfunction evenOddCount ($num) {\n    $ds = strval(abs($num));\n    $even = 0;\n    for ($i = 0; $i < strlen($ds); $i++) {\n        if (intval($ds[$i]) % 2 === 0) {\n            $even++;\n        }\n    }\n    return [$even, strlen($ds) - $even];\n}\n",
            "/**\n * @param {int} $num\n * @returns {string}\n */\nfunction intToMiniRoman ($num) {\n    $values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    $numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    $res = [];\n    for ($i = 0; $i < count($values); $i++) {\n        while ($num >= $values[$i]) {\n            array_push($res, $numerals[$i]);\n            $num -= $values[$i];\n        }\n    }\n    return implode('', $res);\n}\n",
            "function rightAngleTriangle ($a, $b, $c) {\n    $s = [$a, $b, $c];\n    sort($s);\n    return $s[0] * $s[0] + $s[1] * $s[1] === $s[2] * $s[2];\n}\n",
            "/**\n * @param {array<string>} $words\n * @returns {string}\n */\nfunction findMax ($words) {\n    $max_cnt = 0;\n    $max_w = \"\";\n    foreach ($words as $w) {\n        $cnt = count(array_unique(str_split($w)));\n        if ($cnt > $max_cnt) {\n            $max_cnt = $cnt;\n            $max_w = $w;\n        } elseif ($cnt == $max_cnt) {\n            if (strcmp($max_w, $w) > 0) {\n                $max_w = $w;\n            }\n        }\n    }\n    return $max_w;\n}\n",
            "/**\n * @param {int} $num\n * @param {int} $need\n * @param {int} $remaining\n * @returns {array<int>}\n */\nfunction eat ($num, $need, $remaining) {\n    if ($need <= $remaining) {\n        return [$num + $need, $remaining - $need];\n    } else {\n        return [$num + $remaining, 0];\n    }\n}\n",
            "/**\n * @param {array<string>} $operators\n * @param {array<int>} $operands\n * @returns {int}\n */\nfunction doAlgebra($operators, $operands) {\n    $ops = $operators;\n    $nums = $operands;\n    $i = count($ops) - 1;\n    while ($i >= 0) {\n        if ($ops[$i] == \"**\") {\n            $nums[$i] = pow($nums[$i], $nums[$i + 1]);\n            array_splice($nums, $i + 1, 1);\n            array_splice($ops, $i, 1);\n        }\n        $i--;\n    }\n    $i = 0;\n    while ($i < count($ops)) {\n        if ($ops[$i] == \"*\") {\n            $nums[$i] = $nums[$i] * $nums[$i + 1];\n            array_splice($nums, $i + 1, 1);\n            array_splice($ops, $i, 1);\n            $i--;\n        } elseif ($ops[$i] == \"//\") {\n            $nums[$i] = intdiv($nums[$i], $nums[$i + 1]);\n            array_splice($nums, $i + 1, 1);\n            array_splice($ops, $i, 1);\n            $i--;\n        }\n        $i++;\n    }\n    $i = 0;\n    while ($i < count($ops)) {\n        if ($ops[$i] == \"+\") {\n            $nums[$i] = $nums[$i] + $nums[$i + 1];\n            array_splice($nums, $i + 1, 1);\n            array_splice($ops, $i, 1);\n            $i--;\n        } elseif ($ops[$i] == \"-\") {\n            $nums[$i] = $nums[$i] - $nums[$i + 1];\n            array_splice($nums, $i + 1, 1);\n            array_splice($ops, $i, 1);\n            $i--;\n        }\n        $i++;\n    }\n    return $nums[0];\n}\n",
            "/**\n * @param {string} $s\n * @returns {string}\n */\nfunction solve ($s) {\n    if (!preg_match('/[a-zA-Z]/', $s)) {\n        return strrev($s);\n    }\n    $result = [];\n    for ($i = 0; $i < strlen($s); $i++) {\n        $ch = $s[$i];\n        if (!preg_match('/[a-zA-Z]/', $ch)) {\n            $result[] = $ch;\n        } else if (ctype_upper($ch)) {\n            $result[] = strtolower($ch);\n        } else if (ctype_lower($ch)) {\n            $result[] = strtoupper($ch);\n        }\n    }\n    return implode('', $result);\n}\n",
            "/**\n * @param {string} $txt\n * @returns {string | null}\n */\nfunction stringToMd5 ($txt) {\n    if (empty($txt)) {\n        return null;\n    }\n    $md5_hash = md5($txt);\n    return $md5_hash;\n}\n",
            "/**\n * @param {int} $a\n * @param {int} $b\n * @returns {array<int>}\n */\nfunction generateIntegers ($a, $b) {\n    $lower = max(2, min($a, $b));\n    $upper = min(8, max($a, $b));\n    $result = [];\n    for ($i = $lower; $i <= $upper; $i++) {\n        if ($i % 2 === 0) {\n            array_push($result, $i);\n        }\n    }\n    return $result;\n}\n"
        ],
        "dart": [
            "bool hasCloseElements(List<double> numbers, double threshold) {\n    for (int i = 0; i < numbers.length; i++) {\n        for (int j = i + 1; j < numbers.length; j++) {\n            if ((numbers[i] - numbers[j]).abs() < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "List<String> separateParenGroups(String parenString) {\n    List<String> groups = [];\n    List<String> stk = [];\n    String currentGroup = \"\";\n    String parens = parenString.replaceAll(\" \", \"\");\n    for (var ch in parens.runes.map((rune) => String.fromCharCode(rune))) {\n        if (ch == \"(\") {\n            stk.add(ch);\n            currentGroup += ch;\n        } else if (ch == \")\") {\n            stk.removeLast();\n            currentGroup += ch;\n            if (stk.isEmpty) {\n                groups.add(currentGroup);\n                currentGroup = \"\";\n            }\n        }\n    }\n    return groups;\n}\n",
            "double truncateNumber(double num) {\n    return num - num.floor();\n}\n",
            "bool belowZero(List<int> operations) {\n    int balance = 0;\n    for (var op in operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "double meanAbsoluteDeviation(List<double> numbers) {\n    double mean = numbers.reduce((acc, num) => acc + num) / numbers.length;\n    double deviation = numbers.reduce((acc, num) => acc + (num - mean).abs());\n    return deviation / numbers.length;\n}\n",
            "List<int> intersperse(List<int> numbers, int delimiter) {\n    List<int> result = [];\n    for (int i = 0; i < numbers.length; i++) {\n        if (i != 0) {\n            result.add(delimiter);\n        }\n        result.add(numbers[i]);\n    }\n    return result;\n}\n",
            "List<int> parseNestedParens(String parenString) {\n    List<int> result = [];\n    List<String> parenGroups = parenString.split(' ');\n    for (String group in parenGroups) {\n        int maxDepth = 0;\n        int depth = 0;\n        for (String ch in group.split('')) {\n            if (ch == '(') {\n                depth += 1;\n                maxDepth = Math.max(maxDepth, depth);\n            } else if (ch == ')') {\n                depth -= 1;\n            }\n        }\n        result.add(maxDepth);\n    }\n    return result;\n}\n",
            "List<String> filterBySubstring(List<String> strs, String substring) {\n    return strs.where((s) => s.contains(substring)).toList();\n}\n",
            "List<int> sumProduct(List<int> numbers) {\n  int n_sum = numbers.reduce((acc, num) => acc + num);\n  int n_product = numbers.reduce((acc, num) => acc * num);\n  return [n_sum, n_product];\n}\n",
            "List<int> rollingMax(List<int> numbers) {\n    int maxSoFar = -Infinity;\n    List<int> result = [];\n    for (var num in numbers) {\n        maxSoFar = max(maxSoFar, num);\n        result.add(maxSoFar);\n    }\n    return result;\n}\n",
            "bool isPalindrome(String s) {\n    return s == s.split('').reversed.join('');\n}\n\nString makePalindrome(String s) {\n    if (isPalindrome(s)) {\n        return s;\n    }\n    for (int i = 0; i < s.length; i++) {\n        if (isPalindrome(s.substring(i))) {\n            return s + s.substring(0, i).split('').reversed.join('');\n        }\n    }\n    return \"\";\n}\n",
            "String stringXor(String a, String b) {\n    return List.generate(a.length, (i) => a[i] == b[i] ? '0' : '1').join('');\n}\n",
            "String? longest(List<String> strs) {\n    if (strs == null || strs.isEmpty) {\n        return null;\n    }\n    String longest_s = strs[0];\n    for (var s in strs) {\n        if (s.length > longest_s.length) {\n            longest_s = s;\n        }\n    }\n    return longest_s;\n}\n",
            "int greatestCommonDivisor(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return greatestCommonDivisor(b, a % b);\n    }\n}\n",
            "List<String> allPrefixes(String s) {\n    List<String> prefixes = [];\n    for (int i = 0; i < s.length; i++) {\n        prefixes.add(s.substring(0, i + 1));\n    }\n    return prefixes;\n}\n",
            "String stringSequence(int n) {\n  return List.generate(n + 1, (i) => i.toString()).join(' ');\n}\n",
            "int countDistinctCharacters(String s) {\n    return s.toLowerCase().split('').toSet().length;\n}\n",
            "List<int> parseMusic(String musicString) {\n  final Map<String, int> durations = {\"o\": 4, \"o|\": 2, \".|\": 1};\n  List<String> notes = musicString.split(' ');\n  return notes.map((note) => durations[note]!).toList();\n}\n",
            "int howManyTimes(String s, String substring) {\n    int times = 0;\n    for (int i = 0; i <= s.length - substring.length; i++) {\n        if (s.substring(i, i + substring.length) == substring) {\n            times += 1;\n        }\n    }\n    return times;\n}\n",
            "String sortNumbers(String numbers) {\n    final numDict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    };\n    List<String> numList = numbers.split(\" \").where((x) => numDict.containsKey(x)).toList();\n    numList.sort((a, b) => numDict[a]!.compareTo(numDict[b]!));\n    return numList.join(\" \");\n}\n",
            "List<double> findClosestElements(List<double> numbers) {\n    var sortedNumbers = [...numbers].toList()..sort();\n    double minDiff = double.infinity;\n    List<double> closestPair = [];\n    for (int i = 1; i < sortedNumbers.length; i++) {\n        double diff = sortedNumbers[i] - sortedNumbers[i - 1];\n        if (diff < minDiff) {\n            minDiff = diff;\n            closestPair = [sortedNumbers[i - 1], sortedNumbers[i]];\n        }\n    }\n    return closestPair;\n}\n",
            "List<double> rescaleToUnit(List<double> numbers) {\n    final minNum = numbers.reduce((a, b) => a < b ? a : b);\n    final maxNum = numbers.reduce((a, b) => a > b ? a : b);\n    if (minNum == maxNum) {\n        return List.filled(numbers.length, 0.0);\n    } else {\n        return numbers.map((num) => (num - minNum) / (maxNum - minNum)).toList();\n    }\n}\n",
            "List<int> filterIntegers(List<Object> values) {\n    return values.where((x) => x is int).toList();\n}\n",
            "int strLength(String s) {\n    return s.length;\n}\n",
            "int largestDivisor(int n) {\n    for (int i = 2; i < n; i++) {\n        if (n % i == 0) {\n            return (n / i).floor();\n        }\n    }\n    return 1;\n}\n",
            "List<int> factorize(int n) {\n    List<int> factors = [];\n    int divisor = 2;\n    while (divisor <= n) {\n        if (n % divisor == 0) {\n            factors.add(divisor);\n            n ~/= divisor;\n        } else {\n            divisor++;\n        }\n    }\n    return factors;\n}\n",
            "List<int> removeDuplicates(List<int> numbers) {\n    Map<int, int> counts = {};\n    for (int num in numbers) {\n        counts[num] = (counts.containsKey(num) ? counts[num]! : 0) + 1;\n    }\n    List<int> res = [];\n    for (int num in numbers) {\n        if (counts[num] == 1) {\n            res.add(num);\n        }\n    }\n    return res;\n}\n",
            "String flipCase(String s) {\n    List<String> flipped = [];\n    for (var ch in s.split('')) {\n        if (!RegExp(r'[a-zA-Z]').hasMatch(ch)) {\n            flipped.add(ch);\n        } else if (ch.toLowerCase() == ch) {\n            flipped.add(ch.toUpperCase());\n        } else {\n            flipped.add(ch.toLowerCase());\n        }\n    }\n    return flipped.join('');\n}\n",
            "String concatenate(List<String> strs) {\n    return strs.join(\"\");\n}\n",
            "List<String> filterByPrefix(List<String> strs, String prefixStr) {\n    return strs.where((s) => s.startsWith(prefixStr)).toList();\n}\n",
            "List<int> getPositive(List<int> l) {\n    return l.where((num) => num > 0).toList();\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= Math.sqrt(n).toInt(); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "double poly(List<int> xs, double x) {\n    double res = 0.0;\n    for (int i = 0; i < xs.length; i++) {\n        res += xs[i] * pow(x, i);\n    }\n    return res;\n}\n\ndouble findZero(List<int> xs) {\n    double x1 = 1.0, x2 = -1.0;\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2;\n        x2 *= 2;\n    }\n    while ((x1 - x2).abs() > 1e-10) {\n        double mid = (x1 + x2) / 2;\n        if (poly(xs, mid).abs() < 1e-10) {\n            return mid;\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2;\n}\n",
            "List<int> sortThird(List<int> l) {\n  final sortedThird = l.where((_, index) => index % 3 == 0).toList()..sort();\n  return l.map((value, index) => index % 3 == 0 ? sortedThird[index ~/ 3] : value).toList();\n}\n",
            "List<int> listUnique(List<int> l) {\n    return l.toSet().toList()..sort();\n}\n",
            "int maxElement(List<int> l) {\n    if (l == null || l.isEmpty) {\n        return 0;\n    }\n    return l.reduce((a, b) => a > b ? a : b);\n}\n",
            "int fizzBuzz(int n) {\n    int cnt = 0;\n    for (int i = 0; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            cnt += (i.toString().split('7').length - 1);\n        }\n    }\n    return cnt;\n}\n",
            "List<int> sortEven(List<int> l) {\n  List<int> sortedEven = [...l].where((_, index) => index % 2 == 0).toList()..sort();\n  return l.map((value, index) => index % 2 == 0 ? sortedEven.removeAt(0) : value).toList();\n}\n",
            "String encodeCyclic(String s) {\n    List<String> result = [];\n    for (int i = 0; i < s.length; i += 3) {\n        if (i + 3 > s.length) {\n            result.add(s.substring(i));\n        } else {\n            result.add(s.substring(i + 1, i + 3));\n            result.add(s[i]);\n        }\n    }\n    return result.join('');\n}\n\nString decodeCyclic(String s) {\n    return encodeCyclic(encodeCyclic(s));\n}\n",
            "int primeFib(int n) {\n    bool isPrime(int num) {\n        if (num < 2) return false;\n        for (int i = 2; i <= Math.sqrt(num).toInt(); i++) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n\n    List<int> f = [0, 1];\n    int cnt = 0;\n    while (cnt < n) {\n        f = [f[1], f[0] + f[1]];\n        if (isPrime(f[1])) {\n            cnt++;\n        }\n    }\n    return f[1];\n}\n",
            "bool triplesSumToZero(List<int> l) {\n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            for (int k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "int carRaceCollision(int n) {\n    return n * n;\n}\n",
            "List<int> incrList(List<int> l) {\n    return l.map((i) => i + 1).toList();\n}\n",
            "bool pairsSumToZero(List<int> l) {\n    Set<int> seen = {};\n    for (int num in l) {\n        if (seen.contains(-num)) {\n            return true;\n        }\n        seen.add(num);\n    }\n    return false;\n}\n",
            "String changeBase(int x, int bas) {\n    if (x == 0) {\n        return \"0\";\n    }\n    List<String> digits = [];\n    while (x > 0) {\n        digits.add((x % bas).toString());\n        x = (x / bas).floor();\n    }\n    return digits.reversed.join('');\n}\n",
            "double triangleArea(int a, int h) {\n    return a * h / 2;\n}\n",
            "int fib4(int n) {\n    List<int> fib = [0, 0, 2, 0];\n    for (int i = 4; i <= n; i++) {\n        fib[i % 4] = fib.reduce((acc, val) => acc + val);\n    }\n    return fib[n % 4];\n}\n",
            "double median(List<double> l) {\n    List<double> sl = List.from(l)..sort();\n    if (sl.length % 2 != 0) {\n        return sl[(sl.length ~/ 2)];\n    } else {\n        return (sl[sl.length ~/ 2] + sl[sl.length ~/ 2 - 1]) / 2;\n    }\n}\n",
            "bool isPalindrome(String txt) {\n    return txt == txt.split('').reversed().join('');\n}\n",
            "int modp(int n, int p) {\n  int ret = 1;\n  for (int i = 0; i < n; i++) {\n    ret = (ret * 2) % p;\n  }\n  return ret;\n}\n",
            "String encodeShift(String s) {\n    String result = '';\n    for (var ch in s.codeUnits) {\n        result += String.fromCharCode(((ch - 97 + 5) % 26) + 97);\n    }\n    return result;\n}\n\nString decodeShift(String s) {\n    String result = '';\n    for (var ch in s.codeUnits) {\n        result += String.fromCharCode(((ch - 97 + 21) % 26) + 97);\n    }\n    return result;\n}\n",
            "String removeVowels(String txt) {\n    const vowels = \"aeiouAEIOU\";\n    return txt.split('').where((char) => !vowels.contains(char)).join('');\n}\n",
            "bool belowThreshold(List<int> l, int t) {\n    return l.every((x) => x < t);\n}\n",
            "int add(int x, int y) {\n    return x + y;\n}\n",
            "bool sameChars(String s0, String s1) {\n    return Set.from(s0.split('')) == Set.from(s1.split(''));\n}\n",
            "int fib(int n) {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n",
            "bool correctBracketing(String brackets) {\n    int depth = 0;\n    for (int i = 0; i < brackets.length; i++) {\n        if (brackets[i] == \"<\") {\n            depth += 1;\n        } else if (brackets[i] == \">\") {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "bool monotonic(List<int> l) {\n    List<int> diff = [];\n    for (int i = 0; i < l.length - 1; i++) {\n        diff.add(l[i + 1] - l[i]);\n    }\n    return diff.every((x) => x <= 0) || diff.every((x) => x >= 0);\n}\n",
            "List<int> common(List<int> l1, List<int> l2) {\n    return [...l1.toSet()].where((item) => l2.toSet().contains(item)).toList()..sort();\n}\n",
            "int largestPrimeFactor(int n) {\n    int i = 2;\n    while (i * i <= n) {\n        if (n % i != 0) {\n            i += 1;\n        } else {\n            n ~/= i;\n        }\n    }\n    return n;\n}\n",
            "int sumToN(int n) {\n    return ((n + 1) * n) ~/ 2;\n}\n",
            "bool correctBracketing(String brackets) {\n    int depth = 0;\n    for (var b in brackets.split('')) {\n        if (b == \"(\") {\n            depth += 1;\n        } else if (b == \")\") {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "List<int> derivative(List<int> xs) {\n    return xs.map((x, i) => x * i).toList().sublist(1);\n}\n",
            "int fibfib(int n) {\n    if (n <= 1) return 0;\n    int a = 0, b = 0, c = 1;\n    while (n > 2) {\n        int temp = a + b + c;\n        a = b;\n        b = c;\n        c = temp;\n        n -= 1;\n    }\n    return c;\n}\n",
            "int vowelsCount(String s) {\n    const String vowels = \"aeiou\";\n    int cnt = 0;\n    for (int i = 0; i < s.length; i++) {\n        if (vowels.contains(s[i].toLowerCase()) || (i == s.length - 1 && s[i].toLowerCase() == \"y\")) {\n            cnt += 1;\n        }\n    }\n    return cnt;\n}\n",
            "String circularShift(int x, int shift) {\n    String x_str = x.toString();\n    if (shift > x_str.length) {\n        return x_str.split('').reversed.join('');\n    } else {\n        return x_str.substring(x_str.length - shift) + x_str.substring(0, x_str.length - shift);\n    }\n}\n",
            "int digitSum(String s) {\n    return s.where((c) => c.toUpperCase() == c && !c.contains(RegExp(r'\\d'))).map((c) => c.codeUnitAt(0)).sum;\n}\n",
            "int fruitDistribution(String s, int n) {\n    final words = s.split(' ');\n    final applesIndex = words.indexOf(\"apples\");\n    final orangesIndex = words.indexOf(\"oranges\");\n    final apples = int.parse(words[applesIndex - 1]);\n    final oranges = int.parse(words[orangesIndex - 1]);\n    return n - apples - oranges;\n}\n",
            "List<int> pluck(List<int> arr) {\n    List<int> evens = arr.where((n) => n % 2 == 0).toList();\n    if (evens.isEmpty) {\n        return [];\n    }\n    int minEven = evens.reduce((a, b) => a < b ? a : b);\n    return [minEven, arr.indexOf(minEven)];\n}\n",
            "int search(List<int> lst) {\n    Map<int, int> freqs = {};\n    for (var n in lst) {\n        freqs[n] = (freqs[n] ?? 0) + 1;\n    }\n    List<int> goodVals = freqs.keys.where((k) => freqs[k]! >= k).toList();\n    return goodVals.isNotEmpty ? goodVals.reduce(max) : -1;\n}\n",
            "List<int> strangeSortList(List<int> lst) {\n    List<int> sl = lst.toSet().toList()..sort();\n    List<int> result = [];\n    int left = 0;\n    int right = sl.length - 1;\n    while (left <= right) {\n        result.add(sl[left]);\n        left += 1;\n        if (left <= right) {\n            result.add(sl[right]);\n            right -= 1;\n        }\n    }\n    return result;\n}\n",
            "double triangleArea(int a, int b, int c) {\n    if (a + b > c && a + c > b && b + c > a) {\n        double s = (a + b + c) / 2.0;\n        return sqrt(s * (s - a) * (s - b) * (s - c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "bool willItFly(List<int> q, int w) {\n    if (q.length == 0) {\n        return false;\n    }\n    bool isPalin = q.every((value, index) => value == q[q.length - index - 1]);\n    int total = q.reduce((acc, curr) => acc + curr);\n    return isPalin && total <= w;\n}\n",
            "int smallestChange(List<int> arr) {\n    int ans = 0;\n    for (int i = 0; i < arr.length ~/ 2; i++) {\n        if (arr[i] != arr[arr.length - i - 1]) {\n            ans += 1;\n        }\n    }\n    return ans;\n}\n",
            "List<String> totalMatch(List<String> lst1, List<String> lst2) {\n    int cnt1 = lst1.fold(0, (acc, s) => acc + s.length);\n    int cnt2 = lst2.fold(0, (acc, s) => acc + s.length);\n    return cnt1 <= cnt2 ? lst1 : lst2;\n}\n",
            "bool isMultiplyPrime(int a) {\n    bool isPrime(int n) {\n        if (n < 2) return false;\n        for (int i = 2; i <= Math.sqrt(n).floor(); i++) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n\n    int cnt = 0;\n    for (int i = 2; i <= a; i++) {\n        if (isPrime(i)) {\n            while (a % i == 0) {\n                cnt += 1;\n                a ~/= i;\n            }\n        }\n    }\n    return cnt == 3;\n}\n",
            "bool isSimplePower(int x, int n) {\n    if (n < 2) {\n        return x == n;\n    }\n    int tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp == x;\n}\n",
            "bool isCube(int a) {\n    a = a.abs();\n    final root = (a.toDouble() / 3).pow(1.0 / 3.0).round();\n    return root * root * root == a;\n}\n",
            "int hexKey(String num) {\n    return num.split('').where((x) => \"2357BD\".contains(x)).length;\n}\n",
            "String decimalToBinary(int dec) {\n    String binary = dec.toRadixString(2);\n    return \"db${binary}db\";\n}\n",
            "bool isHappy(String s) {\n    if (s.length < 3) {\n        return false;\n    }\n    for (int i = 0; i < s.length - 2; i++) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "List<String> numericalLetterGrade(List<double> grades) {\n    List<String> result = [];\n    for (double g in grades) {\n        if (g == 4.0) {\n            result.add(\"A+\");\n        } else if (g > 3.7) {\n            result.add(\"A\");\n        } else if (g > 3.3) {\n            result.add(\"A-\");\n        } else if (g > 3.0) {\n            result.add(\"B+\");\n        } else if (g > 2.7) {\n            result.add(\"B\");\n        } else if (g > 2.3) {\n            result.add(\"B-\");\n        } else if (g > 2.0) {\n            result.add(\"C+\");\n        } else if (g > 1.7) {\n            result.add(\"C\");\n        } else if (g > 1.3) {\n            result.add(\"C-\");\n        } else if (g > 1.0) {\n            result.add(\"D+\");\n        } else if (g > 0.7) {\n            result.add(\"D\");\n        } else if (g > 0.0) {\n            result.add(\"D-\");\n        } else {\n            result.add(\"E\");\n        }\n    }\n    return result;\n}\n",
            "bool primeLength(String s) {\n    final length = s.length;\n    if (length < 2) {\n        return false;\n    }\n    for (int i = 2; i <= Math.sqrt(length); i++) {\n        if (length % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "int startsOneEnds(int n) {\n    if (n == 1) {\n        return 1;\n    }\n    return 2 * 9 * 10.pow(n - 2);\n}\n",
            "String solve(int n) {\n    int digitsSum = n.toString().split('').map((digit) => int.parse(digit)).reduce((sum, digit) => sum + digit);\n    return digitsSum.toRadixString(2);\n}\n",
            "int add(List<int> lst) {\n    return lst.fold(0, (acc, x) {\n        if (lst.indexOf(x) % 2 == 1 && x % 2 == 0) {\n            acc += x;\n        }\n        return acc;\n    });\n}\n",
            "String antiShuffle(String s) {\n    return s.split(\" \").map((word) {\n        return word.split(\"\").toList()..sort().join();\n    }).join(\" \");\n}\n",
            "List<List<int>> getRow(List<List<int>> lst, int x) {\n    List<List<int>> coords = [];\n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                coords.add([i, j]);\n            }\n        }\n    }\n    return coords\n      ..sort((a, b) => a[0] - b[0] != 0 ? a[0] - b[0] : b[1] - a[1]);\n}\n",
            "List<int> sortArray(List<int> arr) {\n  if (arr.isEmpty) {\n    return [];\n  }\n  if ((arr.first + arr.last) % 2 == 0) {\n    return List.from(arr)..sort((a, b) => b.compareTo(a));\n  } else {\n    return List.from(arr)..sort();\n  }\n}\n",
            "String encrypt(String s) {\n    String result = '';\n    for (var ch in s.codeUnits) {\n        int shifted = ch + 4;\n        if (shifted > 'z'.codeUnitAt(0)) {\n            shifted -= 26;\n        }\n        result += String.fromCharCode(shifted);\n    }\n    return result;\n}\n",
            "int? nextSmallest(List<int> lst) {\n    var sl = lst.toSet().toList();\n    sl.sort((a, b) => a - b);\n    if (sl.length < 2) {\n        return null;\n    }\n    return sl[1];\n}\n",
            "int isBored(String s) {\n    List<String> sentences = s.split(/[\\.\\!\\?]\\s*/);\n    return sentences.where((sentence) => sentence.length >= 2 && sentence.startsWith(\"I \")).length;\n}\n",
            "bool anyInt(Object x, Object y, Object z) {\n    if (x is int && y is int && z is int) {\n        if ((x + y == z) || (x + z == y) || (y + z == x)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "String encode(String message) {\n    const String vowels = \"aeiouAEIOU\";\n    List<String> result = [];\n    for (var ch in message.split('')) {\n        if (RegExp(r'[a-zA-Z]').hasMatch(ch)) {\n            String ch1 = ch.isLowerCase() ? ch.toUpperCase() : ch.toLowerCase();\n            if (vowels.contains(ch1)) {\n                ch1 = String.fromCharCode(ch1.codeUnitAt(0) + 2);\n            }\n            result.add(ch1);\n        } else {\n            result.add(ch);\n        }\n    }\n    return result.join('');\n}\n",
            "int skjkasdkd(List<int> lst) {\n    bool is_prime(int n) {\n        if (n < 2) return false;\n        for (int i = 2; i <= sqrt(n).toInt(); i++) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n\n    List<int> primes = lst.where(is_prime).toList();\n    if (primes.isEmpty) return 0;\n\n    String largest = primes.reduce((a, b) => a > b ? a : b).toString();\n    return largest.split('').map(int.parse).reduce((sum, digit) => sum + digit);\n}\n",
            "bool checkDictCase(Map<String, String> d) {\n  if (d.isEmpty) {\n    return false;\n  }\n  bool allLower = true;\n  bool allUpper = true;\n  for (var key in d.keys) {\n    if (!key.toLowerCase().containsOnly(key)) {\n      allLower = false;\n    }\n    if (!key.toUpperCase().containsOnly(key)) {\n      allUpper = false;\n    }\n  }\n  return allLower || allUpper;\n}\n",
            "List<int> countUpTo(int n) {\n    List<int> primes = [];\n    for (int num = 2; num < n; num++) {\n        if (primes.every((p) => num % p != 0)) {\n            primes.add(num);\n        }\n    }\n    return primes;\n}\n",
            "int multiply(int a, int b) {\n    return (a.abs() % 10) * (b.abs() % 10);\n}\n",
            "int countUpper(String s) {\n    const vowels = \"AEIOU\";\n    int count = 0;\n    for (int i = 0; i < s.length; i++) {\n        if (i % 2 == 0 && vowels.contains(s[i])) {\n            count++;\n        }\n    }\n    return count;\n}\n",
            "int closestInteger(String value) {\n    double num = double.parse(value);\n    if (num >= 0) {\n        return (num + 0.5).floor();\n    } else {\n        return (num - 0.5).ceil();\n    }\n}\n",
            "List<int> makeAPile(int n) {\n    return List.generate(n, (i) => n + 2 * i);\n}\n",
            "List<String> wordsString(String s) {\n    return s.split(RegExp(r'[,\\s]+')).where((w) => w.isNotEmpty).toList();\n}\n",
            "int chooseNum(int x, int y) {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 == 0) {\n        return y;\n    }\n    return x != y ? y - 1 : -1;\n}\n",
            "String? roundedAvg(int n, int m) {\n    if (n > m) {\n        return null;\n    }\n    final r_avg = ((m + n) / 2.0).round();\n    return r_avg.toRadixString(2);\n}\n",
            "List<int> uniqueDigits(List<int> x) {\n    bool allDigitsOdd(String s) {\n        for (var digit in s) {\n            if (int.parse(digit.toString()) % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    return x.where((num) => allDigitsOdd(num.toString())).toList()..sort();\n}\n",
            "List<String> byLength(List<int> arr) {\n    List<String> digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    List<int> sortedArr = arr.where((x) => x >= 1 && x <= 9).toList()..sort((a, b) => b - a);\n    return sortedArr.map((x) => digitNames[x - 1]).toList();\n}\n",
            "List<int> f(int n) {\n    List<int> nums = List.generate(n, (i) => i + 1);\n    return nums.map((i) => ((i % 2 != 0)\n        ? nums.sublist(0, i).reduce((x, y) => x + y)\n        : nums.sublist(0, i).reduce((x, y) => x * y))).toList();\n}\n",
            "List<int> evenOddPalindrome(int n) {\n    List<int> cnt = [0, 0];\n    for (int i = 1; i <= n; i++) {\n        String txt = i.toString();\n        if (txt == txt.split('').reversed.join('')) {\n            cnt[i % 2] += 1;\n        }\n    }\n    return cnt;\n}\n",
            "int digitsSum(int n) {\n  String nStr = n.toString();\n  if (n >= 0) {\n    return nStr.split('').map((digit) => int.parse(digit)).reduce((sum, digit) => sum + digit);\n  } else {\n    return int.parse(nStr.substring(0, 2)) * 2 + digitsSum(n.abs());\n  }\n}\n\nint countNums(List<int> arr) {\n  return arr.where((n) => digitsSum(n) > 0).length;\n}\n",
            "bool moveOneBall(List<int> arr) {\n    if (arr.length == 0) {\n        return true;\n    }\n    List<int> sortedArr = List.from(arr)..sort();\n    for (int i = 0; i < arr.length; i++) {\n        if (\n            arr.sublist(i).toString() == sortedArr.sublist(0, arr.length - i).toString() &&\n            arr.sublist(0, i).toString() == sortedArr.sublist(arr.length - i).toString()\n        ) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "String canExchange(List<int> lst1, List<int> lst2) {\n    int odd_cnt = lst1.where((num) => num % 2 != 0).length;\n    int even_cnt = lst2.where((num) => num % 2 == 0).length;\n    return even_cnt >= odd_cnt ? \"YES\" : \"NO\";\n}\n",
            "Map<String, int> histogram(String test) {\n    Map<String, int> freq = {};\n    List<String> words = test.split(\" \").where((w) => w.isNotEmpty).toList();\n    for (String w in words) {\n        freq[w] = (freq[w] ?? 0) + 1;\n    }\n    Map<String, int> result = {};\n    if (freq.length > 0) {\n        int max_freq = freq.values.reduce((a, b) => a > b ? a : b);\n        for (MapEntry<String, int> entry in freq.entries) {\n            if (entry.value == max_freq) {\n                result[entry.key] = entry.value;\n            }\n        }\n    }\n    return result;\n}\n",
            "List<String> reverseDelete(String s, String c) {\n    bool isPalindrome(String str) {\n        return str == str.split('').reversed.join('');\n    }\n\n    String s1 = s.split('').where((ch) => !c.contains(ch)).join('');\n    return [s1, isPalindrome(s1) ? \"yes\" : \"no\"];\n}\n",
            "List<String> oddCount(List<String> lst) {\n    List<String> result = [];\n    for (String num in lst) {\n        int n = 0;\n        for (int i = 0; i < num.length; i++) {\n            if ((num.codeUnitAt(i)) % 2 == 1) {\n                n++;\n            }\n        }\n        String rs = \"the number of odd elements in the string i of the input.\";\n        result.add(rs.replaceFirst(\"i\", n.toString()));\n    }\n    return result;\n}\n",
            "```cpp\nint minSubArraySum(List<int> nums) {\n    int min_sum = 0;\n    int cur_sum = 0;\n    for (var n in nums) {\n        cur_sum = Math.min(cur_sum + n, 0);\n        min_sum = Math.min(cur_sum, min_sum);\n    }\n    if (min_sum == 0) {\n        min_sum = List<int>.from(nums).reduce(Math.min);\n    }\n    return min_sum;\n}\n```",
            "int maxFill(List<List<int>> grid, int capacity) {\n    return grid.fold(0, (total, arr) {\n        return total + ((arr.reduce((sum, num) => sum + num) / capacity).ceil());\n    });\n}\n",
            "int countOnes(int num) {\n  return num.toRadixString(2).split('1').length - 1;\n}\n\nList<int> sortArray(List<int> arr) {\n  return arr.toList()..sort((a, b) => countOnes(a) == countOnes(b) ? a.compareTo(b) : countOnes(a).compareTo(countOnes(b)));\n}\n",
            "List<String> selectWords(String s, int n) {\n  const consonants = \"bcdfghjklmnpqrstvwxyz\";\n  final words = s.split(\" \").where((w) => w.isNotEmpty).toList();\n  return words.where((w) =>\n      w.toLowerCase().split(\"\").where((c) => consonants.contains(c)).length == n);\n}\n",
            "String getClosestVowel(String word) {\n    const vowels = \"aeiouAEIOU\";\n    for (int i = word.length - 2; i > 0; i--) {\n        if (vowels.contains(word[i]) && !vowels.contains(word[i - 1]) && !vowels.contains(word[i + 1])) {\n            return word[i];\n        }\n    }\n    return \"\";\n}\n",
            "String matchParens(List<String> lst) {\n    bool check(String s) {\n        int depth = 0;\n        for (var ch in s.codeUnits) {\n            if (String.fromCharCode(ch) == \"(\") {\n                depth += 1;\n            } else {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n\n    String s1 = lst[0] + lst[1];\n    String s2 = lst[1] + lst[0];\n    return check(s1) || check(s2) ? \"Yes\" : \"No\";\n}\n",
            "List<int> maximum(List<int> arr, int k) {\n    if (k == 0) {\n        return [];\n    }\n    return arr.map((e) => e).toList()..sort();\n}\n",
            "int solution(List<int> lst) {\n    return lst.fold(0, (acc, x) {\n        int i = lst.indexOf(x);\n        if (i % 2 == 0 && x % 2 != 0) {\n            acc += x;\n        }\n        return acc;\n    });\n}\n",
            "int addElements(List<int> arr, int k) {\n    return arr.take(k).fold(0, (sum, n) {\n        return sum + ((n.toString().length <= 2) ? n : 0);\n    });\n}\n",
            "List<int> getOddCollatz(int n) {\n    List<int> collatz = [1];\n    while (n != 1) {\n        if (n % 2 != 0) {\n            collatz.add(n);\n            n = 3 * n + 1;\n        } else {\n            n = n ~/ 2;\n        }\n    }\n    return collatz..sort();\n}\n",
            "bool validDate(String date) {\n    if (date.length != 10 || date[2] != '-' || date[5] != '-') {\n        return false;\n    }\n    int m = int.parse(date.substring(0, 2));\n    int d = int.parse(date.substring(3, 5));\n    if ([1, 3, 5, 7, 8, 10, 12].contains(m) && d >= 1 && d <= 31) {\n        return true;\n    }\n    if ([4, 6, 9, 11].contains(m) && d >= 1 && d <= 30) {\n        return true;\n    }\n    if (m == 2 && d >= 1 && d <= 29) {\n        return true;\n    }\n    return false;\n}\n",
            "List<String> splitWords(String txt) {\n    if (txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if (txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        final count = txt.where((c) => c.compareTo('a') >= 0 && c.compareTo('z') <= 0 && c.codeUnitAt(0) % 2 == 0).length;\n        return [count.toString()];\n    }\n}",
            "bool isSorted(List<int> lst) {\n    for (int i = 1; i < lst.length; i++) {\n        if (lst[i - 1] > lst[i]) {\n            return false;\n        }\n    }\n    Map<int, int> freq = {};\n    for (int num in lst) {\n        freq[num] = (freq[num] ?? 0) + 1;\n    }\n    return freq.values.every((count) => count <= 2);\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i <= Math.sqrt(n).toInt(); i++) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nString intersection(List<int> interval1, List<int> interval2) {\n    int l = Math.max(interval1[0], interval2[0]);\n    int r = Math.min(interval1[1], interval2[1]);\n    int length = r - l;\n    return length > 0 && isPrime(length) ? \"YES\" : \"NO\";\n}\n",
            "int? prodSigns(List<int> arr) {\n    if (arr.isEmpty) {\n        return null;\n    }\n    if (arr.contains(0)) {\n        return 0;\n    }\n    int sign = arr.where((n) => n < 0).length % 2 == 1 ? -1 : 1;\n    return sign * arr.map((n) => n.abs()).reduce((acc, curr) => acc + curr);\n}\n",
            "List<int> minPath(List<List<int>> grid, int k) {\n    int n = grid.length;\n    int min_val = n * n + 1;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            if (grid[i][j] == 1) {\n                List<int> temp = [];\n                if (i != 0) {\n                    temp.add(grid[i - 1][j]);\n                }\n                if (j != 0) {\n                    temp.add(grid[i][j - 1]);\n                }\n                if (i != n - 1) {\n                    temp.add(grid[i + 1][j]);\n                }\n                if (j != n - 1) {\n                    temp.add(grid[i][j + 1]);\n                }\n                min_val = [min_val, ...temp].reduce((a, b) => a < b ? a : b);\n            }\n        }\n    }\n    List<int> result = [];\n    for (int i = 0; i < k; i++) {\n        result.add(i % 2 == 0 ? 1 : min_val);\n    }\n    return result;\n}\n",
            "List<int> tri(int n) {\n    if (n == 0) return [1];\n    List<double> seq = [1, 3];\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0) {\n            seq.add((i / 2 + 1));\n        } else {\n            seq.add(seq[i - 1] + seq[i - 2] + ((i + 3) / 2));\n        }\n    }\n    return seq.map((e) => e.toInt()).toList();\n}\n",
            "int digits(int n) {\n    List<int> odds = n.toString().split('').map(int.parse).where((d) => d % 2 == 1).toList();\n    return odds.length > 0 ? odds.reduce((x, y) => x * y) : 0;\n}\n",
            "bool isNested(String s) {\n    List<int> openIdx = [];\n    List<int> closeIdx = [];\n    \n    for (int i = 0; i < s.length; i++) {\n        String ch = s[i];\n        if (ch == '[') {\n            openIdx.add(i);\n        } else if (ch == ']') {\n            closeIdx.add(i);\n        }\n    }\n    \n    closeIdx.reverse();\n    int cnt = 0;\n    int i = 0;\n    int l = closeIdx.length;\n    \n    for (int idx in openIdx) {\n        if (i < l && idx < closeIdx[i]) {\n            cnt += 1;\n            i += 1;\n        }\n    }\n    \n    return cnt >= 2;\n}\n",
            "int sumSquares(List<double> lst) {\n    return lst.fold(0, (acc, n) => acc + Math.pow(n.ceil(), 2).toInt());\n}\n",
            "bool checkIfLastCharIsALetter(String txt) {\n    if (txt.isEmpty) {\n        return false;\n    }\n    final last = txt.substring(txt.lastIndexOf(' ') + 1);\n    return last.length == 1 && RegExp(r'[a-zA-Z]').hasMatch(last[0]);\n}\n",
            "int canArrange(List<int> arr) {\n    if (arr.length <= 1) {\n        return -1;\n    }\n    List<int> idx = [];\n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i] < arr[i - 1]) {\n            idx.add(i);\n        }\n    }\n    return idx.isNotEmpty ? idx.reduce((a, b) => a > b ? a : b) : -1;\n}\n",
            "List<int?> largestSmallestIntegers(List<int> lst) {\n    List<int> neg = lst.where((i) => i < 0).toList();\n    List<int> pos = lst.where((i) => i > 0).toList();\n    int? maxNeg = neg.isNotEmpty ? neg.reduce(max) : null;\n    int? minPos = pos.isNotEmpty ? pos.reduce(min) : null;\n    return [maxNeg, minPos];\n}\n",
            "double? compareOne(Object a, Object b) {\n    double anyToReal(o) {\n        if (o is String) {\n            return double.parse(o.replaceAll(',', '.'));\n        } else if (o is num) {\n            return o.toDouble();\n        }\n        throw Exception(\"Type Error\");\n    }\n\n    final a1 = anyToReal(a);\n    final b1 = anyToReal(b);\n\n    if (a1 == b1) {\n        return null;\n    } else if (a1 > b1) {\n        return a1;\n    } else {\n        return b1;\n    }\n}\n",
            "bool isEqualToSumEven(int n) {\n    return n % 2 == 0 && n >= 8;\n}\n",
            "int specialFactorial(int n) {\n    int fact = 1;\n    int result = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n        result *= fact;\n    }\n    return result;\n}\n",
            "String fixSpaces(String txt) {\n    return txt.replaceAllMapped(new RegExp(r'\\s{3,}'), (match) => '-').replaceAll(' ', '_');\n}\n",
            "String fileNameCheck(String fileName) {\n  final List<String> suf = [\"txt\", \"exe\", \"dll\"];\n  final List<String> lst = fileName.split(\".\");\n  if (lst.length != 2 || !suf.contains(lst[1]) || lst[0].isEmpty || !RegExp(r'^[a-zA-Z]').hasMatch(lst[0]) || (lst[0].allMatches(RegExp(r'\\d')).length > 3)) {\n    return \"No\";\n  }\n  return \"Yes\";\n}\n",
            "int sumSquares(List<int> lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            result += lst[i] * lst[i];\n        } else if (i % 4 == 0) {\n            result += lst[i] * lst[i] * lst[i];\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "bool isPrime(int n) {\n  if (n < 2) return false;\n  for (int i = 2; i <= sqrt(n); i++) {\n    if (n % i == 0) return false;\n  }\n  return true;\n}\n\nString wordsInSentence(String sentence) {\n  List<String> words = sentence.split(\" \");\n  return words.where((w) => isPrime(w.length)).join(\" \");\n}\n",
            "bool simplify(String x, String n) {\n    final xs = x.split(\"/\");\n    final ns = n.split(\"/\");\n    final num = int.parse(xs[0]) * int.parse(ns[0]);\n    final den = int.parse(xs[1]) * int.parse(ns[1]);\n    return num % den == 0;\n}\n",
            "List<int> orderByPoints(List<int> nums) {\n    int digitsSum(int n) {\n        String nStr = n.toString();\n        if (n >= 0) {\n            return nStr.split('').map((d) => int.parse(d)).reduce((a, b) => a + b);\n        } else {\n            return int.parse(nStr.substring(0, 2)) * 2 + digitsSum(n.abs());\n        }\n    }\n\n    return nums.toList()..sort((a, b) => digitsSum(a).compareTo(digitsSum(b)));\n}\n",
            "int specialFilter(List<int> nums) {\n    String odds = \"13579\";\n    return nums.where((n) => n > 10 && n % 2 == 1 && odds.contains(n.toString()[0])).length;\n}\n",
            "int getMaxTriples(int n) {\n    List<int> c = [0, 0, 0];\n    for (int i = 1; i <= n; i++) {\n        int a = i * i - i + 1;\n        c[a % 3]++;\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) ~/ 6;\n}\n",
            "List<String> bf(String planet1, String planet2) {\n    List<String> names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if (!names.contains(planet1) || !names.contains(planet2)) {\n        return [];\n    }\n    int l = names.indexOf(planet1);\n    int r = names.indexOf(planet2);\n    if (l > r) {\n        var temp = l;\n        l = r;\n        r = temp;\n    }\n    if (l == r) {\n        return [];\n    }\n    return names.sublist(l + 1, r);\n}\n",
            "List<String> sortedListSum(List<String> lst) {\n  var result = lst.where((s) => s.length % 2 == 0).toList();\n  return result..sort((a, b) {\n    if (a.length == b.length) {\n      return a.compareTo(b);\n    }\n    return a.length.compareTo(b.length);\n  });\n}\n",
            "int xOrY(int n, int x, int y) {\n    if (n < 2) {\n        return y;\n    }\n    for (int i = 2; i <= n ~/ math.sqrt(n); i++) {\n        if (n % i == 0) {\n            return y;\n        }\n    }\n    return x;\n}\n",
            "int doubleTheDifference(List<double> lst) {\n    return lst.where((n) => n >= 0 && n % 2 == 1).map<int>((n) => (n * n).toInt()).reduce((acc, curr) => acc + curr);\n}\n",
            "List<int> compare(List<int> game, List<int> guess) {\n    return game.asMap().entries.map((entry) => (entry.value - guess[entry.key]).abs()).toList();\n}\n",
            "String strongestExtension(String className, List<String> extensions) {\n    int max_s = -1000; // Initialize to a very low number\n    String max_ext = \"\";\n    for (var ext in extensions) {\n        int upper = ext.where((c) => 'A' <= c && c <= 'Z').length;\n        int lower = ext.where((c) => 'a' <= c && c <= 'z').length;\n        int s = upper - lower;\n        if (s > max_s) {\n            max_s = s;\n            max_ext = ext;\n        }\n    }\n    return \"$className.$max_ext\";\n}\n",
            "bool cycpatternCheck(String a, String b) {\n    if (a.length < b.length) {\n        return false;\n    }\n    for (int i = 0; i < b.length; i++) {\n        String rotated = b.substring(i) + b.substring(0, i);\n        if (a.contains(rotated)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "List<int> evenOddCount(int num) {\n    String ds = (num.abs()).toString();\n    int even = 0;\n    for (String d in ds.split('')) {\n        if (int.parse(d) % 2 == 0) {\n            even++;\n        }\n    }\n    return [even, ds.length - even];\n}\n",
            "String intToMiniRoman(int num) {\n    const values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    const numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    final res = <String>[];\n    for (int i = 0; i < values.length; i++) {\n        while (num >= values[i]) {\n            res.add(numerals[i]);\n            num -= values[i];\n        }\n    }\n    return res.join('');\n}\n",
            "bool rightAngleTriangle(int a, int b, int c) {\n    List<int> s = [a, b, c]..sort();\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2];\n}\n",
            "String findMax(List<String> words) {\n    int maxCnt = 0;\n    String maxW = \"\";\n    for (var w in words) {\n        var cnt = Set.from(w).length;\n        if (cnt > maxCnt) {\n            maxCnt = cnt;\n            maxW = w;\n        } else if (cnt == maxCnt) {\n            maxW = min(maxW, w);\n        }\n    }\n    return maxW;\n}\n",
            "List<int> eat(int num, int need, int remaining) {\n    if (need <= remaining) {\n        return [num + need, remaining - need];\n    } else {\n        return [num + remaining, 0];\n    }\n}\n",
            "int doAlgebra(List<String> operators, List<int> operands) {\n    List<String> ops = List.from(operators);\n    List<int> nums = List.from(operands);\n    int i = ops.length - 1;\n    while (i >= 0) {\n        if (ops[i] == \"**\") {\n            nums[i] = pow(nums[i], nums[i + 1]);\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n        }\n        i -= 1;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] == \"*\") {\n            nums[i] = nums[i] * nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i -= 1;\n        } else if (ops[i] == \"//\") {\n            nums[i] = nums[i] ~/ nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] == \"+\") {\n            nums[i] = nums[i] + nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i -= 1;\n        } else if (ops[i] == \"-\") {\n            nums[i] = nums[i] - nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    return nums[0];\n}\n",
            "String solve(String s) {\n    if (!RegExp(r'[a-zA-Z]').hasMatch(s)) {\n        return s.split('').reversed.join('');\n    }\n    List<String> result = [];\n    for (String ch in s.split('')) {\n        if (!RegExp(r'[a-zA-Z]').hasMatch(ch)) {\n            result.add(ch);\n        } else if (ch == ch.toUpperCase()) {\n            result.add(ch.toLowerCase());\n        } else if (ch == ch.toLowerCase()) {\n            result.add(ch.toUpperCase());\n        }\n    }\n    return result.join('');\n}\n",
            "import 'dart:convert';\nimport 'dart:crypto';\n\nString? stringToMd5(String txt) {\n  if (txt.isEmpty) {\n    return null;\n  }\n  var md5 = crypto.md5.convert(utf8.encode(txt));\n  return md5.toString();\n}\n",
            "List<int> generateIntegers(int a, int b) {\n    final lower = Math.max(2, Math.min(a, b));\n    final upper = Math.min(8, Math.max(a, b));\n    final result = <int>[];\n    for (int i = lower; i <= upper; i++) {\n        if (i % 2 == 0) {\n            result.add(i);\n        }\n    }\n    return result;\n}\n"
        ],
        "cpp": [
            "bool hasCloseElements(const vector<double>& numbers, double threshold) {\n    for (size_t i = 0; i < numbers.size(); i++) {\n        for (size_t j = i + 1; j < numbers.size(); j++) {\n            if (fabs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "vector<string> separateParenGroups(const string& paren_string) {\n    vector<string> groups;\n    stack<char> stk;\n    string currentGroup = \"\";\n    string parens = paren_string;\n    for (char ch : parens) {\n        if (ch == '(') {\n            stk.push(ch);\n            currentGroup += ch;\n        } else if (ch == ')') {\n            stk.pop();\n            currentGroup += ch;\n            if (stk.empty()) {\n                groups.push_back(currentGroup);\n                currentGroup = \"\";\n            }\n        }\n    }\n    return groups;\n}\n",
            "double truncateNumber(double num) {\n    return num - static_cast<int>(num);\n}\n",
            "bool belowZero(const vector<int>& operations) {\n    int balance = 0;\n    for (int op : operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "double meanAbsoluteDeviation(const vector<double>& numbers) {\n    double sum = 0.0;\n    for (double num : numbers) {\n        sum += num;\n    }\n    double mean = sum / numbers.size();\n    \n    double deviationSum = 0.0;\n    for (double num : numbers) {\n        deviationSum += std::abs(num - mean);\n    }\n    \n    return deviationSum / numbers.size();\n}\n",
            "vector<int> intersperse(const vector<int>& numbers, int delimiter) {\n    vector<int> result;\n    for (size_t i = 0; i < numbers.size(); i++) {\n        if (i != 0) {\n            result.push_back(delimiter);\n        }\n        result.push_back(numbers[i]);\n    }\n    return result;\n}\n",
            "#include <vector>\n#include <string>\n\nstd::vector<int> parseNestedParens(const std::string& parenString) {\n    std::vector<int> result;\n    size_t start = 0;\n    while (start < parenString.length()) {\n        int maxDepth = 0;\n        int depth = 0;\n        for (size_t i = start; i < parenString.length(); ++i) {\n            if (parenString[i] == '(') {\n                depth += 1;\n                maxDepth = std::max(maxDepth, depth);\n            } else if (parenString[i] == ')') {\n                depth -= 1;\n            } else if (parenString[i] == ' ') {\n                start = i + 1;\n                break;\n            }\n        }\n        result.push_back(maxDepth);\n    }\n    return result;\n}\n",
            "#include <vector>\n#include <string>\n\nstd::vector<std::string> filterBySubstring(const std::vector<std::string>& strs, const std::string& substring) {\n    std::vector<std::string> result;\n    for (const auto& s : strs) {\n        if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n        }\n    }\n    return result;\n}\n",
            "vector<int> sumProduct(const vector<int>& numbers) {\n    int n_sum = accumulate(numbers.begin(), numbers.end(), 0);\n    int n_product = accumulate(numbers.begin(), numbers.end(), 1, multiplies<int>());\n    return {n_sum, n_product};\n}\n",
            "#include <vector>\n#include <algorithm>\n\nstd::vector<int> rollingMax(const std::vector<int>& numbers) {\n    int maxSoFar = -INT_MAX;\n    std::vector<int> result;\n    for (const int num : numbers) {\n        maxSoFar = std::max(maxSoFar, num);\n        result.push_back(maxSoFar);\n    }\n    return result;\n}\n",
            "string makePalindrome(const string& s) {\n    auto isPalindrome = [](const string& str) -> bool {\n        return str == string(str.rbegin(), str.rend());\n    };\n\n    if (isPalindrome(s)) {\n        return s;\n    }\n    for (size_t i = 0; i < s.length(); i++) {\n        if (isPalindrome(s.substr(i))) {\n            return s + string(s.begin(), s.begin() + i).rbegin().base();\n        }\n    }\n    return \"\";\n}\n",
            "#include <string>\nusing namespace std;\n\nstring stringXor(const string& a, const string& b) {\n    string result = \"\";\n    for (size_t i = 0; i < a.length(); ++i) {\n        result += (a[i] == b[i]) ? '0' : '1';\n    }\n    return result;\n}\n",
            "#include <string>\n#include <vector>\n\nstd::optional<std::string> longest(const std::vector<std::string>& strs) {\n    if (strs.empty()) {\n        return std::nullopt;\n    }\n    std::string longest_s = strs[0];\n    for (const auto& s : strs) {\n        if (s.length() > longest_s.length()) {\n            longest_s = s;\n        }\n    }\n    return longest_s;\n}\n",
            "int greatestCommonDivisor(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return greatestCommonDivisor(b, a % b);\n    }\n}\n",
            "#include <string>\n#include <vector>\n\nusing namespace std;\n\nvector<string> allPrefixes(const string& s) {\n    vector<string> prefixes;\n    for (int i = 0; i < s.length(); i++) {\n        prefixes.push_back(s.substr(0, i + 1));\n    }\n    return prefixes;\n}\n",
            "string stringSequence(int n) {\n    stringstream ss;\n    for (int i = 0; i <= n; ++i) {\n        ss << i;\n        if (i < n) {\n            ss << ' ';\n        }\n    }\n    return ss.str();\n}\n",
            "int countDistinctCharacters(const string& s) {\n    unordered_set<char> uniqueChars;\n    for (char c : s) {\n        uniqueChars.insert(tolower(c));\n    }\n    return uniqueChars.size();\n}\n",
            "vector<int> parseMusic(const string& music_string) {\n    vector<int> durations = {{4, \"o\"}, {2, \"o|\"}, {1, \".|\"}};\n    vector<string> notes;\n    stringstream ss(music_string);\n    string note;\n    while (ss >> note) {\n        for (const auto& [duration, symbol] : durations) {\n            if (note == symbol) {\n                result.push_back(duration);\n                break;\n            }\n        }\n    }\n    return result;\n}\n",
            "int howManyTimes(const string& s, const string& substring) {\n    int times = 0;\n    for (size_t i = 0; i <= s.length() - substring.length(); ++i) {\n        if (s.substr(i, substring.length()) == substring) {\n            times += 1;\n        }\n    }\n    return times;\n}\n",
            "#include <sstream>\n#include <vector>\n#include <unordered_map>\n#include <algorithm>\n\nusing namespace std;\n\nstring sortNumbers(const string& numbers) {\n    unordered_map<string, int> numDict = {\n        {\"zero\", 0},\n        {\"one\", 1},\n        {\"two\", 2},\n        {\"three\", 3},\n        {\"four\", 4},\n        {\"five\", 5},\n        {\"six\", 6},\n        {\"seven\", 7},\n        {\"eight\", 8},\n        {\"nine\", 9}\n    };\n\n    vector<string> numList;\n    stringstream ss(numbers);\n    string word;\n    while (ss >> word) {\n        if (numDict.find(word) != numDict.end()) {\n            numList.push_back(word);\n        }\n    }\n\n    sort(numList.begin(), numList.end(), [&numDict](const string& a, const string& b) {\n        return numDict[a] < numDict[b];\n    });\n\n    string result;\n    for (size_t i = 0; i < numList.size(); ++i) {\n        if (i > 0) result += \" \";\n        result += numList[i];\n    }\n\n    return result;\n}\n",
            "vector<double> findClosestElements(const vector<double>& numbers) {\n    vector<double> sortedNumbers = numbers;\n    sort(sortedNumbers.begin(), sortedNumbers.end());\n    double minDiff = numeric_limits<double>::infinity();\n    vector<double> closestPair;\n    for (size_t i = 1; i < sortedNumbers.size(); i++) {\n        double diff = sortedNumbers[i] - sortedNumbers[i - 1];\n        if (diff < minDiff) {\n            minDiff = diff;\n            closestPair = {sortedNumbers[i - 1], sortedNumbers[i]};\n        }\n    }\n    return closestPair;\n}\n",
            "vector<double> rescaleToUnit(const vector<double>& numbers) {\n    double minNum = *min_element(numbers.begin(), numbers.end());\n    double maxNum = *max_element(numbers.begin(), numbers.end());\n    if (minNum == maxNum) {\n        return vector<double>(numbers.size(), 0.0);\n    } else {\n        vector<double> rescaled;\n        for (double num : numbers) {\n            rescaled.push_back((num - minNum) / (maxNum - minNum));\n        }\n        return rescaled;\n    }\n}\n",
            "#include <vector>\n#include <type_traits>\n\nusing variant_type = std::variant<int, double, std::string>;\n\nvector<int> filterIntegers(const vector<variant_type>& values) {\n    vector<int> result;\n    for (const auto& x : values) {\n        if (std::holds_alternative<int>(x)) {\n            result.push_back(std::get<int>(x));\n        }\n    }\n    return result;\n}\n",
            "int strLength(const string& s) {\n    return s.length();\n}\n",
            "int largestDivisor(int n) {\n    for (int i = 2; i < n; i++) {\n        if (n % i == 0) {\n            return n / i;\n        }\n    }\n    return 1;\n}\n",
            "vector<int> factorize(int n) {\n    vector<int> factors;\n    int divisor = 2;\n    while (divisor <= n) {\n        if (n % divisor == 0) {\n            factors.push_back(divisor);\n            n /= divisor;\n        } else {\n            divisor += 1;\n        }\n    }\n    return factors;\n}\n",
            "vector<int> removeDuplicates(const vector<int>& numbers) {\n    unordered_map<int, int> counts;\n    for (int num : numbers) {\n        counts[num]++;\n    }\n    vector<int> res;\n    for (int num : numbers) {\n        if (counts[num] == 1) {\n            res.push_back(num);\n        }\n    }\n    return res;\n}\n",
            "std::string flipCase(const std::string& s) {\n    std::string flipped;\n    for (char ch : s) {\n        if (!std::isalpha(ch)) {\n            flipped.push_back(ch);\n        } else if (std::islower(ch)) {\n            flipped.push_back(std::toupper(ch));\n        } else {\n            flipped.push_back(std::tolower(ch));\n        }\n    }\n    return flipped;\n}\n",
            "string concatenate(const vector<string>& strs) {\n    string result;\n    for (const auto& str : strs) {\n        result += str;\n    }\n    return result;\n}\n",
            "#include <vector>\n#include <string>\n\nusing namespace std;\n\nvector<string> filterByPrefix(const vector<string>& strs, const string& prefix_str) {\n    vector<string> result;\n    for (const auto& s : strs) {\n        if (s.find(prefix_str) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;\n}\n",
            "vector<int> getPositive(const vector<int>& l) {\n    vector<int> result;\n    for (int num : l) {\n        if (num > 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\n",
            "bool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= std::sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "#include <vector>\n#include <cmath>\n\ndouble poly(const std::vector<int>& xs, double x) {\n    double res = 0.0;\n    for (size_t i = 0; i < xs.size(); i++) {\n        res += xs[i] * std::pow(x, i);\n    }\n    return res;\n}\n\ndouble findZero(const std::vector<int>& xs) {\n    double x1 = 1.0, x2 = -1.0;\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2;\n        x2 *= 2;\n    }\n    while (std::abs(x1 - x2) > 1e-10) {\n        double mid = (x1 + x2) / 2;\n        if (poly(xs, mid) == 0) {\n            return mid;\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2;\n}\n",
            "vector<int> sortThird(const vector<int>& l) {\n    vector<int> sortedThird;\n    for (size_t i = 0; i < l.size(); ++i) {\n        if (i % 3 == 0) {\n            sortedThird.push_back(l[i]);\n        }\n    }\n    sort(sortedThird.begin(), sortedThird.end());\n    \n    vector<int> result = l;\n    for (size_t i = 0; i < l.size(); ++i) {\n        if (i % 3 == 0) {\n            result[i] = sortedThird[i / 3];\n        }\n    }\n    return result;\n}\n",
            "#include <vector>\n#include <set>\n#include <algorithm>\n\nvector<int> listUnique(const vector<int>& l) {\n    set<int> uniqueElements(l.begin(), l.end());\n    vector<int> result(uniqueElements.begin(), uniqueElements.end());\n    sort(result.begin(), result.end());\n    return result;\n}\n",
            "int maxElement(const vector<int>& l) {\n    if (l.empty()) {\n        return 0;\n    }\n    return *max_element(l.begin(), l.end());\n}\n",
            "int fizzBuzz(int n) {\n    int cnt = 0;\n    for (int i = 0; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            string str = to_string(i);\n            cnt += count(str.begin(), str.end(), '7');\n        }\n    }\n    return cnt;\n}\n",
            "vector<int> sortEven(const vector<int>& l) {\n    vector<int> sortedEven;\n    for (size_t i = 0; i < l.size(); ++i) {\n        if (i % 2 == 0) {\n            sortedEven.push_back(l[i]);\n        }\n    }\n    sort(sortedEven.begin(), sortedEven.end());\n    \n    vector<int> result = l;\n    size_t evenIndex = 0;\n    for (size_t i = 0; i < result.size(); ++i) {\n        if (i % 2 == 0) {\n            result[i] = sortedEven[evenIndex++];\n        }\n    }\n    return result;\n}\n",
            "string encodeCyclic(const string& s) {\n    string result;\n    for (size_t i = 0; i < s.length(); i += 3) {\n        if (i + 3 > s.length()) {\n            result.append(s.substr(i));\n        } else {\n            result.append(s.substr(i + 1, 2));\n            result.push_back(s[i]);\n        }\n    }\n    return result;\n}\n\nstring decodeCyclic(const string& s) {\n    return encodeCyclic(encodeCyclic(s));\n}\n",
            "int primeFib(int n) {\n    auto isPrime = [](int num) -> bool {\n        if (num < 2) return false;\n        for (int i = 2; i <= std::sqrt(num); i++) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    };\n\n    int f[2] = {0, 1};\n    int cnt = 0;\n    while (cnt < n) {\n        std::swap(f[0], f[1]);\n        f[1] += f[0];\n        if (isPrime(f[1])) {\n            cnt += 1;\n        }\n    }\n    return f[1];\n}\n",
            "bool triplesSumToZero(const vector<int>& l) {\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = i + 1; j < l.size(); j++) {\n            for (int k = j + 1; k < l.size(); k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "int carRaceCollision(int n) {\n    return n * n;\n}\n",
            "vector<int> incrList(const vector<int>& l) {\n    vector<int> result;\n    for (int i : l) {\n        result.push_back(i + 1);\n    }\n    return result;\n}\n",
            "#include <unordered_set>\n#include <vector>\n\nusing namespace std;\n\nbool pairsSumToZero(const vector<int>& l) {\n    unordered_set<int> seen;\n    for (int num : l) {\n        if (seen.find(-num) != seen.end()) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    return false;\n}\n",
            "string changeBase(int x, int bas) {\n    if (x == 0) {\n        return \"0\";\n    }\n    string digits = \"\";\n    while (x > 0) {\n        digits += to_string(x % bas);\n        x = x / bas;\n    }\n    reverse(digits.begin(), digits.end());\n    return digits;\n}\n",
            "double triangleArea(int a, int h) {\n    return a * h / 2.0;\n}\n",
            "int fib4(int n) {\n    int fib[4] = {0, 0, 2, 0};\n    for (int i = 4; i <= n; i++) {\n        int sum = 0;\n        for (int j = 0; j < 4; j++) {\n            sum += fib[j];\n        }\n        fib[i % 4] = sum;\n    }\n    return fib[n % 4];\n}\n",
            "double median(const vector<double>& l) {\n    vector<double> sl = l;\n    sort(sl.begin(), sl.end());\n    if (sl.size() % 2 != 0) {\n        return sl[sl.size() / 2];\n    } else {\n        return (sl[sl.size() / 2] + sl[sl.size() / 2 - 1]) / 2;\n    }\n}\n",
            "bool isPalindrome(const string& txt) {\n    return txt == string(txt.rbegin(), txt.rend());\n}\n",
            "int modp(int n, int p) {\n    int ret = 1;\n    for (int i = 0; i < n; i++) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}\n",
            "string encodeShift(const string& s) {\n    string result;\n    for (char ch : s) {\n        result += char(((ch - 'a' + 5) % 26) + 'a');\n    }\n    return result;\n}\n\nstring decodeShift(const string& s) {\n    string result;\n    for (char ch : s) {\n        result += char(((ch - 'a' + 21) % 26) + 'a');\n    }\n    return result;\n}\n",
            "string removeVowels(const string& txt) {\n    string vowels = \"aeiouAEIOU\";\n    string result;\n    for (char c : txt) {\n        if (vowels.find(c) == string::npos) {\n            result += c;\n        }\n    }\n    return result;\n}\n",
            "bool belowThreshold(const std::vector<int>& l, int t) {\n    return std::all_of(l.begin(), l.end(), [t](int x){ return x < t; });\n}\n",
            "int add(int x, int y) {\n    return x + y;\n}\n",
            "bool sameChars(const string& s0, const string& s1) {\n    unordered_set<char> set0(s0.begin(), s0.end());\n    unordered_set<char> set1(s1.begin(), s1.end());\n    return set0 == set1;\n}\n",
            "int fib(int n) {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n",
            "#include <string>\n\nbool correctBracketing(const std::string& brackets) {\n    int depth = 0;\n    for (char b : brackets) {\n        if (b == '<') {\n            depth += 1;\n        } else if (b == '>') {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "bool monotonic(const vector<int>& l) {\n    if (l.size() < 2) return true;\n    \n    bool non_increasing = true;\n    bool non_decreasing = true;\n    \n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] > l[i - 1]) non_increasing = false;\n        if (l[i] < l[i - 1]) non_decreasing = false;\n    }\n    \n    return non_increasing || non_decreasing;\n}\n",
            "#include <vector>\n#include <unordered_set>\n#include <algorithm>\n\nusing namespace std;\n\nvector<int> common(const vector<int>& l1, const vector<int>& l2) {\n    unordered_set<int> set1(l1.begin(), l1.end());\n    unordered_set<int> set2(l2.begin(), l2.end());\n    vector<int> result;\n    \n    for (const int& item : set1) {\n        if (set2.find(item) != set2.end()) {\n            result.push_back(item);\n        }\n    }\n    \n    sort(result.begin(), result.end());\n    return result;\n}\n",
            "int largestPrimeFactor(int n) {\n    int i = 2;\n    while (i * i <= n) {\n        if (n % i) {\n            i += 1;\n        } else {\n            n /= i;\n        }\n    }\n    return n;\n}\n",
            "int sumToN(int n) {\n    return ((n + 1) * n) / 2;\n}\n",
            "bool correctBracketing(const string& brackets) {\n    int depth = 0;\n    for (char b : brackets) {\n        if (b == '(') {\n            depth += 1;\n        } else if (b == ')') {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n",
            "vector<int> derivative(const vector<int>& xs) {\n    vector<int> result;\n    for (size_t i = 1; i < xs.size(); ++i) {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\n",
            "int fibfib(int n) {\n    if (n <= 1) return 0;\n    int a = 0, b = 0, c = 1;\n    while (n > 2) {\n        std::tie(a, b, c) = std::make_tuple(b, c, a + b + c);\n        n -= 1;\n    }\n    return c;\n}\n",
            "int vowelsCount(const string& s) {\n    const string vowels = \"aeiou\";\n    int cnt = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (vowels.find(tolower(s[i])) != string::npos || (i == s.length() - 1 && tolower(s[i]) == 'y')) {\n            cnt += 1;\n        }\n    }\n    return cnt;\n}\n",
            "string circularShift(int x, int shift) {\n    string x_str = to_string(x);\n    if (shift > x_str.length()) {\n        reverse(x_str.begin(), x_str.end());\n        return x_str;\n    } else {\n        return x_str.substr(x_str.length() - shift) + x_str.substr(0, x_str.length() - shift);\n    }\n}\n",
            "int digitSum(const string& s) {\n    int sum = 0;\n    for (char c : s) {\n        if (isupper(c)) {\n            sum += static_cast<int>(c);\n        }\n    }\n    return sum;\n}\n",
            "int fruitDistribution(const string& s, int n) {\n    istringstream iss(s);\n    string word;\n    vector<string> words;\n    while (iss >> word) {\n        words.push_back(word);\n    }\n    \n    auto it = find(words.begin(), words.end(), \"apples\");\n    int apples = stoi(*(it - 1));\n    \n    it = find(words.begin(), words.end(), \"oranges\");\n    int oranges = stoi(*(it - 1));\n    \n    return n - apples - oranges;\n}\n",
            "#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<int> pluck(const vector<int>& arr) {\n    vector<int> evens;\n    for (int n : arr) {\n        if (n % 2 == 0) {\n            evens.push_back(n);\n        }\n    }\n    if (evens.empty()) {\n        return {};\n    }\n    int minEven = *min_element(evens.begin(), evens.end());\n    auto it = find(arr.begin(), arr.end(), minEven);\n    return {minEven, static_cast<int>(distance(arr.begin(), it))};\n}\n",
            "#include <vector>\n#include <unordered_map>\n#include <string>\n#include <algorithm>\n\nint search(const std::vector<int>& lst) {\n    std::unordered_map<int, int> freqs;\n    for (int n : lst) {\n        freqs[n]++;\n    }\n    \n    std::vector<int> goodVals;\n    for (const auto& kv : freqs) {\n        if (kv.second >= kv.first) {\n            goodVals.push_back(kv.first);\n        }\n    }\n    \n    return !goodVals.empty() ? *std::max_element(goodVals.begin(), goodVals.end()) : -1;\n}\n",
            "vector<int> strangeSortList(const vector<int>& lst) {\n    vector<int> sl = lst;\n    sort(sl.begin(), sl.end());\n    vector<int> result;\n    int left = 0;\n    int right = sl.size() - 1;\n    while (left <= right) {\n        result.push_back(sl[left]);\n        left += 1;\n        if (left <= right) {\n            result.push_back(sl[right]);\n            right -= 1;\n        }\n    }\n    return result;\n}\n",
            "double triangleArea(int a, int b, int c) {\n    if (a + b > c && a + c > b && b + c > a) {\n        double s = (a + b + c) / 2.0;\n        return sqrt(s * (s - a) * (s - b) * (s - c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "bool willItFly(const vector<int>& q, int w) {\n    if (q.empty()) {\n        return false;\n    }\n    bool isPalin = true;\n    for (size_t i = 0; i < q.size(); ++i) {\n        if (q[i] != q[q.size() - i - 1]) {\n            isPalin = false;\n            break;\n        }\n    }\n    int total = accumulate(q.begin(), q.end(), 0);\n    return isPalin && total <= w;\n}\n",
            "#include <vector>\nusing namespace std;\n\nint smallestChange(const vector<int>& arr) {\n    int ans = 0;\n    for (int i = 0; i < arr.size() / 2; i++) {\n        if (arr[i] != arr[arr.size() - i - 1]) {\n            ans += 1;\n        }\n    }\n    return ans;\n}\n",
            "#include <string>\n#include <vector>\n\nusing namespace std;\n\nvector<string> totalMatch(const vector<string>& lst1, const vector<string>& lst2) {\n    int cnt1 = 0;\n    for (const string& s : lst1) {\n        cnt1 += s.length();\n    }\n    \n    int cnt2 = 0;\n    for (const string& s : lst2) {\n        cnt2 += s.length();\n    }\n    \n    return cnt1 <= cnt2 ? lst1 : lst2;\n}\n",
            "bool isMultiplyPrime(int a) {\n    auto isPrime = [](int n) -> bool {\n        if (n < 2) return false;\n        for (int i = 2; i <= std::sqrt(n); i++) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    };\n\n    int cnt = 0;\n    for (int i = 2; i <= a; i++) {\n        if (isPrime(i)) {\n            while (a % i == 0) {\n                cnt += 1;\n                a /= i;\n            }\n        }\n    }\n    return cnt === 3;\n}\n",
            "bool isSimplePower(int x, int n) {\n    if (n < 2) {\n        return x === n;\n    }\n    long tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp == x;\n}\n",
            "bool isCube(int a) {\n    a = std::abs(a);\n    int root = std::round(std::cbrt(a));\n    return root * root * root == a;\n}\n",
            "#include <string>\nusing namespace std;\n\nint hexKey(const string& num) {\n    int count = 0;\n    for (char x : num) {\n        if (\"2357BD\".find(x) != string::npos) {\n            count++;\n        }\n    }\n    return count;\n}\n",
            "string decimalToBinary(int dec) {\n    string binary = bitset<32>(dec).to_string();\n    binary = binary.substr(binary.find('1'));\n    return \"db\" + binary + \"db\";\n}\n",
            "bool isHappy(const string& s) {\n    if (s.length() < 3) {\n        return false;\n    }\n    for (let i = 0; i < s.length() - 2; i++) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "#include <vector>\n#include <string>\n\nstd::vector<std::string> numericalLetterGrade(const std::vector<double>& grades) {\n    std::vector<std::string> result;\n    for (double g : grades) {\n        if (g == 4.0) {\n            result.push_back(\"A+\");\n        } else if (g > 3.7) {\n            result.push_back(\"A\");\n        } else if (g > 3.3) {\n            result.push_back(\"A-\");\n        } else if (g > 3.0) {\n            result.push_back(\"B+\");\n        } else if (g > 2.7) {\n            result.push_back(\"B\");\n        } else if (g > 2.3) {\n            result.push_back(\"B-\");\n        } else if (g > 2.0) {\n            result.push_back(\"C+\");\n        } else if (g > 1.7) {\n            result.push_back(\"C\");\n        } else if (g > 1.3) {\n            result.push_back(\"C-\");\n        } else if (g > 1.0) {\n            result.push_back(\"D+\");\n        } else if (g > 0.7) {\n            result.push_back(\"D\");\n        } else if (g > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\n",
            "bool primeLength(const string& s) {\n    int length = s.length();\n    if (length < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(length); i++) {\n        if (length % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "int startsOneEnds(int n) {\n    if (n == 1) {\n        return 1;\n    }\n    return 2 * 9 * static_cast<int>(pow(10, n - 2));\n}\n",
            "string solve(int n) {\n    int digitsSum = 0;\n    while (n > 0) {\n        digitsSum += n % 10;\n        n /= 10;\n    }\n    return bitset<32>(digitsSum).to_string().substr(32 - __builtin_popcount(digitsSum));\n}\n",
            "int add(const vector<int>& lst) {\n    int acc = 0;\n    for (size_t i = 0; i < lst.size(); ++i) {\n        if (i % 2 == 1 && lst[i] % 2 == 0) {\n            acc += lst[i];\n        }\n    }\n    return acc;\n}\n",
            "string antiShuffle(const string& s) {\n    stringstream ss(s);\n    string word;\n    string result;\n    while (ss >> word) {\n        sort(word.begin(), word.end());\n        if (!result.empty()) {\n            result += \" \";\n        }\n        result += word;\n    }\n    return result;\n}\n",
            "#include <vector>\nusing namespace std;\n\nvector<vector<int>> getRow(const vector<vector<int>>& lst, int x) {\n    vector<vector<int>> coords;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                coords.push_back({i, j});\n            }\n        }\n    }\n    sort(coords.begin(), coords.end(), [](const vector<int>& a, const vector<int>& b) {\n        return a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]);\n    });\n    return coords;\n}\n",
            "vector<int> sortArray(const vector<int>& arr) {\n    if (arr.empty()) {\n        return {};\n    }\n    if ((arr.front() + arr.back()) % 2 == 0) {\n        vector<int> sortedArr = arr;\n        sort(sortedArr.begin(), sortedArr.end(), greater<int>());\n        return sortedArr;\n    } else {\n        vector<int> sortedArr = arr;\n        sort(sortedArr.begin(), sortedArr.end());\n        return sortedArr;\n    }\n}\n",
            "string encrypt(const string& s) {\n    string result = \"\";\n    for (char ch : s) {\n        int shifted = ch + 4;\n        if (shifted > 'z') {\n            shifted -= 26;\n        }\n        result += static_cast<char>(shifted);\n    }\n    return result;\n}\n",
            "#include <vector>\n#include <set>\n#include <algorithm>\n#include <optional>\n\nstd::optional<int> nextSmallest(const std::vector<int>& lst) {\n    std::set<int> s(lst.begin(), lst.end());\n    if (s.size() < 2) {\n        return std::nullopt;\n    }\n    auto it = s.begin();\n    ++it;\n    return *it;\n}\n",
            "#include <string>\n#include <vector>\n#include <sstream>\n\nusing namespace std;\n\nint isBored(const string& s) {\n    vector<string> sentences;\n    stringstream ss(s);\n    string sentence;\n    while (getline(ss, sentence, '.')) {\n        sentences.push_back(sentence);\n    }\n    while (getline(ss, sentence, '!')) {\n        sentences.push_back(sentence);\n    }\n    while (getline(ss, sentence, '?')) {\n        sentences.push_back(sentence);\n    }\n\n    int count = 0;\n    for (const auto& sentence : sentences) {\n        string trimmed_sentence;\n        for (char c : sentence) {\n            if (!isspace(c)) {\n                break;\n            }\n        }\n        if (sentence.length() >= 2 && trimmed_sentence.compare(0, 2, \"I \") == 0) {\n            count++;\n        }\n    }\n\n    return count;\n}\n",
            "#include <any>\n#include <typeinfo>\n\nbool anyInt(const std::any& x, const std::any& y, const std::any& z) {\n    if (x.type() == typeid(int) && y.type() == typeid(int) && z.type() == typeid(int)) {\n        int a = std::any_cast<int>(x);\n        int b = std::any_cast<int>(y);\n        int c = std::any_cast<int>(z);\n        if ((a + b == c) || (a + c == b) || (b + c == a)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "string encode(const string& message) {\n    string vowels = \"aeiouAEIOU\";\n    string result;\n    for (char ch : message) {\n        if (isalpha(ch)) {\n            char ch1 = islower(ch) ? toupper(ch) : tolower(ch);\n            if (vowels.find(ch1) != string::npos) {\n                ch1 += 2;\n            }\n            result.push_back(ch1);\n        } else {\n            result.push_back(ch);\n        }\n    }\n    return result;\n}\n",
            "int skjkasdkd(const vector<int>& lst) {\n    auto is_prime = [](int n) -> bool {\n        if (n < 2) return false;\n        for (int i = 2; i <= sqrt(n); i++) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    };\n\n    vector<int> primes;\n    for (int num : lst) {\n        if (is_prime(num)) {\n            primes.push_back(num);\n        }\n    }\n\n    if (primes.empty()) return 0;\n\n    int largest = *max_element(primes.begin(), primes.end());\n    string largest_str = to_string(largest);\n    int sum_of_digits = 0;\n    for (char digit : largest_str) {\n        sum_of_digits += digit - '0';\n    }\n    return sum_of_digits;\n}\n",
            "bool checkDictCase(const unordered_map<string, string>& d) {\n    if (d.empty()) {\n        return false;\n    }\n    bool allLower = true;\n    bool allUpper = true;\n    for (const auto& pair : d) {\n        const string& key = pair.first;\n        for (char c : key) {\n            if (!islower(c)) {\n                allLower = false;\n            }\n            if (!isupper(c)) {\n                allUpper = false;\n            }\n        }\n    }\n    return allLower || allUpper;\n}\n",
            "#include <vector>\n\nstd::vector<int> countUpTo(int n) {\n    std::vector<int> primes;\n    for (int num = 2; num < n; num++) {\n        bool isPrime = true;\n        for (const int& p : primes) {\n            if (num % p == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            primes.push_back(num);\n        }\n    }\n    return primes;\n}\n",
            "int multiply(int a, int b) {\n    return (abs(a) % 10) * (abs(b) % 10);\n}\n",
            "int countUpper(const string& s) {\n    const string vowels = \"AEIOU\";\n    int count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (i % 2 == 0 && vowels.find(s[i]) != string::npos) {\n            count++;\n        }\n    }\n    return count;\n}\n",
            "#include <cmath>\n#include <string>\n\nint closestInteger(const std::string& value) {\n    double num = std::stod(value);\n    if (num >= 0) {\n        return static_cast<int>(std::floor(num + 0.5));\n    } else {\n        return static_cast<int>(std::ceil(num - 0.5));\n    }\n}\n",
            "std::vector<int> makeAPile(int n) {\n    std::vector<int> pile(n);\n    for (int i = 0; i < n; ++i) {\n        pile[i] = n + 2 * i;\n    }\n    return pile;\n}\n",
            "vector<string> wordsString(const string& s) {\n    vector<string> result;\n    stringstream ss(s);\n    string word;\n    while (getline(ss, word, ' ')) {\n        if (!word.empty()) {\n            result.push_back(word);\n        }\n    }\n    return result;\n}\n",
            "int chooseNum(int x, int y) {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 == 0) {\n        return y;\n    }\n    return x != y ? y - 1 : -1;\n}\n",
            "#include <string>\n#include <optional>\n\nstd::optional<std::string> roundedAvg(int n, int m) {\n    if (n > m) {\n        return std::nullopt;\n    }\n    int r_avg = (int)(round((m + n) / 2.0));\n    std::string result = std::bitset<32>(r_avg).to_string();\n    // Remove leading zeros\n    const auto pos = result.find('1');\n    return pos != std::string::npos ? result.substr(pos) : \"0\";\n}\n",
            "#include <vector>\n#include <string>\n#include <algorithm>\n\nvector<int> uniqueDigits(const vector<int>& x) {\n    auto allDigitsOdd = [](const string& s) {\n        for (char digit : s) {\n            if ((digit - '0') % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    vector<int> result;\n    for (int num : x) {\n        if (allDigitsOdd(to_string(num))) {\n            result.push_back(num);\n        }\n    }\n\n    sort(result.begin(), result.end());\n    return result;\n}\n",
            "vector<string> byLength(const vector<int>& arr) {\n    const vector<string> digitNames = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    vector<int> sortedArr;\n    \n    for (int x : arr) {\n        if (x >= 1 && x <= 9) {\n            sortedArr.push_back(x);\n        }\n    }\n    \n    sort(sortedArr.begin(), sortedArr.end(), greater<int>());\n    \n    vector<string> result;\n    for (int x : sortedArr) {\n        result.push_back(digitNames[x - 1]);\n    }\n    \n    return result;\n}\n",
            "#include <vector>\n#include <numeric>\n\nstd::vector<int> f(int n) {\n    std::vector<int> nums(n);\n    for (int i = 0; i < n; ++i) {\n        nums[i] = i + 1;\n    }\n    std::vector<int> result(n);\n    for (int i = 0; i < n; ++i) {\n        if (nums[i] % 2 != 0) {\n            result[i] = std::accumulate(nums.begin(), nums.begin() + i + 1, 0);\n        } else {\n            result[i] = std::accumulate(nums.begin(), nums.begin() + i + 1, 1, std::multiplies<int>());\n        }\n    }\n    return result;\n}\n",
            "vector<int> evenOddPalindrome(int n) {\n    vector<int> cnt(2, 0);\n    for (int i = 1; i <= n; i++) {\n        string txt = to_string(i);\n        if (txt == string(txt.rbegin(), txt.rend())) {\n            cnt[i % 2] += 1;\n        }\n    }\n    return cnt;\n}\n",
            "#include <vector>\n#include <string>\n#include <cmath>\n\nint digitsSum(int n) {\n    std::string nStr = std::to_string(n);\n    if (n >= 0) {\n        return std::accumulate(nStr.begin(), nStr.end(), 0, [](int sum, char digit) {\n            return sum + (digit - '0');\n        });\n    } else {\n        int firstTwoDigits = stoi(nStr.substr(0, 2));\n        return firstTwoDigits * 2 + digitsSum(std::abs(n));\n    }\n}\n\nint countNums(const std::vector<int>& arr) {\n    return std::count_if(arr.begin(), arr.end(), [](int n) { \n        return digitsSum(n) > 0; \n    });\n}\n",
            "bool moveOneBall(const vector<int>& arr) {\n    if (arr.empty()) {\n        return true;\n    }\n    vector<int> sortedArr = arr;\n    sort(sortedArr.begin(), sortedArr.end());\n    for (size_t i = 0; i < arr.size(); ++i) {\n        vector<int> leftPart(arr.begin(), arr.begin() + i);\n        vector<int> rightPart(arr.begin() + i, arr.end());\n        vector<int> sortedLeftPart(sortedArr.begin() + arr.size() - i, sortedArr.end());\n        vector<int> sortedRightPart(sortedArr.begin(), sortedArr.begin() + arr.size() - i);\n        if (leftPart == sortedRightPart && rightPart == sortedLeftPart) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "string canExchange(const vector<int>& lst1, const vector<int>& lst2) {\n    int odd_cnt = 0;\n    for (int num : lst1) {\n        if (num % 2 != 0) {\n            odd_cnt++;\n        }\n    }\n    int even_cnt = 0;\n    for (int num : lst2) {\n        if (num % 2 == 0) {\n            even_cnt++;\n        }\n    }\n    return even_cnt >= odd_cnt ? \"YES\" : \"NO\";\n}\n",
            "unordered_map<string, int> histogram(const string& test) {\n    unordered_map<string, int> freq;\n    istringstream iss(test);\n    string w;\n    while (iss >> w) {\n        if (!w.empty()) {\n            freq[w]++;\n        }\n    }\n    unordered_map<string, int> result;\n    if (!freq.empty()) {\n        int max_freq = 0;\n        for (const auto& entry : freq) {\n            if (entry.second > max_freq) {\n                max_freq = entry.second;\n            }\n        }\n        for (const auto& entry : freq) {\n            if (entry.second == max_freq) {\n                result[entry.first] = entry.second;\n            }\n        }\n    }\n    return result;\n}\n",
            "vector<string> reverseDelete(const string& s, const string& c) {\n    auto isPalindrome = [](const string& str) -> bool {\n        return str == string(str.rbegin(), str.rend());\n    };\n\n    string s1;\n    for (char ch : s) {\n        if (c.find(ch) == string::npos) {\n            s1 += ch;\n        }\n    }\n    return {s1, isPalindrome(s1) ? \"yes\" : \"no\"};\n}\n",
            "vector<string> oddCount(const vector<string>& lst) {\n    vector<string> result;\n    for (const string& num : lst) {\n        int n = 0;\n        for (char d : num) {\n            if (!isdigit(d)) continue; // Ensure only digits are considered\n            n += (d % 2 == 1);\n        }\n        string rs = \"the number of odd elements in the string i of the input.\";\n        replace(rs.begin(), rs.end(), 'i', char('0' + n));\n        result.push_back(rs);\n    }\n    return result;\n}\n",
            "int minSubArraySum(const std::vector<int>& nums) {\n    int min_sum = 0;\n    int cur_sum = 0;\n    for (int n : nums) {\n        cur_sum = std::min(cur_sum + n, 0);\n        min_sum = std::min(cur_sum, min_sum);\n    }\n    if (min_sum == 0) {\n        min_sum = *std::min_element(nums.begin(), nums.end());\n    }\n    return min_sum;\n}\n",
            "#include <vector>\n#include <cmath>\n\nint maxFill(const std::vector<std::vector<int>>& grid, int capacity) {\n    int total = 0;\n    for (const auto& arr : grid) {\n        int sum = 0;\n        for (int num : arr) {\n            sum += num;\n        }\n        total += std::ceil(static_cast<double>(sum) / capacity);\n    }\n    return total;\n}\n",
            "vector<int> sortArray(const vector<int>& arr) {\n    auto countOnes = [](int num) -> int {\n        return __builtin_popcount(num);\n    };\n    vector<int> result(arr);\n    sort(result.begin(), result.end(), [countOnes](int a, int b) -> bool {\n        int onesA = countOnes(a), onesB = countOnes(b);\n        return onesA == onesB ? a < b : onesA < onesB;\n    });\n    return result;\n}\n",
            "#include <string>\n#include <vector>\n#include <sstream>\n#include <algorithm>\n\nusing namespace std;\n\nvector<string> selectWords(const string& s, int n) {\n    string consonants = \"bcdfghjklmnpqrstvwxyz\";\n    vector<string> words;\n    stringstream ss(s);\n    string word;\n    \n    while (ss >> word) {\n        if (!word.empty()) {\n            int consonantCount = count_if(word.begin(), word.end(), [&consonants](char c) {\n                return consonants.find(tolower(c)) != string::npos;\n            });\n            \n            if (consonantCount == n) {\n                words.push_back(word);\n            }\n        }\n    }\n    \n    return words;\n}\n",
            "string getClosestVowel(const string& word) {\n    const string vowels = \"aeiouAEIOU\";\n    for (int i = word.length() - 2; i > 0; i--) {\n        if (vowels.find(word[i]) != string::npos && vowels.find(word[i - 1]) == string::npos && vowels.find(word[i + 1]) == string::npos) {\n            return string(1, word[i]);\n        }\n    }\n    return \"\";\n}\n",
            "string matchParens(const vector<string>& lst) {\n    auto check = [](const string& s) -> bool {\n        int depth = 0;\n        for (char ch : s) {\n            if (ch == '(') {\n                depth += 1;\n            } else {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    };\n\n    string s1 = lst[0] + lst[1];\n    string s2 = lst[1] + lst[0];\n    return check(s1) || check(s2) ? \"Yes\" : \"No\";\n}\n",
            "vector<int> maximum(const vector<int>& arr, int k) {\n    if (k == 0) {\n        return {};\n    }\n    vector<int> sortedArr = arr;\n    sort(sortedArr.begin(), sortedArr.end());\n    return {sortedArr.end() - k, sortedArr.end()};\n}\n",
            "int solution(const vector<int>& lst) {\n    int acc = 0;\n    for (size_t i = 0; i < lst.size(); ++i) {\n        if (i % 2 == 0 && lst[i] % 2 != 0) {\n            acc += lst[i];\n        }\n    }\n    return acc;\n}\n",
            "int addElements(const std::vector<int>& arr, int k) {\n    int sum = 0;\n    for (int i = 0; i < k && i < arr.size(); ++i) {\n        if (std::to_string(arr[i]).length() <= 2) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n",
            "#include <vector>\nusing namespace std;\n\nvector<int> getOddCollatz(int n) {\n    vector<int> collatz = {1};\n    while (n != 1) {\n        if (n % 2 != 0) {\n            collatz.push_back(n);\n            n = 3 * n + 1;\n        } else {\n            n = n / 2;\n        }\n    }\n    sort(collatz.begin(), collatz.end());\n    return collatz;\n}\n",
            "bool validDate(const string& date) {\n    if (date.length() != 10 || date[2] != '-' || date[5] != '-') {\n        return false;\n    }\n    int m = stoi(date.substr(0, 2));\n    int d = stoi(date.substr(3, 2));\n    if ((m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) && d >= 1 && d <= 31) {\n        return true;\n    }\n    if ((m == 4 || m == 6 || m == 9 || m == 11) && d >= 1 && d <= 30) {\n        return true;\n    }\n    if (m == 2 && d >= 1 && d <= 29) {\n        return true;\n    }\n    return false;\n}\n",
            "#include <vector>\n#include <string>\n\nusing namespace std;\n\nvector<string> splitWords(const string& txt) {\n    if (txt.find(\" \") != string::npos) {\n        vector<string> words;\n        size_t start = 0, end;\n        while ((end = txt.find(' ', start)) != string::npos) {\n            words.push_back(txt.substr(start, end - start));\n            start = end + 1;\n        }\n        words.push_back(txt.substr(start));\n        return words;\n    } else if (txt.find(\",\") != string::npos) {\n        vector<string> words;\n        size_t start = 0, end;\n        while ((end = txt.find(',', start)) != string::npos) {\n            words.push_back(txt.substr(start, end - start));\n            start = end + 1;\n        }\n        words.push_back(txt.substr(start));\n        return words;\n    } else {\n        int count = 0;\n        for (char c : txt) {\n            if (c >= 'a' && c <= 'z' && (c - 'a') % 2 == 0) {\n                count++;\n            }\n        }\n        return {to_string(count)};\n    }\n}\n",
            "bool isSorted(const vector<int>& lst) {\n    if (!all_of(lst.begin(), lst.end(), [&, i = 0] (int) mutable { return i++ == 0 || lst[i - 1] <= lst[i]; })) {\n        return false;\n    }\n    unordered_map<int, int> freq;\n    for (const int num : lst) {\n        freq[num]++;\n    }\n    return max_element(freq.begin(), freq.end(), [](const pair<int, int>& a, const pair<int, int>& b) { return a.second < b.second; })->second <= 2;\n}\n",
            "#include <vector>\n#include <cmath>\n\nstring intersection(const std::vector<int>& interval1, const std::vector<int>& interval2) {\n    auto isPrime = [](int n) -> bool {\n        if (n < 2) return false;\n        for (int i = 2; i <= std::sqrt(n); i++) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    };\n\n    int l = std::max(interval1[0], interval2[0]);\n    int r = std::min(interval1[1], interval2[1]);\n    int length = r - l;\n    return length > 0 && isPrime(length) ? \"YES\" : \"NO\";\n}\n",
            "#include <vector>\n#include <numeric>\n#include <optional>\n\nstd::optional<int> prodSigns(const std::vector<int>& arr) {\n    if (arr.empty()) {\n        return std::nullopt;\n    }\n    if (std::find(arr.begin(), arr.end(), 0) != arr.end()) {\n        return 0;\n    }\n    int sign = std::count_if(arr.begin(), arr.end(), [](int n) { return n < 0; }) % 2 == 1 ? -1 : 1;\n    return sign * std::accumulate(arr.begin(), arr.end(), 0, [](int acc, int curr) { return acc + std::abs(curr); });\n}\n",
            "vector<int> minPath(const vector<vector<int>>& grid, int k) {\n    const int n = grid.size();\n    int min_val = n * n + 1;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            if (grid[i][j] == 1) {\n                vector<int> temp;\n                if (i != 0) {\n                    temp.push_back(grid[i - 1][j]);\n                }\n                if (j != 0) {\n                    temp.push_back(grid[i][j - 1]);\n                }\n                if (i != n - 1) {\n                    temp.push_back(grid[i + 1][j]);\n                }\n                if (j != n - 1) {\n                    temp.push_back(grid[i][j + 1]);\n                }\n                min_val = *min_element(temp.begin(), temp.end());\n            }\n        }\n    }\n    vector<int> result;\n    for (int i = 0; i < k; i++) {\n        result.push_back(i % 2 == 0 ? 1 : min_val);\n    }\n    return result;\n}\n",
            "vector<int> tri(int n) {\n    if (n == 0) return {1};\n    vector<int> seq = {1, 3};\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0) {\n            seq.push_back(i / 2 + 1);\n        } else {\n            seq.push_back(seq[i - 1] + seq[i - 2] + (i + 3) / 2);\n        }\n    }\n    return seq;\n}\n",
            "int digits(int n) {\n    int product = 1;\n    bool hasOdd = false;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit % 2 == 1) {\n            product *= digit;\n            hasOdd = true;\n        }\n        n /= 10;\n    }\n    return hasOdd ? product : 0;\n}\n",
            "bool isNested(const string& s) {\n    vector<int> openIdx;\n    vector<int> closeIdx;\n    \n    for (int i = 0; i < s.length(); i++) {\n        char ch = s[i];\n        if (ch == '[') {\n            openIdx.push_back(i);\n        } else if (ch == ']') {\n            closeIdx.push_back(i);\n        }\n    }\n    \n    reverse(closeIdx.begin(), closeIdx.end());\n    int cnt = 0;\n    int i = 0;\n    int l = closeIdx.size();\n    \n    for (int idx : openIdx) {\n        if (i < l && idx < closeIdx[i]) {\n            cnt += 1;\n            i += 1;\n        }\n    }\n    \n    return cnt >= 2;\n}\n",
            "int sumSquares(const vector<double>& lst) {\n    int sum = 0;\n    for (double n : lst) {\n        int ceilN = static_cast<int>(ceil(n));\n        sum += ceilN * ceilN;\n    }\n    return sum;\n}\n",
            "#include <string>\n#include <cctype>\n\nbool checkIfLastCharIsALetter(const std::string& txt) {\n    if (txt.empty()) {\n        return false;\n    }\n    const size_t lastSpaceIndex = txt.rfind(' ');\n    const std::string last = txt.substr(lastSpaceIndex + 1);\n    return last.length() == 1 && std::isalpha(last[0]);\n}\n",
            "int canArrange(const vector<int>& arr) {\n    if (arr.size() <= 1) {\n        return -1;\n    }\n    vector<int> idx;\n    for (size_t i = 1; i < arr.size(); ++i) {\n        if (arr[i] < arr[i - 1]) {\n            idx.push_back(i);\n        }\n    }\n    return !idx.empty() ? *max_element(idx.begin(), idx.end()) : -1;\n}\n",
            "#include <vector>\n#include <optional>\n#include <algorithm>\n\nusing namespace std;\n\nvector<optional<int>> largestSmallestIntegers(const vector<int>& lst) {\n    vector<int> neg, pos;\n    for (int i : lst) {\n        if (i < 0) neg.push_back(i);\n        if (i > 0) pos.push_back(i);\n    }\n    optional<int> maxNeg = neg.empty() ? nullopt : *max_element(neg.begin(), neg.end());\n    optional<int> minPos = pos.empty() ? nullopt : *min_element(pos.begin(), pos.end());\n    return {maxNeg, minPos};\n}\n",
            "#include <any>\n#include <stdexcept>\n#include <string>\n\nstd::optional<double> compareOne(const std::any& a, const std::any& b) {\n    auto anyToReal = [](const std::any& o) -> double {\n        if (o.type() == typeid(std::string)) {\n            std::string str = std::any_cast<std::string>(o);\n            for(auto & c : str) {\n                if (c == ',') c = '.';\n            }\n            return std::stod(str);\n        } else if (o.type() == typeid(double)) {\n            return std::any_cast<double>(o);\n        }\n        throw std::runtime_error(\"Type Error\");\n    };\n\n    double a1 = anyToReal(a);\n    double b1 = anyToReal(b);\n\n    if (a1 == b1) {\n        return std::nullopt;\n    } else if (a1 > b1) {\n        return a1;\n    } else {\n        return b1;\n    }\n}\n",
            "bool isEqualToSumEven(int n) {\n    return n % 2 == 0 && n >= 8;\n}\n",
            "int specialFactorial(int n) {\n    int fact = 1;\n    int result = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n        result *= fact;\n    }\n    return result;\n}\n",
            "string fixSpaces(const string& txt) {\n    string result;\n    int spaceCount = 0;\n\n    for (char ch : txt) {\n        if (ch == ' ') {\n            spaceCount++;\n        } else {\n            if (spaceCount >= 3) {\n                result += '-';\n            } else {\n                result.append(spaceCount, '_');\n            }\n            spaceCount = 0;\n            result += ch;\n        }\n    }\n\n    if (spaceCount >= 3) {\n        result += '-';\n    } else {\n        result.append(spaceCount, '_');\n    }\n\n    return result;\n}\n",
            "string fileNameCheck(const string& file_name) {\n    vector<string> suf = {\"txt\", \"exe\", \"dll\"};\n    size_t dotPos = file_name.find('.');\n    if (dotPos == string::npos || dotPos == 0 || dotPos == file_name.length() - 1) {\n        return \"No\";\n    }\n    \n    string namePart = file_name.substr(0, dotPos);\n    string extPart = file_name.substr(dotPos + 1);\n    \n    if (find(suf.begin(), suf.end(), extPart) == suf.end()) {\n        return \"No\";\n    }\n  \n    if (!isalpha(namePart[0])) {\n        return \"No\";\n    }\n\n    int digitCount = count_if(namePart.begin(), namePart.end(), ::isdigit);\n    if (digitCount > 3) {\n        return \"No\";\n    }\n\n    return \"Yes\";\n}\n",
            "int sumSquares(const vector<int>& lst) {\n    int result = 0;\n    for (size_t i = 0; i < lst.size(); i++) {\n        if (i % 3 == 0) {\n            result += pow(lst[i], 2);\n        } else if (i % 4 == 0) {\n            result += pow(lst[i], 3);\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n",
            "bool isPrime(int n) {\n    if (n < 2)\n        return false;\n    for (int i = 2; i <= static_cast<int>(sqrt(n)); ++i) {\n        if (n % i == 0)\n            return false;\n    }\n    return true;\n}\n\nstring wordsInSentence(const string& sentence) {\n    stringstream ss(sentence);\n    string word;\n    string result;\n    while (ss >> word) {\n        if (isPrime(word.length())) {\n            if (!result.empty())\n                result += \" \";\n            result += word;\n        }\n    }\n    return result;\n}\n",
            "bool simplify(const string& x, const string& n) {\n    size_t pos1 = x.find(\"/\");\n    size_t pos2 = n.find(\"/\");\n    int num1 = stoi(x.substr(0, pos1));\n    int den1 = stoi(x.substr(pos1 + 1));\n    int num2 = stoi(n.substr(0, pos2));\n    int den2 = stoi(n.substr(pos2 + 1));\n    int num = num1 * num2;\n    int den = den1 * den2;\n    return num % den == 0;\n}\n",
            "#include <vector>\n#include <string>\n#include <algorithm>\n\nint digitsSum(int n) {\n    std::string n_str = std::to_string(n);\n    if (n >= 0) {\n        return std::accumulate(n_str.begin(), n_str.end(), 0, [](int sum, char d) { return sum + (d - '0'); });\n    } else {\n        return (n_str[0] - '0') * 2 + digitsSum(std::abs(n));\n    }\n}\n\nstd::vector<int> orderByPoints(const std::vector<int>& nums) {\n    std::vector<int> sorted_nums = nums;\n    std::sort(sorted_nums.begin(), sorted_nums.end(), [](int a, int b) { return digitsSum(a) < digitsSum(b); });\n    return sorted_nums;\n}\n",
            "int specialFilter(const vector<int>& nums) {\n    string odds = \"13579\";\n    int count = 0;\n    for (int n : nums) {\n        if (n > 10 && n % 2 == 1 && odds.find(to_string(n)[0]) != string::npos) {\n            count++;\n        }\n    }\n    return count;\n}\n",
            "int getMaxTriples(int n) {\n    int c[3] = {0, 0, 0};\n    for (int i = 1; i <= n; ++i) {\n        int a = i * i - i + 1;\n        c[a % 3]++;\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6;\n}\n",
            "#include <vector>\n#include <string>\n\nusing namespace std;\n\nvector<string> bf(const string& planet1, const string& planet2) {\n    vector<string> names = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    \n    auto it1 = find(names.begin(), names.end(), planet1);\n    auto it2 = find(names.begin(), names.end(), planet2);\n    \n    if (it1 == names.end() || it2 == names.end()) {\n        return {};\n    }\n    \n    int l = distance(names.begin(), it1);\n    int r = distance(names.begin(), it2);\n    \n    if (l > r) {\n        swap(l, r);\n    }\n    \n    if (l == r) {\n        return {};\n    }\n    \n    return vector<string>(names.begin() + l + 1, names.begin() + r);\n}\n",
            "#include <vector>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nbool customComparator(const string& a, const string& b) {\n    if (a.length() == b.length()) {\n        return a < b;\n    }\n    return a.length() < b.length();\n}\n\nvector<string> sortedListSum(const vector<string>& lst) {\n    vector<string> result;\n    for (const auto& s : lst) {\n        if (s.length() % 2 == 0) {\n            result.push_back(s);\n        }\n    }\n    sort(result.begin(), result.end(), customComparator);\n    return result;\n}\n",
            "int xOrY(int n, int x, int y) {\n    if (n < 2) {\n        return y;\n    }\n    for (int i = 2; i <= std::sqrt(n); i++) {\n        if (n % i == 0) {\n            return y;\n        }\n    }\n    return x;\n}\n",
            "int doubleTheDifference(const vector<double>& lst) {\n    int sum = 0;\n    for (double n : lst) {\n        if (n >= 0 && fmod(n, 2) == 1) {\n            sum += n * n;\n        }\n    }\n    return sum;\n}\n",
            "#include <vector>\n#include <cmath>\n\nusing namespace std;\n\nvector<int> compare(const vector<int>& game, const vector<int>& guess) {\n    vector<int> result;\n    for (size_t i = 0; i < game.size(); ++i) {\n        result.push_back(abs(game[i] - guess[i]));\n    }\n    return result;\n}\n",
            "string strongestExtension(const string& class_name, const vector<string>& extensions) {\n    int max_s = -Infinity;\n    string max_ext = \"\";\n    for (const auto& ext : extensions) {\n        int upper = 0, lower = 0;\n        for (char c : ext) {\n            if (c >= 'A' && c <= 'Z') {\n                upper++;\n            } else if (c >= 'a' && c <= 'z') {\n                lower++;\n            }\n        }\n        int s = upper - lower;\n        if (s > max_s) {\n            max_s = s;\n            max_ext = ext;\n        }\n    }\n    return class_name + \".\" + max_ext;\n}\n",
            "bool cycpatternCheck(const std::string& a, const std::string& b) {\n    if (a.length() < b.length()) {\n        return false;\n    }\n    for (size_t i = 0; i < b.length(); ++i) {\n        std::string rotated = b.substr(i) + b.substr(0, i);\n        if (a.find(rotated) != std::string::npos) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "vector<int> evenOddCount(int num) {\n    string ds = to_string(abs(num));\n    int even = 0;\n    for (char d : ds) {\n        if ((d - '0') % 2 == 0) {\n            even++;\n        }\n    }\n    return {even, static_cast<int>(ds.length()) - even};\n}\n",
            "string intToMiniRoman(int num) {\n    const vector<int> values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    const vector<string> numerals = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    string res;\n    for (int i = 0; i < values.size(); i++) {\n        while (num >= values[i]) {\n            res += numerals[i];\n            num -= values[i];\n        }\n    }\n    return res;\n}\n",
            "bool rightAngleTriangle(int a, int b, int c) {\n    std::array<int, 3> s = {a, b, c};\n    std::sort(s.begin(), s.end());\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2];\n}\n",
            "#include <vector>\n#include <string>\n#include <unordered_set>\n#include <algorithm>\n\nusing namespace std;\n\nstring findMax(const vector<string>& words) {\n    int max_cnt = 0;\n    string max_w = \"\";\n    for (const auto& w : words) {\n        unordered_set<char> unique_chars(w.begin(), w.end());\n        int cnt = unique_chars.size();\n        if (cnt > max_cnt) {\n            max_cnt = cnt;\n            max_w = w;\n        } else if (cnt == max_cnt) {\n            max_w = min(max_w, w);\n        }\n    }\n    return max_w;\n}\n",
            "vector<int> eat(int num, int need, int remaining) {\n    if (need <= remaining) {\n        return {num + need, remaining - need};\n    } else {\n        return {num + remaining, 0};\n    }\n}\n",
            "#include <vector>\n#include <string>\n\nusing namespace std;\n\nint doAlgebra(const vector<string>& operators, const vector<int>& operands) {\n    vector<string> ops = operators;\n    vector<int> nums = operands;\n    int i = ops.size() - 1;\n    while (i >= 0) {\n        if (ops[i] == \"**\") {\n            nums[i] = pow(nums[i], nums[i + 1]);\n            nums.erase(nums.begin() + i + 1);\n            ops.erase(ops.begin() + i);\n        }\n        i--;\n    }\n    i = 0;\n    while (i < ops.size()) {\n        if (ops[i] == \"*\") {\n            nums[i] *= nums[i + 1];\n            nums.erase(nums.begin() + i + 1);\n            ops.erase(ops.begin() + i);\n            i--;\n        } else if (ops[i] == \"//\") {\n            nums[i] /= nums[i + 1];\n            nums.erase(nums.begin() + i + 1);\n            ops.erase(ops.begin() + i);\n            i--;\n        }\n        i++;\n    }\n    i = 0;\n    while (i < ops.size()) {\n        if (ops[i] == \"+\") {\n            nums[i] += nums[i + 1];\n            nums.erase(nums.begin() + i + 1);\n            ops.erase(ops.begin() + i);\n            i--;\n        } else if (ops[i] == \"-\") {\n            nums[i] -= nums[i + 1];\n            nums.erase(nums.begin() + i + 1);\n            ops.erase(ops.begin() + i);\n            i--;\n        }\n        i++;\n    }\n    return nums[0];\n}\n",
            "string solve(const string& s) {\n    if (!regex_search(s, regex(\"[a-zA-Z]\"))) {\n        return string(s.rbegin(), s.rend());\n    }\n    string result;\n    for (char ch : s) {\n        if (!regex_match(string(1, ch), regex(\"[a-zA-Z]\"))) {\n            result += ch;\n        } else if (isupper(ch)) {\n            result += tolower(ch);\n        } else if (islower(ch)) {\n            result += toupper(ch);\n        }\n    }\n    return result;\n}\n",
            "#include <string>\n#include <openssl/md5.h>\n\nusing namespace std;\n\noptional<string> stringToMd5(const string& txt) {\n    if (txt.empty()) {\n        return nullopt;\n    }\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)txt.c_str(), txt.length(), (unsigned char*)&digest);    \n    char mdString[33];\n    for(int i = 0; i < 16; ++i)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n    return string(mdString);\n}\n",
            "vector<int> generateIntegers(int a, int b) {\n    const int lower = max(2, min(a, b));\n    const int upper = min(8, max(a, b));\n    vector<int> result;\n    for (int i = lower; i <= upper; i++) {\n        if (i % 2 == 0) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\n"
        ],
        "java": [
            "class Global {\n    public static boolean hasCloseElements(List<Double> numbers, double threshold) {\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n",
            "import java.util.ArrayList;\nimport java.util.List;\n\nclass Global {\n    public static List<String> separateParenGroups(String parenString) {\n        List<String> groups = new ArrayList<>();\n        List<Character> stk = new ArrayList<>();\n        StringBuilder currentGroup = new StringBuilder();\n        String parens = parenString.replace(\" \", \"\");\n\n        for (char ch : parens.toCharArray()) {\n            if (ch === '(') {\n                stk.add(ch);\n                currentGroup.append(ch);\n            } else if (ch === ')') {\n                stk.remove(stk.size() - 1);\n                currentGroup.append(ch);\n                if (stk.isEmpty()) {\n                    groups.add(currentGroup.toString());\n                    currentGroup.setLength(0);\n                }\n            }\n        }\n        return groups;\n    }\n}\n",
            "class Global {\n    public static double truncateNumber(double num) {\n        return num - Math.floor(num);\n    }\n}\n",
            "class Global {\n    public static boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (int op : operations) {\n            balance += op;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n        \n        double deviationSum = 0;\n        for (double num : numbers) {\n            deviationSum += Math.abs(num - mean);\n        }\n        \n        return deviationSum / numbers.size();\n    }\n}\n",
            "class Global {\n    public static List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i != 0) {\n                result.add(delimiter);\n            }\n            result.add(numbers.get(i));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> parseNestedParens(String parenString) {\n        List<Integer> result = new ArrayList<>();\n        String[] parenGroups = parenString.split(\" \");\n        for (String group : parenGroups) {\n            int maxDepth = 0;\n            int depth = 0;\n            for (char ch : group.toCharArray()) {\n                if (ch === '(') {\n                    depth += 1;\n                    maxDepth = Math.max(maxDepth, depth);\n                } else if (ch === ')') {\n                    depth -= 1;\n                }\n            }\n            result.add(maxDepth);\n        }\n        return result;\n    }\n}\n",
            "import java.util.List;\nimport java.util.ArrayList;\nimport java.util.stream.Collectors;\n\nclass Global {\n    public static List<String> filterBySubstring(List<String> strs, String substring) {\n        return strs.stream()\n                   .filter(s -> s.contains(substring))\n                   .collect(Collectors.toList());\n    }\n}\n",
            "import java.util.List;\nimport java.util.ArrayList;\n\nclass Global {\n    public static List<Integer> sumProduct(List<Integer> numbers) {\n        int n_sum = 0;\n        int n_product = 1;\n        \n        for (int num : numbers) {\n            n_sum += num;\n            n_product *= num;\n        }\n        \n        List<Integer> result = new ArrayList<>();\n        result.add(n_sum);\n        result.add(n_product);\n        \n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> rollingMax(List<Integer> numbers) {\n        int maxSoFar = Integer.MIN_VALUE;\n        List<Integer> result = new ArrayList<>();\n        for (int num : numbers) {\n            maxSoFar = Math.max(maxSoFar, num);\n            result.add(maxSoFar);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String makePalindrome(String s) {\n        if (isPalindrome(s)) {\n            return s;\n        }\n        for (int i = 0; i < s.length(); i++) {\n            if (isPalindrome(s.substring(i))) {\n                return s + new StringBuilder(s.substring(0, i)).reverse().toString();\n            }\n        }\n        return \"\";\n    }\n\n    private static boolean isPalindrome(String s) {\n        int left = 0;\n        int right = s.length() - 1;\n        while (left < right) {\n            if (s.charAt(left) != s.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n                result.append('0');\n            } else {\n                result.append('1');\n            }\n        }\n        return result.toString();\n    }\n}\n",
            "class Global {\n    public static Optional<String> longest(List<String> strs) {\n        if (strs == null || strs.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest_s = strs.get(0);\n        for (String s : strs) {\n            if (s.length() > longest_s.length()) {\n                longest_s = s;\n            }\n        }\n        return Optional.of(longest_s);\n    }\n}\n",
            "class Global {\n    public static int greatestCommonDivisor(int a, int b) {\n        if (b == 0) {\n            return a;\n        } else {\n            return greatestCommonDivisor(b, a % b);\n        }\n    }\n}\n",
            "class Global {\n    public static List<String> allPrefixes(String s) {\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 0; i < s.length(); i++) {\n            prefixes.add(s.substring(0, i + 1));\n        }\n        return prefixes;\n    }\n}\n",
            "class Global {\n    public static String stringSequence(int n) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            result.append(i).append(\" \");\n        }\n        return result.toString().trim();\n    }\n}\n",
            "class Global {\n    public static int countDistinctCharacters(String s) {\n        return (int) new HashSet<Character>() {{\n            for (char c : s.toLowerCase().toCharArray()) {\n                add(c);\n            }\n        }}.size();\n    }\n}\n",
            "import java.util.*;\n\nclass Global {\n    public static List<Integer> parseMusic(String musicString) {\n        Map<String, Integer> durations = new HashMap<>();\n        durations.put(\"o\", 4);\n        durations.put(\"o|\", 2);\n        durations.put(\".|\", 1);\n\n        String[] notes = musicString.split(\"\\\\s+\");\n        List<Integer> result = new ArrayList<>();\n\n        for (String note : notes) {\n            if (durations.containsKey(note)) {\n                result.add(durations.get(note));\n            }\n        }\n\n        return result;\n    }\n}\n",
            "class Global {\n    public static int howManyTimes(String s, String substring) {\n        int times = 0;\n        for (int i = 0; i <= s.length() - substring.length(); i++) {\n            if (s.substring(i, i + substring.length()).equals(substring)) {\n                times += 1;\n            }\n        }\n        return times;\n    }\n}\n",
            "class Global {\n    public static String sortNumbers(String numbers) {\n        Map<String, Integer> numDict = new HashMap<>();\n        numDict.put(\"zero\", 0);\n        numDict.put(\"one\", 1);\n        numDict.put(\"two\", 2);\n        numDict.put(\"three\", 3);\n        numDict.put(\"four\", 4);\n        numDict.put(\"five\", 5);\n        numDict.put(\"six\", 6);\n        numDict.put(\"seven\", 7);\n        numDict.put(\"eight\", 8);\n        numDict.put(\"nine\", 9);\n\n        String[] numList = numbers.split(\" \");\n        List<String> filteredNumList = new ArrayList<>();\n        for (String num : numList) {\n            if (numDict.containsKey(num)) {\n                filteredNumList.add(num);\n            }\n        }\n\n        Collections.sort(filteredNumList, Comparator.comparingInt(numDict::get));\n\n        return String.join(\" \", filteredNumList);\n    }\n}\n",
            "class Global {\n    public static List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> sortedNumbers = new ArrayList<>(numbers);\n        Collections.sort(sortedNumbers);\n        double minDiff = Double.POSITIVE_INFINITY;\n        List<Double> closestPair = new ArrayList<>();\n        for (int i = 1; i < sortedNumbers.size(); i++) {\n            double diff = sortedNumbers.get(i) - sortedNumbers.get(i - 1);\n            if (diff < minDiff) {\n                minDiff = diff;\n                closestPair = Arrays.asList(sortedNumbers.get(i - 1), sortedNumbers.get(i));\n            }\n        }\n        return closestPair;\n    }\n}\n",
            "import java.util.ArrayList;\nimport java.util.List;\n\nclass Global {\n    public static List<Double> rescaleToUnit(List<Double> numbers) {\n        double minNum = Double.MAX_VALUE;\n        double maxNum = Double.MIN_VALUE;\n        \n        for (double num : numbers) {\n            if (num < minNum) {\n                minNum = num;\n            }\n            if (num > maxNum) {\n                maxNum = num;\n            }\n        }\n        \n        if (minNum == maxNum) {\n            List<Double> result = new ArrayList<>();\n            for (int i = 0; i < numbers.size(); i++) {\n                result.add(0.0);\n            }\n            return result;\n        } else {\n            List<Double> rescaledNumbers = new ArrayList<>();\n            for (double num : numbers) {\n                rescaledNumbers.add((num - minNum) / (maxNum - minNum));\n            }\n            return rescaledNumbers;\n        }\n    }\n}\n",
            "class Global {\n    public static List<Integer> filterIntegers(List<Object> values) {\n        return values.stream()\n                    .filter(x -> x instanceof Integer)\n                    .mapToInt(Integer::intValue)\n                    .boxed()\n                    .collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static int strLength(String s) {\n        return s.length();\n    }\n}\n",
            "class Global {\n    public static int largestDivisor(int n) {\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return n / i;\n            }\n        }\n        return 1;\n    }\n}\n",
            "class Global {\n    public static List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int divisor = 2;\n        while (divisor <= n) {\n            if (n % divisor == 0) {\n                factors.add(divisor);\n                n /= divisor;\n            } else {\n                divisor += 1;\n            }\n        }\n        return factors;\n    }\n}\n",
            "import java.util.*;\n\nclass Global {\n    public static List<Integer> removeDuplicates(List<Integer> numbers) {\n        Map<Integer, Integer> counts = new HashMap<>();\n        for (int num : numbers) {\n            counts.put(num, counts.getOrDefault(num, 0) + 1);\n        }\n        List<Integer> res = new ArrayList<>();\n        for (int num : numbers) {\n            if (counts.get(num) == 1) {\n                res.add(num);\n            }\n        }\n        return res;\n    }\n}\n",
            "class Global {\n    public static String flipCase(String s) {\n        StringBuilder flipped = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (!Character.isLetter(ch)) {\n                flipped.append(ch);\n            } else if (Character.isLowerCase(ch)) {\n                flipped.append(Character.toUpperCase(ch));\n            } else {\n                flipped.append(Character.toLowerCase(ch));\n            }\n        }\n        return flipped.toString();\n    }\n}\n",
            "class Global {\n    public static String concatenate(List<String> strs) {\n        return String.join(\"\", strs);\n    }\n}\n",
            "class Global {\n    public static List<String> filterByPrefix(List<String> strs, String prefixStr) {\n        return strs.stream()\n                   .filter(s -> s.startsWith(prefixStr))\n                   .collect(Collectors.toList());\n    }\n}\n",
            "import java.util.ArrayList;\nimport java.util.List;\n\nclass Global {\n    public static List<Integer> getPositive(List<Integer> l) {\n        List<Integer> positiveNumbers = new ArrayList<>();\n        for (Integer num : l) {\n            if (num > 0) {\n                positiveNumbers.add(num);\n            }\n        }\n        return positiveNumbers;\n    }\n}\n",
            "class Global {\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= (int)Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "import java.util.List;\n\nclass Global {\n    public static double poly(List<Integer> xs, double x) {\n        double res = 0.0;\n        for (int i = 0; i < xs.size(); i++) {\n            res += xs.get(i) * Math.pow(x, i);\n        }\n        return res;\n    }\n    \n    public static double findZero(List<Integer> xs) {\n        double x1 = 1.0, x2 = -1.0;\n        while (poly(xs, x1) * poly(xs, x2) > 0) {\n            x1 *= 2;\n            x2 *= 2;\n        }\n        while (Math.abs(x1 - x2) > 1e-10) {\n            double mid = (x1 + x2) / 2;\n            if (poly(xs, mid) == 0) {\n                return mid;\n            } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n                x2 = mid;\n            } else {\n                x1 = mid;\n            }\n        }\n        return (x1 + x2) / 2;\n    }\n}\n",
            "import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nclass Global {\n    public static List<Integer> sortThird(List<Integer> l) {\n        List<Integer> sortedThird = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                sortedThird.add(l.get(i));\n            }\n        }\n        Collections.sort(sortedThird);\n\n        List<Integer> result = new ArrayList<>(l);\n        for (int i = 0; i < result.size(); i++) {\n            if (i % 3 == 0) {\n                result.set(i, sortedThird.get(i / 3));\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> listUnique(List<Integer> l) {\n        Set<Integer> set = new HashSet<>(l);\n        List<Integer> result = new ArrayList<>(set);\n        Collections.sort(result);\n        return result;\n    }\n}\n",
            "class Global {\n    public static int maxElement(List<Integer> l) {\n        if (l == null || l.isEmpty()) {\n            return 0;\n        }\n        return Collections.max(l);\n    }\n}\n",
            "class Global {\n    public static int fizzBuzz(int n) {\n        int cnt = 0;\n        for (int i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String str = Integer.toString(i);\n                int countSevens = 0;\n                for (char c : str.toCharArray()) {\n                    if (c == '7') {\n                        countSevens++;\n                    }\n                }\n                cnt += countSevens;\n            }\n        }\n        return cnt;\n    }\n}\n",
            "import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nclass Global {\n    public static List<Integer> sortEven(List<Integer> l) {\n        List<Integer> sortedEven = new ArrayList<>();\n        for (int i = 0; i < l.size(); i += 2) {\n            sortedEven.add(l.get(i));\n        }\n        Collections.sort(sortedEven);\n\n        List<Integer> result = new ArrayList<>(l);\n        int evenIndex = 0;\n        for (int i = 0; i < result.size(); i += 2) {\n            result.set(i, sortedEven.get(evenIndex++));\n        }\n\n        return result;\n    }\n}\n",
            "class Global {\n    public static String encodeCyclic(String s) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < s.length(); i += 3) {\n            if (i + 3 > s.length()) {\n                result.append(s.substring(i));\n            } else {\n                result.append(s.substring(i + 1, i + 3));\n                result.append(s.charAt(i));\n            }\n        }\n        return result.toString();\n    }\n    \n    public static String decodeCyclic(String s) {\n        return encodeCyclic(encodeCyclic(s));\n    }\n}\n",
            "class Global {\n    public static int primeFib(int n) {\n        boolean isPrime(int num) {\n            if (num < 2) return false;\n            for (int i = 2; i <= Math.floor(Math.sqrt(num)); i++) {\n                if (num % i == 0) return false;\n            }\n            return true;\n        }\n\n        int[] f = {0, 1};\n        int cnt = 0;\n        while (cnt < n) {\n            f[0] = f[1];\n            f[1] += f[0];\n            if (isPrime(f[1])) {\n                cnt++;\n            }\n        }\n        return f[1];\n    }\n}\n",
            "class Global {\n    public static boolean triplesSumToZero(List<Integer> l) {\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static int carRaceCollision(int n) {\n        return n * n;\n    }\n}\n",
            "class Global {\n    public static List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static boolean pairsSumToZero(List<Integer> l) {\n        Set<Integer> seen = new HashSet<>();\n        for (int num : l) {\n            if (seen.contains(-num)) {\n                return true;\n            }\n            seen.add(num);\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static String changeBase(int x, int bas) {\n        if (x == 0) {\n            return \"0\";\n        }\n        StringBuilder digits = new StringBuilder();\n        while (x > 0) {\n            digits.append((x % bas));\n            x = Math.floorDiv(x, bas);\n        }\n        return digits.reverse().toString();\n    }\n}\n",
            "class Global {\n    public static double triangleArea(int a, int h) {\n        return (double) a * h / 2;\n    }\n}\n",
            "class Global {\n    public static int fib4(int n) {\n        int[] fib = {0, 0, 2, 0};\n        for (int i = 4; i <= n; i++) {\n            fib[i % 4] = 0;\n            for (int val : fib) {\n                fib[i % 4] += val;\n            }\n        }\n        return fib[n % 4];\n    }\n}\n",
            "class Global {\n    public static double median(List<Double> l) {\n        List<Double> sl = new ArrayList<>(l);\n        Collections.sort(sl);\n        int size = sl.size();\n        if (size % 2 != 0) {\n            return sl.get(size / 2);\n        } else {\n            return (sl.get(size / 2 - 1) + sl.get(size / 2)) / 2.0;\n        }\n    }\n}\n",
            "class Global {\n    public static boolean isPalindrome(String txt) {\n        String reversed = new StringBuilder(txt).reverse().toString();\n        return txt.equals(reversed);\n    }\n}\n",
            "class Global {\n    public static int modp(int n, int p) {\n        int ret = 1;\n        for (int i = 0; i < n; i++) {\n            ret = (ret * 2) % p;\n        }\n        return ret;\n    }\n}\n",
            "class Global {\n    public static String encodeShift(String s) {\n        StringBuilder result = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            result.append((char) (((ch - 'a' + 5) % 26) + 'a'));\n        }\n        return result.toString();\n    }\n\n    public static String decodeShift(String s) {\n        StringBuilder result = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            result.append((char) (((ch - 'a' + 21) % 26) + 'a'));\n        }\n        return result.toString();\n    }\n}\n",
            "class Global {\n    public static String removeVowels(String txt) {\n        String vowels = \"aeiouAEIOU\";\n        StringBuilder result = new StringBuilder();\n        for (char c : txt.toCharArray()) {\n            if (vowels.indexOf(c) == -1) {\n                result.append(c);\n            }\n        }\n        return result.toString();\n    }\n}\n",
            "class Global {\n    public static boolean belowThreshold(List<Integer> l, int t) {\n        for (int x : l) {\n            if (x >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static int add(int x, int y) {\n        return x + y;\n    }\n}\n",
            "class Global {\n    public static boolean sameChars(String s0, String s1) {\n        return new HashSet<Character>(toCharacterList(s0)).equals(new HashSet<Character>(toCharacterList(s1)));\n    }\n\n    private static List<Character> toCharacterList(String s) {\n        List<Character> characterList = new ArrayList<>();\n        for (char c : s.toCharArray()) {\n            characterList.add(c);\n        }\n        return characterList;\n    }\n}\n",
            "class Global {\n    public static int fib(int n) {\n        if (n <= 1) {\n            return n;\n        } else {\n            return fib(n - 1) + fib(n - 2);\n        }\n    }\n}\n",
            "class Global {\n    public static boolean correctBracketing(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '<') {\n                depth += 1;\n            } else if (b == '>') {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth === 0;\n    }\n}\n",
            "class Global {\n    public static boolean monotonic(List<Integer> l) {\n        List<Integer> diff = new ArrayList<>();\n        for (int i = 0; i < l.size() - 1; i++) {\n            diff.add(l.get(i + 1) - l.get(i));\n        }\n        return diff.stream().allMatch(x -> x <= 0) || diff.stream().allMatch(x -> x >= 0);\n    }\n}\n",
            "class Global {\n    public static List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        \n        set1.retainAll(set2);\n        \n        List<Integer> result = new ArrayList<>(set1);\n        Collections.sort(result);\n        \n        return result;\n    }\n}\n",
            "class Global {\n    public static int largestPrimeFactor(int n) {\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i != 0) {\n                i += 1;\n            } else {\n                n /= i;\n            }\n        }\n        return n;\n    }\n}\n",
            "class Global {\n    public static int sumToN(int n) {\n        return ((n + 1) * n) / 2;\n    }\n}\n",
            "class Global {\n    public static boolean correctBracketing(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '(') {\n                depth += 1;\n            } else if (b == ')') {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n",
            "class Global {\n    public static List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int fibfib(int n) {\n        if (n <= 1) return 0;\n        int a = 0, b = 0, c = 1;\n        while (n > 2) {\n            a = b;\n            b = c;\n            c = a + b + c;\n            n -= 1;\n        }\n        return c;\n    }\n}\n",
            "class Global {\n    public static int vowelsCount(String s) {\n        String vowels = \"aeiou\";\n        int cnt = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char ch = Character.toLowerCase(s.charAt(i));\n            if (vowels.indexOf(ch) != -1 || (i == s.length() - 1 && ch == 'y')) {\n                cnt += 1;\n            }\n        }\n        return cnt;\n    }\n}\n",
            "class Global {\n    public static String circularShift(int x, int shift) {\n        String x_str = Integer.toString(x);\n        if (shift > x_str.length()) {\n            return new StringBuilder(x_str).reverse().toString();\n        } else {\n            return x_str.substring(x_str.length() - shift) + x_str.substring(0, x_str.length() - shift);\n        }\n    }\n}\n",
            "class Global {\n    public static int digitSum(String s) {\n        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}\n",
            "class Global {\n    public static int fruitDistribution(String s, int n) {\n        String[] words = s.split(\" \");\n        int apples = Integer.parseInt(words[wordsIndexOf(words, \"apples\") - 1]);\n        int oranges = Integer.parseInt(words[wordsIndexOf(words, \"oranges\") - 1]);\n        return n - apples - oranges;\n    }\n\n    private static int wordsIndexOf(String[] array, String target) {\n        for (int i = 0; i < array.length; i++) {\n            if (array[i].equals(target)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}\n",
            "class Global {\n    public static List<Integer> pluck(List<Integer> arr) {\n        List<Integer> evens = new ArrayList<>();\n        for (int n : arr) {\n            if (n % 2 == 0) {\n                evens.add(n);\n            }\n        }\n        if (evens.isEmpty()) {\n            return Collections.emptyList();\n        }\n        int minEven = Collections.min(evens);\n        return Arrays.asList(minEven, arr.indexOf(minEven));\n    }\n}\n",
            "class Global {\n    public static int search(List<Integer> lst) {\n        Map<Integer, Integer> freqs = new HashMap<>();\n        for (int n : lst) {\n            freqs.put(n, freqs.getOrDefault(n, 0) + 1);\n        }\n        List<Integer> goodVals = new ArrayList<>();\n        for (Map.Entry<Integer, Integer> entry : freqs.entrySet()) {\n            if (entry.getValue() >= entry.getKey()) {\n                goodVals.add(entry.getKey());\n            }\n        }\n        if (!goodVals.isEmpty()) {\n            return Collections.max(goodVals);\n        } else {\n            return -1;\n        }\n    }\n}\n",
            "class Global {\n    public static List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> sl = new ArrayList<>(lst);\n        Collections.sort(sl);\n        List<Integer> result = new ArrayList<>();\n        int left = 0;\n        int right = sl.size() - 1;\n        while (left <= right) {\n            result.add(sl.get(left));\n            left += 1;\n            if (left <= right) {\n                result.add(sl.get(right));\n                right -= 1;\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static double triangleArea(int a, int b, int c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            double s = (a + b + c) / 2.0;\n            return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        } else {\n            return -1.0;\n        }\n    }\n}\n",
            "class Global {\n    public static boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return false;\n        }\n        boolean isPalin = true;\n        for (int i = 0; i < q.size(); i++) {\n            if (!q.get(i).equals(q.get(q.size() - i - 1))) {\n                isPalin = false;\n                break;\n            }\n        }\n        int total = 0;\n        for (int value : q) {\n            total += value;\n        }\n        return isPalin && total <= w;\n    }\n}\n",
            "class Global {\n    public static int smallestChange(List<Integer> arr) {\n        int ans = 0;\n        for (int i = 0; i < Math.floorDiv(arr.size(), 2); i++) {\n            if (!arr.get(i).equals(arr.get(arr.size() - i - 1))) {\n                ans += 1;\n            }\n        }\n        return ans;\n    }\n}\n",
            "import java.util.List;\n\nclass Global {\n    public static List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        int cnt1 = lst1.stream().mapToInt(String::length).sum();\n        int cnt2 = lst2.stream().mapToInt(String::length).sum();\n        return cnt1 <= cnt2 ? lst1 : lst2;\n    }\n}\n",
            "class Global {\n    public static boolean isMultiplyPrime(int a) {\n        boolean isPrime = (n) -> {\n            if (n < 2) return false;\n            for (int i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n                if (n % i == 0) return false;\n            }\n            return true;\n        };\n\n        int cnt = 0;\n        for (int i = 2; i <= a; i++) {\n            if (isPrime(i)) {\n                while (a % i == 0) {\n                    cnt += 1;\n                    a /= i;\n                }\n            }\n        }\n        return cnt == 3;\n    }\n}\n",
            "class Global {\n    public static boolean isSimplePower(int x, int n) {\n        if (n < 2) {\n            return x == n;\n        }\n        int tmp = 1;\n        while (tmp < x) {\n            tmp *= n;\n        }\n        return tmp == x;\n    }\n}\n",
            "class Global {\n    public static boolean isCube(int a) {\n        a = Math.abs(a);\n        int root = (int) Math.round(Math.cbrt(a));\n        return root * root * root == a;\n    }\n}\n",
            "class Global {\n    public static int hexKey(String num) {\n        int count = 0;\n        for (char x : num.toCharArray()) {\n            if (\"2357BD\".indexOf(x) != -1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n",
            "class Global {\n    public static String decimalToBinary(int dec) {\n        return \"db\" + Integer.toBinaryString(dec) + \"db\";\n    }\n}\n",
            "class Global {\n    public static boolean isHappy(String s) {\n        if (s.length() < 3) {\n            return false;\n        }\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "import java.util.ArrayList;\nimport java.util.List;\n\nclass Global {\n    public static List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> result = new ArrayList<>();\n        for (double g : grades) {\n            if (g == 4.0) {\n                result.add(\"A+\");\n            } else if (g > 3.7) {\n                result.add(\"A\");\n            } else if (g > 3.3) {\n                result.add(\"A-\");\n            } else if (g > 3.0) {\n                result.add(\"B+\");\n            } else if (g > 2.7) {\n                result.add(\"B\");\n            } else if (g > 2.3) {\n                result.add(\"B-\");\n            } else if (g > 2.0) {\n                result.add(\"C+\");\n            } else if (g > 1.7) {\n                result.add(\"C\");\n            } else if (g > 1.3) {\n                result.add(\"C-\");\n            } else if (g > 1.0) {\n                result.add(\"D+\");\n            } else if (g > 0.7) {\n                result.add(\"D\");\n            } else if (g > 0.0) {\n                result.add(\"D-\");\n            } else {\n                result.add(\"E\");\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static boolean primeLength(String s) {\n        int length = s.length();\n        if (length < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.floor(Math.sqrt(length)); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static int startsOneEnds(int n) {\n        if (n == 1) {\n            return 1;\n        }\n        return 2 * 9 * (int) Math.pow(10, n - 2);\n    }\n}\n",
            "class Global {\n    public static String solve(int n) {\n        int digitsSum = 0;\n        while (n > 0) {\n            digitsSum += n % 10;\n            n /= 10;\n        }\n        return Integer.toString(digitsSum, 2);\n    }\n}\n",
            "class Global {\n    public static int add(List<Integer> lst) {\n        int acc = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int x = lst.get(i);\n            if (i % 2 == 1 && x % 2 == 0) {\n                acc += x;\n            }\n        }\n        return acc;\n    }\n}\n",
            "class Global {\n    public static String antiShuffle(String s) {\n        StringBuilder result = new StringBuilder();\n        String[] words = s.split(\" \");\n        \n        for (String word : words) {\n            char[] chars = word.toCharArray();\n            java.util.Arrays.sort(chars);\n            result.append(new String(chars)).append(\" \");\n        }\n        \n        return result.toString().trim();\n    }\n}\n",
            "class Global {\n    public static List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> coords = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    List<Integer> coord = Arrays.asList(i, j);\n                    coords.add(coord);\n                }\n            }\n        }\n        coords.sort((a, b) -> a.get(0) - b.get(0) != 0 ? a.get(0) - b.get(0) : b.get(1) - a.get(1));\n        return coords;\n    }\n}\n",
            "class Global {\n    public static List<Integer> sortArray(List<Integer> arr) {\n        if (arr.size() == 0) {\n            return new ArrayList<>();\n        }\n        if ((arr.get(0) + arr.get(arr.size() - 1)) % 2 == 0) {\n            Collections.sort(arr, Collections.reverseOrder());\n            return arr;\n        } else {\n            Collections.sort(arr);\n            return arr;\n        }\n    }\n}\n",
            "class Global {\n    public static String encrypt(String s) {\n        StringBuilder result = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            int shifted = ch + 4;\n            if (shifted > 'z') {\n                shifted -= 26;\n            }\n            result.append((char) shifted);\n        }\n        return result.toString();\n    }\n}\n",
            "class Global {\n    public static Optional<Integer> nextSmallest(List<Integer> lst) {\n        Set<Integer> uniqueSet = new HashSet<>(lst);\n        List<Integer> sortedList = new ArrayList<>(uniqueSet);\n        Collections.sort(sortedList);\n        \n        if (sortedList.size() < 2) {\n            return Optional.empty();\n        }\n        return Optional.of(sortedList.get(1));\n    }\n}\n",
            "class Global {\n    public static int isBored(String s) {\n        String[] sentences = s.split(\"[.!?]\\\\s*\");\n        return (int) Arrays.stream(sentences)\n                           .filter(sentence -> sentence.length() >= 2 && sentence.startsWith(\"I \"))\n                           .count();\n    }\n}\n",
            "class Global {\n    public static boolean anyInt(Object x, Object y, Object z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int intX = (Integer)x;\n            int intY = (Integer)y;\n            int intZ = (Integer)z;\n            if ((intX + intY == intZ) || (intX + intZ == intY) || (intY + intZ == intX)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static String encode(String message) {\n        String vowels = \"aeiouAEIOU\";\n        StringBuilder result = new StringBuilder();\n        for (char ch : message.toCharArray()) {\n            if (Character.isLetter(ch)) {\n                char ch1 = Character.isLowerCase(ch) ? Character.toUpperCase(ch) : Character.toLowerCase(ch);\n                if (vowels.indexOf(ch1) != -1) {\n                    ch1 = (char) (ch1 + 2);\n                }\n                result.append(ch1);\n            } else {\n                result.append(ch);\n            }\n        }\n        return result.toString();\n    }\n}\n",
            "class Global {\n    public static int skjkasdkd(List<Integer> lst) {\n        Function<Integer, Boolean> is_prime = n -> {\n            if (n < 2) return false;\n            for (int i = 2; i <= Math.sqrt(n); i++) {\n                if (n % i == 0) return false;\n            }\n            return true;\n        };\n\n        List<Integer> primes = lst.stream().filter(is_prime).collect(Collectors.toList());\n        if (primes.isEmpty()) return 0;\n\n        int largest = Collections.max(primes);\n        String largestStr = Integer.toString(largest);\n        int sum = 0;\n        for (char digit : largestStr.toCharArray()) {\n            sum += Character.getNumericValue(digit);\n        }\n        return sum;\n    }\n}\n",
            "class Global {\n    public static boolean checkDictCase(Map<String, String> d) {\n        if (d.isEmpty()) {\n            return false;\n        }\n        boolean allLower = true;\n        boolean allUpper = true;\n        for (String key : d.keySet()) {\n            if (!key.equals(key.toLowerCase())) {\n                allLower = false;\n            }\n            if (!key.equals(key.toUpperCase())) {\n                allUpper = false;\n            }\n        }\n        return allLower || allUpper;\n    }\n}\n",
            "import java.util.ArrayList;\nimport java.util.List;\n\nclass Global {\n    public static List<Integer> countUpTo(int n) {\n        List<Integer> primes = new ArrayList<>();\n        for (int num = 2; num < n; num++) {\n            boolean isPrime = true;\n            for (int p : primes) {\n                if (num % p == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                primes.add(num);\n            }\n        }\n        return primes;\n    }\n}\n",
            "class Global {\n    public static int multiply(int a, int b) {\n        return Math.abs(a % 10) * Math.abs(b % 10);\n    }\n}\n",
            "class Global {\n    public static int countUpper(String s) {\n        String vowels = \"AEIOU\";\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0 && vowels.indexOf(s.charAt(i)) != -1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n",
            "class Global {\n    public static int closestInteger(String value) {\n        double num = Double.parseDouble(value);\n        if (num >= 0) {\n            return (int) Math.floor(num + 0.5);\n        } else {\n            return (int) Math.ceil(num - 0.5);\n        }\n    }\n}\n",
            "class Global {\n    public static List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            pile.add(n + 2 * i);\n        }\n        return pile;\n    }\n}\n",
            "class Global {\n    public static List<String> wordsString(String s) {\n        return Arrays.asList(s.trim().split(\"[,\\\\s]+\"))\n                     .stream()\n                     .filter(w -> !w.isEmpty())\n                     .collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static int chooseNum(int x, int y) {\n        if (x > y) {\n            return -1;\n        }\n        if (y % 2 == 0) {\n            return y;\n        }\n        return x != y ? y - 1 : -1;\n    }\n}\n",
            "class Global {\n    public static Optional<String> roundedAvg(int n, int m) {\n        if (n > m) {\n            return Optional.empty();\n        }\n        int r_avg = (int) Math.round((m + n) / 2.0);\n        return Optional.of(Integer.toBinaryString(r_avg));\n    }\n}\n",
            "import java.util.ArrayList;\nimport java.util.List;\n\nclass Global {\n    public static List<Integer> uniqueDigits(List<Integer> x) {\n        return x.stream()\n                .filter(num -> allDigitsOdd(num.toString()))\n                .sorted()\n                .toList();\n    }\n\n    private static boolean allDigitsOdd(String s) {\n        for (char digit : s.toCharArray()) {\n            if (Character.getNumericValue(digit) % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static List<String> byLength(List<Integer> arr) {\n        String[] digitNames = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n        return arr.stream()\n                .filter(x -> x >= 1 && x <= 9)\n                .sorted(Comparator.reverseOrder())\n                .map(x -> digitNames[x - 1])\n                .collect(Collectors.toList());\n    }\n}\n",
            "class Global {\n    public static List<Integer> f(int n) {\n        List<Integer> nums = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            nums.add(i);\n        }\n        \n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int value = nums.get(i);\n            if (value % 2 != 0) {\n                int sum = 0;\n                for (int j = 0; j <= i; j++) {\n                    sum += nums.get(j);\n                }\n                result.add(sum);\n            } else {\n                int product = 1;\n                for (int j = 0; j <= i; j++) {\n                    product *= nums.get(j);\n                }\n                result.add(product);\n            }\n        }\n        \n        return result;\n    }\n}\n",
            "class Global {\n    public static List<Integer> evenOddPalindrome(int n) {\n        int[] cnt = {0, 0};\n        for (int i = 1; i <= n; i++) {\n            String txt = Integer.toString(i);\n            if (txt.equals(new StringBuilder(txt).reverse().toString())) {\n                cnt[i % 2] += 1;\n            }\n        }\n        return Arrays.asList(cnt[0], cnt[1]);\n    }\n}\n",
            "class Global {\n    public static int countNums(List<Integer> arr) {\n        return (int) arr.stream().filter(n -> digitsSum(n) > 0).count();\n    }\n\n    private static int digitsSum(int n) {\n        String nStr = Integer.toString(n);\n        if (n >= 0) {\n            return nStr.chars()\n                      .map(Character::getNumericValue)\n                      .sum();\n        } else {\n            int firstTwoDigits = Integer.parseInt(nStr.substring(0, 2));\n            return firstTwoDigits * 2 + digitsSum(Math.abs(n));\n        }\n    }\n}\n",
            "class Global {\n    public static boolean moveOneBall(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return true;\n        }\n        List<Integer> sortedArr = new ArrayList<>(arr);\n        Collections.sort(sortedArr);\n        for (int i = 0; i < arr.size(); i++) {\n            if (new ArrayList<>(arr.subList(i, arr.size())).equals(new ArrayList<>(sortedArr.subList(0, arr.size() - i))) &&\n                new ArrayList<>(arr.subList(0, i)).equals(new ArrayList<>(sortedArr.subList(arr.size() - i, sortedArr.size())))) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "class Global {\n    public static String canExchange(List<Integer> lst1, List<Integer> lst2) {\n        long odd_cnt = lst1.stream().filter(num -> num % 2 != 0).count();\n        long even_cnt = lst2.stream().filter(num -> num % 2 == 0).count();\n        return even_cnt >= odd_cnt ? \"YES\" : \"NO\";\n    }\n}\n",
            "import java.util.HashMap;\nimport java.util.Map;\n\npublic class Global {\n    public static Map<String, Integer> histogram(String test) {\n        Map<String, Integer> freq = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String w : words) {\n            if (!w.trim().isEmpty()) {\n                freq.put(w, freq.getOrDefault(w, 0) + 1);\n            }\n        }\n        Map<String, Integer> result = new HashMap<>();\n        if (!freq.isEmpty()) {\n            int max_freq = Collections.max(freq.values());\n            for (Map.Entry<String, Integer> entry : freq.entrySet()) {\n                if (entry.getValue() == max_freq) {\n                    result.put(entry.getKey(), entry.getValue());\n                }\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static List<String> reverseDelete(String s, String c) {\n        StringBuilder s1 = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (c.indexOf(ch) == -1) {\n                s1.append(ch);\n            }\n        }\n        String resultStr = s1.toString();\n        boolean isPalindrome = resultStr.equals(new StringBuilder(resultStr).reverse().toString());\n        return Arrays.asList(resultStr, isPalindrome ? \"yes\" : \"no\");\n    }\n}\n",
            "import java.util.ArrayList;\nimport java.util.List;\n\nclass Global {\n    public static List<String> oddCount(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String num : lst) {\n            int n = 0;\n            for (char d : num.toCharArray()) {\n                if ((int) d % 2 == 1) {\n                    n++;\n                }\n            }\n            String rs = \"the number of odd elements in the string i of the input.\";\n            result.add(rs.replace(\"i\", Integer.toString(n)));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static int minSubArraySum(List<Integer> nums) {\n        int min_sum = 0;\n        int cur_sum = 0;\n        for (int n : nums) {\n            cur_sum = Math.min(cur_sum + n, 0);\n            min_sum = Math.min(cur_sum, min_sum);\n        }\n        if (min_sum == 0) {\n            min_sum = Collections.min(nums);\n        }\n        return min_sum;\n    }\n}\n",
            "class Global {\n    public static int maxFill(List<List<Integer>> grid, int capacity) {\n        int total = 0;\n        for (List<Integer> arr : grid) {\n            int sum = 0;\n            for (int num : arr) {\n                sum += num;\n            }\n            total += Math.ceil((double) sum / capacity);\n        }\n        return total;\n    }\n}\n",
            "class Global {\n    public static int countOnes(int num) {\n        return Integer.bitCount(num);\n    }\n\n    public static List<Integer> sortArray(List<Integer> arr) {\n        return arr.stream()\n                 .sorted(Comparator.comparingInt(Global::countOnes).thenComparingInt(n -> n))\n                 .collect(Collectors.toList());\n    }\n}\n",
            "import java.util.ArrayList;\nimport java.util.List;\n\nclass Global {\n    public static List<String> selectWords(String s, int n) {\n        String consonants = \"bcdfghjklmnpqrstvwxyz\";\n        String[] words = s.split(\" \");\n        List<String> result = new ArrayList<>();\n        \n        for (String w : words) {\n            if (w.length() > 0) {\n                int consonantCount = 0;\n                for (char c : w.toLowerCase().toCharArray()) {\n                    if (consonants.indexOf(c) != -1) {\n                        consonantCount++;\n                    }\n                }\n                if (consonantCount == n) {\n                    result.add(w);\n                }\n            }\n        }\n        \n        return result;\n    }\n}\n",
            "class Global {\n    public static String getClosestVowel(String word) {\n        String vowels = \"aeiouAEIOU\";\n        for (int i = word.length() - 2; i > 0; i--) {\n            if (vowels.indexOf(word.charAt(i)) != -1 && vowels.indexOf(word.charAt(i - 1)) == -1 && vowels.indexOf(word.charAt(i + 1)) == -1) {\n                return String.valueOf(word.charAt(i));\n            }\n        }\n        return \"\";\n    }\n}\n",
            "class Global {\n    public static String matchParens(List<String> lst) {\n        Function<String, Boolean> check = (s) -> {\n            int depth = 0;\n            for (char ch : s.toCharArray()) {\n                if (ch == '(') {\n                    depth += 1;\n                } else {\n                    depth -= 1;\n                }\n                if (depth < 0) {\n                    return false;\n                }\n            }\n            return depth == 0;\n        };\n\n        String s1 = lst.get(0) + lst.get(1);\n        String s2 = lst.get(1) + lst.get(0);\n        return check.apply(s1) || check.apply(s2) ? \"Yes\" : \"No\";\n    }\n}\n",
            "class Global {\n    public static List<Integer> maximum(List<Integer> arr, int k) {\n        if (k == 0) {\n            return new ArrayList<>();\n        }\n        Collections.sort(arr);\n        return arr.subList(arr.size() - k, arr.size());\n    }\n}\n",
            "class Global {\n    public static int solution(List<Integer> lst) {\n        int acc = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 != 0) {\n                acc += lst.get(i);\n            }\n        }\n        return acc;\n    }\n}\n",
            "class Global {\n    public static int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < Math.min(k, arr.size()); i++) {\n            int n = arr.get(i);\n            if (String.valueOf(n).length() <= 2) {\n                sum += n;\n            }\n        }\n        return sum;\n    }\n}\n",
            "import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nclass Global {\n    public static List<Integer> getOddCollatz(int n) {\n        List<Integer> collatz = new ArrayList<>();\n        collatz.add(1);\n        while (n != 1) {\n            if (n % 2 != 0) {\n                collatz.add(n);\n                n = 3 * n + 1;\n            } else {\n                n /= 2;\n            }\n        }\n        Collections.sort(collatz);\n        return collatz;\n    }\n}\n",
            "class Global {\n    public static boolean validDate(String date) {\n        if (date.length() != 10 || date.charAt(2) != '-' || date.charAt(5) != '-') {\n            return false;\n        }\n        int m = Integer.parseInt(date.substring(0, 2));\n        int d = Integer.parseInt(date.substring(3, 5));\n        if (m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) {\n            return d >= 1 && d <= 31;\n        }\n        if (m == 4 || m == 6 || m == 9 || m == 11) {\n            return d >= 1 && d <= 30;\n        }\n        if (m == 2) {\n            return d >= 1 && d <= 29;\n        }\n        return false;\n    }\n}\n",
            "import java.util.ArrayList;\nimport java.util.List;\n\nclass Global {\n    public static List<String> splitWords(String txt) {\n        if (txt.contains(\" \")) {\n            return new ArrayList<>(List.of(txt.split(\" \")));\n        } else if (txt.contains(\",\")) {\n            return new ArrayList<>(List.of(txt.split(\",\")));\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (c >= 'a' && c <= 'z' && (c - 'a') % 2 == 0) {\n                    count++;\n                }\n            }\n            return new ArrayList<>(List.of(Integer.toString(count)));\n        }\n    }\n}\n",
            "class Global {\n    public static boolean isSorted(List<Integer> lst) {\n        if (!lst.stream().allMatch((e, i) -> i == 0 || lst.get(i - 1) <= e)) {\n            return false;\n        }\n        Map<Integer, Integer> freq = new HashMap<>();\n        for (int num : lst) {\n            freq.put(num, freq.getOrDefault(num, 0) + 1);\n        }\n        return Collections.max(freq.values()) <= 2;\n    }\n}\n",
            "class Global {\n    public static String intersection(List<Integer> interval1, List<Integer> interval2) {\n        boolean isPrime(int n) {\n            if (n < 2) return false;\n            for (int i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n                if (n % i == 0) return false;\n            }\n            return true;\n        };\n\n        int l = Math.max(interval1.get(0), interval2.get(0));\n        int r = Math.min(interval1.get(1), interval2.get(1));\n        int length = r - l;\n        return length > 0 && isPrime(length) ? \"YES\" : \"NO\";\n    }\n}\n",
            "class Global {\n    public static Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        if (arr.contains(0)) {\n            return Optional.of(0);\n        }\n        int sign = arr.stream().filter(n -> n < 0).count() % 2 == 1 ? -1 : 1;\n        int sumOfAbsValues = arr.stream().mapToInt(Math::abs).sum();\n        return Optional.of(sign * sumOfAbsValues);\n    }\n}\n",
            "class Global {\n    public static List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int min_val = n * n + 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    List<Integer> temp = new ArrayList<>();\n                    if (i != 0) {\n                        temp.add(grid.get(i - 1).get(j));\n                    }\n                    if (j != 0) {\n                        temp.add(grid.get(i).get(j - 1));\n                    }\n                    if (i != n - 1) {\n                        temp.add(grid.get(i + 1).get(j));\n                    }\n                    if (j != n - 1) {\n                        temp.add(grid.get(i).get(j + 1));\n                    }\n                    min_val = Collections.min(temp, Integer::compare);\n                }\n            }\n        }\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            result.add(i % 2 == 0 ? 1 : min_val);\n        }\n        return result;\n    }\n}\n",
            "import java.util.ArrayList;\nimport java.util.List;\n\nclass Global {\n    public static List<Integer> tri(int n) {\n        if (n == 0) {\n            List<Integer> seq = new ArrayList<>();\n            seq.add(1);\n            return seq;\n        }\n        List<Integer> seq = new ArrayList<>();\n        seq.add(1);\n        seq.add(3);\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                seq.add(i / 2 + 1);\n            } else {\n                seq.add(seq.get(i - 1) + seq.get(i - 2) + (i + 3) / 2);\n            }\n        }\n        return seq;\n    }\n}\n",
            "class Global {\n    public static int digits(int n) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(n);\n        String str = sb.toString();\n        int product = 1;\n        boolean hasOddDigit = false;\n        \n        for (int i = 0; i < str.length(); i++) {\n            int digit = Character.getNumericValue(str.charAt(i));\n            if (digit % 2 == 1) {\n                hasOddDigit = true;\n                product *= digit;\n            }\n        }\n        \n        return hasOddDigit ? product : 0;\n    }\n}\n",
            "class Global {\n    public static boolean isNested(String s) {\n        int[] openIdx = new int[s.length()];\n        int[] closeIdx = new int[s.length()];\n        int openCount = 0;\n        int closeCount = 0;\n\n        for (int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n            if (ch == '[') {\n                openIdx[openCount++] = i;\n            } else if (ch == ']') {\n                closeIdx[closeCount++] = i;\n            }\n        }\n\n        int[] reversedCloseIdx = new int[s.length()];\n        for (int j = 0; j < closeCount; j++) {\n            reversedCloseIdx[j] = closeIdx[closeCount - j - 1];\n        }\n\n        int cnt = 0;\n        int i = 0;\n\n        for (int idx : openIdx) {\n            if (i < closeCount && idx < reversedCloseIdx[i]) {\n                cnt += 1;\n                i += 1;\n            }\n        }\n\n        return cnt >= 2;\n    }\n}\n",
            "class Global {\n    public static int sumSquares(List<Double> lst) {\n        return lst.stream().mapToInt(n -> (int) Math.pow(Math.ceil(n), 2)).sum();\n    }\n}\n",
            "class Global {\n    public static boolean checkIfLastCharIsALetter(String txt) {\n        if (txt == null || txt.isEmpty()) {\n            return false;\n        }\n        int lastIndex = txt.lastIndexOf(' ') + 1;\n        String last = txt.substring(lastIndex);\n        return last.length() == 1 && Character.isLetter(last.charAt(0));\n    }\n}\n",
            "class Global {\n    public static int canArrange(List<Integer> arr) {\n        if (arr.size() <= 1) {\n            return -1;\n        }\n        List<Integer> idx = new ArrayList<>();\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                idx.add(i);\n            }\n        }\n        return !idx.isEmpty() ? Collections.max(idx) : -1;\n    }\n}\n",
            "import java.util.List;\nimport java.util.Optional;\n\nclass Global {\n    public static List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst) {\n        List<Integer> neg = lst.stream().filter(i -> i < 0).toList();\n        List<Integer> pos = lst.stream().filter(i -> i > 0).toList();\n        \n        Optional<Integer> maxNeg = neg.size() > 0 ? Optional.of(neg.stream().max(Integer::compare).get()) : Optional.empty();\n        Optional<Integer> minPos = pos.size() > 0 ? Optional.of(pos.stream().min(Integer::compare).get()) : Optional.empty();\n        \n        return List.of(maxNeg, minPos);\n    }\n}\n",
            "class Global {\n    public static Optional<Double> compareOne(Object a, Object b) {\n        double anyToReal(Object o) {\n            if (o instanceof String) {\n                String str = (String) o;\n                return Double.parseDouble(str.replace(',', '.'));\n            } else if (o instanceof Number) {\n                return ((Number) o).doubleValue();\n            }\n            throw new IllegalArgumentException(\"Type Error\");\n        }\n\n        double a1 = anyToReal(a);\n        double b1 = anyToReal(b);\n\n        if (a1 == b1) {\n            return Optional.empty();\n        } else if (a1 > b1) {\n            return Optional.of(a1);\n        } else {\n            return Optional.of(b1);\n        }\n    }\n}\n",
            "class Global {\n    public static boolean isEqualToSumEven(int n) {\n        return n % 2 == 0 && n >= 8;\n    }\n}\n",
            "class Global {\n    public static int specialFactorial(int n) {\n        int fact = 1;\n        int result = 1;\n        for (int i = 1; i <= n; i++) {\n            fact *= i;\n            result *= fact;\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String fixSpaces(String txt) {\n        return txt.replaceAll(\"\\\\s{3,}\", \"-\").replaceAll(\" \", \"_\");\n    }\n}\n",
            "class Global {\n    public static String fileNameCheck(String fileName) {\n        String[] suf = {\"txt\", \"exe\", \"dll\"};\n        String[] lst = fileName.split(\"\\\\.\");\n        if (lst.length != 2 || Arrays.stream(suf).noneMatch(lst[1]::equals) || lst[0].length() == 0 || !Character.isLetter(lst[0].charAt(0)) || !lst[0].replaceAll(\"[^\\\\d]\", \"\").matches(\"\\\\d{0,3}\")) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}\n",
            "class Global {\n    public static int sumSquares(List<Integer> lst) {\n        int result = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                result += Math.pow(lst.get(i), 2);\n            } else if (i % 4 == 0) {\n                result += Math.pow(lst.get(i), 3);\n            } else {\n                result += lst.get(i);\n            }\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        StringBuilder result = new StringBuilder();\n        for (String w : words) {\n            if (isPrime(w.length())) {\n                if (result.length() > 0) {\n                    result.append(\" \");\n                }\n                result.append(w);\n            }\n        }\n        return result.toString();\n    }\n\n    private static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
            "class Global {\n    public static boolean simplify(String x, String n) {\n        String[] xs = x.split(\"/\");\n        String[] ns = n.split(\"/\");\n        int num = Integer.parseInt(xs[0]) * Integer.parseInt(ns[0]);\n        int den = Integer.parseInt(xs[1]) * Integer.parseInt(ns[1]);\n        return num % den == 0;\n    }\n}\n",
            "class Global {\n    public static List<Integer> orderByPoints(List<Integer> nums) {\n        return nums.stream()\n                .sorted(Comparator.comparingInt(Global::digitsSum))\n                .collect(Collectors.toList());\n    }\n\n    private static int digitsSum(int n) {\n        String nStr = Integer.toString(n);\n        if (n >= 0) {\n            return nStr.chars()\n                    .map(Character::getNumericValue)\n                    .sum();\n        } else {\n            return Character.getNumericValue(nStr.charAt(0)) * 2 + digitsSum(Math.abs(n));\n        }\n    }\n}\n",
            "class Global {\n    public static int specialFilter(List<Integer> nums) {\n        String odds = \"13579\";\n        return (int) nums.stream()\n                .filter(n -> n > 10 && n % 2 == 1 && odds.indexOf(Integer.toString(n).charAt(0)) != -1)\n                .count();\n    }\n}\n",
            "class Global {\n    public static int getMaxTriples(int n) {\n        int[] c = {0, 0, 0};\n        for (int i = 1; i <= n; i++) {\n            int a = i * i - i + 1;\n            c[a % 3]++;\n        }\n        return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6;\n    }\n}\n",
            "class Global {\n    public static List<String> bf(String planet1, String planet2) {\n        List<String> names = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        if (!names.contains(planet1) || !names.contains(planet2)) {\n            return Collections.emptyList();\n        }\n        int l = names.indexOf(planet1);\n        int r = names.indexOf(planet2);\n        if (l > r) {\n            int temp = l;\n            l = r;\n            r = temp;\n        }\n        if (l == r) {\n            return Collections.emptyList();\n        }\n        return names.subList(l + 1, r);\n    }\n}\n",
            "class Global {\n    public static List<String> sortedListSum(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result, Comparator.comparingInt(String::length).thenComparing(Comparator.naturalOrder()));\n        return result;\n    }\n}\n",
            "class Global {\n    public static int xOrY(int n, int x, int y) {\n        if (n < 2) {\n            return y;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}\n",
            "class Global {\n    public static int doubleTheDifference(List<Double> lst) {\n        return lst.stream()\n                .filter(n -> n >= 0 && n % 2 == 1)\n                .mapToInt(n -> (int) (n * n))\n                .sum();\n    }\n}\n",
            "class Global {\n    public static List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            result.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return result;\n    }\n}\n",
            "class Global {\n    public static String strongestExtension(String className, List<String> extensions) {\n        int max_s = Integer.MIN_VALUE;\n        String max_ext = \"\";\n        for (String ext : extensions) {\n            int upper = 0;\n            int lower = 0;\n            for (char c : ext.toCharArray()) {\n                if (c >= 'A' && c <= 'Z') {\n                    upper++;\n                } else if (c >= 'a' && c <= 'z') {\n                    lower++;\n                }\n            }\n            int s = upper - lower;\n            if (s > max_s) {\n                max_s = s;\n                max_ext = ext;\n            }\n        }\n        return className + \".\" + max_ext;\n    }\n}\n",
            "class Global {\n    public static boolean cycpatternCheck(String a, String b) {\n        if (a.length() < b.length()) {\n            return false;\n        }\n        for (int i = 0; i < b.length(); i++) {\n            if ((b.substring(i) + b.substring(0, i)).contains(a)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
            "import java.util.ArrayList;\nimport java.util.List;\n\nclass Global {\n    public static List<Integer> evenOddCount(int num) {\n        String ds = Integer.toString(Math.abs(num));\n        int even = 0;\n        for (char d : ds.toCharArray()) {\n            if (Character.getNumericValue(d) % 2 == 0) {\n                even++;\n            }\n        }\n        List<Integer> result = new ArrayList<>();\n        result.add(even);\n        result.add(ds.length() - even);\n        return result;\n    }\n}\n",
            "class Global {\n    public static String intToMiniRoman(int num) {\n        int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        String[] numerals = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n        StringBuilder res = new StringBuilder();\n        for (int i = 0; i < values.length; i++) {\n            while (num >= values[i]) {\n                res.append(numerals[i]);\n                num -= values[i];\n            }\n        }\n        return res.toString();\n    }\n}\n",
            "class Global {\n    public static boolean rightAngleTriangle(int a, int b, int c) {\n        int[] s = {a, b, c};\n        java.util.Arrays.sort(s);\n        return s[0] * s[0] + s[1] * s[1] == s[2] * s[2];\n    }\n}\n",
            "class Global {\n    public static String findMax(List<String> words) {\n        int maxCnt = 0;\n        String maxW = \"\";\n        for (String w : words) {\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : w.toCharArray()) {\n                uniqueChars.add(c);\n            }\n            int cnt = uniqueChars.size();\n            if (cnt > maxCnt) {\n                maxCnt = cnt;\n                maxW = w;\n            } else if (cnt == maxCnt) {\n                maxW = w.compareTo(maxW) < 0 ? w : maxW;\n            }\n        }\n        return maxW;\n    }\n}\n",
            "class Global {\n    public static List<Integer> eat(int num, int need, int remaining) {\n        if (need <= remaining) {\n            return Arrays.asList(num + need, remaining - need);\n        } else {\n            return Arrays.asList(num + remaining, 0);\n        }\n    }\n}\n",
            "class Global {\n    public static int doAlgebra(List<String> operators, List<Integer> operands) {\n        List<String> ops = new ArrayList<>(operators);\n        List<Integer> nums = new ArrayList<>(operands);\n        int i = ops.size() - 1;\n        while (i >= 0) {\n            if (ops.get(i).equals(\"**\")) {\n                nums.set(i, (int) Math.pow(nums.get(i), nums.get(i + 1)));\n                nums.remove(i + 1);\n                ops.remove(i);\n            }\n            i--;\n        }\n        i = 0;\n        while (i < ops.size()) {\n            if (ops.get(i).equals(\"*\")) {\n                nums.set(i, nums.get(i) * nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            } else if (ops.get(i).equals(\"//\")) {\n                nums.set(i, nums.get(i) / nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            }\n            i++;\n        }\n        i = 0;\n        while (i < ops.size()) {\n            if (ops.get(i).equals(\"+\")) {\n                nums.set(i, nums.get(i) + nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            } else if (ops.get(i).equals(\"-\")) {\n                nums.set(i, nums.get(i) - nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            }\n            i++;\n        }\n        return nums.get(0);\n    }\n}\n",
            "class Global {\n    public static String solve(String s) {\n        if (!s.matches(\".*[a-zA-Z].*\")) {\n            return new StringBuilder(s).reverse().toString();\n        }\n        StringBuilder result = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (!Character.isLetter(ch)) {\n                result.append(ch);\n            } else if (Character.isUpperCase(ch)) {\n                result.append(Character.toLowerCase(ch));\n            } else if (Character.isLowerCase(ch)) {\n                result.append(Character.toUpperCase(ch));\n            }\n        }\n        return result.toString();\n    }\n}\n",
            "import java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Optional;\n\nclass Global {\n    public static Optional<String> stringToMd5(String txt) {\n        if (txt == null || txt.isEmpty()) {\n            return Optional.empty();\n        }\n        try {\n            MessageDigest md5Hash = MessageDigest.getInstance(\"MD5\");\n            byte[] txtBytes = txt.getBytes();\n            md5Hash.update(txtBytes);\n            String md5Encoded = bytesToHex(md5Hash.digest());\n            return Optional.of(md5Encoded);\n        } catch (NoSuchAlgorithmException e) {\n            // Handle exception as needed\n            return Optional.empty();\n        }\n    }\n\n    private static String bytesToHex(byte[] bytes) {\n        StringBuilder sb = new StringBuilder();\n        for (byte b : bytes) {\n            sb.append(String.format(\"%02x\", b));\n        }\n        return sb.toString();\n    }\n}\n",
            "class Global {\n    public static List<Integer> generateIntegers(int a, int b) {\n        final int lower = Math.max(2, Math.min(a, b));\n        final int upper = Math.min(8, Math.max(a, b));\n        final List<Integer> result = new ArrayList<>();\n        for (int i = lower; i <= upper; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}\n"
        ]
    }
}