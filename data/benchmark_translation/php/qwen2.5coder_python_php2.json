{
    "python": {
        "go": [
            "```go\nfunc HasCloseElements(numbers []float64, threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            if abs(numbers[i]-numbers[j]) < threshold {\n                return true\n            }\n        }\n    }\n    return false\n}\n```",
            "```go\nfunc SeparateParenGroups(parenString string) []string {\n    groups := []string{}\n    stk := []rune{}\n    currentGroup := \"\"\n    parens := strings.ReplaceAll(parenString, \" \", \"\")\n    for _, ch := range parens {\n        if ch == '(' {\n            stk = append(stk, ch)\n            currentGroup += string(ch)\n        } else if ch == ')' {\n            stk = stk[:len(stk)-1]\n            currentGroup += string(ch)\n            if len(stk) == 0 {\n                groups = append(groups, currentGroup)\n                currentGroup = \"\"\n            }\n        }\n    }\n    return groups\n}\n```",
            "```go\nfunc TruncateNumber(num float64) float64 {\n    return num - math.Floor(num)\n}\n```",
            "```go\nfunc BelowZero(operations []int) bool {\n    balance := 0\n    for _, op := range operations {\n        balance += op\n        if balance < 0 {\n            return true\n        }\n    }\n    return false\n}\n```",
            "```go\nfunc MeanAbsoluteDeviation(numbers []float64) float64 {\n    mean := 0.0\n    for _, num := range numbers {\n        mean += num\n    }\n    mean /= float64(len(numbers))\n    \n    deviation := 0.0\n    for _, x := range numbers {\n        deviation += math.Abs(x - mean)\n    }\n    return deviation / float64(len(numbers))\n}\n```",
            "```go\nfunc Intersperse(numbers []int, delimiter int) []int {\n    result := make([]int, 0, len(numbers)*2-1)\n    for i := 0; i < len(numbers); i++ {\n        if i != 0 {\n            result = append(result, delimiter)\n        }\n        result = append(result, numbers[i])\n    }\n    return result\n}\n```",
            "```go\nfunc ParseNestedParens(parenString string) []int {\n    result := []int{}\n    parenGroups := strings.Split(parenString, \" \")\n    for _, group := range parenGroups {\n        maxDepth := 0\n        depth := 0\n        for i := 0; i < len(group); i++ {\n            ch := group[i]\n            if ch == '(' {\n                depth++\n                if depth > maxDepth {\n                    maxDepth = depth\n                }\n            } else if ch == ')' {\n                depth--\n            }\n        }\n        result = append(result, maxDepth)\n    }\n    return result\n}\n```",
            "```go\nfunc FilterBySubstring(strs []string, substring string) []string {\n    var result []string\n    for _, s := range strs {\n        if strings.Contains(s, substring) {\n            result = append(result, s)\n        }\n    }\n    return result\n}\n```",
            "```func SumProduct(numbers []int) []int {\n    n_sum := 0\n    for _, number := range numbers {\n        n_sum += number\n    }\n    \n    n_product := 1\n    for _, number := range numbers {\n        n_product *= number\n    }\n    \n    return []int{n_sum, n_product}\n}\n```",
            "```go\nfunc RollingMax(numbers []int) []int {\n    maxSoFar := -math.MaxInt64\n    result := []int{}\n    for _, num := range numbers {\n        if num > maxSoFar {\n            maxSoFar = num\n        }\n        result = append(result, maxSoFar)\n    }\n    return result\n}\n```",
            "```go\nfunc isPalindrome(s string) bool {\n    for i := 0; i < len(s)/2; i++ {\n        if s[i] != s[len(s)-1-i] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc MakePalindrome(s string) string {\n    if isPalindrome(s) {\n        return s\n    }\n    for i := 0; i < len(s); i++ {\n        if isPalindrome(s[i:]) {\n            suffix := s[:i]\n            for j := 0; j < len(suffix)/2; j++ {\n                suffix = suffix[:len(suffix)-j-1] + string(suffix[j]) + suffix[len(suffix)-j:]\n            }\n            return s + suffix\n        }\n    }\n    return \"\"\n}\n```",
            "```go\nfunc StringXor(a string, b string) string {\n    result := \"\"\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            result += \"0\"\n        } else {\n            result += \"1\"\n        }\n    }\n    return result\n}\n```",
            "```go\nfunc Longest(strs []string) *string {\n    if len(strs) == 0 {\n        return nil\n    }\n    longestS := strs[0]\n    for _, s := range strs {\n        if len(s) > len(longestS) {\n            longestS = s\n        }\n    }\n    return &longestS\n}\n```",
            "```go\nfunc GreatestCommonDivisor(a int, b int) int {\n    if b == 0 {\n        return a\n    } else {\n        return GreatestCommonDivisor(b, a % b)\n    }\n}\n```",
            "```go\nfunc AllPrefixes(s string) []string {\n    prefixes := []string{}\n    for i := 0; i < len(s); i++ {\n        prefixes = append(prefixes, s[:i+1])\n    }\n    return prefixes\n}\n```",
            "```go\nfunc StringSequence(n int) string {\n    sequence := make([]string, n+1)\n    for i := 0; i <= n; i++ {\n        sequence[i] = fmt.Sprintf(\"%d\", i)\n    }\n    return strings.Join(sequence, \" \")\n}\n```",
            "```go\nfunc CountDistinctCharacters(s string) int {\n    charMap := make(map[rune]bool)\n    for _, char := range strings.ToLower(s) {\n        charMap[char] = true\n    }\n    return len(charMap)\n}\n```",
            "```go\nfunc ParseMusic(musicString string) []int {\n\tdurations := map[string]int{\"o\": 4, \"o|\": 2, \".|\": 1}\n\tnotes := strings.Split(musicString, \" \")\n\tresult := make([]int, len(notes))\n\tfor i, note := range notes {\n\t\tif duration, exists := durations[note]; exists {\n\t\t\tresult[i] = duration\n\t\t} else {\n\t\t\tresult[i] = 0 // or handle error as needed\n\t\t}\n\t}\n\treturn result\n}\n```",
            "Certainly! Here's the translation of the PHP function into Go:\n\n```go\nfunc HowManyTimes(s string, substring string) int {\n    times := 0\n    for i := 0; i <= len(s)-len(substring); i++ {\n        if s[i:i+len(substring)] == substring {\n            times++\n        }\n    }\n    return times\n}\n```",
            "```go\nfunc SortNumbers(numbers string) string {\n    numDict := map[string]int{\n        \"zero\": 0,\n        \"one\":  1,\n        \"two\":  2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n\n    numList := strings.Fields(numbers)\n    filteredNumList := make([]string, 0)\n\n    for _, num := range numList {\n        if _, exists := numDict[num]; exists {\n            filteredNumList = append(filteredNumList, num)\n        }\n    }\n\n    sort.Slice(filteredNumList, func(i, j int) bool {\n        return numDict[filteredNumList[i]] < numDict[filteredNumList[j]]\n    })\n\n    return strings.Join(filteredNumList, \" \")\n}\n```",
            "```go\nfunc FindClosestElements(numbers []float64) []float64 {\n    sort.Float64s(numbers)\n    minDiff := math.Inf(1)\n    closestPair := make([]float64, 2)\n    for i := 1; i < len(numbers); i++ {\n        diff := numbers[i] - numbers[i-1]\n        if diff < minDiff {\n            minDiff = diff\n            closestPair[0] = numbers[i-1]\n            closestPair[1] = numbers[i]\n        }\n    }\n    return closestPair\n}\n```",
            "```go\nfunc RescaleToUnit(numbers []float64) []float64 {\n    minNum := numbers[0]\n    maxNum := numbers[0]\n    for _, num := range numbers {\n        if num < minNum {\n            minNum = num\n        }\n        if num > maxNum {\n            maxNum = num\n        }\n    }\n    if minNum == maxNum {\n        return make([]float64, len(numbers))\n    } else {\n        rescaled := make([]float64, len(numbers))\n        for i, num := range numbers {\n            rescaled[i] = (num - minNum) / (maxNum - minNum)\n        }\n        return rescaled\n    }\n}\n```",
            "```go\nfunc FilterIntegers(values []interface{}) []int {\n    var result []int\n    for _, v := range values {\n        if intValue, ok := v.(int); ok {\n            result = append(result, intValue)\n        }\n    }\n    return result\n}\n```",
            "```go\nfunc StrLength(s string) int {\n    return len(s)\n}\n```",
            "```go\nfunc LargestDivisor(n int) int {\n    for i := 2; i < n; i++ {\n        if n%i == 0 {\n            return n / i\n        }\n    }\n    return 1\n}\n```",
            "```go\nfunc Factorize(n int) []int {\n    factors := []int{}\n    divisor := 2\n    for divisor <= n {\n        if n % divisor == 0 {\n            factors = append(factors, divisor)\n            n /= divisor\n        } else {\n            divisor++\n        }\n    }\n    return factors\n}\n```",
            "```go\nfunc RemoveDuplicates(numbers []int) []int {\n    counts := make(map[int]int)\n    for _, num := range numbers {\n        counts[num]++\n    }\n    res := []int{}\n    for _, num := range numbers {\n        if counts[num] == 1 {\n            res = append(res, num)\n        }\n    }\n    return res\n}\n```",
            "```go\nfunc FlipCase(s string) string {\n    flipped := \"\"\n    for _, ch := range s {\n        if !unicode.IsLetter(ch) {\n            flipped += string(ch)\n        } else if unicode.IsLower(ch) {\n            flipped += strings.ToUpper(string(ch))\n        } else if unicode.IsUpper(ch) {\n            flipped += strings.ToLower(string(ch))\n        }\n    }\n    return flipped\n}\n```",
            "```go\nfunc Concatenate(strs []string) string {\n    return strings.Join(strs, \"\")\n}\n```",
            "```go\nfunc FilterByPrefix(strs []string, prefixStr string) []string {\n    var result []string\n    for _, s := range strs {\n        if strings.HasPrefix(s, prefixStr) {\n            result = append(result, s)\n        }\n    }\n    return result\n}\n```",
            "```go\nfunc GetPositive(l []int) []int {\n    var result []int\n    for _, num := range l {\n        if num > 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n```",
            "```go\nfunc IsPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n```",
            "```go\nfunc Poly(xs []int, x float64) float64 {\n    res := 0.0\n    for i := 0; i < len(xs); i++ {\n        res += float64(xs[i]) * math.Pow(x, float64(i))\n    }\n    return res\n}\n\nfunc FindZero(xs []int) float64 {\n    x1 := 1.0\n    x2 := -1.0\n    for Poly(xs, x1)*Poly(xs, x2) > 0 {\n        x1 *= 2\n        x2 *= 2\n    }\n    for math.Abs(x1-x2) > 1e-10 {\n        mid := (x1 + x2) / 2\n        if Poly(xs, mid) == 0 {\n            return mid\n        } else if Poly(xs, mid)*Poly(xs, x1) < 0 {\n            x2 = mid\n        } else {\n            x1 = mid\n        }\n    }\n    return (x1 + x2) / 2\n}\n```",
            "```go\nfunc SortThird(l []int) []int {\n    sortedThird := make([]int, len(l)/3)\n    for i := 0; i < len(sortedThird); i++ {\n        sortedThird[i] = l[i*3]\n    }\n    sort.Ints(sortedThird)\n\n    result := make([]int, len(l))\n    for i := range l {\n        if i%3 == 0 {\n            result[i] = sortedThird[i/3]\n        } else {\n            result[i] = l[i]\n        }\n    }\n    return result\n}\n```",
            "```go\nfunc ListUnique(l []int) []int {\n    uniqueElements := make(map[int]bool)\n    for _, item := range l {\n        uniqueElements[item] = true\n    }\n\n    var result []int\n    for key := range uniqueElements {\n        result = append(result, key)\n    }\n    sort.Ints(result)\n    return result\n}\n```",
            "```go\nfunc MaxElement(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n    max := l[0]\n    for _, value := range l {\n        if value > max {\n            max = value\n        }\n    }\n    return max\n}\n```",
            "```go\nfunc FizzBuzz(n int) int {\n    cnt := 0\n    for i := 0; i < n; i++ {\n        if i%11 == 0 || i%13 == 0 {\n            cnt += countSevensInNumber(i)\n        }\n    }\n    return cnt\n}\n\nfunc countSevensInNumber(num int) int {\n    count := 0\n    for num > 0 {\n        if num % 10 == 7 {\n            count++\n        }\n        num /= 10\n    }\n    return count\n}\n```",
            "```go\nfunc SortEven(l []int) []int {\n    even := make([]int, 0)\n    for i := 0; i < len(l); i += 2 {\n        even = append(even, l[i])\n    }\n    sort.Ints(even)\n    \n    result := make([]int, len(l))\n    evenIndex := 0\n    for i := range l {\n        if i%2 == 0 {\n            result[i] = even[evenIndex]\n            evenIndex++\n        } else {\n            result[i] = l[i]\n        }\n    }\n    return result\n}\n```",
            "```go\nfunc EncodeCyclic(s string) string {\n    result := \"\"\n    for i := 0; i < len(s); i += 3 {\n        if i+3 > len(s) {\n            result += s[i:]\n        } else {\n            result += s[i+1] + s[i+2] + s[i]\n        }\n    }\n    return result\n}\n\nfunc DecodeCyclic(s string) string {\n    return EncodeCyclic(EncodeCyclic(s))\n}\n```",
            "```go\nfunc PrimeFib(n int) int {\n    if n < 2 {\n        return -1\n    }\n    var f = []int{0, 1}\n    cnt := 0\n    for cnt < n {\n        f = append(f[:0], f[1], f[0]+f[1])\n        if is_prime(f[1]) {\n            cnt++\n        }\n    }\n    return f[1]\n}\n\nfunc is_prime(v int) bool {\n    if v < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Sqrt(float64(v))); i++ {\n        if v%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n```",
            "```go\nfunc TriplesSumToZero(l []int) bool {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            for k := j + 1; k < len(l); k++ {\n                if l[i]+l[j]+l[k] == 0 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n```",
            "```go\nfunc CarRaceCollision(n int) int {\n    return n * n\n}\n```",
            "```go\nfunc IncrList(l []int) []int {\n    result := make([]int, len(l))\n    for i, v := range l {\n        result[i] = v + 1\n    }\n    return result\n}\n```",
            "```go\nfunc PairsSumToZero(l []int) bool {\n    seen := make(map[int]bool)\n    for _, num := range l {\n        if seen[-num] {\n            return true\n        }\n        seen[num] = true\n    }\n    return false\n}\n```",
            "```go\nfunc ChangeBase(x int, bas int) string {\n    if x == 0 {\n        return \"0\"\n    }\n    var digits []string\n    for x > 0 {\n        digits = append(digits, strconv.Itoa(x%bas))\n        x = x / bas\n    }\n    for i, j := 0, len(digits)-1; i < j; i, j = i+1, j-1 {\n        digits[i], digits[j] = digits[j], digits[i]\n    }\n    return strings.Join(digits, \"\")\n}\n```",
            "```go\nfunc TriangleArea(a int, h int) float64 {\n    return float64(a * h) / 2.0\n}\n```",
            "```go\nfunc Fib4(n int) int {\n    fib := [4]int{0, 0, 2, 0}\n    for i := 4; i <= n+1; i++ {\n        sum := 0\n        for _, value := range fib {\n            sum += value\n        }\n        fib[i%4] = sum\n    }\n    return fib[n%4]\n}\n```",
            "```go\nfunc Median(l []float64) float64 {\n\tsort.Float64s(l)\n\tcount := len(l)\n\tif count%2 != 0 {\n\t\treturn l[count/2]\n\t} else {\n\t\treturn (l[count/2] + l[count/2-1]) / 2\n\t}\n}\n```",
            "```go\nfunc IsPalindrome(txt string) bool {\n    return txt == reverseString(txt)\n}\n\nfunc reverseString(s string) string {\n    runes := []rune(s)\n    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        runes[i], runes[j] = runes[j], runes[i]\n    }\n    return string(runes)\n}\n```",
            "```go\nfunc Modp(n int, p int) int {\n    ret := 1\n    for i := 0; i < n; i++ {\n        ret = (ret * 2) % p\n    }\n    return ret\n}\n```",
            "```go\nfunc EncodeShift(s string) string {\n    result := \"\"\n    for i := 0; i < len(s); i++ {\n        ch := s[i]\n        result += string(((int(ch) - 97 + 5) % 26) + 97)\n    }\n    return result\n}\n\nfunc DecodeShift(s string) string {\n    result := \"\"\n    for i := 0; i < len(s); i++ {\n        ch := s[i]\n        result += string(((int(ch) - 97 + 21) % 26) + 97)\n    }\n    return result\n}\n```",
            "```go\nfunc RemoveVowels(txt string) string {\n    vowels := \"aeiouAEIOU\"\n    result := \"\"\n    \n    for i := 0; i < len(txt); i++ {\n        if strings.IndexRune(vowels, rune(txt[i])) == -1 {\n            result += string(txt[i])\n        }\n    }\n    \n    return result\n}\n```",
            "```go\nfunc BelowThreshold(l []int, t int) bool {\n    for _, x := range l {\n        if x >= t {\n            return false\n        }\n    }\n    return true\n}\n```",
            "```go\nfunc Add(x int, y int) int {\n    return x + y\n}\n```",
            "```go\nfunc SameChars(s0 string, s1 string) bool {\n    return map[rune]bool{} == map[rune]bool{}\n}\n```",
            "```go\nfunc Fib(n int) int {\n    if n <= 1 {\n        return n\n    } else {\n        return Fib(n - 1) + Fib(n - 2)\n    }\n}\n```",
            "```go\nfunc CorrectBracketing(brackets string) bool {\n    depth := 0\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '<' {\n            depth += 1\n        } else if brackets[i] == '>' {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n```",
            "```go\nfunc Monotonic(l []int) bool {\n    if len(l) < 2 {\n        return true\n    }\n    \n    increasing := true\n    decreasing := true\n    \n    for i := 1; i < len(l); i++ {\n        if l[i] > l[i-1] {\n            decreasing = false\n        }\n        if l[i] < l[i-1] {\n            increasing = false\n        }\n    }\n    \n    return increasing || decreasing\n}\n```",
            "```go\nfunc Common(l1 []int, l2 []int) []int {\n    seen := make(map[int]bool)\n    var result []int\n\n    for _, elem := range l1 {\n        seen[elem] = true\n    }\n\n    for _, elem := range l2 {\n        if seen[elem] {\n            result = append(result, elem)\n            delete(seen, elem) // To ensure uniqueness\n        }\n    }\n\n    sort.Ints(result)\n    return result\n}\n```",
            "```go\nfunc LargestPrimeFactor(n int) int {\n    i := 2\n    for i*i <= n {\n        if n%i != 0 {\n            i++\n        } else {\n            n /= i\n        }\n    }\n    return n\n}\n```",
            "```go\nfunc SumToN(n int) int {\n    sum := 0\n    for i := 0; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n```",
            "```go\nfunc CorrectBracketing(brackets string) bool {\n    depth := 0\n    for i := 0; i < len(brackets); i++ {\n        if brackets[i] == '(' {\n            depth += 1\n        } else if brackets[i] == ')' {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n```",
            "```go\nfunc Derivative(xs []int) []int {\n    result := []int{}\n    for i := 1; i < len(xs); i++ {\n        result = append(result, xs[i]*i)\n    }\n    return result\n}\n```",
            "```go\nfunc Fibfib(n int) int {\n\tif n <= 1 {\n\t\treturn 0\n\t}\n\ta, b, c := 0, 0, 1\n\tfor n > 2 {\n\t\ta, b, c = b, c, a+b+c\n\t\tn--\n\t}\n\treturn c\n}\n```",
            "```go\nfunc VowelsCount(s string) int {\n    vowels := \"aeiou\"\n    cnt := 0\n    for i := 0; i < len(s); i++ {\n        if strings.ContainsRune(vowels, unicode.ToLower(rune(s[i]))) || (i == len(s)-1 && unicode.ToLower(rune(s[i])) == 'y') {\n            cnt++\n        }\n    }\n    return cnt\n}\n```",
            "```go\nfunc CircularShift(x int, shift int) string {\n    x_str := strconv.Itoa(x)\n    if shift > len(x_str) {\n        return reverseString(x_str)\n    } else {\n        return x_str[len(x_str)-shift:] + x_str[:len(x_str)-shift]\n    }\n}\n\nfunc reverseString(s string) string {\n    runes := []rune(s)\n    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        runes[i], runes[j] = runes[j], runes[i]\n    }\n    return string(runes)\n}\n```",
            "```go\nfunc DigitSum(s string) int {\n    sum := 0\n    for i := 0; i < len(s); i++ {\n        c := s[i]\n        if c >= 'A' && c <= 'Z' {\n            sum += int(c)\n        }\n    }\n    return sum\n}\n```",
            "```go\nfunc FruitDistribution(s string, n int) int {\n    words := strings.Split(s, \" \")\n    applesIndex := slices.Index(words, \"apples\") - 1\n    orangesIndex := slices.Index(words, \"oranges\") - 1\n    apples, _ := strconv.Atoi(words[applesIndex])\n    oranges, _ := strconv.Atoi(words[orangesIndex])\n    return n - apples - oranges\n}\n```",
            "```go\nfunc Pluck(arr []int) []int {\n    var evens []int\n    for _, n := range arr {\n        if n%2 == 0 {\n            evens = append(evens, n)\n        }\n    }\n    \n    if len(evens) == 0 {\n        return []int{}\n    }\n    \n    minEven := evens[0]\n    index := -1\n    for i, n := range arr {\n        if n == minEven {\n            index = i\n            break\n        }\n    }\n    \n    return []int{minEven, index}\n}\n```",
            "```go\nfunc Search(lst []int) int {\n    freqs := make(map[int]int)\n    for _, n := range lst {\n        if _, exists := freqs[n]; exists {\n            freqs[n]++\n        } else {\n            freqs[n] = 1\n        }\n    }\n    goodVals := []int{}\n    for k, v := range freqs {\n        if v >= k {\n            goodVals = append(goodVals, k)\n        }\n    }\n    if len(goodVals) > 0 {\n        maxVal := -1\n        for _, val := range goodVals {\n            if val > maxVal {\n                maxVal = val\n            }\n        }\n        return maxVal\n    }\n    return -1\n}\n```",
            "```go\nfunc StrangeSortList(lst []int) []int {\n    sl := make([]int, len(lst))\n    copy(sl, lst)\n    sort.Ints(sl)\n    result := []int{}\n    left := 0\n    right := len(sl) - 1\n    for left <= right {\n        result = append(result, sl[left])\n        left++\n        if left <= right {\n            result = append(result, sl[right])\n            right--\n        }\n    }\n    return result\n}\n```",
            "```go\nfunc TriangleArea(a int, b int, c int) float64 {\n    if a+b > c && a+c > b && b+c > a {\n        s := float64(a+b+c) / 2.0\n        return math.Sqrt(s * (s - float64(a)) * (s - float64(b)) * (s - float64(c)))\n    } else {\n        return -1.0\n    }\n}\n```",
            "```go\nfunc WillItFly(q []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n    is_palin := true\n    for i := 0; i < len(q); i++ {\n        if q[i] != q[len(q)-i-1] {\n            is_palin = false\n            break\n        }\n    }\n    total := 0\n    for _, val := range q {\n        total += val\n    }\n    return is_palin && total <= w\n}\n```",
            "```go\nfunc SmallestChange(arr []int) int {\n    ans := 0\n    for i := 0; i < len(arr)/2; i++ {\n        if arr[i] != arr[len(arr)-i-1] {\n            ans += 1\n        }\n    }\n    return ans\n}\n```",
            "```go\nfunc TotalMatch(lst1 []string, lst2 []string) []string {\n    cnt1 := 0\n    for _, item := range lst1 {\n        cnt1 += len(item)\n    }\n\n    cnt2 := 0\n    for _, item := range lst2 {\n        cnt2 += len(item)\n    }\n\n    if cnt1 <= cnt2 {\n        return lst1\n    }\n    return lst2\n}\n```",
            "```go\nfunc IsMultiplyPrime(a int) bool {\n    cnt := 0\n    for i := 2; i <= a; i++ {\n        if isPrime(i) {\n            for a%i == 0 {\n                cnt++\n                a /= i\n            }\n        }\n    }\n    return cnt == 3\n}\n\nfunc isPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n```",
            "```go\nfunc IsSimplePower(x int, n int) bool {\n    if n < 2 {\n        return x == n\n    }\n    tmp := 1\n    for tmp < x {\n        tmp *= n\n    }\n    return tmp == x\n}\n```",
            "```go\nfunc IsCube(a int) bool {\n    a = Abs(a)\n    root := int(Round(Pow(float64(a), 1.0/3.0)))\n    return root*root*root == a\n}\n```",
            "```go\nfunc HexKey(num string) int {\n    count := 0\n    for _, x := range num {\n        if strings.ContainsRune(\"2357BD\", x) {\n            count++\n        }\n    }\n    return count\n}\n```",
            "```go\nfunc DecimalToBinary(dec int) string {\n    binary := strconv.FormatInt(int64(dec), 2)\n    return \"db\" + binary + \"db\"\n}\n```",
            "```go\nfunc IsHappy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n    for i := 0; i <= len(s)-3; i++ {\n        if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return true\n}\n```",
            "```go\nfunc NumericalLetterGrade(grades []float64) []string {\n    result := []string{}\n    for _, g := range grades {\n        if g == 4.0 {\n            result = append(result, \"A+\")\n        } else if g > 3.7 {\n            result = append(result, \"A\")\n        } else if g > 3.3 {\n            result = append(result, \"A-\")\n        } else if g > 3.0 {\n            result = append(result, \"B+\")\n        } else if g > 2.7 {\n            result = append(result, \"B\")\n        } else if g > 2.3 {\n            result = append(result, \"B-\")\n        } else if g > 2.0 {\n            result = append(result, \"C+\")\n        } else if g > 1.7 {\n            result = append(result, \"C\")\n        } else if g > 1.3 {\n            result = append(result, \"C-\")\n        } else if g > 1.0 {\n            result = append(result, \"D+\")\n        } else if g > 0.7 {\n            result = append(result, \"D\")\n        } else if g > 0.0 {\n            result = append(result, \"D-\")\n        } else {\n            result = append(result, \"E\")\n        }\n    }\n    return result\n}\n```",
            "```go\nfunc PrimeLength(s string) bool {\n    length := len(s)\n    if length < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Sqrt(float64(length))); i++ {\n        if length%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n```",
            "```go\nfunc StartsOneEnds(n int) int {\n    if n == 1 {\n        return 1\n    }\n    return 2 * 9 * int(math.Pow(10, float64(n-2)))\n}\n```",
            "```go\nfunc Solve(n int) string {\n    digitsSum := 0\n    for n != 0 {\n        digitsSum += n % 10\n        n /= 10\n    }\n    return strconv.FormatInt(int64(digitsSum), 2)\n}\n```",
            "```go\nfunc Add(lst []int) int {\n    sum := 0\n    for i, x := range lst {\n        if i%2 == 1 && x%2 == 0 {\n            sum += x\n        }\n    }\n    return sum\n}\n```",
            "```go\nfunc AntiShuffle(s string) string {\n\twords := strings.Split(s, \" \")\n\tvar sortedWords []string\n\n\tfor _, word := range words {\n\t\tchars := []rune(word)\n\t\tsort.Slice(chars, func(i, j int) bool {\n\t\t\treturn chars[i] < chars[j]\n\t\t})\n\t\tsortedWords = append(sortedWords, string(chars))\n\t}\n\n\treturn strings.Join(sortedWords, \" \")\n}\n```",
            "```go\nfunc GetRow(lst [][]int, x int) [][]int {\n    coords := [][]int{}\n    for i := 0; i < len(lst); i++ {\n        for j := 0; j < len(lst[i]); j++ {\n            if lst[i][j] == x {\n                coords = append(coords, []int{i, j})\n            }\n        }\n    }\n    sort.Slice(coords, func(a, b int) bool {\n        if coords[a][0] == coords[b][0] {\n            return coords[a][1] > coords[b][1]\n        }\n        return coords[a][0] < coords[b][0]\n    })\n    return coords\n}\n```",
            "```go\nfunc SortArray(arr []int) []int {\n    if len(arr) == 0 {\n        return []int{}\n    }\n    if (arr[0] + arr[len(arr)-1])%2 == 0 {\n        sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n    } else {\n        sort.Ints(arr)\n    }\n    return arr\n}\n```",
            "```go\nfunc Encrypt(s string) string {\n    result := \"\"\n    for _, ch := range s {\n        shifted := ch + 4\n        if shifted > 'z' {\n            shifted -= 26\n        }\n        result += string(shifted)\n    }\n    return result\n}\n```",
            "```go\nfunc NextSmallest(lst []int) *int {\n    sl := make(map[int]bool)\n    for _, num := range lst {\n        sl[num] = true\n    }\n    keys := make([]int, 0, len(sl))\n    for k := range sl {\n        keys = append(keys, k)\n    }\n    sort.Ints(keys)\n    if len(keys) < 2 {\n        return nil\n    }\n    return &keys[1]\n}\n```",
            "```go\nfunc IsBored(s string) int {\n    sentences := regexp.MustCompile(`[.!?]\\s*`).Split(s, -1)\n    count := 0\n    for _, sentence := range sentences {\n        if len(sentence) >= 2 && sentence[:2] == \"I \" {\n            count++\n        }\n    }\n    return count\n}\n```",
            "```go\nfunc AnyInt(x interface{}, y interface{}, z interface{}) bool {\n    xi, ok1 := x.(int)\n    yi, ok2 := y.(int)\n    zi, ok3 := z.(int)\n    if ok1 && ok2 && ok3 {\n        if (xi+yi == zi) || (xi+zi == yi) || (yi+zi == xi) {\n            return true\n        }\n    }\n    return false\n}\n```",
            "```go\nfunc Encode(message string) string {\n    vowels := \"aeiouAEIOU\"\n    result := []rune{}\n    for _, ch := range message {\n        if ch >= 'a' && ch <= 'z' || ch >= 'A' && ch <= 'Z' {\n            var ch1 rune\n            if ch >= 'a' && ch <= 'z' {\n                ch1 = ch + ('A' - 'a')\n            } else {\n                ch1 = ch + ('a' - 'A')\n            }\n            if strings.ContainsRune(vowels, ch1) {\n                ch1++\n            }\n            result = append(result, ch1)\n        } else {\n            result = append(result, ch)\n        }\n    }\n    return string(result)\n}\n```",
            "```go\nfunc\tis_prime(n\tint)\tbool\t{\n\tif\tn\t<\t2\t{\n\t\treturn\tfalse\n\t}\n\tfor\ti\t:=\t2;\ti\t<=\tint(math.Sqrt(float64(n)));\ti++\t{\n\t\tif\tn%i\t==\t0\t{\n\t\t\treturn\tfalse\n\t\t}\n\t}\n\treturn\ttrue\n}\n\nfunc\tSkjkasdkd(lst\t[]int)\tint\t{\n\tprimes\t:=\tmake([]int,\t0)\n\tfor _,\tn :=\trange\tlst\t{\n\t\tif\tis_prime(n)\t{\n\t\t\tprimes\t=\tappend(primes,\tn)\n\t\t}\n\t}\n\tif\tlen(primes)\t==\t0\t{\n\t\treturn\t0\n\t}\n\tlargest\t:=\tstrconv.Itoa(maxInt(primes))\n\tsum\t:=\t0\n\tfor _,\tdigit :=\trange\tlargest\t{\n\t\tsum\t+=\tint(digit-'0')\n\t}\n\treturn\tsum\n}\n\nfunc\tmaxInt(lst\t[]int)\tint\t{\n\tif\tlen(lst)\t==\t0\t{\n\t\treturn\t0\n\t}\n\tmax\t:=\tlst[0]\n\tfor _,\tn :=\trange\tlst\t{\n\t\tif\tn\t>\tmax\t{\n\t\t\tmax\t=\tn\n\t\t}\n\t}\n\treturn\tmax\n}\n```",
            "```go\nfunc CheckDictCase(d map[string]string) bool {\n    if len(d) == 0 {\n        return false\n    }\n    allLower := true\n    allUpper := true\n    for key := range d {\n        if key != strings.ToLower(key) {\n            allLower = false\n        }\n        if key != strings.ToUpper(key) {\n            allUpper = false\n        }\n    }\n    return allLower || allUpper\n}\n```",
            "```go\nfunc CountUpTo(n int) []int {\n    primes := []int{}\n    for num := 2; num < n; num++ {\n        isPrime := true\n        for _, p := range primes {\n            if num%p == 0 {\n                isPrime = false\n                break\n            }\n        }\n        if isPrime {\n            primes = append(primes, num)\n        }\n    }\n    return primes\n}\n```",
            "```go\nfunc Multiply(a int, b int) int {\n    return abs(a)%10 * abs(b)%10\n}\n\nfunc abs(x int) int {\n    if x < 0 {\n        return -x\n    }\n    return x\n}\n```",
            "```go\nfunc CountUpper(s string) int {\n    vowels := \"AEIOU\"\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if i%2 == 0 && strings.ContainsRune(vowels, rune(s[i])) {\n            count++\n        }\n    }\n    return count\n}\n```",
            "```go\nfunc ClosestInteger(value string) int {\n    num, _ := strconv.ParseFloat(value, 64)\n    if num >= 0 {\n        return int(num + 0.5)\n    } else {\n        return int(num - 0.5)\n    }\n}\n```",
            "```go\nfunc MakeAPile(n int) []int {\n    pile := make([]int, n)\n    for i := 0; i < n; i++ {\n        pile[i] = n + 2*i\n    }\n    return pile\n}\n```",
            "```go\nfunc WordsString(s string) []string {\n    return strings.FieldsFunc(s, func(r rune) bool {\n        return r == ',' || unicode.IsSpace(r)\n    })\n}\n```",
            "```go\nfunc ChooseNum(x int, y int) int {\n    if x > y {\n        return -1\n    }\n    if y%2 == 0 {\n        return y\n    }\n    if x != y {\n        return y - 1\n    }\n    return -1\n}\n```",
            "```go\nfunc RoundedAvg(n int, m int) *string {\n    if n > m {\n        return nil\n    }\n    r_avg := int((m + n) / 2.0 + 0.5)\n    result := strconv.FormatInt(int64(r_avg), 2)\n    return &result\n}\n```",
            "```go\nfunc UniqueDigits(x []int) []int {\n    result := []int{}\n    for _, num := range x {\n        strNum := fmt.Sprintf(\"%d\", num)\n        allOdd := true\n        for _, digitRune := range strNum {\n            if (digitRune-'0')%2 == 0 {\n                allOdd = false\n                break\n            }\n        }\n        if allOdd {\n            result = append(result, num)\n        }\n    }\n    sort.Ints(result)\n    return result\n}\n```",
            "```go\nfunc ByLength(arr []int) []string {\n    digit_names := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n    var sorted_arr []int\n    for _, x := range arr {\n        if 1 <= x && x <= 9 {\n            sorted_arr = append(sorted_arr, x)\n        }\n    }\n    sort.Slice(sorted_arr, func(i, j int) bool {\n        return sorted_arr[i] > sorted_arr[j]\n    })\n    var result []string\n    for _, x := range sorted_arr {\n        result = append(result, digit_names[x-1])\n    }\n    return result\n}\n```",
            "```go\nfunc F(n int) []int {\n    nums := make([]int, n)\n    for i := 0; i < n; i++ {\n        nums[i] = i + 1\n    }\n    result := make([]int, n)\n    for i, value := range nums {\n        if (i + 1) % 2 != 0 {\n            sum := 0\n            for j := 0; j <= i; j++ {\n                sum += nums[j]\n            }\n            result[i] = sum\n        } else {\n            product := 1\n            for j := 0; j <= i; j++ {\n                product *= nums[j]\n            }\n            result[i] = product\n        }\n    }\n    return result\n}\n```",
            "```go\nfunc EvenOddPalindrome(n int) []int {\n    cnt := []int{0, 0}\n    for i := 1; i <= n; i++ {\n        s := fmt.Sprintf(\"%d\", i)\n        if s == reverseString(s) {\n            cnt[i%2]++\n        }\n    }\n    return cnt\n}\n\nfunc reverseString(s string) string {\n    runes := []rune(s)\n    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        runes[i], runes[j] = runes[j], runes[i]\n    }\n    return string(runes)\n}\n```",
            "```go\nfunc digitsSum(n int) int {\n    nStr := fmt.Sprintf(\"%d\", n)\n    sum := 0\n    if n >= 0 {\n        for _, d := range nStr {\n            sum += int(d - '0')\n        }\n    } else {\n        sum = (int(nStr[0]-'0')*10 + int(nStr[1]-'0')) * 2\n        sum += digitsSum(abs(n))\n    }\n    return sum\n}\n\nfunc CountNums(arr []int) int {\n    count := 0\n    for _, n := range arr {\n        if digitsSum(n) > 0 {\n            count++\n        }\n    }\n    return count\n}\n```",
            "```go\nfunc MoveOneBall(arr []int) bool {\n    if len(arr) == 0 {\n        return true\n    }\n    sortedArr := make([]int, len(arr))\n    copy(sortedArr, arr)\n    sort.Ints(sortedArr)\n    for i := 0; i < len(arr); i++ {\n        if reflect.DeepEqual(arr[i:], sortedArr[:len(arr)-i]) && reflect.DeepEqual(arr[:i], sortedArr[len(arr)-i:]) {\n            return true\n        }\n    }\n    return false\n}\n```",
            "```go\nfunc CanExchange(lst1 []int, lst2 []int) string {\n    odd_cnt := 0\n    for _, num := range lst1 {\n        if num%2 != 0 {\n            odd_cnt++\n        }\n    }\n\n    even_cnt := 0\n    for _, num := range lst2 {\n        if num%2 == 0 {\n            even_cnt++\n        }\n    }\n\n    if even_cnt >= odd_cnt {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n```",
            "```go\nfunc Histogram(test string) map[string]int {\n    freq := make(map[string]int)\n    words := strings.Fields(test)\n    for _, w := range words {\n        if len(w) > 0 {\n            freq[w]++\n        }\n    }\n    result := make(map[string]int)\n    if len(freq) > 0 {\n        maxFreq := 0\n        for _, v := range freq {\n            if v > maxFreq {\n                maxFreq = v\n            }\n        }\n        for k, v := range freq {\n            if v == maxFreq {\n                result[k] = v\n            }\n        }\n    }\n    return result\n}\n```",
            "```go\nfunc ReverseDelete(s string, c string) []string {\n    s1 := strings.Map(func(r rune) rune {\n        if strings.ContainsRune(c, r) {\n            return -1\n        }\n        return r\n    }, s)\n    \n    isPalindrome := func(s string) bool {\n        for i := 0; i < len(s)/2; i++ {\n            if s[i] != s[len(s)-1-i] {\n                return false\n            }\n        }\n        return true\n    }\n\n    return []string{s1, \"yes\"}\n}\n```",
            "```go\nfunc OddCount(lst []string) []string {\n    result := []string{}\n    for _, num := range lst {\n        n := 0\n        for i := 0; i < len(num); i++ {\n            if num[i] % 2 == 1 {\n                n++\n            }\n        }\n        rs := \"the number of odd elements in the string i of the input.\"\n        rs = strings.Replace(rs, \"i\", strconv.Itoa(n), -1)\n        result = append(result, rs)\n    }\n    return result\n}\n```",
            "```go\nfunc MinSubArraySum(nums []int) int {\n    min_sum := 0\n    cur_sum := 0\n    for _, n := range nums {\n        if cur_sum+n < 0 {\n            cur_sum += n\n        } else {\n            cur_sum = 0\n        }\n        if cur_sum < min_sum {\n            min_sum = cur_sum\n        }\n    }\n    if min_sum == 0 {\n        min_sum = nums[0]\n        for _, n := range nums {\n            if n < min_sum {\n                min_sum = n\n            }\n        }\n    }\n    return min_sum\n}\n```",
            "```go\nfunc MaxFill(grid [][]int, capacity int) int {\n    total := 0\n    for _, arr := range grid {\n        sum := 0\n        for _, num := range arr {\n            sum += num\n        }\n        total += (sum + capacity - 1) / capacity\n    }\n    return total\n}\n```",
            "```go\nfunc SortArray(arr []int) []int {\n    sort.Slice(arr, func(i, j int) bool {\n        countA := countOnesInBinary(arr[i])\n        countB := countOnesInBinary(arr[j])\n        if countA == countB {\n            return arr[i] < arr[j]\n        }\n        return countA < countB\n    })\n    return arr\n}\n\nfunc countOnesInBinary(n int) int {\n    count := 0\n    for n > 0 {\n        count += n & 1\n        n >>= 1\n    }\n    return count\n}\n```",
            "```go\nfunc SelectWords(s string, n int) []string {\n    consonants := \"bcdfghjklmnpqrstvwxyz\"\n    words := strings.Fields(s)\n    result := make([]string, 0)\n\n    for _, word := range words {\n       _consonantCount := 0\n\n        for _, char := range strings.ToLower(word) {\n            if strings.ContainsRune(consonants, char) {\n                _consonantCount++\n            }\n        }\n\n        if _consonantCount == n {\n            result = append(result, word)\n        }\n    }\n\n    return result\n}\n```",
            "```go\nfunc GetClosestVowel(word string) string {\n\tvowels := \"aeiouAEIOU\"\n\tfor i := len(word) - 2; i > 0; i-- {\n\t\tif strings.ContainsRune(vowels, rune(word[i])) && !strings.ContainsRune(vowels, rune(word[i-1])) && !strings.ContainsRune(vowels, rune(word[i+1])) {\n\t\t\treturn string(word[i])\n\t\t}\n\t}\n\treturn \"\"\n}\n```",
            "```go\nfunc check(s string) bool {\n    depth := 0\n    for _, ch := range s {\n        if ch == '(' {\n            depth++\n        } else {\n            depth--\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n\nfunc MatchParens(lst []string) string {\n    s1 := lst[0] + lst[1]\n    s2 := lst[1] + lst[0]\n    if check(s1) || check(s2) {\n        return \"Yes\"\n    }\n    return \"No\"\n}\n```",
            "```go\nfunc Maximum(arr []int, k int) []int {\n    if k == 0 {\n        return []int{}\n    }\n    sort.Ints(arr)\n    n := len(arr)\n    return arr[n-k:]\n}\n```",
            "```go\nfunc Solution(lst []int) int {\n    sum := 0\n    for i, x := range lst {\n        if i%2 == 0 && x%2 != 0 {\n            sum += x\n        }\n    }\n    return sum\n}\n```",
            "```go\nfunc AddElements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < min(k, len(arr)); i++ {\n        if len(strconv.Itoa(arr[i])) <= 2 {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n```",
            "```go\nfunc GetOddCollatz(n int) []int {\n    collatz := []int{1}\n    for n != 1 {\n        if n%2 != 0 {\n            collatz = append(collatz, n)\n            n = 3*n + 1\n        } else {\n            n /= 2\n        }\n    }\n    sort.Ints(collatz)\n    return collatz\n}\n```",
            "```go\nfunc ValidDate(date string) bool {\n    if len(date) != 10 || date[2] != '-' || date[5] != '-' {\n        return false\n    }\n    m := parseInt(date[:2], 10, 32)\n    d := parseInt(date[3:5], 10, 32)\n    switch m {\n    case 1, 3, 5, 7, 8, 10, 12:\n        if d >= 1 && d <= 31 {\n            return true\n        }\n    case 4, 6, 9, 11:\n        if d >= 1 && d <= 30 {\n            return true\n        }\n    case 2:\n        if d >= 1 && d <= 29 {\n            return true\n        }\n    }\n    return false\n}\n```",
            "```go\nfunc SplitWords(txt string) []string {\n    if strings.Contains(txt, \" \") {\n        return strings.Split(txt, \" \")\n    } else if strings.Contains(txt, \",\") {\n        return strings.Split(txt, \",\")\n    } else {\n        count := 0\n        for i := 0; i < len(txt); i++ {\n            c := txt[i]\n            if unicode.IsLower(rune(c)) && int(c)%2 == 0 {\n                count++\n            }\n        }\n        return []string{strconv.Itoa(count)}\n    }\n}\n```",
            "```go\nfunc IsSorted(lst []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n\n    for i := 1; i < len(lst); i++ {\n        if lst[i-1] > lst[i] {\n            return false\n        }\n    }\n\n    freq := make(map[int]int)\n    for _, num := range lst {\n        freq[num]++\n    }\n    for _, count := range freq {\n        if count > 2 {\n            return false\n        }\n    }\n\n    return true\n}\n```",
            "```go\nfunc IsPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        if n%i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc Intersection(interval1 []int, interval2 []int) string {\n    l := max(interval1[0], interval2[0])\n    r := min(interval1[1], interval2[1])\n    length := r - l\n    if length > 0 && IsPrime(length) {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}\n```",
            "```go\nfunc ProdSigns(arr []int) *int {\n    if len(arr) == 0 {\n        return nil\n    }\n    for _, v := range arr {\n        if v == 0 {\n            return ptr(0)\n        }\n    }\n    neg_count := 0\n    for _, v := range arr {\n        if v < 0 {\n            neg_count++\n        }\n    }\n    sign := 1\n    if neg_count%2 == 1 {\n        sign = -1\n    }\n    sum := 0\n    for _, v := range arr {\n        sum += abs(v)\n    }\n    return ptr(sign * sum)\n}\n\nfunc ptr(i int) *int {\n    return &i\n}\n\nfunc abs(x int) int {\n    if x < 0 {\n        return -x\n    }\n    return x\n}\n```",
            "```go\nfunc MinPath(grid [][]int, k int) []int {\n    n := len(grid)\n    minVal := n*n + 1\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if grid[i][j] == 1 {\n                temp := []int{}\n                if i != 0 {\n                    temp = append(temp, grid[i-1][j])\n                }\n                if j != 0 {\n                    temp = append(temp, grid[i][j-1])\n                }\n                if i != n-1 {\n                    temp = append(temp, grid[i+1][j])\n                }\n                if j != n-1 {\n                    temp = append(temp, grid[i][j+1])\n                }\n                for _, v := range temp {\n                    if v < minVal {\n                        minVal = v\n                    }\n                }\n            }\n        }\n    }\n    result := make([]int, k)\n    for i := 0; i < k; i++ {\n        if i%2 == 0 {\n            result[i] = 1\n        } else {\n            result[i] = minVal\n        }\n    }\n    return result\n}\n```",
            "```go\nfunc Tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n    }\n    seq := []int{1, 3}\n    for i := 2; i <= n; i++ {\n        if i%2 == 0 {\n            seq = append(seq, i/2+1)\n        } else {\n            seq = append(seq, seq[i-1]+seq[i-2]+(i+3)/2)\n        }\n    }\n    return seq\n}\n```",
            "```go\nfunc Digits(n int) int {\n    odds := []int{}\n    strN := fmt.Sprintf(\"%d\", n)\n    for _, d := range strN {\n        digit := int(d - '0')\n        if digit%2 == 1 {\n            odds = append(odds, digit)\n        }\n    }\n    if len(odds) > 0 {\n        product := 1\n        for _, num := range odds {\n            product *= num\n        }\n        return product\n    } else {\n        return 0\n    }\n}\n```",
            "```go\nfunc IsNested(s string) bool {\n    var openIdx []int\n    var closeIdx []int\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == '[' {\n            openIdx = append(openIdx, i)\n        } else if s[i] == ']' {\n            closeIdx = append(closeIdx, i)\n        }\n    }\n    \n    for i, j := 0, len(closeIdx)-1; i < j; i, j = i+1, j-1 {\n        closeIdx[i], closeIdx[j] = closeIdx[j], closeIdx[i]\n    }\n    \n    cnt := 0\n    i := 0\n    l := len(closeIdx)\n    \n    for _, idx := range openIdx {\n        if i < l && idx < closeIdx[i] {\n            cnt += 1\n            i += 1\n        }\n    }\n    \n    return cnt >= 2\n}\n```",
            "```go\nfunc SumSquares(lst []float64) int {\n    sum := 0\n    for _, n := range lst {\n        sum += int(math.Pow(math.Ceil(n), 2))\n    }\n    return sum\n}\n```",
            "```go\nfunc CheckIfLastCharIsALetter(txt string) bool {\n    if len(txt) == 0 {\n        return false\n    }\n    last := txt[len(txt)-1]\n    return len(string(last)) == 1 && (last >= 'a' && last <= 'z' || last >= 'A' && last <= 'Z')\n}\n```",
            "```go\nfunc CanArrange(arr []int) int {\n    if len(arr) <= 1 {\n        return -1\n    }\n    idx := []int{}\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < arr[i-1] {\n            idx = append(idx, i)\n        }\n    }\n    if len(idx) > 0 {\n        return idx[len(idx)-1]\n    }\n    return -1\n}\n```",
            "```go\nfunc LargestSmallestIntegers(lst []int) []*int {\n    var neg []int\n    var pos []int\n\n    for _, i := range lst {\n        if i < 0 {\n            neg = append(neg, i)\n        } else if i > 0 {\n            pos = append(pos, i)\n        }\n    }\n\n    var maxNeg *int\n    if len(neg) > 0 {\n        maxNeg = new(int)\n        *maxNeg = neg[0]\n        for _, n := range neg {\n            if n > *maxNeg {\n                *maxNeg = n\n            }\n        }\n    }\n\n    var minPos *int\n    if len(pos) > 0 {\n        minPos = new(int)\n        *minPos = pos[0]\n        for _, p := range pos {\n            if p < *minPos {\n                *minPos = p\n            }\n        }\n    }\n\n    return []*int{maxNeg, minPos}\n}\n```",
            "```go\nfunc CompareOne(a interface{}, b interface{}) *float64 {\n    a1 := anyToReal(a)\n    b1 := anyToReal(b)\n    if a1 == b1 {\n        return nil\n    } else if a1 > b1 {\n        return &a1\n    } else {\n        return &b1\n    }\n}\n\nfunc anyToReal(o interface{}) float64 {\n    switch v := o.(type) {\n    case string:\n        s := strings.ReplaceAll(v, \",\", \".\")\n        f, err := strconv.ParseFloat(s, 64)\n        if err != nil {\n            panic(\"Type Error\")\n        }\n        return f\n    case int:\n        return float64(v)\n    case float64:\n        return v\n    default:\n        panic(\"Type Error\")\n    }\n}\n```",
            "```go\nfunc IsEqualToSumEven(n int) bool {\n    return n%2 == 0 && n >= 8\n}\n```",
            "```go\nfunc SpecialFactorial(n int) int {\n    fact := 1\n    result := 1\n    for i := 1; i <= n; i++ {\n        fact *= i\n        result *= fact\n    }\n    return result\n}\n```",
            "```go\nfunc FixSpaces(txt string) string {\n    return regexp.MustCompile(`\\s{3,}`).ReplaceAllString(txt, \"-\").\n        ReplaceAllString(regexp.MustCompile(` `).String(), \"_\")\n}\n```",
            "```go\nfunc FileNameCheck(fileName string) string {\n    suf := []string{\"txt\", \"exe\", \"dll\"}\n    lst := strings.Split(fileName, \".\")\n    if len(lst) != 2 || !contains(suf, lst[1]) || len(lst[0]) == 0 || !unicode.IsLetter(rune(lst[0][0])) || countDigits(lst[0]) > 3 {\n        return \"No\"\n    }\n    return \"Yes\"\n}\n\nfunc contains(slice []string, item string) bool {\n    for _, v := range slice {\n        if v == item {\n            return true\n        }\n    }\n    return false\n}\n\nfunc countDigits(s string) int {\n    count := 0\n    for _, c := range s {\n        if unicode.IsDigit(c) {\n            count++\n        }\n    }\n    return count\n}\n```",
            "```go\nfunc SumSquares(lst []int) int {\n    result := 0\n    for i := 0; i < len(lst); i++ {\n        if i % 3 == 0 {\n            result += lst[i] * lst[i]\n        } else if i % 4 == 0 {\n            result += lst[i] * lst[i] * lst[i]\n        } else {\n            result += lst[i]\n        }\n    }\n    return result\n}\n```",
            "```go\nfunc WordsInSentence(sentence string) string {\n    words := strings.Fields(sentence)\n    var primeWords []string\n    for _, word := range words {\n        length := len(word)\n        if length < 2 {\n            continue\n        }\n        isPrime := true\n        for i := 2; i <= int(math.Sqrt(float64(length))); i++ {\n            if length%i == 0 {\n                isPrime = false\n                break\n            }\n        }\n        if isPrime {\n            primeWords = append(primeWords, word)\n        }\n    }\n    return strings.Join(primeWords, \" \")\n}\n```",
            "```go\nfunc Simplify(x string, n string) bool {\n    xs := strings.Split(x, \"/\")\n    ns := strings.Split(n, \"/\")\n    num, _ := strconv.Atoi(xs[0])\n    den, _ := strconv.Atoi(ns[0])\n    return num%den == 0\n}\n```",
            "```go\nfunc OrderByPoints(nums []int) []int {\n    sort.Slice(nums, func(i, j int) bool {\n        return digitsSum(nums[i]) < digitsSum(nums[j])\n    })\n    return nums\n}\n\nfunc digitsSum(n int) int {\n    nStr := strconv.Itoa(n)\n    sum := 0\n    if n >= 0 {\n        for _, digit := range nStr {\n            sum += int(digit - '0')\n        }\n    } else {\n        negativePart, _ := strconv.Atoi(nStr[:2])\n        absN := int(math.Abs(float64(n)))\n        sum = negativePart * 2 + digitsSum(absN)\n    }\n    return sum\n}\n```",
            "```go\nfunc SpecialFilter(nums []int) int {\n    odds := \"13579\"\n    count := 0\n    for _, n := range nums {\n        s := strconv.Itoa(n)\n        if n > 10 && n%2 == 1 && strings.ContainsRune(odds, rune(s[0])) {\n            count++\n        }\n    }\n    return count\n}\n```",
            "```go\nfunc GetMaxTriples(n int) int {\n    c := [3]int{0, 0, 0}\n    for i := 1; i <= n; i++ {\n        a := i * i - i + 1\n        c[a%3]++\n    }\n    return c[0] * c[1] * c[2] + (c[0]*(c[0]-1)*(c[0]-2) + c[1]*(c[1]-1)*(c[1]-2) + c[2]*(c[2]-1)*(c[2]-2)) / 6\n}\n```",
            "```go\nfunc Bf(planet1 string, planet2 string) []string {\n    names := []string{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n    l := -1\n    r := -1\n    for i, name := range names {\n        if name == planet1 {\n            l = i\n        }\n        if name == planet2 {\n            r = i\n        }\n    }\n    if l == -1 || r == -1 {\n        return []string{}\n    }\n    if l > r {\n        l, r = r, l\n    }\n    if l == r {\n        return []string{}\n    }\n    return names[l+1 : r]\n}\n```",
            "```go\nfunc SortedListSum(lst []string) []string {\n    var result []string\n    for _, s := range lst {\n        if len(s)%2 == 0 {\n            result = append(result, s)\n        }\n    }\n    \n    sort.Slice(result, func(i, j int) bool {\n        if len(result[i]) != len(result[j]) {\n            return len(result[i]) < len(result[j])\n        }\n        return result[i] < result[j]\n    })\n    \n    return result\n}\n```",
            "```go\nfunc XOrY(n int, x int, y int) int {\n    if n < 2 {\n        return y\n    }\n    for i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n        if n%i == 0 {\n            return y\n        }\n    }\n    return x\n}\n```",
            "```go\nfunc DoubleTheDifference(lst []float64) int {\n    sum := 0\n    for _, n := range lst {\n        if n >= 0 && n == float64(int(n)) && int(n)%2 == 1 {\n            sum += int(n * n)\n        }\n    }\n    return sum\n}\n```",
            "```go\nfunc Compare(game []int, guess []int) []int {\n    result := make([]int, len(game))\n    for i := 0; i < len(game); i++ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n\nfunc abs(x int) int {\n    if x < 0 {\n        return -x\n    }\n    return x\n}\n```",
            "```go\nfunc StrongestExtension(className string, extensions []string) string {\n    maxS := -1 << 31 // Equivalent to PHP_INT_MAX\n    maxExt := \"\"\n    for _, ext := range extensions {\n        upper := countUpper(ext)\n        lower := countLower(ext)\n        s := upper - lower\n        if s > maxS {\n            maxS = s\n            maxExt = ext\n        }\n    }\n    return className + \".\" + maxExt\n}\n\nfunc countUpper(s string) int {\n    count := 0\n    for _, char := range s {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc countLower(s string) int {\n    count := 0\n    for _, char := range s {\n        if char >= 'a' && char <= 'z' {\n            count++\n        }\n    }\n    return count\n}\n```",
            "```go\nfunc CycpatternCheck(a string, b string) bool {\n    if len(a) < len(b) {\n        return false\n    }\n    for i := 0; i < len(b); i++ {\n        rotated := b[i:] + b[:i]\n        if strings.Contains(a, rotated) {\n            return true\n        }\n    }\n    return false\n}\n```",
            "```go\nfunc EvenOddCount(num int) []int {\n    ds := strconv.Itoa(abs(num))\n    even := 0\n    \n    for i := 0; i < len(ds); i++ {\n        if (ds[i] - '0') % 2 == 0 {\n            even++\n        }\n    }\n    \n    return []int{even, len(ds) - even}\n}\n```",
            "```go\nfunc IntToMiniRoman(num int) string {\n    values := []int{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}\n    numerals := []string{\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"}\n    var res []string\n    for i := 0; i < len(values); i++ {\n        for num >= values[i] {\n            res = append(res, numerals[i])\n            num -= values[i]\n        }\n    }\n    return strings.Join(res, \"\")\n}\n```",
            "```go\nfunc RightAngleTriangle(a int, b int, c int) bool {\n    s := []int{a, b, c}\n    slices.Sort(s)\n    return (s[0]*s[0] + s[1]*s[1]) == (s[2]*s[2])\n}\n```",
            "```go\nfunc FindMax(words []string) string {\n    maxCnt := 0\n    maxW := \"\"\n    for _, w := range words {\n        uniqueChars := make(map[rune]bool)\n        for _, c := range w {\n            uniqueChars[c] = true\n        }\n        cnt := len(uniqueChars)\n        if cnt > maxCnt {\n            maxCnt = cnt\n            maxW = w\n        } else if cnt == maxCnt {\n            if w < maxW {\n                maxW = w\n            }\n        }\n    }\n    return maxW\n}\n```",
            "```go\nfunc Eat(num int, need int, remaining int) []int {\n    if need <= remaining {\n        return []int{num + need, remaining - need}\n    } else {\n        return []int{num + remaining, 0}\n    }\n}\n```",
            "```go\nfunc DoAlgebra(operators []string, operands []int) int {\n    ops := operators\n    nums := operands\n    i := len(ops) - 1\n    for i >= 0 {\n        if ops[i] == \"**\" {\n            nums[i] = nums[i] * nums[i]\n            nums = append(nums[:i+1], nums[i+2:]...)\n            ops = append(ops[:i], ops[i+1:]...)\n        }\n        i -= 1\n    }\n    i = 0\n    for i < len(ops) {\n        if ops[i] == \"*\" {\n            nums[i] = nums[i] * nums[i+1]\n            nums = append(nums[:i+1], nums[i+2:]...)\n            ops = append(ops[:i], ops[i+1:]...)\n            i -= 1\n        } else if ops[i] == \"//\" {\n            nums[i] = nums[i] / nums[i+1]\n            nums = append(nums[:i+1], nums[i+2:]...)\n            ops = append(ops[:i], ops[i+1:]...)\n            i -= 1\n        }\n        i += 1\n    }\n    i = 0\n    for i < len(ops) {\n        if ops[i] == \"+\" {\n            nums[i] = nums[i] + nums[i+1]\n            nums = append(nums[:i+1], nums[i+2:]...)\n            ops = append(ops[:i], ops[i+1:]...)\n            i -= 1\n        } else if ops[i] == \"-\" {\n            nums[i] = nums[i] - nums[i+1]\n            nums = append(nums[:i+1], nums[i+2:]...)\n            ops = append(ops[:i], ops[i+1:]...)\n            i -= 1\n        }\n        i += 1\n    }\n    return nums[0]\n}\n```",
            "```go\nfunc Solve(s string) string {\n    if ok, _ := regexp.MatchString(\"[a-zA-Z]\", s); !ok {\n        return reverseString(s)\n    }\n    result := \"\"\n    for _, ch := range s {\n        if unicode.IsLetter(ch) {\n            if unicode.IsUpper(ch) {\n                result += string(unicode.ToLower(ch))\n            } else if unicode.IsLower(ch) {\n                result += string(unicode.ToUpper(ch))\n            }\n        } else {\n            result += string(ch)\n        }\n    }\n    return result\n}\n\nfunc reverseString(s string) string {\n    runes := []rune(s)\n    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        runes[i], runes[j] = runes[j], runes[i]\n    }\n    return string(runes)\n}\n```",
            "```go\nfunc StringToMd5(txt string) *string {\n    if txt == \"\" {\n        return nil\n    }\n    md5Hash := fmt.Sprintf(\"%x\", md5.Sum([]byte(txt)))\n    return &md5Hash\n}\n```",
            "```go\nfunc GenerateIntegers(a int, b int) []int {\n    lower := max(2, min(a, b))\n    upper := min(8, max(a, b))\n    var result []int\n    for i := lower; i <= upper; i++ {\n        if i%2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n```"
        ],
        "ruby": [
            "```ruby\ndef has_close_elements(numbers, threshold)\n    (0...numbers.length).each do |i|\n        ((i + 1)...numbers.length).each do |j|\n            if (numbers[i] - numbers[j]).abs < threshold\n                return true\n            end\n        end\n    end\n    false\nend\n```",
            "```ruby\ndef separate_paren_groups(paren_string)\n    groups = []\n    stk = []\n    current_group = \"\"\n    parens = paren_string.gsub(\" \", \"\")\n    (0...parens.length).each do |i|\n        ch = parens[i]\n        if ch == \"(\"\n            stk.push(ch)\n            current_group << ch\n        elsif ch == \")\"\n            stk.pop\n            current_group << ch\n            if stk.empty?\n                groups.push(current_group)\n                current_group = \"\"\n            end\n        end\n    end\n    return groups\nend\n```",
            "```ruby\n# @param num [Float]\n# @returns {Float}\ndef truncate_number(num)\n    num - num.floor\nend\n```",
            "```ruby\n# @param operations [Array<Integer>]\n# @returns {Boolean}\ndef below_zero(operations)\n    balance = 0\n    operations.each do |op|\n        balance += op\n        return true if balance < 0\n    end\n    false\nend\n```",
            "```ruby\ndef mean_absolute_deviation(numbers)\n    mean = numbers.sum / numbers.size.to_f\n    deviation = 0.0\n    numbers.each do |x|\n        deviation += (x - mean).abs\n    end\n    deviation / numbers.size\nend\n```",
            "```ruby\ndef intersperse(numbers, delimiter)\n    result = []\n    numbers.each_with_index do |number, index|\n        result << delimiter if index != 0\n        result << number\n    end\n    result\nend\n```",
            "```ruby\n# @param paren_string [String]\n# @returns {Array<Integer>}\ndef parse_nested_parens(paren_string)\n    result = []\n    paren_groups = paren_string.split(' ')\n    paren_groups.each do |group|\n        max_depth = 0\n        depth = 0\n        group.chars.each do |ch|\n            if ch == \"(\"\n                depth += 1\n                max_depth = [max_depth, depth].max\n            elsif ch == \")\"\n                depth -= 1\n            end\n        end\n        result << max_depth\n    end\n    result\nend\n```",
            "```ruby\ndef filter_by_substring(strs, substring)\n    strs.select { |s| s.include?(substring) }\nend\n```",
            "```ruby\n# @param numbers [Array<Integer>]\n# @returns {Array<Integer>}\ndef sum_product(numbers)\n    n_sum = numbers.sum\n    n_product = numbers.reduce(1) { |carry, item| carry * item }\n    [n_sum, n_product]\nend\n```",
            "```ruby\n# @param numbers [Array<Integer>]\n# @returns {Array<Integer>}\ndef rolling_max(numbers)\n    max_so_far = -Float::INFINITY\n    result = []\n    numbers.each do |num|\n        max_so_far = [max_so_far, num].max\n        result << max_so_far\n    end\n    result\nend\n```",
            "```ruby\n# @param s [String]\n# @returns {String}\ndef make_palindrome(s)\n    def is_palindrome(str)\n        str == str.chars.reverse.join\n    end\n\n    return s if is_palindrome(s)\n\n    (0...s.length).each do |i|\n        return s + s[0...i].chars.reverse.join if is_palindrome(s[i..])\n    end\n\n    \"\"\nend\n```",
            "```ruby\ndef string_xor(a, b)\n  result = ''\n  (0...a.length).each do |i|\n    result << (a[i] == b[i]) ? '0' : '1'\n  end\n  result\nend\n```",
            "```ruby\ndef longest(strs)\n    return nil if strs.empty?\n    longest_s = strs[0]\n    strs.each do |s|\n        longest_s = s if s.length > longest_s.length\n    end\n    longest_s\nend\n```",
            "```ruby\ndef greatest_common_divisor(a, b)\n    if b == 0\n        return a\n    else\n        return greatest_common_divisor(b, a % b)\n    end\nend\n```",
            "```ruby\n# @param s [String]\n# @returns {Array<String>}\ndef all_prefixes(s)\n    prefixes = []\n    (0...s.length).each do |i|\n        prefixes << s[0..i]\n    end\n    prefixes\nend\n```",
            "```ruby\n# @param n [Integer]\n# @returns {String}\ndef string_sequence(n)\n    (0..n).join(' ')\nend\n```",
            "```ruby\n# @param s [String]\n# @returns {Integer}\ndef count_distinct_characters(s)\n    s.downcase.chars.uniq.size\nend\n```",
            "```ruby\ndef parse_music(music_string)\n  durations = {\"o\" => 4, \"o|\" => 2, \".|\" => 1}\n  notes = music_string.split\n  notes.map { |note| durations[note] }\nend\n```",
            "```ruby\n# @param s [String]\n# @param substring [String]\n# @returns {Integer}\ndef how_many_times(s, substring)\n    times = 0\n    (0...(s.length - substring.length + 1)).each do |i|\n        if s[i...(i + substring.length)] == substring\n            times += 1\n        end\n    end\n    return times\nend\n```",
            "```ruby\ndef sort_numbers(numbers)\n    num_dict = {\n        \"zero\" => 0,\n        \"one\" => 1,\n        \"two\" => 2,\n        \"three\" => 3,\n        \"four\" => 4,\n        \"five\" => 5,\n        \"six\" => 6,\n        \"seven\" => 7,\n        \"eight\" => 8,\n        \"nine\" => 9\n    }\n\n    num_list = numbers.split(\" \").select { |x| num_dict.key?(x) }\n\n    num_list.sort_by! { |x| num_dict[x] }\n\n    num_list.join(\" \")\nend\n```",
            "```ruby\ndef find_closest_elements(numbers)\n    sorted_numbers = numbers.sort\n    min_diff = Float::INFINITY\n    closest_pair = []\n    (1...sorted_numbers.length).each do |i|\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff\n            min_diff = diff\n            closest_pair = [sorted_numbers[i - 1], sorted_numbers[i]]\n        end\n    end\n    closest_pair\nend\n```",
            "```ruby\n# @param numbers [Array<Float>]\n# @returns {Array<Float>}\ndef rescale_to_unit(numbers)\n    min_num = numbers.min\n    max_num = numbers.max\n    if min_num == max_num\n        Array.new(numbers.size, 0.0)\n    else\n        numbers.map { |num| (num - min_num) / (max_num - min_num) }\n    end\nend\n```",
            "```ruby\ndef filter_integers(values)\n    values.select { |x| x.is_a?(Integer) }\nend\n```",
            "```ruby\n# @param s [String]\n# @returns {Integer}\ndef str_length(s)\n    s.length\nend\n```",
            "```ruby\n# @param n [Integer]\n# @return [Integer]\ndef largest_divisor(n)\n    (2...n).each do |i|\n        if n % i == 0\n            return n / i\n        end\n    end\n    return 1\nend\n```",
            "```ruby\ndef factorize(n)\n    factors = []\n    divisor = 2\n    while divisor <= n\n        if n % divisor == 0\n            factors << divisor\n            n /= divisor\n        else\n            divisor += 1\n        end\n    end\n    factors\nend\n```",
            "```ruby\ndef remove_duplicates(numbers)\n  counts = {}\n  numbers.each do |num|\n    if counts.key?(num)\n      counts[num] += 1\n    else\n      counts[num] = 1\n    end\n  end\n  res = []\n  numbers.each do |num|\n    if counts[num] == 1\n      res << num\n    end\n  end\n  res\nend\n```",
            "```ruby\n# @param s [String]\n# @returns {String}\ndef flip_case(s)\n    flipped = ''\n    s.each_char do |ch|\n        if !ch =~ /[a-zA-Z]/\n            flipped << ch\n        elsif ch =~ /[a-z]/\n            flipped << ch.upcase\n        elsif ch =~ /[A-Z]/\n            flipped << ch.downcase\n        end\n    end\n    flipped\nend\n```",
            "```ruby\n# @param strs [Array<String>]\n# @returns {String}\ndef concatenate(strs)\n    strs.join(\"\")\nend\n```",
            "```ruby\n# @param strs [Array<String>]\n# @param prefix_str [String]\n# @returns {Array<String>}\ndef filter_by_prefix(strs, prefix_str)\n    strs.select { |s| s.start_with?(prefix_str) }\nend\n```",
            "```ruby\ndef get_positive(l)\n  l.select { |num| num > 0 }\nend\n```",
            "```ruby\n# @param n [Integer]\n# @returns {Boolean}\ndef is_prime(n)\n    if n < 2\n        return false\n    end\n    (2..Math.sqrt(n)).each do |i|\n        if n % i == 0\n            return false\n        end\n    end\n    return true\nend\n```",
            "```ruby\n# @param xs [Array<Integer>]\n# @param x [Float]\n# @returns {Float}\ndef poly(xs, x)\n  res = 0.0\n  xs.each_with_index do |coeff, i|\n    res += coeff * (x ** i)\n  end\n  res\nend\n\n# @param xs [Array<Integer>]\n# @returns {Float}\ndef find_zero(xs)\n  x1 = 1.0\n  x2 = -1.0\n  while poly(xs, x1) * poly(xs, x2) > 0\n    x1 *= 2\n    x2 *= 2\n  end\n  while (x1 - x2).abs > 1e-10\n    mid = (x1 + x2) / 2.0\n    if poly(xs, mid).abs < 1e-10\n      return mid\n    elsif poly(xs, mid) * poly(xs, x1) < 0\n      x2 = mid\n    else\n      x1 = mid\n    end\n  end\n  (x1 + x2) / 2.0\nend\n```",
            "```ruby\ndef sort_third(l)\n  sorted_third = l.select.with_index { |_, i| i % 3 == 0 }.sort\n  l.map.with_index { |x, i| i % 3 == 0 ? sorted_third[i / 3] : x }\nend\n```",
            "```ruby\ndef list_unique(l)\n    l.uniq.sort\nend\n```",
            "```ruby\ndef max_element(l)\n    return 0 if l.empty?\n    return l.max\nend\n```",
            "```ruby\n# @param n [Integer]\n# @returns {Integer}\ndef fizz_buzz(n)\n    cnt = 0\n    (0...n).each do |i|\n        if i % 11 == 0 || i % 13 == 0\n            cnt += i.to_s.count('7')\n        end\n    end\n    cnt\nend\n```",
            "```ruby\ndef sort_even(l)\n  sorted_even = l.select.with_index { |_, i| i.even? }.sort\n  l.map.with_index { |x, i| i.even? ? sorted_even[i / 2] : x }\nend\n```",
            "```ruby\n# @param s [String]\n# @returns {String}\ndef encode_cyclic(s)\n    result = ''\n    (0...s.length).step(3) do |i|\n        if i + 3 > s.length\n            result += s[i..-1]\n        else\n            result += s[i+1, 2] + s[i]\n        end\n    end\n    result\nend\n\n# @param s [String]\n# @returns {String}\ndef decode_cyclic(s)\n    encode_cyclic(encode_cyclic(s))\nend\n```",
            "```ruby\n# @param n [Integer]\n# @returns {Integer}\ndef prime_fib(n)\n  return false if n < 2\n\n  (2..Math.sqrt(n)).each do |i|\n    return false if n % i == 0\n  end\n\n  return true\nend\n\ndef prime_fib(n)\n  f = [0, 1]\n  cnt = 0\n  while cnt < n\n    f = [f[1], f[0] + f[1]]\n    cnt += 1 if prime_fib(f[1])\n  end\n  return f[1]\nend\n```",
            "```ruby\n# @param l [Array<Integer>]\n# @return [Boolean]\ndef triples_sum_to_zero(l)\n    (0...l.length).each do |i|\n        ((i+1)...l.length).each do |j|\n            ((j+1)...l.length).each do |k|\n                return true if l[i] + l[j] + l[k] == 0\n            end\n        end\n    end\n    false\nend\n```",
            "```ruby\ndef car_race_collision(n)\n  n ** 2\nend\n```",
            "```ruby\n# @param l [Array<Integer>]\n# @returns {Array<Integer>}\ndef incr_list(l)\n    l.map { |i| i + 1 }\nend\n```",
            "```ruby\n# @param l [Array<Integer>]\n# @returns {Boolean}\ndef pairs_sum_to_zero(l)\n    seen = []\n    l.each do |num|\n        return true if seen.include?(-num)\n        seen << num\n    end\n    false\nend\n```",
            "```ruby\n# @param x [Integer]\n# @param bas [Integer]\n# @returns {String}\ndef change_base(x, bas)\n    return \"0\" if x == 0\n    digits = []\n    while x > 0\n        digits << (x % bas).to_s\n        x = x.div(bas)\n    end\n    digits.reverse.join\nend\n```",
            "```ruby\n# @param a [Integer]\n# @param h [Integer]\n# @returns {Float}\ndef triangle_area(a, h)\n  a * h / 2.0\nend\n```",
            "```ruby\n# @param n [Integer]\n# @returns {Integer}\ndef fib4(n)\n  fib = [0, 0, 2, 0]\n  (4..n + 1).each do |i|\n    fib[i % 4] = fib.sum\n  end\n  fib[n % 4]\nend\n```",
            "```ruby\ndef median(l)\n  l.sort!\n  count = l.size\n  if count.odd?\n    l[count / 2]\n  else\n    (l[count / 2] + l[count / 2 - 1]) / 2.0\n  end\nend\n```",
            "```ruby\n# @param txt [String]\n# @returns {Boolean}\ndef is_palindrome(txt)\n    return txt == txt.reverse\nend\n```",
            "```ruby\n# @param n [Integer]\n# @param p [Integer]\n# @returns {Integer}\ndef modp(n, p)\n  ret = 1\n  n.times do\n    ret = (ret * 2) % p\n  end\n  ret\nend\n```",
            "```ruby\n# @param s [String]\n# @returns {String}\ndef encode_shift(s)\n    result = ''\n    (0...s.length).each do |i|\n        ch = s[i]\n        result << ((ch.ord - 97 + 5) % 26 + 97).chr\n    end\n    result\nend\n\n# @param s [String]\n# @returns {String}\ndef decode_shift(s)\n    result = ''\n    (0...s.length).each do |i|\n        ch = s[i]\n        result << ((ch.ord - 97 + 21) % 26 + 97).chr\n    end\n    result\nend\n```",
            "```ruby\n# @param txt [String]\n# @returns {String}\ndef remove_vowels(txt)\n    vowels = \"aeiouAEIOU\"\n    result = ''\n    \n    (0...txt.length).each do |i|\n        unless vowels.include?(txt[i])\n            result << txt[i]\n        end\n    end\n    \n    result\nend\n```",
            "```ruby\n# @param l [Array<Integer>]\n# @param t [Integer]\n# @returns {Boolean}\ndef below_threshold(l, t)\n    l.all? { |x| x < t }\nend\n```",
            "```ruby\ndef add(x, y)\n    x + y\nend\n```",
            "```ruby\n# @param s0 [String]\n# @param s1 [String]\n# @returns {Boolean}\ndef same_chars(s0, s1)\n  s0.chars.to_set == s1.chars.to_set\nend\n```",
            "```ruby\n# @param n [Integer]\n# @returns {Integer}\ndef fib(n)\n    if n <= 1\n        return n\n    else\n        return fib(n - 1) + fib(n - 2)\n    end\nend\n```",
            "```ruby\n# @param brackets [String]\n# @returns {Boolean}\ndef correct_bracketing(brackets)\n    depth = 0\n    brackets.each_char do |char|\n        if char == \"<\"\n            depth += 1\n        elsif char == \">\"\n            depth -= 1\n        end\n        return false if depth < 0\n    end\n    depth == 0\nend\n```",
            "```ruby\n# @param l [Array<Integer>]\n# @return [Boolean]\ndef monotonic(l)\n  diff = l.each_cons(2).map { |x, y| y - x }\n  all_non_positive = diff.all? { |x| x <= 0 }\n  all_non_negative = diff.all? { |x| x >= 0 }\n  all_non_positive || all_non_negative\nend\n```",
            "```ruby\n# @param l1 [Array<Integer>]\n# @param l2 [Array<Integer>]\n# @returns {Array<Integer>}\ndef common(l1, l2)\n    (l1 & l2).sort\nend\n```",
            "```ruby\ndef largest_prime_factor(n)\n  i = 2\n  while i * i <= n\n    if n % i != 0\n      i += 1\n    else\n      n /= i\n    end\n  end\n  n\nend\n```",
            "```ruby\n# @param n [Integer]\n# @returns Integer\ndef sum_to_n(n)\n    (0..n).sum\nend\n```",
            "```ruby\n# @param brackets [String]\n# @returns {Boolean}\ndef correct_bracketing(brackets)\n    depth = 0\n    brackets.each_char do |char|\n        if char == \"(\"\n            depth += 1\n        elsif char == \")\"\n            depth -= 1\n        end\n        return false if depth < 0\n    end\n    depth == 0\nend\n```",
            "```ruby\n# @param xs [Array<Integer>]\n# @returns {Array<Integer>}\ndef derivative(xs)\n    result = []\n    (1...xs.length).each do |i|\n        result << xs[i] * i\n    end\n    result\nend\n```",
            "```ruby\n# @param n [Integer]\n# @returns [Integer]\ndef fibfib(n)\n    if n <= 1\n        return 0 \n    end\n    a, b, c = 0, 0, 1\n    while n > 2\n        a, b, c = b, c, a + b + c\n        n -= 1\n    end\n    return c\nend\n```",
            "```ruby\n# @param s [String]\n# @returns {Integer}\ndef vowels_count(s)\n    vowels = \"aeiou\"\n    cnt = 0\n    (0...s.length).each do |i|\n        if vowels.include?(s[i].downcase) || (i == s.length - 1 && s[i].downcase == 'y')\n            cnt += 1\n        end\n    end\n    cnt\nend\n```",
            "```ruby\n# @param x [Integer]\n# @param shift [Integer]\n# @returns {String}\ndef circular_shift(x, shift)\n    x_str = x.to_s\n    if shift > x_str.length\n        return x_str.reverse\n    else\n        return x_str[-shift..-1] + x_str[0...-shift]\n    end\nend\n```",
            "```ruby\n# @param s [String]\n# @returns {Integer}\ndef digit_sum(s)\n    sum = 0\n    (0...s.length).each do |i|\n        c = s[i]\n        if c =~ /[A-Z]/\n            sum += c.ord\n        end\n    end\n    return sum\nend\n```",
            "```ruby\ndef fruit_distribution(s, n)\n  words = s.split(' ')\n  apples_index = words.index(\"apples\") - 1\n  oranges_index = words.index(\"oranges\") - 1\n  apples = words[apples_index].to_i\n  oranges = words[oranges_index].to_i\n  return n - apples - oranges\nend\n```",
            "```ruby\ndef pluck(arr)\n  evens = arr.select { |n| n.even? }\n  \n  if evens.empty?\n    return []\n  end\n  \n  min_even = evens.min\n  index = arr.index(min_even)\n  \n  [min_even, index]\nend\n```",
            "```ruby\n# @param lst [Array<Integer>]\n# @returns {Integer}\ndef search(lst)\n    freqs = Hash.new(0)\n    lst.each do |n|\n        freqs[n] += 1\n    end\n    good_vals = []\n    freqs.each do |k, v|\n        good_vals << k if v >= k\n    end\n    good_vals.empty? ? -1 : good_vals.max\nend\n```",
            "```ruby\ndef strange_sort_list(lst)\n    sl = lst.sort\n    result = []\n    left = 0\n    right = sl.length - 1\n    while left <= right\n        result << sl[left]\n        left += 1\n        if left <= right\n            result << sl[right]\n            right -= 1\n        end\n    end\n    result\nend\n```",
            "```ruby\n# @param a [Integer]\n# @param b [Integer]\n# @param c [Integer]\n# @returns {Float}\ndef triangle_area(a, b, c)\n    if a + b > c && a + c > b && b + c > a\n        s = (a + b + c) / 2.0\n        Math.sqrt(s * (s - a) * (s - b) * (s - c))\n    else\n        -1.0\n    end\nend\n```",
            "```ruby\ndef will_it_fly(q, w)\n    return false if q.empty?\n    \n    is_palin = true\n    (0...q.length).each do |i|\n        if q[i] != q[q.length - i - 1]\n            is_palin = false\n            break\n        end\n    end\n    \n    total = q.sum\n    is_palin && total <= w\nend\n```",
            "```ruby\n# @param arr [Array<Integer>]\n# @returns {Integer}\ndef smallest_change(arr)\n    ans = 0\n    (0...arr.length / 2).each do |i|\n        ans += 1 if arr[i] != arr[arr.length - i - 1]\n    end\n    ans\nend\n```",
            "```ruby\ndef total_match(lst1, lst2)\n    cnt1 = lst1.reduce(0) { |carry, item| carry + item.length }\n    cnt2 = lst2.reduce(0) { |carry, item| carry + item.length }\n\n    cnt1 <= cnt2 ? lst1 : lst2\nend\n```",
            "```ruby\n# @param a [Integer]\n# @returns {Boolean}\ndef is_multiply_prime(a)\n  cnt = 0\n  i = 2\n  while i <= a\n    if is_prime(i)\n      while a % i == 0\n        cnt += 1\n        a /= i\n      end\n    end\n    i += 1\n  end\n  cnt == 3\nend\n\n# @param n [Integer]\n# @returns {Boolean}\ndef is_prime(n)\n  return false if n < 2\n  i = 2\n  while i <= Math.sqrt(n)\n    return false if n % i == 0\n    i += 1\n  end\n  true\nend\n```",
            "```ruby\ndef is_simple_power(x, n)\n  if n < 2\n    return x == n\n  end\n  tmp = 1\n  while tmp < x\n    tmp *= n\n  end\n  tmp == x\nend\n```",
            "```ruby\n# @param a [Integer]\n# @returns {Boolean}\ndef is_cube(a)\n    a = a.abs\n    root = (a ** (1.0 / 3.0)).round.to_i\n    root * root * root == a\nend\n```",
            "```ruby\ndef hex_key(num)\n    num.chars.count { |x| \"2357BD\".include?(x) }\nend\n```",
            "```ruby\n# @param dec [Integer]\n# @returns {String}\ndef decimal_to_binary(dec)\n    binary = dec.to_s(2)\n    \"db#{binary}db\"\nend\n```",
            "```ruby\n# @param s [String]\n# @returns [Boolean]\ndef is_happy(s)\n    return false if s.length < 3\n    (0..s.length - 3).each do |i|\n        return false if s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]\n    end\n    true\nend\n```",
            "```ruby\n# @param grades [Array<Float>]\n# @returns {Array<String>}\ndef numerical_letter_grade(grades)\n    result = []\n    grades.each do |g|\n        if g == 4.0\n            result << \"A+\"\n        elsif g > 3.7\n            result << \"A\"\n        elsif g > 3.3\n            result << \"A-\"\n        elsif g > 3.0\n            result << \"B+\"\n        elsif g > 2.7\n            result << \"B\"\n        elsif g > 2.3\n            result << \"B-\"\n        elsif g > 2.0\n            result << \"C+\"\n        elsif g > 1.7\n            result << \"C\"\n        elsif g > 1.3\n            result << \"C-\"\n        elsif g > 1.0\n            result << \"D+\"\n        elsif g > 0.7\n            result << \"D\"\n        elsif g > 0.0\n            result << \"D-\"\n        else\n            result << \"E\"\n        end\n    end\n    return result\nend\n```",
            "```ruby\n# @param s [String]\n# @returns {Boolean}\ndef prime_length(s)\n    length = s.length\n    return false if length < 2\n    (2..Math.sqrt(length)).each do |i|\n        return false if length % i == 0\n    end\n    true\nend\n```",
            "```ruby\n# @param n [Integer]\n# @returns {Integer}\ndef starts_one_ends(n)\n    if n == 1\n        return 1\n    end\n    return 2 * 9 * 10**(n - 2)\nend\n```",
            "```ruby\ndef solve(n)\n    digits_sum = n.to_s.chars.map(&:to_i).sum\n    digits_sum.to_s(2)\nend\n```",
            "```ruby\n# @param lst [Array<Integer>]\n# @returns {Integer}\ndef add(lst)\n    sum = 0\n    lst.each_with_index do |x, i|\n        if i % 2 == 1 && x % 2 == 0\n            sum += x\n        end\n    end\n    return sum\nend\n```",
            "```ruby\n# @param s [String]\n# @returns {String}\ndef anti_shuffle(s)\n    words = s.split(\" \")\n    sorted_words = words.map do |word|\n        chars = word.chars\n        chars.sort!\n        chars.join(\"\")\n    end\n    sorted_words.join(\" \")\nend\n```",
            "```ruby\ndef get_row(lst, x)\n    coords = []\n    lst.each_with_index do |row, i|\n        row.each_with_index do |val, j|\n            if val == x\n                coords << [i, j]\n            end\n        end\n    end\n    coords.sort_by! { |a, b| a[0] == b[0] ? b[1] - a[1] : a[0] - b[0] }\n    coords\nend\n```",
            "```ruby\n# @param arr [Array<Integer>]\n# @returns {Array<Integer>}\ndef sort_array(arr)\n  if arr.empty?\n    return []\n  end\n  if (arr[0] + arr.last) % 2 == 0\n    arr.sort!.reverse!\n  else\n    arr.sort!\n  end\n  arr\nend\n```",
            "```ruby\n# @param s [String]\n# @returns {String}\ndef encrypt(s)\n    result = ''\n    s.each_char do |ch|\n        shifted = ch.ord + 4\n        if shifted > 'z'.ord\n            shifted -= 26\n        end\n        result += shifted.chr\n    end\n    return result\nend\n```",
            "```ruby\n# @param lst [Array<Integer>]\n# @returns {Integer, nil}\ndef next_smallest(lst)\n    sl = lst.uniq.sort\n    return nil if sl.length < 2\n    sl[1]\nend\n```",
            "```ruby\ndef is_bored(s)\n  sentences = s.split(/[.!?]\\s*/)\n  count = 0\n  sentences.each do |sentence|\n    if sentence.length >= 2 && sentence.start_with?(\"I \")\n      count += 1\n    end\n  end\n  count\nend\n```",
            "```ruby\n# @param x [Object]\n# @param y [Object]\n# @param z [Object]\n# @returns {Boolean}\ndef any_int(x, y, z)\n  if Integer === x && Integer === y && Integer === z\n    return true if (x + y == z || x + z == y || y + z == x)\n  end\n  false\nend\n```",
            "```ruby\n# @param message [String]\n# @returns {String}\ndef encode(message)\n    vowels = \"aeiouAEIOU\"\n    result = []\n    (0...message.length).each do |i|\n        ch = message[i]\n        if ch =~ /[a-zA-Z]/\n            ch1 = ch.downcase == ch ? ch.upcase : ch.downcase\n            if vowels.include?(ch1)\n                ch1 = (ch1.ord + 2).chr\n            end\n            result << ch1\n        else\n            result << ch\n        end\n    end\n    result.join(\"\")\nend\n```",
            "```ruby\ndef skjkasdkd(lst)\n    primes = lst.select { |n| n >= 2 && !(2..Math.sqrt(n).floor).any? { |i| n % i == 0 } }\n    return 0 if primes.empty?\n    largest = primes.max.to_s\n    largest.chars.map(&:to_i).sum\nend\n```",
            "```ruby\n# @param d [Hash{String => String}]\n# @returns {Boolean}\ndef check_dict_case(d)\n    return false if d.empty?\n    \n    all_lower = true\n    all_upper = true\n    \n    d.each_key do |key|\n        all_lower = false unless key.downcase == key\n        all_upper = false unless key.upcase == key\n    end\n    \n    all_lower || all_upper\nend\n```",
            "```ruby\n# @param n [Integer]\n# @returns {Array<Integer>}\ndef count_up_to(n)\n    primes = []\n    (2...n).each do |num|\n        is_prime = true\n        primes.each do |p|\n            if num % p == 0\n                is_prime = false\n                break\n            end\n        end\n        primes << num if is_prime\n    end\n    primes\nend\n```",
            "```ruby\n# @param a [Integer]\n# @param b [Integer]\n# @returns {Integer}\ndef multiply(a, b)\n    (a.abs % 10) * (b.abs % 10)\nend\n```",
            "```ruby\ndef count_upper(s)\n    vowels = \"AEIOU\"\n    count = 0\n    (0...s.length).each do |i|\n        if i.even? && vowels.include?(s[i])\n            count += 1\n        end\n    end\n    count\nend\n```",
            "```ruby\n# @param value [String]\n# @returns {Integer}\ndef closest_integer(value)\n    num = Float(value)\n    if num >= 0\n        num.to_i + (num.frac >= 0.5 ? 1 : 0)\n    else\n        num.to_i - (num.frac <= -0.5 ? 1 : 0)\n    end\nend\n```",
            "```ruby\n# @param n [Integer]\n# @returns {Array<Integer>}\ndef make_a_pile(n)\n    pile = []\n    (0...n).each do |i|\n        pile << n + 2 * i\n    end\n    pile\nend\n```",
            "```ruby\ndef words_string(s)\n  s.split(/[,\\\\s]+/).reject(&:empty?)\nend\n```",
            "```ruby\ndef choose_num(x, y)\n    if x > y\n        return -1\n    end\n    if y.even?\n        return y\n    end\n    return (x != y) ? y - 1 : -1\nend\n```",
            "```ruby\n# @param n [Integer]\n# @param m [Integer]\n# @returns {String, nil}\ndef rounded_avg(n, m)\n    if n > m\n        return nil\n    end\n    r_avg = ((m + n) / 2.0).round\n    r_avg.to_s(2)\nend\n```",
            "```ruby\ndef all_digits_odd(s)\n  s.chars.all? { |digit| digit.ord % 2 != 0 }\nend\n\ndef unique_digits(x)\n  x.select { |num| all_digits_odd(num.to_s) }.sort\nend\n```",
            "```ruby\n# @param arr [Array<Integer>]\n# @returns [Array<String>]\ndef by_length(arr)\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = arr.select { |x| 1 <= x && x <= 9 }.sort.reverse\n    result = sorted_arr.map { |x| digit_names[x - 1] }\n    result\nend\n```",
            "```ruby\ndef f(n)\n    nums = (1..n).to_a\n    result = []\n    nums.each_with_index do |value, i|\n        if (i + 1) % 2 != 0\n            result << nums.slice(0, i + 1).sum\n        else\n            product = 1\n            nums.slice(0, i + 1).each do |num|\n                product *= num\n            end\n            result << product\n        end\n    end\n    result\nend\n```",
            "```ruby\ndef even_odd_palindrome(n)\n    cnt = [0, 0]\n    (1..n).each do |i|\n        if i.to_s == i.to_s.reverse\n            cnt[i % 2] += 1\n        end\n    end\n    cnt\nend\n```",
            "```ruby\ndef digits_sum(n: int) -> int\n    n_str = str(n)\n    if n >= 0\n        return sum(int(d) for d in n_str)\n    else\n        return int(n_str[:2]) * 2 + digits_sum(abs(n))\ndef count_nums(arr)\n    arr.count { |n| digits_sum(n) > 0 }\nend\n```",
            "```ruby\n# @param arr [Array<Integer>]\n# @returns {Boolean}\ndef move_one_ball(arr)\n    return true if arr.empty?\n    sorted_arr = arr.sort\n    (0...arr.length).each do |i|\n        return true if arr[i..] == sorted_arr[0...arr.length - i] && arr[..i] == sorted_arr[arr.length - i..]\n    end\n    false\nend\n```",
            "```ruby\n# @param lst1 [Array<Integer>]\n# @param lst2 [Array<Integer>]\n# @returns {String}\ndef can_exchange(lst1, lst2)\n    odd_cnt = 0\n    lst1.each do |num|\n        odd_cnt += 1 if num % 2 != 0\n    end\n\n    even_cnt = 0\n    lst2.each do |num|\n        even_cnt += 1 if num % 2 == 0\n    end\n\n    even_cnt >= odd_cnt ? \"YES\" : \"NO\"\nend\n```",
            "```ruby\ndef histogram(test)\n    freq = {}\n    words = test.split(\" \").reject { |w| w.empty? }\n    words.each do |w|\n        freq[w] ||= 0\n        freq[w] += 1\n    end\n    result = {}\n    if freq.any?\n        max_freq = freq.values.max\n        freq.each do |k, v|\n            result[k] = v if v == max_freq\n        end\n    end\n    result\nend\n```",
            "```ruby\n# @param s [String]\n# @param c [String]\n# @returns {Array<String>}\ndef reverse_delete(s, c)\n    s1 = s.gsub(/./) { |char| c.include?(char) ? '' : char }\n    [s1, is_palindrome(s1) ? \"yes\" : \"no\"]\nend\n\nprivate\n\ndef is_palindrome(s)\n    s == s.reverse\nend\n```",
            "```ruby\ndef odd_count(lst)\n    result = []\n    lst.each do |num|\n        n = 0\n        num.each_char do |char|\n            if char.ord % 2 == 1\n                n += 1\n            end\n        end\n        rs = \"the number of odd elements in the string i of the input.\"\n        result << rs.gsub(\"i\", n.to_s)\n    end\n    return result\nend\n```",
            "```ruby\ndef min_sub_array_sum(nums)\n    min_sum = 0\n    cur_sum = 0\n    nums.each do |n|\n        cur_sum = [cur_sum + n, 0].min\n        min_sum = [cur_sum, min_sum].min\n    end\n    if min_sum == 0\n        min_sum = nums.min\n    end\n    min_sum\nend\n```",
            "```ruby\ndef max_fill(grid, capacity)\n    total = 0\n    grid.each do |arr|\n        total += (arr.sum.to_f / capacity).ceil\n    end\n    total\nend\n```",
            "```ruby\n# @param arr [Array<Integer>]\n# @returns {Array<Integer>}\ndef sort_array(arr)\n    arr.sort_by do |num|\n        [num.to_s(2).count('1'), num]\n    end\nend\n```",
            "```ruby\ndef select_words(s, n)\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split(\" \").reject { |w| w.empty? }\n    words.select { |w| w.downcase.chars.count { |c| consonants.include?(c) } == n }\nend\n```",
            "```ruby\ndef get_closest_vowel(word)\n    vowels = \"aeiouAEIOU\"\n    (word.length - 2).downto(1) do |i|\n        if vowels.include?(word[i]) && !vowels.include?(word[i - 1]) && !vowels.include?(word[i + 1])\n            return word[i]\n        end\n    end\n    \"\"\nend\n```",
            "```ruby\n# @param lst [Array<String>]\n# @return [String]\ndef match_parens(lst)\n  s1 = lst[0] + lst[1]\n  s2 = lst[1] + lst[0]\n\n  def check(s)\n    depth = 0\n    s.each_char do |ch|\n      if ch == \"(\"\n        depth += 1\n      else\n        depth -= 1\n      end\n      return false if depth < 0\n    end\n    depth == 0\n  end\n\n  \"Yes\" if check(s1) || check(s2)\nend\n```",
            "```ruby\ndef maximum(arr, k)\n    if k == 0\n        return []\n    end\n    arr.sort[-k..-1]\nend\n```",
            "```ruby\ndef solution(lst)\n    sum = 0\n    lst.each_with_index do |x, i|\n        if i.even? && x.odd?\n            sum += x\n        end\n    end\n    sum\nend\n```",
            "```ruby\n# @param arr [Array<Integer>]\n# @param k [Integer]\n# @returns {Integer}\ndef add_elements(arr, k)\n    sum = 0\n    (0...[k, arr.length].min).each do |i|\n        if arr[i].to_s.length <= 2\n            sum += arr[i]\n        end\n    end\n    sum\nend\n```",
            "```ruby\n# @param n [Integer]\n# @returns {Array<Integer>}\ndef get_odd_collatz(n)\n    collatz = [1]\n    while n != 1\n        if n % 2 != 0\n            collatz << n\n            n = 3 * n + 1\n        else\n            n /= 2\n        end\n    end\n    collatz.sort\nend\n```",
            "```ruby\ndef valid_date(date)\n    return false unless date.length == 10 && date[2] == '-' && date[5] == '-'\n    \n    m = date[0, 2].to_i\n    d = date[3, 2].to_i\n    \n    return true if [1, 3, 5, 7, 8, 10, 12].include?(m) && d >= 1 && d <= 31\n    return true if [4, 6, 9, 11].include?(m) && d >= 1 && d <= 30\n    return true if m == 2 && d >= 1 && d <= 29\n    \n    false\nend\n```",
            "```ruby\n# @param txt [String]\n# @returns {Array<String>}\ndef split_words(txt)\n    if txt.include?(' ')\n        txt.split(' ')\n    elsif txt.include?(',')\n        txt.split(',')\n    else\n        count = 0\n        txt.each_char do |c|\n            count += 1 if c.ord.even? && c.downcase == c\n        end\n        [count.to_s]\n    end\nend\n```",
            "```ruby\n# @param lst [Array<Integer>]\n# @returns {Boolean}\ndef is_sorted(lst)\n    return true if lst.empty?\n\n    (1...lst.size).each do |i|\n        return false if lst[i - 1] > lst[i]\n    end\n\n    freq = Hash.new(0)\n    lst.each { |num| freq[num] += 1 }\n    freq.values.each do |count|\n        return false if count > 2\n    end\n\n    true\nend\n```",
            "```ruby\ndef intersection(interval1, interval2)\n  l = [interval1[0], interval2[0]].max\n  r = [interval1[1], interval2[1]].min\n  length = r - l\n\n  def is_prime(n)\n    return false if n < 2\n    (2..Math.sqrt(n)).each do |i|\n      return false if n % i == 0\n    end\n    true\n  end\n\n  \"YES\" if length > 0 && is_prime(length) else \"NO\"\nend\n```",
            "```ruby\n# @param arr [Array<Integer>]\n# @returns {Integer, nil}\ndef prod_signs(arr)\n    return nil if arr.empty?\n    return 0 if arr.include?(0)\n    neg_count = arr.count { |n| n < 0 }\n    sign = (neg_count % 2 == 1) ? -1 : 1\n    return sign * arr.map(&:abs).sum\nend\n```",
            "```ruby\ndef min_path(grid, k)\n    n = grid.length\n    min_val = n * n + 1\n    (0...n).each do |i|\n        (0...n).each do |j|\n            if grid[i][j] == 1\n                temp = []\n                temp << grid[i - 1][j] if i != 0\n                temp << grid[i][j - 1] if j != 0\n                temp << grid[i + 1][j] if i != n - 1\n                temp << grid[i][j + 1] if j != n - 1\n                min_val = temp.min\n            end\n        end\n    end\n    result = []\n    (0...k).each do |i|\n        result << (i % 2 == 0 ? 1 : min_val)\n    end\n    result\nend\n```",
            "```ruby\ndef tri(n)\n    if n == 0\n        return [1]\n    end\n    seq = [1, 3]\n    for i in 2..n\n        if i.even?\n            seq.push(i / 2.0 + 1)\n        else\n            seq.push(seq[i - 1] + seq[i - 2] + (i + 3) / 2.0)\n        end\n    end\n    return seq\nend\n```",
            "```ruby\ndef digits(n)\n  odds = n.to_s.chars.map(&:to_i).select { |d| d.odd? }\n  if odds.any?\n    odds.reduce(:*)\n  else\n    0\n  end\nend\n```",
            "```ruby\n# @param s [String]\n# @returns {Boolean}\ndef is_nested(s)\n    open_idx = []\n    close_idx = []\n    \n    (0...s.length).each do |i|\n        if s[i] == '['\n            open_idx.push(i)\n        elsif s[i] == ']'\n            close_idx.push(i)\n        end\n    end\n    \n    close_idx.reverse!\n    cnt = 0\n    i = 0\n    l = close_idx.length\n    \n    open_idx.each do |idx|\n        if i < l && idx < close_idx[i]\n            cnt += 1\n            i += 1\n        end\n    end\n    \n    cnt >= 2\nend\n```",
            "```ruby\ndef sum_squares(lst)\n  lst.map do |n|\n    (Math.ceil(n)) ** 2\n  end.sum\nend\n```",
            "```ruby\n# @param txt [String]\n# @return [Boolean]\ndef check_if_last_char_is_a_letter(txt)\n  return false if txt.empty?\n  \n  last_word = txt.split.last\n  last_char = last_word[-1]\n  \n  last_char.ord.between?(?'A'.ord, ?'Z'.ord) || last_char.ord.between?(?'a'.ord, ?'z'.ord)\nend\n```",
            "```ruby\n# @param arr [Array<Integer>]\n# @returns {Integer}\ndef can_arrange(arr)\n    return -1 if arr.length <= 1\n\n    idx = []\n    (1...arr.length).each do |i|\n        idx << i if arr[i] < arr[i - 1]\n    end\n\n    !idx.empty? ? idx.max : -1\nend\n```",
            "```ruby\ndef largest_smallest_integers(lst)\n    neg = lst.select { |i| i < 0 }\n    pos = lst.select { |i| i > 0 }\n    max_neg = !neg.empty? ? neg.max : nil\n    min_pos = !pos.empty? ? pos.min : nil\n    [max_neg, min_pos]\nend\n```",
            "```ruby\n# @param a [Object]\n# @param b [Object]\n# @returns {Float, nil}\ndef compare_one(a, b)\n  def any_to_real(o)\n    case o\n    when String\n      Float(o.gsub(',', '.'))\n    when Integer\n      Float(o)\n    when Float\n      o\n    else\n      raise RuntimeError, \"Type Error\"\n    end\n  end\n\n  a1 = any_to_real(a)\n  b1 = any_to_real(b)\n\n  return nil if a1 == b1\n  a1 > b1 ? a1 : b1\nend\n```",
            "```ruby\ndef is_equal_to_sum_even(n)\n  n.even? && n >= 8\nend\n```",
            "```ruby\n# @param n [Integer]\n# @returns {Integer}\ndef special_factorial(n)\n    fact = 1\n    result = 1\n    (1..n).each do |i|\n        fact *= i\n        result *= fact\n    end\n    result\nend\n```",
            "```ruby\ndef fix_spaces(txt)\n  txt.gsub(/\\s{3,}/, '-').gsub(' ', '_')\nend\n```",
            "```ruby\n# @param file_name [String]\n# @returns {String}\ndef file_name_check(file_name)\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(\".\")\n    if lst.size != 2 || !suf.include?(lst[1]) || lst[0].length == 0 || !lst[0][0].match?(/\\p{Alpha}/) || lst[0].count(\"0-9\") > 3\n        return \"No\"\n    end\n    return \"Yes\"\nend\n```",
            "```ruby\ndef sum_squares(lst)\n    result = 0\n    (0...lst.length).each do |i|\n        if i % 3 == 0\n            result += lst[i]**2\n        elsif i % 4 == 0\n            result += lst[i]**3\n        else\n            result += lst[i]\n        end\n    end\n    return result\nend\n```",
            "```ruby\n# @param sentence [String]\n# @returns {String}\ndef words_in_sentence(sentence)\n    words = sentence.split(\" \")\n    prime_words = words.select do |word|\n        length = word.length\n        return false if length < 2\n        (2..Math.sqrt(length)).each do |i|\n            return false if length % i == 0\n        end\n        true\n    end\n    prime_words.join(\" \")\nend\n```",
            "```ruby\n# @param x [String]\n# @param n [String]\n# @returns {Boolean}\ndef simplify(x, n)\n    xs = x.split(\"/\")\n    ns = n.split(\"/\")\n    num = xs[0].to_i * ns[0].to_i\n    den = xs[1].to_i * ns[1].to_i\n    num % den == 0\nend\n```",
            "```ruby\ndef order_by_points(nums)\n    nums.sort_by { |n| digits_sum(n) }\nend\n\ndef digits_sum(n)\n    n_str = n.to_s\n    if n >= 0\n        n_str.chars.map(&:to_i).sum\n    else\n        first_two_chars = n_str[0, 2]\n        (first_two_chars.to_i * 2) + digits_sum(n.abs)\n    end\nend\n```",
            "```ruby\ndef special_filter(nums)\n    odds = \"13579\"\n    count = 0\n    nums.each do |n|\n        if n > 10 && n % 2 == 1 && odds.include?(n.to_s[0])\n            count += 1\n        end\n    end\n    count\nend\n```",
            "```ruby\n# @param n [Integer]\n# @returns {Integer}\ndef get_max_triples(n)\n    c = [0, 0, 0]\n    (1..n).each do |i|\n        a = i * i - i + 1\n        c[a % 3] += 1\n    end\n    return c[0] * c[1] * c[2] + ((c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6.0).to_i\nend\n```",
            "```ruby\ndef bf(planet1, planet2)\n    names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    return [] unless names.include?(planet1) && names.include?(planet2)\n    \n    l = names.index(planet1)\n    r = names.index(planet2)\n    \n    l, r = r, l if l > r\n    return [] if l == r\n    \n    names[(l + 1)...r]\nend\n```",
            "```ruby\ndef sorted_list_sum(lst)\n  result = lst.select { |s| s.length.even? }\n  \n  result.sort_by do |s|\n    [s.length, s]\n  end\nend\n```",
            "```ruby\n# @param n [Integer]\n# @param x [Integer]\n# @param y [Integer]\n# @returns {Integer}\ndef x_or_y(n, x, y)\n    return y if n < 2\n    (2..Math.sqrt(n).to_i).each do |i|\n        return y if n % i == 0\n    end\n    x\nend\n```",
            "```ruby\ndef double_the_difference(lst)\n    sum = 0\n    lst.each do |n|\n        if n >= 0 && n % 2 == 1\n            sum += n * n\n        end\n    end\n    return sum\nend\n```",
            "```ruby\ndef compare(game, guess)\n    result = []\n    for i in 0...game.length\n        result << (game[i] - guess[i]).abs\n    end\n    return result\nend\n```",
            "```ruby\ndef strongest_extension(class_name, extensions)\n    max_s = -Float::INFINITY\n    max_ext = \"\"\n    extensions.each do |ext|\n        upper = ext.scan(/[A-Z]/).count\n        lower = ext.scan(/[a-z]/).count\n        s = upper - lower\n        if s > max_s\n            max_s = s\n            max_ext = ext\n        end\n    end\n    \"#{class_name}.#{max_ext}\"\nend\n```",
            "```ruby\n# @param a [String]\n# @param b [String]\n# @returns {Boolean}\ndef cycpattern_check(a, b)\n    return false if a.length < b.length\n    (0...b.length).each do |i|\n        return true if a.include?(b[i..-1] + b[0...i])\n    end\n    false\nend\n```",
            "```ruby\ndef even_odd_count(num)\n  ds = num.abs.to_s\n  even = 0\n  \n  ds.each_char do |char|\n    even += 1 if char.to_i.even?\n  end\n  \n  [even, ds.length - even]\nend\n```",
            "```ruby\n# @param num [Integer]\n# @returns {String}\ndef int_to_mini_roman(num)\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    res = []\n    for i in 0...values.length\n        while num >= values[i]\n            res << numerals[i]\n            num -= values[i]\n        end\n    end\n    res.join(\"\")\nend\n```",
            "```ruby\n# @param a [Integer]\n# @param b [Integer]\n# @param c [Integer]\n# @returns {Boolean}\ndef right_angle_triangle(a, b, c)\n    s = [a, b, c].sort\n    (s[0] ** 2) + (s[1] ** 2) == (s[2] ** 2)\nend\n```",
            "```ruby\ndef find_max(words)\n  max_cnt = 0\n  max_w = \"\"\n  words.each do |w|\n    cnt = w.chars.uniq.count\n    if cnt > max_cnt\n      max_cnt = cnt\n      max_w = w\n    elsif cnt == max_cnt\n      max_w = max_w < w ? max_w : w\n    end\n  end\n  max_w\nend\n```",
            "```ruby\ndef eat(num, need, remaining)\n    if need <= remaining\n        return [num + need, remaining - need]\n    else\n        return [num + remaining, 0]\n    end\nend\n```",
            "```ruby\ndef do_algebra(operators, operands)\n    ops = operators.dup\n    nums = operands.dup\n    i = ops.size - 1\n    while i >= 0\n        if ops[i] == \"**\"\n            nums[i] = nums[i]**nums[i + 1]\n            nums.slice!(i + 1)\n            ops.slice!(i)\n        end\n        i -= 1\n    end\n    i = 0\n    while i < ops.size\n        if ops[i] == \"*\"\n            nums[i] *= nums[i + 1]\n            nums.slice!(i + 1)\n            ops.slice!(i)\n            i -= 1\n        elsif ops[i] == \"//\"\n            nums[i] = nums[i].div(nums[i + 1])\n            nums.slice!(i + 1)\n            ops.slice!(i)\n            i -= 1\n        end\n        i += 1\n    end\n    i = 0\n    while i < ops.size\n        if ops[i] == \"+\"\n            nums[i] += nums[i + 1]\n            nums.slice!(i + 1)\n            ops.slice!(i)\n            i -= 1\n        elsif ops[i] == \"-\"\n            nums[i] -= nums[i + 1]\n            nums.slice!(i + 1)\n            ops.slice!(i)\n            i -= 1\n        end\n        i += 1\n    end\n    nums[0]\nend\n```",
            "```ruby\n# @param s [String]\n# @return [String]\ndef solve(s)\n  if !s.match?(/[a-zA-Z]/)\n    return s.reverse\n  end\n\n  result = []\n  s.each_char do |ch|\n    if ch =~ /[^a-zA-Z]/\n      result << ch\n    elsif ch =~ /[A-Z]/\n      result << ch.downcase\n    elsif ch =~ /[a-z]/\n      result << ch.upcase\n    end\n  end\n\n  result.join('')\nend\n```",
            "```ruby\ndef string_to_md5(txt)\n    return nil if txt.nil? || txt.empty?\n    md5_hash = Digest::MD5.hexdigest(txt)\n    md5_hash\nend\n```",
            "```ruby\n# @param a [Integer]\n# @param b [Integer]\n# @returns {Array<Integer>}\ndef generate_integers(a, b)\n    lower = [2, [a, b].min].max\n    upper = [8, [a, b].max].min\n    result = []\n    (lower..upper).each do |i|\n        if i.even?\n            result << i\n        end\n    end\n    result\nend\n```"
        ],
        "swift": [
            "```swift\nfunc hasCloseElements(_ numbers: [Double], _ threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n        for j in (i + 1)..<numbers.count {\n            if abs(numbers[i] - numbers[j]) < threshold {\n                return true\n            }\n        }\n    }\n    return false\n}\n```",
            "```swift\nfunc separateParenGroups(_ parenString: String) -> [String] {\n    var groups = [String]()\n    var stk = [Character]()\n    var currentGroup = \"\"\n    let parens = parenString.replacingOccurrences(of: \" \", with: \"\")\n    \n    for ch in parens {\n        if ch == \"(\" {\n            stk.append(ch)\n            currentGroup.append(ch)\n        } elseif ch == \")\" {\n            stk.popLast()\n            currentGroup.append(ch)\n            if stk.isEmpty {\n                groups.append(currentGroup)\n                currentGroup = \"\"\n            }\n        }\n    }\n    \n    return groups\n}\n```",
            "```swift\nfunc truncateNumber(_ num: Double) -> Double {\n    return num - floor(num)\n}\n```",
            "```swift\nfunc belowZero(_ operations: [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance += op\n        if balance < 0 {\n            return true\n        }\n    }\n    return false\n}\n```",
            "```swift\nfunc meanAbsoluteDeviation(_ numbers: [Double]) -> Double {\n    let mean = numbers.reduce(0, +) / Double(numbers.count)\n    var deviation = 0.0\n    for x in numbers {\n        deviation += abs(x - mean)\n    }\n    return deviation / Double(numbers.count)\n}\n```",
            "```swift\nfunc intersperse(_ numbers: [Int], _ delimiter: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<numbers.count {\n        if i != 0 {\n            result.append(delimiter)\n        }\n        result.append(numbers[i])\n    }\n    return result\n}\n```",
            "```swift\nfunc parseNestedParens(_ parenString: String) -> [Int] {\n    var result = [Int]()\n    let parenGroups = parenString.split(separator: \" \")\n    \n    for group in parenGroups {\n        var maxDepth = 0\n        var depth = 0\n        \n        for ch in group {\n            if ch == \"(\" {\n                depth += 1\n                maxDepth = max(maxDepth, depth)\n            } else if ch == \")\" {\n                depth -= 1\n            }\n        }\n        \n        result.append(maxDepth)\n    }\n    \n    return result\n}\n```",
            "```swift\nfunc filterBySubstring(_ strs: [String], _ substring: String) -> [String] {\n    return strs.filter { $0.contains(substring) }\n}\n```",
            "```swift\nfunc sumProduct(_ numbers: [Int]) -> [Int] {\n    let n_sum = numbers.reduce(0, +)\n    let n_product = numbers.reduce(1, *)\n    return [n_sum, n_product]\n}\n```",
            "```swift\nfunc rollingMax(_ numbers: [Int]) -> [Int] {\n    var maxSoFar = Int.min\n    var result: [Int] = []\n    for num in numbers {\n        maxSoFar = max(maxSoFar, num)\n        result.append(maxSoFar)\n    }\n    return result\n}\n```",
            "```swift\nfunc makePalindrome(_ s: String) -> String {\n    let reversed = String(s.reversed())\n    if s == reversed {\n        return s\n    }\n    for i in 0..<s.count {\n        let index = s.index(s.startIndex, offsetBy: i)\n        let substring = String(s[index...])\n        if substring == String(substring.reversed()) {\n            let prefix = String(s[..<index])\n            return s + String(prefix.reversed())\n        }\n    }\n    return \"\"\n}\n```",
            "```swift\nfunc stringXor(_ a: String, _ b: String) -> String {\n    var result = \"\"\n    for (index, charA) in a.enumerated() {\n        let charB = b[b.index(b.startIndex, offsetBy: index)]\n        result.append(charA == charB ? \"0\" : \"1\")\n    }\n    return result\n}\n```",
            "```swift\nfunc longest(_ strs: [String]) -> String? {\n    guard !strs.isEmpty else {\n        return nil\n    }\n    var longest_s = strs[0]\n    for s in strs {\n        if s.count > longest_s.count {\n            longest_s = s\n        }\n    }\n    return longest_s\n}\n```",
            "```swift\nfunc greatestCommonDivisor(_ a: Int, _ b: Int) -> Int {\n    if b == 0 {\n        return a\n    } else {\n        return greatestCommonDivisor(b, a % b)\n    }\n}\n```",
            "```swift\nfunc allPrefixes(_ s: String) -> [String] {\n    var prefixes = [String]()\n    for i in 0..<s.count {\n        let index = s.index(s.startIndex, offsetBy: i)\n        let prefix = String(s[...index])\n        prefixes.append(prefix)\n    }\n    return prefixes\n}\n```",
            "```swift\nfunc stringSequence(_ n: Int) -> String {\n    return (0...n).map { String($0) }.joined(separator: \" \")\n}\n```",
            "```swift\nfunc countDistinctCharacters(_ s: String) -> Int {\n    return Set(s.lowercased()).count\n}\n```",
            "```swift\nfunc parseMusic(_ musicString: String) -> [Int] {\n    let durations: [String: Int] = [\"o\": 4, \"o|\": 2, \".|\": 1]\n    let notes = musicString.split(separator: \" \")\n    return notes.compactMap { note in\n        if let duration = durations[String(note)] {\n            return duration\n        }\n        return nil\n    }\n}\n```",
            "```swift\nfunc howManyTimes(_ s: String, _ substring: String) -> Int {\n    var times = 0\n    let range = s.startIndex..<s.endIndex\n    for i in stride(from: range.lowerBound, through: range.upperBound - substring.count, by: 1) {\n        if let _ = s[i...].prefix(substring.count).range(of: substring, options: .literal) {\n            times += 1\n        }\n    }\n    return times\n}\n```",
            "```swift\nfunc sortNumbers(_ numbers: String) -> String {\n    let numDict: [String: Int] = [\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    ]\n    \n    let numList = numbers.split(separator: \" \").compactMap { String($0) }\n                         .filter { numDict[$0] != nil }\n                         .sorted { numDict[$0]! < numDict[$1]! }\n    \n    return numList.joined(separator: \" \")\n}\n```",
            "```swift\nfunc findClosestElements(_ numbers: [Double]) -> [Double] {\n    let sortedNumbers = numbers.sorted()\n    var minDiff = Double.greatestFiniteMagnitude\n    var closestPair: [Double] = []\n    \n    for i in 1..<sortedNumbers.count {\n        let diff = sortedNumbers[i] - sortedNumbers[i - 1]\n        if diff < minDiff {\n            minDiff = diff\n            closestPair = [sortedNumbers[i - 1], sortedNumbers[i]]\n        }\n    }\n    \n    return closestPair\n}\n```",
            "```swift\nfunc rescaleToUnit(_ numbers: [Double]) -> [Double] {\n    guard let min_num = numbers.min(), let max_num = numbers.max() else {\n        return []\n    }\n    if min_num == max_num {\n        return Array(repeating: 0.0, count: numbers.count)\n    } else {\n        return numbers.map { ($0 - min_num) / (max_num - min_num) }\n    }\n}\n```",
            "```swift\nfunc filterIntegers(_ values: [Any]) -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n```",
            "```swift\nfunc strLength(_ s: String) -> Int {\n    return s.count\n}\n```",
            "```swift\nfunc largestDivisor(_ n: Int) -> Int {\n    for i in 2..<n {\n        if n % i == 0 {\n            return n / i\n        }\n    }\n    return 1\n}\n```",
            "```swift\nfunc factorize(_ n: Int) -> [Int] {\n    var factors = [Int]()\n    var divisor = 2\n    while divisor <= n {\n        if n % divisor == 0 {\n            factors.append(divisor)\n            n /= divisor\n        } else {\n            divisor += 1\n        }\n    }\n    return factors\n}\n```",
            "```swift\nfunc removeDuplicates(_ numbers: [Int]) -> [Int] {\n    var counts = [Int: Int]()\n    for num in numbers {\n        if let count = counts[num] {\n            counts[num] = count + 1\n        } else {\n            counts[num] = 1\n        }\n    }\n    var res = [Int]()\n    for num in numbers {\n        if let count = counts[num], count == 1 {\n            res.append(num)\n        }\n    }\n    return res\n}\n```",
            "```swift\nfunc flipCase(_ s: String) -> String {\n    var flipped = \"\"\n    for ch in s {\n        if !ch.isLetter {\n            flipped.append(ch)\n        } else if ch.isLowercase {\n            flipped.append(ch.uppercased())\n        } else if ch.isUppercase {\n            flipped.append(ch.lowercased())\n        }\n    }\n    return flipped\n}\n```",
            "```swift\nfunc concatenate(_ strs: [String]) -> String {\n    return strs.joined()\n}\n```",
            "```swift\nfunc filterByPrefix(_ strs: [String], _ prefixStr: String) -> [String] {\n    return strs.filter { $0.hasPrefix(prefixStr) }\n}\n```",
            "```swift\nfunc getPositive(_ l: [Int]) -> [Int] {\n    return l.filter { $0 > 0 }\n}\n```",
            "```swift\nfunc isPrime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n```",
            "```swift\nfunc poly(_ xs: [Int], _ x: Double) -> Double {\n    var res = 0.0\n    for i in 0..<xs.count {\n        res += Double(xs[i]) * pow(x, Double(i))\n    }\n    return res\n}\n\nfunc findZero(_ xs: [Int]) -> Double {\n    var x1 = 1.0\n    var x2 = -1.0\n    while poly(xs, x1) * poly(xs, x2) > 0 {\n        x1 *= 2\n        x2 *= 2\n    }\n    while abs(x1 - x2) > 1e-10 {\n        let mid = (x1 + x2) / 2\n        if poly(xs, mid) == 0 {\n            return mid\n        } else if poly(xs, mid) * poly(xs, x1) < 0 {\n            x2 = mid\n        } else {\n            x1 = mid\n        }\n    }\n    return (x1 + x2) / 2\n}\n```",
            "```swift\nfunc sortThird(_ l: [Int]) -> [Int] {\n    let sortedThird = Array(l.enumerated().compactMap { $0.offset % 3 == 0 ? Optional($0.element) : nil }.sorted())\n    return l.indices.map { $0 % 3 == 0 ? sortedThird[$0 / 3] : l[$0] }\n}\n```",
            "```swift\nfunc listUnique(_ l: [Int]) -> [Int] {\n    return Array(Set(l)).sorted()\n}\n```",
            "```swift\nfunc maxElement(_ l: [Int]) -> Int {\n    if l.isEmpty {\n        return 0\n    }\n    return l.max()!\n}\n```",
            "```swift\nfunc fizzBuzz(_ n: Int) -> Int {\n    var cnt = 0\n    for i in 0..<n {\n        if i % 11 == 0 || i % 13 == 0 {\n            cnt += String(i).filter { $0 == \"7\" }.count\n        }\n    }\n    return cnt\n}\n```",
            "```swift\nfunc sortEven(_ l: [Int]) -> [Int] {\n    let sortedEven = Array(l.enumerated().compactMap { $0.offset % 2 == 0 ? $0.element : nil }.sorted())\n    return l.enumerated().map { i, element in i % 2 == 0 ? sortedEven[i / 2] : element }\n}\n```",
            "```swift\nfunc encodeCyclic(_ s: String) -> String {\n    var result = \"\"\n    let characters = Array(s)\n    \n    for i in stride(from: 0, to: characters.count, by: 3) {\n        if i + 3 > characters.count {\n            result += String(characters[i..<characters.count])\n        } else {\n            result += String([characters[i + 1], characters[i + 2], characters[i]])\n        }\n    }\n    \n    return result\n}\n\nfunc decodeCyclic(_ s: String) -> String {\n    return encodeCyclic(encodeCyclic(s))\n}\n```",
            "```swift\nfunc primeFib(_ n: Int) -> Int {\n    if n < 2 {\n        return 1\n    }\n    \n    func isPrime(_ num: Int) -> Bool {\n        if num < 2 {\n            return false\n        }\n        for i in 2...Int(sqrt(Double(num))) {\n            if num % i == 0 {\n                return false\n            }\n        }\n        return true\n    }\n    \n    var fib = [0, 1]\n    var count = 0\n    \n    while count < n {\n        let nextFib = fib[1] + fib[0]\n        fib = [fib[1], nextFib]\n        \n        if isPrime(nextFib) {\n            count += 1\n        }\n    }\n    \n    return fib[1]\n}\n```",
            "```swift\nfunc triplesSumToZero(_ l: [Int]) -> Bool {\n    for i in 0..<l.count {\n        for j in (i + 1)..<l.count {\n            for k in (j + 1)..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n```",
            "```swift\nfunc carRaceCollision(_ n: Int) -> Int {\n    return n * n\n}\n```",
            "```swift\nfunc incrList(_ l: [Int]) -> [Int] {\n    return l.map { $0 + 1 }\n}\n```",
            "```swift\nfunc pairsSumToZero(_ l: [Int]) -> Bool {\n    var seen = Set<Int>()\n    for num in l {\n        if seen.contains(-num) {\n            return true\n        }\n        seen.insert(num)\n    }\n    return false\n}\n```",
            "```swift\nfunc changeBase(_ x: Int, _ bas: Int) -> String {\n    if x == 0 {\n        return \"0\"\n    }\n    var digits = [String]()\n    var number = x\n    while number > 0 {\n        digits.append(String(number % bas))\n        number /= bas\n    }\n    return digits.reversed().joined()\n}\n```",
            "```swift\nfunc triangleArea(_ a: Int, _ h: Int) -> Double {\n    return Double(a * h) / 2.0\n}\n```",
            "```swift\nfunc fib4(_ n: Int) -> Int {\n    var fib = [0, 0, 2, 0]\n    for i in 4...n + 1 {\n        fib[i % 4] = fib.reduce(0, +)\n    }\n    return fib[n % 4]\n}\n```",
            "```swift\nfunc median(_ l: [Double]) -> Double {\n    let sortedList = l.sorted()\n    let count = sortedList.count\n    if count % 2 != 0 {\n        return sortedList[count / 2]\n    } else {\n        return (sortedList[count / 2] + sortedList[count / 2 - 1]) / 2.0\n    }\n}\n```",
            "```swift\nfunc isPalindrome(_ txt: String) -> Bool {\n    return txt == String(txt.reversed())\n}\n```",
            "```swift\nfunc modp(_ n: Int, _ p: Int) -> Int {\n    var ret = 1\n    for _ in 0..<n {\n        ret = (ret * 2) % p\n    }\n    return ret\n}\n```",
            "```swift\nfunc encodeShift(_ s: String) -> String {\n    var result = \"\"\n    for ch in s {\n        if let asciiValue = ch.asciiValue {\n            let shiftedValue = (Int(asciiValue - 97 + 5) % 26) + 97\n            result.append(Character(UnicodeScalar(shiftedValue)!))\n        }\n    }\n    return result\n}\n\nfunc decodeShift(_ s: String) -> String {\n    var result = \"\"\n    for ch in s {\n        if let asciiValue = ch.asciiValue {\n            let shiftedValue = (Int(asciiValue - 97 + 21) % 26) + 97\n            result.append(Character(UnicodeScalar(shiftedValue)!))\n        }\n    }\n    return result\n}\n```",
            "```swift\nfunc removeVowels(_ txt: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    \n    for char in txt {\n        if !vowels.contains(char) {\n            result.append(char)\n        }\n    }\n    \n    return result\n}\n```",
            "```swift\nfunc belowThreshold(_ l: [Int], _ t: Int) -> Bool {\n    for x in l {\n        if x >= t {\n            return false\n        }\n    }\n    return true\n}\n```",
            "```swift\nfunc add(_ x: Int, _ y: Int) -> Int {\n    return x + y\n}\n```",
            "```swift\nfunc sameChars(_ s0: String, _ s1: String) -> Bool {\n    return Set(s0) == Set(s1)\n}\n```",
            "```swift\nfunc fib(_ n: Int) -> Int {\n    if n <= 1 {\n        return n\n    } else {\n        return fib(n - 1) + fib(n - 2)\n    }\n}\n```",
            "```swift\nfunc correctBracketing(_ brackets: String) -> Bool {\n    var depth = 0\n    for char in brackets {\n        if char == \"<\" {\n            depth += 1\n        } else if char == \">\" {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n```",
            "```swift\nfunc monotonic(_ l: [Int]) -> Bool {\n    let diff = zip(l, l.dropFirst()).map { $1 - $0 }\n    return diff.allSatisfy { $0 <= 0 } || diff.allSatisfy { $0 >= 0 }\n}\n```",
            "```swift\nfunc common(_ l1: [Int], _ l2: [Int]) -> [Int] {\n    let set1 = Set(l1)\n    let set2 = Set(l2)\n    let intersection = set1.intersection(set2)\n    return Array(intersection).sorted()\n}\n```",
            "```swift\nfunc largestPrimeFactor(_ n: Int) -> Int {\n    var i = 2\n    while i * i <= n {\n        if n % i != 0 {\n            i += 1\n        } else {\n            n /= i\n        }\n    }\n    return n\n}\n```",
            "```swift\nfunc sumToN(_ n: Int) -> Int {\n    return (0...n).reduce(0, +)\n}\n```",
            "```swift\nfunc correctBracketing(_ brackets: String) -> Bool {\n    var depth = 0\n    for char in brackets {\n        if char == \"(\" {\n            depth += 1\n        } else if char == \")\" {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\n```",
            "```swift\nfunc derivative(_ xs: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(xs[i] * i)\n    }\n    return result\n}\n```",
            "```swift\nfunc fibfib(_ n: Int) -> Int {\n    if n <= 1 {\n        return 0 \n    }\n    var a = 0, b = 0, c = 1\n    while n > 2 {\n        let tempA = a\n        a = b\n        b = c\n        c = tempA + b + c\n        n -= 1\n    }\n    return c\n}\n```",
            "```swift\nfunc vowelsCount(_ s: String) -> Int {\n    let vowels = \"aeiou\"\n    var cnt = 0\n    for (i, char) in s.enumerated() {\n        if vowels.contains(char.lowercased()) || (i == s.count - 1 && char.lowercased() == \"y\") {\n            cnt += 1\n        }\n    }\n    return cnt\n}\n```",
            "```swift\nfunc circularShift(_ x: Int, _ shift: Int) -> String {\n    let x_str = String(x)\n    if shift > x_str.count {\n        return String(x_str.reversed())\n    } else {\n        let index = x_str.index(x_str.endIndex, offsetBy: -shift)\n        return String(x_str.suffix(from: index)) + String(x_str.prefix(upTo: index))\n    }\n}\n```",
            "```swift\nfunc digitSum(_ s: String) -> Int {\n    var sum = 0\n    for c in s {\n        if c.isUppercase {\n            sum += Int(c.asciiValue ?? 0)\n        }\n    }\n    return sum\n}\n```",
            "```swift\nfunc fruitDistribution(_ s: String, _ n: Int) -> Int {\n    let words = s.split(separator: \" \")\n    if let applesIndex = words.firstIndex(of: \"apples\"), let orangesIndex = words.firstIndex(of: \"oranges\") {\n        let apples = Int(words[applesIndex - 1]) ?? 0\n        let oranges = Int(words[orangesIndex - 1]) ?? 0\n        return n - apples - oranges\n    }\n    return n\n}\n```",
            "```swift\nfunc pluck(_ arr: [Int]) -> [Int] {\n    let evens = arr.filter { $0 % 2 == 0 }\n    \n    if evens.isEmpty {\n        return []\n    }\n    \n    let minEven = evens.min()!\n    guard let index = arr.firstIndex(of: minEven) else {\n        return []\n    }\n    \n    return [minEven, index]\n}\n```",
            "```swift\nfunc search(_ lst: [Int]) -> Int {\n    var freqs = [Int: Int]()\n    for n in lst {\n        if let count = freqs[n] {\n            freqs[n] = count + 1\n        } else {\n            freqs[n] = 1\n        }\n    }\n    var goodVals = [Int]()\n    for (k, v) in freqs {\n        if v >= k {\n            goodVals.append(k)\n        }\n    }\n    return !goodVals.isEmpty ? goodVals.max()! : -1\n}\n```",
            "```swift\nfunc strangeSortList(_ lst: [Int]) -> [Int] {\n    var sl = lst.sorted()\n    var result: [Int] = []\n    var left = 0\n    var right = sl.count - 1\n    while left <= right {\n        result.append(sl[left])\n        left += 1\n        if left <= right {\n            result.append(sl[right])\n            right -= 1\n        }\n    }\n    return result\n}\n```",
            "```swift\nfunc triangleArea(_ a: Int, _ b: Int, _ c: Int) -> Double {\n    if a + b > c && a + c > b && b + c > a {\n        let s = Double(a + b + c) / 2.0\n        return sqrt(s * (s - Double(a)) * (s - Double(b)) * (s - Double(c)))\n    } else {\n        return -1.0\n    }\n}\n```",
            "```swift\nfunc willItFly(_ q: [Int], _ w: Int) -> Bool {\n    if q.isEmpty {\n        return false\n    }\n    var is_palin = true\n    for i in 0..<q.count {\n        if q[i] != q[q.count - i - 1] {\n            is_palin = false\n            break\n        }\n    }\n    let total = q.reduce(0, +)\n    return is_palin && total <= w\n}\n```",
            "```swift\nfunc smallestChange(_ arr: [Int]) -> Int {\n    var ans = 0\n    for i in 0..<arr.count / 2 {\n        if arr[i] != arr[arr.count - i - 1] {\n            ans += 1\n        }\n    }\n    return ans\n}\n```",
            "```swift\nfunc totalMatch(_ lst1: [String], _ lst2: [String]) -> [String] {\n    let cnt1 = lst1.reduce(0) { $0 + $1.count }\n    let cnt2 = lst2.reduce(0) { $0 + $1.count }\n    \n    return cnt1 <= cnt2 ? lst1 : lst2\n}\n```",
            "```swift\nfunc is_prime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc isMultiplyPrime(_ a: Int) -> Bool {\n    var cnt = 0\n    var number = a\n    for i in 2...number {\n        if is_prime(i) {\n            while number % i == 0 {\n                cnt += 1\n                number /= i\n            }\n        }\n    }\n    return cnt == 3\n}\n```",
            "```swift\nfunc isSimplePower(_ x: Int, _ n: Int) -> Bool {\n    if n < 2 {\n        return x == n\n    }\n    var tmp = 1\n    while tmp < x {\n        tmp *= n\n    }\n    return tmp == x\n}\n```",
            "```swift\nfunc isCube(_ a: Int) -> Bool {\n    let absA = abs(a)\n    let root = Int(round(pow(Double(absA), 1.0 / 3.0)))\n    return root * root * root == absA\n}\n```",
            "```swift\nfunc hexKey(_ num: String) -> Int {\n    let validChars = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    return num.filter { validChars.contains(String($0)) }.count\n}\n```",
            "```swift\nfunc decimalToBinary(_ dec: Int) -> String {\n    let binary = String(dec, radix: 2)\n    return \"db\\(binary)db\"\n}\n```",
            "```swift\nfunc isHappy(_ s: String) -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0...s.count - 3 {\n        let index1 = s.index(s.startIndex, offsetBy: i)\n        let index2 = s.index(s.startIndex, offsetBy: i + 1)\n        let index3 = s.index(s.startIndex, offsetBy: i + 2)\n        \n        if s[index1] == s[index2] || s[index1] == s[index3] || s[index2] == s[index3] {\n            return false\n        }\n    }\n    return true\n}\n```",
            "```swift\nfunc numericalLetterGrade(_ grades: [Double]) -> [String] {\n    var result = [String]()\n    for g in grades {\n        if g == 4.0 {\n            result.append(\"A+\")\n        } else if g > 3.7 {\n            result.append(\"A\")\n        } else if g > 3.3 {\n            result.append(\"A-\")\n        } else if g > 3.0 {\n            result.append(\"B+\")\n        } else if g > 2.7 {\n            result.append(\"B\")\n        } else if g > 2.3 {\n            result.append(\"B-\")\n        } else if g > 2.0 {\n            result.append(\"C+\")\n        } else if g > 1.7 {\n            result.append(\"C\")\n        } else if g > 1.3 {\n            result.append(\"C-\")\n        } else if g > 1.0 {\n            result.append(\"D+\")\n        } else if g > 0.7 {\n            result.append(\"D\")\n        } else if g > 0.0 {\n            result.append(\"D-\")\n        } else {\n            result.append(\"E\")\n        }\n    }\n    return result\n}\n```",
            "```swift\nfunc primeLength(_ s: String) -> Bool {\n    let length = s.count\n    if length < 2 {\n        return false\n    }\n    for i in 2...Int(sqrt(Double(length))) {\n        if length % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n```",
            "```swift\nfunc startsOneEnds(_ n: Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    return 2 * 9 * Int(pow(10.0, Double(n - 2)))\n}\n```",
            "```swift\nfunc solve(_ n: Int) -> String {\n    let digitsSum = String(n).compactMap { $0.wholeNumberValue }.reduce(0, +)\n    return String(digitsSum, radix: 2)\n}\n```",
            "```swift\nfunc add(_ lst: [Int]) -> Int {\n    var sum = 0\n    for (i, x) in lst.enumerated() {\n        if i % 2 == 1 && x % 2 == 0 {\n            sum += x\n        }\n    }\n    return sum\n}\n```",
            "```swift\nfunc antiShuffle(_ s: String) -> String {\n    let words = s.split(separator: \" \")\n    let sortedWords = words.map { word in\n        var chars = Array(word)\n        chars.sort()\n        return String(chars)\n    }\n    return sortedWords.joined(separator: \" \")\n}\n```",
            "```swift\nfunc getRow(_ lst: [[Int]], _ x: Int) -> [[Int]] {\n    var coords = [[Int]]()\n    for i in 0..<lst.count {\n        for j in 0..<lst[i].count {\n            if lst[i][j] == x {\n                coords.append([i, j])\n            }\n        }\n    }\n    coords.sort { a, b -> Bool in\n        if a[0] == b[0] {\n            return a[1] > b[1]\n        }\n        return a[0] < b[0]\n    }\n    return coords\n}\n```",
            "```swift\nfunc sortArray(_ arr: [Int]) -> [Int] {\n    if arr.isEmpty {\n        return []\n    }\n    if (arr.first! + arr.last!) % 2 == 0 {\n        return arr.sorted(by: >)\n    } else {\n        return arr.sorted()\n    }\n}\n```",
            "```swift\nfunc encrypt(_ s: String) -> String {\n    var result = \"\"\n    for ch in s {\n        let shifted = UInt8(ch.asciiValue! &+ 4)\n        if shifted > 122 {\n            result.append(Character(UnicodeScalar(shifted - 26)!))\n        } else {\n            result.append(Character(UnicodeScalar(shifted)!))\n        }\n    }\n    return result\n}\n```",
            "```swift\nfunc nextSmallest(_ lst: [Int]) -> Int? {\n    let sl = Array(Set(lst))\n    let sortedSl = sl.sorted()\n    if sortedSl.count < 2 {\n        return nil\n    }\n    return sortedSl[1]\n}\n```",
            "```swift\nfunc isBored(_ s: String) -> Int {\n    let sentences = s.split { \", .!?\".contains($0) }\n    var count = 0\n    for sentence in sentences {\n        if sentence.count >= 2 && String(sentence.prefix(2)) == \"I \" {\n            count += 1\n        }\n    }\n    return count\n}\n```",
            "```swift\nfunc anyInt(_ x: Any, _ y: Any, _ z: Any) -> Bool {\n    if let intX = x as? Int, let intY = y as? Int, let intZ = z as? Int {\n        if (intX + intY == intZ) || (intX + intZ == intY) || (intY + intZ == intX) {\n            return true\n        }\n    }\n    return false\n}\n```",
            "```swift\nfunc encode(_ message: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    var result = [Character]()\n    \n    for ch in message {\n        if ch.isLetter {\n            let ch1 = ch.isLowercase ? ch.uppercased() : ch.lowercased()\n            if vowels.contains(ch1) {\n                let newChar = UnicodeScalar(ch1.unicodeScalars.first!.value + 2)!\n                result.append(Character(newChar))\n            } else {\n                result.append(ch1)\n            }\n        } else {\n            result.append(ch)\n        }\n    }\n    \n    return String(result)\n}\n```",
            "```swift\nfunc skjkasdkd(_ lst: [Int]) -> Int {\n    func is_prime(_ n: Int) -> Bool {\n        if n < 2 {\n            return false\n        }\n        for i in 2...Int(sqrt(Double(n))) {\n            if n % i == 0 {\n                return false\n            }\n        }\n        return true\n    }\n    \n    let primes = lst.filter { is_prime($0) }\n    guard let largest = primes.max() else {\n        return 0\n    }\n    let largestStr = String(largest)\n    return largestStr.reduce(0) { $0 + Int(String($1))! }\n}\n```",
            "```swift\nfunc checkDictCase(_ d: [String:String]) -> Bool {\n    if d.isEmpty {\n        return false\n    }\n    var allLower = true\n    var allUpper = true\n    for key in d.keys {\n        if !key.allSatisfy { $0.isLowercase } {\n            allLower = false\n        }\n        if !key.allSatisfy { $0.isUppercase } {\n            allUpper = false\n        }\n    }\n    return allLower || allUpper\n}\n```",
            "```swift\nfunc countUpTo(_ n: Int) -> [Int] {\n    var primes = [Int]()\n    for num in 2..<n {\n        var isPrime = true\n        for p in primes {\n            if num % p == 0 {\n                isPrime = false\n                break\n            }\n        }\n        if isPrime {\n            primes.append(num)\n        }\n    }\n    return primes\n}\n```",
            "```swift\nfunc multiply(_ a: Int, _ b: Int) -> Int {\n    return (abs(a) % 10) * (abs(b) % 10)\n}\n```",
            "```swift\nfunc countUpper(_ s: String) -> Int {\n    let vowels = \"AEIOU\"\n    var count = 0\n    for i in stride(from: 0, to: s.count, by: 1) {\n        if i % 2 == 0 && vowels.contains(s[s.index(s.startIndex, offsetBy: i)]) {\n            count += 1\n        }\n    }\n    return count\n}\n```",
            "```swift\nfunc closestInteger(_ value: String) -> Int {\n    if let num = Double(value) {\n        return num >= 0 ? Int(num + 0.5) : Int(num - 0.5)\n    }\n    return 0\n}\n```",
            "```swift\nfunc makeAPile(_ n: Int) -> [Int] {\n    var pile = [Int]()\n    for i in 0..<n {\n        pile.append(n + 2 * i)\n    }\n    return pile\n}\n```",
            "```swift\nfunc wordsString(_ s: String) -> [String] {\n    return s.split(separator: CharacterSet(charactersIn: \", \"))\n               .compactMap { String($0).trimmingCharacters(in: .whitespacesAndNewlines) }\n}\n```",
            "```swift\nfunc chooseNum(_ x: Int, _ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return x != y ? y - 1 : -1\n}\n```",
            "```swift\nfunc roundedAvg(_ n: Int, _ m: Int) -> String? {\n    if n > m {\n        return nil\n    }\n    let r_avg = (m + n) / 2 + (n % 2 != 0 && m % 2 != 0 ? 1 : 0)\n    return String(r_avg, radix: 2)\n}\n```",
            "```swift\nfunc allDigitsOdd(_ s: String) -> Bool {\n    return s.allSatisfy { Int(String($0))?.isMultiple(of: 2) == false }\n}\n\nfunc uniqueDigits(_ x: [Int]) -> [Int] {\n    return x.filter { allDigitsOdd(String($0)) }.sorted()\n}\n```",
            "```swift\nfunc byLength(_ arr: [Int]) -> [String] {\n    let digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    let sortedArr = arr.filter { 1 <= $0 && $0 <= 9 }.sorted(by: >)\n    let result = sortedArr.map { digitNames[$0 - 1] }\n    return result\n}\n```",
            "```swift\nfunc f(_ n: Int) -> [Int] {\n    let nums = Array(1...n)\n    var result: [Int] = []\n    for (i, value) in nums.enumerated() {\n        if (i + 1) % 2 != 0 {\n            result.append(nums.prefix(i + 1).reduce(0, +))\n        } else {\n            let product = nums.prefix(i + 1).reduce(1, *)\n            result.append(product)\n        }\n    }\n    return result\n}\n```",
            "```swift\nfunc evenOddPalindrome(_ n: Int) -> [Int] {\n    var cnt = [0, 0]\n    for i in 1...n {\n        let strI = String(i)\n        if String(strI.reversed()) == strI {\n            cnt[i % 2] += 1\n        }\n    }\n    return cnt\n}\n```",
            "```swift\nfunc digitsSum(_ n: Int) -> Int {\n    let nStr = String(n)\n    if n >= 0 {\n        return nStr.compactMap { $0.wholeNumberValue }.reduce(0, +)\n    } else {\n        let firstTwoDigits = Int(String(nStr.prefix(2))) ?? 0\n        return firstTwoDigits * 2 + digitsSum(abs(n))\n    }\n}\n\nfunc countNums(_ arr: [Int]) -> Int {\n    return arr.filter { digitsSum($0) > 0 }.count\n}\n```",
            "```swift\nfunc moveOneBall(_ arr: [Int]) -> Bool {\n    if arr.count == 0 {\n        return true\n    }\n    let sortedArr = arr.sorted()\n    for i in 0..<arr.count {\n        if Array(arr[i...]) == Array(sortedArr.prefix(arr.count - i)) && Array(arr.prefix(i)) == Array(sortedArr.suffix(arr.count - i)) {\n            return true\n        }\n    }\n    return false\n}\n```",
            "```swift\nfunc canExchange(_ lst1: [Int], _ lst2: [Int]) -> String {\n    let oddCount = lst1.filter { $0 % 2 != 0 }.count\n    let evenCount = lst2.filter { $0 % 2 == 0 }.count\n    \n    return evenCount >= oddCount ? \"YES\" : \"NO\"\n}\n```",
            "```swift\nfunc histogram(_ test: String) -> [String: Int] {\n    var freq = [String: Int]()\n    let words = test.split(separator: \" \").compactMap { $0.isEmpty ? nil : String($0) }\n    \n    for word in words {\n        if freq[word] == nil {\n            freq[word] = 0\n        }\n        freq[word]! += 1\n    }\n    \n    var result = [String: Int]()\n    if !freq.isEmpty {\n        let maxFreq = freq.values.max()!\n        for (key, value) in freq {\n            if value == maxFreq {\n                result[key] = value\n            }\n        }\n    }\n    \n    return result\n}\n```",
            "```swift\nfunc reverseDelete(_ s: String, _ c: String) -> [String] {\n    let filteredString = s.filter { !c.contains($0) }\n    return [filteredString, isPalindrome(filteredString) ? \"yes\" : \"no\"]\n}\n\nfunc isPalindrome(_ s: String) -> Bool {\n    return s == String(s.reversed())\n}\n```",
            "```swift\nfunc oddCount(_ lst: [String]) -> [String] {\n    var result: [String] = []\n    for num in lst {\n        var n = 0\n        for char in num {\n            if Int(char.asciiValue ?? 0) % 2 == 1 {\n                n += 1\n            }\n        }\n        let rs = \"the number of odd elements in the string i of the input.\"\n        result.append(rs.replacingOccurrences(of: \"i\", with: String(n)))\n    }\n    return result\n}\n```",
            "```swift\nfunc minSubArraySum(_ nums: [Int]) -> Int {\n    var minSum = 0\n    var curSum = 0\n    for n in nums {\n        curSum = min(curSum + n, 0)\n        minSum = min(curSum, minSum)\n    }\n    if minSum == 0 {\n        minSum = nums.min() ?? 0\n    }\n    return minSum\n}\n```",
            "```swift\nfunc maxFill(_ grid: [[Int]], _ capacity: Int) -> Int {\n    var total = 0\n    for arr in grid {\n        total += Int(ceil(Double(arr.reduce(0, +)) / Double(capacity)))\n    }\n    return total\n}\n```",
            "```swift\nfunc sortArray(_ arr: [Int]) -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let countA = String(a, radix: 2).filter { $0 == \"1\" }.count\n        let countB = String(b, radix: 2).filter { $0 == \"1\" }.count\n        if countA == countB {\n            return a < b\n        }\n        return countA < countB\n    }\n}\n```",
            "```swift\nfunc selectWords(_ s: String, _ n: Int) -> [String] {\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    let words = s.split(separator: \" \").filter { $0.count > 0 }.map { String($0) }\n    return words.filter { word in\n        let count = word.lowercased().filter { consonants.contains($0) }.count\n        return count == n\n    }\n}\n```",
            "```swift\nfunc getClosestVowel(_ word: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    for i in stride(from: word.count - 2, through: 1, by: -1) {\n        let charIndex = word.index(word.startIndex, offsetBy: i)\n        let prevCharIndex = word.index(charIndex, offsetBy: -1)\n        let nextCharIndex = word.index(charIndex, offsetBy: 1)\n        \n        if vowels.contains(word[charIndex]) && !vowels.contains(word[prevCharIndex]) && !vowels.contains(word[nextCharIndex]) {\n            return String(word[charIndex])\n        }\n    }\n    return \"\"\n}\n```",
            "```swift\nfunc matchParens(_ lst: [String]) -> String {\n    func check(_ s: String) -> Bool {\n        var depth = 0\n        for ch in s {\n            if ch == \"(\" {\n                depth += 1\n            } else {\n                depth -= 1\n            }\n            if depth < 0 {\n                return false\n            }\n        }\n        return depth == 0\n    }\n\n    let s1 = lst[0] + lst[1]\n    let s2 = lst[1] + lst[0]\n    return check(s1) || check(s2) ? \"Yes\" : \"No\"\n}\n```",
            "```swift\nfunc maximum(_ arr: [Int], _ k: Int) -> [Int] {\n    if k == 0 {\n        return []\n    }\n    return arr.sorted().suffix(k).sorted()\n}\n```",
            "```swift\nfunc solution(_ lst: [Int]) -> Int {\n    var sum = 0\n    for (i, x) in lst.enumerated() {\n        if i % 2 == 0 && x % 2 != 0 {\n            sum += x\n        }\n    }\n    return sum\n}\n```",
            "```swift\nfunc addElements(_ arr: [Int], _ k: Int) -> Int {\n    var sum = 0\n    for i in 0..<min(k, arr.count) {\n        if String(arr[i]).count <= 2 {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n```",
            "```swift\nfunc getOddCollatz(_ n: Int) -> [Int] {\n    var collatz = [1]\n    var number = n\n    while number != 1 {\n        if number % 2 != 0 {\n            collatz.append(number)\n            number = 3 * number + 1\n        } else {\n            number /= 2\n        }\n    }\n    return collatz.sorted()\n}\n```",
            "```swift\nfunc validDate(_ date: String) -> Bool {\n    if date.count != 10 || date[2] != \"-\" || date[5] != \"-\" {\n        return false\n    }\n    let m = Int(date.prefix(2)) ?? 0\n    let d = Int(String(date.dropFirst(3).prefix(2))) ?? 0\n    if [1, 3, 5, 7, 8, 10, 12].contains(m) && d >= 1 && d <= 31 {\n        return true\n    }\n    if [4, 6, 9, 11].contains(m) && d >= 1 && d <= 30 {\n        return true\n    }\n    if m == 2 && d >= 1 && d <= 29 {\n        return true\n    }\n    return false\n}\n```",
            "```swift\nfunc splitWords(_ txt: String) -> [String] {\n    if txt.contains(\" \") {\n        return txt.split(separator: \" \").map { String($0) }\n    } else if txt.contains(\",\") {\n        return txt.split(separator: \",\").map { String($0) }\n    } else {\n        var count = 0\n        for c in txt {\n            if c.isLowercase && Int(c.asciiValue ?? 0) % 2 == 0 {\n                count += 1\n            }\n        }\n        return [String(count)]\n    }\n}\n```",
            "```swift\nfunc isSorted(_ lst: [Int]) -> Bool {\n    if lst.isEmpty {\n        return true\n    }\n\n    for i in 1..<lst.count {\n        if lst[i - 1] > lst[i] {\n            return false\n        }\n    }\n\n    var freq = [Int: Int]()\n    for num in lst {\n        freq[num, default: 0] += 1\n    }\n    for count in freq.values {\n        if count > 2 {\n            return false\n        }\n    }\n\n    return true\n}\n```",
            "```swift\nfunc intersection(_ interval1: [Int], _ interval2: [Int]) -> String {\n    let l = max(interval1[0], interval2[0])\n    let r = min(interval1[1], interval2[1])\n    let length = r - l\n    return is_prime(length) ? \"YES\" : \"NO\"\n}\n\nfunc is_prime(_ n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n```",
            "```swift\nfunc prodSigns(_ arr: [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n    if arr.contains(0) {\n        return 0\n    }\n    let negCount = arr.filter { $0 < 0 }.count\n    let sign = (negCount % 2 == 1) ? -1 : 1\n    return sign * arr.map(abs).reduce(0, +)\n}\n```",
            "```swift\nfunc minPath(_ grid: [[Int]], _ k: Int) -> [Int] {\n    let n = grid.count\n    var min_val = n * n + 1\n    for i in 0..<n {\n        for j in 0..<n {\n            if grid[i][j] == 1 {\n                var temp: [Int] = []\n                if i != 0 {\n                    temp.append(grid[i - 1][j])\n                }\n                if j != 0 {\n                    temp.append(grid[i][j - 1])\n                }\n                if i != n - 1 {\n                    temp.append(grid[i + 1][j])\n                }\n                if j != n - 1 {\n                    temp.append(grid[i][j + 1])\n                }\n                min_val = temp.min() ?? Int.max\n            }\n        }\n    }\n    var result: [Int] = []\n    for i in 0..<k {\n        result.append((i % 2 == 0) ? 1 : min_val)\n    }\n    return result\n}\n```",
            "```swift\nfunc tri(_ n: Int) -> [Int] {\n    if n == 0 {\n        return [1]\n    }\n    var seq = [1, 3]\n    for i in 2...n {\n        if i % 2 == 0 {\n            seq.append(i / 2 + 1)\n        } else {\n            seq.append(seq[i - 1] + seq[i - 2] + (i + 3) / 2)\n        }\n    }\n    return.seq\n}\n```",
            "```swift\nfunc digits(_ n: Int) -> Int {\n    let oddDigits = String(n).compactMap { $0.wholeNumberValue }.filter { $0 % 2 == 1 }\n    if !oddDigits.isEmpty {\n        return oddDigits.reduce(1, *)\n    } else {\n        return 0\n    }\n}\n```",
            "```swift\nfunc isNested(_ s: String) -> Bool {\n    var openIdx = [Int]()\n    var closeIdx = [Int]()\n    \n    for (i, char) in s.enumerated() {\n        if char == \"[\" {\n            openIdx.append(i)\n        } else if char == \"]\" {\n            closeIdx.append(i)\n        }\n    }\n    \n    closeIdx.reverse()\n    var cnt = 0\n    var i = 0\n    let l = closeIdx.count\n    \n    for idx in openIdx {\n        if i < l && idx < closeIdx[i] {\n            cnt += 1\n            i += 1\n        }\n    }\n    \n    return cnt >= 2\n}\n```",
            "```swift\nfunc sumSquares(_ lst: [Double]) -> Int {\n    return lst.map { Int(pow(ceil($0), 2)) }.reduce(0, +)\n}\n```",
            "```swift\nfunc checkIfLastCharIsALetter(_ txt: String) -> Bool {\n    if txt.isEmpty {\n        return false\n    }\n    let last = txt.components(separatedBy: \" \").last ?? \"\"\n    return last.count == 1 && last.last?.isLetter == true\n}\n```",
            "```swift\nfunc canArrange(_ arr: [Int]) -> Int {\n    if arr.count <= 1 {\n        return -1\n    }\n    var idx = [Int]()\n    for i in 1..<arr.count {\n        if arr[i] < arr[i - 1] {\n            idx.append(i)\n        }\n    }\n    return !idx.isEmpty ? idx.max() ?? -1 : -1\n}\n```",
            "```swift\nfunc largestSmallestIntegers(_ lst: [Int]) -> [Int?] {\n    let neg = lst.filter { $0 < 0 }\n    let pos = lst.filter { $0 > 0 }\n    let max_neg = neg.isEmpty ? nil : neg.max()\n    let min_pos = pos.isEmpty ? nil : pos.min()\n    return [max_neg, min_pos]\n}\n```",
            "```swift\nfunc compareOne(_ a: Any, _ b: Any) -> Double? {\n    func anyToReal(_ o: Any) -> Double {\n        if let str = o as? String {\n            return Double(str.replacingOccurrences(of: \",\", with: \".\")) ?? 0.0\n        } else if let intVal = o as? Int {\n            return Double(intVal)\n        } else if let floatVal = o as? Double {\n            return floatVal\n        }\n        fatalError(\"Type Error\")\n    }\n    \n    let a1 = anyToReal(a)\n    let b1 = anyToReal(b)\n    if a1 == b1 {\n        return nil\n    } else if a1 > b1 {\n        return a1\n    } else {\n        return b1\n    }\n}\n```",
            "```swift\nfunc isEqualToSumEven(_ n: Int) -> Bool {\n    return n % 2 == 0 && n >= 8\n}\n```",
            "```swift\nfunc specialFactorial(_ n: Int) -> Int {\n    var fact = 1\n    var result = 1\n    for i in 1...n {\n        fact *= i\n        result *= fact\n    }\n    return result\n}\n```",
            "```swift\nfunc fixSpaces(_ txt: String) -> String {\n    return txt.replacingOccurrences(of: \"\\\\s{3,}\", with: \"-\", options: .regularExpression).replacingOccurrences(of: \" \", with: \"_\")\n}\n```",
            "```swift\nfunc fileNameCheck(_ fileName: String) -> String {\n    let suf = [\"txt\", \"exe\", \"dll\"]\n    let lst = fileName.split(separator: \".\")\n    if lst.count != 2 || !suf.contains(String(lst[1])) || lst[0].isEmpty || !lst[0].first!.isLetter || lst[0].filter { $0.isNumber }.count > 3 {\n        return \"No\"\n    }\n    return \"Yes\"\n}\n```",
            "```swift\nfunc sumSquares(_ lst: [Int]) -> Int {\n    var result = 0\n    for i in 0..<lst.count {\n        if i % 3 == 0 {\n            result += Int(pow(Double(lst[i]), 2))\n        } else if i % 4 == 0 {\n            result += Int(pow(Double(lst[i]), 3))\n        } else {\n            result += lst[i]\n        }\n    }\n    return result\n}\n```",
            "```swift\nfunc wordsInSentence(_ sentence: String) -> String {\n    let words = sentence.split(separator: \" \")\n    let primeWords = words.filter { word in\n        let length = word.count\n        if length < 2 {\n            return false\n        }\n        for i in 2...Int(sqrt(Double(length))) {\n            if length % i == 0 {\n                return false\n            }\n        }\n        return true\n    }\n    return primeWords.map { String($0) }.joined(separator: \" \")\n}\n```",
            "```swift\nfunc simplify(_ x: String, _ n: String) -> Bool {\n    let xs = x.split(separator: \"/\").map { String($0) }\n    let ns = n.split(separator: \"/\").map { String($0) }\n    guard let num = Int(xs[0]), let den = Int(ns[0]) else { return false }\n    return num * den % (Int(xs[1]) ?? 1) == 0\n}\n```",
            "```swift\nfunc orderByPoints(_ nums: [Int]) -> [Int] {\n    return nums.sorted { digitsSum($0) < digitsSum($1) }\n}\n\nfunc digitsSum(_ n: Int) -> Int {\n    let nStr = String(abs(n))\n    return n >= 0 ? nStr.reduce(0, {$0 + Int(String($1)) ?? 0}) : (Int(String(nStr.prefix(2)))! * 2) + digitsSum(abs(n))\n}\n```",
            "```swift\nfunc specialFilter(_ nums: [Int]) -> Int {\n    let odds = \"13579\"\n    var count = 0\n    for n in nums {\n        if n > 10 && n % 2 == 1 && odds.contains(String(n).first!) {\n            count += 1\n        }\n    }\n    return count\n}\n```",
            "```swift\nfunc getMaxTriples(_ n: Int) -> Int {\n    var c = [0, 0, 0]\n    for i in 1...n {\n        let a = i * i - i + 1\n        c[a % 3] += 1\n    }\n    let productSum = c[0] * c[1] * c[2]\n    let combinationSum = (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\n    return productSum + combinationSum\n}\n```",
            "```swift\nfunc bf(_ planet1: String, _ planet2: String) -> [String] {\n    let names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    guard let l = names.firstIndex(of: planet1), let r = names.firstIndex(of: planet2) else {\n        return []\n    }\n    if l > r {\n        let temp = l\n        l = r\n        r = temp\n    }\n    if l == r {\n        return []\n    }\n    return Array(names[(l + 1)...(r - 1)])\n}\n```",
            "```swift\nfunc sortedListSum(_ lst: [String]) -> [String] {\n    let filtered = lst.filter { $0.count % 2 == 0 }\n    \n    return filtered.sorted {\n        if $0.count != $1.count {\n            return $0.count < $1.count\n        }\n        return $0 < $1\n    }\n}\n```",
            "```swift\nfunc xOrY(_ n: Int, _ x: Int, _ y: Int) -> Int {\n    if n < 2 {\n        return y\n    }\n    for i in 2...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n            return y\n        }\n    }\n    return x\n}\n```",
            "```swift\nfunc doubleTheDifference(_ lst: [Double]) -> Int {\n    var sum = 0\n    for n in lst {\n        if n >= 0 && n.truncatingRemainder(dividingBy: 2) == 1 {\n            sum += Int(n * n)\n        }\n    }\n    return sum\n}\n```",
            "```swift\nfunc compare(_ game: [Int], _ guess: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<game.count {\n        result.append(abs(game[i] - guess[i]))\n    }\n    return result\n}\n```",
            "```swift\nfunc strongestExtension(_ className: String, _ extensions: [String]) -> String {\n    var max_s = Int.min\n    var max_ext = \"\"\n    \n    for ext in extensions {\n        let upper = ext.filter { $0.isUppercase }.count\n        let lower = ext.filter { $0.isLowercase }.count\n        let s = upper - lower\n        \n        if s > max_s {\n            max_s = s\n            max_ext = ext\n        }\n    }\n    \n    return \"\\(className).\\(max_ext)\"\n}\n```",
            "```swift\nfunc cycpatternCheck(_ a: String, _ b: String) -> Bool {\n    if a.count < b.count {\n        return false\n    }\n    for i in 0..<b.count {\n        let rotated = String(b.dropFirst(i) + b.prefix(i))\n        if a.contains(rotated) {\n            return true\n        }\n    }\n    return false\n}\n```",
            "```swift\nfunc evenOddCount(_ num: Int) -> [Int] {\n    let ds = String(abs(num))\n    var even = 0\n    \n    for digit in ds {\n        if (digit.wholeNumberValue ?? -1) % 2 == 0 {\n            even += 1\n        }\n    }\n    \n    return [even, ds.count - even]\n}\n```",
            "```swift\nfunc intToMiniRoman(_ num: Int) -> String {\n    let values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    let numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    var res: [String] = []\n    for i in 0..<values.count {\n        while num >= values[i] {\n            res.append(numerals[i])\n            num -= values[i]\n        }\n    }\n    return res.joined()\n}\n```",
            "```swift\nfunc rightAngleTriangle(_ a: Int, _ b: Int, _ c: Int) -> Bool {\n    var s = [a, b, c]\n    s.sort()\n    return (s[0] ** 2) + (s[1] ** 2) == (s[2] ** 2)\n}\n```",
            "```swift\nfunc findMax(_ words: [String]) -> String {\n    var maxCnt = 0\n    var maxW = \"\"\n    for w in words {\n        let cnt = Set(w).count\n        if cnt > maxCnt {\n            maxCnt = cnt\n            maxW = w\n        } else if cnt == maxCnt {\n            maxW = maxW < w ? maxW : w\n        }\n    }\n    return maxW\n}\n```",
            "```swift\nfunc eat(_ num: Int, _ need: Int, _ remaining: Int) -> [Int] {\n    if need <= remaining {\n        return [num + need, remaining - need]\n    } else {\n        return [num + remaining, 0]\n    }\n}\n```",
            "```swift\nfunc doAlgebra(_ operators: [String], _ operands: [Int]) -> Int {\n    var ops = operators\n    var nums = operands\n    var i = ops.count - 1\n    while i >= 0 {\n        if ops[i] == \"**\" {\n            nums[i] = Int(pow(Double(nums[i]), Double(nums[i + 1])))\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n        }\n        i -= 1\n    }\n    i = 0\n    while i < ops.count {\n        if ops[i] == \"*\" {\n            nums[i] *= nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            i -= 1\n        } else if ops[i] == \"//\" {\n            nums[i] = nums[i] / nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            i -= 1\n        }\n        i += 1\n    }\n    i = 0\n    while i < ops.count {\n        if ops[i] == \"+\" {\n            nums[i] += nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            i -= 1\n        } else if ops[i] == \"-\" {\n            nums[i] -= nums[i + 1]\n            nums.remove(at: i + 1)\n            ops.remove(at: i)\n            i -= 1\n        }\n        i += 1\n    }\n    return nums[0]\n}\n```",
            "```swift\nfunc solve(_ s: String) -> String {\n    if !s.rangeOfCharacter(from: .letters) != nil {\n        return String(s.reversed())\n    }\n    \n    var result = \"\"\n    for ch in s {\n        if CharacterSet.letters.inverted.contains(ch.unicodeScalars.first!) {\n            result.append(ch)\n        } else if ch.isUppercase {\n            result.append(ch.lowercased())\n        } else if ch.isLowercase {\n            result.append(ch.uppercased())\n        }\n    }\n    return result\n}\n```",
            "```swift\nfunc stringToMd5(_ txt: String) -> String? {\n    if txt.isEmpty {\n        return nil\n    }\n    let md5Data = Insecure.MD5.hash(data: txt.data(using: .utf8)!)\n    let md5String = md5Data.map { String(format: \"%02hhx\", $0) }.joined()\n    return md5String\n}\n```",
            "```swift\nfunc generateIntegers(_ a: Int, _ b: Int) -> [Int] {\n    let lower = max(2, min(a, b))\n    let upper = min(8, max(a, b))\n    var result: [Int] = []\n    for i in lower...upper {\n        if i % 2 == 0 {\n            result.append(i)\n        }\n    }\n    return result\n}\n```"
        ],
        "rust": [
            "```rust\npub fn has_close_elements(numbers: &Vec<f64>, threshold: f64) -> bool {\n    for i in 0..numbers.len() {\n        for j in (i + 1)..numbers.len() {\n            if (numbers[i] - numbers[j]).abs() < threshold {\n                return true;\n            }\n        }\n    }\n    false\n}\n```",
            "```rust\npub fn separate_paren_groups(paren_string: &String) -> Vec<String> {\n    let mut groups = Vec::new();\n    let mut stk = Vec::new();\n    let mut current_group = String::new();\n    let parens: String = paren_string.chars().filter(|&c| !c.is_whitespace()).collect();\n\n    for ch in parens.chars() {\n        if ch == '(' {\n            stk.push(ch);\n            current_group.push(ch);\n        } else if ch == ')' {\n            stk.pop();\n            current_group.push(ch);\n            if stk.is_empty() {\n                groups.push(current_group.clone());\n                current_group.clear();\n            }\n        }\n    }\n\n    groups\n}\n```",
            "```rust\npub fn truncate_number(num: f64) -> f64 {\n    num - num.floor()\n}\n```",
            "```rust\npub fn below_zero(operations: &Vec<i32>) -> bool {\n    let mut balance = 0;\n    for op in operations.iter() {\n        balance += *op;\n        if balance < 0 {\n            return true;\n        }\n    }\n    false\n}\n```",
            "```rust\npub fn mean_absolute_deviation(numbers: &Vec<f64>) -> f64 {\n    let mean = numbers.iter().sum::<f64>() / numbers.len() as f64;\n    let deviation = numbers.iter().map(|&x| (x - mean).abs()).sum::<f64>();\n    deviation / numbers.len() as f64\n}\n```",
            "```rust\npub fn intersperse(numbers: &Vec<i32>, delimiter: i32) -> Vec<i32> {\n    let mut result = Vec::new();\n    for (i, &number) in numbers.iter().enumerate() {\n        if i != 0 {\n            result.push(delimiter);\n        }\n        result.push(number);\n    }\n    result\n}\n```",
            "```rust\npub fn parse_nested_parens(paren_string: &String) -> Vec<i32> {\n    let mut result = Vec::new();\n    let paren_groups = paren_string.split_whitespace();\n    \n    for group in paren_groups {\n        let mut max_depth = 0;\n        let mut depth = 0;\n        \n        for ch in group.chars() {\n            if ch == '(' {\n                depth += 1;\n                max_depth = max(max_depth, depth);\n            } else if ch == ')' {\n                depth -= 1;\n            }\n        }\n        \n        result.push(max_depth);\n    }\n    \n    result\n}\n```",
            "```rust\npub fn filter_by_substring(strs: &Vec<String>, substring: &String) -> Vec<String> {\n    strs.iter()\n        .filter(|s| s.contains(substring))\n        .cloned()\n        .collect()\n}\n```",
            "```rust\npub fn sum_product(numbers: &Vec<i32>) -> Vec<i32> {\n    let n_sum = numbers.iter().sum();\n    let n_product = numbers.iter().fold(1, |acc, x| acc * x);\n    vec![n_sum, n_product]\n}\n```",
            "```rust\npub fn rolling_max(numbers: &Vec<i32>) -> Vec<i32> {\n    let mut max_so_far = i32::MIN;\n    let mut result = Vec::new();\n    for &num in numbers.iter() {\n        max_so_far = max_so_far.max(num);\n        result.push(max_so_far);\n    }\n    result\n}\n```",
            "```rust\npub fn is_palindrome(s: &str) -> bool {\n    s == s.chars().rev().collect::<String>()\n}\n\npub fn make_palindrome(s: &String) -> String {\n    if is_palindrome(s) {\n        return s.clone();\n    }\n    for i in 0..s.len() {\n        let suffix = &s[i..];\n        if is_palindrome(suffix) {\n            let prefix = &s[..i];\n            let mut result = s.clone();\n            result.push_str(&prefix.chars().rev().collect::<String>());\n            return result;\n        }\n    }\n    String::new()\n}\n```",
            "```rust\npub fn string_xor(a: &String, b: &String) -> String {\n    let mut result = String::new();\n    for (char_a, char_b) in a.chars().zip(b.chars()) {\n        if char_a == char_b {\n            result.push('0');\n        } else {\n            result.push('1');\n        }\n    }\n    result\n}\n```",
            "```rust\npub fn longest(strs: &Vec<String>) -> Option<String> {\n    let mut longest_s = None;\n\n    for s in strs {\n        match longest_s {\n            Some(ref longest) if s.len() > longest.len() => longest_s = Some(s.clone()),\n            None => longest_s = Some(s.clone()),\n            _ => {}\n        }\n    }\n\n    longest_s\n}\n```",
            "```rust\npub fn greatest_common_divisor(a: i32, b: i32) -> i32 {\n    if b == 0 {\n        a\n    } else {\n        greatest_common_divisor(b, a % b)\n    }\n}\n```",
            "```rust\npub fn all_prefixes(s: &String) -> Vec<String> {\n    let mut prefixes = Vec::new();\n    for i in 0..s.len() {\n        prefixes.push(s[0..=i].to_string());\n    }\n    prefixes\n}\n```",
            "```rust\npub fn string_sequence(n: i32) -> String {\n    (0..=n).map(|x| x.to_string()).collect::<Vec<String>>().join(\" \")\n}\n```",
            "```rust\npub fn count_distinct_characters(s: &String) -> i32 {\n    let mut chars_set = std::collections::HashSet::new();\n    for c in s.to_lowercase().chars() {\n        chars_set.insert(c);\n    }\n    chars_set.len() as i32\n}\n```",
            "```rust\npub fn parse_music(music_string: &String) -> Vec<i32> {\n    let durations = vec![(\"o\", 4), (\"o|\", 2), (\".|\", 1)].into_iter().collect::<std::collections::HashMap<_, _>>();\n    let notes = music_string.split_whitespace();\n    notes.map(|note| *durations.get(note).unwrap()).collect()\n}\n```",
            "```rust\npub fn how_many_times(s: &String, substring: &String) -> i32 {\n    let mut times = 0;\n    let s_len = s.len();\n    let sub_len = substring.len();\n\n    for i in 0..=s_len - sub_len {\n        if &s[i..i + sub_len] == substring {\n            times += 1;\n        }\n    }\n\n    times\n}\n```",
            "```rust\npub fn sort_numbers(numbers: &String) -> String {\n    let num_dict = [\n        (\"zero\", 0),\n        (\"one\", 1),\n        (\"two\", 2),\n        (\"three\", 3),\n        (\"four\", 4),\n        (\"five\", 5),\n        (\"six\", 6),\n        (\"seven\", 7),\n        (\"eight\", 8),\n        (\"nine\", 9)\n    ].iter().cloned().collect::<std::collections::HashMap<_, _>>();\n\n    let mut num_list: Vec<&str> = numbers.split_whitespace().filter(|x| num_dict.contains_key(*x)).collect();\n    num_list.sort_by_key(|&x| num_dict[x]);\n\n    num_list.join(\" \")\n}\n```",
            "```rust\npub fn find_closest_elements(numbers: &Vec<f64>) -> Vec<f64> {\n    let mut sorted_numbers = numbers.clone();\n    sorted_numbers.sort_by(|a, b| a.partial_cmp(b).unwrap());\n    let mut min_diff = f64::INFINITY;\n    let mut closest_pair = vec![];\n    \n    for i in 1..sorted_numbers.len() {\n        let diff = sorted_numbers[i] - sorted_numbers[i - 1];\n        if diff < min_diff {\n            min_diff = diff;\n            closest_pair = vec![sorted_numbers[i - 1], sorted_numbers[i]];\n        }\n    }\n    \n    closest_pair\n}\n```",
            "```rust\npub fn rescale_to_unit(numbers: &Vec<f64>) -> Vec<f64> {\n    if numbers.is_empty() {\n        return vec![];\n    }\n\n    let min_num = *numbers.iter().min_by(|a, b| a.partial_cmp(b).unwrap()).unwrap();\n    let max_num = *numbers.iter().max_by(|a, b| a.partial_cmp(b).unwrap()).unwrap();\n\n    if min_num == max_num {\n        vec![0.0; numbers.len()]\n    } else {\n        numbers.iter().map(|&num| (num - min_num) / (max_num - min_num)).collect()\n    }\n}\n```",
            "```rust\nuse std::any::Any;\n\npub fn filter_integers(values: &Vec<Box<dyn Any>>) -> Vec<i32> {\n    values.iter()\n         .filter_map(|x| x.downcast_ref::<i32>().cloned())\n         .collect()\n}\n```",
            "```rust\npub fn str_length(s: &String) -> i32 {\n    s.len() as i32\n}\n```",
            "```rust\npub fn largest_divisor(n: i32) -> i32 {\n    for i in 2..n {\n        if n % i == 0 {\n            return n / i;\n        }\n    }\n    1\n}\n```",
            "```rust\npub fn factorize(n: i32) -> Vec<i32> {\n    let mut factors = Vec::new();\n    let mut divisor = 2;\n    let mut number = n;\n    while divisor <= number {\n        if number % divisor == 0 {\n            factors.push(divisor);\n            number /= divisor;\n        } else {\n            divisor += 1;\n        }\n    }\n    factors\n}\n```",
            "```rust\npub fn remove_duplicates(numbers: &Vec<i32>) -> Vec<i32> {\n    let mut counts = std::collections::HashMap::new();\n    for &num in numbers.iter() {\n        *counts.entry(num).or_insert(0) += 1;\n    }\n    let mut res = Vec::new();\n    for &num in numbers.iter() {\n        if let Some(&count) = counts.get(&num) {\n            if count == 1 {\n                res.push(num);\n            }\n        }\n    }\n    res\n}\n```",
            "```rust\npub fn flip_case(s: &String) -> String {\n    let mut flipped = String::new();\n    for ch in s.chars() {\n        if !ch.is_alphabetic() {\n            flipped.push(ch);\n        } else if ch.is_lowercase() {\n            flipped.push(ch.to_ascii_uppercase());\n        } else if ch.is_uppercase() {\n            flipped.push(ch.to_ascii_lowercase());\n        }\n    }\n    flipped\n}\n```",
            "```rust\npub fn concatenate(strs: &Vec<String>) -> String {\n    strs.concat()\n}\n```",
            "```rust\npub fn filter_by_prefix(strs: &Vec<String>, prefix_str: &String) -> Vec<String> {\n    strs.iter()\n        .filter(|&&s| s.starts_with(prefix_str))\n        .cloned()\n        .collect()\n}\n```",
            "```rust\npub fn get_positive(l: &Vec<i32>) -> Vec<i32> {\n    l.iter().filter(|&&num| num > 0).cloned().collect()\n}\n```",
            "```rust\npub fn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..=((n as f64).sqrt() as i32) {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\n```",
            "```rust\npub fn poly(xs: &Vec<i32>, x: f64) -> f64 {\n    let mut res = 0.0;\n    for (i, &coeff) in xs.iter().enumerate() {\n        res += coeff as f64 * x.powi(i as i32);\n    }\n    res\n}\n\npub fn find_zero(xs: &Vec<i32>) -> f64 {\n    let mut x1 = 1.0;\n    let mut x2 = -1.0;\n    while poly(xs, x1) * poly(xs, x2) > 0.0 {\n        x1 *= 2.0;\n        x2 *= 2.0;\n    }\n    while (x1 - x2).abs() > 1e-10 {\n        let mid = (x1 + x2) / 2.0;\n        if (poly(xs, mid) - 0.0).abs() < 1e-10 {\n            return mid;\n        } else if poly(xs, mid) * poly(xs, x1) < 0.0 {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    (x1 + x2) / 2.0\n}\n```",
            "```rust\npub fn sort_third(l: &Vec<i32>) -> Vec<i32> {\n    let mut sorted_third: Vec<i32> = l.iter().skip(0).step_by(3).cloned().collect();\n    sorted_third.sort_unstable();\n    \n    l.iter().enumerate().map(|(i, &x)| {\n        if i % 3 == 0 {\n            sorted_third[i / 3]\n        } else {\n            x\n        }\n    }).collect()\n}\n```",
            "```rust\npub fn list_unique(l: &Vec<i32>) -> Vec<i32> {\n    let mut unique_set = l.clone();\n    unique_set.sort();\n    unique_set.dedup();\n    unique_set\n}\n```",
            "```rust\npub fn max_element(l: &Vec<i32>) -> i32 {\n    if l.is_empty() {\n        return 0;\n    }\n    *l.iter().max().unwrap()\n}\n```",
            "```rust\npub fn fizz_buzz(n: i32) -> i32 {\n    let mut cnt = 0;\n    for i in 0..n {\n        if i % 11 == 0 || i % 13 == 0 {\n            cnt += i.to_string().matches('7').count() as i32;\n        }\n    }\n    cnt\n}\n```",
            "```rust\npub fn sort_even(l: &Vec<i32>) -> Vec<i32> {\n    let mut sorted_even: Vec<i32> = l.iter().enumerate()\n        .filter_map(|(i, &x)| if i % 2 == 0 { Some(x) } else { None })\n        .collect();\n    sorted_even.sort_unstable();\n    \n    l.iter().enumerate()\n        .map(|(i, &x)| if i % 2 == 0 { sorted_even[i / 2] } else { x })\n        .collect()\n}\n```",
            "```rust\npub fn encode_cyclic(s: &String) -> String {\n    let mut result = String::new();\n    for i in (0..s.len()).step_by(3) {\n        if i + 3 > s.len() {\n            result.push_str(&s[i..]);\n        } else {\n            result.push_str(&s[i + 1..i + 3]);\n            result.push(s.chars().nth(i).unwrap());\n        }\n    }\n    result\n}\n\npub fn decode_cyclic(s: &String) -> String {\n    encode_cyclic(&encode_cyclic(s))\n}\n```",
            "```rust\nfn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..=((n as f64).sqrt() as i32) {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\n\npub fn prime_fib(n: i32) -> i32 {\n    let mut f = (0, 1);\n    let mut cnt = 0;\n    while cnt < n {\n        f = (f.1, f.0 + f.1);\n        if is_prime(f.1) {\n            cnt += 1;\n        }\n    }\n    f.1\n}\n```",
            "```rust\npub fn triples_sum_to_zero(l: &Vec<i32>) -> bool {\n    for i in 0..l.len() {\n        for j in (i + 1)..l.len() {\n            for k in (j + 1)..l.len() {\n                if l[i] + l[j] + l[k] == 0 {\n                    return true;\n                }\n            }\n        }\n    }\n    false\n}\n```",
            "```rust\npub fn car_race_collision(n: i32) -> i32 {\n    n.pow(2)\n}\n```",
            "```rust\npub fn incr_list(l: &Vec<i32>) -> Vec<i32> {\n    l.iter().map(|&i| i + 1).collect()\n}\n```",
            "```rust\npub fn pairs_sum_to_zero(l: &Vec<i32>) -> bool {\n    let mut seen = std::collections::HashSet::new();\n    for &num in l {\n        if seen.contains(&-num) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    false\n}\n```",
            "```rust\npub fn change_base(x: i32, bas: i32) -> String {\n    if x == 0 {\n        return \"0\".to_string();\n    }\n    let mut digits = Vec::new();\n    let mut num = x;\n    while num > 0 {\n        digits.push((num % bas).to_string());\n        num /= bas;\n    }\n    digits.into_iter().rev().collect()\n}\n```",
            "```rust\npub fn triangle_area(a: i32, h: i32) -> f64 {\n    (a * h) as f64 / 2.0\n}\n```",
            "```rust\npub fn fib4(n: i32) -> i32 {\n    let mut fib = [0, 0, 2, 0];\n    for i in 4..=n + 1 {\n        fib[(i % 4) as usize] = fib.iter().sum();\n    }\n    fib[(n % 4) as usize]\n}\n```",
            "```rust\npub fn median(l: &Vec<f64>) -> f64 {\n    let mut l = l.clone();\n    l.sort_by(|a, b| a.partial_cmp(b).unwrap());\n    let count = l.len();\n    if count % 2 != 0 {\n        l[count / 2]\n    } else {\n        (l[count / 2] + l[count / 2 - 1]) / 2.0\n    }\n}\n```",
            "```rust\npub fn is_palindrome(txt: &String) -> bool {\n    txt == txt.chars().rev().collect::<String>()\n}\n```",
            "```rust\npub fn modp(n: i32, p: i32) -> i32 {\n    let mut ret = 1;\n    for _ in 0..n {\n        ret = (ret * 2) % p;\n    }\n    ret\n}\n```",
            "```rust\npub fn encode_shift(s: &String) -> String {\n    let mut result = String::new();\n    for ch in s.chars() {\n        let shifted_char = ((ch as u8 - 97 + 5) % 26 + 97) as char;\n        result.push(shifted_char);\n    }\n    result\n}\n\npub fn decode_shift(s: &String) -> String {\n    let mut result = String::new();\n    for ch in s.chars() {\n        let shifted_char = ((ch as u8 - 97 + 21) % 26 + 97) as char;\n        result.push(shifted_char);\n    }\n    result\n}\n```",
            "```rust\npub fn remove_vowels(txt: &String) -> String {\n    let vowels = \"aeiouAEIOU\";\n    let mut result = String::new();\n    \n    for c in txt.chars() {\n        if !vowels.contains(c) {\n            result.push(c);\n        }\n    }\n    \n    result\n}\n```",
            "```rust\npub fn below_threshold(l: &Vec<i32>, t: i32) -> bool {\n    for &x in l.iter() {\n        if x >= t {\n            return false;\n        }\n    }\n    true\n}\n```",
            "```rust\npub fn add(x: i32, y: i32) -> i32 {\n    x + y\n}\n```",
            "```rust\npub fn same_chars(s0: &String, s1: &String) -> bool {\n    let set0: std::collections::HashSet<char> = s0.chars().collect();\n    let set1: std::collections::HashSet<char> = s1.chars().collect();\n    set0 == set1\n}\n```",
            "```rust\npub fn fib(n: i32) -> i32 {\n    if n <= 1 {\n        n\n    } else {\n        fib(n - 1) + fib(n - 2)\n    }\n}\n```",
            "```rust\npub fn correct_bracketing(brackets: &String) -> bool {\n    let mut depth = 0;\n    for c in brackets.chars() {\n        if c == '<' {\n            depth += 1;\n        } else if c == '>' {\n            depth -= 1;\n        }\n        if depth < 0 {\n            return false;\n        }\n    }\n    depth == 0\n}\n```",
            "```rust\npub fn monotonic(l: &Vec<i32>) -> bool {\n    let diff: Vec<i32> = l.iter().zip(l.iter().skip(1)).map(|(&x, &y)| y - x).collect();\n    diff.iter().all(|&x| x <= 0) || diff.iter().all(|&x| x >= 0)\n}\n```",
            "```rust\npub fn common(l1: &Vec<i32>, l2: &Vec<i32>) -> Vec<i32> {\n    let mut set1: std::collections::HashSet<i32> = l1.iter().cloned().collect();\n    let set2: std::collections::HashSet<i32> = l2.iter().cloned().collect();\n    let mut common_elements: Vec<i32> = set1.intersection(&set2).cloned().collect();\n    common_elements.sort_unstable();\n    common_elements\n}\n```",
            "```rust\npub fn largest_prime_factor(mut n: i32) -> i32 {\n    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    n\n}\n```",
            "```rust\npub fn sum_to_n(n: i32) -> i32 {\n    (0..=n).sum()\n}\n```",
            "```rust\npub fn correct_bracketing(brackets: &String) -> bool {\n    let mut depth = 0;\n    for c in brackets.chars() {\n        if c == '(' {\n            depth += 1;\n        } else if c == ')' {\n            depth -= 1;\n        }\n        if depth < 0 {\n            return false;\n        }\n    }\n    depth == 0\n}\n```",
            "```rust\npub fn derivative(xs: &Vec<i32>) -> Vec<i32> {\n    let mut result = Vec::new();\n    for (i, &x) in xs.iter().enumerate().skip(1) {\n        result.push(x * i as i32);\n    }\n    result\n}\n```",
            "```rust\npub fn fibfib(n: i32) -> i32 {\n    if n <= 1 {\n        return 0;\n    }\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 1;\n    let mut m = n - 2; // Subtract 2 because the initial value of n is at least 3\n    while m > 0 {\n        a = b;\n        b = c;\n        c = a + b + c;\n        m -= 1;\n    }\n    c\n}\n```",
            "```rust\npub fn vowels_count(s: &str) -> i32 {\n    let vowels = \"aeiou\";\n    let mut cnt = 0;\n    for (i, c) in s.char_indices() {\n        let lower_c = c.to_lowercase().next().unwrap();\n        if vowels.contains(lower_c) || (i == s.len() - 1 && lower_c == 'y') {\n            cnt += 1;\n        }\n    }\n    cnt\n}\n```",
            "```rust\npub fn circular_shift(x: i32, shift: i32) -> String {\n    let x_str = x.to_string();\n    let len = x_str.len() as i32;\n    if shift > len {\n        x_str.chars().rev().collect()\n    } else {\n        let shift = shift as usize;\n        let (left, right) = x_str.split_at(len as usize - shift);\n        format!(\"{}{}\", right, left)\n    }\n}\n```",
            "```rust\npub fn digit_sum(s: &String) -> i32 {\n    s.chars()\n        .filter(|c| c.is_uppercase())\n        .map(|c| c as u8 as i32)\n        .sum()\n}\n```",
            "```rust\npub fn fruit_distribution(s: &str, n: i32) -> i32 {\n    let words: Vec<&str> = s.split_whitespace().collect();\n    let apples_index = words.iter().position(|&&word| word == \"apples\").unwrap() - 1;\n    let oranges_index = words.iter().position(|&&word| word == \"oranges\").unwrap() - 1;\n    let apples = words[apples_index].parse::<i32>().unwrap();\n    let oranges = words[oranges_index].parse::<i32>().unwrap();\n    n - apples - oranges\n}\n```",
            "```rust\npub fn pluck(arr: &Vec<i32>) -> Vec<i32> {\n    let evens: Vec<&i32> = arr.iter().filter(|&&n| n % 2 == 0).collect();\n    \n    if evens.is_empty() {\n        return vec![];\n    }\n    \n    let min_even = **evens.iter().min().unwrap();\n    let index = arr.iter().position(|&x| x == min_even).unwrap();\n    \n    vec![min_even, index as i32]\n}\n```",
            "```rust\npub fn search(lst: &Vec<i32>) -> i32 {\n    let mut freqs = std::collections::HashMap::new();\n    for &n in lst.iter() {\n        *freqs.entry(n).or_insert(0) += 1;\n    }\n    let mut good_vals = Vec::new();\n    for (&k, &v) in freqs.iter() {\n        if v >= k {\n            good_vals.push(k);\n        }\n    }\n    if !good_vals.is_empty() {\n        *good_vals.iter().max().unwrap()\n    } else {\n        -1\n    }\n}\n```",
            "```rust\npub fn strange_sort_list(lst: &Vec<i32>) -> Vec<i32> {\n    let mut sl = lst.clone();\n    sl.sort();\n    let mut result = Vec::new();\n    let mut left = 0;\n    let mut right = sl.len() - 1;\n    while left <= right {\n        result.push(sl[left]);\n        left += 1;\n        if left <= right {\n            result.push(sl[right]);\n            right -= 1;\n        }\n    }\n    result\n}\n```",
            "```rust\npub fn triangle_area(a: i32, b: i32, c: i32) -> f64 {\n    if a + b > c && a + c > b && b + c > a {\n        let s = (a + b + c) as f64 / 2.0;\n        (s * (s - a as f64) * (s - b as f64) * (s - c as f64)).sqrt()\n    } else {\n        -1.0\n    }\n}\n```",
            "```rust\npub fn will_it_fly(q: &Vec<i32>, w: i32) -> bool {\n    if q.is_empty() {\n        return false;\n    }\n    let mut is_palin = true;\n    for (i, &value) in q.iter().enumerate() {\n        if value != q[q.len() - 1 - i] {\n            is_palin = false;\n            break;\n        }\n    }\n    let total: i32 = q.iter().sum();\n    is_palin && total <= w\n}\n```",
            "```rust\npub fn smallest_change(arr: &Vec<i32>) -> i32 {\n    let mut ans = 0;\n    for i in 0..arr.len() / 2 {\n        if arr[i] != arr[arr.len() - i - 1] {\n            ans += 1;\n        }\n    }\n    ans\n}\n```",
            "```rust\npub fn total_match(lst1: &Vec<String>, lst2: &Vec<String>) -> Vec<String> {\n    let cnt1 = lst1.iter().map(|s| s.len()).sum::<usize>();\n    let cnt2 = lst2.iter().map(|s| s.len()).sum::<usize>();\n\n    if cnt1 <= cnt2 {\n        lst1.clone()\n    } else {\n        lst2.clone()\n    }\n}\n```",
            "```rust\nfn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..=((n as f64).sqrt() as i32) {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\n\npub fn is_multiply_prime(a: i32) -> bool {\n    let mut cnt = 0;\n    let mut a = a;\n    for i in 2..=a {\n        if is_prime(i) {\n            while a % i == 0 {\n                cnt += 1;\n                a /= i;\n            }\n        }\n    }\n    cnt == 3\n}\n```",
            "```rust\npub fn is_simple_power(x: i32, n: i32) -> bool {\n    if n < 2 {\n        return x == n;\n    }\n    let mut tmp = 1;\n    while tmp < x {\n        tmp *= n;\n    }\n    tmp == x\n}\n```",
            "```rust\npub fn is_cube(a: i32) -> bool {\n    let a = a.abs();\n    let root = (a as f64).cbrt().round() as i32;\n    root * root * root == a\n}\n```",
            "```rust\npub fn hex_key(num: &String) -> i32 {\n    num.chars()\n        .filter(|&x| matches!(x, '2' | '3' | '5' | '7' | 'B' | 'D'))\n        .count() as i32\n}\n```",
            "```rust\npub fn decimal_to_binary(dec: i32) -> String {\n    format!(\"db{:b}db\", dec)\n}\n```",
            "```rust\npub fn is_happy(s: &String) -> bool {\n    if s.len() < 3 {\n        return false;\n    }\n    for i in 0..=s.len() - 3 {\n        let chars: Vec<char> = s.chars().collect();\n        if chars[i] == chars[i + 1] || chars[i] == chars[i + 2] || chars[i + 1] == chars[i + 2] {\n            return false;\n        }\n    }\n    true\n}\n```",
            "```rust\npub fn numerical_letter_grade(grades: &Vec<f64>) -> Vec<String> {\n    let mut result = Vec::new();\n    for &g in grades {\n        if g == 4.0 {\n            result.push(\"A+\".to_string());\n        } else if g > 3.7 {\n            result.push(\"A\".to_string());\n        } else if g > 3.3 {\n            result.push(\"A-\".to_string());\n        } else if g > 3.0 {\n            result.push(\"B+\".to_string());\n        } else if g > 2.7 {\n            result.push(\"B\".to_string());\n        } else if g > 2.3 {\n            result.push(\"B-\".to_string());\n        } else if g > 2.0 {\n            result.push(\"C+\".to_string());\n        } else if g > 1.7 {\n            result.push(\"C\".to_string());\n        } else if g > 1.3 {\n            result.push(\"C-\".to_string());\n        } else if g > 1.0 {\n            result.push(\"D+\".to_string());\n        } else if g > 0.7 {\n            result.push(\"D\".to_string());\n        } else if g > 0.0 {\n            result.push(\"D-\".to_string());\n        } else {\n            result.push(\"E\".to_string());\n        }\n    }\n    result\n}\n```",
            "```rust\npub fn prime_length(s: &String) -> bool {\n    let length = s.len();\n    if length < 2 {\n        return false;\n    }\n    for i in 2..=((length as f64).sqrt() as usize) {\n        if length % i == 0 {\n            return false;\n        }\n    }\n    true\n}\n```",
            "```rust\npub fn starts_one_ends(n: i32) -> i32 {\n    if n == 1 {\n        return 1;\n    }\n    return 2 * 9 * 10_i32.pow((n - 2) as u32);\n}\n```",
            "```rust\npub fn solve(n: i32) -> String {\n    let digits_sum = n.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();\n    format!(\"{:b}\", digits_sum)\n}\n```",
            "```rust\npub fn add(lst: &Vec<i32>) -> i32 {\n    let mut sum = 0;\n    for (i, &x) in lst.iter().enumerate() {\n        if i % 2 == 1 && x % 2 == 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n```",
            "```rust\npub fn anti_shuffle(s: &String) -> String {\n    s.split_whitespace()\n     .map(|word| {\n         let mut chars: Vec<char> = word.chars().collect();\n         chars.sort_unstable();\n         chars.into_iter().collect::<String>()\n     })\n     .collect::<Vec<String>>()\n     .join(\" \")\n}\n```",
            "```rust\npub fn get_row(lst: &Vec<Vec<i32>>, x: i32) -> Vec<Vec<i32>> {\n    let mut coords = Vec::new();\n    for (i, row) in lst.iter().enumerate() {\n        for (j, &value) in row.iter().enumerate() {\n            if value == x {\n                coords.push(vec![i as i32, j as i32]);\n            }\n        }\n    }\n    coords.sort_by(|a, b| {\n        a[0].cmp(&b[0]).then_with(|| b[1].cmp(&a[1]))\n    });\n    coords\n}\n```",
            "```rust\npub fn sort_array(arr: &Vec<i32>) -> Vec<i32> {\n    let mut sorted_arr = arr.clone();\n    if arr.is_empty() {\n        return vec![];\n    }\n    if (arr[0] + arr[arr.len() - 1]) % 2 == 0 {\n        sorted_arr.sort_by(|a, b| b.cmp(a));\n    } else {\n        sorted_arr.sort();\n    }\n    sorted_arr\n}\n```",
            "```rust\npub fn encrypt(s: &String) -> String {\n    let mut result = String::new();\n    for ch in s.chars() {\n        if ch.is_ascii_lowercase() {\n            let shifted = ((ch as u8 - b'a' + 4) % 26) + b'a';\n            result.push(shifted as char);\n        } else {\n            result.push(ch);\n        }\n    }\n    result\n}\n```",
            "```rust\npub fn next_smallest(lst: &Vec<i32>) -> Option<i32> {\n    let mut sl = lst.to_vec();\n    sl.sort_unstable();\n    sl.dedup();\n    if sl.len() < 2 {\n        None\n    } else {\n        Some(sl[1])\n    }\n}\n```",
            "```rust\n pub fn is_bored(s: &String) -> i32 {\n        let sentences: Vec<&str> = s.split(|c: char| \".!?\".contains(c)).collect();\n        let mut count = 0;\n        for sentence in sentences {\n            if sentence.len() >= 2 && &sentence[0..2] == \"I \" {\n                count += 1;\n            }\n        }\n        count\n    }\n```",
            "```rust\nuse std::any::Any;\n\npub fn any_int(x: &Box<dyn Any>, y: &Box<dyn Any>, z: &Box<dyn Any>) -> bool {\n    if let (Some(&a), Some(&b), Some(&c)) = (\n        x.downcast_ref::<i32>(),\n        y.downcast_ref::<i32>(),\n        z.downcast_ref::<i32>(),\n    ) {\n        if (a + b == c) || (a + c == b) || (b + c == a) {\n            return true;\n        }\n    }\n    false\n}\n```",
            "```rust\npub fn encode(message: &String) -> String {\n    let vowels = \"aeiouAEIOU\";\n    let mut result = Vec::new();\n    for ch in message.chars() {\n        if ch.is_alphabetic() {\n            let ch1 = if ch.is_lowercase() { ch.to_ascii_uppercase() } else { ch.to_ascii_lowercase() };\n            if vowels.contains(ch1) {\n                let ch2 = (ch1 as u8 + 2) as char;\n                result.push(ch2);\n            } else {\n                result.push(ch1);\n            }\n        } else {\n            result.push(ch);\n        }\n    }\n    result.into_iter().collect()\n}\n```",
            "```rust\nfn is_prime(n: i32) -> bool {\n    if n < 2 {\n        return false;\n    }\n    for i in 2..=((n as f64).sqrt() as i32) {\n        if n % i == 0 {\n            return false;\n        }\n    }\n    true\n}\n\npub fn skjkasdkd(lst: &Vec<i32>) -> i32 {\n    let primes: Vec<i32> = lst.iter().filter(|&&x| is_prime(x)).cloned().collect();\n    if primes.is_empty() {\n        return 0;\n    }\n    let largest_prime = primes.into_iter().max().unwrap().to_string();\n    largest_prime.chars().map(|c| c.to_digit(10).unwrap() as i32).sum()\n}\n```",
            "```rust\npub fn check_dict_case(d: &HashMap<String, String>) -> bool {\n    if d.is_empty() {\n        return false;\n    }\n    let mut all_lower = true;\n    let mut all_upper = true;\n    for key in d.keys() {\n        if !key.chars().all(|c| c.is_lowercase()) {\n            all_lower = false;\n        }\n        if !key.chars().all(|c| c.is_uppercase()) {\n            all_upper = false;\n        }\n    }\n    all_lower || all_upper\n}\n```",
            "```rust\nfn count_up_to(n: i32) -> Vec<i32> {\n    let mut primes = Vec::new();\n    for num in 2..n {\n        let mut is_prime = true;\n        for &p in &primes {\n            if num % p == 0 {\n                is_prime = false;\n                break;\n            }\n        }\n        if is_prime {\n            primes.push(num);\n        }\n    }\n    primes\n}\n```",
            "```rust\npub fn multiply(a: i32, b: i32) -> i32 {\n    (a.abs() % 10) * (b.abs() % 10)\n}\n```",
            "```rust\npub fn count_upper(s: &String) -> i32 {\n    let vowels = \"AEIOU\";\n    let mut count = 0;\n    for (i, c) in s.chars().enumerate() {\n        if i % 2 == 0 && vowels.contains(c) {\n            count += 1;\n        }\n    }\n    count\n}\n```",
            "```rust\npub fn closest_integer(value: &String) -> i32 {\n    let num = value.parse::<f64>().unwrap();\n    if num >= 0.0 {\n        (num + 0.5).floor() as i32\n    } else {\n        (num - 0.5).ceil() as i32\n    }\n}\n```",
            "```rust\npub fn make_a_pile(n: i32) -> Vec<i32> {\n    let mut pile = Vec::new();\n    for i in 0..n {\n        pile.push(n + 2 * i);\n    }\n    pile\n}\n```",
            "```rust\npub fn words_string(s: &String) -> Vec<String> {\n    s.split(|c: char| c.is_whitespace() || c == ',')\n        .filter_map(|w| if !w.is_empty() { Some(w.to_string()) } else { None })\n        .collect()\n}\n```",
            "```rust\npub fn choose_num(x: i32, y: i32) -> i32 {\n    if x > y {\n        -1\n    } else if y % 2 == 0 {\n        y\n    } else if x != y {\n        y - 1\n    } else {\n        -1\n    }\n}\n```",
            "```rust\npub fn rounded_avg(n: i32, m: i32) -> Option<String> {\n    if n > m {\n        return None;\n    }\n    let r_avg = ((m + n) as f64 / 2.0).round() as i32;\n    Some(r_avg.to_string())\n}\n```",
            "```rust\npub fn all_digits_odd(s: &str) -> bool {\n    s.chars().all(|digit| digit.to_digit(10).unwrap_or(0) % 2 != 0)\n}\n\npub fn unique_digits(x: &Vec<i32>) -> Vec<i32> {\n    x.iter()\n        .filter(|&&num| all_digits_odd(&num.to_string()))\n        .cloned()\n        .collect::<Vec<i32>>()\n        .sort_unstable();\n        x.to_vec()\n}\n```",
            "```rust\npub fn by_length(arr: &Vec<i32>) -> Vec<String> {\n    let digit_names = vec![\n        \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \n        \"Six\", \"Seven\", \"Eight\", \"Nine\"\n    ];\n    let mut sorted_arr: Vec<i32> = arr\n        .iter()\n        .cloned()\n        .filter(|&x| 1 <= x && x <= 9)\n        .collect();\n    sorted_arr.sort_by(|a, b| b.cmp(a));\n    let result: Vec<String> = sorted_arr\n        .into_iter()\n        .map(|x| digit_names[(x - 1) as usize].to_string())\n        .collect();\n    result\n}\n```",
            "```rust\npub fn f(n: i32) -> Vec<i32> {\n    let nums: Vec<i32> = (1..=n).collect();\n    let mut result = Vec::new();\n    for (i, &value) in nums.iter().enumerate() {\n        if (i + 1) % 2 != 0 {\n            result.push((0..=i).fold(0, |acc, j| acc + nums[j]));\n        } else {\n            result.push((0..=i).fold(1, |acc, j| acc * nums[j]));\n        }\n    }\n    result\n}\n```",
            "```rust\npub fn even_odd_palindrome(n: i32) -> Vec<i32> {\n    let mut cnt = vec![0; 2];\n    for i in 1..=n {\n        if i.to_string() == i.to_string().chars().rev().collect::<String>() {\n            cnt[(i % 2) as usize]++;\n        }\n    }\n    cnt\n}\n```",
            "```rust\nfn digits_sum(n: i32) -> i32 {\n    let n_str = n.to_string();\n    if n >= 0 {\n        n_str.chars().map(|d| d.to_digit(10).unwrap() as i32).sum()\n    } else {\n        (n_str.get(0..2).unwrap_or(\"\").parse::<i32>().unwrap() * 2) + digits_sum(n.abs())\n    }\n}\n\npub fn count_nums(arr: &Vec<i32>) -> i32 {\n    arr.iter().filter(|&&n| digits_sum(n) > 0).count() as i32\n}\n```",
            "```rust\npub fn move_one_ball(arr: &Vec<i32>) -> bool {\n    if arr.is_empty() {\n        return true;\n    }\n    let mut sorted_arr = arr.clone();\n    sorted_arr.sort();\n    for i in 0..arr.len() {\n        if &arr[i..] == &sorted_arr[..arr.len() - i] && &arr[..i] == &sorted_arr[arr.len() - i..] {\n            return true;\n        }\n    }\n    false\n}\n```",
            "```rust\npub fn can_exchange(lst1: &Vec<i32>, lst2: &Vec<i32>) -> String {\n    let odd_cnt = lst1.iter().filter(|&&x| x % 2 != 0).count();\n    let even_cnt = lst2.iter().filter(|&&x| x % 2 == 0).count();\n\n    if even_cnt >= odd_cnt {\n        \"YES\".to_string()\n    } else {\n        \"NO\".to_string()\n    }\n}\n```",
            "```rust\nuse std::collections::HashMap;\n\npub fn histogram(test: &String) -> HashMap<String, i32> {\n    let mut freq = HashMap::new();\n    let words: Vec<&str> = test.split_whitespace().filter(|w| !w.is_empty()).collect();\n    for w in words {\n        *freq.entry(w.to_string()).or_insert(0) += 1;\n    }\n    let mut result = HashMap::new();\n    if !freq.is_empty() {\n        let max_freq = freq.values().cloned().max().unwrap();\n        for (k, v) in &freq {\n            if *v == max_freq {\n                result.insert(k.clone(), *v);\n            }\n        }\n    }\n    result\n}\n```",
            "```rust\nfn reverse_delete(s: &str, c: &str) -> Vec<String> {\n    let s1: String = s.chars().filter(|&ch| !c.contains(ch)).collect();\n    let is_palindrome = s1 == s1.chars().rev().collect::<String>();\n    vec![s1, if is_palindrome { \"yes\".to_string() } else { \"no\".to_string() }]\n}\n```",
            "```rust\npub fn odd_count(lst: &Vec<String>) -> Vec<String> {\n    let mut result = Vec::new();\n    for num in lst {\n        let mut n = 0;\n        for byte in num.as_bytes() {\n            if *byte % 2 == 1 {\n                n += 1;\n            }\n        }\n        let rs = format!(\"the number of odd elements in the string {} of the input.\", n);\n        result.push(rs);\n    }\n    result\n}\n```",
            "```rust\npub fn min_sub_array_sum(nums: &Vec<i32>) -> i32 {\n    let mut min_sum = 0;\n    let mut cur_sum = 0;\n    for &n in nums.iter() {\n        cur_sum = if cur_sum + n < 0 { cur_sum + n } else { 0 };\n        min_sum = if cur_sum < min_sum { cur_sum } else { min_sum };\n    }\n    if min_sum == 0 {\n        min_sum = *nums.iter().min().unwrap();\n    }\n    min_sum\n}\n```",
            "```rust\npub fn max_fill(grid: &Vec<Vec<i32>>, capacity: i32) -> i32 {\n    let mut total = 0;\n    for arr in grid.iter() {\n        total += (arr.iter().sum::<i32>() as f64 / capacity as f64).ceil() as i32;\n    }\n    total\n}\n```",
            "```rust\npub fn sort_array(arr: &Vec<i32>) -> Vec<i32> {\n    let mut a = arr.clone();\n    a.sort_by(|&a, &b| {\n        let count_a = a.count_ones();\n        let count_b = b.count_ones();\n        if count_a == count_b {\n            a.cmp(&b)\n        } else {\n            count_a.cmp(&count_b)\n        }\n    });\n    a\n}\n```",
            "```rust\npub fn select_words(s: &String, n: i32) -> Vec<String> {\n    let consonants = \"bcdfghjklmnpqrstvwxyz\";\n    s.split_whitespace()\n        .filter(|w| w.len() > 0)\n        .filter(|&w| {\n            w.chars()\n                .filter(|c| consonants.contains(c.to_ascii_lowercase()))\n                .count() as i32 == n\n        })\n        .map(String::from)\n        .collect()\n}\n```",
            "```rust\npub fn get_closest_vowel(word: &String) -> String {\n    let vowels = \"aeiouAEIOU\";\n    for i in (1..word.len() - 2).rev() {\n        if vowels.contains(word.chars().nth(i).unwrap()) && !vowels.contains(word.chars().nth(i - 1).unwrap()) && !vowels.contains(word.chars().nth(i + 1).unwrap()) {\n            return word.chars().nth(i).unwrap().to_string();\n        }\n    }\n    \"\".to_string()\n}\n```",
            "```rust\npub fn check(s: &str) -> bool {\n    let mut depth = 0;\n    for ch in s.chars() {\n        if ch == '(' {\n            depth += 1;\n        } else {\n            depth -= 1;\n        }\n        if depth < 0 {\n            return false;\n        }\n    }\n    depth == 0\n}\n\npub fn match_parens(lst: &Vec<String>) -> String {\n    let s1 = lst[0].clone() + &lst[1];\n    let s2 = lst[1].clone() + &lst[0];\n    if check(&s1) || check(&s2) {\n        \"Yes\".to_string()\n    } else {\n        \"No\".to_string()\n    }\n}\n```",
            "```rust\npub fn maximum(arr: &Vec<i32>, k: i32) -> Vec<i32> {\n    if k == 0 {\n        return Vec::new();\n    }\n    let mut sorted_arr = arr.clone();\n    sorted_arr.sort_unstable();\n    sorted_arr.split_off(sorted_arr.len() - k as usize)\n}\n```",
            "```rust\npub fn solution(lst: &Vec<i32>) -> i32 {\n    let mut sum = 0;\n    for (i, &x) in lst.iter().enumerate() {\n        if i % 2 == 0 && x % 2 != 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n```",
            "```rust\npub fn add_elements(arr: &Vec<i32>, k: i32) -> i32 {\n    let mut sum = 0;\n    for (i, &x) in arr.iter().enumerate().take(k as usize) {\n        if x.to_string().len() <= 2 {\n            sum += x;\n        }\n    }\n    sum\n}\n```",
            "```rust\npub fn get_odd_collatz(mut n: i32) -> Vec<i32> {\n    let mut collatz = vec![1];\n    while n != 1 {\n        if n % 2 != 0 {\n            collatz.push(n);\n            n = 3 * n + 1;\n        } else {\n            n /= 2;\n        }\n    }\n    collatz.sort();\n    collatz\n}\n```",
            "```rust\npub fn valid_date(date: &str) -> bool {\n    if date.len() != 10 || date.chars().nth(2) != Some('-') || date.chars().nth(5) != Some('-') {\n        return false;\n    }\n    let m = match date[0..2].parse::<u8>() {\n        Ok(m) => m,\n        Err(_) => return false,\n    };\n    let d = match date[3..5].parse::<u8>() {\n        Ok(d) => d,\n        Err(_) => return false,\n    };\n    if [1, 3, 5, 7, 8, 10, 12].contains(&m) && d >= 1 && d <= 31 {\n        return true;\n    }\n    if [4, 6, 9, 11].contains(&m) && d >= 1 && d <= 30 {\n        return true;\n    }\n    if m == 2 && d >= 1 && d <= 29 {\n        return true;\n    }\n    false\n}\n```",
            "```rust\npub fn split_words(txt: &String) -> Vec<String> {\n    if txt.contains(' ') {\n        txt.split_whitespace().map(|s| s.to_string()).collect()\n    } else if txt.contains(',') {\n        txt.split(',').map(|s| s.trim().to_string()).collect()\n    } else {\n        let count = txt.chars().filter(|&c| c.is_lowercase() && c as u8 % 2 == 0).count();\n        vec![count.to_string()]\n    }\n}\n```",
            "```rust\npub fn is_sorted(lst: &Vec<i32>) -> bool {\n    if lst.is_empty() {\n        return true;\n    }\n\n    for i in 1..lst.len() {\n        if lst[i - 1] > lst[i] {\n            return false;\n        }\n    }\n\n    let mut freq = std::collections::HashMap::new();\n    for &num in lst {\n        *freq.entry(num).or_insert(0) += 1;\n    }\n\n    for &count in freq.values() {\n        if count > 2 {\n            return false;\n        }\n    }\n\n    true\n}\n```",
            "```rust\npub fn intersection(interval1: &Vec<i32>, interval2: &Vec<i32>) -> String {\n    fn is_prime(n: i32) -> bool {\n        if n < 2 {\n            return false;\n        }\n        for i in 2..=((n as f64).sqrt() as i32) {\n            if n % i == 0 {\n                return false;\n            }\n        }\n        true\n    }\n\n    let l = interval1[0].max(interval2[0]);\n    let r = interval1[1].min(interval2[1]);\n    let length = r - l;\n    if length > 0 && is_prime(length) {\n        \"YES\".to_string()\n    } else {\n        \"NO\".to_string()\n    }\n}\n```",
            "```rust\npub fn prod_signs(arr: &Vec<i32>) -> Option<i32> {\n    if arr.is_empty() {\n        return None;\n    }\n    if arr.contains(&0) {\n        return Some(0);\n    }\n    let neg_count = arr.iter().filter(|&&x| x < 0).count();\n    let sign = if neg_count % 2 == 1 { -1 } else { 1 };\n    Some(sign * arr.iter().map(|&x| x.abs()).sum())\n}\n```",
            "```rust\npub fn min_path(grid: &Vec<Vec<i32>>, k: i32) -> Vec<i32> {\n    let n = grid.len();\n    let mut min_val = n * n + 1;\n    for i in 0..n {\n        for j in 0..n {\n            if grid[i][j] == 1 {\n                let mut temp = vec![];\n                if i != 0 {\n                    temp.push(grid[i - 1][j]);\n                }\n                if j != 0 {\n                    temp.push(grid[i][j - 1]);\n                }\n                if i != n - 1 {\n                    temp.push(grid[i + 1][j]);\n                }\n                if j != n - 1 {\n                    temp.push(grid[i][j + 1]);\n                }\n                min_val = *temp.iter().min().unwrap_or(&n);\n            }\n        }\n    }\n    let mut result = Vec::new();\n    for i in 0..k {\n        result.push((i % 2 == 0) as i32 + ((i % 2 != 0) as i32 * min_val));\n    }\n    result\n}\n```",
            "```rust\npub fn tri(n: i32) -> Vec<i32> {\n    if n == 0 {\n        return vec![1];\n    }\n    let mut seq = vec![1, 3];\n    for i in 2..=n {\n        if i % 2 == 0 {\n            seq.push((i / 2 + 1));\n        } else {\n            seq.push(seq[(i - 1) as usize] + seq[(i - 2) as usize] + (i + 3) / 2);\n        }\n    }\n    seq\n}\n```",
            "```rust\npub fn digits(n: i32) -> i32 {\n    let odds = n.to_string()\n                .chars()\n                .filter_map(|d| d.to_digit(10))\n                .filter(|&d| d % 2 == 1)\n                .map(|d| d as i32);\n    \n    if odds.clone().count() > 0 {\n        odds.product()\n    } else {\n        0\n    }\n}\n```",
            "```rust\npub fn is_nested(s: &str) -> bool {\n    let mut open_idx = Vec::new();\n    let mut close_idx = Vec::new();\n    \n    for (i, c) in s.char_indices() {\n        if c == '[' {\n            open_idx.push(i);\n        } else if c == ']' {\n            close_idx.push(i);\n        }\n    }\n    \n    close_idx.reverse();\n    let mut cnt = 0;\n    let mut i = 0;\n    let l = close_idx.len();\n    \n    for &idx in &open_idx {\n        if i < l && idx < close_idx[i] {\n            cnt += 1;\n            i += 1;\n        }\n    }\n    \n    cnt >= 2\n}\n```",
            "```rust\npub fn sum_squares(lst: &Vec<f64>) -> i32 {\n    lst.iter()\n       .map(|&n| (n.ceil() as i64).pow(2))\n       .sum()\n}\n```",
            "```rust\npub fn check_if_last_char_is_a_letter(txt: &String) -> bool {\n    if txt.is_empty() {\n        return false;\n    }\n    let last = &txt[txt.rfind(' ').unwrap_or(0)..];\n    last.len() == 1 && last.chars().next().unwrap().is_alphabetic()\n}\n```",
            "```rust\npub fn can_arrange(arr: &Vec<i32>) -> i32 {\n    if arr.len() <= 1 {\n        return -1;\n    }\n    let mut idx = Vec::new();\n    for i in 1..arr.len() {\n        if arr[i] < arr[i - 1] {\n            idx.push(i as i32);\n        }\n    }\n    if !idx.is_empty() {\n        *idx.iter().max().unwrap()\n    } else {\n        -1\n    }\n}\n```",
            "```rust\npub fn largest_smallest_integers(lst: &Vec<i32>) -> Vec<Option<i32>> {\n    let neg: Vec<i32> = lst.iter().filter(|&&x| x < 0).cloned().collect();\n    let pos: Vec<i32> = lst.iter().filter(|&&x| x > 0).cloned().collect();\n    let max_neg = if neg.is_empty() { None } else { Some(*neg.iter().max().unwrap()) };\n    let min_pos = if pos.is_empty() { None } else { Some(*pos.iter().min().unwrap()) };\n    vec![max_neg, min_pos]\n}\n```",
            "```rust\nuse std::any::Any;\n\nfn any_to_real(o: &Box<dyn Any>) -> f64 {\n    if let Some(s) = o.downcast_ref::<String>() {\n        s.replace(',', \".\").parse().unwrap()\n    } else if let Some(&i) = o.downcast_ref::<i32>() {\n        i as f64\n    } else if let Some(&f) = o.downcast_ref::<f64>() {\n        f\n    } else {\n        panic!(\"Type Error\");\n    }\n}\n\npub fn compare_one(a: &Box<dyn Any>, b: &Box<dyn Any>) -> Option<f64> {\n    let a1 = any_to_real(a);\n    let b1 = any_to_real(b);\n    if a1 == b1 {\n        None\n    } else if a1 > b1 {\n        Some(a1)\n    } else {\n        Some(b1)\n    }\n}\n```",
            "```rust\npub fn is_equal_to_sum_even(n: i32) -> bool {\n    n % 2 == 0 && n >= 8\n}\n```",
            "```rust\npub fn special_factorial(n: i32) -> i32 {\n    let mut fact = 1;\n    let mut result = 1;\n    for i in 1..=n {\n        fact *= i;\n        result *= fact;\n    }\n    result\n}\n```",
            "```rust\npub fn fix_spaces(txt: &String) -> String {\n    let mut result = txt.replace(\" \", \"_\");\n    result = regex::Regex::new(r\"\\s{3,}\")\n        .unwrap()\n        .replace(&result, \"-\")\n        .to_string();\n    result\n}\n```",
            "```rust\npub fn file_name_check(file_name: &String) -> String {\n    let suf = vec![\"txt\", \"exe\", \"dll\"];\n    let lst: Vec<&str> = file_name.split('.').collect();\n    if lst.len() != 2 || !suf.contains(&lst[1]) || lst[0].is_empty() || !lst[0].chars().all(char::is_alphabetic) || lst[0].matches(|c: char| c.is_digit(10)).count() > 3 {\n        return \"No\".to_string();\n    }\n    \"Yes\".to_string()\n}\n```",
            "```rust\npub fn sum_squares(lst: &Vec<i32>) -> i32 {\n    let mut result = 0;\n    for (i, &x) in lst.iter().enumerate() {\n        if i % 3 == 0 {\n            result += x.pow(2);\n        } else if i % 4 == 0 {\n            result += x.pow(3);\n        } else {\n            result += x;\n        }\n    }\n    result\n}\n```",
            "```rust\npub fn words_in_sentence(sentence: &String) -> String {\n    let words = sentence.split_whitespace();\n    let prime_words: Vec<&str> = words.filter(|word| {\n        let length = word.len();\n        if length < 2 {\n            return false;\n        }\n        for i in 2..=(length as f64).sqrt() as usize {\n            if length % i == 0 {\n                return false;\n            }\n        }\n        true\n    }).collect();\n\n    prime_words.join(\" \")\n}\n```",
            "```rust\npub fn simplify(x: &str, n: &str) -> bool {\n    let xs: Vec<&str> = x.split('/').collect();\n    let ns: Vec<&str> = n.split('/').collect();\n    let num = xs[0].parse::<i32>().unwrap() * ns[0].parse::<i32>().unwrap();\n    let den = xs[1].parse::<i32>().unwrap() * ns[1].parse::<i32>().unwrap();\n    num % den == 0\n}\n```",
            "```rust\nfn digits_sum(mut n: i32) -> i32 {\n    let mut sum = 0;\n    while n != 0 {\n        sum += (n % 10).abs();\n        n /= 10;\n    }\n    sum\n}\n\npub fn order_by_points(nums: &Vec<i32>) -> Vec<i32> {\n    let mut nums = nums.clone();\n    nums.sort_by_key(|&x| digits_sum(x));\n    nums\n}\n```",
            "```rust\npub fn special_filter(nums: &Vec<i32>) -> i32 {\n    let odds = \"13579\";\n    let mut count = 0;\n    for &n in nums.iter() {\n        if n > 10 && n % 2 == 1 && odds.contains(&n.to_string()[0..1]) {\n            count += 1;\n        }\n    }\n    count\n}\n```",
            "```rust\npub fn get_max_triples(n: i32) -> i32 {\n    let mut c = [0, 0, 0];\n    for i in 1..=n {\n        let a = i * i - i + 1;\n        c[(a % 3) as usize] += 1;\n    }\n    (c[0] * c[1] * c[2]) + (((c[0] * (c[0] - 1) * (c[0] - 2)) + (c[1] * (c[1] - 1) * (c[1] - 2)) + (c[2] * (c[2] - 1) * (c[2] - 2))) / 6)\n}\n```",
            "```rust\npub fn bf(planet1: &String, planet2: &String) -> Vec<String> {\n    let names = vec![\n        \"Mercury\".to_string(),\n        \"Venus\".to_string(),\n        \"Earth\".to_string(),\n        \"Mars\".to_string(),\n        \"Jupiter\".to_string(),\n        \"Saturn\".to_string(),\n        \"Uranus\".to_string(),\n        \"Neptune\".to_string(),\n    ];\n    \n    match (names.iter().position(|p| p == planet1), names.iter().position(|p| p == planet2)) {\n        (Some(l), Some(r)) => {\n            if l > r {\n                let (l, r) = (r, l);\n            }\n            if l == r {\n                Vec::new()\n            } else {\n                names[(l + 1)..r].to_vec()\n            }\n        },\n        _ => Vec::new(),\n    }\n}\n```",
            "```rust\npub fn sorted_list_sum(lst: &Vec<String>) -> Vec<String> {\n    let mut result: Vec<&str> = lst.iter()\n        .filter(|s| s.len() % 2 == 0)\n        .map(|s| s.as_str())\n        .collect();\n    \n    result.sort_by(|a, b| {\n        a.len().cmp(&b.len()).then_with(|| a.cmp(b))\n    });\n    \n    result.into_iter()\n          .map(String::from)\n          .collect()\n}\n```",
            "```rust\npub fn x_or_y(n: i32, x: i32, y: i32) -> i32 {\n    if n < 2 {\n        return y;\n    }\n    for i in 2..=((n as f64).sqrt() as i32) {\n        if n % i == 0 {\n            return y;\n        }\n    }\n    x\n}\n```",
            "```rust\npub fn double_the_difference(lst: &Vec<f64>) -> i32 {\n    let mut sum = 0;\n    for &n in lst.iter() {\n        if n >= 0.0 && n.fract() == 0.0 && (n as i64) % 2 == 1 {\n            sum += (n * n) as i32;\n        }\n    }\n    sum\n}\n```",
            "```rust\npub fn compare(game: &Vec<i32>, guess: &Vec<i32>) -> Vec<i32> {\n    let mut result = Vec::new();\n    for i in 0..game.len() {\n        result.push((game[i] - guess[i]).abs());\n    }\n    result\n}\n```",
            "```rust\npub fn strongest_extension(class_name: &String, extensions: &Vec<String>) -> String {\n    let mut max_s = std::i32::MIN;\n    let mut max_ext = \"\";\n\n    for ext in extensions.iter() {\n        let upper = ext.matches(|c: char| c.is_uppercase()).count();\n        let lower = ext.matches(|c: char| c.is_lowercase()).count();\n        let s = upper as i32 - lower as i32;\n\n        if s > max_s {\n            max_s = s;\n            max_ext = ext;\n        }\n    }\n\n    format!(\"{}.{}\", class_name, max_ext)\n}\n```",
            "```rust\npub fn cycpattern_check(a: &String, b: &String) -> bool {\n    if a.len() < b.len() {\n        return false;\n    }\n    for i in 0..b.len() {\n        let rotated_b = format!(\"{}{}\", &b[i..], &b[..i]);\n        if a.contains(&rotated_b) {\n            return true;\n        }\n    }\n    false\n}\n```",
            "```rust\npub fn even_odd_count(num: i32) -> Vec<i32> {\n    let ds = num.abs().to_string();\n    let mut even = 0;\n    \n    for c in ds.chars() {\n        if c.to_digit(10).unwrap() % 2 == 0 {\n            even += 1;\n        }\n    }\n    \n    vec![even, (ds.len() as i32) - even]\n}\n```",
            "```rust\npub fn int_to_mini_roman(num: i32) -> String {\n    let values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    let numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    let mut res = String::new();\n    let mut num = num;\n    for i in 0..values.len() {\n        while num >= values[i] {\n            res.push_str(numerals[i]);\n            num -= values[i];\n        }\n    }\n    res\n}\n```",
            "```rust\npub fn right_angle_triangle(a: i32, b: i32, c: i32) -> bool {\n    let mut s = [a, b, c];\n    s.sort();\n    s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n}\n```",
            "```rust\npub fn find_max(words: &Vec<String>) -> String {\n    let mut max_cnt = 0;\n    let mut max_w = \"\".to_string();\n    for w in words {\n        let cnt = w.chars().collect::<std::collections::HashSet<_>>().len();\n        if cnt > max_cnt {\n            max_cnt = cnt;\n            max_w = w.clone();\n        } else if cnt == max_cnt && w < &max_w {\n            max_w = w.clone();\n        }\n    }\n    max_w\n}\n```",
            "```rust\npub fn eat(num: i32, need: i32, remaining: i32) -> Vec<i32> {\n    if need <= remaining {\n        vec![num + need, remaining - need]\n    } else {\n        vec![num + remaining, 0]\n    }\n}\n```",
            "```rust\npub fn do_algebra(operators: &Vec<String>, operands: &Vec<i32>) -> i32 {\n    let mut ops = operators.clone();\n    let mut nums = operands.clone().into_iter();\n    let mut result = nums.next().unwrap();\n\n    while !ops.is_empty() {\n        match ops.remove(0).as_str() {\n            \"**\" => {\n                result = result.pow(nums.next().unwrap() as u32);\n            }\n            \"*\" => {\n                result *= nums.next().unwrap();\n            }\n            \"//\" => {\n                result /= nums.next().unwrap();\n            }\n            \"+\" => {\n                result += nums.next().unwrap();\n            }\n            \"-\" => {\n                result -= nums.next().unwrap();\n            }\n            _ => {}\n        }\n    }\n\n    result\n}\n```",
            "```rust\npub fn solve(s: &String) -> String {\n    if !s.chars().any(|c| c.is_alphabetic()) {\n        return s.chars().rev().collect();\n    }\n    s.chars()\n        .map(|ch| {\n            if ch.is_uppercase() {\n                ch.to_lowercase().to_string()\n            } else if ch.is_lowercase() {\n                ch.to_uppercase().to_string()\n            } else {\n                ch.to_string()\n            }\n        })\n        .collect()\n}\n```",
            "```rust\npub fn string_to_md5(txt: &String) -> Option<String> {\n    if txt.is_empty() {\n        return None;\n    }\n    let md5_hash = format!(\"{:x}\", md5::compute(txt));\n    Some(md5_hash)\n}\n```",
            "```rust\npub fn generate_integers(a: i32, b: i32) -> Vec<i32> {\n    let lower = std::cmp::max(2, std::cmp::min(a, b));\n    let upper = std::cmp::min(8, std::cmp::max(a, b));\n    let mut result = Vec::new();\n    for i in lower..=upper {\n        if i % 2 == 0 {\n            result.push(i);\n        }\n    }\n    result\n}\n```"
        ],
        "dart": [
            "```dart\nbool hasCloseElements(List<double> numbers, double threshold) {\n    for (int i = 0; i < numbers.length; i++) {\n        for (int j = i + 1; j < numbers.length; j++) {\n            if ((numbers[i] - numbers[j]).abs() < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n```",
            "```dart\nList<String> separateParenGroups(String parenString) {\n    List<String> groups = [];\n    List<String> stk = [];\n    String current_group = \"\";\n    String parens = parenString.replaceAll(\" \", \"\");\n    for (int i = 0; i < parens.length; i++) {\n        String ch = parens[i];\n        if (ch == \"(\") {\n            stk.add(ch);\n            current_group += ch;\n        } else if (ch == \")\") {\n            stk.removeLast();\n            current_group += ch;\n            if (stk.isEmpty) {\n                groups.add(current_group);\n                current_group = \"\";\n            }\n        }\n    }\n    return groups;\n}\n```",
            "```dart\ndouble truncateNumber(double num) {\n    return num - num.floor();\n}\n```",
            "```dart\nbool belowZero(List<int> operations) {\n    int balance = 0;\n    for (int op in operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n```",
            "```dart\ndouble meanAbsoluteDeviation(List<double> numbers) {\n    double mean = numbers.reduce((a, b) => a + b) / numbers.length;\n    double deviation = 0;\n    for (double x in numbers) {\n        deviation += (x - mean).abs();\n    }\n    return deviation / numbers.length;\n}\n```",
            "```dart\nList<int> intersperse(List<int> numbers, int delimiter) {\n    List<int> result = [];\n    for (int i = 0; i < numbers.length; i++) {\n        if (i != 0) {\n            result.add(delimiter);\n        }\n        result.add(numbers[i]);\n    }\n    return result;\n}\n```",
            "```dart\nList<int> parseNestedParens(String parenString) {\n    List<int> result = [];\n    List<String> parenGroups = parenString.split(' ');\n    for (String group in parenGroups) {\n        int maxDepth = 0;\n        int depth = 0;\n        for (int i = 0; i < group.length; i++) {\n            String ch = group[i];\n            if (ch == \"(\") {\n                depth++;\n                maxDepth = Math.max(maxDepth, depth);\n            } else if (ch == \")\") {\n                depth--;\n            }\n        }\n        result.add(maxDepth);\n    }\n    return result;\n}\n```",
            "```dart\nList<String> filterBySubstring(List<String> strs, String substring) {\n    return strs.where((s) => s.contains(substring)).toList();\n}\n```",
            "```dart\nList<int> sumProduct(List<int> numbers) {\n    int n_sum = numbers.reduce((a, b) => a + b);\n    int n_product = numbers.fold(1, (carry, item) => carry * item);\n    return [n_sum, n_product];\n}\n```",
            "```dart\nList<int> rollingMax(List<int> numbers) {\n    int maxSoFar = -2147483647; // Equivalent to PHP_INT_MIN\n    List<int> result = [];\n    for (int num in numbers) {\n        maxSoFar = (maxSoFar > num) ? maxSoFar : num;\n        result.add(maxSoFar);\n    }\n    return result;\n}\n```",
            "```dart\nbool isPalindrome(String s) {\n  return s == s.split('').reversed.join('');\n}\n\nString makePalindrome(String s) {\n  if (isPalindrome(s)) {\n    return s;\n  }\n  for (int i = 0; i < s.length; i++) {\n    if (isPalindrome(s.substring(i))) {\n      return s + s.substring(0, i).split('').reversed.join('');\n    }\n  }\n  return '';\n}\n```",
            "```dart\nString stringXor(String a, String b) {\n    String result = '';\n    for (int i = 0; i < a.length; i++) {\n        result += (a[i] == b[i]) ? '0' : '1';\n    }\n    return result;\n}\n```",
            "```dart\nString? longest(List<String> strs) {\n    if (strs.isEmpty) {\n        return null;\n    }\n    String longest_s = strs[0];\n    for (String s in strs) {\n        if (s.length > longest_s.length) {\n            longest_s = s;\n        }\n    }\n    return longest_s;\n}\n```",
            "```dart\nint greatestCommonDivisor(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return greatestCommonDivisor(b, a % b);\n    }\n}\n```",
            "```dart\nList<String> allPrefixes(String s) {\n    List<String> prefixes = [];\n    for (int i = 0; i < s.length; i++) {\n        prefixes.add(s.substring(0, i + 1));\n    }\n    return prefixes;\n}\n```",
            "```dart\nString stringSequence(int n) {\n    return List.generate(n + 1, (index) => index).join(' ');\n}\n```",
            "```dart\nint countDistinctCharacters(String s) {\n    return Set.from(s.toLowerCase()).length;\n}\n```",
            "```dart\nList<int> parseMusic(String musicString) {\n  Map<String, int> durations = {\"o\": 4, \"o|\": 2, \".|\": 1};\n  List<String> notes = musicString.split(' ');\n  return notes.map((note) => durations[note]!).toList();\n}\n```",
            "```dart\nint howManyTimes(String s, String substring) {\n    int times = 0;\n    for (int i = 0; i <= s.length - substring.length; i++) {\n        if (s.substring(i, i + substring.length) == substring) {\n            times++;\n        }\n    }\n    return times;\n}\n```",
            "```dart\nString sortNumbers(String numbers) {\n    Map<String, int> numDict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    };\n\n    List<String> numList = numbers.split(\" \").where((x) => numDict.containsKey(x)).toList();\n\n    numList.sort((a, b) => numDict[a]! - numDict[b]!);\n\n    return numList.join(\" \");\n}\n```",
            "```dart\nList<double> findClosestElements(List<double> numbers) {\n    numbers.sort();\n    double minDiff = double.infinity;\n    List<double> closestPair = [];\n    for (int i = 1; i < numbers.length; i++) {\n        double diff = numbers[i] - numbers[i - 1];\n        if (diff < minDiff) {\n            minDiff = diff;\n            closestPair = [numbers[i - 1], numbers[i]];\n        }\n    }\n    return closestPair;\n}\n```",
            "```dart\nList<double> rescaleToUnit(List<double> numbers) {\n    double minNum = numbers.reduce((a, b) => a < b ? a : b);\n    double maxNum = numbers.reduce((a, b) => a > b ? a : b);\n    if (minNum == maxNum) {\n        return List.filled(numbers.length, 0.0);\n    } else {\n        return numbers.map((num) => (num - minNum) / (maxNum - minNum)).toList();\n    }\n}\n```",
            "```dart\nList<int> filterIntegers(List<Object> values) {\n    return values.where((x) => x is int).toList();\n}\n```",
            "```dart\nint strLength(String s) {\n    return s.length;\n}\n```",
            "```dart\nint largestDivisor(int n) {\n    for (int i = 2; i < n; i++) {\n        if (n % i == 0) {\n            return n ~/ i;\n        }\n    }\n    return 1;\n}\n```",
            "```dart\nList<int> factorize(int n) {\n    List<int> factors = [];\n    int divisor = 2;\n    while (divisor <= n) {\n        if (n % divisor == 0) {\n            factors.add(divisor);\n            n ~/= divisor;\n        } else {\n            divisor++;\n        }\n    }\n    return factors;\n}\n```",
            "```dart\nList<int> removeDuplicates(List<int> numbers) {\n    Map<int, int> counts = {};\n    for (int num in numbers) {\n        if (counts.containsKey(num)) {\n            counts[num] += 1;\n        } else {\n            counts[num] = 1;\n        }\n    }\n    List<int> res = [];\n    for (int num in numbers) {\n        if (counts[num] == 1) {\n            res.add(num);\n        }\n    }\n    return res;\n}\n```",
            "```dart\nString flipCase(String s) {\n    String flipped = '';\n    for (int i = 0; i < s.length; i++) {\n        String ch = s[i];\n        if (!RegExp(r'[a-zA-Z]').hasMatch(ch)) {\n            flipped += ch;\n        } else if (RegExp(r'[a-z]').hasMatch(ch)) {\n            flipped += ch.toUpperCase();\n        } else if (RegExp(r'[A-Z]').hasMatch(ch)) {\n            flipped += ch.toLowerCase();\n        }\n    }\n    return flipped;\n}\n```",
            "```dart\nString concatenate(List<String> strs) {\n    return strs.join(\"\");\n}\n```",
            "```dart\nList<String> filterByPrefix(List<String> strs, String prefixStr) {\n    return strs.where((s) => s.startsWith(prefixStr)).toList();\n}\n```",
            "```dart\nList<int> getPositive(List<int> l) {\n    return l.where((num) => num > 0).toList();\n}\n```",
            "```dart\nbool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n).toInt(); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n```",
            "```dart\ndouble poly(List<int> xs, double x) {\n    double res = 0.0;\n    for (int i = 0; i < xs.length; i++) {\n        res += xs[i] * pow(x, i);\n    }\n    return res;\n}\n\ndouble findZero(List<int> xs) {\n    double x1 = 1.0;\n    double x2 = -1.0;\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2;\n        x2 *= 2;\n    }\n    while ((x1 - x2).abs() > 1e-10) {\n        double mid = (x1 + x2) / 2;\n        if (poly(xs, mid) == 0) {\n            return mid;\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2;\n}\n```",
            "```dart\nList<int> sortThird(List<int> l) {\n  List<int> sortedThird = l.sublist(0, l.length, 3).toList()..sort();\n  return [sortedThird[i ~/ 3] if (i % 3 == 0) else l[i] for (int i in Iterable.generate(l.length))];\n}\n```",
            "```dart\nList<int> listUnique(List<int> l) {\n  return List.from(l.toSet()).toList()..sort();\n}\n```",
            "```dart\nint maxElement(List<int> l) {\n    if (l.isEmpty) {\n        return 0;\n    }\n    return l.reduce((value, element) => value > element ? value : element);\n}\n```",
            "```dart\nint fizzBuzz(int n) {\n    int cnt = 0;\n    for (int i = 0; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            cnt += (i.toString()).split('').where((char) => char == '7').length;\n        }\n    }\n    return cnt;\n}\n```",
            "```dart\nList<int> sortEven(List<int> l) {\n  List<int> sortedEven = l.whereIndex((index) => index % 2 == 0).toList()..sort();\n  return [for (int i in Iterable.generate(l.length)) i % 2 == 0 ? sortedEven[i ~/ 2] : l[i]];\n}\n```",
            "```dart\nString encodeCyclic(String s) {\n    String result = '';\n    for (int i = 0; i < s.length; i += 3) {\n        if (i + 3 > s.length) {\n            result += s.substring(i);\n        } else {\n            result += s.substring(i + 1, i + 3) + s[i];\n        }\n    }\n    return result;\n}\n\nString decodeCyclic(String s) {\n    return encodeCyclic(encodeCyclic(s));\n}\n```",
            "```dart\nbool isPrime(int n) {\n  if (n < 2) return false;\n  for (int i = 2; i <= sqrt(n).toInt(); i++) {\n    if (n % i == 0) return false;\n  }\n  return true;\n}\n\nint primeFib(int n) {\n  List<int> f = [0, 1];\n  int cnt = 0;\n  while (cnt < n) {\n    f = [f[1], f[0] + f[1]];\n    if (isPrime(f[1])) {\n      cnt++;\n    }\n  }\n  return f[1];\n}\n```",
            "```dart\nbool triplesSumToZero(List<int> l) {\n    for (int i = 0; i < l.length; i++) {\n        for (int j = i + 1; j < l.length; j++) {\n            for (int k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n```",
            "```dart\nint carRaceCollision(int n) {\n    return n * n;\n}\n```",
            "```dart\nList<int> incrList(List<int> l) {\n    return l.map((i) => i + 1).toList();\n}\n```",
            "```dart\nbool pairsSumToZero(List<int> l) {\n    Set<int> seen = {};\n    for (int num in l) {\n        if (seen.contains(-num)) {\n            return true;\n        }\n        seen.add(num);\n    }\n    return false;\n}\n```",
            "```dart\nString changeBase(int x, int bas) {\n    if (x == 0) {\n        return \"0\";\n    }\n    List<String> digits = [];\n    while (x > 0) {\n        digits.add((x % bas).toString());\n        x = (x / bas).toInt();\n    }\n    return digits.reversed.join(\"\");\n}\n```",
            "```dart\ndouble triangleArea(int a, int h) {\n    return a * h / 2;\n}\n```",
            "```dart\nint fib4(int n) {\n  List<int> fib = [0, 0, 2, 0];\n  for (int i = 4; i <= n + 1; i++) {\n    fib[i % 4] = fib.reduce((a, b) => a + b);\n  }\n  return fib[n % 4];\n}\n```",
            "```dart\ndouble median(List<double> l) {\n  l.sort();\n  int count = l.length;\n  if (count % 2 != 0) {\n    return l[count ~/ 2];\n  } else {\n    return (l[count ~/ 2] + l[(count ~/ 2) - 1]) / 2;\n  }\n}\n```",
            "```dart\nbool isPalindrome(String txt) {\n    return txt == String.fromCharCodes(txt.codeUnits.reversed.toList());\n}\n```",
            "```dart\nint modp(int n, int p) {\n    int ret = 1;\n    for (int i = 0; i < n; i++) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}\n```",
            "```dart\nString encodeShift(String s) {\n    String result = '';\n    for (var i = 0; i < s.length; i++) {\n        String ch = s[i];\n        int shiftedCharCode = (((ch.codeUnitAt(0) - 97 + 5) % 26) + 97);\n        result += String.fromCharCode(shiftedCharCode);\n    }\n    return result;\n}\n\nString decodeShift(String s) {\n    String result = '';\n    for (var i = 0; i < s.length; i++) {\n        String ch = s[i];\n        int shiftedCharCode = (((ch.codeUnitAt(0) - 97 + 21) % 26) + 97);\n        result += String.fromCharCode(shiftedCharCode);\n    }\n    return result;\n}\n```",
            "```dart\nString removeVowels(String txt) {\n    String vowels = \"aeiouAEIOU\";\n    String result = '';\n    \n    for (int i = 0; i < txt.length; i++) {\n        if (!vowels.contains(txt[i])) {\n            result += txt[i];\n        }\n    }\n    \n    return result;\n}\n```",
            "```dart\nbool belowThreshold(List<int> l, int t) {\n    for (int x in l) {\n        if (x >= t) {\n            return false;\n        }\n    }\n    return true;\n}\n```",
            "```dart\nint add(int x, int y) {\n    return x + y;\n}\n```",
            "```dart\nbool sameChars(String s0, String s1) {\n    return s0.split('').toSet().containsAll(s1.split('')) && \n           s1.split('').toSet().containsAll(s0.split(''));\n}\n```",
            "```dart\nint fib(int n) {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n```",
            "```dart\nbool correctBracketing(String brackets) {\n    int depth = 0;\n    for (int i = 0; i < brackets.length; i++) {\n        if (brackets[i] == \"<\") {\n            depth += 1;\n        } else if (brackets[i] == \">\") {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n```",
            "```dart\nbool monotonic(List<int> l) {\n  List<int> diff = [];\n  for (int i = 0; i < l.length - 1; i++) {\n    diff.add(l[i + 1] - l[i]);\n  }\n  return diff.every((x) => x <= 0) || diff.every((x) => x >= 0);\n}\n```",
            "```dart\nList<int> common(List<int> l1, List<int> l2) {\n    Set<int> set1 = l1.toSet();\n    Set<int> set2 = l2.toSet();\n    set1.intersection(set2);\n    return set1.toList()..sort();\n}\n```",
            "```dart\nint largestPrimeFactor(int n) {\n    int i = 2;\n    while (i * i <= n) {\n        if (n % i != 0) {\n            i += 1;\n        } else {\n            n ~/= i;\n        }\n    }\n    return n;\n}\n```",
            "```dart\nint sumToN(int n) {\n    return Iterable<int>.generate(n + 1).reduce((acc, element) => acc + element);\n}\n```",
            "```dart\nbool correctBracketing(String brackets) {\n  int depth = 0;\n  for (int i = 0; i < brackets.length; i++) {\n    if (brackets[i] == \"(\") {\n      depth += 1;\n    } else if (brackets[i] == \")\") {\n      depth -= 1;\n    }\n    if (depth < 0) {\n      return false;\n    }\n  }\n  return depth == 0;\n}\n```",
            "```dart\nList<int> derivative(List<int> xs) {\n    List<int> result = [];\n    for (int i = 1; i < xs.length; i++) {\n        result.add(xs[i] * i);\n    }\n    return result;\n}\n```",
            "```dart\nint fibfib(int n) {\n    if (n <= 1) {\n        return 0;\n    }\n    int a = 0, b = 0, c = 1;\n    while (n > 2) {\n        a = b;\n        b = c;\n        c = a + b + c;\n        n -= 1;\n    }\n    return c;\n}\n```",
            "```dart\nint vowelsCount(String s) {\n    String vowels = \"aeiou\";\n    int cnt = 0;\n    for (int i = 0; i < s.length; i++) {\n        if (vowels.contains(s[i].toLowerCase()) || (i == s.length - 1 && s[i].toLowerCase() == \"y\")) {\n            cnt++;\n        }\n    }\n    return cnt;\n}\n```",
            "```dart\nString circularShift(int x, int shift) {\n    String x_str = x.toString();\n    if (shift > x_str.length) {\n        return new String.fromCharCodes(x_str.codeUnits.reversed);\n    } else {\n        return x_str.substring(x_str.length - shift) + x_str.substring(0, x_str.length - shift);\n    }\n}\n```",
            "```dart\nint digitSum(String s) {\n    int sum = 0;\n    for (int i = 0; i < s.length; i++) {\n        String c = s[i];\n        if (c.toUpperCase() == c && c.codeUnitAt(0) >= 'A'.codeUnitAt(0) && c.codeUnitAt(0) <= 'Z'.codeUnitAt(0)) {\n            sum += c.codeUnitAt(0);\n        }\n    }\n    return sum;\n}\n```",
            "```dart\nint fruitDistribution(String s, int n) {\n  List<String> words = s.split(' ');\n  int applesIndex = words.indexOf(\"apples\") - 1;\n  int orangesIndex = words.indexOf(\"oranges\") - 1;\n  int apples = int.parse(words[applesIndex]);\n  int oranges = int.parse(words[orangesIndex]);\n  return n - apples - oranges;\n}\n```",
            "```dart\nList<int> pluck(List<int> arr) {\n    List<int> evens = arr.where((n) => n % 2 == 0).toList();\n    \n    if (evens.isEmpty) {\n        return [];\n    }\n    \n    int minEven = evens.reduce(min);\n    int index = arr.indexOf(minEven);\n    \n    return [minEven, index];\n}\n```",
            "```dart\nint search(List<int> lst) {\n    Map<int, int> freqs = {};\n    for (int n in lst) {\n        if (freqs.containsKey(n)) {\n            freqs[n]++;\n        } else {\n            freqs[n] = 1;\n        }\n    }\n    List<int> goodVals = [];\n    freqs.forEach((k, v) {\n        if (v >= k) {\n            goodVals.add(k);\n        }\n    });\n    return goodVals.isNotEmpty ? goodVals.reduce(max) : -1;\n}\n```",
            "```dart\nList<int> strangeSortList(List<int> lst) {\n    List<int> sl = List.from(lst);\n    sl.sort();\n    List<int> result = [];\n    int left = 0;\n    int right = sl.length - 1;\n    while (left <= right) {\n        result.add(sl[left]);\n        left++;\n        if (left <= right) {\n            result.add(sl[right]);\n            right--;\n        }\n    }\n    return result;\n}\n```",
            "```dart\ndouble triangleArea(int a, int b, int c) {\n    if (a + b > c && a + c > b && b + c > a) {\n        double s = (a + b + c) / 2.0;\n        return sqrt(s * (s - a) * (s - b) * (s - c));\n    } else {\n        return -1.0;\n    }\n}\n```",
            "```dart\nbool willItFly(List<int> q, int w) {\n    if (q.isEmpty) {\n        return false;\n    }\n    bool is_palin = true;\n    for (int i = 0; i < q.length; i++) {\n        if (q[i] != q[q.length - i - 1]) {\n            is_palin = false;\n            break;\n        }\n    }\n    int total = q.reduce((a, b) => a + b);\n    return is_palin && total <= w;\n}\n```",
            "```dart\nint smallestChange(List<int> arr) {\n    int ans = 0;\n    for (int i = 0; i < arr.length / 2; i++) {\n        if (arr[i] != arr[arr.length - i - 1]) {\n            ans += 1;\n        }\n    }\n    return ans;\n}\n```",
            "```dart\nList<String> totalMatch(List<String> lst1, List<String> lst2) {\n    int cnt1 = lst1.fold(0, (carry, item) => carry + item.length);\n    int cnt2 = lst2.fold(0, (carry, item) => carry + item.length);\n\n    return cnt1 <= cnt2 ? lst1 : lst2;\n}\n```",
            "```dart\nbool is_prime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n).toInt(); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nbool isMultiplyPrime(int a) {\n    int cnt = 0;\n    for (int i = 2; i <= a; i++) {\n        if (is_prime(i)) {\n            while (a % i == 0) {\n                cnt++;\n                a ~/= i;\n            }\n        }\n    }\n    return cnt == 3;\n}\n```",
            "```dart\nbool isSimplePower(int x, int n) {\n    if (n < 2) {\n        return x == n;\n    }\n    int tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp == x;\n}\n```",
            "```dart\nbool isCube(int a) {\n    a = a.abs();\n    int root = (a.pow(1.0 / 3.0)).round().toInt();\n    return root * root * root == a;\n}\n```",
            "```dart\nint hexKey(String num) {\n    return num.split('').where((x) => \"2357BD\".contains(x)).length;\n}\n```",
            "```dart\nString decimalToBinary(int dec) {\n    String binary = dec.toRadixString(2);\n    return \"db${binary}db\";\n}\n```",
            "```dart\nbool isHappy(String s) {\n    if (s.length < 3) {\n        return false;\n    }\n    for (int i = 0; i <= s.length - 3; i++) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n```",
            "```dart\nList<String> numericalLetterGrade(List<double> grades) {\n    List<String> result = [];\n    for (double g in grades) {\n        if (g == 4.0) {\n            result.add(\"A+\");\n        } else if (g > 3.7) {\n            result.add(\"A\");\n        } else if (g > 3.3) {\n            result.add(\"A-\");\n        } else if (g > 3.0) {\n            result.add(\"B+\");\n        } else if (g > 2.7) {\n            result.add(\"B\");\n        } else if (g > 2.3) {\n            result.add(\"B-\");\n        } else if (g > 2.0) {\n            result.add(\"C+\");\n        } else if (g > 1.7) {\n            result.add(\"C\");\n        } else if (g > 1.3) {\n            result.add(\"C-\");\n        } else if (g > 1.0) {\n            result.add(\"D+\");\n        } else if (g > 0.7) {\n            result.add(\"D\");\n        } else if (g > 0.0) {\n            result.add(\"D-\");\n        } else {\n            result.add(\"E\");\n        }\n    }\n    return result;\n}\n```",
            "```dart\nbool primeLength(String s) {\n    int length = s.length;\n    if (length < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(length); i++) {\n        if (length % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n```",
            "```dart\nint startsOneEnds(int n) {\n    if (n == 1) {\n        return 1;\n    }\n    return 2 * 9 * pow(10, n - 2).toInt();\n}\n```",
            "```dart\nString solve(int n) {\n    int digits_sum = n.toString().split('').map(int.parse).reduce((a, b) => a + b);\n    return digits_sum.toRadixString(2);\n}\n```",
            "```dart\nint add(List<int> lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 2 == 1 && lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n```",
            "```dart\nString antiShuffle(String s) {\n    List<String> words = s.split(\" \");\n    List<String> sortedWords = words.map((word) {\n        List<String> chars = word.split(\"\");\n        chars.sort();\n        return chars.join(\"\");\n    }).toList();\n    return sortedWords.join(\" \");\n}\n```",
            "```dart\nList<List<int>> getRow(List<List<int>> lst, int x) {\n    List<List<int>> coords = [];\n    for (int i = 0; i < lst.length; i++) {\n        for (int j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                coords.add([i, j]);\n            }\n        }\n    }\n    coords.sort((a, b) {\n        if (a[0] == b[0]) {\n            return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n    return coords;\n}\n```",
            "```dart\nList<int> sortArray(List<int> arr) {\n    if (arr.length == 0) {\n        return [];\n    }\n    if ((arr[0] + arr.last) % 2 == 0) {\n        arr.sort((a, b) => b.compareTo(a));\n    } else {\n        arr.sort();\n    }\n    return arr;\n}\n```",
            "```dart\nString encrypt(String s) {\n    String result = '';\n    for (int i = 0; i < s.length; i++) {\n        String ch = s[i];\n        int shifted = ch.codeUnitAt(0) + 4;\n        if (shifted > 'z'.codeUnitAt(0)) {\n            shifted -= 26;\n        }\n        result += String.fromCharCode(shifted);\n    }\n    return result;\n}\n```",
            "```dart\nint? nextSmallest(List<int> lst) {\n    var sl = lst.toSet().toList();\n    sl.sort();\n    if (sl.length < 2) {\n        return null;\n    }\n    return sl[1];\n}\n```",
            "```dart\nint isBored(String s) {\n    List<String> sentences = s.split(RegExp(r'[.!?]\\s*'));\n    int count = 0;\n    for (String sentence in sentences) {\n        if (sentence.length >= 2 && sentence.startsWith(\"I \")) {\n            count++;\n        }\n    }\n    return count;\n}\n```",
            "```dart\nbool anyInt(Object x, Object y, Object z) {\n    if (x is int && y is int && z is int) {\n        if ((x + y == z) || (x + z == y) || (y + z == x)) {\n            return true;\n        }\n    }\n    return false;\n}\n```",
            "```dart\nString encode(String message) {\n    String vowels = \"aeiouAEIOU\";\n    List<String> result = [];\n    for (int i = 0; i < message.length; i++) {\n        String ch = message[i];\n        if (RegExp(r'[a-zA-Z]').hasMatch(ch)) {\n            String ch1 = ch.toLowerCase() == ch ? ch.toUpperCase() : ch.toLowerCase();\n            if (vowels.indexOf(ch1) != -1) {\n                ch1 = String.fromCharCode(ch1.codeUnitAt(0) + 2);\n            }\n            result.add(ch1);\n        } else {\n            result.add(ch);\n        }\n    }\n    return result.join(\"\");\n}\n```",
            "```dart\nbool isPrime(int n) {\n  if (n < 2) return false;\n  for (int i = 2; i <= sqrt(n); i++) {\n    if (n % i == 0) return false;\n  }\n  return true;\n}\n\nint skjkasdkd(List<int> lst) {\n  List<int> primes = lst.where(isPrime).toList();\n  if (primes.isEmpty) return 0;\n  String largest = primes.reduce((a, b) => a > b ? a : b).toString();\n  return largest.split('').map(int.parse).reduce((a, b) => a + b);\n}\n```",
            "```dart\nbool checkDictCase(Map<String, String> d) {\n    if (d.isEmpty) {\n        return false;\n    }\n    bool allLower = true;\n    bool allUpper = true;\n    for (var key in d.keys) {\n        if (!key.toLowerCase().contains(key)) {\n            allLower = false;\n        }\n        if (!key.toUpperCase().contains(key)) {\n            allUpper = false;\n        }\n    }\n    return allLower || allUpper;\n}\n```",
            "```dart\nList<int> countUpTo(int n) {\n    List<int> primes = [];\n    for (int num = 2; num < n; num++) {\n        bool isPrime = true;\n        for (int p in primes) {\n            if (num % p == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            primes.add(num);\n        }\n    }\n    return primes;\n}\n```",
            "```dart\nint multiply(int a, int b) {\n    return (a.abs() % 10) * (b.abs() % 10);\n}\n```",
            "```\nint countUpper(String s) {\n    String vowels = \"AEIOU\";\n    int count = 0;\n    for (int i = 0; i < s.length; i++) {\n        if (i % 2 == 0 && vowels.contains(s[i])) {\n            count++;\n        }\n    }\n    return count;\n}\n```",
            "```dart\nint closestInteger(String value) {\n    double num = double.parse(value);\n    if (num >= 0) {\n        return (num + 0.5).toInt();\n    } else {\n        return (num - 0.5).toInt();\n    }\n}\n```",
            "```dart\nList<int> makeAPile(int n) {\n    List<int> pile = [];\n    for (int i = 0; i < n; i++) {\n        pile.add(n + 2 * i);\n    }\n    return pile;\n}\n```",
            "```dart\nList<String> wordsString(String s) {\n    return s.split(RegExp(r',|\\s+')).where((w) => w.length > 0).toList();\n}\n```",
            "```dart\nint chooseNum(int x, int y) {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 == 0) {\n        return y;\n    }\n    return x != y ? y - 1 : -1;\n}\n```",
            "```dart\nString? roundedAvg(int n, int m) {\n    if (n > m) {\n        return null;\n    }\n    int r_avg = ((m + n) / 2.0 + 0.5).toInt();\n    return r_avg.toRadixString(2);\n}\n```",
            "```dart\nbool allDigitsOdd(String s) {\n  return s.split('').every((digit) => int.parse(digit) % 2 != 0);\n}\n\nList<int> uniqueDigits(List<int> x) {\n  return x.where((num) => allDigitsOdd(num.toString())).toList()..sort();\n}\n```",
            "```dart\nList<String> byLength(List<int> arr) {\n    List<String> digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    List<int> filteredArr = arr.where((x) => 1 <= x && x <= 9).toList();\n    filteredArr.sort((a, b) => b.compareTo(a));\n    List<String> result = filteredArr.map((x) => digitNames[x - 1]).toList();\n    return result;\n}\n```",
            "```dart\nList<int> f(int n) {\n    List<int> nums = List.generate(n, (index) => index + 1);\n    List<int> result = [];\n    for (int i = 0; i < nums.length; i++) {\n        if ((i + 1) % 2 != 0) {\n            result.add(nums.sublist(0, i + 1).reduce((a, b) => a + b));\n        } else {\n            int product = nums.sublist(0, i + 1).fold(1, (prod, num) => prod * num);\n            result.add(product);\n        }\n    }\n    return result;\n}\n```",
            "```dart\nList<int> evenOddPalindrome(int n) {\n    List<int> cnt = [0, 0];\n    for (int i = 1; i <= n; i++) {\n        String strI = i.toString();\n        if (strI.split('').reversed.join() == strI) {\n            cnt[i % 2]++;\n        }\n    }\n    return cnt;\n}\n```",
            "```dart\nint digitsSum(int n) {\n  String nStr = n.toString();\n  if (n >= 0) {\n    return nStr.split('').map((d) => int.parse(d)).reduce((a, b) => a + b);\n  } else {\n    return int.parse(nStr.substring(0, 2)) * 2 + digitsSum(n.abs());\n  }\n}\n\nint countNums(List<int> arr) {\n  return arr.where((n) => digitsSum(n) > 0).length;\n}\n```",
            "```dart\nbool moveOneBall(List<int> arr) {\n    if (arr.isEmpty) {\n        return true;\n    }\n    List<int> sortedArr = List.from(arr)..sort();\n    for (int i = 0; i < arr.length; i++) {\n        if (arr.sublist(i).join(',') == sortedArr.sublist(0, arr.length - i).join(',') &&\n            arr.sublist(0, i).join(',') == sortedArr.sublist(arr.length - i).join(',')) {\n            return true;\n        }\n    }\n    return false;\n}\n```",
            "```dart\nString canExchange(List<int> lst1, List<int> lst2) {\n    int odd_cnt = 0;\n    for (int num in lst1) {\n        if (num % 2 != 0) {\n            odd_cnt++;\n        }\n    }\n\n    int even_cnt = 0;\n    for (int num in lst2) {\n        if (num % 2 == 0) {\n            even_cnt++;\n        }\n    }\n\n    return even_cnt >= odd_cnt ? \"YES\" : \"NO\";\n}\n```",
            "```dart\nMap<String, int> histogram(String test) {\n    Map<String, int> freq = {};\n    List<String> words = test.split(\" \").where((w) => w.length > 0).toList();\n    for (String w in words) {\n        if (!freq.containsKey(w)) {\n            freq[w] = 0;\n        }\n        freq[w]++;\n    }\n    Map<String, int> result = {};\n    if (freq.isNotEmpty) {\n        int maxFreq = freq.values.reduce((a, b) => a > b ? a : b);\n        for (MapEntry<String, int> entry in freq.entries) {\n            if (entry.value == maxFreq) {\n                result[entry.key] = entry.value;\n            }\n        }\n    }\n    return result;\n}\n```",
            "```dart\nList<String> reverseDelete(String s, String c) {\n  List<String> charsToRemove = c.split('');\n  String s1 = s.replaceAllAny(RegExp(charsToRemove.join('|')), '');\n  return [s1, isPalindrome(s1) ? \"yes\" : \"no\"];\n}\n\nbool isPalindrome(String s) {\n  return s == s.split('').reversed.join('');\n}\n```",
            "```dart\nList<String> oddCount(List<String> lst) {\n    List<String> result = [];\n    for (String num in lst) {\n        int n = 0;\n        for (int i = 0; i < num.length; i++) {\n            if (num.codeUnitAt(i) % 2 == 1) {\n                n++;\n            }\n        }\n        String rs = \"the number of odd elements in the string i of the input.\";\n        result.add(rs.replaceFirst(\"i\", n.toString()));\n    }\n    return result;\n}\n```",
            "```dart\nint minSubArraySum(List<int> nums) {\n    int min_sum = 0;\n    int cur_sum = 0;\n    for (int n in nums) {\n        cur_sum = (cur_sum + n < 0) ? cur_sum + n : 0;\n        min_sum = (cur_sum < min_sum) ? cur_sum : min_sum;\n    }\n    if (min_sum == 0) {\n        min_sum = nums.reduce((a, b) => a < b ? a : b);\n    }\n    return min_sum;\n}\n```",
            "```dart\nint maxFill(List<List<int>> grid, int capacity) {\n    int total = 0;\n    for (var arr in grid) {\n        total += (arr.reduce((a, b) => a + b) / capacity).ceil();\n    }\n    return total;\n}\n```",
            "```dart\nList<int> sortArray(List<int> arr) {\n  arr.sort((a, b) {\n    int countA = a.toRadixString(2).length - a.toRadixString(2).replaceAll('0', '').length;\n    int countB = b.toRadixString(2).length - b.toRadixString(2).replaceAll('0', '').length;\n    if (countA == countB) {\n      return a.compareTo(b);\n    }\n    return countA.compareTo(countB);\n  });\n  return arr;\n}\n```",
            "```dart\nList<String> selectWords(String s, int n) {\n    String consonants = \"bcdfghjklmnpqrstvwxyz\";\n    List<String> words = s.split(\" \").where((w) => w.isNotEmpty).toList();\n    return words.where((w) {\n        int consonantCount = 0;\n        for (String c in w.toLowerCase().split(\"\")) {\n            if (consonants.contains(c)) {\n                consonantCount++;\n            }\n        }\n        return consonantCount == n;\n    }).toList();\n}\n```",
            "```dart\nString getClosestVowel(String word) {\n    String vowels = \"aeiouAEIOU\";\n    for (int i = word.length - 2; i > 0; i--) {\n        if (vowels.contains(word[i]) && !vowels.contains(word[i - 1]) && !vowels.contains(word[i + 1])) {\n            return word[i];\n        }\n    }\n    return \"\";\n}\n```",
            "```dart\nString matchParens(List<String> lst) {\n  bool check(String s) {\n    int depth = 0;\n    for (int i = 0; i < s.length; i++) {\n      String ch = s[i];\n      if (ch == \"(\") {\n        depth += 1;\n      } else {\n        depth -= 1;\n      }\n      if (depth < 0) {\n        return false;\n      }\n    }\n    return depth == 0;\n  }\n\n  String s1 = lst[0] + lst[1];\n  String s2 = lst[1] + lst[0];\n  return check(s1) || check(s2) ? \"Yes\" : \"No\";\n}\n```",
            "```dart\nList<int> maximum(List<int> arr, int k) {\n    if (k == 0) {\n        return [];\n    }\n    return List.from(arr)..sort((a, b) => b - a).sublist(0, k);\n}\n```",
            "```dart\nint solution(List<int> lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n```",
            "```dart\nint addElements(List<int> arr, int k) {\n    int sum = 0;\n    for (int i = 0; i < min(k, arr.length); i++) {\n        if (arr[i].toString().length <= 2) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n```",
            "```dart\nList<int> getOddCollatz(int n) {\n    List<int> collatz = [1];\n    while (n != 1) {\n        if (n % 2 != 0) {\n            collatz.add(n);\n            n = 3 * n + 1;\n        } else {\n            n ~/= 2;\n        }\n    }\n    collatz.sort();\n    return collatz;\n}\n```",
            "```dart\nbool validDate(String date) {\n    if (date.length != 10 || date[2] != '-' || date[5] != '-') {\n        return false;\n    }\n    int m = int.parse(date.substring(0, 2));\n    int d = int.parse(date.substring(3, 5));\n    if ([1, 3, 5, 7, 8, 10, 12].contains(m) && d >= 1 && d <= 31) {\n        return true;\n    }\n    if ([4, 6, 9, 11].contains(m) && d >= 1 && d <= 30) {\n        return true;\n    }\n    if (m == 2 && d >= 1 && d <= 29) {\n        return true;\n    }\n    return false;\n}\n```",
            "```dart\nList<String> splitWords(String txt) {\n    if (txt.contains(' ')) {\n        return txt.split(' ');\n    } else if (txt.contains(',')) {\n        return txt.split(',');\n    } else {\n        int count = 0;\n        for (int i = 0; i < txt.length; i++) {\n            String c = txt[i];\n            if (c.toLowerCase() == c && c.codeUnitAt(0) % 2 == 0) {\n                count++;\n            }\n        }\n        return [count.toString()];\n    }\n}\n```",
            "```dart\nbool isSorted(List<int> lst) {\n    if (lst.isEmpty) {\n        return true;\n    }\n\n    for (int i = 1; i < lst.length; i++) {\n        if (lst[i - 1] > lst[i]) {\n            return false;\n        }\n    }\n\n    Map<int, int> freq = {};\n    for (var num in lst) {\n        freq[num] = (freq[num] ?? 0) + 1;\n    }\n\n    for (var count in freq.values) {\n        if (count > 2) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```",
            "```dart\nbool isPrime(int n) {\n  if (n < 2) {\n    return false;\n  }\n  for (int i = 2; i <= sqrt(n).floor(); i++) {\n    if (n % i == 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\nString intersection(List<int> interval1, List<int> interval2) {\n  int l = max(interval1[0], interval2[0]);\n  int r = min(interval1[1], interval2[1]);\n  int length = r - l;\n  return (length > 0 && isPrime(length)) ? \"YES\" : \"NO\";\n}\n```",
            "```dart\nint? prodSigns(List<int> arr) {\n    if (arr.isEmpty) {\n        return null;\n    }\n    if (arr.contains(0)) {\n        return 0;\n    }\n    int negCount = arr.where((n) => n < 0).length;\n    int sign = (negCount % 2 == 1) ? -1 : 1;\n    return sign * arr.map((n) => n.abs()).reduce((a, b) => a + b);\n}\n```",
            "```dart\nList<int> minPath(List<List<int>> grid, int k) {\n  int n = grid.length;\n  int min_val = n * n + 1;\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < n; j++) {\n      if (grid[i][j] == 1) {\n        List<int> temp = [];\n        if (i != 0) {\n          temp.add(grid[i - 1][j]);\n        }\n        if (j != 0) {\n          temp.add(grid[i][j - 1]);\n        }\n        if (i != n - 1) {\n          temp.add(grid[i + 1][j]);\n        }\n        if (j != n - 1) {\n          temp.add(grid[i][j + 1]);\n        }\n        min_val = temp.reduce((a, b) => a < b ? a : b);\n      }\n    }\n  }\n  List<int> result = [];\n  for (int i = 0; i < k; i++) {\n    result.add((i % 2 == 0) ? 1 : min_val);\n  }\n  return result;\n}\n```",
            "```dart\nList<int> tri(int n) {\n    if (n == 0) {\n        return [1];\n    }\n    List<int> seq = [1, 3];\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0) {\n            seq.add(i / 2 + 1);\n        } else {\n            seq.add(seq[i - 1] + seq[i - 2] + (i + 3) / 2);\n        }\n    }\n    return seq;\n}\n```",
            "```dart\nint digits(int n) {\n    List<int> odds = (n.toString()).split('').map((d) => int.parse(d)).where((d) => d % 2 == 1).toList();\n    if (odds.isNotEmpty) {\n        return odds.reduce((a, b) => a * b);\n    } else {\n        return 0;\n    }\n}\n```",
            "```dart\nbool isNested(String s) {\n    List<int> openIdx = [];\n    List<int> closeIdx = [];\n    \n    for (int i = 0; i < s.length; i++) {\n        if (s[i] == '[') {\n            openIdx.add(i);\n        } else if (s[i] == ']') {\n            closeIdx.add(i);\n        }\n    }\n    \n    closeIdx = closeIdx.reversed.toList();\n    int cnt = 0;\n    int i = 0;\n    int l = closeIdx.length;\n    \n    for (int idx in openIdx) {\n        if (i < l && idx < closeIdx[i]) {\n            cnt += 1;\n            i += 1;\n        }\n    }\n    \n    return cnt >= 2;\n}\n```",
            "```dart\nint sumSquares(List<double> lst) {\n    return lst.map((n) => (n.ceil() * n.ceil())).reduce((a, b) => a + b);\n}\n```",
            "```dart\nbool checkIfLastCharIsALetter(String txt) {\n    if (txt.isEmpty) {\n        return false;\n    }\n    String last = txt.substring(txt.lastIndexOf(' ') + 1);\n    return last.length == 1 && last.codeUnitAt(0).isLetter;\n}\n```",
            "```dart\nint canArrange(List<int> arr) {\n    if (arr.length <= 1) {\n        return -1;\n    }\n    List<int> idx = [];\n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i] < arr[i - 1]) {\n            idx.add(i);\n        }\n    }\n    return idx.isNotEmpty ? idx.reduce(max) : -1;\n}\n```",
            "```dart\nList<int?> largestSmallestIntegers(List<int> lst) {\n    List<int> neg = lst.where((i) => i < 0).toList();\n    List<int> pos = lst.where((i) => i > 0).toList();\n    int? max_neg = neg.isNotEmpty ? neg.reduce(max) : null;\n    int? min_pos = pos.isNotEmpty ? pos.reduce(min) : null;\n    return [max_neg, min_pos];\n}\n```",
            "```dart\ndouble? compareOne(Object a, Object b) {\n  double anyToReal(o) {\n    if (o is String) {\n      return double.parse(o.replaceAll(',', '.'));\n    } else if (o is int || o is double) {\n      return o.toDouble();\n    } else {\n      throw ArgumentError(\"Type Error\");\n    }\n  }\n\n  double a1 = anyToReal(a);\n  double b1 = anyToReal(b);\n  \n  if (a1 == b1) {\n    return null;\n  } else if (a1 > b1) {\n    return a1;\n  } else {\n    return b1;\n  }\n}\n```",
            "```dart\nbool isEqualToSumEven(int n) {\n    return n % 2 == 0 && n >= 8;\n}\n```",
            "```dart\nint specialFactorial(int n) {\n  int fact = 1;\n  int result = 1;\n  for (int i = 1; i <= n; i++) {\n    fact *= i;\n    result *= fact;\n  }\n  return result;\n}\n```",
            "```dart\nString fixSpaces(String txt) {\n  return txt.replaceAllMapped(new RegExp(r\"\\s{3,}\"), (match) => \"-\").replaceAll(\" \", \"_\");\n}\n```",
            "```dart\nString fileNameCheck(String fileName) {\n    List<String> suf = [\"txt\", \"exe\", \"dll\"];\n    List<String> lst = fileName.split(\".\");\n    if (lst.length != 2 || !suf.contains(lst[1]) || lst[0].isEmpty || !RegExp(r'^[a-zA-Z]').hasMatch(lst[0]) || RegExp(r'\\d').allMatches(lst[0]).length > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n```",
            "```dart\nint sumSquares(List<int> lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            result += lst[i] * lst[i];\n        } else if (i % 4 == 0) {\n            result += lst[i] * lst[i] * lst[i];\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n```",
            "```dart\nString wordsInSentence(String sentence) {\n    List<String> words = sentence.split(\" \");\n    List<String> primeWords = words.where((word) {\n        int length = word.length;\n        if (length < 2) {\n            return false;\n        }\n        for (int i = 2; i <= sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }).toList();\n    return primeWords.join(\" \");\n}\n```",
            "```dart\nbool simplify(String x, String n) {\n    List<String> xs = x.split(\"/\");\n    List<String> ns = n.split(\"/\");\n    int num = int.parse(xs[0]) * int.parse(ns[0]);\n    int den = int.parse(xs[1]) * int.parse(ns[1]);\n    return num % den == 0;\n}\n```",
            "```dart\nint digitsSum(int n) {\n  String nStr = n.toString();\n  if (n >= 0) {\n    return nStr.split('').map(int.parse).reduce((a, b) => a + b);\n  } else {\n    int firstTwoDigits = int.parse(nStr.substring(0, 2));\n    return firstTwoDigits * 2 + digitsSum(n.abs());\n  }\n}\n\nList<int> orderByPoints(List<int> nums) {\n  nums.sort((a, b) => digitsSum(a).compareTo(digitsSum(b)));\n  return nums;\n}\n```",
            "```dart\nint specialFilter(List<int> nums) {\n    String odds = \"13579\";\n    int count = 0;\n    for (int n in nums) {\n        if (n > 10 && n % 2 == 1 && odds.indexOf(n.toString()[0]) != -1) {\n            count++;\n        }\n    }\n    return count;\n}\n```",
            "```dart\nint getMaxTriples(int n) {\n    List<int> c = [0, 0, 0];\n    for (int i = 1; i <= n; i++) {\n        int a = i * i - i + 1;\n        c[a % 3]++;\n    }\n    return c[0] * c[1] * c[2] + ((c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) ~/ 6);\n}\n```",
            "```dart\nList<String> bf(String planet1, String planet2) {\n  List<String> names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  if (!names.contains(planet1) || !names.contains(planet2)) {\n    return [];\n  }\n  int l = names.indexOf(planet1);\n  int r = names.indexOf(planet2);\n  if (l > r) {\n    var temp = l;\n    l = r;\n    r = temp;\n  }\n  if (l == r) {\n    return [];\n  }\n  return names.sublist(l + 1, r);\n}\n```",
            "```dart\nList<String> sortedListSum(List<String> lst) {\n    List<String> result = lst.where((s) => s.length % 2 == 0).toList();\n    \n    result.sort((a, b) {\n        int lengthComparison = a.length - b.length;\n        if (lengthComparison != 0) {\n            return lengthComparison;\n        }\n        return a.compareTo(b);\n    });\n    \n    return result;\n}\n```",
            "```dart\nint xOrY(int n, int x, int y) {\n    if (n < 2) {\n        return y;\n    }\n    for (int i = 2; i <= (n).floor().sqrt(); i++) {\n        if (n % i == 0) {\n            return y;\n        }\n    }\n    return x;\n}\n```",
            "```dart\nint doubleTheDifference(List<double> lst) {\n    int sum = 0;\n    for (double n in lst) {\n        if (n >= 0 && n % 2 == 1) {\n            sum += n * n;\n        }\n    }\n    return sum;\n}\n```",
            "```dart\nList<int> compare(List<int> game, List<int> guess) {\n    List<int> result = [];\n    for (int i = 0; i < game.length; i++) {\n        result.add((game[i] - guess[i]).abs());\n    }\n    return result;\n}\n```",
            "```dart\nString strongestExtension(String className, List<String> extensions) {\n    int max_s = -9007199254740991;\n    String max_ext = \"\";\n    for (var ext in extensions) {\n        int upper = RegExp(r'[A-Z]').allMatches(ext).length;\n        int lower = RegExp(r'[a-z]').allMatches(ext).length;\n        int s = upper - lower;\n        if (s > max_s) {\n            max_s = s;\n            max_ext = ext;\n        }\n    }\n    return \"$className.$max_ext\";\n}\n```",
            "```dart\nbool cycpatternCheck(String a, String b) {\n    if (a.length < b.length) {\n        return false;\n    }\n    for (int i = 0; i < b.length; i++) {\n        String rotatedB = b.substring(i) + b.substring(0, i);\n        if (a.contains(rotatedB)) {\n            return true;\n        }\n    }\n    return false;\n}\n```",
            "```dart\nList<int> evenOddCount(int num) {\n    String ds = (num.abs()).toString();\n    int even = 0;\n    \n    for (int i = 0; i < ds.length; i++) {\n        if (int.parse(ds[i]) % 2 == 0) {\n            even++;\n        }\n    }\n    \n    return [even, ds.length - even];\n}\n```",
            "```dart\nString intToMiniRoman(int num) {\n    final values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    final numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    final StringBuffer res = StringBuffer();\n    for (int i = 0; i < values.length; i++) {\n        while (num >= values[i]) {\n            res.write(numerals[i]);\n            num -= values[i];\n        }\n    }\n    return res.toString();\n}\n```",
            "```dart\nbool rightAngleTriangle(int a, int b, int c) {\n    List<int> s = [a, b, c];\n    s.sort();\n    return (s[0] * s[0]) + (s[1] * s[1]) == (s[2] * s[2]);\n}\n```",
            "```dart\nString findMax(List<String> words) {\n    int maxCnt = 0;\n    String maxW = \"\";\n    for (var w in words) {\n        int cnt = w.split('').toSet().length;\n        if (cnt > maxCnt) {\n            maxCnt = cnt;\n            maxW = w;\n        } else if (cnt == maxCnt) {\n            maxW = maxW.compareTo(w) < 0 ? maxW : w;\n        }\n    }\n    return maxW;\n}\n```",
            "```dart\nList<int> eat(int num, int need, int remaining) {\n    if (need <= remaining) {\n        return [num + need, remaining - need];\n    } else {\n        return [num + remaining, 0];\n    }\n}\n```",
            "```dart\nint doAlgebra(List<String> operators, List<int> operands) {\n    var ops = operators;\n    var nums = operands;\n    int i = ops.length - 1;\n    while (i >= 0) {\n        if (ops[i] == \"**\") {\n            nums[i] = pow(nums[i], nums[i + 1]).toInt();\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n        }\n        i -= 1;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] == \"*\") {\n            nums[i] = nums[i] * nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i -= 1;\n        } elseif (ops[i] == \"//\") {\n            nums[i] = nums[i] ~/ nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] == \"+\") {\n            nums[i] = nums[i] + nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i -= 1;\n        } elseif (ops[i] == \"-\") {\n            nums[i] = nums[i] - nums[i + 1];\n            nums.removeAt(i + 1);\n            ops.removeAt(i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    return nums[0];\n}\n```",
            "```dart\nString solve(String s) {\n  if (!RegExp(r'[a-zA-Z]').hasMatch(s)) {\n    return s.split('').reversed.join();\n  }\n  List<String> result = [];\n  for (int i = 0; i < s.length; i++) {\n    String ch = s[i];\n    if (!ch.contains(RegExp(r'[a-zA-Z]'))) {\n      result.add(ch);\n    } else if (ch == ch.toUpperCase()) {\n      result.add(ch.toLowerCase());\n    } else if (ch == ch.toLowerCase()) {\n      result.add(ch.toUpperCase());\n    }\n  }\n  return result.join('');\n}\n```",
            "```dart\nString? stringToMd5(String txt) {\n    if (txt.isEmpty) {\n        return null;\n    }\n    List<int> bytes = utf8.encode(txt);\n    Digest digest = md5.convert(bytes);\n    String md5_hash = digest.toString();\n    return md5_hash;\n}\n```",
            "```dart\nList<int> generateIntegers(int a, int b) {\n    int lower = max(2, min(a, b));\n    int upper = min(8, max(a, b));\n    List<int> result = [];\n    for (int i = lower; i <= upper; i++) {\n        if (i % 2 == 0) {\n            result.add(i);\n        }\n    }\n    return result;\n}\n```"
        ],
        "javascript": [
            "```javascript\n/**\n * @param {Array<number>} numbers\n * @param {number} threshold\n * @returns {boolean}\n */\nexport const hasCloseElements = (numbers, threshold) => {\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n```",
            "```javascript\n/**\n * @param {string} parenString\n * @returns {Array<string>}\n */\nexport const separateParenGroups = (parenString) => {\n    let groups = [];\n    let stk = [];\n    let current_group = \"\";\n    let parens = parenString.replace(/\\s/g, \"\");\n    for (let i = 0; i < parens.length; i++) {\n        let ch = parens[i];\n        if (ch === \"(\") {\n            stk.push(ch);\n            current_group += ch;\n        } else if (ch === \")\") {\n            stk.pop();\n            current_group += ch;\n            if (stk.length === 0) {\n                groups.push(current_group);\n                current_group = \"\";\n            }\n        }\n    }\n    return groups;\n}\n```",
            "```javascript\n/**\n * @param {number} num\n * @returns {number}\n */\nexport const truncateNumber = (num) => {\n    return num - Math.floor(num);\n}\n```",
            "```javascript\n/**\n * @param {Array<number>} operations\n * @returns {boolean}\n */\nexport const belowZero = (operations) => {\n    let balance = 0;\n    for (const op of operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n```",
            "```jsx\n/**\n * @param {Array<number>} numbers\n * @returns {number}\n */\nexport const meanAbsoluteDeviation = (numbers) => {\n    const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n    let deviation = 0;\n    for (let x of numbers) {\n        deviation += Math.abs(x - mean);\n    }\n    return deviation / numbers.length;\n}\n```",
            "```javascript\n/**\n * @param {Array<number>} numbers\n * @param {number} delimiter\n * @returns {Array<number>}\n */\nexport const intersperse = (numbers, delimiter) => {\n    const result = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (i !== 0) {\n            result.push(delimiter);\n        }\n        result.push(numbers[i]);\n    }\n    return result;\n}\n```",
            "```javascript\n/**\n * @param {string} parenString\n * @returns {Array<number>}\n */\nexport const parseNestedParens = (parenString) => {\n    const result = [];\n    const parenGroups = parenString.split(' ');\n    for (const group of parenGroups) {\n        let maxDepth = 0;\n        let depth = 0;\n        for (let i = 0; i < group.length; i++) {\n            const ch = group[i];\n            if (ch === \"(\") {\n                depth++;\n                maxDepth = Math.max(maxDepth, depth);\n            } else if (ch === \")\") {\n                depth--;\n            }\n        }\n        result.push(maxDepth);\n    }\n    return result;\n}\n```",
            "```javascript\n/**\n * @param {Array<string>} strs\n * @param {string} substring\n * @returns {Array<string>}\n */\nexport const filterBySubstring = (strs, substring) => {\n    return strs.filter(s => s.includes(substring));\n}\n```",
            "```javascript\n/**\n * @param {Array<number>} numbers\n * @returns {Array<number>}\n */\nexport const sumProduct = (numbers) => {\n    const n_sum = numbers.reduce((sum, num) => sum + num, 0);\n    const n_product = numbers.reduce((product, num) => product * num, 1);\n    return [n_sum, n_product];\n}\n```",
            "```javascript\n/**\n * @param {Array<number>} numbers\n * @returns {Array<number>}\n */\nexport const rollingMax = (numbers) => {\n    let maxSoFar = -Number.MAX_SAFE_INTEGER;\n    const result = [];\n    for (let num of numbers) {\n        maxSoFar = Math.max(maxSoFar, num);\n        result.push(maxSoFar);\n    }\n    return result;\n}\n```",
            "```javascript\n/**\n * @param {string} s\n * @returns {boolean}\n */\nconst isPalindrome = (s) => {\n    return s === s.split('').reverse().join('');\n}\n\n/**\n * @param {string} s\n * @returns {string}\n */\nexport const makePalindrome = (s) => {\n    if (isPalindrome(s)) {\n        return s;\n    }\n    for (let i = 0; i < s.length; i++) {\n        if (isPalindrome(s.substring(i))) {\n            return s + s.substring(0, i).split('').reverse().join('');\n        }\n    }\n    return \"\";\n}\n```",
            "```javascript\n/**\n * @param {string} a\n * @param {string} b\n * @returns {string}\n */\nexport const stringXor = (a, b) => {\n    let result = '';\n    for (let i = 0; i < a.length; i++) {\n        result += (a[i] === b[i]) ? '0' : '1';\n    }\n    return result;\n};\n```",
            "```javascript\n/**\n * @param {Array<string>} strs\n * @returns {?string}\n */\nexport const longest = (strs) => {\n    if (!strs.length) {\n        return null;\n    }\n    let longest_s = strs[0];\n    for (let s of strs) {\n        if (s.length > longest_s.length) {\n            longest_s = s;\n        }\n    }\n    return longest_s;\n}\n```",
            "```javascript\n/**\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */\nexport const greatestCommonDivisor = (a, b) => {\n    if (b === 0) {\n        return a;\n    } else {\n        return greatestCommonDivisor(b, a % b);\n    }\n}\n```",
            "```javascript\n/**\n * @param {string} s\n * @returns {Array<string>}\n */\nexport const allPrefixes = (s) => {\n    let prefixes = [];\n    for (let i = 0; i < s.length; i++) {\n        prefixes.push(s.substr(0, i + 1));\n    }\n    return prefixes;\n}\n```",
            "```javascript\n/**\n * @param {number} n\n * @returns {string}\n */\nexport const stringSequence = (n) => {\n    return Array.from({ length: n + 1 }, (_, i) => i).join(' ');\n}\n```",
            "```javascript\n/**\n * @param {string} s\n * @returns {number}\n */\nexport const countDistinctCharacters = (s) => {\n    return new Set(s.toLowerCase()).size;\n}\n```",
            "```javascript\n/**\n * @param {string} musicString\n * @returns {Array<number>}\n */\nexport const parseMusic = (musicString) => {\n    const durations = {\"o\": 4, \"o|\": 2, \".|\": 1};\n    const notes = musicString.split(\" \");\n    return notes.map(note => durations[note]);\n}\n```",
            "```javascript\n/**\n * @param {string} s\n * @param {string} substring\n * @returns {number}\n */\nexport const howManyTimes = (s, substring) => {\n    let times = 0;\n    for (let i = 0; i <= s.length - substring.length; i++) {\n        if (s.substring(i, i + substring.length) === substring) {\n            times++;\n        }\n    }\n    return times;\n}\n```",
            "```javascript\n/**\n * @param {string} numbers\n * @returns {string}\n */\nexport const sortNumbers = (numbers) => {\n    const num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    };\n\n    const num_list = numbers.split(\" \").filter(x => x in num_dict);\n\n    num_list.sort((a, b) => num_dict[a] - num_dict[b]);\n\n    return num_list.join(\" \");\n}\n```",
            "```javascript\n/**\n * @param {Array<number>} numbers\n * @returns {Array<number>}\n */\nexport const findClosestElements = (numbers) => {\n    numbers.sort((a, b) => a - b);\n    let min_diff = Infinity;\n    let closest_pair = [];\n    for (let i = 1; i < numbers.length; i++) {\n        let diff = numbers[i] - numbers[i - 1];\n        if (diff < min_diff) {\n            min_diff = diff;\n            closest_pair = [numbers[i - 1], numbers[i]];\n        }\n    }\n    return closest_pair;\n}\n```",
            "```javascript\n/**\n * @param {Array<number>} numbers\n * @returns {Array<number>}\n */\nexport const rescaleToUnit = (numbers) => {\n    if (numbers.length === 0) return [];\n\n    const minNum = Math.min(...numbers);\n    const maxNum = Math.max(...numbers);\n\n    if (minNum === maxNum) {\n        return numbers.map(() => 0.0);\n    } else {\n        return numbers.map(num => (num - minNum) / (maxNum - minNum));\n    }\n};\n```",
            "```javascript\n/**\n * @param {Array<*>} values\n * @returns {Array<number>}\n */\nexport const filterIntegers = (values) => {\n    return values.filter(x => Number.isInteger(x));\n}\n```",
            "```javascript\n/**\n * @param {string} s\n * @returns {number}\n */\nexport const strLength = (s) => {\n    return s.length;\n}\n```",
            "```javascript\n/**\n * @param {number} n\n * @returns {number}\n */\nexport const largestDivisor = (n) => {\n    for (let i = 2; i < n; i++) {\n        if (n % i === 0) {\n            return Math.floor(n / i);\n        }\n    }\n    return 1;\n}\n```",
            "```javascript\n/**\n * @param {number} n\n * @returns {Array<number>}\n */\nexport const factorize = (n) => {\n    let factors = [];\n    let divisor = 2;\n    while (divisor <= n) {\n        if (n % divisor === 0) {\n            factors.push(divisor);\n            n /= divisor;\n        } else {\n            divisor += 1;\n        }\n    }\n    return factors;\n}\n```",
            "```javascript\n/**\n * @param {Array<number>} numbers\n * @returns {Array<number>}\n */\nexport const removeDuplicates = (numbers) => {\n    const counts = {};\n    for (const num of numbers) {\n        if (counts[num] !== undefined) {\n            counts[num] += 1;\n        } else {\n            counts[num] = 1;\n        }\n    }\n    const res = [];\n    for (const num of numbers) {\n        if (counts[num] === 1) {\n            res.push(num);\n        }\n    }\n    return res;\n}\n```",
            "```javascript\n/**\n * @param {string} s\n * @returns {string}\n */\nexport const flipCase = (s) => {\n    let flipped = '';\n    for (let i = 0; i < s.length; i++) {\n        const ch = s[i];\n        if (!/[a-zA-Z]/.test(ch)) {\n            flipped += ch;\n        } else if (ch === ch.toLowerCase()) {\n            flipped += ch.toUpperCase();\n        } else if (ch === ch.toUpperCase()) {\n            flipped += ch.toLowerCase();\n        }\n    }\n    return flipped;\n}\n```",
            "```javascript\n/**\n * @param {Array<string>} strs\n * @returns {string}\n */\nexport const concatenate = (strs) => {\n    return strs.join(\"\");\n}\n```",
            "```javascript\n/**\n * @param {Array<string>} strs\n * @param {string} prefixStr\n * @returns {Array<string>}\n */\nexport const filterByPrefix = (strs, prefixStr) => {\n    return strs.filter(s => s.startsWith(prefixStr));\n}\n```",
            "```javascript\n/**\n * @param {Array<number>} l\n * @returns {Array<number>}\n */\nexport const getPositive = (l) => {\n    return l.filter(num => num > 0);\n}\n```",
            "```javascript\n/**\n * @param {number} n\n * @returns {boolean}\n */\nexport const isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n```",
            "```javascript\n/**\n * @param {Array<number>} xs\n * @param {number} x\n * @returns {number}\n */\nexport const poly = (xs, x) => {\n    let res = 0.0;\n    for (let i = 0; i < xs.length; i++) {\n        res += xs[i] * Math.pow(x, i);\n    }\n    return res;\n}\n\n/**\n * @param {Array<number>} xs\n * @returns {number}\n */\nexport const findZero = (xs) => {\n    let x1 = 1.0;\n    let x2 = -1.0;\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2;\n        x2 *= 2;\n    }\n    while (Math.abs(x1 - x2) > 1e-10) {\n        let mid = (x1 + x2) / 2;\n        if (poly(xs, mid) === 0) {\n            return mid;\n        } else if (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2;\n}\n```",
            "```javascript\n/**\n * @param {Array<number>} l\n * @returns {Array<number>}\n */\nexport const sortThird = (l) => {\n    const sortedThird = l.filter((_, index) => index % 3 === 0).sort((a, b) => a - b);\n    return l.map((value, index) => index % 3 === 0 ? sortedThird[index / 3] : value);\n}\n```",
            "```javascript\n/**\n * @param {Array<number>} l\n * @returns {Array<number>}\n */\nexport const listUnique = (l) => {\n    return [...new Set(l)].sort((a, b) => a - b);\n}\n```",
            "```javascript\n/**\n * @param {Array<number>} l\n * @returns {number}\n */\nexport const maxElement = (l) => {\n    if (l.length === 0) {\n        return 0;\n    }\n    return Math.max(...l);\n}\n```",
            "```javascript\n/**\n * @param {number} n\n * @returns {number}\n */\nexport const fizzBuzz = (n) => {\n    let cnt = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            cnt += (i.toString().split('7').length - 1);\n        }\n    }\n    return cnt;\n}\n```",
            "```javascript\nexport const sortEven = (l) => {\n    const sortedEven = l.filter((_, index) => index % 2 === 0).sort((a, b) => a - b);\n    return l.map((value, index) => (index % 2 === 0 ? sortedEven.shift() : value));\n}\n```",
            "```javascript\n/**\n * @param {string} s\n * @returns {string}\n */\nexport const encodeCyclic = (s) => {\n    let result = '';\n    for (let i = 0; i < s.length; i += 3) {\n        if (i + 3 > s.length) {\n            result += s.substr(i);\n        } else {\n            result += s.substr(i + 1, 2) + s[i];\n        }\n    }\n    return result;\n}\n\n/**\n * @param {string} s\n * @returns {string}\n */\nexport const decodeCyclic = (s) => {\n    return encodeCyclic(encodeCyclic(s));\n}\n```",
            "```javascript\n/**\n * @param {number} n\n * @returns {number}\n */\nexport const primeFib = (n) => {\n    const isPrime = (num) => {\n        if (num < 2) return false;\n        for (let i = 2; i <= Math.floor(Math.sqrt(num)); i++) {\n            if (num % i === 0) return false;\n        }\n        return true;\n    };\n\n    let f = [0, 1];\n    let cnt = 0;\n    while (cnt < n) {\n        f = [f[1], f[0] + f[1]];\n        if (isPrime(f[1])) {\n            cnt += 1;\n        }\n    }\n    return f[1];\n}\n```",
            "```javascript\n/**\n * @param {Array<number>} l\n * @returns {boolean}\n */\nexport const triplesSumToZero = (l) => {\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            for (let k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] === 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n```",
            "```javascript\n/**\n * @param {number} n\n * @returns {number}\n */\nexport const carRaceCollision = (n) => {\n    return n ** 2;\n}\n```",
            "```javascript\n/**\n * @param {Array<number>} l\n * @returns {Array<number>}\n */\nexport const incrList = (l) => {\n    return l.map(i => i + 1);\n}\n```",
            "```javascript\n/**\n * @param {Array<number>} l\n * @returns {boolean}\n */\nexport const pairsSumToZero = (l) => {\n    const seen = new Set();\n    for (const num of l) {\n        if (seen.has(-num)) {\n            return true;\n        }\n        seen.add(num);\n    }\n    return false;\n}\n```",
            "```js\nexport const changeBase = (x, bas) => {\n    if (x === 0) {\n        return \"0\";\n    }\n    let digits = [];\n    while (x > 0) {\n        digits.push((x % bas).toString());\n        x = Math.floor(x / bas);\n    }\n    return digits.reverse().join(\"\");\n}\n```",
            "```javascript\n/**\n * @param {number} a\n * @param {number} h\n * @returns {number}\n */\nexport const triangleArea = (a, h) => {\n    return a * h / 2;\n}\n```",
            "```javascript\n/**\n * @param {number} n\n * @returns {number}\n */\nexport const fib4 = (n) => {\n    let fib = [0, 0, 2, 0];\n    for (let i = 4; i <= n + 1; i++) {\n        fib[i % 4] = fib.reduce((acc, val) => acc + val, 0);\n    }\n    return fib[n % 4];\n}\n```",
            "```javascript\n/**\n * @param {Array<number>} l\n * @returns {number}\n */\nexport const median = (l) => {\n    l.sort((a, b) => a - b);\n    const count = l.length;\n    if (count % 2 !== 0) {\n        return l[Math.floor(count / 2)];\n    } else {\n        return (l[count / 2] + l[count / 2 - 1]) / 2;\n    }\n}\n```",
            "```javascript\n\nexport const isPalindrome = (txt) => {\n    return txt === txt.split('').reverse().join('');\n};\n```",
            "```javascript\n/**\n * @param {number} n\n * @param {number} p\n * @returns {number}\n */\nexport const modp = (n, p) => {\n    let ret = 1;\n    for (let i = 0; i < n; i++) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}\n```",
            "```javascript\n/**\n * @param {string} s\n * @returns {string}\n */\nexport const encodeShift = (s) => {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let ch = s[i];\n        result += String.fromCharCode(((ch.charCodeAt(0) - 97 + 5) % 26) + 97);\n    }\n    return result;\n}\n\n/**\n * @param {string} s\n * @returns {string}\n */\nexport const decodeShift = (s) => {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let ch = s[i];\n        result += String.fromCharCode(((ch.charCodeAt(0) - 97 + 21) % 26) + 97);\n    }\n    return result;\n}\n```",
            "```javascript\n/**\n * @param {string} txt\n * @returns {string}\n */\nexport const removeVowels = (txt) => {\n    const vowels = \"aeiouAEIOU\";\n    let result = '';\n    \n    for (let i = 0; i < txt.length; i++) {\n        if (vowels.indexOf(txt[i]) === -1) {\n            result += txt[i];\n        }\n    }\n    \n    return result;\n}\n```",
            "```javascript\nexport const belowThreshold = (l, t) => {\n    for (let x of l) {\n        if (x >= t) {\n            return false;\n        }\n    }\n    return true;\n}\n```",
            "```javascript\n/**\n * @param {number} x\n * @param {number} y\n * @returns {number}\n */\nexport const add = (x, y) => {\n    return x + y;\n}\n```",
            "```javascript\nexport const sameChars = (s0, s1) => {\n    return new Set(s0) == new Set(s1);\n}\n```",
            "```javascript\n/**\n * @param {number} n\n * @returns {number}\n */\nexport const fib = (n) => {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n```",
            "```javascript\n/**\n * @param {string} brackets\n * @returns {boolean}\n */\nexport const correctBracketing = (brackets) => {\n    let depth = 0;\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] === \"<\") {\n            depth += 1;\n        } else if (brackets[i] === \">\") {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n```",
            "```javascript\n/**\n * @param {Array<number>} l\n * @returns {boolean}\n */\nexport const monotonic = (l) => {\n    const diff = l.slice(1).map((y, i) => y - l[i]);\n    return diff.every(x => x <= 0) || diff.every(x => x >= 0);\n};\n```",
            "```javascript\n/**\n * @param {Array<number>} l1\n * @param {Array<number>} l2\n * @returns {Array<number>}\n */\nexport const common = (l1, l2) => {\n    return Array.from(new Set(l1.filter(value => l2.includes(value)))).sort((a, b) => a - b);\n}\n```",
            "```javascript\n/**\n * @param {number} n\n * @returns {number}\n */\nexport const largestPrimeFactor = (n) => {\n    let i = 2;\n    while (i * i <= n) {\n        if (n % i) {\n            i += 1;\n        } else {\n            n //= i;\n        }\n    }\n    return n;\n}\n```",
            "```javascript\n/**\n * @param {number} n\n * @returns {number}\n */\nexport const sumToN = (n) => {\n    let sum = 0;\n    for (let i = 0; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n```",
            "```javascript\n/**\n * @param {string} brackets\n * @returns {boolean}\n */\nexport const correctBracketing = (brackets) => {\n    let depth = 0;\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] === \"(\") {\n            depth += 1;\n        } else if (brackets[i] === \")\") {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n```",
            "```javascript\n/**\n * @param {Array<number>} xs\n * @returns {Array<number>}\n */\nexport const derivative = (xs) => {\n    let result = [];\n    for (let i = 1; i < xs.length; i++) {\n        result.push(xs[i] * i);\n    }\n    return result;\n}\n```",
            "```javascript\n/**\n * @param {number} n\n * @returns {number}\n */\nexport const fibfib = (n) => {\n    if (n <= 1) {\n        return 0;\n    }\n    let a = 0, b = 0, c = 1;\n    while (n > 2) {\n        a = b;\n        b = c;\n        c = a + b + c;\n        n -= 1;\n    }\n    return c;\n}\n```",
            "```javascript\n/**\n * @param {string} s\n * @returns {number}\n */\nexport const vowelsCount = (s) => {\n    const vowels = \"aeiou\";\n    let cnt = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (vowels.includes(s[i].toLowerCase()) || (i === s.length - 1 && s[i].toLowerCase() === \"y\")) {\n            cnt++;\n        }\n    }\n    return cnt;\n}\n```",
            "```javascript\n/**\n * @param {number} x\n * @param {number} shift\n * @returns {string}\n */\nexport const circularShift = (x, shift) => {\n    const x_str = String(x);\n    if (shift > x_str.length) {\n        return x_str.split('').reverse().join('');\n    } else {\n        return x_str.slice(-shift) + x_str.slice(0, -shift);\n    }\n}\n```",
            "```javascript\n/**\n * @param {string} s\n * @returns {number}\n */\nexport const digitSum = (s) => {\n    let sum = 0;\n    for (let i = 0; i < s.length; i++) {\n        const c = s[i];\n        if (c >= 'A' && c <= 'Z') {\n            sum += c.charCodeAt(0);\n        }\n    }\n    return sum;\n}\n```",
            "```javascript\n/**\n * @param {string} s\n * @param {number} n\n * @returns {number}\n */\nexport const fruitDistribution = (s, n) => {\n    const words = s.split(' ');\n    const applesIndex = words.indexOf(\"apples\") - 1;\n    const orangesIndex = words.indexOf(\"oranges\") - 1;\n    const apples = parseInt(words[applesIndex], 10);\n    const oranges = parseInt(words[orangesIndex], 10);\n    return n - apples - oranges;\n}\n```",
            "```javascript\n/**\n * @param {Array<number>} arr\n * @returns {Array<number>}\n */\nexport const pluck = (arr) => {\n    const evens = arr.filter(n => n % 2 === 0);\n    \n    if (!evens.length) {\n        return [];\n    }\n    \n    const min_even = Math.min(...evens);\n    const index = arr.indexOf(min_even);\n    \n    return [min_even, index];\n}\n```",
            "```javascript\n/**\n * @param {Array<number>} lst\n * @returns {number}\n */\nexport const search = (lst) => {\n    const freqs = {};\n    for (const n of lst) {\n        if (freqs[n] !== undefined) {\n            freqs[n]++;\n        } else {\n            freqs[n] = 1;\n        }\n    }\n    let good_vals = [];\n    for (const k in freqs) {\n        if (freqs[k] >= Number(k)) {\n            good_vals.push(Number(k));\n        }\n    }\n    return good_vals.length > 0 ? Math.max(...good_vals) : -1;\n}\n```",
            "```javascript\n/**\n * @param {Array<number>} lst\n * @returns {Array<number>}\n */\nexport const strangeSortList = (lst) => {\n    let sl = [...lst];\n    sl.sort((a, b) => a - b);\n    let result = [];\n    let left = 0;\n    let right = sl.length - 1;\n    while (left <= right) {\n        result.push(sl[left]);\n        left++;\n        if (left <= right) {\n            result.push(sl[right]);\n            right--;\n        }\n    }\n    return result;\n}\n```",
            "```javascript\n/**\n * @param {number} a\n * @param {number} b\n * @param {number} c\n * @returns {number}\n */\nexport const triangleArea = (a, b, c) => {\n    if (a + b > c && a + c > b && b + c > a) {\n        const s = (a + b + c) / 2.0;\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    } else {\n        return -1.0;\n    }\n}\n```",
            "```javascript\n/**\n * @param {Array<number>} q\n * @param {number} w\n * @returns {boolean}\n */\nexport const willItFly = (q, w) => {\n    if (q.length === 0) {\n        return false;\n    }\n    let is_palin = true;\n    for (let i = 0; i < q.length; i++) {\n        if (q[i] !== q[q.length - i - 1]) {\n            is_palin = false;\n            break;\n        }\n    }\n    const total = q.reduce((acc, val) => acc + val, 0);\n    return is_palin && total <= w;\n}\n```",
            "```javascript\n/**\n * @param {Array<number>} arr\n * @returns {number}\n */\nexport const smallestChange = (arr) => {\n    let ans = 0;\n    for (let i = 0; i < arr.length / 2; i++) {\n        if (arr[i] !== arr[arr.length - i - 1]) {\n            ans += 1;\n        }\n    }\n    return ans;\n}\n```",
            "```javascript\n/**\n * @param {Array<string>} lst1\n * @param {Array<string>} lst2\n * @returns {Array<string>}\n */\nexport const totalMatch = (lst1, lst2) => {\n    const cnt1 = lst1.reduce((carry, item) => carry + item.length, 0);\n    const cnt2 = lst2.reduce((carry, item) => carry + item.length, 0);\n\n    return cnt1 <= cnt2 ? lst1 : lst2;\n}\n```",
            "```javascript\n/**\n * @param {number} n\n * @returns {boolean}\n */\nconst is_prime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/**\n * @param {number} a\n * @returns {boolean}\n */\nexport const isMultiplyPrime = (a) => {\n    let cnt = 0;\n    for (let i = 2; i <= a; i++) {\n        if (is_prime(i)) {\n            while (a % i === 0) {\n                cnt++;\n                a /= i;\n            }\n        }\n    }\n    return cnt === 3;\n}\n```",
            "```/**\n * @param {number} x\n * @param {number} n\n * @returns {boolean}\n */\nexport const isSimplePower = (x, n) => {\n    if (n < 2) {\n        return x === n;\n    }\n    let tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp === x;\n}\n```",
            "```javascript\n/**\n * @param {number} a\n * @returns {boolean}\n */\nexport const isCube = (a) => {\n    a = Math.abs(a);\n    let root = Math.round(Math.pow(a, 1.0 / 3.0));\n    return root * root * root === a;\n};\n```",
            "```javascript\n/**\n * @param {string} num\n * @returns {number}\n */\nexport const hexKey = (num) => {\n    return Array.from(num).filter(x => \"2357BD\".includes(x)).length;\n}\n```",
            "```typescript\nexport const decimalToBinary = (dec: number): string => {\n    const binary = dec.toString(2);\n    return `db${binary}db`;\n}\n```",
            "```javascript\n/**\n * @param {string} s\n * @returns {boolean}\n */\nexport const isHappy = (s) => {\n    if (s.length < 3) {\n        return false;\n    }\n    for (let i = 0; i <= s.length - 3; i++) {\n        if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n```",
            "```javascript\n/**\n * @param {Array<number>} grades\n * @returns {Array<string>}\n */\nexport const numericalLetterGrade = (grades) => {\n    const result = [];\n    for (const g of grades) {\n        if (g === 4.0) {\n            result.push(\"A+\");\n        } else if (g > 3.7) {\n            result.push(\"A\");\n        } else if (g > 3.3) {\n            result.push(\"A-\");\n        } else if (g > 3.0) {\n            result.push(\"B+\");\n        } else if (g > 2.7) {\n            result.push(\"B\");\n        } else if (g > 2.3) {\n            result.push(\"B-\");\n        } else if (g > 2.0) {\n            result.push(\"C+\");\n        } else if (g > 1.7) {\n            result.push(\"C\");\n        } else if (g > 1.3) {\n            result.push(\"C-\");\n        } else if (g > 1.0) {\n            result.push(\"D+\");\n        } else if (g > 0.7) {\n            result.push(\"D\");\n        } else if (g > 0.0) {\n            result.push(\"D-\");\n        } else {\n            result.push(\"E\");\n        }\n    }\n    return result;\n}\n```",
            "```javascript\n/**\n * @param {string} s\n * @returns {boolean}\n */\nexport const primeLength = (s) => {\n    const length = s.length;\n    if (length < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.sqrt(length); i++) {\n        if (length % i === 0) {\n            return false;\n        }\n    }\n    return true;\n};\n```",
            "```javascript\n/**\n * @param {number} n\n * @returns {number}\n */\nexport const startsOneEnds = (n) => {\n    if (n === 1) {\n        return 1;\n    }\n    return 2 * 9 * Math.pow(10, n - 2);\n};\n```",
            "```javascript\n/**\n * @param {number} n\n * @returns {string}\n */\nexport const solve = (n) => {\n    let digitsSum = String(n).split('').reduce((sum, digit) => sum + parseInt(digit, 10), 0);\n    return digitsSum.toString(2);\n};\n```",
            "```javascript\n/**\n * @param {Array<number>} lst\n * @returns {number}\n */\nexport const add = (lst) => {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 1 && lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n```",
            "```javascript\n/**\n * @param {string} s\n * @returns {string}\n */\nexport const antiShuffle = (s) => {\n    return s.split(\" \").map(word => word.split(\"\").sort().join(\"\")).join(\" \");\n}\n```",
            "```javascript\n/**\n * @param {Array<Array<number>>} lst\n * @param {number} x\n * @returns {Array<Array<number>>}\n */\nexport const getRow = (lst, x) => {\n    let coords = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                coords.push([i, j]);\n            }\n        }\n    }\n    coords.sort((a, b) => {\n        if (a[0] === b[0]) {\n            return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n    return coords;\n}\n```",
            "```javascript\n/**\n * @param {Array<number>} arr\n * @returns {Array<number>}\n */\nexport const sortArray = (arr) => {\n    if (arr.length === 0) {\n        return [];\n    }\n    if ((arr[0] + arr[arr.length - 1]) % 2 === 0) {\n        arr.sort((a, b) => b - a);\n    } else {\n        arr.sort((a, b) => a - b);\n    }\n    return arr;\n}\n```",
            "```javascript\n/**\n * @param {string} s\n * @returns {string}\n */\nexport const encrypt = (s) => {\n    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let ch = s[i];\n        let shifted = ch.charCodeAt(0) + 4;\n        if (shifted > 'z'.charCodeAt(0)) {\n            shifted -= 26;\n        }\n        result += String.fromCharCode(shifted);\n    }\n    return result;\n}\n```",
            "```javascript\n/**\n * @param {Array<number>} lst\n * @returns {?number}\n */\nexport const nextSmallest = (lst) => {\n    const sl = [...new Set(lst)];\n    sl.sort((a, b) => a - b);\n    if (sl.length < 2) {\n        return null;\n    }\n    return sl[1];\n}\n```",
            "```javascript\n/**\n * @param {string} s\n * @returns {number}\n */\nexport const isBored = (s) => {\n    const sentences = s.split(/[.!?]\\s*/);\n    let count = 0;\n    for (const sentence of sentences) {\n        if (sentence.length >= 2 && sentence.substring(0, 2) === \"I \") {\n            count++;\n        }\n    }\n    return count;\n}\n```",
            "```javascript\n/**\n * @param {*} x\n * @param {*} y\n * @param {*} z\n * @returns {boolean}\n */\nexport const anyInt = (x, y, z) => {\n    if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n        if ((x + y === z) || (x + z === y) || (y + z === x)) {\n            return true;\n        }\n    }\n    return false;\n}\n```",
            "```javascript\n/**\n * @param {string} message\n * @returns {string}\n */\nexport const encode = (message) => {\n    const vowels = \"aeiouAEIOU\";\n    let result = [];\n    for (let i = 0; i < message.length; i++) {\n        let ch = message[i];\n        if (/^[a-zA-Z]$/.test(ch)) {\n            let ch1 = /[a-z]/.test(ch) ? ch.toUpperCase() : ch.toLowerCase();\n            if (vowels.includes(ch1)) {\n                ch1 = String.fromCharCode(ch1.charCodeAt(0) + 2);\n            }\n            result.push(ch1);\n        } else {\n            result.push(ch);\n        }\n    }\n    return result.join(\"\");\n}\n```",
            "```javascript\n/**\n * @param {Array<number>} lst\n * @returns {number}\n */\nexport const skjkasdkd = (lst) => {\n    const isPrime = (n) => {\n        if (n < 2) return false;\n        for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n            if (n % i === 0) return false;\n        }\n        return true;\n    };\n\n    const primes = lst.filter(isPrime);\n    if (primes.length === 0) return 0;\n\n    const largest = String(Math.max(...primes));\n    return largest.split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n}\n```",
            "```javascript\n/**\n * @param {Map<string, string>} d\n * @returns {boolean}\n */\nexport const checkDictCase = (d) => {\n    if (d.size === 0) {\n        return false;\n    }\n    let allLower = true;\n    let allUpper = true;\n    for (let key of d.keys()) {\n        if (!/^[a-z]+$/.test(key)) {\n            allLower = false;\n        }\n        if (!/^[A-Z]+$/.test(key)) {\n            allUpper = false;\n        }\n    }\n    return allLower || allUpper;\n}\n```",
            "```javascript\n/**\n * @param {number} n\n * @returns {Array<number>}\n */\nexport const countUpTo = (n) => {\n    let primes = [];\n    for (let num = 2; num < n; num++) {\n        let isPrime = true;\n        for (let p of primes) {\n            if (num % p === 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            primes.push(num);\n        }\n    }\n    return primes;\n}\n```",
            "```javascript\n/**\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */\nexport const multiply = (a, b) => {\n    return Math.abs(a) % 10 * Math.abs(b) % 10;\n}\n```",
            "```javascript\n/**\n * @param {string} s\n * @returns {number}\n */\nexport const countUpper = (s) => {\n    const vowels = \"AEIOU\";\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (i % 2 === 0 && vowels.includes(s[i])) {\n            count++;\n        }\n    }\n    return count;\n}\n```",
            "```javascript\n/**\n * @param {string} value\n * @returns {number}\n */\nexport const closestInteger = (value) => {\n    const num = parseFloat(value);\n    if (num >= 0) {\n        return Math.floor(num + 0.5);\n    } else {\n        return Math.ceil(num - 0.5);\n    }\n}\n```",
            "```javascript\n/**\n * @param {number} n\n * @returns {Array<number>}\n */\nexport const makeAPile = (n) => {\n    let pile = [];\n    for (let i = 0; i < n; i++) {\n        pile.push(n + 2 * i);\n    }\n    return pile;\n}\n```",
            "```javascript\n/**\n * @param {string} s\n * @returns {Array<string>}\n */\nexport const wordsString = (s) => {\n    return s.split(/,|\\s+/).filter(w => w.length > 0);\n}\n```",
            "```javascript\n/**\n * @param {number} x\n * @param {number} y\n * @returns {number}\n */\nexport const chooseNum = (x, y) => {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 === 0) {\n        return y;\n    }\n    return x !== y ? y - 1 : -1;\n}\n```",
            "```javascript\n/**\n * @param {number} n\n * @param {number} m\n * @returns {?string}\n */\nexport const roundedAvg = (n, m) => {\n    if (n > m) {\n        return null;\n    }\n    const r_avg = Math.round((m + n) / 2.0);\n    return r_avg.toString(2);\n}\n```",
            "```javascript\n/**\n * @param {Array<number>} x\n * @returns {Array<number>}\n */\nexport const uniqueDigits = (x) => {\n    const allDigitsOdd = (s) => [...s].every(digit => parseInt(digit) % 2 !== 0);\n    return x.filter(num => allDigitsOdd(num.toString())).sort((a, b) => a - b);\n}\n```",
            "```javascript\n/**\n * @param {Array<number>} arr\n * @returns {Array<string>}\n */\nexport const byLength = (arr) => {\n    const digitNames = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    const sortedArr = arr.filter(x => 1 <= x && x <= 9);\n    sortedArr.sort((a, b) => b - a);\n    const result = sortedArr.map(x => digitNames[x - 1]);\n    return result;\n};\n```",
            "```javascript\n/**\n * @param {number} n\n * @returns {Array<number>}\n */\nexport const f = (n) => {\n    const nums = Array.from({ length: n }, (_, i) => i + 1);\n    const result = [];\n    for (let i = 0; i < nums.length; i++) {\n        if ((i + 1) % 2 !== 0) {\n            result.push(nums.slice(0, i + 1).reduce((acc, curr) => acc + curr, 0));\n        } else {\n            const product = nums.slice(0, i + 1).reduce((acc, curr) => acc * curr, 1);\n            result.push(product);\n        }\n    }\n    return result;\n}\n```",
            "```javascript\n/**\n * @param {number} n\n * @returns {Array<number>}\n */\nexport const evenOddPalindrome = (n) => {\n    const cnt = [0, 0];\n    for (let i = 1; i <= n; i++) {\n        if (String(i).split('').reverse().join('') === String(i)) {\n            cnt[i % 2]++;\n        }\n    }\n    return cnt;\n}\n```",
            "```javascript\n/**\n * @param {number} n\n * @returns {number}\n */\nconst digitsSum = (n) => {\n    const nStr = Math.abs(n).toString();\n    return n >= 0 ? nStr.split('').reduce((sum, d) => sum + parseInt(d), 0) : \n           parseInt(nStr[0]) * 2 + digitsSum(Math.abs(n));\n}\n\n/**\n * @param {Array<number>} arr\n * @returns {number}\n */\nexport const countNums = (arr) => {\n    return arr.filter(n => digitsSum(n) > 0).length;\n}\n```",
            "```javascript\n/**\n * @param {Array<number>} arr\n * @returns {boolean}\n */\nexport const moveOneBall = (arr) => {\n    if (arr.length === 0) {\n        return true;\n    }\n    const sortedArr = [...arr].sort((a, b) => a - b);\n    for (let i = 0; i < arr.length; i++) {\n        if (arr.slice(i).every((value, index) => value === sortedArr[index]) && \n            arr.slice(0, i).every((value, index) => value === sortedArr[arr.length - i + index])) {\n            return true;\n        }\n    }\n    return false;\n}\n```",
            "```javascript\n/**\n * @param {Array<number>} lst1\n * @param {Array<number>} lst2\n * @returns {string}\n */\nexport const canExchange = (lst1, lst2) => {\n    let odd_cnt = 0;\n    for (let num of lst1) {\n        if (num % 2 !== 0) {\n            odd_cnt++;\n        }\n    }\n\n    let even_cnt = 0;\n    for (let num of lst2) {\n        if (num % 2 === 0) {\n            even_cnt++;\n        }\n    }\n\n    return even_cnt >= odd_cnt ? \"YES\" : \"NO\";\n};\n```",
            "```javascript\n/**\n * @param {string} test\n * @returns {Map<string, number>}\n */\nexport const histogram = (test) => {\n    const freq = new Map();\n    const words = test.split(\" \").filter(w => w.length > 0);\n    for (const w of words) {\n        if (!freq.has(w)) {\n            freq.set(w, 0);\n        }\n        freq.set(w, freq.get(w) + 1);\n    }\n    const result = new Map();\n    if (freq.size > 0) {\n        const max_freq = Math.max(...freq.values());\n        for (const [k, v] of freq.entries()) {\n            if (v === max_freq) {\n                result.set(k, v);\n            }\n        }\n    }\n    return result;\n}\n```",
            "```javascript\n/**\n * @param {string} s\n * @param {string} c\n * @returns {Array<string>}\n */\nexport const reverseDelete = (s, c) => {\n    const s1 = s.split('').filter(char => !c.includes(char)).join('');\n    return [s1, isPalindrome(s1) ? \"yes\" : \"no\"];\n}\n\nconst isPalindrome = (s) => {\n    return s === s.split('').reverse().join('');\n}\n```",
            "```javascript\n/**\n * @param {Array<string>} lst\n * @returns {Array<string>}\n */\nexport const oddCount = (lst) => {\n    let result = [];\n    for (let num of lst) {\n        let n = 0;\n        for (let i = 0; i < num.length; i++) {\n            if (num.charCodeAt(i) % 2 === 1) {\n                n++;\n            }\n        }\n        let rs = \"the number of odd elements in the string i of the input.\";\n        result.push(rs.replace(\"i\", String(n)));\n    }\n    return result;\n}\n```",
            "```javascript\n/**\n * @param {Array<number>} nums\n * @returns {number}\n */\nexport const minSubArraySum = (nums) => {\n    let min_sum = 0;\n    let cur_sum = 0;\n    for (let n of nums) {\n        cur_sum = Math.min(cur_sum + n, 0);\n        min_sum = Math.min(cur_sum, min_sum);\n    }\n    if (min_sum === 0) {\n        min_sum = Math.min(...nums);\n    }\n    return min_sum;\n}\n```",
            "```javaScript\n/**\n * @param {Array<Array<number>>} grid\n * @param {number} capacity\n * @returns {number}\n */\nexport const maxFill = (grid, capacity) => {\n    let total = 0;\n    for (let arr of grid) {\n        total += Math.ceil(arr.reduce((a, b) => a + b, 0) / capacity);\n    }\n    return total;\n}\n```",
            "```javascript\nexport const sortArray = (arr) => {\n    arr.sort((a, b) => {\n        const countA = a.toString(2).split('1').length - 1;\n        const countB = b.toString(2).split('1').length - 1;\n        if (countA === countB) {\n            return a - b;\n        }\n        return countA - countB;\n    });\n    return arr;\n}\n```",
            "```javascript\n/**\n * @param {string} s\n * @param {number} n\n * @returns {Array<string>}\n */\nexport const selectWords = (s, n) => {\n    const consonants = \"bcdfghjklmnpqrstvwxyz\";\n    const words = s.split(\" \").filter(w => w.length > 0);\n    return words.filter(w => {\n        const consonantCount = Array.from(w.toLowerCase()).filter(c => consonants.includes(c)).length;\n        return consonantCount === n;\n    });\n}\n```",
            "```javascript\n/**\n * @param {string} word\n * @returns {string}\n */\nexport const getClosestVowel = (word) => {\n    const vowels = \"aeiouAEIOU\";\n    for (let i = word.length - 2; i > 0; i--) {\n        if (vowels.includes(word[i]) && !vowels.includes(word[i - 1]) && !vowels.includes(word[i + 1])) {\n            return word[i];\n        }\n    }\n    return \"\";\n}\n```",
            "```javascript\n/**\n * @param {Array<string>} lst\n * @returns {string}\n */\nexport const matchParens = (lst) => {\n    const check = (s) => {\n        let depth = 0;\n        for (let ch of s) {\n            if (ch === \"(\") {\n                depth += 1;\n            } else {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth === 0;\n    };\n    \n    const s1 = lst[0] + lst[1];\n    const s2 = lst[1] + lst[0];\n    return check(s1) || check(s2) ? \"Yes\" : \"No\";\n}\n```",
            "```javascript\n/**\n * @param {Array<number>} arr\n * @param {number} k\n * @returns {Array<number>}\n */\nexport const maximum = (arr, k) => {\n    if (k === 0) {\n        return [];\n    }\n    return arr.sort((a, b) => a - b).slice(-k);\n}\n```",
            "```javascript\n/**\n * @param {Array<number>} lst\n * @returns {number}\n */\nexport const solution = (lst) => {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n```",
            "```javascript\n/**\n * @param {Array<number>} arr\n * @param {number} k\n * @returns {number}\n */\nexport const addElements = (arr, k) => {\n    let sum = 0;\n    for (let i = 0; i < Math.min(k, arr.length); i++) {\n        if ((arr[i] + '').length <= 2) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n```",
            "```javascript\n/**\n * @param {number} n\n * @returns {Array<number>}\n */\nexport const getOddCollatz = (n) => {\n    let collatz = [1];\n    while (n !== 1) {\n        if (n % 2 !== 0) {\n            collatz.push(n);\n            n = 3 * n + 1;\n        } else {\n            n = Math.floor(n / 2);\n        }\n    }\n    collatz.sort((a, b) => a - b);\n    return collatz;\n}\n```",
            "```javascript\n/**\n * @param {string} date\n * @returns {boolean}\n */\nexport const validDate = (date) => {\n    if (date.length !== 10 || date[2] !== '-' || date[5] !== '-') {\n        return false;\n    }\n    const m = parseInt(date.substring(0, 2), 10);\n    const d = parseInt(date.substring(3, 5), 10);\n    if ([1, 3, 5, 7, 8, 10, 12].includes(m) && d >= 1 && d <= 31) {\n        return true;\n    }\n    if ([4, 6, 9, 11].includes(m) && d >= 1 && d <= 30) {\n        return true;\n    }\n    if (m === 2 && d >= 1 && d <= 29) {\n        return true;\n    }\n    return false;\n}\n```",
            "```javascript\n/**\n * @param {string} txt\n * @returns {Array<string>}\n */\nexport const splitWords = (txt) => {\n    if (txt.includes(' ')) {\n        return txt.split(' ');\n    } else if (txt.includes(',')) {\n        return txt.split(',');\n    } else {\n        let count = 0;\n        for (let i = 0; i < txt.length; i++) {\n            const c = txt[i];\n            if (c >= 'a' && c <= 'z' && (c.charCodeAt(0) % 2 === 0)) {\n                count++;\n            }\n        }\n        return [count.toString()];\n    }\n}\n```",
            "```javascript\n/**\n * @param {Array<number>} lst\n * @returns {boolean}\n */\nexport const isSorted = (lst) => {\n    if (lst.length === 0) {\n        return true;\n    }\n\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i - 1] > lst[i]) {\n            return false;\n        }\n    }\n\n    const freq = {};\n    for (const num of lst) {\n        freq[num] = (freq[num] || 0) + 1;\n        if (freq[num] > 2) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```",
            "```javascript\n/**\n * @param {Array<number>} interval1\n * @param {Array<number>} interval2\n * @returns {string}\n */\nexport const intersection = (interval1, interval2) => {\n    const is_prime = (n) => {\n        if (n < 2) return false;\n        for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n            if (n % i === 0) return false;\n        }\n        return true;\n    };\n\n    let l = Math.max(interval1[0], interval2[0]);\n    let r = Math.min(interval1[1], interval2[1]);\n    let length = r - l;\n    return length > 0 && is_prime(length) ? \"YES\" : \"NO\";\n}\n```",
            "```javascript\n/**\n * @param {Array<number>} arr\n * @returns {?number}\n */\nexport const prodSigns = (arr) => {\n    if (!arr.length) {\n        return null;\n    }\n    if (arr.includes(0)) {\n        return 0;\n    }\n    let neg_count = arr.filter(n => n < 0).length;\n    let sign = (neg_count % 2 === 1) ? -1 : 1;\n    return sign * arr.reduce((acc, n) => acc + Math.abs(n), 0);\n}\n```",
            "```javascript\n/**\n * @param {Array<Array<number>>} grid\n * @param {number} k\n * @returns {Array<number>}\n */\nexport const minPath = (grid, k) => {\n    const n = grid.length;\n    let min_val = n * n + 1;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            if (grid[i][j] === 1) {\n                const temp = [];\n                if (i !== 0) {\n                    temp.push(grid[i - 1][j]);\n                }\n                if (j !== 0) {\n                    temp.push(grid[i][j - 1]);\n                }\n                if (i !== n - 1) {\n                    temp.push(grid[i + 1][j]);\n                }\n                if (j !== n - 1) {\n                    temp.push(grid[i][j + 1]);\n                }\n                min_val = Math.min(...temp);\n            }\n        }\n    }\n    const result = [];\n    for (let i = 0; i < k; i++) {\n        result.push(i % 2 === 0 ? 1 : min_val);\n    }\n    return result;\n}\n```",
            "```javascript\n/**\n * @param {number} n\n * @returns {Array<number>}\n */\nexport const tri = (n) => {\n    if (n === 0) {\n        return [1];\n    }\n    const seq = [1, 3];\n    for (let i = 2; i <= n; i++) {\n        if (i % 2 === 0) {\n            seq.push(i / 2 + 1);\n        } else {\n            seq.push(seq[i - 1] + seq[i - 2] + (i + 3) / 2);\n        }\n    }\n    return seq;\n}\n```",
            "```javascript\n/**\n * @param {number} n\n * @returns {number}\n */\nexport const digits = (n) => {\n    const odds = (n.toString()).split('').filter(d => parseInt(d) % 2 === 1);\n    if (odds.length > 0) {\n        return odds.reduce((product, d) => product * parseInt(d), 1);\n    } else {\n        return 0;\n    }\n}\n```",
            "```javascript\n/**\n * @param {string} s\n * @returns {boolean}\n */\nexport const isNested = (s) => {\n    let open_idx = [];\n    let close_idx = [];\n    \n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === '[') {\n            open_idx.push(i);\n        } else if (s[i] === ']') {\n            close_idx.push(i);\n        }\n    }\n    \n    close_idx = close_idx.reverse();\n    let cnt = 0;\n    let i = 0;\n    let l = close_idx.length;\n    \n    for (let idx of open_idx) {\n        if (i < l && idx < close_idx[i]) {\n            cnt += 1;\n            i += 1;\n        }\n    }\n    \n    return cnt >= 2;\n}\n```",
            "```javascript\n/**\n * @param {Array<number>} lst\n * @returns {number}\n */\nexport const sumSquares = (lst) => {\n    return lst.reduce((sum, n) => sum + Math.pow(Math.ceil(n), 2), 0);\n}\n```",
            "```javascript\n/**\n * @param {string} txt\n * @returns {boolean}\n */\nexport const checkIfLastCharIsALetter = (txt) => {\n    if (!txt) {\n        return false;\n    }\n    last = txt.slice(txt.lastIndexOf(' ') + 1);\n    return last.length === 1 && /^[a-zA-Z]$/.test(last[0]);\n}\n```",
            "```javascript\n/**\n * @param {Array<number>} arr\n * @returns {number}\n */\nexport const canArrange = (arr) => {\n    if (arr.length <= 1) {\n        return -1;\n    }\n    let idx = [];\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] < arr[i - 1]) {\n            idx.push(i);\n        }\n    }\n    return idx.length > 0 ? Math.max(...idx) : -1;\n}\n```",
            "```javascript\n/**\n * @param {Array<number>} lst\n * @returns {Array<?number>}\n */\nexport const largestSmallestIntegers = (lst) => {\n    const neg = lst.filter(i => i < 0);\n    const pos = lst.filter(i => i > 0);\n    const max_neg = neg.length > 0 ? Math.max(...neg) : null;\n    const min_pos = pos.length > 0 ? Math.min(...pos) : null;\n    return [max_neg, min_pos];\n}\n```",
            "```javascript\nexport const compareOne = (a, b) => {\n    const anyToReal = (o) => {\n        if (typeof o === 'string') {\n            return parseFloat(o.replace(',', '.'));\n        } else if (typeof o === 'number') {\n            return o;\n        }\n        throw new Error(\"Type Error\");\n    };\n\n    const a1 = anyToReal(a);\n    const b1 = anyToReal(b);\n\n    if (a1 === b1) {\n        return null;\n    } else if (a1 > b1) {\n        return a1;\n    } else {\n        return b1;\n    }\n};\n```",
            "```javascript\n/**\n * @param {number} n\n * @returns {boolean}\n */\nexport const isEqualToSumEven = (n) => {\n    return n % 2 === 0 && n >= 8;\n};\n```",
            "```javascript\n/**\n * @param {number} n\n * @returns {number}\n */\nexport const specialFactorial = (n) => {\n    let fact = 1;\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n        fact *= i;\n        result *= fact;\n    }\n    return result;\n}\n```",
            "```javascript\n/**\n * @param {string} txt\n * @returns {string}\n */\nexport const fixSpaces = (txt) => {\n    return txt.replace(/\\s{3,}/g, \"-\").replace(/ /g, \"_\");\n}\n```",
            "```javascript\n/**\n * @param {string} fileName\n * @returns {string}\n */\nexport const fileNameCheck = (fileName) => {\n    const suf = [\"txt\", \"exe\", \"dll\"];\n    const lst = fileName.split(\".\");\n    if (lst.length !== 2 || !suf.includes(lst[1]) || lst[0].length === 0 || !/^[a-zA-Z]$/.test(lst[0][0]) || (lst[0].match(/\\d/g) || []).length > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n```",
            "```javascript\n/**\n * @param {Array<number>} lst\n * @returns {number}\n */\nexport const sumSquares = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            result += Math.pow(lst[i], 2);\n        } else if (i % 4 === 0) {\n            result += Math.pow(lst[i], 3);\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n```",
            "```javascript\n/**\n * @param {string} sentence\n * @returns {string}\n */\nexport const wordsInSentence = (sentence) => {\n    const words = sentence.split(\" \");\n    const primeWords = words.filter(word => {\n        const length = word.length;\n        if (length < 2) {\n            return false;\n        }\n        for (let i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i === 0) {\n                return false;\n            }\n        }\n        return true;\n    });\n    return primeWords.join(\" \");\n}\n```",
            "```javascript\n/**\n * @param {string} x\n * @param {string} n\n * @returns {boolean}\n */\nexport const simplify = (x, n) => {\n    let xs = x.split(\"/\");\n    let ns = n.split(\"/\");\n    let num = parseInt(xs[0]) * parseInt(ns[0]);\n    let den = parseInt(xs[1]) * parseInt(ns[1]);\n    return num % den === 0;\n}\n```",
            "```javascript\n/**\n * @param {Array<number>} nums\n * @returns {Array<number>}\n */\nexport const orderByPoints = (nums) => {\n    return nums.sort((a, b) => digitsSum(a) - digitsSum(b));\n}\n\nconst digitsSum = (n) => {\n    let nStr = String(n);\n    if (n >= 0) {\n        return nStr.split('').reduce((sum, digit) => sum + parseInt(digit, 10), 0);\n    } else {\n        return parseInt(nStr[0] + nStr[1], 10) * 2 + digitsSum(Math.abs(n));\n    }\n}\n```",
            "```javascript\n/**\n * @param {Array<number>} nums\n * @returns {number}\n */\nexport const specialFilter = (nums) => {\n    const odds = \"13579\";\n    let count = 0;\n    for (let n of nums) {\n        if (n > 10 && n % 2 === 1 && odds.includes(n.toString()[0])) {\n            count++;\n        }\n    }\n    return count;\n}\n```",
            "```javascript\n/**\n * @param {number} n\n * @returns {number}\n */\nexport const getMaxTriples = (n) => {\n    let c = [0, 0, 0];\n    for (let i = 1; i <= n; i++) {\n        let a = i * i - i + 1;\n        c[a % 3]++;\n    }\n    return c[0] * c[1] * c[2] + ((c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6);\n};\n```",
            "```javascript\n/**\n * @param {string} planet1\n * @param {string} planet2\n * @returns {Array<string>}\n */\nexport const bf = (planet1, planet2) => {\n    const names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if (!names.includes(planet1) || !names.includes(planet2)) {\n        return [];\n    }\n    let l = names.indexOf(planet1);\n    let r = names.indexOf(planet2);\n    if (l > r) {\n        [l, r] = [r, l];\n    }\n    if (l === r) {\n        return [];\n    }\n    return names.slice(l + 1, r - l - 1);\n}\n```",
            "```javascript\nexport const sortedListSum = (lst) => {\n    const result = lst.filter(s => s.length % 2 === 0);\n    \n    result.sort((a, b) => {\n        const lengthComparison = a.length - b.length;\n        if (lengthComparison !== 0) {\n            return lengthComparison;\n        }\n        return a.localeCompare(b);\n    });\n    \n    return result;\n}\n```",
            "```javascript\n/**\n * @param {number} n\n * @param {number} x\n * @param {number} y\n * @returns {number}\n */\nexport const xOrY = (n, x, y) => {\n    if (n < 2) {\n        return y;\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n        if (n % i === 0) {\n            return y;\n        }\n    }\n    return x;\n}\n```",
            "```javascript\nexport const doubleTheDifference = (lst) => {\n    let sum = 0;\n    for (let n of lst) {\n        if (n >= 0 && n % 2 === 1) {\n            sum += n * n;\n        }\n    }\n    return sum;\n}\n```",
            "```javascript\nexport const compare = (game, guess) => {\n    const result = [];\n    for (let i = 0; i < game.length; i++) {\n        result.push(Math.abs(game[i] - guess[i]));\n    }\n    return result;\n}\n```",
            "```javascript\n/**\n * @param {string} className\n * @param {Array<string>} extensions\n * @returns {string}\n */\nexport const strongestExtension = (className, extensions) => {\n    let max_s = -Number.MAX_SAFE_INTEGER;\n    let max_ext = \"\";\n    for (let ext of extensions) {\n        let upper = (ext.match(/[A-Z]/g) || []).length;\n        let lower = (ext.match(/[a-z]/g) || []).length;\n        let s = upper - lower;\n        if (s > max_s) {\n            max_s = s;\n            max_ext = ext;\n        }\n    }\n    return className + \".\" + max_ext;\n}\n```",
            "```javascript\n/**\n * @param {string} a\n * @param {string} b\n * @returns {boolean}\n */\nexport const cycpatternCheck = (a, b) => {\n    if (a.length < b.length) {\n        return false;\n    }\n    for (let i = 0; i < b.length; i++) {\n        if (a.includes(b.slice(i) + b.slice(0, i))) {\n            return true;\n        }\n    }\n    return false;\n}\n```",
            "```javascript\n/**\n * @param {number} num\n * @returns {Array<number>}\n */\nexport const evenOddCount = (num) => {\n    const ds = Math.abs(num).toString();\n    let even = 0;\n    \n    for (let i = 0; i < ds.length; i++) {\n        if (parseInt(ds[i]) % 2 === 0) {\n            even++;\n        }\n    }\n    \n    return [even, ds.length - even];\n}\n```",
            "```javascript\n/**\n * @param {number} num\n * @returns {string}\n */\nexport const intToMiniRoman = (num) => {\n    const values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    const numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    let res = [];\n    for (let i = 0; i < values.length; i++) {\n        while (num >= values[i]) {\n            res.push(numerals[i]);\n            num -= values[i];\n        }\n    }\n    return res.join(\"\");\n}\n```",
            "```javascript\n/**\n * @param {number} a\n * @param {number} b\n * @param {number} c\n * @returns {boolean}\n */\nexport const rightAngleTriangle = (a, b, c) => {\n    let s = [a, b, c];\n    s.sort((x, y) => x - y);\n    return (s[0] ** 2) + (s[1] ** 2) === (s[2] ** 2);\n}\n```",
            "```javascript\n/**\n * @param {Array<string>} words\n * @returns {string}\n */\nexport const findMax = (words) => {\n    let max_cnt = 0;\n    let max_w = \"\";\n    for (let w of words) {\n        let cnt = new Set(w.split('')).size;\n        if (cnt > max_cnt) {\n            max_cnt = cnt;\n            max_w = w;\n        } else if (cnt === max_cnt) {\n            max_w = max_w.localeCompare(w) < 0 ? max_w : w;\n        }\n    }\n    return max_w;\n}\n```",
            "```javascript\n/**\n * @param {number} num\n * @param {number} need\n * @param {number} remaining\n * @returns {Array<number>}\n */\nexport const eat = (num, need, remaining) => {\n    if (need <= remaining) {\n        return [num + need, remaining - need];\n    } else {\n        return [num + remaining, 0];\n    }\n}\n```",
            "```javascript\n/**\n * @param {Array<string>} operators\n * @param {Array<number>} operands\n * @returns {number}\n */\nexport const doAlgebra = (operators, operands) => {\n    let ops = [...operators];\n    let nums = [...operands];\n    let i = ops.length - 1;\n    while (i >= 0) {\n        if (ops[i] === \"**\") {\n            nums[i] = Math.pow(nums[i], nums[i + 1]);\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n        }\n        i -= 1;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] === \"*\") {\n            nums[i] = nums[i] * nums[i + 1];\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i -= 1;\n        } else if (ops[i] === \"//\") {\n            nums[i] = Math.floor(nums[i] / nums[i + 1]);\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i -= 1;\n        }\n        i += 1;\n    }\n    i = 0;\n    while (i < ops.length) {\n        if (ops[i] === \"+\") {\n            nums[i] = nums[i] + nums[i + 1];\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i -= 1;\n        } else if (ops[i] === \"-\") {\n            nums[i] = nums[i] - nums[i + 1];\n            nums.splice(i + 1, 1);\n            ops.splice(i, 1);\n            i -= 1;\n        }\n        i += 1;\n    }\n    return nums[0];\n}\n```",
            "```javascript\n/**\n * @param {string} s\n * @returns {string}\n */\nexport const solve = (s) => {\n    if (!/[a-zA-Z]/.test(s)) {\n        return s.split('').reverse().join('');\n    }\n    let result = [];\n    for (let i = 0; i < s.length; i++) {\n        let ch = s[i];\n        if (!/^[a-zA-Z]$/.test(ch)) {\n            result.push(ch);\n        } else if (ch === ch.toUpperCase()) {\n            result.push(ch.toLowerCase());\n        } else if (ch === ch.toLowerCase()) {\n            result.push(ch.toUpperCase());\n        }\n    }\n    return result.join('');\n}\n```",
            "```javascript\n/**\n * @param {string} txt\n * @returns {?string}\n */\nexport const stringToMd5 = (txt) => {\n    if (!txt) {\n        return null;\n    }\n    const md5Hash = CryptoJS.MD5(txt).toString();\n    return md5Hash;\n}\n```",
            "```javascript\n/**\n * @param {number} a\n * @param {number} b\n * @returns {Array<number>}\n */\nexport const generateIntegers = (a, b) => {\n    const lower = Math.max(2, Math.min(a, b));\n    const upper = Math.min(8, Math.max(a, b));\n    const result = [];\n    for (let i = lower; i <= upper; i++) {\n        if (i % 2 === 0) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n```"
        ],
        "cpp": [
            "```cpp\nbool hasCloseElements(const vector<double>& numbers, double threshold) {\n    for (size_t i = 0; i < numbers.size(); i++) {\n        for (size_t j = i + 1; j < numbers.size(); j++) {\n            if (abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n```",
            "```cpp\nvector<string> separateParenGroups(const string& parenString) {\n    vector<string> groups;\n    vector<char> stk;\n    string current_group;\n    string parens = parenString;\n    for (char ch : parens) {\n        if (ch == '(') {\n            stk.push_back(ch);\n            current_group += ch;\n        } else if (ch == ')') {\n            stk.pop_back();\n            current_group += ch;\n            if (stk.empty()) {\n                groups.push_back(current_group);\n                current_group = \"\";\n            }\n        }\n    }\n    return groups;\n}\n```",
            "```cpp\ndouble truncateNumber(double num) {\n    return num - floor(num);\n}\n```",
            "```cpp\nbool belowZero(const vector<int>& operations) {\n    int balance = 0;\n    for (int op : operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n```",
            "```cpp\ndouble meanAbsoluteDeviation(const vector<double>& numbers) {\n    double sum = accumulate(numbers.begin(), numbers.end(), 0.0);\n    double mean = sum / numbers.size();\n    double deviation = 0;\n    for (const double& x : numbers) {\n        deviation += abs(x - mean);\n    }\n    return deviation / numbers.size();\n}\n```",
            "```cpp\nvector<int> intersperse(const vector<int>& numbers, int delimiter) {\n    vector<int> result;\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        if (i != 0) {\n            result.push_back(delimiter);\n        }\n        result.push_back(numbers[i]);\n    }\n    return result;\n}\n```",
            "```cpp\nvector<int> parseNestedParens(const string& paren_string) {\n    vector<int> result;\n    istringstream iss(paren_string);\n    string group;\n    while (iss >> group) {\n        int maxDepth = 0;\n        int depth = 0;\n        for (char ch : group) {\n            if (ch === '(') {\n                depth++;\n                maxDepth = max(maxDepth, depth);\n            } else if (ch === ')') {\n                depth--;\n            }\n        }\n        result.push_back(maxDepth);\n    }\n    return result;\n}\n```",
            "```cpp\nvector<string> filterBySubstring(const vector<string>& strs, const string& substring) {\n    vector<string> result;\n    for (const auto& s : strs) {\n        if (s.find(substring) != string::npos) {\n            result.push_back(s);\n        }\n    }\n    return result;\n}\n```",
            "```cpp\nvector<int> sumProduct(const vector<int>& numbers) {\n    int n_sum = accumulate(numbers.begin(), numbers.end(), 0);\n    int n_product = accumulate(numbers.begin(), numbers.end(), 1, multiplies<int>());\n    return {n_sum, n_product};\n}\n```",
            "```cpp\nvector<int> rollingMax(const vector<int>& numbers) {\n    int max_so_far = INT_MIN;\n    vector<int> result;\n    for (int num : numbers) {\n        max_so_far = std::max(max_so_far, num);\n        result.push_back(max_so_far);\n    }\n    return result;\n}\n```",
            "```cpp\nstring makePalindrome(const string& s) {\n    auto is_palindrome = [](const string& str) -> bool {\n        return string(str.rbegin(), str.rend()) == str;\n    };\n    \n    if (is_palindrome(s)) {\n        return s;\n    }\n    for (size_t i = 0; i < s.length(); ++i) {\n        if (is_palindrome(s.substr(i))) {\n            return s + string(s.begin(), s.begin() + i).rbegin();\n        }\n    }\n    return \"\";\n}\n```",
            "```cpp\nstring stringXor(const string& a, const string& b) {\n    string result = \"\";\n    for (size_t i = 0; i < a.length(); i++) {\n        result += (a[i] == b[i]) ? '0' : '1';\n    }\n    return result;\n}\n```",
            "```cpp\noptional<string> longest(const vector<string>& strs) {\n    if (strs.empty()) {\n        return nullopt;\n    }\n    string longest_s = strs[0];\n    for (const auto& s : strs) {\n        if (s.length() > longest_s.length()) {\n            longest_s = s;\n        }\n    }\n    return longest_s;\n}\n```",
            "```cpp\nint greatestCommonDivisor(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return greatestCommonDivisor(b, a % b);\n    }\n}\n```",
            "```cpp\nvector<string> allPrefixes(const string& s) {\n    vector<string> prefixes;\n    for (size_t i = 0; i < s.length(); i++) {\n        prefixes.push_back(s.substr(0, i + 1));\n    }\n    return prefixes;\n}\n```",
            "```cpp\nstring stringSequence(int n) {\n    stringstream ss;\n    for (int i = 0; i <= n; ++i) {\n        ss << i;\n        if (i < n) {\n            ss << \" \";\n        }\n    }\n    return ss.str();\n}\n```",
            "```cpp\nint countDistinctCharacters(const string& s) {\n    set<char> uniqueChars;\n    for (char c : s) {\n        uniqueChars.insert(tolower(c));\n    }\n    return uniqueChars.size();\n}\n```",
            "```cpp\n#include <string>\n#include <vector>\n#include <unordered_map>\n\nusing namespace std;\n\nvector<int> parseMusic(const string& music_string) {\n    unordered_map<string, int> durations = {{\"o\", 4}, {\"o|\", 2}, {\".|\", 1}};\n    vector<int> result;\n    size_t start = 0;\n    size_t end = music_string.find(' ');\n    \n    while (end != string::npos) {\n        string note = music_string.substr(start, end - start);\n        if (durations.find(note) != durations.end()) {\n            result.push_back(durations[note]);\n        }\n        start = end + 1;\n        end = music_string.find(' ', start);\n    }\n    \n    // Add the last note\n    string last_note = music_string.substr(start);\n    if (durations.find(last_note) != durations.end()) {\n        result.push_back(durations[last_note]);\n    }\n    \n    return result;\n}\n```",
            "```cpp\nint howManyTimes(const string& s, const string& substring) {\n    int times = 0;\n    for (int i = 0; i <= s.length() - substring.length(); i++) {\n        if (s.substr(i, substring.length()) == substring) {\n            times++;\n        }\n    }\n    return times;\n}\n```",
            "```cpp\nstring sortNumbers(const string& numbers) {\n    unordered_map<string, int> num_dict = {\n        {\"zero\", 0},\n        {\"one\", 1},\n        {\"two\", 2},\n        {\"three\", 3},\n        {\"four\", 4},\n        {\"five\", 5},\n        {\"six\", 6},\n        {\"seven\", 7},\n        {\"eight\", 8},\n        {\"nine\", 9}\n    };\n\n    vector<string> num_list;\n    string word;\n    stringstream ss(numbers);\n    while (ss >> word) {\n        if (num_dict.find(word) != num_dict.end()) {\n            num_list.push_back(word);\n        }\n    }\n\n    sort(num_list.begin(), num_list.end(), [&num_dict](const string& a, const string& b) {\n        return num_dict[a] < num_dict[b];\n    });\n\n    return accumulate(num_list.begin(), num_list.end(), string(), [](string& acc, const string& s) -> string {\n        if (!acc.empty()) acc += \" \";\n        acc += s;\n        return acc;\n    });\n}\n```",
            "```cpp\nvector<double> findClosestElements(const vector<double>& numbers) {\n    vector<double> sorted_numbers = numbers;\n    sort(sorted_numbers.begin(), sorted_numbers.end());\n    double min_diff = numeric_limits<double>::infinity();\n    vector<double> closest_pair;\n    for (size_t i = 1; i < sorted_numbers.size(); ++i) {\n        double diff = sorted_numbers[i] - sorted_numbers[i - 1];\n        if (diff < min_diff) {\n            min_diff = diff;\n            closest_pair = {sorted_numbers[i - 1], sorted_numbers[i]};\n        }\n    }\n    return closest_pair;\n}\n```",
            "```cpp\nvector<double> rescaleToUnit(const vector<double>& numbers) {\n    double min_num = *min_element(numbers.begin(), numbers.end());\n    double max_num = *max_element(numbers.begin(), numbers.end());\n    if (min_num == max_num) {\n        return vector<double>(numbers.size(), 0.0);\n    } else {\n        vector<double> result;\n        for (double num : numbers) {\n            result.push_back((num - min_num) / (max_num - min_num));\n        }\n        return result;\n    }\n}\n```",
            "```cpp\n#include <any>\n#include <vector>\n#include <type_traits>\n\nvector<int> filterIntegers(const vector<any>& values) {\n    vector<int> result;\n    for (const auto& value : values) {\n        if (value.type() == typeid(int)) {\n            result.push_back(any_cast<int>(value));\n        }\n    }\n    return result;\n}\n```",
            "```cpp\nint strLength(const string& s) {\n    return s.length();\n}\n```",
            "```cpp\nint largestDivisor(int n) {\n    for (int i = 2; i < n; i++) {\n        if (n % i == 0) {\n            return n / i;\n        }\n    }\n    return 1;\n}\n```",
            "```cpp\nvector<int> factorize(int n) {\n    vector<int> factors;\n    int divisor = 2;\n    while (divisor <= n) {\n        if (n % divisor == 0) {\n            factors.push_back(divisor);\n            n /= divisor;\n        } else {\n            divisor += 1;\n        }\n    }\n    return factors;\n}\n```",
            "```cpp\nvector<int> removeDuplicates(const vector<int>& numbers) {\n    unordered_map<int, int> counts;\n    for (int num : numbers) {\n        counts[num]++;\n    }\n    vector<int> res;\n    for (int num : numbers) {\n        if (counts[num] == 1) {\n            res.push_back(num);\n        }\n    }\n    return res;\n}\n```",
            "```cpp\nstring flipCase(const string& s) {\n    string flipped;\n    for (size_t i = 0; i < s.length(); ++i) {\n        char ch = s[i];\n        if (!isalpha(ch)) {\n            flipped += ch;\n        } else if (islower(ch)) {\n            flipped += toupper(ch);\n        } else if (isupper(ch)) {\n            flipped += tolower(ch);\n        }\n    }\n    return flipped;\n}\n```",
            "```cpp\nstring concatenate(const vector<string>& strs) {\n    string result;\n    for (const auto& str : strs) {\n        result += str;\n    }\n    return result;\n}\n```",
            "```cpp\nvector<string> filterByPrefix(const vector<string>& strs, const string& prefix_str) {\n    vector<string> result;\n    for (const auto& s : strs) {\n        if (s.find(prefix_str) == 0) {\n            result.push_back(s);\n        }\n    }\n    return result;\n}\n```",
            "```cpp\nvector<int> getPositive(const vector<int>& l) {\n    vector<int> result;\n    for (int num : l) {\n        if (num > 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\n```",
            "```cpp\nbool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n```",
            "```cpp\ndouble poly(const vector<int>& xs, double x) {\n    double res = 0.0;\n    for (size_t i = 0; i < xs.size(); i++) {\n        res += xs[i] * pow(x, i);\n    }\n    return res;\n}\n\ndouble findZero(const vector<int>& xs) {\n    double x1 = 1.0;\n    double x2 = -1.0;\n    while (poly(xs, x1) * poly(xs, x2) > 0) {\n        x1 *= 2;\n        x2 *= 2;\n    }\n    while (abs(x1 - x2) > 1e-10) {\n        double mid = (x1 + x2) / 2;\n        if (poly(xs, mid) == 0) {\n            return mid;\n        } elseif (poly(xs, mid) * poly(xs, x1) < 0) {\n            x2 = mid;\n        } else {\n            x1 = mid;\n        }\n    }\n    return (x1 + x2) / 2;\n}\n```",
            "```cpp\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> sortThird(const std::vector<int>& l) {\n    std::vector<int> sorted_third;\n    for (size_t i = 0; i < l.size(); i += 3) {\n        sorted_third.push_back(l[i]);\n    }\n    std::sort(sorted_third.begin(), sorted_third.end());\n\n    std::vector<int> result;\n    size_t sorted_idx = 0;\n    for (size_t i = 0; i < l.size(); ++i) {\n        if (i % 3 == 0) {\n            result.push_back(sorted_third[sorted_idx++]);\n        } else {\n            result.push_back(l[i]);\n        }\n    }\n    return result;\n}\n```",
            "```cpp\n#include <vector>\n#include <set>\n#include <algorithm>\n\nusing namespace std;\n\nvector<int> listUnique(const vector<int>& l) {\n    set<int> uniqueElements(l.begin(), l.end());\n    vector<int> result(uniqueElements.begin(), uniqueElements.end());\n    sort(result.begin(), result.end());\n    return result;\n}\n```",
            "```cpp\nint maxElement(const vector<int>& l) {\n    if (l.empty()) {\n        return 0;\n    }\n    return *max_element(l.begin(), l.end());\n}\n```",
            "```cpp\nint fizzBuzz(int n) {\n    int cnt = 0;\n    for (int i = 0; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            string str = to_string(i);\n            cnt += count(str.begin(), str.end(), '7');\n        }\n    }\n    return cnt;\n}\n```",
            "```cpp\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> sortEven(const std::vector<int>& l) {\n    std::vector<int> sorted_even;\n    for (size_t i = 0; i < l.size(); i += 2) {\n        sorted_even.push_back(l[i]);\n    }\n    std::sort(sorted_even.begin(), sorted_even.end());\n\n    std::vector<int> result;\n    size_t even_index = 0;\n    for (size_t i = 0; i < l.size(); ++i) {\n        if (i % 2 == 0) {\n            result.push_back(sorted_even[even_index++]);\n        } else {\n            result.push_back(l[i]);\n        }\n    }\n    return result;\n}\n```",
            "```cpp\nstring encodeCyclic(const string& s) {\n    string result = \"\";\n    for (size_t i = 0; i < s.length(); i += 3) {\n        if (i + 3 > s.length()) {\n            result += s.substr(i);\n        } else {\n            result += s.substr(i + 1, 2) + s[i];\n        }\n    }\n    return result;\n}\n\nstring decodeCyclic(const string& s) {\n    return encodeCyclic(encodeCyclic(s));\n}\n```",
            "```cpp\n#include <cmath>\nbool is_prime(int n) {\n    if (n < 2)\n        return false;\n    for (int i = 2; i <= std::sqrt(n); ++i) {\n        if (n % i == 0)\n            return false;\n    }\n    return true;\n}\n\nint primeFib(int n) {\n    int f[] = {0, 1};\n    int cnt = 0;\n    while (cnt < n) {\n        f[0] = f[1];\n        f[1] = f[0] + f[1];\n        if (is_prime(f[1]))\n            ++cnt;\n    }\n    return f[1];\n}\n```",
            "```cpp\nbool triplesSumToZero(const vector<int>& l) {\n    for (int i = 0; i < l.size(); ++i) {\n        for (int j = i + 1; j < l.size(); ++j) {\n            for (int k = j + 1; k < l.size(); ++k) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n```",
            "```cpp\nint carRaceCollision(int n) {\n    return n * n;\n}\n```",
            "```cpp\nvector<int> incrList(const vector<int>& l) {\n    vector<int> result;\n    for (int i : l) {\n        result.push_back(i + 1);\n    }\n    return result;\n}\n```",
            "```cpp\nbool pairsSumToZero(const vector<int>& l) {\n    unordered_set<int> seen;\n    for (int num : l) {\n        if (seen.find(-num) != seen.end()) {\n            return true;\n        }\n        seen.insert(num);\n    }\n    return false;\n}\n```",
            "```cpp\nstring changeBase(int x, int bas) {\n    if (x == 0) {\n        return \"0\";\n    }\n    string digits = \"\";\n    while (x > 0) {\n        digits += to_string(x % bas);\n        x /= bas;\n    }\n    reverse(digits.begin(), digits.end());\n    return digits;\n}\n```",
            "```cpp\ndouble triangleArea(int a, int h) {\n    return a * h / 2.0;\n}\n```",
            "```cpp\nint fib4(int n) {\n    int fib[4] = {0, 0, 2, 0};\n    for (int i = 4; i <= n + 1; i++) {\n        fib[i % 4] = fib[0] + fib[1] + fib[2] + fib[3];\n    }\n    return fib[n % 4];\n}\n```",
            "```cpp\ndouble median(const vector<double>& l) {\n    sort(l.begin(), l.end());\n    size_t count = l.size();\n    if (count % 2 != 0) {\n        return l[floor(count / 2)];\n    } else {\n        return (l[count / 2] + l[count / 2 - 1]) / 2;\n    }\n}\n```",
            "```cpp\nbool isPalindrome(const string& txt) {\n    int n = txt.length();\n    for (int i = 0; i < n / 2; ++i) {\n        if (txt[i] != txt[n - i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n```",
            "```cpp\nint modp(int n, int p) {\n    int ret = 1;\n    for (int i = 0; i < n; i++) {\n        ret = (ret * 2) % p;\n    }\n    return ret;\n}\n```",
            "```cpp\nstring encodeShift(const string& s) {\n    string result = \"\";\n    for (char ch : s) {\n        result += char(((ch - 'a' + 5) % 26) + 'a');\n    }\n    return result;\n}\n\nstring decodeShift(const string& s) {\n    string result = \"\";\n    for (char ch : s) {\n        result += char(((ch - 'a' + 21) % 26) + 'a');\n    }\n    return result;\n}\n```",
            "```cpp\nstring removeVowels(const string& txt) {\n    string vowels = \"aeiouAEIOU\";\n    string result = '';\n    \n    for (size_t i = 0; i < txt.length(); i++) {\n        if (vowels.find(txt[i]) == string::npos) {\n            result += txt[i];\n        }\n    }\n    \n    return result;\n}\n```",
            "```cpp\nbool belowThreshold(const vector<int>& l, int t) {\n    for (int x : l) {\n        if (x >= t) {\n            return false;\n        }\n    }\n    return true;\n}\n```",
            "```cpp\nint add(int x, int y) {\n    return x + y;\n}\n```",
            "```cpp\nbool sameChars(const string& s0, const string& s1) {\n    return unordered_set<char>(s0.begin(), s0.end()) == unordered_set<char>(s1.begin(), s1.end());\n}\n```",
            "```cpp\nint fib(int n) {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n```",
            "```cpp\nbool correctBracketing(const string& brackets) {\n    int depth = 0;\n    for (size_t i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n            depth += 1;\n        } else if (brackets[i] == '>') {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}\n```",
            "```cpp\nbool monotonic(const vector<int>& l) {\n    if (l.size() <= 1) return true;\n    \n    bool non_decreasing = true;\n    bool non_increasing = true;\n    \n    for (size_t i = 1; i < l.size(); ++i) {\n        if (l[i] > l[i - 1]) non_increasing = false;\n        if (l[i] < l[i - 1]) non_decreasing = false;\n    }\n    \n    return non_decreasing || non_increasing;\n}\n```",
            "```cpp\nvector<int> common(const vector<int>& l1, const vector<int>& l2) {\n    std::set<int> set1(l1.begin(), l1.end());\n    std::set<int> set2(l2.begin(), l2.end());\n    std::vector<int> result;\n    \n    std::set_intersection(set1.begin(), set1.end(),\n                          set2.begin(), set2.end(),\n                          std::back_inserter(result));\n                          \n    return result;\n}\n```",
            "```cpp\nint largestPrimeFactor(int n) {\n    int i = 2;\n    while (i * i <= n) {\n        if (n % i) {\n            i += 1;\n        } else {\n            n /= i;\n        }\n    }\n    return n;\n}\n```",
            "```cpp\nint sumToN(int n) {\n    int sum = 0;\n    for (int i = 0; i <= n; ++i) {\n        sum += i;\n    }\n    return sum;\n}\n```",
            "```cpp\nbool correctBracketing(const string& brackets) {\n    int depth = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] === '(') {\n            depth += 1;\n        } else if (brackets[i] === ')') {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n```",
            "```cpp\nvector<int> derivative(const vector<int>& xs) {\n    vector<int> result;\n    for (size_t i = 1; i < xs.size(); ++i) {\n        result.push_back(xs[i] * static_cast<int>(i));\n    }\n    return result;\n}\n```",
            "```cpp\nint fibfib(int n) {\n    if (n <= 1) {\n        return 0;\n    }\n    int a = 0, b = 0, c = 1;\n    while (n > 2) {\n        a = b;\n        b = c;\n        c = a + b + c;\n        n -= 1;\n    }\n    return c;\n}\n```",
            "```cpp\nint vowelsCount(const string& s) {\n    string vowels = \"aeiou\";\n    int cnt = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (vowels.find(tolower(s[i])) != string::npos || (i == s.length() - 1 && tolower(s[i]) == 'y')) {\n            cnt++;\n        }\n    }\n    return cnt;\n}\n```",
            "```cpp\nstring circularShift(int x, int shift) {\n    string x_str = to_string(x);\n    if (shift > x_str.length()) {\n        reverse(x_str.begin(), x_str.end());\n    } else {\n        string part1 = x_str.substr(x_str.length() - shift);\n        string part2 = x_str.substr(0, x_str.length() - shift);\n        x_str = part1 + part2;\n    }\n    return x_str;\n}\n```",
            "```cpp\nint digitSum(const string& s) {\n    int sum = 0;\n    for (size_t i = 0; i < s.length(); i++) {\n        char c = s[i];\n        if (isupper(c)) {\n            sum += static_cast<int>(c);\n        }\n    }\n    return sum;\n}\n```",
            "```cpp\nint fruitDistribution(const string& s, int n) {\n    vector<string> words;\n    stringstream ss(s);\n    string word;\n    while (ss >> word) {\n        words.push_back(word);\n    }\n    auto applesIndex = find(words.begin(), words.end(), \"apples\") - words.begin() - 1;\n    auto orangesIndex = find(words.begin(), words.end(), \"oranges\") - words.begin() - 1;\n    int apples = stoi(words[applesIndex]);\n    int oranges = stoi(words[orangesIndex]);\n    return n - apples - oranges;\n}\n```",
            "```cpp\nvector<int> pluck(const vector<int>& arr) {\n    vector<int> evens;\n    \n    for (int n : arr) {\n        if (n % 2 == 0) {\n            evens.push_back(n);\n        }\n    }\n    \n    if (evens.empty()) {\n        return {};\n    }\n    \n    int min_even = *min_element(evens.begin(), evens.end());\n    auto it = find(arr.begin(), arr.end(), min_even);\n    int index = distance(arr.begin(), it);\n    \n    return {min_even, index};\n}\n```",
            "```cpp\nint search(const vector<int>& lst) {\n    map<int, int> freqs;\n    for (int n : lst) {\n        if (freqs.find(n) != freqs.end()) {\n            freqs[n]++;\n        } else {\n            freqs[n] = 1;\n        }\n    }\n    vector<int> good_vals;\n    for (const auto& [k, v] : freqs) {\n        if (v >= k) {\n            good_vals.push_back(k);\n        }\n    }\n    return !good_vals.empty() ? *max_element(good_vals.begin(), good_vals.end()) : -1;\n}\n```",
            "```cpp\nvector<int> strangeSortList(const vector<int>& lst) {\n    vector<int> sl = lst;\n    sort(sl.begin(), sl.end());\n    vector<int> result;\n    int left = 0;\n    int right = sl.size() - 1;\n    while (left <= right) {\n        result.push_back(sl[left]);\n        left++;\n        if (left <= right) {\n            result.push_back(sl[right]);\n            right--;\n        }\n    }\n    return result;\n}\n```",
            "```cpp\ndouble triangleArea(int a, int b, int c) {\n    if (a + b > c && a + c > b && b + c > a) {\n        double s = (a + b + c) / 2.0;\n        return sqrt(s * (s - a) * (s - b) * (s - c));\n    } else {\n        return -1.0;\n    }\n}\n```",
            "```cpp\nbool willItFly(const std::vector<int>& q, int w) {\n    if (q.empty()) {\n        return false;\n    }\n    bool is_palin = true;\n    for (size_t i = 0; i < q.size(); i++) {\n        if (q[i] != q[q.size() - i - 1]) {\n            is_palin = false;\n            break;\n        }\n    }\n    int total = std::accumulate(q.begin(), q.end(), 0);\n    return is_palin && total <= w;\n}\n```",
            "```cpp\nint smallestChange(const vector<int>& arr) {\n    int ans = 0;\n    for (int i = 0; i < arr.size() / 2; i++) {\n        if (arr[i] != arr[arr.size() - i - 1]) {\n            ans += 1;\n        }\n    }\n    return ans;\n}\n```",
            "```cpp\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nvector<string> totalMatch(const vector<string>& lst1, const vector<string>& lst2) {\n    int cnt1 = 0;\n    for (const auto& item : lst1) {\n        cnt1 += item.length();\n    }\n\n    int cnt2 = 0;\n    for (const auto& item : lst2) {\n        cnt2 += item.length();\n    }\n\n    return cnt1 <= cnt2 ? lst1 : lst2;\n}\n```",
            "\tbool is_prime(int n) {\n\t    if (n < 2) {\n\t        return false;\n\t    }\n\t    for (int i = 2; i <= sqrt(n); i++) {\n\t        if (n % i == 0) {\n\t            return false;\n\t        }\n\t    }\n\t    return true;\n\t}\n\n\tbool isMultiplyPrime(int a) {\n\t    int cnt = 0;\n\t    for (int i = 2; i <= a; i++) {\n\t        if (is_prime(i)) {\n\t            while (a % i == 0) {\n\t                cnt++;\n\t                a /= i;\n\t            }\n\t        }\n\t    }\n\t    return cnt == 3;\n\t}",
            "```cpp\nbool isSimplePower(int x, int n) {\n    if (n < 2) {\n        return x == n;\n    }\n    int tmp = 1;\n    while (tmp < x) {\n        tmp *= n;\n    }\n    return tmp == x;\n}\n```",
            "```cpp\nbool isCube(int a) {\n    a = abs(a);\n    int root = (int)(round(pow(a, 1.0 / 3.0)));\n    return root * root * root == a;\n}\n```",
            "```cpp\nint hexKey(const string& num) {\n    set<char> validChars = {'2', '3', '5', '7', 'B', 'D'};\n    int count = 0;\n    for (char x : num) {\n        if (validChars.find(x) != validChars.end()) {\n            count++;\n        }\n    }\n    return count;\n}\n```",
            "```cpp\nstring decimalToBinary(int dec) {\n    string binary = bitset<32>(dec).to_string();\n    binary = binary.substr(binary.find('1'));\n    return \"db\" + binary + \"db\";\n}\n```",
            "```cpp\nbool isHappy(const string& s) {\n    if (s.length() < 3) {\n        return false;\n    }\n    for (size_t i = 0; i <= s.length() - 3; i++) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n```",
            "```cpp\nvector<string> numericalLetterGrade(const vector<double>& grades) {\n    vector<string> result;\n    for (double g : grades) {\n        if (g == 4.0) {\n            result.push_back(\"A+\");\n        } else if (g > 3.7) {\n            result.push_back(\"A\");\n        } else if (g > 3.3) {\n            result.push_back(\"A-\");\n        } else if (g > 3.0) {\n            result.push_back(\"B+\");\n        } else if (g > 2.7) {\n            result.push_back(\"B\");\n        } else if (g > 2.3) {\n            result.push_back(\"B-\");\n        } else if (g > 2.0) {\n            result.push_back(\"C+\");\n        } else if (g > 1.7) {\n            result.push_back(\"C\");\n        } else if (g > 1.3) {\n            result.push_back(\"C-\");\n        } else if (g > 1.0) {\n            result.push_back(\"D+\");\n        } else if (g > 0.7) {\n            result.push_back(\"D\");\n        } else if (g > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\n```",
            "```cpp\nbool primeLength(const string& s) {\n    int length = s.length();\n    if (length < 2) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(length); i++) {\n        if (length % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n```",
            "```cpp\nint startsOneEnds(int n) {\n    if (n == 1) {\n        return 1;\n    }\n    return 2 * 9 * pow(10, n - 2);\n}\n```",
            "```cpp\nstring solve(int n) {\n    int digits_sum = 0;\n    while (n > 0) {\n        digits_sum += n % 10;\n        n /= 10;\n    }\n    return bitset<32>(digits_sum).to_string().substr(32 - log2(digits_sum*2));\n}\n```",
            "```cpp\nint add(const vector<int>& lst) {\n    int sum = 0;\n    for (size_t i = 0; i < lst.size(); ++i) {\n        if (i % 2 == 1 && lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n```",
            "```cpp\nstring antiShuffle(const string& s) {\n    stringstream ss(s);\n    string word;\n    vector<string> words;\n    while (ss >> word) {\n        sort(word.begin(), word.end());\n        words.push_back(word);\n    }\n    string result = accumulate(words.begin(), words.end(), string(), [](const string& a, const string& b) -> string { return a.empty() ? b : a + \" \" + b; });\n    return result;\n}\n```",
            "```cpp\nvector<vector<int>> getRow(const vector<vector<int>>& lst, int x) {\n    vector<vector<int>> coords;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                coords.push_back({i, j});\n            }\n        }\n    }\n    sort(coords.begin(), coords.end(), [](const vector<int>& a, const vector<int>& b) {\n        if (a[0] == b[0]) {\n            return b[1] < a[1];\n        }\n        return a[0] < b[0];\n    });\n    return coords;\n}\n```",
            "```cpp\nvector<int> sortArray(const vector<int>& arr) {\n    if (arr.empty()) {\n        return {};\n    }\n    if ((arr.front() + arr.back()) % 2 == 0) {\n        vector<int> sortedArr = arr;\n        sort(sortedArr.begin(), sortedArr.end(), greater<int>());\n        return sortedArr;\n    } else {\n        vector<int> sortedArr = arr;\n        sort(sortedArr.begin(), sortedArr.end());\n        return sortedArr;\n    }\n}\n```",
            "```cpp\nstring encrypt(const string& s) {\n    string result;\n    for (size_t i = 0; i < s.length(); i++) {\n        char ch = s[i];\n        int shifted = static_cast<int>(ch) + 4;\n        if (shifted > static_cast<int>('z')) {\n            shifted -= 26;\n        }\n        result += static_cast<char>(shifted);\n    }\n    return result;\n}\n```",
            "```cpp\n#include <vector>\n#include <set>\n#include <optional>\n\nstd::optional<int> nextSmallest(const std::vector<int>& lst) {\n    std::set<int> sl(lst.begin(), lst.end());\n    if (sl.size() < 2) {\n        return std::nullopt;\n    }\n    auto it = sl.begin();\n    ++it;\n    return *it;\n}\n```",
            "```cpp\n#include <string>\n#include <vector>\n#include <sstream>\n\nusing namespace std;\n\nint isBored(const string& s) {\n    vector<string> sentences;\n    stringstream ss(s);\n    string sentence;\n    while (getline(ss, sentence, '.')) {\n        sentences.push_back(sentence + \".\");\n    }\n    getline(ss, sentence, '!');\n    sentences.push_back(sentence + \"!\");\n    getline(ss, sentence, '?');\n    sentences.push_back(sentence + \"?\");\n\n    int count = 0;\n    for (const string& sentence : sentences) {\n        if (sentence.length() >= 2 && sentence.substr(0, 2) == \"I \") {\n            count++;\n        }\n    }\n    return count;\n}\n```",
            "```cpp\ntemplate <typename T>\nbool anyInt(T x, T y, T z) {\n    if constexpr (std::is_integral_v<T>) {\n        if ((x + y == z) || (x + z == y) || (y + z == x)) {\n            return true;\n        }\n    }\n    return false;\n}\n```",
            "```cpp\nstring encode(const string& message) {\n    string vowels = \"aeiouAEIOU\";\n    string result;\n    for (char ch : message) {\n        if (isalpha(ch)) {\n            char ch1 = islower(ch) ? toupper(ch) : tolower(ch);\n            if (vowels.find(ch1) != string::npos) {\n                ch1 += 2;\n            }\n            result += ch1;\n        } else {\n            result += ch;\n        }\n    }\n    return result;\n}\n```",
            "```cpp\n#include <vector>\n#include <cmath>\n#include <string>\n#include <algorithm>\n\nbool is_prime(int n) {\n    if (n < 2) {\n        return false;\n    }\n    for (int i = 2; i <= std::sqrt(n); ++i) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint skjkasdkd(const std::vector<int>& lst) {\n    std::vector<int> primes;\n    for (int n : lst) {\n        if (is_prime(n)) {\n            primes.push_back(n);\n        }\n    }\n    if (primes.empty()) {\n        return 0;\n    }\n    int largest = *std::max_element(primes.begin(), primes.end());\n    std::string largest_str = std::to_string(largest);\n    int sum_of_digits = 0;\n    for (char digit : largest_str) {\n        sum_of_digits += digit - '0';\n    }\n    return sum_of_digits;\n}\n```",
            "```cpp\nbool checkDictCase(const unordered_map<string, string>& d) {\n    if (d.empty()) {\n        return false;\n    }\n    bool allLower = true;\n    bool allUpper = true;\n    for (const auto& pair : d) {\n        const string& key = pair.first;\n        allLower &= all_of(key.begin(), key.end(), ::islower);\n        allUpper &= all_of(key.begin(), key.end(), ::isupper);\n    }\n    return allLower || allUpper;\n}\n```",
            "```cpp\nvector<int> countUpTo(int n) {\n    vector<int> primes;\n    for (int num = 2; num < n; num++) {\n        bool isPrime = true;\n        for (int p : primes) {\n            if (num % p == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            primes.push_back(num);\n        }\n    }\n    return primes;\n}\n```",
            "```cpp\nint multiply(int a, int b) {\n    return (abs(a) % 10) * (abs(b) % 10);\n}\n```",
            "```cpp\nint countUpper(const string& s) {\n    string vowels = \"AEIOU\";\n    int count = 0;\n    for (size_t i = 0; i < s.length(); i++) {\n        if (i % 2 == 0 && vowels.find(s[i]) != string::npos) {\n            count++;\n        }\n    }\n    return count;\n}\n```",
            "```cpp\nint closestInteger(const string& value) {\n    double num = stod(value);\n    if (num >= 0) {\n        return int(num + 0.5);\n    } else {\n        return int(num - 0.5);\n    }\n}\n```",
            "```cpp\nvector<int> makeAPile(int n) {\n    vector<int> pile;\n    for (int i = 0; i < n; i++) {\n        pile.push_back(n + 2 * i);\n    }\n    return pile;\n}\n```",
            "```cpp\nvector<string> wordsString(const string& s) {\n    vector<string> result;\n    istringstream stream(s);\n    string word;\n    while (stream >> word || getline(stream, word, ',')) {\n        if (!word.empty()) {\n            result.push_back(word);\n        }\n    }\n    return result;\n}\n```",
            "```cpp\nint chooseNum(int x, int y) {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 == 0) {\n        return y;\n    }\n    return x != y ? y - 1 : -1;\n}\n```",
            "```cpp\n#include <string>\n\nstd::optional<std::string> roundedAvg(int n, int m) {\n    if (n > m) {\n        return std::nullopt;\n    }\n    int r_avg = static_cast<int>(0.5 + (m + n) / 2.0);\n    return std::to_binary_string(r_avg);\n}\n```",
            "```cpp\n#include <vector>\n#include <string>\n#include <algorithm>\n\nbool all_digits_odd(const std::string& s) {\n    return std::all_of(s.begin(), s.end(), [](char digit) { return (digit - '0') % 2 != 0; });\n}\n\nstd::vector<int> uniqueDigits(const std::vector<int>& x) {\n    std::vector<int> result;\n    for (int num : x) {\n        if (all_digits_odd(std::to_string(num))) {\n            result.push_back(num);\n        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\n```",
            "```cpp\nvector<string> byLength(const vector<int>& arr) {\n    const vector<string> digit_names = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    vector<int> sorted_arr;\n    copy_if(arr.begin(), arr.end(), back_inserter(sorted_arr), [](int x) {\n        return 1 <= x && x <= 9;\n    });\n    sort(sorted_arr.begin(), sorted_arr.end(), greater<int>());\n    vector<string> result;\n    transform(sorted_arr.begin(), sorted_arr.end(), back_inserter(result), [&](int x) {\n        return digit_names[x - 1];\n    });\n    return result;\n}\n```",
            "```cpp\nvector<int> f(int n) {\n    vector<int> nums(n);\n    for (int i = 0; i < n; ++i) {\n        nums[i] = i + 1;\n    }\n    vector<int> result;\n    for (size_t i = 0; i < nums.size(); ++i) {\n        if ((i + 1) % 2 != 0) {\n            int sum = accumulate(nums.begin(), nums.begin() + i + 1, 0);\n            result.push_back(sum);\n        } else {\n            int product = 1;\n            for (size_t j = 0; j <= i; ++j) {\n                product *= nums[j];\n            }\n            result.push_back(product);\n        }\n    }\n    return result;\n}\n```",
            "```cpp\nvector<int> evenOddPalindrome(int n) {\n    vector<int> cnt(2, 0);\n    for (int i = 1; i <= n; i++) {\n        string str = to_string(i);\n        string revStr = str;\n        reverse(revStr.begin(), revStr.end());\n        if (str == revStr) {\n            cnt[i % 2]++;\n        }\n    }\n    return cnt;\n}\n```",
            "```cpp\nint digitsSum(int n) {\n    std::string n_str = std::to_string(n);\n    if (n >= 0) {\n        int sum = 0;\n        for (char d : n_str) {\n            sum += d - '0';\n        }\n        return sum;\n    } else {\n        return (n_str[0] - '0') * 2 + digitsSum(std::abs(n));\n    }\n}\n\nint countNums(const std::vector<int>& arr) {\n    int count = 0;\n    for (int n : arr) {\n        if (digitsSum(n) > 0) {\n            ++count;\n        }\n    }\n    return count;\n}\n```",
            "```cpp\n#include <vector>\nusing namespace std;\n\nbool moveOneBall(const vector<int>& arr) {\n    if (arr.empty()) {\n        return true;\n    }\n    vector<int> sorted_arr = arr;\n    sort(sorted_arr.begin(), sorted_arr.end());\n    for (size_t i = 0; i < arr.size(); ++i) {\n        if (vector<int>(arr.begin() + i, arr.end()) == vector<int>(sorted_arr.begin(), sorted_arr.end() - i) &&\n            vector<int>(arr.begin(), arr.begin() + i) == vector<int>(sorted_arr.end() - i, sorted_arr.end())) {\n            return true;\n        }\n    }\n    return false;\n}\n```",
            "```cpp\nstring canExchange(const vector<int>& lst1, const vector<int>& lst2) {\n    int odd_cnt = 0;\n    for (int num : lst1) {\n        if (num % 2 != 0) {\n            odd_cnt++;\n        }\n    }\n\n    int even_cnt = 0;\n    for (int num : lst2) {\n        if (num % 2 == 0) {\n            even_cnt++;\n        }\n    }\n\n    return even_cnt >= odd_cnt ? \"YES\" : \"NO\";\n}\n```",
            "```cpp\nunordered_map<string, int> histogram(const string& test) {\n    unordered_map<string, int> freq;\n    istringstream iss(test);\n    string word;\n    while (iss >> word) {\n        if (!word.empty()) {\n            freq[word]++;\n        }\n    }\n    unordered_map<string, int> result;\n    if (!freq.empty()) {\n        int max_freq = 0;\n        for (const auto& pair : freq) {\n            if (pair.second > max_freq) {\n                max_freq = pair.second;\n            }\n        }\n        for (const auto& pair : freq) {\n            if (pair.second == max_freq) {\n                result[pair.first] = pair.second;\n            }\n        }\n    }\n    return result;\n}\n```",
            "```cpp\nvector<string> reverseDelete(const string& s, const string& c) {\n    string s1;\n    for (char ch : s) {\n        if (c.find(ch) == string::npos) {\n            s1 += ch;\n        }\n    }\n    bool isPalin = (s1 == string(s1.rbegin(), s1.rend()));\n    return {s1, isPalin ? \"yes\" : \"no\"};\n}\n```",
            "```cpp\nvector<string> oddCount(const vector<string>& lst) {\n    vector<string> result;\n    for (const auto& num : lst) {\n        int n = 0;\n        for (char c : num) {\n            if (static_cast<int>(c) % 2 == 1) {\n                n++;\n            }\n        }\n        string rs = \"the number of odd elements in the string i of the input.\";\n        replace(rs.begin(), rs.end(), 'i', to_string(n)[0]);\n        result.push_back(rs);\n    }\n    return result;\n}\n```",
            "```cpp\nint minSubArraySum(const vector<int>& nums) {\n    int min_sum = 0;\n    int cur_sum = 0;\n    for (int n : nums) {\n        cur_sum = std::min(cur_sum + n, 0);\n        min_sum = std::min(cur_sum, min_sum);\n    }\n    if (min_sum == 0) {\n        min_sum = *std::min_element(nums.begin(), nums.end());\n    }\n    return min_sum;\n}\n```",
            "```cpp\nint maxFill(const vector<vector<int>>& grid, int capacity) {\n    int total = 0;\n    for (const auto& arr : grid) {\n        total += ceil(static_cast<double>(accumulate(arr.begin(), arr.end(), 0)) / capacity);\n    }\n    return total;\n}\n```",
            "```cpp\nvector<int> sortArray(const vector<int>& arr) {\n    auto countOnes = [](int n) {\n        return bitset<32>(n).count();\n    };\n\n    vector<int> sortedArr = arr;\n    sort(sortedArr.begin(), sortedArr.end(), [&countOnes](int a, int b) {\n        int countA = countOnes(a);\n        int countB = countOnes(b);\n        if (countA == countB) {\n            return a < b;\n        }\n        return countA < countB;\n    });\n\n    return sortedArr;\n}\n```",
            "```cpp\nvector<string> selectWords(const string& s, int n) {\n    const string consonants = \"bcdfghjklmnpqrstvwxyz\";\n    vector<string> words;\n    stringstream stream(s);\n    string word;\n    while (stream >> word) {\n        if (!word.empty()) {\n            words.push_back(word);\n        }\n    }\n\n    vector<string> result;\n    for (const auto& w : words) {\n        int consonantCount = 0;\n        for (char c : tolower(w)) {\n            if (consonants.find(c) != string::npos) {\n                ++consonantCount;\n            }\n        }\n        if (consonantCount == n) {\n            result.push_back(w);\n        }\n    }\n\n    return result;\n}\n```",
            "```cpp\nstring getClosestVowel(const string& word) {\n    string vowels = \"aeiouAEIOU\";\n    for (int i = word.length() - 2; i > 0; i--) {\n        if (vowels.find(word[i]) != string::npos && vowels.find(word[i - 1]) == string::npos && vowels.find(word[i + 1]) == string::npos) {\n            return string(1, word[i]);\n        }\n    }\n    return \"\";\n}\n```",
            "```cpp\n#include <vector>\n#include <string>\n\nbool check(const std::string& s) {\n    int depth = 0;\n    for (char ch : s) {\n        if (ch == '(') {\n            depth += 1;\n        } else {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return (depth == 0);\n}\n\nstd::string matchParens(const std::vector<std::string>& lst) {\n    std::string s1 = lst[0] + lst[1];\n    std::string s2 = lst[1] + lst[0];\n    return (check(s1) || check(s2)) ? \"Yes\" : \"No\";\n}\n```",
            "```cpp\nvector<int> maximum(const vector<int>& arr, int k) {\n    if (k == 0) {\n        return {};\n    }\n    vector<int> sortedArr = arr;\n    sort(sortedArr.begin(), sortedArr.end());\n    return vector<int>(sortedArr.end() - k, sortedArr.end());\n}\n```",
            "```cpp\nint solution(const vector<int>& lst) {\n    int sum = 0;\n    for (size_t i = 0; i < lst.size(); ++i) {\n        if (i % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n```",
            "```cpp\nint addElements(const vector<int>& arr, int k) {\n    int sum = 0;\n    for (int i = 0; i < min(k, static_cast<int>(arr.size())); i++) {\n        if (to_string(arr[i]).length() <= 2) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n```",
            "```cpp\nvector<int> getOddCollatz(int n) {\n    vector<int> collatz = {1};\n    while (n != 1) {\n        if (n % 2 != 0) {\n            collatz.push_back(n);\n            n = 3 * n + 1;\n        } else {\n            n /= 2;\n        }\n    }\n    sort(collatz.begin(), collatz.end());\n    return collatz;\n}\n```",
            "```cpp\nbool validDate(const string& date) {\n    if (date.length() != 10 || date[2] != '-' || date[5] != '-') {\n        return false;\n    }\n    int m = stoi(date.substr(0, 2));\n    int d = stoi(date.substr(3, 2));\n    if (m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) {\n        return d >= 1 && d <= 31;\n    }\n    if (m == 4 || m == 6 || m == 9 || m == 11) {\n        return d >= 1 && d <= 30;\n    }\n    if (m == 2) {\n        return d >= 1 && d <= 29;\n    }\n    return false;\n}\n```",
            "```cpp\nvector<string> splitWords(const string& txt) {\n    if (txt.find(' ') != string::npos) {\n        vector<string> result;\n        stringstream ss(txt);\n        string word;\n        while (ss >> word) {\n            result.push_back(word);\n        }\n        return result;\n    } else if (txt.find(',') != string::npos) {\n        vector<string> result;\n        stringstream ss(txt);\n        string word;\n        while (getline(ss, word, ',')) {\n            result.push_back(word);\n        }\n        return result;\n    } else {\n        int count = 0;\n        for (char c : txt) {\n            if (islower(c) && (ord(c) % 2 == 0)) {\n                count++;\n            }\n        }\n        return {to_string(count)};\n    }\n}\n```",
            "```cpp\nbool isSorted(const vector<int>& lst) {\n    if (lst.empty()) {\n        return true;\n    }\n\n    for (size_t i = 1; i < lst.size(); i++) {\n        if (lst[i - 1] > lst[i]) {\n            return false;\n        }\n    }\n\n    unordered_map<int, int> freq;\n    for (int num : lst) {\n        freq[num]++;\n    }\n    for (const auto& pair : freq) {\n        if (pair.second > 2) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```",
            "```cpp\nbool is_prime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i <= sqrt(n); ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nstring intersection(const vector<int>& interval1, const vector<int>& interval2) {\n    int l = max(interval1[0], interval2[0]);\n    int r = min(interval1[1], interval2[1]);\n    int length = r - l;\n    return (length > 0 && is_prime(length)) ? \"YES\" : \"NO\";\n}\n```",
            "```cpp\n#include <vector>\n#include <optional>\n#include <numeric>\n\noptional<int> prodSigns(const vector<int>& arr) {\n    if (arr.empty()) {\n        return nullopt;\n    }\n    if (find(arr.begin(), arr.end(), 0) != arr.end()) {\n        return 0;\n    }\n    int neg_count = count_if(arr.begin(), arr.end(), [](int n) {\n        return n < 0;\n    });\n    int sign = (neg_count % 2 == 1) ? -1 : 1;\n    return sign * accumulate(arr.begin(), arr.end(), 0, [](int sum, int n) {\n        return sum + abs(n);\n    });\n}\n```",
            "```cpp\nvector<int> minPath(const vector<vector<int>>& grid, int k) {\n    int n = grid.size();\n    int min_val = n * n + 1;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            if (grid[i][j] == 1) {\n                vector<int> temp;\n                if (i != 0) {\n                    temp.push_back(grid[i - 1][j]);\n                }\n                if (j != 0) {\n                    temp.push_back(grid[i][j - 1]);\n                }\n                if (i != n - 1) {\n                    temp.push_back(grid[i + 1][j]);\n                }\n                if (j != n - 1) {\n                    temp.push_back(grid[i][j + 1]);\n                }\n                min_val = *min_element(temp.begin(), temp.end());\n            }\n        }\n    }\n    vector<int> result;\n    for (int i = 0; i < k; i++) {\n        result.push_back((i % 2 == 0 ? 1 : min_val));\n    }\n    return result;\n}\n```",
            "```cpp\nvector<int> tri(int n) {\n    if (n == 0) {\n        return vector<int>({1});\n    }\n    vector<int> seq = {1, 3};\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0) {\n            seq.push_back(i / 2 + 1);\n        } else {\n            seq.push_back(seq[i - 1] + seq[i - 2] + (i + 3) / 2);\n        }\n    }\n    return seq;\n}\n```",
            "```cpp\nint digits(int n) {\n    int product = 1;\n    bool hasOddDigit = false;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit % 2 == 1) {\n            product *= digit;\n            hasOddDigit = true;\n        }\n        n /= 10;\n    }\n    return hasOddDigit ? product : 0;\n}\n```",
            "```cpp\nbool isNested(const string& s) {\n    vector<int> open_idx;\n    vector<int> close_idx;\n    \n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == '[') {\n            open_idx.push_back(i);\n        } else if (s[i] == ']') {\n            close_idx.push_back(i);\n        }\n    }\n    \n    std::reverse(close_idx.begin(), close_idx.end());\n    int cnt = 0;\n    int i = 0;\n    int l = close_idx.size();\n    \n    for (const auto& idx : open_idx) {\n        if (i < l && idx < close_idx[i]) {\n            cnt += 1;\n            i += 1;\n        }\n    }\n    \n    return cnt >= 2;\n}\n```",
            "```cpp\nint sumSquares(const vector<double>& lst) {\n    int sum = 0;\n    for (double n : lst) {\n        int ceilN = std::ceil(n);\n        sum += ceilN * ceilN;\n    }\n    return sum;\n}\n```",
            "```cpp\nbool checkIfLastCharIsALetter(const string& txt) {\n    if (txt.empty()) {\n        return false;\n    }\n    size_t lastSpacePos = txt.rfind(' ');\n    string last = txt.substr(lastSpacePos + 1);\n    return last.length() == 1 && isalpha(last[0]);\n}\n```",
            "```cpp\nint canArrange(const vector<int>& arr) {\n    if (arr.size() <= 1) {\n        return -1;\n    }\n    int idx = -1;\n    for (size_t i = 1; i < arr.size(); ++i) {\n        if (arr[i] < arr[i - 1]) {\n            idx = i;\n        }\n    }\n    return idx;\n}\n```",
            "```cpp\n#include <optional>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<optional<int>> largestSmallestIntegers(const vector<int>& lst) {\n    vector<int> neg;\n    vector<int> pos;\n\n    for (int i : lst) {\n        if (i < 0) {\n            neg.push_back(i);\n        } else if (i > 0) {\n            pos.push_back(i);\n        }\n    }\n\n    optional<int> max_neg = neg.empty() ? nullopt : *max_element(neg.begin(), neg.end());\n    optional<int> min_pos = pos.empty() ? nullopt : *min_element(pos.begin(), pos.end());\n\n    return {max_neg, min_pos};\n}\n```",
            "```cpp\n#include <any>\n#include <string>\n#include <stdexcept>\n\nstd::optional<double> any_to_real(const std::any& o) {\n    if (o.type() == typeid(std::string)) {\n        std::string str = std::any_cast<std::string>(o);\n        for (char& ch : str) {\n            if (ch == ',') {\n                ch = '.';\n            }\n        }\n        return std::stod(str);\n    } else if (o.type() == typeid(int)) {\n        return static_cast<double>(std::any_cast<int>(o));\n    } else if (o.type() == typeid(double)) {\n        return std::any_cast<double>(o);\n    } else {\n        throw std::runtime_error(\"Type Error\");\n    }\n}\n\nstd::optional<double> compare_one(const std::any& a, const std::any& b) {\n    auto a1 = any_to_real(a);\n    auto b1 = any_to_real(b);\n    if (a1 == b1) {\n        return std::nullopt;\n    } else if (a1 > b1) {\n        return a1;\n    } else {\n        return b1;\n    }\n}\n```",
            "```cpp\nbool isEqualToSumEven(int n) {\n    return n % 2 == 0 && n >= 8;\n}\n```",
            "```cpp\nint specialFactorial(int n) {\n    int fact = 1;\n    int result = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n        result *= fact;\n    }\n    return result;\n}\n```",
            "```cpp\n#include <regex>\n\nusing namespace std;\n\nstring fixSpaces(const string& txt) {\n    string result = regex_replace(txt, regex(\"\\\\s{3,}\"), \"-\");\n    return replaceAll(result, \" \", \"_\");\n}\n\nstring replaceAll(string str, const string& from, const string& to) {\n    size_t start_pos = 0;\n    while ((start_pos = str.find(from, start_pos)) != string::npos) {\n        str.replace(start_pos, from.length(), to);\n        start_pos += to.length();\n    }\n    return str;\n}\n```",
            "```cpp\n#include <vector>\n#include <string>\n#include <cctype>\n\nusing namespace std;\n\nstring fileNameCheck(const string& file_name) {\n    vector<string> suf = {\"txt\", \"exe\", \"dll\"};\n    size_t dot_pos = file_name.find('.');\n    if (dot_pos == string::npos || dot_pos == 0 || dot_pos == file_name.length() - 1) {\n        return \"No\";\n    }\n    \n    string name_part = file_name.substr(0, dot_pos);\n    string suf_part = file_name.substr(dot_pos + 1);\n    \n    if (!isalpha(name_part[0]) || count_if(name_part.begin(), name_part.end(), ::isdigit) > 3) {\n        return \"No\";\n    }\n    \n    if (find(suf.begin(), suf.end(), suf_part) == suf.end()) {\n        return \"No\";\n    }\n    \n    return \"Yes\";\n}\n```",
            "```cpp\nint sumSquares(const vector<int>& lst) {\n    int result = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 3 == 0) {\n            result += pow(lst[i], 2);\n        } else if (i % 4 == 0) {\n            result += pow(lst[i], 3);\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n```",
            "```cpp\nstring wordsInSentence(const string& sentence) {\n    stringstream ss(sentence);\n    string word;\n    vector<string> primeWords;\n\n    while (ss >> word) {\n        int length = word.length();\n        if (length < 2) {\n            continue;\n        }\n        bool isPrime = true;\n        for (int i = 2; i <= sqrt(length); i++) {\n            if (length % i == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            primeWords.push_back(word);\n        }\n    }\n\n    string result;\n    for (size_t i = 0; i < primeWords.size(); ++i) {\n        result += primeWords[i];\n        if (i < primeWords.size() - 1) {\n            result += \" \";\n        }\n    }\n    return result;\n}\n```",
            "```cpp\nbool simplify(const string& x, const string& n) {\n    size_t slashPos = x.find('/');\n    int numX = stoi(x.substr(0, slashPos));\n    int denX = stoi(x.substr(slashPos + 1));\n\n    slashPos = n.find('/');\n    int numN = stoi(n.substr(0, slashPos));\n    int denN = stoi(n.substr(slashPos + 1));\n\n    int num = numX * numN;\n    int den = denX * denN;\n\n    return num % den == 0;\n}\n```",
            "```cpp\nvector<int> orderByPoints(const vector<int>& nums) {\n    vector<int> sortedNums = nums;\n    sort(sortedNums.begin(), sortedNums.end(), [](int a, int b) {\n        return digitsSum(a) < digitsSum(b);\n    });\n    return sortedNums;\n}\n\nint digitsSum(int n) {\n    string n_str = to_string(n);\n    if (n >= 0) {\n        return accumulate(n_str.begin(), n_str.end(), 0, [](int sum, char digit) {\n            return sum + (digit - '0');\n        });\n    } else {\n        return (n_str[0] - '0') * 2 + digitsSum(abs(n));\n    }\n}\n```",
            "```cpp\n#include <vector>\n#include <string>\n\nint specialFilter(const std::vector<int>& nums) {\n    std::string odds = \"13579\";\n    int count = 0;\n    for (int n : nums) {\n        if (n > 10 && n % 2 == 1 && odds.find(std::to_string(n)[0]) != std::string::npos) {\n            count++;\n        }\n    }\n    return count;\n}\n```",
            "```cpp\nint getMaxTriples(int n) {\n    int c[3] = {0, 0, 0};\n    for (int i = 1; i <= n; i++) {\n        int a = i * i - i + 1;\n        c[a % 3]++;\n    }\n    return c[0] * c[1] * c[2] + ((c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6);\n}\n```",
            "```cpp\nvector<string> bf(const string& planet1, const string& planet2) {\n    vector<string> names = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    if (find(names.begin(), names.end(), planet1) == names.end() || find(names.begin(), names.end(), planet2) == names.end()) {\n        return {};\n    }\n    int l = distance(names.begin(), find(names.begin(), names.end(), planet1));\n    int r = distance(names.begin(), find(names.begin(), names.end(), planet2));\n    if (l > r) {\n        swap(l, r);\n    }\n    if (l == r) {\n        return {};\n    }\n    return vector<string>(names.begin() + l + 1, names.begin() + r);\n}\n```",
            "```cpp\nvector<string> sortedListSum(const vector<string>& lst) {\n    vector<string> result;\n    \n    for (const auto& s : lst) {\n        if (s.length() % 2 == 0) {\n            result.push_back(s);\n        }\n    }\n    \n    sort(result.begin(), result.end(), [](const string& a, const string& b) {\n        int lengthComparison = a.length() - b.length();\n        if (lengthComparison != 0) {\n            return lengthComparison < 0;\n        }\n        return a < b;\n    });\n    \n    return result;\n}\n```",
            "```cpp\nint xOrY(int n, int x, int y) {\n    if (n < 2) {\n        return y;\n    }\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return y;\n        }\n    }\n    return x;\n}\n```",
            "```cpp\nint doubleTheDifference(const vector<double>& lst) {\n    int sum = 0;\n    for (double n : lst) {\n        if (n >= 0 && fmod(n, 2) == 1) {\n            sum += static_cast<int>(n * n);\n        }\n    }\n    return sum;\n}\n```",
            "```cpp\nvector<int> compare(const vector<int>& game, const vector<int>& guess) {\n    vector<int> result;\n    for (size_t i = 0; i < game.size(); ++i) {\n        result.push_back(abs(game[i] - guess[i]));\n    }\n    return result;\n}\n```",
            "```cpp\nstring strongestExtension(const string& class_name, const vector<string>& extensions) {\n    int max_s = -INT_MAX;\n    string max_ext = \"\";\n    for (const auto& ext : extensions) {\n        int upper = count_if(ext.begin(), ext.end(), ::isupper);\n        int lower = count_if(ext.begin(), ext.end(), ::islower);\n        int s = upper - lower;\n        if (s > max_s) {\n            max_s = s;\n            max_ext = ext;\n        }\n    }\n    return class_name + \".\" + max_ext;\n}\n```",
            "```cpp\nbool cycpatternCheck(const string& a, const string& b) {\n    if (a.length() < b.length()) {\n        return false;\n    }\n    for (size_t i = 0; i < b.length(); i++) {\n        string rotated = b.substr(i) + b.substr(0, i);\n        if (a.find(rotated) != string::npos) {\n            return true;\n        }\n    }\n    return false;\n}\n```",
            "```cpp\n#include <string>\n#include <vector>\n#include <cmath>\n\nstd::vector<int> evenOddCount(int num) {\n    std::string ds = std::to_string(std::abs(num));\n    int even = 0;\n    \n    for (int i = 0; i < ds.length(); i++) {\n        if ((ds[i] - '0') % 2 == 0) {\n            even++;\n        }\n    }\n    \n    return {even, static_cast<int>(ds.length()) - even};\n}\n```",
            "```cpp\nstring intToMiniRoman(int num) {\n    vector<int> values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    vector<string> numerals = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    string res = \"\";\n    for (int i = 0; i < values.size(); i++) {\n        while (num >= values[i]) {\n            res += numerals[i];\n            num -= values[i];\n        }\n    }\n    return res;\n}\n```",
            "```cpp\nbool rightAngleTriangle(int a, int b, int c) {\n    std::vector<int> s = {a, b, c};\n    std::sort(s.begin(), s.end());\n    return (s[0] * s[0]) + (s[1] * s[1]) == (s[2] * s[2]);\n}\n```",
            "```cpp\nstring findMax(const vector<string>& words) {\n    int max_cnt = 0;\n    string max_w = \"\";\n    for (const auto& w : words) {\n        unordered_set<char> unique_chars(w.begin(), w.end());\n        int cnt = unique_chars.size();\n        if (cnt > max_cnt) {\n            max_cnt = cnt;\n            max_w = w;\n        } else if (cnt == max_cnt) {\n            max_w = lexicographical_compare(max_w.begin(), max_w.end(), w.begin(), w.end()) ? max_w : w;\n        }\n    }\n    return max_w;\n}\n```",
            "```cpp\nvector<int> eat(int num, int need, int remaining) {\n    if (need <= remaining) {\n        return {num + need, remaining - need};\n    } else {\n        return {num + remaining, 0};\n    }\n}\n```",
            "```cpp\n#include <vector>\n#include <cmath>\n\nint doAlgebra(const std::vector<std::string>& operators, const std::vector<int>& operands) {\n    std::vector<std::string> ops = operators;\n    std::vector<int> nums = operands;\n    int i = ops.size() - 1;\n    while (i >= 0) {\n        if (ops[i] == \"**\") {\n            nums[i] = std::pow(nums[i], nums[i + 1]);\n            nums.erase(nums.begin() + i + 1);\n            ops.erase(ops.begin() + i);\n        }\n        i -= 1;\n    }\n    i = 0;\n    while (i < ops.size()) {\n        if (ops[i] == \"*\") {\n            nums[i] = nums[i] * nums[i + 1];\n            nums.erase(nums.begin() + i + 1);\n            ops.erase(ops.begin() + i);\n            i -= 1;\n        } else if (ops[i] == \"//\") {\n            nums[i] = std::floor(static_cast<double>(nums[i]) / nums[i + 1]);\n            nums.erase(nums.begin() + i + 1);\n            ops.erase(ops.begin() + i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    i = 0;\n    while (i < ops.size()) {\n        if (ops[i] == \"+\") {\n            nums[i] = nums[i] + nums[i + 1];\n            nums.erase(nums.begin() + i + 1);\n            ops.erase(ops.begin() + i);\n            i -= 1;\n        } else if (ops[i] == \"-\") {\n            nums[i] = nums[i] - nums[i + 1];\n            nums.erase(nums.begin() + i + 1);\n            ops.erase(ops.begin() + i);\n            i -= 1;\n        }\n        i += 1;\n    }\n    return nums[0];\n}\n```",
            "```cpp\nstring solve(const string& s) {\n    if (s.find_first_of(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\") == string::npos) {\n        return string(s.rbegin(), s.rend());\n    }\n    string result;\n    for (char ch : s) {\n        if (!isalpha(ch)) {\n            result += ch;\n        } else if (isupper(ch)) {\n            result += tolower(ch);\n        } else if (islower(ch)) {\n            result += toupper(ch);\n        }\n    }\n    return result;\n}\n```",
            "```cpp\n#include <string>\n#include <openssl/md5.h>\n\nusing namespace std;\n\noptional<string> stringToMd5(const string& txt) {\n    if (txt.empty()) {\n        return nullopt;\n    }\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)txt.c_str(), txt.size(), (unsigned char*)&digest);    \n    char mdString[33];\n    for(int i = 0; i < 16; ++i)\n        sprintf(&mdString[i*2], \"%02x\", (unsigned int)digest[i]);\n    return string(mdString);\n}\n```",
            "```cpp\nvector<int> generateIntegers(int a, int b) {\n    int lower = max(2, min(a, b));\n    int upper = min(8, max(a, b));\n    vector<int> result;\n    for (int i = lower; i <= upper; i++) {\n        if (i % 2 == 0) {\n            result.push_back(i);\n        }\n    }\n    return result;\n}\n```"
        ],
        "java": [
            "```java\nclass Global {\n    public static boolean hasCloseElements(List<Double> numbers, double threshold) {\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n```",
            "```java\nclass Global {\n    public static List<String> separateParenGroups(String parenString) {\n        List<String> groups = new ArrayList<>();\n        Stack<Character> stk = new Stack<>();\n        StringBuilder currentGroup = new StringBuilder();\n        String parens = parenString.replaceAll(\" \", \"\");\n        \n        for (int i = 0; i < parens.length(); i++) {\n            char ch = parens.charAt(i);\n            if (ch == '(') {\n                stk.push(ch);\n                currentGroup.append(ch);\n            } else if (ch == ')') {\n                stk.pop();\n                currentGroup.append(ch);\n                if (stk.isEmpty()) {\n                    groups.add(currentGroup.toString());\n                    currentGroup.setLength(0); // Clear the StringBuilder\n                }\n            }\n        }\n        return groups;\n    }\n}\n```",
            "```java\nclass Global {\n    public static double truncateNumber(double num) {\n        return num - Math.floor(num);\n    }\n}\n```",
            "```java\nclass Global {\n    public static boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (int op : operations) {\n            balance += op;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n```",
            "```java\nclass Global {\n    public static double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n        double deviation = 0;\n        for (double x : numbers) {\n            deviation += Math.abs(x - mean);\n        }\n        return deviation / numbers.size();\n    }\n}\n```",
            "```java\nclass Global {\n    public static List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i != 0) {\n                result.add(delimiter);\n            }\n            result.add(numbers.get(i));\n        }\n        return result;\n    }\n}\n```",
            "```java\nclass Global {\n    public static List<Integer> parseNestedParens(String parenString) {\n        List<Integer> result = new ArrayList<>();\n        String[] parenGroups = parenString.split(\" \");\n        for (String group : parenGroups) {\n            int maxDepth = 0;\n            int depth = 0;\n            for (int i = 0; i < group.length(); i++) {\n                char ch = group.charAt(i);\n                if (ch === '(') {\n                    depth++;\n                    maxDepth = Math.max(maxDepth, depth);\n                } else if (ch === ')') {\n                    depth--;\n                }\n            }\n            result.add(maxDepth);\n        }\n        return result;\n    }\n}\n```",
            "```java\nclass Global {\n    public static List<String> filterBySubstring(List<String> strs, String substring) {\n        return strs.stream()\n                   .filter(s -> s.contains(substring))\n                   .collect(Collectors.toList());\n    }\n}\n```",
            "```java\nclass Global {\n    public static List<Integer> sumProduct(List<Integer> numbers) {\n        int n_sum = 0;\n        for (int number : numbers) {\n            n_sum += number;\n        }\n        \n        int n_product = 1;\n        for (int number : numbers) {\n            n_product *= number;\n        }\n        \n        return Arrays.asList(n_sum, n_product);\n    }\n}\n```",
            "```java\nclass Global {\n    public static List<Integer> rollingMax(List<Integer> numbers) {\n        int max_so_far = Integer.MIN_VALUE;\n        List<Integer> result = new ArrayList<>();\n        for (int num : numbers) {\n            max_so_far = Math.max(max_so_far, num);\n            result.add(max_so_far);\n        }\n        return result;\n    }\n}\n```",
            "```java\nclass Global {\n    public static boolean isPalindrome(String s) {\n        int left = 0;\n        int right = s.length() - 1;\n        while (left < right) {\n            if (s.charAt(left) != s.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n\n    public static String makePalindrome(String s) {\n        if (isPalindrome(s)) {\n            return s;\n        }\n        for (int i = 0; i < s.length(); i++) {\n            if (isPalindrome(s.substring(i))) {\n                StringBuilder prefix = new StringBuilder(s.substring(0, i));\n                return s + prefix.reverse().toString();\n            }\n        }\n        return \"\";\n    }\n}\n```",
            "```java\nclass Global {\n    public static String stringXor(String a, String b) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            result.append((a.charAt(i) == b.charAt(i)) ? '0' : '1');\n        }\n        return result.toString();\n    }\n}\n```",
            "```java\nclass Global {\n    public static Optional<String> longest(List<String> strs) {\n        if (strs.isEmpty()) {\n            return Optional.empty();\n        }\n        String longestS = strs.get(0);\n        for (String s : strs) {\n            if (s.length() > longestS.length()) {\n                longestS = s;\n            }\n        }\n        return Optional.of(longestS);\n    }\n}\n```",
            "```java\nclass Global {\n    public static int greatestCommonDivisor(int a, int b) {\n        if (b == 0) {\n            return a;\n        } else {\n            return greatestCommonDivisor(b, a % b);\n        }\n    }\n}\n```",
            "```java\nclass Global {\n    public static List<String> allPrefixes(String s) {\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 0; i < s.length(); i++) {\n            prefixes.add(s.substring(0, i + 1));\n        }\n        return prefixes;\n    }\n}\n```",
            "```java\nclass Global {\n    public static String stringSequence(int n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <= n; i++) {\n            sb.append(i);\n            if (i < n) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n}\n```",
            "```java\nclass Global {\n    public static int countDistinctCharacters(String s) {\n        return (int) s.toLowerCase().chars().distinct().count();\n    }\n}\n```",
            "```java\nclass Global {\n    public static List<Integer> parseMusic(String musicString) {\n        Map<String, Integer> durations = new HashMap<>();\n        durations.put(\"o\", 4);\n        durations.put(\"o|\", 2);\n        durations.put(\".|\", 1);\n        \n        String[] notes = musicString.split(\"\\\\s+\");\n        List<Integer> result = new ArrayList<>();\n        \n        for (String note : notes) {\n            if (durations.containsKey(note)) {\n                result.add(durations.get(note));\n            }\n        }\n        \n        return result;\n    }\n}\n```",
            "```java\nclass Global {\n    public static int howManyTimes(String s, String substring) {\n        int times = 0;\n        for (int i = 0; i <= s.length() - substring.length(); i++) {\n            if (s.substring(i, i + substring.length()).equals(substring)) {\n                times++;\n            }\n        }\n        return times;\n    }\n}\n```",
            "```java\nclass Global {\n    public static String sortNumbers(String numbers) {\n        Map<String, Integer> numDict = new HashMap<>();\n        numDict.put(\"zero\", 0);\n        numDict.put(\"one\", 1);\n        numDict.put(\"two\", 2);\n        numDict.put(\"three\", 3);\n        numDict.put(\"four\", 4);\n        numDict.put(\"five\", 5);\n        numDict.put(\"six\", 6);\n        numDict.put(\"seven\", 7);\n        numDict.put(\"eight\", 8);\n        numDict.put(\"nine\", 9);\n\n        String[] numList = Arrays.stream(numbers.split(\" \"))\n            .filter(numDict::containsKey)\n            .toArray(String[]::new);\n\n        Arrays.sort(numList, Comparator.comparingInt(numDict::get));\n\n        return String.join(\" \", numList);\n    }\n}\n```",
            "```java\nclass Global {\n    public static List<Double> findClosestElements(List<Double> numbers) {\n        Collections.sort(numbers);\n        double min_diff = Double.MAX_VALUE;\n        List<Double> closest_pair = new ArrayList<>();\n        for (int i = 1; i < numbers.size(); i++) {\n            double diff = numbers.get(i) - numbers.get(i - 1);\n            if (diff < min_diff) {\n                min_diff = diff;\n                closest_pair.clear();\n                closest_pair.add(numbers.get(i - 1));\n                closest_pair.add(numbers.get(i));\n            }\n        }\n        return closest_pair;\n    }\n}\n```",
            "```java\nclass Global {\n    public static List<Double> rescaleToUnit(List<Double> numbers) {\n        double min_num = Collections.min(numbers);\n        double max_num = Collections.max(numbers);\n        if (min_num == max_num) {\n            return Collections.nCopies(numbers.size(), 0.0);\n        } else {\n            return numbers.stream()\n                          .map(num -> (num - min_num) / (max_num - min_num))\n                          .collect(Collectors.toList());\n        }\n    }\n}\n```",
            "```java\nclass Global {\n    public static List<Integer> filterIntegers(List<Object> values) {\n        return values.stream()\n                    .filter(v -> v instanceof Integer)\n                    .map(v -> (Integer) v)\n                    .collect(Collectors.toList());\n    }\n}\n```",
            "```java\nclass Global {\n    public static int strLength(String s) {\n        return s.length();\n    }\n}\n```",
            "```java\nclass Global {\n    public static int largestDivisor(int n) {\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return n / i;\n            }\n        }\n        return 1;\n    }\n}\n```",
            "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass Global {\n    public static List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int divisor = 2;\n        while (divisor <= n) {\n            if (n % divisor == 0) {\n                factors.add(divisor);\n                n /= divisor;\n            } else {\n                divisor += 1;\n            }\n        }\n        return factors;\n    }\n}\n```",
            "```java\nclass Global {\n    public static List<Integer> removeDuplicates(List<Integer> numbers) {\n        Map<Integer, Integer> counts = new HashMap<>();\n        for (Integer num : numbers) {\n            if (counts.containsKey(num)) {\n                counts.put(num, counts.get(num) + 1);\n            } else {\n                counts.put(num, 1);\n            }\n        }\n        List<Integer> res = new ArrayList<>();\n        for (Integer num : numbers) {\n            if (counts.get(num) == 1) {\n                res.add(num);\n            }\n        }\n        return res;\n    }\n}\n```",
            "```java\nclass Global {\n    public static String flipCase(String s) {\n        StringBuilder flipped = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n            if (!Character.isLetter(ch)) {\n                flipped.append(ch);\n            } else if (Character.isLowerCase(ch)) {\n                flipped.append(Character.toUpperCase(ch));\n            } else if (Character.isUpperCase(ch)) {\n                flipped.append(Character.toLowerCase(ch));\n            }\n        }\n        return flipped.toString();\n    }\n}\n```",
            "```java\nclass Global {\n    public static String concatenate(List<String> strs) {\n        return String.join(\"\", strs);\n    }\n}\n```",
            "```java\nclass Global {\n    public static List<String> filterByPrefix(List<String> strs, String prefixStr) {\n        return strs.stream()\n                   .filter(s -> s.startsWith(prefixStr))\n                   .collect(Collectors.toList());\n    }\n}\n```",
            "```java\nclass Global {\n    public static List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(num -> num > 0).collect(Collectors.toList());\n    }\n}\n```",
            "```java\nclass Global {\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```",
            "```java\nclass Global {\n    public static double poly(List<Integer> xs, double x) {\n        double res = 0.0;\n        for (int i = 0; i < xs.size(); i++) {\n            res += xs.get(i) * Math.pow(x, i);\n        }\n        return res;\n    }\n    \n    public static double findZero(List<Integer> xs) {\n        double x1 = 1.0;\n        double x2 = -1.0;\n        while (poly(xs, x1) * poly(xs, x2) > 0) {\n            x1 *= 2;\n            x2 *= 2;\n        }\n        while (Math.abs(x1 - x2) > 1e-10) {\n            double mid = (x1 + x2) / 2;\n            if (poly(xs, mid) == 0) {\n                return mid;\n            } elseif (poly(xs, mid) * poly(xs, x1) < 0) {\n                x2 = mid;\n            } else {\n                x1 = mid;\n            }\n        }\n        return (x1 + x2) / 2;\n    }\n}\n```",
            "```java\nclass Global {\n    public static List<Integer> sortThird(List<Integer> l) {\n        List<Integer> sortedThird = new ArrayList<>();\n        for (int i = 0; i < l.size(); i += 3) {\n            sortedThird.add(l.get(i));\n        }\n        Collections.sort(sortedThird);\n\n        List<Integer> result = new ArrayList<>(l);\n        int index = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                result.set(i, sortedThird.get(index));\n                index++;\n            }\n        }\n        return result;\n    }\n}\n```",
            "```java\nclass Global {\n    public static List<Integer> listUnique(List<Integer> l) {\n        return new ArrayList<>(new TreeSet<>(l));\n    }\n}\n```",
            "```java\nclass Global {\n    public static int maxElement(List<Integer> l) {\n        if (l.isEmpty()) {\n            return 0;\n        }\n        return Collections.max(l);\n    }\n}\n```",
            "```java\nclass Global {\n    public static int fizzBuzz(int n) {\n        int cnt = 0;\n        for (int i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String strI = Integer.toString(i);\n                for (char c : strI.toCharArray()) {\n                    if (c == '7') {\n                        cnt++;\n                    }\n                }\n            }\n        }\n        return cnt;\n    }\n}\n```",
            "```java\nclass Global {\n    public static List<Integer> sortEven(List<Integer> l) {\n        List<Integer> sortedEven = new ArrayList<>();\n        for (int i = 0; i < l.size(); i += 2) {\n            sortedEven.add(l.get(i));\n        }\n        Collections.sort(sortedEven);\n        \n        List<Integer> result = new ArrayList<>();\n        int evenIndex = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                result.add(sortedEven.get(evenIndex));\n                evenIndex++;\n            } else {\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}\n```",
            "```java\nclass Global {\n    public static String encodeCyclic(String s) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < s.length(); i += 3) {\n            if (i + 3 > s.length()) {\n                result.append(s.substring(i));\n            } else {\n                result.append(s.charAt(i + 1)).append(s.charAt(i + 2)).append(s.charAt(i));\n            }\n        }\n        return result.toString();\n    }\n    \n    public static String decodeCyclic(String s) {\n        return encodeCyclic(encodeCyclic(s));\n    }\n}\n```",
            "```java\nclass Global {\n    public static int primeFib(int n) {\n        if (n < 1) return -1;\n        int[] f = {0, 1};\n        int cnt = 0;\n        while (cnt < n) {\n            f[0] = f[1];\n            f[1] = f[0] + f[1];\n            if (isPrime(f[1])) {\n                cnt++;\n            }\n        }\n        return f[1];\n    }\n\n    private static boolean isPrime(int n) {\n        if (n < 2) return false;\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n}\n```",
            "```java\nclass Global {\n    public static boolean triplesSumToZero(List<Integer> l) {\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n```",
            "```java\nclass Global {\n    public static int carRaceCollision(int n) {\n        return n * n;\n    }\n}\n```",
            "```java\nclass Global {\n    public static List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}\n```",
            "```java\nclass Global {\n    public static boolean pairsSumToZero(List<Integer> l) {\n        Set<Integer> seen = new HashSet<>();\n        for (int num : l) {\n            if (seen.contains(-num)) {\n                return true;\n            }\n            seen.add(num);\n        }\n        return false;\n    }\n}\n```",
            "```java\nclass Global {\n    public static String changeBase(int x, int bas) {\n        if (x == 0) {\n            return \"0\";\n        }\n        StringBuilder digits = new StringBuilder();\n        while (x > 0) {\n            digits.append(x % bas);\n            x /= bas;\n        }\n        return digits.reverse().toString();\n    }\n}\n```",
            "```java\nclass Global {\n    public static double triangleArea(int a, int h) {\n        return (double) a * h / 2;\n    }\n}\n```",
            "```java\nclass Global {\n    public static int fib4(int n) {\n        int[] fib = {0, 0, 2, 0};\n        for (int i = 4; i <= n + 1; i++) {\n            fib[i % 4] = fib[0] + fib[1] + fib[2] + fib[3];\n        }\n        return fib[n % 4];\n    }\n}\n```",
            "```java\nclass Global {\n    public static double median(List<Double> l) {\n        Collections.sort(l);\n        int count = l.size();\n        if (count % 2 != 0) {\n            return l.get((int) Math.floor(count / 2));\n        } else {\n            return (l.get(count / 2) + l.get(count / 2 - 1)) / 2.0;\n        }\n    }\n}\n```",
            "```java\nclass Global {\n    public static boolean isPalindrome(String txt) {\n        return txt.equals(new StringBuilder(txt).reverse().toString());\n    }\n}\n```",
            "```java\nclass Global {\n    public static int modp(int n, int p) {\n        int ret = 1;\n        for (int i = 0; i < n; i++) {\n            ret = (ret * 2) % p;\n        }\n        return ret;\n    }\n}\n```",
            "```java\nclass Global {\n    public static String encodeShift(String s) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n            result.append((char) (((ch - 'a' + 5) % 26) + 'a'));\n        }\n        return result.toString();\n    }\n    \n    public static String decodeShift(String s) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n            result.append((char) (((ch - 'a' + 21) % 26) + 'a'));\n        }\n        return result.toString();\n    }\n}\n```",
            "```java\nclass Global {\n    public static String removeVowels(String txt) {\n        String vowels = \"aeiouAEIOU\";\n        StringBuilder result = new StringBuilder();\n        \n        for (int i = 0; i < txt.length(); i++) {\n            if (vowels.indexOf(txt.charAt(i)) == -1) {\n                result.append(txt.charAt(i));\n            }\n        }\n        \n        return result.toString();\n    }\n}\n```",
            "```java\nclass Global {\n    public static boolean belowThreshold(List<Integer> l, int t) {\n        for (int x : l) {\n            if (x >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```",
            "```java\nclass Global {\n    public static int add(int x, int y) {\n        return x + y;\n    }\n}\n```",
            "```java\nclass Global {\n    public static boolean sameChars(String s0, String s1) {\n        return new HashSet<Character>(toCharacterList(s0)).equals(new HashSet<Character>(toCharacterList(s1)));\n    }\n\n    private static List<Character> toCharacterList(String s) {\n        List<Character> characterList = new ArrayList<>();\n        for (char c : s.toCharArray()) {\n            characterList.add(c);\n        }\n        return characterList;\n    }\n}\n```",
            "```java\nclass Global {\n    public static int fib(int n) {\n        if (n <= 1) {\n            return n;\n        } else {\n            return fib(n - 1) + fib(n - 2);\n        }\n    }\n}\n```",
            "```java\nclass Global {\n    public static boolean correctBracketing(String brackets) {\n        int depth = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '<') {\n                depth += 1;\n            } else if (brackets.charAt(i) == '>') {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n```",
            "```java\nclass Global {\n    public static boolean monotonic(List<Integer> l) {\n        List<Integer> diff = new ArrayList<>();\n        for (int i = 0; i < l.size() - 1; i++) {\n            diff.add(l.get(i + 1) - l.get(i));\n        }\n        boolean nonIncreasing = true;\n        boolean nonDecreasing = true;\n        for (int x : diff) {\n            if (x > 0) {\n                nonIncreasing = false;\n            }\n            if (x < 0) {\n                nonDecreasing = false;\n            }\n        }\n        return nonIncreasing || nonDecreasing;\n    }\n}\n```",
            "```java\nclass Global {\n    public static List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        set1.retainAll(set2);\n        List<Integer> result = new ArrayList<>(set1);\n        Collections.sort(result);\n        return result;\n    }\n}\n```",
            "```java\nclass Global {\n    public static int largestPrimeFactor(int n) {\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i != 0) {\n                i += 1;\n            } else {\n                n /= i;\n            }\n        }\n        return n;\n    }\n}\n```",
            "```java\nclass Global {\n    public static int sumToN(int n) {\n        return (n * (n + 1)) / 2;\n    }\n}\n```",
            "```java\nclass Global {\n    public static boolean correctBracketing(String brackets) {\n        int depth = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '(') {\n                depth += 1;\n            } else if (brackets.charAt(i) == ')') {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n```",
            "```java\nclass Global {\n    public static List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        return result;\n    }\n}\n```",
            "```java\nclass Global {\n    public static int fibfib(int n) {\n        if (n <= 1) {\n            return 0;\n        }\n        int a = 0, b = 0, c = 1;\n        while (n > 2) {\n            a = b;\n            b = c;\n            c = a + b + c;\n            n -= 1;\n        }\n        return c;\n    }\n}\n```",
            "```java\nclass Global {\n    public static int vowelsCount(String s) {\n        String vowels = \"aeiou\";\n        int cnt = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (vowels.indexOf(Character.toLowerCase(s.charAt(i))) != -1 || (i == s.length() - 1 && Character.toLowerCase(s.charAt(i)) == 'y')) {\n                cnt++;\n            }\n        }\n        return cnt;\n    }\n}\n```",
            "```java\nclass Global {\n    public static String circularShift(int x, int shift) {\n        String x_str = Integer.toString(x);\n        if (shift > x_str.length()) {\n            return new StringBuilder(x_str).reverse().toString();\n        } else {\n            return x_str.substring(x_str.length() - shift) + x_str.substring(0, x_str.length() - shift);\n        }\n    }\n}\n```",
            "```java\nclass Global {\n    public static int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += (int) c;\n            }\n        }\n        return sum;\n    }\n}\n```",
            "```java\nclass Global {\n    public static int fruitDistribution(String s, int n) {\n        String[] words = s.split(\" \");\n        int applesIndex = java.util.Arrays.asList(words).indexOf(\"apples\") - 1;\n        int orangesIndex = java.util.Arrays.asList(words).indexOf(\"oranges\") - 1;\n        int apples = Integer.parseInt(words[applesIndex]);\n        int oranges = Integer.parseInt(words[orangesIndex]);\n        return n - apples - oranges;\n    }\n}\n```",
            "```java\nclass Global {\n    public static List<Integer> pluck(List<Integer> arr) {\n        List<Integer> evens = new ArrayList<>();\n        for (Integer n : arr) {\n            if (n % 2 == 0) {\n                evens.add(n);\n            }\n        }\n        \n        if (evens.isEmpty()) {\n            return Collections.emptyList();\n        }\n        \n        Integer min_even = Collections.min(evens);\n        int index = arr.indexOf(min_even);\n        \n        List<Integer> result = new ArrayList<>();\n        result.add(min_even);\n        result.add(index);\n        return result;\n    }\n}\n```",
            "```java\nclass Global {\n    public static int search(List<Integer> lst) {\n        Map<Integer, Integer> freqs = new HashMap<>();\n        for (int n : lst) {\n            if (freqs.containsKey(n)) {\n                freqs.put(n, freqs.get(n) + 1);\n            } else {\n                freqs.put(n, 1);\n            }\n        }\n        List<Integer> goodVals = new ArrayList<>();\n        for (Map.Entry<Integer, Integer> entry : freqs.entrySet()) {\n            if (entry.getValue() >= entry.getKey()) {\n                goodVals.add(entry.getKey());\n            }\n        }\n        return !goodVals.isEmpty() ? Collections.max(goodVals) : -1;\n    }\n}\n```",
            "```java\nclass Global {\n    public static List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> sl = new ArrayList<>(lst);\n        Collections.sort(sl);\n        List<Integer> result = new ArrayList<>();\n        int left = 0;\n        int right = sl.size() - 1;\n        while (left <= right) {\n            result.add(sl.get(left));\n            left++;\n            if (left <= right) {\n                result.add(sl.get(right));\n                right--;\n            }\n        }\n        return result;\n    }\n}\n```",
            "```java\nclass Global {\n    public static double triangleArea(int a, int b, int c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            double s = (a + b + c) / 2.0;\n            return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        } else {\n            return -1.0;\n        }\n    }\n}\n```",
            "```java\nclass Global {\n    public static boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return false;\n        }\n        boolean is_palin = true;\n        for (int i = 0; i < q.size(); i++) {\n            if (!q.get(i).equals(q.get(q.size() - i - 1))) {\n                is_palin = false;\n                break;\n            }\n        }\n        int total = 0;\n        for (int num : q) {\n            total += num;\n        }\n        return is_palin && total <= w;\n    }\n}\n```",
            "```java\nclass Global {\n    public static int smallestChange(List<Integer> arr) {\n        int ans = 0;\n        for (int i = 0; i < arr.size() / 2; i++) {\n            if (!arr.get(i).equals(arr.get(arr.size() - i - 1))) {\n                ans += 1;\n            }\n        }\n        return ans;\n    }\n}\n```",
            "```java\nclass Global {\n    public static List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        int cnt1 = lst1.stream().mapToInt(String::length).sum();\n        int cnt2 = lst2.stream().mapToInt(String::length).sum();\n        return cnt1 <= cnt2 ? lst1 : lst2;\n    }\n}\n```",
            "```java\nclass Global {\n    public static boolean isMultiplyPrime(int a) {\n        int cnt = 0;\n        for (int i = 2; i <= a; i++) {\n            if (is_prime(i)) {\n                while (a % i == 0) {\n                    cnt++;\n                    a /= i;\n                }\n            }\n        }\n        return cnt == 3;\n    }\n\n    private static boolean is_prime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```",
            "```java\nclass Global {\n    public static boolean isSimplePower(int x, int n) {\n        if (n < 2) {\n            return x == n;\n        }\n        int tmp = 1;\n        while (tmp < x) {\n            tmp *= n;\n        }\n        return tmp == x;\n    }\n}\n```",
            "```java\nclass Global {\n    public static boolean isCube(int a) {\n        a = Math.abs(a);\n        int root = (int)Math.round(Math.pow(a, 1.0 / 3.0));\n        return root * root * root == a;\n    }\n}\n```",
            "```java\nclass Global {\n    public static int hexKey(String num) {\n        String validChars = \"2357BD\";\n        int count = 0;\n        for (char c : num.toCharArray()) {\n            if (validChars.indexOf(c) != -1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n```",
            "```java\nclass Global {\n    public static String decimalToBinary(int dec) {\n        String binary = Integer.toBinaryString(dec);\n        return \"db\" + binary + \"db\";\n    }\n}\n```",
            "```java\nclass Global {\n    public static boolean isHappy(String s) {\n        if (s.length() < 3) {\n            return false;\n        }\n        for (int i = 0; i <= s.length() - 3; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```",
            "```java\nclass Global {\n    public static List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> result = new ArrayList<>();\n        for (Double g : grades) {\n            if (g == 4.0) {\n                result.add(\"A+\");\n            } else if (g > 3.7) {\n                result.add(\"A\");\n            } else if (g > 3.3) {\n                result.add(\"A-\");\n            } else if (g > 3.0) {\n                result.add(\"B+\");\n            } else if (g > 2.7) {\n                result.add(\"B\");\n            } else if (g > 2.3) {\n                result.add(\"B-\");\n            } else if (g > 2.0) {\n                result.add(\"C+\");\n            } else if (g > 1.7) {\n                result.add(\"C\");\n            } else if (g > 1.3) {\n                result.add(\"C-\");\n            } else if (g > 1.0) {\n                result.add(\"D+\");\n            } else if (g > 0.7) {\n                result.add(\"D\");\n            } else if (g > 0.0) {\n                result.add(\"D-\");\n            } else {\n                result.add(\"E\");\n            }\n        }\n        return result;\n    }\n}\n```",
            "```java\nclass Global {\n    public static boolean primeLength(String s) {\n        int length = s.length();\n        if (length < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```",
            "```java\nclass Global {\n    public static int startsOneEnds(int n) {\n        if (n == 1) {\n            return 1;\n        }\n        return 2 * 9 * (int)Math.pow(10, n - 2);\n    }\n}\n```",
            "```java\nclass Global {\n    public static String solve(int n) {\n        int digits_sum = 0;\n        while (n > 0) {\n            digits_sum += n % 10;\n            n /= 10;\n        }\n        return Integer.toBinaryString(digits_sum);\n    }\n}\n```",
            "```java\nclass Global {\n    public static int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 1 && lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n```",
            "```java\nclass Global {\n    public static String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        StringBuilder[] sortedWords = new StringBuilder[words.length];\n        \n        for (int i = 0; i < words.length; i++) {\n            char[] chars = words[i].toCharArray();\n            Arrays.sort(chars);\n            sortedWords[i] = new StringBuilder(new String(chars));\n        }\n        \n        return String.join(\" \", sortedWords);\n    }\n}\n```",
            "```java\nclass Global {\n    public static List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> coords = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    List<Integer> coord = Arrays.asList(i, j);\n                    coords.add(coord);\n                }\n            }\n        }\n        coords.sort((a, b) -> {\n            if (a.get(0) == b.get(0)) {\n                return b.get(1) - a.get(1);\n            }\n            return a.get(0) - b.get(0);\n        });\n        return coords;\n    }\n}\n```",
            "```java\nclass Global {\n    public static List<Integer> sortArray(List<Integer> arr) {\n        if (arr.size() == 0) {\n            return new ArrayList<>();\n        }\n        if ((arr.get(0) + arr.get(arr.size() - 1)) % 2 == 0) {\n            arr.sort(Collections.reverseOrder());\n        } else {\n            Collections.sort(arr);\n        }\n        return arr;\n    }\n}\n```",
            "```java\nclass Global {\n    public static String encrypt(String s) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n            int shifted = ch + 4;\n            if (shifted > 'z') {\n                shifted -= 26;\n            }\n            result.append((char) shifted);\n        }\n        return result.toString();\n    }\n}\n```",
            "```java\nclass Global {\n    public static Optional<Integer> nextSmallest(List<Integer> lst) {\n        Set<Integer> sl = new HashSet<>(lst);\n        List<Integer> sortedList = new ArrayList<>(sl);\n        Collections.sort(sortedList);\n        if (sortedList.size() < 2) {\n            return Optional.empty();\n        }\n        return Optional.of(sortedList.get(1));\n    }\n}\n```",
            "```java\nclass Global {\n    public static int isBored(String s) {\n        String[] sentences = s.split(\"[.!?]\\\\s*\");\n        int count = 0;\n        for (String sentence : sentences) {\n            if (sentence.length() >= 2 && sentence.substring(0, 2).equals(\"I \")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n```",
            "```java\nclass Global {\n    public static boolean anyInt(Object x, Object y, Object z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int numX = ((Integer) x).intValue();\n            int numY = ((Integer) y).intValue();\n            int numZ = ((Integer) z).intValue();\n            if ((numX + numY == numZ) || (numX + numZ == numY) || (numY + numZ == numX)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n```",
            "```java\nclass Global {\n    public static String encode(String message) {\n        String vowels = \"aeiouAEIOU\";\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < message.length(); i++) {\n            char ch = message.charAt(i);\n            if (Character.isLetter(ch)) {\n                char ch1 = Character.isLowerCase(ch) ? Character.toUpperCase(ch) : Character.toLowerCase(ch);\n                if (vowels.indexOf(ch1) != -1) {\n                    ch1 = (char) (ch1 + 2);\n                }\n                result.append(ch1);\n            } else {\n                result.append(ch);\n            }\n        }\n        return result.toString();\n    }\n}\n```",
            "```java\nclass Global {\n    public static int skjkasdkd(List<Integer> lst) {\n        List<Integer> primes = new ArrayList<>();\n        for (int n : lst) {\n            if (isPrime(n)) {\n                primes.add(n);\n            }\n        }\n        if (primes.isEmpty()) {\n            return 0;\n        }\n        String largest = Integer.toString(Collections.max(primes));\n        int sum = 0;\n        for (char digit : largest.toCharArray()) {\n            sum += Character.getNumericValue(digit);\n        }\n        return sum;\n    }\n\n    private static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```",
            "```java\nclass Global {\n    public static boolean checkDictCase(Map<String, String> d) {\n        if (d.isEmpty()) {\n            return false;\n        }\n        boolean allLower = true;\n        boolean allUpper = true;\n        for (String key : d.keySet()) {\n            if (!key.equals(key.toLowerCase())) {\n                allLower = false;\n            }\n            if (!key.equals(key.toUpperCase())) {\n                allUpper = false;\n            }\n        }\n        return allLower || allUpper;\n    }\n}\n```",
            "```java\nclass Global {\n    public static List<Integer> countUpTo(int n) {\n        List<Integer> primes = new ArrayList<>();\n        for (int num = 2; num < n; num++) {\n            boolean isPrime = true;\n            for (int p : primes) {\n                if (num % p == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                primes.add(num);\n            }\n        }\n        return primes;\n    }\n}\n```",
            "```java\nclass Global {\n    public static int multiply(int a, int b) {\n        return Math.abs(a) % 10 * Math.abs(b) % 10;\n    }\n}\n```",
            "```java\nclass Global {\n    public static int countUpper(String s) {\n        String vowels = \"AEIOU\";\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0 && vowels.indexOf(s.charAt(i)) != -1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n```",
            "```java\nclass Global {\n    public static int closestInteger(String value) {\n        double num = Double.parseDouble(value);\n        if (num >= 0) {\n            return (int) Math.floor(num + 0.5);\n        } else {\n            return (int) Math.ceil(num - 0.5);\n        }\n    }\n}\n```",
            "```java\nclass Global {\n    public static List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            pile.add(n + 2 * i);\n        }\n        return pile;\n    }\n}\n```",
            "```java\nclass Global {\n    public static List<String> wordsString(String s) {\n        return Arrays.asList(s.split(\"[,\\\\s]+\"))\n                     .stream()\n                     .filter(w -> w.length() > 0)\n                     .collect(Collectors.toList());\n    }\n}\n```",
            "```java\nclass Global {\n    public static int chooseNum(int x, int y) {\n        if (x > y) {\n            return -1;\n        }\n        if (y % 2 == 0) {\n            return y;\n        }\n        return x != y ? y - 1 : -1;\n    }\n}\n```",
            "```java\nclass Global {\n    public static Optional<String> roundedAvg(int n, int m) {\n        if (n > m) {\n            return Optional.empty();\n        }\n        int r_avg = (int) Math.round((m + n) / 2.0);\n        return Optional.of(Integer.toBinaryString(r_avg));\n    }\n}\n```",
            "```java\nclass Global {\n    public static List<Integer> uniqueDigits(List<Integer> x) {\n        return x.stream()\n                .filter(num -> allDigitsOdd(String.valueOf(num)))\n                .sorted()\n                .collect(Collectors.toList());\n    }\n\n    private static boolean allDigitsOdd(String s) {\n        for (char digit : s.toCharArray()) {\n            if ((digit - '0') % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```",
            "```java\nclass Global {\n    public static List<String> byLength(List<Integer> arr) {\n        String[] digit_names = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n        List<Integer> sorted_arr = arr.stream()\n            .filter(x -> x >= 1 && x <= 9)\n            .sorted(Comparator.reverseOrder())\n            .collect(Collectors.toList());\n        List<String> result = sorted_arr.stream()\n            .map(x -> digit_names[x - 1])\n            .collect(Collectors.toList());\n        return result;\n    }\n}\n```",
            "```java\nclass Global {\n    public static List<Integer> f(int n) {\n        List<Integer> nums = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            nums.add(i);\n        }\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            if ((i + 1) % 2 != 0) {\n                int sum = 0;\n                for (int j = 0; j <= i; j++) {\n                    sum += nums.get(j);\n                }\n                result.add(sum);\n            } else {\n                int product = 1;\n                for (int j = 0; j <= i; j++) {\n                    product *= nums.get(j);\n                }\n                result.add(product);\n            }\n        }\n        return result;\n    }\n}\n```",
            "```java\nclass Global {\n    public static List<Integer> evenOddPalindrome(int n) {\n        List<Integer> cnt = Arrays.asList(0, 0);\n        for (int i = 1; i <= n; i++) {\n            String str = Integer.toString(i);\n            if (new StringBuilder(str).reverse().toString().equals(str)) {\n                cnt.set(i % 2, cnt.get(i % 2) + 1);\n            }\n        }\n        return cnt;\n    }\n}\n```",
            "```java\nclass Global {\n    public static int digitsSum(int n) {\n        String n_str = Integer.toString(n);\n        if (n >= 0) {\n            return n_str.chars().map(Character::getNumericValue).sum();\n        } else {\n            return Integer.parseInt(n_str.substring(0, 2)) * 2 + digitsSum(Math.abs(n));\n        }\n    }\n\n    public static int countNums(List<Integer> arr) {\n        return (int) arr.stream().filter(n -> digitsSum(n) > 0).count();\n    }\n}\n```",
            "```java\nclass Global {\n    public static boolean moveOneBall(List<Integer> arr) {\n        if (arr.size() == 0) {\n            return true;\n        }\n        List<Integer> sortedArr = new ArrayList<>(arr);\n        Collections.sort(sortedArr);\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.subList(i, arr.size()).equals(sortedArr.subList(0, arr.size() - i)) && \n                arr.subList(0, i).equals(sortedArr.subList(arr.size() - i, sortedArr.size()))) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n```",
            "```java\nclass Global {\n    public static String canExchange(List<Integer> lst1, List<Integer> lst2) {\n        int odd_cnt = 0;\n        for (int num : lst1) {\n            if (num % 2 != 0) {\n                odd_cnt++;\n            }\n        }\n\n        int even_cnt = 0;\n        for (int num : lst2) {\n            if (num % 2 == 0) {\n                even_cnt++;\n            }\n        }\n\n        return even_cnt >= odd_cnt ? \"YES\" : \"NO\";\n    }\n}\n```",
            "```java\nclass Global {\n    public static Map<String, Integer> histogram(String test) {\n        Map<String, Integer> freq = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String w : words) {\n            if (!w.trim().isEmpty()) {\n                if (!freq.containsKey(w)) {\n                    freq.put(w, 0);\n                }\n                freq.put(w, freq.get(w) + 1);\n            }\n        }\n        Map<String, Integer> result = new HashMap<>();\n        if (!freq.isEmpty()) {\n            int max_freq = Collections.max(freq.values());\n            for (Map.Entry<String, Integer> entry : freq.entrySet()) {\n                if (entry.getValue() == max_freq) {\n                    result.put(entry.getKey(), entry.getValue());\n                }\n            }\n        }\n        return result;\n    }\n}\n```",
            "```java\nclass Global {\n    public static List<String> reverseDelete(String s, String c) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (!c.contains(ch + \"\")) {\n                sb.append(ch);\n            }\n        }\n        String s1 = sb.toString();\n        return Arrays.asList(s1, isPalindrome(s1) ? \"yes\" : \"no\");\n    }\n\n    private static boolean isPalindrome(String s) {\n        int left = 0;\n        int right = s.length() - 1;\n        while (left < right) {\n            if (s.charAt(left) != s.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}\n```",
            "```java\nclass Global {\n    public static List<String> oddCount(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String num : lst) {\n            int n = 0;\n            for (int i = 0; i < num.length(); i++) {\n                if ((int) num.charAt(i) % 2 == 1) {\n                    n++;\n                }\n            }\n            String rs = \"the number of odd elements in the string i of the input.\";\n            result.add(rs.replace(\"i\", String.valueOf(n)));\n        }\n        return result;\n    }\n}\n```",
            "```java\nclass Global {\n    public static int minSubArraySum(List<Integer> nums) {\n        int min_sum = 0;\n        int cur_sum = 0;\n        for (int n : nums) {\n            cur_sum = Math.min(cur_sum + n, 0);\n            min_sum = Math.min(cur_sum, min_sum);\n        }\n        if (min_sum == 0) {\n            min_sum = Collections.min(nums);\n        }\n        return min_sum;\n    }\n}\n```",
            "```java\nclass Global {\n    public static int maxFill(List<List<Integer>> grid, int capacity) {\n        int total = 0;\n        for (List<Integer> arr : grid) {\n            total += Math.ceil((double) arr.stream().mapToInt(i -> i).sum() / capacity);\n        }\n        return total;\n    }\n}\n```",
            "```java\nclass Global {\n    public static List<Integer> sortArray(List<Integer> arr) {\n        arr.sort((a, b) -> {\n            int countA = Integer.bitCount(a);\n            int countB = Integer.bitCount(b);\n            if (countA == countB) {\n                return a.compareTo(b);\n            }\n            return Integer.compare(countA, countB);\n        });\n        return arr;\n    }\n}\n```",
            "```java\nclass Global {\n    public static List<String> selectWords(String s, int n) {\n        String consonants = \"bcdfghjklmnpqrstvwxyz\";\n        List<String> words = Arrays.stream(s.split(\" \"))\n                .filter(w -> w.length() > 0)\n                .collect(Collectors.toList());\n        return words.stream()\n                .filter(w -> (int) w.toLowerCase().chars()\n                        .mapToObj(c -> (char) c)\n                        .filter(c -> consonants.indexOf(c) != -1)\n                        .count()) == n)\n                .collect(Collectors.toList());\n    }\n}\n```",
            "```java\nclass Global {\n    public static String getClosestVowel(String word) {\n        String vowels = \"aeiouAEIOU\";\n        for (int i = word.length() - 2; i > 0; i--) {\n            if (vowels.indexOf(word.charAt(i)) != -1 && vowels.indexOf(word.charAt(i - 1)) == -1 && vowels.indexOf(word.charAt(i + 1)) == -1) {\n                return String.valueOf(word.charAt(i));\n            }\n        }\n        return \"\";\n    }\n}\n```",
            "```java\nclass Global {\n    public static String matchParens(List<String> lst) {\n        StringBuilder s1 = new StringBuilder(lst.get(0)).append(lst.get(1));\n        StringBuilder s2 = new StringBuilder(lst.get(1)).append(lst.get(0));\n        return (check(s1.toString()) || check(s2.toString())) ? \"Yes\" : \"No\";\n    }\n\n    private static boolean check(String s) {\n        int depth = 0;\n        for (char ch : s.toCharArray()) {\n            if (ch == '(') {\n                depth += 1;\n            } else {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}\n```",
            "```java\nclass Global {\n    public static List<Integer> maximum(List<Integer> arr, int k) {\n        if (k == 0) {\n            return new ArrayList<>();\n        }\n        Collections.sort(arr);\n        int n = arr.size();\n        return arr.subList(n - k, n);\n    }\n}\n```",
            "```java\nclass Global {\n    public static int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int x = lst.get(i);\n            if (i % 2 == 0 && x % 2 != 0) {\n                sum += x;\n            }\n        }\n        return sum;\n    }\n}\n```",
            "```java\nclass Global {\n    public static int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < Math.min(k, arr.size()); i++) {\n            if (String.valueOf(arr.get(i)).length() <= 2) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n}\n```",
            "```java\nclass Global {\n    public static List<Integer> getOddCollatz(int n) {\n        List<Integer> collatz = new ArrayList<>();\n        collatz.add(1);\n        while (n != 1) {\n            if (n % 2 != 0) {\n                collatz.add(n);\n                n = 3 * n + 1;\n            } else {\n                n /= 2;\n            }\n        }\n        Collections.sort(collatz);\n        return collatz;\n    }\n}\n```",
            "```java\nclass Global {\n    public static boolean validDate(String date) {\n        if (date.length() != 10 || date.charAt(2) != '-' || date.charAt(5) != '-') {\n            return false;\n        }\n        int m = Integer.parseInt(date.substring(0, 2));\n        int d = Integer.parseInt(date.substring(3, 5));\n        if (Arrays.asList(1, 3, 5, 7, 8, 10, 12).contains(m) && d >= 1 && d <= 31) {\n            return true;\n        }\n        if (Arrays.asList(4, 6, 9, 11).contains(m) && d >= 1 && d <= 30) {\n            return true;\n        }\n        if (m == 2 && d >= 1 && d <= 29) {\n            return true;\n        }\n        return false;\n    }\n}\n```",
            "```java\nclass Global {\n    public static List<String> splitWords(String txt) {\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\" \"));\n        } else if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        } else {\n            int count = 0;\n            for (int i = 0; i < txt.length(); i++) {\n                char c = txt.charAt(i);\n                if (Character.isLowerCase(c) && c % 2 == 0) {\n                    count++;\n                }\n            }\n            return Arrays.asList(String.valueOf(count));\n        }\n    }\n}\n```",
            "```java\nclass Global {\n    public static boolean isSorted(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return true;\n        }\n\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i - 1) > lst.get(i)) {\n                return false;\n            }\n        }\n\n        Map<Integer, Integer> freq = new HashMap<>();\n        for (int num : lst) {\n            freq.put(num, freq.getOrDefault(num, 0) + 1);\n        }\n        for (int count : freq.values()) {\n            if (count > 2) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n```",
            "```java\nclass Global {\n    public static boolean is_prime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int l = Math.max(interval1.get(0), interval2.get(0));\n        int r = Math.min(interval1.get(1), interval2.get(1));\n        int length = r - l;\n        return (length > 0 && is_prime(length)) ? \"YES\" : \"NO\";\n    }\n}\n```",
            "```java\nclass Global {\n    public static Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        if (arr.contains(0)) {\n            return Optional.of(0);\n        }\n        int negCount = (int) arr.stream().filter(n -> n < 0).count();\n        int sign = (negCount % 2 == 1) ? -1 : 1;\n        int productSum = arr.stream().mapToInt(Math::abs).sum();\n        return Optional.of(sign * productSum);\n    }\n}\n```",
            "```java\nclass Global {\n    public static List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int min_val = n * n + 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    List<Integer> temp = new ArrayList<>();\n                    if (i != 0) {\n                        temp.add(grid.get(i - 1).get(j));\n                    }\n                    if (j != 0) {\n                        temp.add(grid.get(i).get(j - 1));\n                    }\n                    if (i != n - 1) {\n                        temp.add(grid.get(i + 1).get(j));\n                    }\n                    if (j != n - 1) {\n                        temp.add(grid.get(i).get(j + 1));\n                    }\n                    min_val = Collections.min(temp);\n                }\n            }\n        }\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            result.add((i % 2 == 0) ? 1 : min_val);\n        }\n        return result;\n    }\n}\n```",
            "```java\nclass Global {\n    public static List<Integer> tri(int n) {\n        if (n == 0) {\n            return Arrays.asList(1);\n        }\n        List<Integer> seq = Arrays.asList(1, 3);\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                seq.add(i / 2 + 1);\n            } else {\n                seq.add(seq.get(i - 1) + seq.get(i - 2) + (i + 3) / 2);\n            }\n        }\n        return seq;\n    }\n}\n```",
            "```java\nclass Global {\n    public static int digits(int n) {\n        String str = Integer.toString(n);\n        int product = 1;\n        boolean hasOddDigit = false;\n\n        for (char c : str.toCharArray()) {\n            int digit = Character.getNumericValue(c);\n            if (digit % 2 == 1) {\n                product *= digit;\n                hasOddDigit = true;\n            }\n        }\n\n        return hasOddDigit ? product : 0;\n    }\n}\n```",
            "```java\nclass Global {\n    public static boolean isNested(String s) {\n        List<Integer> open_idx = new ArrayList<>();\n        List<Integer> close_idx = new ArrayList<>();\n        \n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == '[') {\n                open_idx.add(i);\n            } else if (s.charAt(i) == ']') {\n                close_idx.add(i);\n            }\n        }\n        \n        Collections.reverse(close_idx);\n        int cnt = 0;\n        int i = 0;\n        int l = close_idx.size();\n        \n        for (int idx : open_idx) {\n            if (i < l && idx < close_idx.get(i)) {\n                cnt += 1;\n                i += 1;\n            }\n        }\n        \n        return cnt >= 2;\n    }\n}\n```",
            "```java\nclass Global {\n    public static int sumSquares(List<Double> lst) {\n        return lst.stream()\n                .mapToInt(n -> (int) Math.pow(Math.ceil(n), 2))\n                .sum();\n    }\n}\n```",
            "```java\nclass Global {\n    public static boolean checkIfLastCharIsALetter(String txt) {\n        if (txt == null || txt.isEmpty()) {\n            return false;\n        }\n        int lastSpaceIndex = txt.lastIndexOf(' ');\n        String last = txt.substring(lastSpaceIndex + 1);\n        return last.length() == 1 && Character.isLetter(last.charAt(0));\n    }\n}\n```",
            "```java\nclass Global {\n    public static int canArrange(List<Integer> arr) {\n        if (arr.size() <= 1) {\n            return -1;\n        }\n        List<Integer> idx = new ArrayList<>();\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                idx.add(i);\n            }\n        }\n        return !idx.isEmpty() ? Collections.max(idx) : -1;\n    }\n}\n```",
            "```java\nclass Global {\n    public static List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst) {\n        List<Integer> neg = lst.stream().filter(i -> i < 0).collect(Collectors.toList());\n        List<Integer> pos = lst.stream().filter(i -> i > 0).collect(Collectors.toList());\n        Optional<Integer> maxNeg = neg.isEmpty() ? Optional.empty() : Optional.of(Collections.max(neg));\n        Optional<Integer> minPos = pos.isEmpty() ? Optional.empty() : Optional.of(Collections.min(pos));\n        return Arrays.asList(maxNeg, minPos);\n    }\n}\n```",
            "```java\nimport java.util.Optional;\n\nclass Global {\n    public static Optional<Double> compareOne(Object a, Object b) {\n        double a1 = anyToReal(a);\n        double b1 = anyToReal(b);\n        if (a1 == b1) {\n            return Optional.empty();\n        } else if (a1 > b1) {\n            return Optional.of(a1);\n        } else {\n            return Optional.of(b1);\n        }\n    }\n\n    private static double anyToReal(Object o) {\n        if (o instanceof String) {\n            return Double.parseDouble(((String) o).replace(',', '.'));\n        } else if (o instanceof Integer) {\n            return ((Integer) o).doubleValue();\n        } else if (o instanceof Double) {\n            return (Double) o;\n        } else {\n            throw new RuntimeException(\"Type Error\");\n        }\n    }\n}\n```",
            "```java\nclass Global {\n    public static boolean isEqualToSumEven(int n) {\n        return n % 2 == 0 && n >= 8;\n    }\n}\n```",
            "```java\nclass Global {\n    public static int specialFactorial(int n) {\n        int fact = 1;\n        int result = 1;\n        for (int i = 1; i <= n; i++) {\n            fact *= i;\n            result *= fact;\n        }\n        return result;\n    }\n}\n```",
            "```java\nclass Global {\n    public static String fixSpaces(String txt) {\n        return txt.replaceAll(\"\\\\s{3,}\", \"-\").replace(\" \", \"_\");\n    }\n}\n```",
            "```java\nclass Global {\n    public static String fileNameCheck(String fileName) {\n        String[] suf = {\"txt\", \"exe\", \"dll\"};\n        String[] lst = fileName.split(\"\\\\.\");\n        if (lst.length != 2 || !Arrays.asList(suf).contains(lst[1]) || lst[0].length() == 0 || !Character.isLetter(lst[0].charAt(0)) || lst[0].replaceAll(\"[^\\\\d]\", \"\").length() > 3) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}\n```",
            "```java\nclass Global {\n    public static int sumSquares(List<Integer> lst) {\n        int result = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                result += Math.pow(lst.get(i), 2);\n            } else if (i % 4 == 0) {\n                result += Math.pow(lst.get(i), 3);\n            } else {\n                result += lst.get(i);\n            }\n        }\n        return result;\n    }\n}\n```",
            "```java\nclass Global {\n    public static String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        StringBuilder primeWords = new StringBuilder();\n        for (String word : words) {\n            int length = word.length();\n            if (length < 2) {\n                continue;\n            }\n            boolean isPrime = true;\n            for (int i = 2; i <= Math.sqrt(length); i++) {\n                if (length % i == 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if (isPrime) {\n                if (primeWords.length() > 0) {\n                    primeWords.append(\" \");\n                }\n                primeWords.append(word);\n            }\n        }\n        return primeWords.toString();\n    }\n}\n```",
            "```java\nclass Global {\n    public static boolean simplify(String x, String n) {\n        String[] xs = x.split(\"/\");\n        String[] ns = n.split(\"/\");\n        int num = Integer.parseInt(xs[0]) * Integer.parseInt(ns[0]);\n        int den = Integer.parseInt(xs[1]) * Integer.parseInt(ns[1]);\n        return num % den == 0;\n    }\n}\n```",
            "```java\nclass Global {\n    public static List<Integer> orderByPoints(List<Integer> nums) {\n        nums.sort((a, b) -> digitsSum(a) - digitsSum(b));\n        return nums;\n    }\n\n    private static int digitsSum(int n) {\n        String nStr = Integer.toString(n);\n        if (n >= 0) {\n            return nStr.chars().map(Character::getNumericValue).sum();\n        } else {\n            return Integer.parseInt(nStr.substring(0, 2)) * 2 + digitsSum(Math.abs(n));\n        }\n    }\n}\n```",
            "```java\nclass Global {\n    public static int specialFilter(List<Integer> nums) {\n        String odds = \"13579\";\n        int count = 0;\n        for (int n : nums) {\n            if (n > 10 && n % 2 == 1 && odds.indexOf(Integer.toString(n).charAt(0)) != -1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n```",
            "```java\nclass Global {\n    public static int getMaxTriples(int n) {\n        int[] c = {0, 0, 0};\n        for (int i = 1; i <= n; i++) {\n            int a = i * i - i + 1;\n            c[a % 3]++;\n        }\n        return c[0] * c[1] * c[2] + ((c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6);\n    }\n}\n```",
            "```java\nclass Global {\n    public static List<String> bf(String planet1, String planet2) {\n        List<String> names = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        if (!names.contains(planet1) || !names.contains(planet2)) {\n            return new ArrayList<>();\n        }\n        int l = names.indexOf(planet1);\n        int r = names.indexOf(planet2);\n        if (l > r) {\n            int temp = l;\n            l = r;\n            r = temp;\n        }\n        if (l == r) {\n            return new ArrayList<>();\n        }\n        return names.subList(l + 1, r);\n    }\n}\n```",
            "```java\nclass Global {\n    public static List<String> sortedListSum(List<String> lst) {        \n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            if (s.length() % 2 == 0) {\n                result.add(s);\n            }\n        }\n        \n        Collections.sort(result, new Comparator<String>() {\n            @Override\n            public int compare(String a, String b) {\n                int lengthComparison = Integer.compare(a.length(), b.length());\n                if (lengthComparison != 0) {\n                    return lengthComparison;\n                }\n                return a.compareTo(b);\n            }\n        });\n        \n        return result;\n    }\n}\n```",
            "```java\nclass Global {\n    public static int xOrY(int n, int x, int y) {\n        if (n < 2) {\n            return y;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}\n```",
            "```java\nimport java.util.List;\n\nclass Global {\n    public static int doubleTheDifference(List<Double> lst) {\n        int sum = 0;\n        for (double n : lst) {\n            if (n >= 0 && n % 2 == 1) {\n                sum += n * n;\n            }\n        }\n        return sum;\n    }\n}\n```",
            "```java\nclass Global {\n    public static List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            result.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return result;\n    }\n}\n```",
            "```java\nclass Global {\n    public static String strongestExtension(String className, List<String> extensions) {\n        int max_s = Integer.MIN_VALUE;\n        String max_ext = \"\";\n        for (String ext : extensions) {\n            int upper = ext.length() - ext.replaceAll(\"[A-Z]\", \"\").length();\n            int lower = ext.length() - ext.replaceAll(\"[a-z]\", \"\").length();\n            int s = upper - lower;\n            if (s > max_s) {\n                max_s = s;\n                max_ext = ext;\n            }\n        }\n        return className + \".\" + max_ext;\n    }\n}\n```",
            "```java\nclass Global {\n    public static boolean cycpatternCheck(String a, String b) {\n        if (a.length() < b.length()) {\n            return false;\n        }\n        for (int i = 0; i < b.length(); i++) {\n            String rotated = b.substring(i) + b.substring(0, i);\n            if (a.contains(rotated)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n```",
            "```java\nclass Global {\n    public static List<Integer> evenOddCount(int num) {\n        String ds = Integer.toString(Math.abs(num));\n        int even = 0;\n        \n        for (int i = 0; i < ds.length(); i++) {\n            if (Character.getNumericValue(ds.charAt(i)) % 2 == 0) {\n                even++;\n            }\n        }\n        \n        return Arrays.asList(even, ds.length() - even);\n    }\n}\n```",
            "```java\nclass Global {\n    public static String intToMiniRoman(int num) {\n        int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        String[] numerals = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n        StringBuilder res = new StringBuilder();\n        for (int i = 0; i < values.length; i++) {\n            while (num >= values[i]) {\n                res.append(numerals[i]);\n                num -= values[i];\n            }\n        }\n        return res.toString();\n    }\n}\n```",
            "```java\nclass Global {\n    public static boolean rightAngleTriangle(int a, int b, int c) {\n        int[] s = {a, b, c};\n        java.util.Arrays.sort(s);\n        return (s[0] * s[0]) + (s[1] * s[1]) == (s[2] * s[2]);\n    }\n}\n```",
            "```java\nclass Global {\n    public static String findMax(List<String> words) {\n        int max_cnt = 0;\n        String max_w = \"\";\n        for (String w : words) {\n            Set<Character> uniqueChars = new HashSet<>();\n            for (char c : w.toCharArray()) {\n                uniqueChars.add(c);\n            }\n            int cnt = uniqueChars.size();\n            if (cnt > max_cnt) {\n                max_cnt = cnt;\n                max_w = w;\n            } else if (cnt == max_cnt) {\n                max_w = max_w.compareTo(w) < 0 ? max_w : w;\n            }\n        }\n        return max_w;\n    }\n}\n```",
            "```java\nclass Global {\n    public static List<Integer> eat(int num, int need, int remaining) {\n        if (need <= remaining) {\n            return Arrays.asList(num + need, remaining - need);\n        } else {\n            return Arrays.asList(num + remaining, 0);\n        }\n    }\n}\n```",
            "```java\nclass Global {\n    public static int doAlgebra(List<String> operators, List<Integer> operands) {\n        List<String> ops = new ArrayList<>(operators);\n        List<Integer> nums = new ArrayList<>(operands);\n        int i = ops.size() - 1;\n        while (i >= 0) {\n            if (ops.get(i).equals(\"**\")) {\n                nums.set(i, (int) Math.pow(nums.get(i), nums.get(i + 1)));\n                nums.remove(i + 1);\n                ops.remove(i);\n            }\n            i -= 1;\n        }\n        i = 0;\n        while (i < ops.size()) {\n            if (ops.get(i).equals(\"*\")) {\n                nums.set(i, nums.get(i) * nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i -= 1;\n            } else if (ops.get(i).equals(\"//\")) {\n                nums.set(i, nums.get(i) / nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i -= 1;\n            }\n            i += 1;\n        }\n        i = 0;\n        while (i < ops.size()) {\n            if (ops.get(i).equals(\"+\")) {\n                nums.set(i, nums.get(i) + nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i -= 1;\n            } else if (ops.get(i).equals(\"-\")) {\n                nums.set(i, nums.get(i) - nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i -= 1;\n            }\n            i += 1;\n        }\n        return nums.get(0);\n    }\n}\n```",
            "```java\nclass Global {\n    public static String solve(String s) {\n        if (!s.matches(\".*[a-zA-Z].*\")) {\n            return new StringBuilder(s).reverse().toString();\n        }\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n            if (!Character.isLetter(ch)) {\n                result.append(ch);\n            } else if (Character.isUpperCase(ch)) {\n                result.append(Character.toLowerCase(ch));\n            } else if (Character.isLowerCase(ch)) {\n                result.append(Character.toUpperCase(ch));\n            }\n        }\n        return result.toString();\n    }\n}\n```",
            "```java\nclass Global {\n    public static Optional<String> stringToMd5(String txt) {\n        if (txt == null || txt.isEmpty()) {\n            return Optional.empty();\n        }\n        String md5_hash = org.apache.commons.codec.digest.DigestUtils.md5Hex(txt);\n        return Optional.of(md5_hash);\n    }\n}\n```",
            "```java\nclass Global {\n    public static List<Integer> generateIntegers(int a, int b) {\n        int lower = Math.max(2, Math.min(a, b));\n        int upper = Math.min(8, Math.max(a, b));\n        List<Integer> result = new ArrayList<>();\n        for (int i = lower; i <= upper; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}\n```"
        ]
    }
}