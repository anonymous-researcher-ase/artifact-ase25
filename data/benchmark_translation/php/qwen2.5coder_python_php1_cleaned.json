{
    "python": {
        "php": [
            "/**\n * @param {array<float>} $numbers\n * @param {float} $threshold\n * @returns {bool}\n */\nfunction hasCloseElements($numbers, $threshold) {\n    for ($i = 0; $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n            if (abs($numbers[$i] - $numbers[$j]) < $threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param {string} $parenString\n * @returns {array<string>}\n */\nfunction separateParenGroups ($parenString) {\n    $groups = [];\n    $stk = [];\n    $current_group = \"\";\n    $parens = str_replace(\" \", \"\", $parenString);\n    for ($i = 0; $i < strlen($parens); $i++) {\n        $ch = $parens[$i];\n        if ($ch == \"(\") {\n            array_push($stk, $ch);\n            $current_group .= $ch;\n        } elseif ($ch == \")\") {\n            array_pop($stk);\n            $current_group .= $ch;\n            if (empty($stk)) {\n                array_push($groups, $current_group);\n                $current_group = \"\";\n            }\n        }\n    }\n    return $groups;\n}\n",
            "/**\n * @param {float} $num\n * @returns {float}\n */\nfunction truncateNumber($num) {\n    return $num - floor($num);\n}\n",
            "/**\n * @param {array<int>} $operations\n * @returns {bool}\n */\nfunction belowZero ($operations) {\n    $balance = 0;\n    foreach ($operations as $op) {\n        $balance += $op;\n        if ($balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "function meanAbsoluteDeviation ($numbers) {\n    $mean = array_sum($numbers) / count($numbers);\n    $deviation = 0;\n    foreach ($numbers as $x) {\n        $deviation += abs($x - $mean);\n    }\n    return $deviation / count($numbers);\n}\n",
            "/**\n * @param {array<int>} $numbers\n * @param {int} $delimiter\n * @returns {array<int>}\n */\nfunction intersperse ($numbers, $delimiter) {\n    $result = [];\n    for ($i = 0; $i < count($numbers); $i++) {\n        if ($i != 0) {\n            $result[] = $delimiter;\n        }\n        $result[] = $numbers[$i];\n    }\n    return $result;\n}\n",
            "/**\n * @param {string} $parenString\n * @returns {array<int>}\n */\nfunction parseNestedParens ($parenString) {\n    $result = [];\n    $parenGroups = explode(' ', $parenString);\n    foreach ($parenGroups as $group) {\n        $maxDepth = 0;\n        $depth = 0;\n        for ($i = 0; $i < strlen($group); $i++) {\n            $ch = $group[$i];\n            if ($ch === \"(\") {\n                $depth++;\n                $maxDepth = max($maxDepth, $depth);\n            } elseif ($ch === \")\") {\n                $depth--;\n            }\n        }\n        $result[] = $maxDepth;\n    }\n    return $result;\n}\n",
            "/**\n * @param {array<string>} $strs\n * @param {string} $substring\n * @returns {array<string>}\n */\nfunction filterBySubstring($strs, $substring) {\n    return array_filter($strs, function($s) use ($substring) {\n        return strpos($s, $substring) !== false;\n    });\n}\n",
            "/**\n * @param {array<int>} $numbers\n * @returns {array<int>}\n */\nfunction sumProduct ($numbers) {\n    $n_sum = array_sum($numbers);\n    $n_product = array_reduce($numbers, function($carry, $item) {\n        return $carry * $item;\n    }, 1);\n    return [$n_sum, $n_product];\n}\n",
            "/**\n * @param {array<int>} $numbers\n * @returns {array<int>}\n */\nfunction rollingMax($numbers) {\n    $max_so_far = -PHP_INT_MAX;\n    $result = [];\n    foreach ($numbers as $num) {\n        $max_so_far = max($max_so_far, $num);\n        array_push($result, $max_so_far);\n    }\n    return $result;\n}\n",
            "/**\n * @param {string} $s\n * @returns {string}\n */\nfunction makePalindrome ($s) {\n    function isPalindrome($s) {\n        return $s === strrev($s);\n    }\n    \n    if (isPalindrome($s)) {\n        return $s;\n    }\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (isPalindrome(substr($s, $i))) {\n            return $s . strrev(substr($s, 0, $i));\n        }\n    }\n    return \"\";\n}\n",
            "/**\n * @param {string} $a\n * @param {string} $b\n * @returns {string}\n */\nfunction stringXor ($a, $b) {\n    $result = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= ($a[$i] === $b[$i]) ? '0' : '1';\n    }\n    return $result;\n}\n",
            "/**\n * @param {array<string>} $strs\n * @returns {string | null}\n */\nfunction longest ($strs) {\n    if (empty($strs)) {\n        return null;\n    }\n    $longest_s = $strs[0];\n    foreach ($strs as $s) {\n        if (strlen($s) > strlen($longest_s)) {\n            $longest_s = $s;\n        }\n    }\n    return $longest_s;\n}\n",
            "/**\n * @param {int} $a\n * @param {int} $b\n * @returns {int}\n */\nfunction greatestCommonDivisor ($a, $b) {\n    if ($b == 0) {\n        return $a;\n    } else {\n        return greatestCommonDivisor($b, $a % $b);\n    }\n}\n",
            "/**\n * @param {string} $s\n * @returns {array<string>}\n */\nfunction allPrefixes ($s) {\n    $prefixes = [];\n    for ($i = 0; $i < strlen($s); $i++) {\n        $prefixes[] = substr($s, 0, $i + 1);\n    }\n    return $prefixes;\n}\n",
            "/**\n * @param {int} $n\n * @returns {string}\n */\nfunction stringSequence ($n) {\n    return implode(' ', range(0, $n));\n}\n",
            "/**\n * @param {string} $s\n * @returns {int}\n */\nfunction countDistinctCharacters ($s) {\n    return count(array_unique(str_split(strtolower($s))));\n}\n",
            "function parseMusic ($musicString) {\n    $durations = [\"o\" => 4, \"o|\" => 2, \".|\" => 1];\n    $notes = explode(\" \", $musicString);\n    return array_map(function($note) use ($durations) {\n        return $durations[$note] ?? null;\n    }, $notes);\n}\n",
            "/**\n * @param {string} $s\n * @param {string} $substring\n * @returns {int}\n */\nfunction howManyTimes ($s, $substring) {\n    $times = 0;\n    for ($i = 0; $i <= strlen($s) - strlen($substring); $i++) {\n        if (substr($s, $i, strlen($substring)) == $substring) {\n            $times++;\n        }\n    }\n    return $times;\n}\n",
            "/**\n * @param {string} $numbers\n * @returns {string}\n */\nfunction sortNumbers($numbers) {\n    $num_dict = [\n        \"zero\" => 0,\n        \"one\" => 1,\n        \"two\" => 2,\n        \"three\" => 3,\n        \"four\" => 4,\n        \"five\" => 5,\n        \"six\" => 6,\n        \"seven\" => 7,\n        \"eight\" => 8,\n        \"nine\" => 9\n    ];\n\n    $num_list = array_filter(explode(\" \", $numbers), function($x) use ($num_dict) {\n        return array_key_exists($x, $num_dict);\n    });\n\n    usort($num_list, function($a, $b) use ($num_dict) {\n        return $num_dict[$a] - $num_dict[$b];\n    });\n\n    return implode(\" \", $num_list);\n}\n",
            "function findClosestElements ($numbers) {\n    sort($numbers);\n    $min_diff = INF;\n    $closest_pair = [];\n    for ($i = 1; $i < count($numbers); $i++) {\n        $diff = $numbers[$i] - $numbers[$i - 1];\n        if ($diff < $min_diff) {\n            $min_diff = $diff;\n            $closest_pair = [$numbers[$i - 1], $numbers[$i]];\n        }\n    }\n    return $closest_pair;\n}\n",
            "/**\n * @param {array<float>} $numbers\n * @returns {array<float>}\n */\nfunction rescaleToUnit ($numbers) {\n    $min_num = min($numbers);\n    $max_num = max($numbers);\n    if ($min_num == $max_num) {\n        return array_fill(0, count($numbers), 0.0);\n    } else {\n        return array_map(function($num) use ($min_num, $max_num) {\n            return ($num - $min_num) / ($max_num - $min_num);\n        }, $numbers);\n    }\n}\n",
            "/**\n * @param {array<mixed>} $values\n * @returns {array<int>}\n */\nfunction filterIntegers ($values) {\n    return array_filter($values, function($x) {\n        return is_int($x);\n    });\n}\n",
            "/**\n * @param {string} $s\n * @returns {int}\n */\nfunction strLength($s) {\n    return strlen($s);\n}\n",
            "function largestDivisor($n) {\n    for ($i = 2; $i < $n; $i++) {\n        if ($n % $i == 0) {\n            return intdiv($n, $i);\n        }\n    }\n    return 1;\n}\n",
            "```\n/**\n * @param {int} $n\n * @returns {array<int>}\n */\nfunction factorize($n) {\n    $factors = array();\n    $divisor = 2;\n    while ($divisor <= $n) {\n        if ($n % $divisor == 0) {\n            array_push($factors, $divisor);\n            $n = intdiv($n, $divisor);\n        } else {\n            $divisor += 1;\n        }\n    }\n    return $factors;\n}\n```",
            "/**\n * @param {array<int>} $numbers\n * @returns {array<int>}\n */\nfunction removeDuplicates ($numbers) {\n    $counts = [];\n    foreach ($numbers as $num) {\n        if (array_key_exists($num, $counts)) {\n            $counts[$num] += 1;\n        } else {\n            $counts[$num] = 1;\n        }\n    }\n    $res = [];\n    foreach ($numbers as $num) {\n        if ($counts[$num] == 1) {\n            $res[] = $num;\n        }\n    }\n    return $res;\n}\n",
            "/**\n * @param {string} $s\n * @returns {string}\n */\nfunction flipCase ($s) {\n    $flipped = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        $ch = $s[$i];\n        if (!ctype_alpha($ch)) {\n            $flipped .= $ch;\n        } elseif (ctype_lower($ch)) {\n            $flipped .= strtoupper($ch);\n        } elseif (ctype_upper($ch)) {\n            $flipped .= strtolower($ch);\n        }\n    }\n    return $flipped;\n}\n",
            "/**\n * @param {array<string>} $strs\n * @returns {string}\n */\nfunction concatenate($strs) {\n    return implode(\"\", $strs);\n}\n",
            "/**\n * @param {array<string>} $strs\n * @param {string} $prefixStr\n * @returns {array<string>}\n */\nfunction filterByPrefix ($strs, $prefixStr) {\n    return array_filter($strs, function($s) use ($prefixStr) {\n        return strpos($s, $prefixStr) === 0;\n    });\n}\n",
            "/**\n * @param {array<int>} $l\n * @returns {array<int>}\n */\nfunction getPositive ($l) {\n    return array_filter($l, function($num) {\n        return $num > 0;\n    });\n}\n",
            "/**\n * @param {int} $n\n * @returns {bool}\n */\nfunction isPrime ($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= floor(sqrt($n)); $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "/**\n * @param {array<int>} $xs\n * @param {float} $x\n * @returns {float}\n */\nfunction poly ($xs, $x) {\n    $res = 0.0;\n    for ($i = 0; $i < count($xs); $i++) {\n        $res += $xs[$i] * pow($x, $i);\n    }\n    return $res;\n}\n\n/**\n * @param {array<int>} $xs\n * @returns {float}\n */\nfunction findZero ($xs) {\n    $x1 = 1.0;\n    $x2 = -1.0;\n    while (poly($xs, $x1) * poly($xs, $x2) > 0) {\n        $x1 *= 2;\n        $x2 *= 2;\n    }\n    while (abs($x1 - $x2) > 1e-10) {\n        $mid = ($x1 + $x2) / 2;\n        if (poly($xs, $mid) == 0) {\n            return $mid;\n        } elseif (poly($xs, $mid) * poly($xs, $x1) < 0) {\n            $x2 = $mid;\n        } else {\n            $x1 = $mid;\n        }\n    }\n    return ($x1 + $x2) / 2;\n}\n",
            "/**\n * @param {array<int>} $l\n * @returns {array<int>}\n */\nfunction sortThird ($l) {\n    $sorted_third = array_slice($l, 0, null, true);\n    ksort($sorted_third, SORT_NUMERIC);\n    $sorted_third = array_values($sorted_third);\n    \n    $result = [];\n    foreach ($l as $i => $value) {\n        if ($i % 3 == 0) {\n            $result[] = $sorted_third[floor($i / 3)];\n        } else {\n            $result[] = $value;\n        }\n    }\n    return $result;\n}\n",
            "/**\n * @param {array<int>} $l\n * @returns {array<int>}\n */\nfunction listUnique ($l) {\n    return array_values(array_unique($l));\n}\n",
            "/**\n * @param {array<int>} $l\n * @returns {int}\n */\nfunction maxElement ($l) {\n    if (empty($l)) {\n        return 0;\n    }\n    return max($l);\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction fizzBuzz ($n) {\n    $cnt = 0;\n    for ($i = 0; $i < $n; $i++) {\n        if ($i % 11 == 0 || $i % 13 == 0) {\n            $cnt += substr_count((string)$i, '7');\n        }\n    }\n    return $cnt;\n}\n",
            "/**\n * @param {array<int>} $l\n * @returns {array<int>}\n */\nfunction sortEven ($l) {\n    $sorted_even = array_slice($l, 0, count($l), true);\n    sort($sorted_even, SORT_NUMERIC);\n    \n    for ($i = 0; $i < count($l); $i++) {\n        if ($i % 2 == 0) {\n            $l[$i] = $sorted_even[floor($i / 2)];\n        }\n    }\n    \n    return $l;\n}\n",
            "/**\n * @param {string} $s\n * @returns {string}\n */\nfunction encodeCyclic ($s) {\n    $result = '';\n    for ($i = 0; $i < strlen($s); $i += 3) {\n        if ($i + 3 > strlen($s)) {\n            $result .= substr($s, $i);\n        } else {\n            $result .= substr($s, $i + 1, 2) . $s[$i];\n        }\n    }\n    return $result;\n}\n\n/**\n * @param {string} $s\n * @returns {string}\n */\nfunction decodeCyclic ($s) {\n    return encodeCyclic(encodeCyclic($s));\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction primeFib ($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= floor(sqrt($n)); $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/**\n * @param {int} $n\n * @returns {int}\n */\nfunction primeFib ($n) {\n    $f = [0, 1];\n    $cnt = 0;\n    while ($cnt < $n) {\n        $f = [$f[1], $f[0] + $f[1]];\n        if (primeFib($f[1])) {\n            $cnt += 1;\n        }\n    }\n    return $f[1];\n}\n",
            "/**\n * @param {array<int>} $l\n * @returns {bool}\n */\nfunction triplesSumToZero ($l) {\n    for ($i = 0; $i < count($l); $i++) {\n        for ($j = $i + 1; $j < count($l); $j++) {\n            for ($k = $j + 1; $k < count($l); $k++) {\n                if ($l[$i] + $l[$j] + $l[$k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction carRaceCollision($n) {\n    return $n ** 2;\n}\n",
            "/**\n * @param {array<int>} $l\n * @returns {array<int>}\n */\nfunction incrList ($l) {\n    return array_map(function($i) {\n        return $i + 1;\n    }, $l);\n}\n",
            "/**\n * @param {array<int>} $l\n * @returns {bool}\n */\nfunction pairsSumToZero ($l) {\n    $seen = [];\n    foreach ($l as $num) {\n        if (in_array(-$num, $seen)) {\n            return true;\n        }\n        $seen[] = $num;\n    }\n    return false;\n}\n",
            "/**\n * @param {int} $x\n * @param {int} $bas\n * @returns {string}\n */\nfunction changeBase ($x, $bas) {\n    if ($x == 0) {\n        return \"0\";\n    }\n    $digits = [];\n    while ($x > 0) {\n        $digits[] = strval($x % $bas);\n        $x = intdiv($x, $bas);\n    }\n    return implode(\"\", array_reverse($digits));\n}\n",
            "/**\n * @param {int} $a\n * @param {int} $h\n * @returns {float}\n */\nfunction triangleArea($a, $h) {\n    return $a * $h / 2;\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction fib4 ($n) {\n    $fib = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n + 1; $i++) {\n        $fib[$i % 4] = array_sum($fib);\n    }\n    return $fib[$n % 4];\n}\n",
            "/**\n * @param {array<float>} $l\n * @returns {float}\n */\nfunction median ($l) {\n    sort($l);\n    $count = count($l);\n    if ($count % 2 != 0) {\n        return $l[floor($count / 2)];\n    } else {\n        return ($l[$count / 2] + $l[$count / 2 - 1]) / 2;\n    }\n}\n",
            "/**\n * @param {string} $txt\n * @returns {bool}\n */\nfunction isPalindrome ($txt) {\n    return $txt === strrev($txt);\n}\n",
            "/**\n * @param {int} $n\n * @param {int} $p\n * @returns {int}\n */\nfunction modp($n, $p) {\n    $ret = 1;\n    for ($i = 0; $i < $n; $i++) {\n        $ret = ($ret * 2) % $p;\n    }\n    return $ret;\n}\n",
            "/**\n * @param {string} $s\n * @returns {string}\n */\nfunction encodeShift($s) {\n    $result = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        $ch = $s[$i];\n        $result .= chr(((ord($ch) - 97 + 5) % 26) + 97);\n    }\n    return $result;\n}\n\n/**\n * @param {string} $s\n * @returns {string}\n */\nfunction decodeShift($s) {\n    $result = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        $ch = $s[$i];\n        $result .= chr(((ord($ch) - 97 + 21) % 26) + 97);\n    }\n    return $result;\n}\n",
            "/**\n * @param {string} $txt\n * @returns {string}\n */\nfunction removeVowels($txt) {\n    $vowels = \"aeiouAEIOU\";\n    $result = '';\n    \n    for ($i = 0; $i < strlen($txt); $i++) {\n        if (strpos($vowels, $txt[$i]) === false) {\n            $result .= $txt[$i];\n        }\n    }\n    \n    return $result;\n}\n",
            "/**\n * @param {array<int>} $l\n * @param {int} $t\n * @returns {bool}\n */\nfunction belowThreshold ($l, $t) {\n    foreach ($l as $x) {\n        if ($x >= $t) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "/**\n * @param {int} $x\n * @param {int} $y\n * @returns {int}\n */\nfunction add($x, $y) {\n    return $x + $y;\n}\n",
            "/**\n * @param {string} $s0\n * @param {string} $s1\n * @returns {bool}\n */\nfunction sameChars ($s0, $s1) {\n    return count(array_unique(str_split($s0))) === count(array_unique(str_split($s1)));\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction fib ($n) {\n    if ($n <= 1) {\n        return $n;\n    } else {\n        return fib($n - 1) + fib($n - 2);\n    }\n}\n",
            "/**\n * @param {string} $brackets\n * @returns {bool}\n */\nfunction correctBracketing($brackets) {\n    $depth = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] == \"<\") {\n            $depth += 1;\n        } elseif ($brackets[$i] == \">\") {\n            $depth -= 1;\n        }\n        if ($depth < 0) {\n            return false;\n        }\n    }\n    return $depth == 0;\n}\n",
            "/**\n * @param {array<int>} $l\n * @returns {bool}\n */\nfunction monotonic ($l) {\n    $diff = array_map(function($x, $y) { return $y - $x; }, $l, array_slice($l, 1));\n    return empty(array_filter($diff, function($x) { return $x > 0; })) || empty(array_filter($diff, function($x) { return $x < 0; }));\n}\n",
            "/**\n * @param {array<int>} $l1\n * @param {array<int>} $l2\n * @returns {array<int>}\n */\nfunction common ($l1, $l2) {\n    return array_values(array_map('intval', array_unique(array_intersect($l1, $l2))));\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction largestPrimeFactor ($n) {\n    $i = 2;\n    while ($i * $i <= $n) {\n        if ($n % $i) {\n            $i += 1;\n        } else {\n            $n //= $i;\n        }\n    }\n    return $n;\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction sumToN ($n) {\n    return array_sum(range(0, $n));\n}\n",
            "/**\n * @param {string} $brackets\n * @returns {bool}\n */\nfunction correctBracketing ($brackets) {\n    $depth = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] === \"(\") {\n            $depth += 1;\n        } elseif ($brackets[$i] === \")\") {\n            $depth -= 1;\n        }\n        if ($depth < 0) {\n            return false;\n        }\n    }\n    return $depth === 0;\n}\n",
            "/**\n * @param {array<int>} $xs\n * @returns {array<int>}\n */\nfunction derivative($xs) {\n    $result = [];\n    for ($i = 1; $i < count($xs); $i++) {\n        $result[] = $xs[$i] * $i;\n    }\n    return $result;\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction fibfib ($n) {\n    if ($n <= 1) {\n        return 0;\n    }\n    $a = 0;\n    $b = 0;\n    $c = 1;\n    while ($n > 2) {\n        $a = $b;\n        $b = $c;\n        $c = $a + $b + $c;\n        $n -= 1;\n    }\n    return $c;\n}\n",
            "/**\n * @param {string} $s\n * @returns {int}\n */\nfunction vowelsCount($s) {\n    $vowels = \"aeiou\";\n    $cnt = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (strpos($vowels, strtolower($s[$i])) !== false || ($i == strlen($s) - 1 && strtolower($s[$i]) == \"y\")) {\n            $cnt++;\n        }\n    }\n    return $cnt;\n}\n",
            "/**\n * @param {int} $x\n * @param {int} $shift\n * @returns {string}\n */\nfunction circularShift($x, $shift) {\n    $x_str = strval($x);\n    if ($shift > strlen($x_str)) {\n        return strrev($x_str);\n    } else {\n        return substr($x_str, -$shift) . substr($x_str, 0, -$shift);\n    }\n}\n",
            "/**\n * @param {string} $s\n * @returns {int}\n */\nfunction digitSum($s) {\n    $sum = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        $c = $s[$i];\n        if (ctype_upper($c)) {\n            $sum += ord($c);\n        }\n    }\n    return $sum;\n}\n",
            "/**\n * @param {string} $s\n * @param {int} $n\n * @returns {int}\n */\nfunction fruitDistribution ($s, $n) {\n    $words = explode(' ', $s);\n    $applesIndex = array_search(\"apples\", $words) - 1;\n    $orangesIndex = array_search(\"oranges\", $words) - 1;\n    $apples = (int)$words[$applesIndex];\n    $oranges = (int)$words[$orangesIndex];\n    return $n - $apples - $oranges;\n}\n",
            "/**\n * @param {array<int>} $arr\n * @returns {array<int>}\n */\nfunction pluck ($arr) {\n    $evens = array_filter($arr, function($n) {\n        return $n % 2 == 0;\n    });\n    \n    if (empty($evens)) {\n        return [];\n    }\n    \n    $min_even = min($evens);\n    $index = array_search($min_even, $arr);\n    \n    return [$min_even, $index];\n}\n",
            "/**\n * @param {array<int>} $lst\n * @returns {int}\n */\nfunction search ($lst) {\n    $freqs = array();\n    foreach ($lst as $n) {\n        if (array_key_exists($n, $freqs)) {\n            $freqs[$n]++;\n        } else {\n            $freqs[$n] = 1;\n        }\n    }\n    $good_vals = array();\n    foreach ($freqs as $k => $v) {\n        if ($v >= $k) {\n            $good_vals[] = $k;\n        }\n    }\n    return !empty($good_vals) ? max($good_vals) : -1;\n}\n",
            "/**\n * @param {array<int>} $lst\n * @returns {array<int>}\n */\nfunction strangeSortList($lst) {\n    $sl = $lst;\n    sort($sl);\n    $result = [];\n    $left = 0;\n    $right = count($sl) - 1;\n    while ($left <= $right) {\n        $result[] = $sl[$left];\n        $left++;\n        if ($left <= $right) {\n            $result[] = $sl[$right];\n            $right--;\n        }\n    }\n    return $result;\n}\n",
            "/**\n * @param {int} $a\n * @param {int} $b\n * @param {int} $c\n * @returns {float}\n */\nfunction triangleArea($a, $b, $c) {\n    if ($a + $b > $c && $a + $c > $b && $b + $c > $a) {\n        $s = ($a + $b + $c) / 2.0;\n        return sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n    } else {\n        return -1.0;\n    }\n}\n",
            "function willItFly ($q, $w) {\n    if (count($q) == 0) {\n        return false;\n    }\n    $is_palin = true;\n    for ($i = 0; $i < count($q); $i++) {\n        if ($q[$i] != $q[count($q) - $i - 1]) {\n            $is_palin = false;\n            break;\n        }\n    }\n    $total = array_sum($q);\n    return $is_palin && $total <= $w;\n}\n",
            "/**\n * @param {array<int>} $arr\n * @returns {int}\n */\nfunction smallestChange($arr) {\n    $ans = 0;\n    for ($i = 0; $i < count($arr) / 2; $i++) {\n        if ($arr[$i] != $arr[count($arr) - $i - 1]) {\n            $ans += 1;\n        }\n    }\n    return $ans;\n}\n",
            "/**\n * @param {array<string>} $lst1\n * @param {array<string>} $lst2\n * @returns {array<string>}\n */\nfunction totalMatch ($lst1, $lst2) {\n    $cnt1 = array_reduce($lst1, function($carry, $item) {\n        return $carry + strlen($item);\n    }, 0);\n\n    $cnt2 = array_reduce($lst2, function($carry, $item) {\n        return $carry + strlen($item);\n    }, 0);\n\n    return $cnt1 <= $cnt2 ? $lst1 : $lst2;\n}\n",
            "/**\n * @param {int} $n\n * @returns {bool}\n */\nfunction is_prime($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= floor(sqrt($n)); $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/**\n * @param {int} $a\n * @returns {bool}\n */\nfunction isMultiplyPrime($a) {\n    $cnt = 0;\n    for ($i = 2; $i <= $a; $i++) {\n        if (is_prime($i)) {\n            while ($a % $i == 0) {\n                $cnt++;\n                $a /= $i;\n            }\n        }\n    }\n    return $cnt == 3;\n}\n",
            "/**\n * @param {int} $x\n * @param {int} $n\n * @returns {bool}\n */\nfunction isSimplePower ($x, $n) {\n    if ($n < 2) {\n        return $x == $n;\n    }\n    $tmp = 1;\n    while ($tmp < $x) {\n        $tmp *= $n;\n    }\n    return $tmp == $x;\n}\n",
            "/**\n * @param {int} $a\n * @returns {bool}\n */\nfunction isCube($a) {\n    $a = abs($a);\n    $root = (int)(round(pow($a, 1.0 / 3.0)));\n    return $root * $root * $root == $a;\n}\n",
            "/**\n * @param {string} $num\n * @returns {int}\n */\nfunction hexKey ($num) {\n    return count(array_filter(str_split($num), function($x) {\n        return in_array($x, str_split(\"2357BD\"));\n    }));\n}\n",
            "/**\n * @param {int} $dec\n * @returns {string}\n */\nfunction decimalToBinary ($dec) {\n    $binary = decbin($dec);\n    return \"db{$binary}db\";\n}\n",
            "/**\n * @param {string} $s\n * @returns {bool}\n */\nfunction isHappy ($s) {\n    if (strlen($s) < 3) {\n        return false;\n    }\n    for ($i = 0; $i <= strlen($s) - 3; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i] == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "/**\n * @param {array<float>} $grades\n * @returns {array<string>}\n */\nfunction numericalLetterGrade ($grades) {\n    $result = [];\n    foreach ($grades as $g) {\n        if ($g == 4.0) {\n            $result[] = \"A+\";\n        } elseif ($g > 3.7) {\n            $result[] = \"A\";\n        } elseif ($g > 3.3) {\n            $result[] = \"A-\";\n        } elseif ($g > 3.0) {\n            $result[] = \"B+\";\n        } elseif ($g > 2.7) {\n            $result[] = \"B\";\n        } elseif ($g > 2.3) {\n            $result[] = \"B-\";\n        } elseif ($g > 2.0) {\n            $result[] = \"C+\";\n        } elseif ($g > 1.7) {\n            $result[] = \"C\";\n        } elseif ($g > 1.3) {\n            $result[] = \"C-\";\n        } elseif ($g > 1.0) {\n            $result[] = \"D+\";\n        } elseif ($g > 0.7) {\n            $result[] = \"D\";\n        } elseif ($g > 0.0) {\n            $result[] = \"D-\";\n        } else {\n            $result[] = \"E\";\n        }\n    }\n    return $result;\n}\n",
            "/**\n * @param {string} $s\n * @returns {bool}\n */\nfunction primeLength($s) {\n    $length = strlen($s);\n    if ($length < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= sqrt($length); $i++) {\n        if ($length % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction startsOneEnds($n) {\n    if ($n == 1) {\n        return 1;\n    }\n    return 2 * 9 * pow(10, $n - 2);\n}\n",
            "function solve ($n) {\n    $digits_sum = array_sum(str_split($n));\n    return decbin($digits_sum);\n}\n",
            "/**\n * @param {array<int>} $lst\n * @returns {int}\n */\nfunction add ($lst) {\n    $sum = 0;\n    foreach ($lst as $i => $x) {\n        if ($i % 2 == 1 && $x % 2 == 0) {\n            $sum += $x;\n        }\n    }\n    return $sum;\n}\n",
            "/**\n * @param {string} $s\n * @returns {string}\n */\nfunction antiShuffle($s) {\n    $words = explode(\" \", $s);\n    $sortedWords = array_map(function($word) {\n        $chars = str_split($word);\n        sort($chars);\n        return implode(\"\", $chars);\n    }, $words);\n    return implode(\" \", $sortedWords);\n}\n",
            "/**\n * @param {array<array<int>>} $lst\n * @param {int} $x\n * @returns {array<array<int>>}\n */\nfunction getRow ($lst, $x) {\n    $coords = [];\n    for ($i = 0; $i < count($lst); $i++) {\n        for ($j = 0; $j < count($lst[$i]); $j++) {\n            if ($lst[$i][$j] == $x) {\n                $coords[] = [$i, $j];\n            }\n        }\n    }\n    usort($coords, function($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n    return $coords;\n}\n",
            "/**\n * @param {array<int>} $arr\n * @returns {array<int>}\n */\nfunction sortArray ($arr) {\n    if (count($arr) == 0) {\n        return [];\n    }\n    if (($arr[0] + end($arr)) % 2 == 0) {\n        rsort($arr);\n    } else {\n        sort($arr);\n    }\n    return $arr;\n}\n",
            "/**\n * @param {string} $s\n * @returns {string}\n */\nfunction encrypt ($s) {\n    $result = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        $ch = $s[$i];\n        $shifted = ord($ch) + 4;\n        if ($shifted > ord('z')) {\n            $shifted -= 26;\n        }\n        $result .= chr($shifted);\n    }\n    return $result;\n}\n",
            "/**\n * @param {array<int>} $lst\n * @returns {int | null}\n */\nfunction nextSmallest($lst) {\n    $sl = array_unique($lst);\n    sort($sl);\n    if (count($sl) < 2) {\n        return null;\n    }\n    return $sl[1];\n}\n",
            "/**\n * @param {string} $s\n * @returns {int}\n */\nfunction isBored ($s) {\n    $sentences = preg_split('/[.!?]\\s*/', $s);\n    $count = 0;\n    foreach ($sentences as $sentence) {\n        if (strlen($sentence) >= 2 && substr($sentence, 0, 2) === \"I \") {\n            $count++;\n        }\n    }\n    return $count;\n}\n",
            "/**\n * @param {mixed} $x\n * @param {mixed} $y\n * @param {mixed} $z\n * @returns {bool}\n */\nfunction anyInt($x, $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if (($x + $y == $z) || ($x + $z == $y) || ($y + $z == $x)) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param {string} $message\n * @returns {string}\n */\nfunction encode($message) {\n    $vowels = \"aeiouAEIOU\";\n    $result = [];\n    for ($i = 0; $i < strlen($message); $i++) {\n        $ch = $message[$i];\n        if (ctype_alpha($ch)) {\n            $ch1 = ctype_lower($ch) ? strtoupper($ch) : strtolower($ch);\n            if (strpos($vowels, $ch1) !== false) {\n                $ch1 = chr(ord($ch1) + 2);\n            }\n            $result[] = $ch1;\n        } else {\n            $result[] = $ch;\n        }\n    }\n    return implode(\"\", $result);\n}\n",
            "/**\n * @param {array<int>} $lst\n * @returns {int}\n */\nfunction skjkasdkd ($lst) {\n    function is_prime($n) {\n        if ($n < 2) {\n            return false;\n        }\n        for ($i = 2; $i <= sqrt($n); $i++) {\n            if ($n % $i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    $primes = array_filter($lst, 'is_prime');\n    if (empty($primes)) {\n        return 0;\n    }\n    $largest = strval(max($primes));\n    return array_sum(str_split($largest));\n}\n",
            "/**\n * @param {array<string, string>} $d\n * @returns {bool}\n */\nfunction checkDictCase ($d) {\n    if (empty($d)) {\n        return false;\n    }\n    $allLower = true;\n    $allUpper = true;\n    foreach (array_keys($d) as $key) {\n        if (!ctype_lower($key)) {\n            $allLower = false;\n        }\n        if (!ctype_upper($key)) {\n            $allUpper = false;\n        }\n    }\n    return $allLower || $allUpper;\n}\n",
            "/**\n * @param {int} $n\n * @returns {array<int>}\n */\nfunction countUpTo ($n) {\n    $primes = [];\n    for ($num = 2; $num < $n; $num++) {\n        $isPrime = true;\n        foreach ($primes as $p) {\n            if ($num % $p == 0) {\n                $isPrime = false;\n                break;\n            }\n        }\n        if ($isPrime) {\n            $primes[] = $num;\n        }\n    }\n    return $primes;\n}\n",
            "/**\n * @param {int} $a\n * @param {int} $b\n * @returns {int}\n */\nfunction multiply ($a, $b) {\n    return (abs($a) % 10) * (abs($b) % 10);\n}\n",
            "/**\n * @param {string} $s\n * @returns {int}\n */\nfunction countUpper ($s) {\n    $vowels = \"AEIOU\";\n    $count = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if ($i % 2 == 0 && strpos($vowels, $s[$i]) !== false) {\n            $count++;\n        }\n    }\n    return $count;\n}\n",
            "/**\n * @param {string} $value\n * @returns {int}\n */\nfunction closestInteger($value) {\n    $num = floatval($value);\n    if ($num >= 0) {\n        return intval($num + 0.5);\n    } else {\n        return intval($num - 0.5);\n    }\n}\n",
            "/**\n * @param {int} $n\n * @returns {array<int>}\n */\nfunction makeAPile ($n) {\n    $pile = [];\n    for ($i = 0; $i < $n; $i++) {\n        $pile[] = $n + 2 * $i;\n    }\n    return $pile;\n}\n",
            "/**\n * @param {string} $s\n * @returns {array<string>}\n */\nfunction wordsString ($s) {\n    return array_filter(preg_split('/,|\\\\s+/', $s), function($w) {\n        return strlen($w) > 0;\n    });\n}\n",
            "/**\n * @param {int} $x\n * @param {int} $y\n * @returns {int}\n */\nfunction chooseNum ($x, $y) {\n    if ($x > $y) {\n        return -1;\n    }\n    if ($y % 2 == 0) {\n        return $y;\n    }\n    return $x != $y ? $y - 1 : -1;\n}\n",
            "/**\n * @param {int} $n\n * @param {int} $m\n * @returns {string | null}\n */\nfunction roundedAvg ($n, $m) {\n    if ($n > $m) {\n        return null;\n    }\n    $r_avg = intval(($m + $n) / 2.0 + 0.5);\n    return decbin($r_avg);\n}\n",
            "/**\n * @param {array<int>} $x\n * @returns {array<int>}\n */\nfunction uniqueDigits ($x) {\n    return array_values(array_filter($x, function($num) {\n        $digits = str_split((string)$num);\n        foreach ($digits as $digit) {\n            if (ord($digit) % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }));\n}\n",
            "/**\n * @param {array<int>} $arr\n * @returns {array<string>}\n */\nfunction byLength ($arr) {\n    $digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    $sorted_arr = array_filter($arr, function($x) {\n        return 1 <= $x && $x <= 9;\n    });\n    rsort($sorted_arr);\n    $result = array_map(function($x) use ($digit_names) {\n        return $digit_names[$x - 1];\n    }, $sorted_arr);\n    return $result;\n}\n",
            "/**\n * @param {int} $n\n * @returns {array<int>}\n */\nfunction f ($n) {\n    $nums = range(1, $n);\n    $result = array();\n    foreach ($nums as $i => $value) {\n        if (($i + 1) % 2 != 0) {\n            $result[] = array_sum(array_slice($nums, 0, $i + 1));\n        } else {\n            $product = 1;\n            foreach (array_slice($nums, 0, $i + 1) as $num) {\n                $product *= $num;\n            }\n            $result[] = $product;\n        }\n    }\n    return $result;\n}\n",
            "function evenOddPalindrome ($n) {\n    $cnt = [0, 0];\n    for ($i = 1; $i <= $n; $i++) {\n        if (strrev((string)$i) === (string)$i) {\n            $cnt[$i % 2]++;\n        }\n    }\n    return $cnt;\n}\n",
            "/**\n * @param {array<int>} $arr\n * @returns {int}\n */\nfunction countNums ($arr) {\n    function digitsSum($n) {\n        $n_str = strval($n);\n        if ($n >= 0) {\n            return array_sum(array_map('intval', str_split($n_str)));\n        } else {\n            return intval(substr($n_str, 0, 2)) * 2 + digitsSum(abs($n));\n        }\n    }\n\n    $count = 0;\n    foreach ($arr as $n) {\n        if (digitsSum($n) > 0) {\n            $count++;\n        }\n    }\n    return $count;\n}\n",
            "/**\n * @param {array<int>} $arr\n * @returns {bool}\n */\nfunction moveOneBall ($arr) {\n    if (count($arr) == 0) {\n        return true;\n    }\n    $sorted_arr = $arr;\n    sort($sorted_arr);\n    for ($i = 0; $i < count($arr); $i++) {\n        if ($i === 0) {\n            if (array_slice($arr, $i) === array_slice($sorted_arr, -$i)) {\n                return true;\n            }\n        } elseif ($i === count($arr) - 1) {\n            if (array_slice($arr, 0, $i + 1) === array_slice($sorted_arr, 0, $i + 1)) {\n                return true;\n            }\n        } else {\n            if (array_slice($arr, $i) === array_slice($sorted_arr, -$i) && array_slice($arr, 0, $i) === array_slice($sorted_arr, 0, -$i)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param {array<int>} $lst1\n * @param {array<int>} $lst2\n * @returns {string}\n */\nfunction canExchange($lst1, $lst2) {\n    $odd_cnt = 0;\n    foreach ($lst1 as $num) {\n        if ($num % 2 != 0) {\n            $odd_cnt++;\n        }\n    }\n\n    $even_cnt = 0;\n    foreach ($lst2 as $num) {\n        if ($num % 2 == 0) {\n            $even_cnt++;\n        }\n    }\n\n    return $even_cnt >= $odd_cnt ? \"YES\" : \"NO\";\n}\n",
            "/**\n * @param {string} $test\n * @returns {array<string, int>}\n */\nfunction histogram ($test) {\n    $freq = [];\n    $words = array_filter(explode(\" \", $test), function($w) {\n        return strlen($w) > 0;\n    });\n    foreach ($words as $w) {\n        if (!array_key_exists($w, $freq)) {\n            $freq[$w] = 0;\n        }\n        $freq[$w]++;\n    }\n    $result = [];\n    if (count($freq) > 0) {\n        $max_freq = max($freq);\n        foreach ($freq as $k => $v) {\n            if ($v == $max_freq) {\n                $result[$k] = $v;\n            }\n        }\n    }\n    return $result;\n}\n",
            "/**\n * @param {string} $s\n * @param {string} $c\n * @returns {array<string>}\n */\nfunction reverseDelete ($s, $c) {\n    $s1 = str_replace(str_split($c), '', $s);\n    return [$s1, isPalindrome($s1) ? \"yes\" : \"no\"];\n}\n\nfunction isPalindrome($s) {\n    return $s === strrev($s);\n}\n",
            "/**\n * @param {array<string>} $lst\n * @returns {array<string>}\n */\nfunction oddCount ($lst) {\n    $result = [];\n    foreach ($lst as $num) {\n        $n = 0;\n        for ($i = 0; $i < strlen($num); $i++) {\n            if (ord($num[$i]) % 2 == 1) {\n                $n++;\n            }\n        }\n        $rs = \"the number of odd elements in the string i of the input.\";\n        $result[] = str_replace(\"i\", strval($n), $rs);\n    }\n    return $result;\n}\n",
            "```php /**\n * @param {array<int>} $nums\n * @returns {int}\n */\nfunction minSubArraySum($nums) {\n    $min_sum = 0;\n    $cur_sum = 0;\n    foreach ($nums as $n) {\n        $cur_sum = min($cur_sum + $n, 0);\n        $min_sum = min($cur_sum, $min_sum);\n    }\n    if ($min_sum == 0) {\n        $min_sum = min($nums);\n    }\n    return $min_sum;\n}\n```",
            "/**\n * @param {array<array<int>>} $grid\n * @param {int} $capacity\n * @returns {int}\n */\nfunction maxFill ($grid, $capacity) {\n    $total = 0;\n    foreach ($grid as $arr) {\n        $total += ceil(array_sum($arr) / $capacity);\n    }\n    return $total;\n}\n",
            "/**\n * @param {array<int>} $arr\n * @returns {array<int>}\n */\nfunction sortArray ($arr) {\n    usort($arr, function($a, $b) {\n        $countA = substr_count(decbin($a), '1');\n        $countB = substr_count(decbin($b), '1');\n        if ($countA === $countB) {\n            return $a <=> $b;\n        }\n        return $countA <=> $countB;\n    });\n    return $arr;\n}\n",
            "function selectWords ($s, $n) {\n    $consonants = \"bcdfghjklmnpqrstvwxyz\";\n    $words = array_filter(explode(\" \", $s), function($w) { return strlen($w) > 0; });\n    return array_filter($words, function($w) use ($consonants, $n) {\n        return count(array_filter(str_split(strtolower($w)), function($c) use ($consonants) {\n            return strpos($consonants, $c) !== false;\n        })) == $n;\n    });\n}\n",
            "/**\n * @param {string} $word\n * @returns {string}\n */\nfunction getClosestVowel($word) {\n    $vowels = \"aeiouAEIOU\";\n    for ($i = strlen($word) - 2; $i > 0; $i--) {\n        if (strpos($vowels, $word[$i]) !== false && strpos($vowels, $word[$i - 1]) === false && strpos($vowels, $word[$i + 1]) === false) {\n            return $word[$i];\n        }\n    }\n    return \"\";\n}\n",
            "/**\n * @param {array<string>} $lst\n * @returns {string}\n */\nfunction matchParens ($lst) {\n    function check($s) {\n        $depth = 0;\n        for ($i = 0; $i < strlen($s); $i++) {\n            $ch = $s[$i];\n            if ($ch === \"(\") {\n                $depth += 1;\n            } else {\n                $depth -= 1;\n            }\n            if ($depth < 0) {\n                return false;\n            }\n        }\n        return $depth === 0;\n    }\n\n    $s1 = $lst[0] . $lst[1];\n    $s2 = $lst[1] . $lst[0];\n    return check($s1) || check($s2) ? \"Yes\" : \"No\";\n}\n",
            "/**\n * @param {array<int>} $arr\n * @param {int} $k\n * @returns {array<int>}\n */\nfunction maximum ($arr, $k) {\n    if ($k == 0) {\n        return [];\n    }\n    rsort($arr);\n    return array_slice($arr, 0, $k);\n}\n",
            "/**\n * @param {array<int>} $lst\n * @returns {int}\n */\nfunction solution($lst) {\n    $sum = 0;\n    foreach ($lst as $i => $x) {\n        if ($i % 2 == 0 && $x % 2 != 0) {\n            $sum += $x;\n        }\n    }\n    return $sum;\n}\n",
            "/**\n * @param {array<int>} $arr\n * @param {int} $k\n * @returns {int}\n */\nfunction addElements ($arr, $k) {\n    $sum = 0;\n    for ($i = 0; $i < min($k, count($arr)); $i++) {\n        if (strlen((string)$arr[$i]) <= 2) {\n            $sum += $arr[$i];\n        }\n    }\n    return $sum;\n}\n",
            "/**\n * @param {int} $n\n * @returns {array<int>}\n */\nfunction getOddCollatz($n) {\n    $collatz = [1];\n    while ($n != 1) {\n        if ($n % 2 != 0) {\n            $collatz[] = $n;\n            $n = 3 * $n + 1;\n        } else {\n            $n = intdiv($n, 2);\n        }\n    }\n    sort($collatz);\n    return $collatz;\n}\n",
            "/**\n * @param {string} $date\n * @returns {bool}\n */\nfunction validDate ($date) {\n    if (strlen($date) !== 10 || $date[2] !== '-' || $date[5] !== '-') {\n        return false;\n    }\n    $m = intval(substr($date, 0, 2));\n    $d = intval(substr($date, 3, 2));\n    if (in_array($m, [1, 3, 5, 7, 8, 10, 12]) && $d >= 1 && $d <= 31) {\n        return true;\n    }\n    if (in_array($m, [4, 6, 9, 11]) && $d >= 1 && $d <= 30) {\n        return true;\n    }\n    if ($m == 2 && $d >= 1 && $d <= 29) {\n        return true;\n    }\n    return false;\n}\n",
            "/**\n * @param {string} $txt\n * @returns {array<string>}\n */\nfunction splitWords ($txt) {\n    if (strpos($txt, ' ') !== false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n        return explode(',', $txt);\n    } else {\n        $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            $c = $txt[$i];\n            if (ctype_lower($c) && ord($c) % 2 == 0) {\n                $count++;\n            }\n        }\n        return [strval($count)];\n    }\n}\n",
            "/**\n * @param {array<int>} $lst\n * @returns {bool}\n */\nfunction isSorted($lst) {\n    if (count($lst) === 0) {\n        return true;\n    }\n\n    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i - 1] > $lst[$i]) {\n            return false;\n        }\n    }\n\n    $freq = array_count_values($lst);\n    foreach ($freq as $count) {\n        if ($count > 2) {\n            return false;\n        }\n    }\n\n    return true;\n}\n",
            "/**\n * @param {array<int>} $interval1\n * @param {array<int>} $interval2\n * @returns {string}\n */\nfunction intersection ($interval1, $interval2) {\n    function is_prime($n) {\n        if ($n < 2) {\n            return false;\n        }\n        for ($i = 2; $i <= floor(sqrt($n)); $i++) {\n            if ($n % $i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    $l = max($interval1[0], $interval2[0]);\n    $r = min($interval1[1], $interval2[1]);\n    $length = $r - $l;\n    return ($length > 0 && is_prime($length)) ? \"YES\" : \"NO\";\n}\n",
            "/**\n * @param {array<int>} $arr\n * @returns {int | null}\n */\nfunction prodSigns ($arr) {\n    if (empty($arr)) {\n        return null;\n    }\n    if (in_array(0, $arr)) {\n        return 0;\n    }\n    $neg_count = count(array_filter($arr, function($n) {\n        return $n < 0;\n    }));\n    $sign = ($neg_count % 2 == 1) ? -1 : 1;\n    return $sign * array_sum(array_map('abs', $arr));\n}\n",
            "/**\n * @param {array<array<int>>} $grid\n * @param {int} $k\n * @returns {array<int>}\n */\nfunction minPath ($grid, $k) {\n    $n = count($grid);\n    $min_val = $n * $n + 1;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            if ($grid[$i][$j] == 1) {\n                $temp = [];\n                if ($i != 0) {\n                    $temp[] = $grid[$i - 1][$j];\n                }\n                if ($j != 0) {\n                    $temp[] = $grid[$i][$j - 1];\n                }\n                if ($i != $n - 1) {\n                    $temp[] = $grid[$i + 1][$j];\n                }\n                if ($j != $n - 1) {\n                    $temp[] = $grid[$i][$j + 1];\n                }\n                $min_val = min($temp);\n            }\n        }\n    }\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $result[] = ($i % 2 == 0 ? 1 : $min_val);\n    }\n    return $result;\n}\n",
            "/**\n * @param {int} $n\n * @returns {array<int>}\n */\nfunction tri ($n) {\n    if ($n == 0) {\n        return array(1);\n    }\n    $seq = array(1, 3);\n    for ($i = 2; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $seq[] = $i / 2 + 1;\n        } else {\n            $seq[] = $seq[$i - 1] + $seq[$i - 2] + ($i + 3) / 2;\n        }\n    }\n    return $seq;\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction digits ($n) {\n    $odds = array_filter(str_split((string)$n), function($d) {\n        return ((int)$d % 2) == 1;\n    });\n    if (count($odds) > 0) {\n        return array_product($odds);\n    } else {\n        return 0;\n    }\n}\n",
            "/**\n * @param {string} $s\n * @returns {bool}\n */\nfunction isNested($s) {\n    $open_idx = [];\n    $close_idx = [];\n    \n    for ($i = 0; $i < strlen($s); $i++) {\n        if ($s[$i] === '[') {\n            array_push($open_idx, $i);\n        } elseif ($s[$i] === ']') {\n            array_push($close_idx, $i);\n        }\n    }\n    \n    $close_idx = array_reverse($close_idx);\n    $cnt = 0;\n    $i = 0;\n    $l = count($close_idx);\n    \n    foreach ($open_idx as $idx) {\n        if ($i < $l && $idx < $close_idx[$i]) {\n            $cnt += 1;\n            $i += 1;\n        }\n    }\n    \n    return $cnt >= 2;\n}\n",
            "function sumSquares ($lst) {\n    return array_sum(array_map(function($n) {\n        return pow(ceil($n), 2);\n    }, $lst));\n}\n",
            "/**\n * @param {string} $txt\n * @returns {bool}\n */\nfunction checkIfLastCharIsALetter ($txt) {\n    if (empty($txt)) {\n        return false;\n    }\n    $last = substr($txt, strrpos($txt, ' ') + 1);\n    return strlen($last) === 1 && ctype_alpha($last[0]);\n}\n",
            "/**\n * @param {array<int>} $arr\n * @return {int}\n */\nfunction canArrange($arr) {\n    if (count($arr) <= 1) {\n        return -1;\n    }\n    $idx = array();\n    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] < $arr[$i - 1]) {\n            $idx[] = $i;\n        }\n    }\n    return !empty($idx) ? max($idx) : -1;\n}\n",
            "/**\n * @param {array<int>} $lst\n * @returns {array<int | null>}\n */\nfunction largestSmallestIntegers ($lst) {\n    $neg = array_filter($lst, function($i) { return $i < 0; });\n    $pos = array_filter($lst, function($i) { return $i > 0; });\n    $max_neg = !empty($neg) ? max($neg) : null;\n    $min_pos = !empty($pos) ? min($pos) : null;\n    return [$max_neg, $min_pos];\n}\n",
            "/**\n * @param {mixed} $a\n * @param {mixed} $b\n * @returns {float | null}\n */\nfunction compareOne ($a, $b) {\n    function any_to_real($o) {\n        if (is_string($o)) {\n            return floatval(str_replace(',', '.', $o));\n        } elseif (is_int($o)) {\n            return floatval($o);\n        } elseif (is_float($o)) {\n            return $o;\n        }\n        throw new RuntimeException(\"Type Error\");\n    }\n\n    $a1 = any_to_real($a);\n    $b1 = any_to_real($b);\n\n    if ($a1 == $b1) {\n        return null;\n    } elseif ($a1 > $b1) {\n        return $a1;\n    } else {\n        return $b1;\n    }\n}\n",
            "/**\n * @param {int} $n\n * @returns {bool}\n */\nfunction isEqualToSumEven ($n) {\n    return $n % 2 == 0 && $n >= 8;\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction specialFactorial ($n) {\n    $fact = 1;\n    $result = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $fact *= $i;\n        $result *= $fact;\n    }\n    return $result;\n}\n",
            "/**\n * @param {string} $txt\n * @returns {string}\n */\nfunction fixSpaces($txt) {\n    return preg_replace('/\\s{3,}/', '-', str_replace(' ', '_', $txt));\n}\n",
            "/**\n * @param string $fileName\n * @return string\n */\nfunction fileNameCheck($fileName) {\n    $suf = [\"txt\", \"exe\", \"dll\"];\n    $lst = explode(\".\", $fileName);\n    if (count($lst) != 2 || !in_array($lst[1], $suf) || strlen($lst[0]) == 0 || !ctype_alpha($lst[0][0]) || preg_match_all('/\\d/', $lst[0]) > 3) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n",
            "/**\n * @param {array<int>} $lst\n * @returns {int}\n */\nfunction sumSquares ($lst) {\n    $result = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n            $result += pow($lst[$i], 2);\n        } elseif ($i % 4 == 0) {\n            $result += pow($lst[$i], 3);\n        } else {\n            $result += $lst[$i];\n        }\n    }\n    return $result;\n}\n",
            "/**\n * @param {string} $sentence\n * @returns {string}\n */\nfunction wordsInSentence ($sentence) {\n    $words = explode(\" \", $sentence);\n    $primeWords = array_filter($words, function($word) {\n        $length = strlen($word);\n        if ($length < 2) {\n            return false;\n        }\n        for ($i = 2; $i <= sqrt($length); $i++) {\n            if ($length % $i == 0) {\n                return false;\n            }\n        }\n        return true;\n    });\n    return implode(\" \", $primeWords);\n}\n",
            "/**\n * @param {string} $x\n * @param {string} $n\n * @returns {bool}\n */\nfunction simplify ($x, $n) {\n    $xs = explode(\"/\", $x);\n    $ns = explode(\"/\", $n);\n    $num = (int)$xs[0] * (int)$ns[0];\n    $den = (int)$xs[1] * (int)$ns[1];\n    return $num % $den == 0;\n}\n",
            "/**\n * @param {array<int>} $nums\n * @returns {array<int>}\n */\nfunction orderByPoints ($nums) {\n    usort($nums, function($a, $b) {\n        return digitsSum($a) <=> digitsSum($b);\n    });\n    return $nums;\n}\n\nfunction digitsSum($n) {\n    $n_str = strval($n);\n    if ($n >= 0) {\n        return array_sum(str_split($n_str));\n    } else {\n        return intval($n_str[0] . $n_str[1]) * 2 + digitsSum(abs($n));\n    }\n}\n",
            "/**\n * @param {array<int>} $nums\n * @returns {int}\n */\nfunction specialFilter ($nums) {\n    $odds = \"13579\";\n    $count = 0;\n    foreach ($nums as $n) {\n        if ($n > 10 && $n % 2 == 1 && strpos($odds, strval($n)[0]) !== false) {\n            $count++;\n        }\n    }\n    return $count;\n}\n",
            "/**\n * @param {int} $n\n * @returns {int}\n */\nfunction getMaxTriples($n) {\n    $c = [0, 0, 0];\n    for ($i = 1; $i <= $n; $i++) {\n        $a = $i * $i - $i + 1;\n        $c[$a % 3]++;\n    }\n    return $c[0] * $c[1] * $c[2] + (($c[0] * ($c[0] - 1) * ($c[0] - 2) + $c[1] * ($c[1] - 1) * ($c[1] - 2) + $c[2] * ($c[2] - 1) * ($c[2] - 2)) / 6);\n}\n",
            "/**\n * @param {string} $planet1\n * @param {string} $planet2\n * @returns {array<string>}\n */\nfunction bf ($planet1, $planet2) {\n    $names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if (!in_array($planet1, $names) || !in_array($planet2, $names)) {\n        return [];\n    }\n    $l = array_search($planet1, $names);\n    $r = array_search($planet2, $names);\n    if ($l > $r) {\n        list($l, $r) = [$r, $l];\n    }\n    if ($l == $r) {\n        return [];\n    }\n    return array_slice($names, $l + 1, $r - $l - 1);\n}\n",
            "/**\n * @param {array<string>} $lst\n * @returns {array<string>}\n */\nfunction sortedListSum ($lst) {\n    $result = array_filter($lst, function($s) {\n        return strlen($s) % 2 == 0;\n    });\n    \n    usort($result, function($a, $b) {\n        $lengthComparison = strlen($a) - strlen($b);\n        if ($lengthComparison !== 0) {\n            return $lengthComparison;\n        }\n        return strcmp($a, $b);\n    });\n    \n    return $result;\n}\n",
            "/**\n * @param {int} $n\n * @param {int} $x\n * @param {int} $y\n * @returns {int}\n */\nfunction xOrY ($n, $x, $y) {\n    if ($n < 2) {\n        return $y;\n    }\n    for ($i = 2; $i <= floor(sqrt($n)); $i++) {\n        if ($n % $i == 0) {\n            return $y;\n        }\n    }\n    return $x;\n}\n",
            "/**\n * @param {array<float>} $lst\n * @returns {int}\n */\nfunction doubleTheDifference ($lst) {\n    $sum = 0;\n    foreach ($lst as $n) {\n        if ($n >= 0 && $n % 2 == 1) {\n            $sum += $n * $n;\n        }\n    }\n    return $sum;\n}\n",
            "/**\n * @param {array<int>} $game\n * @param {array<int>} $guess\n * @returns {array<int>}\n */\nfunction compare($game, $guess) {\n    $result = [];\n    for ($i = 0; $i < count($game); $i++) {\n        $result[] = abs($game[$i] - $guess[$i]);\n    }\n    return $result;\n}\n",
            "/**\n * @param {string} $className\n * @param {array<string>} $extensions\n * @returns {string}\n */\nfunction strongestExtension ($className, $extensions) {\n    $max_s = -PHP_INT_MAX;\n    $max_ext = \"\";\n    foreach ($extensions as $ext) {\n        $upper = preg_match_all('/[A-Z]/', $ext);\n        $lower = preg_match_all('/[a-z]/', $ext);\n        $s = $upper - $lower;\n        if ($s > $max_s) {\n            $max_s = $s;\n            $max_ext = $ext;\n        }\n    }\n    return $className . \".\" . $max_ext;\n}\n",
            "/**\n * @param {string} $a\n * @param {string} $b\n * @returns {bool}\n */\nfunction cycpatternCheck ($a, $b) {\n    if (strlen($a) < strlen($b)) {\n        return false;\n    }\n    for ($i = 0; $i < strlen($b); $i++) {\n        if (strpos($a, substr($b, $i) . substr($b, 0, $i)) !== false) {\n            return true;\n        }\n    }\n    return false;\n}\n",
            "/**\n * @param {int} $num\n * @returns {array<int>}\n */\nfunction evenOddCount($num) {\n    $ds = strval(abs($num));\n    $even = 0;\n    \n    for ($i = 0; $i < strlen($ds); $i++) {\n        if (intval($ds[$i]) % 2 == 0) {\n            $even++;\n        }\n    }\n    \n    return [$even, strlen($ds) - $even];\n}\n",
            "/**\n * @param {int} $num\n * @returns {string}\n */\nfunction intToMiniRoman($num) {\n    $values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    $numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    $res = [];\n    for ($i = 0; $i < count($values); $i++) {\n        while ($num >= $values[$i]) {\n            $res[] = $numerals[$i];\n            $num -= $values[$i];\n        }\n    }\n    return implode(\"\", $res);\n}\n",
            "/**\n * @param {int} $a\n * @param {int} $b\n * @param {int} $c\n * @returns {bool}\n */\nfunction rightAngleTriangle($a, $b, $c) {\n    $s = [$a, $b, $c];\n    sort($s);\n    return ($s[0] ** 2) + ($s[1] ** 2) == ($s[2] ** 2);\n}\n",
            "/**\n * @param {array<string>} $words\n * @returns {string}\n */\nfunction findMax ($words) {\n    $max_cnt = 0;\n    $max_w = \"\";\n    foreach ($words as $w) {\n        $cnt = count(array_unique(str_split($w)));\n        if ($cnt > $max_cnt) {\n            $max_cnt = $cnt;\n            $max_w = $w;\n        } elseif ($cnt == $max_cnt) {\n            $max_w = strcmp($max_w, $w) < 0 ? $max_w : $w;\n        }\n    }\n    return $max_w;\n}\n",
            "function eat($num, $need, $remaining) {\n    if ($need <= $remaining) {\n        return [$num + $need, $remaining - $need];\n    } else {\n        return [$num + $remaining, 0];\n    }\n}\n",
            "function doAlgebra($operators, $operands) {\n    $ops = $operators;\n    $nums = $operands;\n    $i = count($ops) - 1;\n    while ($i >= 0) {\n        if ($ops[$i] == \"**\") {\n            $nums[$i] = pow($nums[$i], $nums[$i + 1]);\n            array_splice($nums, $i + 1, 1);\n            array_splice($ops, $i, 1);\n        }\n        $i -= 1;\n    }\n    $i = 0;\n    while ($i < count($ops)) {\n        if ($ops[$i] == \"*\") {\n            $nums[$i] = $nums[$i] * $nums[$i + 1];\n            array_splice($nums, $i + 1, 1);\n            array_splice($ops, $i, 1);\n            $i -= 1;\n        } elseif ($ops[$i] == \"//\") {\n            $nums[$i] = intdiv($nums[$i], $nums[$i + 1]);\n            array_splice($nums, $i + 1, 1);\n            array_splice($ops, $i, 1);\n            $i -= 1;\n        }\n        $i += 1;\n    }\n    $i = 0;\n    while ($i < count($ops)) {\n        if ($ops[$i] == \"+\") {\n            $nums[$i] = $nums[$i] + $nums[$i + 1];\n            array_splice($nums, $i + 1, 1);\n            array_splice($ops, $i, 1);\n            $i -= 1;\n        } elseif ($ops[$i] == \"-\") {\n            $nums[$i] = $nums[$i] - $nums[$i + 1];\n            array_splice($nums, $i + 1, 1);\n            array_splice($ops, $i, 1);\n            $i -= 1;\n        }\n        $i += 1;\n    }\n    return $nums[0];\n}\n",
            "/**\n * @param {string} $s\n * @returns {string}\n */\nfunction solve ($s) {\n    if (!preg_match('/[a-zA-Z]/', $s)) {\n        return strrev($s);\n    }\n    $result = [];\n    for ($i = 0; $i < strlen($s); $i++) {\n        $ch = $s[$i];\n        if (!ctype_alpha($ch)) {\n            $result[] = $ch;\n        } elseif (ctype_upper($ch)) {\n            $result[] = strtolower($ch);\n        } elseif (ctype_lower($ch)) {\n            $result[] = strtoupper($ch);\n        }\n    }\n    return implode('', $result);\n}\n",
            "/**\n * @param {string} $txt\n * @returns {string | null}\n */\nfunction stringToMd5($txt) {\n    if (!$txt) {\n        return null;\n    }\n    $md5_hash = md5($txt);\n    return $md5_hash;\n}\n",
            "/**\n * @param {int} $a\n * @param {int} $b\n * @returns {array<int>}\n */\nfunction generateIntegers($a, $b) {\n    $lower = max(2, min($a, $b));\n    $upper = min(8, max($a, $b));\n    $result = [];\n    for ($i = $lower; $i <= $upper; $i++) {\n        if ($i % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n"
        ]
    }
}