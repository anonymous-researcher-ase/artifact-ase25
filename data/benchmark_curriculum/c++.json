[
  {
    "id": 1,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid reverseLinesInFile(const std::string& inputFile, const std::string& outputFile) {\n    std::ifstream in(inputFile);\n    std::ofstream out(outputFile);\n    if (!in || !out) {\n        std::cerr << \"Error opening file.\" << std::endl;\n        return;\n    }\n    \n    std::string line;\n    while (std::getline(in, line)) {\n        std::reverse(line.begin(), line.end());\n        out << line << std::endl;\n    }\n    \n    in.close();\n    out.close();\n}\n```",
    "summary": "Reverses the content of each line in an input file and writes the result to an output file."
  },
  {
    "id": 2,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename, std::ios::out | std::ios::trunc);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, overwriting any existing content."
  },
  {
    "id": 3,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings, returning the vector."
  },
  {
    "id": 4,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string &filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings."
  },
  {
    "id": 5,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a given file into a vector of strings."
  },
  {
    "id": 6,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid copyFileContents(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n\n    if (sourceFile && destinationFile) {\n        destinationFile << sourceFile.rdbuf();\n    }\n}\n```",
    "summary": "Copies the contents of a source file to a destination file using binary mode."
  },
  {
    "id": 7,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    \n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 8,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by `filePath` into a vector of strings."
  },
  {
    "id": 9,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    \n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them in a vector of strings."
  },
  {
    "id": 10,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file and returns true if successful, false otherwise."
  },
  {
    "id": 11,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a given file into a vector of strings."
  },
  {
    "id": 12,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return true;\n}\n```",
    "summary": "Writes a string to a specified file, returning true on success and false on failure."
  },
  {
    "id": 13,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    }\n}\n```",
    "summary": "Writes a given string to a file specified by the filename."
  },
  {
    "id": 14,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, returning true if successful."
  },
  {
    "id": 15,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeDataToFile(const std::string& filename, const std::string& data) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << data;\n        file.close();\n    } else {\n        std::cerr << \"Unable to open file for writing: \" << filename << std::endl;\n    }\n}\n```",
    "summary": "Writes the given data to a specified file, creating the file if it does not exist."
  },
  {
    "id": 16,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 17,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 18,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    if (!sourceFile) return false;\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n    if (!destinationFile) return false;\n    \n    destinationFile << sourceFile.rdbuf();\n    return sourceFile.good() && destinationFile.good();\n}\n```",
    "summary": "Copies the contents of a source file to a destination file, returning true if successful."
  },
  {
    "id": 19,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the provided content to a file with the given filename, returning true if successful."
  },
  {
    "id": 20,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <iostream>\n\nbool copyFile(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream src(sourcePath, std::ios::binary);\n    std::ofstream dest(destinationPath, std::ios::binary);\n\n    if (!src.is_open() || !dest.is_open()) {\n        return false;\n    }\n\n    dest << src.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the contents of a source file to a destination file using binary mode, returning false if any file cannot be opened."
  },
  {
    "id": 21,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 22,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 23,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes a string to a specified file, returning true if successful and false otherwise."
  },
  {
    "id": 24,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourceFile, const std::string& destinationFile) {\n    std::ifstream inFile(sourceFile, std::ios::binary);\n    std::ofstream outFile(destinationFile, std::ios::binary);\n    if (!inFile || !outFile) {\n        return false;\n    }\n    outFile << inFile.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the contents of a source file to a destination file and returns true if successful, false otherwise."
  },
  {
    "id": 25,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the given content to a specified file, returning true on success, or false if the file cannot be opened."
  },
  {
    "id": 26,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 27,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 28,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFile(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    if (!sourceFile) {\n        return false;\n    }\n\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n    if (!destinationFile) {\n        return false;\n    }\n    \n    destinationFile << sourceFile.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the contents of a file from a source path to a destination path in binary mode."
  },
  {
    "id": 29,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string &fileName, const std::string &content) {\n    std::ofstream outFile(fileName, std::ios::out | std::ios::trunc);\n    if (!outFile) {\n        std::cerr << \"Error opening file for writing: \" << fileName << std::endl;\n        return;\n    }\n    outFile << content;\n    outFile.close();\n}\n```",
    "summary": "Writes the specified content to a file, overwriting its existing content."
  },
  {
    "id": 30,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string &filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads a file line by line and returns its contents as a vector of strings."
  },
  {
    "id": 31,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool appendLineToFile(const std::string& filePath, const std::string& line) {\n    std::ofstream file(filePath, std::ios::app);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << line << '\\n';\n    return true;\n}\n```",
    "summary": "Appends a line of text to a specified file, creating the file if it does not exist."
  },
  {
    "id": 32,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename, std::ios::out | std::ios::trunc);\n    if (!outFile) {\n        return false; // Failed to open file\n    }\n    outFile << content;\n    return outFile.good(); // Return true if write was successful\n}\n```",
    "summary": "Writes a given string to a specified file, overwriting any existing content, and returns true if successful."
  },
  {
    "id": 33,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    \n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 34,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid reverseFileLines(const std::string &inputFilePath, const std::string &outputFilePath) {\n    std::ifstream inputFile(inputFilePath);\n    std::ofstream outputFile(outputFilePath);\n    if (!inputFile.is_open() || !outputFile.is_open()) {\n        std::cerr << \"Error opening file(s).\" << std::endl;\n        return;\n    }\n\n    std::string line;\n    std::string reversedContent;\n    while (std::getline(inputFile, line)) {\n        std::reverse(line.begin(), line.end());\n        reversedContent = line + \"\\n\" + reversedContent;\n    }\n\n    outputFile << reversedContent;\n\n    inputFile.close();\n    outputFile.close();\n}\n```",
    "summary": "This function reads lines from an input file, reverses each line, and writes the lines in reverse order to an output file."
  },
  {
    "id": 35,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool appendToFile(const std::string &filePath, const std::string &text) {\n    std::ofstream outFile(filePath, std::ios_base::app);\n    if (!outFile) {\n        return false;  // File could not be opened\n    }\n    outFile << text << std::endl;\n    return true;  // Text successfully appended\n}\n```",
    "summary": "Appends a given string to a specified file, returning true if successful or false if the file cannot be opened."
  },
  {
    "id": 36,
    "code": "```cpp\n#include <fstream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> readLinesFromFile(const std::string &filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 37,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads a file from the specified path and returns its contents as a vector of strings, each representing a line."
  },
  {
    "id": 38,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n\n    if (!file.is_open()) {\n        return lines; // Return empty vector if file cannot be opened\n    }\n\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n\n    file.close();\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings, returning an empty vector if the file cannot be opened."
  },
  {
    "id": 39,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    \n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads all lines from a file and returns them as a vector of strings."
  },
  {
    "id": 40,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file and returns true if successful, otherwise returns false."
  },
  {
    "id": 41,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 42,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string &filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by `filePath` and returns them as a vector of strings."
  },
  {
    "id": 43,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 44,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    \n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads all lines from a file and returns them as a vector of strings."
  },
  {
    "id": 45,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 46,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 47,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 48,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeLineToFile(const std::string& filePath, const std::string& lineContent) {\n    std::ofstream file(filePath, std::ios::app);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << lineContent << '\\n';\n    return true;\n}\n```",
    "summary": "Appends a single line of text to a specified file and returns true if successful, false otherwise."
  },
  {
    "id": 49,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 50,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads a text file and returns its content as a vector of strings, where each string represents a line from the file."
  },
  {
    "id": 51,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 52,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string &filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 53,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> ReadLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 54,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToTextFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return true;\n}\n```",
    "summary": "Writes the given content to a text file specified by the filename, returning true on success and false on failure."
  },
  {
    "id": 55,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes content to a specified file and returns true if successful, false otherwise."
  },
  {
    "id": 56,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    }\n}\n```",
    "summary": "Writes the specified content to a file at the given file path."
  },
  {
    "id": 57,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings."
  },
  {
    "id": 58,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 59,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings."
  },
  {
    "id": 60,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n    \n    if (!sourceFile || !destinationFile) {\n        return false;\n    }\n\n    destinationFile << sourceFile.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the contents of a source file to a destination file using binary mode."
  },
  {
    "id": 61,
    "code": "```cpp\n#include <fstream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n\n    if (!file.is_open()) {\n        return lines; // Return empty vector if file couldn't be opened\n    }\n\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n\n    file.close();\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 62,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename, std::ios::out | std::ios::trunc);\n    if (!outFile) {\n        return false; // Return false if the file could not be opened\n    }\n    outFile << content;\n    return outFile.good(); // Return true if writing was successful\n}\n```",
    "summary": "Writes a given string to a specified file, overwriting its contents, and returns a boolean indicating success or failure."
  },
  {
    "id": 63,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 64,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    } else {\n        std::cerr << \"Unable to open file for writing: \" << filePath << std::endl;\n    }\n}\n```",
    "summary": "Writes the specified content to a file at the given file path, handling errors if the file cannot be opened."
  },
  {
    "id": 65,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 66,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes a given string to a file, returning true on success and false if the file could not be opened."
  },
  {
    "id": 67,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile.is_open()) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes given content to a specified file and returns true if successful, false if the file cannot be opened."
  },
  {
    "id": 68,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings, returning the vector."
  },
  {
    "id": 69,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContent(const std::string &sourcePath, const std::string &destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    if (!sourceFile.is_open()) {\n        return false; // Unable to open source file\n    }\n\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n    if (!destinationFile.is_open()) {\n        return false; // Unable to open destination file\n    }\n\n    destinationFile << sourceFile.rdbuf(); // Copy content\n    return sourceFile.good() && destinationFile.good();\n}\n```",
    "summary": "Copies the content of a source file to a destination file and returns true if successful."
  },
  {
    "id": 70,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings and returns it."
  },
  {
    "id": 71,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings, returning the vector."
  },
  {
    "id": 72,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "This function writes a given string to a specified file, returning true if successful and false if the file cannot be opened."
  },
  {
    "id": 73,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by `filePath` and returns them as a vector of strings."
  },
  {
    "id": 74,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 75,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFile(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    if (!sourceFile.is_open()) {\n        return false;\n    }\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n    if (!destinationFile.is_open()) {\n        return false;\n    }\n    destinationFile << sourceFile.rdbuf();\n    return true;\n}\n```",
    "summary": "This function copies the contents of one file to another using binary mode, returning true if successful."
  },
  {
    "id": 76,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nstd::string readFirstLine(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::string firstLine;\n    if (file.is_open()) {\n        std::getline(file, firstLine);\n        file.close();\n    }\n    return firstLine;\n}\n```",
    "summary": "Reads and returns the first line of a file specified by its file path."
  },
  {
    "id": 77,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "This function writes a given string to a specified file, returning true on success and false if the file cannot be opened or written to."
  },
  {
    "id": 78,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a given file and returns them as a vector of strings."
  },
  {
    "id": 79,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings, returning the vector."
  },
  {
    "id": 80,
    "code": "```cpp\n#include <fstream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    \n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 81,
    "code": "```cpp\n#include <fstream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 82,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, returning true on success and false on failure."
  },
  {
    "id": 83,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream file(filePath);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes the given content to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 84,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFile(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    if (!sourceFile) {\n        return false;\n    }\n\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n    if (!destinationFile) {\n        return false;\n    }\n\n    destinationFile << sourceFile.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the contents of a source file to a destination file in binary mode, returning true on success and false on failure."
  },
  {
    "id": 85,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        std::cerr << \"Error opening file for writing: \" << filename << std::endl;\n        return;\n    }\n    outFile << content;\n    outFile.close();\n}\n```",
    "summary": "Writes the provided content to a specified file, reporting an error if the file cannot be opened."
  },
  {
    "id": 86,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (outFile) {\n        outFile << content;\n        outFile.close();\n    }\n}\n```",
    "summary": "Writes content to a specified file, creating or overwriting it if necessary."
  },
  {
    "id": 87,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        throw std::ios_base::failure(\"Failed to open file.\");\n    }\n    file << content;\n    file.close();\n}\n```",
    "summary": "Writes a given string to a specified file, throwing an exception if the file fails to open."
  },
  {
    "id": 88,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if(outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    }\n}\n```",
    "summary": "Writes a string to a specified file, creating or overwriting the file as needed."
  },
  {
    "id": 89,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    \n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 90,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& filename, const std::string& text) {\n    std::ofstream outfile(filename);\n    if (!outfile.is_open()) {\n        return false;\n    }\n    outfile << text;\n    return true;\n}\n```",
    "summary": "Writes the specified text to a file with the given filename, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 91,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings and returns it."
  },
  {
    "id": 92,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nstd::string readFirstLine(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::string line;\n    if (file.is_open()) {\n        if (std::getline(file, line)) {\n            file.close();\n            return line;\n        }\n        file.close();\n    }\n    return \"\";\n}\n```",
    "summary": "Reads and returns the first line of a file given its file path, or an empty string if the file cannot be opened."
  },
  {
    "id": 93,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToTextFile(const std::string& fileName, const std::string& content) {\n    std::ofstream outFile(fileName);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes the given content to a specified text file and returns true on success, false on failure."
  },
  {
    "id": 94,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the specified string content to a file with the given filename, returning true on success and false on failure."
  },
  {
    "id": 95,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    } else {\n        std::cerr << \"Unable to open file \" << filename << std::endl;\n    }\n}\n```",
    "summary": "Writes a given string to a file, creating the file if it does not exist."
  },
  {
    "id": 96,
    "code": "#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourceFile, const std::string& destinationFile) {\n    std::ifstream src(sourceFile, std::ios::binary);\n    std::ofstream dest(destinationFile, std::ios::binary);\n    if (!src || !dest) return false;\n    dest << src.rdbuf();\n    return true;\n}",
    "summary": "Copies the contents of a source file to a destination file in binary mode, returning true on success."
  },
  {
    "id": 97,
    "code": "#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}",
    "summary": "This function reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 98,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile.is_open()) {\n        return false;\n    }\n    outFile << content;\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 99,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <stdexcept>\n\nvoid writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename, std::ios::out | std::ios::trunc);\n    if (!file) {\n        throw std::runtime_error(\"Failed to open file for writing\");\n    }\n    file << content;\n    if (!file) {\n        throw std::runtime_error(\"Failed to write to file\");\n    }\n    file.close();\n}\n```",
    "summary": "Writes a given string to a specified file, overwriting its contents, and throws an exception if the operation fails."
  },
  {
    "id": 100,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    } else {\n        std::cerr << \"Unable to open file for writing: \" << filename << std::endl;\n    }\n}\n```",
    "summary": "Writes a given string to a specified file, handling file opening errors."
  },
  {
    "id": 101,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToTextFile(const std::string& filename, const std::string& data) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << data;\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified text file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 102,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid copyFileContents(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n\n    if (!sourceFile) {\n        std::cerr << \"Error: Could not open source file.\" << std::endl;\n        return;\n    }\n\n    if (!destinationFile) {\n        std::cerr << \"Error: Could not open destination file.\" << std::endl;\n        return;\n    }\n\n    destinationFile << sourceFile.rdbuf();\n}\n```",
    "summary": "The function copies the contents of a source file to a destination file using binary mode."
  },
  {
    "id": 103,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 104,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFile(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    if (!sourceFile) return false;\n\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n    if (!destinationFile) return false;\n\n    destinationFile << sourceFile.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the contents of a source file to a destination file, returning true on success and false on failure."
  },
  {
    "id": 105,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "This function reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 106,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings and returns it."
  },
  {
    "id": 107,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string &filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file and returns them as a vector of strings."
  },
  {
    "id": 108,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, returning true on success and false on failure."
  },
  {
    "id": 109,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 110,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 111,
    "code": "#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}",
    "summary": "Writes the given content to a specified file and returns true if successful, otherwise false."
  },
  {
    "id": 112,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (!file.is_open()) {\n        std::cerr << \"Error: Unable to open file \" << filePath << std::endl;\n        return lines;\n    }\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    file.close();\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by the file path and returns them as a vector of strings."
  },
  {
    "id": 113,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outfile(filename);\n    if (!outfile.is_open()) {\n        return false;\n    }\n    outfile << content;\n    return outfile.good();\n}\n```",
    "summary": "This function writes a given string to a specified file, returning true on success and false if the file could not be opened."
  },
  {
    "id": 114,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n        return true;\n    }\n    return false;\n}\n```",
    "summary": "Writes the specified content to a file and returns true if successful, otherwise false."
  },
  {
    "id": 115,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return true;\n}\n```",
    "summary": "Writes a given string content to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 116,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes the given content to a specified file, returning success or failure as a boolean."
  },
  {
    "id": 117,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 118,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool appendLineToFile(const std::string& filename, const std::string& line) {\n    std::ofstream file(filename, std::ios::app);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << line << '\\n';\n    return true;\n}\n```",
    "summary": "Appends a given line of text to the end of a specified file, creating the file if it doesn't exist."
  },
  {
    "id": 119,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename, std::ios::out | std::ios::trunc);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file, overwriting any existing data, and returns true on success."
  },
  {
    "id": 120,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 121,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings, returning the vector."
  },
  {
    "id": 122,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (!file.is_open()) {\n        return lines;\n    }\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    file.close();\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 123,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& fileName, const std::string& content) {\n    std::ofstream outFile(fileName);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, returning true on success and false on failure."
  },
  {
    "id": 124,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid copyFileContent(const std::string& sourceFileName, const std::string& destinationFileName) {\n    std::ifstream sourceFile(sourceFileName, std::ios::binary);\n    std::ofstream destinationFile(destinationFileName, std::ios::binary);\n\n    if (!sourceFile) {\n        std::cerr << \"Error: Could not open source file.\" << std::endl;\n        return;\n    }\n    if (!destinationFile) {\n        std::cerr << \"Error: Could not open destination file.\" << std::endl;\n        return;\n    }\n\n    destinationFile << sourceFile.rdbuf();\n\n    sourceFile.close();\n    destinationFile.close();\n}\n```",
    "summary": "Copies the content of one file to another using binary mode file streams."
  },
  {
    "id": 125,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes a given string to a file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 126,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by `filePath` and returns them as a vector of strings."
  },
  {
    "id": 127,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 128,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    }\n}\n```",
    "summary": "Writes the given content to a file specified by filename, creating the file if it does not exist."
  },
  {
    "id": 129,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string &filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "This function reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 130,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, returning true if successful."
  },
  {
    "id": 131,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string &filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 132,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 133,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid copyFileContent(const std::string& sourceFile, const std::string& destFile) {\n    std::ifstream source(sourceFile);\n    std::ofstream dest(destFile);\n\n    if (!source.is_open() || !dest.is_open()) {\n        std::cerr << \"Error opening files.\" << std::endl;\n        return;\n    }\n\n    std::string line;\n    while (std::getline(source, line)) {\n        dest << line << '\\n';\n    }\n\n    source.close();\n    dest.close();\n}\n```",
    "summary": "Copies the content of one file to another line by line, handling file opening and closing."
  },
  {
    "id": 134,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath, std::ios::out | std::ios::trunc);\n    if (!outFile) {\n        return false; // Failed to open file\n    }\n    outFile << content;\n    return outFile.good(); // Check if write was successful\n}\n```",
    "summary": "Writes a given string to a specified file, overwriting any existing content, and returns true if successful."
  },
  {
    "id": 135,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 136,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 137,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 138,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& fileName, const std::string& content) {\n    std::ofstream outFile(fileName);\n    if (!outFile.is_open()) {\n        return false;\n    }\n    outFile << content;\n    outFile.close();\n    return true;\n}\n```",
    "summary": "This function writes a given string to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 139,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string &filename, const std::string &content, bool append = false) {\n    std::ofstream file;\n    if (append) {\n        file.open(filename, std::ios::out | std::ios::app);\n    } else {\n        file.open(filename, std::ios::out | std::ios::trunc);\n    }\n    \n    if (!file.is_open()) {\n        return false;\n    }\n    \n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes a string to a file, either appending or overwriting based on the append flag, and returns success status."
  },
  {
    "id": 140,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContent(const std::string &sourcePath, const std::string &destPath) {\n    std::ifstream source(sourcePath, std::ios::binary);\n    if (!source.is_open()) return false;\n\n    std::ofstream dest(destPath, std::ios::binary);\n    if (!dest.is_open()) return false;\n\n    dest << source.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the contents of a source file to a destination file, returning true if successful, otherwise false."
  },
  {
    "id": 141,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes the specified content to a file and returns true on success, false on failure."
  },
  {
    "id": 142,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the provided content to a specified file, returning true on success or false if the file cannot be opened."
  },
  {
    "id": 143,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile.is_open()) {\n        return false;\n    }\n    outFile << content;\n    outFile.close();\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 144,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes the provided content to a specified file, returning false if the file cannot be opened."
  },
  {
    "id": 145,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 146,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 147,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& fileName, const std::string& content) {\n    std::ofstream file(fileName);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes a given string content to a specified file and returns true if successful, false otherwise."
  },
  {
    "id": 148,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 149,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& fileName) {\n    std::vector<std::string> lines;\n    std::ifstream file(fileName);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a given file and returns them as a vector of strings."
  },
  {
    "id": 150,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    if (!sourceFile.is_open()) {\n        return false;\n    }\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n    if (!destinationFile.is_open()) {\n        return false;\n    }\n    destinationFile << sourceFile.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the contents of a source file to a destination file, returning true on success or false if either file cannot be opened."
  },
  {
    "id": 151,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file and returns them as a vector of strings."
  },
  {
    "id": 152,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings and returns it."
  },
  {
    "id": 153,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 154,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "This function reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 155,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid countLinesInFile(const std::string& filename) {\n    std::ifstream file(filename);\n    if (!file.is_open()) {\n        std::cerr << \"Unable to open file: \" << filename << std::endl;\n        return;\n    }\n    \n    std::string line;\n    int lineCount = 0;\n    while (std::getline(file, line)) {\n        ++lineCount;\n    }\n    file.close();\n    std::cout << \"Total lines in file: \" << lineCount << std::endl;\n}\n```",
    "summary": "Counts and prints the number of lines in a specified file."
  },
  {
    "id": 156,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "This function reads all lines from a specified file into a vector of strings and returns it."
  },
  {
    "id": 157,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings."
  },
  {
    "id": 158,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by filename and returns them as a vector of strings."
  },
  {
    "id": 159,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid appendLineToFile(const std::string& filename, const std::string& line) {\n    std::ofstream file(filename, std::ios::app);\n    if (file.is_open()) {\n        file << line << std::endl;\n        file.close();\n    }\n}\n```",
    "summary": "Appends a line of text to the end of a specified file, creating the file if it does not exist."
  },
  {
    "id": 160,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads a file line by line and returns its contents as a vector of strings."
  },
  {
    "id": 161,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 162,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, returning true if successful."
  },
  {
    "id": 163,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        std::cerr << \"Error opening file for writing: \" << filename << std::endl;\n        return;\n    }\n    outFile << content;\n    outFile.close();\n}\n```",
    "summary": "Writes the specified content to a file, creating the file if it doesn't exist, and reports any errors encountered during the process."
  },
  {
    "id": 164,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    }\n}\n```",
    "summary": "Writes specified content to a file with the given filename, creating or overwriting the file."
  },
  {
    "id": 165,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 166,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourceFilePath, const std::string& destinationFilePath) {\n    std::ifstream sourceFile(sourceFilePath, std::ios::binary);\n    if (!sourceFile) return false;\n\n    std::ofstream destinationFile(destinationFilePath, std::ios::binary);\n    if (!destinationFile) return false;\n\n    destinationFile << sourceFile.rdbuf();\n\n    return true;\n}\n```",
    "summary": "Copies the contents of a source file to a destination file using binary mode."
  },
  {
    "id": 167,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes a given string to a specified file and returns true if successful, false otherwise."
  },
  {
    "id": 168,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream file(filePath);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes the provided text content to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 169,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 170,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes the given content to a file specified by the filename, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 171,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    } else {\n        std::cerr << \"Unable to open file for writing: \" << filename << std::endl;\n    }\n}\n```",
    "summary": "Writes the specified content to a file, creating the file if it doesn't exist and reporting an error if the file cannot be opened."
  },
  {
    "id": 172,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings and returns it."
  },
  {
    "id": 173,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 174,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nstd::string readFirstLine(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::string line;\n    if (file.is_open() && std::getline(file, line)) {\n        file.close();\n        return line;\n    }\n    return \"\";\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 175,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContent(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n\n    if (!sourceFile || !destinationFile) {\n        return false;\n    }\n\n    destinationFile << sourceFile.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the content from a source file to a destination file, returning true on success or false if file operations fail."
  },
  {
    "id": 176,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return true;\n}\n```",
    "summary": "Writes content to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 177,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes a string to a specified file and returns true if successful, otherwise false."
  },
  {
    "id": 178,
    "code": "```cpp\n#include <fstream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> readFileLines(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    \n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads a file from the specified path and returns its contents as a vector of strings, each representing a line."
  },
  {
    "id": 179,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 180,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true if successful and false otherwise."
  },
  {
    "id": 181,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> ReadFileLines(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by `filePath` into a vector of strings."
  },
  {
    "id": 182,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContent(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    if (!sourceFile.is_open()) return false;\n    \n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n    if (!destinationFile.is_open()) return false;\n    \n    destinationFile << sourceFile.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies content from a source file to a destination file, returning false if either file cannot be opened."
  },
  {
    "id": 183,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file at the given path into a vector of strings."
  },
  {
    "id": 184,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 185,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContent(const std::string &sourceFile, const std::string &destinationFile) {\n    std::ifstream inFile(sourceFile, std::ios::binary);\n    if (!inFile) return false;\n\n    std::ofstream outFile(destinationFile, std::ios::binary);\n    if (!outFile) return false;\n\n    outFile << inFile.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the content of one file to another, returning true on success and false if either file cannot be opened."
  },
  {
    "id": 186,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string &filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings, returning the vector."
  },
  {
    "id": 187,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 188,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings, returning the vector."
  },
  {
    "id": 189,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 190,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContent(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    if (!sourceFile) return false;\n    \n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n    if (!destinationFile) return false;\n    \n    destinationFile << sourceFile.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the contents of a source file to a destination file using binary mode."
  },
  {
    "id": 191,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        std::cerr << \"Error: Could not open file for writing.\" << std::endl;\n        return;\n    }\n    outFile << content;\n    outFile.close();\n}\n```",
    "summary": "Writes specified content to a file with the given filename, creating the file if it does not exist."
  },
  {
    "id": 192,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    \n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 193,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings and returns it."
  },
  {
    "id": 194,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    if (!sourceFile) return false;\n\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n    if (!destinationFile) return false;\n\n    destinationFile << sourceFile.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the contents of one file to another specified by their file paths, returning true on success and false on failure."
  },
  {
    "id": 195,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 196,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "This function reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 197,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    }\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, creating or overwriting the file as needed."
  },
  {
    "id": 198,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    } else {\n        std::cerr << \"Unable to open file for writing: \" << filename << std::endl;\n    }\n}\n```",
    "summary": "Writes a given string to a specified file, outputting an error message if the file cannot be opened."
  },
  {
    "id": 199,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 200,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContent(const std::string& sourcePath, const std::string& destPath) {\n    std::ifstream inFile(sourcePath, std::ios::binary);\n    std::ofstream outFile(destPath, std::ios::binary);\n\n    if (!inFile || !outFile) {\n        return false;\n    }\n\n    outFile << inFile.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the content of one file to another file, returning true on success and false on failure."
  },
  {
    "id": 201,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    file.close();\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 202,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false; // Return false if the file could not be opened\n    }\n    outFile << content;\n    return true; // Return true if the write operation was successful\n}\n```",
    "summary": "Writes a given string to a specified file, returning true if successful, false otherwise."
  },
  {
    "id": 203,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 204,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string &filename, const std::string &content) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    } else {\n        throw std::ios_base::failure(\"Failed to open file for writing.\");\n    }\n}\n```",
    "summary": "Writes the provided content to a specified file, throwing an exception if the file cannot be opened."
  },
  {
    "id": 205,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFile(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    if (!sourceFile) return false;\n\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n    if (!destinationFile) return false;\n\n    destinationFile << sourceFile.rdbuf();\n\n    return sourceFile && destinationFile;\n}\n```",
    "summary": "Copies the contents of a file from a specified source path to a destination path, returning true on success."
  },
  {
    "id": 206,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 207,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    } else {\n        std::cerr << \"Unable to open file for writing: \" << filename << std::endl;\n    }\n}\n```",
    "summary": "Writes the specified content to a file, creating or overwriting it, and reports an error if the file cannot be opened."
  },
  {
    "id": 208,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes the given content to a specified file and returns true if successful, otherwise false."
  },
  {
    "id": 209,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 210,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile.is_open()) {\n        return false;\n    }\n    outFile << content;\n    outFile.close();\n    return true;\n}\n```",
    "summary": "Writes specified content to a file at the given file path, returning true if successful."
  },
  {
    "id": 211,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFile(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream source(sourcePath, std::ios::binary);\n    std::ofstream destination(destinationPath, std::ios::binary);\n\n    if (!source || !destination) {\n        return false;\n    }\n\n    destination << source.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the contents of a source file to a destination file using binary mode streams, returning true on success."
  },
  {
    "id": 212,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n#include <iostream>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n\n    if (!file.is_open()) {\n        std::cerr << \"Error opening file: \" << filePath << std::endl;\n        return lines;\n    }\n\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n\n    file.close();\n    return lines;\n}\n```",
    "summary": "This function reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 213,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& data) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << data;\n    file.close();\n    return true;\n}\n```",
    "summary": "This function writes a given string to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 214,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename, std::ios::out | std::ios::trunc);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes a string to a specified file, overwriting any existing content, and returns true if successful."
  },
  {
    "id": 215,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 216,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile) {\n        return false; // Return false if file cannot be opened.\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes the specified content to a file at the given path, returning false if the file cannot be opened."
  },
  {
    "id": 217,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file) {\n        std::cerr << \"Error opening file for writing: \" << filename << std::endl;\n        return;\n    }\n    file << content;\n    if (!file) {\n        std::cerr << \"Error writing to file: \" << filename << std::endl;\n    }\n    file.close();\n}\n```",
    "summary": "Writes a string to a specified file, handling any file opening or writing errors."
  },
  {
    "id": 218,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings, returning the vector."
  },
  {
    "id": 219,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream ofs(filename);\n    if (!ofs.is_open()) {\n        return false;\n    }\n    ofs << content;\n    return ofs.good();\n}\n```",
    "summary": "Writes given content to a specified file and returns true if successful, false otherwise."
  },
  {
    "id": 220,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToTextFile(const std::string& filePath, const std::string& content) {\n    std::ofstream file(filePath);\n    if (!file) {\n        return false; // Return false if file could not be opened\n    }\n    file << content;\n    return file.good(); // Return true if write was successful\n}\n```",
    "summary": "Writes a given string to a specified text file, returning true on success and false if the file cannot be opened or written to."
  },
  {
    "id": 221,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid countLinesInFile(const std::string& filename, int& lineCount) {\n    std::ifstream file(filename);\n    lineCount = 0;\n    std::string line;\n    while (std::getline(file, line)) {\n        ++lineCount;\n    }\n    file.close();\n}\n```",
    "summary": "This function counts the number of lines in a specified file and updates the line count through a reference parameter."
  },
  {
    "id": 222,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& data) {\n    std::ofstream file(filename, std::ios::out | std::ios::trunc);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << data;\n    return true;\n}\n```",
    "summary": "Writes the given string data to a specified file, overwriting its contents, and returns whether the operation was successful."
  },
  {
    "id": 223,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 224,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeStringToFile(const std::string &filename, const std::string &content) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    }\n}\n```",
    "summary": "Writes a given string to a specified file, overwriting any existing content."
  },
  {
    "id": 225,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 226,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return true;\n}\n```",
    "summary": "Writes a string to a specified file, returning true on success and false if the file could not be opened."
  },
  {
    "id": 227,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, returning true on success and false on failure."
  },
  {
    "id": 228,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from the specified file into a vector of strings and returns it."
  },
  {
    "id": 229,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourceFile, const std::string& destinationFile) {\n    std::ifstream source(sourceFile, std::ios::binary);\n    std::ofstream destination(destinationFile, std::ios::binary);\n    \n    if (!source || !destination) {\n        return false; // Failed to open files\n    }\n\n    destination << source.rdbuf();\n    return true; // Successfully copied contents\n}\n```",
    "summary": "Copies the contents of one file to another, returning false if either file cannot be opened."
  },
  {
    "id": 230,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& filename, const std::string& text) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << text;\n    return true;\n}\n```",
    "summary": "Writes a given text to a specified file, returning true on success or false if the file cannot be opened."
  },
  {
    "id": 231,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file and returns them as a vector of strings."
  },
  {
    "id": 232,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFile(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    if (!sourceFile) return false;\n\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n    if (!destinationFile) return false;\n\n    destinationFile << sourceFile.rdbuf();\n\n    return true;\n}\n```",
    "summary": "Copies the content of a source file to a destination file in binary mode, returning true on success and false on failure."
  },
  {
    "id": 233,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 234,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 235,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (!file.is_open()) {\n        return lines;\n    }\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    file.close();\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 236,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 237,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    }\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, overwriting any existing content."
  },
  {
    "id": 238,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the provided content to a specified file, returning true on success or false if the file cannot be opened."
  },
  {
    "id": 239,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid copyFileContent(const std::string& sourceFile, const std::string& destinationFile) {\n    std::ifstream inputFile(sourceFile);\n    std::ofstream outputFile(destinationFile);\n\n    if (!inputFile || !outputFile) {\n        std::cerr << \"Error opening files.\" << std::endl;\n        return;\n    }\n\n    std::string line;\n    while (std::getline(inputFile, line)) {\n        outputFile << line << std::endl;\n    }\n\n    inputFile.close();\n    outputFile.close();\n}\n```",
    "summary": "This function copies the content from a source file to a destination file line by line."
  },
  {
    "id": 240,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& filename, const std::string& text) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << text;\n    return file.good();\n}\n```",
    "summary": "Writes the given text to a file specified by the filename, returning true if successful."
  },
  {
    "id": 241,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "This function reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 242,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 243,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 244,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes a given string to a file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 245,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 246,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes the given content to a specified file and returns true if successful, otherwise false."
  },
  {
    "id": 247,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 248,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 249,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContent(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    if (!sourceFile) return false;\n    \n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n    if (!destinationFile) return false;\n    \n    destinationFile << sourceFile.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the content of a source file to a destination file and returns true if successful, false otherwise."
  },
  {
    "id": 250,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContent(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n\n    if (!sourceFile.is_open() || !destinationFile.is_open()) {\n        return false;\n    }\n\n    destinationFile << sourceFile.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the content of a source file to a destination file using binary mode in C++."
  },
  {
    "id": 251,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid copyFileContents(const std::string& sourceFile, const std::string& destinationFile) {\n    std::ifstream src(sourceFile, std::ios::binary);\n    std::ofstream dest(destinationFile, std::ios::binary);\n    \n    if (!src.is_open() || !dest.is_open()) {\n        std::cerr << \"Error: Unable to open source or destination file.\" << std::endl;\n        return;\n    }\n\n    dest << src.rdbuf();\n    \n    if (!src.good() || !dest.good()) {\n        std::cerr << \"Error: File copy failed.\" << std::endl;\n    }\n}\n```",
    "summary": "This function copies the contents of a source file to a destination file using binary mode to preserve file integrity."
  },
  {
    "id": 252,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    }\n}\n```",
    "summary": "Writes a given string content to a specified file, creating or overwriting the file if necessary."
  },
  {
    "id": 253,
    "code": "#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}",
    "summary": "Writes a string to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 254,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& filename, const std::string& text) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << text;\n    return outFile.good();\n}\n```",
    "summary": "Writes a given string to a specified file and returns true if successful, false otherwise."
  },
  {
    "id": 255,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 256,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath, std::ios::out | std::ios::trunc);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes the specified content to a file at the given path, overwriting any existing content."
  },
  {
    "id": 257,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile) {\n        return false; // Return false if the file couldn't be opened\n    }\n    outFile << content;\n    return true; // Return true if the content was successfully written\n}\n```",
    "summary": "Writes a given string to a specified file and returns a boolean indicating success or failure."
  },
  {
    "id": 258,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 259,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 260,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& filePath, const std::string& text) {\n    std::ofstream outFile(filePath);\n    if (!outFile) {\n        return false;\n    }\n    outFile << text;\n    return outFile.good();\n}\n```",
    "summary": "Writes a given string to a specified file and returns true if successful, otherwise false."
  },
  {
    "id": 261,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid countLinesInFile(const std::string& filename) {\n    std::ifstream file(filename);\n    if (!file.is_open()) {\n        std::cerr << \"Error opening file: \" << filename << std::endl;\n        return;\n    }\n    \n    std::string line;\n    int lineCount = 0;\n    while (std::getline(file, line)) {\n        ++lineCount;\n    }\n    \n    file.close();\n    std::cout << \"Total number of lines in file: \" << lineCount << std::endl;\n}\n```",
    "summary": "Counts and prints the number of lines in a specified file."
  },
  {
    "id": 262,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by `filePath` and returns them as a vector of strings."
  },
  {
    "id": 263,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings, returning the vector."
  },
  {
    "id": 264,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 265,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContent(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    if (!sourceFile.is_open()) return false;\n    \n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n    if (!destinationFile.is_open()) return false;\n    \n    destinationFile << sourceFile.rdbuf();\n    \n    sourceFile.close();\n    destinationFile.close();\n    return true;\n}\n```",
    "summary": "This function copies the content of a file from a source path to a destination path, returning true on success and false if any file cannot be opened."
  },
  {
    "id": 266,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    file.close();\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 267,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings."
  },
  {
    "id": 268,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings."
  },
  {
    "id": 269,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file and returns them as a vector of strings."
  },
  {
    "id": 270,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings and returns it."
  },
  {
    "id": 271,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 272,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid copyFile(const std::string& sourcePath, const std::string& destPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destFile(destPath, std::ios::binary);\n\n    if (!sourceFile.is_open() || !destFile.is_open()) {\n        throw std::runtime_error(\"Failed to open source or destination file.\");\n    }\n\n    destFile << sourceFile.rdbuf();\n}\n```",
    "summary": "Copies the contents of a source file to a destination file using binary mode."
  },
  {
    "id": 273,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (!file.is_open()) {\n        return lines;\n    }\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    file.close();\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 274,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& filename, const std::string& text) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << text;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the specified text to a file with the given filename, returning true on success and false if the file could not be opened."
  },
  {
    "id": 275,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 276,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings and returns it."
  },
  {
    "id": 277,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContent(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n    \n    if (!sourceFile || !destinationFile) {\n        return false;\n    }\n    \n    destinationFile << sourceFile.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the content of a source file to a destination file, returning true on success or false if file operations fail."
  },
  {
    "id": 278,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContent(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destFile(destinationPath, std::ios::binary);\n\n    if (!sourceFile || !destFile) {\n        return false; // Couldn't open source or destination file\n    }\n\n    destFile << sourceFile.rdbuf();\n    return true; // File content successfully copied\n}\n```",
    "summary": "Copies the content of one file to another using binary mode."
  },
  {
    "id": 279,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFile(const std::string& sourcePath, const std::string& destPath) {\n    std::ifstream source(sourcePath, std::ios::binary);\n    std::ofstream dest(destPath, std::ios::binary);\n    \n    if (!source || !dest) {\n        return false;\n    }\n    \n    dest << source.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the contents of a source file to a destination file using binary streams."
  },
  {
    "id": 280,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file and returns them as a vector of strings."
  },
  {
    "id": 281,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads a text file and returns its contents as a vector of strings, with each string representing a line from the file."
  },
  {
    "id": 282,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string &filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads a file line by line and returns a vector containing each line as a string."
  },
  {
    "id": 283,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& data) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << data;\n    return true;\n}\n```",
    "summary": "This function writes a given string to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 284,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContent(const std::string &sourceFile, const std::string &destinationFile) {\n    std::ifstream source(sourceFile, std::ios::binary);\n    std::ofstream dest(destinationFile, std::ios::binary);\n\n    if (!source.is_open() || !dest.is_open()) {\n        return false;\n    }\n\n    dest << source.rdbuf();\n\n    return true;\n}\n```",
    "summary": "Copies the content of a source file to a destination file, returning false if either file cannot be opened."
  },
  {
    "id": 285,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "This function reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 286,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename, std::ios::out | std::ios::trunc);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes the provided content to a file with the specified filename, overwriting any existing data, and returns true if successful."
  },
  {
    "id": 287,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& fileName, const std::string& text) {\n    std::ofstream outFile(fileName);\n    if (!outFile) {\n        return false;\n    }\n    outFile << text;\n    return true;\n}\n```",
    "summary": "This function writes a given string to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 288,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads and returns all lines from a file as a vector of strings."
  },
  {
    "id": 289,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContent(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    if (!sourceFile) return false;\n\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n    if (!destinationFile) return false;\n\n    destinationFile << sourceFile.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the content of one file to another specified file path."
  },
  {
    "id": 290,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContent(const std::string& sourceFile, const std::string& destinationFile) {\n    std::ifstream source(sourceFile, std::ios::binary);\n    std::ofstream destination(destinationFile, std::ios::binary);\n\n    if (!source || !destination) {\n        return false;\n    }\n\n    destination << source.rdbuf();\n\n    return true;\n}\n```",
    "summary": "Copies the content from a source file to a destination file, returning false if either file cannot be opened."
  },
  {
    "id": 291,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile) {\n        return false; // Return false if file could not be opened\n    }\n    outFile << content;\n    return true;\n}\n```",
    "summary": "Writes the given content to a file specified by the file path, returning false if the file cannot be opened."
  },
  {
    "id": 292,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourcePath, const std::string& destPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destFile(destPath, std::ios::binary);\n    \n    if (!sourceFile || !destFile) {\n        return false;\n    }\n\n    destFile << sourceFile.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies contents from a source file to a destination file, returning true on success or false on failure."
  },
  {
    "id": 293,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 294,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 295,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 296,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file and returns true if successful, otherwise false."
  },
  {
    "id": 297,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings and returns it."
  },
  {
    "id": 298,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by `filePath` into a vector of strings."
  },
  {
    "id": 299,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the provided content to a file with the specified filename, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 300,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings and returns it."
  },
  {
    "id": 301,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 302,
    "code": "#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid countLinesInFile(const std::string &filePath) {\n    std::ifstream file(filePath);\n    if (!file.is_open()) {\n        std::cerr << \"Error: Could not open file \" << filePath << std::endl;\n        return;\n    }\n    std::string line;\n    int lineCount = 0;\n    while (std::getline(file, line)) {\n        ++lineCount;\n    }\n    file.close();\n    std::cout << \"Total number of lines: \" << lineCount << std::endl;\n}",
    "summary": "This function opens a file and counts the number of lines, outputting the count to the console."
  },
  {
    "id": 303,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes the given content to a file with the specified filename, returning true if successful."
  },
  {
    "id": 304,
    "code": "#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}",
    "summary": "Writes a given string to a specified file and returns true if successful, false otherwise."
  },
  {
    "id": 305,
    "code": "#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 306,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n\n    if (!sourceFile.is_open() || !destinationFile.is_open()) {\n        return false;\n    }\n\n    destinationFile << sourceFile.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the contents of a source file to a destination file, returning true on success and false if file operations fail."
  },
  {
    "id": 307,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes the specified content to a file at the given file path and returns true if successful, false otherwise."
  },
  {
    "id": 308,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success and false on failure."
  },
  {
    "id": 309,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads a file line by line and returns the contents as a vector of strings."
  },
  {
    "id": 310,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads a text file line by line and returns the lines as a vector of strings."
  },
  {
    "id": 311,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads a text file line by line and returns the lines as a vector of strings."
  },
  {
    "id": 312,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings, returning the vector."
  },
  {
    "id": 313,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 314,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 315,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    }\n}\n```",
    "summary": "Writes the specified content to a file with the given filename."
  },
  {
    "id": 316,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid copyFileContents(const std::string& sourceFile, const std::string& destFile) {\n    std::ifstream src(sourceFile, std::ios::binary);\n    std::ofstream dest(destFile, std::ios::binary);\n    \n    if (!src || !dest) {\n        std::cerr << \"Error opening files!\" << std::endl;\n        return;\n    }\n\n    dest << src.rdbuf();\n}\n```",
    "summary": "Copies the contents of one file to another using binary mode file streams."
  },
  {
    "id": 317,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 318,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, returning true on success or false on failure."
  },
  {
    "id": 319,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 320,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes a string to a file, returning true if successful, or false if an error occurs."
  },
  {
    "id": 321,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    } else {\n        std::cerr << \"Unable to open file for writing: \" << filename << std::endl;\n    }\n}\n```",
    "summary": "Writes the specified content to a file, creating or overwriting the file if it exists."
  },
  {
    "id": 322,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nstd::string readFirstLineFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::string firstLine;\n    if (file.is_open()) {\n        std::getline(file, firstLine);\n        file.close();\n    }\n    return firstLine;\n}\n```",
    "summary": "Reads and returns the first line from a specified file, or an empty string if the file cannot be opened."
  },
  {
    "id": 323,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string &filename, const std::string &content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false; // Failed to open file\n    }\n    file << content;\n    return true; // Successfully wrote to file\n}\n```",
    "summary": "This function writes a given string to a specified file and returns true if successful, or false if the file could not be opened."
  },
  {
    "id": 324,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    } else {\n        std::cerr << \"Unable to open file for writing\" << std::endl;\n    }\n}\n```",
    "summary": "Writes the provided content to a file specified by filename, creating or overwriting the file as needed."
  },
  {
    "id": 325,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid appendLineToFile(const std::string& filename, const std::string& line) {\n    std::ofstream file(filename, std::ios::app);\n    if (file.is_open()) {\n        file << line << std::endl;\n        file.close();\n    }\n}\n```",
    "summary": "Appends a line of text to the end of a specified file."
  },
  {
    "id": 326,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes the given content to a file specified by the filename, returning true if successful and false otherwise."
  },
  {
    "id": 327,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    } else {\n        std::cerr << \"Unable to open file for writing: \" << filename << std::endl;\n    }\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, creating the file if it doesn't exist."
  },
  {
    "id": 328,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    } else {\n        std::cerr << \"Unable to open file for writing: \" << filename << std::endl;\n    }\n}\n```",
    "summary": "Writes a given string content to a specified file, creating or truncating the file as needed."
  },
  {
    "id": 329,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 330,
    "code": "```cpp\n#include <fstream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> readLinesFromFile(const std::string &filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 331,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid copyFileContents(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n\n    if (!sourceFile) {\n        std::cerr << \"Error: Cannot open source file.\" << std::endl;\n        return;\n    }\n    if (!destinationFile) {\n        std::cerr << \"Error: Cannot open destination file.\" << std::endl;\n        return;\n    }\n\n    destinationFile << sourceFile.rdbuf();\n\n    sourceFile.close();\n    destinationFile.close();\n}\n```",
    "summary": "Copies the contents of a source file to a destination file using binary mode for both reading and writing."
  },
  {
    "id": 332,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream file(filePath);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success or false if the file cannot be opened."
  },
  {
    "id": 333,
    "code": "```cpp\n#include <fstream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 334,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by `filename` and returns them as a vector of strings."
  },
  {
    "id": 335,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 336,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 337,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings and returns it."
  },
  {
    "id": 338,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n\n    if (!sourceFile || !destinationFile) {\n        return false;\n    }\n\n    destinationFile << sourceFile.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies contents from a source file to a destination file, returning true on success and false on failure."
  },
  {
    "id": 339,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    } else {\n        std::cerr << \"Unable to open file for writing: \" << filename << std::endl;\n    }\n}\n```",
    "summary": "Writes the provided content to a specified file, creating the file if it does not exist."
  },
  {
    "id": 340,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 341,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    if (!sourceFile.is_open()) {\n        return false;\n    }\n    \n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n    if (!destinationFile.is_open()) {\n        return false;\n    }\n\n    destinationFile << sourceFile.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the entire contents of one file to another, returning true on success and false if either file cannot be opened."
  },
  {
    "id": 342,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    \n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 343,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    \n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    \n    return lines;\n}\n```",
    "summary": "This function reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 344,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings, given the filename."
  },
  {
    "id": 345,
    "code": "```cpp\n#include <fstream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n\n    if (!file) {\n        throw std::runtime_error(\"Unable to open file: \" + filename);\n    }\n\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n\n    file.close();\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings, throwing an exception if the file cannot be opened."
  },
  {
    "id": 346,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the given content to a specified file, returning true if successful, otherwise false if the file cannot be opened."
  },
  {
    "id": 347,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& fileName, const std::string& content) {\n    std::ofstream file(fileName);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file with the given file name, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 348,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid copyFileContent(const std::string &sourcePath, const std::string &destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n\n    if (!sourceFile) {\n        std::cerr << \"Error opening source file.\\n\";\n        return;\n    }\n    if (!destinationFile) {\n        std::cerr << \"Error opening destination file.\\n\";\n        return;\n    }\n\n    destinationFile << sourceFile.rdbuf();\n\n    sourceFile.close();\n    destinationFile.close();\n}\n```",
    "summary": "Copies the content of a source file to a destination file in binary mode."
  },
  {
    "id": 349,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    \n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 350,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the given content to a file specified by the filename, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 351,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by `filePath` and returns them as a vector of strings."
  },
  {
    "id": 352,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 353,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file and returns them as a vector of strings."
  },
  {
    "id": 354,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 355,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings and returns it."
  },
  {
    "id": 356,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return true;\n}\n```",
    "summary": "Writes the provided string content to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 357,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid copyFileContent(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n\n    if (!sourceFile) {\n        std::cerr << \"Error opening source file.\\n\";\n        return;\n    }\n    if (!destinationFile) {\n        std::cerr << \"Error opening destination file.\\n\";\n        return;\n    }\n\n    destinationFile << sourceFile.rdbuf();\n\n    sourceFile.close();\n    destinationFile.close();\n}\n```",
    "summary": "This function copies the content from a source file to a destination file using binary mode."
  },
  {
    "id": 358,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid countLinesInFile(const std::string& filename) {\n    std::ifstream file(filename);\n    if (!file.is_open()) {\n        std::cerr << \"Error: Could not open the file \" << filename << std::endl;\n        return;\n    }\n    \n    std::string line;\n    int lineCount = 0;\n    while (std::getline(file, line)) {\n        lineCount++;\n    }\n    \n    file.close();\n    std::cout << \"Total number of lines: \" << lineCount << std::endl;\n}\n```",
    "summary": "Counts and prints the total number of lines in a specified text file."
  },
  {
    "id": 359,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true if successful or false if the file cannot be opened."
  },
  {
    "id": 360,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 361,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 362,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings."
  },
  {
    "id": 363,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename, std::ios::out | std::ios::trunc);\n    if (!file) {\n        std::cerr << \"Error opening file for writing: \" << filename << std::endl;\n        return;\n    }\n    file << content;\n    if (!file) {\n        std::cerr << \"Error writing to file: \" << filename << std::endl;\n    }\n    file.close();\n}\n```",
    "summary": "Writes specified content to a file, overwriting its existing contents if any."
  },
  {
    "id": 364,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file) {\n        std::cerr << \"Error: Could not open file for writing.\\n\";\n        return;\n    }\n    file << content;\n    file.close();\n    if (file.fail()) {\n        std::cerr << \"Error: Failed to properly close the file.\\n\";\n    }\n}\n```",
    "summary": "Writes the specified content to a file, handling file opening and closing errors."
  },
  {
    "id": 365,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string &sourcePath, const std::string &destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    if (!sourceFile.is_open()) {\n        return false;\n    }\n    \n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n    if (!destinationFile.is_open()) {\n        return false;\n    }\n\n    destinationFile << sourceFile.rdbuf();\n\n    return true;\n}\n```",
    "summary": "Copies the contents from a source file to a destination file in binary mode, returning false if either file fails to open."
  },
  {
    "id": 366,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool appendToFile(const std::string& fileName, const std::string& content) {\n    std::ofstream file(fileName, std::ios::app);\n    if (!file) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Appends a string to the end of a file, returning true on success or false if the file cannot be opened."
  },
  {
    "id": 367,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 368,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings, returning the vector."
  },
  {
    "id": 369,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string &filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    \n    if (!file.is_open()) {\n        throw std::runtime_error(\"Cannot open file: \" + filename);\n    }\n\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n\n    file.close();\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 370,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 371,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourceFile, const std::string& destinationFile) {\n    std::ifstream src(sourceFile, std::ios::binary);\n    std::ofstream dest(destinationFile, std::ios::binary);\n    if (!src || !dest) return false;\n    dest << src.rdbuf();\n    return src && dest;\n}\n```",
    "summary": "Copies the contents of one file to another using binary mode, returning true if successful."
  },
  {
    "id": 372,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFile(const std::string& sourcePath, const std::string& destPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    if (!sourceFile.is_open()) return false;\n    std::ofstream destFile(destPath, std::ios::binary);\n    if (!destFile.is_open()) return false;\n\n    destFile << sourceFile.rdbuf();\n\n    return sourceFile && destFile;\n}\n```",
    "summary": "This function copies the contents of a source file to a destination file using binary mode in C++."
  },
  {
    "id": 373,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile) return false;\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes a given string to a specified file, returning true if successful and false otherwise."
  },
  {
    "id": 374,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    } else {\n        std::cerr << \"Unable to open file for writing: \" << filename << std::endl;\n    }\n}\n```",
    "summary": "Writes the specified content to a file, creating or overwriting the file with the given filename."
  },
  {
    "id": 375,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file and returns them as a vector of strings."
  },
  {
    "id": 376,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    } else {\n        std::cerr << \"Unable to open file for writing: \" << filename << std::endl;\n    }\n}\n```",
    "summary": "Writes a given string to a specified file, creating the file if it does not exist."
  },
  {
    "id": 377,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 378,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    } else {\n        std::cerr << \"Unable to open file for writing.\" << std::endl;\n    }\n}\n```",
    "summary": "Writes the given string content to a file specified by filename."
  },
  {
    "id": 379,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 380,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the given content to a file specified by the filename, returning true if successful."
  },
  {
    "id": 381,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outfile(filename);\n    if (outfile.is_open()) {\n        outfile << content;\n        outfile.close();\n    } else {\n        std::cerr << \"Unable to open file for writing: \" << filename << std::endl;\n    }\n}\n```",
    "summary": "Writes the specified content to a file, creating the file if it does not exist."
  },
  {
    "id": 382,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false; // Return false if the file cannot be opened\n    }\n    outFile << content;\n    return true; // Return true if writing to the file is successful\n}\n```",
    "summary": "Writes a given string content to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 383,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    \n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads a text file and returns its contents as a vector of strings, with each element representing a line from the file."
  },
  {
    "id": 384,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile) {\n        return false; // Return false if the file couldn't be opened\n    }\n    outFile << content;\n    return outFile.good(); // Return true if the operation succeeded\n}\n```",
    "summary": "Writes a given string content to a specified file, returning true on success and false if the file cannot be opened or written to."
  },
  {
    "id": 385,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 386,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContent(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n\n    if (!sourceFile || !destinationFile) {\n        return false;\n    }\n\n    destinationFile << sourceFile.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the content of a source file to a destination file, returning false if either file cannot be opened."
  },
  {
    "id": 387,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string &filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    \n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    } else {\n        std::cerr << \"Unable to open file: \" << filename << std::endl;\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 388,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContent(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    if (!sourceFile) return false;\n    \n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n    if (!destinationFile) return false;\n\n    destinationFile << sourceFile.rdbuf();\n    return true;\n}\n```",
    "summary": "This function copies the content of a source file to a destination file using binary mode."
  },
  {
    "id": 389,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile.is_open()) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes the specified content to a file with the given filename and returns true if successful."
  },
  {
    "id": 390,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContent(const std::string& sourceFile, const std::string& destinationFile) {\n    std::ifstream source(sourceFile, std::ios::binary);\n    if (!source) return false;\n\n    std::ofstream destination(destinationFile, std::ios::binary);\n    if (!destination) return false;\n\n    destination << source.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the content from one file to another using binary mode and returns true if successful."
  },
  {
    "id": 391,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile.is_open()) {\n        return false;\n    }\n    outFile << content;\n    outFile.close();\n    return true;\n}\n```",
    "summary": "Writes the given content to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 392,
    "code": "```cpp\n#include <fstream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 393,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 394,
    "code": "```cpp\n#include <fstream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 395,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename, std::ios::out | std::ios::trunc);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes specified content to a file, overwriting existing contents, and returns true if successful."
  },
  {
    "id": 396,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    }\n}\n```",
    "summary": "Writes a given string to a specified file, overwriting any existing content."
  },
  {
    "id": 397,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& fileName, const std::string& data) {\n    std::ofstream outFile(fileName, std::ios::out | std::ios::trunc);\n    if (!outFile) {\n        return false;\n    }\n    outFile << data;\n    return outFile.good();\n}\n```",
    "summary": "Writes the specified string data to a file, overwriting existing content, and returns true on success or false on failure."
  },
  {
    "id": 398,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename, std::ios::out);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    outFile.close();\n    return true;\n}\n```",
    "summary": "Writes a string to a specified file, returning true on success or false if the file cannot be opened."
  },
  {
    "id": 399,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings and returns the vector."
  },
  {
    "id": 400,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "This function reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 401,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string &filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    \n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by filePath and returns them as a vector of strings."
  },
  {
    "id": 402,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 403,
    "code": "```cpp\n#include <fstream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 404,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 405,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string &filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 406,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool appendLineToFile(const std::string& filename, const std::string& line) {\n    std::ofstream file(filename, std::ios::app);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << line << std::endl;\n    return true;\n}\n```",
    "summary": "Appends a line of text to the end of a specified file, returning true if successful."
  },
  {
    "id": 407,
    "code": "```cpp\n#include <fstream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file and returns them as a vector of strings."
  },
  {
    "id": 408,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& fileName, const std::string& content) {\n    std::ofstream file(fileName, std::ios::out | std::ios::trunc);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, overwriting its content, and returns a success status."
  },
  {
    "id": 409,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return true;\n}\n```",
    "summary": "The function writes a given string to a file with the specified filename, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 410,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& filename, const std::string& text) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << text;\n    file.close();\n    return true;\n}\n```",
    "summary": "This function writes a given text string to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 411,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings and returns it."
  },
  {
    "id": 412,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile.is_open()) {\n        return false;\n    }\n    outFile << content;\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true if successful, false otherwise."
  },
  {
    "id": 413,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n    \n    if (!sourceFile || !destinationFile) {\n        return false;\n    }\n    \n    destinationFile << sourceFile.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the contents of a source file to a destination file, returning true on success and false if any file operations fail."
  },
  {
    "id": 414,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToTextFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the specified content to a text file with the given filename, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 415,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid appendLineToFile(const std::string& filename, const std::string& line) {\n    std::ofstream file(filename, std::ios::app);\n    if (file.is_open()) {\n        file << line << \"\\n\";\n        file.close();\n    }\n}\n```",
    "summary": "Appends a line of text to the end of a specified file."
  },
  {
    "id": 416,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, returning a boolean indicating success or failure."
  },
  {
    "id": 417,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, returning true if successful."
  },
  {
    "id": 418,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    }\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, creating or overwriting the file."
  },
  {
    "id": 419,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& filePath, const std::string& text) {\n    std::ofstream outFile(filePath);\n    if (!outFile) {\n        return false;\n    }\n    outFile << text;\n    return outFile.good();\n}\n```",
    "summary": "Writes a given string to a specified file and returns true if the operation is successful."
  },
  {
    "id": 420,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string &filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings, returning the vector."
  },
  {
    "id": 421,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 422,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by the file path and returns them as a vector of strings."
  },
  {
    "id": 423,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nstd::string readFirstLine(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::string firstLine;\n    if (file.is_open()) {\n        std::getline(file, firstLine);\n        file.close();\n    }\n    return firstLine;\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 424,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings, returning the vector."
  },
  {
    "id": 425,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::ifstream file(filename);\n    std::string line;\n    std::vector<std::string> lines;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 426,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by the given path and returns them as a vector of strings."
  },
  {
    "id": 427,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourceFile, const std::string& destinationFile) {\n    std::ifstream src(sourceFile, std::ios::binary);\n    std::ofstream dest(destinationFile, std::ios::binary);\n\n    if (!src || !dest) {\n        return false; // Return false if file opening fails\n    }\n\n    dest << src.rdbuf(); // Copy contents from source to destination\n    return true; // Return true on successful copy\n}\n```",
    "summary": "Copies the contents of one file to another, returning true on success and false if file operations fail."
  },
  {
    "id": 428,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 429,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile.is_open()) {\n        return false;\n    }\n    outFile << content;\n    return true;\n}\n```",
    "summary": "Writes the given content to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 430,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourcePath, const std::string& destPath) {\n    std::ifstream srcFile(sourcePath, std::ios::binary);\n    if (!srcFile.is_open()) {\n        return false;\n    }\n\n    std::ofstream destFile(destPath, std::ios::binary);\n    if (!destFile.is_open()) {\n        return false;\n    }\n\n    destFile << srcFile.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the contents of one file to another specified file path, returning false if either file cannot be opened."
  },
  {
    "id": 431,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid copyFileContents(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destFile(destinationPath, std::ios::binary);\n    \n    if (!sourceFile.is_open() || !destFile.is_open()) {\n        throw std::runtime_error(\"Unable to open source or destination file.\");\n    }\n    \n    destFile << sourceFile.rdbuf();\n}\n```",
    "summary": "Copies the contents of a source file to a destination file using binary mode."
  },
  {
    "id": 432,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 433,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& fileName, const std::string& content) {\n    std::ofstream file(fileName);\n    if (!file.is_open()) {\n        std::cerr << \"Error opening file for writing: \" << fileName << std::endl;\n        return;\n    }\n    file << content;\n    file.close();\n}\n```",
    "summary": "Writes a given string to a specified file, displaying an error if the file cannot be opened."
  },
  {
    "id": 434,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n\n    if (!file.is_open()) {\n        throw std::runtime_error(\"Unable to open file\");\n    }\n\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n\n    file.close();\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 435,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 436,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    } else {\n        std::cerr << \"Unable to open file for writing: \" << filePath << std::endl;\n    }\n}\n```",
    "summary": "Writes a string to a specified file, creating the file if it does not exist."
  },
  {
    "id": 437,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success or false on failure."
  },
  {
    "id": 438,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile.is_open()) {\n        return false;\n    }\n    outFile << content;\n    outFile.close();\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 439,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourceFile, const std::string& destinationFile) {\n    std::ifstream src(sourceFile, std::ios::binary);\n    std::ofstream dest(destinationFile, std::ios::binary);\n\n    if (!src || !dest) {\n        return false;\n    }\n\n    dest << src.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the contents of a source file to a destination file, returning false if either file cannot be opened."
  },
  {
    "id": 440,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToTextFile(const std::string& filename, const std::string& content) {\n    std::ofstream outfile(filename);\n    if (!outfile.is_open()) {\n        return false;\n    }\n    outfile << content;\n    return true;\n}\n```",
    "summary": "Writes the given content to a specified text file, returning true on success and false on failure."
  },
  {
    "id": 441,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& fileName, const std::string& content) {\n    std::ofstream file(fileName);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes a string to a specified file and returns true if successful, otherwise false."
  },
  {
    "id": 442,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 443,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes the given content to a specified file and returns true if successful, otherwise false."
  },
  {
    "id": 444,
    "code": "```cpp\n#include <fstream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file and returns them as a vector of strings."
  },
  {
    "id": 445,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        std::cerr << \"Error opening file for writing: \" << filename << std::endl;\n        return false;\n    }\n    outFile << content;\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning false if the file cannot be opened."
  },
  {
    "id": 446,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid copyFileContent(const std::string &sourceFile, const std::string &destinationFile) {\n    std::ifstream source(sourceFile, std::ios::binary);\n    std::ofstream destination(destinationFile, std::ios::binary);\n    \n    if (!source || !destination) {\n        throw std::runtime_error(\"Error opening files.\");\n    }\n\n    destination << source.rdbuf();\n}\n```",
    "summary": "Copies the content of a source file to a destination file using binary mode."
  },
  {
    "id": 447,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 448,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file, creating or overwriting the file, and returns true if successful."
  },
  {
    "id": 449,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid countWordsInFile(const std::string& filename) {\n    std::ifstream file(filename);\n    if (!file.is_open()) {\n        std::cerr << \"Error opening file: \" << filename << std::endl;\n        return;\n    }\n    std::string word;\n    unsigned int wordCount = 0;\n    while (file >> word) {\n        ++wordCount;\n    }\n    file.close();\n    std::cout << \"Total number of words in file '\" << filename << \"': \" << wordCount << std::endl;\n}\n```",
    "summary": "Counts and prints the number of words in a specified file."
  },
  {
    "id": 450,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    } else {\n        std::cerr << \"Unable to open file for writing.\" << std::endl;\n    }\n}\n```",
    "summary": "Writes a given string to a specified file, creating the file if it does not exist."
  },
  {
    "id": 451,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid copyFileContent(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n\n    if (!sourceFile) {\n        std::cerr << \"Error opening source file.\\n\";\n        return;\n    }\n    if (!destinationFile) {\n        std::cerr << \"Error opening destination file.\\n\";\n        return;\n    }\n\n    destinationFile << sourceFile.rdbuf();\n    \n    sourceFile.close();\n    destinationFile.close();\n}\n```",
    "summary": "Copies the content from a source file to a destination file in binary mode."
  },
  {
    "id": 452,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 453,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings and returns it."
  },
  {
    "id": 454,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file and returns them as a vector of strings."
  },
  {
    "id": 455,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid appendLineToFile(const std::string& filename, const std::string& line) {\n    std::ofstream file(filename, std::ios::app);\n    if (!file.is_open()) {\n        std::cerr << \"Failed to open the file for appending.\" << std::endl;\n        return;\n    }\n    file << line << std::endl;\n    file.close();\n}\n```",
    "summary": "Appends a given line of text to the end of a specified file, creating the file if it does not exist."
  },
  {
    "id": 456,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream file(filePath);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes a given string to a specified file, returning true if successful, false otherwise."
  },
  {
    "id": 457,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 458,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n        return true;\n    }\n    return false;\n}\n```",
    "summary": "Writes the provided content to a specified file, returning true on success and false on failure."
  },
  {
    "id": 459,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads a text file line by line into a vector of strings, returning the vector."
  },
  {
    "id": 460,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile.is_open()) {\n        return false;\n    }\n    outFile << content;\n    outFile.close();\n    return true;\n}\n```",
    "summary": "Writes a string to a specified file and returns true if successful, false otherwise."
  },
  {
    "id": 461,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings, each representing a line from the file."
  },
  {
    "id": 462,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFile(const std::string& sourcePath, const std::string& destPath) {\n    std::ifstream source(sourcePath, std::ios::binary);\n    std::ofstream dest(destPath, std::ios::binary);\n\n    if (!source || !dest) {\n        return false;\n    }\n\n    dest << source.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the contents of a source file to a destination file, returning false if either file cannot be opened."
  },
  {
    "id": 463,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file) {\n        std::cerr << \"Error opening file for writing: \" << filename << std::endl;\n        return;\n    }\n    file << content;\n    if (!file) {\n        std::cerr << \"Error writing to file: \" << filename << std::endl;\n    }\n}\n```",
    "summary": "Writes the specified content to a file, outputting an error message if the file cannot be opened or written to."
  },
  {
    "id": 464,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 465,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 466,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile.is_open()) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes a given string to a specified file, returning true if successful, otherwise false."
  },
  {
    "id": 467,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outfile(filename);\n    if (!outfile.is_open()) {\n        return false;\n    }\n    outfile << content;\n    outfile.close();\n    return true;\n}\n```",
    "summary": "Writes the given string content to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 468,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> ReadLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 469,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file and returns them as a vector of strings."
  },
  {
    "id": 470,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 471,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& fileName) {\n    std::vector<std::string> lines;\n    std::ifstream file(fileName);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings."
  },
  {
    "id": 472,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool appendToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename, std::ios::app);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Appends a given string to the end of a specified file, returning true if successful, false otherwise."
  },
  {
    "id": 473,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToTextFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile.is_open()) {\n        return false;\n    }\n    outFile << content;\n    outFile.close();\n    return true;\n}\n```",
    "summary": "Writes the specified content to a text file at the given file path, returning true if successful."
  },
  {
    "id": 474,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 475,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes a string to a file specified by filename; returns true on success and false if the file cannot be opened."
  },
  {
    "id": 476,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    \n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 477,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the given content to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 478,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 479,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 480,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string &filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings."
  },
  {
    "id": 481,
    "code": "#include <fstream>\n#include <string>\n\nbool appendTextToFile(const std::string& filePath, const std::string& text) {\n    std::ofstream outFile(filePath, std::ios::app);\n    if (!outFile) {\n        return false;\n    }\n    outFile << text;\n    return true;\n}",
    "summary": "Appends text to the end of a specified file, returning false if the file cannot be opened."
  },
  {
    "id": 482,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 483,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& filename, const std::string& text) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << text;\n    return true;\n}\n```",
    "summary": "Writes the provided text to a file specified by filename, returning true on success or false if the file cannot be opened."
  },
  {
    "id": 484,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nbool readLinesFromFile(const std::string& filename, std::vector<std::string>& lines) {\n    std::ifstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n\n    file.close();\n    return true;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings, returning true if successful or false if the file cannot be opened."
  },
  {
    "id": 485,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool appendLineToFile(const std::string& filePath, const std::string& line) {\n    std::ofstream file(filePath, std::ios::app);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << line << '\\n';\n    return true;\n}\n```",
    "summary": "Appends a given line to the specified file, creating the file if it doesn't exist."
  },
  {
    "id": 486,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& fileName, const std::string& content) {\n    std::ofstream outFile(fileName);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    } else {\n        std::cerr << \"Unable to open file for writing: \" << fileName << std::endl;\n    }\n}\n```",
    "summary": "Writes a given string to a specified file, creating or overwriting it as needed."
  },
  {
    "id": 487,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    \n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 488,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    } else {\n        std::cerr << \"Unable to open file for writing: \" << filename << std::endl;\n    }\n}\n```",
    "summary": "Writes a string to a specified file, creating the file if it does not exist."
  },
  {
    "id": 489,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 490,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file and returns them as a vector of strings."
  },
  {
    "id": 491,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by `filePath` and returns them as a vector of strings."
  },
  {
    "id": 492,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes a given string content to a specified file, returning true if successful and false if an error occurs."
  },
  {
    "id": 493,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes a string to a specified file, returning true on success and false on failure."
  },
  {
    "id": 494,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <iostream>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes the given content to a specified file, returning true if successful and false if the file cannot be opened."
  },
  {
    "id": 495,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 496,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    if (!sourceFile.is_open()) {\n        return false;\n    }\n\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n    if (!destinationFile.is_open()) {\n        return false;\n    }\n\n    destinationFile << sourceFile.rdbuf();\n\n    return true;\n}\n```",
    "summary": "Copies the contents of one file to another specified file path, returning false if any file cannot be opened."
  },
  {
    "id": 497,
    "code": "#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}",
    "summary": "Writes a given string to a file, returning true on success or false if the file cannot be opened."
  },
  {
    "id": 498,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool appendLineToFile(const std::string& fileName, const std::string& lineToAppend) {\n    std::ofstream file(fileName, std::ios_base::app);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << lineToAppend << std::endl;\n    return true;\n}\n```",
    "summary": "Appends a line to the end of a specified file, creating the file if it doesn't exist."
  },
  {
    "id": 499,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream file(filePath);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the given content to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 500,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> ReadLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 501,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false; // Failed to open the file\n    }\n    outFile << content;\n    return true;\n}\n```",
    "summary": "Writes the given content to a specified file, returning true if successful and false if the file cannot be opened."
  },
  {
    "id": 502,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool WriteStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 503,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes the given content to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 504,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string &filename, const std::string &content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, returning true if successful."
  },
  {
    "id": 505,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 506,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& fileName, const std::string& content) {\n    std::ofstream file(fileName);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes the specified content to a file, returning true if successful, otherwise false."
  },
  {
    "id": 507,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    \n    if (!file.is_open()) {\n        throw std::runtime_error(\"Could not open file\");\n    }\n    \n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    \n    file.close();\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings, throwing an exception if the file cannot be opened."
  },
  {
    "id": 508,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads a file and returns its content as a vector of strings, where each element is a line from the file."
  },
  {
    "id": 509,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream file(filePath);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 510,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    } else {\n        std::cerr << \"Unable to open file: \" << filename << std::endl;\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings and returns it."
  },
  {
    "id": 511,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 512,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 513,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <iostream>\n\nbool copyFile(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    if (!sourceFile) {\n        return false;\n    }\n\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n    if (!destinationFile) {\n        return false;\n    }\n    \n    destinationFile << sourceFile.rdbuf();\n    \n    return sourceFile && destinationFile;\n}\n```",
    "summary": "The function `copyFile` copies the contents of a source file to a destination file, returning true if successful."
  },
  {
    "id": 514,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 515,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourcePath, const std::string& destPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destFile(destPath, std::ios::binary);\n    if (!sourceFile || !destFile) {\n        return false; // Return false if files couldn't be opened\n    }\n    destFile << sourceFile.rdbuf(); // Copy contents\n    return true;\n}\n```",
    "summary": "Copies the contents of a file from `sourcePath` to `destPath` and returns true if successful."
  },
  {
    "id": 516,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings."
  },
  {
    "id": 517,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& fileName, const std::string& content) {\n    std::ofstream outFile(fileName);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes a string to a specified file and returns true if successful, otherwise false."
  },
  {
    "id": 518,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes a string to a specified file and returns true if successful, otherwise false."
  },
  {
    "id": 519,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLines(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings, returning the vector."
  },
  {
    "id": 520,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToTextFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n        return true;\n    }\n    return false;\n}\n```",
    "summary": "Writes the specified content to a text file and returns true if successful, false otherwise."
  },
  {
    "id": 521,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 522,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the given content to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 523,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes a given string content to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 524,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 525,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    } else {\n        std::cerr << \"Unable to open file for writing\";\n    }\n}\n```",
    "summary": "Writes a given string to a specified file, creating the file if it does not exist."
  },
  {
    "id": 526,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return true;\n}\n```",
    "summary": "Writes a given string to a file specified by the filename, returning true on success or false if the file cannot be opened."
  },
  {
    "id": 527,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string &filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file and returns them as a vector of strings."
  },
  {
    "id": 528,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    \n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 529,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    } else {\n        std::cerr << \"Unable to open file for writing.\" << std::endl;\n    }\n}\n```",
    "summary": "Writes a given string to a specified file, creating the file if it does not exist."
  },
  {
    "id": 530,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 531,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    \n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "This function reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 532,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    \n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 533,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFile(const std::string& srcPath, const std::string& destPath) {\n    std::ifstream srcFile(srcPath, std::ios::binary);\n    if (!srcFile) return false;\n    \n    std::ofstream destFile(destPath, std::ios::binary);\n    if (!destFile) return false;\n    \n    destFile << srcFile.rdbuf();\n    \n    return true;\n}\n```",
    "summary": "Copies the contents of a source file to a destination file, returning true on success."
  },
  {
    "id": 534,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 535,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes content to a specified file and returns true if successful, false otherwise."
  },
  {
    "id": 536,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 537,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes the given content to a file with the specified filename, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 538,
    "code": "```cpp\n#include <fstream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 539,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes a given string content to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 540,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "This function writes a given string content to a file specified by its filename, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 541,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings, returning the vector."
  },
  {
    "id": 542,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by `filePath` and returns them as a vector of strings."
  },
  {
    "id": 543,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings and returns it."
  },
  {
    "id": 544,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings and returns it."
  },
  {
    "id": 545,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToTextFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath, std::ios::out);\n    if (!outFile) {\n        return false; // File could not be opened\n    }\n    outFile << content;\n    return true; // Write operation successful\n}\n```",
    "summary": "Writes the given content to a specified text file, returning true if successful, false otherwise."
  },
  {
    "id": 546,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by filename and returns them as a vector of strings."
  },
  {
    "id": 547,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by `filePath` into a vector of strings."
  },
  {
    "id": 548,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string &filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by the filename and returns them as a vector of strings."
  },
  {
    "id": 549,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 550,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 551,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 552,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    \n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings and returns it."
  },
  {
    "id": 553,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid countWordsInFile(const std::string& filename) {\n    std::ifstream file(filename);\n    if (!file) {\n        std::cerr << \"Unable to open file: \" << filename << std::endl;\n        return;\n    }\n    \n    std::string word;\n    int wordCount = 0;\n    while (file >> word) {\n        ++wordCount;\n    }\n\n    file.close();\n    std::cout << \"Total words in file: \" << wordCount << std::endl;\n}\n```",
    "summary": "This function counts the number of words in a specified file and prints the total count."
  },
  {
    "id": 554,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool appendLineToFile(const std::string& filename, const std::string& line) {\n    std::ofstream file(filename, std::ios::app);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << line << std::endl;\n    return true;\n}\n```",
    "summary": "Appends a line to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 555,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the provided string content to a file specified by the filename, returning true if successful, false otherwise."
  },
  {
    "id": 556,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file and returns true if successful, false otherwise."
  },
  {
    "id": 557,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 558,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes a string to a specified file and returns true if successful, otherwise returns false."
  },
  {
    "id": 559,
    "code": "#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& filename, const std::string& text) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << text;\n    return file.good();\n}",
    "summary": "Writes a given string to a specified file, returning true on success and false on failure."
  },
  {
    "id": 560,
    "code": "#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 561,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "This function reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 562,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 563,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes the specified content to a file at the given file path, returning true if successful."
  },
  {
    "id": 564,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid appendLineToFile(const std::string& filePath, const std::string& line) {\n    std::ofstream file(filePath, std::ios::app);\n    if (file.is_open()) {\n        file << line << std::endl;\n        file.close();\n    }\n}\n```",
    "summary": "Appends a line of text to the end of a specified file."
  },
  {
    "id": 565,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 566,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings."
  },
  {
    "id": 567,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings and returns it."
  },
  {
    "id": 568,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    \n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 569,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file and returns them as a vector of strings."
  },
  {
    "id": 570,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the given content to a file with the specified filename, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 571,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string &filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings, returning the vector."
  },
  {
    "id": 572,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile.is_open()) {\n        return false;\n    }\n    outFile << content;\n    outFile.close();\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 573,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 574,
    "code": "```cpp\n#include <fstream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 575,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToTextFile(const std::string& filePath, const std::string& content) {\n    std::ofstream file(filePath);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes the specified content to a text file and returns true if successful, otherwise false."
  },
  {
    "id": 576,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile) {\n        return false; // File opening failed\n    }\n    outFile << content;\n    outFile.close();\n    return true; // File written successfully\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success and false on failure."
  },
  {
    "id": 577,
    "code": "```cpp\n#include <fstream>\n#include <iostream>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings and returns it."
  },
  {
    "id": 578,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourceFile, const std::string& destinationFile) {\n    std::ifstream src(sourceFile, std::ios::binary);\n    std::ofstream dest(destinationFile, std::ios::binary);\n    \n    if (!src || !dest) {\n        return false; // Return false if either file fails to open\n    }\n    \n    dest << src.rdbuf(); // Copy contents from source to destination\n    return true;\n}\n```",
    "summary": "Copies the contents of one file to another using binary mode, returning true on success and false on failure."
  },
  {
    "id": 579,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings and returns it."
  },
  {
    "id": 580,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n\n    if (!sourceFile || !destinationFile) {\n        return false;\n    }\n\n    destinationFile << sourceFile.rdbuf();\n\n    return sourceFile && destinationFile;\n}\n```",
    "summary": "Copies the contents of one file to another, returning true if successful, or false if an error occurs."
  },
  {
    "id": 581,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by filename and returns them as a vector of strings."
  },
  {
    "id": 582,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToTextFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified text file, returning true on success or false if the file cannot be opened."
  },
  {
    "id": 583,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    }\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, creating or overwriting the file as necessary."
  },
  {
    "id": 584,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) return false;\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, returning true if successful."
  },
  {
    "id": 585,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, returning true on success and false on failure."
  },
  {
    "id": 586,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes a given string to a specified file and returns whether the operation was successful."
  },
  {
    "id": 587,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning false if the file cannot be opened."
  },
  {
    "id": 588,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid countLinesInFile(const std::string& filename) {\n    std::ifstream file(filename);\n    if (!file.is_open()) {\n        std::cerr << \"Error opening file: \" << filename << std::endl;\n        return;\n    }\n\n    std::string line;\n    int lineCount = 0;\n    while (std::getline(file, line)) {\n        ++lineCount;\n    }\n\n    file.close();\n    std::cout << \"Total lines in file: \" << lineCount << std::endl;\n}\n```",
    "summary": "This function counts and prints the number of lines in a specified file."
  },
  {
    "id": 589,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "This function writes a given string to a file specified by filename and returns true if successful."
  },
  {
    "id": 590,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, returning true on success and false on failure."
  },
  {
    "id": 591,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 592,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 593,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    \n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 594,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string &filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings and returns it."
  },
  {
    "id": 595,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 596,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes a given string to a specified file and returns true if successful, otherwise false."
  },
  {
    "id": 597,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename, std::ios::out | std::ios::trunc);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    }\n}\n```",
    "summary": "Writes the given content to a specified file, overwriting any existing data."
  },
  {
    "id": 598,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 599,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filepath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filepath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by the filepath and returns them as a vector of strings."
  },
  {
    "id": 600,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by `filePath` and returns them as a vector of strings."
  },
  {
    "id": 601,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 602,
    "code": "```cpp\n#include <fstream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 603,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified text file into a vector of strings."
  },
  {
    "id": 604,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true if successful, false otherwise."
  },
  {
    "id": 605,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid countLinesInFile(const std::string& filename) {\n    std::ifstream file(filename);\n    if (!file.is_open()) {\n        std::cerr << \"Unable to open file: \" << filename << std::endl;\n        return;\n    }\n\n    std::string line;\n    int lineCount = 0;\n    while (std::getline(file, line)) {\n        ++lineCount;\n    }\n\n    file.close();\n    std::cout << \"Number of lines in the file: \" << lineCount << std::endl;\n}\n```",
    "summary": "Counts and prints the number of lines in a specified text file."
  },
  {
    "id": 606,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads a text file line by line and returns a vector containing each line as a string."
  },
  {
    "id": 607,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads a file line by line and returns the lines as a vector of strings."
  },
  {
    "id": 608,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings and returns it."
  },
  {
    "id": 609,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile.is_open()) {\n        return false;\n    }\n    outFile << content;\n    return true;\n}\n```",
    "summary": "Writes a given string to a file, returning true on success and false on failure to open the file."
  },
  {
    "id": 610,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 611,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string &fileName, const std::string &content) {\n    std::ofstream file(fileName);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    }\n}\n```",
    "summary": "Writes the specified content to a file with the given name, creating or overwriting the file."
  },
  {
    "id": 612,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToTextFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "This function writes a given string to a text file and returns true on success or false if the file cannot be opened."
  },
  {
    "id": 613,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 614,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 615,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n\n    if (!sourceFile || !destinationFile) {\n        return false;\n    }\n\n    destinationFile << sourceFile.rdbuf();\n\n    return true;\n}\n```",
    "summary": "Copies the contents of a source file to a destination file, returning true on success and false on failure."
  },
  {
    "id": 616,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContent(const std::string& sourceFile, const std::string& destinationFile) {\n    std::ifstream source(sourceFile, std::ios::binary);\n    std::ofstream dest(destinationFile, std::ios::binary);\n\n    if (!source || !dest) {\n        return false; // Return false if either file cannot be opened\n    }\n\n    dest << source.rdbuf(); // Copy content from source to destination\n    return true;\n}\n```",
    "summary": "Copies the content of a source file to a destination file, returning false if either file cannot be opened."
  },
  {
    "id": 617,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile.is_open()) {\n        return false;\n    }\n    outFile << content;\n    outFile.close();\n    return true;\n}\n```",
    "summary": "Writes a string to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 618,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings and returns it."
  },
  {
    "id": 619,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourceFilePath, const std::string& destinationFilePath) {\n    std::ifstream sourceFile(sourceFilePath, std::ios::binary);\n    if (!sourceFile) {\n        return false; // Failed to open source file\n    }\n  \n    std::ofstream destinationFile(destinationFilePath, std::ios::binary);\n    if (!destinationFile) {\n        return false; // Failed to open destination file\n    }\n  \n    destinationFile << sourceFile.rdbuf(); // Copy contents\n    return true;\n}\n```",
    "summary": "Copies the contents of a source file to a destination file, returning true on success and false on failure."
  },
  {
    "id": 620,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& filePath, const std::string& text) {\n    std::ofstream outFile(filePath);\n    if (!outFile) {\n        return false;\n    }\n    outFile << text;\n    return true;\n}\n```",
    "summary": "Writes the provided text to a file at the specified file path, returning true on success and false on failure."
  },
  {
    "id": 621,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 622,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& filename, const std::string& text) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << text;\n    return outFile.good();\n}\n```",
    "summary": "Writes a string to a specified file and returns true if successful, false otherwise."
  },
  {
    "id": 623,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeTextToFile(const std::string& filename, const std::string& text) {\n    std::ofstream outFile(filename);\n    if (outFile.is_open()) {\n        outFile << text;\n        outFile.close();\n    }\n}\n```",
    "summary": "Writes the provided text to a specified file, creating or overwriting the file if necessary."
  },
  {
    "id": 624,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    \n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 625,
    "code": "#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}",
    "summary": "Writes the provided content to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 626,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings."
  },
  {
    "id": 627,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes a given string to a specified file and returns true if the operation is successful, false otherwise."
  },
  {
    "id": 628,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes the given string content to a specified file, returning true if successful, otherwise false."
  },
  {
    "id": 629,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings and returns it."
  },
  {
    "id": 630,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the given content to a specified file, returning true if successful or false if the file cannot be opened."
  },
  {
    "id": 631,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid appendLineToFile(const std::string& filename, const std::string& line) {\n    std::ofstream file(filename, std::ios::app);\n    if (file.is_open()) {\n        file << line << std::endl;\n        file.close();\n    } else {\n        std::cerr << \"Unable to open file for appending.\" << std::endl;\n    }\n}\n```",
    "summary": "Appends a single line of text to the end of a specified file, creating the file if it does not exist."
  },
  {
    "id": 632,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n\n    if (!file.is_open()) {\n        throw std::runtime_error(\"Could not open file: \" + filePath);\n    }\n\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n\n    file.close();\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings, throwing an error if the file cannot be opened."
  },
  {
    "id": 633,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 634,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n#include <stdexcept>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    if (!file.is_open()) {\n        throw std::runtime_error(\"Unable to open file: \" + filePath);\n    }\n\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n\n    file.close();\n    return lines;\n}\n```",
    "summary": "This function reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 635,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    \n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 636,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by 'filename' and returns them as a vector of strings."
  },
  {
    "id": 637,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "This function writes a given string to a specified file, returning a boolean to indicate success or failure of the operation."
  },
  {
    "id": 638,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream file(filePath);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes the given string content to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 639,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes the given content to a file specified by the filename, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 640,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string &filename, const std::string &content) {\n    std::ofstream outFile(filename);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    } else {\n        std::cerr << \"Unable to open file for writing: \" << filename << std::endl;\n    }\n}\n```",
    "summary": "Writes the provided content to a file specified by the filename, and outputs an error message if the file cannot be opened."
  },
  {
    "id": 641,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nstd::string readFirstLine(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::string firstLine;\n    if (file.is_open()) {\n        std::getline(file, firstLine);\n        file.close();\n    }\n    return firstLine;\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 642,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& data) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << data;\n    return file.good();\n}\n```",
    "summary": "Writes the provided string data to a specified file, returning true on success and false on failure."
  },
  {
    "id": 643,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    } else {\n        throw std::ios_base::failure(\"Failed to open file for writing.\");\n    }\n}\n```",
    "summary": "This function writes a given string content to a specified file, throwing an exception if the file cannot be opened."
  },
  {
    "id": 644,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourceFilePath, const std::string& destinationFilePath) {\n    std::ifstream sourceFile(sourceFilePath, std::ios::binary);\n    std::ofstream destinationFile(destinationFilePath, std::ios::binary);\n    \n    if (!sourceFile.is_open() || !destinationFile.is_open()) {\n        return false;\n    }\n    \n    destinationFile << sourceFile.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the contents of a source file to a destination file, returning true if successful."
  },
  {
    "id": 645,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes a string to a file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 646,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true if successful and false if the file cannot be opened."
  },
  {
    "id": 647,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    \n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by `filePath` and returns them as a vector of strings."
  },
  {
    "id": 648,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream file(filePath);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes the given content to a specified file and returns true on success, false if the file cannot be opened."
  },
  {
    "id": 649,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFile(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    if (!sourceFile) {\n        return false; // Source file could not be opened\n    }\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n    if (!destinationFile) {\n        return false; // Destination file could not be opened\n    }\n    destinationFile << sourceFile.rdbuf();\n    return true; // File copied successfully\n}\n```",
    "summary": "Copies the contents of a source file to a destination file, returning false if either file cannot be opened."
  },
  {
    "id": 650,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& fileName, const std::string& content) {\n    std::ofstream outFile(fileName, std::ios::out);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    }\n}\n```",
    "summary": "Writes the provided content to a specified file, creating or overwriting the file if it exists."
  },
  {
    "id": 651,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 652,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n\n    if (!file.is_open()) {\n        throw std::runtime_error(\"Could not open file.\");\n    }\n\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n\n    file.close();\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 653,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream infile(filename);\n    std::string line;\n    while (std::getline(infile, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 654,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> ReadLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 655,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToTextFile(const std::string& filePath, const std::string& content) {\n    std::ofstream file(filePath);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the given content to a specified text file, returning true if successful."
  },
  {
    "id": 656,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool appendLineToFile(const std::string& filename, const std::string& lineContent) {\n    std::ofstream file(filename, std::ios::app);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << lineContent << \"\\n\";\n    return true;\n}\n```",
    "summary": "Appends a line of text to the end of a specified file, creating the file if it does not exist."
  },
  {
    "id": 657,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return true;\n}\n```",
    "summary": "This function writes a given string to a specified file and returns true if successful, otherwise false."
  },
  {
    "id": 658,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 659,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 660,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid copyFileContents(const std::string& sourceFilePath, const std::string& destinationFilePath) {\n    std::ifstream sourceFile(sourceFilePath, std::ios::binary);\n    std::ofstream destinationFile(destinationFilePath, std::ios::binary);\n\n    if (!sourceFile || !destinationFile) {\n        throw std::ios_base::failure(\"Failed to open source or destination file.\");\n    }\n\n    destinationFile << sourceFile.rdbuf();\n}\n```",
    "summary": "Copies the contents of one file to another using binary mode for accurate data transfer."
  },
  {
    "id": 661,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 662,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& fileName, const std::string& content) {\n    std::ofstream outFile(fileName);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    } else {\n        std::cerr << \"Unable to open file for writing: \" << fileName << std::endl;\n    }\n}\n```",
    "summary": "Writes the specified content to a file, creating it if it doesn't exist, and handles file opening errors."
  },
  {
    "id": 663,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <stdexcept>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile.is_open()) {\n        throw std::runtime_error(\"Could not open file for writing\");\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes the given content to a specified file, returning true if successful and throwing an exception if the file cannot be opened."
  },
  {
    "id": 664,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContent(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n\n    if (!sourceFile || !destinationFile) {\n        return false; // Return false if opening any file fails\n    }\n\n    destinationFile << sourceFile.rdbuf(); // Copy data from source to destination\n    return true;\n}\n```",
    "summary": "Copies the contents of a source file to a destination file and returns false if either file cannot be opened."
  },
  {
    "id": 665,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 666,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid appendLineToFile(const std::string& filename, const std::string& line) {\n    std::ofstream file(filename, std::ios::app);\n    if (file.is_open()) {\n        file << line << '\\n';\n        file.close();\n    }\n}\n```",
    "summary": "Appends a given line of text to the end of a specified file, creating the file if it does not exist."
  },
  {
    "id": 667,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 668,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 669,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 670,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string &filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings and returns it."
  },
  {
    "id": 671,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        std::cerr << \"Error opening file for writing: \" << filename << std::endl;\n        return;\n    }\n    outFile << content;\n    if (!outFile) {\n        std::cerr << \"Error writing to file: \" << filename << std::endl;\n    }\n    outFile.close();\n}\n```",
    "summary": "Writes a given string content to a specified file, handling potential errors during the process."
  },
  {
    "id": 672,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings."
  },
  {
    "id": 673,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourcePath, const std::string& destPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destFile(destPath, std::ios::binary);\n\n    if (!sourceFile || !destFile) {\n        return false;\n    }\n\n    destFile << sourceFile.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the contents of a source file to a destination file, returning false if either file cannot be opened."
  },
  {
    "id": 674,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes a string to a specified file, returning true if successful and false otherwise."
  },
  {
    "id": 675,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file and returns them as a vector of strings."
  },
  {
    "id": 676,
    "code": "```cpp\n#include <fstream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> readFileLines(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "This function reads a file and returns its contents as a vector of strings, with each element representing a line from the file."
  },
  {
    "id": 677,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile.is_open()) {\n        return false;\n    }\n    outFile << content;\n    outFile.close();\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 678,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 679,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the given content to a file specified by the filename, returning true on success and false on failure."
  },
  {
    "id": 680,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    \n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 681,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 682,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid copyFileContents(const std::string& sourcePath, const std::string& destPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destFile(destPath, std::ios::binary);\n\n    if (!sourceFile.is_open() || !destFile.is_open()) {\n        std::cerr << \"Error opening files.\" << std::endl;\n        return;\n    }\n\n    destFile << sourceFile.rdbuf();\n\n    sourceFile.close();\n    destFile.close();\n}\n```",
    "summary": "Copies the contents of one file to another by reading from the source file and writing to the destination file."
  },
  {
    "id": 683,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes a string to a specified file and returns true if successful, false otherwise."
  },
  {
    "id": 684,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true if successful, false otherwise."
  },
  {
    "id": 685,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid appendLineToFile(const std::string& filename, const std::string& line) {\n    std::ofstream file(filename, std::ios::app);\n    if (file.is_open()) {\n        file << line << std::endl;\n        file.close();\n    }\n}\n```",
    "summary": "Appends a line of text to the end of a specified file, creating the file if it does not exist."
  },
  {
    "id": 686,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 687,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by the filename and returns them as a vector of strings."
  },
  {
    "id": 688,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    \n    if (!file.is_open()) {\n        throw std::runtime_error(\"Could not open file: \" + filename);\n    }\n    \n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    \n    file.close();\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings, throwing an error if the file cannot be opened."
  },
  {
    "id": 689,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    \n    if (file.is_open()) {\n        while (getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 690,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filePath, const std::string& data) {\n    std::ofstream outFile(filePath);\n    if (!outFile) {\n        return false;\n    }\n    outFile << data;\n    return outFile.good();\n}\n```",
    "summary": "Writes a string to a specified file, returning true on success or false if the file cannot be opened."
  },
  {
    "id": 691,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream file(filePath);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success and false if the file could not be opened."
  },
  {
    "id": 692,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the given content to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 693,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false; // Failed to open file\n    }\n    outFile << content;\n    return true; // Successfully wrote to file\n}\n```",
    "summary": "Writes a string to a specified file and returns true if successful, false otherwise."
  },
  {
    "id": 694,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes a string to a specified file and returns true if successful, otherwise false."
  },
  {
    "id": 695,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by the file path and returns them as a vector of strings."
  },
  {
    "id": 696,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success or false if the file cannot be opened."
  },
  {
    "id": 697,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeToTextFile(const std::string& fileName, const std::string& content) {\n    std::ofstream file(fileName);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    }\n}\n```",
    "summary": "Writes a given string to a specified text file, overwriting its contents if the file already exists."
  },
  {
    "id": 698,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outfile(filename);\n    if (outfile.is_open()) {\n        outfile << content;\n        outfile.close();\n    } else {\n        std::cerr << \"Unable to open file for writing: \" << filename << std::endl;\n    }\n}\n```",
    "summary": "Writes a given string to a specified file, creating or overwriting the file if it exists."
  },
  {
    "id": 699,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    } else {\n        std::cerr << \"Unable to open file for writing: \" << filename << std::endl;\n    }\n}\n```",
    "summary": "Writes the specified content to a file, creating the file if it does not exist, and outputs an error if the file cannot be opened."
  },
  {
    "id": 700,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    \n    if (!file) {\n        throw std::runtime_error(\"Unable to open file\");\n    }\n    \n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    \n    file.close();\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings, throwing an exception if the file cannot be opened."
  },
  {
    "id": 701,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid copyFileContents(const std::string &sourceFile, const std::string &destinationFile) {\n    std::ifstream src(sourceFile, std::ios::binary);\n    std::ofstream dest(destinationFile, std::ios::binary);\n    \n    if (!src || !dest) {\n        std::cerr << \"Error opening files.\" << std::endl;\n        return;\n    }\n    \n    dest << src.rdbuf();\n}\n```",
    "summary": "Copies the contents of one file to another using binary mode file streams."
  },
  {
    "id": 702,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 703,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 704,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream file(filePath);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file path, returning false if the file cannot be opened."
  },
  {
    "id": 705,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n#include <iostream>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    } else {\n        std::cerr << \"Unable to open file: \" << filename << std::endl;\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings, returning the vector."
  },
  {
    "id": 706,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads a text file line by line and returns the contents as a vector of strings."
  },
  {
    "id": 707,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        std::cerr << \"Error opening file for writing: \" << filename << std::endl;\n        return;\n    }\n    file << content;\n    file.close();\n}\n```",
    "summary": "Writes specified content to a file, creating or overwriting the file if it already exists."
  },
  {
    "id": 708,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file, returning true on success or false if the file cannot be opened."
  },
  {
    "id": 709,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 710,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success and false on failure."
  },
  {
    "id": 711,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    }\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, creating or overwriting the file as needed."
  },
  {
    "id": 712,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 713,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true if successful or false if the file cannot be opened."
  },
  {
    "id": 714,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 715,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return true;\n}\n```",
    "summary": "Writes a string to a specified file and returns true if successful, otherwise returns false."
  },
  {
    "id": 716,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourcePath, const std::string& destPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destFile(destPath, std::ios::binary);\n    if (!sourceFile || !destFile) {\n        return false;\n    }\n    destFile << sourceFile.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the contents of one file to another, returning false if either file cannot be opened."
  },
  {
    "id": 717,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename, std::ios::out | std::ios::trunc);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, overwriting any existing content, and returns true on success or false on failure."
  },
  {
    "id": 718,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    }\n}\n```",
    "summary": "Writes a given string to a specified file, overwriting the file if it already exists."
  },
  {
    "id": 719,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) return false;\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes a string to a specified file, returning true on success and false on failure."
  },
  {
    "id": 720,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContent(const std::string& sourceFile, const std::string& destinationFile) {\n    std::ifstream src(sourceFile, std::ios::binary);\n    std::ofstream dst(destinationFile, std::ios::binary);\n    \n    if (!src.is_open() || !dst.is_open()) {\n        return false;\n    }\n    \n    dst << src.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the content from the source file to the destination file, returning true on success or false if either file cannot be opened."
  },
  {
    "id": 721,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 722,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, returning true if successful, false otherwise."
  },
  {
    "id": 723,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& filename, const std::string& text) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << text;\n    return file.good();\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 724,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success and false on failure."
  },
  {
    "id": 725,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n\n    if (!sourceFile || !destinationFile) {\n        return false;\n    }\n\n    destinationFile << sourceFile.rdbuf();\n    return true;\n}\n```",
    "summary": "This function copies the contents of one file to another file, returning true on success and false on failure."
  },
  {
    "id": 726,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    }\n}\n```",
    "summary": "Writes a given string content to a specified file, creating the file if it does not exist."
  },
  {
    "id": 727,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile.is_open()) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes a string to a specified file, returning true if successful and false otherwise."
  },
  {
    "id": 728,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string &filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 729,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <vector>\n#include <sstream>\n\nstd::vector<std::string> readCSVRow(const std::string& filename, int rowNumber) {\n    std::ifstream file(filename);\n    std::string line;\n    std::vector<std::string> rowData;\n    int currentRow = 0;\n    \n    while (std::getline(file, line)) {\n        if (currentRow == rowNumber) {\n            std::stringstream ss(line);\n            std::string cell;\n            while (std::getline(ss, cell, ',')) {\n                rowData.push_back(cell);\n            }\n            break;\n        }\n        currentRow++;\n    }\n    file.close();\n    return rowData;\n}\n```",
    "summary": "Reads a specific row from a CSV file and returns its cells as a vector of strings."
  },
  {
    "id": 730,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the given content to a specified file, returning true on success or false on failure."
  },
  {
    "id": 731,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool appendLineToFile(const std::string& filePath, const std::string& line) {\n    std::ofstream file(filePath, std::ios::app);\n    if (!file.is_open()) {\n        return false; // Return false if file couldn't be opened\n    }\n    file << line << '\\n';\n    return true; // Return true if line was successfully appended\n}\n```",
    "summary": "Appends a given line to the end of a specified file, returning true on success or false if the file cannot be opened."
  },
  {
    "id": 732,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool appendToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename, std::ios::app);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Appends a given string to the end of a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 733,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings."
  },
  {
    "id": 734,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 735,
    "code": "```cpp\n#include <fstream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 736,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 737,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes a given string to a specified file, returning true if successful and false otherwise."
  },
  {
    "id": 738,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes a given string content to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 739,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified text file and returns them as a vector of strings."
  },
  {
    "id": 740,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeFile(const std::string& filePath, const std::string& content) {\n    std::ofstream file(filePath);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes the provided content to a specified file, returning false if the file cannot be opened."
  },
  {
    "id": 741,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 742,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by the file path and returns them as a vector of strings."
  },
  {
    "id": 743,
    "code": "#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}",
    "summary": "Reads all lines from a given file and returns them as a vector of strings."
  },
  {
    "id": 744,
    "code": "#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return true;\n}",
    "summary": "Writes the specified content to a file and returns a success flag."
  },
  {
    "id": 745,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream file(filePath);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes a given string to a specified file, returning true if successful, and false if the file cannot be opened."
  },
  {
    "id": 746,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes a given string to a specified file and returns true if the operation is successful, otherwise false."
  },
  {
    "id": 747,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 748,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& filename, const std::string& text) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << text;\n    return file.good();\n}\n```",
    "summary": "Writes a given string to a specified file, returning true if successful, otherwise false."
  },
  {
    "id": 749,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 750,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 751,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by `filePath` into a vector of strings."
  },
  {
    "id": 752,
    "code": "#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file) {\n        std::cerr << \"Failed to open file for writing: \" << filename << std::endl;\n        return;\n    }\n    file << content;\n    if (file.fail()) {\n        std::cerr << \"Failed to write content to file: \" << filename << std::endl;\n    }\n    file.close();\n}",
    "summary": "Writes a given string content to a specified file, handling potential file opening and writing errors."
  },
  {
    "id": 753,
    "code": "```cpp\n#include <fstream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings and returns it."
  },
  {
    "id": 754,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads a file and returns its content as a vector of strings, each representing a line."
  },
  {
    "id": 755,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n\n    if (!sourceFile || !destinationFile) {\n        return false; // Failed to open files\n    }\n\n    destinationFile << sourceFile.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the contents of a source file to a destination file, returning true if successful."
  },
  {
    "id": 756,
    "code": "#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n\n    if (!sourceFile || !destinationFile) {\n        return false;\n    }\n\n    destinationFile << sourceFile.rdbuf();\n    return true;\n}",
    "summary": "This function copies the contents of one file to another file, returning true if successful and false otherwise."
  },
  {
    "id": 757,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 758,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n\n    return lines;\n}\n```",
    "summary": "This function reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 759,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string &filename, const std::string &content) {\n    std::ofstream file(filename);\n    if (!file) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "This function writes a given string to a specified file, returning true on success and false on failure."
  },
  {
    "id": 760,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 761,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes a string to a specified file, returning true if successful and false if an error occurs."
  },
  {
    "id": 762,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& fileName, const std::string& content) {\n    std::ofstream outFile(fileName);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes the given content to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 763,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, returning true on success and false on failure."
  },
  {
    "id": 764,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings and returns it."
  },
  {
    "id": 765,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    }\n}\n```",
    "summary": "Writes a given string to a specified file, overwriting any existing content."
  },
  {
    "id": 766,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 767,
    "code": "#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}",
    "summary": "Reads a file line by line and returns its contents as a vector of strings."
  },
  {
    "id": 768,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings and returns the vector."
  },
  {
    "id": 769,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    \n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 770,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outfile(filename);\n    if (outfile.is_open()) {\n        outfile << content;\n        outfile.close();\n    } else {\n        std::cerr << \"Unable to open file for writing: \" << filename << std::endl;\n    }\n}\n```",
    "summary": "Writes a given string to a specified file, creating or overwriting the file as necessary."
  },
  {
    "id": 771,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 772,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 773,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "This function writes a given string content to a specified file and returns true if successful, or false if an error occurs."
  },
  {
    "id": 774,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    }\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, creating or overwriting the file as needed."
  },
  {
    "id": 775,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 776,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& filename, const std::string& text) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << text;\n    return true;\n}\n```",
    "summary": "Writes the specified text to a file with the given filename, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 777,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid copyFileContents(const std::string& sourceFile, const std::string& destinationFile) {\n    std::ifstream src(sourceFile);\n    std::ofstream dest(destinationFile);\n\n    if (!src.is_open() || !dest.is_open()) {\n        std::cerr << \"Error opening files!\" << std::endl;\n        return;\n    }\n\n    std::string line;\n    while (std::getline(src, line)) {\n        dest << line << '\\n';\n    }\n}\n```",
    "summary": "Copies the contents of a source file to a destination file line by line."
  },
  {
    "id": 778,
    "code": "#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}",
    "summary": "Reads all lines from a given file and returns them as a vector of strings."
  },
  {
    "id": 779,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false; // Return false if file cannot be opened\n    }\n    outFile << content;\n    return true; // Return true on successful write\n}\n```",
    "summary": "Writes a string to a specified file and returns true if successful, false otherwise."
  },
  {
    "id": 780,
    "code": "#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile.is_open()) {\n        return false;\n    }\n    outFile << content;\n    outFile.close();\n    return true;\n}",
    "summary": "Writes the given text content to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 781,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid appendToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename, std::ios_base::app);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    } else {\n        std::cerr << \"Unable to open file for appending: \" << filename << std::endl;\n    }\n}\n```",
    "summary": "Appends a given string to the end of a specified file, creating the file if it does not exist."
  },
  {
    "id": 782,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile.is_open()) {\n        return false;\n    }\n    outFile << content;\n    return true;\n}\n```",
    "summary": "Writes a string to a specified file, returning false if the file cannot be opened."
  },
  {
    "id": 783,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true if successful and false if the file cannot be opened."
  },
  {
    "id": 784,
    "code": "```cpp\n#include <fstream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file and returns them as a vector of strings."
  },
  {
    "id": 785,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourceFile, const std::string& destinationFile) {\n    std::ifstream src(sourceFile, std::ios::binary);\n    std::ofstream dest(destinationFile, std::ios::binary);\n\n    if (!src.is_open() || !dest.is_open()) {\n        return false;\n    }\n\n    dest << src.rdbuf();\n\n    return src.good() && dest.good();\n}\n```",
    "summary": "Copies the contents of a source file to a destination file in binary mode, returning true on success."
  },
  {
    "id": 786,
    "code": "```cpp\n#include <fstream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n\n    if (!file.is_open()) {\n        throw std::runtime_error(\"Unable to open file: \" + filename);\n    }\n\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n\n    file.close();\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings, throwing an exception if the file cannot be opened."
  },
  {
    "id": 787,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 788,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid countLinesInFile(const std::string& filename) {\n    std::ifstream file(filename);\n    if (!file.is_open()) {\n        std::cerr << \"Unable to open file: \" << filename << std::endl;\n        return;\n    }\n\n    int lineCount = 0;\n    std::string line;\n    while (std::getline(file, line)) {\n        ++lineCount;\n    }\n    \n    file.close();\n    std::cout << \"Number of lines in \" << filename << \": \" << lineCount << std::endl;\n}\n```",
    "summary": "This function counts the number of lines in a specified file and outputs the result."
  },
  {
    "id": 789,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads lines from a file into a vector of strings and returns it."
  },
  {
    "id": 790,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes specified content to a file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 791,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file and returns true if successful, false otherwise."
  },
  {
    "id": 792,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 793,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by the filename into a vector of strings."
  },
  {
    "id": 794,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid appendTextToFile(const std::string& fileName, const std::string& text) {\n    std::ofstream outFile(fileName, std::ios::app);\n    if (outFile.is_open()) {\n        outFile << text;\n        outFile.close();\n    }\n}\n```",
    "summary": "Appends specified text to the end of a file, creating the file if it does not exist."
  },
  {
    "id": 795,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& filename, const std::string& text) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << text;\n    return file.good();\n}\n```",
    "summary": "Writes a given string to a specified file, returning true if successful and false if the file cannot be opened."
  },
  {
    "id": 796,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n\n    if (!sourceFile.is_open() || !destinationFile.is_open()) {\n        return false;\n    }\n\n    destinationFile << sourceFile.rdbuf();\n\n    return true;\n}\n```",
    "summary": "This function copies the contents of a source file to a destination file, returning true on success and false if either file cannot be opened."
  },
  {
    "id": 797,
    "code": "#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}",
    "summary": "Writes a given string to a specified file, returning true on success and false on failure."
  },
  {
    "id": 798,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string &sourcePath, const std::string &destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n\n    if (!sourceFile || !destinationFile) {\n        return false;\n    }\n\n    destinationFile << sourceFile.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies contents from a source file to a destination file in binary mode, returning false if the operation fails."
  },
  {
    "id": 799,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes the given content to a file, creating or overwriting the file, and returns true if successful."
  },
  {
    "id": 800,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContent(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n\n    if (!sourceFile || !destinationFile) {\n        return false;\n    }\n\n    destinationFile << sourceFile.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the content of a file from a source path to a destination path using binary mode."
  },
  {
    "id": 801,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 802,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    \n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 803,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& data) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false; // Return false if file creation fails\n    }\n    outFile << data;\n    outFile.close();\n    return true; // Return true if writing is successful\n}\n```",
    "summary": "This function writes a given string to a specified file and returns true if successful or false if the file cannot be created."
  },
  {
    "id": 804,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings, returning the vector."
  },
  {
    "id": 805,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 806,
    "code": "#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 807,
    "code": "#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    if (!sourceFile) {\n        return false;\n    }\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n    if (!destinationFile) {\n        return false;\n    }\n    destinationFile << sourceFile.rdbuf();\n    return true;\n}",
    "summary": "Copies the contents of a source file to a destination file, returning true on success and false on failure."
  },
  {
    "id": 808,
    "code": "#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}",
    "summary": "The function reads all lines from a given file and returns them as a vector of strings."
  },
  {
    "id": 809,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes the given content to a specified file, returning true if successful or false if an error occurs."
  },
  {
    "id": 810,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes a given string to a specified file and returns true if successful, otherwise false."
  },
  {
    "id": 811,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    outFile.close();\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file at the given file path, returning true on success and false on failure."
  },
  {
    "id": 812,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 813,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& fileName, const std::string& content) {\n    std::ofstream outFile(fileName);\n    if (!outFile) {\n        return false; // Return false if file cannot be opened\n    }\n    outFile << content;\n    return true; // Return true if write operation is successful\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 814,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes the provided content to a file with the specified filename, returning true on success and false if the file could not be opened."
  },
  {
    "id": 815,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes the specified content to a file, returning true if successful or false if the file cannot be opened."
  },
  {
    "id": 816,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads a file and returns a vector containing each line as a separate string."
  },
  {
    "id": 817,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "This function writes a string to a file specified by the filename, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 818,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 819,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings, returning the vector."
  },
  {
    "id": 820,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, returning true if successful."
  },
  {
    "id": 821,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename, std::ios::out | std::ios::trunc);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, replacing any existing content, and returns true if successful."
  },
  {
    "id": 822,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 823,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& fileName, const std::string& content) {\n    std::ofstream outFile(fileName);\n    if (!outFile.is_open()) {\n        return false;\n    }\n    outFile << content;\n    outFile.close();\n    return true;\n}\n```",
    "summary": "Writes specified content to a file and returns true on success, false if the file cannot be opened."
  },
  {
    "id": 824,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 825,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by `filePath` and returns them as a vector of strings."
  },
  {
    "id": 826,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    }\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, creating or overwriting the file if necessary."
  },
  {
    "id": 827,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from the specified file and returns them as a vector of strings."
  },
  {
    "id": 828,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings."
  },
  {
    "id": 829,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes a string to a specified file, returning true on success and false on failure."
  },
  {
    "id": 830,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filepath, const std::string& content) {\n    std::ofstream outFile(filepath);\n    if (!outFile.is_open()) {\n        return false;\n    }\n    outFile << content;\n    return true;\n}\n```",
    "summary": "This function writes a given string to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 831,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& fileName, const std::string& content) {\n    std::ofstream outFile(fileName);\n    if (!outFile) {\n        return false; // Return false if the file cannot be opened\n    }\n    outFile << content;\n    return true; // Return true if writing is successful\n}\n```",
    "summary": "Writes the specified content to a file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 832,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& filename, const std::string& text) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << text;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes a given text to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 833,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeTextToFile(const std::string& filename, const std::string& text) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << text;\n        file.close();\n    } else {\n        std::cerr << \"Unable to open file for writing: \" << filename << std::endl;\n    }\n}\n```",
    "summary": "Writes a given string to a specified file, creating or overwriting the file if necessary."
  },
  {
    "id": 834,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes specified content to a file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 835,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings, returning the vector."
  },
  {
    "id": 836,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes a given string to a file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 837,
    "code": "#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}",
    "summary": "Reads all lines from a file into a vector of strings, with each element representing a line."
  },
  {
    "id": 838,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 839,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 840,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 841,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename, std::ios::out | std::ios::trunc);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    }\n}\n```",
    "summary": "Writes the specified content to a file, overwriting any existing data."
  },
  {
    "id": 842,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    \n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by `filePath` and returns them as a vector of strings."
  },
  {
    "id": 843,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid copyFileContent(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n\n    if (!sourceFile) {\n        std::cerr << \"Error: Cannot open source file.\\n\";\n        return;\n    }\n    if (!destinationFile) {\n        std::cerr << \"Error: Cannot open destination file.\\n\";\n        return;\n    }\n\n    destinationFile << sourceFile.rdbuf();\n\n    sourceFile.close();\n    destinationFile.close();\n}\n```",
    "summary": "This function copies the contents from a source file to a destination file using binary mode."
  },
  {
    "id": 844,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile.is_open()) {\n        return false;\n    }\n    outFile << content;\n    outFile.close();\n    return outFile.good();\n}\n```",
    "summary": "Writes a given string to a specified file, returning true if successful."
  },
  {
    "id": 845,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& data) {\n    std::ofstream outFile(filename, std::ios::out | std::ios::trunc);\n    if (!outFile) {\n        return false;\n    }\n    outFile << data;\n    return outFile.good();\n}\n```",
    "summary": "Writes a string to a specified file, overwriting its existing content, and returns a boolean indicating success."
  },
  {
    "id": 846,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <iostream>\n\nvoid writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    } else {\n        std::cerr << \"Unable to open file for writing\";\n    }\n}\n```",
    "summary": "Writes a given string to a specified file, creating the file if it doesn't exist."
  },
  {
    "id": 847,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 848,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 849,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return true;\n}\n```",
    "summary": "Writes the provided content to a file at the specified path, returning true if successful."
  },
  {
    "id": 850,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename, std::ios::out | std::ios::trunc);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes a given string to a file, overwriting its contents, and returns true on success or false if the file cannot be opened."
  },
  {
    "id": 851,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string &filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    } else {\n        std::cerr << \"Unable to open file: \" << filename << std::endl;\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 852,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid readFileAndPrintLines(const std::string& filename) {\n    std::ifstream file(filename);\n    if (!file.is_open()) {\n        std::cerr << \"Unable to open file: \" << filename << std::endl;\n        return;\n    }\n    std::string line;\n    while (std::getline(file, line)) {\n        std::cout << line << std::endl;\n    }\n    file.close();\n}\n```",
    "summary": "Reads a text file line by line and prints each line to the standard output."
  },
  {
    "id": 853,
    "code": "```cpp\n#include <fstream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 854,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes a string to a specified file and returns true if the operation succeeds."
  },
  {
    "id": 855,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings and returns it."
  },
  {
    "id": 856,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile.is_open()) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes content to a specified file, returning true if successful, or false if the file cannot be opened."
  },
  {
    "id": 857,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success or false if the file cannot be opened."
  },
  {
    "id": 858,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 859,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 860,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    }\n}\n```",
    "summary": "Writes the given content to a specified file, creating or overwriting the file if it exists."
  },
  {
    "id": 861,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string &filename, const std::string &content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "This function writes a given string content to a specified file and returns true if successful, otherwise false."
  },
  {
    "id": 862,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& filename, const std::string& text) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << text;\n    return true;\n}\n```",
    "summary": "Writes a given string to a file, returning true on success or false if the file cannot be opened."
  },
  {
    "id": 863,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 864,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes a given string content to a specified file, returning true if successful, and false if the file cannot be opened."
  },
  {
    "id": 865,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 866,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the given content to a specified file, returning true if successful, false otherwise."
  },
  {
    "id": 867,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string &filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file and returns them as a vector of strings."
  },
  {
    "id": 868,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file with the given filename and returns true if successful, otherwise false."
  },
  {
    "id": 869,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 870,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToTextFile(const std::string& filename, const std::string& content) {\n    std::ofstream outfile(filename);\n    if (outfile.is_open()) {\n        outfile << content;\n        outfile.close();\n    } else {\n        std::cerr << \"Unable to open file for writing.\";\n    }\n}\n```",
    "summary": "Writes a given string content to a specified text file, creating or overwriting it if necessary."
  },
  {
    "id": 871,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, returning true on success and false on failure."
  },
  {
    "id": 872,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename, std::ios::out | std::ios::trunc);\n    if (!file.is_open()) {\n        throw std::runtime_error(\"Unable to open file for writing\");\n    }\n    file << content;\n    file.close();\n}\n```",
    "summary": "This function writes the given content to a specified file, overwriting any existing content."
  },
  {
    "id": 873,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string &filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n\n    return lines;\n}\n```",
    "summary": "Reads a file line by line and returns its contents as a vector of strings."
  },
  {
    "id": 874,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& data) {\n    std::ofstream outFile(filename, std::ios::out | std::ios::trunc);\n    if (!outFile) {\n        return false;\n    }\n    outFile << data;\n    return outFile.good();\n}\n```",
    "summary": "Writes a string to a specified file, overwriting its contents, and returns true if successful."
  },
  {
    "id": 875,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false; // Failed to open file\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes specified content to a file with the given filename, returning true if successful."
  },
  {
    "id": 876,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes a given string content to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 877,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "This function writes a given string content to a specified file and returns true on success or false if the file cannot be opened."
  },
  {
    "id": 878,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 879,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream file(filePath);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes the given content to a specified file, returning true if successful and false if the file cannot be opened."
  },
  {
    "id": 880,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "This function writes a given string to a specified file, returning true if successful and false otherwise."
  },
  {
    "id": 881,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outfile(filename);\n    if (!outfile.is_open()) {\n        return false;\n    }\n    outfile << content;\n    return outfile.good();\n}\n```",
    "summary": "Writes a string to a file, returning true on success and false on failure."
  },
  {
    "id": 882,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream file(filePath);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file at the given file path, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 883,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 884,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 885,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 886,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 887,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    } else {\n        std::cerr << \"Unable to open file for writing: \" << filename << std::endl;\n    }\n}\n```",
    "summary": "The function `writeToFile` opens a file and writes the specified content to it, handling errors if the file cannot be opened."
  },
  {
    "id": 888,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourceFile, const std::string& destinationFile) {\n    std::ifstream src(sourceFile, std::ios::binary);\n    std::ofstream dst(destinationFile, std::ios::binary);\n\n    if (!src || !dst) {\n        return false;\n    }\n\n    dst << src.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the contents of one file to another, returning true if successful or false if file operations fail."
  },
  {
    "id": 889,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool appendLineToFile(const std::string &filename, const std::string &line) {\n    std::ofstream file(filename, std::ios::app);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << line << std::endl;\n    file.close();\n    return true;\n}\n```",
    "summary": "Appends a line of text to a specified file, returning true if successful and false if the file cannot be opened."
  },
  {
    "id": 890,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes a given string to a specified file and returns true if successful, false otherwise."
  },
  {
    "id": 891,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid countLinesInFile(const std::string& filename) {\n    std::ifstream file(filename);\n    if (!file.is_open()) {\n        std::cerr << \"Error opening file: \" << filename << std::endl;\n        return;\n    }\n\n    std::string line;\n    int lineCount = 0;\n    while (std::getline(file, line)) {\n        ++lineCount;\n    }\n\n    file.close();\n    std::cout << \"Total lines: \" << lineCount << std::endl;\n}\n```",
    "summary": "Counts and prints the total number of lines in a specified file."
  },
  {
    "id": 892,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& fileName, const std::string& content) {\n    std::ofstream outFile(fileName);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return true;\n}\n```",
    "summary": "Writes a given string content to a specified file and returns true on success, false on failure."
  },
  {
    "id": 893,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by `filePath` and returns them as a vector of strings."
  },
  {
    "id": 894,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 895,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> ReadLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 896,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile.is_open()) {\n        return false;\n    }\n    outFile << content;\n    outFile.close();\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file at the given file path, returning true if successful."
  },
  {
    "id": 897,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile.is_open()) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes the provided content to a specified file, returning true if successful."
  },
  {
    "id": 898,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "This function reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 899,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 900,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    } else {\n        std::cerr << \"Unable to open file for writing: \" << filename << std::endl;\n    }\n}\n```",
    "summary": "Writes a given string content to a specified file, creating or overwriting the file."
  },
  {
    "id": 901,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads a file line by line into a vector of strings, returning the lines as a vector."
  },
  {
    "id": 902,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the given content to a specified file and returns true if successful, otherwise returns false if the file cannot be opened."
  },
  {
    "id": 903,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 904,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> readLinesFromFile(const std::string& fileName) {\n    std::vector<std::string> lines;\n    std::ifstream file(fileName);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    } else {\n        std::cerr << \"Unable to open file: \" << fileName << std::endl;\n    }\n    return lines;\n}\n```",
    "summary": "This function reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 905,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes a given string to a file, returning true if successful and false otherwise."
  },
  {
    "id": 906,
    "code": "```cpp\n#include <fstream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 907,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToTextFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes the specified content to a text file at the given file path, returning true if successful."
  },
  {
    "id": 908,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid countLinesInFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    if (!file.is_open()) {\n        std::cerr << \"Unable to open file: \" << filePath << std::endl;\n        return;\n    }\n    \n    std::string line;\n    int lineCount = 0;\n    while (std::getline(file, line)) {\n        lineCount++;\n    }\n    \n    file.close();\n    std::cout << \"Number of lines in file: \" << lineCount << std::endl;\n}\n```",
    "summary": "This function counts and outputs the number of lines in a specified text file."
  },
  {
    "id": 909,
    "code": "```cpp\n#include <fstream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file and returns them as a vector of strings."
  },
  {
    "id": 910,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by filePath and returns them as a vector of strings."
  },
  {
    "id": 911,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& data) {\n    std::ofstream outfile(filename, std::ios::out);\n    if (!outfile) {\n        return false;\n    }\n    outfile << data;\n    return outfile.good();\n}\n```",
    "summary": "Writes the given string data to a file with the specified filename and returns true if successful."
  },
  {
    "id": 912,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 913,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes a given string content to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 914,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a text file and returns them as a vector of strings."
  },
  {
    "id": 915,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 916,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings and returns the vector."
  },
  {
    "id": 917,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings and returns it."
  },
  {
    "id": 918,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes the specified content to a file, returning true if successful or false if an error occurs."
  },
  {
    "id": 919,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    } else {\n        std::cerr << \"Unable to open file for writing: \" << filename << std::endl;\n    }\n}\n```",
    "summary": "Writes the specified content to a file, creating the file if it does not exist, and handles the error if the file cannot be opened."
  },
  {
    "id": 920,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings and returns it."
  },
  {
    "id": 921,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& fileName, const std::string& data) {\n    std::ofstream outFile(fileName);\n    if (!outFile) {\n        return false;\n    }\n    outFile << data;\n    return outFile.good();\n}\n```",
    "summary": "Writes a given string to a specified file and returns true if the operation succeeds."
  },
  {
    "id": 922,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 923,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the specified string content to a file with the given filename, returning true on success and false on failure."
  },
  {
    "id": 924,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by filePath into a vector of strings."
  },
  {
    "id": 925,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outfile(filename);\n    if (!outfile) {\n        return false;\n    }\n    outfile << content;\n    return outfile.good();\n}\n```",
    "summary": "Writes a given string to a specified file, returning true if successful, false otherwise."
  },
  {
    "id": 926,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file and returns them as a vector of strings."
  },
  {
    "id": 927,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 928,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToTextFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes a string to a specified text file, returning true if successful and false otherwise."
  },
  {
    "id": 929,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    } else {\n        std::cerr << \"Unable to open file for writing: \" << filename << std::endl;\n    }\n}\n```",
    "summary": "Writes specified content to a file, creating or overwriting the file if necessary, and logs an error if the file cannot be opened."
  },
  {
    "id": 930,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    } else {\n        std::cerr << \"Unable to open file: \" << filePath << std::endl;\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a text file into a vector of strings and returns it."
  },
  {
    "id": 931,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a given file and returns them as a vector of strings."
  },
  {
    "id": 932,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    \n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads all lines from a file and returns them as a vector of strings."
  },
  {
    "id": 933,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 934,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string &filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 935,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 936,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 937,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (!file.is_open()) {\n        throw std::runtime_error(\"Unable to open file\");\n    }\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    file.close();\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by a path and returns them as a vector of strings."
  },
  {
    "id": 938,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 939,
    "code": "#include <fstream>\n#include <string>\n\nbool copyFileContent(const std::string& sourceFile, const std::string& destinationFile) {\n    std::ifstream source(sourceFile, std::ios::binary);\n    std::ofstream destination(destinationFile, std::ios::binary);\n    \n    if (!source || !destination) {\n        return false;\n    }\n    \n    destination << source.rdbuf();\n    return true;\n}",
    "summary": "Copies the content of one file to another, returning true on success and false if file operations fail."
  },
  {
    "id": 940,
    "code": "#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream file(filePath);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}",
    "summary": "Writes a string to a specified file, returning true if successful and false otherwise."
  },
  {
    "id": 941,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 942,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, returning true on success and false on failure."
  },
  {
    "id": 943,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings and returns it."
  },
  {
    "id": 944,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& source, const std::string& destination) {\n    std::ifstream src(source, std::ios::binary);\n    std::ofstream dst(destination, std::ios::binary);\n    if (!src || !dst) {\n        return false;\n    }\n    dst << src.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the contents of a source file to a destination file using binary mode to preserve file integrity."
  },
  {
    "id": 945,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 946,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool countLinesInFile(const std::string& filename, int& lineCount) {\n    std::ifstream file(filename);\n    if (!file.is_open()) {\n        return false; // Failed to open file\n    }\n    lineCount = 0;\n    std::string line;\n    while (std::getline(file, line)) {\n        ++lineCount;\n    }\n    file.close();\n    return true;\n}\n```",
    "summary": "The function `countLinesInFile` opens a file, counts the number of lines, and returns true if successful, false otherwise."
  },
  {
    "id": 947,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid copyFileContent(const std::string& sourceFile, const std::string& destinationFile) {\n    std::ifstream source(sourceFile, std::ios::binary);\n    std::ofstream destination(destinationFile, std::ios::binary);\n\n    if (!source) {\n        std::cerr << \"Error opening source file\\n\";\n        return;\n    }\n\n    if (!destination) {\n        std::cerr << \"Error opening destination file\\n\";\n        return;\n    }\n\n    destination << source.rdbuf();\n\n    source.close();\n    destination.close();\n}\n```",
    "summary": "Copies the content of one file to another using binary mode."
  },
  {
    "id": 948,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid copyFileContent(const std::string& sourceFile, const std::string& destinationFile) {\n    std::ifstream src(sourceFile, std::ios::binary);\n    std::ofstream dst(destinationFile, std::ios::binary);\n    if (!src) {\n        std::cerr << \"Error: Cannot open source file.\\n\";\n        return;\n    }\n    if (!dst) {\n        std::cerr << \"Error: Cannot create destination file.\\n\";\n        return;\n    }\n    dst << src.rdbuf();\n}\n```",
    "summary": "This function copies the content from a source file to a destination file using binary mode."
  },
  {
    "id": 949,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& fileName, const std::string& content) {\n    std::ofstream file(fileName);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes a string to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 950,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToLogFile(const std::string& filename, const std::string& message) {\n    std::ofstream logfile(filename, std::ios_base::app);\n    if (!logfile) {\n        std::cerr << \"Error opening file: \" << filename << std::endl;\n        return;\n    }\n    logfile << message << std::endl;\n}\n```",
    "summary": "Appends a message to a specified log file, creating the file if it does not exist."
  },
  {
    "id": 951,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 952,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 953,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 954,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a given file into a vector of strings."
  },
  {
    "id": 955,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 956,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename, std::ios::out | std::ios::trunc);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "This function writes a given string to a specified file, overwriting its existing content, and returns true on success or false if the file cannot be opened."
  },
  {
    "id": 957,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads a text file line by line and returns a vector of strings containing each line."
  },
  {
    "id": 958,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string &filename, const std::string &content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes the given content to a file specified by filename, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 959,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    \n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 960,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 961,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    }\n}\n```",
    "summary": "Writes a string of content to a specified file, creating or overwriting the file if necessary."
  },
  {
    "id": 962,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 963,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <iostream>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the given content to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 964,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file) {\n        return false; // Could not open file\n    }\n    file << content;\n    return file.good(); // Return true if write was successful\n}\n```",
    "summary": "Writes a string to a specified file and returns true if successful, false if the file cannot be opened."
  },
  {
    "id": 965,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by the file path and returns them as a vector of strings."
  },
  {
    "id": 966,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings."
  },
  {
    "id": 967,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContent(const std::string& sourceFile, const std::string& destinationFile) {\n    std::ifstream src(sourceFile, std::ios::binary);\n    std::ofstream dst(destinationFile, std::ios::binary);\n\n    if (!src || !dst) {\n        return false; // Return false if files cannot be opened\n    }\n\n    dst << src.rdbuf(); // Copy content from source to destination\n    return true; // Return true if copy is successful\n}\n```",
    "summary": "Copies the content of one file to another, returning true if successful and false if an error occurs."
  },
  {
    "id": 968,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings and returns it."
  },
  {
    "id": 969,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename, std::ios::out | std::ios::trunc);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes content to a specified file, overwriting any existing data, and returns true on success or false if the file cannot be opened."
  },
  {
    "id": 970,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    } else {\n        std::cerr << \"Unable to open file for writing: \" << filename << std::endl;\n    }\n}\n```",
    "summary": "This function writes the provided content to a specified file, reporting an error if the file cannot be opened."
  },
  {
    "id": 971,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFile(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream source(sourcePath, std::ios::binary);\n    std::ofstream destination(destinationPath, std::ios::binary);\n\n    if (!source || !destination) {\n        return false;\n    }\n\n    destination << source.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the contents of a source file to a destination file using binary mode."
  },
  {
    "id": 972,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& fileName, const std::string& content) {\n    std::ofstream outFile(fileName);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes the given content to a specified file, returning true on success and false if the file cannot be opened or written."
  },
  {
    "id": 973,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, returning true if successful, false otherwise."
  },
  {
    "id": 974,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, returning true on success."
  },
  {
    "id": 975,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    }\n}\n```",
    "summary": "Writes a string to a specified file, creating or overwriting the file if it exists."
  },
  {
    "id": 976,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeStringToFile(const std::string& fileName, const std::string& content) {\n    std::ofstream outFile(fileName, std::ios::out | std::ios::trunc);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    } else {\n        std::cerr << \"Unable to open file for writing: \" << fileName << std::endl;\n    }\n}\n```",
    "summary": "Writes the specified string content to a file, overwriting any existing content."
  },
  {
    "id": 977,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file, returning true if successful or false if the file cannot be opened."
  },
  {
    "id": 978,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes the given content to a file specified by filename and returns true if successful, otherwise false."
  },
  {
    "id": 979,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by filePath and returns them as a vector of strings."
  },
  {
    "id": 980,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    } else {\n        std::cerr << \"Unable to open file for writing: \" << filename << std::endl;\n    }\n}\n```",
    "summary": "Writes a given string to a specified file, creating or overwriting the file if it already exists."
  },
  {
    "id": 981,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    \n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by `filePath` and returns them as a vector of strings."
  },
  {
    "id": 982,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    \n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings, returning the vector."
  },
  {
    "id": 983,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    } else {\n        std::cerr << \"Error: Could not open file for writing.\" << std::endl;\n    }\n}\n```",
    "summary": "Writes a given string to a specified file, creating or overwriting the file if necessary."
  },
  {
    "id": 984,
    "code": "```cpp\n#include <fstream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    file.close();\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 985,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 986,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 987,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 988,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& data) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false; // File could not be opened for writing\n    }\n    outFile << data;\n    return outFile.good(); // Return true if writing was successful\n}\n```",
    "summary": "Writes a given string to a file and returns true if the operation succeeds, or false if the file cannot be opened."
  },
  {
    "id": 989,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 990,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes the provided content to a file with the specified filename, returning true on success and false on failure."
  },
  {
    "id": 991,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToTextFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false; // Return false if the file cannot be opened\n    }\n    outFile << content;\n    return true; // Return true if writing is successful\n}\n```",
    "summary": "Writes the provided string content to a specified text file and returns a boolean indicating success."
  },
  {
    "id": 992,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "This function writes a given string to a specified file and returns true if successful, otherwise false."
  },
  {
    "id": 993,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContent(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream src(sourcePath, std::ios::binary);\n    std::ofstream dest(destinationPath, std::ios::binary);\n    \n    if (!src || !dest) {\n        return false;\n    }\n    \n    dest << src.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the content of one file to another using binary mode, returning true on success and false on failure."
  },
  {
    "id": 994,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 995,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 996,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file with the given filename and returns true if successful, false otherwise."
  },
  {
    "id": 997,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    } else {\n        std::cerr << \"Unable to open file: \" << filePath << std::endl;\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file and returns them as a vector of strings, printing an error if the file cannot be opened."
  },
  {
    "id": 998,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid copyFileContents(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n\n    if (!sourceFile) {\n        std::cerr << \"Error opening source file: \" << sourcePath << std::endl;\n        return;\n    }\n    if (!destinationFile) {\n        std::cerr << \"Error opening destination file: \" << destinationPath << std::endl;\n        return;\n    }\n\n    destinationFile << sourceFile.rdbuf();\n\n    sourceFile.close();\n    destinationFile.close();\n}\n```",
    "summary": "Copies the contents from a source file to a destination file using binary mode."
  },
  {
    "id": 999,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes a string to a specified file and returns true if successful, otherwise returns false."
  },
  {
    "id": 1000,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings and returns it."
  },
  {
    "id": 1001,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1002,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1003,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1004,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> ReadLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1005,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by `filePath` into a vector of strings."
  },
  {
    "id": 1006,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1007,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1008,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile.is_open()) {\n        return false;\n    }\n    outFile << content;\n    return true;\n}\n```",
    "summary": "Writes a string to a specified file, returning false if the file cannot be opened."
  },
  {
    "id": 1009,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid appendLineToFile(const std::string& filename, const std::string& line) {\n    std::ofstream file(filename, std::ios::app);\n    if (file.is_open()) {\n        file << line << '\\n';\n        file.close();\n    } else {\n        std::cerr << \"Unable to open file for appending.\" << std::endl;\n    }\n}\n```",
    "summary": "Appends a line of text to the end of a specified file."
  },
  {
    "id": 1010,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings and returns it."
  },
  {
    "id": 1011,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes the given content to a file specified by filename and returns true on success, false otherwise."
  },
  {
    "id": 1012,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1013,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1014,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, returning true if successful."
  },
  {
    "id": 1015,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, returning true if successful."
  },
  {
    "id": 1016,
    "code": "```cpp\n#include <fstream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings and returns it."
  },
  {
    "id": 1017,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    }\n}\n```",
    "summary": "Writes the given content to a specified file, creating or overwriting it as needed."
  },
  {
    "id": 1018,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings and returns it."
  },
  {
    "id": 1019,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream file(filePath);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes the provided content to a file at the specified path, returning true if successful."
  },
  {
    "id": 1020,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1021,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1022,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, returning true on success and false on failure."
  },
  {
    "id": 1023,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes the given string content to a file at the specified file path, returning true on success and false on failure."
  },
  {
    "id": 1024,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1025,
    "code": "```cpp\n#include <fstream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1026,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToTextFile(const std::string &filename, const std::string &content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return true;\n}\n```",
    "summary": "Writes the specified content to a text file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1027,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true if successful, otherwise false."
  },
  {
    "id": 1028,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1029,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads a file line by line and returns a vector of strings containing each line."
  },
  {
    "id": 1030,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid countLinesInFile(const std::string& filename) {\n    std::ifstream file(filename);\n    if (!file.is_open()) {\n        std::cerr << \"Unable to open file: \" << filename << std::endl;\n        return;\n    }\n    std::string line;\n    int lineCount = 0;\n    while (std::getline(file, line)) {\n        ++lineCount;\n    }\n    file.close();\n    std::cout << \"Total lines: \" << lineCount << std::endl;\n}\n```",
    "summary": "Counts and outputs the number of lines in a specified file."
  },
  {
    "id": 1031,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& filename, const std::string& text) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << text;\n    return outFile.good();\n}\n```",
    "summary": "Writes the specified text to a file and returns true if successful, false otherwise."
  },
  {
    "id": 1032,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFile(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    if (!sourceFile) return false;\n    \n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n    if (!destinationFile) return false;\n    \n    destinationFile << sourceFile.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the contents of a source file to a destination file, returning true if successful, and false otherwise."
  },
  {
    "id": 1033,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outfile(filename);\n    if (outfile.is_open()) {\n        outfile << content;\n        outfile.close();\n    } else {\n        std::cerr << \"Unable to open file for writing: \" << filename << std::endl;\n    }\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, handling any errors if the file cannot be opened."
  },
  {
    "id": 1034,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by `filePath` and returns them as a vector of strings."
  },
  {
    "id": 1035,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    }\n}\n```",
    "summary": "Writes a given string to a specified file, overwriting any existing content."
  },
  {
    "id": 1036,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1037,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& fileName, const std::string& content) {\n    std::ofstream outFile(fileName);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    }\n}\n```",
    "summary": "Writes the specified content to a file with the given filename."
  },
  {
    "id": 1038,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    } else {\n        std::cerr << \"Unable to open file for writing: \" << filename << std::endl;\n    }\n}\n```",
    "summary": "Writes a given string content to a specified file, handling file opening errors."
  },
  {
    "id": 1039,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outfile(filename);\n    if (!outfile.is_open()) {\n        return false;\n    }\n    outfile << content;\n    return outfile.good();\n}\n```",
    "summary": "Writes content to a specified file and returns true if successful, otherwise false."
  },
  {
    "id": 1040,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings, returning the vector."
  },
  {
    "id": 1041,
    "code": "```cpp\n#include <fstream>\n#include <iostream>\n#include <string>\n\nvoid writeTextToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    } else {\n        std::cerr << \"Unable to open file for writing: \" << filename << std::endl;\n    }\n}\n```",
    "summary": "This function writes a given string to a specified file, creating the file if it does not exist."
  },
  {
    "id": 1042,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1043,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    }\n}\n```",
    "summary": "Writes the provided content to a specified file, creating or overwriting it."
  },
  {
    "id": 1044,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeLineToFile(const std::string& filename, const std::string& line) {\n    std::ofstream file(filename, std::ios::app);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << line << std::endl;\n    return true;\n}\n```",
    "summary": "This function appends a single line to a specified file, returning true on success or false if the file cannot be opened."
  },
  {
    "id": 1045,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "This function writes a given string content to a specified file and returns true if successful, otherwise false."
  },
  {
    "id": 1046,
    "code": "#include <fstream>\n#include <string>\n\nbool appendLineToFile(const std::string& filePath, const std::string& line) {\n    std::ofstream file(filePath, std::ios::app);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << line << '\\n';\n    return true;\n}",
    "summary": "Appends a line of text to a specified file, creating the file if it does not exist, and returns true if successful."
  },
  {
    "id": 1047,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeTextToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    } else {\n        throw std::ios_base::failure(\"Failed to open file for writing\");\n    }\n}\n```",
    "summary": "Writes a given string to a specified file, throwing an exception if the file cannot be opened."
  },
  {
    "id": 1048,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToTextFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false; // File could not be opened\n    }\n    outFile << content;\n    return true; // Writing was successful\n}\n```",
    "summary": "Writes a given string to a specified text file, returning true if successful or false if the file could not be opened."
  },
  {
    "id": 1049,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename, std::ios::out | std::ios::trunc);\n    if (!outFile) {\n        std::cerr << \"Error opening file for writing: \" << filename << std::endl;\n        return;\n    }\n    outFile << content;\n    outFile.close();\n}\n```",
    "summary": "Writes the specified content to a file, overwriting it if it already exists."
  },
  {
    "id": 1050,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1051,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string &filePath, const std::string &content) {\n    std::ofstream outFile(filePath);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes a given string to a specified file and returns true if successful, false otherwise."
  },
  {
    "id": 1052,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& filename, const std::string& text) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << text;\n    return file.good();\n}\n```",
    "summary": "Writes a given string to a specified file, returning true if successful and false on failure."
  },
  {
    "id": 1053,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    }\n}\n```",
    "summary": "Writes the specified content to a file, creating or overwriting the file if it already exists."
  },
  {
    "id": 1054,
    "code": "#include <fstream>\n#include <string>\n\nbool copyFileContent(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream source(sourcePath, std::ios::binary);\n    std::ofstream destination(destinationPath, std::ios::binary);\n\n    if (!source.is_open() || !destination.is_open()) {\n        return false;\n    }\n\n    destination << source.rdbuf();\n\n    return source && destination;\n}",
    "summary": "Copies the content of a source file to a destination file and returns true if successful, or false if any file cannot be opened."
  },
  {
    "id": 1055,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (!file.is_open()) {\n        return lines;\n    }\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    file.close();\n    return lines;\n}\n```",
    "summary": "Reads all lines from a given file and returns them as a vector of strings."
  },
  {
    "id": 1056,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings and returns it."
  },
  {
    "id": 1057,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1058,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nbool copyFileContent(const std::string& sourcePath, const std::string& destPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    if (!sourceFile) return false;\n    \n    std::ofstream destFile(destPath, std::ios::binary);\n    if (!destFile) return false;\n    \n    destFile << sourceFile.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the content of a source file to a destination file and returns true if successful."
  },
  {
    "id": 1059,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1060,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1061,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1062,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads a text file and returns its content as a vector of strings, each representing a line."
  },
  {
    "id": 1063,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings, returning the lines as a collection."
  },
  {
    "id": 1064,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string &sourceFile, const std::string &destinationFile) {\n    std::ifstream src(sourceFile, std::ios::binary);\n    if (!src.is_open()) {\n        return false;\n    }\n\n    std::ofstream dest(destinationFile, std::ios::binary);\n    if (!dest.is_open()) {\n        return false;\n    }\n\n    dest << src.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the contents of one file to another, returning true on success and false if file operations fail."
  },
  {
    "id": 1065,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid countLinesInFile(const std::string& filename, int& lineCount) {\n    std::ifstream file(filename);\n    lineCount = 0;\n    std::string line;\n    while (std::getline(file, line)) {\n        ++lineCount;\n    }\n    file.close();\n}\n```",
    "summary": "Counts the number of lines in a specified file and stores the result in lineCount."
  },
  {
    "id": 1066,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1067,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourceFile, const std::string& destinationFile) {\n    std::ifstream source(sourceFile, std::ios::binary);\n    std::ofstream destination(destinationFile, std::ios::binary);\n\n    if (!source || !destination) {\n        return false; // Return false if either file can't be opened\n    }\n\n    destination << source.rdbuf(); // Copy contents from source to destination\n    return true; // Successful copy\n}\n```",
    "summary": "Copies the entire contents of one file to another and returns false if either file cannot be opened."
  },
  {
    "id": 1068,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1069,
    "code": "```cpp\n#include <fstream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> readLinesFromFile(const std::string& fileName) {\n    std::vector<std::string> lines;\n    std::ifstream file(fileName);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings, returning the vector."
  },
  {
    "id": 1070,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourcePath, const std::string& destPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    if (!sourceFile) return false;\n\n    std::ofstream destFile(destPath, std::ios::binary);\n    if (!destFile) return false;\n\n    destFile << sourceFile.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the contents of a source file to a destination file, returning true on success and false on failure."
  },
  {
    "id": 1071,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1072,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1073,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads lines from a file and returns them as a vector of strings."
  },
  {
    "id": 1074,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string &filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1075,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads a file line by line and returns a vector of strings containing each line."
  },
  {
    "id": 1076,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings, returning the vector."
  },
  {
    "id": 1077,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings and returns it."
  },
  {
    "id": 1078,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, returning true if successful."
  },
  {
    "id": 1079,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& fileName) {\n    std::ifstream file(fileName);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and stores them in a vector of strings."
  },
  {
    "id": 1080,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1081,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads a file line by line and returns a vector containing each line as a string."
  },
  {
    "id": 1082,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& data) {\n    std::ofstream file(filename, std::ios::out | std::ios::trunc);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << data;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the given string data to a specified file, overwriting any existing content."
  },
  {
    "id": 1083,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, returning true on success and false on failure."
  },
  {
    "id": 1084,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1085,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n#include <iostream>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    } else {\n        std::cerr << \"Unable to open file: \" << filename << std::endl;\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1086,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& fileName, const std::string& content) {\n    std::ofstream outFile(fileName);\n    if (!outFile.is_open()) {\n        return false;\n    }\n    outFile << content;\n    outFile.close();\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1087,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& srcFilePath, const std::string& destFilePath) {\n    std::ifstream srcFile(srcFilePath, std::ios::binary);\n    std::ofstream destFile(destFilePath, std::ios::binary);\n\n    if (!srcFile || !destFile) {\n        return false; // Return false if opening either file fails\n    }\n\n    destFile << srcFile.rdbuf(); // Copy contents from source to destination\n    return true;\n}\n```",
    "summary": "Copies the contents of a source file to a destination file, returning false if file opening fails."
  },
  {
    "id": 1088,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream ofs(filename);\n    if (!ofs.is_open()) {\n        return false;\n    }\n    ofs << content;\n    return ofs.good();\n}\n```",
    "summary": "Writes the specified content to a file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1089,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "This function reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1090,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    }\n}\n```",
    "summary": "Writes the provided content to a specified file, creating or overwriting the file if it exists."
  },
  {
    "id": 1091,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        std::cerr << \"Error opening file for writing: \" << filename << std::endl;\n        return;\n    }\n    outFile << content;\n    outFile.close();\n}\n```",
    "summary": "Writes a given string to a specified file, creating or overwriting the file in the process."
  },
  {
    "id": 1092,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1093,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes a given string content to a specified file, returning true if successful, otherwise false."
  },
  {
    "id": 1094,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false; // Return false if the file could not be opened\n    }\n    outFile << content;\n    return true; // Return true if writing was successful\n}\n```",
    "summary": "Writes the given content to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1095,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "This function reads all lines from a file specified by the file path and returns them as a vector of strings."
  },
  {
    "id": 1096,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes a given string content to a specified file, returning true if successful."
  },
  {
    "id": 1097,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads and returns all lines from a given file as a vector of strings."
  },
  {
    "id": 1098,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes the specified content to a file, returning true if successful and false if an error occurs."
  },
  {
    "id": 1099,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n        return true;\n    }\n    return false;\n}\n```",
    "summary": "Writes the given content to a specified file and returns true if successful, false otherwise."
  },
  {
    "id": 1100,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1101,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    }\n}\n```",
    "summary": "Writes a given string to a specified file, overwriting its contents if it exists."
  },
  {
    "id": 1102,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1103,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool appendLineToFile(const std::string& filePath, const std::string& line) {\n    std::ofstream file(filePath, std::ios::app);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << line << \"\\n\";\n    return true;\n}\n```",
    "summary": "Appends a line of text to a specified file and returns true if successful, or false if the file could not be opened."
  },
  {
    "id": 1104,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings."
  },
  {
    "id": 1105,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1106,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& filename, const std::string& text) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << text;\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1107,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by the filename and returns them as a vector of strings."
  },
  {
    "id": 1108,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1109,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid copyFileContents(const std::string& sourceFile, const std::string& destinationFile) {\n    std::ifstream src(sourceFile, std::ios::binary);\n    std::ofstream dest(destinationFile, std::ios::binary);\n\n    if (!src) {\n        std::cerr << \"Error opening source file: \" << sourceFile << '\\n';\n        return;\n    }\n\n    if (!dest) {\n        std::cerr << \"Error opening destination file: \" << destinationFile << '\\n';\n        return;\n    }\n\n    dest << src.rdbuf();\n}\n```",
    "summary": "Copies the contents of one file to another using binary mode."
  },
  {
    "id": 1110,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid copyFileContent(const std::string& sourceFile, const std::string& destFile) {\n    std::ifstream source(sourceFile);\n    std::ofstream destination(destFile);\n\n    if (!source) {\n        std::cerr << \"Error opening source file.\\n\";\n        return;\n    }\n    if (!destination) {\n        std::cerr << \"Error opening destination file.\\n\";\n        return;\n    }\n\n    std::string line;\n    while (std::getline(source, line)) {\n        destination << line << '\\n';\n    }\n}\n```",
    "summary": "Copies the content of a source file to a destination file line by line."
  },
  {
    "id": 1111,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid countLinesInFile(const std::string& filename) {\n    std::ifstream file(filename);\n    if (!file.is_open()) {\n        std::cerr << \"Error: Could not open file \" << filename << std::endl;\n        return;\n    }\n    \n    std::string line;\n    int lineCount = 0;\n    while (std::getline(file, line)) {\n        ++lineCount;\n    }\n    \n    file.close();\n    std::cout << \"Total number of lines: \" << lineCount << std::endl;\n}\n```",
    "summary": "Counts and prints the number of lines in a specified file."
  },
  {
    "id": 1112,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1113,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1114,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid countLinesInFile(const std::string& filename) {\n    std::ifstream file(filename);\n    if (!file.is_open()) {\n        std::cerr << \"Error opening file: \" << filename << std::endl;\n        return;\n    }\n    \n    std::string line;\n    int lineCount = 0;\n    while (std::getline(file, line)) {\n        ++lineCount;\n    }\n    \n    file.close();\n    std::cout << \"Total lines in file: \" << lineCount << std::endl;\n}\n```",
    "summary": "Counts and outputs the number of lines in a specified file."
  },
  {
    "id": 1115,
    "code": "#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid WriteStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    } else {\n        std::cerr << \"Unable to open file for writing: \" << filename << std::endl;\n    }\n}",
    "summary": "Writes a given string to a specified file, creating the file if it doesn't exist."
  },
  {
    "id": 1116,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nbool readFileLines(const std::string &filename, std::vector<std::string> &lines) {\n    std::ifstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    file.close();\n    return true;\n}\n```",
    "summary": "Reads all lines from a specified file and stores them in a vector of strings, returning true on success or false if the file cannot be opened."
  },
  {
    "id": 1117,
    "code": "```cpp\n#include <fstream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings, returning the vector."
  },
  {
    "id": 1118,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    \n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1119,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings and returns it."
  },
  {
    "id": 1120,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename, std::ios::out | std::ios::trunc);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes a given string to a specified file, overwriting any existing content, and returns true if successful, false otherwise."
  },
  {
    "id": 1121,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file and returns them as a vector of strings."
  },
  {
    "id": 1122,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1123,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    } else {\n        std::cerr << \"Unable to open file for writing: \" << filename << std::endl;\n    }\n}\n```",
    "summary": "Writes a given string content to a specified file, creating or overwriting the file if necessary."
  },
  {
    "id": 1124,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1125,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid copyFileContent(const std::string& sourceFile, const std::string& destinationFile) {\n    std::ifstream source(sourceFile);\n    std::ofstream destination(destinationFile);\n\n    if (!source.is_open() || !destination.is_open()) {\n        std::cerr << \"Error opening files.\" << std::endl;\n        return;\n    }\n\n    std::string line;\n    while (std::getline(source, line)) {\n        destination << line << \"\\n\";\n    }\n\n    source.close();\n    destination.close();\n}\n```",
    "summary": "Copies the content from a source file to a destination file line by line."
  },
  {
    "id": 1126,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, returning true on success and false on failure."
  },
  {
    "id": 1127,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid appendLineToFile(const std::string& filename, const std::string& line) {\n    std::ofstream file(filename, std::ios::app);\n    if (file.is_open()) {\n        file << line << \"\\n\";\n        file.close();\n    }\n}\n```",
    "summary": "Appends a given line of text to the specified file, creating the file if it does not exist."
  },
  {
    "id": 1128,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by `filePath` and returns them as a vector of strings."
  },
  {
    "id": 1129,
    "code": "#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string &filePath, const std::string &content) {\n    std::ofstream outFile(filePath);\n    if (!outFile) {\n        return false; // Return false if the file cannot be opened\n    }\n    outFile << content;\n    return true;\n}",
    "summary": "This function writes a given string to a specified file, returning false if the file cannot be opened."
  },
  {
    "id": 1130,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToTextFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the specified content to a text file, returning true if successful, false otherwise."
  },
  {
    "id": 1131,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1132,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string &filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1133,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToTextFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) return false;\n    outFile << content;\n    return true;\n}\n```",
    "summary": "Writes the given content to a specified text file, returning true on success and false on failure."
  },
  {
    "id": 1134,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads a file and returns its contents as a vector of strings, with each string representing a line."
  },
  {
    "id": 1135,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1136,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile) return false;\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes a given string to a specified file, returning true if successful or false if an error occurs."
  },
  {
    "id": 1137,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    \n    if (!file.is_open()) {\n        throw std::runtime_error(\"Unable to open file\");\n    }\n\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n\n    file.close();\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1138,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1139,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeStringToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile) {\n        std::cerr << \"Error opening file for writing: \" << filePath << std::endl;\n        return;\n    }\n    outFile << content;\n    outFile.close();\n}\n```",
    "summary": "Writes a given string to a specified file, handling potential file opening errors."
  },
  {
    "id": 1140,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file and returns them as a vector of strings."
  },
  {
    "id": 1141,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n#include <iostream>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    } else {\n        std::cerr << \"Unable to open file: \" << filename << std::endl;\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1142,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1143,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by `filePath` into a vector of strings."
  },
  {
    "id": 1144,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, returning a boolean indicating success."
  },
  {
    "id": 1145,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file) {\n        std::cerr << \"Error opening file for writing: \" << filename << std::endl;\n        return;\n    }\n    file << content;\n    if (!file) {\n        std::cerr << \"Error writing to file: \" << filename << std::endl;\n    }\n    file.close();\n}\n```",
    "summary": "Writes the given content to a specified file, handling potential file opening and writing errors."
  },
  {
    "id": 1146,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string &filename, const std::string &content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the given content to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1147,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads a text file line by line and returns a vector of strings containing all lines in the file."
  },
  {
    "id": 1148,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <iostream>\n\nvoid reverseLinesInFile(const std::string& inputFilePath, const std::string& outputFilePath) {\n    std::ifstream inputFile(inputFilePath);\n    std::ofstream outputFile(outputFilePath);\n    std::string line;\n    \n    if (!inputFile.is_open() || !outputFile.is_open()) {\n        std::cerr << \"Error opening file(s)\" << std::endl;\n        return;\n    }\n    \n    while (std::getline(inputFile, line)) {\n        std::reverse(line.begin(), line.end());\n        outputFile << line << '\\n';\n    }\n    \n    inputFile.close();\n    outputFile.close();\n}\n```",
    "summary": "The function reads lines from an input file, reverses each line, and writes them to an output file."
  },
  {
    "id": 1149,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid copyFileContent(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n\n    if (!sourceFile) {\n        std::cerr << \"Error opening source file\\n\";\n        return;\n    }\n    if (!destinationFile) {\n        std::cerr << \"Error opening destination file\\n\";\n        return;\n    }\n\n    destinationFile << sourceFile.rdbuf();\n\n    sourceFile.close();\n    destinationFile.close();\n}\n```",
    "summary": "This function copies the content from a source file to a destination file in binary mode."
  },
  {
    "id": 1150,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToTextFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes a given string content to a specified text file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1151,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by `filePath` and returns them as a vector of strings."
  },
  {
    "id": 1152,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1153,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool WriteStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes a given string to a specified file, returning true if successful, otherwise false."
  },
  {
    "id": 1154,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file and returns them as a vector of strings."
  },
  {
    "id": 1155,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    } else {\n        std::cerr << \"Unable to open file for writing: \" << filename << std::endl;\n    }\n}\n```",
    "summary": "Writes a given content string to a specified file, handling file opening errors."
  },
  {
    "id": 1156,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContent(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    if (!sourceFile) return false;\n\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n    if (!destinationFile) return false;\n\n    destinationFile << sourceFile.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the content of one file to another, returning true if successful and false otherwise."
  },
  {
    "id": 1157,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    }\n}\n```",
    "summary": "Writes a given string content to a specified file, creating or overwriting the file as needed."
  },
  {
    "id": 1158,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1159,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    }\n}\n```",
    "summary": "Writes a given string to a file, creating or overwriting the file specified by the filename."
  },
  {
    "id": 1160,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file and returns them as a vector of strings."
  },
  {
    "id": 1161,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1162,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings, returning the vector."
  },
  {
    "id": 1163,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile.is_open()) {\n        return false; // Return false if file could not be opened\n    }\n    outFile << content;\n    outFile.close();\n    return true; // Return true if writing was successful\n}\n```",
    "summary": "Writes the given string content to a specified file and returns true if successful, false otherwise."
  },
  {
    "id": 1164,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <iostream>\n\nbool copyFile(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    if (!sourceFile) return false;\n    \n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n    if (!destinationFile) return false;\n    \n    destinationFile << sourceFile.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the contents of a source file to a destination file in binary mode, returning true if successful, false otherwise."
  },
  {
    "id": 1165,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, returning true on success or false if the file cannot be opened."
  },
  {
    "id": 1166,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1167,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    if (!sourceFile.is_open()) return false;\n    \n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n    if (!destinationFile.is_open()) return false;\n    \n    destinationFile << sourceFile.rdbuf();\n    \n    return true;\n}\n```",
    "summary": "Copies the contents of a source file to a destination file using binary mode."
  },
  {
    "id": 1168,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& filename, const std::string& text) {\n    std::ofstream outFile(filename);\n    if (!outFile.is_open()) {\n        return false;\n    }\n    outFile << text;\n    outFile.close();\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true if successful, false otherwise."
  },
  {
    "id": 1169,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool appendLineToFile(const std::string& filename, const std::string& line) {\n    std::ofstream file(filename, std::ios_base::app);\n    if (!file) {\n        return false;\n    }\n    file << line << std::endl;\n    return true;\n}\n```",
    "summary": "Appends a single line of text to the end of a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1170,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1171,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    } else {\n        std::cerr << \"Unable to open file for writing: \" << filename << std::endl;\n    }\n}\n```",
    "summary": "Writes the specified content to a file, creating the file if it does not exist."
  },
  {
    "id": 1172,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    } else {\n        std::cerr << \"Unable to open file for writing: \" << filename << std::endl;\n    }\n}\n```",
    "summary": "Writes the given content to a specified file, creating or overwriting the file if necessary."
  },
  {
    "id": 1173,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1174,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1175,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile.is_open()) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes the given string content to a specified file and returns true if successful, false otherwise."
  },
  {
    "id": 1176,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings and returns it."
  },
  {
    "id": 1177,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeStringToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    }\n}\n```",
    "summary": "Writes a given string to a specified file, overwriting its contents if the file exists."
  },
  {
    "id": 1178,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    \n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings and returns it."
  },
  {
    "id": 1179,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile.is_open()) {\n        return false;\n    }\n    outFile << content;\n    outFile.close();\n    return true;\n}\n```",
    "summary": "Writes a string to a specified file, returning true if successful or false if the file cannot be opened."
  },
  {
    "id": 1180,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n#include <stdexcept>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    if (!file.is_open()) {\n        throw std::runtime_error(\"Could not open file\");\n    }\n\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n\n    file.close();\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings and returns it."
  },
  {
    "id": 1181,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1182,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1183,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& fileName) {\n    std::ifstream file(fileName);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1184,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "This function writes a given string to a specified file and returns true if successful, or false if the file cannot be opened."
  },
  {
    "id": 1185,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string &sourcePath, const std::string &destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    if (!sourceFile) return false;\n\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n    if (!destinationFile) return false;\n\n    destinationFile << sourceFile.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the contents of a source file to a destination file using binary mode, returning true on success, and false if either file cannot be opened."
  },
  {
    "id": 1186,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings and returns it."
  },
  {
    "id": 1187,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "This function writes a string to a specified file and returns true if successful, otherwise false."
  },
  {
    "id": 1188,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <iostream>\n\nvoid writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    } else {\n        std::cerr << \"Unable to open file for writing.\";\n    }\n}\n```",
    "summary": "Writes a given string to a specified file, creating the file if it does not exist."
  },
  {
    "id": 1189,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nstd::string readFirstLine(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::string firstLine;\n    if (file.is_open()) {\n        std::getline(file, firstLine);\n        file.close();\n    }\n    return firstLine;\n}\n```",
    "summary": "Reads and returns the first line from a specified file, or an empty string if the file cannot be opened."
  },
  {
    "id": 1190,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n\n    return lines;\n}\n```",
    "summary": "This function reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1191,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1192,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1193,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1194,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1195,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1196,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1197,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outfile(filename);\n    if (outfile.is_open()) {\n        outfile << content;\n        outfile.close();\n    }\n}\n```",
    "summary": "Writes the specified content to a file with the given filename."
  },
  {
    "id": 1198,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename, std::ios::out | std::ios::trunc);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    } else {\n        std::cerr << \"Unable to open file for writing.\" << std::endl;\n    }\n}\n```",
    "summary": "Writes specified content to a file, overwriting it if it already exists."
  },
  {
    "id": 1199,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes a string to a specified file, returning true if successful and false if the file cannot be opened."
  },
  {
    "id": 1200,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool appendLineToFile(const std::string& filename, const std::string& line) {\n    std::ofstream file(filename, std::ios::app);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << line << '\\n';\n    return true;\n}\n```",
    "summary": "Appends a line of text to the end of a specified file, returning true if successful."
  },
  {
    "id": 1201,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid readAndPrintFile(const std::string& filename) {\n    std::ifstream file(filename);\n    if (!file.is_open()) {\n        std::cerr << \"Failed to open the file: \" << filename << std::endl;\n        return;\n    }\n    \n    std::string line;\n    while (std::getline(file, line)) {\n        std::cout << line << std::endl;\n    }\n    \n    file.close();\n}\n```",
    "summary": "Reads a text file line by line and prints each line to the standard output."
  },
  {
    "id": 1202,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads a file line-by-line and returns its contents as a vector of strings."
  },
  {
    "id": 1203,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads lines from the specified file and returns them as a vector of strings."
  },
  {
    "id": 1204,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1205,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFile(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    if (!sourceFile) return false;\n\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n    if (!destinationFile) return false;\n\n    destinationFile << sourceFile.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the contents of a source file to a destination file using binary mode."
  },
  {
    "id": 1206,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes the specified content to a file at the given file path, returning true if successful."
  },
  {
    "id": 1207,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1208,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream infile(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    \n    if (infile.is_open()) {\n        while (std::getline(infile, line)) {\n            lines.push_back(line);\n        }\n        infile.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1209,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& fileName, const std::string& data) {\n    std::ofstream outFile(fileName);\n    if (!outFile) {\n        return false;\n    }\n    outFile << data;\n    return true;\n}\n```",
    "summary": "This C++ function writes a string to a specified file, returning true on success or false if the file cannot be opened."
  },
  {
    "id": 1210,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> ReadLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    \n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1211,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads a file line by line and returns its contents as a vector of strings."
  },
  {
    "id": 1212,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& filename, const std::string& text) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << text;\n    return outFile.good();\n}\n```",
    "summary": "This function writes a given text to a specified file and returns true if successful."
  },
  {
    "id": 1213,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& fileName, const std::string& content) {\n    std::ofstream outFile(fileName);\n    if (!outFile) {\n        return false; // Failed to open the file\n    }\n    outFile << content;\n    outFile.close();\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file and returns true if successful, false otherwise."
  },
  {
    "id": 1214,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& data) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << data;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1215,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (file) {\n        file << content;\n    }\n    file.close();\n}\n```",
    "summary": "This function writes the given content to a specified file, creating or overwriting the file as needed."
  },
  {
    "id": 1216,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    \n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1217,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1218,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1219,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1220,
    "code": "#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1221,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1222,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1223,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes the given content to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1224,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1225,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& filename, const std::string& text) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false; // Return false if file couldn't be opened\n    }\n    outFile << text;\n    return true; // Return true if writing was successful\n}\n```",
    "summary": "Writes a given string to a file with the specified filename, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1226,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outfile(filename, std::ios::out | std::ios::trunc);\n    if (outfile.is_open()) {\n        outfile << content;\n        outfile.close();\n    } else {\n        std::cerr << \"Unable to open file for writing.\" << std::endl;\n    }\n}\n```",
    "summary": "Writes the specified content to a file, overwriting any existing data."
  },
  {
    "id": 1227,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1228,
    "code": "```cpp\n#include <fstream>\n#include <iostream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename, std::ios::out | std::ios::trunc);\n    if (!file) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes a given string to a specified file, truncating the file if it already exists, and returns true on success or false on failure."
  },
  {
    "id": 1229,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& fileName, const std::string& data) {\n    std::ofstream outFile(fileName);\n    if (!outFile.is_open()) {\n        return false;\n    }\n    outFile << data;\n    outFile.close();\n    return true;\n}\n```",
    "summary": "Writes the specified string data to a file with the given filename, returning true if successful and false if an error occurs."
  },
  {
    "id": 1230,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes a string to a specified file and returns a boolean indicating success or failure."
  },
  {
    "id": 1231,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContent(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n\n    if (!sourceFile || !destinationFile) {\n        return false;\n    }\n\n    destinationFile << sourceFile.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies content from a source file to a destination file, returning false if either file cannot be opened."
  },
  {
    "id": 1232,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename, std::ios::out | std::ios::trunc);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    }\n}\n```",
    "summary": "Writes the provided content to a specified file, overwriting any existing content."
  },
  {
    "id": 1233,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream file(filePath);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes a given string to a specified file, returning true if successful, false otherwise."
  },
  {
    "id": 1234,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes the specified content to a file at the given path and returns true if successful, false otherwise."
  },
  {
    "id": 1235,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& filePath, const std::string& text) {\n    std::ofstream file(filePath);\n    if (!file) {\n        return false;\n    }\n    file << text;\n    return file.good();\n}\n```",
    "summary": "Writes a given string to a specified file and returns true if successful, false otherwise."
  },
  {
    "id": 1236,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeStringToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    } else {\n        throw std::ios_base::failure(\"Failed to open file for writing\");\n    }\n}\n```",
    "summary": "Writes the provided string content to a file specified by the file path, throwing an exception if the file cannot be opened."
  },
  {
    "id": 1237,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile.is_open()) {\n        return false;\n    }\n    outFile << content;\n    outFile.close();\n    return true;\n}\n```",
    "summary": "Writes content to a specified file, returning false if the file cannot be opened."
  },
  {
    "id": 1238,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1239,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContent(const std::string &sourceFilePath, const std::string &destinationFilePath) {\n    std::ifstream sourceFile(sourceFilePath, std::ios::binary);\n    if (!sourceFile.is_open()) {\n        return false;\n    }\n    \n    std::ofstream destinationFile(destinationFilePath, std::ios::binary);\n    if (!destinationFile.is_open()) {\n        return false;\n    }\n    \n    destinationFile << sourceFile.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the content of one file to another and returns true if successful, otherwise returns false."
  },
  {
    "id": 1240,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string &fileName, const std::string &content) {\n    std::ofstream file(fileName);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file with the given name, returning false if the file cannot be opened."
  },
  {
    "id": 1241,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    \n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1242,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the given content to a specified file, returning true if successful, or false if the file cannot be opened."
  },
  {
    "id": 1243,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1244,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by `filePath` into a vector of strings."
  },
  {
    "id": 1245,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings."
  },
  {
    "id": 1246,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n#include <sstream>\n\nstd::vector<std::string> readCSVLineByLine(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads a CSV file line by line and returns each line as a string in a vector."
  },
  {
    "id": 1247,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1248,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    }\n}\n```",
    "summary": "Writes a given string to a specified file, creating or overwriting the file."
  },
  {
    "id": 1249,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile.is_open()) {\n        return false;\n    }\n    outFile << content;\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success and false on failure."
  },
  {
    "id": 1250,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file and returns them as a vector of strings."
  },
  {
    "id": 1251,
    "code": "#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath, std::ios::out | std::ios::trunc);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}",
    "summary": "Writes a string to a file at the specified path, overwriting existing content, and returns true on success."
  },
  {
    "id": 1252,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename, std::ios::out | std::ios::trunc);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file, overwriting any existing content, and returns true on success or false on failure."
  },
  {
    "id": 1253,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1254,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1255,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1256,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1257,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, returning true on success and false on failure."
  },
  {
    "id": 1258,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads a file line by line and returns its contents as a vector of strings."
  },
  {
    "id": 1259,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string &filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads a file line by line and returns its contents as a vector of strings."
  },
  {
    "id": 1260,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1261,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool appendLineToFile(const std::string& filePath, const std::string& line) {\n    std::ofstream file(filePath, std::ios::app);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << line << \"\\n\";\n    return true;\n}\n```",
    "summary": "Appends a given line to a specified file, returning false if the file cannot be opened."
  },
  {
    "id": 1262,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream ofs(filename);\n    if (!ofs.is_open()) {\n        return false;\n    }\n    ofs << content;\n    return ofs.good();\n}\n```",
    "summary": "Writes a string to a file, returning true if successful or false if an error occurs."
  },
  {
    "id": 1263,
    "code": "#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n\n    return lines;\n}",
    "summary": "Reads all lines from a specified file into a vector of strings and returns it."
  },
  {
    "id": 1264,
    "code": "#include <fstream>\n#include <string>\n\nvoid writeStringToFile(const std::string& fileName, const std::string& content) {\n    std::ofstream outFile(fileName);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    }\n}",
    "summary": "This function writes a given string to a specified file, overwriting its existing content."
  },
  {
    "id": 1265,
    "code": "#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outfile(filename);\n    if (!outfile) {\n        return false;\n    }\n    outfile << content;\n    outfile.close();\n    return true;\n}",
    "summary": "Writes a given string to a specified file, returning true on success and false on failure."
  },
  {
    "id": 1266,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        std::cerr << \"Error opening file for writing: \" << filename << std::endl;\n        return;\n    }\n    outFile << content;\n    outFile.close();\n}\n```",
    "summary": "Writes a given string to a specified file, outputting an error message if the file cannot be opened."
  },
  {
    "id": 1267,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "This function reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1268,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads a file line by line and returns a vector containing each line as a string."
  },
  {
    "id": 1269,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& fileName, const std::string& content) {\n    std::ofstream file(fileName);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes a given string to a specified file and returns true if successful, otherwise returns false."
  },
  {
    "id": 1270,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1271,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1272,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1273,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    } else {\n        throw std::ios_base::failure(\"Failed to open the file.\");\n    }\n}\n```",
    "summary": "Writes a given string to a specified file, throwing an exception if the file cannot be opened."
  },
  {
    "id": 1274,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "This function reads all lines from a file and returns them as a vector of strings."
  },
  {
    "id": 1275,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings and returns it."
  },
  {
    "id": 1276,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    } else {\n        std::cerr << \"Unable to open file: \" << filename << std::endl;\n    }\n}\n```",
    "summary": "Writes a given string content to a specified file, creating or overwriting the file if necessary."
  },
  {
    "id": 1277,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1278,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1279,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by `filePath` and returns them as a vector of strings."
  },
  {
    "id": 1280,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, returning true on success or false on failure."
  },
  {
    "id": 1281,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1282,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outfile(filename);\n    if (!outfile.is_open()) {\n        return false;\n    }\n    outfile << content;\n    return outfile.good();\n}\n```",
    "summary": "Writes the given content to a specified file and returns true if successful, false otherwise."
  },
  {
    "id": 1283,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "This function reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1284,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    } else {\n        std::cerr << \"Unable to open file for writing: \" << filename << std::endl;\n    }\n}\n```",
    "summary": "Writes the specified content to a file, creating the file if it does not exist."
  },
  {
    "id": 1285,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid appendLineToFile(const std::string& filename, const std::string& line) {\n    std::ofstream file(filename, std::ios::app);\n    if (file.is_open()) {\n        file << line << '\\n';\n        file.close();\n    }\n}\n```",
    "summary": "This function appends a given line to a specified file, creating the file if it doesn't exist."
  },
  {
    "id": 1286,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1287,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1288,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid copyFileContent(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n\n    if (sourceFile && destinationFile) {\n        destinationFile << sourceFile.rdbuf();\n    }\n}\n```",
    "summary": "Copies the content of one file to another using binary mode file streams."
  },
  {
    "id": 1289,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a given file and returns them as a vector of strings."
  },
  {
    "id": 1290,
    "code": "#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& fileName, const std::string& content) {\n    std::ofstream outFile(fileName);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return true;\n}",
    "summary": "Writes a specified string content to a file with the given filename, returning true on success and false on failure."
  },
  {
    "id": 1291,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string &filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1292,
    "code": "```cpp\n#include <fstream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1293,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1294,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1295,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename, std::ios::out | std::ios::trunc);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file, overwriting any existing content, and returns true if successful, otherwise false."
  },
  {
    "id": 1296,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n\n    if (!sourceFile.is_open() || !destinationFile.is_open()) {\n        return false;\n    }\n\n    destinationFile << sourceFile.rdbuf();\n\n    return sourceFile.good() && destinationFile.good();\n}\n```",
    "summary": "Copies the contents of a source file to a destination file, returning false if either file cannot be opened."
  },
  {
    "id": 1297,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file) {\n        std::cerr << \"Error opening file for writing: \" << filename << std::endl;\n        return;\n    }\n    file << content;\n    if (!file) {\n        std::cerr << \"Error writing to file: \" << filename << std::endl;\n    }\n    file.close();\n}\n```",
    "summary": "Writes a given string to a specified file, handling errors in file opening and writing."
  },
  {
    "id": 1298,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true if successful, false otherwise."
  },
  {
    "id": 1299,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings and returns it."
  },
  {
    "id": 1300,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file) {\n        std::cerr << \"Error opening file for writing: \" << filename << std::endl;\n        return;\n    }\n    file << content;\n    if (!file) {\n        std::cerr << \"Error writing to file: \" << filename << std::endl;\n    }\n}\n```",
    "summary": "Writes a given string to a specified file, reporting errors if file operations fail."
  },
  {
    "id": 1301,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    \n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1302,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLines(const std::string &filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file and returns them as a vector of strings."
  },
  {
    "id": 1303,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid countLinesInFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    if (!file.is_open()) {\n        std::cerr << \"Unable to open file: \" << filePath << std::endl;\n        return;\n    }\n    std::string line;\n    int lineCount = 0;\n    while (std::getline(file, line)) {\n        ++lineCount;\n    }\n    file.close();\n    std::cout << \"Total lines: \" << lineCount << std::endl;\n}\n```",
    "summary": "Counts and prints the number of lines in a specified text file."
  },
  {
    "id": 1304,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid copyFileContents(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n\n    if (!sourceFile.is_open() || !destinationFile.is_open()) {\n        std::cerr << \"Error opening file(s).\" << std::endl;\n        return;\n    }\n\n    destinationFile << sourceFile.rdbuf();\n\n    sourceFile.close();\n    destinationFile.close();\n}\n```",
    "summary": "This function copies the contents of a source file to a destination file using binary mode."
  },
  {
    "id": 1305,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourcePath, const std::string& destPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destFile(destPath, std::ios::binary);\n    \n    if (!sourceFile || !destFile) {\n        return false;\n    }\n\n    destFile << sourceFile.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the contents of a source file to a destination file, returning false if either file cannot be opened."
  },
  {
    "id": 1306,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes a string to a specified file and returns true if successful, false otherwise."
  },
  {
    "id": 1307,
    "code": "```cpp\n#include <fstream>\n#include <iostream>\n#include <string>\n\nvoid writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        std::cerr << \"Error opening file for writing: \" << filename << std::endl;\n        return;\n    }\n    outFile << content;\n    outFile.close();\n}\n```",
    "summary": "Writes a given string to a specified file, handling any file opening errors."
  },
  {
    "id": 1308,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    if (!sourceFile) {\n        std::cerr << \"Error: Cannot open source file.\\n\";\n        return false;\n    }\n\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n    if (!destinationFile) {\n        std::cerr << \"Error: Cannot open destination file.\\n\";\n        return false;\n    }\n\n    destinationFile << sourceFile.rdbuf();\n\n    return sourceFile && destinationFile;\n}\n```",
    "summary": "This function copies the contents of a source file to a destination file using binary mode for both reading and writing."
  },
  {
    "id": 1309,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1310,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1311,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& data) {\n    std::ofstream file(filename);\n    if (!file.is_open()) return false;\n    file << data;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes specified data to a file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1312,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings and returns it."
  },
  {
    "id": 1313,
    "code": "#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}",
    "summary": "Reads all lines from a file specified by filename into a vector of strings."
  },
  {
    "id": 1314,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToTextFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified text file, returning true on success or false if the file cannot be opened."
  },
  {
    "id": 1315,
    "code": "#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& fileName, const std::string& content) {\n    std::ofstream outFile(fileName);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    }\n}",
    "summary": "Writes the specified content to a file with the given filename."
  },
  {
    "id": 1316,
    "code": "```cpp\n#include <fstream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads a text file and returns its contents as a vector of strings, with each string representing a line."
  },
  {
    "id": 1317,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1318,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1319,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1320,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename, std::ios::out | std::ios::trunc);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "This function writes a given string to a specified file, overwriting its contents, and returns a boolean indicating success."
  },
  {
    "id": 1321,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    \n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1322,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by the filename into a vector of strings."
  },
  {
    "id": 1323,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLines(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "This function reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1324,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1325,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1326,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1327,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the given content to a specified file and returns true if successful, false otherwise."
  },
  {
    "id": 1328,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1329,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        std::cerr << \"Error opening file for writing: \" << filename << std::endl;\n        return;\n    }\n    outFile << content;\n    outFile.close();\n}\n```",
    "summary": "Writes the provided string content to a specified file, outputting an error message if the file cannot be opened."
  },
  {
    "id": 1330,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outfile(filename);\n    if (outfile.is_open()) {\n        outfile << content;\n        outfile.close();\n    }\n}\n```",
    "summary": "Writes the provided content to a file with the specified filename, overwriting any existing data."
  },
  {
    "id": 1331,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid appendTextToFile(const std::string& filename, const std::string& text) {\n    std::ofstream outfile(filename, std::ios_base::app);\n    if (outfile.is_open()) {\n        outfile << text << std::endl;\n        outfile.close();\n    }\n}\n```",
    "summary": "Appends a given text to the end of a specified file, creating the file if it doesn't exist."
  },
  {
    "id": 1332,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& filePath, const std::string& text) {\n    std::ofstream outFile(filePath);\n    if (!outFile) {\n        return false;\n    }\n    outFile << text;\n    return outFile.good();\n}\n```",
    "summary": "Writes a given string to a specified file, returning true if successful and false otherwise."
  },
  {
    "id": 1333,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1334,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1335,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile) {\n        return false; // Return false if file cannot be opened\n    }\n    outFile << content;\n    return true; // Return true if writing succeeded\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1336,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid copyFileContents(const std::string& sourceFile, const std::string& destinationFile) {\n    std::ifstream source(sourceFile, std::ios::binary);\n    std::ofstream destination(destinationFile, std::ios::binary);\n\n    if (!source.is_open() || !destination.is_open()) {\n        throw std::ios_base::failure(\"Failed to open source or destination file.\");\n    }\n\n    destination << source.rdbuf();\n}\n```",
    "summary": "Copies the contents of a source file to a destination file using binary mode."
  },
  {
    "id": 1337,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& filename, const std::string& text) {\n    std::ofstream file(filename);\n    if (!file) {\n        return false;\n    }\n    file << text;\n    return file.good();\n}\n```",
    "summary": "Writes a given text to a specified file and returns true if successful, otherwise returns false."
  },
  {
    "id": 1338,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    }\n}\n```",
    "summary": "Writes a given string to a specified file, creating the file if it doesn't exist."
  },
  {
    "id": 1339,
    "code": "#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1340,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    }\n}\n```",
    "summary": "Writes a given string content to a specified file, overwriting existing content if the file already exists."
  },
  {
    "id": 1341,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContent(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n    \n    if (!sourceFile || !destinationFile) {\n        return false; // Return false if either file could not be opened\n    }\n    \n    destinationFile << sourceFile.rdbuf(); // Copy content from source to destination\n    \n    return true; // Return true on successful copy\n}\n```",
    "summary": "Copies the content of a source file to a destination file and returns true if successful, or false if any file cannot be opened."
  },
  {
    "id": 1342,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& filename, const std::string& text) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << text;\n    return true;\n}\n```",
    "summary": "Writes a given text string to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1343,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file and returns true if successful, otherwise false."
  },
  {
    "id": 1344,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1345,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file, returning true on success or false if the file cannot be opened."
  },
  {
    "id": 1346,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    } else {\n        std::cerr << \"Unable to open file for writing.\\n\";\n    }\n}\n```",
    "summary": "Writes the provided content to a specified file, creating it if it doesn't exist."
  },
  {
    "id": 1347,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1348,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1349,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourceFilePath, const std::string& destinationFilePath) {\n    std::ifstream sourceFile(sourceFilePath, std::ios::binary);\n    if (!sourceFile) return false;\n\n    std::ofstream destinationFile(destinationFilePath, std::ios::binary);\n    if (!destinationFile) return false;\n\n    destinationFile << sourceFile.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the contents of a source file to a destination file, returning true on success or false if either file cannot be opened."
  },
  {
    "id": 1350,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nbool copyFile(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    if (!sourceFile) {\n        std::cerr << \"Error: Cannot open source file.\\n\";\n        return false;\n    }\n\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n    if (!destinationFile) {\n        std::cerr << \"Error: Cannot open destination file.\\n\";\n        return false;\n    }\n\n    destinationFile << sourceFile.rdbuf();\n    return true;\n}\n```",
    "summary": "This function copies the contents of a source file to a destination file and returns true if successful, false otherwise."
  },
  {
    "id": 1351,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid copyFileContents(const std::string &sourcePath, const std::string &destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n\n    if (!sourceFile.is_open() || !destinationFile.is_open()) {\n        std::cerr << \"Error opening files!\" << std::endl;\n        return;\n    }\n\n    destinationFile << sourceFile.rdbuf();\n\n    sourceFile.close();\n    destinationFile.close();\n}\n```",
    "summary": "Copies the contents of a source file to a destination file using binary mode."
  },
  {
    "id": 1352,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a given file and returns them as a vector of strings."
  },
  {
    "id": 1353,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& fileName, const std::string& content) {\n    std::ofstream outFile(fileName);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes the given content to a specified file and returns true if successful, false otherwise."
  },
  {
    "id": 1354,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    }\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, creating or overwriting the file."
  },
  {
    "id": 1355,
    "code": "#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> ReadFileLines(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1356,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by filePath into a vector of strings."
  },
  {
    "id": 1357,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string &fileName, const std::string &content) {\n    std::ofstream outFile(fileName);\n    if (!outFile) {\n        return false; // Return false if file cannot be opened\n    }\n    outFile << content;\n    return true; // Return true if writing is successful\n}\n```",
    "summary": "Writes a given string to a file, returning true if successful or false if the file cannot be opened."
  },
  {
    "id": 1358,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings."
  },
  {
    "id": 1359,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outfile(filename);\n    if (!outfile) {\n        std::cerr << \"Error opening file for writing: \" << filename << std::endl;\n        return;\n    }\n    outfile << content;\n    if (!outfile) {\n        std::cerr << \"Error writing to file: \" << filename << std::endl;\n    }\n    outfile.close();\n}\n```",
    "summary": "Writes the given content to a specified file, handling file opening and writing errors."
  },
  {
    "id": 1360,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file and returns them as a vector of strings."
  },
  {
    "id": 1361,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile.is_open()) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes a given string to a specified file, returning true if successful and false if the file cannot be opened."
  },
  {
    "id": 1362,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& fileName, const std::string& content) {\n    std::ofstream file(fileName);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes the specified content to a file with the given name, returning true on success and false on failure."
  },
  {
    "id": 1363,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContent(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream source(sourcePath, std::ios::binary);\n    if (!source) return false;\n\n    std::ofstream destination(destinationPath, std::ios::binary);\n    if (!destination) return false;\n\n    destination << source.rdbuf();\n    return true;\n}\n```",
    "summary": "This function copies the content of a file from a source path to a destination path using binary mode."
  },
  {
    "id": 1364,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    \n    if (file.is_open()) {\n        while (getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads all lines from a given file and returns them as a vector of strings."
  },
  {
    "id": 1365,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1366,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& filePath, const std::string& text) {\n    std::ofstream outFile(filePath);\n    if (!outFile) {\n        return false; // Return false if the file could not be opened\n    }\n    outFile << text;\n    return true; // Return true if the text was successfully written\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1367,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToTextFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the specified content to a text file, returning true on success or false if the file cannot be opened."
  },
  {
    "id": 1368,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile.is_open()) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes the specified content to a file at the given file path, returning true if successful."
  },
  {
    "id": 1369,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1370,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n\n    if (!sourceFile.is_open() || !destinationFile.is_open()) {\n        return false;\n    }\n\n    destinationFile << sourceFile.rdbuf();\n\n    return true;\n}\n```",
    "summary": "Copies contents from a source file to a destination file in binary mode, returning true if successful."
  },
  {
    "id": 1371,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> ReadLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1372,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1373,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid copyFileContent(const std::string& sourcePath, const std::string& destPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destFile(destPath, std::ios::binary);\n\n    if (!sourceFile) {\n        std::cerr << \"Source file could not be opened.\\n\";\n        return;\n    }\n\n    if (!destFile) {\n        std::cerr << \"Destination file could not be opened.\\n\";\n        return;\n    }\n\n    destFile << sourceFile.rdbuf();\n}\n```",
    "summary": "Copies the content of one file to another by reading from the source file and writing to the destination file."
  },
  {
    "id": 1374,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename, std::ios::out | std::ios::trunc);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, returning true on success or false if the file cannot be opened."
  },
  {
    "id": 1375,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, returning true if successful, or false if the file cannot be opened."
  },
  {
    "id": 1376,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "This function writes a string to a specified file and returns true if successful, or false if the file could not be opened."
  },
  {
    "id": 1377,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1378,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string &filename, const std::string &content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes a string to a specified file, returning true if successful, false otherwise."
  },
  {
    "id": 1379,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    } else {\n        std::cerr << \"Unable to open file for writing: \" << filename << std::endl;\n    }\n}\n```",
    "summary": "Writes the given content to a specified file, creating or overwriting the file as necessary."
  },
  {
    "id": 1380,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, returning true if successful."
  },
  {
    "id": 1381,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <stdexcept>\n\nvoid writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile.is_open()) {\n        throw std::runtime_error(\"Unable to open file for writing\");\n    }\n    outFile << content;\n    outFile.close();\n}\n```",
    "summary": "Writes a given string to a specified file, throwing an exception if the file cannot be opened."
  },
  {
    "id": 1382,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <stdexcept>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream fileStream(filename);\n    if (!fileStream.is_open()) {\n        throw std::runtime_error(\"Unable to open file for writing\");\n    }\n    fileStream << content;\n    if (fileStream.fail()) {\n        throw std::runtime_error(\"Failed to write content to file\");\n    }\n    fileStream.close();\n}\n```",
    "summary": "Writes the specified content to a file, throwing an exception if the file cannot be opened or writing fails."
  },
  {
    "id": 1383,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1384,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContent(const std::string& sourceFile, const std::string& destinationFile) {\n    std::ifstream source(sourceFile, std::ios::binary);\n    std::ofstream destination(destinationFile, std::ios::binary);\n\n    if (!source.is_open() || !destination.is_open()) {\n        return false;\n    }\n\n    destination << source.rdbuf();\n\n    return source.good() && destination.good();\n}\n```",
    "summary": "Copies the content of one file to another using binary mode and returns true if successful."
  },
  {
    "id": 1385,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads a file and returns its content as a vector of strings, with each string representing a line."
  },
  {
    "id": 1386,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1387,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToTextFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "This function writes the given content to a specified text file and returns true if successful, or false if the file cannot be opened."
  },
  {
    "id": 1388,
    "code": "```cpp\n#include <fstream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings, returning the vector."
  },
  {
    "id": 1389,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid copyFileContents(const std::string &sourceFile, const std::string &destinationFile) {\n    std::ifstream inputFile(sourceFile, std::ios::binary);\n    std::ofstream outputFile(destinationFile, std::ios::binary);\n\n    if (!inputFile) {\n        std::cerr << \"Error: Cannot open source file.\" << std::endl;\n        return;\n    }\n    if (!outputFile) {\n        std::cerr << \"Error: Cannot open destination file.\" << std::endl;\n        return;\n    }\n\n    outputFile << inputFile.rdbuf();\n\n    inputFile.close();\n    outputFile.close();\n}\n```",
    "summary": "Copies the contents of one file to another using binary mode for both input and output streams."
  },
  {
    "id": 1390,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    if (!sourceFile.is_open()) {\n        return false;\n    }\n\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n    if (!destinationFile.is_open()) {\n        return false;\n    }\n\n    destinationFile << sourceFile.rdbuf();\n\n    sourceFile.close();\n    destinationFile.close();\n    return true;\n}\n```",
    "summary": "Copies the contents of one file to another specified file, returning true if successful."
  },
  {
    "id": 1391,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1392,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings."
  },
  {
    "id": 1393,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string &filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings, returning the vector."
  },
  {
    "id": 1394,
    "code": "```cpp\n#include <fstream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> readFileLines(const std::string &filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1395,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream file(filePath);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes a string to a specified file, returning true if successful, otherwise false."
  },
  {
    "id": 1396,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (!file.is_open()) {\n        return lines; // Return empty vector if file cannot be opened\n    }\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    file.close();\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings and returns it."
  },
  {
    "id": 1397,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1398,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n#include <stdexcept>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    if (!file.is_open()) {\n        throw std::runtime_error(\"Could not open file\");\n    }\n\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n\n    file.close();\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1399,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLines(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1400,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads and returns all lines from a file as a vector of strings given the file path."
  },
  {
    "id": 1401,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by the filename and returns them as a vector of strings."
  },
  {
    "id": 1402,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file and returns them as a vector of strings."
  },
  {
    "id": 1403,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1404,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success and false on error."
  },
  {
    "id": 1405,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n\n    if (!sourceFile.is_open() || !destinationFile.is_open()) {\n        return false;\n    }\n\n    destinationFile << sourceFile.rdbuf();\n\n    return sourceFile.good() && destinationFile.good();\n}\n```",
    "summary": "Copies the contents of one file to another, returning true if successful, or false if an error occurs."
  },
  {
    "id": 1406,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by `filePath` and returns them as a vector of strings."
  },
  {
    "id": 1407,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings, with each element representing a line."
  },
  {
    "id": 1408,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1409,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1410,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1411,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "This function writes a given string content to a specified file, returning true if successful and false if the file cannot be opened."
  },
  {
    "id": 1412,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1413,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& text) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << text;\n    return file.good();\n}\n```",
    "summary": "Writes the provided text to a file with the specified filename, returning true on success and false on failure."
  },
  {
    "id": 1414,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile) {\n        return false; // Failed to open file\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes a given string to a specified file and returns true if the operation is successful."
  },
  {
    "id": 1415,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return true;\n}\n```",
    "summary": "Writes the given content to a specified file, returning true on success and false if the file can't be opened."
  },
  {
    "id": 1416,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outfile(filename);\n    if (outfile.is_open()) {\n        outfile << content;\n        outfile.close();\n    } else {\n        std::cerr << \"Error: Unable to open file for writing.\" << std::endl;\n    }\n}\n```",
    "summary": "This function writes a given string to a specified file, creating the file if it doesn't exist."
  },
  {
    "id": 1417,
    "code": "#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1418,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    }\n}\n```",
    "summary": "Writes a given string to a specified file, overwriting if the file already exists."
  },
  {
    "id": 1419,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream file(filePath);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the given content to a file specified by filePath and returns true if successful, false otherwise."
  },
  {
    "id": 1420,
    "code": "#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}",
    "summary": "This function reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1421,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1422,
    "code": "#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1423,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings and returns it."
  },
  {
    "id": 1424,
    "code": "#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream file(filePath);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}",
    "summary": "Writes the specified content to a file at the given file path, returning true if successful."
  },
  {
    "id": 1425,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1426,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the provided content to a file with the specified filename, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1427,
    "code": "#include <fstream>\n#include <string>\n\nvoid copyFileContents(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n\n    if (!sourceFile || !destinationFile) {\n        throw std::ios_base::failure(\"Failed to open source or destination file.\");\n    }\n\n    destinationFile << sourceFile.rdbuf();\n}",
    "summary": "This function copies the contents of a source file to a destination file using binary mode."
  },
  {
    "id": 1428,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1429,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFile(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    if (!sourceFile) return false;\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n    if (!destinationFile) return false;\n    destinationFile << sourceFile.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the contents of one file to another specified by source and destination paths, returning true on success."
  },
  {
    "id": 1430,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string &filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1431,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& fileName, const std::string& text) {\n    std::ofstream file(fileName);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << text;\n    return file.good();\n}\n```",
    "summary": "Writes a given text to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1432,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string &filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1433,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes a given string to a file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1434,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    \n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings."
  },
  {
    "id": 1435,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& filePath, const std::string& text) {\n    std::ofstream outFile(filePath);\n    if (!outFile) {\n        return false;\n    }\n    outFile << text;\n    return outFile.good();\n}\n```",
    "summary": "Writes a string to a specified file and returns true if successful, false otherwise."
  },
  {
    "id": 1436,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    }\n}\n```",
    "summary": "Writes a given string to a specified file, creating the file if it does not exist."
  },
  {
    "id": 1437,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outfile(filename, std::ios::app);\n    if (outfile.is_open()) {\n        outfile << content << std::endl;\n        outfile.close();\n    } else {\n        std::cerr << \"Error opening file for writing: \" << filename << std::endl;\n    }\n}\n```",
    "summary": "Appends the specified content to a file, creating the file if it does not exist."
  },
  {
    "id": 1438,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1439,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1440,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1441,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& data) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << data;\n    return true;\n}\n```",
    "summary": "Writes a string to a specified file, returning true on success and false on failure."
  },
  {
    "id": 1442,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1443,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid copyFileContents(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath);\n    std::ofstream destinationFile(destinationPath);\n\n    if (!sourceFile.is_open() || !destinationFile.is_open()) {\n        std::cerr << \"Error opening files.\" << std::endl;\n        return;\n    }\n\n    std::string line;\n    while (std::getline(sourceFile, line)) {\n        destinationFile << line << '\\n';\n    }\n\n    sourceFile.close();\n    destinationFile.close();\n}\n```",
    "summary": "Copies the contents of one text file to another specified file."
  },
  {
    "id": 1444,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outfile(filename);\n    if (outfile.is_open()) {\n        outfile << content;\n        outfile.close();\n    } else {\n        std::cerr << \"Unable to open file for writing: \" << filename << std::endl;\n    }\n}\n```",
    "summary": "Writes a given string content to a specified file, creating or overwriting the file as necessary."
  },
  {
    "id": 1445,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    } else {\n        std::cerr << \"Error opening file: \" << filename << std::endl;\n    }\n}\n```",
    "summary": "Writes a given string to a specified file, outputting an error message if the file cannot be opened."
  },
  {
    "id": 1446,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid copyFileContent(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n\n    if (!sourceFile || !destinationFile) {\n        std::cerr << \"Error opening files.\" << std::endl;\n        return;\n    }\n\n    destinationFile << sourceFile.rdbuf();\n    \n    sourceFile.close();\n    destinationFile.close();\n}\n```",
    "summary": "Copies the content of one file to another using binary mode for accurate reproduction of file data."
  },
  {
    "id": 1447,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToTextFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile) {\n        std::cerr << \"Error opening file for writing: \" << filePath << std::endl;\n        return;\n    }\n    outFile << content;\n    outFile.close();\n}\n```",
    "summary": "This function writes a given string content to a specified text file, handling file opening errors."
  },
  {
    "id": 1448,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings."
  },
  {
    "id": 1449,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile.is_open()) {\n        return false;\n    }\n    outFile << content;\n    return true;\n}\n```",
    "summary": "Writes the given string content to a file specified by the filename, returning true on success or false if the file cannot be opened."
  },
  {
    "id": 1450,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1451,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes a string to a specified file and returns true if successful, false otherwise."
  },
  {
    "id": 1452,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& fileName, const std::string& content) {\n    std::ofstream outFile(fileName);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes a given string to a specified file and returns true if successful, false otherwise."
  },
  {
    "id": 1453,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false; // File could not be opened\n    }\n    outFile << content;\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1454,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1455,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1456,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream file(filePath);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1457,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1458,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream infile(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(infile, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file and returns them as a vector of strings."
  },
  {
    "id": 1459,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "This function writes a given string to a specified file, returning false if the file cannot be opened."
  },
  {
    "id": 1460,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1461,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream fileStream(filename);\n    if (!fileStream.is_open()) {\n        return false;\n    }\n    fileStream << content;\n    return fileStream.good();\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success or false if the file cannot be opened or written."
  },
  {
    "id": 1462,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourceFile, const std::string& destinationFile) {\n    std::ifstream source(sourceFile, std::ios::binary);\n    std::ofstream destination(destinationFile, std::ios::binary);\n\n    if (!source || !destination) {\n        return false;\n    }\n\n    destination << source.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the contents of one file to another, returning true on success and false if any file operation fails."
  },
  {
    "id": 1463,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid copyFileContents(const std::string& sourceFile, const std::string& destinationFile) {\n    std::ifstream source(sourceFile, std::ios::binary);\n    std::ofstream destination(destinationFile, std::ios::binary);\n\n    if (!source.is_open() || !destination.is_open()) {\n        throw std::ios_base::failure(\"Failed to open source or destination file.\");\n    }\n\n    destination << source.rdbuf();\n}\n```",
    "summary": "Copies the entire contents of a source file to a destination file using binary mode file streams."
  },
  {
    "id": 1464,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string &filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1465,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1466,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContent(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    if (!sourceFile.is_open()) return false;\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n    if (!destinationFile.is_open()) return false;\n\n    destinationFile << sourceFile.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the content of a file from a source path to a destination path and returns true if successful."
  },
  {
    "id": 1467,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1468,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "This function reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1469,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads and returns all lines from a specified file as a vector of strings."
  },
  {
    "id": 1470,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a given file into a vector of strings and returns it."
  },
  {
    "id": 1471,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a given file and returns them as a vector of strings."
  },
  {
    "id": 1472,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1473,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes the given content to a specified file, returning true if successful."
  },
  {
    "id": 1474,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1475,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    }\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, creating or overwriting the file."
  },
  {
    "id": 1476,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <stdexcept>\n\nvoid writeStringToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile.is_open()) {\n        throw std::runtime_error(\"Unable to open file for writing\");\n    }\n    outFile << content;\n    outFile.close();\n}\n```",
    "summary": "Writes a given string to a specified file, throwing an exception if the file cannot be opened."
  },
  {
    "id": 1477,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream file(filePath);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    }\n}\n```",
    "summary": "Writes the specified content to a file at the given file path."
  },
  {
    "id": 1478,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1479,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1480,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1481,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        std::cerr << \"Error opening file for writing: \" << filename << std::endl;\n        return;\n    }\n    outFile << content;\n    if (!outFile) {\n        std::cerr << \"Error writing to file: \" << filename << std::endl;\n    }\n}\n```",
    "summary": "This function writes a given string content to a specified file, handling errors if the file cannot be opened or written to."
  },
  {
    "id": 1482,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid appendToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename, std::ios::app);\n    if (file.is_open()) {\n        file << content << std::endl;\n    }\n    file.close();\n}\n```",
    "summary": "Appends a given string to the end of a specified file, creating it if it doesn't exist."
  },
  {
    "id": 1483,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings, returning the vector."
  },
  {
    "id": 1484,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings, returning the vector."
  },
  {
    "id": 1485,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings."
  },
  {
    "id": 1486,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes the specified content to a file and returns true if successful, false otherwise."
  },
  {
    "id": 1487,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    \n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads a file and returns its contents as a vector of strings, with each element representing a line from the file."
  },
  {
    "id": 1488,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outfile(filename);\n    if (!outfile.is_open()) {\n        return false;\n    }\n    outfile << content;\n    outfile.close();\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1489,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& data) {\n    std::ofstream file(filename, std::ios::out | std::ios::trunc);\n    if (file.is_open()) {\n        file << data;\n        file.close();\n    } else {\n        std::cerr << \"Unable to open file for writing.\" << std::endl;\n    }\n}\n```",
    "summary": "Writes a given string to a specified file, overwriting its contents."
  },
  {
    "id": 1490,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "This function reads a file line-by-line and returns the lines as a vector of strings."
  },
  {
    "id": 1491,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    } else {\n        std::cerr << \"Unable to open file for writing: \" << filename << std::endl;\n    }\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, creating the file if it does not exist."
  },
  {
    "id": 1492,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true if successful or false if the file cannot be opened."
  },
  {
    "id": 1493,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename, std::ios::out);\n    if (!file) {\n        std::cerr << \"Error opening file for writing: \" << filename << std::endl;\n        return;\n    }\n    file << content;\n    file.close();\n}\n```",
    "summary": "Writes a given string to a specified file, handling file opening errors."
  },
  {
    "id": 1494,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true if successful or false if the file cannot be opened."
  },
  {
    "id": 1495,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid copyFileContent(const std::string& sourceFile, const std::string& destFile) {\n    std::ifstream inFile(sourceFile);\n    std::ofstream outFile(destFile);\n\n    if (!inFile.is_open() || !outFile.is_open()) {\n        std::cerr << \"Error opening files!\" << std::endl;\n        return;\n    }\n\n    std::string line;\n    while (std::getline(inFile, line)) {\n        outFile << line << '\\n';\n    }\n\n    inFile.close();\n    outFile.close();\n}\n```",
    "summary": "Copies the content from a source text file to a destination text file line by line."
  },
  {
    "id": 1496,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1497,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& fileName) {\n    std::ifstream file(fileName);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1498,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1499,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid appendLineToFile(const std::string& filePath, const std::string& line) {\n    std::ofstream file(filePath, std::ios::app);\n    if (file.is_open()) {\n        file << line << \"\\n\";\n        file.close();\n    }\n}\n```",
    "summary": "Appends a new line of text to the end of a specified file."
  },
  {
    "id": 1500,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1501,
    "code": "#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}",
    "summary": "Reads lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1502,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file and returns them as a vector of strings."
  },
  {
    "id": 1503,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1504,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file and returns them as a vector of strings."
  },
  {
    "id": 1505,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes specified content to a file and returns true if successful, otherwise returns false."
  },
  {
    "id": 1506,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1507,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename, std::ios::out | std::ios::trunc);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file, overwriting it if it already exists, and returns true if successful."
  },
  {
    "id": 1508,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string &filename, const std::string &text) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << text;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes a given string to a file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1509,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    }\n}\n```",
    "summary": "Writes a given string to a specified file, creating or overwriting the file as needed."
  },
  {
    "id": 1510,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid copyFile(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n\n    if (!sourceFile.is_open() || !destinationFile.is_open()) {\n        std::cerr << \"Error: Unable to open source or destination file.\" << std::endl;\n        return;\n    }\n\n    destinationFile << sourceFile.rdbuf();\n\n    sourceFile.close();\n    destinationFile.close();\n}\n```",
    "summary": "Copies the content of a source file to a destination file using binary mode."
  },
  {
    "id": 1511,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1512,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1513,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "The function writes a given string to a file and returns true if successful, otherwise false."
  },
  {
    "id": 1514,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContent(const std::string &sourcePath, const std::string &destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n\n    if (!sourceFile || !destinationFile) {\n        return false;\n    }\n\n    destinationFile << sourceFile.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the content of a source file to a destination file using binary mode, returning true if successful."
  },
  {
    "id": 1515,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1516,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outfile(filename);\n    if (!outfile.is_open()) {\n        return false;\n    }\n    outfile << content;\n    outfile.close();\n    return true;\n}\n```",
    "summary": "Writes the given content to a specified file, returning true on success and false on failure."
  },
  {
    "id": 1517,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    \n    if (!file.is_open()) return lines;\n\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    \n    file.close();\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by filePath and returns them as a vector of strings."
  },
  {
    "id": 1518,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1519,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToTextFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes a string to a specified file and returns true if successful, otherwise false."
  },
  {
    "id": 1520,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings, returning the lines as a vector."
  },
  {
    "id": 1521,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    file.close();\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file and returns them as a vector of strings."
  },
  {
    "id": 1522,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    \n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1523,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& fileName, const std::string& content) {\n    std::ofstream outFile(fileName);\n    if (!outFile.is_open()) {\n        return false;\n    }\n    outFile << content;\n    outFile.close();\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1524,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1525,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& fileName, const std::string& content) {\n    std::ofstream file(fileName);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    }\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, creating or overwriting it if necessary."
  },
  {
    "id": 1526,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    \n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads all lines from a file and returns them as a vector of strings."
  },
  {
    "id": 1527,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    } else {\n        std::cerr << \"Unable to open file for writing: \" << filename << std::endl;\n    }\n}\n```",
    "summary": "Writes a given string to a specified file, creating the file if it does not exist."
  },
  {
    "id": 1528,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1529,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& filePath, const std::string& text) {\n    std::ofstream file(filePath);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << text;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the provided text to a file at the specified path, returning true on success."
  },
  {
    "id": 1530,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nbool writeToTextFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes specified content to a text file, returning true on success or false if the file cannot be opened."
  },
  {
    "id": 1531,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes the given text content to a file with the specified filename, returning true on success and false on failure."
  },
  {
    "id": 1532,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename, std::ios::out | std::ios::trunc);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file, overwriting its existing content, and returns a boolean indicating success or failure."
  },
  {
    "id": 1533,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string &filePath, const std::string &content) {\n    std::ofstream outFile(filePath);\n    if (!outFile) {\n        return false; // Return false if the file cannot be opened\n    }\n    outFile << content;\n    return outFile.good(); // Return true if the write operation was successful\n}\n```",
    "summary": "Writes a string to a specified file and returns true if the operation is successful, otherwise returns false."
  },
  {
    "id": 1534,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourceFilePath, const std::string& destinationFilePath) {\n    std::ifstream sourceFile(sourceFilePath, std::ios::binary);\n    std::ofstream destinationFile(destinationFilePath, std::ios::binary);\n    \n    if (!sourceFile.is_open() || !destinationFile.is_open()) {\n        return false;\n    }\n\n    destinationFile << sourceFile.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the contents of a source file to a destination file, returning true if successful."
  },
  {
    "id": 1535,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1536,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    outFile.close();\n    return true;\n}\n```",
    "summary": "The function writes a given string to a specified file and returns true if successful, otherwise false."
  },
  {
    "id": 1537,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContent(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n\n    if (!sourceFile || !destinationFile) {\n        return false; // Failed to open files\n    }\n\n    destinationFile << sourceFile.rdbuf(); // Copy content\n\n    return true; // Success\n}\n```",
    "summary": "Copies content from a source file to a destination file, returning true on success or false if either file cannot be opened."
  },
  {
    "id": 1538,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n\n    if (!file.is_open()) {\n        throw std::runtime_error(\"Unable to open file\");\n    }\n\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n\n    file.close();\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1539,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by `filename` and returns them as a vector of strings."
  },
  {
    "id": 1540,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes a given string to a specified file, returning true if successful, false otherwise."
  },
  {
    "id": 1541,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string &filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by `filePath` and returns them as a vector of strings."
  },
  {
    "id": 1542,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1543,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1544,
    "code": "```cpp\n#include <fstream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    \n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1545,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes the given content to a file specified by the filename, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1546,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string &filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (!file.is_open()) {\n        throw std::runtime_error(\"Unable to open file\");\n    }\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    file.close();\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings, throwing an exception if the file cannot be opened."
  },
  {
    "id": 1547,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1548,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1549,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream file(filePath);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes a string to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1550,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes a given string to a specified file, returning a boolean indicating success or failure."
  },
  {
    "id": 1551,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1552,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1553,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContent(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    if (!sourceFile.is_open()) return false;\n    \n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n    if (!destinationFile.is_open()) return false;\n    \n    destinationFile << sourceFile.rdbuf();\n    \n    return true;\n}\n```",
    "summary": "Copies the contents of a source file to a destination file in binary mode, returning true on success or false if any file fails to open."
  },
  {
    "id": 1554,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1555,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    } else {\n        std::cerr << \"Unable to open file for writing: \" << filename << std::endl;\n    }\n}\n```",
    "summary": "Writes a given string to a specified file, creating the file if it doesn't exist."
  },
  {
    "id": 1556,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1557,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourceFilePath, const std::string& destinationFilePath) {\n    std::ifstream sourceFile(sourceFilePath, std::ios::binary);\n    std::ofstream destinationFile(destinationFilePath, std::ios::binary);\n\n    if (!sourceFile || !destinationFile) {\n        return false;\n    }\n\n    destinationFile << sourceFile.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the contents of a source file to a destination file, returning false if either file cannot be opened."
  },
  {
    "id": 1558,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string &filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1559,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile.is_open()) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success and false if the file cannot be opened or written."
  },
  {
    "id": 1560,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContent(const std::string& sourceFile, const std::string& destinationFile) {\n    std::ifstream src(sourceFile, std::ios::binary);\n    std::ofstream dest(destinationFile, std::ios::binary);\n\n    if (!src || !dest) {\n        return false;\n    }\n\n    dest << src.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the content of one file to another using binary mode."
  },
  {
    "id": 1561,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1562,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid readFileLineByLine(const std::string& filename) {\n    std::ifstream file(filename);\n    if (!file.is_open()) {\n        std::cerr << \"Error opening file: \" << filename << std::endl;\n        return;\n    }\n\n    std::string line;\n    while (std::getline(file, line)) {\n        std::cout << line << std::endl;\n    }\n\n    file.close();\n}\n```",
    "summary": "Reads and prints each line of a specified file to the console, handling file opening errors."
  },
  {
    "id": 1563,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string &filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1564,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file, returning true if successful, or false if the file cannot be opened."
  },
  {
    "id": 1565,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    } else {\n        std::cerr << \"Unable to open file for writing: \" << filename << std::endl;\n    }\n}\n```",
    "summary": "Writes a given string to a specified file, creating or overwriting the file."
  },
  {
    "id": 1566,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    }\n}\n```",
    "summary": "Writes the specified content to a file at the given file path."
  },
  {
    "id": 1567,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid copyFileContent(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n\n    if (!sourceFile) {\n        std::cerr << \"Error opening source file: \" << sourcePath << std::endl;\n        return;\n    }\n\n    if (!destinationFile) {\n        std::cerr << \"Error opening destination file: \" << destinationPath << std::endl;\n        return;\n    }\n\n    destinationFile << sourceFile.rdbuf();\n}\n```",
    "summary": "Copies the content of a source file to a destination file using binary mode to preserve data integrity."
  },
  {
    "id": 1568,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& filename, const std::string& text) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << text;\n    return true;\n}\n```",
    "summary": "Writes a given text to a specified file, returning false if the file cannot be opened."
  },
  {
    "id": 1569,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        std::cerr << \"Error opening file for writing: \" << filename << std::endl;\n        return;\n    }\n    outFile << content;\n    outFile.close();\n}\n```",
    "summary": "Writes a given string to a specified file, creating the file if it does not exist."
  },
  {
    "id": 1570,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1571,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1572,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1573,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1574,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1575,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1576,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file and returns them as a vector of strings."
  },
  {
    "id": 1577,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid countLinesInFile(const std::string& filename, int& lineCount) {\n    std::ifstream file(filename);\n    std::string line;\n    lineCount = 0;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            ++lineCount;\n        }\n        file.close();\n    }\n}\n```",
    "summary": "Counts the number of lines in a given file and stores the result in the provided integer reference."
  },
  {
    "id": 1578,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1579,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    \n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings and returns it."
  },
  {
    "id": 1580,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes a given string content to a specified file, returning true if successful, false otherwise."
  },
  {
    "id": 1581,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nbool writeToTextFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "This function writes a given string content to a specified text file and returns true on success, or false if the file cannot be opened."
  },
  {
    "id": 1582,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <iostream>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        std::cerr << \"Error opening file for writing: \" << filename << std::endl;\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "This function writes a given string to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1583,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1584,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid readFileLines(const std::string& filename) {\n    std::ifstream file(filename);\n    if (!file.is_open()) {\n        std::cerr << \"Failed to open file: \" << filename << std::endl;\n        return;\n    }\n    \n    std::string line;\n    while (std::getline(file, line)) {\n        std::cout << line << std::endl;\n    }\n    \n    file.close();\n}\n```",
    "summary": "Reads and prints each line from a specified file to the standard output."
  },
  {
    "id": 1585,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file and returns them as a vector of strings."
  },
  {
    "id": 1586,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        std::cerr << \"Error opening file for writing: \" << filename << std::endl;\n        return;\n    }\n    outFile << content;\n    outFile.close();\n}\n```",
    "summary": "Writes a given string content to a specified file, handling any errors that occur during file opening."
  },
  {
    "id": 1587,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes a given string content to a specified file and returns true on success, false on failure."
  },
  {
    "id": 1588,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename, std::ios::out | std::ios::trunc);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes the specified content to a file, overwriting any existing data, and returns true on success or false on failure."
  },
  {
    "id": 1589,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    } else {\n        std::cerr << \"Unable to open file for writing.\" << std::endl;\n    }\n}\n```",
    "summary": "Writes a given string to a specified file, creating or overwriting the file if necessary."
  },
  {
    "id": 1590,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    } else {\n        throw std::ios_base::failure(\"Failed to open the file.\");\n    }\n}\n```",
    "summary": "Writes the provided content to a specified file, throwing an exception if the file cannot be opened."
  },
  {
    "id": 1591,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1592,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <iostream>\n\nbool writeLineToFile(const std::string& filePath, const std::string& line) {\n    std::ofstream file(filePath, std::ios::app);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << line << std::endl;\n    file.close();\n    return true;\n}\n```",
    "summary": "Appends a line of text to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1593,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    } else {\n        std::cerr << \"Unable to open file for writing: \" << filename << std::endl;\n    }\n}\n```",
    "summary": "Writes a given string content to a specified file, creating the file if it doesn't exist."
  },
  {
    "id": 1594,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1595,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    \n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings and returns it."
  },
  {
    "id": 1596,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile.is_open()) {\n        return false;\n    }\n    outFile << content;\n    return true;\n}\n```",
    "summary": "Writes the given text content to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1597,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1598,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1599,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads and returns all lines from a specified file into a vector of strings."
  },
  {
    "id": 1600,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string &filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a given file and returns them as a vector of strings."
  },
  {
    "id": 1601,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1602,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1603,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings, returning the vector."
  },
  {
    "id": 1604,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes a given string to a file specified by filename, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1605,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file and returns them as a vector of strings."
  },
  {
    "id": 1606,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string &filename, const std::string &content) {\n    std::ofstream file(filename, std::ios::out | std::ios::trunc);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes the given content to a specified file, overwriting any existing content, and returns true if successful."
  },
  {
    "id": 1607,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1608,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeTextToFile(const std::string& filename, const std::string& text) {\n    std::ofstream outFile(filename);\n    if (outFile.is_open()) {\n        outFile << text;\n        outFile.close();\n    }\n}\n```",
    "summary": "This function writes a given string to a specified file, creating the file if it does not exist."
  },
  {
    "id": 1609,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string &filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    \n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1610,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1611,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings, returning the vector."
  },
  {
    "id": 1612,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourceFile, const std::string& destFile) {\n    std::ifstream src(sourceFile, std::ios::binary);\n    std::ofstream dest(destFile, std::ios::binary);\n\n    if (!src || !dest) {\n        return false; // Return false if files cannot be opened.\n    }\n\n    dest << src.rdbuf(); // Copy contents from source to destination.\n    return true; // Return true if copying is successful.\n}\n```",
    "summary": "Copies contents from a source file to a destination file, returning true on success and false if file operations fail."
  },
  {
    "id": 1613,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1614,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file and returns true if successful, false otherwise."
  },
  {
    "id": 1615,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file and returns them as a vector of strings."
  },
  {
    "id": 1616,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1617,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1618,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    } else {\n        std::cerr << \"Error: Unable to open file for writing.\" << std::endl;\n    }\n}\n```",
    "summary": "This function writes a given string to a specified file, handling potential errors when opening the file."
  },
  {
    "id": 1619,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid readFileAndPrintLines(const std::string& filePath) {\n    std::ifstream file(filePath);\n    if (!file.is_open()) {\n        return;\n    }\n    std::string line;\n    while (std::getline(file, line)) {\n        std::cout << line << std::endl;\n    }\n    file.close();\n}\n```",
    "summary": "Reads a file line by line and prints each line to the standard output."
  },
  {
    "id": 1620,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning false if the file cannot be opened."
  },
  {
    "id": 1621,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file and returns them as a vector of strings."
  },
  {
    "id": 1622,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeStringToFile(const std::string& filePath, const std::string& data) {\n    std::ofstream outFile(filePath);\n    if (outFile.is_open()) {\n        outFile << data;\n        outFile.close();\n    }\n}\n```",
    "summary": "Writes a given string to a specified file path, overwriting the file if it already exists."
  },
  {
    "id": 1623,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1624,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& filename, const std::string& text) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << text;\n    return file.good();\n}\n```",
    "summary": "Writes the given text to a specified file, returning a boolean indicating success or failure."
  },
  {
    "id": 1625,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1626,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n\n    if (!sourceFile || !destinationFile) {\n        return false;\n    }\n\n    destinationFile << sourceFile.rdbuf();\n\n    return sourceFile && destinationFile;\n}\n```",
    "summary": "This function copies the contents of a source file to a destination file in binary mode, returning a boolean indicating success or failure."
  },
  {
    "id": 1627,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the given string content to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1628,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false; // Failed to open file\n    }\n    outFile << content;\n    return outFile.good(); // Return true if writing was successful\n}\n```",
    "summary": "Writes specified content to a file and returns a boolean indicating the success of the operation."
  },
  {
    "id": 1629,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1630,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename, std::ios::out | std::ios::trunc);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    outFile.close();\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, overwriting its existing content."
  },
  {
    "id": 1631,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    }\n}\n```",
    "summary": "Writes the specified content to a file with the given filename."
  },
  {
    "id": 1632,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, returning true on success and false on failure."
  },
  {
    "id": 1633,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes content to a specified file and returns true if successful, or false if the file cannot be opened."
  },
  {
    "id": 1634,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile.is_open()) {\n        return false;\n    }\n    outFile << content;\n    outFile.close();\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file at the given path, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1635,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1636,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1637,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid copyFileContent(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n\n    if (!sourceFile.is_open()) {\n        std::cerr << \"Error: Could not open source file.\\n\";\n        return;\n    }\n\n    if (!destinationFile.is_open()) {\n        std::cerr << \"Error: Could not open destination file.\\n\";\n        return;\n    }\n\n    destinationFile << sourceFile.rdbuf();\n\n    sourceFile.close();\n    destinationFile.close();\n}\n```",
    "summary": "Copies the content of a source file to a destination file using binary mode to preserve file integrity."
  },
  {
    "id": 1638,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> readFileLines(const std::string &filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    \n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    } else {\n        std::cerr << \"Unable to open file: \" << filename << std::endl;\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1639,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile.is_open()) {\n        return false;\n    }\n    outFile << content;\n    return true;\n}\n```",
    "summary": "Writes a string to a file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1640,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContent(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n\n    if (!sourceFile || !destinationFile) {\n        return false;\n    }\n\n    destinationFile << sourceFile.rdbuf();\n\n    return true;\n}\n```",
    "summary": "Copies the content from a source file to a destination file and returns true if successful, false otherwise."
  },
  {
    "id": 1641,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1642,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings."
  },
  {
    "id": 1643,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream ofs(filename);\n    if (!ofs.is_open()) {\n        return false;\n    }\n    ofs << content;\n    return ofs.good();\n}\n```",
    "summary": "Writes the given string content to a specified file, returning true if successful or false otherwise."
  },
  {
    "id": 1644,
    "code": "```cpp\n#include <fstream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1645,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    \n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1646,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string &filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a given file into a vector of strings."
  },
  {
    "id": 1647,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a given file into a vector of strings and returns it."
  },
  {
    "id": 1648,
    "code": "```cpp\n#include <fstream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads a file and returns its contents as a vector of strings, with each string representing a line."
  },
  {
    "id": 1649,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1650,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1651,
    "code": "#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1652,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid copyFileContents(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n\n    if (!sourceFile) {\n        std::cerr << \"Error opening source file.\\n\";\n        return;\n    }\n    if (!destinationFile) {\n        std::cerr << \"Error opening destination file.\\n\";\n        return;\n    }\n\n    destinationFile << sourceFile.rdbuf();\n\n    sourceFile.close();\n    destinationFile.close();\n}\n```",
    "summary": "Copies the contents of a source file to a destination file using binary mode for both reading and writing."
  },
  {
    "id": 1653,
    "code": "```cpp\n#include <fstream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1654,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid copyFileContent(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n\n    if (!sourceFile.is_open()) {\n        std::cerr << \"Failed to open source file: \" << sourcePath << std::endl;\n        return;\n    }\n\n    if (!destinationFile.is_open()) {\n        std::cerr << \"Failed to open destination file: \" << destinationPath << std::endl;\n        return;\n    }\n\n    destinationFile << sourceFile.rdbuf();\n\n    sourceFile.close();\n    destinationFile.close();\n}\n```",
    "summary": "Copies the content of one file to another using binary mode to preserve file integrity."
  },
  {
    "id": 1655,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToTextFile(const std::string& fileName, const std::string& content) {\n    std::ofstream outFile(fileName);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    } else {\n        std::cerr << \"Unable to open file for writing: \" << fileName << std::endl;\n    }\n}\n```",
    "summary": "Writes a given string content to a specified text file, creating it if it does not exist."
  },
  {
    "id": 1656,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes a string to a specified file, returning true if successful, false otherwise."
  },
  {
    "id": 1657,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file and returns them as a vector of strings."
  },
  {
    "id": 1658,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename, std::ios::out | std::ios::trunc);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    }\n}\n```",
    "summary": "This function writes a given string content to a specified file, overwriting any existing content."
  },
  {
    "id": 1659,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n\n    if (!sourceFile.is_open() || !destinationFile.is_open()) {\n        return false;\n    }\n\n    destinationFile << sourceFile.rdbuf();\n    \n    sourceFile.close();\n    destinationFile.close();\n    \n    return true;\n}\n```",
    "summary": "Copies the contents of a source file to a destination file, returning true on success and false on failure."
  },
  {
    "id": 1660,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid countLinesInFile(const std::string& filename) {\n    std::ifstream file(filename);\n    if (!file) {\n        std::cerr << \"Unable to open file: \" << filename << std::endl;\n        return;\n    }\n\n    std::string line;\n    int lineCount = 0;\n    while (std::getline(file, line)) {\n        ++lineCount;\n    }\n\n    file.close();\n    std::cout << \"Total number of lines in \" << filename << \": \" << lineCount << std::endl;\n}\n```",
    "summary": "Counts and prints the number of lines in a specified file."
  },
  {
    "id": 1661,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings and returns it."
  },
  {
    "id": 1662,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file and returns them as a vector of strings."
  },
  {
    "id": 1663,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    }\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, creating or overwriting the file as needed."
  },
  {
    "id": 1664,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename, std::ios::out | std::ios::trunc);\n    if (!outFile) {\n        return false; // Return false if the file cannot be opened\n    }\n    outFile << content;\n    outFile.close();\n    return true; // Return true if the operation is successful\n}\n```",
    "summary": "This function writes a given string to a specified file, truncating the file if it already exists, and returns a boolean indicating success or failure."
  },
  {
    "id": 1665,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourceFile, const std::string& destinationFile) {\n    std::ifstream source(sourceFile, std::ios::binary);\n    std::ofstream dest(destinationFile, std::ios::binary);\n    \n    if (!source || !dest) {\n        return false; // Return false if files cannot be opened\n    }\n    \n    dest << source.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the contents of a source file to a destination file, returning true on success or false if file operations fail."
  },
  {
    "id": 1666,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1667,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string &filePath, const std::string &content) {\n    std::ofstream outFile(filePath);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1668,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    \n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1669,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& data) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << data;\n        file.close();\n    }\n}\n```",
    "summary": "This function writes a given string to a specified file, creating or overwriting the file if it exists."
  },
  {
    "id": 1670,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string &filename, const std::string &content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes the given content to a file specified by filename, returning true on success and false on failure."
  },
  {
    "id": 1671,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1672,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1673,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile.is_open()) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes a given string to a file specified by filename, returning true if successful and false if an error occurs."
  },
  {
    "id": 1674,
    "code": "```cpp\n#include <fstream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1675,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    } else {\n        std::cerr << \"Unable to open file for writing: \" << filename << std::endl;\n    }\n}\n```",
    "summary": "Writes the given content to a specified file, printing an error message if the file cannot be opened."
  },
  {
    "id": 1676,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string &filePath, const std::string &content) {\n    std::ofstream outFile(filePath);\n    if (!outFile.is_open()) {\n        return false; // Failed to open file\n    }\n    outFile << content;\n    return true; // Successfully wrote to file\n}\n```",
    "summary": "Writes a string to a file at the specified path, returning true if successful, otherwise false."
  },
  {
    "id": 1677,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    \n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1678,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings, returning the vector."
  },
  {
    "id": 1679,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFile(const std::string &sourcePath, const std::string &destPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destFile(destPath, std::ios::binary);\n    if (!sourceFile || !destFile) {\n        return false;\n    }\n    destFile << sourceFile.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the contents of a file from a source path to a destination path and returns true if successful."
  },
  {
    "id": 1680,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <iostream>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (outFile) {\n        outFile << content;\n        outFile.close();\n    } else {\n        std::cerr << \"Error: Unable to open file for writing.\" << std::endl;\n    }\n}\n```",
    "summary": "Writes a given string content to a specified file, handling file opening errors."
  },
  {
    "id": 1681,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return true;\n}\n```",
    "summary": "Writes the given string content to a file at the specified file path, returning true on success and false on failure."
  },
  {
    "id": 1682,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string &filename, const std::string &content) {\n    std::ofstream outFile(filename);\n    if (!outFile.is_open()) {\n        return false;\n    }\n    outFile << content;\n    outFile.close();\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1683,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream file(filePath);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true if successful, otherwise false if the file cannot be opened."
  },
  {
    "id": 1684,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    \n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads and returns all lines from a specified file as a vector of strings."
  },
  {
    "id": 1685,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFile(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n\n    if (!sourceFile || !destinationFile) {\n        return false;\n    }\n\n    destinationFile << sourceFile.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the contents of a source file to a destination file in binary mode, returning true if successful."
  },
  {
    "id": 1686,
    "code": "```cpp\n#include <fstream>\n#include <iostream>\n#include <string>\n\nvoid writeDataToFile(const std::string& filename, const std::string& data) {\n    std::ofstream outFile(filename);\n    if (outFile.is_open()) {\n        outFile << data;\n        outFile.close();\n    } else {\n        std::cerr << \"Unable to open file for writing: \" << filename << std::endl;\n    }\n}\n```",
    "summary": "Writes a given string data to a specified file, creating the file if it does not exist."
  },
  {
    "id": 1687,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    } else {\n        throw std::ios_base::failure(\"Failed to open file for writing\");\n    }\n}\n```",
    "summary": "Writes a given string to a specified file, throwing an exception if the file cannot be opened."
  },
  {
    "id": 1688,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    \n    if (file.is_open()) {\n        while (getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified text file and returns them as a vector of strings."
  },
  {
    "id": 1689,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings and returns it."
  },
  {
    "id": 1690,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1691,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads a text file and returns its contents as a vector of strings, each representing a line in the file."
  },
  {
    "id": 1692,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool appendLineToFile(const std::string& filename, const std::string& line) {\n    std::ofstream file(filename, std::ios_base::app);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << line << '\\n';\n    return true;\n}\n```",
    "summary": "Appends a line of text to a specified file, creating the file if it does not exist."
  },
  {
    "id": 1693,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeStringToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    }\n}\n```",
    "summary": "Writes a given string to a specified file, overwriting any existing content."
  },
  {
    "id": 1694,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeStringToFile(const std::string& filename, const std::string& data) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        std::cerr << \"Error opening file for writing: \" << filename << std::endl;\n        return;\n    }\n    outFile << data;\n    outFile.close();\n}\n```",
    "summary": "Writes a given string to a specified file, creating or overwriting the file as necessary."
  },
  {
    "id": 1695,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file and returns them as a vector of strings."
  },
  {
    "id": 1696,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid copyFileContent(const std::string& sourceFile, const std::string& destinationFile) {\n    std::ifstream src(sourceFile, std::ios::binary);\n    std::ofstream dest(destinationFile, std::ios::binary);\n\n    if (!src) {\n        std::cerr << \"Error opening source file: \" << sourceFile << std::endl;\n        return;\n    }\n    if (!dest) {\n        std::cerr << \"Error creating destination file: \" << destinationFile << std::endl;\n        return;\n    }\n\n    dest << src.rdbuf();\n\n    src.close();\n    dest.close();\n}\n```",
    "summary": "Copies the content of a source file to a destination file in binary mode."
  },
  {
    "id": 1697,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes a string to a specified file, returning true on success and false if the file could not be opened."
  },
  {
    "id": 1698,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1699,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    if (!sourceFile.is_open()) {\n        return false;\n    }\n\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n    if (!destinationFile.is_open()) {\n        return false;\n    }\n\n    destinationFile << sourceFile.rdbuf();\n\n    return true;\n}\n```",
    "summary": "This function copies the contents of a file from the source path to the destination path, returning true on success and false on failure."
  },
  {
    "id": 1700,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1701,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    if (file.is_open()) {\n        while (getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file and returns them as a vector of strings."
  },
  {
    "id": 1702,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    } else {\n        std::cerr << \"Unable to open file for writing: \" << filename << std::endl;\n    }\n}\n```",
    "summary": "Writes a given string to a specified file, creating the file if it doesn't exist."
  },
  {
    "id": 1703,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeStringToFile(const std::string& fileName, const std::string& content) {\n    std::ofstream outFile(fileName);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    }\n}\n```",
    "summary": "Writes a given string to a specified file, overwriting its contents if it exists."
  },
  {
    "id": 1704,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& fileName, const std::string& content) {\n    std::ofstream outFile(fileName);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    } else {\n        std::cerr << \"Unable to open file for writing.\" << std::endl;\n    }\n}\n```",
    "summary": "This function writes a given string to a specified file, displaying an error if the file cannot be opened."
  },
  {
    "id": 1705,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string &filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1706,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by `filePath` and returns them as a vector of strings."
  },
  {
    "id": 1707,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid appendLineToFile(const std::string& filePath, const std::string& lineContent) {\n    std::ofstream outFile(filePath, std::ios::app);\n    if (outFile.is_open()) {\n        outFile << lineContent << std::endl;\n        outFile.close();\n    }\n}\n```",
    "summary": "Appends a line of text to a specified file, creating the file if it doesn't exist."
  },
  {
    "id": 1708,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings and returns the vector."
  },
  {
    "id": 1709,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFile(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    if (!sourceFile.is_open()) {\n        return false;\n    }\n    \n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n    if (!destinationFile.is_open()) {\n        return false;\n    }\n    \n    destinationFile << sourceFile.rdbuf();\n    \n    return sourceFile.good() && destinationFile.good();\n}\n```",
    "summary": "The function `copyFile` copies the contents of a file from a source path to a destination path, returning true if successful."
  },
  {
    "id": 1710,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file and returns them as a vector of strings."
  },
  {
    "id": 1711,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outfile(filename);\n    if (!outfile) {\n        std::cerr << \"Error: Cannot open file for writing.\" << std::endl;\n        return;\n    }\n    outfile << content;\n    if (!outfile) {\n        std::cerr << \"Error: Failed to write to file.\" << std::endl;\n    }\n    outfile.close();\n}\n```",
    "summary": "This function writes a given string content to a specified file, handling potential file opening and writing errors."
  },
  {
    "id": 1712,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success and false if the file cannot be opened or written."
  },
  {
    "id": 1713,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& data) {\n    std::ofstream outfile(filename);\n    if (!outfile) return false;\n    outfile << data;\n    return outfile.good();\n}\n```",
    "summary": "Writes the provided string data to a specified file, returning true if successful."
  },
  {
    "id": 1714,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) return false;\n    outFile << content;\n    return true;\n}\n```",
    "summary": "Writes specified content to a file and returns a boolean indicating success."
  },
  {
    "id": 1715,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings, returning the vector."
  },
  {
    "id": 1716,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    }\n}\n```",
    "summary": "Writes a given string content to a file specified by the filename."
  },
  {
    "id": 1717,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& fileName, const std::string& content) {\n    std::ofstream outFile(fileName);\n    if (!outFile) {\n        return false; // File couldn't be opened\n    }\n    outFile << content;\n    return true; // File successfully written\n}\n```",
    "summary": "This function writes a given string to a specified file, returning true if successful and false if the file could not be opened."
  },
  {
    "id": 1718,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the given content to a specified file, returning true on success and false if the file couldn't be opened."
  },
  {
    "id": 1719,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes a string to a specified file and returns a boolean indicating success or failure."
  },
  {
    "id": 1720,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeStringToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile) {\n        std::cerr << \"Error opening file for writing: \" << filePath << std::endl;\n        return;\n    }\n    outFile << content;\n    outFile.close();\n}\n```",
    "summary": "Writes a given string to a specified file, with error handling for file opening issues."
  },
  {
    "id": 1721,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by `filePath` and returns them as a vector of strings."
  },
  {
    "id": 1722,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings, returning the vector."
  },
  {
    "id": 1723,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes a given string to a specified file, returning true if successful, false otherwise."
  },
  {
    "id": 1724,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by `filePath` and returns them as a vector of strings."
  },
  {
    "id": 1725,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return true;\n}\n```",
    "summary": "Writes a string to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1726,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads a file specified by the file path and returns its content as a vector of strings, each representing a line."
  },
  {
    "id": 1727,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContent(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n\n    if (!sourceFile || !destinationFile) {\n        return false; // Failed to open either the source or destination file\n    }\n\n    destinationFile << sourceFile.rdbuf();\n    return true; // File content copied successfully\n}\n```",
    "summary": "Copies the content from a source file to a destination file, returning true on success."
  },
  {
    "id": 1728,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename, std::ios::out | std::ios::trunc);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file, overwriting it if it already exists, and returns true if successful."
  },
  {
    "id": 1729,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1730,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string &filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads a file and returns its contents as a vector of strings, each representing a line."
  },
  {
    "id": 1731,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1732,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1733,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1734,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFile(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    if (!sourceFile) return false;\n    \n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n    if (!destinationFile) return false;\n    \n    destinationFile << sourceFile.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies a file from the source path to the destination path, returning true on success and false on failure."
  },
  {
    "id": 1735,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings, returning it."
  },
  {
    "id": 1736,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings, returning the vector."
  },
  {
    "id": 1737,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1738,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (outFile.is_open()) {\n        outFile << content;\n        outFile.close();\n    } else {\n        throw std::runtime_error(\"Unable to open file for writing\");\n    }\n}\n```",
    "summary": "Writes the specified string content to a file with the given filename, throwing an exception if the file cannot be opened."
  },
  {
    "id": 1739,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourceFilePath, const std::string& destinationFilePath) {\n    std::ifstream sourceFile(sourceFilePath, std::ios::binary);\n    if (!sourceFile.is_open()) {\n        return false;\n    }\n    std::ofstream destinationFile(destinationFilePath, std::ios::binary);\n    if (!destinationFile.is_open()) {\n        return false;\n    }\n    destinationFile << sourceFile.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies contents from a source file to a destination file using binary mode for both input and output streams."
  },
  {
    "id": 1740,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file into a vector of strings."
  },
  {
    "id": 1741,
    "code": "#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}",
    "summary": "Writes the provided content to a file with the specified filename, returning true on success and false on failure."
  },
  {
    "id": 1742,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& data) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false; // Failed to open the file\n    }\n    outFile << data;\n    return outFile.good(); // Returns true if the write was successful\n}\n```",
    "summary": "This function writes a given string to a specified file and returns true if the operation succeeds, otherwise false."
  },
  {
    "id": 1743,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "Writes the given content to a file specified by filename and returns true if successful."
  },
  {
    "id": 1744,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outfile(filename);\n    if (outfile.is_open()) {\n        outfile << content;\n        outfile.close();\n    } else {\n        std::cerr << \"Error: Unable to open file for writing.\\n\";\n    }\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, handling file opening errors."
  },
  {
    "id": 1745,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false; // Return false if file could not be opened\n    }\n    outFile << content;\n    return outFile.good(); // Return true if write operation was successful\n}\n```",
    "summary": "Writes a given string to a specified file and returns true if successful, false otherwise."
  },
  {
    "id": 1746,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1747,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream source(sourcePath, std::ios::binary);\n    std::ofstream destination(destinationPath, std::ios::binary);\n    if (!source || !destination) {\n        return false;\n    }\n    destination << source.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the contents of a source file to a destination file using binary mode, returning true on success or false on failure."
  },
  {
    "id": 1748,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n\n    if (!sourceFile || !destinationFile) {\n        return false;\n    }\n\n    destinationFile << sourceFile.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the contents of a source file to a destination file in binary mode and returns true if successful."
  },
  {
    "id": 1749,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings, returning the vector."
  },
  {
    "id": 1750,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    if (!sourceFile) return false;\n    \n    std::ofstream destinationFile(destinationPath, std::ios::binary);\n    if (!destinationFile) return false;\n    \n    destinationFile << sourceFile.rdbuf();\n    \n    return true;\n}\n```",
    "summary": "Copies the contents of one file to another, returning true if successful, or false if an error occurs."
  },
  {
    "id": 1751,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the given content to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1752,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings and returns it."
  },
  {
    "id": 1753,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes a string to a specified file and returns true if the operation is successful; otherwise, returns false."
  },
  {
    "id": 1754,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1755,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, returning true on success and false on failure."
  },
  {
    "id": 1756,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string &filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by `filePath` into a vector of strings."
  },
  {
    "id": 1757,
    "code": "```cpp\n#include <fstream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by `filename` into a vector of strings."
  },
  {
    "id": 1758,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file and returns them as a vector of strings."
  },
  {
    "id": 1759,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    \n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads all lines from a given file into a vector of strings and returns it."
  },
  {
    "id": 1760,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    }\n}\n```",
    "summary": "Writes the specified content to a file with the given filename."
  },
  {
    "id": 1761,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1762,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    }\n}\n```",
    "summary": "Writes a given string to a specified file, creating or overwriting the file."
  },
  {
    "id": 1763,
    "code": "```cpp\n#include <fstream>\n#include <vector>\n#include <string>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a given file and returns them as a vector of strings."
  },
  {
    "id": 1764,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeTextToFile(const std::string& filename, const std::string& text) {\n    std::ofstream outFile(filename);\n    if (outFile.is_open()) {\n        outFile << text;\n        outFile.close();\n    }\n}\n```",
    "summary": "Writes a given string to a specified file, overwriting any existing content."
  },
  {
    "id": 1765,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads a file line by line and returns its contents as a vector of strings."
  },
  {
    "id": 1766,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1767,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1768,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1769,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filepath, const std::string& content) {\n    std::ofstream file(filepath);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes a given string to a file at the specified path, returning true on success and false on failure."
  },
  {
    "id": 1770,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nbool copyFile(const std::string& sourcePath, const std::string& destinationPath) {\n    std::ifstream source(sourcePath, std::ios::binary);\n    if (!source) {\n        return false;\n    }\n    std::ofstream destination(destinationPath, std::ios::binary);\n    if (!destination) {\n        return false;\n    }\n    destination << source.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies the contents of one file to another, returning true if successful or false if any file operation fails."
  },
  {
    "id": 1771,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& filename, const std::string& text) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << text;\n    file.close();\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true if successful, false otherwise."
  },
  {
    "id": 1772,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    } else {\n        std::cerr << \"Unable to open file for writing\\n\";\n    }\n}\n```",
    "summary": "Writes specified content to a file, creating or overwriting it as necessary."
  },
  {
    "id": 1773,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath, std::ios::out | std::ios::trunc);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes a given string to a specified file, overwriting any existing content and returning success status."
  },
  {
    "id": 1774,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes a given string to a specified file and returns true on success or false on failure."
  },
  {
    "id": 1775,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1776,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> ReadFileLines(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1777,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readFileLines(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file and returns them as a vector of strings."
  },
  {
    "id": 1778,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::ifstream file(filename);\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings."
  },
  {
    "id": 1779,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::ifstream file(filePath);\n    std::vector<std::string> lines;\n    std::string line;\n    \n    if (file.is_open()) {\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    \n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a vector of strings and returns it."
  },
  {
    "id": 1780,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToTextFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    file.close();\n    return true;\n}\n```",
    "summary": "This function writes a given string to a text file, returning true if successful and false if the file cannot be opened."
  },
  {
    "id": 1781,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outfile(filename);\n    if (!outfile) {\n        return false;\n    }\n    outfile << content;\n    return true;\n}\n```",
    "summary": "Writes a given string to a specified file, returning true on success and false on failure."
  },
  {
    "id": 1782,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    \n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n\n    file.close();\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1783,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& filename, const std::string& text) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << text;\n    return file.good();\n}\n```",
    "summary": "Writes a given string to a specified file, returning a boolean indicating success or failure."
  },
  {
    "id": 1784,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool copyFile(const std::string& sourcePath, const std::string& destPath) {\n    std::ifstream sourceFile(sourcePath, std::ios::binary);\n    std::ofstream destFile(destPath, std::ios::binary);\n    if (!sourceFile || !destFile) {\n        return false;\n    }\n    destFile << sourceFile.rdbuf();\n    return true;\n}\n```",
    "summary": "Copies a file from the source path to the destination path, returning false if either file cannot be opened."
  },
  {
    "id": 1785,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            lines.push_back(line);\n        }\n        file.close();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1786,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid countLinesInFile(const std::string& filename) {\n    std::ifstream file(filename);\n    if (!file.is_open()) {\n        std::cerr << \"Error: Could not open the file.\" << std::endl;\n        return;\n    }\n    \n    std::string line;\n    int lineCount = 0;\n    while (std::getline(file, line)) {\n        ++lineCount;\n    }\n    \n    file.close();\n    std::cout << \"Total number of lines: \" << lineCount << std::endl;\n}\n```",
    "summary": "Counts and prints the total number of lines in a specified file."
  },
  {
    "id": 1787,
    "code": "#include <fstream>\n#include <string>\n\nbool copyFileContents(const std::string &sourceFilePath, const std::string &destinationFilePath) {\n    std::ifstream sourceFile(sourceFilePath, std::ios::binary);\n    std::ofstream destinationFile(destinationFilePath, std::ios::binary);\n\n    if (!sourceFile.is_open() || !destinationFile.is_open()) {\n        return false;\n    }\n\n    destinationFile << sourceFile.rdbuf();\n\n    return true;\n}",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 1788,
    "code": "#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outfile(filename);\n    if (!outfile.is_open()) {\n        return false;\n    }\n    outfile << content;\n    return true;\n}",
    "summary": "Writes a given string to a specified file, returning true on success or false if the file cannot be opened."
  },
  {
    "id": 1789,
    "code": "#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filePath) {\n    std::vector<std::string> lines;\n    std::ifstream file(filePath);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}",
    "summary": "Reads all lines from a specified file and returns them as a vector of strings."
  },
  {
    "id": 1790,
    "code": "#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}",
    "summary": "Writes the given content to a specified file, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1791,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return file.good();\n}\n```",
    "summary": "This function writes a given string to a file specified by the filename and returns true if successful."
  },
  {
    "id": 1792,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filePath, const std::string& content) {\n    std::ofstream outFile(filePath);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return true;\n}\n```",
    "summary": "Writes a string to a file specified by the file path, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1793,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nvoid writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (file.is_open()) {\n        file << content;\n        file.close();\n    }\n}\n```",
    "summary": "Writes a given string to a specified file, creating or overwriting the file as needed."
  },
  {
    "id": 1794,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outfile(filename);\n    if (!outfile.is_open()) {\n        return false;\n    }\n    outfile << content;\n    return outfile.good();\n}\n```",
    "summary": "Writes a string to a specified file, returning true if successful, or false if the file cannot be opened."
  },
  {
    "id": 1795,
    "code": "```cpp\n#include <fstream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> readLinesFromFile(const std::string& filename) {\n    std::vector<std::string> lines;\n    std::ifstream file(filename);\n    std::string line;\n    while (std::getline(file, line)) {\n        lines.push_back(line);\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file and returns them as a vector of strings."
  },
  {
    "id": 1796,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeLineToFile(const std::string& filename, const std::string& line) {\n    std::ofstream file(filename, std::ios::app);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << line << std::endl;\n    return true;\n}\n```",
    "summary": "Appends a single line of text to the specified file, creating the file if it does not exist."
  },
  {
    "id": 1797,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        return false;\n    }\n    file << content;\n    return true;\n}\n```",
    "summary": "Writes the provided content to a file with the given filename, returning true on success and false if the file cannot be opened."
  },
  {
    "id": 1798,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeToFile(const std::string& filename, const std::string& content) {\n    std::ofstream outFile(filename, std::ios::out | std::ios::trunc);\n    if (!outFile) {\n        return false;\n    }\n    outFile << content;\n    return outFile.good();\n}\n```",
    "summary": "Writes a string to a specified file, overwriting any existing content, and returns true if successful."
  },
  {
    "id": 1799,
    "code": "```cpp\n#include <fstream>\n#include <string>\n\nbool writeTextToFile(const std::string& filename, const std::string& text) {\n    std::ofstream outFile(filename);\n    if (!outFile) {\n        return false; // File could not be opened\n    }\n    outFile << text;\n    return true; // Write operation was successful\n}\n```",
    "summary": "Writes a given string to a specified file, returning true if successful or false if the file cannot be opened."
  },
  {
    "id": 1800,
    "code": "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nvoid writeStringToFile(const std::string& filename, const std::string& content) {\n    std::ofstream file(filename);\n    if (!file) {\n        std::cerr << \"Error opening file for writing: \" << filename << std::endl;\n        return;\n    }\n    file << content;\n    if (!file) {\n        std::cerr << \"Error writing to file: \" << filename << std::endl;\n    }\n    file.close();\n}\n```",
    "summary": "Writes a given string to a specified file, handling errors during file opening and writing."
  }
]