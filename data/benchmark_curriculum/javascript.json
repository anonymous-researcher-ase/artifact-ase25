[
  {
    "id": 1,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines."
  },
  {
    "id": 2,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n  try {\n    const data = fs.readFileSync(filePath, 'utf8');\n    return JSON.parse(data);\n  } catch (err) {\n    console.error('Error reading or parsing the file:', err);\n    return null;\n  }\n}\n```",
    "summary": "Reads a JSON file synchronously, parses its content, and returns the resulting object or null if an error occurs."
  },
  {
    "id": 3,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n  fs.readFile(filePath, 'utf8', (err, data) => {\n    if (err) {\n      return callback(err);\n    }\n    const lines = data.split('\\n');\n    callback(null, lines);\n  });\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines through a callback function."
  },
  {
    "id": 4,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and parses its content as JSON, returning the parsed object or null if an error occurs."
  },
  {
    "id": 5,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                const lines = data.split('\\n');\n                resolve(lines);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines using a promise."
  },
  {
    "id": 6,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the given path and returns its non-empty lines as an array."
  },
  {
    "id": 7,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFileSync(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err);\n        return null;\n    }\n}\n```",
    "summary": "This function synchronously reads and parses a JSON file, returning its contents or null if an error occurs."
  },
  {
    "id": 8,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data.split('\\n'));\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines."
  },
  {
    "id": 9,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "This function reads a file from the specified path and returns its contents as an array of lines."
  },
  {
    "id": 10,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUppercase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        const uppercasedData = data.toUpperCase();\n        callback(null, uppercasedData);\n    });\n}\n```",
    "summary": "Reads a file and transforms its content to uppercase, then returns it via a callback."
  },
  {
    "id": 11,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(`Error reading file: ${err.message}`);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "Reads the contents of a file asynchronously and passes the data or an error message to a callback function."
  },
  {
    "id": 12,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readAndLogFileContent(filePath) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            console.error(`Error reading file from disk: ${err}`);\n            return;\n        }\n        console.log(data);\n    });\n}\n```",
    "summary": "Reads the content of a specified file and logs it to the console."
  },
  {
    "id": 13,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a file at a given path and returns its contents parsed as JSON, logging an error if reading or parsing fails."
  },
  {
    "id": 14,
    "code": "```javascript\nconst fs = require('fs');\nconst path = require('path');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        if (!fs.existsSync(filePath)) {\n            return reject(new Error('File does not exist'));\n        }\n\n        fs.readFile(filePath, 'utf-8', (err, data) => {\n            if (err) {\n                return reject(err);\n            }\n            const lines = data.split(/\\r?\\n/);\n            resolve(lines);\n        });\n    });\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines."
  },
  {
    "id": 15,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the given path and returns its content as an array of lines, handling errors gracefully."
  },
  {
    "id": 16,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data;\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return null;\n    }\n}\n```",
    "summary": "This function reads the contents of a file synchronously and returns it as a string, logging an error if the file cannot be read."
  },
  {
    "id": 17,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                try {\n                    const jsonData = JSON.parse(data);\n                    resolve(jsonData);\n                } catch (parseErr) {\n                    reject(parseErr);\n                }\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file at the specified path and parses its content as JSON, returning a Promise that resolves with the JSON data or rejects with an error."
  },
  {
    "id": 18,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "Reads the content of a file at the given path and returns it via a callback function."
  },
  {
    "id": 19,
    "code": "async function readFileContent(filePath) {\n    const fs = require('fs').promises;\n    try {\n        const data = await fs.readFile(filePath, 'utf8');\n        return data;\n    } catch (error) {\n        console.error('Error reading file:', error);\n        throw error;\n    }\n}",
    "summary": "This function asynchronously reads the content of a file specified by the file path and returns it as a string."
  },
  {
    "id": 20,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').map(line => line.trim());\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file by its path and returns an array of trimmed lines, or logs an error if reading fails."
  },
  {
    "id": 21,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines, handling any potential errors."
  },
  {
    "id": 22,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                const lines = data.split('\\n');\n                resolve(lines);\n            }\n        });\n    });\n}\n```",
    "summary": "This function asynchronously reads a file and returns its content as an array of lines."
  },
  {
    "id": 23,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file from the given path and returns its content as an array of lines through a callback function."
  },
  {
    "id": 24,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file: ${err.message}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines, handling errors gracefully."
  },
  {
    "id": 25,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUppercase(filePath, callback) {\n  fs.readFile(filePath, 'utf8', (err, data) => {\n    if (err) {\n      callback(err, null);\n      return;\n    }\n    const upperCaseData = data.toUpperCase();\n    callback(null, upperCaseData);\n  });\n}\n```",
    "summary": "Reads a file and converts its content to uppercase, invoking a callback with the result."
  },
  {
    "id": 26,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseErr) {\n            callback(parseErr, null);\n        }\n    });\n}\n```",
    "summary": "Reads a file at a specified path and parses its content as JSON, handling errors via a callback."
  },
  {
    "id": 27,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            callback(null, data);\n        }\n    });\n}\n```",
    "summary": "This function reads the content of a file at a given path using UTF-8 encoding and passes the data or error to a callback function."
  },
  {
    "id": 28,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns an array of non-empty lines."
  },
  {
    "id": 29,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n                return;\n            }\n            resolve(data.split('\\n'));\n        });\n    });\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines using a Promise."
  },
  {
    "id": 30,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                return reject(err);\n            }\n            try {\n                const jsonData = JSON.parse(data);\n                resolve(jsonData);\n            } catch (parseError) {\n                reject(parseError);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a JSON file asynchronously and returns its contents as a JavaScript object or rejects with an error if reading or parsing fails."
  },
  {
    "id": 31,
    "code": "function readFileAsJson(filePath, callback) {\n    const fs = require('fs');\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseErr) {\n            callback(parseErr, null);\n        }\n    });\n}",
    "summary": "Reads a file at the specified path and parses its contents as JSON, invoking a callback with the result or an error."
  },
  {
    "id": 32,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its contents as an array of lines."
  },
  {
    "id": 33,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAndLogLines(filePath) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            console.error(`Error reading file: ${err}`);\n            return;\n        }\n        const lines = data.split('\\n');\n        lines.forEach((line, index) => {\n            console.log(`Line ${index + 1}: ${line}`);\n        });\n    });\n}\n```",
    "summary": "Reads a file asynchronously and logs each line with its line number to the console."
  },
  {
    "id": 34,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines, handling errors gracefully."
  },
  {
    "id": 35,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines, handling errors gracefully."
  },
  {
    "id": 36,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines, handling any errors by logging them and returning an empty array."
  },
  {
    "id": 37,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf-8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data.split('\\n'));\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file asynchronously and returns its contents as an array of lines."
  },
  {
    "id": 38,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                return reject(err);\n            }\n            const lines = data.split('\\n');\n            resolve(lines);\n        });\n    });\n}\n```",
    "summary": "Reads a file asynchronously and returns its contents as an array of lines."
  },
  {
    "id": 39,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFirstLine(filePath) {\n    return new Promise((resolve, reject) => {\n        const readable = fs.createReadStream(filePath, { encoding: 'utf8' });\n        let data = '';\n        readable.on('data', chunk => {\n            data += chunk;\n            const newlineIndex = data.indexOf('\\n');\n            if (newlineIndex !== -1) {\n                readable.close();\n                resolve(data.slice(0, newlineIndex));\n            }\n        });\n        readable.on('error', err => reject(err));\n        readable.on('close', () => {\n            if (data.indexOf('\\n') === -1) {\n                resolve(data);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads and returns the first line of a file using a readable stream in Node.js."
  },
  {
    "id": 40,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAndLogLines(filePath) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            console.error(`Error reading file: ${err}`);\n            return;\n        }\n        const lines = data.split('\\n');\n        lines.forEach((line, index) => {\n            console.log(`Line ${index + 1}: ${line}`);\n        });\n    });\n}\n```",
    "summary": "Reads a file asynchronously and logs each line to the console with its line number."
  },
  {
    "id": 41,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error(`Error reading file: ${error.message}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines, logging any errors encountered."
  },
  {
    "id": 42,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFirstLine(filePath, callback) {\n    const stream = fs.createReadStream(filePath, { encoding: 'utf8' });\n    let data = '';\n    stream.on('data', chunk => {\n        data += chunk;\n        const lines = data.split('\\n');\n        if (lines.length > 1) {\n            stream.close();\n            callback(null, lines[0]);\n        }\n    });\n    stream.on('error', err => callback(err));\n    stream.on('close', () => {\n        if (data.indexOf('\\n') === -1) callback(null, data);\n    });\n}\n```",
    "summary": "Reads the first line from a file asynchronously and executes a callback with the result."
  },
  {
    "id": 43,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "This function reads a file and returns its contents as an array of lines via a callback."
  },
  {
    "id": 44,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data;\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "This function reads the contents of a file synchronously and returns it as a string, or logs an error if the file cannot be read."
  },
  {
    "id": 45,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction writeToFile(filePath, data) {\n    fs.writeFile(filePath, data, 'utf8', (err) => {\n        if (err) {\n            console.error('Error writing to file:', err);\n            return;\n        }\n        console.log('File written successfully');\n    });\n}\n```",
    "summary": "Writes a string of data to a specified file path asynchronously, logging success or error messages."
  },
  {
    "id": 46,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filepath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filepath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data.split('\\n'));\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines using a Promise."
  },
  {
    "id": 47,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines, or an empty array if an error occurs."
  },
  {
    "id": 48,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToArray(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its non-empty lines as an array of strings."
  },
  {
    "id": 49,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "This function reads the contents of a file specified by `filePath` using UTF-8 encoding and returns the data or an error through a callback."
  },
  {
    "id": 50,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "This function asynchronously reads the contents of a file specified by `filePath` and provides the data or error through a callback."
  },
  {
    "id": 51,
    "code": "function readFileLines(filePath, callback) {\n  const fs = require('fs');\n  fs.readFile(filePath, 'utf8', (err, data) => {\n    if (err) {\n      callback(err, null);\n      return;\n    }\n    const lines = data.split('\\n');\n    callback(null, lines);\n  });\n}",
    "summary": "This function reads a file and returns its content as an array of lines via a callback."
  },
  {
    "id": 52,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            try {\n                const jsonData = JSON.parse(data);\n                callback(null, jsonData);\n            } catch (parseErr) {\n                callback(parseErr, null);\n            }\n        }\n    });\n}\n```",
    "summary": "This function reads a file from the specified path and parses its contents as JSON, invoking a callback with either an error or the parsed data."
  },
  {
    "id": 53,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines, handling errors with a console log."
  },
  {
    "id": 54,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading the file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the given path and returns its content as an array of lines, handling any read errors."
  },
  {
    "id": 55,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a JSON file from the specified path and returns its parsed content, handling errors if reading or parsing fails."
  },
  {
    "id": 56,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines, logging an error if the file cannot be read."
  },
  {
    "id": 57,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n  try {\n    const data = fs.readFileSync(filePath, 'utf8');\n    return data.split('\\n').filter(line => line.trim() !== '');\n  } catch (error) {\n    console.error(`Error reading file: ${error.message}`);\n    return [];\n  }\n}\n```",
    "summary": "This function reads a file and returns its non-empty lines as an array, logging an error message if the file cannot be read."
  },
  {
    "id": 58,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFirstLine(filePath, callback) {\n  const stream = fs.createReadStream(filePath, { encoding: 'utf8' });\n  let data = '';\n  let position = 0;\n  let index;\n\n  stream\n    .on('data', chunk => {\n      index = chunk.indexOf('\\n');\n      data += chunk;\n      if (index !== -1) {\n        stream.close();\n      }\n    })\n    .on('close', () => {\n      callback(null, data.slice(0, position + index));\n    })\n    .on('error', err => {\n      callback(err, null);\n    });\n}\n```",
    "summary": "This function reads the first line from a file using a stream and invokes a callback with the result or an error."
  },
  {
    "id": 59,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines, logging an error if unsuccessful."
  },
  {
    "id": 60,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the specified path and parses its contents as JSON, returning the parsed object or null if an error occurs."
  },
  {
    "id": 61,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n                return;\n            }\n            const lines = data.split('\\n');\n            resolve(lines);\n        });\n    });\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines using Promises for asynchronous operation."
  },
  {
    "id": 62,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data;\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return null;\n    }\n}\n```",
    "summary": "This function synchronously reads the contents of a file from a given file path and returns it as a string, logging an error if the operation fails."
  },
  {
    "id": 63,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines, logging an error if reading fails."
  },
  {
    "id": 64,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines, handling errors gracefully."
  },
  {
    "id": 65,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its contents as a JSON object, handling errors gracefully."
  },
  {
    "id": 66,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from a specified path and returns its content as a JavaScript object, handling errors gracefully."
  },
  {
    "id": 67,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and parses its contents as JSON, returning the result or null if an error occurs."
  },
  {
    "id": 68,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFileSync(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file synchronously, returning its contents as a JavaScript object or null if an error occurs."
  },
  {
    "id": 69,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToArray(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (error) {\n        console.error(`Error reading file from disk: ${error}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its non-empty lines as an array of strings."
  },
  {
    "id": 70,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction countLinesInFile(filePath) {\n    try {\n        const fileContents = fs.readFileSync(filePath, 'utf8');\n        const lines = fileContents.split('\\n');\n        return lines.length;\n    } catch (error) {\n        console.error('Error reading the file:', error);\n        return -1;\n    }\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count, handling any read errors."
  },
  {
    "id": 71,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as a JSON object, or logs an error if the operation fails."
  },
  {
    "id": 72,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction appendToFile(filePath, data) {\n    fs.appendFile(filePath, data, 'utf8', (err) => {\n        if (err) {\n            console.error('Error appending to file:', err);\n        } else {\n            console.log('Data successfully appended to file.');\n        }\n    });\n}\n```",
    "summary": "Appends data to a specified file, creating it if it doesn't exist, and logs the operation's success or failure."
  },
  {
    "id": 73,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the specified path, returning its contents as a JavaScript object."
  },
  {
    "id": 74,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its contents as a JSON object, handling any errors that occur during reading or parsing."
  },
  {
    "id": 75,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                return reject(err);\n            }\n            const lines = data.split('\\n');\n            resolve(lines);\n        });\n    });\n}\n```",
    "summary": "Reads a file's content and returns its lines as an array of strings."
  },
  {
    "id": 76,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading the JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a JSON file from the specified path and returns its contents as a JavaScript object, or logs an error and returns null if reading fails."
  },
  {
    "id": 77,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error(`Error reading or parsing file: ${err}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously from the given path and parses its content as JSON, returning the result or null if an error occurs."
  },
  {
    "id": 78,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').map(line => line.trim());\n    } catch (err) {\n        console.error('Error reading the file:', err);\n        return [];\n    }\n}\n```",
    "summary": "This function reads a file synchronously and returns an array of trimmed lines from the file."
  },
  {
    "id": 79,
    "code": "```\nconst fs = require('fs');\n\nfunction countLinesInFile(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        const lineCount = data.split('\\n').length;\n        callback(null, lineCount);\n    });\n}\n```",
    "summary": "This function reads a file and counts the number of lines, passing the result to a callback function."
  },
  {
    "id": 80,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readTextFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data;\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads and returns the content of a text file synchronously, handling any read errors."
  },
  {
    "id": 81,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines."
  },
  {
    "id": 82,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction countLinesInFile(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lines = data.split('\\n').length;\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file and counts the number of lines, returning the result via a callback function."
  },
  {
    "id": 83,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n  try {\n    const data = fs.readFileSync(filePath, 'utf8');\n    return JSON.parse(data);\n  } catch (error) {\n    console.error('Error reading or parsing JSON file:', error);\n    return null;\n  }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its parsed content as an object, handling errors gracefully."
  },
  {
    "id": 84,
    "code": "async function readJsonFile(filePath) {\n    const fs = require('fs').promises;\n    try {\n        const data = await fs.readFile(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        throw new Error(`Error reading or parsing file: ${error.message}`);\n    }\n}",
    "summary": "This function asynchronously reads a JSON file from a given path and returns its parsed content as a JavaScript object."
  },
  {
    "id": 85,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error(`Error reading file from disk: ${error}`);\n        return [];\n    }\n}\n```",
    "summary": "This function reads a file synchronously from the given path and returns its content as an array of lines."
  },
  {
    "id": 86,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpper(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        const upperData = data.toUpperCase();\n        callback(null, upperData);\n    });\n}\n```",
    "summary": "Reads a file and converts its content to uppercase, then returns it via a callback function."
  },
  {
    "id": 87,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "This function reads a file and returns its contents as an array of lines via a callback function."
  },
  {
    "id": 88,
    "code": "```javascript\nconst fs = require('fs');\nconst path = require('path');\n\nfunction readAndParseJSONFile(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                return reject(err);\n            }\n            try {\n                const jsonData = JSON.parse(data);\n                resolve(jsonData);\n            } catch (parseErr) {\n                reject(parseErr);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a JSON file asynchronously and parses its content into a JavaScript object."
  },
  {
    "id": 89,
    "code": "async function readFileContents(filePath) {\n    const fs = require('fs').promises;\n    try {\n        const data = await fs.readFile(filePath, 'utf8');\n        return data;\n    } catch (error) {\n        console.error(`Error reading file from disk: ${error}`);\n        throw error;\n    }\n}",
    "summary": "This function asynchronously reads and returns the contents of a file given its file path, handling errors if they occur."
  },
  {
    "id": 90,
    "code": "function readFileSync(filePath) {\n    const fs = require('fs');\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data;\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}",
    "summary": "Reads the contents of a file synchronously and returns it as a string, logging an error if the read fails."
  },
  {
    "id": 91,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines via a callback."
  },
  {
    "id": 92,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the specified file path, returning its contents as a JavaScript object."
  },
  {
    "id": 93,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFirstLine(filePath, callback) {\n    const stream = fs.createReadStream(filePath, { encoding: 'utf8' });\n    let data = '';\n    let position = 0;\n    let index;\n\n    stream.on('data', (chunk) => {\n        data += chunk;\n        index = data.indexOf('\\n');\n        if (index !== -1) {\n            stream.close();\n        } else {\n            position += chunk.length;\n        }\n    });\n\n    stream.on('close', () => {\n        callback(null, data.slice(0, index));\n    });\n\n    stream.on('error', (err) => {\n        callback(err, null);\n    });\n}\n```",
    "summary": "This function reads the first line of a file asynchronously and returns it through a callback function."
  },
  {
    "id": 94,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data.split('\\n'));\n            }\n        });\n    });\n}\n```",
    "summary": "This function reads a file asynchronously and returns its content as an array of lines."
  },
  {
    "id": 95,
    "code": "const fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file: ${err.message}`);\n        return null;\n    }\n}",
    "summary": "Reads a file synchronously and returns its content as an array of lines."
  },
  {
    "id": 96,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its contents as a JavaScript object."
  },
  {
    "id": 97,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAndCountLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lineCount = data.split('\\n').length;\n        callback(null, lineCount);\n    });\n}\n```",
    "summary": "Reads a file and counts the number of lines, returning the count via a callback function."
  },
  {
    "id": 98,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "Reads the contents of a file at the specified path and passes the data to a callback function."
  },
  {
    "id": 99,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "This function reads a file and returns its content as an array of lines, handling any read errors gracefully."
  },
  {
    "id": 100,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAndLogLines(filePath) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            console.error('Error reading file:', err);\n            return;\n        }\n        const lines = data.split('\\n');\n        lines.forEach((line, index) => {\n            console.log(`Line ${index + 1}: ${line}`);\n        });\n    });\n}\n```",
    "summary": "This function reads a file and logs each line to the console with its line number."
  },
  {
    "id": 101,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, encoding = 'utf8') {\n    try {\n        const data = fs.readFileSync(filePath, encoding);\n        return data;\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads and returns the contents of a file from the specified path using synchronous file read, with error handling."
  },
  {
    "id": 102,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines."
  },
  {
    "id": 103,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a JSON file from the specified path and returns its contents as a JavaScript object, handling errors if they occur."
  },
  {
    "id": 104,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAndCountLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        const lineCount = data.split('\\n').length;\n        callback(null, lineCount);\n    });\n}\n```",
    "summary": "Reads a file and counts the number of lines, returning the result via a callback function."
  },
  {
    "id": 105,
    "code": "function readFileAndLogLines(filePath) {\n  const fs = require('fs');\n  fs.readFile(filePath, 'utf8', (err, data) => {\n    if (err) {\n      console.error('Error reading file:', err);\n      return;\n    }\n    const lines = data.split('\\n');\n    lines.forEach((line, index) => {\n      console.log(`Line ${index + 1}: ${line}`);\n    });\n  });\n}",
    "summary": "Reads a file specified by `filePath` and logs each line to the console with its line number."
  },
  {
    "id": 106,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing JSON file:', err);\n        return null;\n    }\n}\n```",
    "summary": "This function reads and parses a JSON file from the specified file path, returning its contents as a JavaScript object."
  },
  {
    "id": 107,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseErr) {\n            callback(parseErr, null);\n        }\n    });\n}\n```",
    "summary": "This function reads a JSON file asynchronously and parses its content, passing the resulting object or error to a callback function."
  },
  {
    "id": 108,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "This function reads a file's content line-by-line and returns the lines as an array via a callback."
  },
  {
    "id": 109,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a file synchronously and returns its content as an array of lines."
  },
  {
    "id": 110,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines, or an empty array in case of an error."
  },
  {
    "id": 111,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            callback(null, data);\n        }\n    });\n}\n```",
    "summary": "This function reads the content of a file at a given path and returns it via a callback, handling any errors that occur."
  },
  {
    "id": 112,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads and parses a JSON file, returning its contents as a JavaScript object or `null` if an error occurs."
  },
  {
    "id": 113,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "Reads the contents of a file at a given path and passes the data or error to a callback function."
  },
  {
    "id": 114,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "Reads the content of a file asynchronously and returns it via a callback function."
  },
  {
    "id": 115,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const rawData = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(rawData);\n    } catch (error) {\n        console.error('Error reading or parsing JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the specified path, returning the data as a JavaScript object or null if an error occurs."
  },
  {
    "id": 116,
    "code": "async function readFileContents(filePath) {\n    const fs = require('fs').promises;\n    try {\n        const data = await fs.readFile(filePath, 'utf8');\n        return data;\n    } catch (error) {\n        throw new Error(`Error reading file: ${error.message}`);\n    }\n}",
    "summary": "This function asynchronously reads the contents of a file at a given path and returns it as a string, handling any potential errors."
  },
  {
    "id": 117,
    "code": "const fs = require('fs');\n\nfunction readFileLines(filePath) {\n  return new Promise((resolve, reject) => {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(data.split('\\n'));\n      }\n    });\n  });\n}",
    "summary": "Reads a file and returns its contents as an array of lines using a Promise."
  },
  {
    "id": 118,
    "code": "function readFileContents(filePath, callback) {\n  const fs = require('fs');\n  fs.readFile(filePath, 'utf8', (err, data) => {\n    if (err) {\n      callback(err, null);\n      return;\n    }\n    callback(null, data);\n  });\n}",
    "summary": "This function reads the contents of a file at a given path and provides the data or an error via a callback."
  },
  {
    "id": 119,
    "code": "async function readFileAsJSON(filePath) {\n    const fs = require('fs').promises;\n    try {\n        const data = await fs.readFile(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        throw new Error('Error reading or parsing file: ' + error.message);\n    }\n}",
    "summary": "Reads a file from the given path and parses its contents as JSON, returning the resulting object."
  },
  {
    "id": 120,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its contents as a JavaScript object, handling errors gracefully."
  },
  {
    "id": 121,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseErr) {\n            callback(parseErr, null);\n        }\n    });\n}\n```",
    "summary": "Reads a file and parses its content as JSON, invoking a callback with the result or an error."
  },
  {
    "id": 122,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing the file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its contents as an object, logging an error if reading or parsing fails."
  },
  {
    "id": 123,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines, logging an error if reading fails."
  },
  {
    "id": 124,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            callback(null, data);\n        }\n    });\n}\n```",
    "summary": "Reads the content of a file asynchronously and provides the data or error through a callback function."
  },
  {
    "id": 125,
    "code": "```javascript\nconst fs = require('fs').promises;\n\nasync function readJsonFile(filePath) {\n    try {\n        const data = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        throw new Error(`Failed to read or parse file: ${error.message}`);\n    }\n}\n```",
    "summary": "Reads and parses a JSON file asynchronously, returning its contents as a JavaScript object."
  },
  {
    "id": 126,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines."
  },
  {
    "id": 127,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines."
  },
  {
    "id": 128,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf-8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data);\n            }\n        });\n    });\n}\n```",
    "summary": "The function reads the contents of a file asynchronously and returns a promise that resolves with the file data or rejects with an error."
  },
  {
    "id": 129,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            callback(null, data);\n        }\n    });\n}\n```",
    "summary": "Reads the contents of a file asynchronously and returns it through a callback function."
  },
  {
    "id": 130,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAndPrintLines(filePath) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            console.error('Error reading file:', err);\n            return;\n        }\n        const lines = data.split('\\n');\n        lines.forEach((line, index) => {\n            console.log(`Line ${index + 1}: ${line}`);\n        });\n    });\n}\n```",
    "summary": "This function reads a file asynchronously and prints each line with its corresponding line number to the console."
  },
  {
    "id": 131,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readTextFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data;\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return null;\n    }\n}\n```",
    "summary": "This function reads the contents of a text file synchronously and returns it as a string, handling errors by logging them and returning null."
  },
  {
    "id": 132,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data;\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads and returns the content of a file at the specified path, logging an error if the read operation fails."
  },
  {
    "id": 133,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data.split('\\n'));\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines using promises."
  },
  {
    "id": 134,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data;\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads the content of a file synchronously and returns it as a string, logging an error if the read fails."
  },
  {
    "id": 135,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n  return new Promise((resolve, reject) => {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(data.split('\\n'));\n      }\n    });\n  });\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines using promises."
  },
  {
    "id": 136,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').map(line => line.trim());\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the given path and returns its content as an array of trimmed lines."
  },
  {
    "id": 137,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines using a callback function."
  },
  {
    "id": 138,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its non-empty lines as an array of strings, logging an error if reading fails."
  },
  {
    "id": 139,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines, handling any read errors."
  },
  {
    "id": 140,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines through a callback function."
  },
  {
    "id": 141,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously from the given path and parses its content as JSON, returning the parsed object or null if an error occurs."
  },
  {
    "id": 142,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines, handling any errors that occur during reading."
  },
  {
    "id": 143,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            callback(null, data);\n        }\n    });\n}\n```",
    "summary": "Reads the contents of a file specified by `filePath` and executes a callback with the data or an error."
  },
  {
    "id": 144,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readAndCapitalizeFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        const capitalizedData = data.toUpperCase();\n        fs.writeFileSync(filePath, capitalizedData);\n    } catch (error) {\n        console.error('Error processing file:', error);\n    }\n}\n```",
    "summary": "Reads a file, capitalizes its content, and writes the modified content back to the same file."
  },
  {
    "id": 145,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "Reads the content of a file asynchronously and returns it via a callback function."
  },
  {
    "id": 146,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data;\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads the contents of a file synchronously and returns it as a string, or logs an error if the file cannot be read."
  },
  {
    "id": 147,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its contents as an array of lines, handling any errors that occur during the process."
  },
  {
    "id": 148,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing the file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its contents as a JavaScript object, handling errors gracefully."
  },
  {
    "id": 149,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and parses its content as JSON, returning the result or null if an error occurs."
  },
  {
    "id": 150,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "This function reads a file synchronously and returns its contents as an array of lines."
  },
  {
    "id": 151,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                return reject(err);\n            }\n            try {\n                const jsonData = JSON.parse(data);\n                resolve(jsonData);\n            } catch (parseError) {\n                reject(parseError);\n            }\n        });\n    });\n}\n```",
    "summary": "This function reads a JSON file asynchronously and returns its contents as a JavaScript object."
  },
  {
    "id": 152,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the given path and returns an array of its lines, or logs an error if reading fails."
  },
  {
    "id": 153,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the specified path and parses its contents as JSON, returning the parsed object or null if an error occurs."
  },
  {
    "id": 154,
    "code": "const fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}",
    "summary": "Reads a file synchronously and parses its contents as JSON, returning the resulting object."
  },
  {
    "id": 155,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAndLogLines(filePath) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            console.error('Error reading file:', err);\n            return;\n        }\n        const lines = data.split('\\n');\n        lines.forEach((line, index) => {\n            console.log(`Line ${index + 1}: ${line}`);\n        });\n    });\n}\n```",
    "summary": "This function reads a file asynchronously and logs each line to the console prefixed with its line number."
  },
  {
    "id": 156,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and parses its contents as JSON, returning the parsed object or null on error."
  },
  {
    "id": 157,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpper(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}\n```",
    "summary": "Reads a file's content as a string, converts it to uppercase, and returns it via a callback."
  },
  {
    "id": 158,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error(`Error reading file from disk: ${error}`);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a file from the given path and returns its contents as an array of lines, handling errors appropriately."
  },
  {
    "id": 159,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "Reads the contents of a file at a given path asynchronously and passes the result to a callback function."
  },
  {
    "id": 160,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns an array of non-empty lines."
  },
  {
    "id": 161,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines."
  },
  {
    "id": 162,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing the file:', err);\n        return null;\n    }\n}\n```",
    "summary": "This function reads and parses a JSON file from the specified file path, returning the parsed object or null if an error occurs."
  },
  {
    "id": 163,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readTextFile(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            callback(null, data);\n        }\n    });\n}\n```",
    "summary": "This function reads a text file asynchronously and executes a callback with the file's content or an error."
  },
  {
    "id": 164,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data;\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads and returns the content of a file synchronously from a specified path, logging an error if the operation fails."
  },
  {
    "id": 165,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data.split('\\n'));\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines using promises."
  },
  {
    "id": 166,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously from a given path and returns its content as a JSON object, handling any errors that occur."
  },
  {
    "id": 167,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously from the given path and parses its contents as JSON, returning the parsed object or null if an error occurs."
  },
  {
    "id": 168,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the given path and returns its content as an array of lines."
  },
  {
    "id": 169,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "This function reads the content of a file asynchronously and passes the result to a callback function."
  },
  {
    "id": 170,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines via a callback function."
  },
  {
    "id": 171,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "Reads the content of a file at a given path and passes it to a callback function."
  },
  {
    "id": 172,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file synchronously and returns its contents as a JavaScript object, handling errors gracefully."
  },
  {
    "id": 173,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its contents as a JavaScript object."
  },
  {
    "id": 174,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from a given path and returns its parsed content, logging an error if reading or parsing fails."
  },
  {
    "id": 175,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n  return new Promise((resolve, reject) => {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n      if (err) {\n        reject(err);\n        return;\n      }\n      const lines = data.split('\\n');\n      resolve(lines);\n    });\n  });\n}\n```",
    "summary": "Reads a file asynchronously and returns its contents as an array of lines."
  },
  {
    "id": 176,
    "code": "```javascript\nconst fs = require('fs');\n\n/**\n * Reads a JSON file from the specified path and returns the parsed object.\n * @param {string} filePath - The path to the JSON file.\n * @returns {Object} The parsed JSON object.\n * @throws Will throw an error if the file cannot be read or parsed.\n */\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        throw new Error(`Error reading or parsing JSON file: ${error.message}`);\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns the parsed object, throwing an error if reading or parsing fails."
  },
  {
    "id": 177,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                const lines = data.split('\\n');\n                resolve(lines);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines using a Promise."
  },
  {
    "id": 178,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                const lines = data.split('\\n');\n                resolve(lines);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file asynchronously and returns its content as an array of lines."
  },
  {
    "id": 179,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the specified path, returning the parsed object or null on error."
  },
  {
    "id": 180,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data;\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads and returns the content of a file synchronously, logging an error if the operation fails."
  },
  {
    "id": 181,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data;\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads the content of a file synchronously from the given file path and returns it as a string, handling errors if they occur."
  },
  {
    "id": 182,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously from the given path and parses its content as JSON, returning the parsed object or null on error."
  },
  {
    "id": 183,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its lines as an array of strings, logging an error if the operation fails."
  },
  {
    "id": 184,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "Reads the content of a file at a given path and returns it through a callback function."
  },
  {
    "id": 185,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a file from the specified path and returns its contents as a JSON object, handling any errors that occur."
  },
  {
    "id": 186,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n  try {\n    const data = fs.readFileSync(filePath, 'utf8');\n    return data.split('\\n');\n  } catch (err) {\n    console.error('Error reading file:', err);\n    return null;\n  }\n}\n```",
    "summary": "Reads a file from the specified path and returns its content as an array of lines, handling errors gracefully."
  },
  {
    "id": 187,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n  try {\n    const data = fs.readFileSync(filePath, 'utf8');\n    return JSON.parse(data);\n  } catch (error) {\n    console.error('Error reading or parsing JSON file:', error);\n    return null;\n  }\n}\n```",
    "summary": "This function reads a JSON file from the specified path and returns the parsed JSON object, handling errors gracefully."
  },
  {
    "id": 188,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines, handling any errors that occur."
  },
  {
    "id": 189,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(\"Error reading or parsing the file:\", error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads and parses a JSON file from the given file path and returns its contents as a JavaScript object."
  },
  {
    "id": 190,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a file from the given path and parses its contents as JSON, handling errors if they occur."
  },
  {
    "id": 191,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}\n```",
    "summary": "Reads the contents of a file at the given path and returns an array of its lines, or an empty array if an error occurs."
  },
  {
    "id": 192,
    "code": "const fs = require('fs');\n\nfunction readJsonFileSync(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}",
    "summary": "This function synchronously reads a JSON file from the specified path and returns its contents as an object."
  },
  {
    "id": 193,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFileSync(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing the file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file synchronously, returning its contents as a JavaScript object or null if an error occurs."
  },
  {
    "id": 194,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAndConvertToUppercase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}\n```",
    "summary": "Reads a file asynchronously and converts its content to uppercase, then passes the result to a callback function."
  },
  {
    "id": 195,
    "code": "```javascript\nconst fs = require('fs');\nconst path = require('path');\n\n/**\n * Reads and prints all text files from a specified directory.\n * @param {string} dirPath - The directory path to read files from.\n */\nfunction readAndPrintTextFiles(dirPath) {\n    fs.readdir(dirPath, (err, files) => {\n        if (err) {\n            console.error('Error reading directory:', err);\n            return;\n        }\n        files.forEach((file) => {\n            if (path.extname(file) === '.txt') {\n                const filePath = path.join(dirPath, file);\n                fs.readFile(filePath, 'utf8', (err, data) => {\n                    if (err) {\n                        console.error('Error reading file:', err);\n                        return;\n                    }\n                    console.log(`Contents of ${file}:`);\n                    console.log(data);\n                });\n            }\n        });\n    });\n}\n```",
    "summary": "Reads all `.txt` files from a specified directory and prints their contents to the console."
  },
  {
    "id": 196,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing the file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the specified path, returning the parsed object or null if an error occurs."
  },
  {
    "id": 197,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its content as an object or null if an error occurs."
  },
  {
    "id": 198,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines, logging an error if reading fails."
  },
  {
    "id": 199,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing the file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the specified path and parses its content into a JSON object."
  },
  {
    "id": 200,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing the file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file synchronously from the specified path and returns its parsed content, logging an error if reading or parsing fails."
  },
  {
    "id": 201,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    if (!fs.existsSync(filePath)) {\n        throw new Error(\"File does not exist.\");\n    }\n    const data = fs.readFileSync(filePath, 'utf-8');\n    try {\n        return JSON.parse(data);\n    } catch (error) {\n        throw new Error(\"Invalid JSON content.\");\n    }\n}\n```",
    "summary": "Reads a file at the given path and parses its content into a JSON object, throwing errors for non-existent files or invalid JSON."
  },
  {
    "id": 202,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines, handling any errors that occur during the read operation."
  },
  {
    "id": 203,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously from the specified path and parses its contents as JSON, handling errors gracefully."
  },
  {
    "id": 204,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFileSync(filePath) {\n    if (!fs.existsSync(filePath)) {\n        throw new Error('File does not exist');\n    }\n    const fileData = fs.readFileSync(filePath, 'utf8');\n    try {\n        return JSON.parse(fileData);\n    } catch (error) {\n        throw new Error('Invalid JSON format');\n    }\n}\n```",
    "summary": "Reads and parses a JSON file synchronously, returning the parsed object or throwing an error for non-existent files or invalid JSON."
  },
  {
    "id": 205,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseErr) {\n            callback(parseErr, null);\n        }\n    });\n}\n```",
    "summary": "This function reads a file from the given path and attempts to parse its content as JSON, returning the result via a callback."
  },
  {
    "id": 206,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                return reject(err);\n            }\n            try {\n                const jsonData = JSON.parse(data);\n                resolve(jsonData);\n            } catch (parseErr) {\n                reject(parseErr);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file from the specified path and parses its contents into a JSON object, returning a promise."
  },
  {
    "id": 207,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the given path and parses its contents as JSON, returning the parsed object or null on failure."
  },
  {
    "id": 208,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the specified path, returning the parsed object or null on error."
  },
  {
    "id": 209,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAndCountLines(filePath, callback) {\n  fs.readFile(filePath, 'utf8', (err, data) => {\n    if (err) {\n      callback(err, null);\n      return;\n    }\n    const lineCount = data.split('\\n').length;\n    callback(null, lineCount);\n  });\n}\n```",
    "summary": "Reads a file and counts the number of lines, returning the count via a callback function."
  },
  {
    "id": 210,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n  try {\n    const data = fs.readFileSync(filePath, 'utf8');\n    return JSON.parse(data);\n  } catch (err) {\n    console.error('Error reading or parsing file:', err);\n    return null;\n  }\n}\n```",
    "summary": "Reads a file synchronously and parses its content as JSON, returning the result or null on error."
  },
  {
    "id": 211,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAndCountWords(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        const words = data.split(/\\s+/).filter(word => word.length > 0);\n        return words.length;\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a file synchronously from the specified path and counts the number of words in it."
  },
  {
    "id": 212,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its parsed content, logging errors if reading or parsing fails."
  },
  {
    "id": 213,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously, returning its non-empty lines as an array."
  },
  {
    "id": 214,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its contents as an array of lines, or an empty array if an error occurs."
  },
  {
    "id": 215,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUppercase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        const uppercasedData = data.toUpperCase();\n        callback(null, uppercasedData);\n    });\n}\n```",
    "summary": "Reads a file and passes its content in uppercase to a callback function."
  },
  {
    "id": 216,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its contents as a JavaScript object, logging an error if reading or parsing fails."
  },
  {
    "id": 217,
    "code": "```javascript\nfunction readFileLines(filePath, callback) {\n    const fs = require('fs');\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            const lines = data.split(/\\r?\\n/);\n            callback(null, lines);\n        }\n    });\n}\n```",
    "summary": "This function reads a file asynchronously and returns its content as an array of lines using a callback."
  },
  {
    "id": 218,
    "code": "```javascript\nconst fs = require('fs');\nconst path = require('path');\n\nfunction listFilesInDirectory(directoryPath) {\n    try {\n        const files = fs.readdirSync(directoryPath);\n        return files.map(file => path.join(directoryPath, file));\n    } catch (error) {\n        console.error('Error reading directory:', error);\n        return [];\n    }\n}\n```",
    "summary": "Lists all files in a specified directory and returns their full paths."
  },
  {
    "id": 219,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToArray(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        const lines = data.split('\\n').filter(line => line.trim() !== '');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file and returns its non-empty lines as an array via a callback function."
  },
  {
    "id": 220,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines through a callback."
  },
  {
    "id": 221,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            callback(null, data);\n        }\n    });\n}\n```",
    "summary": "Reads the content of a file asynchronously and passes the data or error to a callback function."
  },
  {
    "id": 222,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (error) {\n        console.error(`Error reading file from disk: ${error}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the given path and returns an array of non-empty lines."
  },
  {
    "id": 223,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines, handling any errors during the reading process."
  },
  {
    "id": 224,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n  try {\n    const data = fs.readFileSync(filePath, 'utf8');\n    return JSON.parse(data);\n  } catch (error) {\n    console.error('Error reading or parsing the file:', error);\n    return null;\n  }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its parsed content, handling errors gracefully."
  },
  {
    "id": 225,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            callback(null, data);\n        }\n    });\n}\n```",
    "summary": "Reads the content of a file at a given path and returns it via a callback function, handling errors if any."
  },
  {
    "id": 226,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a file from the given path and parses its contents into a JSON object."
  },
  {
    "id": 227,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "The function reads the contents of a file asynchronously and returns the data through a callback."
  },
  {
    "id": 228,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file and returns an array of non-empty lines, handling any read errors."
  },
  {
    "id": 229,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n  fs.readFile(filePath, 'utf8', (err, data) => {\n    if (err) {\n      callback(err, null);\n    } else {\n      const lines = data.split('\\n');\n      callback(null, lines);\n    }\n  });\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines via a callback function."
  },
  {
    "id": 230,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file: ${err}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines."
  },
  {
    "id": 231,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsString(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data;\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as a string, or logs an error if reading fails."
  },
  {
    "id": 232,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing the file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the given path and returns its contents as a JavaScript object."
  },
  {
    "id": 233,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the given path and returns its contents as a JavaScript object, handling any errors in reading or parsing."
  },
  {
    "id": 234,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines."
  },
  {
    "id": 235,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines, handling errors if the file cannot be read."
  },
  {
    "id": 236,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the given path and returns its content as an array of lines, logging an error if the file cannot be read."
  },
  {
    "id": 237,
    "code": "```javascript\nconst fs = require('fs');\nconst path = require('path');\n\nfunction readJsonFileSync(filePath) {\n    if (!fs.existsSync(filePath) || path.extname(filePath) !== '.json') {\n        throw new Error('File does not exist or is not a JSON file.');\n    }\n    const fileContents = fs.readFileSync(filePath, 'utf8');\n    try {\n        return JSON.parse(fileContents);\n    } catch (error) {\n        throw new Error('Error parsing JSON file.');\n    }\n}\n```",
    "summary": "This function synchronously reads and parses a JSON file, throwing errors if the file does not exist, is not a JSON file, or contains invalid JSON."
  },
  {
    "id": 238,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const fileContent = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(fileContent);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its contents as an object, or logs an error and returns null if unsuccessful."
  },
  {
    "id": 239,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads and parses a JSON file from a given file path, returning the parsed object or null if an error occurs."
  },
  {
    "id": 240,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its contents as an array of lines."
  },
  {
    "id": 241,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data;\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads the contents of a file synchronously and returns it as a string, logging an error if the read fails."
  },
  {
    "id": 242,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data.split('\\n'));\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines using promises."
  },
  {
    "id": 243,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the given path and returns its content as an array of lines."
  },
  {
    "id": 244,
    "code": "```javascript\nconst fs = require('fs');\nconst path = require('path');\n\nfunction readFileContents(filePath) {\n  return new Promise((resolve, reject) => {\n    const fullPath = path.resolve(filePath);\n    fs.readFile(fullPath, 'utf8', (err, data) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(data);\n      }\n    });\n  });\n}\n```",
    "summary": "Reads the contents of a file specified by its path and returns a promise with the data or an error."
  },
  {
    "id": 245,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n                return;\n            }\n            try {\n                const jsonData = JSON.parse(data);\n                resolve(jsonData);\n            } catch (parseError) {\n                reject(parseError);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file from the specified path and parses its contents as JSON, returning a promise."
  },
  {
    "id": 246,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines, handling errors if the file cannot be read."
  },
  {
    "id": 247,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines via a callback function."
  },
  {
    "id": 248,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                return reject(err);\n            }\n            const lines = data.split('\\n').map(line => line.trim());\n            resolve(lines);\n        });\n    });\n}\n```",
    "summary": "Reads a file at the given path and returns a promise that resolves with an array of trimmed lines."
  },
  {
    "id": 249,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file, returning its contents as a JavaScript object or null if an error occurs."
  },
  {
    "id": 250,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                try {\n                    const jsonData = JSON.parse(data);\n                    resolve(jsonData);\n                } catch (parseErr) {\n                    reject(parseErr);\n                }\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a JSON file from the given path and returns its contents as a JavaScript object, using Promises for asynchronous handling."
  },
  {
    "id": 251,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "Reads the content of a file at a given path and returns it via a callback function."
  },
  {
    "id": 252,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content parsed as JSON, handling errors gracefully."
  },
  {
    "id": 253,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function synchronously reads and parses a JSON file from the specified file path, returning the parsed object or null if an error occurs."
  },
  {
    "id": 254,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as a JSON object, or logs an error if reading or parsing fails."
  },
  {
    "id": 255,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its content as an array of lines."
  },
  {
    "id": 256,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its content as an array of lines, or logs an error if reading fails."
  },
  {
    "id": 257,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing the file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the given file path, returning the parsed object or null on error."
  },
  {
    "id": 258,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file at the given path and returns its content as an array of lines via a callback function."
  },
  {
    "id": 259,
    "code": "async function readFileContents(filePath) {\n    const fs = require('fs').promises;\n    try {\n        const data = await fs.readFile(filePath, 'utf8');\n        return data;\n    } catch (error) {\n        console.error('Error reading file:', error);\n        throw error;\n    }\n}",
    "summary": "This function asynchronously reads the contents of a file at the specified path and returns it as a string."
  },
  {
    "id": 260,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAndLogLines(filePath) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            console.error('Error reading file:', err);\n            return;\n        }\n        const lines = data.split('\\n');\n        lines.forEach((line, index) => {\n            console.log(`Line ${index + 1}: ${line}`);\n        });\n    });\n}\n```",
    "summary": "Reads a file asynchronously, splits its contents by lines, and logs each line with its line number to the console."
  },
  {
    "id": 261,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its contents as a JavaScript object, handling errors if any occur."
  },
  {
    "id": 262,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction countLinesInFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').length;\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return 0;\n    }\n}\n```",
    "summary": "This function reads a file from a given path and returns the number of lines it contains, handling any read errors gracefully."
  },
  {
    "id": 263,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error(`Error reading file from disk: ${error}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its contents as an array of lines, handling any read errors."
  },
  {
    "id": 264,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n  return new Promise((resolve, reject) => {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n      if (err) {\n        reject(err);\n      } else {\n        const lines = data.split('\\n');\n        resolve(lines);\n      }\n    });\n  });\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines using a Promise."
  },
  {
    "id": 265,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a JSON file from the specified path and returns its parsed content, logging any errors encountered."
  },
  {
    "id": 266,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a file synchronously and returns its contents as an array of lines."
  },
  {
    "id": 267,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readAndParseJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file synchronously from the given path and parses its content into a JavaScript object."
  },
  {
    "id": 268,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').map(line => line.trim());\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns an array of trimmed lines, handling any errors that occur."
  },
  {
    "id": 269,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from a specified path and returns an array of non-empty lines."
  },
  {
    "id": 270,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the given path and parses its content as JSON, returning the parsed object or null on error."
  },
  {
    "id": 271,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction countLinesInFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        const lines = data.split('\\n');\n        return lines.length;\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return -1;\n    }\n}\n```",
    "summary": "This function reads a file and returns the number of lines it contains, or -1 if an error occurs."
  },
  {
    "id": 272,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpper(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}\n```",
    "summary": "Reads a file and converts its content to uppercase, returning the result via a callback."
  },
  {
    "id": 273,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "This function reads a file and returns its contents as an array of lines via a callback."
  },
  {
    "id": 274,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const fileContent = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(fileContent);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the given path and parses its content as JSON, returning the result or null if an error occurs."
  },
  {
    "id": 275,
    "code": "```javascript\nconst fs = require('fs');\nconst path = require('path');\n\nfunction readJSONFile(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(path.resolve(filePath), 'utf8', (err, data) => {\n            if (err) {\n                return reject(err);\n            }\n            try {\n                const jsonData = JSON.parse(data);\n                resolve(jsonData);\n            } catch (parseErr) {\n                reject(parseErr);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a JSON file from the given path and returns its content as a JavaScript object."
  },
  {
    "id": 276,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the given path and returns its content as an array of lines, or logs an error if reading fails."
  },
  {
    "id": 277,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data;\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return null;\n    }\n}\n```",
    "summary": "This function reads the contents of a file from a specified path and returns it as a string, logging an error if the file cannot be read."
  },
  {
    "id": 278,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}\n```",
    "summary": "The `readFileLines` function reads a file synchronously and returns its contents as an array of lines, handling any errors that occur."
  },
  {
    "id": 279,
    "code": "async function readJsonFile(filePath) {\n    const fs = require('fs').promises;\n    try {\n        const data = await fs.readFile(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        throw new Error('Failed to read or parse the file: ' + error.message);\n    }\n}",
    "summary": "Reads a JSON file asynchronously and returns its contents as a JavaScript object."
  },
  {
    "id": 280,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines, handling errors if the file cannot be read."
  },
  {
    "id": 281,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data;\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads and returns the content of a file as a string, or logs an error if the file cannot be read."
  },
  {
    "id": 282,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction countLinesInFile(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lineCount = data.split('\\n').length;\n        callback(null, lineCount);\n    });\n}\n```",
    "summary": "This function counts the number of lines in a specified file and returns the result via a callback."
  },
  {
    "id": 283,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.toUpperCase();\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads the content of a file and returns it in uppercase, handling errors if the file cannot be read."
  },
  {
    "id": 284,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction countLinesInFile(filePath, callback) {\n  fs.readFile(filePath, 'utf8', (err, data) => {\n    if (err) {\n      callback(err, null);\n      return;\n    }\n    const lineCount = data.split('\\n').length;\n    callback(null, lineCount);\n  });\n}\n```",
    "summary": "Counts the number of lines in a file and returns the result via a callback function."
  },
  {
    "id": 285,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously, parses its content as JSON, and handles errors during the process."
  },
  {
    "id": 286,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(\"Error reading or parsing file:\", error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and parses its content as JSON, returning the object or null on error."
  },
  {
    "id": 287,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines, handling any read errors."
  },
  {
    "id": 288,
    "code": "async function readFileContent(filePath) {\n  const fs = require('fs').promises;\n  try {\n    const data = await fs.readFile(filePath, 'utf8');\n    return data;\n  } catch (error) {\n    console.error(`Error reading file from disk: ${error}`);\n    throw error;\n  }\n}",
    "summary": "This function asynchronously reads the content of a text file and returns it as a string."
  },
  {
    "id": 289,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFileSync(filePath) {\n    try {\n        const fileContent = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(fileContent);\n    } catch (error) {\n        console.error(\"Error reading or parsing file:\", error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file synchronously, returning its content as a JavaScript object or null if an error occurs."
  },
  {
    "id": 290,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) return reject(err);\n            const lines = data.split('\\n');\n            resolve(lines);\n        });\n    });\n}\n```",
    "summary": "This function reads a file from the specified path and returns a promise that resolves with an array of lines in the file."
  },
  {
    "id": 291,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines, or logs an error if the file cannot be read."
  },
  {
    "id": 292,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error(`Error reading file from disk: ${error}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its contents as an array of lines."
  },
  {
    "id": 293,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines."
  },
  {
    "id": 294,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction countLinesInFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').length;\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return 0;\n    }\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count, handling any read errors."
  },
  {
    "id": 295,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFileSync(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file synchronously, returning the parsed object or null if an error occurs."
  },
  {
    "id": 296,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAndCountLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) return callback(err, null);\n        const lineCount = data.split('\\n').length;\n        callback(null, lineCount);\n    });\n}\n```",
    "summary": "This function reads a file and counts the number of lines, then returns the count via a callback."
  },
  {
    "id": 297,
    "code": "const fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}",
    "summary": "This function reads a file from the given path and returns its contents as an array of lines."
  },
  {
    "id": 298,
    "code": "async function readJsonFile(filePath) {\n    const fs = require('fs').promises;\n    try {\n        const data = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(\"Error reading or parsing the file:\", error);\n        throw error;\n    }\n}",
    "summary": "Reads a JSON file asynchronously and returns its parsed content as a JavaScript object."
  },
  {
    "id": 299,
    "code": "async function readFileContents(filePath) {\n    const fsPromises = require('fs').promises;\n    try {\n        const data = await fsPromises.readFile(filePath, 'utf8');\n        return data;\n    } catch (error) {\n        throw new Error(`Error reading file: ${error.message}`);\n    }\n}",
    "summary": "Reads the contents of a file asynchronously and returns the data as a string."
  },
  {
    "id": 300,
    "code": "const fs = require('fs');\n\nfunction readFileToUpperCase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) return callback(err);\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}",
    "summary": "Reads a file and returns its content converted to uppercase via a callback function."
  },
  {
    "id": 301,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data;\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and returns the contents of a file at the specified path, or logs an error if reading fails."
  },
  {
    "id": 302,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the specified path and parses its content as JSON, returning the result or null on error."
  },
  {
    "id": 303,
    "code": "async function readFileContents(filePath) {\n  const fs = require('fs').promises;\n  try {\n    const data = await fs.readFile(filePath, 'utf-8');\n    return data;\n  } catch (error) {\n    console.error('Error reading file:', error);\n    throw error;\n  }\n}",
    "summary": "This function asynchronously reads the contents of a file at a given path and returns the data as a string."
  },
  {
    "id": 304,
    "code": "const fs = require('fs');\n\nfunction readJsonFileSync(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err);\n        return null;\n    }\n}",
    "summary": "Reads and parses a JSON file synchronously, returning the parsed object or null if an error occurs."
  },
  {
    "id": 305,
    "code": "async function readFileContents(filePath) {\n    const fs = require('fs').promises;\n    try {\n        const data = await fs.readFile(filePath, 'utf8');\n        return data;\n    } catch (error) {\n        throw new Error(`Unable to read file: ${error.message}`);\n    }\n}",
    "summary": "Asynchronously reads and returns the contents of a file specified by the file path."
  },
  {
    "id": 306,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (error) {\n        console.error(`Error reading file: ${error.message}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns an array of non-empty lines, handling errors if the file cannot be read."
  },
  {
    "id": 307,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines, logging an error if the read fails."
  },
  {
    "id": 308,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                return reject(err);\n            }\n            const lines = data.split('\\n');\n            resolve(lines);\n        });\n    });\n}\n```",
    "summary": "Reads a file asynchronously and returns its contents as an array of lines."
  },
  {
    "id": 309,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file, returning its contents as an object or null in case of an error."
  },
  {
    "id": 310,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading the file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously from a given path and returns its contents as an array of lines."
  },
  {
    "id": 311,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error(`Error reading file: ${error.message}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the given path and returns its content as an array of lines, or an empty array if an error occurs."
  },
  {
    "id": 312,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFileSync(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing the file:', err);\n        return null;\n    }\n}\n```",
    "summary": "This function synchronously reads a JSON file from a given path and returns its parsed content, or null if an error occurs."
  },
  {
    "id": 313,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (error) {\n        console.error(`Error reading file: ${error.message}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns an array of non-empty lines, logging an error if the operation fails."
  },
  {
    "id": 314,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                const lines = data.split('\\n');\n                resolve(lines);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines using a promise-based approach."
  },
  {
    "id": 315,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its contents as a JSON object, or logs an error if reading fails."
  },
  {
    "id": 316,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data;\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads the contents of a specified file and returns it as a string, while handling potential errors."
  },
  {
    "id": 317,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFileSync(filePath) {\n    try {\n        const fileContent = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(fileContent);\n    } catch (err) {\n        console.error('Error reading or parsing JSON file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file synchronously from the specified file path, returning the parsed object or null on error."
  },
  {
    "id": 318,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, callback) {\n  fs.readFile(filePath, 'utf8', (err, data) => {\n    if (err) {\n      callback(err, null);\n    } else {\n      callback(null, data);\n    }\n  });\n}\n```",
    "summary": "Reads the contents of a file at the specified path and returns it via a callback function."
  },
  {
    "id": 319,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(\"Error reading or parsing the file:\", error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its parsed content as a JavaScript object."
  },
  {
    "id": 320,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing the file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its contents as a JavaScript object, handling any errors that occur."
  },
  {
    "id": 321,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns the parsed object, or logs an error if reading or parsing fails."
  },
  {
    "id": 322,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its contents as a JavaScript object, or logs an error and returns null if the operation fails."
  },
  {
    "id": 323,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously, parses its contents as JSON, and handles errors by logging them and returning null."
  },
  {
    "id": 324,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}\n```",
    "summary": "Reads a file's contents and returns them in uppercase via a callback."
  },
  {
    "id": 325,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAndCountWords(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        const words = data.split(/\\s+/).filter(Boolean);\n        callback(null, words.length);\n    });\n}\n```",
    "summary": "Reads a file and counts the number of words, returning the count via a callback function."
  },
  {
    "id": 326,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file synchronously, returning the parsed object or null if an error occurs."
  },
  {
    "id": 327,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data.split('\\n'));\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a text file and returns its content as an array of lines."
  },
  {
    "id": 328,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from a given file path, returning the JSON object or null if an error occurs."
  },
  {
    "id": 329,
    "code": "async function readFileAsJSON(filePath) {\n    const fs = require('fs').promises;\n    try {\n        const data = await fs.readFile(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        throw error;\n    }\n}",
    "summary": "Reads a file at the given path and parses its content as JSON, handling errors if any occur."
  },
  {
    "id": 330,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) return callback(err, null);\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseErr) {\n            callback(parseErr, null);\n        }\n    });\n}\n```",
    "summary": "Reads a file at the specified path and parses its contents into JSON, returning the result through a callback function."
  },
  {
    "id": 331,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its contents as a JavaScript object, handling any errors that occur."
  },
  {
    "id": 332,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseErr) {\n            callback(parseErr, null);\n        }\n    });\n}\n```",
    "summary": "This function reads a JSON file from a specified path and passes the parsed data to a callback function, handling errors appropriately."
  },
  {
    "id": 333,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFileSync(filePath) {\n    if (!fs.existsSync(filePath)) {\n        throw new Error('File does not exist');\n    }\n    const data = fs.readFileSync(filePath, 'utf8');\n    return JSON.parse(data);\n}\n```",
    "summary": "Reads a JSON file synchronously and returns its parsed content as a JavaScript object."
  },
  {
    "id": 334,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAndReverseContent(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        const reversedContent = data.split('').reverse().join('');\n        return reversedContent;\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content reversed; logs an error if reading fails."
  },
  {
    "id": 335,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                try {\n                    const jsonData = JSON.parse(data);\n                    resolve(jsonData);\n                } catch (parseError) {\n                    reject(parseError);\n                }\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file from the given path and returns its contents parsed as JSON, using Promises for asynchronous handling."
  },
  {
    "id": 336,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a JSON file from the given path and returns its contents as a JavaScript object, logging an error if reading or parsing fails."
  },
  {
    "id": 337,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            callback(null, data);\n        }\n    });\n}\n```",
    "summary": "Reads the contents of a file at the specified path and passes the data to a callback function."
  },
  {
    "id": 338,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFileSync(filePath) {\n    if (!fs.existsSync(filePath)) {\n        throw new Error('File does not exist');\n    }\n    const fileContent = fs.readFileSync(filePath, 'utf8');\n    try {\n        return JSON.parse(fileContent);\n    } catch (error) {\n        throw new Error('Invalid JSON format');\n    }\n}\n```",
    "summary": "Reads and parses a JSON file synchronously, throwing an error if the file doesn't exist or contains invalid JSON."
  },
  {
    "id": 339,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously from a given path and parses its content as JSON."
  },
  {
    "id": 340,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}\n```",
    "summary": "Reads a file and returns its content transformed to uppercase through a callback."
  },
  {
    "id": 341,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file synchronously and returns its contents as a JavaScript object, logging an error message if any issues occur."
  },
  {
    "id": 342,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperSync(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.toUpperCase();\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "This function synchronously reads a file and returns its contents in uppercase, logging an error if the operation fails."
  },
  {
    "id": 343,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing JSON file:', err);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a JSON file from the specified path and returns the parsed object, logging an error if reading or parsing fails."
  },
  {
    "id": 344,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const fileContent = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(fileContent);\n    } catch (error) {\n        console.error(`Failed to read or parse file at ${filePath}:`, error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from a given path, returning the data or null if an error occurs."
  },
  {
    "id": 345,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines or logs an error if the file cannot be read."
  },
  {
    "id": 346,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        try {\n            const json = JSON.parse(data);\n            callback(null, json);\n        } catch (parseErr) {\n            callback(parseErr, null);\n        }\n    });\n}\n```",
    "summary": "Reads a file asynchronously and parses its contents as JSON, returning the result via a callback."
  },
  {
    "id": 347,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines."
  },
  {
    "id": 348,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error(`Error reading or parsing the file: ${err.message}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and parses its content, handling any errors encountered."
  },
  {
    "id": 349,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                try {\n                    const jsonData = JSON.parse(data);\n                    resolve(jsonData);\n                } catch (parseError) {\n                    reject(parseError);\n                }\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file at a given path and parses its content as JSON, returning a promise."
  },
  {
    "id": 350,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFileSync(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(`Error reading or parsing file: ${error}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file synchronously from the specified path and returns its content as an object, logging errors if any occur."
  },
  {
    "id": 351,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads the content of a file and returns its lines as an array via a callback function."
  },
  {
    "id": 352,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the specified path and parses its contents as JSON, returning the parsed object or null on error."
  },
  {
    "id": 353,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a text file and returns its contents as an array of lines, handling errors gracefully."
  },
  {
    "id": 354,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFileSync(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function synchronously reads and parses a JSON file, returning its contents as a JavaScript object or null if an error occurs."
  },
  {
    "id": 355,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines, handling errors if the file cannot be read."
  },
  {
    "id": 356,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its non-empty lines as an array of strings."
  },
  {
    "id": 357,
    "code": "```javascript\nconst fs = require('fs');\nconst path = require('path');\n\nfunction readJsonFileSync(filePath) {\n    try {\n        const absolutePath = path.resolve(filePath);\n        const fileContents = fs.readFileSync(absolutePath, 'utf8');\n        return JSON.parse(fileContents);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file synchronously, returning the parsed object or null if an error occurs."
  },
  {
    "id": 358,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its content as an array of lines, handling errors if the file cannot be read."
  },
  {
    "id": 359,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToArray(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its content as an array of non-empty lines."
  },
  {
    "id": 360,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the given path and parses its content as JSON, returning the parsed object or null if an error occurs."
  },
  {
    "id": 361,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the specified path, returning the parsed object or null if an error occurs."
  },
  {
    "id": 362,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(`Error reading or parsing file: ${error.message}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its parsed content, or logs an error if reading or parsing fails."
  },
  {
    "id": 363,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseErr) {\n            callback(parseErr);\n        }\n    });\n}\n```",
    "summary": "Reads a JSON file asynchronously and parses its content, returning the data or an error through a callback."
  },
  {
    "id": 364,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines via a callback function."
  },
  {
    "id": 365,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const fileContent = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(fileContent);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the specified path and parses its content as JSON, returning the parsed object."
  },
  {
    "id": 366,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data.split('\\n'));\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file asynchronously and returns its content as an array of lines."
  },
  {
    "id": 367,
    "code": "async function readFileAsJson(filePath) {\n    const fs = require('fs').promises;\n    try {\n        const data = await fs.readFile(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(`Error reading or parsing file: ${error.message}`);\n        return null;\n    }\n}",
    "summary": "Reads a file asynchronously and parses its contents as JSON, returning the parsed object or null on error."
  },
  {
    "id": 368,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data);\n            }\n        });\n    });\n}\n```",
    "summary": "This function asynchronously reads the contents of a file specified by its path and returns a promise that resolves with the file's content or rejects with an error."
  },
  {
    "id": 369,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const fileContent = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(fileContent);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and parses its contents into a JSON object, returning null if an error occurs."
  },
  {
    "id": 370,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its contents as a JavaScript object, handling errors if the file is inaccessible or not valid JSON."
  },
  {
    "id": 371,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "Reads the contents of a file asynchronously and invokes a callback with the data or an error."
  },
  {
    "id": 372,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                const lines = data.split(/\\r?\\n/);\n                resolve(lines);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines using a promise."
  },
  {
    "id": 373,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file synchronously from the specified path and returns its content as a JavaScript object, handling errors if they occur."
  },
  {
    "id": 374,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const fileContent = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(fileContent);\n    } catch (error) {\n        throw new Error(`Error reading or parsing the file: ${error.message}`);\n    }\n}\n```",
    "summary": "Reads a file synchronously and parses its content as JSON, throwing an error if reading or parsing fails."
  },
  {
    "id": 375,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a file synchronously from the given path and returns its contents as an array of lines."
  },
  {
    "id": 376,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error(`Error reading file: ${error.message}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines, logging any errors encountered."
  },
  {
    "id": 377,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its content as an array of lines."
  },
  {
    "id": 378,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its parsed content, or logs an error if reading or parsing fails."
  },
  {
    "id": 379,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "This function reads the content of a file at a given path and returns it as a UTF-8 string via a callback."
  },
  {
    "id": 380,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing JSON file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file synchronously from the specified path and returns its parsed content, or logs an error and returns null if reading or parsing fails."
  },
  {
    "id": 381,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads the contents of a file and returns an array of its lines, handling any read errors gracefully."
  },
  {
    "id": 382,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the given file path, returning its contents as a JavaScript object."
  },
  {
    "id": 383,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const fileContent = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(fileContent);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its contents as a JavaScript object, handling any errors that occur during the process."
  },
  {
    "id": 384,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines, handling errors gracefully."
  },
  {
    "id": 385,
    "code": "```javascript\nconst fs = require('fs');\n\n/**\n * Reads a text file line by line and logs each line to the console.\n * @param {string} filePath - The path to the text file.\n */\nfunction readLines(filePath) {\n    const readStream = fs.createReadStream(filePath, { encoding: 'utf8' });\n    let remaining = '';\n\n    readStream.on('data', (chunk) => {\n        remaining += chunk;\n        let index;\n        while ((index = remaining.indexOf('\\n')) > -1) {\n            const line = remaining.slice(0, index);\n            remaining = remaining.slice(index + 1);\n            console.log(line);\n        }\n    });\n\n    readStream.on('end', () => {\n        if (remaining.length > 0) {\n            console.log(remaining);\n        }\n    });\n\n    readStream.on('error', (err) => {\n        console.error(`Error reading file: ${err.message}`);\n    });\n}\n```",
    "summary": "This function reads a text file line by line and logs each line to the console using a read stream."
  },
  {
    "id": 386,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    if (!fs.existsSync(filePath)) {\n        throw new Error('File does not exist');\n    }\n    const data = fs.readFileSync(filePath, 'utf8');\n    return data.split(/\\r?\\n/);\n}\n```",
    "summary": "Reads a file from the specified path and returns its content as an array of lines."
  },
  {
    "id": 387,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n                return;\n            }\n            const lines = data.split('\\n');\n            resolve(lines);\n        });\n    });\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines using a promise."
  },
  {
    "id": 388,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error(`Error reading file from disk: ${error}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its content as an array of lines."
  },
  {
    "id": 389,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines using a callback function."
  },
  {
    "id": 390,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n  try {\n    const data = fs.readFileSync(filePath, 'utf8');\n    return data.split('\\n');\n  } catch (err) {\n    console.error('Error reading file:', err);\n    return null;\n  }\n}\n```",
    "summary": "Reads a file from the specified path and returns its contents as an array of lines, or logs an error if reading fails."
  },
  {
    "id": 391,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data.split('\\n'));\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines using a Promise."
  },
  {
    "id": 392,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines, handling errors gracefully."
  },
  {
    "id": 393,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToArray(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the given path and returns its non-empty lines as an array of strings."
  },
  {
    "id": 394,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its content as an array of lines."
  },
  {
    "id": 395,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file synchronously from the specified path and returns its parsed content, logging an error if any issue occurs."
  },
  {
    "id": 396,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFileSync(filePath) {\n    if (!fs.existsSync(filePath)) {\n        throw new Error('File does not exist');\n    }\n    const fileContent = fs.readFileSync(filePath, 'utf8');\n    return JSON.parse(fileContent);\n}\n```",
    "summary": "Reads a JSON file synchronously from a given path and parses its content into a JavaScript object."
  },
  {
    "id": 397,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split(/\\r?\\n/);\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously from a given path and returns its content as an array of lines."
  },
  {
    "id": 398,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines through a callback function."
  },
  {
    "id": 399,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFileSync(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file synchronously, returning the parsed object or null on error."
  },
  {
    "id": 400,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "This function reads a file synchronously and returns its contents as an array of lines, handling any errors that occur during the process."
  },
  {
    "id": 401,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from disk and returns an array of its lines, handling any read errors."
  },
  {
    "id": 402,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseErr) {\n            callback(parseErr, null);\n        }\n    });\n}\n```",
    "summary": "Reads a file at the given path and parses its contents as JSON, returning the result via a callback."
  },
  {
    "id": 403,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const fileContent = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(fileContent);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the given path and parses its content as JSON, returning the resulting object or null on error."
  },
  {
    "id": 404,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a file synchronously from the specified path and parses its contents as JSON, returning the resulting object or null on error."
  },
  {
    "id": 405,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the given path and returns its contents as an array of lines."
  },
  {
    "id": 406,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.toUpperCase();\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents in uppercase, or logs an error if the file cannot be read."
  },
  {
    "id": 407,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a file from a given path and parses its contents as JSON, returning the parsed object or null if an error occurs."
  },
  {
    "id": 408,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n                return;\n            }\n            try {\n                const jsonData = JSON.parse(data);\n                resolve(jsonData);\n            } catch (parseErr) {\n                reject(parseErr);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file from the specified path and parses its content as JSON, returning a promise."
  },
  {
    "id": 409,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUppercase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        const uppercasedData = data.toUpperCase();\n        callback(null, uppercasedData);\n    });\n}\n```",
    "summary": "Reads a file and passes its content in uppercase to a callback function."
  },
  {
    "id": 410,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines or logs an error if the file cannot be read."
  },
  {
    "id": 411,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        const lines = data.split('\\n').filter(line => line.trim() !== '');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file and returns its non-empty lines as an array through a callback function."
  },
  {
    "id": 412,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error(`Error reading or parsing file: ${err.message}`);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a JSON file from the specified path and returns its contents as a JavaScript object, logging errors if file reading or parsing fails."
  },
  {
    "id": 413,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split(/\\r?\\n/);\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "This function reads a file synchronously and returns its content as an array of lines."
  },
  {
    "id": 414,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the given path, returning the parsed object or null on error."
  },
  {
    "id": 415,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n                return;\n            }\n            try {\n                const jsonData = JSON.parse(data);\n                resolve(jsonData);\n            } catch (parseErr) {\n                reject(parseErr);\n            }\n        });\n    });\n}\n```",
    "summary": "This function reads a JSON file from the specified path and returns its content as a JavaScript object."
  },
  {
    "id": 416,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                try {\n                    const jsonData = JSON.parse(data);\n                    resolve(jsonData);\n                } catch (parseErr) {\n                    reject(parseErr);\n                }\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file from the given path and parses its contents as JSON, returning a promise."
  },
  {
    "id": 417,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines, handling errors if the file cannot be read."
  },
  {
    "id": 418,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data.split('\\n'));\n            }\n        });\n    });\n}\n```",
    "summary": "This function reads a file asynchronously and returns a promise that resolves with an array of its lines."
  },
  {
    "id": 419,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(`Error reading file: ${err.message}`, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "This function reads the contents of a file asynchronously and passes the data or an error message to a callback function."
  },
  {
    "id": 420,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a JSON file from the specified path and returns its parsed content, handling errors if reading or parsing fails."
  },
  {
    "id": 421,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        callback(null, data.toUpperCase());\n    });\n}\n```",
    "summary": "This function reads a file and returns its contents in uppercase via a callback."
  },
  {
    "id": 422,
    "code": "```javascript\nconst fs = require('fs');\n\n/**\n * Reads a JSON file and returns its contents as an object.\n * @param {string} filePath - The path to the JSON file.\n * @returns {Promise<Object>} - A promise that resolves to the parsed JSON object.\n */\nasync function readJsonFile(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                return reject(err);\n            }\n            try {\n                const jsonData = JSON.parse(data);\n                resolve(jsonData);\n            } catch (parseErr) {\n                reject(parseErr);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a JSON file asynchronously and returns its contents as a JavaScript object."
  },
  {
    "id": 423,
    "code": "```javascript\nconst fs = require('fs');\nconst path = require('path');\n\nfunction readJsonFileSync(filePath) {\n    const absolutePath = path.resolve(filePath);\n    if (!fs.existsSync(absolutePath)) {\n        throw new Error('File not found');\n    }\n    const fileContents = fs.readFileSync(absolutePath, 'utf8');\n    try {\n        return JSON.parse(fileContents);\n    } catch (error) {\n        throw new Error('Invalid JSON format');\n    }\n}\n```",
    "summary": "Reads a JSON file synchronously from a given path and returns the parsed object, throwing errors for missing files or invalid JSON format."
  },
  {
    "id": 424,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAndCountLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        const lineCount = data.split('\\n').length;\n        callback(null, lineCount);\n    });\n}\n```",
    "summary": "Reads a file and counts the number of lines, returning the result via a callback function."
  },
  {
    "id": 425,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns an array of non-empty lines."
  },
  {
    "id": 426,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error(`Error reading file from disk: ${error}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines."
  },
  {
    "id": 427,
    "code": "```javascript\nconst fs = require('fs');\nconst path = require('path');\n\nfunction readJSONFile(filePath) {\n    try {\n        const fullPath = path.resolve(filePath);\n        const fileContent = fs.readFileSync(fullPath, 'utf-8');\n        return JSON.parse(fileContent);\n    } catch (error) {\n        console.error('Error reading JSON file:', error.message);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file, returning its content as an object or null if an error occurs."
  },
  {
    "id": 428,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a JSON file synchronously from the specified path and returns its parsed contents or null if an error occurs."
  },
  {
    "id": 429,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, callback) {\n    fs.readFile(filePath, 'utf-8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "Reads the contents of a file at the given path and returns it via a callback function."
  },
  {
    "id": 430,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the given path and parses its content as JSON, handling errors gracefully."
  },
  {
    "id": 431,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        callback(null, data.toUpperCase());\n    });\n}\n```",
    "summary": "Reads a file asynchronously and converts its content to uppercase before invoking the callback function with the result."
  },
  {
    "id": 432,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsArray(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        const lines = data.split(/\\r?\\n/);\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines via a callback function."
  },
  {
    "id": 433,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns an array of non-empty lines."
  },
  {
    "id": 434,
    "code": "```javascript\nconst fs = require('fs');\nconst path = require('path');\n\nfunction readJsonFile(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(path.resolve(filePath), 'utf8', (err, data) => {\n            if (err) {\n                return reject(err);\n            }\n            try {\n                const jsonData = JSON.parse(data);\n                resolve(jsonData);\n            } catch (parseError) {\n                reject(parseError);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads and parses a JSON file asynchronously, returning its contents as a JavaScript object."
  },
  {
    "id": 435,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFileSync(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err);\n        return null;\n    }\n}\n```",
    "summary": "This function synchronously reads and parses a JSON file, returning its contents as a JavaScript object."
  },
  {
    "id": 436,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the specified file path, returning the data or null if an error occurs."
  },
  {
    "id": 437,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpper(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            const upperCaseData = data.toUpperCase();\n            callback(null, upperCaseData);\n        }\n    });\n}\n```",
    "summary": "Reads a file's content and returns it in uppercase via a callback function."
  },
  {
    "id": 438,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "This function reads a file synchronously and returns its contents as an array of lines."
  },
  {
    "id": 439,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the given path and returns its content parsed as JSON, handling errors gracefully."
  },
  {
    "id": 440,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and parses its content as JSON, returning the result or logging an error if it fails."
  },
  {
    "id": 441,
    "code": "function readTextFile(filePath, callback) {\n    const fs = require('fs');\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}",
    "summary": "This function reads a text file asynchronously and passes its contents or an error to a callback function."
  },
  {
    "id": 442,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data.split('\\n'));\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file's content and returns a promise that resolves with an array of its lines."
  },
  {
    "id": 443,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "This function reads a file synchronously and returns its content as an array of lines, handling any read errors gracefully."
  },
  {
    "id": 444,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error(`Error reading file: ${error.message}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines."
  },
  {
    "id": 445,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n                return;\n            }\n            try {\n                const jsonData = JSON.parse(data);\n                resolve(jsonData);\n            } catch (parseError) {\n                reject(parseError);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads and parses a JSON file asynchronously, returning a promise that resolves with the parsed data or rejects with an error."
  },
  {
    "id": 446,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the given path, returning the parsed object or null if an error occurs."
  },
  {
    "id": 447,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            const lines = data.split('\\n');\n            callback(null, lines);\n        }\n    });\n}\n```",
    "summary": "This function reads a file and returns its contents as an array of lines via a callback."
  },
  {
    "id": 448,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its contents as an array of lines."
  },
  {
    "id": 449,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its content as an array of lines or logs an error if reading fails."
  },
  {
    "id": 450,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n                return;\n            }\n            try {\n                const jsonData = JSON.parse(data);\n                resolve(jsonData);\n            } catch (parseError) {\n                reject(parseError);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file's content asynchronously and returns it as a JSON object using a Promise."
  },
  {
    "id": 451,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJSON(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and parses its contents as JSON, handling errors gracefully."
  },
  {
    "id": 452,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines, logging an error if the file cannot be read."
  },
  {
    "id": 453,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file specified by `filePath` and returns its contents as an array of lines, handling any read errors gracefully."
  },
  {
    "id": 454,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its content as an array of lines."
  },
  {
    "id": 455,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "This function reads a file from a specified path and returns its contents as an array of lines."
  },
  {
    "id": 456,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines, handling errors gracefully."
  },
  {
    "id": 457,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                return reject(err);\n            }\n            try {\n                const jsonData = JSON.parse(data);\n                resolve(jsonData);\n            } catch (parseErr) {\n                reject(parseErr);\n            }\n        });\n    });\n}\n```",
    "summary": "This function reads a file from the specified path and returns its content as a JSON object."
  },
  {
    "id": 458,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLineByLine(filePath) {\n    const readline = require('readline');\n    const fileStream = fs.createReadStream(filePath);\n    \n    const rl = readline.createInterface({\n        input: fileStream,\n        crlfDelay: Infinity\n    });\n\n    rl.on('line', (line) => {\n        console.log(`Line from file: ${line}`);\n    });\n\n    rl.on('close', () => {\n        console.log('File reading completed.');\n    });\n}\n```",
    "summary": "Reads a file line by line and logs each line to the console until the file reading is complete."
  },
  {
    "id": 459,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseErr) {\n            callback(parseErr, null);\n        }\n    });\n}\n```",
    "summary": "This function reads a JSON file asynchronously and parses its content, returning the result via a callback function."
  },
  {
    "id": 460,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing the file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the specified path, returning its contents as an object or null if an error occurs."
  },
  {
    "id": 461,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and parses its contents as JSON, returning the result or null on error."
  },
  {
    "id": 462,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, encoding = 'utf8') {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, encoding, (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads the content of a file asynchronously using promises, with a specified encoding."
  },
  {
    "id": 463,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "Reads the contents of a file at a given path and passes the data to a callback function."
  },
  {
    "id": 464,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                const lines = data.split('\\n');\n                resolve(lines);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file from the given path and returns its content as an array of lines."
  },
  {
    "id": 465,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAndLogContents(filePath) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            console.error('Error reading file:', err);\n            return;\n        }\n        console.log('File contents:', data);\n    });\n}\n```",
    "summary": "This function reads a file asynchronously and logs its contents to the console, handling any read errors."
  },
  {
    "id": 466,
    "code": "async function readFileAsJson(filePath) {\n    const fs = require('fs').promises;\n    try {\n        const data = await fs.readFile(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        throw error;\n    }\n}",
    "summary": "This function asynchronously reads a file from the given path and parses its contents as JSON, handling any errors encountered."
  },
  {
    "id": 467,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction appendToFile(filePath, data) {\n    fs.appendFile(filePath, data, 'utf8', (err) => {\n        if (err) {\n            console.error('Error appending to file:', err);\n        } else {\n            console.log('Data successfully appended to file.');\n        }\n    });\n}\n```",
    "summary": "Appends specified data to a file at the given file path and logs success or error messages."
  },
  {
    "id": 468,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file at a given path and returns its contents as an array of lines, handling any errors that occur."
  },
  {
    "id": 469,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns the parsed object, logging an error if reading or parsing fails."
  },
  {
    "id": 470,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "This function reads a file from the specified path and returns its contents as an array of lines, handling any errors that occur during the read operation."
  },
  {
    "id": 471,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads the contents of a file and returns an array of its lines, handling errors if the file cannot be read."
  },
  {
    "id": 472,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "This function reads the contents of a file specified by `filePath` and passes the result or error to a callback function."
  },
  {
    "id": 473,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data.split('\\n'));\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines using promises."
  },
  {
    "id": 474,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').map(line => line.trim());\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "This function reads a file and returns its contents as an array of trimmed lines, handling errors gracefully."
  },
  {
    "id": 475,
    "code": "```javascript\nconst fs = require('fs');\nconst path = require('path');\n\nfunction readJSONFile(filePath) {\n  try {\n    const absolutePath = path.resolve(filePath);\n    const data = fs.readFileSync(absolutePath, 'utf8');\n    return JSON.parse(data);\n  } catch (error) {\n    console.error('Error reading JSON file:', error.message);\n    return null;\n  }\n}\n```",
    "summary": "This function reads a JSON file from the specified path and returns its contents as a JavaScript object, handling errors gracefully."
  },
  {
    "id": 476,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAndCountLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lineCount = data.split('\\n').length;\n        callback(null, lineCount);\n    });\n}\n```",
    "summary": "This function reads a file and counts the number of lines, returning the count via a callback function."
  },
  {
    "id": 477,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath) {\n  try {\n    const fileContent = fs.readFileSync(filePath, 'utf-8');\n    return JSON.parse(fileContent);\n  } catch (error) {\n    console.error('Error reading or parsing the file:', error);\n    return null;\n  }\n}\n```",
    "summary": "This function reads a file from the specified path and returns its contents as a JSON object, handling errors gracefully."
  },
  {
    "id": 478,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseErr) {\n            callback(parseErr, null);\n        }\n    });\n}\n```",
    "summary": "This function reads a file at a given path and parses its contents as JSON, returning the result or an error via a callback."
  },
  {
    "id": 479,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}\n```",
    "summary": "This function reads a file's content and returns it in uppercase through a callback function."
  },
  {
    "id": 480,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its contents as a JavaScript object, logging an error if reading or parsing fails."
  },
  {
    "id": 481,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data.split('\\n'));\n            }\n        });\n    });\n}\n```",
    "summary": "This function reads a file and returns its content as an array of lines using promises in JavaScript."
  },
  {
    "id": 482,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines, or null if an error occurs."
  },
  {
    "id": 483,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file ${filePath}:`, err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines, or logs an error if reading fails."
  },
  {
    "id": 484,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file's content from the specified path and parses it as JSON, returning the parsed object or null on error."
  },
  {
    "id": 485,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "Reads the contents of a file at a given path and passes the data or error to a callback function."
  },
  {
    "id": 486,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "Reads the contents of a file at a given path and executes a callback with the data or an error."
  },
  {
    "id": 487,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFileSync(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function synchronously reads a JSON file from the specified path and returns its parsed content, handling any errors that occur."
  },
  {
    "id": 488,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data;\n    } catch (err) {\n        console.error('Error reading the file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads and returns the contents of a file at a given path, or logs an error and returns null if the file cannot be read."
  },
  {
    "id": 489,
    "code": "```javascript\nfunction readFileAndLogLines(filePath) {\n  const fs = require('fs');\n  fs.readFile(filePath, 'utf8', (err, data) => {\n    if (err) {\n      console.error('Error reading file:', err);\n      return;\n    }\n    const lines = data.split('\\n');\n    lines.forEach((line, index) => {\n      console.log(`Line ${index + 1}: ${line}`);\n    });\n  });\n}\n```",
    "summary": "Reads a file asynchronously and logs each line with its line number to the console."
  },
  {
    "id": 490,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseErr) {\n            callback(parseErr, null);\n        }\n    });\n}\n```",
    "summary": "Reads a JSON file asynchronously and parses its content, returning the result or an error through a callback."
  },
  {
    "id": 491,
    "code": "function readFileContents(filePath, callback) {\n    const fs = require('fs');\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}",
    "summary": "Reads the contents of a file asynchronously and passes the result to a callback function."
  },
  {
    "id": 492,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n  try {\n    const data = fs.readFileSync(filePath, 'utf8');\n    return data.split('\\n');\n  } catch (err) {\n    console.error('Error reading the file:', err);\n    return [];\n  }\n}\n```",
    "summary": "Reads a file from the specified path and returns its contents as an array of lines."
  },
  {
    "id": 493,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperSync(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.toUpperCase();\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "This function synchronously reads a file and returns its contents in uppercase, logging an error if the file cannot be read."
  },
  {
    "id": 494,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "Reads the contents of a file at the specified path and returns the data or error through a callback function."
  },
  {
    "id": 495,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n                return;\n            }\n            const lines = data.split('\\n');\n            resolve(lines);\n        });\n    });\n}\n```",
    "summary": "This function reads a file and returns its contents as an array of lines using a promise."
  },
  {
    "id": 496,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n  try {\n    const data = fs.readFileSync(filePath, 'utf-8');\n    return data.split('\\n');\n  } catch (err) {\n    console.error('Error reading the file:', err);\n    return [];\n  }\n}\n```",
    "summary": "Reads a file from the given path and returns its contents as an array of lines."
  },
  {
    "id": 497,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath, callback) {\n    fs.readFile(filePath, 'utf-8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseErr) {\n            callback(parseErr, null);\n        }\n    });\n}\n```",
    "summary": "Reads a JSON file from a given path and passes the parsed data or an error to a callback function."
  },
  {
    "id": 498,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the given path and returns its content as an array of lines."
  },
  {
    "id": 499,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToArray(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error(`Error reading file from disk: ${error}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines."
  },
  {
    "id": 500,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file synchronously from the given path and returns the parsed object, or null if an error occurs."
  },
  {
    "id": 501,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n  try {\n    const data = fs.readFileSync(filePath, 'utf8');\n    return JSON.parse(data);\n  } catch (err) {\n    console.error('Error reading or parsing the file:', err);\n    return null;\n  }\n}\n```",
    "summary": "Reads and parses a JSON file from the specified path, returning the parsed object or null if an error occurs."
  },
  {
    "id": 502,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function synchronously reads a file and parses its content as JSON, returning the parsed object or null if an error occurs."
  },
  {
    "id": 503,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFirstLine(filePath, callback) {\n    const stream = fs.createReadStream(filePath, { encoding: 'utf8' });\n    let data = '';\n    stream.on('data', chunk => {\n        data += chunk;\n        const lines = data.split('\\n');\n        if (lines.length > 1) {\n            stream.destroy();\n            callback(null, lines[0]);\n        }\n    });\n    stream.on('error', err => {\n        callback(err, null);\n    });\n}\n```",
    "summary": "Reads the first line of a file asynchronously and returns it via a callback function."
  },
  {
    "id": 504,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file, returning its contents as a JavaScript object, or null if an error occurs."
  },
  {
    "id": 505,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously from a given path and returns its content as an array of lines."
  },
  {
    "id": 506,
    "code": "```javascript\nconst fs = require('fs');\nconst path = require('path');\n\nfunction readTextFile(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(path.resolve(filePath), 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a text file asynchronously and returns its content as a Promise."
  },
  {
    "id": 507,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the specified path, returning its content as a JavaScript object."
  },
  {
    "id": 508,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            callback(null, data);\n        }\n    });\n}\n```",
    "summary": "Reads the content of a file asynchronously and returns it through a callback function."
  },
  {
    "id": 509,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data;\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as a string, logging an error if reading fails."
  },
  {
    "id": 510,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines."
  },
  {
    "id": 511,
    "code": "async function readJSONFile(filePath) {\n    const fs = require('fs').promises;\n    try {\n        const data = await fs.readFile(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        throw error;\n    }\n}",
    "summary": "This function asynchronously reads and parses a JSON file from the specified file path."
  },
  {
    "id": 512,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its contents as an object, logging errors if reading or parsing fails."
  },
  {
    "id": 513,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filepath) {\n    try {\n        const data = fs.readFileSync(filepath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing the file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from a given path and parses its contents as JSON, returning the parsed object or null on error."
  },
  {
    "id": 514,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a text file and returns its contents as an array of lines, handling any read errors."
  },
  {
    "id": 515,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            callback(null, data);\n        }\n    });\n}\n```",
    "summary": "Reads the contents of a text file and passes the data or error to a callback function."
  },
  {
    "id": 516,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing JSON file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file, returning its contents as an object, or null if an error occurs."
  },
  {
    "id": 517,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUppercase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}\n```",
    "summary": "Reads a file asynchronously and returns its content in uppercase via a callback function."
  },
  {
    "id": 518,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and parses its content to JSON, handling any errors that occur."
  },
  {
    "id": 519,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines via a callback function."
  },
  {
    "id": 520,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns the parsed object, handling errors gracefully."
  },
  {
    "id": 521,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data;\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads the contents of a file synchronously and returns it as a string, logging an error if the file cannot be read."
  },
  {
    "id": 522,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                return reject(err);\n            }\n            try {\n                const jsonData = JSON.parse(data);\n                resolve(jsonData);\n            } catch (parseError) {\n                reject(parseError);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads and parses a JSON file, returning the data as a JavaScript object."
  },
  {
    "id": 523,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFileSync(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file synchronously, returning its contents as an object or null if an error occurs."
  },
  {
    "id": 524,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction appendToFile(filePath, data, callback) {\n    fs.appendFile(filePath, data, 'utf8', (err) => {\n        if (err) {\n            callback(err);\n        } else {\n            callback(null, 'Data was appended successfully.');\n        }\n    });\n}\n```",
    "summary": "Appends data to a file and executes a callback with an error or success message."
  },
  {
    "id": 525,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (error) {\n        console.error(`Error reading file: ${error.message}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns an array of non-empty lines, logging an error if the file cannot be read."
  },
  {
    "id": 526,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            callback(null, data);\n        }\n    });\n}\n```",
    "summary": "This function asynchronously reads the contents of a file specified by `filePath` and passes the result to a callback function."
  },
  {
    "id": 527,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines, handling errors if the file cannot be read."
  },
  {
    "id": 528,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAndCountLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        const lineCount = data.split('\\n').length;\n        callback(null, lineCount);\n    });\n}\n```",
    "summary": "Reads a file asynchronously and counts the number of lines, returning the count via a callback function."
  },
  {
    "id": 529,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAndCountWords(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        const words = data.split(/\\s+/).filter(word => word.length > 0);\n        return words.length;\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns the count of words contained in it."
  },
  {
    "id": 530,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        callback(null, data.toUpperCase());\n    });\n}\n```",
    "summary": "This function reads a file and transforms its content to uppercase, returning the result via a callback."
  },
  {
    "id": 531,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "Reads the contents of a file given its path and passes the data or an error to a callback function."
  },
  {
    "id": 532,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}\n```",
    "summary": "Reads a file and converts its content to uppercase, then passes it to the callback function."
  },
  {
    "id": 533,
    "code": "```javascript\nconst fs = require('fs');\nconst path = require('path');\n\nfunction readJsonFile(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(path.resolve(filePath), 'utf8', (err, data) => {\n            if (err) {\n                return reject(err);\n            }\n            try {\n                const jsonData = JSON.parse(data);\n                resolve(jsonData);\n            } catch (parseError) {\n                reject(parseError);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a JSON file and returns its contents as a JavaScript object using a Promise."
  },
  {
    "id": 534,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a file from the given path and returns its content as a JSON object, handling errors during file reading and parsing."
  },
  {
    "id": 535,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns an array of non-empty lines, handling any errors that occur during the process."
  },
  {
    "id": 536,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}\n```",
    "summary": "This function reads a file and converts its contents to uppercase, then passes the result to a callback function."
  },
  {
    "id": 537,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file's content from the specified path and returns an array of its lines, handling errors gracefully."
  },
  {
    "id": 538,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file's contents, splitting it into an array of lines, and returns the array."
  },
  {
    "id": 539,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lines = data.split(/\\r?\\n/);\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file at the given path and returns its content as an array of lines via a callback."
  },
  {
    "id": 540,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a JSON file from a specified path and returns its contents as a JavaScript object."
  },
  {
    "id": 541,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file, returning its content as a JavaScript object or null if an error occurs."
  },
  {
    "id": 542,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                const lines = data.split('\\n');\n                resolve(lines);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file asynchronously and returns its contents as an array of lines."
  },
  {
    "id": 543,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from a given path and parses its contents as JSON, returning the parsed object or null if an error occurs."
  },
  {
    "id": 544,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFileSync(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(`Error reading or parsing file: ${error.message}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file synchronously, returning the parsed object or null if an error occurs."
  },
  {
    "id": 545,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n  fs.readFile(filePath, 'utf8', (err, data) => {\n    if (err) {\n      return callback(err);\n    }\n    callback(null, data);\n  });\n}\n```",
    "summary": "Reads the content of a file at the specified path and returns it via a callback function."
  },
  {
    "id": 546,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    if (!fs.existsSync(filePath)) {\n        throw new Error('File does not exist');\n    }\n    return fs.readFileSync(filePath, 'utf-8').split('\\n');\n}\n```",
    "summary": "Reads a file from the specified path and returns its contents as an array of lines."
  },
  {
    "id": 547,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data;\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads and returns the content of a file at the given path, handling errors if they occur."
  },
  {
    "id": 548,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readTextFile(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            callback(null, data);\n        }\n    });\n}\n```",
    "summary": "Reads a text file asynchronously and passes its content to a callback function."
  },
  {
    "id": 549,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and parses its content into a JSON object, returning null if an error occurs."
  },
  {
    "id": 550,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines."
  },
  {
    "id": 551,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n                return;\n            }\n            try {\n                const jsonData = JSON.parse(data);\n                resolve(jsonData);\n            } catch (parseErr) {\n                reject(parseErr);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file from the specified path and returns its contents as a JSON object, handling errors appropriately."
  },
  {
    "id": 552,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data.split('\\n'));\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file from the given path and returns its content as an array of lines."
  },
  {
    "id": 553,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}\n```",
    "summary": "Reads a file's contents and converts it to uppercase, then passes it to a callback function."
  },
  {
    "id": 554,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readTextFile(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "Reads a text file asynchronously and provides the content or error to a callback function."
  },
  {
    "id": 555,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseErr) {\n            callback(parseErr, null);\n        }\n    });\n}\n```",
    "summary": "Reads a JSON file asynchronously and parses its contents, invoking a callback with the result or an error."
  },
  {
    "id": 556,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines."
  },
  {
    "id": 557,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously, parses its content as JSON, and returns the parsed object or null on error."
  },
  {
    "id": 558,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n  try {\n    const data = fs.readFileSync(filePath, 'utf-8');\n    return JSON.parse(data);\n  } catch (error) {\n    console.error('Error reading or parsing file:', error);\n    return null;\n  }\n}\n```",
    "summary": "Reads a file from the given path and parses its content as JSON, returning the parsed object or null if an error occurs."
  },
  {
    "id": 559,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error(`Error reading or parsing file: ${err}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously, parses its content as JSON, and returns the parsed object or logs an error if any occurs."
  },
  {
    "id": 560,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(\"Error reading or parsing the file:\", error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its parsed contents, handling any errors that occur during the process."
  },
  {
    "id": 561,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperSync(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.toUpperCase();\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content transformed to uppercase, handling any read errors."
  },
  {
    "id": 562,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing the file:', err);\n        return null;\n    }\n}\n```",
    "summary": "This function reads and parses a JSON file from the given file path, returning its contents as a JavaScript object or null if an error occurs."
  },
  {
    "id": 563,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the given path and returns its content parsed as JSON, logging an error if reading or parsing fails."
  },
  {
    "id": 564,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFirstLine(filePath, callback) {\n    const stream = fs.createReadStream(filePath, { encoding: 'utf8' });\n    let data = '';\n    stream.on('data', chunk => {\n        data += chunk;\n        const newlineIndex = data.indexOf('\\n');\n        if (newlineIndex !== -1) {\n            stream.close();\n            callback(null, data.slice(0, newlineIndex));\n        }\n    });\n    stream.on('error', err => {\n        callback(err, null);\n    });\n    stream.on('close', () => {\n        if (!data.includes('\\n')) {\n            callback(null, data);\n        }\n    });\n}\n```",
    "summary": "Reads the first line of a file asynchronously and passes it to a callback function."
  },
  {
    "id": 565,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines through a callback function."
  },
  {
    "id": 566,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAndCountLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        const lines = data.split('\\n');\n        return lines.length;\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return -1;\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns the number of lines, or -1 if an error occurs."
  },
  {
    "id": 567,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing the file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file synchronously and parses its content into a JavaScript object, logging an error if reading or parsing fails."
  },
  {
    "id": 568,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFirstLine(filePath, callback) {\n    const readable = fs.createReadStream(filePath, { encoding: 'utf8', highWaterMark: 1024 });\n    let remaining = '';\n\n    readable.on('data', chunk => {\n        remaining += chunk;\n        let index = remaining.indexOf('\\n');\n        if (index !== -1) {\n            const firstLine = remaining.slice(0, index);\n            readable.close();\n            callback(null, firstLine);\n        }\n    });\n\n    readable.on('error', err => {\n        callback(err, null);\n    });\n\n    readable.on('close', () => {\n        if (remaining && !remaining.includes('\\n')) {\n            callback(null, remaining);\n        }\n    });\n}\n```",
    "summary": "Reads the first line from a file asynchronously using a stream and invokes a callback with the result."
  },
  {
    "id": 569,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction appendToFile(filePath, content) {\n    fs.appendFile(filePath, content + '\\n', (err) => {\n        if (err) {\n            console.error('Error appending to file:', err);\n        } else {\n            console.log('Content successfully appended to file.');\n        }\n    });\n}\n```",
    "summary": "This function appends a given string of content to a specified file and logs the result."
  },
  {
    "id": 570,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines, handling errors gracefully."
  },
  {
    "id": 571,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileSync(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data;\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads the contents of a file synchronously and returns it as a string, logging an error message if the file cannot be read."
  },
  {
    "id": 572,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines using a callback function."
  },
  {
    "id": 573,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the given path and returns its content as a JavaScript object, or logs an error if reading or parsing fails."
  },
  {
    "id": 574,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the specified path and parses its contents as JSON, returning the resulting object or null if an error occurs."
  },
  {
    "id": 575,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseErr) {\n            callback(parseErr, null);\n        }\n    });\n}\n```",
    "summary": "Reads a file at the specified path and parses its contents as JSON, returning the result via a callback function."
  },
  {
    "id": 576,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines, handling errors gracefully."
  },
  {
    "id": 577,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines, or logs an error if reading fails."
  },
  {
    "id": 578,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and parses its content as JSON, returning the parsed object or null if an error occurs."
  },
  {
    "id": 579,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseErr) {\n            callback(parseErr, null);\n        }\n    });\n}\n```",
    "summary": "Reads a file at the specified path and parses its contents as JSON, returning the result via a callback function."
  },
  {
    "id": 580,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a JSON file from the specified path and returns its contents as a JavaScript object, or logs an error if reading fails."
  },
  {
    "id": 581,
    "code": "```javascript\nconst fs = require('fs');\nconst path = require('path');\n\nfunction readJSONFile(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n                return;\n            }\n            try {\n                const jsonData = JSON.parse(data);\n                resolve(jsonData);\n            } catch (parseError) {\n                reject(parseError);\n            }\n        });\n    });\n}\n```",
    "summary": "This function reads a JSON file from a given path and returns its content as a JavaScript object using promises for asynchronous handling."
  },
  {
    "id": 582,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines, handling errors gracefully."
  },
  {
    "id": 583,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseError) {\n            callback(parseError, null);\n        }\n    });\n}\n```",
    "summary": "Reads a file at a given path and parses its content as JSON, invoking a callback with the result or an error."
  },
  {
    "id": 584,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously from the specified path and parses its contents into a JSON object, returning `null` if an error occurs."
  },
  {
    "id": 585,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file asynchronously and returns its content as an array of lines through a callback function."
  },
  {
    "id": 586,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpper(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        const upperData = data.toUpperCase();\n        callback(null, upperData);\n    });\n}\n```",
    "summary": "This function reads a file at a given path and returns its content in uppercase via a callback."
  },
  {
    "id": 587,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction appendToFile(filename, content, callback) {\n    fs.appendFile(filename, content, 'utf8', (err) => {\n        if (err) callback(err);\n        else callback(null, 'Content appended successfully');\n    });\n}\n```",
    "summary": "This function appends specified content to a file and executes a callback with an error or success message."
  },
  {
    "id": 588,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    if (!fs.existsSync(filePath)) {\n        throw new Error('File does not exist');\n    }\n\n    const data = fs.readFileSync(filePath, 'utf8');\n    return data.split(/\\r?\\n/);\n}\n```",
    "summary": "Reads a file from the specified path and returns its contents as an array of lines."
  },
  {
    "id": 589,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines."
  },
  {
    "id": 590,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines, logging an error if the file cannot be read."
  },
  {
    "id": 591,
    "code": "```javascript\nconst fs = require('fs');\nconst path = require('path');\n\nfunction readJsonFile(filePath) {\n    if (path.extname(filePath) !== '.json') {\n        throw new Error('File must have a .json extension');\n    }\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error.message);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a JSON file from a specified path and returns its contents as a JavaScript object, throwing an error if the file is not a JSON."
  },
  {
    "id": 592,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (error) {\n        console.error('Error reading the file:', error);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns an array of non-empty lines, handling any read errors gracefully."
  },
  {
    "id": 593,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction countLinesInFile(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lines = data.split('\\n').length;\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file and counts the number of lines, returning the result via a callback function."
  },
  {
    "id": 594,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing the JSON file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its parsed content, handling errors if the file cannot be read or parsed."
  },
  {
    "id": 595,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns an array of non-empty lines, handling any read errors."
  },
  {
    "id": 596,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data.split('\\n'));\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file asynchronously and returns its content as an array of lines."
  },
  {
    "id": 597,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines, handling errors gracefully."
  },
  {
    "id": 598,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            callback(null, data);\n        }\n    });\n}\n```",
    "summary": "Reads the contents of a file at the specified path and returns the data or an error via a callback function."
  },
  {
    "id": 599,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}\n```",
    "summary": "Reads a file and converts its contents to uppercase, then passes the result to a callback function."
  },
  {
    "id": 600,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n  fs.readFile(filePath, 'utf8', (err, data) => {\n    if (err) {\n      callback(err, null);\n      return;\n    }\n    const lines = data.split(/\\r?\\n/);\n    callback(null, lines);\n  });\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines using a callback function."
  },
  {
    "id": 601,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpper(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.toUpperCase();\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a file synchronously and returns the content converted to uppercase, logging errors if any occur."
  },
  {
    "id": 602,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file synchronously and returns its contents as an object, logging errors if encountered."
  },
  {
    "id": 603,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            callback(null, data);\n        }\n    });\n}\n```",
    "summary": "Reads the contents of a file asynchronously and passes the data or an error to a callback function."
  },
  {
    "id": 604,
    "code": "```javascript\nconst fs = require('fs');\nconst path = require('path');\n\nfunction listFilesInDirectory(dirPath) {\n    try {\n        const files = fs.readdirSync(dirPath);\n        return files.map(file => path.join(dirPath, file));\n    } catch (error) {\n        console.error('Error reading directory:', error);\n        return [];\n    }\n}\n```",
    "summary": "This function lists all files in a specified directory, returning their full paths."
  },
  {
    "id": 605,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file synchronously and returns the parsed object, or logs an error if reading or parsing fails."
  },
  {
    "id": 606,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the given path and returns its contents as a JavaScript object, handling any errors during the process."
  },
  {
    "id": 607,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "Reads the contents of a file specified by `filePath` and returns the data or an error via a callback function."
  },
  {
    "id": 608,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAndCountLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        const lineCount = data.split('\\n').length;\n        return lineCount;\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the given path and returns the number of lines in it."
  },
  {
    "id": 609,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseError) {\n            callback(parseError, null);\n        }\n    });\n}\n```",
    "summary": "This function reads a JSON file from the specified path and parses its content into a JavaScript object, invoking a callback with the result or any errors encountered."
  },
  {
    "id": 610,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data;\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads and returns the content of a file synchronously, handling errors if the file cannot be read."
  },
  {
    "id": 611,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToString(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data);\n            }\n        });\n    });\n}\n```",
    "summary": "This function reads a file from the specified path and returns its contents as a string using a Promise."
  },
  {
    "id": 612,
    "code": "```javascript\nconst fs = require('fs');\nconst path = require('path');\n\nfunction readJSONFile(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseErr) {\n            callback(parseErr, null);\n        }\n    });\n}\n```",
    "summary": "This function reads a JSON file asynchronously and parses its content, returning the result via a callback."
  },
  {
    "id": 613,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAndCountLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        const lineCount = data.split('\\n').length;\n        callback(null, lineCount);\n    });\n}\n```",
    "summary": "Reads a file asynchronously and returns the number of lines via a callback function."
  },
  {
    "id": 614,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error(`Error reading file from disk: ${error}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines."
  },
  {
    "id": 615,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error(`Error reading file: ${error.message}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines, handling errors gracefully."
  },
  {
    "id": 616,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                try {\n                    const jsonData = JSON.parse(data);\n                    resolve(jsonData);\n                } catch (parseErr) {\n                    reject(parseErr);\n                }\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file from the specified path and parses its content as JSON, returning a promise that resolves with the parsed data."
  },
  {
    "id": 617,
    "code": "function readJsonFile(filePath, callback) {\n    const fs = require('fs');\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseErr) {\n            callback(parseErr, null);\n        }\n    });\n}",
    "summary": "Reads a JSON file asynchronously and parses its content, passing the result or error to a callback function."
  },
  {
    "id": 618,
    "code": "async function readFileContent(filePath) {\n    const fs = require('fs').promises;\n    try {\n        const data = await fs.readFile(filePath, 'utf-8');\n        return data;\n    } catch (error) {\n        throw new Error(`Error reading file: ${error.message}`);\n    }\n}",
    "summary": "Reads and returns the content of a file asynchronously, throwing an error if reading fails."
  },
  {
    "id": 619,
    "code": "function readTextFile(filePath, callback) {\n    const fs = require('fs');\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}",
    "summary": "This function reads a text file asynchronously and returns its contents via a callback."
  },
  {
    "id": 620,
    "code": "const fs = require('fs');\n\nfunction readFileAndCountWords(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        const wordCount = data.split(/\\s+/).filter(word => word.length > 0).length;\n        return wordCount;\n    } catch (error) {\n        console.error('Error reading file:', error.message);\n        return null;\n    }\n}",
    "summary": "This function reads a file synchronously from a given path and returns the count of words in it."
  },
  {
    "id": 621,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                try {\n                    const jsonData = JSON.parse(data);\n                    resolve(jsonData);\n                } catch (parseError) {\n                    reject(parseError);\n                }\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a JSON file asynchronously and returns its contents as a JavaScript object."
  },
  {
    "id": 622,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines, handling errors gracefully."
  },
  {
    "id": 623,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n                return;\n            }\n            resolve(data.split('\\n'));\n        });\n    });\n}\n```",
    "summary": "Reads the contents of a file specified by `filePath` and returns a promise that resolves with an array of lines."
  },
  {
    "id": 624,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines, handling errors gracefully."
  },
  {
    "id": 625,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its contents as a JSON object, or null if an error occurs."
  },
  {
    "id": 626,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines."
  },
  {
    "id": 627,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "Reads a file's contents asynchronously and returns the data or an error via a callback."
  },
  {
    "id": 628,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}\n```",
    "summary": "This function reads a text file and returns its content converted to uppercase via a callback."
  },
  {
    "id": 629,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the given path and returns its content as a JSON object, handling any errors that occur during the process."
  },
  {
    "id": 630,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines, logging an error if the read fails."
  },
  {
    "id": 631,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "This function reads the content of a specified file and passes the data or error to a callback function."
  },
  {
    "id": 632,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction appendToFile(filePath, data) {\n    fs.appendFile(filePath, data, (err) => {\n        if (err) {\n            console.error('Error appending to file:', err);\n        } else {\n            console.log('Data successfully appended to file.');\n        }\n    });\n}\n```",
    "summary": "Appends data to a specified file, logging success or error messages."
  },
  {
    "id": 633,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data.split('\\n'));\n            }\n        });\n    });\n}\n```",
    "summary": "This function reads a file and returns its content as an array of lines using promises."
  },
  {
    "id": 634,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines, or logs an error and returns an empty array if reading fails."
  },
  {
    "id": 635,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its contents as a JavaScript object, handling errors gracefully."
  },
  {
    "id": 636,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAndCountWords(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        const wordCount = data.split(/\\s+/).filter(word => word.length > 0).length;\n        callback(null, wordCount);\n    });\n}\n```",
    "summary": "Reads a file and counts the number of words, returning the result via a callback function."
  },
  {
    "id": 637,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseErr) {\n            callback(parseErr, null);\n        }\n    });\n}\n```",
    "summary": "Reads a file from the given path and parses its contents as JSON, returning the result via a callback."
  },
  {
    "id": 638,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readTextFile(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            callback(null, data);\n        }\n    });\n}\n```",
    "summary": "Reads a text file asynchronously and invokes a callback with the file content or an error."
  },
  {
    "id": 639,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing the file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its contents as a JavaScript object, handling errors gracefully."
  },
  {
    "id": 640,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data;\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads the contents of a file synchronously and returns the data as a string, or logs an error if reading fails."
  },
  {
    "id": 641,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error.message);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file, returning its contents as a JavaScript object or null if an error occurs."
  },
  {
    "id": 642,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines."
  },
  {
    "id": 643,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a text file synchronously and returns its contents as an array of lines."
  },
  {
    "id": 644,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperSync(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.toUpperCase();\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "This function synchronously reads a file and returns its content in uppercase, handling errors if the file cannot be read."
  },
  {
    "id": 645,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its contents as a JSON object."
  },
  {
    "id": 646,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines, handling any read errors."
  },
  {
    "id": 647,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its contents as a JavaScript object."
  },
  {
    "id": 648,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file synchronously and returns its parsed content or logs an error if the file cannot be read or parsed."
  },
  {
    "id": 649,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').map(line => line.trim());\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its content as an array of trimmed lines, handling errors gracefully."
  },
  {
    "id": 650,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its parsed content or logs an error if reading or parsing fails."
  },
  {
    "id": 651,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines, handling any errors during the process."
  },
  {
    "id": 652,
    "code": "async function readFileContent(filePath) {\n    const fs = require('fs').promises;\n    try {\n        const data = await fs.readFile(filePath, 'utf8');\n        return data;\n    } catch (error) {\n        throw new Error(`Error reading file: ${error.message}`);\n    }\n}",
    "summary": "Reads and returns the content of a file at the given path asynchronously, throwing an error if reading fails."
  },
  {
    "id": 653,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpper(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}\n```",
    "summary": "Reads a file and converts its contents to uppercase, returning the result via a callback."
  },
  {
    "id": 654,
    "code": "async function readFileText(filePath) {\n    const fs = require('fs').promises;\n    try {\n        const data = await fs.readFile(filePath, 'utf8');\n        return data;\n    } catch (error) {\n        console.error(`Error reading file from disk: ${error}`);\n        throw error;\n    }\n}",
    "summary": "This function asynchronously reads and returns the contents of a text file given its file path."
  },
  {
    "id": 655,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        const jsonData = JSON.parse(data);\n        return jsonData;\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file, returning its contents as a JavaScript object or null if an error occurs."
  },
  {
    "id": 656,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the given path, returning the parsed object or null on failure."
  },
  {
    "id": 657,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads the contents of a file at the specified path asynchronously and returns a promise that resolves with the file data or rejects with an error."
  },
  {
    "id": 658,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            callback(null, data);\n        }\n    });\n}\n```",
    "summary": "This function reads the content of a file at a given path and returns the data through a callback function, handling any errors that may occur."
  },
  {
    "id": 659,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns an array of non-empty lines, handling errors if the file cannot be read."
  },
  {
    "id": 660,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseErr) {\n            callback(parseErr, null);\n        }\n    });\n}\n```",
    "summary": "Reads a JSON file asynchronously and returns its contents as a JavaScript object via a callback function."
  },
  {
    "id": 661,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n  return new Promise((resolve, reject) => {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n      if (err) {\n        reject(err);\n        return;\n      }\n      const lines = data.split('\\n');\n      resolve(lines);\n    });\n  });\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines using a Promise."
  },
  {
    "id": 662,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its content as an array of lines."
  },
  {
    "id": 663,
    "code": "```javascript\nconst fs = require('fs');\n\n/**\n * Reads a JSON file from the specified path and returns the parsed object.\n * @param {string} filePath - The path to the JSON file.\n * @returns {Object} The parsed JSON object.\n * @throws Will throw an error if the file reading or parsing fails.\n */\nfunction readJsonFile(filePath) {\n    try {\n        const fileContent = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(fileContent);\n    } catch (error) {\n        throw new Error('Failed to read or parse the JSON file: ' + error.message);\n    }\n}\n```",
    "summary": "Reads a JSON file from a given path and returns the parsed object, throwing an error if any operation fails."
  },
  {
    "id": 664,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "This function reads a file asynchronously and returns its contents as an array of lines through a callback."
  },
  {
    "id": 665,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its content as a JavaScript object, handling any errors that occur."
  },
  {
    "id": 666,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file synchronously from the given file path and returns the parsed object, logging errors if any occur."
  },
  {
    "id": 667,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data.split('\\n'));\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file asynchronously and returns its contents as an array of lines."
  },
  {
    "id": 668,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines."
  },
  {
    "id": 669,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines, handling errors if the file cannot be read."
  },
  {
    "id": 670,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileSync(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data;\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as a string, logging an error if reading fails."
  },
  {
    "id": 671,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its content as a JSON object, or logs an error if the file cannot be read or parsed."
  },
  {
    "id": 672,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const fileData = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(fileData);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the specified path, returning the parsed object or null on error."
  },
  {
    "id": 673,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines."
  },
  {
    "id": 674,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFileSync(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file synchronously, returning the parsed object or null if an error occurs."
  },
  {
    "id": 675,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing the file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the given file path and returns the parsed object, or logs an error if reading or parsing fails."
  },
  {
    "id": 676,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(`Error reading or parsing file: ${error.message}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the specified file path, handling any errors that occur."
  },
  {
    "id": 677,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            callback(null, data.toUpperCase());\n        }\n    });\n}\n```",
    "summary": "This function reads a file and returns its content in uppercase through a callback."
  },
  {
    "id": 678,
    "code": "```javascript\nconst fs = require('fs').promises;\n\nasync function readFileLines(filePath) {\n    try {\n        const data = await fs.readFile(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        throw error;\n    }\n}\n```",
    "summary": "Reads a file asynchronously and returns its content as an array of lines."
  },
  {
    "id": 679,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its contents as an array of lines."
  },
  {
    "id": 680,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(\"Error reading or parsing the file:\", error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from a given path and returns its content as a JavaScript object, handling errors gracefully."
  },
  {
    "id": 681,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the given path and returns its contents as an array of lines, handling any errors during reading."
  },
  {
    "id": 682,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error(`Error reading file from disk: ${error}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the given path and returns its contents as an array of lines."
  },
  {
    "id": 683,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error(`Error reading file from disk: ${error}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the given path and returns its content as an array of lines, logging an error if the file cannot be read."
  },
  {
    "id": 684,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file synchronously and returns its parsed content, logging an error if reading or parsing fails."
  },
  {
    "id": 685,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}\n```",
    "summary": "This function reads a file and returns its contents converted to uppercase via a callback."
  },
  {
    "id": 686,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data);\n            }\n        });\n    });\n}\n```",
    "summary": "This function reads the contents of a file at a given path and returns a promise that resolves with the file's data or rejects with an error."
  },
  {
    "id": 687,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}\n```",
    "summary": "Reads a file's content and converts it to uppercase, returning the result through a callback function."
  },
  {
    "id": 688,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAndCountWords(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        const words = data.match(/\\b\\w+\\b/g);\n        return words ? words.length : 0;\n    } catch (err) {\n        console.error(`Error reading file: ${err.message}`);\n        return -1;\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns the count of words in the file, or -1 if an error occurs."
  },
  {
    "id": 689,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').map(line => line.trim());\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of trimmed lines."
  },
  {
    "id": 690,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file as JSON and returns the parsed object, logging an error if the operation fails."
  },
  {
    "id": 691,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error(`Error reading or parsing file: ${err.message}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file, returning its content as an object or null if an error occurs."
  },
  {
    "id": 692,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readTextFile(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "Reads a text file asynchronously and returns its content via a callback function."
  },
  {
    "id": 693,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                const lines = data.split('\\n');\n                resolve(lines);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file asynchronously and returns its content as an array of lines."
  },
  {
    "id": 694,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines, handling errors gracefully."
  },
  {
    "id": 695,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n  try {\n    const data = fs.readFileSync(filePath, 'utf8');\n    return data.split('\\n');\n  } catch (err) {\n    console.error(`Error reading file from disk: ${err}`);\n    return [];\n  }\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines, handling errors if the file cannot be read."
  },
  {
    "id": 696,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n  fs.readFile(filePath, 'utf8', (err, data) => {\n    if (err) {\n      callback(err, null);\n      return;\n    }\n    const lines = data.split('\\n');\n    callback(null, lines);\n  });\n}\n```",
    "summary": "This function reads a file and returns its content as an array of lines through a callback."
  },
  {
    "id": 697,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error.message);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a JSON file from the specified path and returns its parsed content, logging an error if reading or parsing fails."
  },
  {
    "id": 698,
    "code": "async function readFileContent(filePath) {\n    const fs = require('fs').promises;\n    try {\n        const data = await fs.readFile(filePath, 'utf8');\n        return data;\n    } catch (error) {\n        console.error(`Error reading file from disk: ${error}`);\n        throw error;\n    }\n}",
    "summary": "Reads and returns the content of a file at a given path asynchronously, logging any errors encountered."
  },
  {
    "id": 699,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the given path and returns its contents as a JavaScript object, handling errors gracefully."
  },
  {
    "id": 700,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its content as an array of lines."
  },
  {
    "id": 701,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (error, data) => {\n        if (error) {\n            callback(error, null);\n        } else {\n            callback(null, data);\n        }\n    });\n}\n```",
    "summary": "Reads the content of a file at a given path and executes a callback with the file data or an error."
  },
  {
    "id": 702,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns an array of non-empty lines, handling any read errors gracefully."
  },
  {
    "id": 703,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file line by line and returns an array of lines, logging errors if the file cannot be accessed."
  },
  {
    "id": 704,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "This function reads the content of a file asynchronously and passes the data or error to a callback function."
  },
  {
    "id": 705,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines via a callback function."
  },
  {
    "id": 706,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            const lines = data.split('\\n');\n            callback(null, lines);\n        }\n    });\n}\n```",
    "summary": "Reads a file and returns its content split into lines via a callback function."
  },
  {
    "id": 707,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads and parses a JSON file from the given file path, returning its contents as a JavaScript object or null if an error occurs."
  },
  {
    "id": 708,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the given path and returns its content as an array of lines."
  },
  {
    "id": 709,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    if (!fs.existsSync(filePath)) {\n        throw new Error('File does not exist');\n    }\n    const fileContent = fs.readFileSync(filePath, 'utf8');\n    try {\n        return JSON.parse(fileContent);\n    } catch (e) {\n        throw new Error('Invalid JSON format');\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its parsed content, throwing errors for missing files or invalid JSON."
  },
  {
    "id": 710,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines."
  },
  {
    "id": 711,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpper(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            const upperCaseData = data.toUpperCase();\n            callback(null, upperCaseData);\n        }\n    });\n}\n```",
    "summary": "Reads a file and passes its content in uppercase to a callback function."
  },
  {
    "id": 712,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing JSON file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the given file path, returning the parsed object or null in case of an error."
  },
  {
    "id": 713,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error(`Error reading file from disk: ${error}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines, handling any read errors gracefully."
  },
  {
    "id": 714,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file synchronously and returns its contents as an object, logging an error if reading or parsing fails."
  },
  {
    "id": 715,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.toUpperCase();\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content converted to uppercase, logging any errors encountered."
  },
  {
    "id": 716,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing the file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its content as a JavaScript object, handling errors if the file is not readable or parsable."
  },
  {
    "id": 717,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                const lines = data.split('\\n');\n                resolve(lines);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines using a promise-based approach."
  },
  {
    "id": 718,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error(`Error reading file from disk: ${error}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously from the given path and returns its content as an array of lines, handling errors gracefully."
  },
  {
    "id": 719,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                const lines = data.split('\\n');\n                resolve(lines);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines using Promises."
  },
  {
    "id": 720,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the specified path, returning the parsed object or null if an error occurs."
  },
  {
    "id": 721,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction appendTextToFile(filePath, text) {\n    fs.appendFile(filePath, text, 'utf8', (err) => {\n        if (err) throw err;\n        console.log('The text was appended to file!');\n    });\n}\n```",
    "summary": "Appends the specified text to a file at the given path, creating the file if it does not exist."
  },
  {
    "id": 722,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAndConvertToUpperCase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}\n```",
    "summary": "Reads a file and converts its content to uppercase, then returns the result via a callback function."
  },
  {
    "id": 723,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "This function reads the contents of a file at the specified path and invokes a callback with the file data or an error if the read operation fails."
  },
  {
    "id": 724,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').map(line => line.trim()).filter(line => line.length > 0);\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file line-by-line, trims whitespace, filters out empty lines, and returns an array of non-empty lines."
  },
  {
    "id": 725,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "Reads the content of a file at the specified path and passes it to a callback function."
  },
  {
    "id": 726,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}\n```",
    "summary": "This function reads a file and converts its content to uppercase, then passes the result to a callback function."
  },
  {
    "id": 727,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from a given path and returns its content as an array of lines."
  },
  {
    "id": 728,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its parsed content or logs an error if reading or parsing fails."
  },
  {
    "id": 729,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction appendToFile(filePath, data) {\n    fs.appendFile(filePath, data, 'utf8', (err) => {\n        if (err) throw err;\n    });\n}\n```",
    "summary": "Appends the specified data to a file at the given file path using UTF-8 encoding."
  },
  {
    "id": 730,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            callback(null, data);\n        }\n    });\n}\n```",
    "summary": "Reads the content of a file at the given path and returns it through a callback function."
  },
  {
    "id": 731,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file line by line and returns the lines as an array via a callback function."
  },
  {
    "id": 732,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                return reject(err);\n            }\n            const lines = data.split('\\n');\n            resolve(lines);\n        });\n    });\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines using promises."
  },
  {
    "id": 733,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(\"Error reading or parsing file:\", error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously, parses its contents as JSON, and handles errors gracefully."
  },
  {
    "id": 734,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction countLinesInFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n').length;\n    } catch (err) {\n        console.error('Error reading the file:', err);\n        return -1;\n    }\n}\n```",
    "summary": "Counts and returns the number of lines in a specified file, handling errors if the file cannot be read."
  },
  {
    "id": 735,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readAndCountLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').length;\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return -1;\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns the number of lines it contains, or -1 if an error occurs."
  },
  {
    "id": 736,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error(`Error reading or parsing file: ${err}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its parsed content, handling errors gracefully."
  },
  {
    "id": 737,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file: ${err.message}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the given path and returns its content as an array of lines, handling errors if any occur."
  },
  {
    "id": 738,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the given file path, returning the parsed object or null if an error occurs."
  },
  {
    "id": 739,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its content as an array of lines, handling any read errors gracefully."
  },
  {
    "id": 740,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsArray(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) return callback(err);\n        const lines = data.trim().split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines via a callback."
  },
  {
    "id": 741,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a JSON file synchronously from a given file path and returns its parsed content or null if an error occurs."
  },
  {
    "id": 742,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n                return;\n            }\n            resolve(data.split('\\n'));\n        });\n    });\n}\n```",
    "summary": "This function reads a text file and returns its contents as an array of lines using a Promise."
  },
  {
    "id": 743,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a JSON file from the given file path and returns its contents as a JavaScript object, handling errors if they occur."
  },
  {
    "id": 744,
    "code": "const fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}",
    "summary": "Reads a JSON file from a given path and returns its contents as a JavaScript object, handling read and parse errors."
  },
  {
    "id": 745,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file: ${err}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines."
  },
  {
    "id": 746,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error(`Error reading or parsing file: ${err}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its contents as a JavaScript object."
  },
  {
    "id": 747,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            callback(null, data);\n        }\n    });\n}\n```",
    "summary": "This function reads the content of a file at a given path and returns the result via a callback function."
  },
  {
    "id": 748,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                try {\n                    const jsonData = JSON.parse(data);\n                    resolve(jsonData);\n                } catch (parseErr) {\n                    reject(parseErr);\n                }\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file at the given path and parses its contents into a JSON object, returning a promise."
  },
  {
    "id": 749,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n  fs.readFile(filePath, 'utf8', (err, data) => {\n    if (err) {\n      callback(err, null);\n      return;\n    }\n    const lines = data.split('\\n');\n    callback(null, lines);\n  });\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines through a callback function."
  },
  {
    "id": 750,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const fileContent = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(fileContent);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the given path and returns its content as a JSON object, or logs an error if the process fails."
  },
  {
    "id": 751,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns the parsed object, logging an error if reading or parsing fails."
  },
  {
    "id": 752,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseErr) {\n            callback(parseErr, null);\n        }\n    });\n}\n```",
    "summary": "This function reads a file at a given path and parses its contents as JSON, returning the result via a callback."
  },
  {
    "id": 753,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from a specified path, returning the parsed object or null if an error occurs."
  },
  {
    "id": 754,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its contents as an object, or null if an error occurs."
  },
  {
    "id": 755,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n  try {\n    const data = fs.readFileSync(filePath, 'utf8');\n    return JSON.parse(data);\n  } catch (error) {\n    console.error('Error reading or parsing file:', error);\n    return null;\n  }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns the parsed object, or logs an error if reading or parsing fails."
  },
  {
    "id": 756,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines, handling errors gracefully."
  },
  {
    "id": 757,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error(`Error reading file from disk: ${error}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines, handling errors if the file cannot be read."
  },
  {
    "id": 758,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error('Error reading file:', error.message);\n        return [];\n    }\n}\n```",
    "summary": "This function reads a file and returns its contents as an array of lines, logging an error message if the file cannot be read."
  },
  {
    "id": 759,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJSON(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and parses its contents as JSON, returning the parsed object or null if an error occurs."
  },
  {
    "id": 760,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file synchronously and returns its parsed content, logging an error if reading or parsing fails."
  },
  {
    "id": 761,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error(`Error reading or parsing file: ${err.message}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file synchronously, returning the parsed object or logging an error if reading or parsing fails."
  },
  {
    "id": 762,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) return callback(err, null);\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file and splits its content into an array of lines, returning the result via a callback function."
  },
  {
    "id": 763,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFileSync(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file synchronously, returning the parsed object or null if an error occurs."
  },
  {
    "id": 764,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its content as an array of lines."
  },
  {
    "id": 765,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split(/\\r?\\n/);\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its contents as an array of lines, handling any errors that occur."
  },
  {
    "id": 766,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath) {\n  try {\n    const data = fs.readFileSync(filePath, 'utf8');\n    return JSON.parse(data);\n  } catch (err) {\n    console.error('Error reading or parsing file:', err);\n    return null;\n  }\n}\n```",
    "summary": "Reads a file synchronously and parses its contents as JSON, returning the resulting object or null on error."
  },
  {
    "id": 767,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, callback) {\n  fs.readFile(filePath, 'utf8', (err, data) => {\n    if (err) {\n      callback(err, null);\n      return;\n    }\n    callback(null, data);\n  });\n}\n```",
    "summary": "This function reads the contents of a file at a given path and returns the data through a callback, handling errors if they occur."
  },
  {
    "id": 768,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data.split('\\n').filter(line => line.trim() !== ''));\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file's content from a specified path and returns a promise resolving to an array of non-empty lines."
  },
  {
    "id": 769,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its contents as an array of lines."
  },
  {
    "id": 770,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns an array of non-empty lines."
  },
  {
    "id": 771,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFileSync(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error(`Error reading or parsing the file: ${err}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file synchronously, returning the parsed object or null if an error occurs."
  },
  {
    "id": 772,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines."
  },
  {
    "id": 773,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data;\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads and returns the content of a file given its file path, or logs an error if reading fails."
  },
  {
    "id": 774,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines, logging an error if the file cannot be read."
  },
  {
    "id": 775,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFileSync(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file synchronously, returning its content as an object or null if an error occurs."
  },
  {
    "id": 776,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the given path and returns its contents as an array of lines."
  },
  {
    "id": 777,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) return callback(err, null);\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "This function reads a file and returns its content as an array of lines via a callback function."
  },
  {
    "id": 778,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the given path and returns its content as an array of lines, handling any errors that occur."
  },
  {
    "id": 779,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads and parses a JSON file from a specified file path, returning the parsed object or null if an error occurs."
  },
  {
    "id": 780,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAndConvertToUpperCase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}\n```",
    "summary": "Reads a file asynchronously and converts its content to uppercase, then returns it via a callback function."
  },
  {
    "id": 781,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseErr) {\n            callback(parseErr, null);\n        }\n    });\n}\n```",
    "summary": "Reads a file and parses its content as JSON, providing the result or error to a callback function."
  },
  {
    "id": 782,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                const lines = data.split('\\n');\n                resolve(lines);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file asynchronously and returns its contents as an array of lines."
  },
  {
    "id": 783,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the specified path and parses its content as JSON, returning the object or null on error."
  },
  {
    "id": 784,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns an array of non-empty lines, logging an error if reading fails."
  },
  {
    "id": 785,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading the JSON file:', error.message);\n        return null;\n    }\n}\n```",
    "summary": "This function reads and parses a JSON file from the specified file path, returning its content as a JavaScript object."
  },
  {
    "id": 786,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its contents as an array of lines."
  },
  {
    "id": 787,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file synchronously and returns its contents as a JavaScript object, or null if an error occurs."
  },
  {
    "id": 788,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a text file from the given path and returns its contents as an array of lines."
  },
  {
    "id": 789,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing the file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file synchronously, returning its contents as an object or null if an error occurs."
  },
  {
    "id": 790,
    "code": "```javascript\nconst fs = require('fs');\nconst path = require('path');\n\nfunction readLinesFromFile(filePath, callback) {\n  const fullPath = path.resolve(filePath);\n  fs.readFile(fullPath, 'utf8', (err, data) => {\n    if (err) {\n      callback(err, null);\n      return;\n    }\n    const lines = data.split('\\n').filter(line => line.trim() !== '');\n    callback(null, lines);\n  });\n}\n```",
    "summary": "Reads a file from a given path and returns its non-empty lines through a callback function."
  },
  {
    "id": 791,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its contents as an array of lines."
  },
  {
    "id": 792,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data.split('\\n'));\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines asynchronously."
  },
  {
    "id": 793,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a JSON file from a specified path and returns the parsed object, handling errors if the file cannot be read or parsed."
  },
  {
    "id": 794,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file at the specified path and returns its content as an array of lines."
  },
  {
    "id": 795,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading the file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines."
  },
  {
    "id": 796,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns the parsed object, logging an error if reading or parsing fails."
  },
  {
    "id": 797,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified file path and returns its content as an object, logging an error if the file cannot be read or parsed."
  },
  {
    "id": 798,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its non-empty lines as an array, handling any read errors."
  },
  {
    "id": 799,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines, handling any errors that occur during the process."
  },
  {
    "id": 800,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAndPrintLines(filePath) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            console.error('Error reading file:', err);\n            return;\n        }\n        const lines = data.split('\\n');\n        lines.forEach((line, index) => {\n            console.log(`Line ${index + 1}: ${line}`);\n        });\n    });\n}\n```",
    "summary": "This function reads a file asynchronously and prints each line with its line number to the console."
  },
  {
    "id": 801,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            callback(null, data);\n        }\n    });\n}\n```",
    "summary": "Reads the contents of a file asynchronously and passes the data or error to a callback function."
  },
  {
    "id": 802,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "This function reads a file asynchronously and returns its content as an array of lines via a callback."
  },
  {
    "id": 803,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified file path and returns its contents as an object, handling any errors that occur during reading or parsing."
  },
  {
    "id": 804,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n  try {\n    const data = fs.readFileSync(filePath, 'utf-8');\n    return JSON.parse(data);\n  } catch (error) {\n    console.error('Error reading or parsing the file:', error);\n    return null;\n  }\n}\n```",
    "summary": "Reads a JSON file synchronously from the specified path and parses its content into a JavaScript object."
  },
  {
    "id": 805,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file, returning the parsed object or null if an error occurs."
  },
  {
    "id": 806,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from a given file path, returning the parsed object or null if an error occurs."
  },
  {
    "id": 807,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing the file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the given path and returns its contents as a JavaScript object, logging an error if reading or parsing fails."
  },
  {
    "id": 808,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file, returning its contents as a JavaScript object."
  },
  {
    "id": 809,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its parsed content as a JavaScript object, with error handling."
  },
  {
    "id": 810,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the specified file path, returning the parsed data or logging an error if unsuccessful."
  },
  {
    "id": 811,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n  try {\n    const data = fs.readFileSync(filePath, 'utf8');\n    return JSON.parse(data);\n  } catch (err) {\n    console.error('Error reading or parsing file:', err);\n    return null;\n  }\n}\n```",
    "summary": "Reads a file from the given path and parses its contents as JSON, returning the parsed object or null if an error occurs."
  },
  {
    "id": 812,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            const lines = data.split('\\n');\n            callback(null, lines);\n        }\n    });\n}\n```",
    "summary": "Reads a file at the specified path and returns its content as an array of lines via a callback function."
  },
  {
    "id": 813,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from a specified path and returns its contents as a JavaScript object, handling errors gracefully."
  },
  {
    "id": 814,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFileSync(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a JSON file synchronously from a specified path and returns its parsed content, logging errors if reading or parsing fails."
  },
  {
    "id": 815,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split(/\\r?\\n/);\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file's contents and returns an array of its lines, handling errors if the file can't be read."
  },
  {
    "id": 816,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}\n```",
    "summary": "Reads a file's content and converts it to uppercase, then passes the result to a callback function."
  },
  {
    "id": 817,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        callback(null, data.toUpperCase());\n    });\n}\n```",
    "summary": "Reads a file and converts its contents to uppercase, then passes the result to a callback function."
  },
  {
    "id": 818,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from a specified path and returns its content as a JavaScript object."
  },
  {
    "id": 819,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAndCountLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        const lineCount = data.split('\\n').length;\n        return lineCount;\n    } catch (error) {\n        console.error(`Error reading file: ${error.message}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns the number of lines, logging an error if reading fails."
  },
  {
    "id": 820,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading the file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the given path and returns its content as an array of lines, or logs an error if reading fails."
  },
  {
    "id": 821,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "Reads the content of a file at the specified path and passes it to a callback function."
  },
  {
    "id": 822,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the given path and parses its content into a JSON object, returning null if an error occurs."
  },
  {
    "id": 823,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "This function reads the contents of a file at a given path and returns it via a callback function."
  },
  {
    "id": 824,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAndCapitalize(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        const capitalizedData = data.toUpperCase();\n        return capitalizedData;\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its content in uppercase, or logs an error if reading fails."
  },
  {
    "id": 825,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        console.log(data);\n    } catch (err) {\n        console.error('Error reading file:', err);\n    }\n}\n```",
    "summary": "This function synchronously reads and logs the contents of a file given its file path."
  },
  {
    "id": 826,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its parsed content or null if an error occurs."
  },
  {
    "id": 827,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file's content and returns its lines as an array via a callback function."
  },
  {
    "id": 828,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                try {\n                    const jsonData = JSON.parse(data);\n                    resolve(jsonData);\n                } catch (parseErr) {\n                    reject(parseErr);\n                }\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a JSON file asynchronously and returns its content as a JavaScript object."
  },
  {
    "id": 829,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file synchronously and returns the parsed object, logging errors if reading or parsing fails."
  },
  {
    "id": 830,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    if (!fs.existsSync(filePath)) {\n        throw new Error('File does not exist.');\n    }\n\n    const fileContent = fs.readFileSync(filePath, 'utf8');\n    return fileContent.split(/\\r?\\n/);\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines."
  },
  {
    "id": 831,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines."
  },
  {
    "id": 832,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines, logging an error if the operation fails."
  },
  {
    "id": 833,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n                return;\n            }\n            try {\n                const jsonData = JSON.parse(data);\n                resolve(jsonData);\n            } catch (parseError) {\n                reject(parseError);\n            }\n        });\n    });\n}\n```",
    "summary": "This function reads a file at the given path and parses its contents as JSON, returning a promise that resolves with the parsed data or rejects with an error."
  },
  {
    "id": 834,
    "code": "const fs = require('fs');\n\nfunction readFileAndCountWords(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        const words = data.split(/\\s+/).filter(Boolean);\n        return words.length;\n    } catch (error) {\n        console.error('Error reading the file:', error);\n        return null;\n    }\n}",
    "summary": "Reads a file synchronously and returns the word count, logging any errors encountered."
  },
  {
    "id": 835,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and parses its content as JSON, returning the resulting object or null on error."
  },
  {
    "id": 836,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data.split('\\n'));\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines using a promise."
  },
  {
    "id": 837,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines, logging an error if reading fails."
  },
  {
    "id": 838,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data.split('\\n'));\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines using a Promise."
  },
  {
    "id": 839,
    "code": "```javascript\nconst fs = require('fs');\nconst path = require('path');\n\nfunction listFilesInDirectory(dirPath) {\n    try {\n        const files = fs.readdirSync(dirPath);\n        return files.map(file => path.join(dirPath, file));\n    } catch (err) {\n        console.error('Error reading directory:', err);\n        return [];\n    }\n}\n```",
    "summary": "This function synchronously lists all files in a given directory, returning an array of their full paths."
  },
  {
    "id": 840,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAndCountLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        const lineCount = data.split('\\n').length;\n        callback(null, lineCount);\n    });\n}\n```",
    "summary": "Reads a file and counts the number of lines, returning the result via a callback function."
  },
  {
    "id": 841,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (error) {\n        console.error(`Error reading file from disk: ${error.message}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns an array of non-empty lines, logging an error if the file cannot be read."
  },
  {
    "id": 842,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file synchronously from the specified path and returns its contents as a JavaScript object, or logs an error if reading or parsing fails."
  },
  {
    "id": 843,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file synchronously and returns its parsed content, or logs an error if reading or parsing fails."
  },
  {
    "id": 844,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction writeJsonToFile(filePath, data) {\n    const jsonData = JSON.stringify(data, null, 2);\n    fs.writeFileSync(filePath, jsonData, 'utf8');\n}\n```",
    "summary": "Writes a JavaScript object as formatted JSON to a specified file using synchronous file operations."
  },
  {
    "id": 845,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction appendToFile(filePath, content, callback) {\n    fs.appendFile(filePath, content, 'utf8', (err) => {\n        if (err) {\n            return callback(`Error appending to file: ${err.message}`);\n        }\n        callback(null, 'Content appended successfully');\n    });\n}\n```",
    "summary": "Appends specified content to a file and executes a callback with the result or error message."
  },
  {
    "id": 846,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n  try {\n    const data = fs.readFileSync(filePath, 'utf8');\n    return data.split('\\n');\n  } catch (err) {\n    console.error('Error reading file:', err);\n    return [];\n  }\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines, handling errors gracefully."
  },
  {
    "id": 847,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the specified path and parses its contents as JSON, returning the JSON object or null if an error occurs."
  },
  {
    "id": 848,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines through a callback function."
  },
  {
    "id": 849,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperSync(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.toUpperCase();\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return null;\n    }\n}\n```",
    "summary": "This function synchronously reads a file and returns its content in uppercase, logging an error if reading fails."
  },
  {
    "id": 850,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split(/\\r?\\n/);\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines, handling any read errors."
  },
  {
    "id": 851,
    "code": "const fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}",
    "summary": "This function reads and parses a JSON file from the given file path, returning its content or null if an error occurs."
  },
  {
    "id": 852,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}\n```",
    "summary": "Reads a file and converts its contents to uppercase, then returns the result via a callback function."
  },
  {
    "id": 853,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns an array of non-empty lines, logging an error if the file cannot be read."
  },
  {
    "id": 854,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its content as an object, handling errors gracefully."
  },
  {
    "id": 855,
    "code": "async function readFileContent(filePath) {\n  const fs = require('fs').promises;\n  try {\n    const data = await fs.readFile(filePath, 'utf8');\n    return data;\n  } catch (error) {\n    console.error(`Error reading file from disk: ${error}`);\n    throw error;\n  }\n}",
    "summary": "This function asynchronously reads the content of a file specified by the file path and returns it as a string."
  },
  {
    "id": 856,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously from the given path and returns its contents as an array of lines."
  },
  {
    "id": 857,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns an array of non-empty trimmed lines."
  },
  {
    "id": 858,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading the file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines, handling any read errors."
  },
  {
    "id": 859,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines, handling errors by logging them."
  },
  {
    "id": 860,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its contents as an array of lines, or logs an error if reading fails."
  },
  {
    "id": 861,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(`Error reading or parsing file: ${error.message}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously from the given path and parses its contents as JSON, handling errors if they occur."
  },
  {
    "id": 862,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data.split('\\n'));\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines using promises."
  },
  {
    "id": 863,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file, returning the parsed object or null if an error occurs."
  },
  {
    "id": 864,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFileSync(filePath) {\n    if (!fs.existsSync(filePath)) {\n        throw new Error('File does not exist');\n    }\n    const fileContent = fs.readFileSync(filePath, 'utf8');\n    try {\n        return JSON.parse(fileContent);\n    } catch (error) {\n        throw new Error('Invalid JSON format');\n    }\n}\n```",
    "summary": "Reads a JSON file synchronously and returns its contents as a JavaScript object, throwing errors if the file is missing or contains invalid JSON."
  },
  {
    "id": 865,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(`Error reading or parsing file: ${error.message}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file synchronously and parses its content, returning the resulting object or null if an error occurs."
  },
  {
    "id": 866,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns an array of non-empty lines, logging an error if the file cannot be read."
  },
  {
    "id": 867,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseError) {\n            callback(parseError, null);\n        }\n    });\n}\n```",
    "summary": "Reads a file from the specified path and parses its content as JSON, returning the result via a callback."
  },
  {
    "id": 868,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFileSync(filePath) {\n    if (!fs.existsSync(filePath)) {\n        throw new Error('File does not exist');\n    }\n\n    const fileContent = fs.readFileSync(filePath, 'utf8');\n    try {\n        return JSON.parse(fileContent);\n    } catch (error) {\n        throw new Error('Invalid JSON format');\n    }\n}\n```",
    "summary": "Reads a JSON file synchronously and returns its parsed content, throwing errors if the file does not exist or contains invalid JSON."
  },
  {
    "id": 869,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines, handling errors gracefully."
  },
  {
    "id": 870,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                const lines = data.split('\\n');\n                resolve(lines);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file asynchronously and returns its contents as an array of lines."
  },
  {
    "id": 871,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        const lines = data.split(/\\r?\\n/);\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file and returns its contents split into lines via a callback function."
  },
  {
    "id": 872,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the given path and returns its contents as a JSON object."
  },
  {
    "id": 873,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFirstLine(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        const lines = data.split('\\n');\n        return lines[0];\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads the first line of a file synchronously and returns it, logging an error if the operation fails."
  },
  {
    "id": 874,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the given path and returns an array of non-empty lines."
  },
  {
    "id": 875,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data.split(/\\r?\\n/));\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a text file and returns its content as an array of lines using promises."
  },
  {
    "id": 876,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified file path and returns the parsed object, or logs an error if reading or parsing fails."
  },
  {
    "id": 877,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns an array of non-empty lines."
  },
  {
    "id": 878,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperSync(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.toUpperCase();\n    } catch (error) {\n        console.error('Error reading file:', error.message);\n        return null;\n    }\n}\n```",
    "summary": "This function synchronously reads a file and returns its content in uppercase, logging an error message if reading fails."
  },
  {
    "id": 879,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFileSync(filePath) {\n  if (!fs.existsSync(filePath)) {\n    throw new Error('File not found');\n  }\n  const fileContent = fs.readFileSync(filePath, 'utf8');\n  try {\n    return JSON.parse(fileContent);\n  } catch (error) {\n    throw new Error('Invalid JSON format');\n  }\n}\n```",
    "summary": "This function synchronously reads and parses a JSON file, throwing an error if the file does not exist or contains invalid JSON."
  },
  {
    "id": 880,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a file from the specified path and returns its contents as a JSON object, handling errors gracefully."
  },
  {
    "id": 881,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and parses its contents as JSON, returning the result or null if an error occurs."
  },
  {
    "id": 882,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAndCountWords(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        const wordCount = data.split(/\\s+/).filter(word => word.length > 0).length;\n        callback(null, wordCount);\n    });\n}\n```",
    "summary": "Reads a file asynchronously and counts the number of words, then executes a callback with the result."
  },
  {
    "id": 883,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFirstLine(filePath) {\n    return new Promise((resolve, reject) => {\n        const readStream = fs.createReadStream(filePath, { encoding: 'utf8' });\n        let data = '';\n        readStream.on('data', (chunk) => {\n            data += chunk;\n            if (data.includes('\\n')) {\n                readStream.close();\n            }\n        });\n        readStream.on('close', () => {\n            resolve(data.split('\\n')[0]);\n        });\n        readStream.on('error', (err) => {\n            reject(err);\n        });\n    });\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 884,
    "code": "```javascript\nconst fs = require('fs').promises;\n\nasync function readFileLines(filePath) {\n    try {\n        const data = await fs.readFile(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error(`Failed to read file: ${error.message}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file asynchronously and returns its content as an array of lines."
  },
  {
    "id": 885,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously from the given path and returns its content as an array of lines."
  },
  {
    "id": 886,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction countLinesInFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').length;\n    } catch (error) {\n        console.error('Error reading the file:', error);\n        return -1;\n    }\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count, handling any read errors."
  },
  {
    "id": 887,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously from the given file path and returns its contents as an array of lines."
  },
  {
    "id": 888,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns an array of non-empty lines, logging errors if the file cannot be read."
  },
  {
    "id": 889,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a JSON file from the specified path and returns the parsed object, logging an error if the operation fails."
  },
  {
    "id": 890,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error(`Error reading file from disk: ${error}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines, logging an error if the file cannot be read."
  },
  {
    "id": 891,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').map(line => line.trim());\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns an array of trimmed lines, handling any errors that occur."
  },
  {
    "id": 892,
    "code": "const fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error(`Error reading file from disk: ${error}`);\n        return [];\n    }\n}",
    "summary": "Reads a file synchronously and returns its contents as an array of lines."
  },
  {
    "id": 893,
    "code": "function readFileAndPrintLines(filePath) {\n    const fs = require('fs');\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            console.error('Error reading file:', err);\n            return;\n        }\n        const lines = data.split('\\n');\n        lines.forEach((line, index) => {\n            console.log(`Line ${index + 1}: ${line}`);\n        });\n    });\n}",
    "summary": "This function reads a file asynchronously and prints each line with its corresponding line number to the console."
  },
  {
    "id": 894,
    "code": "const fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            callback(null, data);\n        }\n    });\n}",
    "summary": "Reads the content of a file at a given path and returns it via a callback function."
  },
  {
    "id": 895,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from a specified path, returning the parsed object or null if an error occurs."
  },
  {
    "id": 896,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its contents as an array of lines."
  },
  {
    "id": 897,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines."
  },
  {
    "id": 898,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                try {\n                    const jsonData = JSON.parse(data);\n                    resolve(jsonData);\n                } catch (parseError) {\n                    reject(parseError);\n                }\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file as a JSON object, returning a promise that resolves with the parsed data or rejects on error."
  },
  {
    "id": 899,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}\n```",
    "summary": "Reads a file and converts its contents to uppercase, then returns the result via a callback function."
  },
  {
    "id": 900,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            callback(null, data);\n        }\n    });\n}\n```",
    "summary": "This function reads the contents of a file asynchronously and returns the data through a callback function."
  },
  {
    "id": 901,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}\n```",
    "summary": "Reads a file asynchronously and converts its content to uppercase, then passes the result to a callback function."
  },
  {
    "id": 902,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperSync(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.toUpperCase();\n    } catch (err) {\n        console.error('Error reading file:', err);\n        throw err;\n    }\n}\n```",
    "summary": "This function synchronously reads a file and returns its content converted to uppercase, logging an error if the file read fails."
  },
  {
    "id": 903,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "This function reads the contents of a file at a specified path and executes a callback with the data or an error."
  },
  {
    "id": 904,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file asynchronously and returns its content as an array of lines via a callback function."
  },
  {
    "id": 905,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperSync(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.toUpperCase();\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content in uppercase, logging any errors encountered."
  },
  {
    "id": 906,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and parses its contents as JSON, returning the parsed object or null if an error occurs."
  },
  {
    "id": 907,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from disk and returns its contents as an array of lines."
  },
  {
    "id": 908,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n  try {\n    const data = fs.readFileSync(filePath, 'utf8');\n    return data.split('\\n');\n  } catch (err) {\n    console.error('Error reading file:', err);\n    return [];\n  }\n}\n```",
    "summary": "Reads a file from the given path and returns its content as an array of lines."
  },
  {
    "id": 909,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split(/\\r?\\n/);\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its contents as an array of lines, handling errors gracefully."
  },
  {
    "id": 910,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines, handling errors gracefully."
  },
  {
    "id": 911,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction countWordsInFile(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const wordCount = data.split(/\\s+/).filter(word => word.length > 0).length;\n        callback(null, wordCount);\n    });\n}\n```",
    "summary": "This function reads a file asynchronously and counts the number of words, then returns the count via a callback."
  },
  {
    "id": 912,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, encoding = 'utf8') {\n    try {\n        const data = fs.readFileSync(filePath, encoding);\n        return data;\n    } catch (error) {\n        console.error(`Error reading file: ${error.message}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads and returns the contents of a file synchronously, logging an error if the operation fails."
  },
  {
    "id": 913,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFileSync(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file synchronously, returning the parsed object or null if an error occurs."
  },
  {
    "id": 914,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing JSON file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the specified file path, returning the parsed object or null if an error occurs."
  },
  {
    "id": 915,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a file's content from a specified path and parses it into a JSON object."
  },
  {
    "id": 916,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines, handling any errors by logging them."
  },
  {
    "id": 917,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading the file:', err);\n        return [];\n    }\n}\n```",
    "summary": "This function reads the contents of a file specified by `filePath` and returns an array of its lines, handling errors gracefully."
  },
  {
    "id": 918,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its contents as a JavaScript object, or logs an error if reading or parsing fails."
  },
  {
    "id": 919,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data.split('\\n'));\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines using promises."
  },
  {
    "id": 920,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n                return;\n            }\n            try {\n                const jsonData = JSON.parse(data);\n                resolve(jsonData);\n            } catch (parseError) {\n                reject(parseError);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file from the specified path and parses its content as JSON, returning a promise that resolves with the JSON data or rejects with an error."
  },
  {
    "id": 921,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines, handling any read errors gracefully."
  },
  {
    "id": 922,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                const lines = data.split('\\n');\n                resolve(lines);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file and returns its content split into an array of lines using promises."
  },
  {
    "id": 923,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the specified path, returning the parsed object or null on error."
  },
  {
    "id": 924,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "This function reads the contents of a file and returns an array of its lines."
  },
  {
    "id": 925,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(`Error reading or parsing file: ${error.message}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file, returning its content as an object or null if an error occurs."
  },
  {
    "id": 926,
    "code": "async function readFileContent(filePath) {\n    const fs = require('fs').promises;\n    try {\n        const data = await fs.readFile(filePath, 'utf8');\n        return data;\n    } catch (error) {\n        throw new Error(`Unable to read file: ${error.message}`);\n    }\n}",
    "summary": "Reads the content of a file asynchronously and returns it as a string."
  },
  {
    "id": 927,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads and parses a JSON file, returning its content as a JavaScript object or null if an error occurs."
  },
  {
    "id": 928,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}\n```",
    "summary": "Reads a file and returns its content in uppercase through a callback function."
  },
  {
    "id": 929,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading the file: ${err.message}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the given path and returns its contents as an array of lines, handling errors gracefully."
  },
  {
    "id": 930,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return fs.readFileSync(filePath, 'utf-8').split('\\n');\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines."
  },
  {
    "id": 931,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            callback(null, data);\n        }\n    });\n}\n```",
    "summary": "Reads the contents of a file at a given path and returns the data via a callback function."
  },
  {
    "id": 932,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines."
  },
  {
    "id": 933,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a JSON file from a specified path and returns the parsed data or null in case of an error."
  },
  {
    "id": 934,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines, handling errors gracefully."
  },
  {
    "id": 935,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}\n```",
    "summary": "This function reads a file synchronously and returns its contents as an array of lines, logging errors if they occur."
  },
  {
    "id": 936,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const fileContent = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(fileContent);\n    } catch (error) {\n        console.error('Error reading or parsing JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the specified path, returning the parsed object or null if an error occurs."
  },
  {
    "id": 937,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction appendToFile(filePath, data) {\n    fs.appendFile(filePath, data, 'utf8', (err) => {\n        if (err) {\n            throw err;\n        }\n        console.log('Data appended to file successfully.');\n    });\n}\n```",
    "summary": "Appends data to a specified file asynchronously, creating the file if it does not exist."
  },
  {
    "id": 938,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                const lines = data.split('\\n');\n                resolve(lines);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file at the given path and returns its content as an array of lines."
  },
  {
    "id": 939,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its contents as a JavaScript object."
  },
  {
    "id": 940,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const fileContent = fs.readFileSync(filePath, 'utf8');\n        return fileContent.split('\\n');\n    } catch (error) {\n        console.error('Error reading the file:', error);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines, handling errors if the file cannot be read."
  },
  {
    "id": 941,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns the parsed object, handling errors gracefully."
  },
  {
    "id": 942,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}\n```",
    "summary": "This function reads a file and returns its content in uppercase via a callback."
  },
  {
    "id": 943,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data.split('\\n'));\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines using promises."
  },
  {
    "id": 944,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads the content of a file as a UTF-8 string and returns it as a promise."
  },
  {
    "id": 945,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "Reads the content of a file asynchronously and executes a callback with the result or error."
  },
  {
    "id": 946,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lines = data.split(/\\r?\\n/);\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines through a callback function."
  },
  {
    "id": 947,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines, logging an error if the file cannot be read."
  },
  {
    "id": 948,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously from the specified path and parses its content as JSON, logging an error if reading or parsing fails."
  },
  {
    "id": 949,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const fileContent = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(fileContent);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the given path and parses its content as JSON, returning the parsed object or null if an error occurs."
  },
  {
    "id": 950,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error(`Error reading file from disk: ${error}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its contents as an array of lines."
  },
  {
    "id": 951,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseErr) {\n            callback(parseErr);\n        }\n    });\n}\n```",
    "summary": "Reads a JSON file asynchronously and parses its content, returning the result via a callback function."
  },
  {
    "id": 952,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.toUpperCase();\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content in uppercase; logs an error if reading fails."
  },
  {
    "id": 953,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data.split('\\n'));\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines using promises."
  },
  {
    "id": 954,
    "code": "```javascript\nconst fs = require('fs');\nconst path = require('path');\n\nfunction listFilesInDirectory(dirPath) {\n    try {\n        const files = fs.readdirSync(dirPath);\n        return files.map(file => path.join(dirPath, file));\n    } catch (error) {\n        console.error('Error reading directory:', error);\n        return [];\n    }\n}\n```",
    "summary": "This function synchronously lists all files in a specified directory, returning their full paths."
  },
  {
    "id": 955,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAndCountWords(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        const words = data.split(/\\s+/).filter(word => word.length > 0);\n        return words.length;\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a file synchronously from a given path and returns the count of words in the file."
  },
  {
    "id": 956,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines, handling errors gracefully."
  },
  {
    "id": 957,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a file from the specified path and parses its contents as JSON, returning the parsed object or null if an error occurs."
  },
  {
    "id": 958,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing the file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its contents as a JavaScript object, or logs an error if reading or parsing fails."
  },
  {
    "id": 959,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its content as a JavaScript object, handling errors gracefully."
  },
  {
    "id": 960,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns the parsed object, logging an error if reading or parsing fails."
  },
  {
    "id": 961,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFileSync(filePath) {\n    try {\n        const fileData = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(fileData);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file synchronously, returning the parsed object or null if an error occurs."
  },
  {
    "id": 962,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n                return;\n            }\n            const lines = data.split('\\n');\n            resolve(lines);\n        });\n    });\n}\n```",
    "summary": "Reads a file asynchronously and returns its content as an array of lines."
  },
  {
    "id": 963,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data;\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads and returns the contents of a file at the specified path, or logs an error if the file cannot be read."
  },
  {
    "id": 964,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n  try {\n    const data = fs.readFileSync(filePath, 'utf8');\n    return JSON.parse(data);\n  } catch (error) {\n    console.error('Error reading JSON file:', error);\n    return null;\n  }\n}\n```",
    "summary": "Reads and parses a JSON file from the specified path, returning the parsed object or null if an error occurs."
  },
  {
    "id": 965,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileSync(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data;\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "This function synchronously reads the contents of a file and returns it as a string, logging an error to the console if the file cannot be read."
  },
  {
    "id": 966,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            callback(null, data);\n        }\n    });\n}\n```",
    "summary": "This function reads the content of a file at a given path and returns it through a callback function, handling any potential errors."
  },
  {
    "id": 967,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            callback(null, data);\n        }\n    });\n}\n```",
    "summary": "Reads the contents of a file at the specified path and passes the data or an error to the provided callback function."
  },
  {
    "id": 968,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns an array of non-empty lines, handling any errors during file reading."
  },
  {
    "id": 969,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading the file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines."
  },
  {
    "id": 970,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "Reads the content of a file asynchronously and returns it via a callback function."
  },
  {
    "id": 971,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseErr) {\n            callback(parseErr, null);\n        }\n    });\n}\n```",
    "summary": "The function reads a JSON file from the specified path and parses its content, invoking a callback with the parsed data or an error if any occurs."
  },
  {
    "id": 972,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(`Error reading or parsing file: ${error.message}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file synchronously and returns its parsed content, logging an error if reading or parsing fails."
  },
  {
    "id": 973,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns an array of non-empty lines from the file."
  },
  {
    "id": 974,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (error) {\n        console.error(`Error reading file from disk: ${error}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns an array of non-empty lines."
  },
  {
    "id": 975,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines, handling any read errors."
  },
  {
    "id": 976,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "Reads the contents of a file asynchronously and returns the data or an error through a callback function."
  },
  {
    "id": 977,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split(/\\r?\\n/);\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines."
  },
  {
    "id": 978,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "Reads the content of a file asynchronously and passes it to a callback function."
  },
  {
    "id": 979,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error(`Error reading file from disk: ${error}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines."
  },
  {
    "id": 980,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) return callback(err);\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}\n```",
    "summary": "Reads a file's content and converts it to uppercase, then returns the result via a callback function."
  },
  {
    "id": 981,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines, handling any read errors."
  },
  {
    "id": 982,
    "code": "```javascript\nconst fs = require('fs');\nconst path = require('path');\n\nfunction readJsonFile(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n                return;\n            }\n            try {\n                const jsonData = JSON.parse(data);\n                resolve(jsonData);\n            } catch (parseErr) {\n                reject(parseErr);\n            }\n        });\n    });\n}\n\nconst filePath = path.join(__dirname, 'data.json');\nreadJsonFile(filePath)\n    .then(data => console.log(data))\n    .catch(err => console.error('Error reading JSON file:', err));\n```",
    "summary": "This function reads a JSON file asynchronously and returns a parsed JavaScript object using promises for error handling."
  },
  {
    "id": 983,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines via a callback."
  },
  {
    "id": 984,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines."
  },
  {
    "id": 985,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        throw new Error('Error reading or parsing the JSON file: ' + error.message);\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the specified path, returning its contents as a JavaScript object."
  },
  {
    "id": 986,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseError) {\n            callback(parseError, null);\n        }\n    });\n}\n```",
    "summary": "Reads a file at the specified path, parses its content as JSON, and passes the result or error to a callback function."
  },
  {
    "id": 987,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFileSync(filePath) {\n    if (!fs.existsSync(filePath)) {\n        throw new Error('File does not exist');\n    }\n    const data = fs.readFileSync(filePath, 'utf8');\n    try {\n        return JSON.parse(data);\n    } catch (error) {\n        throw new Error('Failed to parse JSON');\n    }\n}\n```",
    "summary": "Reads and parses a JSON file synchronously, throwing an error if the file does not exist or the content is not valid JSON."
  },
  {
    "id": 988,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFileSync(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error(`Error reading or parsing file: ${err}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file synchronously, returning its contents as a JavaScript object or null if an error occurs."
  },
  {
    "id": 989,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines using a callback function."
  },
  {
    "id": 990,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the specified path, returning the parsed object or null if an error occurs."
  },
  {
    "id": 991,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseErr) {\n            callback(parseErr);\n        }\n    });\n}\n```",
    "summary": "Reads a file at the specified path and parses its contents as JSON, then executes a callback with the result or error."
  },
  {
    "id": 992,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines."
  },
  {
    "id": 993,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAndCountWords(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        const wordCount = data.split(/\\s+/).filter(word => word).length;\n        return wordCount;\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns the word count, logging an error if the file cannot be read."
  },
  {
    "id": 994,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                return reject(err);\n            }\n            try {\n                const jsonData = JSON.parse(data);\n                resolve(jsonData);\n            } catch (parseError) {\n                reject(parseError);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns a promise that resolves with the parsed data or rejects with an error."
  },
  {
    "id": 995,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJsonSync(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function synchronously reads a file from a given path and parses its contents as JSON, returning the resulting object or null if an error occurs."
  },
  {
    "id": 996,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(`Error reading or parsing the file: ${error.message}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the given file path, returning its contents as a JavaScript object or null if an error occurs."
  },
  {
    "id": 997,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a JSON file from the given file path and returns its parsed content, or logs an error and returns null if an error occurs."
  },
  {
    "id": 998,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseErr) {\n            callback(parseErr);\n        }\n    });\n}\n```",
    "summary": "Reads a file at a given path and parses its content as JSON, invoking a callback with the result or an error."
  },
  {
    "id": 999,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}\n```",
    "summary": "This function reads a file and returns its content converted to uppercase via a callback."
  },
  {
    "id": 1000,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileFirstLine(filePath, callback) {\n    const stream = fs.createReadStream(filePath, { encoding: 'utf8' });\n    let data = '';\n    stream.on('data', chunk => {\n        data += chunk;\n        const lines = data.split('\\n');\n        if (lines.length > 1) {\n            stream.destroy();\n            callback(null, lines[0]);\n        }\n    }).on('error', error => {\n        callback(error);\n    });\n}\n```",
    "summary": "This function reads the first line of a file asynchronously and passes it to a callback function."
  },
  {
    "id": 1001,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseErr) {\n            callback(parseErr);\n        }\n    });\n}\n```",
    "summary": "Reads a file and parses its content as JSON, returning the result via a callback function."
  },
  {
    "id": 1002,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            callback(null, data);\n        }\n    });\n}\n```",
    "summary": "This function reads the contents of a file at a given path and passes the data or an error to a callback function."
  },
  {
    "id": 1003,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "Reads the content of a file asynchronously and passes the result to a callback function."
  },
  {
    "id": 1004,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing the file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously from the specified path and parses its content as JSON, returning the result or null on error."
  },
  {
    "id": 1005,
    "code": "async function readFileContent(filePath) {\n    const fs = require('fs').promises;\n    try {\n        const data = await fs.readFile(filePath, 'utf8');\n        return data;\n    } catch (error) {\n        console.error(`Error reading file from disk: ${error}`);\n        throw error;\n    }\n}",
    "summary": "This function asynchronously reads and returns the content of a file specified by its path."
  },
  {
    "id": 1006,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filepath) {\n    try {\n        const data = fs.readFileSync(filepath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines."
  },
  {
    "id": 1007,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (error) {\n        console.error(`Error reading file from disk: ${error}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns an array of non-empty lines, logging an error if the file cannot be read."
  },
  {
    "id": 1008,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file at the specified path and returns its contents as an array of lines."
  },
  {
    "id": 1009,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data.split('\\n'));\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file at the specified path and returns its contents as an array of lines."
  },
  {
    "id": 1010,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file, returning its contents as an object or null if an error occurs."
  },
  {
    "id": 1011,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the specified path, returning the data or null if an error occurs."
  },
  {
    "id": 1012,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                return reject(err);\n            }\n            try {\n                const jsonData = JSON.parse(data);\n                resolve(jsonData);\n            } catch (parseErr) {\n                reject(parseErr);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads and parses a JSON file asynchronously, returning its content as a JavaScript object."
  },
  {
    "id": 1013,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file and returns its content as an object, handling errors in reading or parsing."
  },
  {
    "id": 1014,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines."
  },
  {
    "id": 1015,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseErr) {\n            callback(parseErr);\n        }\n    });\n}\n```",
    "summary": "Reads a file and parses its content as JSON, invoking a callback with the result or an error."
  },
  {
    "id": 1016,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath) {\n  return new Promise((resolve, reject) => {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(data);\n      }\n    });\n  });\n}\n```",
    "summary": "Reads the contents of a file specified by `filePath` and returns a promise that resolves with the file data as a string."
  },
  {
    "id": 1017,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction appendToFile(filePath, content) {\n    fs.appendFile(filePath, content, 'utf8', (err) => {\n        if (err) {\n            console.error('Error appending to file:', err);\n        } else {\n            console.log('Content successfully appended.');\n        }\n    });\n}\n```",
    "summary": "This function appends specified content to a file at a given path, logging success or errors."
  },
  {
    "id": 1018,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the specified path, returning the parsed object or null on error."
  },
  {
    "id": 1019,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file and returns its content line by line through a callback function."
  },
  {
    "id": 1020,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(`Error reading or parsing file: ${error.message}`);\n        return null;\n    }\n}\n```",
    "summary": "This function reads and parses a JSON file from the specified file path, returning its contents as a JavaScript object or null on error."
  },
  {
    "id": 1021,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            callback(null, data);\n        }\n    });\n}\n```",
    "summary": "Reads the content of a file specified by `filePath` and passes it to a callback function, handling any errors that occur."
  },
  {
    "id": 1022,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data.split('\\n'));\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines using promises."
  },
  {
    "id": 1023,
    "code": "async function readFileContents(filePath) {\n  const fs = require('fs').promises;\n  try {\n    const data = await fs.readFile(filePath, 'utf8');\n    return data;\n  } catch (error) {\n    throw new Error(`Error reading file: ${error.message}`);\n  }\n}",
    "summary": "This function asynchronously reads and returns the contents of a file specified by its path, throwing an error if the read operation fails."
  },
  {
    "id": 1024,
    "code": "async function readFileContent(filePath) {\n  const fs = require('fs').promises;\n  try {\n    const data = await fs.readFile(filePath, 'utf8');\n    return data;\n  } catch (error) {\n    throw new Error(`Error reading file: ${error.message}`);\n  }\n}",
    "summary": "Reads and returns the content of a file asynchronously, throwing an error if reading fails."
  },
  {
    "id": 1025,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFileSync(filePath) {\n    if (!fs.existsSync(filePath)) {\n        throw new Error('File does not exist');\n    }\n    const fileContents = fs.readFileSync(filePath, 'utf8');\n    try {\n        return JSON.parse(fileContents);\n    } catch (e) {\n        throw new Error('Error parsing JSON');\n    }\n}\n```",
    "summary": "Reads and parses a JSON file synchronously, throwing an error if the file doesn't exist or the content is not valid JSON."
  },
  {
    "id": 1026,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a file from the specified path and parses its contents as JSON, returning the resulting object or null on error."
  },
  {
    "id": 1027,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            callback(null, data);\n        }\n    });\n}\n```",
    "summary": "Reads the content of a file at a given path and returns it via a callback function."
  },
  {
    "id": 1028,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToString(filePath) {\n    if (!fs.existsSync(filePath)) {\n        throw new Error('File does not exist');\n    }\n    return fs.readFileSync(filePath, 'utf8');\n}\n```",
    "summary": "Reads the contents of a file specified by `filePath` and returns it as a string."
  },
  {
    "id": 1029,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data;\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads and returns the content of a file synchronously, logging an error if the operation fails."
  },
  {
    "id": 1030,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const fileContent = fs.readFileSync(filePath, 'utf8');\n        return fileContent.split('\\n').filter(line => line.trim() !== '');\n    } catch (err) {\n        console.error(`Error reading file ${filePath}:`, err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its non-empty lines as an array of strings."
  },
  {
    "id": 1031,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously from a given path and returns its contents as a JSON object, handling any errors that occur."
  },
  {
    "id": 1032,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(`Error reading file from disk: ${error}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the specified path and parses its content as JSON, returning the parsed object or null if an error occurs."
  },
  {
    "id": 1033,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously from a given path and returns its contents as an array of lines."
  },
  {
    "id": 1034,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads the content of a file asynchronously and returns a promise that resolves with the file's data or rejects if an error occurs."
  },
  {
    "id": 1035,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseErr) {\n            callback(parseErr);\n        }\n    });\n}\n```",
    "summary": "Reads a file at a given path and parses its content as JSON, returning the result via a callback function."
  },
  {
    "id": 1036,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the given path and parses its content as JSON, returning the result or null if an error occurs."
  },
  {
    "id": 1037,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines, handling any read errors gracefully."
  },
  {
    "id": 1038,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(\"Error reading or parsing the file:\", error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads and parses a JSON file from the specified path, returning its contents as a JavaScript object."
  },
  {
    "id": 1039,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseErr) {\n            callback(parseErr, null);\n        }\n    });\n}\n```",
    "summary": "This function reads a file at a given path and parses its contents as JSON, returning the result via a callback."
  },
  {
    "id": 1040,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction appendToFile(filePath, data) {\n    fs.appendFileSync(filePath, data, 'utf8');\n}\n```",
    "summary": "Appends data to a specified file, creating the file if it doesn't exist."
  },
  {
    "id": 1041,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFileSync(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file synchronously, returning the parsed object or null on error."
  },
  {
    "id": 1042,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readAndReverseFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const reversedContent = data.split('').reverse().join('');\n        callback(null, reversedContent);\n    });\n}\n```",
    "summary": "Reads a file asynchronously, reverses its content, and returns the result via a callback function."
  },
  {
    "id": 1043,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines."
  },
  {
    "id": 1044,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines, handling errors gracefully."
  },
  {
    "id": 1045,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n  try {\n    const fileContent = fs.readFileSync(filePath, 'utf8');\n    return JSON.parse(fileContent);\n  } catch (error) {\n    console.error('Error reading or parsing the file:', error.message);\n    return null;\n  }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns the parsed object, logging an error if the operation fails."
  },
  {
    "id": 1046,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the specified path and parses its contents as JSON, returning the parsed object or null if an error occurs."
  },
  {
    "id": 1047,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseErr) {\n            callback(parseErr, null);\n        }\n    });\n}\n```",
    "summary": "Reads a file at a specified path and parses its content as JSON, returning the result via a callback."
  },
  {
    "id": 1048,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (err) {\n        console.error(`Error reading file: ${err.message}`);\n        return [];\n    }\n}\n```",
    "summary": "This function reads a file and returns its non-empty lines as an array, logging any errors encountered."
  },
  {
    "id": 1049,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}\n```",
    "summary": "Reads a file's content and converts it to uppercase, then returns the result through a callback function."
  },
  {
    "id": 1050,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(\"Error reading or parsing file:\", error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and parses its contents as JSON, returning the result or null on error."
  },
  {
    "id": 1051,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        throw new Error('Error reading or parsing the file: ' + error.message);\n    }\n}\n```",
    "summary": "This function reads a file from the given path and parses its content as JSON, throwing an error if reading or parsing fails."
  },
  {
    "id": 1052,
    "code": "```javascript\nconst fs = require('fs');\nconst path = require('path');\n\nfunction readJsonFileSync(filePath) {\n    const absolutePath = path.resolve(filePath);\n    const data = fs.readFileSync(absolutePath, 'utf-8');\n    return JSON.parse(data);\n}\n```",
    "summary": "Reads a JSON file synchronously from the specified path and returns its parsed content as an object."
  },
  {
    "id": 1053,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}\n```",
    "summary": "This function reads a file's content and returns it in uppercase via a callback."
  },
  {
    "id": 1054,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and parses its content as JSON, handling any errors that occur."
  },
  {
    "id": 1055,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction countLinesInFile(filePath, callback) {\n    fs.readFile(filePath, 'utf-8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lineCount = data.split('\\n').length;\n        callback(null, lineCount);\n    });\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the result via a callback function."
  },
  {
    "id": 1056,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "Reads the contents of a file asynchronously and invokes a callback with the data or an error."
  },
  {
    "id": 1057,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from disk and returns its contents as an array of lines, handling errors gracefully."
  },
  {
    "id": 1058,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(\"Error reading or parsing the file:\", error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and parses its content as JSON, returning the result or null on error."
  },
  {
    "id": 1059,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToArray(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its non-empty lines as an array of strings."
  },
  {
    "id": 1060,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the given file path and returns the parsed object, or logs an error if the operation fails."
  },
  {
    "id": 1061,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUppercase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        callback(null, data.toUpperCase());\n    });\n}\n```",
    "summary": "Reads a file and converts its content to uppercase, then returns the result via a callback function."
  },
  {
    "id": 1062,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the specified path and parses its contents as JSON, returning the resulting object or null on error."
  },
  {
    "id": 1063,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, callback) {\n  fs.readFile(filePath, 'utf8', (err, data) => {\n    if (err) {\n      callback(err, null);\n      return;\n    }\n    callback(null, data);\n  });\n}\n```",
    "summary": "This function reads the contents of a file at a given path and executes a callback with the data or an error."
  },
  {
    "id": 1064,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and parses its content as JSON, returning the JSON object or null if an error occurs."
  },
  {
    "id": 1065,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file and passes an array of its lines to a callback function."
  },
  {
    "id": 1066,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its contents as a JavaScript object, handling errors if the file cannot be read or parsed."
  },
  {
    "id": 1067,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n  try {\n    const data = fs.readFileSync(filePath, 'utf8');\n    return JSON.parse(data);\n  } catch (error) {\n    console.error('Error reading or parsing file:', error);\n    return null;\n  }\n}\n```",
    "summary": "Reads and parses a JSON file from a specified path, returning the parsed object or null if an error occurs."
  },
  {
    "id": 1068,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}\n```",
    "summary": "Reads a file and returns its content converted to uppercase via a callback function."
  },
  {
    "id": 1069,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data;\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads and returns the content of a file at the specified path, logging an error if the operation fails."
  },
  {
    "id": 1070,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "Reads the contents of a file at the specified path and returns it via a callback function."
  },
  {
    "id": 1071,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its contents as an array of lines, handling any read errors gracefully."
  },
  {
    "id": 1072,
    "code": "async function readJsonFile(filePath) {\n    const fs = require('fs').promises;\n    try {\n        const data = await fs.readFile(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(`Error reading JSON file from ${filePath}:`, error);\n        throw error;\n    }\n}",
    "summary": "Reads and parses a JSON file asynchronously, returning its contents as a JavaScript object."
  },
  {
    "id": 1073,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file synchronously from the specified path and returns its parsed content or null if an error occurs."
  },
  {
    "id": 1074,
    "code": "async function readFileLines(filePath) {\n    const fs = require('fs').promises;\n    try {\n        const data = await fs.readFile(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (error) {\n        console.error(`Error reading file: ${error}`);\n        return null;\n    }\n}",
    "summary": "Reads a file asynchronously and returns an array of non-empty lines."
  },
  {
    "id": 1075,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n                return;\n            }\n            const lines = data.split('\\n');\n            resolve(lines);\n        });\n    });\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines using promises."
  },
  {
    "id": 1076,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the specified path, returning its content as a JavaScript object."
  },
  {
    "id": 1077,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file, returning its contents as an object or null if an error occurs."
  },
  {
    "id": 1078,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            callback(null, data);\n        }\n    });\n}\n```",
    "summary": "Reads the contents of a file at the specified path and passes the data or error to a callback function."
  },
  {
    "id": 1079,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error(`Error reading file from disk: ${error}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a text file from a specified path and returns its contents as an array of lines."
  },
  {
    "id": 1080,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                const lines = data.split('\\n');\n                resolve(lines);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file asynchronously and returns its content as an array of lines."
  },
  {
    "id": 1081,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}\n```",
    "summary": "Reads a file asynchronously and converts its content to uppercase, then returns the result via a callback."
  },
  {
    "id": 1082,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines, logging an error if reading fails."
  },
  {
    "id": 1083,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the given path and returns its content as an array of lines, logging an error if the file cannot be read."
  },
  {
    "id": 1084,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFileSync(filePath) {\n    if (!fs.existsSync(filePath)) {\n        throw new Error('File does not exist.');\n    }\n    const fileContent = fs.readFileSync(filePath, 'utf-8');\n    try {\n        return JSON.parse(fileContent);\n    } catch (error) {\n        throw new Error('Invalid JSON format.');\n    }\n}\n```",
    "summary": "Reads a JSON file synchronously and returns its content as a JavaScript object, throwing errors if the file does not exist or contains invalid JSON."
  },
  {
    "id": 1085,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "Reads the content of a file asynchronously and executes a callback with the data or an error."
  },
  {
    "id": 1086,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readAndCountLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').length;\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return -1;\n    }\n}\n```",
    "summary": "Reads a file and returns the number of lines, or -1 if an error occurs."
  },
  {
    "id": 1087,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}\n```",
    "summary": "Reads a file and converts its content to uppercase, then returns the result via a callback."
  },
  {
    "id": 1088,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n                return;\n            }\n            try {\n                const jsonData = JSON.parse(data);\n                resolve(jsonData);\n            } catch (parseError) {\n                reject(parseError);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a JSON file asynchronously and returns its contents as a JavaScript object."
  },
  {
    "id": 1089,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "This function reads a file and invokes a callback with an array of its lines."
  },
  {
    "id": 1090,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from a given path and returns its content as a JavaScript object."
  },
  {
    "id": 1091,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n  try {\n    const data = fs.readFileSync(filePath, 'utf8');\n    return data.split('\\n').filter(line => line.trim() !== '');\n  } catch (err) {\n    console.error(`Error reading file: ${err.message}`);\n    return [];\n  }\n}\n```",
    "summary": "Reads a text file and returns its non-empty lines as an array, logging an error if reading fails."
  },
  {
    "id": 1092,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error('Error reading the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines, or logs an error if the file cannot be read."
  },
  {
    "id": 1093,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines, logging an error if reading fails."
  },
  {
    "id": 1094,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data.split('\\n'));\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines using promises."
  },
  {
    "id": 1095,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error(`Error reading file from disk: ${error}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously from the given path and returns its content as an array of lines."
  },
  {
    "id": 1096,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines."
  },
  {
    "id": 1097,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "This function reads the content of a file at a given path and returns the data or an error via a callback."
  },
  {
    "id": 1098,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the specified file path, returning its contents as an object or null on failure."
  },
  {
    "id": 1099,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n                return;\n            }\n            const lines = data.split('\\n');\n            resolve(lines);\n        });\n    });\n}\n```",
    "summary": "This function reads a file asynchronously and returns its contents as an array of lines."
  },
  {
    "id": 1100,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                try {\n                    const jsonData = JSON.parse(data);\n                    resolve(jsonData);\n                } catch (parseErr) {\n                    reject(parseErr);\n                }\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file asynchronously and parses its contents as JSON, returning a promise that resolves to the parsed object."
  },
  {
    "id": 1101,
    "code": "async function readFileAsJson(filePath) {\n    const fs = require('fs').promises;\n    try {\n        const data = await fs.readFile(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        throw new Error(`Error reading or parsing file: ${error.message}`);\n    }\n}",
    "summary": "This function reads a file asynchronously and parses its contents as JSON, throwing an error if it fails."
  },
  {
    "id": 1102,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously from a given path and returns its contents as an array of lines, handling errors gracefully."
  },
  {
    "id": 1103,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n                return;\n            }\n            const lines = data.split('\\n');\n            resolve(lines);\n        });\n    });\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines using a Promise."
  },
  {
    "id": 1104,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            const lines = data.split('\\n');\n            callback(null, lines);\n        }\n    });\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines via a callback function."
  },
  {
    "id": 1105,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines through a callback function."
  },
  {
    "id": 1106,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAndCountWords(filePath) {\n  try {\n    const data = fs.readFileSync(filePath, 'utf8');\n    const words = data.split(/\\s+/).filter(word => word.length > 0);\n    return words.length;\n  } catch (error) {\n    console.error('Error reading file:', error);\n    return 0;\n  }\n}\n```",
    "summary": "Reads a file and returns the count of words found in it, handling any read errors gracefully."
  },
  {
    "id": 1107,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "This function reads the content of a file at the specified path and returns the data or an error through a callback."
  },
  {
    "id": 1108,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n                return;\n            }\n            try {\n                const jsonData = JSON.parse(data);\n                resolve(jsonData);\n            } catch (parseErr) {\n                reject(parseErr);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads and parses a JSON file asynchronously, returning a promise that resolves with the JSON data or rejects with an error."
  },
  {
    "id": 1109,
    "code": "async function readFileLines(filePath) {\n    const fs = require('fs').promises;\n    try {\n        const data = await fs.readFile(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error(`Error reading file from disk: ${error}`);\n        throw error;\n    }\n}",
    "summary": "Reads a file asynchronously and returns its contents as an array of lines."
  },
  {
    "id": 1110,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads the contents of a file and returns an array of its lines, handling any read errors."
  },
  {
    "id": 1111,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and parses its content as JSON, returning the result or null if an error occurs."
  },
  {
    "id": 1112,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file synchronously and returns its contents as a JavaScript object, logging an error if reading or parsing fails."
  },
  {
    "id": 1113,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the given path and returns its contents as an array of lines."
  },
  {
    "id": 1114,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            callback(null, data);\n        }\n    });\n}\n```",
    "summary": "Reads the contents of a file at the given path and passes the result or an error to the provided callback function."
  },
  {
    "id": 1115,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}\n```",
    "summary": "This function reads a file asynchronously and returns its content in uppercase via a callback."
  },
  {
    "id": 1116,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filepath) {\n    try {\n        const data = fs.readFileSync(filepath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines, logging an error if reading fails."
  },
  {
    "id": 1117,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file at a given path and parses its contents as JSON, returning the resulting object or null if an error occurs."
  },
  {
    "id": 1118,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileSync(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data;\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "This function synchronously reads the contents of a file at a given path and returns it as a string."
  },
  {
    "id": 1119,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "This function reads the content of a file at the specified path and returns it through a callback."
  },
  {
    "id": 1120,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the given path and returns its content as an object, logging an error if reading or parsing fails."
  },
  {
    "id": 1121,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n  return new Promise((resolve, reject) => {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n      if (err) {\n        reject(err);\n      } else {\n        const lines = data.split('\\n');\n        resolve(lines);\n      }\n    });\n  });\n}\n```",
    "summary": "Reads a file asynchronously and returns its content as an array of lines."
  },
  {
    "id": 1122,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsync(filePath, callback) {\n  fs.readFile(filePath, 'utf8', (err, data) => {\n    if (err) {\n      callback(err, null);\n    } else {\n      callback(null, data);\n    }\n  });\n}\n```",
    "summary": "Asynchronously reads a file and executes a callback with the file's contents or an error."
  },
  {
    "id": 1123,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, callback) {\n  fs.readFile(filePath, 'utf8', (err, data) => {\n    if (err) {\n      callback(err, null);\n      return;\n    }\n    callback(null, data);\n  });\n}\n```",
    "summary": "This function reads the contents of a file at a given path and returns the data or an error via a callback."
  },
  {
    "id": 1124,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from a specified path, returning its contents as a JavaScript object or null on error."
  },
  {
    "id": 1125,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file synchronously and returns its content as a JavaScript object, or logs an error if the operation fails."
  },
  {
    "id": 1126,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n  try {\n    const data = fs.readFileSync(filePath, 'utf8');\n    return data.split('\\n').filter(line => line.trim() !== '');\n  } catch (err) {\n    console.error('Error reading file:', err);\n    return [];\n  }\n}\n```",
    "summary": "Reads a file and returns an array of non-empty lines."
  },
  {
    "id": 1127,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const fileContent = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(fileContent);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the specified path and parses its content as JSON, returning the resulting object or null if an error occurs."
  },
  {
    "id": 1128,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsync(filePath, encoding = 'utf8') {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, encoding, (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data);\n            }\n        });\n    });\n}\n```",
    "summary": "This function reads a file asynchronously using promises and returns its content or an error."
  },
  {
    "id": 1129,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const fileContent = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(fileContent);\n    } catch (error) {\n        console.error(`Error reading or parsing file: ${error.message}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the given path and returns its content as a JSON object, logging errors if reading or parsing fails."
  },
  {
    "id": 1130,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from a specified path, returning the parsed object or null on error."
  },
  {
    "id": 1131,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file asynchronously and returns its content as an array of lines through a callback function."
  },
  {
    "id": 1132,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the given file path, returning the parsed object or null if an error occurs."
  },
  {
    "id": 1133,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data.split('\\n'));\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file asynchronously and returns a promise that resolves with an array of its lines."
  },
  {
    "id": 1134,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the given path and returns its content as an array of lines, handling errors gracefully."
  },
  {
    "id": 1135,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads the contents of a file at the given path and returns it as a UTF-8 string using a Promise."
  },
  {
    "id": 1136,
    "code": "```javascript\nconst fs = require('fs');\n\n/**\n * Appends a line of text to a specified file, creating the file if it doesn't exist.\n * @param {string} filePath - The path to the file.\n * @param {string} line - The line of text to append.\n * @param {function} callback - Callback function to handle errors or success message.\n */\nfunction appendLineToFile(filePath, line, callback) {\n    fs.appendFile(filePath, line + '\\n', (err) => {\n        if (err) {\n            callback(`Error appending to file: ${err}`);\n        } else {\n            callback(`Successfully appended line to ${filePath}`);\n        }\n    });\n}\n```",
    "summary": "Appends a line of text to a specified file, creating the file if it doesn't exist, and provides a callback for handling the result."
  },
  {
    "id": 1137,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                try {\n                    const jsonData = JSON.parse(data);\n                    resolve(jsonData);\n                } catch (parseError) {\n                    reject(parseError);\n                }\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a JSON file asynchronously and returns its contents as a JavaScript object."
  },
  {
    "id": 1138,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToArray(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its contents as an array of non-empty lines."
  },
  {
    "id": 1139,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lines = data.split('\\n').map(line => line.trim()).filter(line => line.length > 0);\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file asynchronously and returns its non-empty, trimmed lines via a callback."
  },
  {
    "id": 1140,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                const lines = data.split('\\n');\n                resolve(lines);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file and returns a promise that resolves with an array of its lines."
  },
  {
    "id": 1141,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its lines as an array, or an empty array if an error occurs."
  },
  {
    "id": 1142,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified file path and returns its contents as a JavaScript object, handling errors if they occur."
  },
  {
    "id": 1143,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its parsed contents, logging an error if reading or parsing fails."
  },
  {
    "id": 1144,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its contents as a JSON object, handling errors if the file cannot be read or parsed."
  },
  {
    "id": 1145,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its contents as a JSON object, handling any read or parse errors."
  },
  {
    "id": 1146,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsArray(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lines = data.split(/\\r?\\n/).filter(line => line.trim() !== '');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file and returns its non-empty lines as an array via a callback function."
  },
  {
    "id": 1147,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                return reject(err);\n            }\n            const lines = data.split('\\n');\n            resolve(lines);\n        });\n    });\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines using promises."
  },
  {
    "id": 1148,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(`Error reading file from disk: ${error}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the specified path, returning its content as a JavaScript object."
  },
  {
    "id": 1149,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file, returning its contents as a JavaScript object, or null if an error occurs."
  },
  {
    "id": 1150,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function synchronously reads a JSON file from the specified path and returns its contents as a JavaScript object."
  },
  {
    "id": 1151,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath, callback) {\n  fs.readFile(filePath, 'utf8', (err, data) => {\n    if (err) {\n      return callback(err);\n    }\n    try {\n      const jsonData = JSON.parse(data);\n      callback(null, jsonData);\n    } catch (parseErr) {\n      callback(parseErr);\n    }\n  });\n}\n```",
    "summary": "Reads a file and parses its content as JSON, invoking a callback with the result or an error."
  },
  {
    "id": 1152,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        callback(null, data.toUpperCase());\n    });\n}\n```",
    "summary": "Reads a file and converts its content to uppercase before passing it to a callback function."
  },
  {
    "id": 1153,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads the contents of a file at the specified path and returns an array of its lines, handling any read errors."
  },
  {
    "id": 1154,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAndCapitalize(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) return callback(err);\n        const capitalizedData = data.toUpperCase();\n        callback(null, capitalizedData);\n    });\n}\n```",
    "summary": "Reads a file and converts its content to uppercase, then returns the result via a callback."
  },
  {
    "id": 1155,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines, handling errors gracefully."
  },
  {
    "id": 1156,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n                return;\n            }\n            const lines = data.split('\\n');\n            resolve(lines);\n        });\n    });\n}\n```",
    "summary": "Reads a file asynchronously and resolves a promise with an array of its lines."
  },
  {
    "id": 1157,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines via a callback."
  },
  {
    "id": 1158,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filepath) {\n  try {\n    const data = fs.readFileSync(filepath, 'utf8');\n    return data;\n  } catch (error) {\n    console.error('Error reading file:', error);\n    return null;\n  }\n}\n```",
    "summary": "Reads the content of a file synchronously and returns it as a string, logging an error message if the file cannot be read."
  },
  {
    "id": 1159,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads the contents of a file asynchronously and returns a promise that resolves with the file's content or rejects with an error."
  },
  {
    "id": 1160,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file synchronously from the specified path and returns its contents as a JavaScript object."
  },
  {
    "id": 1161,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the specified file path, returning the parsed object or null if an error occurs."
  },
  {
    "id": 1162,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "This function reads the content of a file asynchronously and returns the data or error through a callback."
  },
  {
    "id": 1163,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAndCountWords(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        const words = data.split(/\\s+/);\n        return words.length;\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file and returns the count of words in it, handling any read errors gracefully."
  },
  {
    "id": 1164,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(\"Error reading or parsing file:\", error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the specified path and parses its content as JSON, returning the parsed object or null on error."
  },
  {
    "id": 1165,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToArray(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lines = data.split('\\n').map(line => line.trim()).filter(line => line.length > 0);\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file and returns its non-empty lines as an array via a callback function."
  },
  {
    "id": 1166,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a file synchronously from a specified path and parses its contents as JSON."
  },
  {
    "id": 1167,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading the file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines, handling errors if the file cannot be read."
  },
  {
    "id": 1168,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines, handling any errors that occur."
  },
  {
    "id": 1169,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data.split('\\n'));\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a text file and returns its contents as an array of lines."
  },
  {
    "id": 1170,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) return callback(err);\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}\n```",
    "summary": "Reads the content of a file and converts it to uppercase before passing it to a callback."
  },
  {
    "id": 1171,
    "code": "const fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}",
    "summary": "Reads a file synchronously and returns its content as an array of lines."
  },
  {
    "id": 1172,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data;\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads the contents of a file synchronously and returns it as a string, logging an error if the file cannot be read."
  },
  {
    "id": 1173,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its content as a JavaScript object, handling any errors that occur."
  },
  {
    "id": 1174,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the specified path and parses its contents as JSON, returning the parsed object or null if an error occurs."
  },
  {
    "id": 1175,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its content as a JavaScript object, or logs an error if reading or parsing fails."
  },
  {
    "id": 1176,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its contents as an array of lines."
  },
  {
    "id": 1177,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file and returns its non-empty lines as an array of strings."
  },
  {
    "id": 1178,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n                return;\n            }\n            const lines = data.split('\\n');\n            resolve(lines);\n        });\n    });\n}\n```",
    "summary": "Reads a file asynchronously and returns its contents as an array of lines."
  },
  {
    "id": 1179,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines, or an empty array if an error occurs."
  },
  {
    "id": 1180,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (error) {\n        console.error(`Error reading file from disk: ${error}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously from the specified path and returns an array of non-empty lines."
  },
  {
    "id": 1181,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJSON(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a file at a given path and parses its contents into a JSON object."
  },
  {
    "id": 1182,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsync(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data);\n            }\n        });\n    });\n}\n```",
    "summary": "This function reads a file asynchronously and returns its content as a promise."
  },
  {
    "id": 1183,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAndConvertToUpperCase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}\n```",
    "summary": "Reads a file and converts its contents to uppercase, returning the result through a callback."
  },
  {
    "id": 1184,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                return reject(err);\n            }\n            const lines = data.split('\\n');\n            resolve(lines);\n        });\n    });\n}\n```",
    "summary": "This function reads a file asynchronously and returns its content as an array of lines using Promises."
  },
  {
    "id": 1185,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                try {\n                    const jsonData = JSON.parse(data);\n                    resolve(jsonData);\n                } catch (parseError) {\n                    reject(parseError);\n                }\n            }\n        });\n    });\n}\n```",
    "summary": "Reads and parses a JSON file from the specified file path, returning its contents as a JavaScript object."
  },
  {
    "id": 1186,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readTextFile(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "Reads a text file asynchronously and passes its content to a callback function."
  },
  {
    "id": 1187,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and parses its content as JSON, returning the resulting object or null if an error occurs."
  },
  {
    "id": 1188,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file synchronously, returning its contents as an object or null if an error occurs."
  },
  {
    "id": 1189,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readTextFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data;\n    } catch (err) {\n        throw new Error(`Unable to read file: ${err.message}`);\n    }\n}\n```",
    "summary": "Reads and returns the content of a text file from the specified path, throwing an error if reading fails."
  },
  {
    "id": 1190,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (error) {\n        console.error(`Error reading file: ${error.message}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns an array of non-empty lines, logging an error message if reading fails."
  },
  {
    "id": 1191,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "Reads the content of a file at a given path and executes a callback with the data or an error."
  },
  {
    "id": 1192,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines."
  },
  {
    "id": 1193,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the specified path, returning the parsed object or null if an error occurs."
  },
  {
    "id": 1194,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        throw new Error('Error reading file:', err.message);\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines."
  },
  {
    "id": 1195,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines, handling errors if the file cannot be read."
  },
  {
    "id": 1196,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                return reject(err);\n            }\n            const lines = data.split('\\n');\n            resolve(lines);\n        });\n    });\n}\n```",
    "summary": "This function reads a file asynchronously and returns its contents as an array of lines."
  },
  {
    "id": 1197,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "Reads the content of a file at the specified path and passes the content or error to a callback function."
  },
  {
    "id": 1198,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                return reject(err);\n            }\n            const lines = data.split('\\n');\n            resolve(lines);\n        });\n    });\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines using a Promise."
  },
  {
    "id": 1199,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n                return;\n            }\n            try {\n                const jsonData = JSON.parse(data);\n                resolve(jsonData);\n            } catch (parseError) {\n                reject(parseError);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file at the given path and parses its contents as JSON, returning a Promise that resolves with the parsed data or rejects with an error."
  },
  {
    "id": 1200,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its contents as a JavaScript object, handling errors gracefully."
  },
  {
    "id": 1201,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFileSync(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file synchronously and returns the parsed object or null if an error occurs."
  },
  {
    "id": 1202,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n  try {\n    const data = fs.readFileSync(filePath, 'utf-8');\n    return data.split('\\n').map(line => line.trim()).filter(line => line.length > 0);\n  } catch (error) {\n    console.error(`Error reading file: ${error.message}`);\n    return [];\n  }\n}\n```",
    "summary": "Reads a file and returns its non-empty, trimmed lines as an array of strings."
  },
  {
    "id": 1203,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.toUpperCase();\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads the contents of a file and returns it as an uppercase string, handling any read errors."
  },
  {
    "id": 1204,
    "code": "```javascript\nconst fs = require('fs');\nconst path = require('path');\n\nfunction readFileLines(filePath) {\n  return new Promise((resolve, reject) => {\n    const absolutePath = path.resolve(filePath);\n    fs.readFile(absolutePath, 'utf-8', (err, data) => {\n      if (err) {\n        return reject(err);\n      }\n      const lines = data.split('\\n');\n      resolve(lines);\n    });\n  });\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines using Promises."
  },
  {
    "id": 1205,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFirstLine(filePath, callback) {\n    const stream = fs.createReadStream(filePath, { encoding: 'utf8' });\n    let data = '';\n    stream.on('data', chunk => {\n        data += chunk;\n        const lines = data.split('\\n');\n        if (lines.length > 1) {\n            stream.close();\n            callback(null, lines[0]);\n        }\n    });\n    stream.on('error', err => callback(err, null));\n}\n```",
    "summary": "Reads and returns the first line of a text file using a streaming approach."
  },
  {
    "id": 1206,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseErr) {\n            callback(parseErr, null);\n        }\n    });\n}\n```",
    "summary": "Reads a file at the specified path and parses its content as JSON, using a callback to handle errors and the parsed data."
  },
  {
    "id": 1207,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}\n```",
    "summary": "Reads a text file from the given path and returns its content as an array of lines."
  },
  {
    "id": 1208,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the given path and returns its content as an array of lines, handling errors gracefully."
  },
  {
    "id": 1209,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines through a callback function."
  },
  {
    "id": 1210,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUppercase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}\n```",
    "summary": "Reads a file's content and returns it converted to uppercase via a callback function."
  },
  {
    "id": 1211,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its parsed content or logs an error and returns null if an error occurs."
  },
  {
    "id": 1212,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines, logging an error if file reading fails."
  },
  {
    "id": 1213,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data;\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads the content of a file at the specified path and returns it as a string, logging an error if reading fails."
  },
  {
    "id": 1214,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data;\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads and returns the contents of a file as a string or logs an error if reading fails."
  },
  {
    "id": 1215,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpper(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}\n```",
    "summary": "Reads a file asynchronously and converts its contents to uppercase, then returns the result via a callback function."
  },
  {
    "id": 1216,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its contents as a JavaScript object, logging an error if it fails."
  },
  {
    "id": 1217,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (error) {\n        console.error('Error reading file:', error.message);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns an array of non-empty lines, handling any read errors gracefully."
  },
  {
    "id": 1218,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines, logging an error if reading fails."
  },
  {
    "id": 1219,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines via a callback function."
  },
  {
    "id": 1220,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readTextFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data;\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads the contents of a text file synchronously and returns the data as a string, handling errors if the file cannot be read."
  },
  {
    "id": 1221,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "This function reads the content of a file at a given path and returns the data or an error via a callback."
  },
  {
    "id": 1222,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            callback(null, data);\n        }\n    });\n}\n```",
    "summary": "This function reads the content of a file at a given path and returns it via a callback, handling errors if they occur."
  },
  {
    "id": 1223,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from a given path and returns its contents as an array of lines, handling errors silently."
  },
  {
    "id": 1224,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data.split('\\n'));\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file asynchronously and returns its content as an array of lines."
  },
  {
    "id": 1225,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpper(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.toUpperCase();\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously, converts its content to uppercase, and returns the result."
  },
  {
    "id": 1226,
    "code": "const fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error(`Error reading file from disk: ${error}`);\n        return [];\n    }\n}",
    "summary": "This function reads a file from the given path and returns its content as an array of lines."
  },
  {
    "id": 1227,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing the file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its contents as an object, handling errors if the file cannot be read or parsed."
  },
  {
    "id": 1228,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToArray(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        const lines = data.split('\\n').filter(line => line.trim() !== '');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file and returns its non-empty lines as an array using a callback function."
  },
  {
    "id": 1229,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a JSON file from the specified path and returns its contents as a JavaScript object, handling errors gracefully."
  },
  {
    "id": 1230,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing JSON file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its content as a JavaScript object, or logs an error if reading or parsing fails."
  },
  {
    "id": 1231,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines via a callback function."
  },
  {
    "id": 1232,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file at the given path and returns its contents as an array of lines, handling any errors that occur during the process."
  },
  {
    "id": 1233,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines, handling any errors that occur during the read operation."
  },
  {
    "id": 1234,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines."
  },
  {
    "id": 1235,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n                return;\n            }\n            try {\n                const jsonData = JSON.parse(data);\n                resolve(jsonData);\n            } catch (parseErr) {\n                reject(parseErr);\n            }\n        });\n    });\n}\n```",
    "summary": "Asynchronously reads and parses a JSON file, returning its content as a JavaScript object."
  },
  {
    "id": 1236,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data;\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return null;\n    }\n}\n```",
    "summary": "This function reads and returns the content of a file synchronously given its file path, or logs an error if the operation fails."
  },
  {
    "id": 1237,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFileSync(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file synchronously, returning the data or null if an error occurs."
  },
  {
    "id": 1238,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file at the specified path and returns its contents as an array of lines."
  },
  {
    "id": 1239,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (error) {\n        console.error(`Error reading file: ${error.message}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns an array of its non-empty lines, handling any read errors gracefully."
  },
  {
    "id": 1240,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines via a callback function."
  },
  {
    "id": 1241,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "This function reads a file synchronously and returns its contents as an array of lines, handling any errors that occur during the process."
  },
  {
    "id": 1242,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines, handling errors gracefully."
  },
  {
    "id": 1243,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its content as an array of lines."
  },
  {
    "id": 1244,
    "code": "const fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}",
    "summary": "Reads a file and returns its content as an array of lines, handling errors gracefully."
  },
  {
    "id": 1245,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data.split('\\n'));\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines using promises for asynchronous handling."
  },
  {
    "id": 1246,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAndCountLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        const lineCount = data.split('\\n').length;\n        callback(null, lineCount);\n    });\n}\n```",
    "summary": "Reads a file and counts the number of lines, then invokes a callback with the result or an error."
  },
  {
    "id": 1247,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction appendToFile(filePath, data) {\n    fs.appendFile(filePath, data, 'utf8', (err) => {\n        if (err) {\n            console.error(`Error appending to file: ${err.message}`);\n        } else {\n            console.log('Data successfully appended to file.');\n        }\n    });\n}\n```",
    "summary": "This function appends a specified string of data to a given file, logging a success or error message upon completion."
  },
  {
    "id": 1248,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            callback(null, data);\n        }\n    });\n}\n```",
    "summary": "Reads the content of a specified file and returns it through a callback function, handling any errors that occur."
  },
  {
    "id": 1249,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file, returning its contents as a JavaScript object or null if an error occurs."
  },
  {
    "id": 1250,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n                return;\n            }\n            try {\n                const jsonData = JSON.parse(data);\n                resolve(jsonData);\n            } catch (parseErr) {\n                reject(parseErr);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file asynchronously, parses its contents as JSON, and returns the parsed data or an error through a promise."
  },
  {
    "id": 1251,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filepath) {\n    try {\n        const data = fs.readFileSync(filepath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines, handling errors gracefully."
  },
  {
    "id": 1252,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines, handling errors by logging them."
  },
  {
    "id": 1253,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}\n```",
    "summary": "Reads a file's content, converts it to uppercase, and returns the result via a callback function."
  },
  {
    "id": 1254,
    "code": "```javascript\nfunction readFileContent(filePath, callback) {\n    const fs = require('fs');\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "Reads the content of a file asynchronously and passes the result to a callback function."
  },
  {
    "id": 1255,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file's content from the given path and returns an array of its lines, handling errors gracefully."
  },
  {
    "id": 1256,
    "code": "```javascript\nfunction readJSONFile(filePath, callback) {\n    const fs = require('fs');\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseErr) {\n            callback(parseErr, null);\n        }\n    });\n}\n```",
    "summary": "Reads a JSON file asynchronously and parses its content, invoking a callback with the result or any error encountered."
  },
  {
    "id": 1257,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the given file path, returning the parsed object or null if an error occurs."
  },
  {
    "id": 1258,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the given file path and parses its content as JSON, handling errors if they occur."
  },
  {
    "id": 1259,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(`Error reading file from disk: ${err}`);\n            } else {\n                try {\n                    const jsonData = JSON.parse(data);\n                    resolve(jsonData);\n                } catch (parseErr) {\n                    reject(`Error parsing JSON data: ${parseErr}`);\n                }\n            }\n        });\n    });\n}\n```",
    "summary": "This function reads a file at a given path and returns its contents parsed as JSON, using Promises for asynchronous handling."
  },
  {
    "id": 1260,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                try {\n                    const jsonData = JSON.parse(data);\n                    resolve(jsonData);\n                } catch (parseErr) {\n                    reject(parseErr);\n                }\n            }\n        });\n    });\n}\n```",
    "summary": "Reads and parses a JSON file asynchronously, returning the data as a JavaScript object."
  },
  {
    "id": 1261,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns an array of non-empty lines."
  },
  {
    "id": 1262,
    "code": "const fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (error) {\n        console.error(`Error reading file from disk: ${error}`);\n        return [];\n    }\n}",
    "summary": "Reads a file and returns its non-empty lines as an array of strings."
  },
  {
    "id": 1263,
    "code": "function readTextFile(filePath, callback) {\n    const fs = require('fs');\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}",
    "summary": "This function reads a text file asynchronously and returns its contents through a callback function."
  },
  {
    "id": 1264,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(\"Error reading or parsing file:\", error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the specified path and parses its contents as JSON, handling any errors and returning null if they occur."
  },
  {
    "id": 1265,
    "code": "const fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing JSON file:', error);\n        return null;\n    }\n}",
    "summary": "This function reads a JSON file from the specified path and returns its content as a JavaScript object."
  },
  {
    "id": 1266,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(\"Error reading or parsing the file:\", error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file, returning its content as a JavaScript object."
  },
  {
    "id": 1267,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its content as an array of lines."
  },
  {
    "id": 1268,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from a given path and parses its content into a JavaScript object."
  },
  {
    "id": 1269,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpper(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}\n```",
    "summary": "Reads a file and returns its content in uppercase through a callback function."
  },
  {
    "id": 1270,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a file at the given path and parses its contents into a JSON object."
  },
  {
    "id": 1271,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines, handling any read errors gracefully."
  },
  {
    "id": 1272,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns an array of non-empty lines."
  },
  {
    "id": 1273,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the specified path, returning the parsed object or null if an error occurs."
  },
  {
    "id": 1274,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its contents as an object, logging errors if they occur."
  },
  {
    "id": 1275,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data);\n            }\n        });\n    });\n}\n```",
    "summary": "This function reads the content of a file asynchronously and returns a promise that resolves with the file data or rejects with an error."
  },
  {
    "id": 1276,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines."
  },
  {
    "id": 1277,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines, logging an error if the file cannot be read."
  },
  {
    "id": 1278,
    "code": "```\nconst fs = require('fs');\n\nfunction readTextFile(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            callback(null, data);\n        }\n    });\n}\n```",
    "summary": "Reads a text file asynchronously and passes its content or error to a callback function."
  },
  {
    "id": 1279,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(`Error reading or parsing the file: ${error.message}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file synchronously from the given file path and returns the parsed object, or logs an error if reading or parsing fails."
  },
  {
    "id": 1280,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUppercase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        callback(null, data.toUpperCase());\n    });\n}\n```",
    "summary": "This function reads a file's content and returns it in uppercase via a callback."
  },
  {
    "id": 1281,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns an array of non-empty lines, handling any errors that occur during file reading."
  },
  {
    "id": 1282,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                const lines = data.split('\\n');\n                resolve(lines);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines using a promise-based approach."
  },
  {
    "id": 1283,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "This function reads a file and returns its contents as an array of lines, handling any errors during the process."
  },
  {
    "id": 1284,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines, handling any file read errors gracefully."
  },
  {
    "id": 1285,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing the file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the given file path, returning the parsed object or null if an error occurs."
  },
  {
    "id": 1286,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the specified path, returning the parsed object or null if an error occurs."
  },
  {
    "id": 1287,
    "code": "async function readFileContent(filePath) {\n    const fs = require('fs').promises;\n    try {\n        const data = await fs.readFile(filePath, 'utf8');\n        return data;\n    } catch (error) {\n        throw new Error(`Error reading file: ${error.message}`);\n    }\n}",
    "summary": "This function asynchronously reads the content of a file and returns it as a string."
  },
  {
    "id": 1288,
    "code": "async function readFileContent(filePath) {\n    const fs = require('fs').promises;\n    try {\n        const data = await fs.readFile(filePath, 'utf-8');\n        return data;\n    } catch (error) {\n        console.error(`Error reading file from disk: ${error}`);\n        throw error;\n    }\n}",
    "summary": "This function asynchronously reads a file's content from the specified file path and returns it as a string."
  },
  {
    "id": 1289,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split(/\\r?\\n/);\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines, handling any read errors gracefully."
  },
  {
    "id": 1290,
    "code": "async function readJsonFile(filePath) {\n    const fs = require('fs').promises;\n    try {\n        const data = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        throw error;\n    }\n}",
    "summary": "This function asynchronously reads a JSON file from the given path and parses its content into a JavaScript object."
  },
  {
    "id": 1291,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(`Error reading or parsing file: ${error.message}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from a specified path synchronously and returns its parsed content, logging errors if they occur."
  },
  {
    "id": 1292,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split(/\\r?\\n/);\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines, handling any errors that occur."
  },
  {
    "id": 1293,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error(`Error reading file from disk: ${error}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines, handling any read errors."
  },
  {
    "id": 1294,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFileSync(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file synchronously, returning its contents as an object, or logs an error and returns null if unsuccessful."
  },
  {
    "id": 1295,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}\n```",
    "summary": "This function reads a file and returns an array of non-empty lines from it, handling any errors that occur during reading."
  },
  {
    "id": 1296,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines, handling errors gracefully."
  },
  {
    "id": 1297,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads and parses a JSON file from a specified path, returning its contents as a JavaScript object or null if an error occurs."
  },
  {
    "id": 1298,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}\n```",
    "summary": "Reads a file and returns its contents in uppercase via a callback function."
  },
  {
    "id": 1299,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath) {\n    try {\n        const fileContent = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(fileContent);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and parses its contents as JSON, returning the resulting object or null on error."
  },
  {
    "id": 1300,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}\n```",
    "summary": "Reads a file's content and returns it in uppercase through a callback function."
  },
  {
    "id": 1301,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readAndParseJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified file path, parses its content, and returns the parsed object, handling any errors encountered."
  },
  {
    "id": 1302,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseErr) {\n            callback(parseErr, null);\n        }\n    });\n}\n```",
    "summary": "Reads a file from the specified path and parses its content as JSON, providing the result via a callback function."
  },
  {
    "id": 1303,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines, logging an error if the file cannot be read."
  },
  {
    "id": 1304,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error(`Error reading file: ${error.message}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines; logs an error message if reading fails."
  },
  {
    "id": 1305,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(`Error reading or parsing file: ${error.message}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the given file path and returns its contents as a JavaScript object, logging an error message if reading or parsing fails."
  },
  {
    "id": 1306,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFileSync(filePath) {\n    if (!fs.existsSync(filePath)) {\n        throw new Error('File not found');\n    }\n    const fileContent = fs.readFileSync(filePath, 'utf8');\n    try {\n        return JSON.parse(fileContent);\n    } catch (error) {\n        throw new Error('Invalid JSON format');\n    }\n}\n```",
    "summary": "Reads a JSON file synchronously and returns its content as a JavaScript object, throwing an error for missing files or invalid JSON."
  },
  {
    "id": 1307,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns an array of non-empty lines, logging an error if the file cannot be read."
  },
  {
    "id": 1308,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and parses its contents as JSON, returning the parsed object or null if an error occurs."
  },
  {
    "id": 1309,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error(`Error reading file from disk: ${error}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its content as an array of lines."
  },
  {
    "id": 1310,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its contents as an array of lines, logging an error if reading fails."
  },
  {
    "id": 1311,
    "code": "```javascript\nconst fs = require('fs');\nconst path = require('path');\n\nfunction readAndCountWords(filePath) {\n  if (!fs.existsSync(filePath)) {\n    throw new Error('File does not exist');\n  }\n  \n  const ext = path.extname(filePath);\n  if (ext !== '.txt') {\n    throw new Error('Unsupported file type');\n  }\n\n  const content = fs.readFileSync(filePath, 'utf-8');\n  const words = content.split(/\\s+/).filter(word => word.length > 0);\n  return words.length;\n}\n```",
    "summary": "Reads a text file from the given path and returns the count of words in the file."
  },
  {
    "id": 1312,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a JSON file from a specified path and returns its contents as a JavaScript object."
  },
  {
    "id": 1313,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}\n```",
    "summary": "Reads a file and converts its contents to uppercase, then invokes a callback with the result."
  },
  {
    "id": 1314,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseErr) {\n            callback(parseErr, null);\n        }\n    });\n}\n```",
    "summary": "Reads a file from the specified path and parses its content as JSON, returning the result via a callback."
  },
  {
    "id": 1315,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                const lines = data.split('\\n');\n                resolve(lines);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines using a Promise."
  },
  {
    "id": 1316,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a file synchronously and returns its contents as an array of lines."
  },
  {
    "id": 1317,
    "code": "function readTextFile(filePath, callback) {\n    const fs = require('fs');\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            callback(null, data);\n        }\n    });\n}",
    "summary": "Reads a text file at the given path and passes its content to a callback function."
  },
  {
    "id": 1318,
    "code": "const fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}",
    "summary": "Reads a file synchronously and returns its contents as an array of lines."
  },
  {
    "id": 1319,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously from the specified path and parses its contents as JSON, returning the parsed object or null if an error occurs."
  },
  {
    "id": 1320,
    "code": "const fs = require('fs');\n\nfunction readFileAndLogLines(filePath) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            console.error('Error reading file:', err);\n            return;\n        }\n        const lines = data.split('\\n');\n        lines.forEach((line, index) => {\n            console.log(`Line ${index + 1}: ${line}`);\n        });\n    });\n}",
    "summary": "Reads a file asynchronously and logs each line with its line number to the console."
  },
  {
    "id": 1321,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseErr) {\n            callback(parseErr);\n        }\n    });\n}\n```",
    "summary": "Reads a file's content as JSON and passes the result or error to a callback function."
  },
  {
    "id": 1322,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperSync(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.toUpperCase();\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content in uppercase, logging errors if the read fails."
  },
  {
    "id": 1323,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines."
  },
  {
    "id": 1324,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFileSync(filePath) {\n    if (!fs.existsSync(filePath)) {\n        throw new Error('File not found');\n    }\n    const fileContent = fs.readFileSync(filePath, 'utf8');\n    try {\n        return JSON.parse(fileContent);\n    } catch (error) {\n        throw new Error('Invalid JSON format');\n    }\n}\n```",
    "summary": "Reads and parses a JSON file synchronously, throwing an error if the file is not found or the JSON is invalid."
  },
  {
    "id": 1325,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}\n```",
    "summary": "Reads a file and converts its content to uppercase, then passes the result to a callback function."
  },
  {
    "id": 1326,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading the file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines, or logs an error and returns null if reading fails."
  },
  {
    "id": 1327,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content split into lines, handling any read errors."
  },
  {
    "id": 1328,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error(`Error reading file from disk: ${error}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its contents as an array of lines."
  },
  {
    "id": 1329,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the given path and parses its contents as JSON, returning the parsed object or null on failure."
  },
  {
    "id": 1330,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        try {\n            const json = JSON.parse(data);\n            callback(null, json);\n        } catch (parseErr) {\n            callback(parseErr, null);\n        }\n    });\n}\n```",
    "summary": "Reads a file's contents at the given path as a JSON object and returns it via a callback function."
  },
  {
    "id": 1331,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously, parses its contents as JSON, and returns the resulting object."
  },
  {
    "id": 1332,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToArray(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        const lines = data.split('\\n').map(line => line.trim()).filter(line => line.length > 0);\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file and returns its non-empty lines as an array via a callback function."
  },
  {
    "id": 1333,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAndCountLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        const lineCount = data.split(/\\r?\\n/).length;\n        callback(null, lineCount);\n    });\n}\n```",
    "summary": "Reads a file and counts the number of lines, returning the count via a callback."
  },
  {
    "id": 1334,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(`Error reading file: ${err.message}`, null);\n        } else {\n            callback(null, data);\n        }\n    });\n}\n```",
    "summary": "Reads the content of a file at the specified path and returns it via a callback function."
  },
  {
    "id": 1335,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) return callback(err);\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}\n```",
    "summary": "Reads a file and passes its content converted to uppercase to a callback function."
  },
  {
    "id": 1336,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data;\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads and returns the contents of a file at the specified path, handling any read errors."
  },
  {
    "id": 1337,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its contents as a JSON object, handling any read or parse errors."
  },
  {
    "id": 1338,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction appendToFile(filePath, data) {\n    fs.appendFile(filePath, data, 'utf8', (err) => {\n        if (err) {\n            console.error('Error appending to file:', err);\n        } else {\n            console.log('Data successfully appended to file.');\n        }\n    });\n}\n```",
    "summary": "Appends specified data to a file, logging success or error messages."
  },
  {
    "id": 1339,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readLinesFromFile(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data.split('\\n'));\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file asynchronously from the given path and returns its contents as an array of lines."
  },
  {
    "id": 1340,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the specified path, returning its content as a JavaScript object or null if an error occurs."
  },
  {
    "id": 1341,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns an array of non-empty lines."
  },
  {
    "id": 1342,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads the content of a file and returns an array of its lines or logs an error if the file cannot be read."
  },
  {
    "id": 1343,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "This function reads a file from the given path and returns its content as an array of lines."
  },
  {
    "id": 1344,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}\n```",
    "summary": "This function reads a file's content and returns the data converted to uppercase via a callback."
  },
  {
    "id": 1345,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines, or an empty array if an error occurs."
  },
  {
    "id": 1346,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (error) {\n        console.error(`Error reading file from disk: ${error}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the given path and returns an array of non-empty lines."
  },
  {
    "id": 1347,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.toUpperCase();\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file's content and returns it in uppercase, logging an error if the read fails."
  },
  {
    "id": 1348,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (error) {\n        console.error(`Error reading file: ${error.message}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its non-empty lines as an array of strings, handling any read errors gracefully."
  },
  {
    "id": 1349,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUppercase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}\n```",
    "summary": "Reads a file and converts its content to uppercase, returning the result via a callback function."
  },
  {
    "id": 1350,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a file from the given path and parses its content as JSON, returning the parsed object or null in case of an error."
  },
  {
    "id": 1351,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFileSync(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file synchronously, returning its contents as a JavaScript object or null on error."
  },
  {
    "id": 1352,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file synchronously, returning its content as a JavaScript object or null on error."
  },
  {
    "id": 1353,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously from the given path and parses its contents as JSON, returning the result or null if an error occurs."
  },
  {
    "id": 1354,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data.split('\\n'));\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file asynchronously and returns its contents as an array of lines."
  },
  {
    "id": 1355,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').map(line => line.trim()).filter(line => line.length > 0);\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns an array of non-empty, trimmed lines from it."
  },
  {
    "id": 1356,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error(`Error reading file from disk: ${error}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the given path and returns its content as an array of lines."
  },
  {
    "id": 1357,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                const lines = data.split('\\n');\n                resolve(lines);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file asynchronously and returns its contents as an array of lines."
  },
  {
    "id": 1358,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data.split('\\n'));\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file asynchronously and returns its contents as an array of lines."
  },
  {
    "id": 1359,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file synchronously and parses its contents into a JavaScript object, handling any errors that occur."
  },
  {
    "id": 1360,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "This function reads a file synchronously and returns its contents as an array of lines."
  },
  {
    "id": 1361,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing the file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the specified path, returning its contents as a JavaScript object."
  },
  {
    "id": 1362,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(`Error reading or parsing file: ${error.message}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from a specified path, returning the parsed object or null on error."
  },
  {
    "id": 1363,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines, or an empty array if an error occurs."
  },
  {
    "id": 1364,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const fileContent = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(fileContent);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the specified path and parses its contents into a JSON object."
  },
  {
    "id": 1365,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and parses its content as JSON, returning the parsed object or null if an error occurs."
  },
  {
    "id": 1366,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAndCountWords(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n                return;\n            }\n            const wordCount = data.split(/\\s+/).filter(word => word.length > 0).length;\n            resolve(wordCount);\n        });\n    });\n}\n```",
    "summary": "Reads a file asynchronously and counts the number of words, resolving the count in a Promise."
  },
  {
    "id": 1367,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToArray(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (error) {\n        console.error(`Error reading file: ${error.message}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its non-empty lines as an array, handling errors gracefully."
  },
  {
    "id": 1368,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const fileContent = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(fileContent);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error.message);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the given file path and returns its content as a JavaScript object, handling errors if reading or parsing fails."
  },
  {
    "id": 1369,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(`Error reading or parsing file: ${error.message}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the specified path, returning the parsed object or null if an error occurs."
  },
  {
    "id": 1370,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines, handling any read errors."
  },
  {
    "id": 1371,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines."
  },
  {
    "id": 1372,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "Reads the content of a file at a given path and returns it via a callback function."
  },
  {
    "id": 1373,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing the file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and parses its contents as JSON, returning the parsed object or null if an error occurs."
  },
  {
    "id": 1374,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a file from the specified path and returns its contents as an array of lines, handling any read errors gracefully."
  },
  {
    "id": 1375,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its content as an array of lines."
  },
  {
    "id": 1376,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents parsed as JSON, or logs an error and returns null if an error occurs."
  },
  {
    "id": 1377,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the specified path, returning its contents as an object or null if an error occurs."
  },
  {
    "id": 1378,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function synchronously reads a JSON file from the specified path and returns its parsed content or null if an error occurs."
  },
  {
    "id": 1379,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously from the specified path and parses its contents as JSON, returning the parsed object or null if an error occurs."
  },
  {
    "id": 1380,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const fileContent = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(fileContent);\n    } catch (error) {\n        console.error(`Error reading or parsing the file: ${error.message}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the specified path and parses its contents as JSON, returning the parsed object or null on error."
  },
  {
    "id": 1381,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                return reject(err);\n            }\n            resolve(data.split('\\n'));\n        });\n    });\n}\n```",
    "summary": "This function reads a file asynchronously and returns its contents as an array of lines."
  },
  {
    "id": 1382,
    "code": "```javascript\nconst fs = require('fs');\nconst path = require('path');\n\nfunction readJsonFile(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(path.resolve(filePath), 'utf8', (err, data) => {\n            if (err) {\n                return reject(err);\n            }\n            try {\n                const jsonData = JSON.parse(data);\n                resolve(jsonData);\n            } catch (parseError) {\n                reject(parseError);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a JSON file from a given path and returns a promise that resolves to the parsed JSON object."
  },
  {
    "id": 1383,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its content as a JavaScript object."
  },
  {
    "id": 1384,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously from the given path and parses its contents as JSON, handling errors if they occur."
  },
  {
    "id": 1385,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAndReverseLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        const reversedLines = data.split('\\n').map(line => line.split('').reverse().join('')).join('\\n');\n        callback(null, reversedLines);\n    });\n}\n```",
    "summary": "This function reads a file, reverses the content of each line, and returns the result via a callback."
  },
  {
    "id": 1386,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split(/\\r?\\n/);\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines, handling errors gracefully."
  },
  {
    "id": 1387,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.toUpperCase();\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the given path and returns its content converted to uppercase, or logs an error if reading fails."
  },
  {
    "id": 1388,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "Reads the contents of a file specified by `filePath` and executes a callback with the data or error."
  },
  {
    "id": 1389,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines, handling any read errors."
  },
  {
    "id": 1390,
    "code": "const fs = require('fs');\n\nfunction readFileAsJson(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseErr) {\n            callback(parseErr, null);\n        }\n    });\n}",
    "summary": "This function reads a file at a given path and parses its content as JSON, returning the result through a callback."
  },
  {
    "id": 1391,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpper(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}\n```",
    "summary": "Reads a file asynchronously and converts its contents to uppercase before returning via a callback."
  },
  {
    "id": 1392,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a JSON file from the specified path and returns its parsed content, or logs an error if the process fails."
  },
  {
    "id": 1393,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads and parses a JSON file, returning its content or logging an error if the operation fails."
  },
  {
    "id": 1394,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a file from the specified path and returns its content as a JSON object, handling any read or parse errors."
  },
  {
    "id": 1395,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified file path and returns its content as a JavaScript object."
  },
  {
    "id": 1396,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseErr) {\n            callback(parseErr, null);\n        }\n    });\n}\n```",
    "summary": "Reads a file from the specified path and parses its contents as JSON, invoking a callback with any error or the parsed data."
  },
  {
    "id": 1397,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines, handling any read errors gracefully."
  },
  {
    "id": 1398,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines."
  },
  {
    "id": 1399,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseErr) {\n            callback(parseErr, null);\n        }\n    });\n}\n```",
    "summary": "Reads a file and parses its contents as JSON, invoking a callback with the result or error."
  },
  {
    "id": 1400,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "Reads the content of a file asynchronously and returns it through a callback function."
  },
  {
    "id": 1401,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "Reads the contents of a file asynchronously and returns the data via a callback."
  },
  {
    "id": 1402,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}\n```",
    "summary": "Reads a file asynchronously and returns its contents in uppercase through a callback."
  },
  {
    "id": 1403,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (err) {\n        console.error(`Error reading file: ${err.message}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously, returning an array of non-empty lines, and logs an error message if the file cannot be read."
  },
  {
    "id": 1404,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously from the specified path and parses its contents as JSON, returning the resulting object or null if an error occurs."
  },
  {
    "id": 1405,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) return callback(err, null);\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "This function reads a file from the specified path and returns its contents as an array of lines through a callback."
  },
  {
    "id": 1406,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToString(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "Reads a file asynchronously and returns its content as a string via a callback function."
  },
  {
    "id": 1407,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const fileContent = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(fileContent);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously from the given path and parses its content as a JSON object."
  },
  {
    "id": 1408,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the given path and parses its content as JSON, handling errors gracefully."
  },
  {
    "id": 1409,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines using a callback function for error handling."
  },
  {
    "id": 1410,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            callback(null, data);\n        }\n    });\n}\n```",
    "summary": "Reads the content of a file at the specified path and returns it through a callback function."
  },
  {
    "id": 1411,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                return reject(err);\n            }\n            try {\n                const jsonData = JSON.parse(data);\n                resolve(jsonData);\n            } catch (parseErr) {\n                reject(parseErr);\n            }\n        });\n    });\n}\n```",
    "summary": "This function reads a JSON file asynchronously and returns its parsed content as a JavaScript object."
  },
  {
    "id": 1412,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseErr) {\n            callback(parseErr);\n        }\n    });\n}\n```",
    "summary": "This function reads a file and parses its content as JSON, then passes the result or error to a callback."
  },
  {
    "id": 1413,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its contents as an array of lines."
  },
  {
    "id": 1414,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines, handling errors gracefully."
  },
  {
    "id": 1415,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                try {\n                    const jsonData = JSON.parse(data);\n                    resolve(jsonData);\n                } catch (parseErr) {\n                    reject(parseErr);\n                }\n            }\n        });\n    });\n}\n```",
    "summary": "Reads and parses a JSON file from the specified path, returning a promise with the JSON content or an error."
  },
  {
    "id": 1416,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperSync(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.toUpperCase();\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a file synchronously and returns its contents converted to uppercase, logging an error if reading fails."
  },
  {
    "id": 1417,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const fileContent = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(fileContent);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously from a specified path and parses its content as JSON, logging an error if the process fails."
  },
  {
    "id": 1418,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction appendToFile(filePath, data) {\n    try {\n        fs.appendFileSync(filePath, data, 'utf8');\n        console.log('Data successfully appended to file.');\n    } catch (err) {\n        console.error('Error appending to file:', err);\n    }\n}\n```",
    "summary": "This function appends data to a specified file, logging success or errors encountered during the process."
  },
  {
    "id": 1419,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction appendToFile(filePath, data) {\n    fs.appendFile(filePath, data, 'utf8', (err) => {\n        if (err) throw err;\n        console.log('Data was appended to file successfully.');\n    });\n}\n```",
    "summary": "Appends specified data to a file at the given file path, logging a confirmation or throwing an error if unsuccessful."
  },
  {
    "id": 1420,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUppercase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}\n```",
    "summary": "Reads a file and converts its content to uppercase, then returns the result via a callback function."
  },
  {
    "id": 1421,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and parses its content as JSON, returning the parsed object or null if an error occurs."
  },
  {
    "id": 1422,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            callback(null, data);\n        }\n    });\n}\n```",
    "summary": "This function asynchronously reads the contents of a file and passes the data or error to a callback function."
  },
  {
    "id": 1423,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n  return new Promise((resolve, reject) => {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n      if (err) {\n        reject(err);\n        return;\n      }\n      try {\n        const jsonData = JSON.parse(data);\n        resolve(jsonData);\n      } catch (parseError) {\n        reject(parseError);\n      }\n    });\n  });\n}\n```",
    "summary": "Reads a file from the specified path and returns its contents parsed as JSON, or rejects with an error if reading or parsing fails."
  },
  {
    "id": 1424,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines, handling errors if the file cannot be read."
  },
  {
    "id": 1425,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a file synchronously and returns its contents as an array of lines."
  },
  {
    "id": 1426,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines via a callback function."
  },
  {
    "id": 1427,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFileSync(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(`Error reading or parsing file: ${error.message}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file synchronously, returning the resulting object or null on error."
  },
  {
    "id": 1428,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines, handling errors gracefully."
  },
  {
    "id": 1429,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines, handling errors gracefully."
  },
  {
    "id": 1430,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing the file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its parsed content, or logs an error if reading or parsing fails."
  },
  {
    "id": 1431,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFirstLine(filePath) {\n    const data = fs.readFileSync(filePath, 'utf8');\n    return data.split('\\n')[0];\n}\n```",
    "summary": "Reads the first line of a file specified by the given file path."
  },
  {
    "id": 1432,
    "code": "```javascript\nconst fs = require('fs');\nconst path = require('path');\n\n/**\n * Reads a JSON file from the specified path and returns the parsed object.\n * @param {string} filePath - The path to the JSON file.\n * @returns {Object} The parsed JSON object.\n * @throws {Error} If reading the file or parsing fails.\n */\nfunction readJsonFile(filePath) {\n    const absolutePath = path.resolve(filePath);\n    try {\n        const data = fs.readFileSync(absolutePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        throw new Error(`Failed to read or parse JSON file: ${error.message}`);\n    }\n}\n```",
    "summary": "This function reads a JSON file from the specified path and returns the parsed object, throwing an error if reading or parsing fails."
  },
  {
    "id": 1433,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a file synchronously and parses its contents into a JSON object."
  },
  {
    "id": 1434,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUppercase(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.toUpperCase();\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a text file synchronously and returns its content converted to uppercase, handling any errors that occur during the process."
  },
  {
    "id": 1435,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns an array of non-empty lines."
  },
  {
    "id": 1436,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns the parsed object, logging an error if the file cannot be read or parsed."
  },
  {
    "id": 1437,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the specified path, returning the parsed object or null if an error occurs."
  },
  {
    "id": 1438,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its contents as an array of lines."
  },
  {
    "id": 1439,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file, returning its contents as a JavaScript object or null if an error occurs."
  },
  {
    "id": 1440,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines."
  },
  {
    "id": 1441,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously from the specified path and returns its contents as an array of lines."
  },
  {
    "id": 1442,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToArray(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lines = data.split('\\n').filter(line => line.trim() !== '');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file line-by-line into an array, excluding empty lines, and returns the result via a callback."
  },
  {
    "id": 1443,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the specified path and parses its content as JSON, handling any errors that occur."
  },
  {
    "id": 1444,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                return reject(err);\n            }\n            resolve(data.split('\\n'));\n        });\n    });\n}\n```",
    "summary": "Reads a file asynchronously and returns its content as an array of lines."
  },
  {
    "id": 1445,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readAndUppercaseFile(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        const uppercasedData = data.toUpperCase();\n        callback(null, uppercasedData);\n    });\n}\n```",
    "summary": "Reads a file and converts its content to uppercase, then passes the result to a callback function."
  },
  {
    "id": 1446,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseErr) {\n            callback(parseErr, null);\n        }\n    });\n}\n```",
    "summary": "This function reads a JSON file asynchronously and parses its contents into a JavaScript object, invoking a callback with either an error or the parsed data."
  },
  {
    "id": 1447,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error(`Error reading file from disk: ${error}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines, or an empty array if an error occurs."
  },
  {
    "id": 1448,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the specified path into a JavaScript object, handling any errors that occur."
  },
  {
    "id": 1449,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseErr) {\n            callback(parseErr, null);\n        }\n    });\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns the parsed object or error via a callback."
  },
  {
    "id": 1450,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines, or an empty array if an error occurs."
  },
  {
    "id": 1451,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseErr) {\n            callback(parseErr, null);\n        }\n    });\n}\n```",
    "summary": "Reads a file asynchronously, parses its contents as JSON, and returns the result via a callback function."
  },
  {
    "id": 1452,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data.split('\\n'));\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines using Promises."
  },
  {
    "id": 1453,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsync(filePath, encoding = 'utf8') {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, encoding, (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file asynchronously and returns its contents as a Promise, with optional encoding."
  },
  {
    "id": 1454,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines, handling any errors encountered."
  },
  {
    "id": 1455,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error(`Error reading file from disk: ${error}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines."
  },
  {
    "id": 1456,
    "code": "function readFileLines(filePath) {\n    const fs = require('fs');\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n').map(line => line.trim());\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}",
    "summary": "Reads a file from the given path and returns an array of trimmed lines, or an empty array if an error occurs."
  },
  {
    "id": 1457,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAndLogLines(filePath) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            console.error(`Error reading file from disk: ${err}`);\n            return;\n        }\n        const lines = data.split('\\n');\n        lines.forEach((line, index) => {\n            console.log(`Line ${index + 1}: ${line}`);\n        });\n    });\n}\n```",
    "summary": "Reads a file from the specified path and logs each line to the console with its line number."
  },
  {
    "id": 1458,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data.split('\\n'));\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file asynchronously and returns its content as an array of lines."
  },
  {
    "id": 1459,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines, handling errors if the file cannot be read."
  },
  {
    "id": 1460,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction appendToFile(filePath, content) {\n    fs.appendFile(filePath, content, 'utf8', (err) => {\n        if (err) {\n            console.error('Error appending to file:', err);\n        } else {\n            console.log('Content successfully appended to file.');\n        }\n    });\n}\n```",
    "summary": "Appends specified content to a file at the given path, logging success or error messages."
  },
  {
    "id": 1461,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file synchronously from a specified path and parses its content into a JavaScript object."
  },
  {
    "id": 1462,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "Reads the content of a file asynchronously and executes a callback function with the file data or an error."
  },
  {
    "id": 1463,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines, handling errors if the file cannot be read."
  },
  {
    "id": 1464,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(`Error reading or parsing JSON file: ${error.message}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file, returning its content as a JavaScript object or null in case of an error."
  },
  {
    "id": 1465,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFirstLine(filePath, callback) {\n    const stream = fs.createReadStream(filePath, { encoding: 'utf8' });\n    let data = '';\n    let position = 0;\n    let lineBreakIndex;\n\n    stream.on('data', (chunk) => {\n        data += chunk;\n        lineBreakIndex = data.indexOf('\\n', position);\n        if (lineBreakIndex !== -1) {\n            stream.close();\n            callback(null, data.slice(0, lineBreakIndex));\n        }\n        position = data.length;\n    });\n\n    stream.on('error', (err) => callback(err, null));\n    stream.on('close', () => {\n        if (lineBreakIndex === -1) {\n            callback(null, data); // In case the file is a single line\n        }\n    });\n}\n```",
    "summary": "This function reads the first line of a file asynchronously and passes it to a callback function."
  },
  {
    "id": 1466,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            callback(null, data);\n        }\n    });\n}\n```",
    "summary": "Reads the contents of a file asynchronously and passes the data or error to a callback function."
  },
  {
    "id": 1467,
    "code": "const fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}",
    "summary": "Reads a file synchronously and returns its contents as an array of lines."
  },
  {
    "id": 1468,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "Reads the entire content of a file at the given path and returns it via a callback function."
  },
  {
    "id": 1469,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its non-empty lines as an array."
  },
  {
    "id": 1470,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            callback(null, data);\n        }\n    });\n}\n```",
    "summary": "Reads the contents of a file at the specified path and returns it via a callback function."
  },
  {
    "id": 1471,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the given file path, returning the parsed object or null on error."
  },
  {
    "id": 1472,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "This function reads the content of a file at a given path and returns it via a callback function."
  },
  {
    "id": 1473,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "Reads the content of a file asynchronously and passes the data or any error to a callback function."
  },
  {
    "id": 1474,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its contents as a JSON object, handling errors in reading or parsing."
  },
  {
    "id": 1475,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                const lines = data.split('\\n');\n                resolve(lines);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file asynchronously and returns its content as an array of lines."
  },
  {
    "id": 1476,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the given path, parses its contents as JSON, and returns the parsed object or null on failure."
  },
  {
    "id": 1477,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpper(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) return callback(err);\n        const upperData = data.toUpperCase();\n        callback(null, upperData);\n    });\n}\n```",
    "summary": "Reads a file and converts its content to uppercase, returning the result via a callback."
  },
  {
    "id": 1478,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "Reads the content of a file at the given path and executes a callback with the content or an error."
  },
  {
    "id": 1479,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads the contents of a file asynchronously and returns it as a Promise."
  },
  {
    "id": 1480,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines, handling errors if the file cannot be read."
  },
  {
    "id": 1481,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                return reject(err);\n            }\n            const lines = data.split(/\\r?\\n/);\n            resolve(lines);\n        });\n    });\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines using a Promise."
  },
  {
    "id": 1482,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines, handling errors gracefully."
  },
  {
    "id": 1483,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFileSync(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file synchronously and returns its contents as a JavaScript object, handling errors if encountered."
  },
  {
    "id": 1484,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file's contents and returns an array of its lines, handling any read errors."
  },
  {
    "id": 1485,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseErr) {\n            callback(parseErr);\n        }\n    });\n}\n```",
    "summary": "This function reads a file from the specified path and parses its content as JSON, then calls a callback with the parsed data or an error."
  },
  {
    "id": 1486,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and parses its contents as JSON, returning the result or null if an error occurs."
  },
  {
    "id": 1487,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing the file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file synchronously, returning the data or null if an error occurs."
  },
  {
    "id": 1488,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading the file:', err);\n        return [];\n    }\n}\n```",
    "summary": "This function reads a file from a given path and returns its contents as an array of lines, handling any errors that occur."
  },
  {
    "id": 1489,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}\n```",
    "summary": "This function reads a file and returns its content as an array of lines, handling any read errors."
  },
  {
    "id": 1490,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFileSync(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error(`Error reading or parsing file: ${err}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file synchronously and returns its content as a JavaScript object, handling any errors that occur."
  },
  {
    "id": 1491,
    "code": "function readFileLines(filePath, callback) {\n  const fs = require('fs');\n  fs.readFile(filePath, 'utf8', (err, data) => {\n    if (err) {\n      return callback(err, null);\n    }\n    const lines = data.split('\\n');\n    callback(null, lines);\n  });\n}",
    "summary": "Reads a file and returns its content as an array of lines via a callback function."
  },
  {
    "id": 1492,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction countLinesInFile(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        const lineCount = data.split('\\n').length;\n        callback(null, lineCount);\n    });\n}\n```",
    "summary": "This function reads a file and counts the number of lines, returning the result via a callback."
  },
  {
    "id": 1493,
    "code": "```javascript\nconst fs = require('fs');\nconst path = require('path');\n\nfunction readJSONFile(filePath) {\n    if (!fs.existsSync(filePath) || path.extname(filePath) !== '.json') {\n        throw new Error('Invalid file path or file is not a JSON');\n    }\n    const data = fs.readFileSync(filePath, 'utf-8');\n    try {\n        return JSON.parse(data);\n    } catch (error) {\n        throw new Error('Error parsing JSON file');\n    }\n}\n```",
    "summary": "This function reads and parses a JSON file from the specified path, throwing errors for invalid paths or parsing issues."
  },
  {
    "id": 1494,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines, handling any errors encountered."
  },
  {
    "id": 1495,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file at the specified path and returns its contents as an array of lines, handling errors if the file cannot be read."
  },
  {
    "id": 1496,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readTextFile(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            callback(null, data);\n        }\n    });\n}\n```",
    "summary": "Reads a text file asynchronously and passes the content or error to a callback function."
  },
  {
    "id": 1497,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its contents as a JavaScript object, handling errors gracefully."
  },
  {
    "id": 1498,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its contents as a JavaScript object, logging an error if reading or parsing fails."
  },
  {
    "id": 1499,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously from the given path and parses its contents as JSON, returning the result or null on error."
  },
  {
    "id": 1500,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseErr) {\n            callback(parseErr, null);\n        }\n    });\n}\n```",
    "summary": "Reads a file and parses its contents as JSON, invoking a callback with the resulting object or an error."
  },
  {
    "id": 1501,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines, logging an error if the file can't be read."
  },
  {
    "id": 1502,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(`Error reading or parsing file: ${error.message}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the given path and returns its content as a JavaScript object."
  },
  {
    "id": 1503,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a JSON file from the specified path and returns its contents as a JavaScript object."
  },
  {
    "id": 1504,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the specified path and parses its contents as JSON, returning the resulting object or null if an error occurs."
  },
  {
    "id": 1505,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the specified path, returning its content as an object, or null if an error occurs."
  },
  {
    "id": 1506,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    if (!fs.existsSync(filePath)) {\n        throw new Error('File does not exist');\n    }\n\n    const data = fs.readFileSync(filePath, 'utf8');\n    return data.split('\\n').map(line => line.trim());\n}\n```",
    "summary": "This function reads a file and returns its content as an array of trimmed lines."
  },
  {
    "id": 1507,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpper(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data.toUpperCase());\n    });\n}\n```",
    "summary": "Reads a file's content and passes its uppercase version to the provided callback function."
  },
  {
    "id": 1508,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines."
  },
  {
    "id": 1509,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            callback(null, data);\n        }\n    });\n}\n```",
    "summary": "This function reads the content of a file at a given path and returns it via a callback function."
  },
  {
    "id": 1510,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data;\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "This function synchronously reads the contents of a file at a given path and returns the data as a string, logging an error if the read operation fails."
  },
  {
    "id": 1511,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                const lines = data.split('\\n');\n                resolve(lines);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file's contents and returns its lines as an array using Promises."
  },
  {
    "id": 1512,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its contents as a JavaScript object."
  },
  {
    "id": 1513,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error(`Error reading or parsing file: ${err.message}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its contents as a JavaScript object, logging errors if reading or parsing fails."
  },
  {
    "id": 1514,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const fileContent = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(fileContent);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file and returns its content as a JSON object, handling any read or parse errors."
  },
  {
    "id": 1515,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the specified file path, returning the parsed object or null on error."
  },
  {
    "id": 1516,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file at the specified path synchronously and parses its contents as JSON, returning the result or null if an error occurs."
  },
  {
    "id": 1517,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        callback(null, data.toUpperCase());\n    });\n}\n```",
    "summary": "This function reads the contents of a file and converts them to uppercase, returning the result via a callback."
  },
  {
    "id": 1518,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsync(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "This function reads the content of a file asynchronously and passes the result or error to a callback function."
  },
  {
    "id": 1519,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (error) {\n        console.error('Error reading file:', error.message);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file and returns an array of non-empty lines, handling errors that may occur during reading."
  },
  {
    "id": 1520,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file, returning its contents as a JavaScript object or null if an error occurs."
  },
  {
    "id": 1521,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its contents as a JavaScript object, or logs an error if reading or parsing fails."
  },
  {
    "id": 1522,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the specified path, returning the parsed object or null if an error occurs."
  },
  {
    "id": 1523,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJSON(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a file from the specified path and parses its content as JSON, returning the resulting object or null if an error occurs."
  },
  {
    "id": 1524,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the specified path, returning the parsed object or null on error."
  },
  {
    "id": 1525,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines to a callback function."
  },
  {
    "id": 1526,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its contents as a JSON object, handling errors if the file cannot be read or parsed."
  },
  {
    "id": 1527,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (error) {\n        console.error(`Error reading file: ${error.message}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns an array of non-empty lines, handling any errors encountered during reading."
  },
  {
    "id": 1528,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n  return new Promise((resolve, reject) => {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(data.split('\\n'));\n      }\n    });\n  });\n}\n```",
    "summary": "Reads a file asynchronously and returns its contents as an array of lines."
  },
  {
    "id": 1529,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFileSync(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err);\n        return null;\n    }\n}\n```",
    "summary": "This function synchronously reads a JSON file from a given path and returns its parsed content, or logs an error if reading or parsing fails."
  },
  {
    "id": 1530,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                return reject(err);\n            }\n            const lines = data.split('\\n');\n            resolve(lines);\n        });\n    });\n}\n```",
    "summary": "This function reads a file at a given path and returns its contents as an array of lines using promises."
  },
  {
    "id": 1531,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines, handling errors gracefully."
  },
  {
    "id": 1532,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing JSON file:', err);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a JSON file from a specified path and returns its contents as a JavaScript object, handling errors if the file cannot be read or parsed."
  },
  {
    "id": 1533,
    "code": "```javascript\nconst fs = require('fs').promises;\n\nasync function readJsonFile(filePath) {\n  try {\n    const data = await fs.readFile(filePath, 'utf8');\n    return JSON.parse(data);\n  } catch (error) {\n    console.error('Error reading or parsing the JSON file:', error);\n    throw error;\n  }\n}\n```",
    "summary": "This function asynchronously reads a JSON file from the given path, parses its content, and returns the resulting object."
  },
  {
    "id": 1534,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines, handling errors gracefully."
  },
  {
    "id": 1535,
    "code": "const fs = require('fs');\nconst path = require('path');\n\nfunction readJSONFile(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                return reject(err);\n            }\n            try {\n                const parsedData = JSON.parse(data);\n                resolve(parsedData);\n            } catch (parseErr) {\n                reject(parseErr);\n            }\n        });\n    });\n}",
    "summary": "Reads a JSON file from the specified path and returns its content as a JavaScript object."
  },
  {
    "id": 1536,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file, returning its contents as a JavaScript object or null if an error occurs."
  },
  {
    "id": 1537,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                return reject(err);\n            }\n            resolve(data.split('\\n'));\n        });\n    });\n}\n```",
    "summary": "Reads a file at the given path and returns its contents as an array of lines."
  },
  {
    "id": 1538,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a file synchronously from the given path and parses its contents as JSON, returning the result or null on error."
  },
  {
    "id": 1539,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFileSync(filePath) {\n    try {\n        const fileContent = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(fileContent);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file synchronously and parses its content into a JavaScript object, logging any errors encountered."
  },
  {
    "id": 1540,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines, handling errors if the file cannot be read."
  },
  {
    "id": 1541,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "This function reads a file and returns its contents as an array of lines through a callback function."
  },
  {
    "id": 1542,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                return reject(err);\n            }\n            try {\n                const jsonData = JSON.parse(data);\n                resolve(jsonData);\n            } catch (parseErr) {\n                reject(parseErr);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file from the given path and parses its contents as JSON, returning a promise."
  },
  {
    "id": 1543,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a file synchronously from a specified path and parses its contents as JSON, logging an error if the operation fails."
  },
  {
    "id": 1544,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines."
  },
  {
    "id": 1545,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the given path and parses its contents as JSON, returning the result or null if an error occurs."
  },
  {
    "id": 1546,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction appendToFile(filePath, data) {\n    fs.appendFile(filePath, data, 'utf8', (err) => {\n        if (err) {\n            console.error('Error appending to file:', err);\n        } else {\n            console.log('Data successfully appended to file.');\n        }\n    });\n}\n```",
    "summary": "This function appends data to a specified file and logs a success or error message."
  },
  {
    "id": 1547,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAndCountLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        const lineCount = data.split('\\n').length;\n        callback(null, lineCount);\n    });\n}\n```",
    "summary": "Reads a file and counts the number of lines, returning the count through a callback function."
  },
  {
    "id": 1548,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file's content and returns its lines as an array through a callback function."
  },
  {
    "id": 1549,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFileSync(filePath) {\n    try {\n        const fileData = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(fileData);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file synchronously, returning the parsed object or null if an error occurs."
  },
  {
    "id": 1550,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its contents as a JavaScript object, handling errors gracefully."
  },
  {
    "id": 1551,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(`Error reading or parsing file: ${error.message}`);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a JSON file from the specified file path and returns the parsed JSON object, logging an error if reading or parsing fails."
  },
  {
    "id": 1552,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction countLinesInFile(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lineCount = data.split('\\n').length;\n        callback(null, lineCount);\n    });\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the result via a callback function."
  },
  {
    "id": 1553,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "Reads the contents of a file at the given path and returns the data via a callback function."
  },
  {
    "id": 1554,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns an array of non-empty lines, handling errors if the file cannot be read."
  },
  {
    "id": 1555,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its contents as an array of lines."
  },
  {
    "id": 1556,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "This function reads the content of a file at a given path and passes the result or an error to the provided callback."
  },
  {
    "id": 1557,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines, logging an error if the file cannot be read."
  },
  {
    "id": 1558,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const fileContent = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(fileContent);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously from the specified path and parses its content as JSON, returning the result or null if an error occurs."
  },
  {
    "id": 1559,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                return reject(err);\n            }\n            const lines = data.split('\\n');\n            resolve(lines);\n        });\n    });\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines using promises."
  },
  {
    "id": 1560,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        console.log(data);\n        return data;\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads and logs the contents of a file specified by filePath, and returns the content or null if an error occurs."
  },
  {
    "id": 1561,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(`Error reading or parsing file: ${error.message}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the given path and returns its contents as a JavaScript object, logging an error if reading or parsing fails."
  },
  {
    "id": 1562,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction writeObjectToFile(filePath, obj) {\n    const jsonString = JSON.stringify(obj, null, 2);\n    fs.writeFileSync(filePath, jsonString, 'utf8');\n}\n```",
    "summary": "Writes a JavaScript object as a formatted JSON string to a specified file."
  },
  {
    "id": 1563,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseError) {\n            callback(parseError);\n        }\n    });\n}\n```",
    "summary": "This function reads a file from the specified path and parses its content as JSON, returning the result via a callback."
  },
  {
    "id": 1564,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                return reject(err);\n            }\n            try {\n                const jsonData = JSON.parse(data);\n                resolve(jsonData);\n            } catch (parseErr) {\n                reject(parseErr);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file from the specified path and parses its content as JSON, returning a promise that resolves to the parsed object."
  },
  {
    "id": 1565,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(`Error reading or parsing file: ${error.message}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns the parsed object, logging an error if reading or parsing fails."
  },
  {
    "id": 1566,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAndLogLines(filePath) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            console.error('Error reading file:', err);\n            return;\n        }\n        const lines = data.split('\\n');\n        lines.forEach((line, index) => {\n            console.log(`Line ${index + 1}: ${line}`);\n        });\n    });\n}\n```",
    "summary": "Reads a file and logs each line with its corresponding line number to the console."
  },
  {
    "id": 1567,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its non-empty lines as an array of strings."
  },
  {
    "id": 1568,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n                return;\n            }\n            try {\n                const jsonData = JSON.parse(data);\n                resolve(jsonData);\n            } catch (parseError) {\n                reject(parseError);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads and parses a JSON file asynchronously, returning its content as a JavaScript object."
  },
  {
    "id": 1569,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns an array of non-empty lines."
  },
  {
    "id": 1570,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                return reject(err);\n            }\n            try {\n                const jsonData = JSON.parse(data);\n                resolve(jsonData);\n            } catch (parseError) {\n                reject(parseError);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file from the specified path and parses its content as JSON, returning a promise."
  },
  {
    "id": 1571,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads and parses a JSON file from the specified path, returning the parsed object or null in case of an error."
  },
  {
    "id": 1572,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the given path and returns its content as an array of lines, or an empty array if an error occurs."
  },
  {
    "id": 1573,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split(/\\r?\\n/);\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines, handling any errors encountered during the process."
  },
  {
    "id": 1574,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (err) {\n        console.error(`Error reading file: ${err.message}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its non-empty lines as an array, logging an error message if the file reading fails."
  },
  {
    "id": 1575,
    "code": "```javascript\nconst fs = require('fs');\n\n/**\n * Reads a JSON file from the specified path and returns its parsed content.\n * @param {string} filePath - The path to the JSON file.\n * @returns {Object} The parsed JSON content.\n * @throws {Error} If the file cannot be read or parsed.\n */\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        throw new Error(`Unable to read or parse the JSON file: ${error.message}`);\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its parsed content as an object."
  },
  {
    "id": 1576,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines through a callback."
  },
  {
    "id": 1577,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAndLogLines(filePath) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            console.error('Error reading file:', err);\n            return;\n        }\n        const lines = data.split('\\n');\n        lines.forEach((line, index) => {\n            console.log(`Line ${index + 1}: ${line}`);\n        });\n    });\n}\n```",
    "summary": "Reads a file and logs each line to the console with its line number."
  },
  {
    "id": 1578,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines, handling any read errors by logging them and returning an empty array."
  },
  {
    "id": 1579,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileSyncToString(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data;\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "This function synchronously reads a file at the given path and returns its content as a string, logging an error if the read fails."
  },
  {
    "id": 1580,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        callback(null, data.toUpperCase());\n    });\n}\n```",
    "summary": "This function reads a file and returns its content converted to uppercase via a callback."
  },
  {
    "id": 1581,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n  try {\n    const data = fs.readFileSync(filePath, 'utf8');\n    return JSON.parse(data);\n  } catch (error) {\n    console.error('Error reading or parsing file:', error);\n    return null;\n  }\n}\n```",
    "summary": "Reads and parses a JSON file from the specified path, returning its content as a JavaScript object."
  },
  {
    "id": 1582,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const fileContent = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(fileContent);\n    } catch (error) {\n        console.error('Error reading or parsing JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a file at a given path and parses its content as JSON, returning the parsed object or null if an error occurs."
  },
  {
    "id": 1583,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n                return;\n            }\n            try {\n                const jsonData = JSON.parse(data);\n                resolve(jsonData);\n            } catch (parseError) {\n                reject(parseError);\n            }\n        });\n    });\n}\n```",
    "summary": "This function reads and parses a JSON file asynchronously, returning its contents as a JavaScript object."
  },
  {
    "id": 1584,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the given path and returns its content as an array of lines, handling any read errors."
  },
  {
    "id": 1585,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data;\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return null;\n    }\n}\n```",
    "summary": "This function reads and returns the contents of a file specified by its path, handling errors if the file cannot be read."
  },
  {
    "id": 1586,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            callback(null, data);\n        }\n    });\n}\n```",
    "summary": "Reads the content of a file at the specified path and executes a callback with the content or an error."
  },
  {
    "id": 1587,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the specified path and parses its content as JSON, returning the parsed object or null if an error occurs."
  },
  {
    "id": 1588,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing the file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and parses its content as JSON, handling errors gracefully."
  },
  {
    "id": 1589,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its non-empty lines as an array of strings."
  },
  {
    "id": 1590,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction writeJsonToFile(filePath, jsonData) {\n  const jsonString = JSON.stringify(jsonData, null, 2);\n  fs.writeFileSync(filePath, jsonString, 'utf8');\n}\n```",
    "summary": "Writes a JavaScript object as a formatted JSON string to a specified file path."
  },
  {
    "id": 1591,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data;\n    } catch (err) {\n        console.error('Error reading the file:', err);\n        return null;\n    }\n}\n```",
    "summary": "This function reads the contents of a file synchronously given its file path and returns the data or logs an error if the operation fails."
  },
  {
    "id": 1592,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseErr) {\n            callback(parseErr, null);\n        }\n    });\n}\n```",
    "summary": "Reads a file at the given path and parses its content as JSON, returning the result via a callback function."
  },
  {
    "id": 1593,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines through a callback function."
  },
  {
    "id": 1594,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading the file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines, handling errors if the file cannot be read."
  },
  {
    "id": 1595,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and parses its content as JSON, returning the JSON object or null on failure."
  },
  {
    "id": 1596,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns an array of non-empty lines, logging an error if the file cannot be read."
  },
  {
    "id": 1597,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously from the given path and parses its contents as JSON, logging an error if the operation fails."
  },
  {
    "id": 1598,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines."
  },
  {
    "id": 1599,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously, splits its content into an array of lines, and handles any read errors."
  },
  {
    "id": 1600,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}\n```",
    "summary": "Reads a file's content and returns it in uppercase via a callback."
  },
  {
    "id": 1601,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines, or logs an error if reading fails."
  },
  {
    "id": 1602,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(`Error reading or parsing file: ${error.message}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the specified path, returning the data as a JavaScript object or null if an error occurs."
  },
  {
    "id": 1603,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a file synchronously from a given path and parses its content to JSON, returning the parsed object or null if an error occurs."
  },
  {
    "id": 1604,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the given path and returns its contents as an array of lines."
  },
  {
    "id": 1605,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines, handling any read errors."
  },
  {
    "id": 1606,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "Reads the content of a file at a given path and passes the data or error to a callback function."
  },
  {
    "id": 1607,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "Reads the contents of a file asynchronously and passes the data or error to a callback function."
  },
  {
    "id": 1608,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    if (!fs.existsSync(filePath)) {\n        throw new Error('File does not exist');\n    }\n    const data = fs.readFileSync(filePath, 'utf-8');\n    return data.split('\\n');\n}\n```",
    "summary": "Reads a file from the given path and returns its contents as an array of lines."
  },
  {
    "id": 1609,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFileSync(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(`Error reading or parsing file: ${error.message}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file synchronously, returning its contents as a JavaScript object."
  },
  {
    "id": 1610,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines."
  },
  {
    "id": 1611,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the JSON file:', error.message);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the specified path, returning its contents as an object or null if an error occurs."
  },
  {
    "id": 1612,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing the file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the given file path, returning the parsed object or null on error."
  },
  {
    "id": 1613,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its contents as an array of lines, logging an error if file reading fails."
  },
  {
    "id": 1614,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}\n```",
    "summary": "This function reads a text file asynchronously and returns its content in uppercase via a callback."
  },
  {
    "id": 1615,
    "code": "```javascript\nconst fs = require('fs');\n\n/**\n * Reads a text file and returns its content as a string.\n * \n * @param {string} filePath - The path to the text file.\n * @returns {Promise<string>} - A promise that resolves with the file content.\n */\nfunction readFileAsString(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a text file asynchronously and returns its content as a string using a Promise."
  },
  {
    "id": 1616,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data.split('\\n'));\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file asynchronously and returns its content as an array of lines."
  },
  {
    "id": 1617,
    "code": "const fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}",
    "summary": "Reads a file from the specified path and parses its JSON content into a JavaScript object."
  },
  {
    "id": 1618,
    "code": "async function readFileLines(filePath) {\n    const fs = require('fs').promises;\n    try {\n        const data = await fs.readFile(filePath, 'utf-8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}",
    "summary": "Reads a file asynchronously and returns its content as an array of lines."
  },
  {
    "id": 1619,
    "code": "function readFileLines(filePath) {\n    const fs = require('fs');\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}",
    "summary": "This function reads a file and returns its contents as an array of lines."
  },
  {
    "id": 1620,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file, returning the parsed object or null on error."
  },
  {
    "id": 1621,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines through a callback function."
  },
  {
    "id": 1622,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the specified path, returning the parsed object or null if an error occurs."
  },
  {
    "id": 1623,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file and returns its contents as a JavaScript object, handling errors gracefully."
  },
  {
    "id": 1624,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, callback) {\n  fs.readFile(filePath, 'utf8', (err, data) => {\n    if (err) {\n      callback(err, null);\n    } else {\n      callback(null, data);\n    }\n  });\n}\n```",
    "summary": "This function reads the contents of a file asynchronously and executes a callback with the data or an error if one occurs."
  },
  {
    "id": 1625,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data.split('\\n'));\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file asynchronously and returns its content as an array of lines."
  },
  {
    "id": 1626,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its content as an array of lines."
  },
  {
    "id": 1627,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data;\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "This function reads the contents of a file synchronously and returns it; logs an error and returns null if reading fails."
  },
  {
    "id": 1628,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(`Error reading file from disk: ${error}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its parsed content, handling errors gracefully."
  },
  {
    "id": 1629,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines."
  },
  {
    "id": 1630,
    "code": "```javascript\nconst fs = require('fs');\n\n/**\n * Reads a text file and returns its content as a string.\n * @param {string} filePath - The path to the text file.\n * @returns {Promise<string>} A promise that resolves to the content of the file.\n */\nasync function readFileContent(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a text file asynchronously and returns its content as a string using promises."
  },
  {
    "id": 1631,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads and parses a JSON file from a specified path, returning the parsed object or null if an error occurs."
  },
  {
    "id": 1632,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the given path and returns its content as an array of lines."
  },
  {
    "id": 1633,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines via a callback."
  },
  {
    "id": 1634,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFirstLine(filePath, callback) {\n    const stream = fs.createReadStream(filePath, { encoding: 'utf8' });\n    let data = '';\n    let position = 0;\n    let index;\n\n    stream.on('data', chunk => {\n        data += chunk;\n        index = data.indexOf('\\n');\n        if (index !== -1) {\n            stream.close();\n        }\n    });\n\n    stream.on('close', () => {\n        callback(data.slice(0, index));\n    });\n\n    stream.on('error', err => {\n        callback(null, err);\n    });\n}\n```",
    "summary": "Reads the first line from a file asynchronously using a stream and passes it to a callback function."
  },
  {
    "id": 1635,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its contents as an array of lines."
  },
  {
    "id": 1636,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error(`Error reading file: ${error.message}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines."
  },
  {
    "id": 1637,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(`Error reading or parsing file: ${error.message}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file synchronously and parses its content into a JavaScript object, logging errors if any occur."
  },
  {
    "id": 1638,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines, handling errors gracefully."
  },
  {
    "id": 1639,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAndReturnLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines."
  },
  {
    "id": 1640,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns the parsed object, handling errors gracefully."
  },
  {
    "id": 1641,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns the parsed object, logging any errors encountered."
  },
  {
    "id": 1642,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a file from the specified path and parses its content as JSON, returning the resulting object or null in case of an error."
  },
  {
    "id": 1643,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously from the given path and returns its content as an array of lines, handling errors gracefully."
  },
  {
    "id": 1644,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its non-empty lines as an array of strings."
  },
  {
    "id": 1645,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its contents as a JavaScript object, handling errors gracefully."
  },
  {
    "id": 1646,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFileSync(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing the file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file synchronously and returns the parsed object, logging an error if reading or parsing fails."
  },
  {
    "id": 1647,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToArray(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) return callback(err, null);\n        const lines = data.split('\\n').map(line => line.trim()).filter(line => line.length > 0);\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file and returns its contents as a trimmed, non-empty string array through a callback."
  },
  {
    "id": 1648,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from a specified path synchronously and parses its content as JSON, returning the resulting object or null on error."
  },
  {
    "id": 1649,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                const lines = data.split('\\n');\n                resolve(lines);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines using a promise."
  },
  {
    "id": 1650,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAndReverse(filePath, callback) {\n  fs.readFile(filePath, 'utf8', (err, data) => {\n    if (err) {\n      callback(err, null);\n      return;\n    }\n    const reversedContent = data.split('').reverse().join('');\n    callback(null, reversedContent);\n  });\n}\n```",
    "summary": "Reads a file and returns its content reversed through a callback function."
  },
  {
    "id": 1651,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from disk synchronously and returns its contents as an array of lines."
  },
  {
    "id": 1652,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from a given path and parses its content as JSON, returning the parsed object or null if an error occurs."
  },
  {
    "id": 1653,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAndCountLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        const lineCount = data.split('\\n').length;\n        callback(null, lineCount);\n    });\n}\n```",
    "summary": "Reads a file asynchronously and counts the number of lines, returning the result via a callback."
  },
  {
    "id": 1654,
    "code": "function readFileAndCountLines(filePath, callback) {\n    const fs = require('fs');\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        const lineCount = data.split('\\n').length;\n        callback(null, lineCount);\n    });\n}",
    "summary": "Reads a file and counts the number of lines, then returns the result via a callback function."
  },
  {
    "id": 1655,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines."
  },
  {
    "id": 1656,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFirstLine(filePath, callback) {\n    const stream = fs.createReadStream(filePath, { encoding: 'utf8' });\n    let data = '';\n    stream.on('data', chunk => {\n        data += chunk;\n        const indexOfLineBreak = data.indexOf('\\n');\n        if (indexOfLineBreak !== -1) {\n            stream.destroy();\n            callback(null, data.slice(0, indexOfLineBreak));\n        }\n    });\n    stream.on('error', err => callback(err));\n    stream.on('close', () => {\n        if (!data.includes('\\n')) {\n            callback(null, data);\n        }\n    });\n}\n```",
    "summary": "Reads the first line of a file asynchronously and returns it via a callback."
  },
  {
    "id": 1657,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its contents as an array of lines."
  },
  {
    "id": 1658,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}\n```",
    "summary": "This function reads a file's contents asynchronously and converts the text to uppercase before invoking a callback with the result."
  },
  {
    "id": 1659,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "This function reads a file synchronously and returns its content as an array of lines."
  },
  {
    "id": 1660,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error(`Error reading file from disk: ${error}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines."
  },
  {
    "id": 1661,
    "code": "async function readJSONFile(filePath) {\n    const fs = require('fs').promises;\n    try {\n        const data = await fs.readFile(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing JSON file:', error);\n        throw error;\n    }\n}",
    "summary": "This function asynchronously reads a JSON file and returns its content as a JavaScript object."
  },
  {
    "id": 1662,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines, handling any read errors gracefully."
  },
  {
    "id": 1663,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines through a callback function."
  },
  {
    "id": 1664,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFileSync(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing JSON file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file synchronously from the given path and parses its content into a JavaScript object, returning null if an error occurs."
  },
  {
    "id": 1665,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}\n```",
    "summary": "Reads a file's content and converts it to uppercase, returning the result via a callback function."
  },
  {
    "id": 1666,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseError) {\n            callback(parseError, null);\n        }\n    });\n}\n```",
    "summary": "Reads a file asynchronously, parses its content as JSON, and returns the result through a callback."
  },
  {
    "id": 1667,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseError) {\n            callback(parseError, null);\n        }\n    });\n}\n```",
    "summary": "Reads a JSON file and invokes a callback with parsed data or an error."
  },
  {
    "id": 1668,
    "code": "async function readFileContent(filePath) {\n  const fs = require('fs').promises;\n  try {\n    const data = await fs.readFile(filePath, 'utf8');\n    return data;\n  } catch (error) {\n    throw new Error(`Error reading file: ${error.message}`);\n  }\n}",
    "summary": "This function asynchronously reads the contents of a file at a given path and returns it as a string."
  },
  {
    "id": 1669,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines, handling errors if they occur."
  },
  {
    "id": 1670,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error(`Error reading file: ${error.message}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines, logging any errors encountered."
  },
  {
    "id": 1671,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from a specified path, returning its content as an object or null if an error occurs."
  },
  {
    "id": 1672,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines, handling errors gracefully."
  },
  {
    "id": 1673,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "Reads the contents of a file at the specified path and returns the data or error via a callback function."
  },
  {
    "id": 1674,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n                return;\n            }\n            const lines = data.split(/\\r?\\n/);\n            resolve(lines);\n        });\n    });\n}\n```",
    "summary": "Reads a file asynchronously and returns its content as an array of lines."
  },
  {
    "id": 1675,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                return reject(err);\n            }\n            const lines = data.split('\\n');\n            resolve(lines);\n        });\n    });\n}\n```",
    "summary": "Reads a file at the specified path and returns its contents as an array of lines."
  },
  {
    "id": 1676,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseErr) {\n            callback(parseErr, null);\n        }\n    });\n}\n```",
    "summary": "Reads a file from the specified path and parses its contents into a JSON object, executing a callback with the result."
  },
  {
    "id": 1677,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath, callback) {\n  fs.readFile(filePath, 'utf8', (err, data) => {\n    if (err) return callback(err);\n    try {\n      const json = JSON.parse(data);\n      callback(null, json);\n    } catch (parseErr) {\n      callback(parseErr);\n    }\n  });\n}\n```",
    "summary": "Reads a file at the specified path and parses its content as JSON, passing the result to a callback function."
  },
  {
    "id": 1678,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file asynchronously and returns its content as an array of lines via a callback function."
  },
  {
    "id": 1679,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction appendToFile(filename, content) {\n    fs.appendFile(filename, content, 'utf8', (err) => {\n        if (err) throw err;\n        console.log('Content appended successfully!');\n    });\n}\n```",
    "summary": "Appends specified content to a file, creating the file if it does not exist, and logs a success message."
  },
  {
    "id": 1680,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines, handling errors gracefully."
  },
  {
    "id": 1681,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the specified path and parses its contents as JSON, handling errors if reading or parsing fails."
  },
  {
    "id": 1682,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines, or logs an error if reading fails."
  },
  {
    "id": 1683,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously, parses its content as JSON, and returns the resulting object or null if an error occurs."
  },
  {
    "id": 1684,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data.split('\\n'));\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines using a Promise."
  },
  {
    "id": 1685,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error.message);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the specified path, returning the JavaScript object representation or null if an error occurs."
  },
  {
    "id": 1686,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFileSync(filePath) {\n    try {\n        const fileContent = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(fileContent);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file synchronously and returns its parsed content, logging an error if reading or parsing fails."
  },
  {
    "id": 1687,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the given path and returns its content as a JavaScript object, logging errors if the file cannot be read or parsed."
  },
  {
    "id": 1688,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data.split('\\n'));\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file specified by `filePath` and returns a promise that resolves with an array of lines from the file."
  },
  {
    "id": 1689,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines or logs an error if reading fails."
  },
  {
    "id": 1690,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const fileContents = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(fileContents);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously from a given path and parses its contents as JSON, handling errors if they occur."
  },
  {
    "id": 1691,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n                return;\n            }\n            try {\n                const jsonData = JSON.parse(data);\n                resolve(jsonData);\n            } catch (parseErr) {\n                reject(parseErr);\n            }\n        });\n    });\n}\n```",
    "summary": "This function reads a JSON file asynchronously and returns a promise that resolves with the parsed JSON data."
  },
  {
    "id": 1692,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines, handling errors if the file cannot be read."
  },
  {
    "id": 1693,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAndCountLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        const lineCount = data.split('\\n').length;\n        callback(null, lineCount);\n    });\n}\n```",
    "summary": "Reads a file and counts the number of lines, returning the count via a callback."
  },
  {
    "id": 1694,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error.message);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the specified path and parses its content as JSON, handling errors if they occur."
  },
  {
    "id": 1695,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and parses its content as JSON, returning the parsed object or null if an error occurs."
  },
  {
    "id": 1696,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the specified path and parses its contents as JSON, returning the resulting object or null if an error occurs."
  },
  {
    "id": 1697,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "This function reads the content of a file at a given path and executes a callback with the file data or an error."
  },
  {
    "id": 1698,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                try {\n                    const jsonData = JSON.parse(data);\n                    resolve(jsonData);\n                } catch (parseErr) {\n                    reject(parseErr);\n                }\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file from the given path and parses its content as JSON, returning a Promise."
  },
  {
    "id": 1699,
    "code": "```javascript\nconst fs = require('fs');\nconst path = require('path');\n\nfunction readFileToJson(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(path.resolve(filePath), 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n                return;\n            }\n            try {\n                const jsonData = JSON.parse(data);\n                resolve(jsonData);\n            } catch (parseError) {\n                reject(parseError);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file at the given path and parses its content as JSON, returning a Promise that resolves with the parsed data or rejects with an error."
  },
  {
    "id": 1700,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns the parsed object, or logs an error if unsuccessful."
  },
  {
    "id": 1701,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the given path and returns its contents as an array of lines."
  },
  {
    "id": 1702,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                return reject(err);\n            }\n            const lines = data.split('\\n');\n            resolve(lines);\n        });\n    });\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines using promises in Node.js."
  },
  {
    "id": 1703,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the given path and returns its contents as a JSON object, or logs an error and returns null if an error occurs."
  },
  {
    "id": 1704,
    "code": "```javascript\nfunction readFileAsJSON(filePath, callback) {\n    const fs = require('fs');\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseErr) {\n            callback(parseErr, null);\n        }\n    });\n}\n```",
    "summary": "Reads a file from the specified path and parses its contents as JSON, returning the result via a callback."
  },
  {
    "id": 1705,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error(`Error reading file from disk: ${error}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the given path and returns its contents as an array of lines, handling errors if the file cannot be read."
  },
  {
    "id": 1706,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}\n```",
    "summary": "Reads a file's content and converts it to uppercase, then passes the result to a callback function."
  },
  {
    "id": 1707,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n        } else {\n            callback(null, data);\n        }\n    });\n}\n```",
    "summary": "Reads the contents of a file asynchronously and returns the data or error through a callback."
  },
  {
    "id": 1708,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its content as a JavaScript object."
  },
  {
    "id": 1709,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                try {\n                    const jsonData = JSON.parse(data);\n                    resolve(jsonData);\n                } catch (parseErr) {\n                    reject(parseErr);\n                }\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file at the given path and parses its content as JSON, returning a promise that resolves to the JSON object."
  },
  {
    "id": 1710,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing the file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its contents as a JavaScript object."
  },
  {
    "id": 1711,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its contents as an array of lines, or logs an error if reading fails."
  },
  {
    "id": 1712,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a file from the given file path and returns its content as an array of lines."
  },
  {
    "id": 1713,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the specified path, returning the parsed object or null on error."
  },
  {
    "id": 1714,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and parses its contents as JSON, handling errors if reading or parsing fails."
  },
  {
    "id": 1715,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error('Error reading file:', error.message);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines, handling errors gracefully."
  },
  {
    "id": 1716,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns an array of non-empty, trimmed lines, handling errors gracefully."
  },
  {
    "id": 1717,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a file synchronously and returns its content as an array of lines."
  },
  {
    "id": 1718,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines, handling errors gracefully."
  },
  {
    "id": 1719,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                const lines = data.split('\\n');\n                resolve(lines);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads a file asynchronously and returns its contents as an array of lines."
  },
  {
    "id": 1720,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseErr) {\n            callback(parseErr, null);\n        }\n    });\n}\n```",
    "summary": "Reads and parses a JSON file, then passes the parsed data or error to a callback function."
  },
  {
    "id": 1721,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        try {\n            const jsonData = JSON.parse(data);\n            callback(null, jsonData);\n        } catch (parseErr) {\n            callback(parseErr, null);\n        }\n    });\n}\n```",
    "summary": "This function reads a file at a given path and parses its content as JSON, returning the result via a callback."
  },
  {
    "id": 1722,
    "code": "```javascript\nconst fs = require('fs');\nconst path = require('path');\n\nfunction readJsonFile(filePath) {\n    return new Promise((resolve, reject) => {\n        const absolutePath = path.resolve(filePath);\n        fs.readFile(absolutePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                try {\n                    const jsonData = JSON.parse(data);\n                    resolve(jsonData);\n                } catch (parseErr) {\n                    reject(parseErr);\n                }\n            }\n        });\n    });\n}\n```",
    "summary": "This function reads a JSON file from a given path and returns its content as a JavaScript object using a Promise."
  },
  {
    "id": 1723,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFirstLineOfFile(filePath, callback) {\n    const stream = fs.createReadStream(filePath, { encoding: 'utf8' });\n    let data = '';\n    stream.on('data', chunk => {\n        data += chunk;\n        const lines = data.split('\\n');\n        if (lines.length > 1) {\n            stream.destroy();\n            callback(null, lines[0]);\n        }\n    });\n    stream.on('error', err => {\n        callback(err);\n    });\n    stream.on('end', () => {\n        if (!data.includes('\\n')) {\n            callback(null, data); // handle file with a single line\n        }\n    });\n}\n```",
    "summary": "Reads the first line of a specified file and passes it to a callback function."
  },
  {
    "id": 1724,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').map(line => line.trim()).filter(line => line.length > 0);\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns an array of non-empty, trimmed lines."
  },
  {
    "id": 1725,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split(/\\r?\\n/);\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines, or logs an error if reading fails."
  },
  {
    "id": 1726,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsString(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "Reads the contents of a file as a string using a callback for asynchronous handling."
  },
  {
    "id": 1727,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and parses its contents as JSON, returning the result or null on error."
  },
  {
    "id": 1728,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction countLinesInFile(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lineCount = data.split('\\n').length;\n        callback(null, lineCount);\n    });\n}\n```",
    "summary": "This function reads a file and counts the number of lines, returning the result via a callback."
  },
  {
    "id": 1729,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its content as a JavaScript object, or logs an error if reading or parsing fails."
  },
  {
    "id": 1730,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines, handling errors if the file cannot be read."
  },
  {
    "id": 1731,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and parses its contents as JSON, logging an error if the process fails."
  },
  {
    "id": 1732,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its content as an array of lines."
  },
  {
    "id": 1733,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines using a callback function."
  },
  {
    "id": 1734,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n  try {\n    const data = fs.readFileSync(filePath, 'utf8');\n    return JSON.parse(data);\n  } catch (error) {\n    console.error('Error reading or parsing JSON file:', error);\n    return null;\n  }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns the parsed object, handling errors if they occur."
  },
  {
    "id": 1735,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split(/\\r?\\n/);\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines, handling errors if the file cannot be read."
  },
  {
    "id": 1736,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the specified path and returns its content as an array of lines."
  },
  {
    "id": 1737,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously from the given path and parses its content as JSON, returning the result or null if an error occurs."
  },
  {
    "id": 1738,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines, handling any read errors gracefully."
  },
  {
    "id": 1739,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines via a callback function."
  },
  {
    "id": 1740,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data;\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads and returns the contents of a file synchronously from the specified file path, logging an error if the operation fails."
  },
  {
    "id": 1741,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "Reads the content of a file and passes it to a callback function, handling errors if they occur."
  },
  {
    "id": 1742,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a file synchronously from a given path and parses its contents as JSON, returning the parsed object or logging an error if unsuccessful."
  },
  {
    "id": 1743,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath) {\n    try {\n        const fileContent = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(fileContent);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as a JSON object, logging an error if reading or parsing fails."
  },
  {
    "id": 1744,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                return reject(err);\n            }\n            try {\n                const jsonData = JSON.parse(data);\n                resolve(jsonData);\n            } catch (parseErr) {\n                reject(parseErr);\n            }\n        });\n    });\n}\n```",
    "summary": "This function reads a JSON file asynchronously and returns its content as a JavaScript object."
  },
  {
    "id": 1745,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing JSON file:', error.message);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file synchronously and returns its parsed contents, handling errors gracefully."
  },
  {
    "id": 1746,
    "code": "async function readFileAsJson(filePath) {\n    const fs = require('fs').promises;\n    try {\n        const data = await fs.readFile(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        throw error;\n    }\n}",
    "summary": "This function asynchronously reads a file at a given path and parses its contents as JSON."
  },
  {
    "id": 1747,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a file synchronously and parses its content as JSON, returning the result or null if an error occurs."
  },
  {
    "id": 1748,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads a file and returns its contents as an array of lines through a callback function."
  },
  {
    "id": 1749,
    "code": "async function readFileContent(filePath) {\n    const fs = require('fs').promises;\n    try {\n        const data = await fs.readFile(filePath, 'utf8');\n        return data;\n    } catch (error) {\n        throw new Error(`Unable to read file: ${error.message}`);\n    }\n}",
    "summary": "This function asynchronously reads the content of a file specified by its path and returns it as a string."
  },
  {
    "id": 1750,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines."
  },
  {
    "id": 1751,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n  fs.readFile(filePath, 'utf8', (err, data) => {\n    if (err) {\n      callback(err, null);\n      return;\n    }\n    callback(null, data);\n  });\n}\n```",
    "summary": "This function reads the content of a file at a specified path and returns the data or an error through a callback."
  },
  {
    "id": 1752,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines, handling errors if the file cannot be read."
  },
  {
    "id": 1753,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf-8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns an array of non-empty lines, logging any errors encountered."
  },
  {
    "id": 1754,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "Reads the content of a file at a given path and executes a callback with the data or error."
  },
  {
    "id": 1755,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the specified path, returning the parsed object or null if an error occurs."
  },
  {
    "id": 1756,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously and parses its content as JSON, returning the parsed object or null on failure."
  },
  {
    "id": 1757,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error(`Error reading file from disk: ${error}`);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file's contents synchronously and returns an array of its lines."
  },
  {
    "id": 1758,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                try {\n                    const jsonData = JSON.parse(data);\n                    resolve(jsonData);\n                } catch (parseErr) {\n                    reject(parseErr);\n                }\n            }\n        });\n    });\n}\n```",
    "summary": "This function reads and parses a JSON file asynchronously, returning a promise with the JSON object or an error."
  },
  {
    "id": 1759,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                return reject(err);\n            }\n            const lines = data.split('\\n');\n            resolve(lines);\n        });\n    });\n}\n```",
    "summary": "Reads a file and returns its content as an array of lines using Promises."
  },
  {
    "id": 1760,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n                return;\n            }\n            try {\n                const jsonData = JSON.parse(data);\n                resolve(jsonData);\n            } catch (parseErr) {\n                reject(parseErr);\n            }\n        });\n    });\n}\n```",
    "summary": "Reads and parses a JSON file asynchronously, returning its content as a JavaScript object."
  },
  {
    "id": 1761,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously from the specified path and parses its content as JSON, logging an error if reading or parsing fails."
  },
  {
    "id": 1762,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUppercase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) return callback(err);\n        const upperCaseData = data.toUpperCase();\n        callback(null, upperCaseData);\n    });\n}\n```",
    "summary": "Reads a file's content and converts it to uppercase, returning the result via a callback."
  },
  {
    "id": 1763,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, 'utf8', (err, data) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data.split('\\n'));\n            }\n        });\n    });\n}\n```",
    "summary": "Reads the content of a file at the specified path and returns an array of its lines."
  },
  {
    "id": 1764,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n  try {\n    const data = fs.readFileSync(filePath, 'utf8');\n    return data.split('\\n').filter(line => line.trim() !== '');\n  } catch (err) {\n    console.error(`Error reading file from disk: ${err}`);\n    return [];\n  }\n}\n```",
    "summary": "Reads a file and returns an array of non-empty lines, handling any read errors gracefully."
  },
  {
    "id": 1765,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').map(line => line.trim());\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the given path and returns an array of trimmed lines, or an empty array if an error occurs."
  },
  {
    "id": 1766,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file at the given path and returns its contents as an array of lines, or an empty array if an error occurs."
  },
  {
    "id": 1767,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the specified path, parses its content as JSON, and returns the resulting object or null if an error occurs."
  },
  {
    "id": 1768,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (error) {\n        console.error('Error reading file:', error);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its content as an array of lines, handling errors gracefully."
  },
  {
    "id": 1769,
    "code": "const fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}",
    "summary": "Reads a file and returns its contents as an array of lines."
  },
  {
    "id": 1770,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file from the given path and returns its content as an array of lines."
  },
  {
    "id": 1771,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFileSync(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "This function synchronously reads a JSON file from a specified path and returns its parsed contents or logs an error if reading or parsing fails."
  },
  {
    "id": 1772,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').map(line => line.trim()).filter(line => line.length > 0);\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns an array of non-empty, trimmed lines from the file."
  },
  {
    "id": 1773,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "This function reads a file and returns its content as an array of lines through a callback."
  },
  {
    "id": 1774,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFileSync(filePath) {\n    try {\n        const fileContent = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(fileContent);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file synchronously, returning its contents as an object or null if an error occurs."
  },
  {
    "id": 1775,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').map(line => line.trim()).filter(line => line.length > 0);\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns an array of non-empty trimmed lines."
  },
  {
    "id": 1776,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously from the specified path and parses its content as JSON, logging any errors encountered."
  },
  {
    "id": 1777,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFileSync(filePath) {\n    if (!fs.existsSync(filePath)) {\n        throw new Error('File does not exist.');\n    }\n    const fileContents = fs.readFileSync(filePath, 'utf8');\n    try {\n        return JSON.parse(fileContents);\n    } catch (error) {\n        throw new Error('Invalid JSON format.');\n    }\n}\n```",
    "summary": "Reads and parses a JSON file synchronously, throwing an error if the file does not exist or contains invalid JSON."
  },
  {
    "id": 1778,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing JSON file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its content as a JavaScript object, logging an error if reading or parsing fails."
  },
  {
    "id": 1779,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUppercase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err, null);\n        }\n        const uppercasedData = data.toUpperCase();\n        callback(null, uppercasedData);\n    });\n}\n```",
    "summary": "This function reads a file's content and returns the data converted to uppercase via a callback."
  },
  {
    "id": 1780,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJSONFile(filePath) {\n    try {\n        const fileContent = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(fileContent);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error.message);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns its parsed content as an object, logging an error if any issue occurs."
  },
  {
    "id": 1781,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n  try {\n    const data = fs.readFileSync(filePath, 'utf8');\n    return JSON.parse(data);\n  } catch (error) {\n    console.error('Error reading or parsing JSON file:', error);\n    return null;\n  }\n}\n```",
    "summary": "This function reads a JSON file from a specified path and returns its contents as a JavaScript object."
  },
  {
    "id": 1782,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file from the specified path, returning the parsed object or null if an error occurs."
  },
  {
    "id": 1783,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJSON(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file at the given path and parses its content as JSON, returning the object or null if an error occurs."
  },
  {
    "id": 1784,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction appendTextToFile(filePath, text) {\n    fs.appendFile(filePath, text + '\\n', (err) => {\n        if (err) {\n            console.error('Error appending text to file:', err);\n        } else {\n            console.log('Text appended successfully.');\n        }\n    });\n}\n```",
    "summary": "Appends a given text to the end of a specified file, creating a new line, and logs success or error messages."
  },
  {
    "id": 1785,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from the specified path and returns the parsed object, logging an error if reading or parsing fails."
  },
  {
    "id": 1786,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContent(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, data);\n    });\n}\n```",
    "summary": "This function reads the content of a file at a given path and passes it to a callback function."
  },
  {
    "id": 1787,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error(\"Error reading or parsing the file:\", error);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a file from the specified path and parses its contents as JSON, returning the resulting object or null on failure."
  },
  {
    "id": 1788,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath) {\n  try {\n    const data = fs.readFileSync(filePath, 'utf8');\n    return data;\n  } catch (error) {\n    console.error('Error reading file:', error);\n    return null;\n  }\n}\n```",
    "summary": "Reads and returns the contents of a file at the specified path, or logs an error if reading fails."
  },
  {
    "id": 1789,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        const lines = data.split('\\n');\n        callback(null, lines);\n    });\n}\n```",
    "summary": "Reads the content of a file and provides its lines as an array to a callback function."
  },
  {
    "id": 1790,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing the file:', err);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file synchronously from a given path and parses its content as JSON."
  },
  {
    "id": 1791,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n').filter(line => line.trim() !== '');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file and returns an array of non-empty lines."
  },
  {
    "id": 1792,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('Error reading or parsing file:', err.message);\n        return null;\n    }\n}\n```",
    "summary": "This function reads a file from the given path and returns its contents as a JSON object, logging an error if the operation fails."
  },
  {
    "id": 1793,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileContents(filePath) {\n  try {\n    const data = fs.readFileSync(filePath, 'utf8');\n    return data;\n  } catch (err) {\n    console.error('Error reading file:', err);\n    return null;\n  }\n}\n```",
    "summary": "Reads and returns the contents of a file at the given path, logging an error if the read operation fails."
  },
  {
    "id": 1794,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error('Error reading file:', err);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines, handling errors by logging them and returning an empty array if an error occurs."
  },
  {
    "id": 1795,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileLines(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return data.split('\\n');\n    } catch (err) {\n        console.error(`Error reading file from disk: ${err}`);\n        return [];\n    }\n}\n```",
    "summary": "Reads a file synchronously and returns its contents as an array of lines, handling errors gracefully."
  },
  {
    "id": 1796,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFileSync(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads and parses a JSON file synchronously, returning its content as a JavaScript object."
  },
  {
    "id": 1797,
    "code": "```javascript\nconst fs = require('fs');\n\n/**\n * Reads a JSON file and returns the parsed object.\n *\n * @param {string} filePath - Path to the JSON file.\n * @returns {Object} Parsed JSON object.\n * @throws {Error} If the file cannot be read or parsed.\n */\nfunction readJsonFile(filePath) {\n  try {\n    const data = fs.readFileSync(filePath, 'utf8');\n    return JSON.parse(data);\n  } catch (error) {\n    throw new Error('Unable to read or parse JSON file.');\n  }\n}\n```",
    "summary": "This function reads a JSON file from a given path and returns the parsed object, throwing an error if the file cannot be read or parsed."
  },
  {
    "id": 1798,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileAsJson(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing the file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a file from the specified path and parses its contents as JSON, returning the resulting object or null if an error occurs."
  },
  {
    "id": 1799,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readJsonFile(filePath) {\n    try {\n        const data = fs.readFileSync(filePath, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        console.error('Error reading or parsing file:', error);\n        return null;\n    }\n}\n```",
    "summary": "Reads a JSON file from a given path and returns its contents as a JavaScript object."
  },
  {
    "id": 1800,
    "code": "```javascript\nconst fs = require('fs');\n\nfunction readFileToUpperCase(filePath, callback) {\n    fs.readFile(filePath, 'utf8', (err, data) => {\n        if (err) {\n            return callback(err);\n        }\n        callback(null, data.toUpperCase());\n    });\n}\n```",
    "summary": "Reads a text file asynchronously and returns its content converted to uppercase through a callback function."
  }
]