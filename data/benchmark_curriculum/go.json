[
  {
    "id": 1,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc WordCountInFile(filePath string) (map[string]int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\twordCount := make(map[string]int)\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCount[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "The function `WordCountInFile` reads a file and returns a map of word frequencies, counting the occurrences of each word in the file."
  },
  {
    "id": 2,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\n// ReplaceInFile reads a file line by line, replaces occurrences of oldStr with newStr, and writes the result to a new file.\nfunc ReplaceInFile(inputPath, outputPath, oldStr, newStr string) error {\n\tinputFile, err := os.Open(inputPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer inputFile.Close()\n\n\toutputFile, err := os.Create(outputPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer outputFile.Close()\n\n\tscanner := bufio.NewScanner(inputFile)\n\twriter := bufio.NewWriter(outputFile)\n\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tnewLine := strings.ReplaceAll(line, oldStr, newStr)\n\t\t_, err := writer.WriteString(newLine + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn err\n\t}\n\n\treturn writer.Flush()\n}\n```",
    "summary": "This function replaces all occurrences of a specified string in a file and writes the modified content to a new file."
  },
  {
    "id": 3,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if the file cannot be read."
  },
  {
    "id": 4,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specified word in a given file."
  },
  {
    "id": 5,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    lineCount := 0\n    for scanner.Scan() {\n        lineCount++\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count."
  },
  {
    "id": 6,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file, returning the count and any error encountered."
  },
  {
    "id": 7,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// CountLinesInFile counts the number of lines in a given file specified by filePath.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "The function `CountLinesInFile` reads a file and returns the number of lines it contains, handling any errors that occur."
  },
  {
    "id": 8,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingWord(filename, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines containing a specific word in a given file."
  },
  {
    "id": 9,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\twordCount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\twordCount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Counts occurrences of a specific word in a text file and returns the count along with any error encountered."
  },
  {
    "id": 10,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordOccurrences reads a file and returns a map containing the number of occurrences of each word.\nfunc CountWordOccurrences(filePath string) (map[string]int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\twordCount := make(map[string]int)\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCount[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "This function reads a file and returns a map with the count of occurrences for each word in the file."
  },
  {
    "id": 11,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// countLinesInFile opens a file, counts the number of lines, and returns the count.\nfunc countLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}",
    "summary": "This function opens a file, counts the number of lines, and returns the line count."
  },
  {
    "id": 12,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and counts the number of lines that start with the given prefix.\nfunc CountLinesWithPrefix(filePath string, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tif strings.HasPrefix(line, prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "CountLinesWithPrefix reads a file and counts the number of lines that start with a specified prefix."
  },
  {
    "id": 13,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadLinesFromFile(filepath string) ([]string, error) {\n\tfile, err := os.Open(filepath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 14,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "This Go function reads a file and returns its contents as a slice of strings, each representing a line."
  },
  {
    "id": 15,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string) (map[string]int, error) {\n\twordCount := make(map[string]int)\n\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCount[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Counts the occurrences of each word in a file, returning a map of word frequencies."
  },
  {
    "id": 16,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn lineCount, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 17,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordOccurrences reads a file and returns a map with the count of each word found in the file.\nfunc CountWordOccurrences(filePath string) (map[string]int, error) {\n\twordCount := make(map[string]int)\n\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCount[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "This function reads a file and returns a map containing the count of each word found in the file."
  },
  {
    "id": 18,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordsInFile reads a file and returns the number of words it contains.\nfunc CountWordsInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Counts the number of words in a file by reading it word by word."
  },
  {
    "id": 19,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\twords := strings.Fields(line)\n\t\tfor _, w := range words {\n\t\t\tif w == word {\n\t\t\t\tcount++\n\t\t\t}\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specified word in a text file."
  },
  {
    "id": 20,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\nfunc CountLinesWithWord(filePath, word string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    count := 0\n    for scanner.Scan() {\n        if strings.Contains(scanner.Text(), word) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n    return count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 21,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc countLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a file specified by the given file path."
  },
  {
    "id": 22,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLineByLine(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns its content as a slice of strings."
  },
  {
    "id": 23,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// CountLinesInFile takes a file path as input and returns the number of lines in the file.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a file specified by the given file path."
  },
  {
    "id": 24,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileByLine(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns the content as a slice of strings."
  },
  {
    "id": 25,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if reading fails."
  },
  {
    "id": 26,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if encountered."
  },
  {
    "id": 27,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a given file and returns the count along with any error encountered."
  },
  {
    "id": 28,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadLines reads a file and returns its lines as a slice of strings.\nfunc ReadLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file and returns its content as a slice of strings, with each element representing a line."
  },
  {
    "id": 29,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file from the given path and returns its content as a slice of strings, each representing a line.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns its content as a slice of strings."
  },
  {
    "id": 30,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesContainingWord opens a file, reads it line by line, and counts how many lines contain the specified word.\nfunc CountLinesContainingWord(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function opens a file and counts the number of lines that contain a specified word."
  },
  {
    "id": 31,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, fmt.Errorf(\"failed to open file: %w\", err)\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, fmt.Errorf(\"error reading file: %w\", err)\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if file access fails."
  },
  {
    "id": 32,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 33,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesContainingWord reads a file and returns the number of lines that contain the specified word.\nfunc CountLinesContainingWord(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function `CountLinesContainingWord` counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 34,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any errors encountered."
  },
  {
    "id": 35,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordsInFile opens a file, counts the number of words in it, and returns the count.\nfunc CountWordsInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\t_ = strings.TrimSpace(scanner.Text())\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Counts the number of words in a file specified by the file path and returns the word count."
  },
  {
    "id": 36,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn lineCount, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts and returns the number of lines in a specified file, handling potential file access errors."
  },
  {
    "id": 37,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLinesToSlice(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file into a slice of strings, returning an error if the file cannot be opened or read."
  },
  {
    "id": 38,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the total line count."
  },
  {
    "id": 39,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// countWordOccurrences reads a file and returns a map with the count of each word.\nfunc countWordOccurrences(filePath string) (map[string]int, error) {\n\twordCount := make(map[string]int)\n\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCount[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "The function `countWordOccurrences` reads a file and returns a map with the count of each word, ignoring case."
  },
  {
    "id": 40,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// CountLinesInFile reads a file from the given filepath and returns the number of lines in it.\nfunc CountLinesInFile(filepath string) (int, error) {\n\tfile, err := os.Open(filepath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function reads a file from a specified path and returns the number of lines in it."
  },
  {
    "id": 41,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file line by line and returns a slice of strings containing each line.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "ReadFileLines reads a file line by line and returns its contents as a slice of strings."
  },
  {
    "id": 42,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesWithPrefix(filename, prefix string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that start with a specified prefix."
  },
  {
    "id": 43,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\n// CountLinesInFile opens a file and returns the number of lines it contains.\nfunc CountLinesInFile(filePath string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    lineCount := 0\n    for scanner.Scan() {\n        lineCount++\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return lineCount, nil\n}\n```",
    "summary": "The function `CountLinesInFile` reads a file and returns the total number of lines it contains."
  },
  {
    "id": 44,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads and returns all lines from a file specified by the given file path."
  },
  {
    "id": 45,
    "code": "import (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}",
    "summary": "Counts the number of lines in a given file and returns the line count or an error if one occurs."
  },
  {
    "id": 46,
    "code": "```go\npackage main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"os\"\n)\n\n// CountLines reads a file and returns the number of lines in it.\nfunc CountLines(filename string) (int, error) {\n    file, err := os.Open(filename)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    lineCount := 0\n    for scanner.Scan() {\n        lineCount++\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n    return lineCount, nil\n}\n```",
    "summary": "CountLines reads a file and returns the total number of lines it contains."
  },
  {
    "id": 47,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLineByLine(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns the lines as a slice of strings."
  },
  {
    "id": 48,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn lineCount, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 49,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any potential errors encountered."
  },
  {
    "id": 50,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specified word in a given file, ignoring case differences."
  },
  {
    "id": 51,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingSubstring(filePath, substring string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), substring) {\n\t\t\tcount++\n\t\t}\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n```",
    "summary": "The function counts the number of lines in a file that contain a specified substring."
  },
  {
    "id": 52,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\n// CountLinesContainingWord reads a file and returns the number of lines containing the specified word.\nfunc CountLinesContainingWord(filePath string, word string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    count := 0\n    for scanner.Scan() {\n        if strings.Contains(scanner.Text(), word) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 53,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and counts the number of lines that begin with a specified prefix.\nfunc CountLinesWithPrefix(filePath string, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that start with a given prefix."
  },
  {
    "id": 54,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\n// CountLines reads a file and returns the number of lines it contains.\nfunc CountLines(filePath string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    lineCount := 0\n    for scanner.Scan() {\n        lineCount++\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n    return lineCount, nil\n}\n```",
    "summary": "The function `CountLines` opens a file, counts its lines, and returns the count, handling any errors encountered during the process."
  },
  {
    "id": 55,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingSubstring(filePath, substring string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), substring) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specified substring."
  },
  {
    "id": 56,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and counts the number of lines starting with a specified prefix.\nfunc CountLinesWithPrefix(filename, prefix string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function reads a file and counts the number of lines that begin with a specified prefix."
  },
  {
    "id": 57,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line, returning the lines as a slice of strings."
  },
  {
    "id": 58,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\nfunc CountLinesContainingWord(filePath, word string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    count := 0\n    for scanner.Scan() {\n        if strings.Contains(scanner.Text(), word) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return count, nil\n}\n```",
    "summary": "The function `CountLinesContainingWord` counts how many lines in a specified file contain a given word."
  },
  {
    "id": 59,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn lineCount, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "CountLinesInFile reads a file and returns the number of lines it contains or an error if one occurs."
  },
  {
    "id": 60,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    scanner.Split(bufio.ScanLines)\n\n    count := 0\n    for scanner.Scan() {\n        line := scanner.Text()\n        count += strings.Count(line, word)\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return count, nil\n}\n```",
    "summary": "The function `CountWordOccurrences` reads a file and counts the number of occurrences of a specified word."
  },
  {
    "id": 61,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingWord(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 62,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if encountered."
  },
  {
    "id": 63,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesWithPrefix(filePath, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that start with a specified prefix."
  },
  {
    "id": 64,
    "code": "```go\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"os\"\n    \"strings\"\n)\n\nfunc CountWordOccurrences(filePath string) (map[string]int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return nil, err\n    }\n    defer file.Close()\n\n    wordCount := make(map[string]int)\n    scanner := bufio.NewScanner(file)\n    scanner.Split(bufio.ScanWords)\n\n    for scanner.Scan() {\n        word := strings.ToLower(scanner.Text())\n        wordCount[word]++\n    }\n\n    if err := scanner.Err(); err != nil {\n        return nil, err\n    }\n    return wordCount, nil\n}\n```",
    "summary": "This function reads a file and returns a map of word occurrences, counting each word's frequency in a case-insensitive manner."
  },
  {
    "id": 65,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and counts the number of lines that start with a given prefix.\nfunc CountLinesWithPrefix(filePath, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function reads a file and counts the number of lines that begin with a specified prefix."
  },
  {
    "id": 66,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts and returns the number of lines in a specified file, handling any file access errors."
  },
  {
    "id": 67,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordsInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\t\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "The function `CountWordsInFile` counts and returns the number of words in a specified file."
  },
  {
    "id": 68,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to open file: %w\", err)\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, fmt.Errorf(\"error reading file: %w\", err)\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 69,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a file specified by the given file path."
  },
  {
    "id": 70,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordsInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\tif strings.TrimSpace(scanner.Text()) != \"\" {\n\t\t\twordCount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Counts the number of words in a specified file and returns the total count or an error if encountered."
  },
  {
    "id": 71,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadLinesFromFile(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings, handling any errors encountered."
  },
  {
    "id": 72,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tlineCount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a file specified by the given file path."
  },
  {
    "id": 73,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file and returns its content as a slice of strings, each representing a line.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns its content as a slice of strings."
  },
  {
    "id": 74,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if reading fails."
  },
  {
    "id": 75,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts the number of lines in a specified file and returns the count or an error."
  },
  {
    "id": 76,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingWord(filename, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 77,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}",
    "summary": "The function CountLinesInFile reads a file and returns the number of lines it contains."
  },
  {
    "id": 78,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// CopyFileLineByLine reads a source file line by line and writes each line to a destination file.\nfunc CopyFileLineByLine(src, dst string) error {\n\tsourceFile, err := os.Open(src)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer sourceFile.Close()\n\n\tdestFile, err := os.Create(dst)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer destFile.Close()\n\n\tscanner := bufio.NewScanner(sourceFile)\n\twriter := bufio.NewWriter(destFile)\n\n\tfor scanner.Scan() {\n\t\t_, err := writer.WriteString(scanner.Text() + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn err\n\t}\n\n\treturn writer.Flush()\n}\n```",
    "summary": "The function copies the contents of a source file to a destination file, processing the file line by line."
  },
  {
    "id": 79,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a file given its file path."
  },
  {
    "id": 80,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file line by line and returns the lines as a slice of strings.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns the lines as a slice of strings."
  },
  {
    "id": 81,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts and returns the number of lines in a specified file, handling any potential errors during file reading."
  },
  {
    "id": 82,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts the number of lines in a specified file and returns the count or an error if encountered."
  },
  {
    "id": 83,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tlineCount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts and returns the number of lines in a given file, handling potential errors in file operations."
  },
  {
    "id": 84,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and returns the number of lines that start with the given prefix.\nfunc CountLinesWithPrefix(filename string, prefix string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts and returns the number of lines in a file that start with a specified prefix."
  },
  {
    "id": 85,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file and returns its contents as a slice of strings, each representing a line in the file.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}",
    "summary": "ReadFileLines reads a file and returns its contents as a slice of strings, where each string is a line from the file."
  },
  {
    "id": 86,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a given file and returns the count and any error encountered."
  },
  {
    "id": 87,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadLinesFromFile(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 88,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordsInFile reads the specified file and returns the number of words it contains.\nfunc CountWordsInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "The function `CountWordsInFile` reads a file and returns the total count of words in it."
  },
  {
    "id": 89,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and counts the number of lines that start with a given prefix.\nfunc CountLinesWithPrefix(filePath string, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that start with a specified prefix."
  },
  {
    "id": 90,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// CountLinesInFile reads a file and returns the number of lines it contains.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a given file and returns the line count or an error if encountered."
  },
  {
    "id": 91,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingWord(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specified word, returning the count or an error."
  },
  {
    "id": 92,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filename, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "CountWordOccurrences reads a file and returns the number of times a specified word appears, ignoring case differences."
  },
  {
    "id": 93,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error."
  },
  {
    "id": 94,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file at the given path into a slice of strings, returning an error if encountered."
  },
  {
    "id": 95,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the total along with any error encountered."
  },
  {
    "id": 96,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts the number of lines in a given file and returns the count or an error."
  },
  {
    "id": 97,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a file specified by the given file path, returning the line count or an error if one occurs."
  },
  {
    "id": 98,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tlineCount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts the number of lines in a file specified by its file path."
  },
  {
    "id": 99,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the total count or an error if one occurs."
  },
  {
    "id": 100,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and counts the number of lines that start with the specified prefix.\nfunc CountLinesWithPrefix(filePath string, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function reads a file and counts the number of lines that start with a specified prefix."
  },
  {
    "id": 101,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\n// CountLinesWithPrefix reads a file and returns the number of lines that start with a specified prefix.\nfunc CountLinesWithPrefix(filePath string, prefix string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    count := 0\n\n    for scanner.Scan() {\n        if strings.HasPrefix(scanner.Text(), prefix) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return count, nil\n}\n```",
    "summary": "This function reads a file and counts the number of lines that start with a specified prefix."
  },
  {
    "id": 102,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordsInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "This function counts the number of words in a file specified by its file path and returns the count along with any error encountered."
  },
  {
    "id": 103,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountOccurrencesInFile reads a file line by line and counts the number of occurrences of a specified word.\nfunc CountOccurrencesInFile(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n```",
    "summary": "This function reads a file and counts the occurrences of a specified word within it."
  },
  {
    "id": 104,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc FindWordInFile(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineNumber := 0\n\tfor scanner.Scan() {\n\t\tlineNumber++\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\treturn lineNumber, nil\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn -1, nil\n}\n```",
    "summary": "This function searches for a specified word in a file and returns the line number where the word first appears, or -1 if not found."
  },
  {
    "id": 105,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordOccurrences reads a file and counts the occurrences of a specified word.\nfunc CountWordOccurrences(filename, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function reads a file and counts the occurrences of a specified word."
  },
  {
    "id": 106,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file at the specified path and returns them as a slice of strings."
  },
  {
    "id": 107,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 108,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordsInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "This function counts and returns the number of words in a given file."
  },
  {
    "id": 109,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CopyFile(src, dst string) error {\n\tsourceFile, err := os.Open(src)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer sourceFile.Close()\n\n\tdestinationFile, err := os.Create(dst)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer destinationFile.Close()\n\n\tscanner := bufio.NewScanner(sourceFile)\n\twriter := bufio.NewWriter(destinationFile)\n\tfor scanner.Scan() {\n\t\t_, err := writer.WriteString(scanner.Text() + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn err\n\t}\n\n\treturn writer.Flush()\n}\n```",
    "summary": "CopyFile reads from a source file and writes its contents to a destination file line by line."
  },
  {
    "id": 110,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a given file and returns the count or an error."
  },
  {
    "id": 111,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadLinesFromFile(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 112,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts and returns the number of lines in a specified file."
  },
  {
    "id": 113,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a text file and returns its content as a slice of strings, where each string is a line from the file."
  },
  {
    "id": 114,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if reading fails."
  },
  {
    "id": 115,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadLines reads a file and returns a slice of strings, each representing a line in the file.\nfunc ReadLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file and returns its contents as a slice of strings, with each string representing a line."
  },
  {
    "id": 116,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}",
    "summary": "Counts the number of lines in a file specified by the given file path."
  },
  {
    "id": 117,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\n// CountLinesWithPrefix reads a file and returns the number of lines that start with a given prefix.\nfunc CountLinesWithPrefix(filePath string, prefix string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    count := 0\n\n    for scanner.Scan() {\n        if strings.HasPrefix(scanner.Text(), prefix) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return count, nil\n}\n```",
    "summary": "This function reads a file and counts the number of lines that begin with a specified prefix."
  },
  {
    "id": 118,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CopyFileLineByLine(src string, dst string) error {\n\tsourceFile, err := os.Open(src)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to open source file: %w\", err)\n\t}\n\tdefer sourceFile.Close()\n\n\tdestFile, err := os.Create(dst)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to create destination file: %w\", err)\n\t}\n\tdefer destFile.Close()\n\n\tscanner := bufio.NewScanner(sourceFile)\n\twriter := bufio.NewWriter(destFile)\n\n\tfor scanner.Scan() {\n\t\t_, err := writer.WriteString(scanner.Text() + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"failed to write to destination file: %w\", err)\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn fmt.Errorf(\"error reading source file: %w\", err)\n\t}\n\n\tif err := writer.Flush(); err != nil {\n\t\treturn fmt.Errorf(\"error flushing writer buffer: %w\", err)\n\t}\n\n\treturn nil\n}\n```",
    "summary": "This function copies a file line by line from a source file to a destination file, handling any errors encountered during the process."
  },
  {
    "id": 119,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\n// CountWordOccurrences reads a file and counts the occurrences of each word in the file.\nfunc CountWordOccurrences(filePath string) (map[string]int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return nil, err\n    }\n    defer file.Close()\n\n    wordCount := make(map[string]int)\n    scanner := bufio.NewScanner(file)\n    scanner.Split(bufio.ScanWords)\n\n    for scanner.Scan() {\n        word := strings.ToLower(scanner.Text())\n        wordCount[word]++\n    }\n\n    if err := scanner.Err(); err != nil {\n        return nil, err\n    }\n\n    return wordCount, nil\n}\n```",
    "summary": "The function `CountWordOccurrences` reads a file and returns a map with the count of each word's occurrences."
  },
  {
    "id": 120,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the line count or an error."
  },
  {
    "id": 121,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrencesInFile(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tword = strings.ToLower(word)\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\n\tfor scanner.Scan() {\n\t\tline := strings.ToLower(scanner.Text())\n\t\twords := strings.Fields(line)\n\t\tfor _, w := range words {\n\t\t\tif w == word {\n\t\t\t\tcount++\n\t\t\t}\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specified word in a text file, ignoring case sensitivity."
  },
  {
    "id": 122,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns the lines as a slice of strings."
  },
  {
    "id": 123,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count."
  },
  {
    "id": 124,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and counts the number of lines that start with a given prefix.\nfunc CountLinesWithPrefix(filename string, prefix string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that start with a specified prefix."
  },
  {
    "id": 125,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc ReplaceWordInFile(filePath, oldWord, newWord string) error {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\tvar updatedLines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tupdatedLine := strings.ReplaceAll(scanner.Text(), oldWord, newWord)\n\t\tupdatedLines = append(updatedLines, updatedLine)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn err\n\t}\n\n\tfile, err = os.Create(filePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\twriter := bufio.NewWriter(file)\n\tfor _, line := range updatedLines {\n\t\t_, err := writer.WriteString(line + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn writer.Flush()\n}\n```",
    "summary": "This function replaces all occurrences of a specified word with another word in a given file."
  },
  {
    "id": 126,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if encountered."
  },
  {
    "id": 127,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\twordCount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\twords := strings.Fields(line)\n\t\tfor _, w := range words {\n\t\t\tif strings.EqualFold(w, word) {\n\t\t\t\twordCount++\n\t\t\t}\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "This function counts the occurrences of a specific word in a text file, ignoring case differences."
  },
  {
    "id": 128,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadLines reads a file and returns its content as a slice of strings, each representing a line.\nfunc ReadLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file and returns its content as a slice of strings, with each string representing a line in the file."
  },
  {
    "id": 129,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the total count or an error if one occurs."
  },
  {
    "id": 130,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filename, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts occurrences of a specified word in a file and returns the count along with any error encountered."
  },
  {
    "id": 131,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// CountLines counts the number of lines in a file specified by the filepath.\nfunc CountLines(filepath string) (int, error) {\n\tfile, err := os.Open(filepath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts and returns the number of lines in a specified file."
  },
  {
    "id": 132,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, targetWord string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), targetWord) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specified word in a given file, ignoring case."
  },
  {
    "id": 133,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "This function reads a file line by line and returns its contents as a slice of strings."
  },
  {
    "id": 134,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// CountLinesInFile takes a file path as input and returns the number of lines in the file.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a given file and returns the line count or an error."
  },
  {
    "id": 135,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc WriteLinesToFile(filePath string, lines []string) error {\n\tfile, err := os.Create(filePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\twriter := bufio.NewWriter(file)\n\tfor _, line := range lines {\n\t\t_, err := writer.WriteString(line + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn writer.Flush()\n}\n```",
    "summary": "Writes a slice of strings to a specified file, each on a new line, using buffered writing for efficiency."
  },
  {
    "id": 136,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// countLinesInFile returns the number of lines in the specified file.\nfunc countLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "The function `countLinesInFile` reads a file line-by-line and returns the total number of lines."
  },
  {
    "id": 137,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    lineCount := 0\n    for scanner.Scan() {\n        lineCount++\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n    return lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a given file and returns the count along with any error encountered."
  },
  {
    "id": 138,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLines(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn lineCount, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a file and returns the total count along with any error encountered."
  },
  {
    "id": 139,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingKeyword(filePath string, keyword string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), keyword) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specified keyword."
  },
  {
    "id": 140,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\n// CountLinesInFile takes a file path as input and returns the number of lines in the file.\nfunc CountLinesInFile(filePath string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    lineCount := 0\n\n    for scanner.Scan() {\n        lineCount++\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return lineCount, nil\n}\n```",
    "summary": "This function counts and returns the number of lines in a specified file."
  },
  {
    "id": 141,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns its contents as a slice of strings."
  },
  {
    "id": 142,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts and returns the number of lines in a specified file."
  },
  {
    "id": 143,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 144,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc WriteLinesToFile(lines []string, filePath string) error {\n\tfile, err := os.Create(filePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\twriter := bufio.NewWriter(file)\n\tfor _, line := range lines {\n\t\t_, err := writer.WriteString(line + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn writer.Flush()\n}\n```",
    "summary": "Writes a slice of strings to a specified file, each on a new line, using buffered writing for efficiency."
  },
  {
    "id": 145,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountOccurrencesInFile(filePath, searchWord string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, searchWord)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function counts occurrences of a specified word in a file and returns the total count."
  },
  {
    "id": 146,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filename, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specific word in a file by reading and scanning each line."
  },
  {
    "id": 147,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesWithKeyword(filePath string, keyword string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), keyword) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function counts the number of lines in a file that contain a specified keyword."
  },
  {
    "id": 148,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordOccurrences reads a file and returns a map with the count of each word.\nfunc CountWordOccurrences(filePath string) (map[string]int, error) {\n\twordCount := make(map[string]int)\n\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCount[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Counts the occurrences of each word in a file and returns the result as a map."
  },
  {
    "id": 149,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadFileLines reads a text file line by line and returns a slice of strings containing each line.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a text file line by line and returns its content as a slice of strings."
  },
  {
    "id": 150,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadLines reads a file and returns its contents as a slice of strings, where each string is a line in the file.\nfunc ReadLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file and returns its contents as a slice of strings, with each string representing a line."
  },
  {
    "id": 151,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 152,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file and returns its content as a slice of strings, where each string represents a line."
  },
  {
    "id": 153,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of occurrences of a specified word in a text file."
  },
  {
    "id": 154,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\treturn lineCount, scanner.Err()\n}\n```",
    "summary": "Counts the number of lines in a file and returns the total count or an error if one occurs."
  },
  {
    "id": 155,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    lineCount := 0\n    for scanner.Scan() {\n        lineCount++\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return lineCount, nil\n}\n```",
    "summary": "The function `CountLinesInFile` opens a file, counts the number of lines, and returns the count or an error."
  },
  {
    "id": 156,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 157,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesWithPrefix(filePath, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tif strings.HasPrefix(line, prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts and returns the number of lines in a file that start with a specified prefix."
  },
  {
    "id": 158,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if one occurs."
  },
  {
    "id": 159,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns the lines as a slice of strings."
  },
  {
    "id": 160,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc ReplaceWordInFile(filePath, oldWord, newWord string) error {\n\tfile, err := os.OpenFile(filePath, os.O_RDWR, 0644)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\tvar content strings.Builder\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := strings.ReplaceAll(scanner.Text(), oldWord, newWord)\n\t\tcontent.WriteString(line + \"\\n\")\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn err\n\t}\n\n\tfile.Seek(0, 0)\n\tfile.Truncate(0)\n\t_, err = file.WriteString(content.String())\n\treturn err\n}\n```",
    "summary": "This function opens a file, replaces all occurrences of a specified word with another word, and saves the changes back to the file."
  },
  {
    "id": 161,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file specified by `filePath` and returns them as a slice of strings."
  },
  {
    "id": 162,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a given file and returns the count or an error if reading fails."
  },
  {
    "id": 163,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings, handling potential errors."
  },
  {
    "id": 164,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and counts the number of lines that start with a given prefix.\nfunc CountLinesWithPrefix(filePath, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function reads a file and counts the number of lines that start with a specified prefix."
  },
  {
    "id": 165,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file and returns its lines as a slice of strings.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file and returns its content as a slice of strings, where each string is a line from the file."
  },
  {
    "id": 166,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLineByLine(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns its content as a slice of strings."
  },
  {
    "id": 167,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file and returns its content as a slice of strings, where each string is a line from the file.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file and returns its content as a slice of strings, with each string representing a line from the file."
  },
  {
    "id": 168,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file into a slice of strings, returning an error if any file operation fails."
  },
  {
    "id": 169,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc countLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn lineCount, err\n\t}\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts the number of lines in a file specified by its file path."
  },
  {
    "id": 170,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLineByLine(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to open file: %w\", err)\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, fmt.Errorf(\"error reading file: %w\", err)\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns its contents as a slice of strings, handling any errors that occur during the process."
  },
  {
    "id": 171,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadLines reads all lines from a specified file and returns them as a slice of strings.\nfunc ReadLines(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}",
    "summary": "Reads all lines from a file and returns them as a slice of strings."
  },
  {
    "id": 172,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file and returns its lines as a slice of strings.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file and returns its content as a slice of strings, with each element representing a line."
  },
  {
    "id": 173,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, targetWord string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), targetWord) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specific word in a file, ignoring case sensitivity."
  },
  {
    "id": 174,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, fmt.Errorf(\"failed to open file: %w\", err)\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, fmt.Errorf(\"error reading file: %w\", err)\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "The function `CountLinesInFile` reads a file and returns the number of lines it contains, handling any errors encountered during processing."
  },
  {
    "id": 175,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file and returns its lines as a slice of strings.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file and returns its contents as a slice of strings, where each element represents a line."
  },
  {
    "id": 176,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn lineCount, nil\n}\n```",
    "summary": "This function opens a file, reads through it line by line, and returns the total number of lines."
  },
  {
    "id": 177,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// CountLinesInFile reads a file and returns the number of lines in it.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "The function CountLinesInFile reads a file and returns the total number of lines it contains."
  },
  {
    "id": 178,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and counts how many lines begin with the specified prefix.\nfunc CountLinesWithPrefix(filePath string, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tif strings.HasPrefix(line, prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts lines in a file that start with a specific prefix."
  },
  {
    "id": 179,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "This function reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 180,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// CountLinesInFile reads a file and returns the number of lines it contains.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count."
  },
  {
    "id": 181,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 182,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "This function reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 183,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\n// ProcessFileLines reads a file line by line, applies a transformation function to each line, and writes the results to a new file.\nfunc ProcessFileLines(inputFilePath, outputFilePath string, transformFunc func(string) string) error {\n\tinputFile, err := os.Open(inputFilePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer inputFile.Close()\n\n\toutputFile, err := os.Create(outputFilePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer outputFile.Close()\n\n\tscanner := bufio.NewScanner(inputFile)\n\twriter := bufio.NewWriter(outputFile)\n\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\ttransformedLine := transformFunc(line)\n\t\t_, err := writer.WriteString(transformedLine + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn err\n\t}\n\n\terr = writer.Flush()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n```",
    "summary": "This function reads a file line by line, transforms each line using a specified function, and writes the transformed lines to a new file."
  },
  {
    "id": 184,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if encountered."
  },
  {
    "id": 185,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn lineCount, err\n\t}\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 186,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns its contents as a slice of strings."
  },
  {
    "id": 187,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 188,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\n// CountLinesWithPrefix reads a file and returns the number of lines that start with a given prefix.\nfunc CountLinesWithPrefix(filePath string, prefix string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    count := 0\n    for scanner.Scan() {\n        if strings.HasPrefix(scanner.Text(), prefix) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n    return count, nil\n}\n```",
    "summary": "This function reads a file and returns the count of lines that start with a specified prefix."
  },
  {
    "id": 189,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}",
    "summary": "Counts the number of lines in a given file and returns the count along with any potential error."
  },
  {
    "id": 190,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\n// CountLinesWithSubstring reads a file and returns the number of lines containing a specified substring.\nfunc CountLinesWithSubstring(filePath string, substring string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    count := 0\n    for scanner.Scan() {\n        if strings.Contains(scanner.Text(), substring) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specified substring."
  },
  {
    "id": 191,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn lineCount, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a file specified by the given file path."
  },
  {
    "id": 192,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts the number of lines in a specified file and returns the count or an error if any occurs."
  },
  {
    "id": 193,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filename string, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\twords := strings.Fields(line)\n\t\tfor _, w := range words {\n\t\t\tif w == word {\n\t\t\t\tcount++\n\t\t\t}\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}",
    "summary": "This function counts the number of occurrences of a specific word in a text file."
  },
  {
    "id": 194,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordOccurrences reads a file and counts the occurrences of each word.\nfunc CountWordOccurrences(filename string) (map[string]int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\twordCount := make(map[string]int)\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCount[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "This function reads a file to count and return the occurrences of each word."
  },
  {
    "id": 195,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(fileName string) (int, error) {\n\tfile, err := os.Open(fileName)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn lineCount, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts the number of lines in a specified file and returns the count, along with any error encountered during the process."
  },
  {
    "id": 196,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc ReadFileAndCountWords(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\twordCount := 0\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := strings.TrimSpace(scanner.Text())\n\t\tif word != \"\" {\n\t\t\twordCount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "This function reads a file and returns the count of words in it, handling any encountered errors."
  },
  {
    "id": 197,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// CountLinesInFile counts the number of lines in a specified file.\nfunc CountLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "CountLinesInFile opens a file, counts the number of lines, and returns the count or an error if encountered."
  },
  {
    "id": 198,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadLines reads a file and returns its content as a slice of strings, each representing a line in the file.\nfunc ReadLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "ReadLines opens a file, reads its contents line by line, and returns the lines as a slice of strings."
  },
  {
    "id": 199,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\n// ReadLinesWithPrefix reads a file line by line and prints lines that start with the specified prefix.\nfunc ReadLinesWithPrefix(filename, prefix string) error {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to open file: %w\", err)\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tif strings.HasPrefix(line, prefix) {\n\t\t\tfmt.Println(line)\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn fmt.Errorf(\"error reading file: %w\", err)\n\t}\n\n\treturn nil\n}\n```",
    "summary": "This function reads a file line by line and prints lines that start with a specified prefix."
  },
  {
    "id": 200,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// CopyFile copies the contents of the source file to the destination file.\nfunc CopyFile(src, dst string) error {\n\tsourceFile, err := os.Open(src)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer sourceFile.Close()\n\n\tdestinationFile, err := os.Create(dst)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer destinationFile.Close()\n\n\tscanner := bufio.NewScanner(sourceFile)\n\twriter := bufio.NewWriter(destinationFile)\n\n\tfor scanner.Scan() {\n\t\t_, err := writer.WriteString(scanner.Text() + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn err\n\t}\n\n\treturn writer.Flush()\n}\n```",
    "summary": "This function copies the contents of a source file to a destination file using buffered I/O."
  },
  {
    "id": 201,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count."
  },
  {
    "id": 202,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error."
  },
  {
    "id": 203,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadLinesFromFile(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 204,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesContainingWord returns the number of lines in the specified file that contain the given word.\nfunc CountLinesContainingWord(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specific word."
  },
  {
    "id": 205,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file and returns them as a slice of strings."
  },
  {
    "id": 206,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\nfunc CountLinesContainingSubstring(filePath string, substring string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n    \n    scanner := bufio.NewScanner(file)\n    count := 0\n    for scanner.Scan() {\n        if strings.Contains(scanner.Text(), substring) {\n            count++\n        }\n    }\n    \n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n    \n    return count, nil\n}\n```",
    "summary": "Counts and returns the number of lines in a file that contain a specified substring."
  },
  {
    "id": 207,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingWord(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 208,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesContainingWord reads a file and returns the number of lines containing the specified word.\nfunc CountLinesContainingWord(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n```",
    "summary": "CountLinesContainingWord reads a file and counts the number of lines that contain a specific word."
  },
  {
    "id": 209,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\t\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if one occurs."
  },
  {
    "id": 210,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and returns the number of lines that start with the given prefix.\nfunc CountLinesWithPrefix(filename, prefix string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n```",
    "summary": "This function reads a file and counts how many lines start with a specified prefix."
  },
  {
    "id": 211,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specified word in a file, ignoring case differences."
  },
  {
    "id": 212,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// CountLinesInFile takes a file path as input and returns the number of lines in the file.\n// It returns an error if the file cannot be opened or read.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn lineCount, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "The function `CountLinesInFile` reads a file and returns the total number of lines, handling any errors encountered during the process."
  },
  {
    "id": 213,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\nfunc CountWordsInFile(filename string) (int, error) {\n    file, err := os.Open(filename)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    scanner.Split(bufio.ScanWords)\n\n    wordCount := 0\n    for scanner.Scan() {\n        wordCount++\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return wordCount, nil\n}\n```",
    "summary": "The function `CountWordsInFile` opens a file and counts the total number of words in it, returning the count or an error if any occurs."
  },
  {
    "id": 214,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\nfunc ReadLines(filePath string) ([]string, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return nil, err\n    }\n    defer file.Close()\n\n    var lines []string\n    scanner := bufio.NewScanner(file)\n    for scanner.Scan() {\n        lines = append(lines, scanner.Text())\n    }\n\n    if err := scanner.Err(); err != nil {\n        return nil, err\n    }\n\n    return lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 215,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingWord(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 216,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordsInFile reads a file and returns the total count of words.\nfunc CountWordsInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\twordCount := 0\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "This function reads a file and returns the total count of words contained in it."
  },
  {
    "id": 217,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\treturn lines, scanner.Err()\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 218,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    scanner.Split(bufio.ScanWords)\n\n    count := 0\n    for scanner.Scan() {\n        if strings.EqualFold(scanner.Text(), word) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return count, nil\n}\n```",
    "summary": "Counts the occurrences of a specific word in a file, ignoring case."
  },
  {
    "id": 219,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file specified by its path and returns them as a slice of strings."
  },
  {
    "id": 220,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLineByLine(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns its contents as a slice of strings."
  },
  {
    "id": 221,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a given file and returns the count along with any potential error."
  },
  {
    "id": 222,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "CountLinesInFile reads a file and returns the number of lines it contains, or an error if the file cannot be read."
  },
  {
    "id": 223,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specific word in a file, ignoring case sensitivity."
  },
  {
    "id": 224,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\n// CountLinesInFile opens a file at the given path and returns the number of lines it contains.\nfunc CountLinesInFile(filePath string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    lineCount := 0\n    for scanner.Scan() {\n        lineCount++\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n    \n    return lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the line count or an error if the file cannot be read."
  },
  {
    "id": 225,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadLinesFromFile(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 226,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesWithKeyword(filePath string, keyword string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tif strings.Contains(line, keyword) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the number of lines in a file that contain a specified keyword."
  },
  {
    "id": 227,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specific word in a file and returns the count."
  },
  {
    "id": 228,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesContainingWord reads a given file and returns the number of lines that contain a specific word.\nfunc CountLinesContainingWord(filename, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts and returns the number of lines in a file that contain a specified word."
  },
  {
    "id": 229,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc WriteLinesToFile(filename string, lines []string) error {\n\tfile, err := os.Create(filename)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\twriter := bufio.NewWriter(file)\n\tfor _, line := range lines {\n\t\t_, err = writer.WriteString(line + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn writer.Flush()\n}\n```",
    "summary": "Writes an array of strings to a file, with each string on a new line."
  },
  {
    "id": 230,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specified word in a text file."
  },
  {
    "id": 231,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// CountLinesInFile returns the number of lines in the specified file.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 232,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CopyFileLineByLine(srcPath string, dstPath string) error {\n\tsrcFile, err := os.Open(srcPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer srcFile.Close()\n\n\tdstFile, err := os.Create(dstPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer dstFile.Close()\n\n\tscanner := bufio.NewScanner(srcFile)\n\twriter := bufio.NewWriter(dstFile)\n\n\tfor scanner.Scan() {\n\t\t_, err := writer.WriteString(scanner.Text() + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn err\n\t}\n\n\treturn writer.Flush()\n}\n```",
    "summary": "The function `CopyFileLineByLine` copies content from a source file to a destination file, processing one line at a time."
  },
  {
    "id": 233,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns a slice of strings, each representing a line in the file."
  },
  {
    "id": 234,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file line by line and returns a slice of strings containing each line.\nfunc ReadFileLines(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn lines, nil\n}",
    "summary": "ReadFileLines reads a file line by line and returns each line as a string slice."
  },
  {
    "id": 235,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// ReadLinesContaining reads a file and returns all lines that contain the specified substring.\nfunc ReadLinesContaining(filePath, substring string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tif strings.Contains(line, substring) {\n\t\t\tlines = append(lines, line)\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "This function reads a file and returns all lines containing a specified substring."
  },
  {
    "id": 236,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 237,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}",
    "summary": "Counts and returns the number of lines in a given file, handling any errors encountered during file operations."
  },
  {
    "id": 238,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc ReplaceInFile(filePath, oldWord, newWord string) error {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\tvar output strings.Builder\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tupdatedLine := strings.ReplaceAll(line, oldWord, newWord)\n\t\toutput.WriteString(updatedLine + \"\\n\")\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn err\n\t}\n\n\tfile.Close()\n\tfile, err = os.Create(filePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\t_, err = file.WriteString(output.String())\n\treturn err\n}\n```",
    "summary": "Replaces all occurrences of a specified word with another word in a given file."
  },
  {
    "id": 239,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}",
    "summary": "The function `ReadLines` reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 240,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file and returns its content as a slice of strings, where each string is a line from the file.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file and returns its content as a slice of strings, with each element representing a line."
  },
  {
    "id": 241,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "CountLinesInFile opens a file and returns the number of lines in it, or an error if any occurs."
  },
  {
    "id": 242,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordsInFile(filePath string) (map[string]int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\twordCount := make(map[string]int)\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCount[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Counts the occurrences of each word in a file and returns a map with words as keys and their frequencies as values."
  },
  {
    "id": 243,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 244,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any error encountered during reading."
  },
  {
    "id": 245,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn lineCount, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if reading fails."
  },
  {
    "id": 246,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingWord(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function `CountLinesContainingWord` counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 247,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns the content as a slice of strings."
  },
  {
    "id": 248,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc FindWordInFile(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineNumber := 0\n\n\tfor scanner.Scan() {\n\t\tlineNumber++\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\treturn lineNumber, nil\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn -1, nil\n}\n```",
    "summary": "This function scans a file line by line to find the first occurrence of a specified word and returns the line number or -1 if the word is not found."
  },
  {
    "id": 249,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 250,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingWord(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n```",
    "summary": "The function `CountLinesContainingWord` reads a file and returns the count of lines that contain a specified word."
  },
  {
    "id": 251,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadLinesFromFile(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 252,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a file specified by its file path."
  },
  {
    "id": 253,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLineByLine(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns the contents as a slice of strings."
  },
  {
    "id": 254,
    "code": "```go\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return nil, err\n    }\n    defer file.Close()\n\n    var lines []string\n    scanner := bufio.NewScanner(file)\n    for scanner.Scan() {\n        lines = append(lines, scanner.Text())\n    }\n\n    if err := scanner.Err(); err != nil {\n        return nil, err\n    }\n\n    return lines, nil\n}\n```",
    "summary": "Reads a file line-by-line and returns its contents as a slice of strings, handling any errors that occur."
  },
  {
    "id": 255,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specified word in a file, ignoring case differences."
  },
  {
    "id": 256,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns its contents as a slice of strings."
  },
  {
    "id": 257,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordsInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\twordCount := 0\n\n\tfor scanner.Scan() {\n\t\tword := scanner.Text()\n\t\tif strings.TrimSpace(word) != \"\" {\n\t\t\twordCount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Counts the number of words in a specified file, returning the word count or an error."
  },
  {
    "id": 258,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specific word in a file specified by its path."
  },
  {
    "id": 259,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the total count or an error if encountered."
  },
  {
    "id": 260,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a given file and returns the count or an error if any occurs."
  },
  {
    "id": 261,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "This function reads a file line-by-line and returns a slice of strings, each representing a line, or an error if the file cannot be read."
  },
  {
    "id": 262,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filename, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specific word in a given file and returns the total count."
  },
  {
    "id": 263,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordOccurrences reads a text file and returns a map with word counts.\nfunc CountWordOccurrences(filePath string) (map[string]int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\twordCount := make(map[string]int)\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCount[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn wordCount, nil\n}\n```",
    "summary": "The function `CountWordOccurrences` reads a file and returns a map of word frequencies by counting occurrences of each word in the file."
  },
  {
    "id": 264,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordOccurrences reads a file and counts the occurrences of each word, returning a map of word counts.\nfunc CountWordOccurrences(filename string) (map[string]int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\twordCounts := make(map[string]int)\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCounts[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCounts, nil\n}\n```",
    "summary": "Counts the occurrences of each word in a file and returns a map with word counts."
  },
  {
    "id": 265,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesWithWord(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines containing a specific word in a file."
  },
  {
    "id": 266,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    scanner.Split(bufio.ScanWords)\n\n    count := 0\n    for scanner.Scan() {\n        if strings.EqualFold(scanner.Text(), word) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return count, nil\n}\n```",
    "summary": "Counts the occurrences of a specified word in a given text file, ignoring case sensitivity."
  },
  {
    "id": 267,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specified word in a file at the given file path."
  },
  {
    "id": 268,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 269,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileAndCountLines(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn lineCount, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Reads a file and returns the count of lines, handling file opening and scanning errors."
  },
  {
    "id": 270,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadLines reads a file and returns a slice containing each line as a string.\nfunc ReadLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "ReadLines reads a file and returns its content as a slice of strings, each representing a line."
  },
  {
    "id": 271,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\nfunc ReadLinesFromFile(filePath string) ([]string, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return nil, err\n    }\n    defer file.Close()\n\n    var lines []string\n    scanner := bufio.NewScanner(file)\n    for scanner.Scan() {\n        lines = append(lines, scanner.Text())\n    }\n\n    if err := scanner.Err(); err != nil {\n        return nil, err\n    }\n\n    return lines, nil\n}\n```",
    "summary": "Reads all lines from a file and returns them as a slice of strings, handling any potential errors."
  },
  {
    "id": 272,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc WriteLinesToFile(filename string, lines []string) error {\n\tfile, err := os.Create(filename)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\twriter := bufio.NewWriter(file)\n\tfor _, line := range lines {\n\t\t_, err := writer.WriteString(line + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn writer.Flush()\n}\n```",
    "summary": "Writes an array of strings to a file, each on a new line, using buffered writing."
  },
  {
    "id": 273,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "The function `CountLinesInFile` opens a file, counts the number of lines in it, and returns the line count or an error if encountered."
  },
  {
    "id": 274,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if one occurs."
  },
  {
    "id": 275,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileByLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line into a slice of strings, returning the slice and any error encountered."
  },
  {
    "id": 276,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 277,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns a slice of strings containing each line."
  },
  {
    "id": 278,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tword = strings.ToLower(word)\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tif strings.ToLower(scanner.Text()) == word {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}",
    "summary": "This function counts the occurrences of a specific word in a text file."
  },
  {
    "id": 279,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file line by line and returns a slice of strings containing each line.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "The function `ReadFileLines` reads a file line by line and returns a slice of strings containing each line."
  },
  {
    "id": 280,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and returns the number of lines that start with the specified prefix.\nfunc CountLinesWithPrefix(filePath string, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that start with a given prefix."
  },
  {
    "id": 281,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads and returns all lines from a file as a slice of strings, handling errors appropriately."
  },
  {
    "id": 282,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file and returns its content as a slice of strings, where each string is a line from the file.\nfunc ReadFileLines(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\treturn lines, scanner.Err()\n}\n```",
    "summary": "ReadFileLines reads a file and returns its content as a slice of strings, with each element representing a line."
  },
  {
    "id": 283,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 284,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadLinesFromFile(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file and returns them as a slice of strings."
  },
  {
    "id": 285,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesContainingWord reads a file and returns the number of lines containing the specified word.\nfunc CountLinesContainingWord(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function counts and returns the number of lines in a file that contain a specified word."
  },
  {
    "id": 286,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// CountLinesInFile opens a file and returns the number of lines it contains.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, fmt.Errorf(\"failed to open file: %w\", err)\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, fmt.Errorf(\"error reading file: %w\", err)\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts and returns the number of lines in a specified file, handling any errors encountered during file operations."
  },
  {
    "id": 287,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if one occurs."
  },
  {
    "id": 288,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// CountLinesInFile reads a file and returns the number of lines it contains.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "The function `CountLinesInFile` reads a file and returns the total number of lines, handling any errors encountered during the process."
  },
  {
    "id": 289,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc ReadAndCapitalizeLines(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := strings.ToUpper(scanner.Text())\n\t\tlines = append(lines, line)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "This function reads all lines from a specified file and returns them as a slice of strings, with each line capitalized."
  },
  {
    "id": 290,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specified word in a text file."
  },
  {
    "id": 291,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, fmt.Errorf(\"failed to open file: %w\", err)\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, fmt.Errorf(\"error reading file: %w\", err)\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any potential errors."
  },
  {
    "id": 292,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if the file cannot be read."
  },
  {
    "id": 293,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a given file specified by its file path."
  },
  {
    "id": 294,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn lineCount, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 295,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file and returns its content as a slice of strings, each representing a line.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file and returns its content as a slice of strings, with each string representing a line."
  },
  {
    "id": 296,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file line by line and returns a slice of strings containing the file's lines.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns its contents as a slice of strings."
  },
  {
    "id": 297,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordOccurrences reads a file and counts the occurrences of each word.\nfunc CountWordOccurrences(filename string) (map[string]int, error) {\n\twordCount := make(map[string]int)\n\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCount[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Counts the occurrences of each word in a file, returning a map with word frequencies."
  },
  {
    "id": 298,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// ReadFileLinesToUpper reads a file line by line and returns a slice of strings where each line is converted to uppercase.\nfunc ReadFileLinesToUpper(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, strings.ToUpper(scanner.Text()))\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line, converting each line to uppercase, and returns the result as a slice of strings."
  },
  {
    "id": 299,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc FilterLinesByPrefix(filePath, prefix string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar filteredLines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tif strings.HasPrefix(line, prefix) {\n\t\t\tfilteredLines = append(filteredLines, line)\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn filteredLines, nil\n}",
    "summary": "This function reads a file and returns lines that start with the specified prefix."
  },
  {
    "id": 300,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// WriteLines writes the provided slice of strings to a file, one per line.\nfunc WriteLines(lines []string, filePath string) error {\n\tfile, err := os.Create(filePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\twriter := bufio.NewWriter(file)\n\tfor _, line := range lines {\n\t\t_, err := writer.WriteString(line + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn writer.Flush()\n}\n```",
    "summary": "WriteLines writes a slice of strings to a specified file with each string on a new line."
  },
  {
    "id": 301,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// CountLines reads a file and returns the number of lines it contains.\nfunc CountLines(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts and returns the number of lines in a specified file."
  },
  {
    "id": 302,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a given file and returns the count along with any error encountered."
  },
  {
    "id": 303,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file and returns them as a slice of strings."
  },
  {
    "id": 304,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingWord(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function CountLinesContainingWord counts the number of lines in a file that contain a specific word."
  },
  {
    "id": 305,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// WriteLines writes the given lines to a file specified by filename.\nfunc WriteLines(filename string, lines []string) error {\n\tfile, err := os.Create(filename)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\twriter := bufio.NewWriter(file)\n\tfor _, line := range lines {\n\t\t_, err := writer.WriteString(line + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn writer.Flush()\n}\n```",
    "summary": "Writes an array of strings to a specified file, each followed by a newline."
  },
  {
    "id": 306,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts and returns the number of lines in a specified file, handling any errors encountered during file processing."
  },
  {
    "id": 307,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordsInFile reads a file and returns the total number of words in it.\nfunc CountWordsInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\twordCount := 0\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn wordCount, nil\n}\n```",
    "summary": "The function `CountWordsInFile` reads a file from a given path and returns the total number of words it contains."
  },
  {
    "id": 308,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLineByLine(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns its contents as a slice of strings."
  },
  {
    "id": 309,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// countLinesInFile opens a file, reads it line by line, and returns the number of lines.\nfunc countLinesInFile(filepath string) (int, error) {\n\tfile, err := os.Open(filepath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts and returns the number of lines in a given file, handling any errors that occur during file access."
  },
  {
    "id": 310,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file and returns its contents as a slice of strings, with each string representing a line.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file specified by filePath and returns its contents as a slice of strings, each representing a line in the file."
  },
  {
    "id": 311,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if the file cannot be read."
  },
  {
    "id": 312,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := strings.ToLower(scanner.Text())\n\t\twords := strings.Fields(line)\n\t\tfor _, w := range words {\n\t\t\tif w == strings.ToLower(word) {\n\t\t\t\tcount++\n\t\t\t}\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specific word in a text file, ignoring case differences."
  },
  {
    "id": 313,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    lineCount := 0\n    for scanner.Scan() {\n        lineCount++\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any errors encountered."
  },
  {
    "id": 314,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and returns the number of lines that start with the specified prefix.\nfunc CountLinesWithPrefix(filePath string, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts and returns the number of lines in a file that start with a specified prefix."
  },
  {
    "id": 315,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a file specified by the given file path."
  },
  {
    "id": 316,
    "code": "```go\nfunc CountLinesInFile(filePath string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    lineCount := 0\n    for scanner.Scan() {\n        lineCount++\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n    return lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if one occurs."
  },
  {
    "id": 317,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if one occurs."
  },
  {
    "id": 318,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads a text file and returns its content as a slice of strings, where each string is a line from the file.\nfunc ReadFileLines(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a text file and returns its content as a slice of strings, with each string representing a line from the file."
  },
  {
    "id": 319,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// ReadFileAndCountWords reads a file from the given path and returns the total word count.\nfunc ReadFileAndCountWords(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "This function reads a file and counts the total number of words in it, returning the word count."
  },
  {
    "id": 320,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\nfunc ReadFileLineByLine(filePath string) ([]string, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return nil, err\n    }\n    defer file.Close()\n\n    var lines []string\n    scanner := bufio.NewScanner(file)\n    for scanner.Scan() {\n        lines = append(lines, scanner.Text())\n    }\n\n    if err := scanner.Err(); err != nil {\n        return nil, err\n    }\n    return lines, nil\n}\n```",
    "summary": "This function reads a file line by line and returns its contents as a slice of strings."
  },
  {
    "id": 321,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordsInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "The function `CountWordsInFile` reads a file and returns the total count of words found within it."
  },
  {
    "id": 322,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CopyFileContents(src, dst string) error {\n\tsourceFile, err := os.Open(src)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer sourceFile.Close()\n\n\tdestinationFile, err := os.Create(dst)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer destinationFile.Close()\n\n\tscanner := bufio.NewScanner(sourceFile)\n\twriter := bufio.NewWriter(destinationFile)\n\tdefer writer.Flush()\n\n\tfor scanner.Scan() {\n\t\t_, err := writer.WriteString(scanner.Text() + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n```",
    "summary": "Copies the contents of a source file to a destination file line by line using buffered I/O."
  },
  {
    "id": 323,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\treturn lineCount, scanner.Err()\n}\n```",
    "summary": "This function counts and returns the number of lines in a specified file."
  },
  {
    "id": 324,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\treturn count, scanner.Err()\n}\n```",
    "summary": "Counts the occurrences of a specified word in a given file, ignoring case differences."
  },
  {
    "id": 325,
    "code": "```go\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "The function `CountLinesInFile` counts and returns the number of lines in a specified file, along with any error encountered during the process."
  },
  {
    "id": 326,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "CountLinesInFile reads a file and returns the number of lines it contains, handling any errors encountered during the process."
  },
  {
    "id": 327,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordOccurrences reads a file and returns a map with the count of each word's occurrences.\nfunc CountWordOccurrences(filePath string) (map[string]int, error) {\n\twordCount := make(map[string]int)\n\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCount[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "CountWordOccurrences reads a file and returns a map with the frequency of each word."
  },
  {
    "id": 328,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file and returns them as a slice of strings, handling any file and scanning errors."
  },
  {
    "id": 329,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordOccurrences reads a file and returns a map with the frequency of each word.\nfunc CountWordOccurrences(filePath string) (map[string]int, error) {\n\twordCount := make(map[string]int)\n\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCount[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Counts the occurrences of each word in a file and returns the result as a map."
  },
  {
    "id": 330,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadLines reads a file and returns a slice of strings, each representing a line in the file.\nfunc ReadLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "The `ReadLines` function reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 331,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts the number of lines in a specified file and returns the count or an error if the file cannot be read."
  },
  {
    "id": 332,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if the file cannot be read."
  },
  {
    "id": 333,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specified word in a given file."
  },
  {
    "id": 334,
    "code": "```go\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"os\"\n    \"strings\"\n)\n\nfunc CountLinesContainingWord(filePath string, word string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    count := 0\n    for scanner.Scan() {\n        if strings.Contains(scanner.Text(), word) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return count, nil\n}\n```",
    "summary": "This function counts the number of lines in a file that contain a specific word."
  },
  {
    "id": 335,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesWithPrefix(filePath, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that begin with a specified prefix."
  },
  {
    "id": 336,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordsInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "The function `CountWordsInFile` counts the number of words in a specified file and returns the count."
  },
  {
    "id": 337,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and returns the number of lines that start with the specified prefix.\nfunc CountLinesWithPrefix(filePath, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that begin with a specified prefix."
  },
  {
    "id": 338,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// CountLinesInFile opens a file at the given path and returns the number of lines it contains.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "The function `CountLinesInFile` opens a file, counts the number of lines it contains, and returns the line count or an error."
  },
  {
    "id": 339,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if the file cannot be processed."
  },
  {
    "id": 340,
    "code": "func readLinesFromFile(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn lines, nil\n}",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 341,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn lineCount, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a file specified by the given file path."
  },
  {
    "id": 342,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// CountLines reads a file and returns the total number of lines.\nfunc CountLines(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "CountLines reads a file and returns the total number of lines in it."
  },
  {
    "id": 343,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a given file and returns the line count or an error if encountered."
  },
  {
    "id": 344,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordsInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "This function counts the number of words in a given file and returns the count."
  },
  {
    "id": 345,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadLinesFromFile(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file specified by `filePath` and returns them as a slice of strings."
  },
  {
    "id": 346,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 347,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// CountLinesInFile reads a file from the given path and returns the number of lines in it.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn lineCount, nil\n}\n```",
    "summary": "This function reads a file and returns the count of lines it contains."
  },
  {
    "id": 348,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, fmt.Errorf(\"could not open file: %v\", err)\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, fmt.Errorf(\"error reading file: %v\", err)\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts the number of lines in a specified file and returns the count or an error."
  },
  {
    "id": 349,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specified word in a file, returning the count or an error if one occurs."
  },
  {
    "id": 350,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error."
  },
  {
    "id": 351,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// CountLinesInFile opens a file and returns the number of lines it contains.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any potential error."
  },
  {
    "id": 352,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadLinesFromFile(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads and returns all lines from a file as a slice of strings, handling file opening and scanning errors."
  },
  {
    "id": 353,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc WriteLinesToFile(filePath string, lines []string) error {\n\tfile, err := os.Create(filePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\twriter := bufio.NewWriter(file)\n\tfor _, line := range lines {\n\t\t_, err := writer.WriteString(line + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn writer.Flush()\n}\n```",
    "summary": "Writes a slice of strings to a specified file, each line followed by a newline character."
  },
  {
    "id": 354,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordsInFile reads a file and returns the total number of words.\nfunc CountWordsInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "This function reads a specified file and returns the total number of words contained within it."
  },
  {
    "id": 355,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileByLine(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns a slice of strings, each representing a line in the file."
  },
  {
    "id": 356,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordsInFile counts the number of words in a given file.\nfunc CountWordsInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Counts the number of words in a specified file using a buffered scanner."
  },
  {
    "id": 357,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file specified by filePath and returns them as a slice of strings."
  },
  {
    "id": 358,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specified word in a file and returns the total count."
  },
  {
    "id": 359,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error."
  },
  {
    "id": 360,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file and returns its content as a slice of strings, where each element is a line from the file.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file and returns its content as a slice of strings, with each string representing a line from the file."
  },
  {
    "id": 361,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// countWordOccurrences reads a file and returns a map with the count of each word.\nfunc countWordOccurrences(filename string) (map[string]int, error) {\n\twordCount := make(map[string]int)\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCount[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "The function `countWordOccurrences` reads a file and returns a map of word frequencies, counting each word's occurrences."
  },
  {
    "id": 362,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// CountLinesInFile counts the number of lines in the specified file.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or any error encountered."
  },
  {
    "id": 363,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// CountLinesInFile reads a file and returns the number of lines it contains.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts and returns the number of lines in a specified file."
  },
  {
    "id": 364,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 365,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filename, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts occurrences of a specific word in a given file."
  },
  {
    "id": 366,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a given file and returns the count or an error."
  },
  {
    "id": 367,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specific word in a given file, ignoring case sensitivity."
  },
  {
    "id": 368,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and returns the number of lines that start with the specified prefix.\nfunc CountLinesWithPrefix(filePath, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tif strings.HasPrefix(line, prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that start with a specified prefix."
  },
  {
    "id": 369,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and returns the number of lines that start with a given prefix.\nfunc CountLinesWithPrefix(filePath, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that start with a specified prefix."
  },
  {
    "id": 370,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// countWordsInFile reads a file and returns the total number of words.\nfunc countWordsInFile(filepath string) (int, error) {\n\tfile, err := os.Open(filepath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\tword := scanner.Text()\n\t\tif strings.TrimSpace(word) != \"\" {\n\t\t\twordCount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn wordCount, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "The function `countWordsInFile` reads a file and returns the total number of words contained in it."
  },
  {
    "id": 371,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 372,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line-by-line and returns its contents as a slice of strings."
  },
  {
    "id": 373,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "ReadFileLines reads all lines from a specified file and returns them as a slice of strings, handling any potential errors."
  },
  {
    "id": 374,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if encountered."
  },
  {
    "id": 375,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "CountLinesInFile reads a file and returns the number of lines it contains."
  },
  {
    "id": 376,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads all lines from a specified file and returns them as a slice of strings.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 377,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if one occurs."
  },
  {
    "id": 378,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrencesInFile(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specific word in a file, returning the count and any potential error encountered during file reading."
  },
  {
    "id": 379,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a file specified by the given file path."
  },
  {
    "id": 380,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// CountLines returns the number of lines in a given file.\nfunc CountLines(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "CountLines reads a file and returns the number of lines it contains."
  },
  {
    "id": 381,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordOccurrences reads a file line by line and counts the occurrences of a specified word.\nfunc CountWordOccurrences(filePath, targetWord string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\twords := strings.Fields(line)\n\t\tfor _, word := range words {\n\t\t\tif word == targetWord {\n\t\t\t\tcount++\n\t\t\t}\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function reads a file and counts how many times a specified word appears in it."
  },
  {
    "id": 382,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count."
  },
  {
    "id": 383,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn lineCount, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 384,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLinesToSlice(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line-by-line into a slice of strings, returning any error encountered."
  },
  {
    "id": 385,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\n// ReplaceInFile reads a file, replaces all occurrences of oldWord with newWord, and writes the result back to the file.\nfunc ReplaceInFile(filePath, oldWord, newWord string) error {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return err\n    }\n    defer file.Close()\n\n    var output strings.Builder\n    scanner := bufio.NewScanner(file)\n    for scanner.Scan() {\n        line := strings.ReplaceAll(scanner.Text(), oldWord, newWord)\n        output.WriteString(line + \"\\n\")\n    }\n\n    if err := scanner.Err(); err != nil {\n        return err\n    }\n\n    file, err = os.Create(filePath)\n    if err != nil {\n        return err\n    }\n    defer file.Close()\n\n    _, err = file.WriteString(output.String())\n    return err\n}\n```",
    "summary": "This function replaces all occurrences of a specified word in a file with a new word and writes the updated content back to the same file."
  },
  {
    "id": 386,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc WriteLinesToFile(filePath string, lines []string) error {\n\tfile, err := os.Create(filePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\twriter := bufio.NewWriter(file)\n\tfor _, line := range lines {\n\t\t_, err := writer.WriteString(line + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn writer.Flush()\n}\n```",
    "summary": "Writes an array of strings to a specified file, with each string on a new line."
  },
  {
    "id": 387,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts occurrences of a specified word in a text file and returns the count."
  },
  {
    "id": 388,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts the number of lines in a given file and returns the count or an error if one occurs."
  },
  {
    "id": 389,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file line by line and returns a slice of strings, each representing a line in the file.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "This function reads a file line by line and returns the lines as a slice of strings."
  },
  {
    "id": 390,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 391,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts and returns the number of lines in a specified file."
  },
  {
    "id": 392,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tword = strings.ToLower(word)\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tif strings.ToLower(scanner.Text()) == word {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts occurrences of a specified word in a file, treating words case-insensitively."
  },
  {
    "id": 393,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a file specified by the given file path, returning the count or an error if one occurs."
  },
  {
    "id": 394,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordOccurrences reads a file and returns a map of word occurrences.\nfunc CountWordOccurrences(filePath string) (map[string]int, error) {\n\twordCount := make(map[string]int)\n\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCount[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Counts the occurrences of each word in a file, returning a map with words as keys and their counts as values."
  },
  {
    "id": 395,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\nfunc CountWordOccurrences(filename, word string) (int, error) {\n    file, err := os.Open(filename)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    scanner.Split(bufio.ScanWords)\n\n    count := 0\n    for scanner.Scan() {\n        if strings.EqualFold(scanner.Text(), word) {\n            count++\n        }\n    }\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specified word in a given text file, ignoring case differences."
  },
  {
    "id": 396,
    "code": "```go\nfunc ReadFileLines(filePath string) ([]string, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return nil, err\n    }\n    defer file.Close()\n\n    var lines []string\n    scanner := bufio.NewScanner(file)\n    for scanner.Scan() {\n        lines = append(lines, scanner.Text())\n    }\n\n    if err := scanner.Err(); err != nil {\n        return nil, err\n    }\n\n    return lines, nil\n}\n```",
    "summary": "Reads a file from the given path and returns its contents as a slice of strings, with each element representing a line from the file."
  },
  {
    "id": 397,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings, handling errors appropriately."
  },
  {
    "id": 398,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesContainingWord reads a file and returns the number of lines that contain a specific word.\nfunc CountLinesContainingWord(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n```",
    "summary": "The function counts and returns the number of lines in a file that contain a specified word."
  },
  {
    "id": 399,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\nfunc CountLinesWithPrefix(filePath, prefix string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    count := 0\n\n    for scanner.Scan() {\n        line := scanner.Text()\n        if strings.HasPrefix(line, prefix) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that start with a given prefix."
  },
  {
    "id": 400,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// CountLines counts the number of lines in a given file.\nfunc CountLines(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count."
  },
  {
    "id": 401,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\n// ReadFileLines reads a file and returns its content as a slice of strings, each representing a line.\nfunc ReadFileLines(filePath string) ([]string, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return nil, err\n    }\n    defer file.Close()\n\n    var lines []string\n    scanner := bufio.NewScanner(file)\n    for scanner.Scan() {\n        lines = append(lines, scanner.Text())\n    }\n\n    if err := scanner.Err(); err != nil {\n        return nil, err\n    }\n    return lines, nil\n}\n```",
    "summary": "Reads a file and returns its contents as a slice of strings, with each string representing a line from the file."
  },
  {
    "id": 402,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\n// countWordsInFile reads a file and returns the total count of words.\nfunc countWordsInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\twordCount := 0\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Counts the total number of words in a specified file and returns the count."
  },
  {
    "id": 403,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "CountLinesInFile opens a file, counts its lines, and returns the count or an error."
  },
  {
    "id": 404,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file and returns its content as a slice of strings,\n// where each string represents a line in the file.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file and returns its content as a slice of strings, each representing a line."
  },
  {
    "id": 405,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithWord reads a file and counts the number of lines containing the specified word.\nfunc CountLinesWithWord(filename string, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "CountLinesWithWord reads a file and returns the number of lines containing a specified word."
  },
  {
    "id": 406,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesWithKeyword(filePath, keyword string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), keyword) {\n\t\t\tcount++\n\t\t}\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines containing a specific keyword in a given file."
  },
  {
    "id": 407,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file specified by `filePath` and returns them as a slice of strings."
  },
  {
    "id": 408,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file and returns its content as a slice of strings, each representing a line.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file and returns its content as a slice of strings, with each element representing a line."
  },
  {
    "id": 409,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filename, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specified word in a text file, ignoring case sensitivity."
  },
  {
    "id": 410,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a file specified by the given file path."
  },
  {
    "id": 411,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingWord(filename, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 412,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesContainingWord reads a file and counts the number of lines that contain a given word.\nfunc CountLinesContainingWord(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n```",
    "summary": "This function reads a file and counts the number of lines containing a specified word."
  },
  {
    "id": 413,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn lineCount, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count, handling errors appropriately."
  },
  {
    "id": 414,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    scanner.Split(bufio.ScanWords)\n\n    count := 0\n    for scanner.Scan() {\n        if strings.EqualFold(scanner.Text(), word) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return count, nil\n}\n```",
    "summary": "CountWordOccurrences reads a file and counts the occurrences of a specified word, ignoring case."
  },
  {
    "id": 415,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithKeyword reads a file and counts the number of lines containing a specified keyword.\nfunc CountLinesWithKeyword(filePath string, keyword string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), keyword) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function `CountLinesWithKeyword` reads a file and returns the number of lines containing a specified keyword."
  },
  {
    "id": 416,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filename, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specified word in a given file, returning the count and any error encountered."
  },
  {
    "id": 417,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"fmt\"\n)\n\n// ReadLines reads a file and returns its content as a slice of strings, with each element representing a line.\nfunc ReadLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file and returns its content as a slice of strings, where each string represents a line from the file."
  },
  {
    "id": 418,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file and returns them as a slice of strings, handling any errors encountered."
  },
  {
    "id": 419,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLinesToList(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file into a slice of strings, returning an error if any issue occurs during processing."
  },
  {
    "id": 420,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesContainingWord counts the number of lines in a file that contain the specified word.\nfunc CountLinesContainingWord(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 421,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specified word in a text file and returns the count."
  },
  {
    "id": 422,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and counts the number of lines that start with a given prefix.\nfunc CountLinesWithPrefix(filePath string, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tif strings.HasPrefix(line, prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}",
    "summary": "This function reads a file and counts the number of lines that start with a specified prefix."
  },
  {
    "id": 423,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "The function `CountLinesInFile` counts and returns the number of lines in the specified file."
  },
  {
    "id": 424,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 425,
    "code": "import (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}",
    "summary": "Counts the number of lines in a given file and returns the count along with any error encountered."
  },
  {
    "id": 426,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// CountLinesInFile opens a file, counts the number of lines, and returns the count.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a given file and returns the count."
  },
  {
    "id": 427,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 428,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// CountLinesInFile reads a file and returns the number of lines it contains.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "CountLinesInFile reads a file specified by its path and returns the number of lines in it."
  },
  {
    "id": 429,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\n// ReadLines reads a file line by line and returns a slice of strings.\nfunc ReadLines(filename string) ([]string, error) {\n    file, err := os.Open(filename)\n    if err != nil {\n        return nil, err\n    }\n    defer file.Close()\n\n    var lines []string\n    scanner := bufio.NewScanner(file)\n    for scanner.Scan() {\n        lines = append(lines, scanner.Text())\n    }\n    if err := scanner.Err(); err != nil {\n        return nil, err\n    }\n\n    return lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns the contents as a slice of strings."
  },
  {
    "id": 430,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\n// CountLinesWithPrefix opens a file and counts the number of lines that start with the specified prefix.\nfunc CountLinesWithPrefix(filePath string, prefix string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    count := 0\n    for scanner.Scan() {\n        if strings.HasPrefix(scanner.Text(), prefix) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n    return count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that start with a given prefix."
  },
  {
    "id": 431,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordOccurrences reads a file and returns a map of word occurrences in the file.\nfunc CountWordOccurrences(filename string) (map[string]int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\twordCounts := make(map[string]int)\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCounts[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCounts, nil\n}\n```",
    "summary": "This function reads a file and counts the occurrences of each word, returning the results as a map."
  },
  {
    "id": 432,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file specified by filePath and returns them as a slice of strings."
  },
  {
    "id": 433,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file specified by filename and returns a slice of strings,\n// each representing a line in the file. Returns an error if the file cannot be opened or read.\nfunc ReadFileLines(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line-by-line and returns the content as a slice of strings, handling errors during file operations."
  },
  {
    "id": 434,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadLines reads a file and returns its content as a slice of strings, one for each line.\nfunc ReadLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "This function reads a file and returns its contents as a slice of strings, where each string represents a line from the file."
  },
  {
    "id": 435,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// CountLinesInFile opens a file at the specified path and returns the number of lines it contains.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tlineCount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts and returns the number of lines in a file specified by its path."
  },
  {
    "id": 436,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrencesInFile(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}",
    "summary": "The function counts the occurrences of a specific word in a text file and returns the count."
  },
  {
    "id": 437,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts the number of lines in a specified file and returns the count or an error if one occurs."
  },
  {
    "id": 438,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns its contents as a slice of strings, handling errors appropriately."
  },
  {
    "id": 439,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if file access fails."
  },
  {
    "id": 440,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\n// ReadLinesWithPrefix reads a file and returns all lines that start with a given prefix.\nfunc ReadLinesWithPrefix(filename, prefix string) ([]string, error) {\n    file, err := os.Open(filename)\n    if err != nil {\n        return nil, err\n    }\n    defer file.Close()\n\n    var lines []string\n    scanner := bufio.NewScanner(file)\n    for scanner.Scan() {\n        line := scanner.Text()\n        if strings.HasPrefix(line, prefix) {\n            lines = append(lines, line)\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return nil, err\n    }\n    return lines, nil\n}\n```",
    "summary": "Reads a file and returns all lines that start with a specified prefix."
  },
  {
    "id": 441,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file specified by the file path and returns them as a slice of strings."
  },
  {
    "id": 442,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingWord(filename, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}",
    "summary": "This function counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 443,
    "code": "```go\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"os\"\n    \"strings\"\n)\n\nfunc CountWordsInFile(filePath string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    scanner.Split(bufio.ScanWords)\n\n    wordCount := 0\n    for scanner.Scan() {\n        wordCount++\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return wordCount, nil\n}\n```",
    "summary": "The function `CountWordsInFile` counts the number of words in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 444,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc FindWordInFile(filePath, word string) (bool, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn false, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\treturn true, nil\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn false, err\n\t}\n\n\treturn false, nil\n}\n```",
    "summary": "This function checks if a given word exists in a specified file by scanning each line for the word."
  },
  {
    "id": 445,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file from the given path and returns its lines as a slice of strings.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}",
    "summary": "ReadFileLines reads a file from a specified path and returns its lines as a slice of strings."
  },
  {
    "id": 446,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and counts the number of lines that start with a given prefix.\nfunc CountLinesWithPrefix(filePath, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that start with a specified prefix."
  },
  {
    "id": 447,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specified word in a file, ignoring case differences."
  },
  {
    "id": 448,
    "code": "```go\nfunc ReadFileLines(filePath string) ([]string, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return nil, err\n    }\n    defer file.Close()\n\n    var lines []string\n    scanner := bufio.NewScanner(file)\n    for scanner.Scan() {\n        lines = append(lines, scanner.Text())\n    }\n\n    if err := scanner.Err(); err != nil {\n        return nil, err\n    }\n\n    return lines, nil\n}\n```",
    "summary": "Reads all lines from a file specified by the given path and returns them as a slice of strings."
  },
  {
    "id": 449,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a given file and returns the count along with any potential error."
  },
  {
    "id": 450,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingWord(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines containing a specific word in a given file."
  },
  {
    "id": 451,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file at the given path and returns them as a slice of strings."
  },
  {
    "id": 452,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordOccurrences reads a file and returns a map with the count of each word.\nfunc CountWordOccurrences(filename string) (map[string]int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\twordCount := make(map[string]int)\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCount[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Reads a file and returns a map with the count of each word's occurrences."
  },
  {
    "id": 453,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error."
  },
  {
    "id": 454,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts and returns the number of lines in a specified file."
  },
  {
    "id": 455,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\n// CountLines counts the number of lines in a given file.\nfunc CountLines(filePath string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    lineCount := 0\n    for scanner.Scan() {\n        lineCount++\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n    return lineCount, nil\n}\n```",
    "summary": "The function `CountLines` reads a file and returns the total number of lines it contains."
  },
  {
    "id": 456,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesContainingWord reads a file line by line and counts how many lines contain the specified word.\nfunc CountLinesContainingWord(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n```",
    "summary": "The function `CountLinesContainingWord` opens a file and counts the number of lines that contain a specified word."
  },
  {
    "id": 457,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}",
    "summary": "The function CountLinesInFile opens a specified file and returns the number of lines in it, handling any potential errors."
  },
  {
    "id": 458,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if encountered."
  },
  {
    "id": 459,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadLines reads all the lines from a given file path and returns them as a slice of strings.\nfunc ReadLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}",
    "summary": "ReadLines opens a file at the specified path and reads its contents line by line into a slice of strings, returning any encountered error."
  },
  {
    "id": 460,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\nfunc ReadLines(filePath string) ([]string, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return nil, err\n    }\n    defer file.Close()\n\n    var lines []string\n    scanner := bufio.NewScanner(file)\n    for scanner.Scan() {\n        lines = append(lines, scanner.Text())\n    }\n\n    return lines, scanner.Err()\n}\n```",
    "summary": "Reads all lines from a file specified by filePath and returns them as a slice of strings."
  },
  {
    "id": 461,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLineByLine(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tlines := []string{}\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns the lines as a slice of strings."
  },
  {
    "id": 462,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a file specified by the given file path."
  },
  {
    "id": 463,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns the lines as a slice of strings."
  },
  {
    "id": 464,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc WriteLinesToFile(filename string, lines []string) error {\n\tfile, err := os.Create(filename)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\twriter := bufio.NewWriter(file)\n\tfor _, line := range lines {\n\t\t_, err := writer.WriteString(line + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn writer.Flush()\n}\n```",
    "summary": "Writes a slice of strings to a file, each on a new line, handling file creation and buffering."
  },
  {
    "id": 465,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts the number of lines in a specified file and returns the count or an error if any occurs."
  },
  {
    "id": 466,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "CountLinesInFile reads a file and returns the total number of lines in it."
  },
  {
    "id": 467,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// countLinesInFile reads a file and returns the number of lines it contains.\nfunc countLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "The function `countLinesInFile` opens a file, counts the number of lines, and returns the count or an error if encountered."
  },
  {
    "id": 468,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts and returns the number of lines in a specified file, handling any potential errors."
  },
  {
    "id": 469,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n)\n\n// countLinesWithPrefix reads a file and returns the number of lines that start with the specified prefix.\nfunc countLinesWithPrefix(filename, prefix string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function reads a file and counts the number of lines that start with a specified prefix."
  },
  {
    "id": 470,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if any occurs."
  },
  {
    "id": 471,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if reading fails."
  },
  {
    "id": 472,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\nfunc CountWordsInFile(filePath string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    scanner.Split(bufio.ScanWords)\n\n    wordCount := 0\n    for scanner.Scan() {\n        wordCount++\n    }\n    \n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return wordCount, nil\n}\n```",
    "summary": "This function counts the number of words in a specified file by reading it line-by-line."
  },
  {
    "id": 473,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 474,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordsInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "This function counts the number of words in a specified file and returns the total count."
  },
  {
    "id": 475,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts occurrences of a specific word in a text file and returns the count along with any error encountered during file processing."
  },
  {
    "id": 476,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\treturn lineCount, scanner.Err()\n}\n```",
    "summary": "Counts the number of lines in a file specified by the given file path."
  },
  {
    "id": 477,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadLinesFromFile(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to open file: %w\", err)\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, fmt.Errorf(\"error reading file: %w\", err)\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file and returns them as a slice of strings, handling any errors encountered."
  },
  {
    "id": 478,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLineByLine(filePath string) ([]string, error) {\n\tvar lines []string\n\t\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns the lines as a slice of strings."
  },
  {
    "id": 479,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\twords := strings.Fields(line)\n\t\tfor _, w := range words {\n\t\t\tif w == word {\n\t\t\t\tcount++\n\t\t\t}\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specific word in a given file."
  },
  {
    "id": 480,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file and returns them as a slice of strings."
  },
  {
    "id": 481,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\nfunc CountLinesInFile(filename string) (int, error) {\n    file, err := os.Open(filename)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    lineCount := 0\n    for scanner.Scan() {\n        lineCount++\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if encountered."
  },
  {
    "id": 482,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file specified by `filePath` and returns them as a slice of strings."
  },
  {
    "id": 483,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\nfunc CountLinesWithPrefix(filePath string, prefix string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    count := 0\n    for scanner.Scan() {\n        if strings.HasPrefix(scanner.Text(), prefix) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return count, nil\n}\n```",
    "summary": "The function counts the number of lines in a file that start with a given prefix."
  },
  {
    "id": 484,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingWord(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 485,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\n// CountLinesWithWord counts the number of lines in a given file that contain a specific word.\nfunc CountLinesWithWord(filePath string, word string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    count := 0\n    for scanner.Scan() {\n        if strings.Contains(scanner.Text(), word) {\n            count++\n        }\n    }\n\n    if err = scanner.Err(); err != nil {\n        return 0, err\n    }\n    return count, nil\n}\n```",
    "summary": "This function counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 486,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tcount += strings.Count(scanner.Text(), word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n```",
    "summary": "The function `CountWordOccurrences` reads a file and counts how many times a specified word appears in it."
  },
  {
    "id": 487,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn lineCount, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any read error encountered."
  },
  {
    "id": 488,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function `CountWordOccurrences` reads a file and counts the occurrences of a specified word in the file."
  },
  {
    "id": 489,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// countLinesInFile opens the specified file and returns the number of lines it contains.\nfunc countLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any errors encountered."
  },
  {
    "id": 490,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadLines reads all lines from a file and returns them as a slice of strings.\nfunc ReadLines(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\treturn lines, scanner.Err()\n}",
    "summary": "ReadLines reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 491,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}",
    "summary": "The function CountLinesInFile opens a file and returns the number of lines it contains, handling any errors encountered during processing."
  },
  {
    "id": 492,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    scanner.Split(bufio.ScanWords)\n\n    count := 0\n    for scanner.Scan() {\n        if strings.EqualFold(scanner.Text(), word) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specified word in a file, ignoring case, and returns the count."
  },
  {
    "id": 493,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLines(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}",
    "summary": "Counts the number of lines in a specified file and returns the count."
  },
  {
    "id": 494,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file and returns its contents as a slice of strings, each representing a line.\nfunc ReadFileLines(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}",
    "summary": "ReadFileLines reads a file and returns its contents as a slice of strings, with each string representing a line from the file."
  },
  {
    "id": 495,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn lineCount, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "CountLinesInFile opens a file and returns the number of lines it contains, handling any read errors."
  },
  {
    "id": 496,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 497,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if encountered."
  },
  {
    "id": 498,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 499,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    lineCount := 0\n    for scanner.Scan() {\n        lineCount++\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return lineCount, nil\n}\n```",
    "summary": "This function counts the number of lines in a specified file and returns the count or an error if file access fails."
  },
  {
    "id": 500,
    "code": "```go\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    lineCount := 0\n    for scanner.Scan() {\n        lineCount++\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n    return lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error."
  },
  {
    "id": 501,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    scanner.Split(bufio.ScanWords)\n\n    count := 0\n    for scanner.Scan() {\n        if strings.EqualFold(scanner.Text(), word) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return count, nil\n}\n```",
    "summary": "The function `CountWordOccurrences` reads a file and counts how many times a specified word occurs, ignoring case differences."
  },
  {
    "id": 502,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 503,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\twordCount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Counts the number of occurrences of a specified word in a given file using case-insensitive comparison."
  },
  {
    "id": 504,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "ReadFileLines reads all lines from a specified file and returns them as a slice of strings, handling any errors encountered."
  },
  {
    "id": 505,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and returns the number of lines that start with the specified prefix.\nfunc CountLinesWithPrefix(filePath string, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function `CountLinesWithPrefix` reads a file and counts the number of lines that start with a specified prefix."
  },
  {
    "id": 506,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesContainingWord reads a file and counts how many lines contain a specific word.\nfunc CountLinesContainingWord(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function counts lines in a file that contain a specified word."
  },
  {
    "id": 507,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file and returns its contents as a slice of strings, one for each line.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file and returns its content as a slice of strings, with each line as an element."
  },
  {
    "id": 508,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingWord(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn count, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 509,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filepath string) (int, error) {\n\tfile, err := os.Open(filepath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the total count or an error."
  },
  {
    "id": 510,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if encountered."
  },
  {
    "id": 511,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc ReadLinesContainingSubstring(filename, substring string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tif strings.Contains(line, substring) {\n\t\t\tlines = append(lines, line)\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "The function reads a file and returns all lines containing a specified substring."
  },
  {
    "id": 512,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filename string, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specified word in a given text file."
  },
  {
    "id": 513,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLines(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the total line count or an error."
  },
  {
    "id": 514,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileByLine(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns the content as a slice of strings, handling any errors that occur."
  },
  {
    "id": 515,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadLinesFromFile(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "This function reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 516,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "The function `CountLinesInFile` opens a file, counts the number of lines it contains, and returns the line count or an error if one occurs."
  },
  {
    "id": 517,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\nfunc CountLinesContainingWord(filePath string, word string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    count := 0\n\n    for scanner.Scan() {\n        if strings.Contains(scanner.Text(), word) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 518,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 519,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings, handling any errors encountered."
  },
  {
    "id": 520,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 521,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// CountLinesInFile counts the number of lines in a given file path.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "CountLinesInFile reads a file and returns the number of lines it contains, handling any errors encountered."
  },
  {
    "id": 522,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and counts the number of lines that start with a given prefix.\nfunc CountLinesWithPrefix(filePath string, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that start with a specified prefix."
  },
  {
    "id": 523,
    "code": "```go\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"os\"\n    \"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    count := 0\n\n    for scanner.Scan() {\n        line := scanner.Text()\n        count += strings.Count(line, word)\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return count, nil\n}\n```",
    "summary": "Counts the occurrences of a specified word in a given file."
  },
  {
    "id": 524,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and counts the number of lines that start with a given prefix.\nfunc CountLinesWithPrefix(filePath string, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that start with a specified prefix."
  },
  {
    "id": 525,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file line by line and returns a slice of strings containing each line.\nfunc ReadFileLines(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns a slice of strings containing the file's lines."
  },
  {
    "id": 526,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// CopyFile copies the contents of the source file to the destination file.\nfunc CopyFile(src, dst string) error {\n\tsourceFile, err := os.Open(src)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer sourceFile.Close()\n\n\tdestinationFile, err := os.Create(dst)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer destinationFile.Close()\n\n\tscanner := bufio.NewScanner(sourceFile)\n\twriter := bufio.NewWriter(destinationFile)\n\n\tfor scanner.Scan() {\n\t\t_, err := writer.WriteString(scanner.Text() + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn err\n\t}\n\n\treturn writer.Flush()\n}\n```",
    "summary": "The `CopyFile` function reads from a source file and writes its contents to a destination file line by line."
  },
  {
    "id": 527,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and counts how many lines start with a given prefix.\nfunc CountLinesWithPrefix(filePath string, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that start with a specified prefix."
  },
  {
    "id": 528,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\nfunc WriteLinesToFile(filename string, lines []string) error {\n    file, err := os.Create(filename)\n    if err != nil {\n        return err\n    }\n    defer file.Close()\n\n    writer := bufio.NewWriter(file)\n    for _, line := range lines {\n        _, err := writer.WriteString(line + \"\\n\")\n        if err != nil {\n            return err\n        }\n    }\n    return writer.Flush()\n}\n```",
    "summary": "Writes a slice of strings to a specified file, each string as a new line."
  },
  {
    "id": 529,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\n// ReadFileLines reads a file at the given path and returns its contents as a slice of strings, each representing a line.\nfunc ReadFileLines(filePath string) ([]string, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return nil, err\n    }\n    defer file.Close()\n\n    var lines []string\n    scanner := bufio.NewScanner(file)\n    for scanner.Scan() {\n        lines = append(lines, scanner.Text())\n    }\n\n    if err := scanner.Err(); err != nil {\n        return nil, err\n    }\n\n    return lines, nil\n}\n```",
    "summary": "Reads a file and returns its contents as a slice of lines."
  },
  {
    "id": 530,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file and returns its content as a slice of strings, each representing a line.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file and returns its contents as a slice of strings, each representing a line."
  },
  {
    "id": 531,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordOccurrences reads a file at the given path and returns a map of word occurrences.\nfunc CountWordOccurrences(filePath string) (map[string]int, error) {\n\twordCount := make(map[string]int)\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCount[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "The function CountWordOccurrences reads a file and returns a map with the count of each word's occurrences, ignoring case."
  },
  {
    "id": 532,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file, returning the count or an error if one occurs."
  },
  {
    "id": 533,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tlineCount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts and returns the number of lines in a specified file."
  },
  {
    "id": 534,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// CountLinesInFile opens a file, counts the number of lines, and returns the count.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 535,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filename, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specified word in a file and returns the count."
  },
  {
    "id": 536,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordOccurrences reads a file and counts the occurrences of each word.\nfunc CountWordOccurrences(filePath string) (map[string]int, error) {\n\twordCount := make(map[string]int)\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCount[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "CountWordOccurrences reads a file and returns a map with the count of each word's occurrences."
  },
  {
    "id": 537,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}",
    "summary": "This function counts the number of lines in a specified file and returns the count or an error if one occurs."
  },
  {
    "id": 538,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 539,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file and returns them as a slice of strings."
  },
  {
    "id": 540,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingWord(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function counts how many lines in a file contain a specific word and returns this count."
  },
  {
    "id": 541,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordsInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Counts the number of words in a specified file and returns the count along with any potential error encountered."
  },
  {
    "id": 542,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordsInFile(filePath string) (map[string]int, error) {\n\twordCount := make(map[string]int)\n\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCount[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "This Go function counts the frequency of each word in a given file, returning a map with words as keys and their counts as values."
  },
  {
    "id": 543,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\twordCount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "This function counts the occurrences of a specified word in a given file, ignoring case differences."
  },
  {
    "id": 544,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordOccurrences reads a file and counts the occurrences of each word.\nfunc CountWordOccurrences(filePath string) (map[string]int, error) {\n\twordCount := make(map[string]int)\n\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCount[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "The function `CountWordOccurrences` reads a file and returns a map of word occurrences, counting each word in a case-insensitive manner."
  },
  {
    "id": 545,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\n// ReadFileAndCountWords reads a file from the given path and returns the total word count.\nfunc ReadFileAndCountWords(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\tword := scanner.Text()\n\t\tif len(strings.TrimSpace(word)) > 0 {\n\t\t\twordCount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "The function `ReadFileAndCountWords` opens a file, reads its contents, and returns the total number of words in the file."
  },
  {
    "id": 546,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrencesInFile(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specified word in a given file and returns the count along with any error encountered."
  },
  {
    "id": 547,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file specified by the file path and returns them as a slice of strings."
  },
  {
    "id": 548,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordOccurrences reads a file and counts the occurrences of a specific word.\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\twordCount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\twordCount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Counts the occurrences of a specific word in a file and returns the total count."
  },
  {
    "id": 549,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithWord reads a file and counts the number of lines that contain a specific word.\nfunc CountLinesWithWord(filename, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specific word."
  },
  {
    "id": 550,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if file processing fails."
  },
  {
    "id": 551,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadLines reads a file and returns its content as a slice of strings, each representing a line.\nfunc ReadLines(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "ReadLines reads a file and returns its content as a slice of strings, with each string representing a line from the file."
  },
  {
    "id": 552,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"log\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns its contents as a slice of strings."
  },
  {
    "id": 553,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLineByLine opens a file and prints its contents line by line.\nfunc ReadFileLineByLine(filePath string) error {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to open file: %w\", err)\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tfmt.Println(scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn fmt.Errorf(\"error reading file: %w\", err)\n\t}\n\n\treturn nil\n}\n```",
    "summary": "The function `ReadFileLineByLine` opens a file and prints its contents line by line, handling potential errors."
  },
  {
    "id": 554,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadLines reads a file and returns its content as a slice of strings, each representing a line.\nfunc ReadLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\treturn lines, scanner.Err()\n}\n```",
    "summary": "ReadLines reads a specified file and returns its content as a slice of strings, each representing a line."
  },
  {
    "id": 555,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file into a slice of strings, returning an error if any issues occur during file access or reading."
  },
  {
    "id": 556,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filename, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts and returns the number of occurrences of a specific word in a given file."
  },
  {
    "id": 557,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrencesInFile(filename, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specified word in a given file and returns the count along with any error encountered."
  },
  {
    "id": 558,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tlineCount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "The function `CountLinesInFile` opens a file and returns the total number of lines it contains."
  },
  {
    "id": 559,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function counts occurrences of a specified word in a file, ignoring case."
  },
  {
    "id": 560,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := strings.ToLower(scanner.Text())\n\t\tif strings.Contains(line, strings.ToLower(word)) {\n\t\t\tcount += strings.Count(line, strings.ToLower(word))\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specific word in a file, ignoring case, and returns the count or an error."
  },
  {
    "id": 561,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordOccurrences reads a text file and returns a map of word occurrences.\nfunc CountWordOccurrences(filePath string) (map[string]int, error) {\n\twordCount := make(map[string]int)\n\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCount[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "This function reads a text file and returns a map with the count of each word's occurrences."
  },
  {
    "id": 562,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// CountLinesInFile opens a file, reads its contents line by line, and returns the total number of lines.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function opens a file, counts its lines, and returns the total number of lines or an error if encountered."
  },
  {
    "id": 563,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordsInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\twordCount := 0\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Counts the number of words in a file specified by its path."
  },
  {
    "id": 564,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts the number of lines in a specified file and returns the count or an error if encountered."
  },
  {
    "id": 565,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordOccurrences reads a file and returns a map with the count of each word in the file.\nfunc CountWordOccurrences(filePath string) (map[string]int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\twordCounts := make(map[string]int)\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCounts[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCounts, nil\n}\n```",
    "summary": "This function reads a file and returns a map containing the count of each word, ignoring case."
  },
  {
    "id": 566,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file and returns its content as a slice of strings, each representing a line in the file.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file and returns its content as a slice of strings, with each string representing a line."
  },
  {
    "id": 567,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}",
    "summary": "Counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 568,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadLines reads all lines from a file and returns them as a slice of strings.\nfunc ReadLines(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "The function `ReadLines` reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 569,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// CountLines counts the number of lines in a given file.\nfunc CountLines(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if encountered."
  },
  {
    "id": 570,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// countLinesInFile returns the number of lines in the specified file.\nfunc countLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n\nfunc main() {\n\tlines, err := countLinesInFile(\"example.txt\")\n\tif err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t\treturn\n\t}\n\tfmt.Println(\"Number of lines:\", lines)\n}",
    "summary": "This function counts and returns the number of lines in a specified file."
  },
  {
    "id": 571,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// WriteLines writes the provided lines to a file specified by filename.\nfunc WriteLines(filename string, lines []string) error {\n\tfile, err := os.Create(filename)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\twriter := bufio.NewWriter(file)\n\tfor _, line := range lines {\n\t\t_, err := writer.WriteString(line + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn writer.Flush()\n}\n```",
    "summary": "Writes a slice of strings to a specified file, each followed by a newline."
  },
  {
    "id": 572,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// CountLinesInFile reads a file and returns the total number of lines.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a file specified by the file path."
  },
  {
    "id": 573,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// ReadLinesContainingWord reads a file and returns all lines containing the specified word.\nfunc ReadLinesContainingWord(filePath, word string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar matchingLines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tif strings.Contains(line, word) {\n\t\t\tmatchingLines = append(matchingLines, line)\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn matchingLines, nil\n}\n```",
    "summary": "The function reads a file and returns a slice of all lines that contain a specified word."
  },
  {
    "id": 574,
    "code": "```go\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns its content as a slice of strings."
  },
  {
    "id": 575,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings, handling any potential errors."
  },
  {
    "id": 576,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return nil, err\n    }\n    defer file.Close()\n\n    var lines []string\n    scanner := bufio.NewScanner(file)\n    for scanner.Scan() {\n        lines = append(lines, scanner.Text())\n    }\n\n    if err := scanner.Err(); err != nil {\n        return nil, err\n    }\n\n    return lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns the lines as a slice of strings."
  },
  {
    "id": 577,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file and returns its content as a slice of strings, where each string represents a line.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file and returns its content as a slice of strings, with each string corresponding to a line in the file."
  },
  {
    "id": 578,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "This function reads a file line-by-line and returns the lines as a slice of strings."
  },
  {
    "id": 579,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// CountLines counts the number of lines in a given file and returns the line count.\nfunc CountLines(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}",
    "summary": "The function CountLines reads a file at a specified path and returns the number of lines it contains."
  },
  {
    "id": 580,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\t\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line-by-line and returns a slice of strings containing each line, handling any errors encountered."
  },
  {
    "id": 581,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts and returns the number of lines in a specified file."
  },
  {
    "id": 582,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CopyFileLineByLine(src string, dst string) error {\n\tsourceFile, err := os.Open(src)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer sourceFile.Close()\n\n\tdestinationFile, err := os.Create(dst)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer destinationFile.Close()\n\n\tscanner := bufio.NewScanner(sourceFile)\n\twriter := bufio.NewWriter(destinationFile)\n\tdefer writer.Flush()\n\n\tfor scanner.Scan() {\n\t\t_, err := writer.WriteString(scanner.Text() + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn scanner.Err()\n}\n```",
    "summary": "Copies the contents of one file to another line by line using buffered I/O in Go."
  },
  {
    "id": 583,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrencesInFile(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\tcount := 0\n\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specific word in a file, ignoring case sensitivity."
  },
  {
    "id": 584,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadLines(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 585,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a given file and returns the count along with any errors encountered."
  },
  {
    "id": 586,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 587,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file and returns its content as a slice of strings, one for each line.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "The function `ReadFileLines` reads a file line-by-line and returns its contents as a slice of strings."
  },
  {
    "id": 588,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and returns the number of lines that start with the given prefix.\nfunc CountLinesWithPrefix(filePath string, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that start with a specified prefix."
  },
  {
    "id": 589,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\twordCount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\twordCount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "This function counts the occurrences of a specified word in a file."
  },
  {
    "id": 590,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileByLine reads a file line by line and prints each line to the console.\nfunc ReadFileByLine(filename string) error {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tfmt.Println(scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n```",
    "summary": "Reads a file line by line and prints each line to the console."
  },
  {
    "id": 591,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// FilterFileLines reads a file and writes lines containing a specific keyword to an output file.\nfunc FilterFileLines(inputFilePath, outputFilePath, keyword string) error {\n\tinFile, err := os.Open(inputFilePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer inFile.Close()\n\n\toutFile, err := os.Create(outputFilePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer outFile.Close()\n\n\tscanner := bufio.NewScanner(inFile)\n\twriter := bufio.NewWriter(outFile)\n\tdefer writer.Flush()\n\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tif strings.Contains(line, keyword) {\n\t\t\t_, err := writer.WriteString(line + \"\\n\")\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n```",
    "summary": "The function reads an input file and writes lines containing a specified keyword to an output file."
  },
  {
    "id": 592,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLines(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}",
    "summary": "The function CountLines reads a file and returns the number of lines it contains."
  },
  {
    "id": 593,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"io\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\treader := bufio.NewReader(file)\n\tfor {\n\t\tline, err := reader.ReadString('\\n')\n\t\tif err != nil && err != io.EOF {\n\t\t\treturn 0, err\n\t\t}\n\n\t\tcount += strings.Count(line, word)\n\n\t\tif err == io.EOF {\n\t\t\tbreak\n\t\t}\n\t}\n\treturn count, nil\n}",
    "summary": "Counts occurrences of a specified word in a file."
  },
  {
    "id": 594,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    lineCount := 0\n    for scanner.Scan() {\n        lineCount++\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n    return lineCount, nil\n}\n```",
    "summary": "This function counts the number of lines in a given file and returns the count or an error if any occurs during file reading."
  },
  {
    "id": 595,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// WriteLinesToFile writes a slice of strings to a specified file, one line per string.\nfunc WriteLinesToFile(filename string, lines []string) error {\n\tfile, err := os.Create(filename)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\twriter := bufio.NewWriter(file)\n\tfor _, line := range lines {\n\t\t_, err := writer.WriteString(line + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn writer.Flush()\n}\n```",
    "summary": "This function writes a slice of strings to a specified file, with each string written on a new line."
  },
  {
    "id": 596,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and counts the number of lines that start with a given prefix.\nfunc CountLinesWithPrefix(filePath string, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tif strings.HasPrefix(line, prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that begin with a specified prefix."
  },
  {
    "id": 597,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// CountLinesInFile reads a file and returns the number of lines it contains.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "The function `CountLinesInFile` reads a specified file and returns the number of lines it contains, handling potential errors."
  },
  {
    "id": 598,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and returns the number of lines that start with the specified prefix.\nfunc CountLinesWithPrefix(filePath, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function `CountLinesWithPrefix` reads a file and counts the number of lines that start with a given prefix."
  },
  {
    "id": 599,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLineByLine(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}",
    "summary": "Reads a file line by line and returns its contents as a slice of strings."
  },
  {
    "id": 600,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CopyFileLineByLine(src, dst string) error {\n\tinFile, err := os.Open(src)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer inFile.Close()\n\n\toutFile, err := os.Create(dst)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer outFile.Close()\n\n\tscanner := bufio.NewScanner(inFile)\n\twriter := bufio.NewWriter(outFile)\n\tdefer writer.Flush()\n\n\tfor scanner.Scan() {\n\t\t_, err := writer.WriteString(scanner.Text() + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n```",
    "summary": "Copies the contents of a source file to a destination file line by line."
  },
  {
    "id": 601,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns the lines as a slice of strings."
  },
  {
    "id": 602,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns its contents as a slice of strings."
  },
  {
    "id": 603,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// ReadFileLinesWithPrefix reads a file and returns all lines that start with the given prefix.\nfunc ReadFileLinesWithPrefix(filename string, prefix string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar linesWithPrefix []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tif strings.HasPrefix(line, prefix) {\n\t\t\tlinesWithPrefix = append(linesWithPrefix, line)\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn linesWithPrefix, nil\n}",
    "summary": "The function reads a file and returns all lines that start with a specified prefix."
  },
  {
    "id": 604,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingWord(filename, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}",
    "summary": "Counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 605,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specified word in a text file, ignoring case sensitivity."
  },
  {
    "id": 606,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count, handling any errors that occur during file reading."
  },
  {
    "id": 607,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingSubstring(filePath, substring string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), substring) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the number of lines in a file that contain a specified substring."
  },
  {
    "id": 608,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLineByLine(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns the lines as a slice of strings."
  },
  {
    "id": 609,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordOccurrences reads a file and counts the occurrences of a specific word.\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\twordCount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\twords := strings.Fields(line)\n\t\tfor _, w := range words {\n\t\t\tif w == word {\n\t\t\t\twordCount++\n\t\t\t}\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "This function counts the occurrences of a specific word in a file."
  },
  {
    "id": 610,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file, returning the count and any errors encountered."
  },
  {
    "id": 611,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// FindWordOccurrences reads a file and counts the number of occurrences of a given word.\nfunc FindWordOccurrences(filename, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function `FindWordOccurrences` reads a file and counts how many times a specified word appears in it."
  },
  {
    "id": 612,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filename, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specific word in a given file, returning the count or an error if the file cannot be read."
  },
  {
    "id": 613,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc WriteLinesToFile(filename string, lines []string) error {\n\tfile, err := os.Create(filename)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\twriter := bufio.NewWriter(file)\n\tfor _, line := range lines {\n\t\t_, err := writer.WriteString(line + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn writer.Flush()\n}\n```",
    "summary": "Writes an array of strings to a file, each string as a new line, handling file creation and error checking."
  },
  {
    "id": 614,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordsInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\twordCount := 0\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "This function counts the number of words in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 615,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specified word in a given file."
  },
  {
    "id": 616,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 617,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\nfunc CountLinesContainingKeyword(filePath, keyword string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    count := 0\n    for scanner.Scan() {\n        if strings.Contains(scanner.Text(), keyword) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return count, nil\n}\n```",
    "summary": "This function counts the number of lines in a file that contain a specified keyword."
  },
  {
    "id": 618,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, targetWord string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\twords := strings.Fields(line)\n\t\tfor _, word := range words {\n\t\t\tif word == targetWord {\n\t\t\t\tcount++\n\t\t\t}\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specified word in a given text file."
  },
  {
    "id": 619,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc WriteLinesToFile(filePath string, lines []string) error {\n\tfile, err := os.Create(filePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\twriter := bufio.NewWriter(file)\n\tfor _, line := range lines {\n\t\t_, err := writer.WriteString(line + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn writer.Flush()\n}\n```",
    "summary": "Writes a slice of strings as lines to a specified file, creating the file if it doesn't exist."
  },
  {
    "id": 620,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return nil, err\n    }\n    defer file.Close()\n\n    var lines []string\n    scanner := bufio.NewScanner(file)\n    for scanner.Scan() {\n        lines = append(lines, scanner.Text())\n    }\n\n    if err := scanner.Err(); err != nil {\n        return nil, err\n    }\n    return lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns the lines as a slice of strings."
  },
  {
    "id": 621,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := strings.ToLower(scanner.Text())\n\t\twords := strings.Fields(line)\n\t\tfor _, w := range words {\n\t\t\tif w == strings.ToLower(word) {\n\t\t\t\tcount++\n\t\t\t}\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specific word in a file, ignoring case sensitivity."
  },
  {
    "id": 622,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specified word in a text file, ignoring case sensitivity."
  },
  {
    "id": 623,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLineByLine reads a file and prints its content line by line.\nfunc ReadFileLineByLine(filePath string) error {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tfmt.Println(scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n```",
    "summary": "Reads a file and prints its content line by line to the standard output."
  },
  {
    "id": 624,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordOccurrences reads a file and returns a map with the count of each word found.\nfunc CountWordOccurrences(filePath string) (map[string]int, error) {\n\twordCount := make(map[string]int)\n\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCount[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "The `CountWordOccurrences` function reads a file and returns a map counting the occurrences of each word, ignoring case."
  },
  {
    "id": 625,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordsInFile opens a file, reads its content, and returns the total word count.\nfunc CountWordsInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn wordCount, nil\n}\n```",
    "summary": "The function CountWordsInFile reads a file and returns the total count of words in it."
  },
  {
    "id": 626,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "This function reads a file line by line and returns a slice of strings, each representing a line from the file."
  },
  {
    "id": 627,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specified word in a given file and returns the total count."
  },
  {
    "id": 628,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// ProcessFileLines reads a file line by line and applies a callback function to each line.\nfunc ProcessFileLines(filePath string, callback func(string) string) error {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tprocessedLine := callback(line)\n\t\tif processedLine != \"\" {\n\t\t\t// Example: Print the processed line. In real scenarios, this might be saved or further processed.\n\t\t\tprintln(processedLine)\n\t\t}\n\t}\n\n\treturn scanner.Err()\n}\n```",
    "summary": "The function reads a file line by line, applying a specified callback function to each line for processing."
  },
  {
    "id": 629,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the occurrences of a given word in a specified file, ignoring case sensitivity."
  },
  {
    "id": 630,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesWithWord(filepath string, word string) (int, error) {\n\tfile, err := os.Open(filepath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 631,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts the number of lines in a given file and returns the count along with any error encountered."
  },
  {
    "id": 632,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a file specified by the file path."
  },
  {
    "id": 633,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordOccurrences reads a file line by line and returns a map of word occurrences in the file.\nfunc CountWordOccurrences(filePath string) (map[string]int, error) {\n\twordCount := make(map[string]int)\n\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCount[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Counts the occurrences of each word in a file and returns the result as a map."
  },
  {
    "id": 634,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// ReadFirstLineFromFile opens a file, reads the first line, trims any leading\n// and trailing whitespace, and returns it as a string.\nfunc ReadFirstLineFromFile(filePath string) (string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tif scanner.Scan() {\n\t\treturn strings.TrimSpace(scanner.Text()), nil\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn \"\", err\n\t}\n\treturn \"\", nil\n}\n```",
    "summary": "Reads and returns the first line from a file, trimming any whitespace, or an error if encountered."
  },
  {
    "id": 635,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tlineCount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "The function `CountLinesInFile` opens a specified file and returns the total number of lines in it, handling any errors that may occur."
  },
  {
    "id": 636,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordsInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn wordCount, nil\n}\n```",
    "summary": "Counts the number of words in a given file and returns the total count or an error if one occurs."
  },
  {
    "id": 637,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 638,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadLines reads a file and returns its contents as a slice of strings, where each element is a line from the file.\nfunc ReadLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file and returns its contents as a slice of strings, where each element is a line from the file."
  },
  {
    "id": 639,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileByLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line-by-line and returns the contents as a slice of strings."
  },
  {
    "id": 640,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the line count along with any error encountered."
  },
  {
    "id": 641,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// countLinesInFile opens a file, reads it line by line, and returns the total number of lines.\nfunc countLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "The function `countLinesInFile` reads a file and returns the total number of lines it contains."
  },
  {
    "id": 642,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordOccurrences reads a file and counts the occurrences of a given word.\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function `CountWordOccurrences` reads a file and counts how many times a specified word appears in it, returning the count or an error if one occurs."
  },
  {
    "id": 643,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if it occurs."
  },
  {
    "id": 644,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadLines reads a file and returns its contents as a slice of strings, each representing a line.\nfunc ReadLines(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns its contents as a slice of strings."
  },
  {
    "id": 645,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingWord(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 646,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts and returns the number of lines in a specified file, handling any file I/O errors."
  },
  {
    "id": 647,
    "code": "```go\nfunc WriteStringToFile(filename, content string) error {\n\tfile, err := os.Create(filename)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\t_, err = file.WriteString(content)\n\treturn err\n}\n```",
    "summary": "This function creates a file with the specified name and writes the given string content into it, returning any error encountered."
  },
  {
    "id": 648,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\nfunc CountLinesWithWord(filename, word string) (int, error) {\n    file, err := os.Open(filename)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    count := 0\n    for scanner.Scan() {\n        if strings.Contains(scanner.Text(), word) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 649,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a given file and returns the count along with any error encountered."
  },
  {
    "id": 650,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingWord(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 651,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// readFileLines reads a file line by line and returns a slice of strings containing each line.\nfunc readFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "This function reads a file line by line and returns a slice containing each line as a string."
  },
  {
    "id": 652,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\treturn count, scanner.Err()\n}\n```",
    "summary": "Counts the occurrences of a specified word in a file, ignoring case sensitivity."
  },
  {
    "id": 653,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns the lines as a slice of strings, handling errors appropriately."
  },
  {
    "id": 654,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc readLines(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file specified by the filename and returns them as a slice of strings."
  },
  {
    "id": 655,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, fmt.Errorf(\"failed to open file: %w\", err)\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, fmt.Errorf(\"error reading file: %w\", err)\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts the number of lines in a specified file and returns the count, handling any file errors encountered."
  },
  {
    "id": 656,
    "code": "import (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}",
    "summary": "The function `CountLinesInFile` counts and returns the number of lines in a specified file, handling any file reading errors."
  },
  {
    "id": 657,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingWord(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 658,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc ReplaceWordInFile(filePath, oldWord, newWord string) error {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\tvar newContent strings.Builder\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tnewLine := strings.ReplaceAll(line, oldWord, newWord)\n\t\tnewContent.WriteString(newLine + \"\\n\")\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn err\n\t}\n\n\tfile, err = os.Create(filePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\t_, err = file.WriteString(newContent.String())\n\treturn err\n}\n```",
    "summary": "Replaces all occurrences of a specified word in a file with another word and saves the changes."
  },
  {
    "id": 659,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and counts the number of lines that start with a given prefix.\nfunc CountLinesWithPrefix(filePath string, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function `CountLinesWithPrefix` reads a file and counts lines starting with a specified prefix."
  },
  {
    "id": 660,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc WriteStringsToFile(filePath string, lines []string) error {\n\tfile, err := os.Create(filePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\twriter := bufio.NewWriter(file)\n\tfor _, line := range lines {\n\t\t_, err := writer.WriteString(line + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn writer.Flush()\n}\n```",
    "summary": "This function writes a slice of strings to a specified file, each string as a new line."
  },
  {
    "id": 661,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filename, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specific word in a file, handling any errors encountered during file reading."
  },
  {
    "id": 662,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts the number of lines in a specified file and returns the total count or an error."
  },
  {
    "id": 663,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file and returns them as a slice of strings."
  },
  {
    "id": 664,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingWord(filename string, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}",
    "summary": "This function counts the number of lines in a file that contain a specific word and returns the count."
  },
  {
    "id": 665,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingSubstring(filePath, substring string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), substring) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts and returns the number of lines in a file that contain a specific substring."
  },
  {
    "id": 666,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn lineCount, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a file specified by the provided file path."
  },
  {
    "id": 667,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a given file and returns them as a slice of strings."
  },
  {
    "id": 668,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithWord reads a file and returns the number of lines containing a specific word.\nfunc CountLinesWithWord(filename string, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function `CountLinesWithWord` reads a file and returns the number of lines that contain a specified word."
  },
  {
    "id": 669,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\tcount := 0\n\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function `CountWordOccurrences` reads a file and counts the occurrences of a specified word, returning the count or an error if one occurs."
  },
  {
    "id": 670,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns its contents as a slice of strings."
  },
  {
    "id": 671,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filename string, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specified word in a file and returns the count along with any error encountered."
  },
  {
    "id": 672,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filepath string) (int, error) {\n\tfile, err := os.Open(filepath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts and returns the number of lines in a file specified by the given file path."
  },
  {
    "id": 673,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and returns the number of lines that start with the specified prefix.\nfunc CountLinesWithPrefix(filePath string, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that start with a given prefix."
  },
  {
    "id": 674,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "CountLinesInFile opens a file, counts the number of lines, and returns the count, handling any errors during the process."
  },
  {
    "id": 675,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filepath string) (int, error) {\n\tfile, err := os.Open(filepath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 676,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordsInFile reads a file and counts the number of words in it.\nfunc CountWordsInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\treturn wordCount, scanner.Err()\n}\n```",
    "summary": "CountWordsInFile reads a file from the specified path and returns the number of words it contains."
  },
  {
    "id": 677,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesWithPrefix(filePath, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that start with a specified prefix."
  },
  {
    "id": 678,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesContainingWord reads a file and returns the number of lines containing the specified word.\nfunc CountLinesContainingWord(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function reads a file and counts the number of lines that contain a specified word."
  },
  {
    "id": 679,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads all lines from a given file and returns them as a slice of strings.\nfunc ReadFileLines(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "ReadFileLines reads a file line-by-line and returns the lines as a slice of strings."
  },
  {
    "id": 680,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 681,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    scanner.Split(bufio.ScanWords)\n    count := 0\n\n    for scanner.Scan() {\n        if strings.EqualFold(scanner.Text(), word) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return count, nil\n}\n```",
    "summary": "Counts the occurrences of a specific word in a file, ignoring case sensitivity."
  },
  {
    "id": 682,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\twords := strings.Fields(line)\n\t\tfor _, w := range words {\n\t\t\tif w == word {\n\t\t\t\tcount++\n\t\t\t}\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specified word in a file and returns the count."
  },
  {
    "id": 683,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if one occurs."
  },
  {
    "id": 684,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// CountLinesInFile opens a file and returns the number of lines it contains.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tlineCount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 685,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadLinesFromFile(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file into a slice of strings, returning an error if file access issues occur."
  },
  {
    "id": 686,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a file and returns the count or an error if the file cannot be read."
  },
  {
    "id": 687,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a file specified by the given file path."
  },
  {
    "id": 688,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\n// ReplaceWordInFile reads a file line by line, replaces a target word with a new word, and writes the changes back to the file.\nfunc ReplaceWordInFile(filePath, target, replacement string) error {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := strings.Replace(scanner.Text(), target, replacement, -1)\n\t\tlines = append(lines, line)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn err\n\t}\n\n\tfile, err = os.Create(filePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\twriter := bufio.NewWriter(file)\n\tfor _, line := range lines {\n\t\t_, err := writer.WriteString(line + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn writer.Flush()\n}",
    "summary": "The function reads a file, replaces all occurrences of a target word with a new word, and writes the modified content back to the same file."
  },
  {
    "id": 689,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file and returns them as a slice of strings."
  },
  {
    "id": 690,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 691,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc ReadFileAndCountWords(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "This function opens a file, reads it word by word, and returns the total word count."
  },
  {
    "id": 692,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordsInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "This function counts the total number of words in a given file specified by its file path."
  },
  {
    "id": 693,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadFileByLine reads the content of a file line by line and returns it as a slice of strings.\nfunc ReadFileByLine(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn lines, nil\n}\n```",
    "summary": "ReadFileByLine reads a file line by line and returns its content as a slice of strings."
  },
  {
    "id": 694,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesWithKeyword(filePath, keyword string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), keyword) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the number of lines in a file that contain a specified keyword."
  },
  {
    "id": 695,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLineByLine(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns a slice of strings containing each line."
  },
  {
    "id": 696,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filename string, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tword = strings.ToLower(word)\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\tfor scanner.Scan() {\n\t\tif strings.ToLower(scanner.Text()) == word {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n```",
    "summary": "This function reads a file and counts the occurrences of a specified word, returning the count or an error if the file cannot be read."
  },
  {
    "id": 697,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, targetWord string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\twordCount := 0\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), targetWord) {\n\t\t\twordCount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}",
    "summary": "Counts the occurrences of a specified word in a text file, ignoring case differences."
  },
  {
    "id": 698,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file line by line and returns a slice of strings containing each line.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns a slice containing each line as a string."
  },
  {
    "id": 699,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts the number of lines in a specified file and returns the count along with any errors encountered."
  },
  {
    "id": 700,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// ReplaceInFile reads a file line by line, replaces a target substring with a replacement string, and writes the result back to the file.\nfunc ReplaceInFile(filePath, target, replacement string) error {\n\tfile, err := os.OpenFile(filePath, os.O_RDWR, 0644)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := strings.ReplaceAll(scanner.Text(), target, replacement)\n\t\tlines = append(lines, line)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn err\n\t}\n\n\tfile.Seek(0, 0)\n\tfile.Truncate(0)\n\twriter := bufio.NewWriter(file)\n\tfor _, line := range lines {\n\t\tif _, err := writer.WriteString(line + \"\\n\"); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn writer.Flush()\n}\n```",
    "summary": "Replaces all occurrences of a target substring with a replacement string in a file, reading and writing the file line by line."
  },
  {
    "id": 701,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file specified by the file path and returns them as a slice of strings."
  },
  {
    "id": 702,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadLines reads a file and returns its contents as a slice of strings,\n// where each string represents a line in the file.\nfunc ReadLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns its contents as a slice of strings."
  },
  {
    "id": 703,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 704,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\n// CountLinesWithPrefix reads a file and counts the number of lines that start with a given prefix.\nfunc CountLinesWithPrefix(filePath string, prefix string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    count := 0\n\n    for scanner.Scan() {\n        if strings.HasPrefix(scanner.Text(), prefix) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return count, nil\n}\n```",
    "summary": "This function reads a file and counts the number of lines that start with a specified prefix."
  },
  {
    "id": 705,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CopyFileLineByLine(src, dst string) error {\n\tsourceFile, err := os.Open(src)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer sourceFile.Close()\n\n\tdestinationFile, err := os.Create(dst)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer destinationFile.Close()\n\n\tscanner := bufio.NewScanner(sourceFile)\n\twriter := bufio.NewWriter(destinationFile)\n\tdefer writer.Flush()\n\n\tfor scanner.Scan() {\n\t\t_, err := writer.WriteString(scanner.Text() + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n```",
    "summary": "This function copies the contents of a source file to a destination file line by line."
  },
  {
    "id": 706,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithWord reads a file and counts how many lines contain a specific word.\nfunc CountLinesWithWord(filename, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function reads a file and returns the number of lines that contain a specified word."
  },
  {
    "id": 707,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file specified by the given path and returns them as a slice of strings."
  },
  {
    "id": 708,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, fmt.Errorf(\"failed to open file: %w\", err)\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, fmt.Errorf(\"error reading file: %w\", err)\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a file and returns the count or an error if encountered."
  },
  {
    "id": 709,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// ReadLinesContainingWord reads a file and returns all lines containing the specified word.\nfunc ReadLinesContainingWord(filename, word string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tif strings.Contains(line, word) {\n\t\t\tlines = append(lines, line)\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "The function reads a file and returns all lines that contain a specified word."
  },
  {
    "id": 710,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file and returns its contents as a slice of strings, each representing a line in the file.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "ReadFileLines reads a file and returns its contents as a slice of strings, each representing a line in the file."
  },
  {
    "id": 711,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithWord opens a file and counts the number of lines that contain a specified word.\nfunc CountLinesWithWord(filename, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specified word and returns the count."
  },
  {
    "id": 712,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file specified by its path and returns them as a slice of strings."
  },
  {
    "id": 713,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordOccurrences reads a file and returns a map of word occurrences.\nfunc CountWordOccurrences(filePath string) (map[string]int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\twordCount := make(map[string]int)\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCount[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Counts the occurrences of each word in a file and returns a map of word frequencies."
  },
  {
    "id": 714,
    "code": "```go\nfunc readFileLines(filepath string) ([]string, error) {\n    file, err := os.Open(filepath)\n    if err != nil {\n        return nil, err\n    }\n    defer file.Close()\n\n    var lines []string\n    scanner := bufio.NewScanner(file)\n    for scanner.Scan() {\n        lines = append(lines, scanner.Text())\n    }\n\n    if err := scanner.Err(); err != nil {\n        return nil, err\n    }\n\n    return lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns the lines as a slice of strings."
  },
  {
    "id": 715,
    "code": "```go\npackage main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"os\"\n    \"strings\"\n)\n\nfunc CountLinesContainingWord(filePath, word string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    count := 0\n    for scanner.Scan() {\n        if strings.Contains(scanner.Text(), word) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return count, nil\n}\n```",
    "summary": "This function counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 716,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// CountLinesInFile reads a file from the given path and returns the number of lines.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts and returns the number of lines in a specified file."
  },
  {
    "id": 717,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc countLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 718,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts the number of lines in a specified file and returns the count or an error if file access fails."
  },
  {
    "id": 719,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLineByLine(filepath string) ([]string, error) {\n\tfile, err := os.Open(filepath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "This function reads a file line by line and returns its contents as a slice of strings."
  },
  {
    "id": 720,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingWord(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 721,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesWithWord(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count, scanner.Err()\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 722,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadLines reads a file and returns its contents as a slice of strings, with each element representing a line.\nfunc ReadLines(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file and returns its contents as a slice of strings, where each string represents a line."
  },
  {
    "id": 723,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specified word in a file, ignoring case."
  },
  {
    "id": 724,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if encountered."
  },
  {
    "id": 725,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 726,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\n// ReadLines reads a text file and returns its contents as a slice of strings, where each string is a line from the file.\nfunc ReadLines(filePath string) ([]string, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return nil, err\n    }\n    defer file.Close()\n\n    var lines []string\n    scanner := bufio.NewScanner(file)\n    for scanner.Scan() {\n        lines = append(lines, scanner.Text())\n    }\n    if err := scanner.Err(); err != nil {\n        return nil, err\n    }\n    return lines, nil\n}\n```",
    "summary": "ReadLines reads a text file and returns its contents as a slice of lines, handling file opening and scanning errors."
  },
  {
    "id": 727,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\n// CountLinesInFile opens a file and returns the number of lines it contains.\nfunc CountLinesInFile(filePath string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    lineCount := 0\n    for scanner.Scan() {\n        lineCount++\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return lineCount, nil\n}\n```",
    "summary": "This function counts and returns the number of lines in a specified file."
  },
  {
    "id": 728,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file specified by the file path and returns them as a slice of strings."
  },
  {
    "id": 729,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count."
  },
  {
    "id": 730,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// CountLines counts the number of lines in the specified file.\nfunc CountLines(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "CountLines reads a file and returns the total number of lines it contains."
  },
  {
    "id": 731,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\twordCount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "The function `CountWordOccurrences` reads a file and counts the number of occurrences of a specified word, returning the count or an error."
  },
  {
    "id": 732,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, fmt.Errorf(\"failed to open file: %w\", err)\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, fmt.Errorf(\"error reading file: %w\", err)\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file, returning the count or an error."
  },
  {
    "id": 733,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// CountLinesInFile returns the number of lines in the specified file.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "CountLinesInFile reads a file and returns the total number of lines it contains."
  },
  {
    "id": 734,
    "code": "// CopyFile copies the contents of the source file to the destination file.\nfunc CopyFile(src, dst string) error {\n    inputFile, err := os.Open(src)\n    if err != nil {\n        return err\n    }\n    defer inputFile.Close()\n\n    outputFile, err := os.Create(dst)\n    if err != nil {\n        return err\n    }\n    defer outputFile.Close()\n\n    _, err = io.Copy(outputFile, inputFile)\n    if err != nil {\n        return err\n    }\n\n    return outputFile.Sync()\n}",
    "summary": "CopyFile copies the contents of a source file to a destination file, handling file opening and closing."
  },
  {
    "id": 735,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesWithPrefix(filePath, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that start with a specified prefix."
  },
  {
    "id": 736,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// CountLines counts the number of lines in a given file.\nfunc CountLines(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "CountLines opens a file, reads its contents, and returns the total number of lines."
  },
  {
    "id": 737,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count."
  },
  {
    "id": 738,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// CountLinesInFile returns the number of lines in the specified file.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "CountLinesInFile reads a file and returns the total number of lines it contains."
  },
  {
    "id": 739,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc WriteLinesToFile(filename string, lines []string) error {\n\tfile, err := os.Create(filename)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\twriter := bufio.NewWriter(file)\n\tfor _, line := range lines {\n\t\tif _, err := writer.WriteString(line + \"\\n\"); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn writer.Flush()\n}\n```",
    "summary": "Writes an array of strings to a specified file, each string as a new line."
  },
  {
    "id": 740,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc ReplaceWordInFile(filePath, oldWord, newWord string) error {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := strings.ReplaceAll(scanner.Text(), oldWord, newWord)\n\t\tlines = append(lines, line)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn err\n\t}\n\n\tfile.Close()\n\tfile, err = os.Create(filePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\tfor _, line := range lines {\n\t\t_, err = file.WriteString(line + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn nil\n}\n```",
    "summary": "This function replaces all occurrences of a specified word with another word in a given file and saves the changes."
  },
  {
    "id": 741,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and returns the number of lines that start with a given prefix.\nfunc CountLinesWithPrefix(filename, prefix string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the number of lines in a file that start with a specified prefix."
  },
  {
    "id": 742,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, fmt.Errorf(\"failed to open file: %v\", err)\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, fmt.Errorf(\"error reading file: %v\", err)\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts the number of lines in a file specified by its path and returns the count or an error if encountered."
  },
  {
    "id": 743,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileByLines reads a file line by line and returns a slice of strings.\nfunc ReadFileByLines(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "This function reads a file line by line and returns its contents as a slice of strings."
  },
  {
    "id": 744,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesWithWord(filename, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 745,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\twords := strings.Fields(line)\n\t\tfor _, w := range words {\n\t\t\tif w == word {\n\t\t\t\tcount++\n\t\t\t}\n\t\t}\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specific word in a given file."
  },
  {
    "id": 746,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// CountLinesInFile takes a file path and returns the number of lines in the file.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, fmt.Errorf(\"failed to open file: %w\", err)\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, fmt.Errorf(\"error reading file: %w\", err)\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a file specified by its file path."
  },
  {
    "id": 747,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specific word in a given file, ignoring case sensitivity."
  },
  {
    "id": 748,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file specified by `filePath` and returns them as a slice of strings."
  },
  {
    "id": 749,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\nfunc CountWordInFile(filePath, word string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    scanner.Split(bufio.ScanWords)\n\n    count := 0\n    for scanner.Scan() {\n        if strings.EqualFold(scanner.Text(), word) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specific word in a file, ignoring case differences."
  },
  {
    "id": 750,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line-by-line and returns the contents as a slice of strings."
  },
  {
    "id": 751,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if one occurs."
  },
  {
    "id": 752,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// ReadFileToUpper reads the contents of a file, converts all text to uppercase, and returns it as a single string.\nfunc ReadFileToUpper(filepath string) (string, error) {\n\tfile, err := os.Open(filepath)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer file.Close()\n\n\tvar result strings.Builder\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := strings.ToUpper(scanner.Text())\n\t\tresult.WriteString(line + \"\\n\")\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn result.String(), nil\n}\n```",
    "summary": "ReadFileToUpper reads a file, converts its contents to uppercase, and returns the result as a single string."
  },
  {
    "id": 753,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesContainingWord reads a file and returns the number of lines that contain the specified word.\nfunc CountLinesContainingWord(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 754,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file line by line and returns the lines as a slice of strings.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns its contents as a slice of strings."
  },
  {
    "id": 755,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLineByLine(filePath string) error {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tfmt.Println(scanner.Text())\n\t}\n\n\treturn scanner.Err()\n}\n```",
    "summary": "This function reads a file line by line and prints each line to the standard output."
  },
  {
    "id": 756,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file specified by filePath and returns them as a slice of strings."
  },
  {
    "id": 757,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a file specified by its path and returns the count or an error."
  },
  {
    "id": 758,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a file specified by the given file path."
  },
  {
    "id": 759,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesWithPrefix(filePath, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that start with a specified prefix."
  },
  {
    "id": 760,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix counts the number of lines in a file that start with a specific prefix.\nfunc CountLinesWithPrefix(filePath string, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tif strings.HasPrefix(line, prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the number of lines in a file that start with a given prefix."
  },
  {
    "id": 761,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a given file and returns the count or an error if one occurs."
  },
  {
    "id": 762,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file from the specified path and returns a slice containing each line as a string.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tvar lines []string\n\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns the content as a slice of strings."
  },
  {
    "id": 763,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// WordCountInFile counts the number of words in a given file.\nfunc WordCountInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "This function counts and returns the number of words in a specified file."
  },
  {
    "id": 764,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\nfunc ReadLines(filePath string) ([]string, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return nil, err\n    }\n    defer file.Close()\n\n    var lines []string\n    scanner := bufio.NewScanner(file)\n    for scanner.Scan() {\n        lines = append(lines, scanner.Text())\n    }\n\n    if err := scanner.Err(); err != nil {\n        return nil, err\n    }\n\n    return lines, nil\n}\n```",
    "summary": "Reads all lines from a file specified by its path and returns them as a slice of strings."
  },
  {
    "id": 765,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 766,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 767,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and counts the number of lines that start with a given prefix.\nfunc CountLinesWithPrefix(filename, prefix string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function reads a file and counts the number of lines that start with a specified prefix."
  },
  {
    "id": 768,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tvar count int\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specific word in a given file and returns the total count."
  },
  {
    "id": 769,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specific word in a file, ignoring case sensitivity."
  },
  {
    "id": 770,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if encountered."
  },
  {
    "id": 771,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\twordCount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\twords := strings.Fields(line)\n\t\tfor _, w := range words {\n\t\t\tif strings.EqualFold(w, word) {\n\t\t\t\twordCount++\n\t\t\t}\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Counts the occurrences of a specified word in a file, ignoring case sensitivity."
  },
  {
    "id": 772,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc countLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if it fails."
  },
  {
    "id": 773,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc countLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This Go function opens a file, counts the number of lines in it, and returns the line count."
  },
  {
    "id": 774,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLineByLine(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "The function reads a file line by line and returns a slice of strings containing each line."
  },
  {
    "id": 775,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filepath string) (int, error) {\n\tfile, err := os.Open(filepath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts and returns the number of lines in a specified file, handling potential errors during file reading."
  },
  {
    "id": 776,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file and returns its contents as a slice of strings,\n// where each element represents a line in the file.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file and returns its contents as a slice of strings, with each string representing a line in the file."
  },
  {
    "id": 777,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc readLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file specified by filePath and returns them as a slice of strings."
  },
  {
    "id": 778,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesContainingWord reads a file line by line and returns the number of lines that contain a given word.\nfunc CountLinesContainingWord(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 779,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts and returns the number of lines in a specified file, handling any file reading errors."
  },
  {
    "id": 780,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 781,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns a slice of strings containing each line or an error if reading fails."
  },
  {
    "id": 782,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn lines, nil\n}",
    "summary": "This function reads a file line-by-line and returns its contents as a slice of strings."
  },
  {
    "id": 783,
    "code": "```go\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file and returns them as a slice of strings."
  },
  {
    "id": 784,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\nfunc CountLinesContainingWord(filePath, word string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    count := 0\n    for scanner.Scan() {\n        if strings.Contains(scanner.Text(), word) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return count, nil\n}\n```",
    "summary": "The function counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 785,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesWithPrefix(filePath string, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that start with a specified prefix."
  },
  {
    "id": 786,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileByLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns the lines as a slice of strings."
  },
  {
    "id": 787,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithWord reads a file and counts how many lines contain a specific word.\nfunc CountLinesWithWord(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function reads a file and counts the number of lines that contain a specific word."
  },
  {
    "id": 788,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\n// CountLinesWithKeyword reads a file and counts the number of lines that contain a specific keyword.\nfunc CountLinesWithKeyword(filePath, keyword string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    count := 0\n\n    for scanner.Scan() {\n        if strings.Contains(scanner.Text(), keyword) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return count, nil\n}\n```",
    "summary": "This function reads a file and counts the number of lines that contain a specific keyword."
  },
  {
    "id": 789,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function `CountWordOccurrences` counts the occurrences of a specified word in a given file."
  },
  {
    "id": 790,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordsInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\tword := scanner.Text()\n\t\tif len(strings.TrimSpace(word)) > 0 {\n\t\t\twordCount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "The function `CountWordsInFile` opens a specified file, counts the number of words, and returns the total count."
  },
  {
    "id": 791,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadLinesFromFile opens a file and returns its content as a slice of strings,\n// where each string represents a line in the file.\nfunc ReadLinesFromFile(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn lines, nil\n}\n```",
    "summary": "The function `ReadLinesFromFile` reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 792,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns the content as a slice of strings."
  },
  {
    "id": 793,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file specified by `filePath` and returns them as a slice of strings."
  },
  {
    "id": 794,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file and returns its content as a slice of strings, where each string is a line from the file.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file and returns its contents as a slice of strings, with each string representing a line."
  },
  {
    "id": 795,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn lineCount, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 796,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts the number of lines in a file specified by the file path and returns the count or an error."
  },
  {
    "id": 797,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file specified by its path and returns them as a slice of strings."
  },
  {
    "id": 798,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadLines reads a file and returns its content as a slice of strings,\n// where each string represents a line in the file.\nfunc ReadLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file and returns its content as a slice of strings, with each string corresponding to a line in the file."
  },
  {
    "id": 799,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanLines)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\twordCount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn wordCount, nil\n}\n```",
    "summary": "Counts occurrences of a specified word in a file, returning the count."
  },
  {
    "id": 800,
    "code": "import (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file from the specified path and returns its lines as a slice of strings.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}",
    "summary": "ReadFileLines reads a file and returns its content as a slice of strings, each representing a line."
  },
  {
    "id": 801,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// ReadFileAndCountWords reads a file and counts the number of words in it.\nfunc ReadFileAndCountWords(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "This function reads a file and counts the number of words in it, returning the count or an error."
  },
  {
    "id": 802,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if encountered."
  },
  {
    "id": 803,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specified word in a file, reading it line by line."
  },
  {
    "id": 804,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesWithPrefix(filePath string, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function `CountLinesWithPrefix` counts lines in a file that start with a specified prefix."
  },
  {
    "id": 805,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadLines reads a file and returns its contents as a slice of strings, where each string is a line from the file.\nfunc ReadLines(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file and returns its contents as a slice of strings, with each element representing a line from the file."
  },
  {
    "id": 806,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if encountered."
  },
  {
    "id": 807,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "CountLinesInFile opens a file, counts the number of lines, and returns the line count or an error if one occurs."
  },
  {
    "id": 808,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filename, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\twordCount := 0\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\twordCount++\n\t\t}\n\t}\n\t\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "This function reads a file and counts the occurrences of a specified word, case-insensitively."
  },
  {
    "id": 809,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts the number of lines in a given file and returns the count or an error if the file cannot be processed."
  },
  {
    "id": 810,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordsInFile reads a file and returns the total word count.\nfunc CountWordsInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn wordCount, nil\n}\n```",
    "summary": "The function `CountWordsInFile` reads a file and returns the total count of words in it."
  },
  {
    "id": 811,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\n// CountLinesWithPrefix reads a file and returns the number of lines that start with the given prefix.\nfunc CountLinesWithPrefix(filePath string, prefix string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    count := 0\n    for scanner.Scan() {\n        if strings.HasPrefix(scanner.Text(), prefix) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return count, nil\n}\n```",
    "summary": "CountLinesWithPrefix reads a file and counts the lines that start with a specified prefix."
  },
  {
    "id": 812,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file line by line and returns a slice of strings containing each line.\nfunc ReadFileLines(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns the lines as a slice of strings."
  },
  {
    "id": 813,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLines(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if encountered."
  },
  {
    "id": 814,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    scanner.Split(bufio.ScanLines)\n\n    count := 0\n    for scanner.Scan() {\n        line := scanner.Text()\n        words := strings.Fields(line)\n        for _, w := range words {\n            if w == word {\n                count++\n            }\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return count, nil\n}\n```",
    "summary": "The function `CountWordOccurrences` reads a file and counts how many times a specified word appears in it."
  },
  {
    "id": 815,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\t\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specified word in a file, ignoring case differences."
  },
  {
    "id": 816,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordsInFile reads a file and returns the total number of words.\nfunc CountWordsInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Counts the total number of words in a given file by reading it word by word."
  },
  {
    "id": 817,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordsInFile reads a file and returns the total number of words.\nfunc CountWordsInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err = scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Counts and returns the number of words in a specified file."
  },
  {
    "id": 818,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if one occurs."
  },
  {
    "id": 819,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\nfunc CountLinesContainingWord(filePath, word string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    count := 0\n\n    for scanner.Scan() {\n        if strings.Contains(scanner.Text(), word) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return count, nil\n}\n```",
    "summary": "This function counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 820,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specified word in a file, ignoring case differences."
  },
  {
    "id": 821,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts and returns the number of lines in a specified file, handling file opening and reading errors."
  },
  {
    "id": 822,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// readFileLines reads all lines from a given file and returns them as a slice of strings.\nfunc readFileLines(filepath string) ([]string, error) {\n\tfile, err := os.Open(filepath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 823,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts the number of lines in a file specified by `filePath`."
  },
  {
    "id": 824,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 825,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\nfunc CountLinesWithPrefix(filePath, prefix string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    count := 0\n    for scanner.Scan() {\n        if strings.HasPrefix(scanner.Text(), prefix) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that start with a specified prefix."
  },
  {
    "id": 826,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn lineCount, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 827,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\n// CountLinesContainingWord counts the number of lines in a file that contain a specific word.\nfunc CountLinesContainingWord(filename, word string) (int, error) {\n    file, err := os.Open(filename)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    count := 0\n    scanner := bufio.NewScanner(file)\n    for scanner.Scan() {\n        if strings.Contains(scanner.Text(), word) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return count, nil\n}\n```",
    "summary": "This function counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 828,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 829,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\treturn lineCount, scanner.Err()\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 830,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordsInFile reads a file and returns the total number of words it contains.\nfunc CountWordsInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Counts and returns the number of words in a specified file."
  },
  {
    "id": 831,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file and returns them as a slice of strings."
  },
  {
    "id": 832,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\n// ReadFileLinesWithPrefix reads a file and returns all lines that start with the specified prefix.\nfunc ReadFileLinesWithPrefix(filePath string, prefix string) ([]string, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return nil, err\n    }\n    defer file.Close()\n\n    var lines []string\n    scanner := bufio.NewScanner(file)\n    for scanner.Scan() {\n        line := scanner.Text()\n        if strings.HasPrefix(line, prefix) {\n            lines = append(lines, line)\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return nil, err\n    }\n    return lines, nil\n}\n```",
    "summary": "Reads a file and returns lines that start with a specified prefix."
  },
  {
    "id": 833,
    "code": "import (\n    \"bufio\"\n    \"os\"\n)\n\n// ReadFileLines reads a file and returns its contents as a slice of strings, where each string is a line from the file.\nfunc ReadFileLines(filePath string) ([]string, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return nil, err\n    }\n    defer file.Close()\n\n    var lines []string\n    scanner := bufio.NewScanner(file)\n    for scanner.Scan() {\n        lines = append(lines, scanner.Text())\n    }\n\n    if err := scanner.Err(); err != nil {\n        return nil, err\n    }\n\n    return lines, nil\n}",
    "summary": "ReadFileLines reads a file and returns its contents as a slice of strings, with each string representing a line from the file."
  },
  {
    "id": 834,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file and returns its content as a slice of strings,\n// where each string represents a line from the file.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "ReadFileLines reads a file and returns its contents as a slice of strings, with each string representing a line from the file."
  },
  {
    "id": 835,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// CountLinesInFile opens a file at the given path and returns the number of lines it contains.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the total line count."
  },
  {
    "id": 836,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 837,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrencesInFile(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specific word in a given file, ignoring case."
  },
  {
    "id": 838,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to open file: %w\", err)\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, fmt.Errorf(\"error reading file: %w\", err)\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 839,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and counts the number of lines that start with the given prefix.\nfunc CountLinesWithPrefix(filePath, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function `CountLinesWithPrefix` reads a file and counts the number of lines that start with a specified prefix."
  },
  {
    "id": 840,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts occurrences of a specified word in a text file."
  },
  {
    "id": 841,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file and returns its content as a slice of strings, each representing a line.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "ReadFileLines reads a file and returns its content as a slice of strings, with each element representing a line from the file."
  },
  {
    "id": 842,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc ReadFileToUpper(filePath string) (string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer file.Close()\n\n\tvar result strings.Builder\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tresult.WriteString(strings.ToUpper(scanner.Text()) + \"\\n\")\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn result.String(), nil\n}\n```",
    "summary": "Reads a file and returns its content converted to uppercase as a single string."
  },
  {
    "id": 843,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordsInFile reads a file and returns the total word count.\nfunc CountWordsInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "This function reads a file and returns the total count of words contained within it."
  },
  {
    "id": 844,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file and returns its lines as a slice of strings.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}",
    "summary": "ReadFileLines reads a file and returns its contents as a slice of strings, where each string is a line from the file."
  },
  {
    "id": 845,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if reading fails."
  },
  {
    "id": 846,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if encountered."
  },
  {
    "id": 847,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file line by line and returns a slice of strings containing each line.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "ReadFileLines reads a file line by line and returns its contents as a slice of strings."
  },
  {
    "id": 848,
    "code": "```go\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns its contents as a slice of strings."
  },
  {
    "id": 849,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"log\"\n\t\"os\"\n)\n\nfunc CountLines(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts and returns the number of lines in a given file, handling file access and errors."
  },
  {
    "id": 850,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file and returns its contents as a slice of strings, each representing a line in the file.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file and returns its contents as a slice of strings, each element representing a line."
  },
  {
    "id": 851,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and counts how many lines start with a given prefix.\nfunc CountLinesWithPrefix(filePath, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that start with a specified prefix."
  },
  {
    "id": 852,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    lineCount := 0\n    for scanner.Scan() {\n        lineCount++\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n    return lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a file specified by the file path."
  },
  {
    "id": 853,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a given file and returns the count along with any error encountered."
  },
  {
    "id": 854,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a file specified by the file path."
  },
  {
    "id": 855,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordsInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Counts the number of words in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 856,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts and returns the number of lines in a specified file, handling errors appropriately."
  },
  {
    "id": 857,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file from the given path and returns its contents as a slice of strings, where each string is a line in the file.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "ReadFileLines reads a file and returns its contents as a slice of strings, with each line being a separate string."
  },
  {
    "id": 858,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// ReplaceWordInFile reads a file line by line, replaces all occurrences of\n// a specific word with another word, and writes the result to a new file.\nfunc ReplaceWordInFile(inputFile, outputFile, oldWord, newWord string) error {\n\tinFile, err := os.Open(inputFile)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer inFile.Close()\n\n\toutFile, err := os.Create(outputFile)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer outFile.Close()\n\n\tscanner := bufio.NewScanner(inFile)\n\twriter := bufio.NewWriter(outFile)\n\tdefer writer.Flush()\n\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tnewLine := strings.ReplaceAll(line, oldWord, newWord)\n\t\tif _, err := writer.WriteString(newLine + \"\\n\"); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n```",
    "summary": "This function reads a file, replaces all occurrences of a specified word with another, and writes the result to a new file."
  },
  {
    "id": 859,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn lineCount, err\n\t}\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 860,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordsInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\twordCount := 0\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "This function counts and returns the number of words in a specified file, handling any file reading errors."
  },
  {
    "id": 861,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithSubstring reads a file and returns the number of lines containing the specified substring.\nfunc CountLinesWithSubstring(filename, substring string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), substring) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function reads a file and counts the number of lines that contain a specified substring."
  },
  {
    "id": 862,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// CountLinesInFile reads a file and returns the number of lines it contains.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "CountLinesInFile reads a file from the specified path and returns the total number of lines it contains."
  },
  {
    "id": 863,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns the lines as a slice of strings."
  },
  {
    "id": 864,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLineByLine(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns the content as a slice of strings."
  },
  {
    "id": 865,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filename string, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specified word in a given file."
  },
  {
    "id": 866,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "CountWordOccurrences reads a file and counts the number of occurrences of a specified word."
  },
  {
    "id": 867,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesWithWord(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specified word and returns the count."
  },
  {
    "id": 868,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file line by line and returns the lines as a slice of strings.\nfunc ReadFileLines(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns its contents as a slice of strings."
  },
  {
    "id": 869,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a file specified by its file path, returning the count or an error if encountered."
  },
  {
    "id": 870,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesWithPrefix(filePath, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that start with a given prefix."
  },
  {
    "id": 871,
    "code": "```go\nfunc readLines(filePath string) ([]string, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return nil, err\n    }\n    defer file.Close()\n\n    var lines []string\n    scanner := bufio.NewScanner(file)\n    for scanner.Scan() {\n        lines = append(lines, scanner.Text())\n    }\n\n    if err := scanner.Err(); err != nil {\n        return nil, err\n    }\n    return lines, nil\n}\n```",
    "summary": "Reads all lines from a file at a given path and returns them as a slice of strings."
  },
  {
    "id": 872,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// CountLinesInFile reads a file and returns the total number of lines.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "The function `CountLinesInFile` reads a file and returns the total number of lines contained in it."
  },
  {
    "id": 873,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc PrintFileLines(filePath string) error {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tfmt.Println(scanner.Text())\n\t}\n\n\treturn scanner.Err()\n}\n```",
    "summary": "This function opens a file at the given path and prints each line to the standard output."
  },
  {
    "id": 874,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordOccurrences counts the number of occurrences of a specific word in a given file.\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\twordCount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\twords := strings.Fields(line)\n\t\tfor _, w := range words {\n\t\t\tif w == word {\n\t\t\t\twordCount++\n\t\t\t}\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "CountWordOccurrences reads a file and counts how many times a specific word appears."
  },
  {
    "id": 875,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithSubstring reads a file and returns the count of lines containing a specific substring.\nfunc CountLinesWithSubstring(filePath, substring string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), substring) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specified substring."
  },
  {
    "id": 876,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// ReadLinesWithPrefix reads lines from a file that start with a specified prefix.\nfunc ReadLinesWithPrefix(filePath string, prefix string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tif strings.HasPrefix(line, prefix) {\n\t\t\tlines = append(lines, line)\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads lines from a file that start with a specified prefix and returns them as a slice of strings."
  },
  {
    "id": 877,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc ReadFileAndCountWords(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\twordCount := 0\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Reads a file and counts the total number of words, returning the count or an error if one occurs."
  },
  {
    "id": 878,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filename string, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function CountWordOccurrences counts how many times a specific word appears in a given file."
  },
  {
    "id": 879,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc WriteLinesToFile(filename string, lines []string) error {\n\tfile, err := os.Create(filename)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\twriter := bufio.NewWriter(file)\n\tfor _, line := range lines {\n\t\t_, err := writer.WriteString(line + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn writer.Flush()\n}\n```",
    "summary": "Writes an array of strings to a file, each as a new line, using buffered I/O for efficiency."
  },
  {
    "id": 880,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordOccurrences reads a file and returns a map of word occurrences.\nfunc CountWordOccurrences(filename string) (map[string]int, error) {\n\twordCount := make(map[string]int)\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCount[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "This function counts and returns the occurrences of each word in a specified file."
  },
  {
    "id": 881,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CopyFile(sourcePath, destPath string) error {\n\tsourceFile, err := os.Open(sourcePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer sourceFile.Close()\n\n\tdestFile, err := os.Create(destPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer destFile.Close()\n\n\tscanner := bufio.NewScanner(sourceFile)\n\twriter := bufio.NewWriter(destFile)\n\n\tfor scanner.Scan() {\n\t\t_, err := writer.WriteString(scanner.Text() + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn err\n\t}\n\n\treturn writer.Flush()\n}\n```",
    "summary": "This function copies the contents of a source file to a destination file line by line."
  },
  {
    "id": 882,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines opens a file and returns its contents as a slice of strings, where each string is a line from the file.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file and returns its contents as a slice of strings, with each string representing a line."
  },
  {
    "id": 883,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc ReadFileAndCountWords(filePath string) (map[string]int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\twordCount := make(map[string]int)\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCount[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "This function reads a file and returns a map with the count of each word, ignoring case."
  },
  {
    "id": 884,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn lineCount, nil\n}\n```",
    "summary": "Reads a file and returns the number of lines in it, handling any errors encountered during the process."
  },
  {
    "id": 885,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, fmt.Errorf(\"failed to open file: %w\", err)\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, fmt.Errorf(\"error reading file: %w\", err)\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts occurrences of a specified word in a file."
  },
  {
    "id": 886,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileByLines(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}",
    "summary": "This function reads a file line by line and returns its contents as a slice of strings."
  },
  {
    "id": 887,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc WriteLinesToFile(lines []string, filepath string) error {\n\tfile, err := os.Create(filepath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\twriter := bufio.NewWriter(file)\n\tfor _, line := range lines {\n\t\t_, err := writer.WriteString(line + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn writer.Flush()\n}\n```",
    "summary": "Writes a slice of strings to a file, each on a new line, at the specified file path."
  },
  {
    "id": 888,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tword = strings.ToLower(word)\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tif strings.ToLower(scanner.Text()) == word {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function `CountWordOccurrences` counts occurrences of a specified word in a file, ignoring case."
  },
  {
    "id": 889,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filename, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\twordLower := strings.ToLower(word)\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := strings.ToLower(scanner.Text())\n\t\twords := strings.Fields(line)\n\t\tfor _, w := range words {\n\t\t\tif w == wordLower {\n\t\t\t\tcount++\n\t\t\t}\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts occurrences of a specified word in a file, ignoring case."
  },
  {
    "id": 890,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// ReadFileAndCountWords reads a text file and returns the total number of words.\nfunc ReadFileAndCountWords(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Reads a text file and returns the total number of words."
  },
  {
    "id": 891,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\nfunc CountLinesWithPrefix(filePath string, prefix string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    count := 0\n\n    for scanner.Scan() {\n        if strings.HasPrefix(scanner.Text(), prefix) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that start with a specified prefix."
  },
  {
    "id": 892,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLineByLine(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns its contents as a slice of strings."
  },
  {
    "id": 893,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// CountLinesInFile counts the number of lines in a given file.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a file located at the given file path."
  },
  {
    "id": 894,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc ReplaceWordInFile(filePath, oldWord, newWord string) error {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := strings.ReplaceAll(scanner.Text(), oldWord, newWord)\n\t\tlines = append(lines, line)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn err\n\t}\n\n\ttempFile, err := os.CreateTemp(\"\", \"tempfile\")\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer os.Remove(tempFile.Name())\n\n\twriter := bufio.NewWriter(tempFile)\n\tfor _, line := range lines {\n\t\tfmt.Fprintln(writer, line)\n\t}\n\twriter.Flush()\n\n\treturn os.Rename(tempFile.Name(), filePath)\n}\n```",
    "summary": "The function replaces all occurrences of a specified word with another word in a given file and updates the file with the changes."
  },
  {
    "id": 895,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLineByLine reads a file and prints its contents line by line.\nfunc ReadFileLineByLine(filePath string) error {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tfmt.Println(scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n```",
    "summary": "Reads and prints the contents of a file line by line."
  },
  {
    "id": 896,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadLines reads all lines from a file and returns them as a slice of strings.\nfunc ReadLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "The `ReadLines` function reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 897,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordsInFile reads a file and returns a map with the count of each word.\nfunc CountWordsInFile(filename string) (map[string]int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\twordCount := make(map[string]int)\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCount[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Counts the occurrences of each word in a file and returns the result as a map."
  },
  {
    "id": 898,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts the number of lines in a specified file and returns the count or an error if encountered."
  },
  {
    "id": 899,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesWithWord(filepath string, word string) (int, error) {\n\tfile, err := os.Open(filepath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 900,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrencesInFile(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\twordCount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\twordCount += strings.Count(line, word)\n\t}\n\tif scanner.Err() != nil {\n\t\treturn 0, scanner.Err()\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Counts the occurrences of a specific word in a file and returns the count or an error if encountered."
  },
  {
    "id": 901,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts and returns the number of lines in a specified file."
  },
  {
    "id": 902,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// CountLinesInFile opens a file, reads it line by line, and returns the total number of lines.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function opens a file, reads its content line by line, and returns the total number of lines."
  },
  {
    "id": 903,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingWord(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 904,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}",
    "summary": "Counts the number of lines in a specified file and returns the count and any error encountered."
  },
  {
    "id": 905,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tlineCount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn lineCount, nil\n}",
    "summary": "This function counts the number of lines in a file specified by the file path."
  },
  {
    "id": 906,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and counts the number of lines that start with a given prefix.\nfunc CountLinesWithPrefix(filePath, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines that start with a specified prefix in a given file."
  },
  {
    "id": 907,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if one occurs."
  },
  {
    "id": 908,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts occurrences of a specified word in a given file and returns the total count or an error if the file cannot be processed."
  },
  {
    "id": 909,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordsInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\tword := scanner.Text()\n\t\tif strings.TrimSpace(word) != \"\" {\n\t\t\twordCount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "This function counts and returns the number of words in a specified file."
  },
  {
    "id": 910,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// countLinesInFile reads a given file and returns the number of lines in it.\nfunc countLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}",
    "summary": "The function `countLinesInFile` reads a file and returns the total number of lines in it."
  },
  {
    "id": 911,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn lineCount, err\n\t}\n\n\treturn lineCount, nil\n}",
    "summary": "The function CountLinesInFile opens a file, counts the number of lines, and returns the count along with any error encountered."
  },
  {
    "id": 912,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordsInFile reads a file and returns the total count of words present in it.\nfunc CountWordsInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn wordCount, nil\n}\n```",
    "summary": "This function reads a file and counts the total number of words within it."
  },
  {
    "id": 913,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// ReadFileLinesToUpper reads a file and returns its lines converted to uppercase.\nfunc ReadFileLinesToUpper(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, strings.ToUpper(scanner.Text()))\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}",
    "summary": "Reads a file and returns its lines converted to uppercase."
  },
  {
    "id": 914,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a file specified by the given file path."
  },
  {
    "id": 915,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// CountLinesInFile opens a file, reads its content line by line,\n// and returns the total number of lines in the file.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 916,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filename, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n```",
    "summary": "The function `CountWordOccurrences` reads a file and counts the occurrences of a specified word, ignoring case."
  },
  {
    "id": 917,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\n// CountLinesWithPrefix reads a file and returns the number of lines that start with the specified prefix.\nfunc CountLinesWithPrefix(filePath, prefix string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    count := 0\n\n    for scanner.Scan() {\n        if strings.HasPrefix(scanner.Text(), prefix) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return count, nil\n}\n```",
    "summary": "The function `CountLinesWithPrefix` reads a file and counts the number of lines that start with a given prefix."
  },
  {
    "id": 918,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 919,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns a slice of strings containing the file's lines."
  },
  {
    "id": 920,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns the lines as a slice of strings."
  },
  {
    "id": 921,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and counts the number of lines that start with a given prefix.\nfunc CountLinesWithPrefix(filePath, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function reads a file and counts how many lines start with a specified prefix."
  },
  {
    "id": 922,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a given file and returns the count along with any error encountered."
  },
  {
    "id": 923,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to open file: %w\", err)\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, fmt.Errorf(\"error reading file: %w\", err)\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns its contents as a slice of strings."
  },
  {
    "id": 924,
    "code": "import (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// CountLinesInFile opens a file at the given path and returns the number of lines it contains.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}",
    "summary": "The function CountLinesInFile counts and returns the number of lines in a specified file."
  },
  {
    "id": 925,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts and returns the number of lines in a specified file, handling potential file access errors."
  },
  {
    "id": 926,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts the number of lines in a specified file and returns the count or an error if encountered."
  },
  {
    "id": 927,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := strings.ToLower(scanner.Text())\n\t\tcount += strings.Count(line, strings.ToLower(word))\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specified word in a text file, ignoring case sensitivity."
  },
  {
    "id": 928,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrencesInFile(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specific word in a given file."
  },
  {
    "id": 929,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}",
    "summary": "Counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 930,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLineByLine(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "This function reads a file line by line and returns a slice of strings containing each line."
  },
  {
    "id": 931,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// FilterLines reads a file and returns lines containing the specified substring.\nfunc FilterLines(filePath, substring string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar filteredLines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tif strings.Contains(line, substring) {\n\t\t\tfilteredLines = append(filteredLines, line)\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn filteredLines, nil\n}\n```",
    "summary": "This function reads a file and returns lines that contain a specified substring."
  },
  {
    "id": 932,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\nfunc WordCountFromFile(filePath string) (map[string]int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return nil, err\n    }\n    defer file.Close()\n\n    wordCount := make(map[string]int)\n    scanner := bufio.NewScanner(file)\n    scanner.Split(bufio.ScanWords)\n\n    for scanner.Scan() {\n        word := strings.ToLower(scanner.Text())\n        wordCount[word]++\n    }\n\n    if err := scanner.Err(); err != nil {\n        return nil, err\n    }\n\n    return wordCount, nil\n}\n```",
    "summary": "This function reads a file and counts the occurrences of each word, returning a map of word frequencies."
  },
  {
    "id": 933,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc WriteLinesToFile(lines []string, filename string) error {\n\tfile, err := os.Create(filename)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\twriter := bufio.NewWriter(file)\n\tfor _, line := range lines {\n\t\t_, err := writer.WriteString(line + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn writer.Flush()\n}\n```",
    "summary": "Writes a slice of strings to a specified file, each string as a new line."
  },
  {
    "id": 934,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file line by line and returns a slice of strings.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "This function reads a file line by line and returns its contents as a slice of strings."
  },
  {
    "id": 935,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\nfunc CountWordOccurrences(filename, word string) (int, error) {\n    file, err := os.Open(filename)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    scanner.Split(bufio.ScanWords)\n    \n    count := 0\n    for scanner.Scan() {\n        if strings.EqualFold(scanner.Text(), word) {\n            count++\n        }\n    }\n    \n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n    return count, nil\n}\n```",
    "summary": "Counts occurrences of a specific word in a file, ignoring case, and returns the count or an error."
  },
  {
    "id": 936,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesWithPrefix(filePath, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that begin with a specified prefix."
  },
  {
    "id": 937,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc wordCountFromFile(filePath string) (map[string]int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\twordCount := make(map[string]int)\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCount[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "The function `wordCountFromFile` reads a file and returns a map with the count of each word found in the file."
  },
  {
    "id": 938,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file specified by `filePath` and returns them as a slice of strings."
  },
  {
    "id": 939,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 940,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file and returns its content line by line as a slice of strings.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}",
    "summary": "ReadFileLines reads a file from the given path and returns its content as a slice of strings, each representing a line."
  },
  {
    "id": 941,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReverseLinesInFile reads a file line by line, reverses the order of lines,\n// and writes the result to a new file with the specified output filename.\nfunc ReverseLinesInFile(inputFilename, outputFilename string) error {\n\tfile, err := os.Open(inputFilename)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to open input file: %w\", err)\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn fmt.Errorf(\"failed to read lines: %w\", err)\n\t}\n\n\toutputFile, err := os.Create(outputFilename)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to create output file: %w\", err)\n\t}\n\tdefer outputFile.Close()\n\n\twriter := bufio.NewWriter(outputFile)\n\tfor i := len(lines) - 1; i >= 0; i-- {\n\t\tif _, err := writer.WriteString(lines[i] + \"\\n\"); err != nil {\n\t\t\treturn fmt.Errorf(\"failed to write line: %w\", err)\n\t\t}\n\t}\n\tif err := writer.Flush(); err != nil {\n\t\treturn fmt.Errorf(\"failed to flush writer: %w\", err)\n\t}\n\n\treturn nil\n}\n```",
    "summary": "This function reads lines from an input file, reverses their order, and writes them to a specified output file."
  },
  {
    "id": 942,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesContainingWord reads a file and returns the number of lines that contain the specified word.\nfunc CountLinesContainingWord(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function reads a file and returns the count of lines that contain a specified word."
  },
  {
    "id": 943,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts and returns the number of lines in a file at a given path, handling potential errors during the process."
  },
  {
    "id": 944,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrencesInFile(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\twordCount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\twordCount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "The function `CountWordOccurrencesInFile` reads a file at a given path and counts the occurrences of a specified word within the file."
  },
  {
    "id": 945,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// ReadFileLinesWithPrefix reads lines from a file that start with a given prefix.\nfunc ReadFileLinesWithPrefix(filename, prefix string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tif strings.HasPrefix(line, prefix) {\n\t\t\tlines = append(lines, line)\n\t\t}\n\t}\n\n\treturn lines, scanner.Err()\n}\n```",
    "summary": "Reads lines from a specified file that begin with a given prefix and returns them as a slice of strings."
  },
  {
    "id": 946,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// ReadFileLinesToUpper reads a file line by line, converts each line to uppercase, and returns the result as a slice of strings.\nfunc ReadFileLinesToUpper(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, strings.ToUpper(scanner.Text()))\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line, converts each line to uppercase, and returns the lines as a slice of strings."
  },
  {
    "id": 947,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This Go function reads a file and counts the occurrences of a specified word, ignoring case sensitivity."
  },
  {
    "id": 948,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesWithPrefix(filePath, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the number of lines in a file that start with a specified prefix."
  },
  {
    "id": 949,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts and returns the number of lines in a specified file, handling errors appropriately."
  },
  {
    "id": 950,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filename, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\twordCount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\twordCount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn wordCount, nil\n}\n```",
    "summary": "This function counts the occurrences of a specific word in a text file and returns the count."
  },
  {
    "id": 951,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordsInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\tword := scanner.Text()\n\t\tif strings.TrimSpace(word) != \"\" {\n\t\t\twordCount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "The function `CountWordsInFile` opens a file, counts the number of words in it, and returns the word count or an error if any occurs."
  },
  {
    "id": 952,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filename, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function `CountWordOccurrences` counts the occurrences of a specified word in a file and returns the count."
  },
  {
    "id": 953,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filename string, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function `CountWordOccurrences` reads a file and counts the number of times a specified word appears in it."
  },
  {
    "id": 954,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tword = strings.ToLower(word)\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tif strings.ToLower(scanner.Text()) == word {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function `CountWordOccurrences` reads a file and counts the number of occurrences of a specified word, ignoring case sensitivity."
  },
  {
    "id": 955,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithWord reads a file and returns the number of lines that contain the specified word.\nfunc CountLinesWithWord(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\treturn count, scanner.Err()\n}\n```",
    "summary": "The function `CountLinesWithWord` reads a file and counts the number of lines containing a specified word."
  },
  {
    "id": 956,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\nfunc CountLinesWithPrefix(filePath, prefix string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    count := 0\n    for scanner.Scan() {\n        if strings.HasPrefix(scanner.Text(), prefix) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that begin with a specified prefix."
  },
  {
    "id": 957,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithWord opens a file, reads its content line by line, and counts how many lines contain the specified word.\nfunc CountLinesWithWord(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function reads a file line by line and counts how many lines contain a specified word."
  },
  {
    "id": 958,
    "code": "```go\nfunc WriteLinesToFile(filename string, lines []string) error {\n\tfile, err := os.Create(filename)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\tfor _, line := range lines {\n\t\t_, err := file.WriteString(line + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}\n```",
    "summary": "Writes an array of strings to a file, each on a new line."
  },
  {
    "id": 959,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if encountered."
  },
  {
    "id": 960,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if the file cannot be read."
  },
  {
    "id": 961,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "CountLinesInFile opens a file at the given path and returns the number of lines it contains, handling any errors encountered."
  },
  {
    "id": 962,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specified word in a file, ignoring case differences."
  },
  {
    "id": 963,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specific word in a file and returns the count or an error."
  },
  {
    "id": 964,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc WriteLinesToFile(filePath string, lines []string) error {\n\tfile, err := os.Create(filePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\twriter := bufio.NewWriter(file)\n\tfor _, line := range lines {\n\t\t_, err := writer.WriteString(line + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn writer.Flush()\n}\n```",
    "summary": "Writes an array of strings to a specified file, each string on a new line."
  },
  {
    "id": 965,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 966,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts and returns the number of lines in a specified file, handling potential errors during the process."
  },
  {
    "id": 967,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts and returns the number of lines in a specified file or an error if the file cannot be read."
  },
  {
    "id": 968,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\n// ReadFileLinesUpperCase reads a file line by line and returns the content with each line converted to uppercase.\nfunc ReadFileLinesUpperCase(filePath string) ([]string, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return nil, err\n    }\n    defer file.Close()\n\n    var lines []string\n    scanner := bufio.NewScanner(file)\n    for scanner.Scan() {\n        line := strings.ToUpper(scanner.Text())\n        lines = append(lines, line)\n    }\n\n    if err := scanner.Err(); err != nil {\n        return nil, err\n    }\n\n    return lines, nil\n}\n```",
    "summary": "The function reads a file line by line and returns its content with each line converted to uppercase."
  },
  {
    "id": 969,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 970,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts the number of lines in a specified file and returns the count or an error if one occurs."
  },
  {
    "id": 971,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanLines)\n\twordCount := 0\n\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\twords := strings.Fields(line)\n\t\tfor _, w := range words {\n\t\t\tif w == word {\n\t\t\t\twordCount++\n\t\t\t}\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Counts the occurrences of a specified word in a file and returns the count."
  },
  {
    "id": 972,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn lineCount, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if encountered."
  },
  {
    "id": 973,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file specified by the file path and returns them as a slice of strings."
  },
  {
    "id": 974,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordsInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "This function counts the number of words in a specified file and returns the count or an error."
  },
  {
    "id": 975,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filename, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function `CountWordOccurrences` counts the number of occurrences of a specified word in a given text file."
  },
  {
    "id": 976,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\n// CountWordOccurrences reads a file and returns a map of word occurrences.\nfunc CountWordOccurrences(filePath string) (map[string]int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return nil, err\n    }\n    defer file.Close()\n\n    wordCount := make(map[string]int)\n    scanner := bufio.NewScanner(file)\n    scanner.Split(bufio.ScanWords)\n\n    for scanner.Scan() {\n        word := strings.ToLower(scanner.Text())\n        wordCount[word]++\n    }\n\n    if err := scanner.Err(); err != nil {\n        return nil, err\n    }\n\n    return wordCount, nil\n}\n```",
    "summary": "Counts occurrences of each word in a file and returns the result as a map."
  },
  {
    "id": 977,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordsInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "The function `CountWordsInFile` reads a file and returns the total word count, handling potential errors during file operations."
  },
  {
    "id": 978,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a file specified by the given file path."
  },
  {
    "id": 979,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// ReadLinesWithPrefix reads lines from a file that start with a given prefix.\nfunc ReadLinesWithPrefix(filePath string, prefix string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tif strings.HasPrefix(line, prefix) {\n\t\t\tlines = append(lines, line)\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "This function reads lines from a file that start with a specified prefix and returns them as a slice of strings."
  },
  {
    "id": 980,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error."
  },
  {
    "id": 981,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// CountLinesInFile opens a file, reads its contents line by line, and returns the total number of lines.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a given file and returns the total line count."
  },
  {
    "id": 982,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 983,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file and returns its contents as a slice of strings, where each string is a line from the file.\nfunc ReadFileLines(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}",
    "summary": "ReadFileLines reads a file and returns its contents as a slice of strings, with each string representing a line from the file."
  },
  {
    "id": 984,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line-by-line and returns its contents as a slice of strings."
  },
  {
    "id": 985,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filename, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specified word in a given file."
  },
  {
    "id": 986,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tword = strings.ToLower(word)\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\n\tfor scanner.Scan() {\n\t\tline := strings.ToLower(scanner.Text())\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specified word in a text file, ignoring case sensitivity."
  },
  {
    "id": 987,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 988,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 989,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadLines reads a file and returns a slice of strings, each representing a line in the file.\nfunc ReadLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file and returns its contents as a slice of strings, with each string representing a line."
  },
  {
    "id": 990,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// CountLinesInFile opens a file and returns the number of lines in it.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a file and returns the count or an error if one occurs."
  },
  {
    "id": 991,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingWord(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 992,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 993,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a given file and returns the count along with any error encountered."
  },
  {
    "id": 994,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\nfunc CountLinesInFile(filepath string) (int, error) {\n    file, err := os.Open(filepath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    lineCount := 0\n\n    for scanner.Scan() {\n        lineCount++\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 995,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadLines reads a file and returns its contents as a slice of strings, where each string is a line from the file.\nfunc ReadLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "The function ReadLines reads a file and returns its contents as a slice of strings, with each element representing a line from the file."
  },
  {
    "id": 996,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filename string, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specified word in a given file, ignoring case differences."
  },
  {
    "id": 997,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\nfunc ReadFileLineByLine(filePath string) ([]string, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return nil, err\n    }\n    defer file.Close()\n\n    var lines []string\n    scanner := bufio.NewScanner(file)\n    for scanner.Scan() {\n        lines = append(lines, scanner.Text())\n    }\n\n    if err := scanner.Err(); err != nil {\n        return nil, err\n    }\n\n    return lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns the lines as a slice of strings."
  },
  {
    "id": 998,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc WriteLinesToFile(filePath string, lines []string) error {\n\tfile, err := os.Create(filePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\twriter := bufio.NewWriter(file)\n\tfor _, line := range lines {\n\t\t_, err := writer.WriteString(line + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn writer.Flush()\n}\n```",
    "summary": "Writes a slice of strings to a specified file, appending a newline after each string."
  },
  {
    "id": 999,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line-by-line and returns the lines as a slice of strings."
  },
  {
    "id": 1000,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error."
  },
  {
    "id": 1001,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 1002,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountOccurrencesInFile(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function counts the occurrences of a specific word in a given file and returns the count or an error if one occurs."
  },
  {
    "id": 1003,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filename string, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanLines)\n\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specific word in a given file and returns the count or an error if encountered."
  },
  {
    "id": 1004,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithWord reads a file and returns the number of lines containing a specific word.\nfunc CountLinesWithWord(filename, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n```",
    "summary": "This function reads a file and counts the number of lines that contain a specified word."
  },
  {
    "id": 1005,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 1006,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingKeyword(filePath string, keyword string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), keyword) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function `CountLinesContainingKeyword` counts how many lines in a file contain a specified keyword."
  },
  {
    "id": 1007,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesWithPrefix(filePath string, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function counts and returns the number of lines in a file that start with a specified prefix."
  },
  {
    "id": 1008,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file from the given path and returns its contents as a slice of strings, each representing a line.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "The ReadFileLines function opens a file and returns its contents as a slice of strings, with each string representing a line from the file."
  },
  {
    "id": 1009,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filepath string) ([]string, error) {\n\tfile, err := os.Open(filepath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns its contents as a slice of strings."
  },
  {
    "id": 1010,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if encountered."
  },
  {
    "id": 1011,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadLines reads all lines from a file and returns them as a slice of strings.\nfunc ReadLines(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "ReadLines opens a file, reads all its lines into a slice of strings, and returns the slice along with any error encountered."
  },
  {
    "id": 1012,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn lineCount, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a file specified by the given file path."
  },
  {
    "id": 1013,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file and returns its contents as a slice of strings, each representing a line.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file and returns its contents as a slice of strings, where each string represents a line in the file."
  },
  {
    "id": 1014,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts and returns the number of lines in a specified file, handling any errors encountered during the process."
  },
  {
    "id": 1015,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file and returns its content as a slice of strings, each representing a line.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "ReadFileLines reads a file and returns its content as a slice of strings, where each string represents a line from the file."
  },
  {
    "id": 1016,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 1017,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "CountLinesInFile opens a given file and returns the number of lines it contains or an error if one occurs."
  },
  {
    "id": 1018,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specific word in a given file."
  },
  {
    "id": 1019,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc WriteLinesToFile(filename string, lines []string) error {\n\tfile, err := os.Create(filename)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\twriter := bufio.NewWriter(file)\n\tfor _, line := range lines {\n\t\t_, err := writer.WriteString(line + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn writer.Flush()\n}",
    "summary": "This function writes a slice of strings to a specified file, each string on a new line."
  },
  {
    "id": 1020,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn lines, nil\n}\n```",
    "summary": "This function reads a file line-by-line and returns its contents as a slice of strings."
  },
  {
    "id": 1021,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the total count or an error if file access fails."
  },
  {
    "id": 1022,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadLinesFromFile(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file into a slice of strings, returning an error if any file operation fails."
  },
  {
    "id": 1023,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc countLinesWithWord(filename, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines containing a specific word in a given file."
  },
  {
    "id": 1024,
    "code": "```go\nfunc ReadFileLines(filePath string) ([]string, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return nil, err\n    }\n    defer file.Close()\n\n    var lines []string\n    scanner := bufio.NewScanner(file)\n    for scanner.Scan() {\n        lines = append(lines, scanner.Text())\n    }\n\n    if err := scanner.Err(); err != nil {\n        return nil, err\n    }\n    return lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns a slice of strings containing each line."
  },
  {
    "id": 1025,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// CountLinesInFile opens a file and returns the number of lines it contains.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts and returns the number of lines in a specified file."
  },
  {
    "id": 1026,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 1027,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "The function `CountLinesInFile` counts and returns the number of lines in a specified file."
  },
  {
    "id": 1028,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts the number of lines in a given file and returns the count or an error if one occurs."
  },
  {
    "id": 1029,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "CountLinesInFile opens a file and counts the number of lines it contains, returning the count or an error."
  },
  {
    "id": 1030,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// ReadLinesContainingWord reads a file and returns lines that contain the specified word.\nfunc ReadLinesContainingWord(filePath, word string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tif strings.Contains(line, word) {\n\t\t\tlines = append(lines, line)\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file and returns lines that contain a specified word."
  },
  {
    "id": 1031,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadLines reads a file and returns its content as a slice of strings, each representing a line.\nfunc ReadLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file and returns its content as a slice of strings, each representing a line."
  },
  {
    "id": 1032,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// CountLinesInFile reads a file and returns the number of lines it contains.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "The function `CountLinesInFile` reads a file and returns the total number of lines it contains."
  },
  {
    "id": 1033,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// CountLinesInFile reads a file and returns the number of lines it contains.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn lineCount, nil\n}\n```",
    "summary": "This function reads a file and returns the total number of lines it contains."
  },
  {
    "id": 1034,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// CountLinesInFile counts the number of lines in a given file.\nfunc CountLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if encountered."
  },
  {
    "id": 1035,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc WriteLinesToFile(filename string, lines []string) error {\n\tfile, err := os.Create(filename)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\twriter := bufio.NewWriter(file)\n\tfor _, line := range lines {\n\t\t_, err := writer.WriteString(line + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn writer.Flush()\n}\n```",
    "summary": "Writes a slice of strings to a specified file, with each string as a new line."
  },
  {
    "id": 1036,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// CountFileLines reads a file and returns the number of lines it contains.\nfunc CountFileLines(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn lineCount, err\n\t}\n\treturn lineCount, nil\n}\n```",
    "summary": "CountFileLines reads a file and returns the total number of lines it contains."
  },
  {
    "id": 1037,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadLines reads a file line by line and returns a slice of strings containing each line.\nfunc ReadLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns a slice of strings with each line's content."
  },
  {
    "id": 1038,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file and returns its contents as a slice of strings, each representing a line.\nfunc ReadFileLines(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n\nfunc main() {\n\tlines, err := ReadFileLines(\"example.txt\")\n\tif err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t\treturn\n\t}\n\tfmt.Println(lines)\n}\n```",
    "summary": "The function `ReadFileLines` reads a file and returns its contents as a slice of strings, with each string representing a line from the file."
  },
  {
    "id": 1039,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts and returns the number of lines in a given file, handling errors if they occur."
  },
  {
    "id": 1040,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file and returns its contents as a slice of strings, one for each line.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "ReadFileLines reads a file from the specified path and returns its contents as a slice of strings, each representing a line."
  },
  {
    "id": 1041,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := strings.ToLower(scanner.Text())\n\t\tif strings.Contains(line, strings.ToLower(word)) {\n\t\t\tcount += strings.Count(line, strings.ToLower(word))\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts occurrences of a specified word in a given text file, ignoring case sensitivity."
  },
  {
    "id": 1042,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filename, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts occurrences of a specified word in a file, ignoring case sensitivity, and returns the total count."
  },
  {
    "id": 1043,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\twordCount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\twords := strings.Fields(line)\n\t\tfor _, w := range words {\n\t\t\tif strings.EqualFold(w, word) {\n\t\t\t\twordCount++\n\t\t\t}\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "This function counts the occurrences of a specified word in a text file, returning the count and any error encountered."
  },
  {
    "id": 1044,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file specified by `filePath` and returns them as a slice of strings."
  },
  {
    "id": 1045,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordOccurrences reads a file and counts the occurrences of a specific word.\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specific word in a file using case-insensitive comparison."
  },
  {
    "id": 1046,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the line count or an error if one occurs."
  },
  {
    "id": 1047,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and counts how many lines start with the given prefix.\nfunc CountLinesWithPrefix(filename, prefix string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function `CountLinesWithPrefix` reads a file and counts the number of lines that begin with a specified prefix."
  },
  {
    "id": 1048,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// CountLinesInFile opens a specified file and counts the number of lines it contains.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts and returns the number of lines in a specified file, handling any errors that occur during file operations."
  },
  {
    "id": 1049,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the total count or an error if one occurs."
  },
  {
    "id": 1050,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadLinesFromFile(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file into a slice of strings, returning an error if any occurs."
  },
  {
    "id": 1051,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tlineCount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function reads a file and returns the count of lines it contains, or an error if one occurs."
  },
  {
    "id": 1052,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns the lines as a slice of strings."
  },
  {
    "id": 1053,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingKeyword(filePath, keyword string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), keyword) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines containing a specified keyword in a given file."
  },
  {
    "id": 1054,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrencesInFile(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, fmt.Errorf(\"failed to open file: %v\", err)\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, fmt.Errorf(\"error reading file: %v\", err)\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specified word in a given text file and returns the total count."
  },
  {
    "id": 1055,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "The function `CountLinesInFile` opens a file at a given path and returns the number of lines in it."
  },
  {
    "id": 1056,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// CountLinesInFile reads a file and returns the number of lines it contains.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "CountLinesInFile opens a file, reads it line by line, and returns the total number of lines."
  },
  {
    "id": 1057,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if encountered."
  },
  {
    "id": 1058,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    scanner.Split(bufio.ScanWords)\n\n    count := 0\n    for scanner.Scan() {\n        if strings.EqualFold(scanner.Text(), word) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return count, nil\n}\n```",
    "summary": "The function counts the occurrences of a specified word in a given file, ignoring case."
  },
  {
    "id": 1059,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\n// CountLinesInFile reads a file and returns the total number of lines.\nfunc CountLinesInFile(filePath string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    lineCount := 0\n    for scanner.Scan() {\n        lineCount++\n    }\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n    return lineCount, nil\n}\n```",
    "summary": "CountLinesInFile reads a specified file and returns the total number of lines it contains."
  },
  {
    "id": 1060,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordOccurrences reads a text file and counts the occurrences of each word.\nfunc CountWordOccurrences(filePath string) (map[string]int, error) {\n\twordCount := make(map[string]int)\n\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCount[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "The function CountWordOccurrences reads a file and returns a map with the count of each word's occurrence in the file."
  },
  {
    "id": 1061,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file and returns its lines as a slice of strings.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "The function `ReadFileLines` reads a file and returns its contents as a slice of strings, one for each line."
  },
  {
    "id": 1062,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadLines reads a file and returns its contents as a slice of strings,\n// with each element representing a line in the file.\nfunc ReadLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns the contents as a slice of strings."
  },
  {
    "id": 1063,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordOccurrences reads a file and returns a map containing the count of each word.\nfunc CountWordOccurrences(filePath string) (map[string]int, error) {\n\twordCount := make(map[string]int)\n\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCount[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Counts the occurrences of each word in a file, returning a map of word frequencies."
  },
  {
    "id": 1064,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\n// CountWordOccurrences reads a file and returns a map with the count of each word.\nfunc CountWordOccurrences(filePath string) (map[string]int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return nil, err\n    }\n    defer file.Close()\n\n    wordCount := make(map[string]int)\n    scanner := bufio.NewScanner(file)\n    scanner.Split(bufio.ScanWords)\n\n    for scanner.Scan() {\n        word := strings.ToLower(scanner.Text())\n        wordCount[word]++\n    }\n\n    if err := scanner.Err(); err != nil {\n        return nil, err\n    }\n\n    return wordCount, nil\n}\n```",
    "summary": "This function reads a file and returns a map with the occurrence count of each word."
  },
  {
    "id": 1065,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and returns the number of lines that start with the specified prefix.\nfunc CountLinesWithPrefix(filePath, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that start with a given prefix."
  },
  {
    "id": 1066,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLines(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts and returns the number of lines in a specified file, handling any potential errors during the process."
  },
  {
    "id": 1067,
    "code": "```go\nfunc ReadLinesFromFile(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 1068,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Reads a file and returns the number of lines it contains, or an error if the file cannot be processed."
  },
  {
    "id": 1069,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingWord(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specific word."
  },
  {
    "id": 1070,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingWord(filename, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 1071,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "CountLinesInFile reads a file and returns the number of lines it contains or an error if the file cannot be read."
  },
  {
    "id": 1072,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts the number of lines in a specified file and returns the count or an error if one occurs."
  },
  {
    "id": 1073,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tword = strings.ToLower(word)\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.ToLower(scanner.Text()) == word {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specific word in a given file."
  },
  {
    "id": 1074,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\t\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line-by-line and returns a slice of strings containing each line."
  },
  {
    "id": 1075,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error."
  },
  {
    "id": 1076,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file and returns its content as a slice of strings, each representing a line."
  },
  {
    "id": 1077,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts the number of lines in a specified file and returns the count or an error if any occurs."
  },
  {
    "id": 1078,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specified word in a file, ignoring case."
  },
  {
    "id": 1079,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadFileLines reads all lines from the specified file and returns them as a slice of strings.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 1080,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordOccurrences reads a file and returns a map of word occurrences.\nfunc CountWordOccurrences(filePath string) (map[string]int, error) {\n\twordCount := make(map[string]int)\n\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCount[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "This function reads a file and returns a map with the count of each word's occurrences."
  },
  {
    "id": 1081,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and counts the number of lines that start with the given prefix.\nfunc CountLinesWithPrefix(filePath string, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that start with a specified prefix."
  },
  {
    "id": 1082,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 1083,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filename, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\twords := strings.Fields(line)\n\t\tfor _, w := range words {\n\t\t\tif strings.EqualFold(w, word) {\n\t\t\t\tcount++\n\t\t\t}\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specified word in a file, ignoring case sensitivity."
  },
  {
    "id": 1084,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if encountered."
  },
  {
    "id": 1085,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specific word in a text file, returning the count or an error."
  },
  {
    "id": 1086,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function `CountWordOccurrences` reads a file and counts the occurrences of a specified word, returning the count or an error."
  },
  {
    "id": 1087,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordOccurrences counts the occurrences of a specific word in a given text file.\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specific word in a given text file, returning the count and any potential error encountered."
  },
  {
    "id": 1088,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    scanner.Split(bufio.ScanWords)\n\n    count := 0\n    for scanner.Scan() {\n        if strings.EqualFold(scanner.Text(), word) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return count, nil\n}\n```",
    "summary": "Counts the occurrences of a specific word in a given file, case-insensitively."
  },
  {
    "id": 1089,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn lineCount, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 1090,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingWord(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specific word."
  },
  {
    "id": 1091,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// CountLinesInFile reads a file from the given path and returns the number of lines it contains.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 1092,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordOccurrences reads a file and returns a map of word occurrences found in the file.\nfunc CountWordOccurrences(filePath string) (map[string]int, error) {\n\twordCounts := make(map[string]int)\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCounts[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCounts, nil\n}\n```",
    "summary": "Counts the occurrences of each word in a file and returns a map of word frequencies."
  },
  {
    "id": 1093,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLineByLine(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to open file: %w\", err)\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, fmt.Errorf(\"error reading file: %w\", err)\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns its contents as a slice of strings."
  },
  {
    "id": 1094,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordsInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "This function counts the number of words in a file specified by its file path."
  },
  {
    "id": 1095,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLineByLine(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns its contents as a slice of strings."
  },
  {
    "id": 1096,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// CountLinesInFile reads a file from the given filepath and returns the number of lines it contains.\nfunc CountLinesInFile(filepath string) (int, error) {\n\tfile, err := os.Open(filepath)\n\tif err != nil {\n\t\treturn 0, fmt.Errorf(\"failed to open file: %w\", err)\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, fmt.Errorf(\"error reading file: %w\", err)\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "CountLinesInFile reads a file and returns the total number of lines it contains."
  },
  {
    "id": 1097,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CopyFile(src, dst string) error {\n\tsourceFile, err := os.Open(src)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer sourceFile.Close()\n\n\tdestFile, err := os.Create(dst)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer destFile.Close()\n\n\twriter := bufio.NewWriter(destFile)\n\treader := bufio.NewReader(sourceFile)\n\n\t_, err = reader.WriteTo(writer)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn writer.Flush()\n}\n```",
    "summary": "Copies the contents of a source file to a destination file using buffered I/O for efficient data transfer."
  },
  {
    "id": 1098,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file line by line and returns a slice of strings, each representing a line from the file.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns the lines as a slice of strings."
  },
  {
    "id": 1099,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\n// ReadFileLines reads a file and returns its contents as a slice of strings, each representing a line in the file.\nfunc ReadFileLines(filePath string) ([]string, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return nil, err\n    }\n    defer file.Close()\n\n    var lines []string\n    scanner := bufio.NewScanner(file)\n    for scanner.Scan() {\n        lines = append(lines, scanner.Text())\n    }\n\n    if err := scanner.Err(); err != nil {\n        return nil, err\n    }\n\n    return lines, nil\n}\n```",
    "summary": "This function reads a file and returns its contents as a slice of strings, with each string representing a line from the file."
  },
  {
    "id": 1100,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordsInFile reads a file and returns the total count of words.\nfunc CountWordsInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\twordCount := 0\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "The function `CountWordsInFile` reads a file and returns the total number of words it contains."
  },
  {
    "id": 1101,
    "code": "import (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}",
    "summary": "Reads a file line by line and returns its content as a slice of strings."
  },
  {
    "id": 1102,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts and returns the number of lines in a specified file."
  },
  {
    "id": 1103,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a file specified by the file path."
  },
  {
    "id": 1104,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if encountered."
  },
  {
    "id": 1105,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function `CountWordOccurrences` reads a file and counts the occurrences of a specified word, returning the count and any error encountered."
  },
  {
    "id": 1106,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "The function `CountLinesInFile` opens a file and returns the number of lines it contains, handling potential errors."
  },
  {
    "id": 1107,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specified word in a text file, ignoring case sensitivity."
  },
  {
    "id": 1108,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingWord(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 1109,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 1110,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// ReplaceWordInFile reads a file line by line and replaces all occurrences of a\n// specified word with a new word, writing the results to a new file.\nfunc ReplaceWordInFile(inputFilePath, outputFilePath, oldWord, newWord string) error {\n\tinputFile, err := os.Open(inputFilePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer inputFile.Close()\n\n\toutputFile, err := os.Create(outputFilePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer outputFile.Close()\n\n\tscanner := bufio.NewScanner(inputFile)\n\twriter := bufio.NewWriter(outputFile)\n\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tmodifiedLine := strings.ReplaceAll(line, oldWord, newWord)\n\t\tif _, err := writer.WriteString(modifiedLine + \"\\n\"); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn err\n\t}\n\n\treturn writer.Flush()\n}\n```",
    "summary": "ReplaceWordInFile reads a file, replaces a specified word with another, and writes the modified content to a new file."
  },
  {
    "id": 1111,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordInFile(filename string, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanLines)\n\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specified word in a given file."
  },
  {
    "id": 1112,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// WordCount reads a file from the given path and returns a map with each word\n// as the key and its frequency as the value.\nfunc WordCount(filePath string) (map[string]int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\twordCounts := make(map[string]int)\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCounts[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCounts, nil\n}\n```",
    "summary": "The function `WordCount` reads a file and returns a map of word frequencies."
  },
  {
    "id": 1113,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordsInFile reads a file specified by path and returns the number of words it contains.\nfunc CountWordsInFile(path string) (int, error) {\n\tfile, err := os.Open(path)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n\nfunc main() {\n\twordCount, err := CountWordsInFile(\"example.txt\")\n\tif err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t\treturn\n\t}\n\tfmt.Println(\"Word count:\", wordCount)\n}\n```",
    "summary": "The CountWordsInFile function reads a file and returns the total number of words it contains."
  },
  {
    "id": 1114,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingSubstring(filePath, substring string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), substring) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function `CountLinesContainingSubstring` reads a file and returns the number of lines containing a specified substring."
  },
  {
    "id": 1115,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts and returns the number of lines in a specified file, handling any file read errors."
  },
  {
    "id": 1116,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordOccurrences reads a file and returns a map with the count of each word.\nfunc CountWordOccurrences(filePath string) (map[string]int, error) {\n\twordCount := make(map[string]int)\n\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCount[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "This function reads a file and returns a map containing the count of each word, ignoring case."
  },
  {
    "id": 1117,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileByLine(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns the content as a slice of strings."
  },
  {
    "id": 1118,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if the file cannot be read."
  },
  {
    "id": 1119,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLineByLine(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn lines, nil\n}",
    "summary": "Reads a file line by line and returns the lines as a slice of strings, handling any errors that occur."
  },
  {
    "id": 1120,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn lineCount, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "CountLinesInFile reads a file and returns the number of lines it contains, handling any errors that occur during processing."
  },
  {
    "id": 1121,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\nfunc CountLinesContainingWord(filePath string, word string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    count := 0\n    for scanner.Scan() {\n        if strings.Contains(scanner.Text(), word) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n    \n    return count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 1122,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordsInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "This Go function counts the number of words in a specified file and returns the total count along with any error encountered."
  },
  {
    "id": 1123,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n```",
    "summary": "Counts occurrences of a specified word in a file and returns the count."
  },
  {
    "id": 1124,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadLines reads all lines from a file and returns them as a slice of strings.\nfunc ReadLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 1125,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingWord(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 1126,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordOccurrences reads a file and returns a map with the count of each word's occurrence.\nfunc CountWordOccurrences(filename string) (map[string]int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\twordCount := make(map[string]int)\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCount[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn wordCount, nil\n}\n```",
    "summary": "The function `CountWordOccurrences` reads a file and returns a map with the count of each word's occurrence."
  },
  {
    "id": 1127,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specified word in a file, ignoring case differences."
  },
  {
    "id": 1128,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc ReadFileLinesToUpper(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, strings.ToUpper(scanner.Text()))\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line, converts each line to uppercase, and returns them as a slice of strings."
  },
  {
    "id": 1129,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads the contents of a file and returns its lines as a slice of strings.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn lines, nil\n}\n```",
    "summary": "The function `ReadFileLines` reads a file and returns its contents as a slice of strings, with each string representing a line in the file."
  },
  {
    "id": 1130,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordOccurrences reads a text file and returns a map with the count of each word's occurrences.\nfunc CountWordOccurrences(filePath string) (map[string]int, error) {\n\twordCount := make(map[string]int)\n\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCount[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "The function `CountWordOccurrences` reads a file and returns a map of each word's occurrence count in the file."
  },
  {
    "id": 1131,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts and returns the number of lines in a specified file, reporting any errors encountered."
  },
  {
    "id": 1132,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLinesToSlice(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "This function reads a file line by line and returns the lines as a slice of strings."
  },
  {
    "id": 1133,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesContainingWord reads a file and returns the number of lines containing the specified word.\nfunc CountLinesContainingWord(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function `CountLinesContainingWord` reads a file and counts the number of lines that contain a specified word."
  },
  {
    "id": 1134,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if one occurs."
  },
  {
    "id": 1135,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 1136,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}",
    "summary": "This function counts the number of lines in a file specified by the file path and returns the count or an error."
  },
  {
    "id": 1137,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    lineCount := 0\n    for scanner.Scan() {\n        lineCount++\n    }\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n    return lineCount, nil\n}\n```",
    "summary": "The function `CountLinesInFile` counts the number of lines in a given file and returns the count or an error if one occurs."
  },
  {
    "id": 1138,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file at the specified path and returns them as a slice of strings."
  },
  {
    "id": 1139,
    "code": "```go\nfunc ReadFileLines(filePath string) ([]string, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return nil, err\n    }\n    defer file.Close()\n\n    var lines []string\n    scanner := bufio.NewScanner(file)\n    for scanner.Scan() {\n        lines = append(lines, scanner.Text())\n    }\n\n    if err := scanner.Err(); err != nil {\n        return nil, err\n    }\n    return lines, nil\n}\n```",
    "summary": "Reads a file line-by-line and returns the lines as a slice of strings."
  },
  {
    "id": 1140,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// ReadLinesWithPrefix reads a file and returns lines that start with a given prefix.\nfunc ReadLinesWithPrefix(filePath string, prefix string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tif strings.HasPrefix(line, prefix) {\n\t\t\tlines = append(lines, line)\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "The function reads a file and returns all lines that start with a specified prefix."
  },
  {
    "id": 1141,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if encountered."
  },
  {
    "id": 1142,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingKeyword(filePath string, keyword string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), keyword) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts and returns the number of lines in a file that contain a specified keyword."
  },
  {
    "id": 1143,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filename, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specific word in a file and returns the total count."
  },
  {
    "id": 1144,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// ReadFileAndCountWords reads a file and counts the occurrences of each word, returning the result as a map.\nfunc ReadFileAndCountWords(filePath string) (map[string]int, error) {\n\twordCount := make(map[string]int)\n\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCount[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "This function reads a file, counts the occurrences of each word, and returns the count as a map."
  },
  {
    "id": 1145,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filename string, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n```",
    "summary": "This function reads a file and counts the occurrences of a specified word, ignoring case sensitivity."
  },
  {
    "id": 1146,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordsInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\twordCount := 0\n\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "This Go function counts the number of words in a file specified by its file path."
  },
  {
    "id": 1147,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordsInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "This function counts the number of words in a specified file and returns the count or an error if one occurs."
  },
  {
    "id": 1148,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts and returns the number of lines in a given file, handling any I/O errors."
  },
  {
    "id": 1149,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filename, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specified word in a given file, ignoring case differences."
  },
  {
    "id": 1150,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}",
    "summary": "Reads all lines from a file specified by the given file path and returns them as a slice of strings."
  },
  {
    "id": 1151,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 1152,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\n// CountLinesWithPrefix reads a file and counts the number of lines that start with a given prefix.\nfunc CountLinesWithPrefix(filePath, prefix string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    count := 0\n    for scanner.Scan() {\n        if strings.HasPrefix(scanner.Text(), prefix) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n    return count, nil\n}\n```",
    "summary": "This function counts the number of lines that start with a specified prefix in a given file."
  },
  {
    "id": 1153,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "ReadFileLines reads all lines from a file and returns them as a slice of strings."
  },
  {
    "id": 1154,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc FindWordInFile(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineNumber := 0\n\tfor scanner.Scan() {\n\t\tlineNumber++\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\treturn lineNumber, nil\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn 0, fmt.Errorf(\"word not found\")\n}\n```",
    "summary": "The function `FindWordInFile` searches for a specific word in a file and returns the line number of its first occurrence."
  },
  {
    "id": 1155,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "This function reads a file line by line and returns a slice of strings containing each line's content."
  },
  {
    "id": 1156,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc countLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn lineCount, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a file specified by the given file path."
  },
  {
    "id": 1157,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn lineCount, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a given file specified by its file path."
  },
  {
    "id": 1158,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesWithWord(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 1159,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesWithKeyword(filePath, keyword string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), keyword) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specified keyword."
  },
  {
    "id": 1160,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// CountLinesInFile opens a file, reads its contents line by line, and returns the total number of lines.\nfunc CountLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, fmt.Errorf(\"failed to open file: %w\", err)\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, fmt.Errorf(\"error reading file: %w\", err)\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts and returns the number of lines in a specified file."
  },
  {
    "id": 1161,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\twordCount := 0\n\tscanner := bufio.NewScanner(file)\n\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\twords := strings.Fields(line)\n\t\tfor _, w := range words {\n\t\t\tif w == word {\n\t\t\t\twordCount++\n\t\t\t}\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Counts the occurrences of a specified word in a given file."
  },
  {
    "id": 1162,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts and returns the number of lines in a specified file."
  },
  {
    "id": 1163,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specific word in a file, ignoring case sensitivity."
  },
  {
    "id": 1164,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "The function `CountLinesInFile` counts and returns the number of lines in a specified file."
  },
  {
    "id": 1165,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file specified by the file path and returns them as a slice of strings."
  },
  {
    "id": 1166,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file line by line and returns its contents as a slice of strings.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "This function reads a file line by line and returns its contents as a slice of strings."
  },
  {
    "id": 1167,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordsInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\treturn wordCount, scanner.Err()\n}\n```",
    "summary": "Counts the number of words in a given file and returns the total count."
  },
  {
    "id": 1168,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordsInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Counts the number of words in a specified file and returns the count or an error."
  },
  {
    "id": 1169,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file and returns its lines as a slice of strings.\nfunc ReadFileLines(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "ReadFileLines reads a file and returns its contents as a slice of strings, with each string representing a line from the file."
  },
  {
    "id": 1170,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file line by line and returns a slice of strings.\nfunc ReadFileLines(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "ReadFileLines reads a file line by line and returns a slice of strings containing each line's content."
  },
  {
    "id": 1171,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if one occurs."
  },
  {
    "id": 1172,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// WriteLines writes the provided lines to a file at the specified path.\nfunc WriteLines(lines []string, filePath string) error {\n\tfile, err := os.Create(filePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\twriter := bufio.NewWriter(file)\n\tfor _, line := range lines {\n\t\t_, err := writer.WriteString(line + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn writer.Flush()\n}\n```",
    "summary": "WriteLines writes an array of strings to a file, each string as a separate line."
  },
  {
    "id": 1173,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a given file and returns the count."
  },
  {
    "id": 1174,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts and returns the number of lines in a specified file, handling any errors that occur during file access or scanning."
  },
  {
    "id": 1175,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContaining(filePath, keyword string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), keyword) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the number of lines in a file that contain a specified keyword."
  },
  {
    "id": 1176,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specific word in a file and returns the count."
  },
  {
    "id": 1177,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc countLinesWithPrefix(filePath, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function `countLinesWithPrefix` reads a file and counts the number of lines that start with a specified prefix."
  },
  {
    "id": 1178,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadLines reads all lines from a file specified by its path and returns them as a slice of strings.\nfunc ReadLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 1179,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadLinesFromFile(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "This function reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 1180,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 1181,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tword = strings.ToLower(word)\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := strings.ToLower(scanner.Text())\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specified word in a file, ignoring case sensitivity."
  },
  {
    "id": 1182,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesWithWord(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 1183,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn lineCount, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a given file and returns the count along with any error encountered."
  },
  {
    "id": 1184,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\tcount := 0\n\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specified word in a text file, ignoring case sensitivity."
  },
  {
    "id": 1185,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordsInFile reads a file and returns the number of words it contains.\nfunc CountWordsInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Counts and returns the number of words in a specified file."
  },
  {
    "id": 1186,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts and returns the number of lines in a specified file, handling file access errors."
  },
  {
    "id": 1187,
    "code": "```go\nfunc readLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file specified by `filePath` and returns its contents as a slice of strings, each representing a line."
  },
  {
    "id": 1188,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrencesInFile(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specific word in a file and returns the total count."
  },
  {
    "id": 1189,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a file specified by the given file path and returns the count or an error."
  },
  {
    "id": 1190,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileAndPrintLines reads a file from the given path and prints each line to the standard output.\nfunc ReadFileAndPrintLines(filePath string) error {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tfmt.Println(scanner.Text())\n\t}\n\n\treturn scanner.Err()\n}\n```",
    "summary": "ReadFileAndPrintLines reads a file from a specified path and prints each line to the console."
  },
  {
    "id": 1191,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function opens a file, counts the number of lines, and returns the line count or an error if one occurs."
  },
  {
    "id": 1192,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts and returns the number of lines in a specified file, handling any potential errors during the process."
  },
  {
    "id": 1193,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts the number of lines in a specified file and returns the count or an error if any occurs during processing."
  },
  {
    "id": 1194,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns a slice of strings containing each line."
  },
  {
    "id": 1195,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordOccurrences reads a file and returns a map containing the number of occurrences of each word.\nfunc CountWordOccurrences(filePath string) (map[string]int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\twordCount := make(map[string]int)\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCount[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "The `CountWordOccurrences` function reads a file and returns a map of word frequencies, counting each word's occurrence in a case-insensitive manner."
  },
  {
    "id": 1196,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads and returns all lines from a specified file, handling any errors encountered during the process."
  },
  {
    "id": 1197,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// CountLines counts the number of lines in a given file.\nfunc CountLines(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error."
  },
  {
    "id": 1198,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\nfunc ReadFileLines(filename string) ([]string, error) {\n    file, err := os.Open(filename)\n    if err != nil {\n        return nil, err\n    }\n    defer file.Close()\n\n    var lines []string\n    scanner := bufio.NewScanner(file)\n    for scanner.Scan() {\n        lines = append(lines, scanner.Text())\n    }\n\n    if err := scanner.Err(); err != nil {\n        return nil, err\n    }\n\n    return lines, nil\n}\n```",
    "summary": "Reads all lines from a file and returns them as a slice of strings."
  },
  {
    "id": 1199,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileByLine reads a file line by line and returns a slice of strings, each representing a line in the file.\nfunc ReadFileByLine(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns its contents as a slice of strings."
  },
  {
    "id": 1200,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesContainingWord reads a file and counts the number of lines that contain a specific word.\nfunc CountLinesContainingWord(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function reads a file and counts the number of lines that contain a specific word."
  },
  {
    "id": 1201,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\n// CountLinesWithPrefix reads a file and returns the count of lines that start with the specified prefix.\nfunc CountLinesWithPrefix(filePath, prefix string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    count := 0\n    for scanner.Scan() {\n        if strings.HasPrefix(scanner.Text(), prefix) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n    return count, nil\n}\n```",
    "summary": "CountLinesWithPrefix reads a file and returns the number of lines that start with a given prefix."
  },
  {
    "id": 1202,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a given file and returns the count or an error if encountered."
  },
  {
    "id": 1203,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a given file and returns them as a slice of strings."
  },
  {
    "id": 1204,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\nfunc WriteLinesToFile(filename string, lines []string) error {\n    file, err := os.Create(filename)\n    if err != nil {\n        return err\n    }\n    defer file.Close()\n\n    writer := bufio.NewWriter(file)\n    for _, line := range lines {\n        if _, err := writer.WriteString(line + \"\\n\"); err != nil {\n            return err\n        }\n    }\n    return writer.Flush()\n}\n```",
    "summary": "Writes a slice of strings to a file, each on a new line, using buffered I/O for efficiency."
  },
  {
    "id": 1205,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specific word in a given file, ignoring case sensitivity."
  },
  {
    "id": 1206,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specific word in a given file."
  },
  {
    "id": 1207,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\twords := strings.Fields(line)\n\t\tfor _, w := range words {\n\t\t\tif w == word {\n\t\t\t\twordCount++\n\t\t\t}\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "This function counts the occurrences of a specified word in a text file."
  },
  {
    "id": 1208,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLineByLine(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns its contents as a slice of strings, handling any errors encountered during the process."
  },
  {
    "id": 1209,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 1210,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\nfunc CountLinesContainingWord(filePath, word string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    count := 0\n    for scanner.Scan() {\n        if strings.Contains(scanner.Text(), word) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return count, nil\n}\n```",
    "summary": "This function counts the number of lines in a file that contain a specified word and returns the count."
  },
  {
    "id": 1211,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc WriteLinesToFile(filename string, lines []string) error {\n\tfile, err := os.Create(filename)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\twriter := bufio.NewWriter(file)\n\tfor _, line := range lines {\n\t\t_, err := writer.WriteString(line + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn writer.Flush()\n}\n```",
    "summary": "Writes an array of strings to a file, each on a new line, using buffered writing."
  },
  {
    "id": 1212,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and counts the number of lines starting with a specified prefix.\nfunc CountLinesWithPrefix(filename, prefix string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that start with a given prefix."
  },
  {
    "id": 1213,
    "code": "```go\npackage main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    lineCount := 0\n    for scanner.Scan() {\n        lineCount++\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return lineCount, nil\n}\n```",
    "summary": "The function `CountLinesInFile` opens a file and returns the number of lines it contains, or an error if the file cannot be read."
  },
  {
    "id": 1214,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a file specified by the file path and returns the count and any error encountered."
  },
  {
    "id": 1215,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"log\"\n\t\"os\"\n)\n\nfunc ReadLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings, handling errors in file operations."
  },
  {
    "id": 1216,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts and returns the number of lines in a specified file, handling any errors that occur during file reading."
  },
  {
    "id": 1217,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specific word in a file, ignoring case sensitivity, and returns the count or an error if any occurs."
  },
  {
    "id": 1218,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadLines(filePath string) ([]string, error) {\n\tvar lines []string\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file specified by `filePath` and returns them as a slice of strings."
  },
  {
    "id": 1219,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc countLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts the number of lines in a file specified by the given file path."
  },
  {
    "id": 1220,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to open file: %w\", err)\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, fmt.Errorf(\"error while reading file: %w\", err)\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings, handling any errors encountered."
  },
  {
    "id": 1221,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts and returns the number of lines in a specified file, handling errors appropriately."
  },
  {
    "id": 1222,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\n// CountWordOccurrences reads a file and returns a map with the count of occurrences of each word.\nfunc CountWordOccurrences(filename string) (map[string]int, error) {\n    wordCount := make(map[string]int)\n\n    file, err := os.Open(filename)\n    if err != nil {\n        return nil, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    scanner.Split(bufio.ScanWords)\n    \n    for scanner.Scan() {\n        word := strings.ToLower(scanner.Text())\n        wordCount[word]++\n    }\n\n    if err := scanner.Err(); err != nil {\n        return nil, err\n    }\n\n    return wordCount, nil\n}\n```",
    "summary": "Counts and returns the occurrences of each word in a file as a map."
  },
  {
    "id": 1223,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\n// CountLinesContainingWord reads a file and returns the number of lines that contain the specified word.\nfunc CountLinesContainingWord(filePath string, word string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    count := 0\n    for scanner.Scan() {\n        if strings.Contains(scanner.Text(), word) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 1224,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 1225,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// CountLinesInFile reads a file and returns the number of lines it contains.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn lineCount, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 1226,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "The function `CountLinesInFile` opens a file and returns the number of lines it contains, handling any errors encountered during the process."
  },
  {
    "id": 1227,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesWithPrefix(filePath string, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tif strings.HasPrefix(line, prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that start with a specified prefix."
  },
  {
    "id": 1228,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and counts how many lines start with a given prefix.\nfunc CountLinesWithPrefix(filename, prefix string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that start with a specified prefix."
  },
  {
    "id": 1229,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// ReadFileAndCountWords reads a file from the given path\n// and returns the total number of words in the file.\nfunc ReadFileAndCountWords(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\tword := scanner.Text()\n\t\tif len(strings.TrimSpace(word)) > 0 {\n\t\t\twordCount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "This function reads a file from a specified path and returns the total number of words in the file."
  },
  {
    "id": 1230,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesWithSubstring(filePath string, substring string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), substring) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the number of lines in a file that contain a specified substring."
  },
  {
    "id": 1231,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// CountLinesInFile opens a file, reads its contents line by line,\n// and returns the total number of lines in the file.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "The function `CountLinesInFile` reads a file and returns the total number of lines, handling file opening errors and scan errors."
  },
  {
    "id": 1232,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\nfunc CountLinesContainingWord(filePath string, word string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    count := 0\n\n    for scanner.Scan() {\n        if strings.Contains(scanner.Text(), word) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return count, nil\n}\n```",
    "summary": "The function reads a file and returns the number of lines containing a specified word."
  },
  {
    "id": 1233,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordFrequency reads a text file and returns a map with the frequency of each word.\nfunc CountWordFrequency(filePath string) (map[string]int, error) {\n\twordCount := make(map[string]int)\n\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCount[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "This function reads a text file and returns a map containing the frequency of each word."
  },
  {
    "id": 1234,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and returns the number of lines that start with the specified prefix.\nfunc CountLinesWithPrefix(filePath string, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that begin with a specified prefix."
  },
  {
    "id": 1235,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tcount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts and returns the number of lines in a file specified by the file path, handling any I/O errors that may occur."
  },
  {
    "id": 1236,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordOccurrences reads a file and returns a map with the count of each word's occurrences.\nfunc CountWordOccurrences(filePath string) (map[string]int, error) {\n\twordCount := make(map[string]int)\n\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCount[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "The function CountWordOccurrences reads a file and returns a map counting the occurrences of each word."
  },
  {
    "id": 1237,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file line by line and returns a slice of strings containing the file's lines.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "The function `ReadFileLines` reads a file line by line and returns its contents as a slice of strings."
  },
  {
    "id": 1238,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc countLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}",
    "summary": "This function counts the number of lines in a given file specified by its file path."
  },
  {
    "id": 1239,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and returns the number of lines that start with a given prefix.\nfunc CountLinesWithPrefix(filePath, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that start with a specified prefix."
  },
  {
    "id": 1240,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 1241,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\n// ReplaceWordInFile reads a file line by line, replaces occurrences of oldWord with newWord, \n// and writes the updated content back to the file.\nfunc ReplaceWordInFile(filePath, oldWord, newWord string) error {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    var content []string\n\n    for scanner.Scan() {\n        updatedLine := strings.ReplaceAll(scanner.Text(), oldWord, newWord)\n        content = append(content, updatedLine)\n    }\n\n    if err := scanner.Err(); err != nil {\n        return err\n    }\n\n    file, err = os.Create(filePath)\n    if err != nil {\n        return err\n    }\n    defer file.Close()\n\n    writer := bufio.NewWriter(file)\n    for _, line := range content {\n        _, err := writer.WriteString(line + \"\\n\")\n        if err != nil {\n            return err\n        }\n    }\n    return writer.Flush()\n}\n```",
    "summary": "ReplaceWordInFile reads a file, replaces occurrences of a specified word, and writes the updated content back to the same file."
  },
  {
    "id": 1242,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specific word in a text file and returns the total count."
  },
  {
    "id": 1243,
    "code": "```go\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    lineCount := 0\n    for scanner.Scan() {\n        lineCount++\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return lineCount, nil\n}\n```",
    "summary": "The function `CountLinesInFile` reads a file and returns the total number of lines in it, handling potential errors during file operations."
  },
  {
    "id": 1244,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line-by-line into a slice of strings, returning an error if the file cannot be read."
  },
  {
    "id": 1245,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file and returns its contents as a slice of strings,\n// where each string is a line from the file.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "This function reads a file and returns its contents as a slice of strings, with each string representing a line."
  },
  {
    "id": 1246,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileByLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns its content as a slice of strings."
  },
  {
    "id": 1247,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanLines)\n\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specified word in a file."
  },
  {
    "id": 1248,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a file specified by the given file path, returning the count and any error encountered."
  },
  {
    "id": 1249,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordsInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\twordCount := 0\n\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Counts the number of words in a file specified by the given file path."
  },
  {
    "id": 1250,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 1251,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and counts the number of lines that start with the specified prefix.\nfunc CountLinesWithPrefix(filePath string, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that start with a given prefix."
  },
  {
    "id": 1252,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "The function `CountLinesInFile` reads a file and returns the total number of lines in it."
  },
  {
    "id": 1253,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLinesToSlice(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}",
    "summary": "This function reads a file line by line and returns the lines as a slice of strings."
  },
  {
    "id": 1254,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// CountLinesInFile opens a file, reads its content line by line, and returns the total number of lines.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function reads a file and returns the total number of lines it contains, handling errors appropriately."
  },
  {
    "id": 1255,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordsInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\twordCount := 0\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn wordCount, nil\n}\n```",
    "summary": "The function `CountWordsInFile` opens a file, counts the number of words in it, and returns the word count."
  },
  {
    "id": 1256,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrencesInFile(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specific word in a given file."
  },
  {
    "id": 1257,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesWithPrefix(filePath string, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that start with a specified prefix."
  },
  {
    "id": 1258,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a given file and returns the count or an error if encountered."
  },
  {
    "id": 1259,
    "code": "```go\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line-by-line and returns a slice of strings containing each line."
  },
  {
    "id": 1260,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingWord(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n```",
    "summary": "This function counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 1261,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingWord(filename, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 1262,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\n// CountLinesWithPrefix reads a file and returns the number of lines that start with the given prefix.\nfunc CountLinesWithPrefix(filePath, prefix string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    count := 0\n    for scanner.Scan() {\n        if strings.HasPrefix(scanner.Text(), prefix) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that start with a specified prefix and returns the count."
  },
  {
    "id": 1263,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"log\"\n\t\"os\"\n)\n\nfunc ReadFileLineByLine(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns the lines as a slice of strings, handling any errors encountered."
  },
  {
    "id": 1264,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc ReadLinesContainingWord(filePath, word string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tif strings.Contains(line, word) {\n\t\t\tlines = append(lines, line)\n\t\t}\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file and returns all lines containing a specified word."
  },
  {
    "id": 1265,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns the lines as a slice of strings."
  },
  {
    "id": 1266,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specific word in a file, ignoring case sensitivity."
  },
  {
    "id": 1267,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specified word in a file and returns the count."
  },
  {
    "id": 1268,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingSubstring(filePath string, substring string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), substring) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specified substring."
  },
  {
    "id": 1269,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordsInFile reads a file and returns the total number of words in it.\nfunc CountWordsInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Counts the number of words in a specified file and returns the total count."
  },
  {
    "id": 1270,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specified word in a given file, ignoring case sensitivity."
  },
  {
    "id": 1271,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithWord reads a file and counts the number of lines containing the specified word.\nfunc CountLinesWithWord(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function reads a file and counts the number of lines that contain a specified word."
  },
  {
    "id": 1272,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingWord(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function `CountLinesContainingWord` counts the number of lines in a file that contain a specific word."
  },
  {
    "id": 1273,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLineByLine(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to open file: %w\", err)\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, fmt.Errorf(\"error reading file: %w\", err)\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "This function reads a file line by line and returns a slice of strings containing all lines or an error if the file cannot be read."
  },
  {
    "id": 1274,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file and returns its content as a slice of strings, each representing a line.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file and returns its content as a slice of strings, with each string representing a line from the file."
  },
  {
    "id": 1275,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns its content as a slice of strings."
  },
  {
    "id": 1276,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLinesIntoSlice(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line-by-line and returns its content as a slice of strings."
  },
  {
    "id": 1277,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filepath string) (int, error) {\n\tfile, err := os.Open(filepath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 1278,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function opens a file, counts the occurrences of a specified word in its contents, and returns the count along with any error encountered."
  },
  {
    "id": 1279,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any potential error encountered during the process."
  },
  {
    "id": 1280,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn lineCount, err\n\t}\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts and returns the number of lines in a specified file, handling potential errors during file access."
  },
  {
    "id": 1281,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\nfunc CountLinesContainingWord(filePath, word string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    count := 0\n    for scanner.Scan() {\n        if strings.Contains(scanner.Text(), word) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n    return count, nil\n}\n```",
    "summary": "The function `CountLinesContainingWord` reads a file and returns the number of lines that contain a specified word."
  },
  {
    "id": 1282,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "The `ReadFileLines` function reads all lines from a specified file and returns them as a slice of strings, handling any errors that occur during reading."
  },
  {
    "id": 1283,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadLinesFromFile(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn lines, nil\n}",
    "summary": "Reads and returns all lines from a specified file, handling any file access errors."
  },
  {
    "id": 1284,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function `CountWordOccurrences` reads a file and counts the number of times a specified word appears in it."
  },
  {
    "id": 1285,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file specified by filePath and returns them as a slice of strings."
  },
  {
    "id": 1286,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and returns the number of lines that start with the given prefix.\nfunc CountLinesWithPrefix(filePath string, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function reads a file and counts the number of lines that start with a specified prefix."
  },
  {
    "id": 1287,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    lineCount := 0\n    for scanner.Scan() {\n        lineCount++\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return lineCount, nil\n}\n```",
    "summary": "The function `CountLinesInFile` counts and returns the number of lines in a specified file."
  },
  {
    "id": 1288,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc WriteLinesToFile(filename string, lines []string) error {\n\tfile, err := os.Create(filename)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\twriter := bufio.NewWriter(file)\n\tfor _, line := range lines {\n\t\t_, err := writer.WriteString(line + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn writer.Flush()\n}\n```",
    "summary": "Writes an array of strings to a specified file, each string on a new line."
  },
  {
    "id": 1289,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    scanner.Split(bufio.ScanWords)\n\n    count := 0\n    for scanner.Scan() {\n        if strings.EqualFold(scanner.Text(), word) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specified word in a file, ignoring case differences."
  },
  {
    "id": 1290,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLines(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the total count or an error if one occurs."
  },
  {
    "id": 1291,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns a slice of strings containing each line's content."
  },
  {
    "id": 1292,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts and returns the number of lines in a specified file, handling any potential errors."
  },
  {
    "id": 1293,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 1294,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"io\"\n\t\"os\"\n)\n\nfunc CopyFile(src, dst string) error {\n\tsourceFile, err := os.Open(src)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer sourceFile.Close()\n\n\tdestinationFile, err := os.Create(dst)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer destinationFile.Close()\n\n\treader := bufio.NewReader(sourceFile)\n\twriter := bufio.NewWriter(destinationFile)\n\n\t_, err = io.Copy(writer, reader)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn writer.Flush()\n}\n```",
    "summary": "This function copies the contents of one file to another using buffered I/O in Go."
  },
  {
    "id": 1295,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\twords := strings.Fields(line)\n\t\tfor _, w := range words {\n\t\t\tif w == word {\n\t\t\t\tcount++\n\t\t\t}\n\t\t}\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specific word in a given text file."
  },
  {
    "id": 1296,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingWord(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the number of lines containing a specific word in a given file."
  },
  {
    "id": 1297,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithSubstring reads a file and returns the number of lines that contain a specific substring.\nfunc CountLinesWithSubstring(filename string, substring string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), substring) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specific substring."
  },
  {
    "id": 1298,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file and returns its contents as a slice of strings,\n// with each element representing a line in the file.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "The function `ReadFileLines` reads a file and returns its contents as a slice of strings, where each string represents a line in the file."
  },
  {
    "id": 1299,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and returns the number of lines that start with the given prefix.\nfunc CountLinesWithPrefix(filePath string, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function counts and returns the number of lines in a file that start with a specified prefix."
  },
  {
    "id": 1300,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\twords := strings.Fields(line)\n\t\tfor _, w := range words {\n\t\t\tif w == word {\n\t\t\t\tcount++\n\t\t\t}\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specific word in a text file."
  },
  {
    "id": 1301,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 1302,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the total count."
  },
  {
    "id": 1303,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    lineCount := 0\n    for scanner.Scan() {\n        lineCount++\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n    return lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if one occurs."
  },
  {
    "id": 1304,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns a slice of strings containing each line."
  },
  {
    "id": 1305,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\n// CountLinesWithPrefix reads a file and returns the number of lines that start with the specified prefix.\nfunc CountLinesWithPrefix(filePath string, prefix string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    count := 0\n    for scanner.Scan() {\n        if strings.HasPrefix(scanner.Text(), prefix) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return count, nil\n}\n```",
    "summary": "This function reads a file and counts the number of lines that start with a specified prefix."
  },
  {
    "id": 1306,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    lineCount := 0\n    for scanner.Scan() {\n        lineCount++\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return lineCount, nil\n}\n```",
    "summary": "This function counts the number of lines in a specified file and returns the count along with any errors encountered."
  },
  {
    "id": 1307,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if one occurs."
  },
  {
    "id": 1308,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}",
    "summary": "This function counts and returns the number of lines in a specified file."
  },
  {
    "id": 1309,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// CountLinesInFile reads a file and returns the number of lines it contains.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "CountLinesInFile reads a file and returns the total number of lines in it."
  },
  {
    "id": 1310,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordsInFile(filepath string) (int, error) {\n\tfile, err := os.Open(filepath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\twordCount := 0\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := scanner.Text()\n\t\tif strings.TrimSpace(word) != \"\" {\n\t\t\twordCount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Counts the number of words in a file and returns the total count or an error if file access fails."
  },
  {
    "id": 1311,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts and returns the number of lines in a specified file, handling potential errors."
  },
  {
    "id": 1312,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// CountLinesInFile opens a file at the given path and returns the number of lines it contains.\nfunc CountLinesInFile(path string) (int, error) {\n\tfile, err := os.Open(path)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "CountLinesInFile opens a specified file and returns the total number of lines it contains."
  },
  {
    "id": 1313,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLineByLine reads a file and prints each line to the console.\nfunc ReadFileLineByLine(filePath string) error {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tfmt.Println(scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n```",
    "summary": "The function ReadFileLineByLine reads a file line by line and prints each line to the console."
  },
  {
    "id": 1314,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := strings.ToLower(scanner.Text())\n\t\tcount += strings.Count(line, strings.ToLower(word))\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specific word in a given text file, ignoring case sensitivity."
  },
  {
    "id": 1315,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordsInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\twordCount := 0\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn wordCount, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Counts the number of words in a given file and returns the total count or an error if one occurs."
  },
  {
    "id": 1316,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads and returns all lines from a file as a slice of strings, handling errors appropriately."
  },
  {
    "id": 1317,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file line by line and returns the lines as a slice of strings.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns the lines as a slice of strings."
  },
  {
    "id": 1318,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\nfunc ReadLines(filename string) ([]string, error) {\n    file, err := os.Open(filename)\n    if err != nil {\n        return nil, err\n    }\n    defer file.Close()\n\n    var lines []string\n    scanner := bufio.NewScanner(file)\n    for scanner.Scan() {\n        lines = append(lines, scanner.Text())\n    }\n\n    if err := scanner.Err(); err != nil {\n        return nil, err\n    }\n\n    return lines, nil\n}\n```",
    "summary": "Reads all lines from a file into a slice of strings, returning an error if any occurs."
  },
  {
    "id": 1319,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file and returns its contents as a slice of strings, with each string representing a line.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "ReadFileLines reads a file and returns its lines as a slice of strings."
  },
  {
    "id": 1320,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordOccurrences reads a text file and returns a map where the keys\n// are words and the values are the number of times each word appears.\nfunc CountWordOccurrences(filePath string) (map[string]int, error) {\n\twordCount := make(map[string]int)\n\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCount[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Counts the occurrences of each word in a text file and returns the result as a map."
  },
  {
    "id": 1321,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc FilterLinesWithSubstring(filePath string, substring string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar matchedLines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tif strings.Contains(line, substring) {\n\t\t\tmatchedLines = append(matchedLines, line)\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn matchedLines, nil\n}\n```",
    "summary": "The function reads a file and returns lines containing a specified substring."
  },
  {
    "id": 1322,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads and returns all lines from a specified file as a slice of strings."
  },
  {
    "id": 1323,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesWithWord(filename, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 1324,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    lineCount := 0\n\n    for scanner.Scan() {\n        lineCount++\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return lineCount, nil\n}\n```",
    "summary": "This function counts the number of lines in a file specified by its path and returns the line count or an error if any occurs."
  },
  {
    "id": 1325,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file specified by filePath and returns them as a slice of strings."
  },
  {
    "id": 1326,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 1327,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return nil, err\n    }\n    defer file.Close()\n\n    var lines []string\n    scanner := bufio.NewScanner(file)\n    for scanner.Scan() {\n        lines = append(lines, scanner.Text())\n    }\n\n    if err := scanner.Err(); err != nil {\n        return nil, err\n    }\n\n    return lines, nil\n}\n```",
    "summary": "Reads a file line by line, returning a slice of strings with each line's content."
  },
  {
    "id": 1328,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file, returning the count or an error if one occurs."
  },
  {
    "id": 1329,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}",
    "summary": "This function counts the occurrences of a specified word in a text file."
  },
  {
    "id": 1330,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn lineCount, err\n\t}\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a given file and returns the count along with any potential error."
  },
  {
    "id": 1331,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordOccurrences reads a file and returns a map with the count of each word.\nfunc CountWordOccurrences(filePath string) (map[string]int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\twordCount := make(map[string]int)\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCount[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Counts and returns the occurrences of each word in a file as a map."
  },
  {
    "id": 1332,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc WriteLinesToFile(lines []string, filename string) error {\n\tfile, err := os.Create(filename)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\twriter := bufio.NewWriter(file)\n\tfor _, line := range lines {\n\t\t_, err := writer.WriteString(line + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn writer.Flush()\n}\n```",
    "summary": "Writes an array of strings to a specified file, each string as a separate line."
  },
  {
    "id": 1333,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\n// CountLinesWithPrefix reads a file and returns the number of lines that start with the given prefix.\nfunc CountLinesWithPrefix(filePath, prefix string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    count := 0\n\n    for scanner.Scan() {\n        if strings.HasPrefix(scanner.Text(), prefix) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return count, nil\n}\n```",
    "summary": "The function CountLinesWithPrefix reads a file and counts the number of lines starting with a specified prefix."
  },
  {
    "id": 1334,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordsInFile reads a file and returns a map with the count of each word found.\nfunc CountWordsInFile(filename string) (map[string]int, error) {\n\twordCounts := make(map[string]int)\n\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCounts[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCounts, nil\n}\n```",
    "summary": "Counts the occurrences of each word in a file and returns a map with the word frequencies."
  },
  {
    "id": 1335,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if encountered."
  },
  {
    "id": 1336,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\t\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns the lines as a slice of strings."
  },
  {
    "id": 1337,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// CountLinesInFile reads a file and returns the number of lines in it.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "The CountLinesInFile function reads a file and returns the number of lines it contains."
  },
  {
    "id": 1338,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts the number of lines in a specified file and returns the count or an error if one occurs."
  },
  {
    "id": 1339,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\n// CountWordsInFile reads a file and returns the total number of words in it.\nfunc CountWordsInFile(filePath string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    scanner.Split(bufio.ScanWords)\n\n    wordCount := 0\n    for scanner.Scan() {\n        wordCount++\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return wordCount, nil\n}\n```",
    "summary": "CountWordsInFile reads a file and returns the total number of words it contains."
  },
  {
    "id": 1340,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\n// ReadLinesWithPrefix reads a file and returns all lines that start with the specified prefix.\nfunc ReadLinesWithPrefix(filePath, prefix string) ([]string, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return nil, err\n    }\n    defer file.Close()\n\n    var lines []string\n    scanner := bufio.NewScanner(file)\n    for scanner.Scan() {\n        line := scanner.Text()\n        if strings.HasPrefix(line, prefix) {\n            lines = append(lines, line)\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return nil, err\n    }\n\n    return lines, nil\n}\n```",
    "summary": "This function reads a file and returns a slice of all lines that start with a specified prefix."
  },
  {
    "id": 1341,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadLinesFromFile(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file into a slice of strings, handling any errors."
  },
  {
    "id": 1342,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\nfunc CountWordsInFile(filePath string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    scanner.Split(bufio.ScanWords)\n\n    wordCount := 0\n    for scanner.Scan() {\n        wordCount++\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n    return wordCount, nil\n}\n```",
    "summary": "This Go function opens a file, counts the number of words in it, and returns the count or an error if one occurs."
  },
  {
    "id": 1343,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadLines reads a file and returns a slice containing each line as a string.\nfunc ReadLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "ReadLines reads a file line by line and returns a slice of strings containing each line."
  },
  {
    "id": 1344,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\n// ReverseLinesInFile reads a file, reverses each line's content, and writes the result to a new file.\nfunc ReverseLinesInFile(inputPath, outputPath string) error {\n    inputFile, err := os.Open(inputPath)\n    if err != nil {\n        return err\n    }\n    defer inputFile.Close()\n\n    outputFile, err := os.Create(outputPath)\n    if err != nil {\n        return err\n    }\n    defer outputFile.Close()\n\n    scanner := bufio.NewScanner(inputFile)\n    writer := bufio.NewWriter(outputFile)\n    defer writer.Flush()\n\n    for scanner.Scan() {\n        line := scanner.Text()\n        reversedLine := reverseString(line)\n        _, err := writer.WriteString(reversedLine + \"\\n\")\n        if err != nil {\n            return err\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return err\n    }\n\n    return nil\n}\n\nfunc reverseString(s string) string {\n    runes := []rune(s)\n    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        runes[i], runes[j] = runes[j], runes[i]\n    }\n    return string(runes)\n}\n```",
    "summary": "The function reads a file, reverses the content of each line, and writes the modified lines to a new file."
  },
  {
    "id": 1345,
    "code": "```go\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    lineCount := 0\n    for scanner.Scan() {\n        lineCount++\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return lineCount, nil\n}\n```",
    "summary": "Reads a file and returns the number of lines it contains, or an error if the file cannot be read."
  },
  {
    "id": 1346,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}",
    "summary": "This function counts and returns the number of lines in a specified file, handling any errors that occur."
  },
  {
    "id": 1347,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc WriteLinesToFile(lines []string, filename string) error {\n\tfile, err := os.Create(filename)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\twriter := bufio.NewWriter(file)\n\tfor _, line := range lines {\n\t\t_, err := writer.WriteString(line + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn writer.Flush()\n}\n```",
    "summary": "Writes a slice of strings to a specified file, each string as a new line, handling file creation and errors."
  },
  {
    "id": 1348,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and counts the number of lines that start with a specific prefix.\nfunc CountLinesWithPrefix(filePath, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that start with a specified prefix."
  },
  {
    "id": 1349,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error."
  },
  {
    "id": 1350,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and counts the number of lines that start with a specified prefix.\nfunc CountLinesWithPrefix(filePath, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that start with a specified prefix."
  },
  {
    "id": 1351,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specific word in a given file."
  },
  {
    "id": 1352,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specified word in a given file, ignoring case sensitivity."
  },
  {
    "id": 1353,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc WriteLinesToFile(filename string, lines []string) error {\n\tfile, err := os.Create(filename)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\twriter := bufio.NewWriter(file)\n\tfor _, line := range lines {\n\t\t_, err := writer.WriteString(line + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn writer.Flush()\n}\n```",
    "summary": "Writes a slice of strings to a specified file, with each string as a new line."
  },
  {
    "id": 1354,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\nfunc CountWordOccurrences(filename, word string) (int, error) {\n    file, err := os.Open(filename)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    scanner.Split(bufio.ScanWords)\n\n    count := 0\n    for scanner.Scan() {\n        if strings.EqualFold(scanner.Text(), word) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return count, nil\n}\n```",
    "summary": "Counts the occurrences of a specific word in a text file, ignoring case, and returns the count."
  },
  {
    "id": 1355,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// CountLinesInFile takes a file path as input and returns the number of lines in the file.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a file specified by its path, returning the count and any error encountered."
  },
  {
    "id": 1356,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a given file and returns the count along with any error encountered."
  },
  {
    "id": 1357,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc countLinesContainingWord(filename, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 1358,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and counts the number of lines that start with the given prefix.\nfunc CountLinesWithPrefix(filename, prefix string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tif strings.HasPrefix(line, prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that start with a specified prefix."
  },
  {
    "id": 1359,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "CountLinesInFile reads a file and returns the number of lines it contains, handling any errors encountered during the process."
  },
  {
    "id": 1360,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReverseLines reads a text file and writes its lines in reverse order to a new file.\nfunc ReverseLines(inputFile, outputFile string) error {\n\tinFile, err := os.Open(inputFile)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer inFile.Close()\n\n\tlines := []string{}\n\tscanner := bufio.NewScanner(inFile)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn err\n\t}\n\n\toutFile, err := os.Create(outputFile)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer outFile.Close()\n\n\twriter := bufio.NewWriter(outFile)\n\tfor i := len(lines) - 1; i >= 0; i-- {\n\t\t_, err := writer.WriteString(lines[i] + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn writer.Flush()\n}\n```",
    "summary": "ReverseLines reads a file line by line and writes the lines in reverse order to a new output file."
  },
  {
    "id": 1361,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "This function reads a file line-by-line and returns a slice of strings, each representing a line from the file."
  },
  {
    "id": 1362,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the line count or an error if encountered."
  },
  {
    "id": 1363,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// CountLinesInFile reads a file and returns the number of lines it contains.\nfunc CountLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "CountLinesInFile opens a file, reads its contents, and returns the total number of lines."
  },
  {
    "id": 1364,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts the number of lines in a file specified by the file path."
  },
  {
    "id": 1365,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingWord(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 1366,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordsInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\twordCount := 0\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := scanner.Text()\n\t\tif len(strings.TrimSpace(word)) > 0 {\n\t\t\twordCount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "This function counts the number of words in a specified file and returns the count or an error if one occurs."
  },
  {
    "id": 1367,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 1368,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn lineCount, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts and returns the number of lines in a specified file, handling any errors encountered during the process."
  },
  {
    "id": 1369,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc WriteLinesToFile(filename string, lines []string) error {\n\tfile, err := os.Create(filename)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\twriter := bufio.NewWriter(file)\n\tfor _, line := range lines {\n\t\t_, err := writer.WriteString(line + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn writer.Flush()\n}\n```",
    "summary": "This function writes a slice of strings to a file, each as a separate line, using buffered writing for efficiency."
  },
  {
    "id": 1370,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrencesInFile(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tword = strings.ToLower(word)\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := strings.ToLower(scanner.Text())\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specific word in a file, ignoring case sensitivity."
  },
  {
    "id": 1371,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file specified by `filePath` and returns them as a slice of strings."
  },
  {
    "id": 1372,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrencesInFile(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts occurrences of a specific word in a text file and returns the count, handling any file reading errors."
  },
  {
    "id": 1373,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}",
    "summary": "This function counts the occurrences of a specified word in a text file and returns the count."
  },
  {
    "id": 1374,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if the operation fails."
  },
  {
    "id": 1375,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns the lines as a slice of strings."
  },
  {
    "id": 1376,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CopyFileLineByLine(src, dst string) error {\n\tsourceFile, err := os.Open(src)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer sourceFile.Close()\n\n\tdestinationFile, err := os.Create(dst)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer destinationFile.Close()\n\n\tscanner := bufio.NewScanner(sourceFile)\n\twriter := bufio.NewWriter(destinationFile)\n\tdefer writer.Flush()\n\n\tfor scanner.Scan() {\n\t\t_, err := writer.WriteString(scanner.Text() + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn scanner.Err()\n}\n```",
    "summary": "The function `CopyFileLineByLine` reads a source file line by line and writes each line to a destination file."
  },
  {
    "id": 1377,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// CountLinesInFile reads a file and returns the number of lines it contains.\nfunc CountLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn lineCount, nil\n}\n```",
    "summary": "This function reads a file and returns the number of lines it contains."
  },
  {
    "id": 1378,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function `CountWordOccurrences` reads a file and counts the occurrences of a specified word, returning the count and any error encountered."
  },
  {
    "id": 1379,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc countLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error."
  },
  {
    "id": 1380,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadFileLineByLine opens a file at the given path and prints each line to standard output.\nfunc ReadFileLineByLine(filePath string) error {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tprintln(scanner.Text())\n\t}\n\n\treturn scanner.Err()\n}\n```",
    "summary": "Reads a file line by line and prints each line to the console."
  },
  {
    "id": 1381,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns its contents as a slice of strings."
  },
  {
    "id": 1382,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordOccurrences reads a file and counts how many times a specific word appears.\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\twordCount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\twordCount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Counts the occurrences of a specific word in a file by reading it line by line."
  },
  {
    "id": 1383,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// CountLinesInFile reads a file and returns the number of lines it contains.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "The function `CountLinesInFile` reads a file and returns the count of lines it contains, handling errors appropriately."
  },
  {
    "id": 1384,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\twords := strings.Fields(line)\n\t\tfor _, w := range words {\n\t\t\tif w == word {\n\t\t\t\tcount++\n\t\t\t}\n\t\t}\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specific word in a file, returning the count and any error encountered."
  },
  {
    "id": 1385,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\n// CountLinesWithPrefix reads a file and returns the number of lines that start with the specified prefix.\nfunc CountLinesWithPrefix(filePath string, prefix string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    count := 0\n    for scanner.Scan() {\n        if strings.HasPrefix(scanner.Text(), prefix) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return count, nil\n}\n```",
    "summary": "This function reads a file and returns the count of lines that start with a specified prefix."
  },
  {
    "id": 1386,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordOccurrences reads a file and returns a map with the count of each word.\nfunc CountWordOccurrences(filename string) (map[string]int, error) {\n\twordCount := make(map[string]int)\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCount[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Counts occurrences of each word in a file and returns a map of word frequencies."
  },
  {
    "id": 1387,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// CountLinesInFile reads a file and returns the number of lines it contains.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function reads a file and returns the count of lines it contains, along with any potential error encountered during the process."
  },
  {
    "id": 1388,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLineByLine(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns its content as a slice of strings."
  },
  {
    "id": 1389,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if the file cannot be read."
  },
  {
    "id": 1390,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts the number of lines in a specified file and returns the count, handling any errors encountered during the process."
  },
  {
    "id": 1391,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filename, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\twordCount := 0\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\twordCount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Counts the occurrences of a specific word in a file, ignoring case sensitivity."
  },
  {
    "id": 1392,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 1393,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n```",
    "summary": "The function `CountWordOccurrences` counts the occurrences of a specific word in a given file, ignoring case sensitivity."
  },
  {
    "id": 1394,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn lineCount, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a file specified by the file path."
  },
  {
    "id": 1395,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts and returns the number of lines in a specified file, handling any file access errors."
  },
  {
    "id": 1396,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLines(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a file specified by the given filename."
  },
  {
    "id": 1397,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file from the given path and returns its lines as a slice of strings.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "ReadFileLines reads a file line by line and returns its contents as a slice of strings."
  },
  {
    "id": 1398,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadLinesFromFile reads a file and returns a slice of strings, each representing a line from the file.\nfunc ReadLinesFromFile(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "ReadLinesFromFile reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 1399,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\twordCount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\twords := strings.Fields(line)\n\t\tfor _, w := range words {\n\t\t\tif w == word {\n\t\t\t\twordCount++\n\t\t\t}\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Counts the occurrences of a specific word in a given file."
  },
  {
    "id": 1400,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc WriteLinesToFile(filename string, lines []string) error {\n\tfile, err := os.Create(filename)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\twriter := bufio.NewWriter(file)\n\tfor _, line := range lines {\n\t\t_, err := writer.WriteString(line + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn writer.Flush()\n}\n```",
    "summary": "This function writes an array of strings to a specified file, appending a newline to each string."
  },
  {
    "id": 1401,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 1402,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn lineCount, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts and returns the number of lines in a specified file, handling any errors that occur during reading."
  },
  {
    "id": 1403,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\nfunc WriteLinesToFile(filename string, lines []string) error {\n    file, err := os.Create(filename)\n    if err != nil {\n        return err\n    }\n    defer file.Close()\n\n    writer := bufio.NewWriter(file)\n    for _, line := range lines {\n        _, err := writer.WriteString(line + \"\\n\")\n        if err != nil {\n            return err\n        }\n    }\n    return writer.Flush()\n}\n```",
    "summary": "Writes an array of strings to a file, each string on a new line, using buffered writing."
  },
  {
    "id": 1404,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file specified by `filePath` and returns them as a slice of strings."
  },
  {
    "id": 1405,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc ReadFileLineByLine(filePath string, keyword string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar linesWithKeyword []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tif strings.Contains(line, keyword) {\n\t\t\tlinesWithKeyword = append(linesWithKeyword, line)\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn linesWithKeyword, nil\n}\n```",
    "summary": "The function reads a file line by line and returns lines containing a specified keyword."
  },
  {
    "id": 1406,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "The function `CountLinesInFile` opens a file, counts the number of lines, and returns the count or an error if encountered."
  },
  {
    "id": 1407,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\t\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 1408,
    "code": "import (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingWord(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}",
    "summary": "The function counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 1409,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error."
  },
  {
    "id": 1410,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "The function `ReadFileLines` reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 1411,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// ReadFileAndCountWords reads a file from the given path and returns the total word count.\nfunc ReadFileAndCountWords(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Reads a file and returns the total count of words found in it."
  },
  {
    "id": 1412,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithWord reads a file and counts the number of lines containing a specified word.\nfunc CountLinesWithWord(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 1413,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordOccurrences reads a file and counts the occurrences of each word, returning a map of word counts.\nfunc CountWordOccurrences(filePath string) (map[string]int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\twordCounts := make(map[string]int)\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCounts[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCounts, nil\n}\n```",
    "summary": "This function reads a file, counts the occurrences of each word, and returns a map containing word counts."
  },
  {
    "id": 1414,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// CountLinesInFile opens a file, reads it line by line, and returns the total number of lines.\nfunc CountLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, fmt.Errorf(\"failed to open file: %w\", err)\n\t}\n\tdefer file.Close()\n\t\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\t\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, fmt.Errorf(\"error reading file: %w\", err)\n\t}\n\t\n\treturn lineCount, nil\n}\n```",
    "summary": "The function `CountLinesInFile` reads a file and returns the total number of lines it contains."
  },
  {
    "id": 1415,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordOccurrences reads a file and returns a map with the frequency of each word.\nfunc CountWordOccurrences(filePath string) (map[string]int, error) {\n\twordCount := make(map[string]int)\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCount[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "This function reads a file and returns a map containing the frequency of each word, ignoring case sensitivity."
  },
  {
    "id": 1416,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, targetWord string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\t\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), targetWord) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specified word in a file, ignoring case differences."
  },
  {
    "id": 1417,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReverseLines reads a file line by line and writes each line in reverse order to an output file.\nfunc ReverseLines(inputFile, outputFile string) error {\n\tinFile, err := os.Open(inputFile)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer inFile.Close()\n\n\toutFile, err := os.Create(outputFile)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer outFile.Close()\n\n\tscanner := bufio.NewScanner(inFile)\n\twriter := bufio.NewWriter(outFile)\n\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\treversedLine := reverseString(line)\n\t\t_, err := writer.WriteString(reversedLine + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn err\n\t}\n\n\treturn writer.Flush()\n}\n\nfunc reverseString(s string) string {\n\trunes := []rune(s)\n\tfor i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n\t\trunes[i], runes[j] = runes[j], runes[i]\n\t}\n\treturn string(runes)\n}",
    "summary": "The ReverseLines function reads a file line by line, reverses each line, and writes the reversed lines to a new output file."
  },
  {
    "id": 1418,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithKeyword reads a file and returns the number of lines that contain the specified keyword.\nfunc CountLinesWithKeyword(filePath string, keyword string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), keyword) {\n\t\t\tlineCount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "CountLinesWithKeyword reads a file and returns the number of lines containing a specified keyword."
  },
  {
    "id": 1419,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if one occurs."
  },
  {
    "id": 1420,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc countWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specified word in a given file."
  },
  {
    "id": 1421,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}",
    "summary": "This function reads all lines from a file specified by its path and returns them as a slice of strings."
  },
  {
    "id": 1422,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file specified by `filePath` and returns its contents as a slice of strings, where each element is a line from the file."
  },
  {
    "id": 1423,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLineByLine(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns the lines as a slice of strings."
  },
  {
    "id": 1424,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts and returns the number of lines in a given file, handling any errors that occur during the process."
  },
  {
    "id": 1425,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and counts the number of lines that start with a given prefix.\nfunc CountLinesWithPrefix(filePath, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that start with a specified prefix."
  },
  {
    "id": 1426,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// CountLinesInFile opens a file at the given path and returns the number of lines in it.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a file specified by its path and returns the count."
  },
  {
    "id": 1427,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CopyFile(sourcePath, destinationPath string) error {\n\tsourceFile, err := os.Open(sourcePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer sourceFile.Close()\n\n\tdestinationFile, err := os.Create(destinationPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer destinationFile.Close()\n\n\tscanner := bufio.NewScanner(sourceFile)\n\twriter := bufio.NewWriter(destinationFile)\n\n\tfor scanner.Scan() {\n\t\t_, err := writer.WriteString(scanner.Text() + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn err\n\t}\n\n\treturn writer.Flush()\n}\n```",
    "summary": "This function copies the contents of a source file to a destination file using buffered I/O in Go."
  },
  {
    "id": 1428,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordsInFile reads a file and returns the total count of words in it.\nfunc CountWordsInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "The function `CountWordsInFile` reads a file and returns the total count of words in it."
  },
  {
    "id": 1429,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingWord(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 1430,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts and returns the number of lines in a specified file, handling any errors encountered."
  },
  {
    "id": 1431,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any potential error encountered."
  },
  {
    "id": 1432,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingWord(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tlineCount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 1433,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLineByLine(filePath string) ([]string, error) {\n\tvar lines []string\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns its contents as a slice of strings."
  },
  {
    "id": 1434,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithSubstring reads a file and counts how many lines contain the specified substring.\nfunc CountLinesWithSubstring(filePath string, substring string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), substring) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function reads a file and counts the number of lines containing a specified substring."
  },
  {
    "id": 1435,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    lineCount := 0\n    for scanner.Scan() {\n        lineCount++\n    }\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return lineCount, nil\n}\n```",
    "summary": "The function `CountLinesInFile` reads a file and returns the number of lines it contains, handling any errors that occur during the process."
  },
  {
    "id": 1436,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContaining(filePath, keyword string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), keyword) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specified keyword."
  },
  {
    "id": 1437,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadLines reads a file and returns its content as a slice of strings, each representing a line in the file.\nfunc ReadLines(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line-by-line and returns its content as a slice of strings."
  },
  {
    "id": 1438,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// CountLinesInFile opens a file at the given path and returns the number of lines it contains.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts and returns the number of lines in a specified file."
  },
  {
    "id": 1439,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordsInFile reads a file and returns the total number of words.\nfunc CountWordsInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "CountWordsInFile reads a specified file and returns the total count of words it contains."
  },
  {
    "id": 1440,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}",
    "summary": "This function reads a file line by line and returns a slice of strings containing each line."
  },
  {
    "id": 1441,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file and returns them as a slice of strings, handling any errors during the process."
  },
  {
    "id": 1442,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// CountLinesInFile reads a file and returns the total number of lines.\nfunc CountLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "CountLinesInFile reads a file and returns the total number of lines in it."
  },
  {
    "id": 1443,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specified word in a file."
  },
  {
    "id": 1444,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "CountLinesInFile reads a file and returns the number of lines it contains, handling any potential errors."
  },
  {
    "id": 1445,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts and returns the number of lines in a specified file, handling any errors that occur during file opening or reading."
  },
  {
    "id": 1446,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\n// CountLinesWithPrefix opens a file and counts the number of lines that start with the given prefix.\nfunc CountLinesWithPrefix(filename, prefix string) (int, error) {\n    file, err := os.Open(filename)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    count := 0\n    for scanner.Scan() {\n        if strings.HasPrefix(scanner.Text(), prefix) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n    \n    return count, nil\n}\n```",
    "summary": "The function `CountLinesWithPrefix` reads a file and counts the number of lines that start with a specified prefix."
  },
  {
    "id": 1447,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, fmt.Errorf(\"failed to open file: %w\", err)\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn lineCount, fmt.Errorf(\"error reading file: %w\", err)\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts the number of lines in a file specified by its file path and returns the count or an error if the file cannot be read."
  },
  {
    "id": 1448,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tword = strings.ToLower(word)\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\n\tfor scanner.Scan() {\n\t\tline := strings.ToLower(scanner.Text())\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specified word in a text file, returning the count and any potential error encountered."
  },
  {
    "id": 1449,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesWithPrefix(filePath, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that start with a given prefix."
  },
  {
    "id": 1450,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\n// ReadLinesWithPrefix reads a file line by line and returns all lines that start with the specified prefix.\nfunc ReadLinesWithPrefix(filePath, prefix string) ([]string, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return nil, err\n    }\n    defer file.Close()\n\n    var lines []string\n    scanner := bufio.NewScanner(file)\n    for scanner.Scan() {\n        line := scanner.Text()\n        if strings.HasPrefix(line, prefix) {\n            lines = append(lines, line)\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return nil, err\n    }\n    return lines, nil\n}\n```",
    "summary": "Reads a file line by line, returning lines that start with a given prefix."
  },
  {
    "id": 1451,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    lineCount := 0\n\n    for scanner.Scan() {\n        lineCount++\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return lineCount, nil\n}\n```",
    "summary": "The function `CountLinesInFile` counts and returns the number of lines in a specified file."
  },
  {
    "id": 1452,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordOccurrences reads a file from the given path and returns a map\n// with the count of occurrences for each word in the file.\nfunc CountWordOccurrences(filePath string) (map[string]int, error) {\n\twordCount := make(map[string]int)\n\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCount[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Counts the occurrences of each word in a file and returns a map with the word counts."
  },
  {
    "id": 1453,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\nfunc CountWordOccurrencesInFile(filePath, word string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    scanner.Split(bufio.ScanWords)\n\n    count := 0\n    for scanner.Scan() {\n        if strings.EqualFold(scanner.Text(), word) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return count, nil\n}\n```",
    "summary": "The function counts the occurrences of a specific word in a file, ignoring case differences."
  },
  {
    "id": 1454,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a file specified by the given file path."
  },
  {
    "id": 1455,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingWord(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts and returns the number of lines in a file that contain a specified word."
  },
  {
    "id": 1456,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a given file and returns the count or an error if one occurs."
  },
  {
    "id": 1457,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingWord(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines containing a specified word in a given file."
  },
  {
    "id": 1458,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesContainingWord reads a file and returns the number of lines containing a specific word.\nfunc CountLinesContainingWord(filename, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function `CountLinesContainingWord` reads a file and returns the count of lines that contain a specified word."
  },
  {
    "id": 1459,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesContainingString reads a file and returns the number of lines that contain the specified substring.\nfunc CountLinesContainingString(filePath string, substring string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), substring) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function reads a file and counts the number of lines that contain a specified substring."
  },
  {
    "id": 1460,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filepath string) ([]string, error) {\n\tfile, err := os.Open(filepath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns its contents as a slice of strings."
  },
  {
    "id": 1461,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadLines(path string) ([]string, error) {\n\tfile, err := os.Open(path)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 1462,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithWord reads a file and returns the number of lines containing the specified word.\nfunc CountLinesWithWord(filename, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 1463,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingWord(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 1464,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}",
    "summary": "This function counts the number of lines in a given file and returns the count along with any potential error encountered."
  },
  {
    "id": 1465,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn lineCount, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 1466,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingSubstring(filePath, substring string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), substring) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specified substring."
  },
  {
    "id": 1467,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordOccurrences reads a file and returns the count of occurrences of a specific word.\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\twordCount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\twords := strings.Fields(line)\n\t\tfor _, w := range words {\n\t\t\tif w == word {\n\t\t\t\twordCount++\n\t\t\t}\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "CountWordOccurrences reads a file and counts how many times a specified word appears."
  },
  {
    "id": 1468,
    "code": "```go\nfunc ReadLinesFromFile(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file into a slice of strings, returning an error if any occur during the process."
  },
  {
    "id": 1469,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesContainingWord reads a file and returns the number of lines containing the specified word.\nfunc CountLinesContainingWord(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 1470,
    "code": "```go\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    lineCount := 0\n    for scanner.Scan() {\n        lineCount++\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n    return lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a given file and returns the count or an error if one occurs."
  },
  {
    "id": 1471,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tif strings.TrimSpace(scanner.Text()) != \"\" {\n\t\t\tlineCount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of non-empty lines in a specified file and returns the count."
  },
  {
    "id": 1472,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\nfunc ReverseLines(inputFile, outputFile string) error {\n    inFile, err := os.Open(inputFile)\n    if err != nil {\n        return err\n    }\n    defer inFile.Close()\n\n    outFile, err := os.Create(outputFile)\n    if err != nil {\n        return err\n    }\n    defer outFile.Close()\n\n    scanner := bufio.NewScanner(inFile)\n    lines := []string{}\n    for scanner.Scan() {\n        lines = append(lines, scanner.Text())\n    }\n    if err := scanner.Err(); err != nil {\n        return err\n    }\n\n    writer := bufio.NewWriter(outFile)\n    for i := len(lines) - 1; i >= 0; i-- {\n        if _, err := writer.WriteString(lines[i] + \"\\n\"); err != nil {\n            return err\n        }\n    }\n    return writer.Flush()\n}\n```",
    "summary": "The function `ReverseLines` reads lines from an input file, reverses their order, and writes them to an output file."
  },
  {
    "id": 1473,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, fmt.Errorf(\"failed to open file: %w\", err)\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, fmt.Errorf(\"error reading file: %w\", err)\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts and returns the number of lines in a specified file."
  },
  {
    "id": 1474,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLines(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn lineCount, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "CountLines opens a file, counts the number of lines in it, and returns the count or an error if one occurs."
  },
  {
    "id": 1475,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc WriteLinesToFile(filePath string, lines []string) error {\n\tfile, err := os.Create(filePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\twriter := bufio.NewWriter(file)\n\tfor _, line := range lines {\n\t\t_, err = writer.WriteString(line + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn writer.Flush()\n}\n```",
    "summary": "Writes a slice of strings to a specified file, each string as a new line."
  },
  {
    "id": 1476,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordsInFile reads a file and returns the total count of words.\nfunc CountWordsInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\t\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\t\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\t\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\t\n\treturn wordCount, nil\n}\n```",
    "summary": "The function CountWordsInFile reads a file and counts the total number of words in it."
  },
  {
    "id": 1477,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specific word in a text file and returns the total count or an error."
  },
  {
    "id": 1478,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 1479,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tword = strings.ToLower(word)\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := strings.ToLower(scanner.Text())\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specific word in a file, ignoring case sensitivity."
  },
  {
    "id": 1480,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordsInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\twordCount := 0\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanLines)\n\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\twords := strings.Fields(line)\n\t\twordCount += len(words)\n\t}\n\n\treturn wordCount, scanner.Err()\n}",
    "summary": "Counts the number of words in a specified file by reading and processing each line."
  },
  {
    "id": 1481,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line-by-line and returns its contents as a slice of strings."
  },
  {
    "id": 1482,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordOccurrences reads a text file and counts the occurrences of a specified word.\nfunc CountWordOccurrences(filePath string, targetWord string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\twordCount := 0\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), targetWord) {\n\t\t\twordCount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Counts the occurrences of a specified word in a given text file, ignoring case."
  },
  {
    "id": 1483,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// ReplaceWordInFile reads a file line by line, replaces occurrences of a word with another,\n// and writes the modified content back to the same file.\nfunc ReplaceWordInFile(filePath, oldWord, newWord string) error {\n\tinputFile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer inputFile.Close()\n\n\toutputFile, err := os.Create(filePath + \".tmp\")\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer outputFile.Close()\n\n\tscanner := bufio.NewScanner(inputFile)\n\twriter := bufio.NewWriter(outputFile)\n\n\tfor scanner.Scan() {\n\t\tline := strings.ReplaceAll(scanner.Text(), oldWord, newWord)\n\t\tif _, err := writer.WriteString(line + \"\\n\"); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\twriter.Flush()\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn err\n\t}\n\n\tif err := os.Rename(outputFile.Name(), filePath); err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n```",
    "summary": "This function replaces all occurrences of a specified word in a file and writes the changes back to the file."
  },
  {
    "id": 1484,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return nil, err\n    }\n    defer file.Close()\n\n    var lines []string\n    scanner := bufio.NewScanner(file)\n    for scanner.Scan() {\n        lines = append(lines, scanner.Text())\n    }\n\n    if err := scanner.Err(); err != nil {\n        return nil, err\n    }\n\n    return lines, nil\n}\n```",
    "summary": "Reads a file line-by-line and returns its content as a slice of strings."
  },
  {
    "id": 1485,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    scanner.Split(bufio.ScanWords)\n\n    count := 0\n    for scanner.Scan() {\n        if strings.EqualFold(scanner.Text(), word) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specified word in a given text file, ignoring case differences."
  },
  {
    "id": 1486,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "CountWordOccurrences reads a file line by line and returns the number of occurrences of a specified word."
  },
  {
    "id": 1487,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns the lines as a slice of strings."
  },
  {
    "id": 1488,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns the lines as a slice of strings, handling any errors encountered."
  },
  {
    "id": 1489,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLineByLine(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns the lines as a slice of strings."
  },
  {
    "id": 1490,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordsInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Counts the number of words in a specified file and returns the total count or an error if any occurs."
  },
  {
    "id": 1491,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 1492,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 1493,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 1494,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    lineCount := 0\n    for scanner.Scan() {\n        lineCount++\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n    return lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if reading fails."
  },
  {
    "id": 1495,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\nfunc ReadLinesFromFile(filePath string) ([]string, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return nil, err\n    }\n    defer file.Close()\n\n    var lines []string\n    scanner := bufio.NewScanner(file)\n    for scanner.Scan() {\n        lines = append(lines, scanner.Text())\n    }\n\n    if err := scanner.Err(); err != nil {\n        return nil, err\n    }\n\n    return lines, nil\n}\n```",
    "summary": "This function reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 1496,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\twordCount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlineText := scanner.Text()\n\t\twordCount += strings.Count(lineText, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "This function counts the occurrences of a specified word in a file and returns the count along with any error encountered."
  },
  {
    "id": 1497,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountFileLines(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a file specified by the given file path."
  },
  {
    "id": 1498,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesContainingWord reads a file and counts the number of lines containing the specified word.\nfunc CountLinesContainingWord(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcounter := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcounter++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn counter, nil\n}\n```",
    "summary": "Counts the number of lines containing a specified word in a given file."
  },
  {
    "id": 1499,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// CopyFile copies the contents of the source file to the destination file.\nfunc CopyFile(src, dst string) error {\n\tsrcFile, err := os.Open(src)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to open source file: %w\", err)\n\t}\n\tdefer srcFile.Close()\n\n\tdstFile, err := os.Create(dst)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to create destination file: %w\", err)\n\t}\n\tdefer dstFile.Close()\n\n\tscanner := bufio.NewScanner(srcFile)\n\twriter := bufio.NewWriter(dstFile)\n\n\tfor scanner.Scan() {\n\t\t_, err := writer.WriteString(scanner.Text() + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"failed to write to destination file: %w\", err)\n\t\t}\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn fmt.Errorf(\"error reading source file: %w\", err)\n\t}\n\n\tif err := writer.Flush(); err != nil {\n\t\treturn fmt.Errorf(\"failed to flush writer: %w\", err)\n\t}\n\n\treturn nil\n}\n```",
    "summary": "The `CopyFile` function reads the contents of a source file and writes them to a destination file."
  },
  {
    "id": 1500,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a given file and returns the count or an error if one occurs."
  },
  {
    "id": 1501,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 1502,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and counts how many lines start with the given prefix.\nfunc CountLinesWithPrefix(filePath string, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\treturn count, scanner.Err()\n}\n```",
    "summary": "CountLinesWithPrefix reads a file and counts the number of lines that start with a specified prefix."
  },
  {
    "id": 1503,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithKeyword reads a file and counts the number of lines containing a specific keyword.\nfunc CountLinesWithKeyword(filePath string, keyword string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), keyword) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function reads a file and returns the count of lines that contain a specified keyword."
  },
  {
    "id": 1504,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if encountered."
  },
  {
    "id": 1505,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in the specified file and returns the count, handling any errors during the process."
  },
  {
    "id": 1506,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "The function `CountLinesInFile` opens a specified file and returns the number of lines it contains, handling any errors encountered during the process."
  },
  {
    "id": 1507,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\n// CountLines reads a file and returns the number of lines it contains.\nfunc CountLines(filePath string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    lineCount := 0\n    for scanner.Scan() {\n        lineCount++\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n    return lineCount, nil\n}\n```",
    "summary": "The `CountLines` function reads a file and returns the number of lines it contains."
  },
  {
    "id": 1508,
    "code": "package main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return nil, err\n    }\n    defer file.Close()\n\n    var lines []string\n    scanner := bufio.NewScanner(file)\n    for scanner.Scan() {\n        lines = append(lines, scanner.Text())\n    }\n\n    if err := scanner.Err(); err != nil {\n        return nil, err\n    }\n\n    return lines, nil\n}",
    "summary": "The function reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 1509,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn lineCount, nil\n}\n```",
    "summary": "CountLinesInFile reads a file and returns the number of lines it contains, handling any errors encountered."
  },
  {
    "id": 1510,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file, returning the count or an error if one occurs."
  },
  {
    "id": 1511,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// CountLinesInFile reads a file from the given path and returns the number of lines it contains.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a file specified by filePath and returns the count."
  },
  {
    "id": 1512,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesWithPrefix(filePath string, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that start with a specified prefix."
  },
  {
    "id": 1513,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\n// FindWordInFile reads a file line by line and returns true if the specified word is found.\nfunc FindWordInFile(filename string, word string) (bool, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn false, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\treturn true, nil\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn false, err\n\t}\n\n\treturn false, nil\n}\n```",
    "summary": "The function FindWordInFile checks if a specified word exists in a file by reading it line by line."
  },
  {
    "id": 1514,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file and returns its lines as a slice of strings.\nfunc ReadFileLines(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file and returns its contents as a slice of strings, with each element representing a line."
  },
  {
    "id": 1515,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// CountLinesInFile reads a file and returns the number of lines in it.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}",
    "summary": "The function CountLinesInFile reads a file and returns the total number of lines it contains."
  },
  {
    "id": 1516,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 1517,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn lineCount, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the total count or an error if one occurs."
  },
  {
    "id": 1518,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc countLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts the number of lines in a given file and returns the count along with any error encountered."
  },
  {
    "id": 1519,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 1520,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn lines, nil\n}\n```",
    "summary": "This function reads all lines from a specified file and returns them as a slice of strings, handling any errors encountered during the process."
  },
  {
    "id": 1521,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}",
    "summary": "The function CountWordOccurrences reads a file and counts the occurrences of a specified word within it, returning the count or an error if encountered."
  },
  {
    "id": 1522,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn lineCount, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 1523,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    count := 0\n    for scanner.Scan() {\n        line := scanner.Text()\n        words := strings.Fields(line)\n        for _, w := range words {\n            if w == word {\n                count++\n            }\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return count, nil\n}\n```",
    "summary": "Counts occurrences of a specific word in a given file."
  },
  {
    "id": 1524,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line-by-line and returns a slice of strings, each representing a line from the file."
  },
  {
    "id": 1525,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\n// ReadFileAndCountWords reads a file and returns the total word count.\nfunc ReadFileAndCountWords(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\tword := scanner.Text()\n\t\tif len(strings.TrimSpace(word)) > 0 {\n\t\t\twordCount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Reads a file and returns the total count of words contained in it."
  },
  {
    "id": 1526,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc WriteLinesToFile(filename string, lines []string) error {\n\tfile, err := os.Create(filename)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\twriter := bufio.NewWriter(file)\n\tfor _, line := range lines {\n\t\t_, err := writer.WriteString(line + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn writer.Flush()\n}\n```",
    "summary": "Writes an array of strings to a specified file, each on a new line, using buffered writing."
  },
  {
    "id": 1527,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a file specified by the given file path."
  },
  {
    "id": 1528,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 1529,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc countLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}",
    "summary": "This function counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 1530,
    "code": "```go\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return nil, err\n    }\n    defer file.Close()\n\n    var lines []string\n    scanner := bufio.NewScanner(file)\n    for scanner.Scan() {\n        lines = append(lines, scanner.Text())\n    }\n\n    if err := scanner.Err(); err != nil {\n        return nil, err\n    }\n\n    return lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns the lines as a slice of strings."
  },
  {
    "id": 1531,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file line by line and returns the lines as a slice of strings.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns each line as an element in a slice of strings."
  },
  {
    "id": 1532,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\n// ReadFileAndCountWords reads a file and returns the total number of words.\nfunc ReadFileAndCountWords(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\twordCount := 0\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Reads a file and returns the total number of words by scanning the file word by word."
  },
  {
    "id": 1533,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// CountLinesInFile opens a file and returns the number of lines it contains.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts and returns the number of lines in a specified file."
  },
  {
    "id": 1534,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if one occurs."
  },
  {
    "id": 1535,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\n// ReadLines reads a file and returns its content as a slice of strings, one for each line.\nfunc ReadLines(filePath string) ([]string, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return nil, err\n    }\n    defer file.Close()\n\n    var lines []string\n    scanner := bufio.NewScanner(file)\n    for scanner.Scan() {\n        lines = append(lines, scanner.Text())\n    }\n\n    if err := scanner.Err(); err != nil {\n        return nil, err\n    }\n    return lines, nil\n}\n```",
    "summary": "Reads a file and returns its content as a slice of strings, with each string representing a line."
  },
  {
    "id": 1536,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\n// CountLinesWithPrefix reads a file and returns the number of lines that start with the specified prefix.\nfunc CountLinesWithPrefix(filePath, prefix string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    count := 0\n\n    for scanner.Scan() {\n        if strings.HasPrefix(scanner.Text(), prefix) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return count, nil\n}\n```",
    "summary": "Counts and returns the number of lines in a file that start with a given prefix."
  },
  {
    "id": 1537,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filename, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specified word in a file and returns the count or an error if the file cannot be read."
  },
  {
    "id": 1538,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and counts the number of lines that start with a given prefix.\nfunc CountLinesWithPrefix(filePath string, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that start with a specified prefix."
  },
  {
    "id": 1539,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// ReadFileLinesToUpper reads a file and returns its lines converted to uppercase.\nfunc ReadFileLinesToUpper(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, strings.ToUpper(scanner.Text()))\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "The function reads a file and returns its lines converted to uppercase."
  },
  {
    "id": 1540,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn lineCount, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any potential error encountered."
  },
  {
    "id": 1541,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\t\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 1542,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 1543,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLines(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}",
    "summary": "Counts the number of lines in a file specified by the file path and returns the count."
  },
  {
    "id": 1544,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file and returns them as a slice of strings, handling errors appropriately."
  },
  {
    "id": 1545,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc WriteLinesToFile(lines []string, filePath string) error {\n\tfile, err := os.Create(filePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\twriter := bufio.NewWriter(file)\n\tfor _, line := range lines {\n\t\t_, err := writer.WriteString(line + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn writer.Flush()\n}\n```",
    "summary": "Writes a slice of strings to a specified file, each string as a new line."
  },
  {
    "id": 1546,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "CountLinesInFile reads a file and returns the number of lines it contains, or an error if the file cannot be read."
  },
  {
    "id": 1547,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts the number of lines in a specified file and returns the count or an error if the file cannot be read."
  },
  {
    "id": 1548,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadLinesFromFile(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 1549,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and counts the number of lines that start with a given prefix.\nfunc CountLinesWithPrefix(filePath, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tif strings.HasPrefix(line, prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function reads a file and counts the number of lines that start with a specified prefix."
  },
  {
    "id": 1550,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line returning a slice of strings, each representing a line from the file."
  },
  {
    "id": 1551,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc countLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts the number of lines in a given file and returns the total count or an error if encountered."
  },
  {
    "id": 1552,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn lineCount, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "CountLinesInFile opens a file, counts the number of lines, and returns the total count or an error if encountered."
  },
  {
    "id": 1553,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordsInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "This function counts the number of words in a specified file and returns the count or an error."
  },
  {
    "id": 1554,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesContainingWord reads a file and counts the number of lines containing the specified word.\nfunc CountLinesContainingWord(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 1555,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\n// ReadFileLines reads a file and returns its contents as a slice of strings,\n// where each string is a line from the file.\nfunc ReadFileLines(filePath string) ([]string, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return nil, err\n    }\n    defer file.Close()\n\n    var lines []string\n    scanner := bufio.NewScanner(file)\n    for scanner.Scan() {\n        lines = append(lines, scanner.Text())\n    }\n    if err := scanner.Err(); err != nil {\n        return nil, err\n    }\n\n    return lines, nil\n}\n```",
    "summary": "The function `ReadFileLines` reads a file and returns its contents as a slice of strings, with each string representing a line from the file."
  },
  {
    "id": 1556,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filename, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts and returns the number of occurrences of a specified word in a given file."
  },
  {
    "id": 1557,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if one occurs."
  },
  {
    "id": 1558,
    "code": "```go\nfunc ReadFileLines(filePath string) ([]string, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return nil, err\n    }\n    defer file.Close()\n\n    var lines []string\n    scanner := bufio.NewScanner(file)\n    for scanner.Scan() {\n        lines = append(lines, scanner.Text())\n    }\n\n    if err := scanner.Err(); err != nil {\n        return nil, err\n    }\n\n    return lines, nil\n}\n```",
    "summary": "Reads and returns all lines from a file as a slice of strings, handling errors appropriately."
  },
  {
    "id": 1559,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file and returns its lines as a slice of strings.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn lines, nil\n}\n```",
    "summary": "ReadFileLines reads all lines from a file and returns them as a slice of strings."
  },
  {
    "id": 1560,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordFrequency reads a text file and returns a map with the frequency of each word.\nfunc CountWordFrequency(filePath string) (map[string]int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\twordCount := make(map[string]int)\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\tword = strings.Trim(word, \".,!?;:\\\"()[]{}<>\")\n\t\twordCount[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "The function `CountWordFrequency` reads a text file and returns a map with the frequency of each word, ignoring punctuation and case."
  },
  {
    "id": 1561,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and returns the number of lines that start with the given prefix.\nfunc CountLinesWithPrefix(filePath string, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function reads a file and counts the number of lines that begin with a specified prefix."
  },
  {
    "id": 1562,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, fmt.Errorf(\"failed to open file: %w\", err)\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, fmt.Errorf(\"error reading file: %w\", err)\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a file specified by its path, returning the count or an error."
  },
  {
    "id": 1563,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specified word in a text file, ignoring case."
  },
  {
    "id": 1564,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// CountLinesInFile reads a file and returns the number of lines it contains.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tlineCount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the total count."
  },
  {
    "id": 1565,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadLines reads a file and returns its content as a slice of strings, each representing a line.\nfunc ReadLines(filePath string) ([]string, error) {\n\tvar lines []string\n\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file and returns its content as a slice of strings, with each element representing a line."
  },
  {
    "id": 1566,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file at the given path and returns its lines as a slice of strings.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n\nfunc main() {\n\tlines, err := ReadFileLines(\"example.txt\")\n\tif err != nil {\n\t\tfmt.Println(\"Error reading file:\", err)\n\t\treturn\n\t}\n\tfor _, line := range lines {\n\t\tfmt.Println(line)\n\t}\n}\n```",
    "summary": "This function reads a file line by line from a given path and returns the content as a slice of strings."
  },
  {
    "id": 1567,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, fmt.Errorf(\"failed to open file: %v\", err)\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, fmt.Errorf(\"error reading file: %v\", err)\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts and returns the number of lines in a specified file, handling potential file access and reading errors."
  },
  {
    "id": 1568,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesWithPrefix(filename, prefix string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that start with a specified prefix."
  },
  {
    "id": 1569,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, targetWord string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    scanner.Split(bufio.ScanLines)\n\n    count := 0\n    for scanner.Scan() {\n        line := scanner.Text()\n        words := strings.Fields(line)\n        for _, word := range words {\n            if word == targetWord {\n                count++\n            }\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specified word in a text file."
  },
  {
    "id": 1570,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingWord(filename, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 1571,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// CountLinesInFile returns the number of lines in the specified file.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "The function `CountLinesInFile` reads a file and returns the total number of lines it contains."
  },
  {
    "id": 1572,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a given file and returns the count along with any error encountered."
  },
  {
    "id": 1573,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingWord(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This Go function counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 1574,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any potential error."
  },
  {
    "id": 1575,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithSubstring reads a file and counts the number of lines containing a specific substring.\nfunc CountLinesWithSubstring(filePath, substring string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), substring) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the number of lines in a file that contain a specified substring."
  },
  {
    "id": 1576,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a given file and returns the count or an error if encountered."
  },
  {
    "id": 1577,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordsInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\tif strings.TrimSpace(scanner.Text()) != \"\" {\n\t\t\twordCount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "This function counts the number of words in a given file and returns the count, handling any potential errors during file processing."
  },
  {
    "id": 1578,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// CountLinesInFile reads a file and returns the number of lines it contains.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "The function `CountLinesInFile` reads a file and returns the total count of lines it contains."
  },
  {
    "id": 1579,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\n// ReadAndCountWords reads a file and returns the total number of words in it.\nfunc ReadAndCountWords(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn wordCount, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "The function `ReadAndCountWords` opens a file, reads it word by word, and returns the total number of words present in the file."
  },
  {
    "id": 1580,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\twords := strings.Fields(line)\n\t\tfor _, w := range words {\n\t\t\tif w == word {\n\t\t\t\tcount++\n\t\t\t}\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specific word in a given text file."
  },
  {
    "id": 1581,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\n// ReadLinesContaining reads a file and returns lines containing the specified substring.\nfunc ReadLinesContaining(filename, substring string) ([]string, error) {\n    file, err := os.Open(filename)\n    if err != nil {\n        return nil, err\n    }\n    defer file.Close()\n\n    var lines []string\n    scanner := bufio.NewScanner(file)\n    for scanner.Scan() {\n        line := scanner.Text()\n        if strings.Contains(line, substring) {\n            lines = append(lines, line)\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return nil, err\n    }\n    return lines, nil\n}\n```",
    "summary": "Reads a file and returns lines that contain a specified substring."
  },
  {
    "id": 1582,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadLines reads a text file line by line and returns a slice of strings.\nfunc ReadLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn lines, nil\n}",
    "summary": "ReadLines reads a text file line by line and returns its content as a slice of strings."
  },
  {
    "id": 1583,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingWord(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 1584,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadFirstNLines reads the first n lines from a file specified by filepath.\nfunc ReadFirstNLines(filepath string, n int) ([]string, error) {\n\tfile, err := os.Open(filepath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t\tif len(lines) >= n {\n\t\t\tbreak\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads and returns the first n lines from a specified file, handling potential errors."
  },
  {
    "id": 1585,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLineByLine(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns its contents as a slice of strings."
  },
  {
    "id": 1586,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\n// WordCountInFile reads a file and returns a map with the count of each word.\nfunc WordCountInFile(filename string) (map[string]int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\twordCount := make(map[string]int)\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCount[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "The function `WordCountInFile` reads a file and returns a map containing the count of each word, ignoring case sensitivity."
  },
  {
    "id": 1587,
    "code": "```go\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"os\"\n)\n\nfunc CopyFileLineByLine(src, dst string) error {\n    inFile, err := os.Open(src)\n    if err != nil {\n        return fmt.Errorf(\"could not open source file: %w\", err)\n    }\n    defer inFile.Close()\n\n    outFile, err := os.Create(dst)\n    if err != nil {\n        return fmt.Errorf(\"could not create destination file: %w\", err)\n    }\n    defer outFile.Close()\n\n    scanner := bufio.NewScanner(inFile)\n    writer := bufio.NewWriter(outFile)\n    defer writer.Flush()\n\n    for scanner.Scan() {\n        if _, err := writer.WriteString(scanner.Text() + \"\\n\"); err != nil {\n            return fmt.Errorf(\"could not write to destination file: %w\", err)\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return fmt.Errorf(\"error reading source file: %w\", err)\n    }\n\n    return nil\n}\n```",
    "summary": "This function copies the contents of a source file to a destination file line by line using buffered I/O."
  },
  {
    "id": 1588,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLineByLine(filename string) error {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tfmt.Println(scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}",
    "summary": "This function reads a file line by line and prints each line to the standard output."
  },
  {
    "id": 1589,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReverseFileLines reads a file and writes its lines in reverse order to a new file.\nfunc ReverseFileLines(inputFilePath, outputFilePath string) error {\n\tinputFile, err := os.Open(inputFilePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer inputFile.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(inputFile)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn err\n\t}\n\n\toutputFile, err := os.Create(outputFilePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer outputFile.Close()\n\n\twriter := bufio.NewWriter(outputFile)\n\tfor i := len(lines) - 1; i >= 0; i-- {\n\t\t_, err := writer.WriteString(lines[i] + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn writer.Flush()\n}\n```",
    "summary": "This function reads lines from an input file and writes them in reverse order to an output file."
  },
  {
    "id": 1590,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a file specified by its file path and returns the count or an error."
  },
  {
    "id": 1591,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingSubstring(filePath string, substring string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), substring) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specified substring."
  },
  {
    "id": 1592,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordsInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Counts and returns the number of words in a specified file, handling any errors during the file reading process."
  },
  {
    "id": 1593,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingSubstring(filePath string, substring string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), substring) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specified substring."
  },
  {
    "id": 1594,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if one occurs."
  },
  {
    "id": 1595,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordOccurrences reads a file and returns a map of word occurrences.\nfunc CountWordOccurrences(filePath string) (map[string]int, error) {\n\twordCount := make(map[string]int)\n\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCount[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Counts the occurrences of each word in a file and returns the result as a map."
  },
  {
    "id": 1596,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc ReadLinesContainingSubstring(filePath, substring string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tif strings.Contains(line, substring) {\n\t\t\tlines = append(lines, line)\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn lines, nil\n}\n```",
    "summary": "Reads and returns lines from a file that contain the specified substring."
  },
  {
    "id": 1597,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc WriteLinesToFile(lines []string, filePath string) error {\n\tfile, err := os.Create(filePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\twriter := bufio.NewWriter(file)\n\tfor _, line := range lines {\n\t\t_, err := writer.WriteString(line + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn writer.Flush()\n}\n```",
    "summary": "The function writes a slice of strings to a specified file, each on a new line."
  },
  {
    "id": 1598,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// CountLines reads a file and returns the number of lines it contains.\nfunc CountLines(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "The `CountLines` function reads a file and returns the number of lines it contains."
  },
  {
    "id": 1599,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// CountLinesInFile counts the number of lines in the specified file.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "CountLinesInFile opens a file and returns the number of lines it contains."
  },
  {
    "id": 1600,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "This function reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 1601,
    "code": "```go\npackage main\n\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    scanner.Split(bufio.ScanLines)\n\n    count := 0\n    for scanner.Scan() {\n        line := scanner.Text()\n        words := strings.Fields(line)\n        for _, w := range words {\n            if w == word {\n                count++\n            }\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return count, nil\n}\n```",
    "summary": "The function `CountWordOccurrences` reads a file and counts how many times a specified word appears in it."
  },
  {
    "id": 1602,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadFileLines reads all lines from a specified file and returns them as a slice of strings.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 1603,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesWithWord(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 1604,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesWithWord(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The `CountLinesWithWord` function counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 1605,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file from the given filePath and returns its content as a slice of strings, each representing a line in the file.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file and returns its content as a slice of strings, with each element representing a line in the file."
  },
  {
    "id": 1606,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and returns the number of lines that start with the specified prefix.\nfunc CountLinesWithPrefix(filename, prefix string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tif strings.HasPrefix(line, prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "CountLinesWithPrefix reads a file and returns the number of lines that start with a specified prefix."
  },
  {
    "id": 1607,
    "code": "```go\npackage main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"os\"\n)\n\n// ReadLines reads all lines from a file specified by filename\n// and returns them as a slice of strings.\nfunc ReadLines(filename string) ([]string, error) {\n    file, err := os.Open(filename)\n    if err != nil {\n        return nil, err\n    }\n    defer file.Close()\n\n    var lines []string\n    scanner := bufio.NewScanner(file)\n    for scanner.Scan() {\n        lines = append(lines, scanner.Text())\n    }\n    if err := scanner.Err(); err != nil {\n        return nil, err\n    }\n    \n    return lines, nil\n}\n```",
    "summary": "The `ReadLines` function reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 1608,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 1609,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filename string, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specific word in a given file, ignoring case sensitivity."
  },
  {
    "id": 1610,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "CountLinesInFile opens a file, counts the number of lines, and returns the count or an error."
  },
  {
    "id": 1611,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadFileLines reads all lines from a file specified by the filePath and returns them as a slice of strings.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}",
    "summary": "The `ReadFileLines` function reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 1612,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingText(filePath, text string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), text) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specified text string."
  },
  {
    "id": 1613,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadLines reads a file and returns its content as a slice of strings, one for each line.\nfunc ReadLines(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file and returns its content as a slice of strings, with each element representing a line in the file."
  },
  {
    "id": 1614,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesWithPrefix(filePath, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function counts and returns the number of lines in a file that start with a specified prefix."
  },
  {
    "id": 1615,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadFileLines reads a text file and returns its content as a slice of strings, one for each line.\nfunc ReadFileLines(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn lines, nil\n}\n```",
    "summary": "ReadFileLines reads a text file and returns its content as a slice of strings, with each element representing a line."
  },
  {
    "id": 1616,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error."
  },
  {
    "id": 1617,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileByLine(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns the content as a slice of strings."
  },
  {
    "id": 1618,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// CountLinesInFile counts the number of lines in the specified file.\nfunc CountLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}",
    "summary": "CountLinesInFile opens a file and returns the number of lines contained within it, or an error if one occurs."
  },
  {
    "id": 1619,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileAndCountLines(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Reads a file and returns the number of lines it contains, handling errors during file operations."
  },
  {
    "id": 1620,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLines(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "The function `CountLines` reads a file and returns the total number of lines it contains, handling any potential errors during the process."
  },
  {
    "id": 1621,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, targetWord string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\twordCount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\twords := strings.Fields(line)\n\t\tfor _, word := range words {\n\t\t\tif word == targetWord {\n\t\t\t\twordCount++\n\t\t\t}\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "This function counts and returns the number of occurrences of a specified word in a file."
  },
  {
    "id": 1622,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// CountLinesInFile reads a file from the given path and returns the number of lines.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, fmt.Errorf(\"failed to open file: %w\", err)\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, fmt.Errorf(\"error reading file: %w\", err)\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a file specified by the given path."
  },
  {
    "id": 1623,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if one occurs."
  },
  {
    "id": 1624,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a given file and returns the count along with any error encountered."
  },
  {
    "id": 1625,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts the number of lines in a specified file and returns the count or an error if encountered."
  },
  {
    "id": 1626,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file line by line and returns a slice of strings.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns its content as a slice of strings."
  },
  {
    "id": 1627,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specific word in a given file."
  },
  {
    "id": 1628,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the total count or an error."
  },
  {
    "id": 1629,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file specified by filePath and returns them as a slice of strings."
  },
  {
    "id": 1630,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filename, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function `CountWordOccurrences` reads a file and counts the occurrences of a specified word, returning the count or an error if one occurs."
  },
  {
    "id": 1631,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLineByLine(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}",
    "summary": "This function reads a file line by line and returns a slice of strings, each representing a line from the file, or an error if one occurs."
  },
  {
    "id": 1632,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc WriteLinesToFile(filePath string, lines []string) error {\n\tfile, err := os.Create(filePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\twriter := bufio.NewWriter(file)\n\tfor _, line := range lines {\n\t\t_, err := writer.WriteString(line + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn writer.Flush()\n}\n```",
    "summary": "Writes multiple lines to a file specified by filePath, creating the file if it doesn't exist."
  },
  {
    "id": 1633,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "This function reads a file line by line and returns its contents as a slice of strings."
  },
  {
    "id": 1634,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    count := 0\n    for scanner.Scan() {\n        line := scanner.Text()\n        words := strings.Fields(line)\n        for _, w := range words {\n            if w == word {\n                count++\n            }\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return count, nil\n}\n```",
    "summary": "This function counts how many times a specified word appears in a given text file."
  },
  {
    "id": 1635,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLineByLine(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns the content as a slice of strings."
  },
  {
    "id": 1636,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CopyFile(src string, dst string) error {\n\tsourceFile, err := os.Open(src)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to open source file: %v\", err)\n\t}\n\tdefer sourceFile.Close()\n\n\tdestinationFile, err := os.Create(dst)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to create destination file: %v\", err)\n\t}\n\tdefer destinationFile.Close()\n\n\tscanner := bufio.NewScanner(sourceFile)\n\twriter := bufio.NewWriter(destinationFile)\n\tfor scanner.Scan() {\n\t\tif _, err := writer.WriteString(scanner.Text() + \"\\n\"); err != nil {\n\t\t\treturn fmt.Errorf(\"failed to write to destination file: %v\", err)\n\t\t}\n\t}\n\tif err := writer.Flush(); err != nil {\n\t\treturn fmt.Errorf(\"failed to flush to destination file: %v\", err)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn fmt.Errorf(\"error reading source file: %v\", err)\n\t}\n\n\treturn nil\n}\n```",
    "summary": "This function copies the contents of a source file to a destination file line by line."
  },
  {
    "id": 1637,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn lineCount, err\n\t}\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts the number of lines in a file specified by its file path."
  },
  {
    "id": 1638,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLineByLine(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns the lines as a slice of strings."
  },
  {
    "id": 1639,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and counts the number of lines that start with a given prefix.\nfunc CountLinesWithPrefix(filePath string, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts lines in a file that start with a specified prefix."
  },
  {
    "id": 1640,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// ReadFileAndCountWords reads a file and returns the total word count.\nfunc ReadFileAndCountWords(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "This function reads a file and returns the total count of words contained within it."
  },
  {
    "id": 1641,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a file specified by the given file path."
  },
  {
    "id": 1642,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\nfunc CountWordOccurrences(filename string, word string) (int, error) {\n    file, err := os.Open(filename)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    scanner.Split(bufio.ScanWords)\n\n    count := 0\n    for scanner.Scan() {\n        if strings.EqualFold(scanner.Text(), word) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n    return count, nil\n}\n```",
    "summary": "Counts the occurrences of a specific word in a given file, ignoring case differences."
  },
  {
    "id": 1643,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any potential error encountered."
  },
  {
    "id": 1644,
    "code": "```go\nimport (\n    \"os\"\n    \"bufio\"\n    \"log\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    lineCount := 0\n\n    for scanner.Scan() {\n        lineCount++\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count."
  },
  {
    "id": 1645,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    scanner.Split(bufio.ScanWords)\n\n    count := 0\n    for scanner.Scan() {\n        if strings.EqualFold(scanner.Text(), word) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specific word in a file, ignoring case differences."
  },
  {
    "id": 1646,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\nfunc CountLinesWithSubstring(filePath, substring string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    count := 0\n    for scanner.Scan() {\n        if strings.Contains(scanner.Text(), substring) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n    return count, nil\n}\n```",
    "summary": "This function counts the number of lines in a file that contain a specified substring."
  },
  {
    "id": 1647,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadLines reads all lines from a given file and returns them as a slice of strings.\nfunc ReadLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 1648,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a file specified by the file path."
  },
  {
    "id": 1649,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file specified by `filePath` and returns them as a slice of strings."
  },
  {
    "id": 1650,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count."
  },
  {
    "id": 1651,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\twords := strings.Fields(line)\n\t\tfor _, w := range words {\n\t\t\tif w == word {\n\t\t\t\tcount++\n\t\t\t}\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n```",
    "summary": "The function `CountWordOccurrences` counts the occurrences of a specific word in a given file."
  },
  {
    "id": 1652,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithWord reads a file and returns the count of lines containing the specified word.\nfunc CountLinesWithWord(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 1653,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc ReadFileLinesToUpper(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, strings.ToUpper(scanner.Text()))\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "This function reads a file line by line, converts each line to uppercase, and returns a slice of these uppercase strings."
  },
  {
    "id": 1654,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    scanner.Split(bufio.ScanWords)\n\n    count := 0\n    for scanner.Scan() {\n        if strings.EqualFold(scanner.Text(), word) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n    return count, nil\n}\n```",
    "summary": "Counts the occurrences of a specified word in a file, ignoring case sensitivity."
  },
  {
    "id": 1655,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordOccurrences reads a file line by line and counts occurrences of a specified word.\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specified word in a file by reading it line by line."
  },
  {
    "id": 1656,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 1657,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordsInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "The function `CountWordsInFile` counts the number of words in a specified file and returns the count or an error if one occurs."
  },
  {
    "id": 1658,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"could not open file: %v\", err)\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, fmt.Errorf(\"error reading file: %v\", err)\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 1659,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileAndPrintLines(filePath string) error {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tfmt.Println(scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n```",
    "summary": "This function reads a file line-by-line and prints each line to the standard output."
  },
  {
    "id": 1660,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\n// ReadFileLines reads a file from the given path and returns its contents as a slice of strings, where each element is a line.\nfunc ReadFileLines(filePath string) ([]string, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return nil, err\n    }\n    defer file.Close()\n\n    var lines []string\n    scanner := bufio.NewScanner(file)\n    for scanner.Scan() {\n        lines = append(lines, scanner.Text())\n    }\n\n    if err := scanner.Err(); err != nil {\n        return nil, err\n    }\n\n    return lines, nil\n}\n```",
    "summary": "ReadFileLines reads a file from a specified path and returns its contents as a slice of strings, where each element represents a line."
  },
  {
    "id": 1661,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\t\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\t\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\t\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specified word in a file, returning the total count or an error."
  },
  {
    "id": 1662,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return nil, err\n    }\n    defer file.Close()\n\n    var lines []string\n    scanner := bufio.NewScanner(file)\n    for scanner.Scan() {\n        lines = append(lines, scanner.Text())\n    }\n\n    if err := scanner.Err(); err != nil {\n        return nil, err\n    }\n\n    return lines, nil\n}\n```",
    "summary": "Reads all lines from a file specified by its path and returns them as a slice of strings."
  },
  {
    "id": 1663,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\n// CountWordsInFile reads a file and returns the total number of words.\nfunc CountWordsInFile(filePath string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    scanner.Split(bufio.ScanWords)\n\n    wordCount := 0\n    for scanner.Scan() {\n        wordCount++\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return wordCount, nil\n}\n```",
    "summary": "The function `CountWordsInFile` reads a file and returns the total count of words within it."
  },
  {
    "id": 1664,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and returns the number of lines that start with a given prefix.\nfunc CountLinesWithPrefix(filePath, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the lines in a file that start with a specified prefix."
  },
  {
    "id": 1665,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CopyFile(src, dst string) error {\n\tsourceFile, err := os.Open(src)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer sourceFile.Close()\n\n\tdestFile, err := os.Create(dst)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer destFile.Close()\n\n\treader := bufio.NewReader(sourceFile)\n\twriter := bufio.NewWriter(destFile)\n\t_, err = reader.WriteTo(writer)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn writer.Flush()\n}\n```",
    "summary": "Copies the contents of a source file to a destination file using buffered I/O."
  },
  {
    "id": 1666,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// CountLines counts the number of lines in a given file.\nfunc CountLines(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 1667,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesWithPrefix(filePath, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\treturn count, scanner.Err()\n}\n```",
    "summary": "Counts the number of lines in a file that start with a specified prefix."
  },
  {
    "id": 1668,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if one occurs."
  },
  {
    "id": 1669,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\twordCount := 0\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanLines)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\twordCount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "This function counts the occurrences of a specific word in a given text file."
  },
  {
    "id": 1670,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file line by line and returns a slice of strings.\nfunc ReadFileLines(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns its contents as a slice of strings."
  },
  {
    "id": 1671,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "CountLinesInFile reads a file and returns the total number of lines it contains."
  },
  {
    "id": 1672,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a file specified by `filePath` and returns the count or an error if encountered."
  },
  {
    "id": 1673,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from the specified file and returns them as a slice of strings."
  },
  {
    "id": 1674,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "The function `CountLinesInFile` opens a file, counts the number of lines, and returns the count along with any error encountered."
  },
  {
    "id": 1675,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and counts the number of lines that start with a given prefix.\nfunc CountLinesWithPrefix(filePath, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tif strings.HasPrefix(line, prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function reads a file and counts the number of lines that start with a specified prefix."
  },
  {
    "id": 1676,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// CountLinesInFile opens a file, reads its contents line by line, and returns the total number of lines.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a file by reading it line by line and returns the total count."
  },
  {
    "id": 1677,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrencesInFile(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\twordCount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := strings.ToLower(scanner.Text())\n\t\twordCount += strings.Count(line, strings.ToLower(word))\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Counts the occurrences of a specified word in a file, ignoring case sensitivity."
  },
  {
    "id": 1678,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadLines reads all the lines from a file and returns them as a slice of strings.\nfunc ReadLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "ReadLines opens a file, reads all its lines into a slice of strings, and returns it."
  },
  {
    "id": 1679,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specified word in a text file."
  },
  {
    "id": 1680,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\n// CountLines reads a file and returns the number of lines it contains.\nfunc CountLines(filePath string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    lineCount := 0\n    for scanner.Scan() {\n        lineCount++\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return lineCount, nil\n}\n```",
    "summary": "The function `CountLines` reads a file and returns the total number of lines it contains."
  },
  {
    "id": 1681,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// FilterLines reads a file and writes lines containing the specified keyword to a new file.\nfunc FilterLines(inputFile, outputFile, keyword string) error {\n\tinFile, err := os.Open(inputFile)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer inFile.Close()\n\n\toutFile, err := os.Create(outputFile)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer outFile.Close()\n\n\tscanner := bufio.NewScanner(inFile)\n\twriter := bufio.NewWriter(outFile)\n\tdefer writer.Flush()\n\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tif strings.Contains(line, keyword) {\n\t\t\t_, err := writer.WriteString(line + \"\\n\")\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n```",
    "summary": "The function reads a file and writes lines containing a specified keyword to a new file."
  },
  {
    "id": 1682,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLineByLine opens a file at the given path and reads its contents line by line,\n// printing each line to the standard output.\nfunc ReadFileLineByLine(filePath string) error {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tfmt.Println(scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}",
    "summary": "This function reads a file line by line and prints each line to the standard output."
  },
  {
    "id": 1683,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc countLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error."
  },
  {
    "id": 1684,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\twordCount := 0\n\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\twords := strings.Fields(line)\n\t\tfor _, w := range words {\n\t\t\tif strings.EqualFold(w, word) {\n\t\t\t\twordCount++\n\t\t\t}\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}",
    "summary": "This function counts the occurrences of a specified word in a file, ignoring case."
  },
  {
    "id": 1685,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesWithWord(filename, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 1686,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesContainingWord reads a file and returns the number of lines containing a specific word.\nfunc CountLinesContainingWord(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function reads a file and counts how many lines contain a specified word."
  },
  {
    "id": 1687,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error."
  },
  {
    "id": 1688,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and returns the number of lines that start with the specified prefix.\nfunc CountLinesWithPrefix(filename, prefix string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n```",
    "summary": "The function `CountLinesWithPrefix` reads a file and counts the number of lines that begin with a given prefix."
  },
  {
    "id": 1689,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadLines reads a file and returns its content as a slice of strings, each representing a line.\nfunc ReadLines(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "ReadLines reads a file and returns its contents as a slice of strings, with each string representing a line."
  },
  {
    "id": 1690,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// CountLinesInFile reads a file and returns the number of lines it contains.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function reads a file and returns the total number of lines it contains."
  },
  {
    "id": 1691,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and counts the number of lines that start with the given prefix.\nfunc CountLinesWithPrefix(filePath string, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that start with a specified prefix."
  },
  {
    "id": 1692,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordsInFile(filepath string) (int, error) {\n\tfile, err := os.Open(filepath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "This function counts the number of words in a given file and returns the total count or an error if encountered."
  },
  {
    "id": 1693,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordOccurrences reads a text file and counts the occurrences of each word.\nfunc CountWordOccurrences(filePath string) (map[string]int, error) {\n\twordCount := make(map[string]int)\n\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCount[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "This function reads a text file and returns a map containing the count of each word's occurrences."
  },
  {
    "id": 1694,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithWord reads a file and returns the number of lines containing the specified word.\nfunc CountLinesWithWord(filename, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, fmt.Errorf(\"failed to open file: %w\", err)\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, fmt.Errorf(\"error reading file: %w\", err)\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function reads a file and counts the number of lines that contain a specified word."
  },
  {
    "id": 1695,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\nfunc CountLinesInFile(filename string) (int, error) {\n    file, err := os.Open(filename)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    lineCount := 0\n    for scanner.Scan() {\n        lineCount++\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a given file and returns the count or an error if unable to read the file."
  },
  {
    "id": 1696,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn lineCount, err\n\t}\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts and returns the number of lines in a specified file, handling potential errors during file access and reading."
  },
  {
    "id": 1697,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// CountLinesInFile opens a file, counts the number of lines, and returns the count.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "CountLinesInFile counts and returns the number of lines in a specified file."
  },
  {
    "id": 1698,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesWithPrefix(filePath string, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function `CountLinesWithPrefix` reads a file and counts how many lines start with a specified prefix."
  },
  {
    "id": 1699,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesContainingWord reads a file and returns the number of lines that contain a specified word.\nfunc CountLinesContainingWord(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function counts and returns the number of lines in a file that contain a specific word."
  },
  {
    "id": 1700,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadLinesFromFile(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file and returns them as a slice of strings, handling any errors encountered during the process."
  },
  {
    "id": 1701,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadFileLines reads a specified file and returns its contents as a slice of strings,\n// where each string represents a line from the file.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "ReadFileLines reads a file and returns its contents as a slice of strings, with each string representing a line from the file."
  },
  {
    "id": 1702,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tlineCount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 1703,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specified word in a given file and returns the count."
  },
  {
    "id": 1704,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordsInFile reads a file line by line and counts the total number of words.\nfunc CountWordsInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanLines)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\twords := strings.Fields(line)\n\t\twordCount += len(words)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "CountWordsInFile reads a file and returns the total number of words it contains."
  },
  {
    "id": 1705,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadLinesFromFile(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 1706,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 1707,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts and returns the number of lines in a given file specified by its file path."
  },
  {
    "id": 1708,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// ReadFileAndCountWords reads a file from the provided path and returns the total number of words in the file.\nfunc ReadFileAndCountWords(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "The function `ReadFileAndCountWords` reads a file from a given path and returns the total number of words in it."
  },
  {
    "id": 1709,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\nfunc CountLinesContainingSubstring(filePath string, substring string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    count := 0\n\n    for scanner.Scan() {\n        if strings.Contains(scanner.Text(), substring) {\n            count++\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return count, nil\n}\n```",
    "summary": "This function counts the number of lines in a file that contain a specified substring."
  },
  {
    "id": 1710,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordsInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\twordCount := 0\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn wordCount, nil\n}\n```",
    "summary": "Counts the number of words in a specified file and returns the total count."
  },
  {
    "id": 1711,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc countLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error."
  },
  {
    "id": 1712,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if encountered."
  },
  {
    "id": 1713,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}",
    "summary": "This function counts the number of lines in a file specified by its file path."
  },
  {
    "id": 1714,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// RemoveEmptyLines reads a file and returns a slice of strings containing only the non-empty lines.\nfunc RemoveEmptyLines(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := strings.TrimSpace(scanner.Text())\n\t\tif line != \"\" {\n\t\t\tlines = append(lines, line)\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "The function `RemoveEmptyLines` reads a file, removes any empty lines, and returns a slice of non-empty strings."
  },
  {
    "id": 1715,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function `CountWordOccurrences` reads a file and counts the occurrences of a specified word, ignoring case sensitivity."
  },
  {
    "id": 1716,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns the lines as a slice of strings."
  },
  {
    "id": 1717,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file specified by `filePath` and returns them as a slice of strings."
  },
  {
    "id": 1718,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filename, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := strings.ToLower(scanner.Text())\n\t\tif strings.Contains(line, strings.ToLower(word)) {\n\t\t\tcount += strings.Count(line, strings.ToLower(word))\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function reads a file and counts the occurrences of a specified word, returning the count and any error encountered."
  },
  {
    "id": 1719,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function counts the occurrences of a specific word in a file, ignoring case differences."
  },
  {
    "id": 1720,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specific word in a file, ignoring case sensitivity."
  },
  {
    "id": 1721,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, targetWord string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), targetWord) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specific word in a file, handling errors and case insensitivity."
  },
  {
    "id": 1722,
    "code": "```go\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"os\"\n)\n\n// CountLinesInFile opens a file and returns the number of lines it contains.\nfunc CountLinesInFile(filepath string) (int, error) {\n    file, err := os.Open(filepath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    lineCount := 0\n    for scanner.Scan() {\n        lineCount++\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n    return lineCount, nil\n}\n```",
    "summary": "This function counts and returns the number of lines in a specified file, handling file opening and scanning errors."
  },
  {
    "id": 1723,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordsInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\twordCount := 0\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Counts the number of words in a file specified by the given file path."
  },
  {
    "id": 1724,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specified word in a file, ignoring case sensitivity."
  },
  {
    "id": 1725,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file and returns a slice of strings, each representing a line in the file.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file and returns its contents as a slice of strings, where each string is a line from the file."
  },
  {
    "id": 1726,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line-by-line and returns the lines as a slice of strings."
  },
  {
    "id": 1727,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountLinesContainingWord(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the number of lines in a file that contain a specified word."
  },
  {
    "id": 1728,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file line by line and returns a slice of strings\n// where each string represents a line in the file.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns a slice of strings, with each string representing a line in the file."
  },
  {
    "id": 1729,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadLines reads a file and returns its contents as a slice of strings, each representing a line.\nfunc ReadLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "This function reads a file and returns its contents as a slice of strings, with each string representing a line."
  },
  {
    "id": 1730,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\n// countWordOccurrences reads a file and counts the occurrences of each word.\nfunc countWordOccurrences(filePath string) (map[string]int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\twordCounts := make(map[string]int)\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\t\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCounts[word]++\n\t}\n\t\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCounts, nil\n}",
    "summary": "The function reads a file and returns a map with the count of each word's occurrences."
  },
  {
    "id": 1731,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tword = strings.ToLower(word)\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := strings.ToLower(scanner.Text())\n\t\twords := strings.Fields(line)\n\t\tfor _, w := range words {\n\t\t\tif w == word {\n\t\t\t\tcount++\n\t\t\t}\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specified word in a text file, ignoring case."
  },
  {
    "id": 1732,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(fileName string) (int, error) {\n\tfile, err := os.Open(fileName)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the total or an error if encountered."
  },
  {
    "id": 1733,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 1734,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// countLinesInFile reads a file and returns the number of lines it contains.\nfunc countLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}",
    "summary": "The function countLinesInFile reads a file and returns the total number of lines it contains."
  },
  {
    "id": 1735,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}",
    "summary": "Reads all lines from a file specified by filePath and returns them as a slice of strings."
  },
  {
    "id": 1736,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordsInFile reads a file and counts the number of words in it.\nfunc CountWordsInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\twordCount := 0\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tif strings.TrimSpace(scanner.Text()) != \"\" {\n\t\t\twordCount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "The function `CountWordsInFile` reads a specified file and returns the total count of words within it."
  },
  {
    "id": 1737,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithWord reads a file and returns the number of lines containing a specific word.\nfunc CountLinesWithWord(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts and returns the number of lines in a file that contain a specified word."
  },
  {
    "id": 1738,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts the number of lines in a specified file and returns the line count or an error if one occurs."
  },
  {
    "id": 1739,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordOccurrences reads a file and returns a map with the count of each word found in the file.\nfunc CountWordOccurrences(filePath string) (map[string]int, error) {\n\twordCounts := make(map[string]int)\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCounts[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCounts, nil\n}\n```",
    "summary": "CountWordOccurrences reads a file and returns a map of word frequencies."
  },
  {
    "id": 1740,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadLines reads all the lines from a file and returns them as a slice of strings.\nfunc ReadLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "The function `ReadLines` reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 1741,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file from the specified path and returns its lines as a slice of strings.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line-by-line from a given path and returns the lines as a slice of strings."
  },
  {
    "id": 1742,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns the lines as a slice of strings."
  },
  {
    "id": 1743,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file from the given path and returns its contents as a slice of strings,\n// where each string represents a line from the file. It returns an error if the file cannot be read.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "The `ReadFileLines` function reads a file and returns its contents as a slice of strings, with each string representing a line in the file."
  },
  {
    "id": 1744,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc countWordOccurrences(filename, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "The function `countWordOccurrences` reads a file and counts how many times a specified word occurs, returning the count or an error."
  },
  {
    "id": 1745,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc FilterFileLines(inputFilePath, outputFilePath, keyword string) error {\n\tinputFile, err := os.Open(inputFilePath)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to open input file: %w\", err)\n\t}\n\tdefer inputFile.Close()\n\n\toutputFile, err := os.Create(outputFilePath)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to create output file: %w\", err)\n\t}\n\tdefer outputFile.Close()\n\n\tscanner := bufio.NewScanner(inputFile)\n\twriter := bufio.NewWriter(outputFile)\n\tdefer writer.Flush()\n\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tif strings.Contains(line, keyword) {\n\t\t\tif _, err := writer.WriteString(line + \"\\n\"); err != nil {\n\t\t\t\treturn fmt.Errorf(\"failed to write to output file: %w\", err)\n\t\t\t}\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn fmt.Errorf(\"error reading input file: %w\", err)\n\t}\n\n\treturn nil\n}\n```",
    "summary": "This Go function reads lines from an input file, filters them by a keyword, and writes matching lines to an output file."
  },
  {
    "id": 1746,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings, handling any errors encountered during the process."
  },
  {
    "id": 1747,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return nil, err\n    }\n    defer file.Close()\n\n    var lines []string\n    scanner := bufio.NewScanner(file)\n    for scanner.Scan() {\n        lines = append(lines, scanner.Text())\n    }\n    \n    if err := scanner.Err(); err != nil {\n        return nil, err\n    }\n    return lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns a slice of strings containing each line or an error if the file cannot be read."
  },
  {
    "id": 1748,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file and returns them as a slice of strings, handling any errors encountered."
  },
  {
    "id": 1749,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordsInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\twordCount := 0\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\twordCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "This function counts the number of words in a given file and returns the count along with any error encountered."
  },
  {
    "id": 1750,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tcount := 0\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tcount += strings.Count(line, word)\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specified word in a text file."
  },
  {
    "id": 1751,
    "code": "```go\nfunc ReadFileLines(filePath string) ([]string, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return nil, err\n    }\n    defer file.Close()\n\n    var lines []string\n    scanner := bufio.NewScanner(file)\n    for scanner.Scan() {\n        lines = append(lines, scanner.Text())\n    }\n    \n    if err := scanner.Err(); err != nil {\n        return nil, err\n    }\n    \n    return lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns the lines as a slice of strings."
  },
  {
    "id": 1752,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordOccurrences reads a file and returns a map of each word and its occurrence count.\nfunc CountWordOccurrences(filename string) (map[string]int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\twordCount := make(map[string]int)\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCount[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "The function `CountWordOccurrences` reads a file and returns a map with the count of each word's occurrences."
  },
  {
    "id": 1753,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "This function reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 1754,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the total along with any error encountered."
  },
  {
    "id": 1755,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "CountLinesInFile reads a file at a given path and returns the number of lines it contains."
  },
  {
    "id": 1756,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 1757,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filename string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if one occurs."
  },
  {
    "id": 1758,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and returns the number of lines that start with a specified prefix.\nfunc CountLinesWithPrefix(filePath string, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the number of lines in a file that start with a given prefix."
  },
  {
    "id": 1759,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc ReadLinesWithPrefix(filePath, prefix string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tif strings.HasPrefix(line, prefix) {\n\t\t\tlines = append(lines, line)\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "This function reads a file line by line and returns lines that start with a specified prefix."
  },
  {
    "id": 1760,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLineByLine(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns its contents as a slice of strings."
  },
  {
    "id": 1761,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// ReadLinesContaining reads a file and returns all lines containing the specified substring.\nfunc ReadLinesContaining(filePath, substring string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tif strings.Contains(line, substring) {\n\t\t\tlines = append(lines, line)\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file and returns all lines that contain a specified substring."
  },
  {
    "id": 1762,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file line by line and returns a slice of strings, each representing a line in the file.\nfunc ReadFileLines(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "ReadFileLines reads a file line by line and returns the content as a slice of strings."
  },
  {
    "id": 1763,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file into a slice of strings, returning an error if any occurs during the process."
  },
  {
    "id": 1764,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns the contents as a slice of strings."
  },
  {
    "id": 1765,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// CountLinesInFile counts the number of lines in a given file.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "CountLinesInFile opens a specified file and returns the number of lines it contains."
  },
  {
    "id": 1766,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file and returns them as a slice of strings."
  },
  {
    "id": 1767,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLineByLine(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line, returning a slice of strings containing each line or an error if one occurs."
  },
  {
    "id": 1768,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a given file and returns the count along with any error encountered."
  },
  {
    "id": 1769,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\n// ReplaceWordsInFile reads a file line by line, replaces every occurrence of oldWord with newWord, and writes the result to a new file.\nfunc ReplaceWordsInFile(inputPath, outputPath, oldWord, newWord string) error {\n    inputFile, err := os.Open(inputPath)\n    if err != nil {\n        return err\n    }\n    defer inputFile.Close()\n\n    outputFile, err := os.Create(outputPath)\n    if err != nil {\n        return err\n    }\n    defer outputFile.Close()\n\n    scanner := bufio.NewScanner(inputFile)\n    writer := bufio.NewWriter(outputFile)\n\n    for scanner.Scan() {\n        modifiedLine := strings.ReplaceAll(scanner.Text(), oldWord, newWord)\n        _, err := writer.WriteString(modifiedLine + \"\\n\")\n        if err != nil {\n            return err\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        return err\n    }\n\n    return writer.Flush()\n}\n```",
    "summary": "This function reads a file, replaces specified words, and saves the modified content to a new file."
  },
  {
    "id": 1770,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a given file, returning the count or an error."
  },
  {
    "id": 1771,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specific word in a file, ignoring case sensitivity."
  },
  {
    "id": 1772,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithWord reads a file and returns the number of lines containing the specified word.\nfunc CountLinesWithWord(filename, word string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.Contains(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function reads a file and counts the number of lines that contain a specified word."
  },
  {
    "id": 1773,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    lineCount := 0\n    for scanner.Scan() {\n        lineCount++\n    }\n\n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n\n    return lineCount, nil\n}\n```",
    "summary": "Counts and returns the number of lines in a specified file, handling errors appropriately."
  },
  {
    "id": 1774,
    "code": "```go\nfunc ReadLinesFromFile(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a file specified by the file path and returns them as a slice of strings."
  },
  {
    "id": 1775,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "The function `CountLinesInFile` counts and returns the number of lines in a specified file."
  },
  {
    "id": 1776,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count or an error if any occurs."
  },
  {
    "id": 1777,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file from the given path and returns its lines as a slice of strings.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns the lines as a slice of strings."
  },
  {
    "id": 1778,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "CountLinesInFile reads a file and returns the number of lines it contains, handling any errors encountered during the process."
  },
  {
    "id": 1779,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLineByLine(filename string) ([]string, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}",
    "summary": "This function reads a file line by line and returns the content as a slice of strings."
  },
  {
    "id": 1780,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn lineCount, err\n\t}\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a specified file and returns the count along with any error encountered."
  },
  {
    "id": 1781,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn lineCount, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a file specified by the given file path."
  },
  {
    "id": 1782,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\n// CountWordOccurrences reads a file and returns a map with the count of each word.\nfunc CountWordOccurrences(filePath string) (map[string]int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return nil, err\n    }\n    defer file.Close()\n\n    wordCount := make(map[string]int)\n    scanner := bufio.NewScanner(file)\n    scanner.Split(bufio.ScanWords)\n\n    for scanner.Scan() {\n        word := strings.ToLower(scanner.Text())\n        wordCount[word]++\n    }\n\n    if err := scanner.Err(); err != nil {\n        return nil, err\n    }\n\n    return wordCount, nil\n}\n```",
    "summary": "Counts the occurrences of each word in a file and returns the result as a map."
  },
  {
    "id": 1783,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// readFileByLine reads a file line by line and returns the lines as a slice of strings.\nfunc readFileByLine(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n\nfunc main() {\n\tlines, err := readFileByLine(\"example.txt\")\n\tif err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t\treturn\n\t}\n\tfor _, line := range lines {\n\t\tfmt.Println(line)\n\t}\n}",
    "summary": "The readFileByLine function reads a file line by line and returns the lines as a slice of strings."
  },
  {
    "id": 1784,
    "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}",
    "summary": "Counts the number of lines in a file specified by its path and returns the count or an error if one occurs."
  },
  {
    "id": 1785,
    "code": "```go\nfunc ReadFileLines(filePath string) ([]string, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return nil, err\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    var lines []string\n    for scanner.Scan() {\n        lines = append(lines, scanner.Text())\n    }\n    if err := scanner.Err(); err != nil {\n        return nil, err\n    }\n    return lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns a slice of strings containing each line."
  },
  {
    "id": 1786,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesStartingWith reads a file and returns the count of lines that start with the specified prefix.\nfunc CountLinesStartingWith(filePath, prefix string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn count, nil\n}\n```",
    "summary": "CountLinesStartingWith reads a file and returns the number of lines that begin with a specified prefix."
  },
  {
    "id": 1787,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc ReadFileLineByLine(filePath string) ([]string, error) {\n\tvar lines []string\n\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns its contents as a slice of strings."
  },
  {
    "id": 1788,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts the occurrences of a specified word in a file while ignoring case sensitivity."
  },
  {
    "id": 1789,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc CountWordOccurrencesInFile(filePath string, word string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\n\tcount := 0\n\tfor scanner.Scan() {\n\t\tif strings.EqualFold(scanner.Text(), word) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "This function counts the occurrences of a specified word in a text file, ignoring case differences."
  },
  {
    "id": 1790,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountWordOccurrences reads a file and counts the number of occurrences of each word.\nfunc CountWordOccurrences(filename string) (map[string]int, error) {\n\twordCount := make(map[string]int)\n\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tscanner.Split(bufio.ScanWords)\n\tfor scanner.Scan() {\n\t\tword := strings.ToLower(scanner.Text())\n\t\twordCount[word]++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn wordCount, nil\n}\n```",
    "summary": "Counts occurrences of each word in a file and returns a map of word frequencies."
  },
  {
    "id": 1791,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts the number of lines in a given file and returns the count along with any error encountered."
  },
  {
    "id": 1792,
    "code": "```go\nimport (\n    \"bufio\"\n    \"os\"\n    \"strings\"\n)\n\nfunc CountWordOccurrences(filePath, word string) (int, error) {\n    file, err := os.Open(filePath)\n    if err != nil {\n        return 0, err\n    }\n    defer file.Close()\n    \n    scanner := bufio.NewScanner(file)\n    count := 0\n    for scanner.Scan() {\n        line := scanner.Text()\n        count += strings.Count(line, word)\n    }\n    \n    if err := scanner.Err(); err != nil {\n        return 0, err\n    }\n    \n    return count, nil\n}\n```",
    "summary": "Counts the occurrences of a specified word in a file."
  },
  {
    "id": 1793,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// ReplaceWordInFile reads a file line by line, replaces occurrences of a specified word, and writes the result to a new file.\nfunc ReplaceWordInFile(inputFilePath, outputFilePath, oldWord, newWord string) error {\n\tinputFile, err := os.Open(inputFilePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer inputFile.Close()\n\n\toutputFile, err := os.Create(outputFilePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer outputFile.Close()\n\n\tscanner := bufio.NewScanner(inputFile)\n\twriter := bufio.NewWriter(outputFile)\n\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tmodifiedLine := strings.ReplaceAll(line, oldWord, newWord)\n\t\t_, err := writer.WriteString(modifiedLine + \"\\n\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn err\n\t}\n\n\treturn writer.Flush()\n}\n```",
    "summary": "Replaces occurrences of a specified word in a file and writes the modified content to a new file."
  },
  {
    "id": 1794,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "Counts and returns the number of lines in a specified file, handling errors appropriately."
  },
  {
    "id": 1795,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadLinesFromFile(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a slice of strings."
  },
  {
    "id": 1796,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// ReadFileLines reads a file line-by-line and returns a slice of strings.\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "The `ReadFileLines` function reads a specified file line-by-line and returns its contents as a slice of strings."
  },
  {
    "id": 1797,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\n// CountLinesInFile opens a file, counts its lines, and returns the count.\nfunc CountLinesInFile(filePath string) (int, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tlineCount := 0\n\tfor scanner.Scan() {\n\t\tlineCount++\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn lineCount, nil\n}\n```",
    "summary": "This function counts and returns the number of lines in a specified file, handling any errors encountered during the process."
  },
  {
    "id": 1798,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// ReadLinesWithPrefix reads a file and returns all lines that start with the specified prefix.\nfunc ReadLinesWithPrefix(filePath string, prefix string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tif strings.HasPrefix(line, prefix) {\n\t\t\tlines = append(lines, line)\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file and returns all lines that start with a specified prefix."
  },
  {
    "id": 1799,
    "code": "```go\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"strings\"\n)\n\n// CountLinesWithPrefix reads a file and returns the number of lines that start with a given prefix.\nfunc CountLinesWithPrefix(filename, prefix string) (int, error) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tcount := 0\n\n\tfor scanner.Scan() {\n\t\tif strings.HasPrefix(scanner.Text(), prefix) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn count, nil\n}\n```",
    "summary": "Counts and returns the number of lines in a file that start with a specified prefix."
  },
  {
    "id": 1800,
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc ReadFileLines(filePath string) ([]string, error) {\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn lines, nil\n}\n```",
    "summary": "Reads a file line by line and returns the lines as a slice of strings."
  }
]