[
  {
    "id": 1,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    contents <- readFile sourcePath\n    writeFile destPath contents",
    "summary": "Copies the contents from a source file to a destination file."
  },
  {
    "id": 2,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\hSource -> do\n        withFile dest WriteMode $ \\hDest -> do\n            contents <- hGetContents hSource\n            hPutStr hDest contents\n```",
    "summary": "Copies the contents of one file to another using file handles."
  },
  {
    "id": 3,
    "code": "import System.IO\n\ncopyFileContent :: FilePath -> FilePath -> IO ()\ncopyFileContent sourcePath destPath = do\n    sourceHandle <- openFile sourcePath ReadMode\n    destHandle <- openFile destPath WriteMode\n    contents <- hGetContents sourceHandle\n    hPutStr destHandle contents\n    hClose sourceHandle\n    hClose destHandle",
    "summary": "Copies the content of a source file to a destination file."
  },
  {
    "id": 4,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 5,
    "code": "import System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = withFile path ReadMode $ \\handle -> do\n    contents <- hGetContents handle\n    return $ length (lines contents)",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 6,
    "code": "import System.IO\n\ncopyFileContent :: FilePath -> FilePath -> IO ()\ncopyFileContent source destination = do\n    contents <- readFile source\n    writeFile destination contents",
    "summary": "Copies the content from the source file to the destination file."
  },
  {
    "id": 7,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> \n        withFile destPath WriteMode $ \\destHandle -> do\n            contents <- hGetContents sourceHandle\n            hPutStr destHandle contents\n```",
    "summary": "This function copies the contents from a source file to a destination file in Haskell."
  },
  {
    "id": 8,
    "code": "```haskell\nimport System.IO\n\nappendLineToFile :: FilePath -> String -> IO ()\nappendLineToFile path line = do\n    handle <- openFile path AppendMode\n    hPutStrLn handle line\n    hClose handle\n```",
    "summary": "Appends a given line of text to the end of a specified file."
  },
  {
    "id": 9,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = withFile path ReadMode $ \\handle -> do\n    contents <- hGetContents handle\n    return (length (lines contents))\n```",
    "summary": "Counts the number of lines in a specified file and returns the count as an integer."
  },
  {
    "id": 10,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        withFile destPath WriteMode $ \\destHandle -> do\n            contents <- hGetContents sourceHandle\n            hPutStr destHandle contents\n```",
    "summary": "The function `copyFileContents` reads the contents of a source file and writes them to a destination file."
  },
  {
    "id": 11,
    "code": "```haskell\nimport System.IO\n\nreadFileLines :: FilePath -> IO [String]\nreadFileLines path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let linesOfFile = lines contents\n    length linesOfFile `seq` hClose handle\n    return linesOfFile\n```",
    "summary": "Reads a file and returns its content as a list of lines."
  },
  {
    "id": 12,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourceFile targetFile = do\n    contents <- readFile sourceFile\n    writeFile targetFile contents",
    "summary": "Copies the contents from a source file to a target file."
  },
  {
    "id": 13,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destinationPath = do\n    contents <- readFile sourcePath\n    writeFile destinationPath contents",
    "summary": "Copies the contents of one file to another specified file path."
  },
  {
    "id": 14,
    "code": "```haskell\nimport System.IO\n\nreadFileLines :: FilePath -> IO [String]\nreadFileLines path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let linesOfFile = lines contents\n    return linesOfFile\n```",
    "summary": "Reads a file from a specified path and returns its contents as a list of strings, each representing a line."
  },
  {
    "id": 15,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\hSource -> do\n        withFile dest WriteMode $ \\hDest -> do\n            contents <- hGetContents hSource\n            hPutStr hDest contents\n```",
    "summary": "The function `copyFileContents` reads the contents of a source file and writes them to a destination file."
  },
  {
    "id": 16,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount\n```",
    "summary": "Counts the number of lines in a specified file and returns the count as an integer."
  },
  {
    "id": 17,
    "code": "import System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile filePath = do\n    handle <- openFile filePath ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount",
    "summary": "This function counts the number of lines in a specified file."
  },
  {
    "id": 18,
    "code": "import System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = withFile path WriteMode (\\handle -> mapM_ (hPutStrLn handle) lines)",
    "summary": "Writes a list of strings to a specified file, each as a separate line."
  },
  {
    "id": 19,
    "code": "```haskell\nimport System.IO\nimport Control.Exception (bracket)\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = bracket (openFile sourcePath ReadMode) hClose $ \\sourceHandle ->\n    bracket (openFile destPath WriteMode) hClose $ \\destHandle -> do\n        contents <- hGetContents sourceHandle\n        hPutStr destHandle contents\n```",
    "summary": "This function copies the contents of one file to another using Haskell's bracket for safe resource management."
  },
  {
    "id": 20,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\hSource -> do\n        contents <- hGetContents hSource\n        withFile dest WriteMode $ \\hDest -> do\n            hPutStr hDest contents\n```",
    "summary": "This Haskell function copies the contents from a source file to a destination file using `withFile` for safe resource management."
  },
  {
    "id": 21,
    "code": "import System.IO\n\nreadFileLines :: FilePath -> IO [String]\nreadFileLines path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let linesOfFile = lines contents\n    length linesOfFile `seq` hClose handle\n    return linesOfFile",
    "summary": "Reads a file from the given path and returns its contents as a list of strings, each representing a line."
  },
  {
    "id": 22,
    "code": "```haskell\nimport System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = do\n    handle <- openFile path WriteMode\n    mapM_ (hPutStrLn handle) lines\n    hClose handle\n```",
    "summary": "Writes a list of strings to a specified file, each string being a new line."
  },
  {
    "id": 23,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\sourceHandle -> do\n        contents <- hGetContents sourceHandle\n        withFile dest WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents of a source file to a destination file using file handles."
  },
  {
    "id": 24,
    "code": "import System.IO (withFile, IOMode(ReadMode), hGetContents)\n\nreadFileContents :: FilePath -> IO String\nreadFileContents filePath = withFile filePath ReadMode hGetContents",
    "summary": "Reads the entire content of a file at the given file path and returns it as a string."
  },
  {
    "id": 25,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        withFile destPath WriteMode $ \\destHandle -> do\n            contents <- hGetContents sourceHandle\n            hPutStr destHandle contents",
    "summary": "Copies the contents from a source file to a destination file."
  },
  {
    "id": 26,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        contents <- hGetContents sourceHandle\n        withFile destPath WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents of a source file to a destination file using handles."
  },
  {
    "id": 27,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n  contents <- readFile path\n  return $ length (lines contents)\n```",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 28,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source destination = do\n    withFile source ReadMode $ \\srcHandle -> do\n        contents <- hGetContents srcHandle\n        withFile destination WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents from a source file to a destination file using file handles."
  },
  {
    "id": 29,
    "code": "```haskell\nimport System.IO\n\ncopyFileContent :: FilePath -> FilePath -> IO ()\ncopyFileContent sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        withFile destPath WriteMode $ \\destHandle -> do\n            contents <- hGetContents sourceHandle\n            hPutStr destHandle contents\n```",
    "summary": "Copies the content from a source file to a destination file using file handles."
  },
  {
    "id": 30,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source target = do\n    withFile source ReadMode $ \\hSource -> do\n        contents <- hGetContents hSource\n        withFile target WriteMode $ \\hTarget -> do\n            hPutStr hTarget contents\n```",
    "summary": "Copies the contents of a source file to a target file using Haskell's file handling functions."
  },
  {
    "id": 31,
    "code": "```haskell\nimport System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = do\n    handle <- openFile path WriteMode\n    mapM_ (hPutStrLn handle) lines\n    hClose handle\n```",
    "summary": "Writes a list of strings to a specified file, with each string on a new line."
  },
  {
    "id": 32,
    "code": "import System.IO\nimport Control.Exception (bracket)\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = bracket (openFile path WriteMode) hClose $ \\handle -> do\n    mapM_ (hPutStrLn handle) lines",
    "summary": "Writes a list of strings to a file, with each string on a new line, using safe resource management."
  },
  {
    "id": 33,
    "code": "```haskell\nimport System.IO\n\ncopyFileContent :: FilePath -> FilePath -> IO ()\ncopyFileContent sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        withFile destPath WriteMode $ \\destHandle -> do\n            contents <- hGetContents sourceHandle\n            hPutStr destHandle contents\n```",
    "summary": "Copies the content from a source file to a destination file using file handles."
  },
  {
    "id": 34,
    "code": "import System.IO\n\nreadFirstLine :: FilePath -> IO (Maybe String)\nreadFirstLine path = do\n    handle <- openFile path ReadMode\n    eof <- hIsEOF handle\n    if eof\n        then do\n            hClose handle\n            return Nothing\n        else do\n            line <- hGetLine handle\n            hClose handle\n            return (Just line)",
    "summary": "Reads and returns the first line of a file, or Nothing if the file is empty."
  },
  {
    "id": 35,
    "code": "```haskell\nimport System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile filePath lines = do\n    handle <- openFile filePath WriteMode\n    mapM_ (hPutStrLn handle) lines\n    hClose handle\n```",
    "summary": "Writes a list of strings to a specified file, each string on a new line."
  },
  {
    "id": 36,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source destination = do\n    withFile source ReadMode $ \\hSource -> do\n        contents <- hGetContents hSource\n        withFile destination WriteMode $ \\hDestination -> do\n            hPutStr hDestination contents\n```",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 37,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents\n```",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 38,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\srcHandle -> do\n        withFile dest WriteMode $ \\destHandle -> do\n            contents <- hGetContents srcHandle\n            hPutStr destHandle contents",
    "summary": "Copies the contents of one file to another file."
  },
  {
    "id": 39,
    "code": "import System.IO\n\nreverseFileContents :: FilePath -> FilePath -> IO ()\nreverseFileContents inputFile outputFile = do\n    contents <- readFile inputFile\n    let reversedContents = unlines . reverse . lines $ contents\n    writeFile outputFile reversedContents",
    "summary": "Reverses the lines of a file and writes the result to another file."
  },
  {
    "id": 40,
    "code": "import System.IO\n\nreadFileLines :: FilePath -> IO [String]\nreadFileLines path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let linesOfFile = lines contents\n    length linesOfFile `seq` hClose handle\n    return linesOfFile",
    "summary": "Reads a file from the specified path and returns its contents as a list of lines."
  },
  {
    "id": 41,
    "code": "import System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = withFile path WriteMode $ \\handle -> mapM_ (hPutStrLn handle) lines",
    "summary": "Writes a list of strings to a specified file, each on a new line."
  },
  {
    "id": 42,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle ->\n        withFile destPath WriteMode $ \\destHandle -> do\n            contents <- hGetContents sourceHandle\n            hPutStr destHandle contents",
    "summary": "Copies the contents of one file to another file using file handles."
  },
  {
    "id": 43,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        contents <- hGetContents sourceHandle\n        withFile destPath WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents from a source file to a destination file using file handles in Haskell."
  },
  {
    "id": 44,
    "code": "import System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = withFile path WriteMode (\\handle -> mapM_ (hPutStrLn handle) lines)",
    "summary": "This function writes a list of strings to a specified file, each string on a new line."
  },
  {
    "id": 45,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\srcHandle -> do\n        contents <- hGetContents srcHandle\n        withFile dest WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents",
    "summary": "Copies contents from one file to another using file handles."
  },
  {
    "id": 46,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        contents <- hGetContents sourceHandle\n        withFile destPath WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents",
    "summary": "Copies the contents of one file to another file using file handles in Haskell."
  },
  {
    "id": 47,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents\n```",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 48,
    "code": "import System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = withFile path ReadMode $ \\handle -> do\n    contents <- hGetContents handle\n    return $ length (lines contents)",
    "summary": "Counts and returns the number of lines in a file given its file path."
  },
  {
    "id": 49,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents src dst = do\n    withFile src ReadMode $ \\srcHandle -> do\n        contents <- hGetContents srcHandle\n        withFile dst WriteMode $ \\dstHandle -> do\n            hPutStr dstHandle contents\n```",
    "summary": "Copies the contents of a source file to a destination file using file handles."
  },
  {
    "id": 50,
    "code": "import System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = do\n    handle <- openFile path WriteMode\n    mapM_ (hPutStrLn handle) lines\n    hClose handle",
    "summary": "Writes a list of strings to a file, each string on a new line."
  },
  {
    "id": 51,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount\n```",
    "summary": "Counts the number of lines in a given file and returns the count as an integer."
  },
  {
    "id": 52,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\hSource -> do\n        contents <- hGetContents hSource\n        withFile dest WriteMode $ \\hDest -> do\n            hPutStr hDest contents\n```",
    "summary": "Copies the contents of a source file to a destination file using file handles."
  },
  {
    "id": 53,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    contents <- readFile path\n    return (length (lines contents))\n```",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 54,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile filePath = do\n    handle <- openFile filePath ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount\n```",
    "summary": "Counts the number of lines in a specified file and returns the count as an integer."
  },
  {
    "id": 55,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\srcHandle -> do\n        contents <- hGetContents srcHandle\n        withFile dest WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents\n```",
    "summary": "This function copies the contents from a source file to a destination file using Haskell's IO operations."
  },
  {
    "id": 56,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\hSource -> do\n        contents <- hGetContents hSource\n        withFile dest WriteMode $ \\hDest -> do\n            hPutStr hDest contents\n```",
    "summary": "Copies the contents of one file to another, using `withFile` for safe file handling."
  },
  {
    "id": 57,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourceFile destFile = do\n    withFile sourceFile ReadMode $ \\srcHandle -> do\n        contents <- hGetContents srcHandle\n        withFile destFile WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents",
    "summary": "Copies the contents of one file to another using file handles."
  },
  {
    "id": 58,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 59,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\sourceHandle -> do\n        contents <- hGetContents sourceHandle\n        withFile dest WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 60,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\sourceHandle ->\n        withFile dest WriteMode $ \\destHandle -> do\n            contents <- hGetContents sourceHandle\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 61,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount\n```",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 62,
    "code": "import System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile filePath = do\n    handle <- openFile filePath ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 63,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source destination = do\n    contents <- readFile source\n    writeFile destination contents",
    "summary": "Copies the contents from one file to another specified file."
  },
  {
    "id": 64,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    sourceHandle <- openFile sourcePath ReadMode\n    contents <- hGetContents sourceHandle\n    writeFile destPath contents\n    hClose sourceHandle\n```",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 65,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourceFile destFile = do\n    withFile sourceFile ReadMode $ \\srcHandle -> do\n        withFile destFile WriteMode $ \\destHandle -> do\n            contents <- hGetContents srcHandle\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents from a source file to a destination file using Haskell's IO operations."
  },
  {
    "id": 66,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source destination = do\n    withFile source ReadMode $ \\srcHandle -> do\n        contents <- hGetContents srcHandle\n        withFile destination WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 67,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile filePath = do\n    withFile filePath ReadMode $ \\handle -> do\n        contents <- hGetContents handle\n        return (length (lines contents))\n```",
    "summary": "Counts the number of lines in a specified file."
  },
  {
    "id": 68,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        contents <- hGetContents sourceHandle\n        withFile destPath WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 69,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    contents <- readFile path\n    return $ length (lines contents)\n```",
    "summary": "Counts the number of lines in a file given its file path."
  },
  {
    "id": 70,
    "code": "import System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 71,
    "code": "import System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = withFile path ReadMode $ \\handle -> do\n    contents <- hGetContents handle\n    return $ length (lines contents)",
    "summary": "Counts the number of lines in a file given its file path."
  },
  {
    "id": 72,
    "code": "import System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = withFile path WriteMode $ \\handle -> do\n    mapM_ (hPutStrLn handle) lines",
    "summary": "Writes a list of strings to a file, with each string on a new line."
  },
  {
    "id": 73,
    "code": "import System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = do\n    handle <- openFile path WriteMode\n    mapM_ (hPutStrLn handle) lines\n    hClose handle",
    "summary": "Writes a list of strings to a file, each string on a new line, at the specified file path."
  },
  {
    "id": 74,
    "code": "import System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = withFile path ReadMode $ \\handle -> do\n    contents <- hGetContents handle\n    return $ length (lines contents)",
    "summary": "Counts the number of lines in a specified file and returns the count as an integer."
  },
  {
    "id": 75,
    "code": "```haskell\nimport System.IO\n\nreadFirstLine :: FilePath -> IO (Maybe String)\nreadFirstLine path = do\n    handle <- openFile path ReadMode\n    eof <- hIsEOF handle\n    if eof\n        then do\n            hClose handle\n            return Nothing\n        else do\n            line <- hGetLine handle\n            hClose handle\n            return (Just line)\n```",
    "summary": "Reads and returns the first line of a file as a `Maybe String`, or `Nothing` if the file is empty."
  },
  {
    "id": 76,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents\n```",
    "summary": "Copies the contents from a source file to a destination file."
  },
  {
    "id": 77,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourceFile targetFile = do\n    withFile sourceFile ReadMode $ \\srcHandle -> do\n        withFile targetFile WriteMode $ \\tgtHandle -> do\n            contents <- hGetContents srcHandle\n            hPutStr tgtHandle contents",
    "summary": "The function copies the contents of a source file to a target file."
  },
  {
    "id": 78,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 79,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        contents <- hGetContents sourceHandle\n        withFile destPath WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents",
    "summary": "This function copies the contents of one file to another specified by their file paths."
  },
  {
    "id": 80,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents",
    "summary": "Copies the contents of one file to another specified file path."
  },
  {
    "id": 81,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        withFile destPath WriteMode $ \\destHandle -> do\n            contents <- hGetContents sourceHandle\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents of a source file to a destination file using file handles."
  },
  {
    "id": 82,
    "code": "```haskell\nimport System.IO (withFile, hGetContents, IOMode(ReadMode))\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = withFile path ReadMode $ \\handle -> do\n    contents <- hGetContents handle\n    return (length (lines contents))\n```",
    "summary": "Counts the number of lines in a file given its file path."
  },
  {
    "id": 83,
    "code": "```haskell\nimport System.IO\n\nreverseFileContents :: FilePath -> FilePath -> IO ()\nreverseFileContents inputFile outputFile = do\n    contents <- readFile inputFile\n    let reversedContents = unlines . map reverse . lines $ contents\n    writeFile outputFile reversedContents\n```",
    "summary": "Reverses the contents of each line from an input file and writes them to an output file."
  },
  {
    "id": 84,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourceFile targetFile = do\n    withFile sourceFile ReadMode $ \\sourceHandle -> do\n        withFile targetFile WriteMode $ \\targetHandle -> do\n            contents <- hGetContents sourceHandle\n            hPutStr targetHandle contents\n```",
    "summary": "Copies the contents of a source file to a target file using file handles."
  },
  {
    "id": 85,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        withFile destPath WriteMode $ \\destHandle -> do\n            contents <- hGetContents sourceHandle\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents of one file to another specified file path."
  },
  {
    "id": 86,
    "code": "import System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount",
    "summary": "Counts the number of lines in a specified file and returns the count as an integer."
  },
  {
    "id": 87,
    "code": "import System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = withFile path ReadMode $ \\handle -> do\n    contents <- hGetContents handle\n    return $ length (lines contents)",
    "summary": "Counts the number of lines in a file specified by the given file path."
  },
  {
    "id": 88,
    "code": "import System.IO\n\ncopyFileContent :: FilePath -> FilePath -> IO ()\ncopyFileContent source dest = do\n    contents <- readFile source\n    writeFile dest contents",
    "summary": "Copies the content from a source file to a destination file."
  },
  {
    "id": 89,
    "code": "```haskell\nimport System.IO\n\nwriteStringToFile :: FilePath -> String -> IO ()\nwriteStringToFile path content = withFile path WriteMode (\\h -> hPutStr h content)\n```",
    "summary": "Writes a given string to a specified file using the `withFile` function for resource management."
  },
  {
    "id": 90,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents src dest = do\n    withFile src ReadMode $ \\srcHandle -> do\n        withFile dest WriteMode $ \\destHandle -> do\n            contents <- hGetContents srcHandle\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents from a source file to a destination file using file handles."
  },
  {
    "id": 91,
    "code": "```haskell\nimport System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = do\n    handle <- openFile path WriteMode\n    mapM_ (hPutStrLn handle) lines\n    hClose handle\n```",
    "summary": "Writes a list of strings to a specified file, with each string on a new line."
  },
  {
    "id": 92,
    "code": "```haskell\nimport System.IO\n\nreadFileLines :: FilePath -> IO [String]\nreadFileLines path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    return (lines contents)\n```",
    "summary": "Reads a file from a given path and returns its contents as a list of strings, each representing a line."
  },
  {
    "id": 93,
    "code": "import System.IO\n\nreadFileLines :: FilePath -> IO [String]\nreadFileLines path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let linesOfFile = lines contents\n    length linesOfFile `seq` hClose handle\n    return linesOfFile",
    "summary": "Reads a file and returns its contents as a list of lines."
  },
  {
    "id": 94,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        contents <- hGetContents sourceHandle\n        withFile destPath WriteMode $ \\destHandle ->\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents of a source file to a destination file using file handles."
  },
  {
    "id": 95,
    "code": "```haskell\nimport System.IO\n\ncopyFileContent :: FilePath -> FilePath -> IO ()\ncopyFileContent src dst = do\n    withFile src ReadMode $ \\hSrc -> do\n        contents <- hGetContents hSrc\n        withFile dst WriteMode $ \\hDst -> do\n            hPutStr hDst contents\n```",
    "summary": "Copies the contents of a source file to a destination file using file handles."
  },
  {
    "id": 96,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 97,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    sourceHandle <- openFile sourcePath ReadMode\n    destHandle <- openFile destPath WriteMode\n    contents <- hGetContents sourceHandle\n    hPutStr destHandle contents\n    hClose sourceHandle\n    hClose destHandle",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 98,
    "code": "import System.IO (withFile, IOMode(ReadMode), hGetContents)\n\nreadFileLines :: FilePath -> IO [String]\nreadFileLines path = \n    withFile path ReadMode $ \\handle -> do\n        contents <- hGetContents handle\n        return (lines contents)",
    "summary": "Reads a file and returns its contents as a list of strings, each representing a line."
  },
  {
    "id": 99,
    "code": "import System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount",
    "summary": "Counts the number of lines in a specified file."
  },
  {
    "id": 100,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        contents <- hGetContents sourceHandle\n        withFile destPath WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents from a source file to a destination file using file handles."
  },
  {
    "id": 101,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents\n```",
    "summary": "The function `copyFileContents` reads the entire content of a source file and writes it to a destination file."
  },
  {
    "id": 102,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\hSource -> do\n        contents <- hGetContents hSource\n        withFile dest WriteMode $ \\hDest -> do\n            hPutStr hDest contents\n```",
    "summary": "Copies the contents of one file to another, using file handles for reading and writing."
  },
  {
    "id": 103,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\srcHandle -> do\n        contents <- hGetContents srcHandle\n        withFile dest WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents from a source file to a destination file."
  },
  {
    "id": 104,
    "code": "```haskell\nimport System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = withFile path WriteMode $ \\handle -> do\n    mapM_ (hPutStrLn handle) lines\n```",
    "summary": "Writes a list of strings to a file, each on a new line."
  },
  {
    "id": 105,
    "code": "import System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount",
    "summary": "Counts the number of lines in a given file and returns the count."
  },
  {
    "id": 106,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        contents <- hGetContents sourceHandle\n        withFile destPath WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents",
    "summary": "Copies the contents of one file to another using file handles."
  },
  {
    "id": 107,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        withFile destPath WriteMode $ \\destHandle -> do\n            contents <- hGetContents sourceHandle\n            hPutStr destHandle contents",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 108,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 109,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\hIn -> do\n        withFile dest WriteMode $ \\hOut -> do\n            contents <- hGetContents hIn\n            hPutStr hOut contents",
    "summary": "Copies the entire contents of a source file to a destination file."
  },
  {
    "id": 110,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\srcHandle -> do\n        contents <- hGetContents srcHandle\n        withFile dest WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents",
    "summary": "Copies the contents from a source file to a destination file."
  },
  {
    "id": 111,
    "code": "import System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    contents <- readFile path\n    return $ length (lines contents)",
    "summary": "Counts the number of lines in a specified file and returns the count as an integer."
  },
  {
    "id": 112,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath targetPath = do\n    sourceHandle <- openFile sourcePath ReadMode\n    targetHandle <- openFile targetPath WriteMode\n    contents <- hGetContents sourceHandle\n    hPutStr targetHandle contents\n    hClose sourceHandle\n    hClose targetHandle\n```",
    "summary": "Copies the contents of a source file to a target file using file handles."
  },
  {
    "id": 113,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount\n```",
    "summary": "Counts the number of lines in a specified file and returns the count as an integer."
  },
  {
    "id": 114,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount\n```",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 115,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    content <- readFile source\n    writeFile dest content",
    "summary": "Copies the contents of one file to another file in Haskell."
  },
  {
    "id": 116,
    "code": "```haskell\nimport System.IO (withFile, IOMode(ReadMode), hGetContents)\n\nreadFileContents :: FilePath -> IO String\nreadFileContents path = withFile path ReadMode $ \\handle -> do\n    contents <- hGetContents handle\n    return contents\n```",
    "summary": "Reads and returns the contents of a file specified by the given file path."
  },
  {
    "id": 117,
    "code": "```haskell\nimport System.IO\n\nreadLinesFromFile :: FilePath -> IO [String]\nreadLinesFromFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let linesList = lines contents\n    length linesList `seq` hClose handle\n    return linesList\n```",
    "summary": "Reads all lines from a specified file into a list of strings, ensuring the file is properly closed after reading."
  },
  {
    "id": 118,
    "code": "```haskell\nimport System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path linesToWrite = withFile path WriteMode $ \\handle -> do\n    mapM_ (hPutStrLn handle) linesToWrite\n```",
    "summary": "Writes a list of strings to a specified file, each as a separate line."
  },
  {
    "id": 119,
    "code": "import System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = withFile path WriteMode (\\h -> mapM_ (hPutStrLn h) lines)",
    "summary": "Writes a list of strings as separate lines to a specified file."
  },
  {
    "id": 120,
    "code": "import System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile filePath lines = withFile filePath WriteMode $ \\handle -> do\n    mapM_ (hPutStrLn handle) lines",
    "summary": "Writes a list of strings to a specified file, each on a new line."
  },
  {
    "id": 121,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> \n        withFile destPath WriteMode $ \\destHandle -> do\n            contents <- hGetContents sourceHandle\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents from a source file to a destination file."
  },
  {
    "id": 122,
    "code": "import System.IO\nimport Control.Exception (bracket)\n\ncopyFileContent :: FilePath -> FilePath -> IO ()\ncopyFileContent source dest = bracket (openFile source ReadMode) hClose $ \\hSource ->\n    bracket (openFile dest WriteMode) hClose $ \\hDest -> do\n        contents <- hGetContents hSource\n        hPutStr hDest contents",
    "summary": "Copies the content of a source file to a destination file using bracket for resource management."
  },
  {
    "id": 123,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    sourceHandle <- openFile sourcePath ReadMode\n    destHandle <- openFile destPath WriteMode\n    contents <- hGetContents sourceHandle\n    hPutStr destHandle contents\n    hClose sourceHandle\n    hClose destHandle\n```",
    "summary": "Copies the contents from a source file to a destination file using file handles."
  },
  {
    "id": 124,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\hSource -> do\n        contents <- hGetContents hSource\n        withFile dest WriteMode $ \\hDest -> do\n            hPutStr hDest contents",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 125,
    "code": "```haskell\nimport System.IO\n\ncopyFile :: FilePath -> FilePath -> IO ()\ncopyFile sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        withFile destPath WriteMode $ \\destHandle -> do\n            contents <- hGetContents sourceHandle\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents of one file to another specified file path."
  },
  {
    "id": 126,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount\n```",
    "summary": "Counts the number of lines in a specified file and returns the count as an integer."
  },
  {
    "id": 127,
    "code": "```haskell\nimport System.IO\n\nreplaceWordInFile :: FilePath -> String -> String -> IO ()\nreplaceWordInFile filePath oldWord newWord = do\n    contents <- readFile filePath\n    let updatedContents = unwords $ map (\\word -> if word == oldWord then newWord else word) (words contents)\n    writeFile filePath updatedContents\n```",
    "summary": "Replaces all occurrences of a specified word with another word in a given file."
  },
  {
    "id": 128,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\hSource -> do\n        withFile dest WriteMode $ \\hDest -> do\n            contents <- hGetContents hSource\n            hPutStr hDest contents\n```",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 129,
    "code": "```haskell\nimport System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = withFile path WriteMode $ \\handle -> do\n    mapM_ (hPutStrLn handle) lines\n```",
    "summary": "Writes a list of strings to a specified file, each string on a new line."
  },
  {
    "id": 130,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents\n```",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 131,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile filePath = do\n    contents <- readFile filePath\n    return $ length (lines contents)\n```",
    "summary": "Counts the number of lines in a file specified by the given file path."
  },
  {
    "id": 132,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = withFile path ReadMode $ \\handle -> do\n    contents <- hGetContents handle\n    return $ length (lines contents)\n```",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 133,
    "code": "```haskell\nimport System.IO\n\nreadFileLines :: FilePath -> IO [String]\nreadFileLines path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let linesOfFile = lines contents\n    length linesOfFile `seq` hClose handle\n    return linesOfFile\n```",
    "summary": "Reads all lines from a specified file into a list of strings, ensuring the file handle is closed afterwards."
  },
  {
    "id": 134,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 135,
    "code": "import System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 136,
    "code": "import System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = withFile path WriteMode $ \\handle -> mapM_ (hPutStrLn handle) lines",
    "summary": "Writes a list of strings as separate lines to a specified file."
  },
  {
    "id": 137,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\hSource -> do\n        withFile dest WriteMode $ \\hDest -> do\n            contents <- hGetContents hSource\n            hPutStr hDest contents\n```",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 138,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount\n```",
    "summary": "Counts the number of lines in a specified file."
  },
  {
    "id": 139,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount\n```",
    "summary": "Counts the number of lines in a file given its file path."
  },
  {
    "id": 140,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle ->\n        withFile destPath WriteMode $ \\destHandle -> do\n            contents <- hGetContents sourceHandle\n            hPutStr destHandle contents\n```",
    "summary": "Copies contents from a source file to a destination file using file handles."
  },
  {
    "id": 141,
    "code": "```haskell\nimport System.IO\n\ncopyFileContent :: FilePath -> FilePath -> IO ()\ncopyFileContent source dest = do\n    contents <- readFile source\n    writeFile dest contents\n```",
    "summary": "Copies the content of one file to another specified destination file."
  },
  {
    "id": 142,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents inputFile outputFile = do\n    withFile inputFile ReadMode $ \\inHandle -> do\n        contents <- hGetContents inHandle\n        withFile outputFile WriteMode $ \\outHandle -> do\n            hPutStr outHandle contents\n```",
    "summary": "Copies the contents from an input file to an output file using file handles."
  },
  {
    "id": 143,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        withFile destPath WriteMode $ \\destHandle -> do\n            contents <- hGetContents sourceHandle\n            hPutStr destHandle contents",
    "summary": "Copies the contents from a source file to a destination file."
  },
  {
    "id": 144,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents src dst = do\n    withFile src ReadMode $ \\hSrc -> do\n        contents <- hGetContents hSrc\n        withFile dst WriteMode $ \\hDst -> do\n            hPutStr hDst contents\n```",
    "summary": "Copies the contents of a source file to a destination file using Haskell's file handling functions."
  },
  {
    "id": 145,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents\n```",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 146,
    "code": "import System.IO\n\nwriteStringsToFile :: FilePath -> [String] -> IO ()\nwriteStringsToFile path lines = withFile path WriteMode $ \\handle -> do\n    mapM_ (hPutStrLn handle) lines",
    "summary": "Writes a list of strings to a file, each on a new line, using the specified file path."
  },
  {
    "id": 147,
    "code": "import System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = withFile path WriteMode $ \\handle -> do\n    mapM_ (hPutStrLn handle) lines",
    "summary": "Writes a list of strings to a specified file, each on a new line."
  },
  {
    "id": 148,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\hSource -> do\n        contents <- hGetContents hSource\n        withFile dest WriteMode $ \\hDest -> do\n            hPutStr hDest contents\n```",
    "summary": "Copies the contents from a source file to a destination file using file handles."
  },
  {
    "id": 149,
    "code": "import System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = withFile path WriteMode (\\handle -> mapM_ (hPutStrLn handle) lines)",
    "summary": "Writes a list of strings to a file, with each string on a new line."
  },
  {
    "id": 150,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents src dst = do\n    contents <- readFile src\n    writeFile dst contents\n```",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 151,
    "code": "import System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path linesToWrite = withFile path WriteMode $ \\handle -> do\n    mapM_ (hPutStrLn handle) linesToWrite",
    "summary": "Writes a list of strings to a file, with each string on a new line."
  },
  {
    "id": 152,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 153,
    "code": "import System.IO\n\nreadLinesFromFile :: FilePath -> IO [String]\nreadLinesFromFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let linesList = lines contents\n    length linesList `seq` hClose handle\n    return linesList",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 154,
    "code": "import System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile filePath lines = withFile filePath WriteMode (\\handle -> mapM_ (hPutStrLn handle) lines)",
    "summary": "Writes a list of strings to a specified file, each string on a new line."
  },
  {
    "id": 155,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source target = do\n    withFile source ReadMode $ \\srcHandle -> do\n        withFile target WriteMode $ \\tgtHandle -> do\n            contents <- hGetContents srcHandle\n            hPutStr tgtHandle contents",
    "summary": "Copies the contents of a source file to a target file using file handles."
  },
  {
    "id": 156,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source destination = do\n    withFile source ReadMode $ \\srcHandle -> do\n        contents <- hGetContents srcHandle\n        withFile destination WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents from the source file to the destination file."
  },
  {
    "id": 157,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents src dst = do\n    withFile src ReadMode $ \\hSrc -> do\n        contents <- hGetContents hSrc\n        withFile dst WriteMode $ \\hDst -> do\n            hPutStr hDst contents\n```",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 158,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        contents <- hGetContents sourceHandle\n        withFile destPath WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents",
    "summary": "Copies the entire contents of one file to another specified file."
  },
  {
    "id": 159,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destinationPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle ->\n        withFile destinationPath WriteMode $ \\destinationHandle -> do\n            contents <- hGetContents sourceHandle\n            hPutStr destinationHandle contents\n```",
    "summary": "Copies the contents of a source file to a destination file using file handles."
  },
  {
    "id": 160,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents\n```",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 161,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    sourceHandle <- openFile sourcePath ReadMode\n    contents <- hGetContents sourceHandle\n    destHandle <- openFile destPath WriteMode\n    hPutStr destHandle contents\n    hClose sourceHandle\n    hClose destHandle\n```",
    "summary": "Copies the contents from a source file to a destination file."
  },
  {
    "id": 162,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourceFile targetFile = do\n    contents <- readFile sourceFile\n    writeFile targetFile contents",
    "summary": "Copies the contents of a source file to a target file."
  },
  {
    "id": 163,
    "code": "```haskell\nimport System.IO\n\nreadFileLines :: FilePath -> IO [String]\nreadFileLines path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let linesOfFile = lines contents\n    length linesOfFile `seq` hClose handle\n    return linesOfFile\n```",
    "summary": "Reads all lines from a file specified by its path and returns them as a list of strings."
  },
  {
    "id": 164,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = withFile source ReadMode $ \\hSource ->\n    withFile dest WriteMode $ \\hDest -> do\n        contents <- hGetContents hSource\n        hPutStr hDest contents\n```",
    "summary": "Copies the contents of one file to another using file handles for reading and writing."
  },
  {
    "id": 165,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount\n```",
    "summary": "Counts the number of lines in a specified file and returns the total as an integer."
  },
  {
    "id": 166,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    sourceHandle <- openFile sourcePath ReadMode\n    destHandle <- openFile destPath WriteMode\n    contents <- hGetContents sourceHandle\n    hPutStr destHandle contents\n    hClose sourceHandle\n    hClose destHandle",
    "summary": "Copies the contents from a source file to a destination file."
  },
  {
    "id": 167,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = withFile path ReadMode $ \\handle -> do\n    contents <- hGetContents handle\n    return $ length (lines contents)\n```",
    "summary": "Counts the number of lines in a file specified by the given file path."
  },
  {
    "id": 168,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        contents <- hGetContents sourceHandle\n        withFile destPath WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents of a source file to a destination file using file handles."
  },
  {
    "id": 169,
    "code": "```haskell\nimport System.IO\n\nreadFileLines :: FilePath -> IO [String]\nreadFileLines path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    return (lines contents)\n```",
    "summary": "Reads a file and returns its contents as a list of strings, each representing a line in the file."
  },
  {
    "id": 170,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 171,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    contents <- readFile path\n    return $ length (lines contents)\n```",
    "summary": "Counts and returns the number of lines in a file given its file path."
  },
  {
    "id": 172,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        withFile destPath WriteMode $ \\destHandle -> do\n            contents <- hGetContents sourceHandle\n            hPutStr destHandle contents",
    "summary": "Copies the contents of one file to another using file handles."
  },
  {
    "id": 173,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\hSource -> do\n        withFile dest WriteMode $ \\hDest -> do\n            contents <- hGetContents hSource\n            hPutStr hDest contents\n```",
    "summary": "Copies the contents from the source file to the destination file."
  },
  {
    "id": 174,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle ->\n        withFile destPath WriteMode $ \\destHandle -> do\n            contents <- hGetContents sourceHandle\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents from a source file to a destination file using file handles."
  },
  {
    "id": 175,
    "code": "```haskell\nimport System.IO\n\nreadFileLines :: FilePath -> IO [String]\nreadFileLines path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let linesOfFile = lines contents\n    return linesOfFile\n```",
    "summary": "Reads a file and returns its contents as a list of lines."
  },
  {
    "id": 176,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount\n```",
    "summary": "Counts the number of lines in a file specified by the given file path."
  },
  {
    "id": 177,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle ->\n        withFile destPath WriteMode $ \\destHandle -> do\n            contents <- hGetContents sourceHandle\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents of one file to another specified file using file handles."
  },
  {
    "id": 178,
    "code": "```haskell\nimport System.IO\n\nreadFileLines :: FilePath -> IO [String]\nreadFileLines path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let linesOfFile = lines contents\n    return linesOfFile\n```",
    "summary": "Reads a file from the given path and returns its contents as a list of strings, each representing a line in the file."
  },
  {
    "id": 179,
    "code": "```haskell\nimport System.IO\n\nreadFileLines :: FilePath -> IO [String]\nreadFileLines path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let linesList = lines contents\n    length linesList `seq` hClose handle\n    return linesList\n```",
    "summary": "Reads a file and returns its contents as a list of lines, ensuring the file is properly closed after reading."
  },
  {
    "id": 180,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount\n```",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 181,
    "code": "```haskell\nimport System.IO\n\nreadFileLines :: FilePath -> IO [String]\nreadFileLines path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let linesOfFile = lines contents\n    return linesOfFile\n```",
    "summary": "Reads a file and returns its contents as a list of strings, each representing a line."
  },
  {
    "id": 182,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\hSource -> do\n        contents <- hGetContents hSource\n        withFile dest WriteMode $ \\hDest -> do\n            hPutStr hDest contents\n```",
    "summary": "This function copies the contents of a source file to a destination file using Haskell's `withFile` for safe file handling."
  },
  {
    "id": 183,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\hSource -> do\n        contents <- hGetContents hSource\n        withFile dest WriteMode $ \\hDest -> do\n            hPutStr hDest contents\n```",
    "summary": "Copies the contents from a source file to a destination file using Haskell's IO operations."
  },
  {
    "id": 184,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\hSource -> do\n        contents <- hGetContents hSource\n        withFile dest WriteMode $ \\hDest -> do\n            hPutStr hDest contents\n```",
    "summary": "Copies the contents of a source file to a destination file using file handles."
  },
  {
    "id": 185,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source destination = do\n    withFile source ReadMode $ \\srcHandle -> do\n        withFile destination WriteMode $ \\destHandle -> do\n            contents <- hGetContents srcHandle\n            hPutStr destHandle contents",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 186,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source target = do\n    contents <- readFile source\n    writeFile target contents\n```",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 187,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 188,
    "code": "import System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile filePath = do\n    contents <- readFile filePath\n    return (length (lines contents))",
    "summary": "Counts the number of lines in a file and returns the count as an integer."
  },
  {
    "id": 189,
    "code": "import System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = do\n    handle <- openFile path WriteMode\n    mapM_ (hPutStrLn handle) lines\n    hClose handle",
    "summary": "Writes a list of strings to a specified file, each as a new line."
  },
  {
    "id": 190,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source target = do\n    withFile source ReadMode $ \\srcHandle -> do\n        contents <- hGetContents srcHandle\n        withFile target WriteMode $ \\tgtHandle -> do\n            hPutStr tgtHandle contents",
    "summary": "Copies the contents of a source file to a target file using file handles."
  },
  {
    "id": 191,
    "code": "import System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 192,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents src dest = do\n    withFile src ReadMode $ \\srcHandle -> do\n        contents <- hGetContents srcHandle\n        withFile dest WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 193,
    "code": "import System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 194,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents inputFile outputFile = do\n    withFile inputFile ReadMode $ \\inHandle -> \n        withFile outputFile WriteMode $ \\outHandle -> do\n            contents <- hGetContents inHandle\n            hPutStr outHandle contents\n```",
    "summary": "Copies the contents of one file to another using file handles for reading and writing."
  },
  {
    "id": 195,
    "code": "import System.IO\nimport Data.List\n\nfindWordOccurrences :: FilePath -> String -> IO Int\nfindWordOccurrences filePath word = do\n    contents <- readFile filePath\n    let wordList = words contents\n    return $ length $ filter (== word) wordList",
    "summary": "Counts the occurrences of a specified word in a given file."
  },
  {
    "id": 196,
    "code": "import System.IO\n\nreadFirstLine :: FilePath -> IO (Maybe String)\nreadFirstLine path = do\n    handle <- openFile path ReadMode\n    eof <- hIsEOF handle\n    if eof\n        then do\n            hClose handle\n            return Nothing\n        else do\n            line <- hGetLine handle\n            hClose handle\n            return (Just line)",
    "summary": "Reads and returns the first line of a file, or Nothing if the file is empty."
  },
  {
    "id": 197,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents inputFile outputFile = do\n    contents <- readFile inputFile\n    writeFile outputFile contents\n```",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 198,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 199,
    "code": "```haskell\nimport System.IO\nimport Control.Exception (bracket)\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = bracket (openFile source ReadMode) hClose $ \\hSource ->\n    bracket (openFile dest WriteMode) hClose $ \\hDest -> do\n        contents <- hGetContents hSource\n        hPutStr hDest contents\n```",
    "summary": "Copies the contents of one file to another using safe resource management."
  },
  {
    "id": 200,
    "code": "import System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 201,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents\n```",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 202,
    "code": "import System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 203,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source target = do\n    withFile source ReadMode $ \\srcHandle -> do\n        withFile target WriteMode $ \\tgtHandle -> do\n            contents <- hGetContents srcHandle\n            hPutStr tgtHandle contents",
    "summary": "Copies the contents of a source file to a target file using Haskell's file I/O operations."
  },
  {
    "id": 204,
    "code": "import System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    contents <- readFile path\n    return $ length (lines contents)",
    "summary": "Counts the number of lines in a file specified by its file path."
  },
  {
    "id": 205,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents src dst = do\n    withFile src ReadMode $ \\hSrc -> do\n        contents <- hGetContents hSrc\n        withFile dst WriteMode $ \\hDst -> do\n            hPutStr hDst contents\n```",
    "summary": "Copies the contents of a source file to a destination file using Haskell's IO operations."
  },
  {
    "id": 206,
    "code": "import System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = withFile path WriteMode $ \\handle -> do\n    mapM_ (hPutStrLn handle) lines",
    "summary": "Writes a list of strings to a specified file, each string on a new line."
  },
  {
    "id": 207,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount\n```",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 208,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\hSource -> do\n        contents <- hGetContents hSource\n        withFile dest WriteMode $ \\hDest -> do\n            hPutStr hDest contents\n```",
    "summary": "Copies the contents of one file to another file using Haskell's IO operations."
  },
  {
    "id": 209,
    "code": "```haskell\nimport System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = do\n    handle <- openFile path WriteMode\n    mapM_ (hPutStrLn handle) lines\n    hClose handle\n```",
    "summary": "Writes a list of strings to a file, each string on a new line."
  },
  {
    "id": 210,
    "code": "```haskell\nimport System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = withFile path WriteMode $ \\handle -> do\n    mapM_ (hPutStrLn handle) lines\n```",
    "summary": "Writes a list of strings to a specified file, each string as a separate line."
  },
  {
    "id": 211,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle ->\n        withFile destPath WriteMode $ \\destHandle -> do\n            contents <- hGetContents sourceHandle\n            hPutStr destHandle contents",
    "summary": "Copies the contents of one file to another using file handles."
  },
  {
    "id": 212,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents src dest = do\n    contents <- readFile src\n    writeFile dest contents",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 213,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source destination = do\n    withFile source ReadMode $ \\srcHandle -> do\n        contents <- hGetContents srcHandle\n        withFile destination WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents",
    "summary": "Copies the contents of a source file to a destination file using file handles."
  },
  {
    "id": 214,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source destination = do\n    withFile source ReadMode $ \\srcHandle -> do\n        withFile destination WriteMode $ \\destHandle -> do\n            contents <- hGetContents srcHandle\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents from a source file to a destination file using file handles."
  },
  {
    "id": 215,
    "code": "import System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = withFile path WriteMode $ \\handle -> do\n    mapM_ (hPutStrLn handle) lines",
    "summary": "Writes a list of strings to a specified file, each on a new line, using the specified file path."
  },
  {
    "id": 216,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\hSource -> do\n        contents <- hGetContents hSource\n        withFile dest WriteMode $ \\hDest -> do\n            hPutStr hDest contents",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 217,
    "code": "import System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = withFile path WriteMode (\\handle -> mapM_ (hPutStrLn handle) lines)",
    "summary": "Writes a list of strings to a file, each as a separate line, using the specified file path."
  },
  {
    "id": 218,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source destination = do\n    contents <- readFile source\n    writeFile destination contents",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 219,
    "code": "import System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path linesToWrite = do\n    withFile path WriteMode $ \\handle -> do\n        mapM_ (hPutStrLn handle) linesToWrite",
    "summary": "Writes a list of strings to a file, with each string on a new line."
  },
  {
    "id": 220,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source destination = do\n    withFile source ReadMode $ \\src ->\n        withFile destination WriteMode $ \\dest -> do\n            contents <- hGetContents src\n            hPutStr dest contents",
    "summary": "Copies the contents of a source file to a destination file using file handles."
  },
  {
    "id": 221,
    "code": "import System.IO\n\nreadFileLines :: FilePath -> IO [String]\nreadFileLines path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    return (lines contents)",
    "summary": "Reads a file and returns its contents as a list of lines."
  },
  {
    "id": 222,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    sourceHandle <- openFile sourcePath ReadMode\n    destHandle <- openFile destPath WriteMode\n    contents <- hGetContents sourceHandle\n    hPutStr destHandle contents\n    hClose sourceHandle\n    hClose destHandle\n```",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 223,
    "code": "```haskell\nimport System.IO\n\nreadFileLines :: FilePath -> IO [String]\nreadFileLines path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let linesOfFile = lines contents\n    return linesOfFile\n```",
    "summary": "Reads a file from the given path and returns its contents as a list of lines."
  },
  {
    "id": 224,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    sourceHandle <- openFile sourcePath ReadMode\n    destHandle <- openFile destPath WriteMode\n    contents <- hGetContents sourceHandle\n    hPutStr destHandle contents\n    hClose sourceHandle\n    hClose destHandle\n```",
    "summary": "This function copies the contents from a source file to a destination file using Haskell's file I/O operations."
  },
  {
    "id": 225,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents\n```",
    "summary": "Copies the contents from a source file to a destination file."
  },
  {
    "id": 226,
    "code": "```haskell\nimport System.IO\n\nreadFileLines :: FilePath -> IO [String]\nreadFileLines path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let linesOfFile = lines contents\n    return linesOfFile\n```",
    "summary": "Reads a file from the specified path and returns its contents as a list of lines."
  },
  {
    "id": 227,
    "code": "```haskell\nimport System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = withFile path WriteMode $ \\handle -> do\n    mapM_ (hPutStrLn handle) lines\n```",
    "summary": "Writes a list of strings to a specified file, with each string on a new line."
  },
  {
    "id": 228,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount\n```",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 229,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents src dst = do\n    withFile src ReadMode $ \\hSrc -> do\n        contents <- hGetContents hSrc\n        withFile dst WriteMode $ \\hDst -> do\n            hPutStr hDst contents\n```",
    "summary": "Copies the contents of the source file to the destination file."
  },
  {
    "id": 230,
    "code": "```haskell\nimport System.IO\n\nreadFileLines :: FilePath -> IO [String]\nreadFileLines path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let linesOfFile = lines contents\n    length linesOfFile `seq` hClose handle\n    return linesOfFile\n```",
    "summary": "Reads a file and returns its contents as a list of lines, ensuring the file handle is properly closed."
  },
  {
    "id": 231,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents\n```",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 232,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents",
    "summary": "Copies the contents of one file to another specified file in Haskell."
  },
  {
    "id": 233,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    sourceHandle <- openFile sourcePath ReadMode\n    destHandle <- openFile destPath WriteMode\n    contents <- hGetContents sourceHandle\n    hPutStr destHandle contents\n    hClose sourceHandle\n    hClose destHandle",
    "summary": "Copies contents from one file to another, overwriting the destination file."
  },
  {
    "id": 234,
    "code": "import System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile filePath = withFile filePath ReadMode $ \\handle -> do\n    contents <- hGetContents handle\n    return $ length (lines contents)",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 235,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\hSource -> do\n        contents <- hGetContents hSource\n        withFile dest WriteMode $ \\hDest -> do\n            hPutStr hDest contents\n```",
    "summary": "Copies the contents from a source file to a destination file."
  },
  {
    "id": 236,
    "code": "import System.IO\nimport Control.Exception\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    content <- bracket (openFile source ReadMode) hClose hGetContents\n    bracket (openFile dest WriteMode) hClose (`hPutStr` content)",
    "summary": "Copies the contents of a source file to a destination file using file handles."
  },
  {
    "id": 237,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents\n```",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 238,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    contents <- readFile sourcePath\n    writeFile destPath contents",
    "summary": "Copies the contents of one file to another specified file path."
  },
  {
    "id": 239,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source target = do\n    withFile source ReadMode $ \\srcHandle ->\n        withFile target WriteMode $ \\tgtHandle -> do\n            contents <- hGetContents srcHandle\n            hPutStr tgtHandle contents",
    "summary": "Copies the contents from a source file to a target file using file handles."
  },
  {
    "id": 240,
    "code": "import System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile filePath = do\n    handle <- openFile filePath ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 241,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\srcHandle -> do\n        contents <- hGetContents srcHandle\n        withFile dest WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents of a source file to a destination file using file handles in Haskell."
  },
  {
    "id": 242,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        withFile destPath WriteMode $ \\destHandle -> do\n            contents <- hGetContents sourceHandle\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents of one file to another using file handles."
  },
  {
    "id": 243,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents src dst = do\n    contents <- readFile src\n    writeFile dst contents",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 244,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle ->\n        withFile destPath WriteMode $ \\destHandle -> do\n            contents <- hGetContents sourceHandle\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents of one file to another specified file using file handles."
  },
  {
    "id": 245,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source target = do\n    withFile source ReadMode $ \\srcHandle -> do\n        withFile target WriteMode $ \\tgtHandle -> do\n            contents <- hGetContents srcHandle\n            hPutStr tgtHandle contents\n```",
    "summary": "Copies the contents of a source file to a target file using file handles."
  },
  {
    "id": 246,
    "code": "```haskell\nimport System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path linesToWrite = withFile path WriteMode $ \\handle -> do\n    mapM_ (hPutStrLn handle) linesToWrite\n```",
    "summary": "Writes a list of strings to a specified file, each string as a separate line."
  },
  {
    "id": 247,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        contents <- hGetContents sourceHandle\n        withFile destPath WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents",
    "summary": "Copies the contents from a source file to a destination file."
  },
  {
    "id": 248,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\hSource -> do\n        contents <- hGetContents hSource\n        withFile dest WriteMode $ \\hDest -> do\n            hPutStr hDest contents",
    "summary": "Copies the contents of one file to another specified file, using lazy IO operations."
  },
  {
    "id": 249,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        withFile destPath WriteMode $ \\destHandle -> do\n            contents <- hGetContents sourceHandle\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 250,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 251,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\srcHandle -> do\n        withFile dest WriteMode $ \\destHandle -> do\n            contents <- hGetContents srcHandle\n            hPutStr destHandle contents",
    "summary": "Copies the contents of one file to another file in Haskell using file handles."
  },
  {
    "id": 252,
    "code": "import System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = withFile path WriteMode $ \\handle -> do\n    mapM_ (hPutStrLn handle) lines",
    "summary": "Writes a list of strings to a specified file, each on a new line."
  },
  {
    "id": 253,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\srcHandle -> do\n        contents <- hGetContents srcHandle\n        withFile dest WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents",
    "summary": "This function copies the contents of a source file to a destination file using Haskell's file handling utilities."
  },
  {
    "id": 254,
    "code": "import System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = do\n    handle <- openFile path WriteMode\n    mapM_ (hPutStrLn handle) lines\n    hClose handle",
    "summary": "Writes a list of strings to a specified file, each string on a new line."
  },
  {
    "id": 255,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source destination = do\n    withFile source ReadMode $ \\srcHandle -> do\n        withFile destination WriteMode $ \\destHandle -> do\n            contents <- hGetContents srcHandle\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents from a source file to a destination file using file handles."
  },
  {
    "id": 256,
    "code": "import System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = withFile path WriteMode (\\handle -> mapM_ (hPutStrLn handle) lines)",
    "summary": "Writes a list of strings to a specified file, each on a new line."
  },
  {
    "id": 257,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\srcHandle ->\n        withFile dest WriteMode $ \\destHandle -> do\n            contents <- hGetContents srcHandle\n            hPutStr destHandle contents",
    "summary": "Copies the contents from a source file to a destination file using file handles."
  },
  {
    "id": 258,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source target = do\n    contents <- readFile source\n    writeFile target contents",
    "summary": "Copies contents from the source file to the target file."
  },
  {
    "id": 259,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\hSource -> do\n        contents <- hGetContents hSource\n        withFile dest WriteMode $ \\hDest -> do\n            hPutStr hDest contents",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 260,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        contents <- hGetContents sourceHandle\n        withFile destPath WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 261,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\hSource -> do\n        contents <- hGetContents hSource\n        withFile dest WriteMode $ \\hDest -> do\n            hPutStr hDest contents",
    "summary": "Copies the contents of one file to another file."
  },
  {
    "id": 262,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source destination = do\n    withFile source ReadMode $ \\hSource -> do\n        contents <- hGetContents hSource\n        withFile destination WriteMode $ \\hDestination -> do\n            hPutStr hDestination contents",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 263,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        withFile destPath WriteMode $ \\destHandle -> do\n            contents <- hGetContents sourceHandle\n            hPutStr destHandle contents",
    "summary": "Copies the contents of one file to another specified file path."
  },
  {
    "id": 264,
    "code": "import System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = withFile path WriteMode (\\handle -> mapM_ (hPutStrLn handle) lines)",
    "summary": "Writes a list of strings as lines to a specified file using a file handle."
  },
  {
    "id": 265,
    "code": "import System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount",
    "summary": "Counts the number of lines in a file specified by the given file path."
  },
  {
    "id": 266,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount\n```",
    "summary": "Counts the number of lines in a file specified by the given file path."
  },
  {
    "id": 267,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle ->\n        withFile destPath WriteMode $ \\destHandle -> do\n            contents <- hGetContents sourceHandle\n            hPutStr destHandle contents",
    "summary": "Copies the contents of one file to another file using file handles."
  },
  {
    "id": 268,
    "code": "import System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path linesToWrite = withFile path WriteMode $ \\handle -> mapM_ (hPutStrLn handle) linesToWrite",
    "summary": "Writes a list of strings to a specified file, each string on a new line, using efficient file handling."
  },
  {
    "id": 269,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\hSource -> do\n        contents <- hGetContents hSource\n        withFile dest WriteMode $ \\hDest -> do\n            hPutStr hDest contents",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 270,
    "code": "```haskell\nimport System.IO\n\nappendLineToFile :: FilePath -> String -> IO ()\nappendLineToFile path line = withFile path AppendMode $ \\handle -> do\n    hPutStrLn handle line\n```",
    "summary": "Appends a single line of text to a specified file using append mode."
  },
  {
    "id": 271,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount\n```",
    "summary": "Counts the number of lines in a specified file and returns the count as an integer."
  },
  {
    "id": 272,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        contents <- hGetContents sourceHandle\n        withFile destPath WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 273,
    "code": "import System.IO\n\ncopyFileContent :: FilePath -> FilePath -> IO ()\ncopyFileContent source dest = do\n    withFile source ReadMode $ \\hSource -> do\n        contents <- hGetContents hSource\n        withFile dest WriteMode $ \\hDest -> do\n            hPutStr hDest contents",
    "summary": "Reads the content from a source file and writes it to a destination file."
  },
  {
    "id": 274,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source destination = do\n    withFile source ReadMode $ \\srcHandle -> \n        withFile destination WriteMode $ \\dstHandle -> do\n            contents <- hGetContents srcHandle\n            hPutStr dstHandle contents\n```",
    "summary": "Copies the contents of a source file to a destination file using file handles."
  },
  {
    "id": 275,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    sourceHandle <- openFile sourcePath ReadMode\n    destHandle <- openFile destPath WriteMode\n    contents <- hGetContents sourceHandle\n    hPutStr destHandle contents\n    hClose sourceHandle\n    hClose destHandle\n```",
    "summary": "Copies the contents from a source file to a destination file."
  },
  {
    "id": 276,
    "code": "import System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = withFile path WriteMode $ \\h -> mapM_ (hPutStrLn h) lines",
    "summary": "Writes a list of strings to a file, with each string on a new line."
  },
  {
    "id": 277,
    "code": "import System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 278,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        contents <- hGetContents sourceHandle\n        withFile destPath WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents",
    "summary": "Copies the contents of one file to another specified file path."
  },
  {
    "id": 279,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source target = do\n    withFile source ReadMode $ \\sourceHandle -> do\n        withFile target WriteMode $ \\targetHandle -> do\n            contents <- hGetContents sourceHandle\n            hPutStr targetHandle contents",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 280,
    "code": "import System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = withFile path WriteMode $ \\handle -> do\n    mapM_ (hPutStrLn handle) lines",
    "summary": "Writes a list of strings to a specified file, each as a separate line."
  },
  {
    "id": 281,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile filePath = do\n    handle <- openFile filePath ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount\n```",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 282,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents\n```",
    "summary": "Copies the contents from the source file to the destination file."
  },
  {
    "id": 283,
    "code": "import System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount",
    "summary": "Counts and returns the number of lines in a file specified by the given file path."
  },
  {
    "id": 284,
    "code": "```haskell\nimport System.IO\n\ncopyFileContent :: FilePath -> FilePath -> IO ()\ncopyFileContent source dest = do\n    contents <- readFile source\n    writeFile dest contents\n```",
    "summary": "Copies the content from one file to another specified by source and destination file paths."
  },
  {
    "id": 285,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source destination = do\n    contents <- readFile source\n    writeFile destination contents\n```",
    "summary": "Copies the contents from the source file to the destination file."
  },
  {
    "id": 286,
    "code": "import System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = do\n    handle <- openFile path WriteMode\n    mapM_ (hPutStrLn handle) lines\n    hClose handle",
    "summary": "Writes a list of strings to a file, each on a new line, at the specified file path."
  },
  {
    "id": 287,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\source -> do\n        withFile destPath WriteMode $ \\dest -> do\n            contents <- hGetContents source\n            hPutStr dest contents\n```",
    "summary": "Copies the contents of a source file to a destination file using file handles."
  },
  {
    "id": 288,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\sourceHandle ->\n        withFile dest WriteMode $ \\destHandle -> do\n            contents <- hGetContents sourceHandle\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents of one file to another specified file using handles."
  },
  {
    "id": 289,
    "code": "import System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = do\n    handle <- openFile path WriteMode\n    mapM_ (hPutStrLn handle) lines\n    hClose handle",
    "summary": "Writes a list of strings to a specified file, with each string on a new line."
  },
  {
    "id": 290,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle ->\n        withFile destPath WriteMode $ \\destHandle -> do\n            contents <- hGetContents sourceHandle\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents of one file to another using file handles for reading and writing."
  },
  {
    "id": 291,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = withFile path ReadMode $ \\handle -> do\n    contents <- hGetContents handle\n    return $ length (lines contents)\n```",
    "summary": "Counts the number of lines in a file specified by the given file path."
  },
  {
    "id": 292,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\srcHandle -> do\n        withFile dest WriteMode $ \\destHandle -> do\n            contents <- hGetContents srcHandle\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 293,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount\n```",
    "summary": "Counts the number of lines in a file specified by the given file path."
  },
  {
    "id": 294,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    contents <- readFile sourcePath\n    writeFile destPath contents\n```",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 295,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\srcHandle -> do\n        withFile dest WriteMode $ \\destHandle -> do\n            contents <- hGetContents srcHandle\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents of a source file to a destination file using file handles."
  },
  {
    "id": 296,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents src dst = do\n    withFile src ReadMode $ \\srcHandle -> do\n        contents <- hGetContents srcHandle\n        withFile dst WriteMode $ \\dstHandle -> do\n            hPutStr dstHandle contents\n```",
    "summary": "Copies the contents of one file to another using file handles."
  },
  {
    "id": 297,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\srcHandle ->\n        withFile dest WriteMode $ \\destHandle -> do\n            contents <- hGetContents srcHandle\n            hPutStr destHandle contents\n```",
    "summary": "Copies the entire contents of one file to another using file handles."
  },
  {
    "id": 298,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile filePath = do\n    handle <- openFile filePath ReadMode\n    contents <- hGetContents handle\n    let lineCount = length . lines $ contents\n    hClose handle\n    return lineCount\n```",
    "summary": "Counts the number of lines in a specified file and returns the count as an integer."
  },
  {
    "id": 299,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = withFile path ReadMode $ \\handle -> do\n    contents <- hGetContents handle\n    return $ length (lines contents)\n```",
    "summary": "Counts and returns the number of lines in a given file specified by its file path."
  },
  {
    "id": 300,
    "code": "import System.IO\n\nreadLines :: FilePath -> IO [String]\nreadLines path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let linesList = lines contents\n    length linesList `seq` hClose handle\n    return linesList",
    "summary": "Reads a file line by line and returns the contents as a list of strings."
  },
  {
    "id": 301,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    sourceHandle <- openFile sourcePath ReadMode\n    destHandle <- openFile destPath WriteMode\n    contents <- hGetContents sourceHandle\n    hPutStr destHandle contents\n    hClose sourceHandle\n    hClose destHandle\n```",
    "summary": "Copies the contents of one file to another specified file using file handles."
  },
  {
    "id": 302,
    "code": "```haskell\nimport System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = withFile path WriteMode (\\handle -> mapM_ (hPutStrLn handle) lines)\n```",
    "summary": "Writes a list of strings to a file, each as a separate line, using the specified file path."
  },
  {
    "id": 303,
    "code": "import System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = do\n    handle <- openFile path WriteMode\n    mapM_ (hPutStrLn handle) lines\n    hClose handle",
    "summary": "Writes a list of strings to a specified file, each string on a new line."
  },
  {
    "id": 304,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\hSource -> do\n        contents <- hGetContents hSource\n        withFile dest WriteMode $ \\hDest -> do\n            hPutStr hDest contents\n```",
    "summary": "Copies the contents from a source file to a destination file."
  },
  {
    "id": 305,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    sourceHandle <- openFile sourcePath ReadMode\n    destHandle <- openFile destPath WriteMode\n    contents <- hGetContents sourceHandle\n    hPutStr destHandle contents\n    hClose sourceHandle\n    hClose destHandle\n```",
    "summary": "Copies the contents of one file to another specified file path."
  },
  {
    "id": 306,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\hSource -> do\n        contents <- hGetContents hSource\n        withFile destPath WriteMode $ \\hDest -> do\n            hPutStr hDest contents",
    "summary": "Copies the contents of one file to another file using file paths."
  },
  {
    "id": 307,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        contents <- hGetContents sourceHandle\n        withFile destPath WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents of a source file to a destination file using file handles in Haskell."
  },
  {
    "id": 308,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents src dst = do\n    withFile src ReadMode $ \\srcHandle -> do\n        contents <- hGetContents srcHandle\n        withFile dst WriteMode $ \\dstHandle -> do\n            hPutStr dstHandle contents",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 309,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = withFile path ReadMode $ \\handle -> do\n    contents <- hGetContents handle\n    return $ length (lines contents)\n```",
    "summary": "Counts the number of lines in a file given its file path."
  },
  {
    "id": 310,
    "code": "import System.IO\n\nreadFirstLine :: FilePath -> IO (Maybe String)\nreadFirstLine path = do\n    handle <- openFile path ReadMode\n    eof <- hIsEOF handle\n    if eof\n        then do\n            hClose handle\n            return Nothing\n        else do\n            line <- hGetLine handle\n            hClose handle\n            return (Just line)",
    "summary": "Reads the first line of a file and returns it as a `Maybe String`, or `Nothing` if the file is empty."
  },
  {
    "id": 311,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source target = do\n    withFile source ReadMode $ \\srcHandle -> do\n        contents <- hGetContents srcHandle\n        withFile target WriteMode $ \\tgtHandle -> do\n            hPutStr tgtHandle contents\n```",
    "summary": "Copies the contents from a source file to a target file using file handles."
  },
  {
    "id": 312,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = withFile path ReadMode $ \\handle -> do\n    contents <- hGetContents handle\n    return $ length (lines contents)\n```",
    "summary": "Counts the number of lines in a file given its file path."
  },
  {
    "id": 313,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        contents <- hGetContents sourceHandle\n        withFile destPath WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents from the source file to the destination file."
  },
  {
    "id": 314,
    "code": "```haskell\nimport System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = withFile path WriteMode (\\h -> mapM_ (hPutStrLn h) lines)\n```",
    "summary": "Writes a list of strings to a specified file, each string on a new line."
  },
  {
    "id": 315,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount\n```",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 316,
    "code": "import System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = withFile path WriteMode $ \\handle -> do\n    mapM_ (hPutStrLn handle) lines",
    "summary": "Writes a list of strings to a file, each on a new line, using the specified file path."
  },
  {
    "id": 317,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    contents <- readFile sourcePath\n    writeFile destPath contents",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 318,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source destination = do\n    withFile source ReadMode $ \\srcHandle ->\n        withFile destination WriteMode $ \\dstHandle -> do\n            contents <- hGetContents srcHandle\n            hPutStr dstHandle contents",
    "summary": "This function copies the contents from a source file to a destination file using file handles."
  },
  {
    "id": 319,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\hSource -> do\n        contents <- hGetContents hSource\n        withFile dest WriteMode $ \\hDest -> do\n            hPutStr hDest contents",
    "summary": "Copies the contents from a source file to a destination file."
  },
  {
    "id": 320,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount\n```",
    "summary": "Counts and returns the number of lines in a given file specified by its file path."
  },
  {
    "id": 321,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\hSource -> do\n        contents <- hGetContents hSource\n        withFile dest WriteMode $ \\hDest -> do\n            hPutStr hDest contents\n```",
    "summary": "Copies the contents of a source file to a destination file using Haskell's file handling functions."
  },
  {
    "id": 322,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount\n```",
    "summary": "Counts the number of lines in a specified file."
  },
  {
    "id": 323,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents",
    "summary": "Copies the contents of one file to another specified file path."
  },
  {
    "id": 324,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile filePath = do\n    handle <- openFile filePath ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount\n```",
    "summary": "Counts the number of lines in a given file and returns the count as an integer."
  },
  {
    "id": 325,
    "code": "import System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount",
    "summary": "Counts the number of lines in a specified file and returns the count."
  },
  {
    "id": 326,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount\n```",
    "summary": "Reads a file and returns the number of lines it contains."
  },
  {
    "id": 327,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = withFile path ReadMode $ \\handle -> do\n    contents <- hGetContents handle\n    return $ length (lines contents)\n```",
    "summary": "Counts and returns the number of lines in a file specified by the given file path."
  },
  {
    "id": 328,
    "code": "import System.IO\n\nreadFileContents :: FilePath -> IO (Maybe String)\nreadFileContents path = do\n    exists <- doesFileExist path\n    if exists\n        then do\n            handle <- openFile path ReadMode\n            contents <- hGetContents handle\n            return (Just contents)\n        else return Nothing",
    "summary": "Reads the contents of a file and returns them as a string wrapped in a Maybe type, or Nothing if the file does not exist."
  },
  {
    "id": 329,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    contents <- readFile sourcePath\n    writeFile destPath contents\n```",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 330,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourceFile targetFile = do\n    withFile sourceFile ReadMode $ \\srcHandle -> do\n        withFile targetFile WriteMode $ \\tgtHandle -> do\n            contents <- hGetContents srcHandle\n            hPutStr tgtHandle contents\n```",
    "summary": "Copies the contents of a source file to a target file using file handles."
  },
  {
    "id": 331,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents\n```",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 332,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount\n```",
    "summary": "Counts and returns the number of lines in a specified text file."
  },
  {
    "id": 333,
    "code": "import System.IO\n\ncopyFileContent :: FilePath -> FilePath -> IO ()\ncopyFileContent source target = do\n    withFile source ReadMode $ \\sourceHandle -> do\n        withFile target WriteMode $ \\targetHandle -> do\n            contents <- hGetContents sourceHandle\n            hPutStr targetHandle contents",
    "summary": "This function copies the content from a source file to a target file using Haskell's file I/O operations."
  },
  {
    "id": 334,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\hSource -> do\n        withFile dest WriteMode $ \\hDest -> do\n            contents <- hGetContents hSource\n            hPutStr hDest contents",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 335,
    "code": "import System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile filePath = do\n    handle <- openFile filePath ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount",
    "summary": "This function counts the number of lines in a specified file and returns the count."
  },
  {
    "id": 336,
    "code": "```haskell\nimport System.IO\n\ncopyFileContent :: FilePath -> FilePath -> IO ()\ncopyFileContent source target = do\n    withFile source ReadMode $ \\sourceHandle -> do\n        withFile target WriteMode $ \\targetHandle -> do\n            contents <- hGetContents sourceHandle\n            hPutStr targetHandle contents\n```",
    "summary": "Copies the content from a source file to a target file using file handles."
  },
  {
    "id": 337,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source destination = do\n    withFile source ReadMode $ \\srcHandle ->\n        withFile destination WriteMode $ \\destHandle ->\n            hGetContents srcHandle >>= hPutStr destHandle\n```",
    "summary": "Copies the contents from a source file to a destination file using file handles."
  },
  {
    "id": 338,
    "code": "```haskell\nimport System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = withFile path WriteMode (\\handle -> mapM_ (hPutStrLn handle) lines)\n```",
    "summary": "Writes a list of strings to a specified file, each string on a new line."
  },
  {
    "id": 339,
    "code": "import System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = withFile path WriteMode (\\handle -> mapM_ (hPutStrLn handle) lines)",
    "summary": "Writes a list of strings to a file, each as a separate line."
  },
  {
    "id": 340,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    return $ length (lines contents)\n```",
    "summary": "Counts the number of lines in a specified file."
  },
  {
    "id": 341,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source destination = do\n    withFile source ReadMode $ \\srcHandle -> do\n        withFile destination WriteMode $ \\dstHandle -> do\n            contents <- hGetContents srcHandle\n            hPutStr dstHandle contents\n```",
    "summary": "Copies the contents of a source file to a destination file using file handles."
  },
  {
    "id": 342,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source destination = do\n    withFile source ReadMode $ \\srcHandle -> do\n        withFile destination WriteMode $ \\destHandle -> do\n            contents <- hGetContents srcHandle\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents of one file to another using file handles for reading and writing."
  },
  {
    "id": 343,
    "code": "```haskell\nimport System.IO\n\ncopyFileContent :: FilePath -> FilePath -> IO ()\ncopyFileContent sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> \n        withFile destPath WriteMode $ \\destHandle -> do\n            contents <- hGetContents sourceHandle\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents of one file to another specified file in Haskell."
  },
  {
    "id": 344,
    "code": "```haskell\nimport System.IO\n\nwriteNumbersToFile :: FilePath -> [Int] -> IO ()\nwriteNumbersToFile path numbers = withFile path WriteMode $ \\handle -> do\n    mapM_ (hPutStrLn handle . show) numbers\n```",
    "summary": "Writes a list of integers to a specified file, each on a new line."
  },
  {
    "id": 345,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\hSource -> do\n        contents <- hGetContents hSource\n        withFile dest WriteMode $ \\hDest -> do\n            hPutStr hDest contents\n```",
    "summary": "Copies the contents of a source file to a destination file using Haskell's file handling functions."
  },
  {
    "id": 346,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents\n```",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 347,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    content <- hGetContents handle\n    let lineCount = length (lines content)\n    hClose handle\n    return lineCount\n```",
    "summary": "Counts the number of lines in a file given its file path."
  },
  {
    "id": 348,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents srcPath destPath = do\n    withFile srcPath ReadMode $ \\srcHandle -> do\n        contents <- hGetContents srcHandle\n        withFile destPath WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents of a source file to a destination file using file handles."
  },
  {
    "id": 349,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destinationPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        contents <- hGetContents sourceHandle\n        withFile destinationPath WriteMode $ \\destinationHandle -> do\n            hPutStr destinationHandle contents\n```",
    "summary": "Copies the contents of one file to another specified by source and destination file paths."
  },
  {
    "id": 350,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source destination = do\n    contents <- readFile source\n    writeFile destination contents\n```",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 351,
    "code": "```haskell\nimport System.IO\n\nreadFirstLine :: FilePath -> IO (Maybe String)\nreadFirstLine path = do\n    handle <- openFile path ReadMode\n    eof <- hIsEOF handle\n    if eof\n        then do\n            hClose handle\n            return Nothing\n        else do\n            firstLine <- hGetLine handle\n            hClose handle\n            return (Just firstLine)\n```",
    "summary": "Reads and returns the first line of a file, or Nothing if the file is empty."
  },
  {
    "id": 352,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    sourceHandle <- openFile sourcePath ReadMode\n    destHandle <- openFile destPath WriteMode\n    contents <- hGetContents sourceHandle\n    hPutStr destHandle contents\n    hClose sourceHandle\n    hClose destHandle\n```",
    "summary": "Copies the contents from a source file to a destination file."
  },
  {
    "id": 353,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        withFile destPath WriteMode $ \\destHandle -> do\n            contents <- hGetContents sourceHandle\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents of a source file to a destination file using Haskell's I/O operations."
  },
  {
    "id": 354,
    "code": "```haskell\nimport System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = withFile path WriteMode $ \\handle -> do\n    mapM_ (hPutStrLn handle) lines\n```",
    "summary": "Writes a list of strings to a specified file, each string on a new line."
  },
  {
    "id": 355,
    "code": "import System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 356,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        contents <- hGetContents sourceHandle\n        withFile destPath WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents\n```",
    "summary": "This function copies the contents from a source file to a destination file using file handles."
  },
  {
    "id": 357,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        withFile destPath WriteMode $ \\destHandle -> do\n            contents <- hGetContents sourceHandle\n            hPutStr destHandle contents",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 358,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 359,
    "code": "import System.IO\n\nreadFileLines :: FilePath -> IO [String]\nreadFileLines path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let linesOfFile = lines contents\n    length linesOfFile `seq` hClose handle\n    return linesOfFile",
    "summary": "Reads a file from the specified path and returns its content as a list of lines."
  },
  {
    "id": 360,
    "code": "import System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile filePath = do\n    handle <- openFile filePath ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount",
    "summary": "This function counts and returns the number of lines in a specified file."
  },
  {
    "id": 361,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source target = do\n    withFile source ReadMode $ \\srcHandle -> do\n        contents <- hGetContents srcHandle\n        withFile target WriteMode $ \\tgtHandle -> do\n            hPutStr tgtHandle contents\n```",
    "summary": "Copies the contents of a source file to a target file using file handles."
  },
  {
    "id": 362,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source target = do\n    withFile source ReadMode $ \\sourceHandle -> do\n        withFile target WriteMode $ \\targetHandle -> do\n            contents <- hGetContents sourceHandle\n            hPutStr targetHandle contents",
    "summary": "Copies the contents of a source file to a target file using file handles."
  },
  {
    "id": 363,
    "code": "```haskell\nimport System.IO\n\ncopyFileContent :: FilePath -> FilePath -> IO ()\ncopyFileContent sourceFile targetFile = do\n    handleSrc <- openFile sourceFile ReadMode\n    handleTgt <- openFile targetFile WriteMode\n    contents <- hGetContents handleSrc\n    hPutStr handleTgt contents\n    hClose handleSrc\n    hClose handleTgt\n```",
    "summary": "Copies the content from a source file to a target file using file handles."
  },
  {
    "id": 364,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\srcHandle -> do\n        withFile destPath WriteMode $ \\destHandle -> do\n            contents <- hGetContents srcHandle\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents of a source file to a destination file using file handles."
  },
  {
    "id": 365,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    sourceHandle <- openFile sourcePath ReadMode\n    destHandle <- openFile destPath WriteMode\n    contents <- hGetContents sourceHandle\n    hPutStr destHandle contents\n    hClose sourceHandle\n    hClose destHandle\n```",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 366,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        contents <- hGetContents sourceHandle\n        withFile destPath WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents of a source file to a destination file using file handles."
  },
  {
    "id": 367,
    "code": "import System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = withFile path WriteMode (\\handle -> mapM_ (hPutStrLn handle) lines)",
    "summary": "Writes a list of strings to a specified file, each on a new line."
  },
  {
    "id": 368,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    sourceHandle <- openFile sourcePath ReadMode\n    destHandle <- openFile destPath WriteMode\n    contents <- hGetContents sourceHandle\n    hPutStr destHandle contents\n    hClose sourceHandle\n    hClose destHandle",
    "summary": "Copies the contents from a source file to a destination file."
  },
  {
    "id": 369,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\srcHandle ->\n        withFile dest WriteMode $ \\destHandle -> do\n            contents <- hGetContents srcHandle\n            hPutStr destHandle contents",
    "summary": "Copies contents from a source file to a destination file using file handles."
  },
  {
    "id": 370,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    contents <- readFile sourcePath\n    writeFile destPath contents",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 371,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\srcHandle -> do\n        contents <- hGetContents srcHandle\n        withFile dest WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 372,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source destination = do\n    withFile source ReadMode $ \\srcHandle -> do\n        contents <- hGetContents srcHandle\n        withFile destination WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents from a source file to a destination file using lazy I/O operations."
  },
  {
    "id": 373,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        contents <- hGetContents sourceHandle\n        withFile destPath WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents from a source file to a destination file using file handles."
  },
  {
    "id": 374,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents src dest = do\n    contents <- readFile src\n    writeFile dest contents",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 375,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    sourceHandle <- openFile source ReadMode\n    destHandle <- openFile dest WriteMode\n    contents <- hGetContents sourceHandle\n    hPutStr destHandle contents\n    hClose sourceHandle\n    hClose destHandle\n```",
    "summary": "Copies the contents of one file to another file using Haskell's IO operations."
  },
  {
    "id": 376,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source target = do\n    withFile source ReadMode $ \\srcHandle -> do\n        withFile target WriteMode $ \\tgtHandle -> do\n            contents <- hGetContents srcHandle\n            hPutStr tgtHandle contents",
    "summary": "Copies the contents from a source file to a target file."
  },
  {
    "id": 377,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount\n```",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 378,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents",
    "summary": "Copies the entire content of a source file to a destination file."
  },
  {
    "id": 379,
    "code": "import System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = withFile path WriteMode $ \\handle -> do\n    mapM_ (hPutStrLn handle) lines",
    "summary": "Writes a list of strings to a file, each on a new line, using the specified file path."
  },
  {
    "id": 380,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents\n```",
    "summary": "Copies the contents of one file to another specified by the source and destination file paths."
  },
  {
    "id": 381,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents\n```",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 382,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile filePath = do\n    handle <- openFile filePath ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount\n```",
    "summary": "Counts the number of lines in a specified file."
  },
  {
    "id": 383,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    sourceHandle <- openFile sourcePath ReadMode\n    destHandle <- openFile destPath WriteMode\n    contents <- hGetContents sourceHandle\n    hPutStr destHandle contents\n    hClose sourceHandle\n    hClose destHandle\n```",
    "summary": "Copies contents from a source file to a destination file using file handles."
  },
  {
    "id": 384,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents\n```",
    "summary": "The function `copyFileContents` reads the contents of a source file and writes them to a destination file."
  },
  {
    "id": 385,
    "code": "```haskell\nimport System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = withFile path WriteMode $ \\handle -> do\n    mapM_ (hPutStrLn handle) lines\n```",
    "summary": "Writes a list of strings to a specified file, each string as a separate line."
  },
  {
    "id": 386,
    "code": "```haskell\nimport System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = do\n    handle <- openFile path WriteMode\n    mapM_ (hPutStrLn handle) lines\n    hClose handle\n```",
    "summary": "Writes a list of strings to a specified file, each on a new line."
  },
  {
    "id": 387,
    "code": "import System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 388,
    "code": "import System.IO\n\nreadFileContent :: FilePath -> IO (Maybe String)\nreadFileContent path = do\n    exists <- doesFileExist path\n    if exists\n        then Just <$> readFile path\n        else return Nothing",
    "summary": "Reads the content of a file if it exists, returning it as a `Just String`, or `Nothing` if the file does not exist."
  },
  {
    "id": 389,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 390,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        contents <- hGetContents sourceHandle\n        withFile destPath WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents",
    "summary": "Copies the contents of a source file to a destination file using file handles."
  },
  {
    "id": 391,
    "code": "import System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = withFile path WriteMode $ \\handle -> mapM_ (hPutStrLn handle) lines",
    "summary": "Writes a list of strings to a file, each on a new line."
  },
  {
    "id": 392,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\hIn -> \n        withFile dest WriteMode $ \\hOut -> do\n            contents <- hGetContents hIn\n            hPutStr hOut contents\n```",
    "summary": "Copies the entire contents of a source file to a destination file using file handles."
  },
  {
    "id": 393,
    "code": "import System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount",
    "summary": "Counts the number of lines in a file given its file path."
  },
  {
    "id": 394,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        contents <- hGetContents sourceHandle\n        withFile destPath WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents of a source file to a destination file using file handles."
  },
  {
    "id": 395,
    "code": "import System.IO\nimport Control.Exception (bracket)\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents src dst = bracket (openFile src ReadMode) hClose $ \\hSrc ->\n    bracket (openFile dst WriteMode) hClose $ \\hDst -> do\n        contents <- hGetContents hSrc\n        hPutStr hDst contents",
    "summary": "Copies the contents of a source file to a destination file using safe resource management."
  },
  {
    "id": 396,
    "code": "```haskell\nimport System.IO\n\ncountFileLines :: FilePath -> IO Int\ncountFileLines path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount\n```",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 397,
    "code": "import System.IO\nimport Control.Exception (bracket)\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = bracket (openFile source ReadMode) hClose $ \\srcHandle ->\n    bracket (openFile dest WriteMode) hClose $ \\destHandle -> do\n        contents <- hGetContents srcHandle\n        hPutStr destHandle contents",
    "summary": "Copies contents from a source file to a destination file."
  },
  {
    "id": 398,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourceFile destFile = do\n    withFile sourceFile ReadMode $ \\sourceHandle ->\n        withFile destFile WriteMode $ \\destHandle -> do\n            contents <- hGetContents sourceHandle\n            hPutStr destHandle contents",
    "summary": "Copies contents from a source file to a destination file using file handles."
  },
  {
    "id": 399,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    contents <- readFile sourcePath\n    withFile destPath WriteMode $ \\h -> do\n        hPutStr h contents",
    "summary": "Copies the contents of one file to another file."
  },
  {
    "id": 400,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents\n```",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 401,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents src dst = do\n    withFile src ReadMode $ \\hSrc ->\n        withFile dst WriteMode $ \\hDst -> do\n            contents <- hGetContents hSrc\n            hPutStr hDst contents",
    "summary": "Copies the contents of one file to another using file handles in Haskell."
  },
  {
    "id": 402,
    "code": "```haskell\nimport System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = withFile path WriteMode $ \\handle -> do\n    mapM_ (hPutStrLn handle) lines\n```",
    "summary": "This function writes a list of strings to a specified file, each string on a new line."
  },
  {
    "id": 403,
    "code": "import System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = withFile path WriteMode $ \\handle -> do\n    mapM_ (hPutStrLn handle) lines",
    "summary": "Writes a list of strings to a specified file, with each string on a new line."
  },
  {
    "id": 404,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    handleIn <- openFile sourcePath ReadMode\n    contents <- hGetContents handleIn\n    withFile destPath WriteMode (\\handleOut -> hPutStr handleOut contents)\n    hClose handleIn",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 405,
    "code": "import System.IO\n\ncopyFileContent :: FilePath -> FilePath -> IO ()\ncopyFileContent sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        withFile destPath WriteMode $ \\destHandle -> do\n            contents <- hGetContents sourceHandle\n            hPutStr destHandle contents",
    "summary": "The function `copyFileContent` copies the content from a source file to a destination file using file handles."
  },
  {
    "id": 406,
    "code": "import System.IO\n\nreadFileLines :: FilePath -> IO [String]\nreadFileLines path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let linesOfFile = lines contents\n    length linesOfFile `seq` hClose handle\n    return linesOfFile",
    "summary": "Reads a file from the specified path and returns its content as a list of strings, each representing a line."
  },
  {
    "id": 407,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath targetPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        contents <- hGetContents sourceHandle\n        withFile targetPath WriteMode $ \\targetHandle -> do\n            hPutStr targetHandle contents",
    "summary": "Copies the contents from a source file to a target file using handles."
  },
  {
    "id": 408,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents src dst = do\n    withFile src ReadMode $ \\hSrc -> do\n        contents <- hGetContents hSrc\n        withFile dst WriteMode $ \\hDst -> do\n            hPutStr hDst contents\n```",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 409,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount\n```",
    "summary": "Counts the number of lines in a file specified by its file path."
  },
  {
    "id": 410,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents\n```",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 411,
    "code": "import System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = withFile path WriteMode (\\handle -> mapM_ (hPutStrLn handle) lines)",
    "summary": "Writes a list of strings to a specified file, each string on a new line."
  },
  {
    "id": 412,
    "code": "import System.IO\nimport Control.Exception\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    handle <- openFile source ReadMode\n    contents <- hGetContents handle\n    bracket (openFile dest WriteMode) hClose (\\destHandle -> hPutStr destHandle contents)\n    hClose handle",
    "summary": "Copies the contents of a source file to a destination file using file handles."
  },
  {
    "id": 413,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 414,
    "code": "```haskell\nimport System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = withFile path WriteMode $ \\handle -> do\n    mapM_ (hPutStrLn handle) lines\n```",
    "summary": "Writes a list of strings as separate lines to a specified file using Haskell's `withFile` and `hPutStrLn`."
  },
  {
    "id": 415,
    "code": "import System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = withFile path WriteMode (\\handle -> mapM_ (hPutStrLn handle) lines)",
    "summary": "Writes a list of strings to a file, each as a separate line."
  },
  {
    "id": 416,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\hSource -> do\n        withFile dest WriteMode $ \\hDest -> do\n            contents <- hGetContents hSource\n            hPutStr hDest contents\n```",
    "summary": "Copies the contents from the source file to the destination file."
  },
  {
    "id": 417,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\srcHandle -> \n        withFile dest WriteMode $ \\destHandle -> do\n            contents <- hGetContents srcHandle\n            hPutStr destHandle contents",
    "summary": "Copies the entire contents from a source file to a destination file."
  },
  {
    "id": 418,
    "code": "import System.IO\nimport Control.Exception (bracket)\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = bracket (openFile source ReadMode) hClose $ \\hSource ->\n    bracket (openFile dest WriteMode) hClose $ \\hDest -> do\n        contents <- hGetContents hSource\n        hPutStr hDest contents",
    "summary": "Copies the contents of one file to another file using file handles with exception safety."
  },
  {
    "id": 419,
    "code": "```haskell\nimport System.IO\n\nreverseFileLines :: FilePath -> FilePath -> IO ()\nreverseFileLines inputFile outputFile = do\n    contents <- readFile inputFile\n    let reversedLines = unlines . reverse . lines $ contents\n    writeFile outputFile reversedLines\n```",
    "summary": "The `reverseFileLines` function reads lines from an input file, reverses their order, and writes the result to an output file."
  },
  {
    "id": 420,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents src dest = do\n    withFile src ReadMode $ \\hSrc -> do\n        contents <- hGetContents hSrc\n        withFile dest WriteMode $ \\hDest -> do\n            hPutStr hDest contents\n```",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 421,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destinationPath = do\n    handleSource <- openFile sourcePath ReadMode\n    contents <- hGetContents handleSource\n    writeFile destinationPath contents\n    hClose handleSource\n```",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 422,
    "code": "```haskell\nimport System.IO\n\nreadFileLines :: FilePath -> IO [String]\nreadFileLines path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let linesOfFile = lines contents\n    length linesOfFile `seq` hClose handle\n    return linesOfFile\n```",
    "summary": "Reads a file and returns its contents as a list of lines."
  },
  {
    "id": 423,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents src dst = do\n    withFile src ReadMode $ \\srcHandle -> do\n        withFile dst WriteMode $ \\dstHandle -> do\n            contents <- hGetContents srcHandle\n            hPutStr dstHandle contents\n```",
    "summary": "Copies the contents from a source file to a destination file."
  },
  {
    "id": 424,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\srcHandle -> do\n        withFile dest WriteMode $ \\destHandle -> do\n            contents <- hGetContents srcHandle\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents of a source file to a destination file using Haskell's file handling functions."
  },
  {
    "id": 425,
    "code": "import System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 426,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount\n```",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 427,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents",
    "summary": "Copies the contents of one file to another file."
  },
  {
    "id": 428,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount\n```",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 429,
    "code": "```haskell\nimport System.IO\n\nreadFileLines :: FilePath -> IO [String]\nreadFileLines path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    return (lines contents)\n```",
    "summary": "Reads a file from the given file path and returns its contents as a list of lines."
  },
  {
    "id": 430,
    "code": "```haskell\nimport System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = withFile path WriteMode $ \\handle -> do\n    mapM_ (hPutStrLn handle) lines\n```",
    "summary": "Writes a list of strings to a file, each on a new line, using the specified file path."
  },
  {
    "id": 431,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 432,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        contents <- hGetContents sourceHandle\n        withFile destPath WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents\n```",
    "summary": "Copies contents from a source file to a destination file."
  },
  {
    "id": 433,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        withFile destPath WriteMode $ \\destHandle -> do\n            contents <- hGetContents sourceHandle\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents from a source file to a destination file using handles for reading and writing."
  },
  {
    "id": 434,
    "code": "```haskell\nimport System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = withFile path WriteMode (\\handle -> mapM_ (hPutStrLn handle) lines)\n```",
    "summary": "Writes a list of strings to a specified file, each string on a new line."
  },
  {
    "id": 435,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile filePath = do\n    handle <- openFile filePath ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount\n```",
    "summary": "Counts the number of lines in a specified file and returns the count as an integer."
  },
  {
    "id": 436,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source destination = do\n    withFile source ReadMode $ \\srcHandle ->\n        withFile destination WriteMode $ \\dstHandle -> do\n            contents <- hGetContents srcHandle\n            hPutStr dstHandle contents\n```",
    "summary": "Copies the contents from a source file to a destination file using file handles."
  },
  {
    "id": 437,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    sourceHandle <- openFile sourcePath ReadMode\n    destHandle <- openFile destPath WriteMode\n    contents <- hGetContents sourceHandle\n    hPutStr destHandle contents\n    hClose sourceHandle\n    hClose destHandle\n```",
    "summary": "Copies the contents of one file to another specified file in Haskell."
  },
  {
    "id": 438,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        withFile destPath WriteMode $ \\destHandle -> do\n            contents <- hGetContents sourceHandle\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents of a source file to a destination file using file handles."
  },
  {
    "id": 439,
    "code": "```haskell\nimport System.IO\n\ncopyFileContent :: FilePath -> FilePath -> IO ()\ncopyFileContent sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        contents <- hGetContents sourceHandle\n        withFile destPath WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents\n```",
    "summary": "Copies the content of a source file to a destination file using file handles."
  },
  {
    "id": 440,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    contents <- readFile sourcePath\n    writeFile destPath contents\n```",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 441,
    "code": "import System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = withFile path WriteMode (\\handle -> mapM_ (hPutStrLn handle) lines)",
    "summary": "Writes a list of strings to a specified file, each as a separate line."
  },
  {
    "id": 442,
    "code": "```haskell\nimport System.IO\n\nreadLines :: FilePath -> IO [String]\nreadLines path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    return (lines contents)\n```",
    "summary": "Reads a file from a given path and returns its contents as a list of lines."
  },
  {
    "id": 443,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = withFile source ReadMode $ \\srcHandle ->\n    withFile dest WriteMode $ \\destHandle -> do\n        contents <- hGetContents srcHandle\n        hPutStr destHandle contents",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 444,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount\n```",
    "summary": "Counts the number of lines in a given file and returns the count as an integer."
  },
  {
    "id": 445,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents\n```",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 446,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourceFile targetFile = do\n    withFile sourceFile ReadMode $ \\hSource -> do\n        contents <- hGetContents hSource\n        withFile targetFile WriteMode $ \\hTarget -> do\n            hPutStr hTarget contents",
    "summary": "Copies the contents of one file to another using Haskell's IO operations."
  },
  {
    "id": 447,
    "code": "```haskell\nimport System.IO\n\nreadFileLines :: FilePath -> IO [String]\nreadFileLines path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let linesOfFiles = lines contents\n    return linesOfFiles\n```",
    "summary": "Reads a file and returns its contents as a list of lines."
  },
  {
    "id": 448,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        withFile destPath WriteMode $ \\destHandle -> do\n            contents <- hGetContents sourceHandle\n            hPutStr destHandle contents",
    "summary": "Copies the contents of one file to another using file handles."
  },
  {
    "id": 449,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = withFile path ReadMode $ \\handle -> do\n    contents <- hGetContents handle\n    return $ length (lines contents)\n```",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 450,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile filePath = do\n    handle <- openFile filePath ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount\n```",
    "summary": "Counts the number of lines in a specified file."
  },
  {
    "id": 451,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    return (length (lines contents))\n```",
    "summary": "Counts the number of lines in a specified file."
  },
  {
    "id": 452,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source target = do\n    withFile source ReadMode $ \\srcHandle -> do\n        contents <- hGetContents srcHandle\n        withFile target WriteMode $ \\tgtHandle -> do\n            hPutStr tgtHandle contents",
    "summary": "Copies the contents of a source file to a target file using file handles."
  },
  {
    "id": 453,
    "code": "import System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = do\n    handle <- openFile path WriteMode\n    mapM_ (hPutStrLn handle) lines\n    hClose handle",
    "summary": "Writes a list of strings to a specified file, each on a new line."
  },
  {
    "id": 454,
    "code": "import System.IO (withFile, IOMode(ReadMode), hGetContents)\n\nreadFileContents :: FilePath -> IO String\nreadFileContents path = withFile path ReadMode hGetContents",
    "summary": "Reads the entire contents of a file given its file path using lazy I/O."
  },
  {
    "id": 455,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents\n```",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 456,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents",
    "summary": "Copies the contents of one file to another specified file path."
  },
  {
    "id": 457,
    "code": "import System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = withFile path WriteMode $ \\handle -> do\n    mapM_ (hPutStrLn handle) lines",
    "summary": "Writes a list of strings to a file, each on a new line."
  },
  {
    "id": 458,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\srcHandle -> do\n        contents <- hGetContents srcHandle\n        withFile destPath WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents",
    "summary": "Copies the contents of one file to another specified file path."
  },
  {
    "id": 459,
    "code": "import System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path linesToWrite = do\n    handle <- openFile path WriteMode\n    mapM_ (hPutStrLn handle) linesToWrite\n    hClose handle",
    "summary": "Writes a list of strings to a file, each as a separate line."
  },
  {
    "id": 460,
    "code": "import System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 461,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile filePath = do\n    handle <- openFile filePath ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount\n```",
    "summary": "Counts the number of lines in a specified file and returns the count as an integer."
  },
  {
    "id": 462,
    "code": "import System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = withFile path WriteMode $ \\handle -> do\n    mapM_ (hPutStrLn handle) lines",
    "summary": "Writes a list of strings to a specified file, each string on a new line."
  },
  {
    "id": 463,
    "code": "import System.IO\n\nappendLineToFile :: FilePath -> String -> IO ()\nappendLineToFile path line = do\n    handle <- openFile path AppendMode\n    hPutStrLn handle line\n    hClose handle",
    "summary": "Appends a line of text to the end of a specified file."
  },
  {
    "id": 464,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents src dst = do\n    contents <- readFile src\n    writeFile dst contents",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 465,
    "code": "import System.IO\n\nwriteStringToFile :: FilePath -> String -> IO ()\nwriteStringToFile path content = withFile path WriteMode (\\handle -> hPutStr handle content)",
    "summary": "Writes a given string to a specified file using a file handle in write mode."
  },
  {
    "id": 466,
    "code": "import System.IO\n\nreadFileLines :: FilePath -> IO [String]\nreadFileLines path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let linesOfText = lines contents\n    return linesOfText",
    "summary": "Reads a file from the given path and returns its contents as a list of lines."
  },
  {
    "id": 467,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents\n```",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 468,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    sourceHandle <- openFile sourcePath ReadMode\n    destHandle <- openFile destPath WriteMode\n    contents <- hGetContents sourceHandle\n    hPutStr destHandle contents\n    hClose sourceHandle\n    hClose destHandle",
    "summary": "Copies the contents from a source file to a destination file."
  },
  {
    "id": 469,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents\n```",
    "summary": "Copies the contents from a source file to a destination file."
  },
  {
    "id": 470,
    "code": "```haskell\nimport System.IO\n\nreplaceLineInFile :: FilePath -> Int -> String -> IO ()\nreplaceLineInFile path lineNum newLine = do\n    contents <- readFile path\n    let fileLines = lines contents\n        updatedLines = replaceNth lineNum newLine fileLines\n    writeFile path (unlines updatedLines)\n\nreplaceNth :: Int -> a -> [a] -> [a]\nreplaceNth _ _ [] = []\nreplaceNth n newVal (x:xs)\n    | n == 0    = newVal : xs\n    | otherwise = x : replaceNth (n-1) newVal xs\n```",
    "summary": "Replaces a specific line in a file with a new string, given the file path and line number."
  },
  {
    "id": 471,
    "code": "```haskell\nimport System.IO\n\nreadFileLines :: FilePath -> IO [String]\nreadFileLines path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let linesOfFile = lines contents\n    return linesOfFile\n```",
    "summary": "Reads a file from the given path and returns its contents as a list of lines."
  },
  {
    "id": 472,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount\n```",
    "summary": "Counts the number of lines in a specified file and returns the count."
  },
  {
    "id": 473,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source target = do\n    withFile source ReadMode $ \\hSource -> do\n        withFile target WriteMode $ \\hTarget -> do\n            contents <- hGetContents hSource\n            hPutStr hTarget contents",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 474,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source destination = do\n    withFile source ReadMode $ \\srcHandle -> do\n        contents <- hGetContents srcHandle\n        withFile destination WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents of a source file to a destination file using file handles in Haskell."
  },
  {
    "id": 475,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents",
    "summary": "Copies the contents from the source file to the destination file."
  },
  {
    "id": 476,
    "code": "import System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile filePath lines = do\n    handle <- openFile filePath WriteMode\n    mapM_ (hPutStrLn handle) lines\n    hClose handle",
    "summary": "Writes a list of strings to a specified file, each string on a new line."
  },
  {
    "id": 477,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\srcHandle ->\n        withFile dest WriteMode $ \\destHandle -> do\n            contents <- hGetContents srcHandle\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents of one file to another using file handles for reading and writing."
  },
  {
    "id": 478,
    "code": "import System.IO\n\ncopyFileContent :: FilePath -> FilePath -> IO ()\ncopyFileContent source dest = do\n    contents <- readFile source\n    writeFile dest contents",
    "summary": "Copies the content from a source file to a destination file."
  },
  {
    "id": 479,
    "code": "import System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = withFile path WriteMode (\\handle -> mapM_ (hPutStrLn handle) lines)",
    "summary": "Writes a list of strings as separate lines to a specified file."
  },
  {
    "id": 480,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        withFile destPath WriteMode $ \\destHandle -> do\n            contents <- hGetContents sourceHandle\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents of a source file to a destination file using file handles."
  },
  {
    "id": 481,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\hSource -> do\n        contents <- hGetContents hSource\n        withFile dest WriteMode $ \\hDest -> do\n            hPutStr hDest contents\n```",
    "summary": "Copies the contents from a source file to a destination file using file handles."
  },
  {
    "id": 482,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source target = do\n    withFile source ReadMode $ \\hSource -> do\n        contents <- hGetContents hSource\n        withFile target WriteMode $ \\hTarget -> do\n            hPutStr hTarget contents\n```",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 483,
    "code": "import System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path linesToWrite = withFile path WriteMode $ \\handle -> mapM_ (hPutStrLn handle) linesToWrite",
    "summary": "Writes a list of strings to a specified file, with each string on a new line."
  },
  {
    "id": 484,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\srcHandle ->\n        withFile destPath WriteMode $ \\destHandle -> do\n            contents <- hGetContents srcHandle\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents from a source file to a destination file using Haskell's I/O operations."
  },
  {
    "id": 485,
    "code": "```haskell\nimport System.IO\n\nreadLines :: FilePath -> IO [String]\nreadLines path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    return (lines contents)\n```",
    "summary": "Reads a file and returns its contents as a list of strings, each representing a line in the file."
  },
  {
    "id": 486,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount\n```",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 487,
    "code": "```haskell\nimport System.IO\n\nreadFileLines :: FilePath -> IO [String]\nreadFileLines path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let linesOfFile = lines contents\n    return linesOfFile\n```",
    "summary": "Reads the contents of a file and returns them as a list of strings, each representing a line."
  },
  {
    "id": 488,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    content <- readFile sourcePath\n    writeFile destPath content\n```",
    "summary": "Copies contents from a source file to a destination file in Haskell."
  },
  {
    "id": 489,
    "code": "import System.IO\nimport Control.Exception\n\nreadFileLines :: FilePath -> IO (Either String [String])\nreadFileLines path = do\n    handle <- openFile path ReadMode\n    content <- try (hGetContents handle) :: IO (Either IOException String)\n    case content of\n        Left err -> return $ Left (show err)\n        Right text -> return $ Right (lines text)",
    "summary": "Reads a file's content and returns either an error message or a list of its lines."
  },
  {
    "id": 490,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    sourceHandle <- openFile sourcePath ReadMode\n    destHandle <- openFile destPath WriteMode\n    contents <- hGetContents sourceHandle\n    hPutStr destHandle contents\n    hClose sourceHandle\n    hClose destHandle\n```",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 491,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile filePath = do\n    handle <- openFile filePath ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount\n```",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 492,
    "code": "```haskell\nimport System.IO (withFile, IOMode(ReadMode), hGetContents)\n\nreadFileContents :: FilePath -> IO String\nreadFileContents path = withFile path ReadMode $ \\handle -> do\n    contents <- hGetContents handle\n    return contents\n```",
    "summary": "Reads the entire contents of a file and returns it as a string."
  },
  {
    "id": 493,
    "code": "import System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 494,
    "code": "import System.IO\n\ncopyFile :: FilePath -> FilePath -> IO ()\ncopyFile source destination = do\n    contents <- readFile source\n    writeFile destination contents",
    "summary": "This function copies the contents of a source file to a destination file."
  },
  {
    "id": 495,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        withFile destPath WriteMode $ \\destHandle -> do\n            contents <- hGetContents sourceHandle\n            hPutStr destHandle contents\n```",
    "summary": "Copies the entire contents from a source file to a destination file using file handles."
  },
  {
    "id": 496,
    "code": "import System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path linesToWrite = do\n    handle <- openFile path WriteMode\n    mapM_ (hPutStrLn handle) linesToWrite\n    hClose handle",
    "summary": "Writes a list of strings to a file, each on a new line, at the specified file path."
  },
  {
    "id": 497,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source destination = do\n    withFile source ReadMode $ \\srcHandle -> do\n        contents <- hGetContents srcHandle\n        withFile destination WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents of a source file to a destination file using file handles."
  },
  {
    "id": 498,
    "code": "```haskell\nimport System.IO\n\nreadFileLines :: FilePath -> IO [String]\nreadFileLines path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    return (lines contents)\n```",
    "summary": "Reads a file from the given path and returns its contents as a list of lines."
  },
  {
    "id": 499,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    contents <- withFile sourcePath ReadMode hGetContents\n    withFile destPath WriteMode $ \\h -> hPutStr h contents",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 500,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\srcHandle -> do\n        contents <- hGetContents srcHandle\n        withFile destPath WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents of one file to another specified file using file handles."
  },
  {
    "id": 501,
    "code": "```haskell\nimport System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = do\n    handle <- openFile path WriteMode\n    mapM_ (hPutStrLn handle) lines\n    hClose handle\n```",
    "summary": "Writes a list of strings to a specified file, each string on a new line."
  },
  {
    "id": 502,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\hSource -> do\n        withFile dest WriteMode $ \\hDest -> do\n            contents <- hGetContents hSource\n            hPutStr hDest contents",
    "summary": "This function copies the contents of one file to another specified file in Haskell."
  },
  {
    "id": 503,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        withFile destPath WriteMode $ \\destHandle -> do\n            contents <- hGetContents sourceHandle\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents of a source file to a destination file using file handles for reading and writing."
  },
  {
    "id": 504,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents src dest = do\n    contents <- readFile src\n    writeFile dest contents\n```",
    "summary": "Copies the contents of one file to another, given the source and destination file paths."
  },
  {
    "id": 505,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents\n```",
    "summary": "Copies the contents of a source file to a destination file in Haskell."
  },
  {
    "id": 506,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount\n```",
    "summary": "Counts the number of lines in a file specified by the given file path."
  },
  {
    "id": 507,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    contents <- readFile sourcePath\n    writeFile destPath contents\n```",
    "summary": "Copies the contents of a source file to a destination file in Haskell."
  },
  {
    "id": 508,
    "code": "```haskell\nimport System.IO\n\ncopyFileContent :: FilePath -> FilePath -> IO ()\ncopyFileContent sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\srcHandle -> do\n        contents <- hGetContents srcHandle\n        withFile destPath WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents of one file to another using file handles in Haskell."
  },
  {
    "id": 509,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    sourceHandle <- openFile sourcePath ReadMode\n    destHandle <- openFile destPath WriteMode\n    contents <- hGetContents sourceHandle\n    hPutStr destHandle contents\n    hClose sourceHandle\n    hClose destHandle\n```",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 510,
    "code": "import System.IO\nimport Control.Exception\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents src dst = do\n    handleSrc <- openFile src ReadMode\n    handleDst <- openFile dst WriteMode\n    contents <- hGetContents handleSrc\n    hPutStr handleDst contents\n    hClose handleSrc\n    hClose handleDst",
    "summary": "The `copyFileContents` function reads the contents of a source file and writes it to a destination file in Haskell."
  },
  {
    "id": 511,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = withFile path ReadMode $ \\handle -> do\n    contents <- hGetContents handle\n    return (length (lines contents))\n```",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 512,
    "code": "```haskell\nimport System.IO\n\nreadFileLines :: FilePath -> IO [String]\nreadFileLines path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let linesOfFile = lines contents\n    return linesOfFile\n```",
    "summary": "Reads a file from a given path and returns its contents as a list of strings, each representing a line."
  },
  {
    "id": 513,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        withFile destPath WriteMode $ \\destHandle -> do\n            contents <- hGetContents sourceHandle\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents from a source file to a destination file using file handling in Haskell."
  },
  {
    "id": 514,
    "code": "```haskell\nimport System.IO\n\nreadFileLines :: FilePath -> IO [String]\nreadFileLines path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    return (lines contents)\n```",
    "summary": "Reads a file from the specified path and returns its contents as a list of lines."
  },
  {
    "id": 515,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\hSource -> do\n        contents <- hGetContents hSource\n        withFile dest WriteMode $ \\hDest -> do\n            hPutStr hDest contents\n```",
    "summary": "Copies the entire contents of a source file to a destination file."
  },
  {
    "id": 516,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount\n```",
    "summary": "Counts the number of lines in a file specified by its file path."
  },
  {
    "id": 517,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        withFile destPath WriteMode $ \\destHandle -> do\n            contents <- hGetContents sourceHandle\n            hPutStr destHandle contents",
    "summary": "Copies the contents of one file to another specified file path."
  },
  {
    "id": 518,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    file <- openFile path ReadMode\n    contents <- hGetContents file\n    let lineCount = length (lines contents)\n    hClose file\n    return lineCount\n```",
    "summary": "Counts the number of lines in a specified file."
  },
  {
    "id": 519,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        contents <- hGetContents sourceHandle\n        writeFile destPath contents\n```",
    "summary": "Copies the contents of the source file to the destination file."
  },
  {
    "id": 520,
    "code": "```haskell\nimport System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = withFile path WriteMode (\\handle -> mapM_ (hPutStrLn handle) lines)\n```",
    "summary": "Writes a list of strings to a file, each string on a new line, using Haskell's IO operations."
  },
  {
    "id": 521,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    sourceHandle <- openFile sourcePath ReadMode\n    destHandle <- openFile destPath WriteMode\n    contents <- hGetContents sourceHandle\n    hPutStr destHandle contents\n    hClose sourceHandle\n    hClose destHandle\n```",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 522,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        contents <- hGetContents sourceHandle\n        withFile destPath WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents of a source file to a destination file using file handles in Haskell."
  },
  {
    "id": 523,
    "code": "```haskell\nimport System.IO\n\ncopyFileContent :: FilePath -> FilePath -> IO ()\ncopyFileContent src dst = do\n    withFile src ReadMode $ \\hSrc -> do\n        contents <- hGetContents hSrc\n        withFile dst WriteMode $ \\hDst -> do\n            hPutStr hDst contents\n```",
    "summary": "The function `copyFileContent` reads the contents of a source file and writes them to a destination file."
  },
  {
    "id": 524,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    content <- readFile sourcePath\n    writeFile destPath content\n```",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 525,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\hSource -> do\n        contents <- hGetContents hSource\n        withFile dest WriteMode $ \\hDest -> do\n            hPutStr hDest contents\n```",
    "summary": "Copies the contents from a source file to a destination file using file handles."
  },
  {
    "id": 526,
    "code": "import System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount",
    "summary": "Count the number of lines in a file given its file path."
  },
  {
    "id": 527,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourceFile targetFile = do\n    withFile sourceFile ReadMode $ \\sourceHandle -> \n        withFile targetFile WriteMode $ \\targetHandle -> do\n            contents <- hGetContents sourceHandle\n            hPutStr targetHandle contents\n```",
    "summary": "Copies the contents from a source file to a target file using file handles."
  },
  {
    "id": 528,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    contents <- readFile sourcePath\n    writeFile destPath contents\n```",
    "summary": "Copies the contents of a source file to a destination file in Haskell."
  },
  {
    "id": 529,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount\n```",
    "summary": "Counts the number of lines in a specified file."
  },
  {
    "id": 530,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source destination = do\n    contents <- readFile source\n    writeFile destination contents\n```",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 531,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source target = do\n    withFile source ReadMode $ \\srcHandle -> do\n        withFile target WriteMode $ \\tgtHandle -> do\n            contents <- hGetContents srcHandle\n            hPutStr tgtHandle contents",
    "summary": "This function copies the contents of one file to another specified file in Haskell."
  },
  {
    "id": 532,
    "code": "```haskell\nimport System.IO\n\nreadFileLines :: FilePath -> IO [String]\nreadFileLines path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let linesOfFile = lines contents\n    return linesOfFile\n```",
    "summary": "Reads a file and returns its contents as a list of strings, each representing a line in the file."
  },
  {
    "id": 533,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source destination = do\n    withFile source ReadMode $ \\hSource -> do\n        contents <- hGetContents hSource\n        withFile destination WriteMode $ \\hDestination -> do\n            hPutStr hDestination contents",
    "summary": "Copies the contents from a source file to a destination file using file handles."
  },
  {
    "id": 534,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourceFilePath destinationFilePath = do\n    withFile sourceFilePath ReadMode $ \\sourceHandle -> do\n        contents <- hGetContents sourceHandle\n        withFile destinationFilePath WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 535,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\hSource ->\n        withFile dest WriteMode $ \\hDest -> do\n            contents <- hGetContents hSource\n            hPutStr hDest contents",
    "summary": "This function copies the contents from a source file to a destination file."
  },
  {
    "id": 536,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    sourceHandle <- openFile sourcePath ReadMode\n    destHandle <- openFile destPath WriteMode\n    contents <- hGetContents sourceHandle\n    hPutStr destHandle contents\n    hClose sourceHandle\n    hClose destHandle\n```",
    "summary": "Copies the contents of one file to another file by reading from the source and writing to the destination."
  },
  {
    "id": 537,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents\n```",
    "summary": "Copies the contents from a source file to a destination file."
  },
  {
    "id": 538,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\srcHandle -> do\n        withFile destPath WriteMode $ \\destHandle -> do\n            contents <- hGetContents srcHandle\n            hPutStr destHandle contents",
    "summary": "Copies the contents of a source file to a destination file using Haskell's file handling functions."
  },
  {
    "id": 539,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\srcHandle -> do\n        contents <- hGetContents srcHandle\n        withFile destPath WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents",
    "summary": "Copies the contents of one file to another specified file in Haskell."
  },
  {
    "id": 540,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents src dst = do\n    contents <- readFile src\n    writeFile dst contents",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 541,
    "code": "import System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount",
    "summary": "Counts the number of lines in a specified file and returns the count as an integer."
  },
  {
    "id": 542,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source destination = do\n    withFile source ReadMode $ \\srcHandle -> do\n        contents <- hGetContents srcHandle\n        withFile destination WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents from a source file to a destination file."
  },
  {
    "id": 543,
    "code": "import System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = do\n    handle <- openFile path WriteMode\n    mapM_ (hPutStrLn handle) lines\n    hClose handle",
    "summary": "Writes a list of strings to a file, each on a new line, by opening the file in write mode."
  },
  {
    "id": 544,
    "code": "import System.IO\n\nreadFileLines :: FilePath -> IO [String]\nreadFileLines path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let linesOfFile = lines contents\n    return linesOfFile",
    "summary": "Reads a file and returns its contents as a list of lines."
  },
  {
    "id": 545,
    "code": "import System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount",
    "summary": "Counts the number of lines in a specified file and returns the total as an integer."
  },
  {
    "id": 546,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        contents <- hGetContents sourceHandle\n        writeFile destPath contents\n```",
    "summary": "Copies the contents from a source file to a destination file using file handles."
  },
  {
    "id": 547,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        contents <- hGetContents sourceHandle\n        withFile destPath WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents",
    "summary": "Copies the contents from one file to another specified file."
  },
  {
    "id": 548,
    "code": "import System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = withFile path WriteMode (\\handle -> mapM_ (hPutStrLn handle) lines)",
    "summary": "Writes a list of strings to a file, each string as a separate line."
  },
  {
    "id": 549,
    "code": "```haskell\nimport System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = withFile path WriteMode $ \\handle -> do\n    mapM_ (hPutStrLn handle) lines\n```",
    "summary": "Writes a list of strings as lines to a specified file using safe file handling in Haskell."
  },
  {
    "id": 550,
    "code": "```haskell\nimport System.IO\nimport Control.Exception (bracket)\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourceFile targetFile = \n    bracket (openFile sourceFile ReadMode) hClose $ \\srcHandle ->\n    bracket (openFile targetFile WriteMode) hClose $ \\tgtHandle -> do\n        contents <- hGetContents srcHandle\n        hPutStr tgtHandle contents\n```",
    "summary": "Copies the contents of a source file to a target file using resource management with brackets."
  },
  {
    "id": 551,
    "code": "```haskell\nimport System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path contents = do\n    handle <- openFile path WriteMode\n    mapM_ (hPutStrLn handle) contents\n    hClose handle\n```",
    "summary": "Writes a list of strings to a file, each on a new line."
  },
  {
    "id": 552,
    "code": "```haskell\nimport System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = withFile path WriteMode $ \\handle -> do\n    mapM_ (hPutStrLn handle) lines\n```",
    "summary": "Writes a list of strings to a file, each as a separate line, using the specified file path."
  },
  {
    "id": 553,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source target = do\n    contents <- readFile source\n    writeFile target contents\n```",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 554,
    "code": "```haskell\nimport System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = withFile path WriteMode $ \\handle -> do\n    mapM_ (hPutStrLn handle) lines\n```",
    "summary": "Writes a list of strings to a specified file, each string on a new line."
  },
  {
    "id": 555,
    "code": "import System.IO\n\nreadFileLines :: FilePath -> IO [String]\nreadFileLines path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let linesOfFile = lines contents\n    return linesOfFile",
    "summary": "Reads a file from the specified path and returns its contents as a list of lines."
  },
  {
    "id": 556,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        contents <- hGetContents sourceHandle\n        withFile destPath WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 557,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    contents <- readFile path\n    return $ length (lines contents)\n```",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 558,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents\n```",
    "summary": "Copies the contents from one file to another specified file path."
  },
  {
    "id": 559,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\srcHandle -> do\n        contents <- hGetContents srcHandle\n        withFile dest WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents of one file to another specified file using file handles."
  },
  {
    "id": 560,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents src dst = do\n    withFile src ReadMode $ \\hSrc -> do\n        contents <- hGetContents hSrc\n        withFile dst WriteMode $ \\hDst -> do\n            hPutStr hDst contents\n```",
    "summary": "Copies the contents of one file to another specified by source and destination file paths."
  },
  {
    "id": 561,
    "code": "import System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount",
    "summary": "Counts the number of lines in a specified file."
  },
  {
    "id": 562,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\srcHandle ->\n        withFile destPath WriteMode $ \\destHandle -> do\n            contents <- hGetContents srcHandle\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents from a source file to a destination file using file handles."
  },
  {
    "id": 563,
    "code": "```haskell\nimport System.IO\nimport Control.Exception (bracket)\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = \n  bracket (openFile sourcePath ReadMode) hClose $ \\sourceHandle ->\n    bracket (openFile destPath WriteMode) hClose $ \\destHandle ->\n      hGetContents sourceHandle >>= hPutStr destHandle\n```",
    "summary": "Copies the contents of one file to another using a safe resource management pattern."
  },
  {
    "id": 564,
    "code": "import System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = withFile path WriteMode $ \\handle -> mapM_ (hPutStrLn handle) lines",
    "summary": "Writes a list of strings as individual lines to a specified file."
  },
  {
    "id": 565,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        contents <- hGetContents sourceHandle\n        withFile destPath WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents of a source file to a destination file using file handles."
  },
  {
    "id": 566,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = withFile source ReadMode $ \\sourceHandle ->\n    withFile dest WriteMode $ \\destHandle -> do\n        contents <- hGetContents sourceHandle\n        hPutStr destHandle contents",
    "summary": "The function `copyFileContents` reads the contents from a source file and writes them to a destination file."
  },
  {
    "id": 567,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source destination = do\n    withFile source ReadMode $ \\srcHandle -> \n        withFile destination WriteMode $ \\dstHandle -> do\n            contents <- hGetContents srcHandle\n            hPutStr dstHandle contents\n```",
    "summary": "Copies the contents of a source file to a destination file using file handles."
  },
  {
    "id": 568,
    "code": "import System.IO (withFile, IOMode(ReadMode), hGetContents)\n\nreadFileContents :: FilePath -> IO String\nreadFileContents path = withFile path ReadMode hGetContents",
    "summary": "Reads the entire contents of a file specified by the given file path."
  },
  {
    "id": 569,
    "code": "import System.IO\n\nreadFileLines :: FilePath -> IO [String]\nreadFileLines path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let linesOfFile = lines contents\n    return linesOfFile",
    "summary": "This function reads a file line by line and returns the contents as a list of strings."
  },
  {
    "id": 570,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourceFile targetFile = do\n    contents <- readFile sourceFile\n    writeFile targetFile contents",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 571,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        withFile destPath WriteMode $ \\destHandle -> do\n            contents <- hGetContents sourceHandle\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents of one file to another specified file using file handles for reading and writing."
  },
  {
    "id": 572,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    contents <- readFile sourcePath\n    writeFile destPath contents\n```",
    "summary": "Copies the contents from a source file to a destination file."
  },
  {
    "id": 573,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    sourceHandle <- openFile sourcePath ReadMode\n    destHandle <- openFile destPath WriteMode\n    contents <- hGetContents sourceHandle\n    hPutStr destHandle contents\n    hClose sourceHandle\n    hClose destHandle\n```",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 574,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        withFile destPath WriteMode $ \\destHandle -> do\n            contents <- hGetContents sourceHandle\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents from a source file to a destination file using file handles."
  },
  {
    "id": 575,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source target = do\n    contents <- readFile source\n    writeFile target contents\n```",
    "summary": "Copies the contents of a source file to a target file."
  },
  {
    "id": 576,
    "code": "```haskell\nimport System.IO\n\nreadFileContents :: FilePath -> IO String\nreadFileContents path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    length contents `seq` hClose handle\n    return contents\n```",
    "summary": "Reads and returns the entire contents of a file from the specified file path."
  },
  {
    "id": 577,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents\n```",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 578,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source target = do\n    withFile source ReadMode $ \\sourceHandle -> do\n        contents <- hGetContents sourceHandle\n        withFile target WriteMode $ \\targetHandle -> do\n            hPutStr targetHandle contents",
    "summary": "Copies the contents of a source file to a target file using file handles."
  },
  {
    "id": 579,
    "code": "import System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 580,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents src dst = do\n    withFile src ReadMode $ \\srcHandle -> do\n        contents <- hGetContents srcHandle\n        withFile dst WriteMode $ \\dstHandle -> do\n            hPutStr dstHandle contents",
    "summary": "Copies the contents of one file to another using file handles."
  },
  {
    "id": 581,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\hSource -> do\n        contents <- hGetContents hSource\n        withFile dest WriteMode $ \\hDest -> do\n            hPutStr hDest contents\n```",
    "summary": "This function copies the contents from a source file to a destination file using Haskell's IO operations."
  },
  {
    "id": 582,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    withFile path ReadMode $ \\handle -> do\n        contents <- hGetContents handle\n        return (length (lines contents))\n```",
    "summary": "Counts the number of lines in a file specified by the given file path."
  },
  {
    "id": 583,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source target = do\n    withFile source ReadMode $ \\srcHandle -> do\n        contents <- hGetContents srcHandle\n        withFile target WriteMode $ \\tgtHandle -> do\n            hPutStr tgtHandle contents\n```",
    "summary": "Copies the contents of a source file to a target file using handles for reading and writing."
  },
  {
    "id": 584,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\srcHandle ->\n        withFile dest WriteMode $ \\destHandle -> do\n            contents <- hGetContents srcHandle\n            hPutStr destHandle contents\n```",
    "summary": "The function `copyFileContents` copies the contents of a source file to a destination file using Haskell's `withFile` for safe resource management."
  },
  {
    "id": 585,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents\n```",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 586,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source destination = do\n    withFile source ReadMode $ \\srcHandle -> do\n        contents <- hGetContents srcHandle\n        withFile destination WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents of a source file to a destination file using file handles in Haskell."
  },
  {
    "id": 587,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    contents <- readFile path\n    return $ length (lines contents)\n```",
    "summary": "Counts the number of lines in a file specified by the given file path."
  },
  {
    "id": 588,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount\n```",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 589,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    sourceHandle <- openFile sourcePath ReadMode\n    destHandle <- openFile destPath WriteMode\n    contents <- hGetContents sourceHandle\n    hPutStr destHandle contents\n    hClose sourceHandle\n    hClose destHandle\n```",
    "summary": "Copies the contents of one file to another using file handles for reading and writing."
  },
  {
    "id": 590,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        contents <- hGetContents sourceHandle\n        withFile destPath WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents of one file to another specified file, using Haskell's file I/O operations."
  },
  {
    "id": 591,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    contents <- readFile path\n    return $ length (lines contents)\n```",
    "summary": "Counts the number of lines in a file specified by the given file path."
  },
  {
    "id": 592,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\hSource -> do\n        contents <- hGetContents hSource\n        withFile dest WriteMode $ \\hDest -> do\n            hPutStr hDest contents\n```",
    "summary": "Copies the contents from one file to another specified by the source and destination file paths."
  },
  {
    "id": 593,
    "code": "```haskell\nimport System.IO\n\nreadFileLines :: FilePath -> IO [String]\nreadFileLines path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let linesOfFile = lines contents\n    return linesOfFile\n```",
    "summary": "Reads a file from the given path and returns its contents as a list of strings, each representing a line."
  },
  {
    "id": 594,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        contents <- hGetContents sourceHandle\n        writeFile destPath contents\n```",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 595,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents inputPath outputPath = do\n    inputHandle <- openFile inputPath ReadMode\n    outputHandle <- openFile outputPath WriteMode\n    contents <- hGetContents inputHandle\n    hPutStr outputHandle contents\n    hClose inputHandle\n    hClose outputHandle\n```",
    "summary": "Copies the contents from one file to another specified file."
  },
  {
    "id": 596,
    "code": "```haskell\nimport System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = do\n    handle <- openFile path WriteMode\n    mapM_ (hPutStrLn handle) lines\n    hClose handle\n```",
    "summary": "Writes a list of strings to a specified file, each string as a new line."
  },
  {
    "id": 597,
    "code": "import System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile filePath lines = withFile filePath WriteMode $ \\handle -> do\n    mapM_ (hPutStrLn handle) lines",
    "summary": "Writes a list of strings to a specified file, each string on a new line."
  },
  {
    "id": 598,
    "code": "import System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = withFile path WriteMode $ \\handle -> do\n    mapM_ (hPutStrLn handle) lines",
    "summary": "Writes a list of strings as separate lines to a specified file."
  },
  {
    "id": 599,
    "code": "import System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount",
    "summary": "Counts the number of lines in a file specified by the given file path."
  },
  {
    "id": 600,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\sourceHandle ->\n        withFile dest WriteMode $ \\destHandle -> do\n            contents <- hGetContents sourceHandle\n            hPutStr destHandle contents",
    "summary": "Copies the contents of a source file to a destination file using handle-based file operations."
  },
  {
    "id": 601,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount\n```",
    "summary": "Counts the number of lines in a given file specified by the file path."
  },
  {
    "id": 602,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        contents <- hGetContents sourceHandle\n        withFile destPath WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents\n```",
    "summary": "This function copies the contents from a source file to a destination file using file handles."
  },
  {
    "id": 603,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        contents <- hGetContents sourceHandle\n        writeFile destPath contents",
    "summary": "Copies the contents of one file to another specified file path."
  },
  {
    "id": 604,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents src dst = do\n    srcHandle <- openFile src ReadMode\n    dstHandle <- openFile dst WriteMode\n    contents <- hGetContents srcHandle\n    hPutStr dstHandle contents\n    hClose srcHandle\n    hClose dstHandle\n```",
    "summary": "Copies the contents of a source file to a destination file using file handles."
  },
  {
    "id": 605,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents src dst = do\n    contents <- readFile src\n    writeFile dst contents\n```",
    "summary": "Copies the contents of a source file to a destination file using Haskell's IO operations."
  },
  {
    "id": 606,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length $ lines contents\n    hClose handle\n    return lineCount\n```",
    "summary": "Counts the number of lines in a specified file and returns the count as an integer."
  },
  {
    "id": 607,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\srcHandle ->\n        withFile dest WriteMode $ \\destHandle -> do\n            contents <- hGetContents srcHandle\n            hPutStr destHandle contents",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 608,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source destination = do\n    contents <- readFile source\n    writeFile destination contents",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 609,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\srcHandle -> do\n        contents <- hGetContents srcHandle\n        withFile dest WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents of one file to another file using file handles."
  },
  {
    "id": 610,
    "code": "```haskell\nimport System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path linesToWrite = do\n    handle <- openFile path WriteMode\n    mapM_ (hPutStrLn handle) linesToWrite\n    hClose handle\n```",
    "summary": "Writes a list of strings to a specified file, each string on a new line."
  },
  {
    "id": 611,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\hSource -> do\n        contents <- hGetContents hSource\n        withFile dest WriteMode $ \\hDest -> do\n            hPutStr hDest contents\n```",
    "summary": "Copies the contents of a source file to a destination file using Haskell's IO operations."
  },
  {
    "id": 612,
    "code": "import System.IO\nimport Control.Exception (bracket)\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = bracket (openFile sourcePath ReadMode) hClose $ \\sourceHandle ->\n    bracket (openFile destPath WriteMode) hClose $ \\destHandle ->\n        hGetContents sourceHandle >>= hPutStr destHandle",
    "summary": "Copies the contents of a source file to a destination file using safe resource management."
  },
  {
    "id": 613,
    "code": "import System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = withFile path WriteMode $ \\handle -> mapM_ (hPutStrLn handle) lines",
    "summary": "Writes a list of strings to a specified file, each string on a new line."
  },
  {
    "id": 614,
    "code": "import System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 615,
    "code": "import System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount",
    "summary": "Counts the number of lines in a specified file and returns the count as an integer."
  },
  {
    "id": 616,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source target = do\n    contents <- readFile source\n    writeFile target contents",
    "summary": "Copies the contents of a source file to a target file."
  },
  {
    "id": 617,
    "code": "import System.IO\n\nreadFileLines :: FilePath -> IO [String]\nreadFileLines path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let linesOfFile = lines contents\n    length linesOfFile `seq` hClose handle\n    return linesOfFile",
    "summary": "Reads a file from the specified path and returns its contents as a list of lines."
  },
  {
    "id": 618,
    "code": "import System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = withFile path WriteMode $ \\handle -> do\n    mapM_ (hPutStrLn handle) lines",
    "summary": "Writes a list of strings to a file, each on a new line, using the specified file path."
  },
  {
    "id": 619,
    "code": "import System.IO\n\ncountLines :: FilePath -> IO Int\ncountLines path = withFile path ReadMode $ \\handle -> do\n    contents <- hGetContents handle\n    return $ length (lines contents)",
    "summary": "Counts and returns the number of lines in a file specified by the given file path."
  },
  {
    "id": 620,
    "code": "import System.IO\n\nreadFileLines :: FilePath -> IO [String]\nreadFileLines path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let linesOfText = lines contents\n    return linesOfText",
    "summary": "Reads a file from the given path and returns its contents as a list of lines."
  },
  {
    "id": 621,
    "code": "```haskell\nimport System.IO\n\nreadLines :: FilePath -> IO [String]\nreadLines path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let linesOfFile = lines contents\n    length linesOfFile `seq` hClose handle\n    return linesOfFile\n```",
    "summary": "Reads and returns all lines from a file specified by the given file path."
  },
  {
    "id": 622,
    "code": "```haskell\nimport System.IO\n\nreadFileLines :: FilePath -> IO [String]\nreadFileLines path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    return (lines contents)\n```",
    "summary": "Reads a file line-by-line and returns the result as a list of strings."
  },
  {
    "id": 623,
    "code": "```haskell\nimport System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = withFile path WriteMode $ \\handle -> do\n    mapM_ (hPutStrLn handle) lines\n```",
    "summary": "Writes a list of strings to a specified file, each string on a new line."
  },
  {
    "id": 624,
    "code": "```haskell\nimport System.IO\n\nreverseFileContents :: FilePath -> FilePath -> IO ()\nreverseFileContents inputPath outputPath = do\n    inputHandle <- openFile inputPath ReadMode\n    contents <- hGetContents inputHandle\n    let reversedContents = unlines . reverse . lines $ contents\n    writeFile outputPath reversedContents\n    hClose inputHandle\n```",
    "summary": "Reads a file, reverses the order of its lines, and writes the result to another file."
  },
  {
    "id": 625,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        contents <- hGetContents sourceHandle\n        withFile destPath WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents\n```",
    "summary": "This function copies the contents from a source file to a destination file using file handles in Haskell."
  },
  {
    "id": 626,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount\n```",
    "summary": "The `countLinesInFile` function opens a file, counts the number of lines, and returns the count."
  },
  {
    "id": 627,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source target = do\n    withFile source ReadMode $ \\srcHandle -> do\n        withFile target WriteMode $ \\tgtHandle -> do\n            contents <- hGetContents srcHandle\n            hPutStr tgtHandle contents\n```",
    "summary": "Copies the contents from a source file to a target file using file handles."
  },
  {
    "id": 628,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents src dst = do\n    withFile src ReadMode $ \\hSrc -> do\n        contents <- hGetContents hSrc\n        withFile dst WriteMode $ \\hDst -> do\n            hPutStr hDst contents\n```",
    "summary": "Copies the contents of one file to another using file handles."
  },
  {
    "id": 629,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        contents <- hGetContents sourceHandle\n        withFile destPath WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents",
    "summary": "Copies the contents of one file to another, using file paths for source and destination."
  },
  {
    "id": 630,
    "code": "import System.IO\n\ncopyFileContent :: FilePath -> FilePath -> IO ()\ncopyFileContent sourceFile targetFile = do\n    withFile sourceFile ReadMode $ \\source -> do\n        withFile targetFile WriteMode $ \\target -> do\n            hGetContents source >>= hPutStr target",
    "summary": "Copies the entire content from a source file to a target file using file handles."
  },
  {
    "id": 631,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        contents <- hGetContents sourceHandle\n        withFile destPath WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents from a source file to a destination file using file handles."
  },
  {
    "id": 632,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        contents <- hGetContents sourceHandle\n        withFile destPath WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents of a source file to a destination file using file handles."
  },
  {
    "id": 633,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\hSource -> do\n        contents <- hGetContents hSource\n        withFile dest WriteMode $ \\hDest -> do\n            hPutStr hDest contents",
    "summary": "Copies the contents from a source file to a destination file using file handles."
  },
  {
    "id": 634,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\hSource -> do\n        contents <- hGetContents hSource\n        withFile dest WriteMode $ \\hDest -> do\n            hPutStr hDest contents\n```",
    "summary": "This function copies the contents of a source file to a destination file in Haskell using file handles."
  },
  {
    "id": 635,
    "code": "import System.IO\n\nreadFileLines :: FilePath -> IO [String]\nreadFileLines path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let linesOfFiles = lines contents\n    return linesOfFiles",
    "summary": "Reads a file and returns its contents as a list of strings, each representing a line."
  },
  {
    "id": 636,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    sourceHandle <- openFile sourcePath ReadMode\n    destHandle <- openFile destPath WriteMode\n    contents <- hGetContents sourceHandle\n    hPutStr destHandle contents\n    hClose sourceHandle\n    hClose destHandle",
    "summary": "Copies the contents from a source file to a destination file."
  },
  {
    "id": 637,
    "code": "```haskell\nimport System.IO\n\ncopyFileContent :: FilePath -> FilePath -> IO ()\ncopyFileContent sourcePath targetPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        withFile targetPath WriteMode $ \\targetHandle -> do\n            contents <- hGetContents sourceHandle\n            hPutStr targetHandle contents\n```",
    "summary": "This function copies the content from a source file to a target file using Haskell's file I/O operations."
  },
  {
    "id": 638,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents\n```",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 639,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source destination = do\n    withFile source ReadMode $ \\srcHandle ->\n        withFile destination WriteMode $ \\dstHandle -> do\n            contents <- hGetContents srcHandle\n            hPutStr dstHandle contents\n```",
    "summary": "Copies the contents from a source file to a destination file using Haskell's IO operations."
  },
  {
    "id": 640,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\sourceHandle -> do\n        contents <- hGetContents sourceHandle\n        withFile dest WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 641,
    "code": "import System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount",
    "summary": "Counts and returns the number of lines in a given file."
  },
  {
    "id": 642,
    "code": "import System.IO\n\ncopyFileContent :: FilePath -> FilePath -> IO ()\ncopyFileContent source target = do\n    contents <- readFile source\n    writeFile target contents",
    "summary": "Copies the content from a source file to a target file."
  },
  {
    "id": 643,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount\n```",
    "summary": "Counts the number of lines in a specified file and returns the count as an integer."
  },
  {
    "id": 644,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount\n```",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 645,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source target = do\n    contents <- readFile source\n    writeFile target contents",
    "summary": "Copies the contents from one file to another specified file."
  },
  {
    "id": 646,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\hSource -> do\n        contents <- hGetContents hSource\n        withFile dest WriteMode $ \\hDest -> do\n            hPutStr hDest contents",
    "summary": "Copies the contents from a source file to a destination file using file handles."
  },
  {
    "id": 647,
    "code": "import System.IO\n\nreadFileLines :: FilePath -> IO [String]\nreadFileLines path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    return (lines contents)",
    "summary": "Reads a file and returns its contents as a list of lines."
  },
  {
    "id": 648,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    return $ length (lines contents)\n```",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 649,
    "code": "import System.IO\n\nreadFileLines :: FilePath -> IO [String]\nreadFileLines path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    return (lines contents)",
    "summary": "Reads a file and returns its contents as a list of lines."
  },
  {
    "id": 650,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        contents <- hGetContents sourceHandle\n        withFile destPath WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 651,
    "code": "```haskell\nimport System.IO\n\nreadFileLines :: FilePath -> IO [String]\nreadFileLines path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    return (lines contents)\n```",
    "summary": "Reads a file from the given file path and returns its contents as a list of lines."
  },
  {
    "id": 652,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> \n        withFile destPath WriteMode $ \\destHandle -> do\n            contents <- hGetContents sourceHandle\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents of a source file to a destination file using file handles."
  },
  {
    "id": 653,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    sourceHandle <- openFile sourcePath ReadMode\n    destHandle <- openFile destPath WriteMode\n    contents <- hGetContents sourceHandle\n    hPutStr destHandle contents\n    hClose sourceHandle\n    hClose destHandle\n```",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 654,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        contents <- hGetContents sourceHandle\n        withFile destPath WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents of a source file to a destination file using file handles."
  },
  {
    "id": 655,
    "code": "```haskell\nimport System.IO\n\nreadFileLines :: FilePath -> IO [String]\nreadFileLines path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let linesOfFile = lines contents\n    length linesOfFile `seq` hClose handle\n    return linesOfFile\n```",
    "summary": "Reads a file specified by the file path and returns its contents as a list of lines."
  },
  {
    "id": 656,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = withFile path ReadMode $ \\handle -> do\n    contents <- hGetContents handle\n    return $ length (lines contents)\n```",
    "summary": "Counts the number of lines in a file given its file path."
  },
  {
    "id": 657,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source destination = do\n    contents <- readFile source\n    writeFile destination contents",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 658,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle ->\n        withFile destPath WriteMode $ \\destHandle ->\n            hGetContents sourceHandle >>= hPutStr destHandle",
    "summary": "Copies the contents of one file to another using file handles."
  },
  {
    "id": 659,
    "code": "import System.IO\n\nreadFileLines :: FilePath -> IO [String]\nreadFileLines path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let linesOfFile = lines contents\n    -- Force evaluation of file contents\n    length linesOfFile `seq` hClose handle\n    return linesOfFile",
    "summary": "Reads a file specified by its file path and returns its contents as a list of lines."
  },
  {
    "id": 660,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source destination = do\n    withFile source ReadMode $ \\srcHandle -> do\n        withFile destination WriteMode $ \\destHandle -> do\n            contents <- hGetContents srcHandle\n            hPutStr destHandle contents",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 661,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount\n```",
    "summary": "Counts the number of lines in a specified file."
  },
  {
    "id": 662,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount\n```",
    "summary": "Counts the number of lines in a specified file."
  },
  {
    "id": 663,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents\n```",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 664,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        withFile destPath WriteMode $ \\destHandle -> do\n            contents <- hGetContents sourceHandle\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents from a source file to a destination file using file handles."
  },
  {
    "id": 665,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\hSource -> do\n        contents <- hGetContents hSource\n        withFile dest WriteMode $ \\hDest -> do\n            hPutStr hDest contents\n```",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 666,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents\n```",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 667,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    sourceHandle <- openFile sourcePath ReadMode\n    destHandle <- openFile destPath WriteMode\n    contents <- hGetContents sourceHandle\n    hPutStr destHandle contents\n    hClose sourceHandle\n    hClose destHandle\n```",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 668,
    "code": "import System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = do\n    handle <- openFile path WriteMode\n    mapM_ (hPutStrLn handle) lines\n    hClose handle",
    "summary": "Writes a list of strings to a specified file, each string on a new line."
  },
  {
    "id": 669,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        contents <- hGetContents sourceHandle\n        withFile destPath WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents from a source file to a destination file using file handles."
  },
  {
    "id": 670,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n  withFile source ReadMode $ \\hSource ->\n    withFile dest WriteMode $ \\hDest -> do\n      contents <- hGetContents hSource\n      hPutStr hDest contents",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 671,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents src dest = do\n    contents <- readFile src\n    writeFile dest contents\n```",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 672,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount\n```",
    "summary": "Counts the number of lines in a file specified by the given file path."
  },
  {
    "id": 673,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\hSource -> do\n        contents <- hGetContents hSource\n        withFile dest WriteMode $ \\hDest -> do\n            hPutStr hDest contents\n```",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 674,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\srcHandle -> do\n        withFile dest WriteMode $ \\destHandle -> do\n            contents <- hGetContents srcHandle\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents from a source file to a destination file using file handles."
  },
  {
    "id": 675,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        withFile destPath WriteMode $ \\destHandle -> do\n            contents <- hGetContents sourceHandle\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents from a source file to a destination file using file handles."
  },
  {
    "id": 676,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\hSource -> do\n        contents <- hGetContents hSource\n        withFile dest WriteMode $ \\hDest -> do\n            hPutStr hDest contents\n```",
    "summary": "Copies the contents of a source file to a destination file using file handles."
  },
  {
    "id": 677,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\hSource -> do\n        contents <- hGetContents hSource\n        withFile dest WriteMode $ \\hDest -> do\n            hPutStr hDest contents\n```",
    "summary": "Copies the contents from a source file to a destination file using Haskell's file handling functions."
  },
  {
    "id": 678,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount\n```",
    "summary": "Counts the number of lines in a file specified by the given file path."
  },
  {
    "id": 679,
    "code": "import System.IO\nimport Control.Exception (bracket)\n\nreadFileLines :: FilePath -> IO [String]\nreadFileLines path = bracket (openFile path ReadMode) hClose hGetLines\n\nhGetLines :: Handle -> IO [String]\nhGetLines h = do\n    eof <- hIsEOF h\n    if eof\n        then return []\n        else do\n            line <- hGetLine h\n            rest <- hGetLines h\n            return (line : rest)",
    "summary": "This function reads all lines from a file and returns them as a list of strings."
  },
  {
    "id": 680,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    contents <- readFile path\n    return $ length (lines contents)\n```",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 681,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source target = do\n    contents <- readFile source\n    writeFile target contents\n```",
    "summary": "Copies the contents of one file to another specified file in Haskell."
  },
  {
    "id": 682,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents inputFile outputFile = do\n    withFile inputFile ReadMode $ \\inputHandle ->\n        withFile outputFile WriteMode $ \\outputHandle -> do\n            contents <- hGetContents inputHandle\n            hPutStr outputHandle contents\n```",
    "summary": "Copies the contents of one file to another using file handles in Haskell."
  },
  {
    "id": 683,
    "code": "import System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount",
    "summary": "Counts the number of lines in a given file and returns the count as an integer."
  },
  {
    "id": 684,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents src dst = do\n    contents <- readFile src\n    writeFile dst contents\n```",
    "summary": "Copies the contents of one file to another using the specified source and destination file paths."
  },
  {
    "id": 685,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        contents <- hGetContents sourceHandle\n        withFile destPath WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents of a source file to a destination file using file handles."
  },
  {
    "id": 686,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile filePath = do\n    handle <- openFile filePath ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount\n```",
    "summary": "Counts the number of lines in a specified file."
  },
  {
    "id": 687,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    sourceHandle <- openFile sourcePath ReadMode\n    destHandle <- openFile destPath WriteMode\n    contents <- hGetContents sourceHandle\n    hPutStr destHandle contents\n    hClose sourceHandle\n    hClose destHandle\n```",
    "summary": "Copies the contents of one file to another specified file."
  },
  {
    "id": 688,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    content <- readFile source\n    writeFile dest content\n```",
    "summary": "Copies the contents of one file to another specified file path."
  },
  {
    "id": 689,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        contents <- hGetContents sourceHandle\n        withFile destPath WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents of one file to another specified file using file handles."
  },
  {
    "id": 690,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents\n```",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 691,
    "code": "```haskell\nimport System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = withFile path WriteMode (\\handle -> mapM_ (hPutStrLn handle) lines)\n```",
    "summary": "Writes a list of strings to a specified file, each string on a new line."
  },
  {
    "id": 692,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    contents <- readFile source\n    writeFile dest contents\n```",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 693,
    "code": "```haskell\nimport System.IO\n\nreadFileLines :: FilePath -> IO [String]\nreadFileLines path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let linesOfFile = lines contents\n    length linesOfFile `seq` hClose handle\n    return linesOfFile\n```",
    "summary": "Reads a file from the given path and returns its contents as a list of lines."
  },
  {
    "id": 694,
    "code": "import System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents source dest = do\n    withFile source ReadMode $ \\hSource -> do\n        contents <- hGetContents hSource\n        withFile dest WriteMode $ \\hDest -> do\n            hPutStr hDest contents",
    "summary": "Copies the contents of a source file to a destination file."
  },
  {
    "id": 695,
    "code": "import System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = withFile path WriteMode $ \\handle -> do\n    mapM_ (hPutStrLn handle) lines",
    "summary": "Writes a list of strings to a file, each string as a separate line."
  },
  {
    "id": 696,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> do\n        contents <- hGetContents sourceHandle\n        withFile destPath WriteMode $ \\destHandle -> do\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents of a file from a source path to a destination path."
  },
  {
    "id": 697,
    "code": "```haskell\nimport System.IO\n\nreadFileContents :: FilePath -> IO String\nreadFileContents path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    return contents\n```",
    "summary": "Reads the entire contents of a file specified by the given file path and returns it as a string."
  },
  {
    "id": 698,
    "code": "```haskell\nimport System.IO\n\ncountLinesInFile :: FilePath -> IO Int\ncountLinesInFile path = do\n    handle <- openFile path ReadMode\n    contents <- hGetContents handle\n    let lineCount = length (lines contents)\n    hClose handle\n    return lineCount\n```",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 699,
    "code": "```haskell\nimport System.IO\n\nwriteLinesToFile :: FilePath -> [String] -> IO ()\nwriteLinesToFile path lines = withFile path WriteMode $ \\handle -> do\n  mapM_ (hPutStrLn handle) lines\n```",
    "summary": "Writes a list of strings to a specified file, each string on a new line."
  },
  {
    "id": 700,
    "code": "```haskell\nimport System.IO\n\ncopyFileContents :: FilePath -> FilePath -> IO ()\ncopyFileContents sourcePath destPath = do\n    withFile sourcePath ReadMode $ \\sourceHandle -> \n        withFile destPath WriteMode $ \\destHandle -> do\n            contents <- hGetContents sourceHandle\n            hPutStr destHandle contents\n```",
    "summary": "Copies the contents from a source file to a destination file using file handles in Haskell."
  }
]