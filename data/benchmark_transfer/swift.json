[
  {
    "id": 1,
    "code": "import Foundation\n\nfunc readFileContents(at path: String) -> String? {\n    do {\n        let contents = try String(contentsOfFile: path, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a file at a specified path as a string, handling errors gracefully."
  },
  {
    "id": 2,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}\n```",
    "summary": "Reads and returns the contents of a text file at the specified path using UTF-8 encoding."
  },
  {
    "id": 3,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    guard let fileURL = URL(string: path) else { return nil }\n    do {\n        let contents = try String(contentsOf: fileURL, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads the contents of a text file from a given path and returns it as a string."
  },
  {
    "id": 4,
    "code": "import Foundation\n\nfunc readTextFileContents(at filePath: String) -> String? {\n    let fileURL = URL(fileURLWithPath: filePath)\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(filePath): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a text file at a given path, handling errors gracefully."
  },
  {
    "id": 5,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "This function reads the contents of a text file at a specified path and returns it as a String, using UTF-8 encoding."
  },
  {
    "id": 6,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    guard FileManager.default.fileExists(atPath: path) else {\n        return nil\n    }\n    \n    do {\n        let content = try String(contentsOfFile: path, encoding: .utf8)\n        return content\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads the content of a text file at a given path and returns it as a string, or nil if the file doesn't exist or can't be read."
  },
  {
    "id": 7,
    "code": "```swift\nimport Foundation\n\nfunc readFileContents(atPath path: String) -> String? {\n    let fileManager = FileManager.default\n    guard fileManager.fileExists(atPath: path) else {\n        return nil\n    }\n    \n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a file at a specified path as a UTF-8 string, or nil if the file does not exist or an error occurs."
  },
  {
    "id": 8,
    "code": "```swift\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file at the given path as a String, or nil if an error occurs."
  },
  {
    "id": 9,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    guard let fileURL = URL(string: path) else { return nil }\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 10,
    "code": "```swift\nfunc readTextFileContents(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a specified path using UTF-8 encoding, or nil if an error occurs."
  },
  {
    "id": 11,
    "code": "func readTextFile(atPath path: String) -> String? {\n    guard let fileURL = URL(string: path) else {\n        return nil\n    }\n    \n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads the contents of a text file located at a given path and returns it as a String."
  },
  {
    "id": 12,
    "code": "```swift\nimport Foundation\n\nfunc readLines(from filePath: String) throws -> [String] {\n    let fileURL = URL(fileURLWithPath: filePath)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents.components(separatedBy: .newlines)\n}\n```",
    "summary": "Reads a file's content from the given path and returns an array of its lines."
  },
  {
    "id": 13,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a specified path."
  },
  {
    "id": 14,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    guard FileManager.default.fileExists(atPath: path) else {\n        print(\"File does not exist at path: \\(path)\")\n        return nil\n    }\n    \n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at path: \\(path), error: \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads the contents of a text file at a given path and returns it as a String, handling errors gracefully."
  },
  {
    "id": 15,
    "code": "```swift\nfunc readLinesFromFile(atPath path: String) -> [String]? {\n    guard let fileContent = try? String(contentsOfFile: path, encoding: .utf8) else {\n        return nil\n    }\n    return fileContent.components(separatedBy: .newlines)\n}\n```",
    "summary": "Reads all lines from a file at the specified path and returns them as an array of strings."
  },
  {
    "id": 16,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let fileURL = URL(fileURLWithPath: path)\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file at the specified path, or nil if an error occurs."
  },
  {
    "id": 17,
    "code": "import Foundation\n\nfunc readFileContents(atPath path: String) -> String? {\n    let fileManager = FileManager.default\n    guard fileManager.fileExists(atPath: path) else {\n        print(\"File does not exist at the given path.\")\n        return nil\n    }\n    \n    do {\n        let contents = try String(contentsOfFile: path, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Failed to read file contents: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads the contents of a file at a given path and returns it as a string if the file exists."
  },
  {
    "id": 18,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}",
    "summary": "This function reads the contents of a text file at a given path and returns it as a String, or nil if an error occurs."
  },
  {
    "id": 19,
    "code": "import Foundation\n\nfunc readLines(from filePath: String) -> [String]? {\n    do {\n        let fileContents = try String(contentsOfFile: filePath, encoding: .utf8)\n        return fileContents.components(separatedBy: .newlines).filter { !$0.isEmpty }\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads a file at the given path and returns an array of non-empty lines as strings."
  },
  {
    "id": 20,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}",
    "summary": "This function reads the contents of a text file at a given path and returns it as a String."
  },
  {
    "id": 21,
    "code": "```swift\nimport Foundation\n\nfunc writeTextToFile(text: String, to filename: String) throws {\n    let fileURL = FileManager.default.temporaryDirectory.appendingPathComponent(filename)\n    do {\n        try text.write(to: fileURL, atomically: true, encoding: .utf8)\n    } catch {\n        throw error\n    }\n}\n```",
    "summary": "Writes a given text string to a specified file in the temporary directory, handling potential errors."
  },
  {
    "id": 22,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}\n```",
    "summary": "Reads the contents of a text file at a given path and returns it as a String."
  },
  {
    "id": 23,
    "code": "```swift\nimport Foundation\n\nfunc readLinesFromFile(at path: String) throws -> [String] {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents.components(separatedBy: .newlines).filter { !$0.isEmpty }\n}\n```",
    "summary": "This function reads a file from a given path and returns its non-empty lines as an array of strings."
  },
  {
    "id": 24,
    "code": "import Foundation\n\nfunc readFileContents(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let contents = try String(contentsOf: fileURL, encoding: .utf8)\n    return contents\n}",
    "summary": "This function reads and returns the contents of a file at a specified path using UTF-8 encoding."
  },
  {
    "id": 25,
    "code": "```swift\nimport Foundation\n\nfunc readFileContents(from filePath: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: filePath)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}\n```",
    "summary": "This function reads and returns the contents of a file at the specified path as a UTF-8 encoded string."
  },
  {
    "id": 26,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "This function reads the contents of a text file at a specified path and returns it as a string."
  },
  {
    "id": 27,
    "code": "```swift\nimport Foundation\n\nfunc writeTextToFile(text: String, to fileName: String) throws {\n    let fileManager = FileManager.default\n    let currentDirectoryPath = fileManager.currentDirectoryPath\n    let filePath = (currentDirectoryPath as NSString).appendingPathComponent(fileName)\n    \n    do {\n        try text.write(toFile: filePath, atomically: true, encoding: .utf8)\n    } catch {\n        throw error\n    }\n}\n```",
    "summary": "This function writes a given string to a specified file in the current directory, using UTF-8 encoding."
  },
  {
    "id": 28,
    "code": "```swift\nimport Foundation\n\nfunc readFileContents(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}\n```",
    "summary": "This function reads and returns the contents of a file at a specified path as a UTF-8 encoded string."
  },
  {
    "id": 29,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "This function reads the contents of a text file at a given path and returns it as a String."
  },
  {
    "id": 30,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Failed to read file: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "The function reads and returns the contents of a text file at a specified path."
  },
  {
    "id": 31,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "This function reads the contents of a text file at a specified path and returns it as a string."
  },
  {
    "id": 32,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    guard FileManager.default.fileExists(atPath: path) else {\n        print(\"File does not exist at path: \\(path)\")\n        return nil\n    }\n    \n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at path: \\(path), error: \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file at a given path, handling errors gracefully."
  },
  {
    "id": 33,
    "code": "```swift\nfunc readFileContents(atPath path: String) -> String? {\n    do {\n        let contents = try String(contentsOfFile: path, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads the contents of a file at a specified path and returns it as a String or nil if an error occurs."
  },
  {
    "id": 34,
    "code": "```swift\nfunc readFileContents(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Failed to read file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a file at a specified path, or nil if an error occurs."
  },
  {
    "id": 35,
    "code": "```swift\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file at the specified path, or nil if an error occurs."
  },
  {
    "id": 36,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    guard let fileURL = URL(string: path) else { return nil }\n    do {\n        let contents = try String(contentsOf: fileURL, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the content of a text file at a given path as a String, or nil if an error occurs."
  },
  {
    "id": 37,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a given path, handling errors gracefully."
  },
  {
    "id": 38,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}\n```",
    "summary": "This function reads the contents of a text file at a given path and returns it as a UTF-8 string."
  },
  {
    "id": 39,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads and returns the contents of a text file at a given path as a String, handling any errors that occur."
  },
  {
    "id": 40,
    "code": "```swift\nfunc readTextFile(at path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading the file: \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads the contents of a text file from a specified path and returns it as a String."
  },
  {
    "id": 41,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "Reads and returns the contents of a text file at a specified path as a String."
  },
  {
    "id": 42,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a given path as a String."
  },
  {
    "id": 43,
    "code": "import Foundation\n\nfunc readFileContents(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}",
    "summary": "This function reads the contents of a file at a given path and returns it as a String."
  },
  {
    "id": 44,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let contents = try String(contentsOfFile: path, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads and returns the contents of a text file at a specified path, handling errors if the process fails."
  },
  {
    "id": 45,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    guard FileManager.default.fileExists(atPath: path) else {\n        throw NSError(domain: \"FileError\", code: 404, userInfo: [NSLocalizedDescriptionKey: \"File not found\"])\n    }\n    return try String(contentsOfFile: path, encoding: .utf8)\n}",
    "summary": "This function reads the contents of a text file at a specified path and returns it as a String, throwing an error if the file does not exist."
  },
  {
    "id": 46,
    "code": "```swift\nimport Foundation\n\nfunc readLinesFromFile(at path: String) -> [String]? {\n    guard let fileContent = try? String(contentsOfFile: path, encoding: .utf8) else {\n        return nil\n    }\n    return fileContent.components(separatedBy: .newlines)\n}\n```",
    "summary": "Reads the content of a file at a given path and returns an array of its lines."
  },
  {
    "id": 47,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a specified path using UTF-8 encoding, handling errors gracefully."
  },
  {
    "id": 48,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "This function reads the contents of a text file at a specified path and returns it as a String."
  },
  {
    "id": 49,
    "code": "```swift\nfunc readFileContents(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads the content of a file at a given path and returns it as a string, handling errors if they occur."
  },
  {
    "id": 50,
    "code": "```swift\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a given path, handling errors gracefully."
  },
  {
    "id": 51,
    "code": "```swift\nfunc readFileContents(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "Reads the contents of a file at the specified path and returns it as a String."
  },
  {
    "id": 52,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    guard let fileURL = URL(string: path) else {\n        return nil\n    }\n    \n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file at a given path, or nil if an error occurs."
  },
  {
    "id": 53,
    "code": "```swift\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file at a specified path, or nil if an error occurs."
  },
  {
    "id": 54,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}",
    "summary": "This function reads and returns the contents of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 55,
    "code": "import Foundation\n\nfunc readTextFileContents(atPath path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let contents = try String(contentsOf: fileURL, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}",
    "summary": "This function reads the contents of a text file at a given path and returns it as a string."
  },
  {
    "id": 56,
    "code": "```swift\nimport Foundation\n\nfunc writeStringToFile(_ content: String, atPath path: String) throws {\n    let fileURL = URL(fileURLWithPath: path)\n    try content.write(to: fileURL, atomically: true, encoding: .utf8)\n}\n```",
    "summary": "This function writes a given string to a specified file path using UTF-8 encoding, throwing an error if the operation fails."
  },
  {
    "id": 57,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    let fileManager = FileManager.default\n    guard fileManager.fileExists(atPath: path) else {\n        print(\"File does not exist at path: \\(path)\")\n        return nil\n    }\n    \n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Failed to read file at path: \\(path), error: \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a specified path, handling errors if the file does not exist or cannot be read."
  },
  {
    "id": 58,
    "code": "```swift\nfunc writeStringToFile(_ content: String, to filePath: String) throws {\n    let fileURL = URL(fileURLWithPath: filePath)\n    do {\n        try content.write(to: fileURL, atomically: true, encoding: .utf8)\n    } catch {\n        throw error\n    }\n}\n```",
    "summary": "Writes a given string to a specified file path using UTF-8 encoding."
  },
  {
    "id": 59,
    "code": "```swift\nimport Foundation\n\nfunc readContentsOfFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "This function reads and returns the contents of a file at a given path as a string using UTF-8 encoding."
  },
  {
    "id": 60,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        throw error\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file at a given path using UTF-8 encoding."
  },
  {
    "id": 61,
    "code": "```swift\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}\n```",
    "summary": "Reads the contents of a text file at a given path and returns it as a string."
  },
  {
    "id": 62,
    "code": "```swift\nimport Foundation\n\nfunc writeStringToFile(_ string: String, to filePath: String) throws {\n    let url = URL(fileURLWithPath: filePath)\n    try string.write(to: url, atomically: true, encoding: .utf8)\n}\n```",
    "summary": "This function writes a given string to a specified file path using UTF-8 encoding."
  },
  {
    "id": 63,
    "code": "func readTextFile(at path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads the contents of a text file at a specified path and returns it as a String, handling errors if the file can't be read."
  },
  {
    "id": 64,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(from filePath: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: filePath)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "This function reads the contents of a text file at a given file path and returns it as a string."
  },
  {
    "id": 65,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}\n```",
    "summary": "This function reads and returns the contents of a text file as a String from a specified file path using UTF-8 encoding."
  },
  {
    "id": 66,
    "code": "```swift\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads the contents of a text file at a specified path and returns it as a string, handling errors gracefully."
  },
  {
    "id": 67,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    guard let fileURL = URL(string: path) else { return nil }\n    do {\n        let contents = try String(contentsOf: fileURL, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file at the specified path, or nil if an error occurs."
  },
  {
    "id": 68,
    "code": "```swift\nimport Foundation\n\nfunc readFileContents(at path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads the contents of a file at a given path and returns it as a String, handling errors if the file cannot be read."
  },
  {
    "id": 69,
    "code": "```swift\nfunc readTextFileContents(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file at a specified path, handling errors if the file cannot be read."
  },
  {
    "id": 70,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}",
    "summary": "This function reads and returns the contents of a text file at a given path or prints an error if reading fails."
  },
  {
    "id": 71,
    "code": "```swift\nfunc readFileContents(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads the contents of a file at a given path and returns it as a string, handling any errors that may occur."
  },
  {
    "id": 72,
    "code": "```swift\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads the contents of a text file at a specified path and returns it as a String, or nil if an error occurs."
  },
  {
    "id": 73,
    "code": "```swift\nimport Foundation\n\nfunc readLines(from filePath: String) -> [String]? {\n    guard let fileURL = URL(string: filePath) else { return nil }\n    \n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents.components(separatedBy: .newlines)\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads a file at the given path and returns its contents as an array of lines, or nil if an error occurs."
  },
  {
    "id": 74,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file at the specified path, handling errors if the operation fails."
  },
  {
    "id": 75,
    "code": "```swift\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "This function reads and returns the contents of a text file from a specified path."
  },
  {
    "id": 76,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a given path using UTF-8 encoding."
  },
  {
    "id": 77,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    guard let fileURL = URL(string: path) else {\n        print(\"Invalid file path.\")\n        return nil\n    }\n    \n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Failed to read file: \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads the contents of a text file from a given path and returns it as a string."
  },
  {
    "id": 78,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let contents = try String(contentsOf: fileURL, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads and returns the contents of a text file at a given path as a String, handling any read errors."
  },
  {
    "id": 79,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let contents = try String(contentsOf: fileURL, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads the contents of a text file at a specified path and returns it as a String, handling errors gracefully."
  },
  {
    "id": 80,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}\n```",
    "summary": "This function reads the content of a text file at a specified path and returns it as a string."
  },
  {
    "id": 81,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "Reads and returns the content of a text file at a given path using UTF-8 encoding."
  },
  {
    "id": 82,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    guard FileManager.default.fileExists(atPath: path) else {\n        print(\"File does not exist at path: \\(path)\")\n        return nil\n    }\n    \n    do {\n        let contents = try String(contentsOfFile: path, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Failed to read file at path \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads the contents of a text file at a given path and returns it as a string, handling file existence and read errors."
  },
  {
    "id": 83,
    "code": "import Foundation\n\nfunc readFileContents(atPath path: String) -> String? {\n    let fileManager = FileManager.default\n    guard fileManager.fileExists(atPath: path) else {\n        return nil\n    }\n    \n    do {\n        let contents = try String(contentsOfFile: path, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a file at a given path, or nil if the file doesn't exist."
  },
  {
    "id": 84,
    "code": "```swift\nimport Foundation\n\nfunc readLinesFromFile(at path: String) -> [String]? {\n    guard let fileContents = try? String(contentsOfFile: path) else {\n        return nil\n    }\n    return fileContents.components(separatedBy: .newlines).filter { !$0.isEmpty }\n}\n```",
    "summary": "Reads a file from the specified path and returns its non-empty lines as an array of strings."
  },
  {
    "id": 85,
    "code": "```swift\nimport Foundation\n\nfunc readFileContents(at path: String) -> String? {\n    let fileManager = FileManager.default\n    guard fileManager.fileExists(atPath: path),\n          let data = fileManager.contents(atPath: path),\n          let contents = String(data: data, encoding: .utf8) else {\n        return nil\n    }\n    return contents\n}\n```",
    "summary": "This function reads and returns the contents of a file at a given path as a UTF-8 string, or returns nil if the file doesn't exist or can't be read."
  },
  {
    "id": 86,
    "code": "```swift\nfunc readFileContents(at path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads the contents of a file at a given path and returns it as a String, handling errors if reading fails."
  },
  {
    "id": 87,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a text file at the specified path, or nil if an error occurs."
  },
  {
    "id": 88,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads the contents of a text file at a specified path and returns it as a String, or nil if an error occurs."
  },
  {
    "id": 89,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}",
    "summary": "Reads the contents of a text file at a specified path and returns it as a string."
  },
  {
    "id": 90,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let contents = try String(contentsOf: fileURL, encoding: .utf8)\n    return contents\n}",
    "summary": "This function reads and returns the contents of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 91,
    "code": "```swift\nimport Foundation\n\nfunc readFileContents(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "Reads and returns the contents of a file at a specified path as a UTF-8 string."
  },
  {
    "id": 92,
    "code": "func readFileContents(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}",
    "summary": "This function reads and returns the contents of a file at a specified path using UTF-8 encoding."
  },
  {
    "id": 93,
    "code": "```swift\nimport Foundation\n\nfunc readFileContents(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads and returns the contents of a file at a given path as a string, handling errors if the file cannot be read."
  },
  {
    "id": 94,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "Reads the contents of a text file at a given path and returns it as a String."
  },
  {
    "id": 95,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "Reads and returns the contents of a text file located at the specified path using UTF-8 encoding."
  },
  {
    "id": 96,
    "code": "```swift\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file: \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads the contents of a text file at a given path and returns it as a String, or nil if an error occurs."
  },
  {
    "id": 97,
    "code": "```swift\nfunc readLinesFromFile(atPath path: String) -> [String]? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents.components(separatedBy: .newlines)\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads a file at the specified path and returns its contents as an array of lines."
  },
  {
    "id": 98,
    "code": "import Foundation\n\nfunc readTextFile(at filePath: String) -> String? {\n    let fileManager = FileManager.default\n    guard fileManager.fileExists(atPath: filePath) else {\n        return nil\n    }\n    \n    do {\n        let contents = try String(contentsOfFile: filePath, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at \\(filePath): \\(error)\")\n        return nil\n    }\n}",
    "summary": "This function reads and returns the contents of a text file at a specified file path, or nil if the file does not exist."
  },
  {
    "id": 99,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}",
    "summary": "This function reads and returns the contents of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 100,
    "code": "```swift\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a specified path, handling any read errors gracefully."
  },
  {
    "id": 101,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file at a specified path, handling errors if the file cannot be read."
  },
  {
    "id": 102,
    "code": "```swift\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "This function reads and returns the contents of a text file located at a specified path using UTF-8 encoding."
  },
  {
    "id": 103,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let content = try String(contentsOf: fileURL, encoding: .utf8)\n        return content\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads and returns the content of a text file at a given path, handling errors if the file cannot be read."
  },
  {
    "id": 104,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads the contents of a text file at the specified path and returns it as a string, or nil if an error occurs."
  },
  {
    "id": 105,
    "code": "```swift\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a given path, handling errors if the file cannot be read."
  },
  {
    "id": 106,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads and returns the contents of a text file at a given path using UTF-8 encoding, or prints an error message if it fails."
  },
  {
    "id": 107,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let contents = try String(contentsOf: fileURL, encoding: .utf8)\n    return contents\n}\n```",
    "summary": "This function reads the contents of a text file at a specified path and returns it as a string."
  },
  {
    "id": 108,
    "code": "```swift\nfunc readFileContents(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "This function reads and returns the contents of a file at a specified path using UTF-8 encoding."
  },
  {
    "id": 109,
    "code": "```swift\nfunc readFileContents(atPath path: String) -> String? {\n    guard let fileURL = URL(string: path) else { return nil }\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads and returns the contents of a file at a given path as a string, handling errors if the file cannot be read."
  },
  {
    "id": 110,
    "code": "```swift\nimport Foundation\n\nfunc readLinesFromFile(at path: String) -> [String]? {\n    guard let fileContents = try? String(contentsOfFile: path, encoding: .utf8) else {\n        return nil\n    }\n    return fileContents.components(separatedBy: .newlines).filter { !$0.isEmpty }\n}\n```",
    "summary": "This function reads a file from a given path and returns its non-empty lines as an array of strings."
  },
  {
    "id": 111,
    "code": "```swift\nfunc readTextFile(atPath path: String) throws -> String {\n    guard FileManager.default.fileExists(atPath: path) else {\n        throw NSError(domain: \"FileErrorDomain\", code: 1, userInfo: [NSLocalizedDescriptionKey: \"File does not exist\"])\n    }\n    return try String(contentsOfFile: path, encoding: .utf8)\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a specified path, throwing an error if the file does not exist."
  },
  {
    "id": 112,
    "code": "```swift\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "Reads the contents of a text file at a specified path and returns it as a String."
  },
  {
    "id": 113,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let contents = try String(contentsOf: fileURL, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a specified path, handling any read errors."
  },
  {
    "id": 114,
    "code": "```swift\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}\n```",
    "summary": "This function reads the contents of a text file at a specified path and returns it as a String."
  },
  {
    "id": 115,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    guard let fileURL = URL(string: path) else { return nil }\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads the contents of a text file at a given path and returns it as a string, handling any errors encountered during the process."
  },
  {
    "id": 116,
    "code": "```swift\nimport Foundation\n\nfunc readFileContents(atPath path: String) throws -> String {\n    let url = URL(fileURLWithPath: path)\n    let contents = try String(contentsOf: url, encoding: .utf8)\n    return contents\n}\n```",
    "summary": "This function reads and returns the contents of a file at a given path as a UTF-8 encoded string."
  },
  {
    "id": 117,
    "code": "```swift\nimport Foundation\n\nfunc readFileContents(at path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let contents = try String(contentsOf: fileURL, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads and returns the contents of a file at a specified path as a string."
  },
  {
    "id": 118,
    "code": "```swift\nimport Foundation\n\nfunc readTextFileContents(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "Reads and returns the contents of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 119,
    "code": "```swift\nfunc readTextFileContents(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file at a given path using UTF-8 encoding, or prints an error if the file cannot be read."
  },
  {
    "id": 120,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 121,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    guard FileManager.default.fileExists(atPath: path) else {\n        return nil\n    }\n    \n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file at a specified path, or nil if the file does not exist or an error occurs."
  },
  {
    "id": 122,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    guard let fileURL = URL(string: path) else { return nil }\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a text file at a specified path, or nil if an error occurs."
  },
  {
    "id": 123,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    guard let fileHandle = FileHandle(forReadingAtPath: path) else {\n        return nil\n    }\n    defer {\n        fileHandle.closeFile()\n    }\n    \n    let data = fileHandle.readDataToEndOfFile()\n    return String(data: data, encoding: .utf8)\n}",
    "summary": "This function reads the contents of a text file at a specified path and returns it as a UTF-8 string."
  },
  {
    "id": 124,
    "code": "import Foundation\n\nfunc readLinesFromFile(atPath path: String) -> [String]? {\n    guard let fileURL = URL(string: path) else { return nil }\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        let lines = fileContents.components(separatedBy: .newlines)\n        return lines\n    } catch {\n        print(\"Error reading file: \\(error)\")\n        return nil\n    }\n}",
    "summary": "Reads a file from the given path and returns its contents as an array of strings, where each element represents a line."
  },
  {
    "id": 125,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    let fileManager = FileManager.default\n    guard fileManager.fileExists(atPath: path) else {\n        print(\"File does not exist.\")\n        return nil\n    }\n    \n    do {\n        let content = try String(contentsOfFile: path, encoding: .utf8)\n        return content\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads and returns the content of a text file at a given path, handling any errors that may occur."
  },
  {
    "id": 126,
    "code": "```swift\nimport Foundation\n\nfunc readFileContents(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let contents = try String(contentsOf: fileURL, encoding: .utf8)\n    return contents\n}\n```",
    "summary": "Reads the contents of a file at a given path and returns it as a string."
  },
  {
    "id": 127,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    guard let fileURL = URL(string: path) else { return nil }\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads the contents of a text file from a specified path and returns it as a String."
  },
  {
    "id": 128,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 129,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "Reads and returns the contents of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 130,
    "code": "```swift\nimport Foundation\n\nfunc readFileContents(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}\n```",
    "summary": "This function reads and returns the contents of a file at a specified path as a UTF-8 encoded string."
  },
  {
    "id": 131,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a specified path, handling any errors that occur during the process."
  },
  {
    "id": 132,
    "code": "func readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}",
    "summary": "This function reads and returns the contents of a text file from a specified path using UTF-8 encoding."
  },
  {
    "id": 133,
    "code": "```swift\nimport Foundation\n\nfunc readLinesFromFile(atPath path: String) throws -> [String] {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents.components(separatedBy: .newlines)\n}\n```",
    "summary": "Reads and returns an array of lines from a file at the specified path."
  },
  {
    "id": 134,
    "code": "```swift\nimport Foundation\n\nfunc readFileContents(atPath path: String) -> String? {\n    do {\n        let fileURL = URL(fileURLWithPath: path)\n        let contents = try String(contentsOf: fileURL, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads the contents of a file at a given path and returns it as a string, or nil if an error occurs."
  },
  {
    "id": 135,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    guard FileManager.default.fileExists(atPath: path) else {\n        print(\"File does not exist at path: \\(path)\")\n        return nil\n    }\n    \n    do {\n        let contents = try String(contentsOfFile: path, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at path: \\(path) - \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads the contents of a text file at a specified path and returns it as a string."
  },
  {
    "id": 136,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a text file at a given path, handling any errors that occur."
  },
  {
    "id": 137,
    "code": "```swift\nfunc readLines(from filePath: String) -> [String]? {\n    guard let fileContents = try? String(contentsOfFile: filePath, encoding: .utf8) else {\n        return nil\n    }\n    return fileContents.components(separatedBy: .newlines)\n}\n```",
    "summary": "Reads a file at the given path and returns its contents as an array of lines or nil if an error occurs."
  },
  {
    "id": 138,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads the contents of a text file at a specified path and returns it as a String, handling any errors that occur."
  },
  {
    "id": 139,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let contents = try String(contentsOf: fileURL, encoding: .utf8)\n    return contents\n}\n```",
    "summary": "Reads the contents of a text file at a specified path and returns it as a string using UTF-8 encoding."
  },
  {
    "id": 140,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads and returns the contents of a text file at the specified path, handling any errors that occur."
  },
  {
    "id": 141,
    "code": "```swift\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "Reads and returns the contents of a text file at the specified path as a UTF-8 encoded string."
  },
  {
    "id": 142,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    guard let fileURL = URL(string: path) else {\n        return nil\n    }\n    \n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file: \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads the contents of a text file at a given path and returns it as a string, handling errors gracefully."
  },
  {
    "id": 143,
    "code": "```swift\nimport Foundation\n\nfunc readFileContents(atPath path: String) -> String? {\n    guard let fileURL = URL(string: path) else { return nil }\n    do {\n        let contents = try String(contentsOf: fileURL, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads and returns the contents of a file at a specified path as a UTF-8 string."
  },
  {
    "id": 144,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "Reads the entire content of a text file at a given path and returns it as a String."
  },
  {
    "id": 145,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    guard FileManager.default.fileExists(atPath: path) else { return nil }\n    do {\n        return try String(contentsOfFile: path, encoding: .utf8)\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads and returns the content of a text file at a given path, or returns nil if the file does not exist or an error occurs."
  },
  {
    "id": 146,
    "code": "```swift\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 147,
    "code": "```swift\nfunc readFileContents(from path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "This function reads and returns the contents of a file at the specified path as a UTF-8 encoded string."
  },
  {
    "id": 148,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "Reads and returns the contents of a text file at the specified path using UTF-8 encoding."
  },
  {
    "id": 149,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "Reads and returns the contents of a text file located at the specified path using UTF-8 encoding."
  },
  {
    "id": 150,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    guard let fileURL = URL(string: path) else { return nil }\n    \n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads the contents of a text file at a specified path and returns it as a String."
  },
  {
    "id": 151,
    "code": "```swift\nimport Foundation\n\nfunc readTextFileContents(at path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let contents = try String(contentsOf: fileURL, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a specified path, handling errors if the file cannot be read."
  },
  {
    "id": 152,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a text file at a specified path, handling errors if they occur."
  },
  {
    "id": 153,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let contents = try String(contentsOf: fileURL, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file at the specified path, or nil if an error occurs."
  },
  {
    "id": 154,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "Reads and returns the contents of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 155,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}",
    "summary": "This function reads and returns the contents of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 156,
    "code": "import Foundation\n\nfunc readFileContents(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}",
    "summary": "Reads the contents of a file at a specified path and returns it as a UTF-8 encoded string."
  },
  {
    "id": 157,
    "code": "```swift\nimport Foundation\n\nfunc readFileContents(from filePath: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: filePath)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "This function reads and returns the contents of a file at a specified path using UTF-8 encoding."
  },
  {
    "id": 158,
    "code": "import Foundation\n\nfunc readLinesFromFile(atPath path: String) -> [String]? {\n    guard let fileContents = try? String(contentsOfFile: path) else {\n        return nil\n    }\n    return fileContents.components(separatedBy: .newlines).filter { !$0.isEmpty }\n}",
    "summary": "Reads a file at the specified path and returns its non-empty lines as an array of strings."
  },
  {
    "id": 159,
    "code": "```swift\nimport Foundation\n\nfunc readFileContents(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads and returns the contents of a file at a given path as a string, handling errors gracefully."
  },
  {
    "id": 160,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let contents = try String(contentsOfFile: path, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a text file at a given path, handling errors if the file cannot be read."
  },
  {
    "id": 161,
    "code": "```swift\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let text = try String(contentsOf: fileURL, encoding: .utf8)\n    return text\n}\n```",
    "summary": "Reads and returns the contents of a text file at a given path using UTF-8 encoding."
  },
  {
    "id": 162,
    "code": "func readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads the contents of a text file at a given path and returns it as a String."
  },
  {
    "id": 163,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a specified path, handling errors if the file cannot be read."
  },
  {
    "id": 164,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let contents = try String(contentsOf: fileURL, encoding: .utf8)\n    return contents\n}\n```",
    "summary": "Reads and returns the contents of a text file located at the specified path."
  },
  {
    "id": 165,
    "code": "```swift\nimport Foundation\n\nfunc writeTextToFile(text: String, to fileName: String) throws {\n    let fileURL = FileManager.default.temporaryDirectory.appendingPathComponent(fileName)\n    do {\n        try text.write(to: fileURL, atomically: true, encoding: .utf8)\n    } catch {\n        throw error\n    }\n}\n```",
    "summary": "This function writes a given string to a specified file in the temporary directory, handling any errors that may occur."
  },
  {
    "id": 166,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}",
    "summary": "The function reads and returns the content of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 167,
    "code": "```swift\nimport Foundation\n\nfunc writeTextToFile(text: String, to fileName: String) throws {\n    let fileURL = FileManager.default.temporaryDirectory.appendingPathComponent(fileName)\n    try text.write(to: fileURL, atomically: true, encoding: .utf8)\n}\n```",
    "summary": "This function writes a given string as text to a specified file in the temporary directory, using UTF-8 encoding."
  },
  {
    "id": 168,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    let url = URL(fileURLWithPath: path)\n    do {\n        let content = try String(contentsOf: url, encoding: .utf8)\n        return content\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the content of a text file at a given path as a string, handling any errors gracefully."
  },
  {
    "id": 169,
    "code": "```swift\nimport Foundation\n\nfunc readFileContents(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let contents = try String(contentsOf: fileURL, encoding: .utf8)\n    return contents\n}\n```",
    "summary": "Reads the contents of a file at the specified path and returns it as a string."
  },
  {
    "id": 170,
    "code": "```swift\nimport Foundation\n\nfunc writeStringToFile(content: String, to filePath: String) throws {\n    let url = URL(fileURLWithPath: filePath)\n    do {\n        try content.write(to: url, atomically: true, encoding: .utf8)\n    } catch {\n        throw error\n    }\n}\n```",
    "summary": "This function writes a given string to a file at the specified file path using UTF-8 encoding."
  },
  {
    "id": 171,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "This function reads the contents of a text file at a specified path and returns it as a String."
  },
  {
    "id": 172,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads the contents of a text file at a given path and returns it as a String."
  },
  {
    "id": 173,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}\n```",
    "summary": "This function reads the contents of a text file at a specified path and returns it as a String using UTF-8 encoding."
  },
  {
    "id": 174,
    "code": "```swift\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads the contents of a text file at a specified path and returns it as a String, handling any errors that occur."
  },
  {
    "id": 175,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file at the specified path, handling errors if the file cannot be read."
  },
  {
    "id": 176,
    "code": "import Foundation\n\nfunc readLines(from filePath: String) -> [String]? {\n    guard let fileContents = try? String(contentsOfFile: filePath, encoding: .utf8) else {\n        return nil\n    }\n    return fileContents.components(separatedBy: .newlines)\n}",
    "summary": "Reads a file at the specified path and returns its contents as an array of lines."
  },
  {
    "id": 177,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    guard FileManager.default.fileExists(atPath: path) else {\n        print(\"File does not exist at path: \\(path)\")\n        return nil\n    }\n\n    do {\n        let contents = try String(contentsOfFile: path, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Failed to read file: \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file at a specified path or prints an error if the file cannot be read."
  },
  {
    "id": 178,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let content = try String(contentsOf: fileURL, encoding: .utf8)\n        return content\n    } catch {\n        print(\"Error reading file: \\(error)\")\n        return nil\n    }\n}",
    "summary": "This function reads and returns the content of a text file at a given path, handling errors if the file cannot be read."
  },
  {
    "id": 179,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}",
    "summary": "Reads the contents of a text file at a specified path and returns it as a string."
  },
  {
    "id": 180,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    guard let fileURL = URL(string: path) else { return nil }\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads a text file from the specified path and returns its contents as a String."
  },
  {
    "id": 181,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a text file at the specified path, or nil if an error occurs."
  },
  {
    "id": 182,
    "code": "import Foundation\n\nfunc readTextFileContents(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}",
    "summary": "Reads and returns the contents of a text file located at the specified path using UTF-8 encoding."
  },
  {
    "id": 183,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    guard FileManager.default.fileExists(atPath: path) else {\n        print(\"File does not exist at path: \\(path)\")\n        return nil\n    }\n    \n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at path: \\(path), error: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads the contents of a text file at a specified path and returns it as a String."
  },
  {
    "id": 184,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}\n```",
    "summary": "This function reads the contents of a text file at a given path and returns it as a string."
  },
  {
    "id": 185,
    "code": "func readFileContents(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Failed to read file: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a file at a given path as a UTF-8 encoded string."
  },
  {
    "id": 186,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    guard FileManager.default.fileExists(atPath: path) else {\n        print(\"File does not exist at \\(path)\")\n        return nil\n    }\n    \n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a text file at the given path, or prints an error if the file cannot be read."
  },
  {
    "id": 187,
    "code": "import Foundation\n\nfunc readLines(fromFileAtPath path: String) -> [String]? {\n    guard let fileContents = try? String(contentsOfFile: path, encoding: .utf8) else {\n        return nil\n    }\n    return fileContents.components(separatedBy: .newlines).filter { !$0.isEmpty }\n}",
    "summary": "This function reads a file's content at a given path and returns its non-empty lines as an array of strings."
  },
  {
    "id": 188,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a text file at the specified path, handling any errors."
  },
  {
    "id": 189,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    let fileManager = FileManager.default\n    guard fileManager.fileExists(atPath: path) else {\n        print(\"File does not exist at path: \\(path)\")\n        return nil\n    }\n    \n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Failed to read file due to error: \\(error)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a text file at the specified path, or nil if the file does not exist or an error occurs."
  },
  {
    "id": 190,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    guard FileManager.default.fileExists(atPath: path) else {\n        return nil\n    }\n    \n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads and returns the contents of a text file at a given path, or nil if the file doesn't exist."
  },
  {
    "id": 191,
    "code": "import Foundation\n\nfunc readFileContents(at path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let contents = try String(contentsOf: fileURL, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads the contents of a file at a specified path and returns it as a string, or nil if an error occurs."
  },
  {
    "id": 192,
    "code": "```swift\nimport Foundation\n\nfunc readFileContents(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "Reads and returns the contents of a file from a specified path as a UTF-8 encoded string."
  },
  {
    "id": 193,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    guard let fileURL = URL(string: path) else { return nil }\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file from a specified path as a string, handling errors if the file cannot be read."
  },
  {
    "id": 194,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "Reads and returns the contents of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 195,
    "code": "import Foundation\n\nfunc readFileContents(from filePath: String) -> String? {\n    let fileURL = URL(fileURLWithPath: filePath)\n    do {\n        let contents = try String(contentsOf: fileURL, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads and returns the contents of a file at a given path as a string, handling any errors that occur."
  },
  {
    "id": 196,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    guard let fileURL = URL(string: path) else {\n        print(\"Invalid file path.\")\n        return nil\n    }\n    \n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Failed to read file: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads the contents of a text file at a given path and returns it as a String."
  },
  {
    "id": 197,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}",
    "summary": "Reads and returns the contents of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 198,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a text file at the specified path as a String, or nil if an error occurs."
  },
  {
    "id": 199,
    "code": "func readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Failed to read file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads and returns the content of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 200,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    guard let fileURL = URL(string: path) else { return nil }\n    do {\n        let content = try String(contentsOf: fileURL, encoding: .utf8)\n        return content\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a text file at a given path, or nil if an error occurs."
  },
  {
    "id": 201,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    guard let data = FileManager.default.contents(atPath: path) else {\n        return nil\n    }\n    return String(data: data, encoding: .utf8)\n}",
    "summary": "This function reads a text file at a specified path and returns its contents as a UTF-8 string."
  },
  {
    "id": 202,
    "code": "import Foundation\n\nfunc readFileContents(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}",
    "summary": "Reads and returns the contents of a file at the specified path as a UTF-8 encoded string."
  },
  {
    "id": 203,
    "code": "import Foundation\n\nfunc readFileContents(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}",
    "summary": "Reads and returns the contents of a file at the specified path as a string using UTF-8 encoding."
  },
  {
    "id": 204,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads the contents of a text file at a specified path and returns it as a String, or nil if an error occurs."
  },
  {
    "id": 205,
    "code": "import Foundation\n\nfunc readTextFromFile(at path: String) -> String? {\n    let fileManager = FileManager.default\n    guard fileManager.fileExists(atPath: path) else { return nil }\n    \n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a text file at the given path, or nil if the file doesn't exist or an error occurs."
  },
  {
    "id": 206,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads the content of a text file at a specified path and returns it as a String, or nil if an error occurs."
  },
  {
    "id": 207,
    "code": "import Foundation\n\nfunc readFileContents(atPath path: String) -> String? {\n    let fileManager = FileManager.default\n    guard fileManager.fileExists(atPath: path) else {\n        return nil\n    }\n    return try? String(contentsOfFile: path, encoding: .utf8)\n}",
    "summary": "Reads and returns the contents of a file at a specified path as a string, or nil if the file doesn't exist."
  },
  {
    "id": 208,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}",
    "summary": "Reads the contents of a text file at a given path and returns it as a String."
  },
  {
    "id": 209,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads the contents of a text file at a specified path and returns it as a string, handling errors if the read operation fails."
  },
  {
    "id": 210,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    guard let fileURL = URL(string: path) else { return nil }\n    do {\n        let contents = try String(contentsOf: fileURL, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}",
    "summary": "This function reads and returns the contents of a text file from a given path as a String, or nil if an error occurs."
  },
  {
    "id": 211,
    "code": "```swift\nimport Foundation\n\nfunc readLines(from filePath: String) -> [String]? {\n    guard let fileURL = URL(string: filePath) else {\n        return nil\n    }\n    \n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents.components(separatedBy: .newlines)\n    } catch {\n        print(\"Error reading file: \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads a file from a given path and returns its contents as an array of lines, handling errors gracefully."
  },
  {
    "id": 212,
    "code": "```swift\nimport Foundation\n\nfunc readFileContents(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "Reads and returns the contents of a file at a specified path as a UTF-8 encoded string."
  },
  {
    "id": 213,
    "code": "```swift\nfunc readTextFile(at path: String) -> String? {\n    guard let fileURL = URL(string: path) else { return nil }\n    \n    do {\n        let contents = try String(contentsOf: fileURL, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads the contents of a text file at a given path and returns it as a String."
  },
  {
    "id": 214,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 215,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "Reads the contents of a text file at a given path and returns it as a string."
  },
  {
    "id": 216,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "This function reads and returns the contents of a text file from a specified path as a string."
  },
  {
    "id": 217,
    "code": "func readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}",
    "summary": "Reads and returns the content of a text file at the specified path using UTF-8 encoding."
  },
  {
    "id": 218,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let fileURL = URL(fileURLWithPath: path)\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file at the specified path, or nil if an error occurs."
  },
  {
    "id": 219,
    "code": "func readFileContents(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}",
    "summary": "Reads and returns the contents of a file at the specified path as a UTF-8 string."
  },
  {
    "id": 220,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let fileContent = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContent\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}",
    "summary": "Reads the contents of a text file at the specified path and returns it as a string, handling errors if the operation fails."
  },
  {
    "id": 221,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a text file at a specified path as a String, or nil if an error occurs."
  },
  {
    "id": 222,
    "code": "import Foundation\n\nfunc readFileContents(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}",
    "summary": "This function reads and returns the contents of a file located at the specified path using UTF-8 encoding."
  },
  {
    "id": 223,
    "code": "import Foundation\n\nfunc readFileContents(atPath path: String) -> String? {\n    guard FileManager.default.fileExists(atPath: path) else {\n        print(\"File does not exist at path: \\(path)\")\n        return nil\n    }\n    \n    do {\n        let contents = try String(contentsOfFile: path, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Failed to read file with error: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads the contents of a file at the specified path and returns it as a string, handling errors for non-existent files or reading issues."
  },
  {
    "id": 224,
    "code": "func readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}",
    "summary": "This function reads and returns the content of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 225,
    "code": "import Foundation\n\nfunc readLinesFromFile(atPath path: String) -> [String]? {\n    guard let fileContent = try? String(contentsOfFile: path, encoding: .utf8) else {\n        return nil\n    }\n    return fileContent.components(separatedBy: .newlines).filter { !$0.isEmpty }\n}",
    "summary": "Reads a file at the given path and returns its non-empty lines as an array of strings."
  },
  {
    "id": 226,
    "code": "func readFileContents(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a file at a specified path as a UTF-8 encoded string, handling any errors that occur."
  },
  {
    "id": 227,
    "code": "```swift\nfunc readFileContents(atPath path: String) -> String? {\n    guard let fileURL = URL(string: path) else { return nil }\n    do {\n        let contents = try String(contentsOf: fileURL, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a file at a specified path as a UTF-8 encoded string, or nil if an error occurs."
  },
  {
    "id": 228,
    "code": "```swift\nimport Foundation\n\nfunc readFileContents(from path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let contents = try String(contentsOf: fileURL, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a file as a string from a given file path, handling any read errors."
  },
  {
    "id": 229,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    guard let fileURL = URL(string: path) else {\n        return nil\n    }\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file at the specified path as a string, or returns nil if an error occurs."
  },
  {
    "id": 230,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file at a specified path, handling errors if the file cannot be read."
  },
  {
    "id": 231,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    guard let fileURL = URL(string: path) else { return nil }\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a text file at the specified path, or nil if an error occurs."
  },
  {
    "id": 232,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    let fileManager = FileManager.default\n    guard fileManager.fileExists(atPath: path) else {\n        return nil\n    }\n    \n    do {\n        let contents = try String(contentsOfFile: path, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file at the specified path, or nil if the file cannot be found or read."
  },
  {
    "id": 233,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a text file at a specified path, or nil if an error occurs."
  },
  {
    "id": 234,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}",
    "summary": "This function reads and returns the contents of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 235,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}",
    "summary": "This function reads the contents of a text file at a specified path and returns it as a String, handling any errors by printing them."
  },
  {
    "id": 236,
    "code": "```swift\nfunc readTextFileContents(atPath path: String) -> String? {\n    guard let fileURL = URL(string: path) else { return nil }\n    do {\n        return try String(contentsOf: fileURL, encoding: .utf8)\n    } catch {\n        print(\"Error reading file: \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file at the specified path, handling any errors encountered."
  },
  {
    "id": 237,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads the contents of a text file at a specified path and returns it as a string."
  },
  {
    "id": 238,
    "code": "```swift\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the content of a text file at the specified path, handling errors if the operation fails."
  },
  {
    "id": 239,
    "code": "```swift\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file at the specified path as a String, or nil if an error occurs."
  },
  {
    "id": 240,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}\n```",
    "summary": "Reads the entire content of a text file at a specified path and returns it as a String."
  },
  {
    "id": 241,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let fileURL = URL(fileURLWithPath: path)\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file at a specified path, or nil if an error occurs."
  },
  {
    "id": 242,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let contents = try String(contentsOf: fileURL, encoding: .utf8)\n    return contents\n}",
    "summary": "Reads and returns the contents of a text file located at the specified path."
  },
  {
    "id": 243,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads the contents of a text file at a specified path and returns it as a String, handling errors gracefully."
  },
  {
    "id": 244,
    "code": "```swift\nimport Foundation\n\nfunc readFileContents(atPath path: String) -> String? {\n    let fileManager = FileManager.default\n    guard fileManager.fileExists(atPath: path) else {\n        return nil\n    }\n    \n    do {\n        let contents = try String(contentsOfFile: path, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads and returns the contents of a file at a given path as a String, or nil if the file does not exist or an error occurs."
  },
  {
    "id": 245,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    guard let fileURL = URL(string: path) else {\n        return nil\n    }\n    \n    do {\n        let contents = try String(contentsOf: fileURL, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads the contents of a text file at a specified path and returns it as a string, handling errors gracefully."
  },
  {
    "id": 246,
    "code": "import Foundation\n\nfunc readFileContents(atPath path: String) -> String? {\n    let fileManager = FileManager.default\n    guard fileManager.fileExists(atPath: path) else {\n        return nil\n    }\n    do {\n        let contents = try String(contentsOfFile: path, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads and returns the contents of a file at a specified path, or nil if the file does not exist or cannot be read."
  },
  {
    "id": 247,
    "code": "```swift\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "This function reads the contents of a text file at a specified path and returns it as a String."
  },
  {
    "id": 248,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "This function reads the contents of a text file at a specified path and returns it as a string."
  },
  {
    "id": 249,
    "code": "```swift\nfunc readLines(from filePath: String) throws -> [String] {\n    let fileURL = URL(fileURLWithPath: filePath)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents.components(separatedBy: .newlines).filter { !$0.isEmpty }\n}\n```",
    "summary": "This function reads a file from a specified path and returns its non-empty lines as an array of strings."
  },
  {
    "id": 250,
    "code": "```swift\nimport Foundation\n\nfunc readFileContents(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let contents = try String(contentsOf: fileURL, encoding: .utf8)\n    return contents\n}\n```",
    "summary": "This function reads and returns the contents of a file at a specified path using UTF-8 encoding."
  },
  {
    "id": 251,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    guard let fileURL = URL(string: path) else { return nil }\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads the contents of a text file from a given path and returns it as a string."
  },
  {
    "id": 252,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "This function reads the contents of a text file at a given path and returns it as a String."
  },
  {
    "id": 253,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads the contents of a text file at a given path and returns it as a string."
  },
  {
    "id": 254,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let fileURL = URL(fileURLWithPath: path)\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a specified path or returns nil if an error occurs."
  },
  {
    "id": 255,
    "code": "```swift\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 256,
    "code": "```swift\nimport Foundation\n\nfunc readFileContents(from filePath: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: filePath)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "This function reads the contents of a file at a specified path and returns it as a string."
  },
  {
    "id": 257,
    "code": "import Foundation\n\nfunc readLines(from filePath: String) -> [String]? {\n    guard let fileHandle = FileHandle(forReadingAtPath: filePath) else {\n        return nil\n    }\n    \n    defer {\n        fileHandle.closeFile()\n    }\n    \n    let data = fileHandle.readDataToEndOfFile()\n    guard let content = String(data: data, encoding: .utf8) else {\n        return nil\n    }\n    \n    return content.components(separatedBy: .newlines)\n}",
    "summary": "This function reads a file at a given path and returns its content as an array of strings, each representing a line."
  },
  {
    "id": 258,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContent = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContent\n}\n```",
    "summary": "This function reads and returns the content of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 259,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}",
    "summary": "This function reads the contents of a text file at a given path and returns it as a String, or nil if an error occurs."
  },
  {
    "id": 260,
    "code": "```swift\nimport Foundation\n\nfunc readFileContents(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}\n```",
    "summary": "This function reads and returns the contents of a file at a given path as a UTF-8 string."
  },
  {
    "id": 261,
    "code": "```swift\nfunc readFileContents(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}\n```",
    "summary": "This function reads and returns the contents of a file at the specified path using UTF-8 encoding."
  },
  {
    "id": 262,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads the contents of a text file at a specified path and returns it as a String."
  },
  {
    "id": 263,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let content = try String(contentsOf: fileURL, encoding: .utf8)\n        return content\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the content of a text file at the specified path, or nil if an error occurs."
  },
  {
    "id": 264,
    "code": "```swift\nfunc readFileContents(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a file at a given path as a String, or prints an error if it fails."
  },
  {
    "id": 265,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "Reads and returns the contents of a text file at the specified path using UTF-8 encoding."
  },
  {
    "id": 266,
    "code": "func readFileContents(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads the contents of a file at a specified path and returns it as a string."
  },
  {
    "id": 267,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        throw error\n    }\n}",
    "summary": "This function reads and returns the contents of a text file from a specified path, throwing an error if the operation fails."
  },
  {
    "id": 268,
    "code": "import Foundation\n\nfunc readContentsOfFile(at path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let contents = try String(contentsOf: fileURL, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads and returns the contents of a file at a given path as a String, handling errors if the file cannot be read."
  },
  {
    "id": 269,
    "code": "import Foundation\n\nfunc readFileContents(atPath path: String) -> String? {\n    guard FileManager.default.fileExists(atPath: path) else { return nil }\n    do {\n        let contents = try String(contentsOfFile: path, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a file at a specified path as a string, or returns nil if the file doesn't exist or an error occurs."
  },
  {
    "id": 270,
    "code": "import Foundation\n\nfunc readFileContents(atPath path: String) -> String? {\n    let fileManager = FileManager.default\n    guard fileManager.fileExists(atPath: path) else { return nil }\n    \n    do {\n        let contents = try String(contentsOfFile: path, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}",
    "summary": "This function reads and returns the contents of a file at a specified path, or nil if the file does not exist or cannot be read."
  },
  {
    "id": 271,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a text file at the given path, or nil if an error occurs."
  },
  {
    "id": 272,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    let fileManager = FileManager.default\n    guard fileManager.fileExists(atPath: path) else {\n        return nil\n    }\n    \n    do {\n        let contents = try String(contentsOfFile: path, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads and returns the contents of a text file at a specified path, or nil if the file does not exist or cannot be read."
  },
  {
    "id": 273,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    let fileManager = FileManager.default\n    guard fileManager.fileExists(atPath: path) else {\n        return nil\n    }\n    \n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file at a given path, or nil if the file does not exist or an error occurs."
  },
  {
    "id": 274,
    "code": "import Foundation\n\nfunc readFileContents(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}",
    "summary": "Reads and returns the contents of a file at the specified path using UTF-8 encoding."
  },
  {
    "id": 275,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}\n```",
    "summary": "Reads and returns the contents of a text file at the specified path using UTF-8 encoding."
  },
  {
    "id": 276,
    "code": "```swift\nfunc readTextFile(at path: String) throws -> String {\n    let fileManager = FileManager.default\n    guard fileManager.fileExists(atPath: path) else {\n        throw NSError(domain: \"FileErrorDomain\", code: 404, userInfo: [NSLocalizedDescriptionKey: \"File not found\"])\n    }\n    return try String(contentsOfFile: path, encoding: .utf8)\n}\n```",
    "summary": "This function reads the contents of a text file at a specified path and returns it as a string, throwing an error if the file does not exist."
  },
  {
    "id": 277,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file at a given path, or nil if an error occurs."
  },
  {
    "id": 278,
    "code": "import Foundation\n\nfunc readFileContents(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let contents = try String(contentsOf: fileURL, encoding: .utf8)\n    return contents\n}",
    "summary": "This function reads and returns the contents of a file at a specified path using UTF-8 encoding."
  },
  {
    "id": 279,
    "code": "```swift\nimport Foundation\n\nfunc readFileContents(atPath path: String) -> String? {\n    let fileManager = FileManager.default\n    guard fileManager.fileExists(atPath: path) else {\n        return nil\n    }\n    \n    do {\n        let contents = try String(contentsOfFile: path, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a file as a string if the file exists and is readable."
  },
  {
    "id": 280,
    "code": "```swift\nimport Foundation\n\nfunc readLinesFromFile(atPath path: String) -> [String]? {\n    guard let fileContent = try? String(contentsOfFile: path, encoding: .utf8) else {\n        return nil\n    }\n    return fileContent.components(separatedBy: .newlines).filter { !$0.isEmpty }\n}\n```",
    "summary": "Reads and returns non-empty lines from a file at the specified path, or nil if the file cannot be read."
  },
  {
    "id": 281,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    guard let fileURL = URL(string: path) else { return nil }\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads the contents of a text file at a given path and returns it as a string."
  },
  {
    "id": 282,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(from path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file at a given path, or nil if an error occurs."
  },
  {
    "id": 283,
    "code": "```swift\nfunc readTextFile(atPath path: String) throws -> String {\n    guard FileManager.default.fileExists(atPath: path) else {\n        throw NSError(domain: \"FileErrorDomain\", code: 1, userInfo: [NSLocalizedDescriptionKey: \"File does not exist at path \\(path)\"])\n    }\n    \n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        throw NSError(domain: \"FileErrorDomain\", code: 2, userInfo: [NSLocalizedDescriptionKey: \"Unable to read file at path \\(path): \\(error.localizedDescription)\"])\n    }\n}\n```",
    "summary": "This function reads the contents of a text file at a specified path and returns it as a string, throwing errors if the file does not exist or is unreadable."
  },
  {
    "id": 284,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let fileURL = URL(fileURLWithPath: path)\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "This Swift function reads and returns the contents of a text file at a given path, handling any errors that occur."
  },
  {
    "id": 285,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "Reads and returns the contents of a text file located at the specified path."
  },
  {
    "id": 286,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let contents = try String(contentsOfFile: path, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a text file at a given path, or nil if an error occurs."
  },
  {
    "id": 287,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        return try String(contentsOf: fileURL, encoding: .utf8)\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the content of a text file at the specified path, or nil if an error occurs."
  },
  {
    "id": 288,
    "code": "```swift\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}\n```",
    "summary": "Reads and returns the contents of a text file at the specified path using UTF-8 encoding."
  },
  {
    "id": 289,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads the contents of a text file at a given path and returns it as a string, handling any potential errors."
  },
  {
    "id": 290,
    "code": "```swift\nimport Foundation\n\nfunc readFileContents(from filePath: String) -> String? {\n    let fileManager = FileManager.default\n    if fileManager.fileExists(atPath: filePath) {\n        do {\n            let contents = try String(contentsOfFile: filePath, encoding: .utf8)\n            return contents\n        } catch {\n            print(\"Error reading file: \\(error)\")\n            return nil\n        }\n    } else {\n        print(\"File does not exist at path: \\(filePath)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a file at the specified path as a string, or nil if an error occurs."
  },
  {
    "id": 291,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    let fileManager = FileManager.default\n    guard fileManager.fileExists(atPath: path) else {\n        return nil\n    }\n\n    do {\n        let content = try String(contentsOfFile: path, encoding: .utf8)\n        return content\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads the contents of a text file at a specified path and returns it as a string, or nil if the file doesn't exist or an error occurs."
  },
  {
    "id": 292,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a text file at a specified path or prints an error if the operation fails."
  },
  {
    "id": 293,
    "code": "func readTextFile(at path: String) -> String? {\n    guard let fileURL = URL(string: path) else {\n        return nil\n    }\n    do {\n        let content = try String(contentsOf: fileURL, encoding: .utf8)\n        return content\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}",
    "summary": "Reads the contents of a text file located at the specified path and returns it as a String."
  },
  {
    "id": 294,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let contents = try String(contentsOf: fileURL, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a text file at a specified path, or nil if an error occurs."
  },
  {
    "id": 295,
    "code": "import Foundation\n\nfunc readLines(from filePath: String) -> [String]? {\n    guard let fileURL = URL(string: filePath) else { return nil }\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents.components(separatedBy: .newlines)\n    } catch {\n        print(\"Error reading file: \\(error)\")\n        return nil\n    }\n}",
    "summary": "Reads a file from the given path and returns its contents as an array of strings, each representing a line."
  },
  {
    "id": 296,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a given path using UTF-8 encoding."
  },
  {
    "id": 297,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    guard FileManager.default.fileExists(atPath: path) else {\n        print(\"File not found at path: \\(path)\")\n        return nil\n    }\n    \n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at path: \\(path) - \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads the contents of a text file at a given path and returns it as a string, handling errors if the file cannot be read."
  },
  {
    "id": 298,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    guard let fileURL = URL(string: path) else {\n        return nil\n    }\n    \n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a specified path, handling errors gracefully."
  },
  {
    "id": 299,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads the contents of a text file at a specified path and returns it as a string."
  },
  {
    "id": 300,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let contents = try String(contentsOf: fileURL, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads the contents of a text file at a given path and returns it as a String."
  },
  {
    "id": 301,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}\n```",
    "summary": "This function reads the contents of a text file at a specified path and returns it as a String."
  },
  {
    "id": 302,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads the contents of a text file at a given path and returns it as a String, or nil if an error occurs."
  },
  {
    "id": 303,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads the contents of a text file at a specified path and returns it as a String."
  },
  {
    "id": 304,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "This function reads a text file from a specified path and returns its contents as a string."
  },
  {
    "id": 305,
    "code": "```swift\nfunc readLinesFromFile(at path: String) throws -> [String] {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents.components(separatedBy: .newlines)\n}\n```",
    "summary": "This function reads a text file at a given path and returns its contents as an array of strings, each representing a line."
  },
  {
    "id": 306,
    "code": "import Foundation\n\nfunc readFileContents(atPath path: String) -> String? {\n    guard let fileURL = URL(string: path) else { return nil }\n    \n    do {\n        let contents = try String(contentsOf: fileURL, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file: \\(error)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a file at a given path as a string, or nil if an error occurs."
  },
  {
    "id": 307,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}",
    "summary": "This function reads the contents of a text file at a given path and returns it as a String."
  },
  {
    "id": 308,
    "code": "import Foundation\n\nfunc readFileContents(from filePath: String) -> String? {\n    let fileManager = FileManager.default\n\n    guard fileManager.fileExists(atPath: filePath) else {\n        print(\"File does not exist.\")\n        return nil\n    }\n\n    do {\n        let contents = try String(contentsOfFile: filePath, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads and returns the contents of a file at a given path as a string, handling errors if the file is missing or unreadable."
  },
  {
    "id": 309,
    "code": "import Foundation\n\nfunc readFileContents(atPath path: String) -> String? {\n    do {\n        let fileURL = URL(fileURLWithPath: path)\n        let contents = try String(contentsOf: fileURL, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads and returns the contents of a file at a specified path as a String, or nil if an error occurs."
  },
  {
    "id": 310,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}",
    "summary": "Reads and returns the contents of a text file at the specified path using UTF-8 encoding."
  },
  {
    "id": 311,
    "code": "import Foundation\n\nfunc readContentsOfFile(atPath path: String) -> String? {\n    let fileManager = FileManager.default\n    guard fileManager.fileExists(atPath: path) else {\n        print(\"File does not exist at path: \\(path)\")\n        return nil\n    }\n    \n    do {\n        let contents = try String(contentsOfFile: path, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at path: \\(path), \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a file at the specified path, or nil if an error occurs."
  },
  {
    "id": 312,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}",
    "summary": "This function reads and returns the contents of a text file at the given path as a string."
  },
  {
    "id": 313,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads and returns the contents of a text file at a specified path, handling errors if the file cannot be read."
  },
  {
    "id": 314,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    guard let fileURL = URL(string: path) else { return nil }\n    do {\n        let content = try String(contentsOf: fileURL, encoding: .utf8)\n        return content\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}",
    "summary": "This function reads and returns the content of a text file from a given path or nil if an error occurs."
  },
  {
    "id": 315,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads the contents of a text file at a specified path and returns it as a String."
  },
  {
    "id": 316,
    "code": "func readLinesFromFile(at path: String) -> [String]? {\n    guard let fileContents = try? String(contentsOfFile: path, encoding: .utf8) else {\n        return nil\n    }\n    return fileContents.components(separatedBy: .newlines).filter { !$0.isEmpty }\n}",
    "summary": "Reads a file at the specified path and returns an array of non-empty lines."
  },
  {
    "id": 317,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads and returns the contents of a text file at a specified path as a String, handling errors if the operation fails."
  },
  {
    "id": 318,
    "code": "import Foundation\n\nfunc readLines(from filePath: String) throws -> [String] {\n    let fileURL = URL(fileURLWithPath: filePath)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents.components(separatedBy: .newlines).filter { !$0.isEmpty }\n}",
    "summary": "Reads a file and returns an array of non-empty lines as strings."
  },
  {
    "id": 319,
    "code": "```swift\nfunc readFileContents(from filePath: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: filePath, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file: \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a file at a given path as a UTF-8 string, handling errors gracefully."
  },
  {
    "id": 320,
    "code": "import Foundation\n\nfunc readFileContents(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let contents = try String(contentsOf: fileURL, encoding: .utf8)\n    return contents\n}",
    "summary": "Reads and returns the contents of a file at a specified path as a UTF-8 encoded string."
  },
  {
    "id": 321,
    "code": "```swift\nfunc readFileContents(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}\n```",
    "summary": "Reads and returns the contents of a file at a given path as a UTF-8 encoded string."
  },
  {
    "id": 322,
    "code": "```swift\nfunc readFileContents(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a file at the specified path, or prints an error message if the file cannot be read."
  },
  {
    "id": 323,
    "code": "```swift\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file at the specified path as a string, or prints an error if unsuccessful."
  },
  {
    "id": 324,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "Reads and returns the contents of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 325,
    "code": "```swift\nimport Foundation\n\nfunc readFileContents(at path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let contents = try String(contentsOf: fileURL, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a file at the specified path as a string, or nil if an error occurs."
  },
  {
    "id": 326,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads and returns the contents of a text file at a specified path, or nil if an error occurs."
  },
  {
    "id": 327,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}",
    "summary": "Reads and returns the contents of a text file at the given path as a String using UTF-8 encoding."
  },
  {
    "id": 328,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    let fileManager = FileManager.default\n    guard fileManager.fileExists(atPath: path) else {\n        print(\"File does not exist at path: \\(path)\")\n        return nil\n    }\n    \n    do {\n        let contents = try String(contentsOfFile: path, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Failed to read file: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads the contents of a text file at a specified path and returns it as a String."
  },
  {
    "id": 329,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}",
    "summary": "This function reads the contents of a text file at a specified path and returns it as a String, handling any errors that occur."
  },
  {
    "id": 330,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file at the specified path as a string, handling errors if the file cannot be read."
  },
  {
    "id": 331,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a text file at a specified path, or nil if an error occurs."
  },
  {
    "id": 332,
    "code": "```swift\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "Reads and returns the contents of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 333,
    "code": "import Foundation\n\nfunc readFileContents(at path: String) -> String? {\n    do {\n        let contents = try String(contentsOfFile: path, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a file at a specified path as a string, handling errors if the file cannot be read."
  },
  {
    "id": 334,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    guard FileManager.default.fileExists(atPath: path) else {\n        print(\"File does not exist at path: \\(path)\")\n        return nil\n    }\n    \n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at path: \\(path), error: \\(error)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a text file from a given file path, handling errors gracefully."
  },
  {
    "id": 335,
    "code": "import Foundation\n\nfunc readFileAsString(from path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}",
    "summary": "Reads the contents of a file at a specified path into a string using UTF-8 encoding."
  },
  {
    "id": 336,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 337,
    "code": "import Foundation\n\nfunc readLinesFromFile(atPath path: String) -> [String]? {\n    guard let fileHandle = FileHandle(forReadingAtPath: path) else {\n        return nil\n    }\n    \n    defer {\n        fileHandle.closeFile()\n    }\n    \n    let data = fileHandle.readDataToEndOfFile()\n    if let content = String(data: data, encoding: .utf8) {\n        return content.components(separatedBy: .newlines)\n    }\n    \n    return nil\n}",
    "summary": "Reads a file at a specified path and returns its contents as an array of strings, each representing a line."
  },
  {
    "id": 338,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Failed to read file: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a text file at a specified path, or nil if an error occurs."
  },
  {
    "id": 339,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "Reads and returns the contents of a text file at the specified path using UTF-8 encoding."
  },
  {
    "id": 340,
    "code": "```swift\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file at a specified path, or nil if an error occurs."
  },
  {
    "id": 341,
    "code": "```swift\nimport Foundation\n\nfunc readFileContents(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "This function reads and returns the contents of a file at a specified path as a UTF-8 encoded string."
  },
  {
    "id": 342,
    "code": "```swift\nimport Foundation\n\nfunc readFileContents(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "Reads and returns the contents of a file at a specified path using UTF-8 encoding."
  },
  {
    "id": 343,
    "code": "```swift\nimport Foundation\n\nfunc readLinesFromFile(atPath path: String) -> [String]? {\n    guard let fileContent = try? String(contentsOfFile: path, encoding: .utf8) else {\n        return nil\n    }\n    return fileContent.components(separatedBy: .newlines).filter { !$0.isEmpty }\n}\n```",
    "summary": "Reads and returns non-empty lines from a file at the specified path as an array of strings."
  },
  {
    "id": 344,
    "code": "func readFileContents(atPath path: String) -> String? {\n    guard let fileURL = URL(string: path) else { return nil }\n    do {\n        let contents = try String(contentsOf: fileURL, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file: \\(error)\")\n        return nil\n    }\n}",
    "summary": "Reads the contents of a file at a given path and returns it as a string, or nil if an error occurs."
  },
  {
    "id": 345,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}",
    "summary": "This function reads and returns the contents of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 346,
    "code": "```swift\nimport Foundation\n\nfunc writeTextToFile(text: String, to filePath: String) throws {\n    let fileURL = URL(fileURLWithPath: filePath)\n    do {\n        try text.write(to: fileURL, atomically: true, encoding: .utf8)\n    } catch {\n        throw error\n    }\n}\n```",
    "summary": "Writes a given string to a specified file path, handling any potential errors."
  },
  {
    "id": 347,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}",
    "summary": "Reads the contents of a text file at the specified path and returns it as a String."
  },
  {
    "id": 348,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let content = try String(contentsOf: fileURL, encoding: .utf8)\n        return content\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}",
    "summary": "This function reads and returns the contents of a text file at a specified path, or nil if an error occurs."
  },
  {
    "id": 349,
    "code": "import Foundation\n\nfunc readFileContents(atPath path: String) -> String? {\n    let fileManager = FileManager.default\n    guard fileManager.fileExists(atPath: path) else {\n        return nil\n    }\n    do {\n        let contents = try String(contentsOfFile: path, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file: \\(error)\")\n        return nil\n    }\n}",
    "summary": "This function reads and returns the contents of a file at the specified path as a string, or nil if the file does not exist or an error occurs."
  },
  {
    "id": 350,
    "code": "import Foundation\n\nfunc readFileContents(atPath path: String) -> String? {\n    let fileManager = FileManager.default\n    guard fileManager.fileExists(atPath: path) else {\n        print(\"File does not exist at path: \\(path)\")\n        return nil\n    }\n    \n    do {\n        let contents = try String(contentsOfFile: path, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Failed to read file: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads and returns the contents of a file at a specified path, handling errors if the file doesn't exist or cannot be read."
  },
  {
    "id": 351,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    let fileManager = FileManager.default\n    guard fileManager.fileExists(atPath: path) else {\n        print(\"File does not exist at path: \\(path)\")\n        return nil\n    }\n    \n    do {\n        let contents = try String(contentsOfFile: path, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at path \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file at the specified path, handling errors if the file is missing or unreadable."
  },
  {
    "id": 352,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let contents = try String(contentsOf: fileURL, encoding: .utf8)\n    return contents\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 353,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    guard let fileURL = URL(string: path) else { return nil }\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a text file at a specified path as a string, handling errors gracefully."
  },
  {
    "id": 354,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}",
    "summary": "This function reads and returns the contents of a text file at the specified path using UTF-8 encoding."
  },
  {
    "id": 355,
    "code": "```swift\nimport Foundation\n\nfunc readTextFileContents(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "Reads and returns the contents of a text file at the specified path using UTF-8 encoding."
  },
  {
    "id": 356,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}",
    "summary": "This function reads and returns the contents of a text file at a given path using UTF-8 encoding."
  },
  {
    "id": 357,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    let fileManager = FileManager.default\n    guard fileManager.fileExists(atPath: path) else {\n        return nil\n    }\n    \n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file at the specified path, or nil if the file doesn't exist or an error occurs."
  },
  {
    "id": 358,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads the contents of a text file at a given path and returns it as a string, handling errors if the file cannot be read."
  },
  {
    "id": 359,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file at the specified path using UTF-8 encoding, or nil if an error occurs."
  },
  {
    "id": 360,
    "code": "```swift\nimport Foundation\n\nfunc readFileContents(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "Reads and returns the contents of a file at a given path as a UTF-8 encoded string."
  },
  {
    "id": 361,
    "code": "```swift\nimport Foundation\n\nfunc readLines(from filePath: String) throws -> [String] {\n    let fileURL = URL(fileURLWithPath: filePath)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents.components(separatedBy: .newlines).filter { !$0.isEmpty }\n}\n```",
    "summary": "Reads a file from the given path and returns its non-empty lines as an array of strings."
  },
  {
    "id": 362,
    "code": "import Foundation\n\nfunc readFileContents(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let contents = try String(contentsOf: fileURL, encoding: .utf8)\n    return contents\n}",
    "summary": "This function reads and returns the contents of a file from a specified path as a string."
  },
  {
    "id": 363,
    "code": "```swift\nfunc writeStringToFile(_ content: String, atPath path: String) throws {\n    let fileURL = URL(fileURLWithPath: path)\n    try content.write(to: fileURL, atomically: true, encoding: .utf8)\n}\n```",
    "summary": "This function writes a given string to a file at a specified path using UTF-8 encoding."
  },
  {
    "id": 364,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "Reads the entire content of a text file from a specified path and returns it as a string."
  },
  {
    "id": 365,
    "code": "```swift\nimport Foundation\n\nfunc readFirstLineOfFile(atPath path: String) throws -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents.components(separatedBy: .newlines).first\n}\n```",
    "summary": "Reads and returns the first line of a file at a given path, or nil if the file is empty."
  },
  {
    "id": 366,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file at a given path, or nil if an error occurs."
  },
  {
    "id": 367,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "Reads and returns the contents of a text file located at the specified path using UTF-8 encoding."
  },
  {
    "id": 368,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}",
    "summary": "Reads and returns the contents of a text file at a given path using UTF-8 encoding."
  },
  {
    "id": 369,
    "code": "```swift\nimport Foundation\n\nfunc readFileContents(atPath path: String) -> String? {\n    guard let fileURL = URL(string: path) else {\n        return nil\n    }\n    \n    do {\n        let contents = try String(contentsOf: fileURL, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads the contents of a file at the given path and returns it as a String, handling errors gracefully."
  },
  {
    "id": 370,
    "code": "```swift\nimport Foundation\n\nfunc readLines(from filePath: String) throws -> [String] {\n    let fileURL = URL(fileURLWithPath: filePath)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents.components(separatedBy: .newlines).filter { !$0.isEmpty }\n}\n```",
    "summary": "Reads a text file from the specified path and returns an array of non-empty lines."
  },
  {
    "id": 371,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}",
    "summary": "This function reads a text file from a specified path and returns its contents as a String."
  },
  {
    "id": 372,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}",
    "summary": "This function reads the contents of a text file at a specified path and returns it as a string using UTF-8 encoding."
  },
  {
    "id": 373,
    "code": "func readFileContents(atPath path: String) -> String? {\n    guard let fileHandle = FileHandle(forReadingAtPath: path) else {\n        print(\"Unable to open file at \\(path)\")\n        return nil\n    }\n    defer {\n        fileHandle.closeFile()\n    }\n    let fileData = fileHandle.readDataToEndOfFile()\n    return String(data: fileData, encoding: .utf8)\n}",
    "summary": "Reads and returns the contents of a file at a given path as a UTF-8 string."
  },
  {
    "id": 374,
    "code": "import Foundation\n\nfunc readFileContents(at path: String) -> String? {\n    let fileManager = FileManager.default\n    guard fileManager.fileExists(atPath: path) else {\n        print(\"File does not exist at path: \\(path)\")\n        return nil\n    }\n    do {\n        let contents = try String(contentsOfFile: path, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a file at a specified path, handling errors if the file does not exist or cannot be read."
  },
  {
    "id": 375,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let contents = try String(contentsOfFile: path, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads the contents of a text file at a specified path and returns it as a String, handling any errors that occur."
  },
  {
    "id": 376,
    "code": "```swift\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file from the specified path as a String, or nil if an error occurs."
  },
  {
    "id": 377,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    let fileManager = FileManager.default\n    guard fileManager.fileExists(atPath: path) else {\n        return nil\n    }\n    \n    do {\n        let content = try String(contentsOfFile: path, encoding: .utf8)\n        return content\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the content of a text file at a given path, handling errors if the file cannot be accessed."
  },
  {
    "id": 378,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "This function reads and returns the contents of a text file at the specified path using UTF-8 encoding."
  },
  {
    "id": 379,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}",
    "summary": "Reads and returns the content of a text file at the specified path using UTF-8 encoding."
  },
  {
    "id": 380,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}",
    "summary": "Reads the contents of a text file at the specified path and returns it as a String."
  },
  {
    "id": 381,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}",
    "summary": "Reads and returns the contents of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 382,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads the contents of a text file at a specified path and returns it as a String."
  },
  {
    "id": 383,
    "code": "```swift\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let contents = try String(contentsOfFile: path, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads the contents of a text file at a specified path and returns it as a string, handling errors gracefully."
  },
  {
    "id": 384,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads and returns the contents of a text file at a specified path as a String, handling errors if reading fails."
  },
  {
    "id": 385,
    "code": "import Foundation\n\nfunc readLinesFromFile(atPath path: String) -> [String]? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents.components(separatedBy: .newlines).filter { !$0.isEmpty }\n    } catch {\n        print(\"Error reading file: \\(error)\")\n        return nil\n    }\n}",
    "summary": "Reads a file at the given path and returns its non-empty lines as an array of strings."
  },
  {
    "id": 386,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "Reads and returns the contents of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 387,
    "code": "```swift\nimport Foundation\n\nfunc readTextFileContents(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 388,
    "code": "```swift\nimport Foundation\n\nfunc readFileContents(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "This function reads and returns the contents of a file at a given path as a UTF-8 encoded string."
  },
  {
    "id": 389,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "Reads and returns the contents of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 390,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a given path, handling any errors that occur during the process."
  },
  {
    "id": 391,
    "code": "import Foundation\n\nfunc readLinesFromFile(atPath path: String) -> [String]? {\n    guard let fileHandle = FileHandle(forReadingAtPath: path) else {\n        print(\"Failed to open file at path: \\(path)\")\n        return nil\n    }\n    \n    defer {\n        fileHandle.closeFile()\n    }\n    \n    let data = fileHandle.readDataToEndOfFile()\n    if let content = String(data: data, encoding: .utf8) {\n        return content.components(separatedBy: .newlines)\n    } else {\n        print(\"Failed to decode file content.\")\n        return nil\n    }\n}",
    "summary": "This function reads a file at the specified path and returns its content as an array of strings, each representing a line."
  },
  {
    "id": 392,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}",
    "summary": "Reads and returns the contents of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 393,
    "code": "import Foundation\n\nfunc readFileContents(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}",
    "summary": "Reads and returns the contents of a file at a specified path as a UTF-8 encoded string."
  },
  {
    "id": 394,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}",
    "summary": "This function reads and returns the contents of a text file at the specified path using UTF-8 encoding."
  },
  {
    "id": 395,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}",
    "summary": "This function reads and returns the contents of a text file at a specified path as a UTF-8 string."
  },
  {
    "id": 396,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    guard let fileURL = URL(string: path) else {\n        return nil\n    }\n    \n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the content of a text file at a given path, or nil if an error occurs."
  },
  {
    "id": 397,
    "code": "```swift\nimport Foundation\n\nfunc readLinesFromFile(atPath path: String) -> [String]? {\n    guard let fileHandle = FileHandle(forReadingAtPath: path) else {\n        return nil\n    }\n    defer {\n        fileHandle.closeFile()\n    }\n    \n    let data = fileHandle.readDataToEndOfFile()\n    guard let content = String(data: data, encoding: .utf8) else {\n        return nil\n    }\n    \n    return content.components(separatedBy: .newlines).filter { !$0.isEmpty }\n}\n```",
    "summary": "Reads a file from the specified path and returns its non-empty lines as an array of strings."
  },
  {
    "id": 398,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a given path, handling any errors that occur during the process."
  },
  {
    "id": 399,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    guard let fileURL = URL(string: path) else { return nil }\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads the contents of a text file at a specified path and returns it as a string, handling any errors that occur."
  },
  {
    "id": 400,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    guard FileManager.default.fileExists(atPath: path) else {\n        return nil\n    }\n    \n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}",
    "summary": "This function reads and returns the contents of a text file at a specified path, or returns nil if the file does not exist or an error occurs."
  },
  {
    "id": 401,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads the contents of a text file at a specified path and returns it as a String, handling errors if the file cannot be read."
  },
  {
    "id": 402,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let contents = try String(contentsOfFile: path, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file at the specified path using UTF-8 encoding, or prints an error if it fails."
  },
  {
    "id": 403,
    "code": "```swift\nfunc readTextFile(from path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file at a given path as a UTF-8 encoded string, handling errors gracefully."
  },
  {
    "id": 404,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    guard let fileURL = URL(string: path) else { return nil }\n    do {\n        let content = try String(contentsOf: fileURL, encoding: .utf8)\n        return content\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file at the specified path, or nil if an error occurs."
  },
  {
    "id": 405,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the content of a text file from the specified path, or prints an error if the operation fails."
  },
  {
    "id": 406,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a given file path as a string using UTF-8 encoding."
  },
  {
    "id": 407,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    guard FileManager.default.fileExists(atPath: path) else {\n        return nil\n    }\n    do {\n        let content = try String(contentsOfFile: path, encoding: .utf8)\n        return content\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads the contents of a text file at a specified path and returns it as a string, or nil if the file doesn't exist or an error occurs."
  },
  {
    "id": 408,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}\n```",
    "summary": "This function reads the content of a text file from a specified path and returns it as a UTF-8 encoded string."
  },
  {
    "id": 409,
    "code": "```swift\nimport Foundation\n\nfunc writeTextToFile(text: String, fileName: String, directory: FileManager.SearchPathDirectory = .documentDirectory) throws {\n    let fileManager = FileManager.default\n    let urls = fileManager.urls(for: directory, in: .userDomainMask)\n    guard let documentDirectory = urls.first else {\n        throw NSError(domain: \"FileErrorDomain\", code: 1, userInfo: [NSLocalizedDescriptionKey: \"Directory not found.\"])\n    }\n    let fileURL = documentDirectory.appendingPathComponent(fileName)\n    try text.write(to: fileURL, atomically: true, encoding: .utf8)\n}\n```",
    "summary": "This function writes a given text to a specified file in the document directory, throwing an error if the operation fails."
  },
  {
    "id": 410,
    "code": "```swift\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file at a given path, handling errors gracefully."
  },
  {
    "id": 411,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a text file at the specified path, handling any errors encountered."
  },
  {
    "id": 412,
    "code": "import Foundation\n\nfunc readFileContents(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}",
    "summary": "Reads and returns the contents of a file at a given path as a UTF-8 encoded string."
  },
  {
    "id": 413,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the content of a text file at the specified path, handling errors if the file cannot be read."
  },
  {
    "id": 414,
    "code": "import Foundation\n\nfunc readFileContents(from filePath: String) -> String? {\n    let fileURL = URL(fileURLWithPath: filePath)\n    do {\n        let contents = try String(contentsOf: fileURL, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a file at the specified file path as a string."
  },
  {
    "id": 415,
    "code": "import Foundation\n\nfunc readFileContents(atPath path: String) -> String? {\n    guard let fileHandle = FileHandle(forReadingAtPath: path) else {\n        return nil\n    }\n    defer {\n        fileHandle.closeFile()\n    }\n    let data = fileHandle.readDataToEndOfFile()\n    return String(data: data, encoding: .utf8)\n}",
    "summary": "Reads and returns the entire contents of a file as a UTF-8 encoded string from a specified file path."
  },
  {
    "id": 416,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a text file at a given path, or nil if an error occurs."
  },
  {
    "id": 417,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}",
    "summary": "This function reads the contents of a text file from a specified path and returns it as a string."
  },
  {
    "id": 418,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    if let fileContents = try? String(contentsOfFile: path, encoding: .utf8) {\n        return fileContents\n    } else {\n        print(\"Failed to read file at path: \\(path)\")\n        return nil\n    }\n}",
    "summary": "This function reads the contents of a text file at a given path and returns it as a string."
  },
  {
    "id": 419,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    let fileManager = FileManager.default\n    guard fileManager.fileExists(atPath: path) else {\n        print(\"File does not exist at path: \\(path)\")\n        return nil\n    }\n    \n    do {\n        let contents = try String(contentsOfFile: path, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Failed to read file with error: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads the contents of a text file at the specified path and returns it as a string, or nil if the file doesn't exist or an error occurs."
  },
  {
    "id": 420,
    "code": "func readFileContents(from filePath: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: filePath, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file: \\(error)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a file at the specified path as a String, handling errors if they occur."
  },
  {
    "id": 421,
    "code": "```swift\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file at the specified path, or nil if an error occurs."
  },
  {
    "id": 422,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}\n```",
    "summary": "Reads and returns the content of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 423,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let contents = try String(contentsOf: fileURL, encoding: .utf8)\n    return contents\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 424,
    "code": "```swift\nimport Foundation\n\nfunc readFileContents(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let contents = try String(contentsOf: fileURL, encoding: .utf8)\n    return contents\n}\n```",
    "summary": "Reads the contents of a file at a specified path and returns it as a UTF-8 encoded string."
  },
  {
    "id": 425,
    "code": "```swift\nimport Foundation\n\nfunc readFileContents(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let contents = try String(contentsOf: fileURL, encoding: .utf8)\n    return contents\n}\n```",
    "summary": "Reads and returns the contents of a file at the given path as a UTF-8 encoded string."
  },
  {
    "id": 426,
    "code": "import Foundation\n\nfunc readLinesFromFile(at filePath: String) -> [String]? {\n    guard let fileHandle = FileHandle(forReadingAtPath: filePath) else {\n        return nil\n    }\n    defer {\n        fileHandle.closeFile()\n    }\n    \n    if let fileData = try? fileHandle.readToEnd(), \n       let fileContent = String(data: fileData, encoding: .utf8) {\n        return fileContent.components(separatedBy: .newlines)\n    }\n    return nil\n}",
    "summary": "Reads all lines from a file at a given path and returns them as an array of strings."
  },
  {
    "id": 427,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}",
    "summary": "Reads and returns the contents of a text file at a given path as a String using UTF-8 encoding."
  },
  {
    "id": 428,
    "code": "import Foundation\n\nfunc readLines(from filePath: String) -> [String]? {\n    guard let fileHandle = FileHandle(forReadingAtPath: filePath) else {\n        return nil\n    }\n    \n    defer {\n        fileHandle.closeFile()\n    }\n    \n    if let fileData = try? String(contentsOfFile: filePath, encoding: .utf8) {\n        return fileData.components(separatedBy: .newlines)\n    }\n    \n    return nil\n}",
    "summary": "This function reads a file at a given path and returns its content as an array of strings, each representing a line in the file."
  },
  {
    "id": 429,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    guard FileManager.default.fileExists(atPath: path) else {\n        return nil\n    }\n    do {\n        let content = try String(contentsOfFile: path, encoding: .utf8)\n        return content\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}",
    "summary": "This function reads and returns the content of a text file at a given path, handling errors if the file cannot be read."
  },
  {
    "id": 430,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let content = try String(contentsOf: fileURL, encoding: .utf8)\n        return content\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads and returns the content of a text file at a given path, or prints an error if reading fails."
  },
  {
    "id": 431,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "This function reads the contents of a text file at a specified path and returns it as a string."
  },
  {
    "id": 432,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let fileURL = URL(fileURLWithPath: path)\n        let content = try String(contentsOf: fileURL, encoding: .utf8)\n        return content\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads and returns the content of a text file at a specified path using UTF-8 encoding, or nil if an error occurs."
  },
  {
    "id": 433,
    "code": "```swift\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 434,
    "code": "```swift\nfunc readTextFile(atPath path: String) -> String? {\n    guard FileManager.default.fileExists(atPath: path) else {\n        print(\"File does not exist at path: \\(path)\")\n        return nil\n    }\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Failed to read file at path: \\(path) with error: \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file at a specified path, or nil if the file doesn't exist or an error occurs."
  },
  {
    "id": 435,
    "code": "```swift\nfunc readFileContents(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "This function reads the contents of a file at the specified path and returns it as a UTF-8 encoded string."
  },
  {
    "id": 436,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}",
    "summary": "Reads a text file from the specified path and returns its contents as a string."
  },
  {
    "id": 437,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a text file at the specified path, handling any errors that occur."
  },
  {
    "id": 438,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}",
    "summary": "Reads and returns the contents of a text file at the specified path using UTF-8 encoding."
  },
  {
    "id": 439,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a text file at a given path, or nil if an error occurs."
  },
  {
    "id": 440,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a text file at the specified path, or nil if an error occurs."
  },
  {
    "id": 441,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads the contents of a text file at the specified path and returns it as a String."
  },
  {
    "id": 442,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a text file at a given path as a string, or nil if an error occurs."
  },
  {
    "id": 443,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    guard let fileURL = URL(string: path) else { return nil }\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads the contents of a text file at a specified path and returns it as a String, or nil if an error occurs."
  },
  {
    "id": 444,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a text file at the specified path using UTF-8 encoding."
  },
  {
    "id": 445,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}",
    "summary": "This Swift function reads and returns the contents of a text file at a given file path using UTF-8 encoding."
  },
  {
    "id": 446,
    "code": "```swift\nfunc readTextFileContents(at path: String) -> String? {\n    do {\n        let contents = try String(contentsOfFile: path, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file at a specified path, handling errors if the operation fails."
  },
  {
    "id": 447,
    "code": "import Foundation\n\nfunc readFileContents(from filePath: String) -> String? {\n    guard let data = FileManager.default.contents(atPath: filePath) else {\n        return nil\n    }\n    return String(data: data, encoding: .utf8)\n}",
    "summary": "Reads and returns the contents of a file at a given path as a UTF-8 string."
  },
  {
    "id": 448,
    "code": "import Foundation\n\nfunc writeTextToFile(text: String, to fileName: String) throws {\n    let fileURL = FileManager.default.temporaryDirectory.appendingPathComponent(fileName)\n    try text.write(to: fileURL, atomically: true, encoding: .utf8)\n}",
    "summary": "Writes a given string to a specified file in the temporary directory."
  },
  {
    "id": 449,
    "code": "func readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads the contents of a text file at a given path and returns it as a string."
  },
  {
    "id": 450,
    "code": "import Foundation\n\nfunc readFileContents(atPath path: String) -> String? {\n    let fileManager = FileManager.default\n    guard fileManager.fileExists(atPath: path) else {\n        return nil\n    }\n    do {\n        let contents = try String(contentsOfFile: path, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file: \\(error)\")\n        return nil\n    }\n}",
    "summary": "This function reads and returns the contents of a file at a specified path as a String, or nil if the file does not exist or an error occurs."
  },
  {
    "id": 451,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}",
    "summary": "Reads the contents of a text file at a specified path and returns it as a string."
  },
  {
    "id": 452,
    "code": "```swift\nfunc readFileContents(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "Reads and returns the contents of a file at a specified path as a UTF-8 encoded string."
  },
  {
    "id": 453,
    "code": "```swift\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 454,
    "code": "```swift\nfunc readFileContents(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let contents = try String(contentsOf: fileURL, encoding: .utf8)\n    return contents\n}\n```",
    "summary": "This function reads the contents of a file at a specified path and returns it as a UTF-8 encoded string."
  },
  {
    "id": 455,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 456,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads the contents of a text file at a specified path and returns it as a String."
  },
  {
    "id": 457,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads and returns the contents of a text file at a given path, handling any errors that occur."
  },
  {
    "id": 458,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a text file at a given path, or nil if an error occurs."
  },
  {
    "id": 459,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    guard let fileURL = URL(string: path) else { return nil }\n    do {\n        let content = try String(contentsOf: fileURL, encoding: .utf8)\n        return content\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the content of a text file at the specified path, or nil if an error occurs."
  },
  {
    "id": 460,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}",
    "summary": "This function reads and returns the content of a text file at a given path using UTF-8 encoding."
  },
  {
    "id": 461,
    "code": "func readTextFileContents(atPath path: String) -> String? {\n    do {\n        let contents = try String(contentsOfFile: path, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a text file at the specified path, or nil if an error occurs."
  },
  {
    "id": 462,
    "code": "import Foundation\n\nfunc readFileContents(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}",
    "summary": "Reads and returns the contents of a file at the specified path as a UTF-8 encoded string."
  },
  {
    "id": 463,
    "code": "import Foundation\n\nfunc readFileContents(at path: String) -> String? {\n    do {\n        let contents = try String(contentsOfFile: path, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a file at a given path, or nil if an error occurs."
  },
  {
    "id": 464,
    "code": "import Foundation\n\nfunc readFileContents(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let contents = try String(contentsOf: fileURL, encoding: .utf8)\n    return contents\n}",
    "summary": "Reads and returns the contents of a file at a specified path as a UTF-8 encoded string."
  },
  {
    "id": 465,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a text file at the specified path or prints an error if unsuccessful."
  },
  {
    "id": 466,
    "code": "import Foundation\n\nfunc readFileContents(from path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let contents = try String(contentsOf: fileURL, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a file at a specified path as a String, or nil if an error occurs."
  },
  {
    "id": 467,
    "code": "```swift\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file at the specified path, or nil if an error occurs."
  },
  {
    "id": 468,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    guard FileManager.default.fileExists(atPath: path) else { return nil }\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file at a given path, or nil if the file doesn't exist or an error occurs."
  },
  {
    "id": 469,
    "code": "func readFileContents(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}",
    "summary": "Reads and returns the contents of a file at a given path as a UTF-8 encoded string."
  },
  {
    "id": 470,
    "code": "import Foundation\n\nfunc readFileContents(atPath path: String) -> String? {\n    let fileManager = FileManager.default\n    guard fileManager.fileExists(atPath: path) else {\n        print(\"File does not exist at path: \\(path)\")\n        return nil\n    }\n    \n    do {\n        let contents = try String(contentsOfFile: path, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at path: \\(path), error: \\(error)\")\n        return nil\n    }\n}",
    "summary": "This function reads and returns the contents of a file at a given path, handling errors gracefully."
  },
  {
    "id": 471,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    guard let fileURL = URL(string: path) else { return nil }\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a text file at the specified path, or nil if an error occurs."
  },
  {
    "id": 472,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads the contents of a text file at a given path and returns it as a string, handling any read errors."
  },
  {
    "id": 473,
    "code": "```swift\nfunc readFileContents(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads and returns the contents of a file at a specified path as a String, handling any errors that may occur."
  },
  {
    "id": 474,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    guard FileManager.default.fileExists(atPath: path) else {\n        print(\"File does not exist at path: \\(path)\")\n        return nil\n    }\n\n    do {\n        let content = try String(contentsOfFile: path, encoding: .utf8)\n        return content\n    } catch {\n        print(\"Error reading file at path: \\(path), error: \\(error)\")\n        return nil\n    }\n}",
    "summary": "This function reads and returns the content of a text file at a specified path, handling errors if the file does not exist or cannot be read."
  },
  {
    "id": 475,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let contents = try String(contentsOf: fileURL, encoding: .utf8)\n    return contents\n}",
    "summary": "This function reads the entire contents of a text file at a specified path and returns it as a String."
  },
  {
    "id": 476,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads the contents of a text file at a specified path and returns it as a String, handling errors if the file cannot be read."
  },
  {
    "id": 477,
    "code": "```swift\nimport Foundation\n\nfunc readFileContents(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "This function reads and returns the contents of a file from the specified path using UTF-8 encoding."
  },
  {
    "id": 478,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    guard let fileURL = URL(string: path) else {\n        print(\"Invalid file path.\")\n        return nil\n    }\n    \n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file at a given path or prints an error if unsuccessful."
  },
  {
    "id": 479,
    "code": "func readTextFile(at path: String) -> String? {\n    let fileManager = FileManager.default\n    guard fileManager.fileExists(atPath: path) else {\n        return nil\n    }\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a text file at the specified path, or nil if the file does not exist or an error occurs."
  },
  {
    "id": 480,
    "code": "import Foundation\n\nfunc readFileContents(atPath path: String) -> String? {\n    guard FileManager.default.fileExists(atPath: path) else {\n        print(\"File does not exist at path: \\(path)\")\n        return nil\n    }\n    do {\n        let contents = try String(contentsOfFile: path, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Failed to read file: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads and returns the contents of a file at a specified path, handling errors if the file does not exist or cannot be read."
  },
  {
    "id": 481,
    "code": "```swift\nimport Foundation\n\nfunc readLines(from filePath: String) throws -> [String] {\n    let fileContents = try String(contentsOfFile: filePath, encoding: .utf8)\n    return fileContents.components(separatedBy: .newlines).filter { !$0.isEmpty }\n}\n```",
    "summary": "Reads a file from the specified path and returns its non-empty lines as an array of strings."
  },
  {
    "id": 482,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    guard FileManager.default.fileExists(atPath: path) else {\n        print(\"File does not exist at path: \\(path)\")\n        return nil\n    }\n    \n    do {\n        let content = try String(contentsOfFile: path, encoding: .utf8)\n        return content\n    } catch {\n        print(\"Failed to read file at path: \\(path), error: \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the content of a text file at the specified path, handling file existence and read errors."
  },
  {
    "id": 483,
    "code": "```swift\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file at a specified path as a String, handling any errors encountered."
  },
  {
    "id": 484,
    "code": "```swift\nimport Foundation\n\nfunc readFileContents(at path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let contents = try String(contentsOf: fileURL, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads the contents of a file at the specified path and returns it as a string, handling errors if the file cannot be read."
  },
  {
    "id": 485,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    guard let fileURL = URL(string: path) else {\n        return nil\n    }\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file at a specified path, or nil if an error occurs."
  },
  {
    "id": 486,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    guard let fileURL = URL(string: path) else { return nil }\n    \n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file at the specified path, or nil if an error occurs."
  },
  {
    "id": 487,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    guard let fileURL = URL(string: path) else { return nil }\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file: \\(error)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a text file at the specified path, or nil if an error occurs."
  },
  {
    "id": 488,
    "code": "import Foundation\n\nfunc readFileContents(atPath path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let contents = try String(contentsOf: fileURL, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads the contents of a file at a given path and returns it as a string."
  },
  {
    "id": 489,
    "code": "```swift\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "Reads and returns the contents of a text file from a specified path using UTF-8 encoding."
  },
  {
    "id": 490,
    "code": "```swift\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads the contents of a text file at a given path and returns it as a String, handling any errors that occur."
  },
  {
    "id": 491,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    guard FileManager.default.fileExists(atPath: path) else {\n        return nil\n    }\n    \n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}",
    "summary": "The function reads and returns the contents of a text file at a specified path, handling errors if the file does not exist or cannot be read."
  },
  {
    "id": 492,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a text file at a given path, handling any errors that occur."
  },
  {
    "id": 493,
    "code": "import Foundation\n\nfunc readFileContents(atPath path: String) -> String? {\n    guard let fileData = FileManager.default.contents(atPath: path) else {\n        return nil\n    }\n    return String(data: fileData, encoding: .utf8)\n}",
    "summary": "Reads and returns the contents of a file as a UTF-8 string from the specified path."
  },
  {
    "id": 494,
    "code": "func readTextFile(at path: String) throws -> String {\n    guard FileManager.default.fileExists(atPath: path) else {\n        throw NSError(domain: \"FileErrorDomain\", code: 404, userInfo: [NSLocalizedDescriptionKey: \"File not found\"])\n    }\n    return try String(contentsOfFile: path, encoding: .utf8)\n}",
    "summary": "This function reads the contents of a text file at a specified path and returns it as a String, throwing an error if the file does not exist."
  },
  {
    "id": 495,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads the contents of a text file at a given path and returns it as a String."
  },
  {
    "id": 496,
    "code": "func writeTextToFile(text: String, fileName: String) throws {\n    let fileURL = FileManager.default.temporaryDirectory.appendingPathComponent(fileName)\n    try text.write(to: fileURL, atomically: true, encoding: .utf8)\n}",
    "summary": "Writes a given text to a specified file in the temporary directory."
  },
  {
    "id": 497,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    let fileManager = FileManager.default\n    guard fileManager.fileExists(atPath: path) else {\n        return nil\n    }\n\n    do {\n        let content = try String(contentsOfFile: path, encoding: .utf8)\n        return content\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the content of a text file at a specified path, handling errors if the file cannot be read."
  },
  {
    "id": 498,
    "code": "```swift\nimport Foundation\n\nfunc readLines(from filePath: String) -> [String]? {\n    guard let fileURL = URL(string: filePath) else {\n        return nil\n    }\n    \n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents.components(separatedBy: .newlines)\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads a file from the given path and returns its contents as an array of lines, or nil if an error occurs."
  },
  {
    "id": 499,
    "code": "```swift\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a given path, or prints an error if the file cannot be read."
  },
  {
    "id": 500,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    guard let fileURL = URL(string: path) else { return nil }\n    \n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file at the given path, or nil if an error occurs."
  },
  {
    "id": 501,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads and returns the contents of a text file at a specified path as a string, handling errors if they occur."
  },
  {
    "id": 502,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let contents = try String(contentsOf: fileURL, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}",
    "summary": "Reads a text file from the specified path and returns its contents as a string, or nil if an error occurs."
  },
  {
    "id": 503,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads the contents of a text file at a specified path and returns it as a String."
  },
  {
    "id": 504,
    "code": "import Foundation\n\nfunc readContentsOfFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let contents = try String(contentsOf: fileURL, encoding: .utf8)\n    return contents\n}",
    "summary": "Reads and returns the contents of a file at a given path as a UTF-8 encoded string."
  },
  {
    "id": 505,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    guard let fileURL = URL(string: path) else { return nil }\n    do {\n        let content = try String(contentsOf: fileURL, encoding: .utf8)\n        return content\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}",
    "summary": "This function reads and returns the content of a text file at a given path as a UTF-8 string."
  },
  {
    "id": 506,
    "code": "import Foundation\n\nfunc readFileContents(atPath path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a file at a specified path, or nil if an error occurs."
  },
  {
    "id": 507,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let content = try String(contentsOfFile: path, encoding: .utf8)\n        return content\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads the content of a text file at a specified path and returns it as a string."
  },
  {
    "id": 508,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads the contents of a text file from a specified path and returns it as a string, handling errors if they occur."
  },
  {
    "id": 509,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    guard let fileURL = URL(string: path) else { return nil }\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}",
    "summary": "This function reads a text file from the specified path and returns its contents as a String."
  },
  {
    "id": 510,
    "code": "import Foundation\n\nfunc readLinesFromFile(at path: String) -> [String]? {\n    guard let fileContents = try? String(contentsOfFile: path, encoding: .utf8) else {\n        return nil\n    }\n    return fileContents.components(separatedBy: .newlines).filter { !$0.isEmpty }\n}",
    "summary": "This function reads a file from a specified path and returns its non-empty lines as an array of strings."
  },
  {
    "id": 511,
    "code": "import Foundation\n\nfunc writeStringToFile(content: String, fileName: String) throws {\n    let fileURL = FileManager.default.temporaryDirectory.appendingPathComponent(fileName)\n    do {\n        try content.write(to: fileURL, atomically: true, encoding: .utf8)\n    } catch {\n        throw error\n    }\n}",
    "summary": "This function writes a given string to a file at a temporary directory location using UTF-8 encoding."
  },
  {
    "id": 512,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a text file from the specified path, or nil if an error occurs."
  },
  {
    "id": 513,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a text file at a specified path, handling errors if the file cannot be read."
  },
  {
    "id": 514,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a text file at the specified path, or nil if an error occurs."
  },
  {
    "id": 515,
    "code": "import Foundation\n\nfunc readFileContents(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let contents = try String(contentsOf: fileURL, encoding: .utf8)\n    return contents\n}",
    "summary": "This function reads and returns the contents of a file at a given path as a UTF-8 string."
  },
  {
    "id": 516,
    "code": "import Foundation\n\nfunc readFileContents(at path: String) -> String? {\n    let fileManager = FileManager.default\n    guard fileManager.fileExists(atPath: path) else {\n        print(\"File does not exist at path: \\(path)\")\n        return nil\n    }\n    \n    do {\n        let contents = try String(contentsOfFile: path, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at path: \\(path), Error: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a file at a specified path, or nil if the file does not exist or an error occurs."
  },
  {
    "id": 517,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads the contents of a text file at the specified path and returns it as a String."
  },
  {
    "id": 518,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads and returns the contents of a text file at a specified path as a String, using UTF-8 encoding."
  },
  {
    "id": 519,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}",
    "summary": "This function reads the contents of a text file at a given path and returns it as a String."
  },
  {
    "id": 520,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    guard let fileURL = URL(string: path) else { return nil }\n    do {\n        let contents = try String(contentsOf: fileURL, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads and returns the contents of a text file at a given path, handling errors if they occur."
  },
  {
    "id": 521,
    "code": "```swift\nimport Foundation\n\nfunc readLinesFromFile(atPath path: String) throws -> [String] {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents.components(separatedBy: .newlines)\n}\n```",
    "summary": "Reads and returns an array of lines from a file at the specified path."
  },
  {
    "id": 522,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let contents = try String(contentsOf: fileURL, encoding: .utf8)\n    return contents\n}\n```",
    "summary": "Reads and returns the contents of a text file at the specified path as a string."
  },
  {
    "id": 523,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "Reads the content of a text file at a given path and returns it as a String."
  },
  {
    "id": 524,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}",
    "summary": "This function reads the contents of a text file at a given path and returns it as a String."
  },
  {
    "id": 525,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "Reads and returns the contents of a text file at the specified path as a String."
  },
  {
    "id": 526,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads the contents of a text file at a given path and returns it as a string."
  },
  {
    "id": 527,
    "code": "import Foundation\n\nfunc readFileContents(at path: String) -> String? {\n    let fileManager = FileManager.default\n    guard fileManager.fileExists(atPath: path) else {\n        return nil\n    }\n    do {\n        let contents = try String(contentsOfFile: path, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads and returns the contents of a file at a specified path, or returns nil if the file doesn't exist or an error occurs."
  },
  {
    "id": 528,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    guard FileManager.default.fileExists(atPath: path) else {\n        print(\"File does not exist at path: \\(path)\")\n        return nil\n    }\n    \n    do {\n        let contents = try String(contentsOfFile: path, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Failed to read file at path \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads the contents of a text file at a given path and returns it as a String, or nil if the file doesn't exist or cannot be read."
  },
  {
    "id": 529,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}",
    "summary": "Reads and returns the contents of a text file at the specified path using UTF-8 encoding."
  },
  {
    "id": 530,
    "code": "import Foundation\n\nfunc readFileContents(atPath path: String) -> String? {\n    let fileManager = FileManager.default\n    guard fileManager.fileExists(atPath: path) else {\n        print(\"File does not exist at path: \\(path)\")\n        return nil\n    }\n    \n    do {\n        let contents = try String(contentsOfFile: path, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at path: \\(path), error: \\(error)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a file at a given path as a String, handling errors if the file does not exist or cannot be read."
  },
  {
    "id": 531,
    "code": "import Foundation\n\nfunc readFileContents(atPath path: String) -> String? {\n    let fileManager = FileManager.default\n    guard fileManager.fileExists(atPath: path) else {\n        return nil\n    }\n    do {\n        let contents = try String(contentsOfFile: path, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a file at a specified path as a String, or nil if the file does not exist or an error occurs."
  },
  {
    "id": 532,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    guard let fileURL = URL(string: path) else { \n        return nil \n    }\n    \n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}",
    "summary": "This function reads the contents of a text file at a specified path and returns it as a String."
  },
  {
    "id": 533,
    "code": "func readFileContents(atPath path: String) -> String? {\n    guard let fileContents = try? String(contentsOfFile: path, encoding: .utf8) else {\n        return nil\n    }\n    return fileContents\n}",
    "summary": "Reads the contents of a file at a given path and returns it as a string, or nil if the operation fails."
  },
  {
    "id": 534,
    "code": "func readFileContents(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}",
    "summary": "Reads and returns the contents of a file at a given path as a UTF-8 encoded string."
  },
  {
    "id": 535,
    "code": "import Foundation\n\nfunc readLinesFromFile(atPath path: String) -> [String]? {\n    guard let fileContents = try? String(contentsOfFile: path, encoding: .utf8) else {\n        return nil\n    }\n    return fileContents.components(separatedBy: .newlines).filter { !$0.isEmpty }\n}",
    "summary": "Reads a file and returns its non-empty lines as an array of strings, or nil if the file cannot be read."
  },
  {
    "id": 536,
    "code": "```swift\nimport Foundation\n\nfunc readFileContents(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "This function reads and returns the contents of a file at a specified path as a UTF-8 encoded string."
  },
  {
    "id": 537,
    "code": "import Foundation\n\nfunc readFileContent(atPath path: String) -> String? {\n    guard let fileData = FileManager.default.contents(atPath: path) else {\n        return nil\n    }\n    return String(data: fileData, encoding: .utf8)\n}",
    "summary": "This function reads the content of a file at a given path and returns it as a UTF-8 string."
  },
  {
    "id": 538,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "This function reads the contents of a text file at a given path and returns it as a String."
  },
  {
    "id": 539,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 540,
    "code": "```swift\nimport Foundation\n\nfunc readFileContents(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let contents = try String(contentsOf: fileURL, encoding: .utf8)\n    return contents\n}\n```",
    "summary": "Reads the contents of a file at a given path and returns it as a string."
  },
  {
    "id": 541,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a text file at the specified path as a String, or nil if an error occurs."
  },
  {
    "id": 542,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    guard FileManager.default.fileExists(atPath: path) else { return nil }\n    do {\n        let contents = try String(contentsOfFile: path, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the content of a text file at the specified path, or nil if an error occurs."
  },
  {
    "id": 543,
    "code": "func readFileContents(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}",
    "summary": "This function reads and returns the contents of a file at a specified path using UTF-8 encoding."
  },
  {
    "id": 544,
    "code": "```swift\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file at the specified path, or nil if an error occurs."
  },
  {
    "id": 545,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "Reads and returns the contents of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 546,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "Reads and returns the contents of a text file from a specified path using UTF-8 encoding."
  },
  {
    "id": 547,
    "code": "```swift\nimport Foundation\n\nfunc readFileContents(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let contents = try String(contentsOf: fileURL, encoding: .utf8)\n    return contents\n}\n```",
    "summary": "This function reads and returns the entire content of a file at a specified path as a UTF-8 encoded string, throwing an error if the operation fails."
  },
  {
    "id": 548,
    "code": "import Foundation\n\nfunc readTextFileContents(atPath path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let contents = try String(contentsOf: fileURL, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads and returns the contents of a text file at a specified path, handling errors by printing them and returning nil if reading fails."
  },
  {
    "id": 549,
    "code": "import Foundation\n\nfunc readFileContents(from path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let contents = try String(contentsOf: fileURL, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a file at the specified path as a string, handling errors gracefully."
  },
  {
    "id": 550,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 551,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}",
    "summary": "Reads and returns the contents of a text file at a given path as a String."
  },
  {
    "id": 552,
    "code": "import Foundation\n\nfunc readFileContents(atPath path: String) -> String? {\n    guard let fileURL = URL(string: path) else { return nil }\n    do {\n        let contents = try String(contentsOf: fileURL, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads the contents of a file at a given path and returns it as a string, handling errors gracefully."
  },
  {
    "id": 553,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    guard let fileURL = URL(string: path) else { return nil }\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file: \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file at a specified path as a String, handling errors gracefully."
  },
  {
    "id": 554,
    "code": "```swift\nimport Foundation\n\nfunc readTextFileContents(from filePath: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: filePath)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a given file path using UTF-8 encoding."
  },
  {
    "id": 555,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    guard let fileURL = URL(string: path) else { return nil }\n    do {\n        let contents = try String(contentsOf: fileURL, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}",
    "summary": "This function reads the contents of a text file at a given path and returns it as a String."
  },
  {
    "id": 556,
    "code": "import Foundation\n\nfunc writeStringToFile(contents: String, fileName: String, directory: FileManager.SearchPathDirectory = .documentDirectory) throws {\n    let fileManager = FileManager.default\n    let urls = fileManager.urls(for: directory, in: .userDomainMask)\n    \n    guard let documentDirectory = urls.first else {\n        throw NSError(domain: \"FileWriteError\", code: 1, userInfo: [NSLocalizedDescriptionKey: \"Unable to access document directory\"])\n    }\n    \n    let fileURL = documentDirectory.appendingPathComponent(fileName)\n    \n    do {\n        try contents.write(to: fileURL, atomically: true, encoding: .utf8)\n    } catch {\n        throw NSError(domain: \"FileWriteError\", code: 2, userInfo: [NSLocalizedDescriptionKey: \"Failed to write to file\"])\n    }\n}",
    "summary": "This function writes a given string to a file in the specified directory on the user's device, throwing errors for failure cases."
  },
  {
    "id": 557,
    "code": "```swift\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads the contents of a text file at a given path and returns it as a string, handling any potential errors."
  },
  {
    "id": 558,
    "code": "import Foundation\n\nfunc readTextFile(from filePath: String) -> String? {\n    let fileManager = FileManager.default\n    guard fileManager.fileExists(atPath: filePath) else {\n        print(\"File does not exist at path: \\(filePath)\")\n        return nil\n    }\n    \n    do {\n        let fileContents = try String(contentsOfFile: filePath, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at path: \\(filePath), error: \\(error)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a text file at a specified path, handling errors if the file cannot be read."
  },
  {
    "id": 559,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    if let fileURL = URL(string: path) {\n        do {\n            let contents = try String(contentsOf: fileURL, encoding: .utf8)\n            return contents\n        } catch {\n            print(\"Error reading file: \\(error.localizedDescription)\")\n            return nil\n        }\n    }\n    print(\"Invalid file path.\")\n    return nil\n}",
    "summary": "Reads the contents of a text file at a given path and returns it as a String, or nil if an error occurs."
  },
  {
    "id": 560,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads and returns the content of a text file at a specified path, handling errors if the file cannot be read."
  },
  {
    "id": 561,
    "code": "```swift\nimport Foundation\n\nfunc readFileContents(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "This function reads and returns the contents of a file located at a specified path using UTF-8 encoding."
  },
  {
    "id": 562,
    "code": "```swift\nimport Foundation\n\nfunc writeStringToFile(content: String, to filePath: String) throws {\n    let fileURL = URL(fileURLWithPath: filePath)\n    do {\n        try content.write(to: fileURL, atomically: true, encoding: .utf8)\n    } catch {\n        throw error\n    }\n}\n```",
    "summary": "This function writes a given string to a specified file path, using UTF-8 encoding."
  },
  {
    "id": 563,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}\n```",
    "summary": "Reads and returns the contents of a text file at the specified path using UTF-8 encoding."
  },
  {
    "id": 564,
    "code": "```swift\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        return try String(contentsOf: fileURL, encoding: .utf8)\n    } catch {\n        throw error\n    }\n}\n```",
    "summary": "This function reads the contents of a text file at a specified path and returns it as a string."
  },
  {
    "id": 565,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}",
    "summary": "Reads the entire contents of a text file at a specified path using UTF-8 encoding and returns it as a string."
  },
  {
    "id": 566,
    "code": "import Foundation\n\nfunc readTextFileContents(atPath path: String) -> String? {\n    let fileManager = FileManager.default\n    guard fileManager.fileExists(atPath: path) else {\n        return nil\n    }\n    \n    do {\n        let contents = try String(contentsOfFile: path, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads and returns the contents of a text file at a given path, or returns nil if the file does not exist or an error occurs."
  },
  {
    "id": 567,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let contents = try String(contentsOfFile: path, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}",
    "summary": "Reads the contents of a text file at a specified path and returns it as a String, or nil if an error occurs."
  },
  {
    "id": 568,
    "code": "import Foundation\n\nfunc readTextFile(from path: String) -> String? {\n    let fileManager = FileManager.default\n    if fileManager.fileExists(atPath: path) {\n        do {\n            let content = try String(contentsOfFile: path, encoding: .utf8)\n            return content\n        } catch {\n            print(\"Error reading file: \\(error.localizedDescription)\")\n            return nil\n        }\n    } else {\n        print(\"File does not exist at path: \\(path)\")\n        return nil\n    }\n}",
    "summary": "Reads the content of a text file from a specified path and returns it as a String, or nil if an error occurs."
  },
  {
    "id": 569,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a text file at a specified path, or nil if an error occurs."
  },
  {
    "id": 570,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let contents = try String(contentsOfFile: path, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads the contents of a text file at a specified path and returns it as a String, handling errors if they occur."
  },
  {
    "id": 571,
    "code": "```swift\nimport Foundation\n\nfunc readFileContents(at path: String) -> String? {\n    let fileManager = FileManager.default\n    guard fileManager.fileExists(atPath: path) else {\n        return nil\n    }\n    \n    do {\n        let contents = try String(contentsOfFile: path, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file: \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads the contents of a file at a specified path and returns it as a string, or nil if the file does not exist or an error occurs."
  },
  {
    "id": 572,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}",
    "summary": "This function reads and returns the contents of a text file at a given path, handling errors if the file cannot be read."
  },
  {
    "id": 573,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "Reads and returns the content of a text file at the given path using UTF-8 encoding."
  },
  {
    "id": 574,
    "code": "```swift\nfunc readFileContents(from path: String) -> String? {\n    guard let fileURL = URL(string: path) else { return nil }\n    do {\n        let contents = try String(contentsOf: fileURL, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a file from the specified path as a UTF-8 string, handling errors gracefully."
  },
  {
    "id": 575,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let contents = try String(contentsOf: fileURL, encoding: .utf8)\n    return contents\n}",
    "summary": "Reads and returns the contents of a text file at the specified path using UTF-8 encoding."
  },
  {
    "id": 576,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let fileURL = URL(fileURLWithPath: path)\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Failed to read file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a specified path, handling errors gracefully."
  },
  {
    "id": 577,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "Reads and returns the contents of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 578,
    "code": "```swift\nimport Foundation\n\nfunc readFileContents(atPath path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let content = try String(contentsOf: fileURL, encoding: .utf8)\n        return content\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a file at a given path as a UTF-8 string, or nil if an error occurs."
  },
  {
    "id": 579,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let content = try String(contentsOf: fileURL, encoding: .utf8)\n    return content\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 580,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    guard let fileURL = URL(string: path) else { return nil }\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file: \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a given path or returns nil if an error occurs."
  },
  {
    "id": 581,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    let fileManager = FileManager.default\n    guard fileManager.fileExists(atPath: path) else { return nil }\n    \n    do {\n        return try String(contentsOfFile: path, encoding: .utf8)\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads a text file from the specified path and returns its contents as a String."
  },
  {
    "id": 582,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file: \\(error)\")\n        return nil\n    }\n}",
    "summary": "Reads the contents of a text file at the given path and returns it as a String."
  },
  {
    "id": 583,
    "code": "import Foundation\n\nfunc readFileContents(atPath path: String) -> String? {\n    guard FileManager.default.fileExists(atPath: path) else {\n        print(\"File does not exist at path: \\(path)\")\n        return nil\n    }\n\n    do {\n        let contents = try String(contentsOfFile: path, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at path: \\(path), error: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a file at a given path as a string, or prints an error if the file does not exist or cannot be read."
  },
  {
    "id": 584,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}",
    "summary": "This function reads and returns the contents of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 585,
    "code": "import Foundation\n\nfunc readTextFile(at filePath: String) -> String? {\n    let fileURL = URL(fileURLWithPath: filePath)\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(filePath): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads the contents of a text file at a given file path and returns it as a string."
  },
  {
    "id": 586,
    "code": "```swift\nfunc readFileContents(from filePath: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: filePath)\n    guard FileManager.default.fileExists(atPath: fileURL.path) else {\n        throw NSError(domain: \"FileError\", code: 404, userInfo: [NSLocalizedDescriptionKey: \"File not found\"])\n    }\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}\n```",
    "summary": "This function reads and returns the contents of a file at a given path, throwing an error if the file does not exist or cannot be read."
  },
  {
    "id": 587,
    "code": "```swift\nfunc readFileContents(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}\n```",
    "summary": "This function reads and returns the contents of a file at a given path using UTF-8 encoding."
  },
  {
    "id": 588,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let contents = try String(contentsOf: fileURL, encoding: .utf8)\n    return contents\n}\n```",
    "summary": "This function reads the contents of a text file at a specified path and returns it as a string."
  },
  {
    "id": 589,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Failed to read file: \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads a text file from a given path and returns its contents as a string, or nil if an error occurs."
  },
  {
    "id": 590,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let content = try String(contentsOf: fileURL, encoding: .utf8)\n        return content\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the content of a text file at a specified path as a String, handling errors if they occur."
  },
  {
    "id": 591,
    "code": "import Foundation\n\nfunc readFileContents(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}",
    "summary": "Reads and returns the contents of a file at a specified path as a string."
  },
  {
    "id": 592,
    "code": "```swift\nimport Foundation\n\nfunc readFileContents(from filePath: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: filePath)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "This function reads and returns the contents of a file at the specified file path using UTF-8 encoding."
  },
  {
    "id": 593,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    guard let fileURL = URL(string: path) else {\n        return nil\n    }\n    do {\n        let contents = try String(contentsOf: fileURL, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a text file from a specified path as a string."
  },
  {
    "id": 594,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}",
    "summary": "Reads the content of a text file at the specified path and returns it as a string."
  },
  {
    "id": 595,
    "code": "func readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file: \\(error)\")\n        return nil\n    }\n}",
    "summary": "This function reads the contents of a text file at a given path and returns it as a String, handling errors gracefully."
  },
  {
    "id": 596,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let contents = try String(contentsOf: fileURL, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}",
    "summary": "This function reads the contents of a text file from a specified path and returns it as a string."
  },
  {
    "id": 597,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        throw error\n    }\n}\n```",
    "summary": "This function reads and returns the content of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 598,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let contents = try String(contentsOf: fileURL, encoding: .utf8)\n    return contents\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 599,
    "code": "```swift\nimport Foundation\n\nfunc readTextFileContents(from filePath: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: filePath)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 600,
    "code": "```swift\nimport Foundation\n\nfunc writeStringToFile(_ content: String, atPath path: String) throws {\n    let url = URL(fileURLWithPath: path)\n    do {\n        try content.write(to: url, atomically: true, encoding: .utf8)\n    } catch {\n        throw error\n    }\n}\n```",
    "summary": "This function writes a given string to a specified file path using UTF-8 encoding."
  },
  {
    "id": 601,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    let fileManager = FileManager.default\n    guard fileManager.fileExists(atPath: path) else {\n        print(\"File does not exist at path: \\(path)\")\n        return nil\n    }\n    \n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at path: \\(path), error: \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads the contents of a text file at a given path and returns it as a String, handling errors for file existence and reading operations."
  },
  {
    "id": 602,
    "code": "```swift\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        throw error\n    }\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a given path using UTF-8 encoding."
  },
  {
    "id": 603,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a specified path, or nil if an error occurs."
  },
  {
    "id": 604,
    "code": "```swift\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        throw error\n    }\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 605,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    guard let fileURL = URL(string: path) else {\n        return nil\n    }\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file: \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads the contents of a text file at the specified path and returns it as a string."
  },
  {
    "id": 606,
    "code": "import Foundation\n\nfunc readFileContents(atPath path: String) -> String? {\n    guard FileManager.default.fileExists(atPath: path) else {\n        print(\"File does not exist at path: \\(path)\")\n        return nil\n    }\n    \n    do {\n        let contents = try String(contentsOfFile: path, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at path: \\(path), error: \\(error)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a file at a given path as a string, or nil if an error occurs."
  },
  {
    "id": 607,
    "code": "import Foundation\n\nfunc readFileContents(atPath path: String) -> String? {\n    let fileManager = FileManager.default\n    guard fileManager.fileExists(atPath: path) else {\n        return nil\n    }\n    \n    do {\n        let contents = try String(contentsOfFile: path, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a file at a specified path, or nil if the file does not exist or an error occurs."
  },
  {
    "id": 608,
    "code": "import Foundation\n\nfunc readTextFile(at filePath: String) -> String? {\n    let fileURL = URL(fileURLWithPath: filePath)\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a text file at a given path as a String, handling errors gracefully."
  },
  {
    "id": 609,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}",
    "summary": "This function reads the contents of a text file at a specified path and returns it as a string."
  },
  {
    "id": 610,
    "code": "import Foundation\n\nfunc readFileContents(atPath path: String) -> String? {\n    guard FileManager.default.fileExists(atPath: path) else {\n        return nil\n    }\n    \n    do {\n        let content = try String(contentsOfFile: path, encoding: .utf8)\n        return content\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads and returns the contents of a file at a given path as a string, or nil if the file does not exist or an error occurs."
  },
  {
    "id": 611,
    "code": "import Foundation\n\nfunc readLinesFromFile(atPath path: String) throws -> [String] {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents.components(separatedBy: .newlines)\n}",
    "summary": "Reads and returns all lines from a file at the specified path as an array of strings."
  },
  {
    "id": 612,
    "code": "import Foundation\n\nfunc readLinesFromFile(atPath path: String) -> [String]? {\n    guard let fileHandle = FileHandle(forReadingAtPath: path) else {\n        return nil\n    }\n    defer {\n        fileHandle.closeFile()\n    }\n    let data = fileHandle.readDataToEndOfFile()\n    guard let content = String(data: data, encoding: .utf8) else {\n        return nil\n    }\n    return content.components(separatedBy: .newlines).filter { !$0.isEmpty }\n}",
    "summary": "Reads a file at a given path and returns its non-empty lines as an array of strings."
  },
  {
    "id": 613,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}",
    "summary": "This function reads and returns the contents of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 614,
    "code": "import Foundation\n\nfunc readFileContents(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file: \\(error)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a file at a given path as a string, handling errors if the file cannot be read."
  },
  {
    "id": 615,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}",
    "summary": "The function reads and returns the contents of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 616,
    "code": "import Foundation\n\nfunc readFileContents(atPath path: String) -> String? {\n    let fileManager = FileManager.default\n    guard fileManager.fileExists(atPath: path) else {\n        return nil\n    }\n    do {\n        let contents = try String(contentsOfFile: path, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a file at a specified path, or nil if the file does not exist or an error occurs."
  },
  {
    "id": 617,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    guard let fileURL = URL(string: path) else { return nil }\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads and returns the contents of a text file from a specified path as a String."
  },
  {
    "id": 618,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a specified path, or prints an error message if reading fails."
  },
  {
    "id": 619,
    "code": "import Foundation\n\nfunc writeTextToFile(text: String, to filePath: String) throws {\n    let fileURL = URL(fileURLWithPath: filePath)\n    try text.write(to: fileURL, atomically: true, encoding: .utf8)\n}",
    "summary": "Writes a given string to a specified file path using UTF-8 encoding."
  },
  {
    "id": 620,
    "code": "func readFileContents(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}",
    "summary": "Reads and returns the contents of a file at the specified path using UTF-8 encoding."
  },
  {
    "id": 621,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let contents = try String(contentsOf: fileURL, encoding: .utf8)\n    return contents\n}",
    "summary": "This function reads and returns the content of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 622,
    "code": "func readTextFile(at path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a text file at the specified path using UTF-8 encoding."
  },
  {
    "id": 623,
    "code": "```swift\nfunc readFileContents(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}\n```",
    "summary": "This function reads and returns the contents of a file at a specified path as a UTF-8 encoded string."
  },
  {
    "id": 624,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}",
    "summary": "This function reads and returns the contents of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 625,
    "code": "```swift\nfunc readLines(from filePath: String) throws -> [String] {\n    let fileContents = try String(contentsOfFile: filePath, encoding: .utf8)\n    return fileContents.components(separatedBy: .newlines).filter { !$0.isEmpty }\n}\n```",
    "summary": "Reads a file from the specified path and returns its non-empty lines as an array of strings."
  },
  {
    "id": 626,
    "code": "```swift\nimport Foundation\n\nfunc readLinesFromFile(atPath path: String) -> [String]? {\n    guard let fileHandle = FileHandle(forReadingAtPath: path) else {\n        return nil\n    }\n    defer {\n        fileHandle.closeFile()\n    }\n    \n    if let fileData = try? Data(contentsOf: URL(fileURLWithPath: path)),\n       let fileContents = String(data: fileData, encoding: .utf8) {\n        return fileContents.components(separatedBy: .newlines)\n    }\n    return nil\n}\n```",
    "summary": "This function reads a file at a given path and returns its contents as an array of strings, each representing a line."
  },
  {
    "id": 627,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}\n```",
    "summary": "This function reads the contents of a text file at a given path and returns it as a UTF-8 encoded string."
  },
  {
    "id": 628,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "This function reads the contents of a text file at a specified path and returns it as a String."
  },
  {
    "id": 629,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 630,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let fileURL = URL(fileURLWithPath: path)\n        let contents = try String(contentsOf: fileURL, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file at the specified path, handling errors if the file cannot be read."
  },
  {
    "id": 631,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a given path using UTF-8 encoding."
  },
  {
    "id": 632,
    "code": "```swift\nimport Foundation\n\nfunc readContentsOfFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let contents = try String(contentsOf: fileURL, encoding: .utf8)\n    return contents\n}\n```",
    "summary": "Reads and returns the contents of a file at a specified path as a UTF-8 encoded string."
  },
  {
    "id": 633,
    "code": "```swift\nfunc readLines(from filePath: String) -> [String]? {\n    guard let fileContents = try? String(contentsOfFile: filePath, encoding: .utf8) else {\n        return nil\n    }\n    return fileContents.components(separatedBy: .newlines)\n}\n```",
    "summary": "Reads a text file from the given path and returns its contents as an array of strings, each representing a line."
  },
  {
    "id": 634,
    "code": "```swift\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let contents = try String(contentsOf: fileURL, encoding: .utf8)\n    return contents\n}\n```",
    "summary": "Reads the entire contents of a text file from the specified path and returns it as a String."
  },
  {
    "id": 635,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    let fileManager = FileManager.default\n    guard fileManager.fileExists(atPath: path) else {\n        return nil\n    }\n    \n    do {\n        let contents = try String(contentsOfFile: path, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "This Swift function reads the contents of a text file at a given path and returns it as a string, or nil if the file does not exist or cannot be read."
  },
  {
    "id": 636,
    "code": "import Foundation\n\nfunc readLinesFromFile(atPath path: String) throws -> [String] {\n    let fileContent = try String(contentsOfFile: path, encoding: .utf8)\n    return fileContent.components(separatedBy: .newlines)\n}",
    "summary": "Reads and returns an array of strings, each representing a line from a file at the specified path."
  },
  {
    "id": 637,
    "code": "```swift\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "Reads and returns the contents of a text file at the specified path using UTF-8 encoding."
  },
  {
    "id": 638,
    "code": "```swift\nimport Foundation\n\nfunc writeTextToFile(text: String, fileName: String, directory: FileManager.SearchPathDirectory = .documentDirectory) throws {\n    let fileManager = FileManager.default\n    let urls = fileManager.urls(for: directory, in: .userDomainMask)\n    \n    guard let documentDirectory = urls.first else {\n        throw NSError(domain: \"FileErrorDomain\", code: 1, userInfo: [NSLocalizedDescriptionKey: \"Could not access document directory\"])\n    }\n    \n    let fileURL = documentDirectory.appendingPathComponent(fileName)\n    \n    do {\n        try text.write(to: fileURL, atomically: true, encoding: .utf8)\n    } catch {\n        throw error\n    }\n}\n```",
    "summary": "This function writes a given text to a specified file within the user's document directory in Swift."
  },
  {
    "id": 639,
    "code": "```swift\nfunc readFileContents(from filePath: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: filePath, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(filePath): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads and returns the contents of a file at a specified path as a UTF-8 encoded string, or prints an error if reading fails."
  },
  {
    "id": 640,
    "code": "import Foundation\n\nfunc readFileContents(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let contents = try String(contentsOf: fileURL, encoding: .utf8)\n    return contents\n}",
    "summary": "Reads and returns the contents of a file at the specified path as a UTF-8 encoded string."
  },
  {
    "id": 641,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}",
    "summary": "Reads and returns the content of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 642,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file at a given path as a String, or nil if an error occurs."
  },
  {
    "id": 643,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 644,
    "code": "```swift\nfunc readFileContents(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads and returns the contents of a file at a specified path using UTF-8 encoding, or prints an error if reading fails."
  },
  {
    "id": 645,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads the contents of a text file at the specified path and returns it as a string, handling errors gracefully."
  },
  {
    "id": 646,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    guard let fileURL = URL(string: path) else {\n        print(\"Invalid file path.\")\n        return nil\n    }\n    \n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads the contents of a text file at a specified path and returns it as a string."
  },
  {
    "id": 647,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        return try String(contentsOf: fileURL, encoding: .utf8)\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads the contents of a text file at a specified path and returns it as a String."
  },
  {
    "id": 648,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let contents = try String(contentsOfFile: path, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads the contents of a text file at a specified path and returns it as a String, or nil if an error occurs."
  },
  {
    "id": 649,
    "code": "```swift\nimport Foundation\n\nfunc readLinesFromFile(at path: String) -> [String]? {\n    guard let data = FileManager.default.contents(atPath: path) else { return nil }\n    guard let content = String(data: data, encoding: .utf8) else { return nil }\n    return content.components(separatedBy: .newlines).filter { !$0.isEmpty }\n}\n```",
    "summary": "Reads a file from the specified path and returns its non-empty lines as an array of strings."
  },
  {
    "id": 650,
    "code": "```swift\nimport Foundation\n\nfunc readFileContents(atPath path: String) -> String? {\n    let fileManager = FileManager.default\n    guard fileManager.fileExists(atPath: path) else {\n        return nil\n    }\n    return try? String(contentsOfFile: path, encoding: .utf8)\n}\n```",
    "summary": "This Swift function reads and returns the contents of a file at a given path, or returns nil if the file does not exist."
  },
  {
    "id": 651,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    guard FileManager.default.fileExists(atPath: path) else {\n        print(\"File does not exist at path: \\(path)\")\n        return nil\n    }\n    \n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Failed to read file: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads the content of a text file at a given path and returns it as a String, handling potential errors."
  },
  {
    "id": 652,
    "code": "```swift\nimport Foundation\n\nfunc readFileContents(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads and returns the contents of a file at a given path using UTF-8 encoding, or prints an error if it fails."
  },
  {
    "id": 653,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 654,
    "code": "```swift\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "This function reads the entire contents of a text file at a specified path and returns it as a String."
  },
  {
    "id": 655,
    "code": "```swift\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file at the specified path, handling any errors encountered."
  },
  {
    "id": 656,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    guard FileManager.default.fileExists(atPath: path) else {\n        print(\"File does not exist at path: \\(path)\")\n        return nil\n    }\n    \n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at path: \\(path), error: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads the contents of a text file at a specified path and returns it as a string."
  },
  {
    "id": 657,
    "code": "```swift\nimport Foundation\n\nfunc readFileContents(at path: String) -> String? {\n    do {\n        let fileURL = URL(fileURLWithPath: path)\n        let contents = try String(contentsOf: fileURL, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads the contents of a file at the given path and returns it as a string, or nil if an error occurs."
  },
  {
    "id": 658,
    "code": "```swift\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a given path using UTF-8 encoding."
  },
  {
    "id": 659,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads a text file from the specified path and returns its contents as a String, handling errors if the file cannot be read."
  },
  {
    "id": 660,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}",
    "summary": "This function reads the contents of a text file at a given path using UTF-8 encoding and returns it as a string."
  },
  {
    "id": 661,
    "code": "import Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads the contents of a text file at a specified path and returns it as a String."
  },
  {
    "id": 662,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads and returns the contents of a text file at the specified path, or nil if an error occurs."
  },
  {
    "id": 663,
    "code": "import Foundation\n\nfunc readLinesFromFile(at path: String) -> [String]? {\n    guard let fileHandle = FileHandle(forReadingAtPath: path) else {\n        return nil\n    }\n    defer {\n        fileHandle.closeFile()\n    }\n    \n    if let fileContent = String(data: fileHandle.readDataToEndOfFile(), encoding: .utf8) {\n        return fileContent.components(separatedBy: .newlines)\n    }\n    return nil\n}",
    "summary": "Reads a file at a specified path and returns its contents as an array of strings, each representing a line."
  },
  {
    "id": 664,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}",
    "summary": "Reads the contents of a text file at the specified path and returns it as a string."
  },
  {
    "id": 665,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "Reads the contents of a text file at a specified path and returns it as a String."
  },
  {
    "id": 666,
    "code": "```swift\nimport Foundation\n\nfunc readFileContent(atPath path: String) throws -> String {\n    let url = URL(fileURLWithPath: path)\n    let content = try String(contentsOf: url, encoding: .utf8)\n    return content\n}\n```",
    "summary": "This function reads and returns the content of a file as a string from a specified file path using UTF-8 encoding."
  },
  {
    "id": 667,
    "code": "```swift\nfunc readFileContents(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "Reads and returns the contents of a file at a specified path as a UTF-8 string."
  },
  {
    "id": 668,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "This function reads the contents of a text file at a specified path and returns it as a string."
  },
  {
    "id": 669,
    "code": "```swift\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 670,
    "code": "```swift\nfunc readFileContents(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "This function reads and returns the contents of a file at the specified path as a UTF-8 encoded string."
  },
  {
    "id": 671,
    "code": "import Foundation\n\nfunc readLinesFromFile(atPath path: String) -> [String]? {\n    guard let fileContents = try? String(contentsOfFile: path, encoding: .utf8) else {\n        return nil\n    }\n    return fileContents.components(separatedBy: .newlines)\n}",
    "summary": "Reads lines from a file at a given path and returns them as an array of strings."
  },
  {
    "id": 672,
    "code": "```swift\nfunc readTextFile(from path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "Reads the contents of a text file at a specified path and returns it as a String."
  },
  {
    "id": 673,
    "code": "func readLinesFromFile(atPath path: String) throws -> [String] {\n    let fileContent = try String(contentsOfFile: path, encoding: .utf8)\n    return fileContent.components(separatedBy: .newlines).filter { !$0.isEmpty }\n}",
    "summary": "Reads and returns non-empty lines from a file at the specified path as an array of strings."
  },
  {
    "id": 674,
    "code": "import Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    guard let fileURL = URL(string: path) else { return nil }\n\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}",
    "summary": "This function reads the contents of a text file from a given path and returns it as a String."
  },
  {
    "id": 675,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads the contents of a text file from a specified path and returns it as a string, handling any read errors by printing them and returning nil."
  },
  {
    "id": 676,
    "code": "```swift\nimport Foundation\n\nfunc readFileContents(at path: String) -> String? {\n    let fileManager = FileManager.default\n    guard fileManager.fileExists(atPath: path) else {\n        return nil\n    }\n    \n    do {\n        let contents = try String(contentsOfFile: path, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file: \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a file at the specified path as a string, or nil if the file does not exist or an error occurs."
  },
  {
    "id": 677,
    "code": "```swift\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}\n```",
    "summary": "This function reads the contents of a text file at a given path and returns it as a String."
  },
  {
    "id": 678,
    "code": "```swift\nimport Foundation\n\nfunc readLinesFromFile(atPath path: String) -> [String]? {\n    guard let fileHandle = FileHandle(forReadingAtPath: path) else {\n        return nil\n    }\n    defer {\n        fileHandle.closeFile()\n    }\n    let data = fileHandle.readDataToEndOfFile()\n    guard let content = String(data: data, encoding: .utf8) else {\n        return nil\n    }\n    return content.components(separatedBy: .newlines).filter { !$0.isEmpty }\n}\n```",
    "summary": "This function reads a file from a specified path and returns its non-empty lines as an array of strings."
  },
  {
    "id": 679,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    guard let fileURL = URL(string: path) else { return nil }\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a specified path, handling errors if the file cannot be read."
  },
  {
    "id": 680,
    "code": "```swift\nimport Foundation\n\nfunc readFileContents(atPath path: String) -> String? {\n    guard let fileURL = URL(string: path) else {\n        return nil\n    }\n    \n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads and returns the contents of a file at a specified path using UTF-8 encoding, handling any errors that occur."
  },
  {
    "id": 681,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads and returns the contents of a text file at the specified path, handling any reading errors."
  },
  {
    "id": 682,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "Reads and returns the contents of a text file at a given path using UTF-8 encoding."
  },
  {
    "id": 683,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads the contents of a text file at the specified path and returns it as a string or nil if an error occurs."
  },
  {
    "id": 684,
    "code": "```swift\nimport Foundation\n\nfunc readLinesFromFile(at path: String) -> [String]? {\n    guard let fileContents = try? String(contentsOfFile: path, encoding: .utf8) else {\n        return nil\n    }\n    return fileContents.components(separatedBy: .newlines).filter { !$0.isEmpty }\n}\n```",
    "summary": "Reads a file at the given path and returns its non-empty lines as an array of strings."
  },
  {
    "id": 685,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 686,
    "code": "```swift\nimport Foundation\n\nfunc readFileContents(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "This function reads and returns the contents of a file at a given path as a UTF-8 encoded string."
  },
  {
    "id": 687,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 688,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "Reads and returns the contents of a text file at a specified path as a String."
  },
  {
    "id": 689,
    "code": "```swift\nfunc readTextFile(atPath path: String) -> String? {\n    do {\n        let fileContents = try String(contentsOfFile: path, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a given path, handling errors if the file cannot be read."
  },
  {
    "id": 690,
    "code": "```swift\nimport Foundation\n\nfunc readFileContents(from path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let contents = try String(contentsOf: fileURL, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads the contents of a file at a given path and returns it as a string, handling errors if the file cannot be read."
  },
  {
    "id": 691,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a specified path, handling errors if the file cannot be read."
  },
  {
    "id": 692,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "Reads and returns the contents of a text file at the specified path as a UTF-8 encoded string."
  },
  {
    "id": 693,
    "code": "```swift\nimport Foundation\n\nfunc readFileContents(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "This function reads and returns the contents of a file at the specified path using UTF-8 encoding."
  },
  {
    "id": 694,
    "code": "```swift\nimport Foundation\n\nfunc readFileContents(atPath path: String) -> String? {\n    let fileManager = FileManager.default\n    guard fileManager.fileExists(atPath: path) else {\n        return nil\n    }\n    \n    do {\n        let contents = try String(contentsOfFile: path, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading file at \\(path): \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads the content of a file at a specified path and returns it as a string, or nil if the file does not exist."
  },
  {
    "id": 695,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    let fileURL = URL(fileURLWithPath: path)\n    do {\n        return try String(contentsOf: fileURL, encoding: .utf8)\n    } catch {\n        print(\"Failed to read file: \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "This function reads the contents of a text file at a specified path and returns it as a string, handling errors if the file cannot be read."
  },
  {
    "id": 696,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "This function reads and returns the contents of a text file at a specified path using UTF-8 encoding."
  },
  {
    "id": 697,
    "code": "```swift\nimport Foundation\n\nfunc readTextFile(at path: String) -> String? {\n    guard let fileURL = URL(string: path) else {\n        return nil\n    }\n    \n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads the contents of a text file located at a given path and returns it as a string, handling errors gracefully."
  },
  {
    "id": 698,
    "code": "```swift\nfunc readTextFile(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    return try String(contentsOf: fileURL, encoding: .utf8)\n}\n```",
    "summary": "Reads and returns the contents of a text file at the given path using UTF-8 encoding."
  },
  {
    "id": 699,
    "code": "```swift\nfunc readTextFile(at path: String) -> String? {\n    guard let fileURL = URL(string: path) else { return nil }\n    do {\n        let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n        return fileContents\n    } catch {\n        print(\"Error reading file: \\(error)\")\n        return nil\n    }\n}\n```",
    "summary": "Reads a text file from a specified path and returns its contents as a String."
  },
  {
    "id": 700,
    "code": "```swift\nimport Foundation\n\nfunc readFileContents(atPath path: String) throws -> String {\n    let fileURL = URL(fileURLWithPath: path)\n    let fileContents = try String(contentsOf: fileURL, encoding: .utf8)\n    return fileContents\n}\n```",
    "summary": "This function reads and returns the contents of a file at the specified path using UTF-8 encoding."
  }
]