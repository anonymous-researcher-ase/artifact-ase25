[
  {
    "id": 1,
    "code": "import java.io.File\n\nfun readFirstLineOfFile(filePath: String): String? {\n    return File(filePath).useLines { it.firstOrNull() }\n}",
    "summary": "Reads and returns the first line of a file, or null if the file is empty."
  },
  {
    "id": 2,
    "code": "import java.io.File\n\nfun countLinesInFile(filePath: String): Int {\n    return File(filePath).useLines { it.count() }\n}",
    "summary": "Counts the number of lines in a file specified by the given file path."
  },
  {
    "id": 3,
    "code": "import java.io.File\n\nfun readFileToList(filePath: String): List<String> {\n    return File(filePath).readLines()\n}",
    "summary": "Reads a file from the given path and returns its contents as a list of strings, where each string represents a line."
  },
  {
    "id": 4,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 5,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file and returns them as a list of strings."
  },
  {
    "id": 6,
    "code": "import java.io.File\n\nfun readTextFile(filePath: String): String {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readText()\n    } else {\n        throw IllegalArgumentException(\"File not found or not a valid file: $filePath\")\n    }\n}",
    "summary": "Reads and returns the content of a text file given its file path, or throws an exception if the file is invalid."
  },
  {
    "id": 7,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by the given file path and returns them as a list of strings."
  },
  {
    "id": 8,
    "code": "import java.io.File\n\nfun readFileAsString(filePath: String): String {\n    return File(filePath).readText()\n}",
    "summary": "Reads the entire content of a file specified by the file path and returns it as a String."
  },
  {
    "id": 9,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).readLines()\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 10,
    "code": "import java.io.File\n\nfun readFirstLineFromFile(filePath: String): String? {\n    return File(filePath).useLines { it.firstOrNull() }\n}",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 11,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        throw IllegalArgumentException(\"File not found or is not a valid file: $filePath\")\n    }\n}",
    "summary": "This function reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 12,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by the given file path and returns them as a list of strings."
  },
  {
    "id": 13,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val lines = mutableListOf<String>()\n    File(filePath).forEachLine { lines.add(it) }\n    return lines\n}",
    "summary": "Reads and returns all lines from a file as a list of strings."
  },
  {
    "id": 14,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"The file does not exist or is not a valid file.\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 15,
    "code": "fun readTextFile(filePath: String): String? {\n    return try {\n        val file = java.io.File(filePath)\n        file.readText()\n    } catch (e: Exception) {\n        println(\"Error reading file: ${e.message}\")\n        null\n    }\n}",
    "summary": "Reads the content of a text file and returns it as a string, or null if an error occurs."
  },
  {
    "id": 16,
    "code": "fun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a file and returns them as a list of strings."
  },
  {
    "id": 17,
    "code": "fun readLinesFromFile(filePath: String): List<String> {\n    val lines = mutableListOf<String>()\n    val file = File(filePath)\n    file.forEachLine { line ->\n        lines.add(line)\n    }\n    return lines\n}",
    "summary": "Reads all lines from a file and returns them as a list of strings."
  },
  {
    "id": 18,
    "code": "fun readLinesFromFile(filePath: String): List<String>? {\n    return try {\n        File(filePath).useLines { it.toList() }\n    } catch (e: IOException) {\n        println(\"An error occurred: ${e.message}\")\n        null\n    }\n}",
    "summary": "Reads all lines from a file at the given path into a list of strings, returning null if an error occurs."
  },
  {
    "id": 19,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings, or returns an empty list if the file does not exist."
  },
  {
    "id": 20,
    "code": "fun readLinesFromFile(filePath: String): List<String>? {\n    return try {\n        File(filePath).useLines { it.toList() }\n    } catch (e: IOException) {\n        println(\"Error reading file: ${e.message}\")\n        null\n    }\n}",
    "summary": "Reads all lines from a file at the given path into a list of strings, returning null if an error occurs."
  },
  {
    "id": 21,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads and returns all lines from a specified file as a list of strings."
  },
  {
    "id": 22,
    "code": "fun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a specified file into a list of strings, returning an empty list if the file does not exist or is not a regular file."
  },
  {
    "id": 23,
    "code": "import java.io.File\n\nfun readTextFile(filePath: String): String {\n    return File(filePath).readText()\n}",
    "summary": "Reads and returns the entire content of a text file specified by the file path."
  },
  {
    "id": 24,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 25,
    "code": "import java.io.File\n\nfun readFirstLineFromFile(filePath: String): String? {\n    return File(filePath).bufferedReader().use { it.readLine() }\n}",
    "summary": "Reads and returns the first line from a given file, or null if the file is empty."
  },
  {
    "id": 26,
    "code": "import java.io.File\n\nfun readFileAsString(filePath: String): String {\n    return File(filePath).readText(Charsets.UTF_8)\n}",
    "summary": "Reads the contents of a file specified by the file path into a String using UTF-8 encoding."
  },
  {
    "id": 27,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by the given file path and returns them as a list of strings."
  },
  {
    "id": 28,
    "code": "fun readTextFile(filePath: String): String? {\n    return try {\n        File(filePath).readText()\n    } catch (e: IOException) {\n        println(\"Error reading file: ${e.message}\")\n        null\n    }\n}",
    "summary": "Reads and returns the contents of a text file, handling any IO exceptions."
  },
  {
    "id": 29,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.canRead()) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 30,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.canRead()) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings if the file is readable, otherwise returns an empty list."
  },
  {
    "id": 31,
    "code": "import java.io.File\n\nfun countLinesInFile(filePath: String): Int {\n    return File(filePath).useLines { it.count() }\n}",
    "summary": "Counts the number of lines in a file specified by the given file path."
  },
  {
    "id": 32,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 33,
    "code": "import java.io.File\nimport java.io.IOException\n\nfun readFileToString(filePath: String): String {\n    return try {\n        File(filePath).readText()\n    } catch (e: IOException) {\n        \"Error reading file: ${e.message}\"\n    }\n}",
    "summary": "Reads the contents of a file into a String and returns an error message if reading fails."
  },
  {
    "id": 34,
    "code": "import java.io.File\n\nfun readFirstLineOfFile(filePath: String): String? {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.bufferedReader().use { it.readLine() }\n    } else {\n        null\n    }\n}",
    "summary": "This function reads and returns the first line of a file given its file path, or null if the file is not found."
  },
  {
    "id": 35,
    "code": "fun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.canRead()) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a file and returns them as a list of strings, or an empty list if the file cannot be read."
  },
  {
    "id": 36,
    "code": "import java.io.File\n\nfun readFirstLine(filePath: String): String? {\n    return try {\n        File(filePath).useLines { it.firstOrNull() }\n    } catch (e: Exception) {\n        null\n    }\n}",
    "summary": "Reads and returns the first line of a file specified by the given file path, or null if an error occurs."
  },
  {
    "id": 37,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists()) {\n        throw FileNotFoundException(\"File at path $filePath does not exist.\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads all lines from a file at the specified path and returns them as a list of strings."
  },
  {
    "id": 38,
    "code": "import java.io.File\n\nfun readFileAsLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads a file from the specified path and returns its contents as a list of strings, each representing a line."
  },
  {
    "id": 39,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"The specified path does not point to a valid file.\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 40,
    "code": "fun readFileLines(filePath: String): List<String> {\n    val file = java.io.File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads and returns all lines from a file as a list of strings if the file exists, otherwise returns an empty list."
  },
  {
    "id": 41,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 42,
    "code": "fun readFileLines(fileName: String): List<String> {\n    val file = File(fileName)\n    if (!file.exists()) {\n        throw FileNotFoundException(\"File not found: $fileName\")\n    }\n    return file.readLines()\n}",
    "summary": "This function reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 43,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings, or an empty list if the file doesn't exist."
  },
  {
    "id": 44,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads a file from the specified path and returns its content as a list of strings, each representing a line."
  },
  {
    "id": 45,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by the provided file path and returns them as a list of strings."
  },
  {
    "id": 46,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.canRead()) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings, or an empty list if the file is not accessible."
  },
  {
    "id": 47,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).readLines()\n}",
    "summary": "Reads all lines from a file at a given path and returns them as a list of strings."
  },
  {
    "id": 48,
    "code": "import java.io.File\n\nfun readTextFile(filePath: String): String {\n    return File(filePath).readText()\n}",
    "summary": "Reads and returns the content of a text file from the specified file path as a string."
  },
  {
    "id": 49,
    "code": "import java.io.File\n\nfun readTextFile(filePath: String): String {\n    return File(filePath).useLines { lines -> lines.joinToString(\"\\n\") }\n}",
    "summary": "Reads the contents of a text file and returns it as a single string."
  },
  {
    "id": 50,
    "code": "import java.io.File\n\nfun readFileAsLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads a file and returns its content as a list of strings, where each string is a line from the file."
  },
  {
    "id": 51,
    "code": "import java.io.File\n\nfun readFileToString(filePath: String): String {\n    return File(filePath).readText(Charsets.UTF_8)\n}",
    "summary": "Reads the entire content of a file specified by the file path into a single string using UTF-8 encoding."
  },
  {
    "id": 52,
    "code": "fun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads and returns all lines from a file as a list of strings if the file exists; otherwise, returns an empty list."
  },
  {
    "id": 53,
    "code": "import java.io.File\n\nfun countLinesInFile(filePath: String): Int {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"Invalid file path: $filePath\")\n    }\n    return file.useLines { it.count() }\n}",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 54,
    "code": "import java.io.File\n\nfun readFirstLineFromFile(filePath: String): String? {\n    return File(filePath).useLines { lines -> lines.firstOrNull() }\n}",
    "summary": "Reads and returns the first line from a specified file; returns null if the file is empty."
  },
  {
    "id": 55,
    "code": "import java.io.File\n\nfun readFirstLineOfFile(filePath: String): String? {\n    return try {\n        File(filePath).useLines { it.firstOrNull() }\n    } catch (e: Exception) {\n        null\n    }\n}",
    "summary": "Reads and returns the first line of a file specified by the given file path, or null if an error occurs."
  },
  {
    "id": 56,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"File does not exist or is not a valid file: $filePath\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads and returns all lines from a specified file as a list of strings, throwing an exception if the file is invalid."
  },
  {
    "id": 57,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists()) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 58,
    "code": "fun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists()) throw FileNotFoundException(\"File not found: $filePath\")\n    return file.readLines()\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 59,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists()) {\n        throw IllegalArgumentException(\"File at $filePath does not exist.\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 60,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        throw IllegalArgumentException(\"Invalid file path: $filePath\")\n    }\n}",
    "summary": "This function reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 61,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 62,
    "code": "import java.io.File\n\nfun countLinesInFile(filePath: String): Int {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"File does not exist or is not a valid file.\")\n    }\n    return file.useLines { it.count() }\n}",
    "summary": "Counts the number of lines in a specified file, throwing an error if the file is invalid."
  },
  {
    "id": 63,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "This function reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 64,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by its path and returns them as a list of strings."
  },
  {
    "id": 65,
    "code": "import java.io.File\n\nfun countLinesInFile(fileName: String): Int {\n    val file = File(fileName)\n    if (!file.exists()) {\n        throw IllegalArgumentException(\"File does not exist: $fileName\")\n    }\n    return file.useLines { it.count() }\n}",
    "summary": "Counts the number of lines in a specified file and throws an exception if the file does not exist."
  },
  {
    "id": 66,
    "code": "import java.io.File\n\nfun countLinesInFile(filePath: String): Int {\n    return File(filePath).useLines { it.count() }\n}",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 67,
    "code": "import java.io.File\nimport java.io.IOException\n\nfun readFileToString(filePath: String): String {\n    return try {\n        File(filePath).readText(Charsets.UTF_8)\n    } catch (e: IOException) {\n        \"Error reading file: ${e.message}\"\n    }\n}",
    "summary": "Reads the contents of a file specified by the file path into a string, handling any IO exceptions."
  },
  {
    "id": 68,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists()) throw IllegalArgumentException(\"File does not exist: $filePath\")\n    return file.readLines()\n}",
    "summary": "Reads all lines from the specified file and returns them as a list of strings."
  },
  {
    "id": 69,
    "code": "import java.io.File\n\nfun countLinesInFile(filePath: String): Int {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"The specified path does not lead to a valid file.\")\n    }\n    return file.useLines { lines -> lines.count() }\n}",
    "summary": "Counts the number of lines in a specified file, throwing an exception if the file is invalid."
  },
  {
    "id": 70,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file at the given path and returns them as a list of strings."
  },
  {
    "id": 71,
    "code": "import java.io.File\n\nfun readFileToString(filePath: String): String {\n    return File(filePath).readText(Charsets.UTF_8)\n}",
    "summary": "Reads the contents of a file specified by its path and returns it as a UTF-8 encoded string."
  },
  {
    "id": 72,
    "code": "import java.io.File\n\nfun writeTextToFile(filePath: String, text: String) {\n    File(filePath).bufferedWriter().use { out ->\n        out.write(text)\n    }\n}",
    "summary": "Writes the specified text to a file at the given file path using buffered writing."
  },
  {
    "id": 73,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 74,
    "code": "import java.io.File\n\nfun readTextFile(filePath: String): String {\n    return File(filePath).readText(Charsets.UTF_8)\n}",
    "summary": "Reads the content of a text file specified by the file path using UTF-8 encoding and returns it as a string."
  },
  {
    "id": 75,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        throw IllegalArgumentException(\"File not found or is not a valid file: $filePath\")\n    }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 76,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String>? {\n    return try {\n        File(filePath).readLines()\n    } catch (e: Exception) {\n        e.printStackTrace()\n        null\n    }\n}",
    "summary": "Reads all lines from a file at a specified path and returns them as a list of strings, or null if an error occurs."
  },
  {
    "id": 77,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads and returns all lines from a file as a list of strings given the file path."
  },
  {
    "id": 78,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"Invalid file path\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads and returns all lines from a specified file as a list of strings."
  },
  {
    "id": 79,
    "code": "import java.io.File\nimport java.io.IOException\n\n@Throws(IOException::class)\nfun readFileAsString(filePath: String): String {\n    return File(filePath).readText(Charsets.UTF_8)\n}",
    "summary": "Reads the entire content of a file specified by its path into a string using UTF-8 encoding."
  },
  {
    "id": 80,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 81,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file at the given path and returns them as a list of strings."
  },
  {
    "id": 82,
    "code": "fun readTextFile(filePath: String): String? {\n    return try {\n        File(filePath).takeIf { it.exists() }?.readText()\n    } catch (e: IOException) {\n        println(\"Error reading file: ${e.message}\")\n        null\n    }\n}",
    "summary": "Reads the content of a text file and returns it as a String, or null if an error occurs."
  },
  {
    "id": 83,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads a file from the specified path and returns its contents as a list of strings, each representing a line."
  },
  {
    "id": 84,
    "code": "import java.io.File\nimport java.io.IOException\n\n@Throws(IOException::class)\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists()) {\n        throw IOException(\"File not found: $filePath\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings, throwing an exception if the file does not exist."
  },
  {
    "id": 85,
    "code": "import java.io.File\n\nfun readFirstLineOfFile(filePath: String): String? {\n    return try {\n        File(filePath).useLines { it.firstOrNull() }\n    } catch (e: Exception) {\n        null\n    }\n}",
    "summary": "Reads and returns the first line of a file at the given path, or null if an error occurs."
  },
  {
    "id": 86,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 87,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        throw IllegalArgumentException(\"Invalid file path: $filePath\")\n    }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 88,
    "code": "import java.io.File\n\nfun readTextFile(filePath: String): String {\n    return File(filePath).useLines { it.joinToString(\"\\n\") }\n}",
    "summary": "Reads and returns the entire content of a text file as a single string."
  },
  {
    "id": 89,
    "code": "import java.io.File\n\nfun countLinesInFile(filePath: String): Int {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"Invalid file path: $filePath\")\n    }\n    return file.readLines().size\n}",
    "summary": "This function counts the number of lines in a specified file and returns the count."
  },
  {
    "id": 90,
    "code": "fun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file at the specified path and returns them as a list of strings."
  },
  {
    "id": 91,
    "code": "fun readFileAsString(filePath: String): String {\n    return File(filePath).readText(Charsets.UTF_8)\n}",
    "summary": "Reads the content of a file located at the specified path and returns it as a UTF-8 encoded string."
  },
  {
    "id": 92,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file at the specified path and returns them as a list of strings."
  },
  {
    "id": 93,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists()) {\n        throw IllegalArgumentException(\"File does not exist: $filePath\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads and returns all lines from a specified file as a list of strings."
  },
  {
    "id": 94,
    "code": "import java.io.File\n\nfun readFileAsLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads a file from the specified path and returns its content as a list of strings, each representing a line."
  },
  {
    "id": 95,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 96,
    "code": "fun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        throw FileNotFoundException(\"File not found or is not a valid file: $filePath\")\n    }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings, throwing an exception if the file is not found or is invalid."
  },
  {
    "id": 97,
    "code": "import java.io.File\n\nfun countLinesInFile(filePath: String): Int {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"Invalid file path: $filePath\")\n    }\n    return file.useLines { it.count() }\n}",
    "summary": "This function counts and returns the number of lines in a specified file."
  },
  {
    "id": 98,
    "code": "import java.io.File\n\nfun readFirstNLines(filePath: String, n: Int): List<String> {\n    val file = File(filePath)\n    if (!file.exists() || n <= 0) return emptyList()\n    return file.useLines { it.take(n).toList() }\n}",
    "summary": "Reads and returns the first N lines from a specified file as a list of strings."
  },
  {
    "id": 99,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists()) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a file at the given path and returns them as a list of strings, or an empty list if the file does not exist."
  },
  {
    "id": 100,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.canRead()) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads and returns all lines from a file specified by its path, or an empty list if the file is not readable."
  },
  {
    "id": 101,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file at the specified path and returns them as a list of strings."
  },
  {
    "id": 102,
    "code": "import java.io.File\n\nfun readFileLines(fileName: String): List<String> {\n    return File(fileName).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 103,
    "code": "import java.io.File\n\nfun readFileAsString(filePath: String): String {\n    return File(filePath).readText(Charsets.UTF_8)\n}",
    "summary": "Reads the entire content of a file specified by the file path into a string using UTF-8 encoding."
  },
  {
    "id": 104,
    "code": "fun readTextFile(filePath: String): String {\n    val file = File(filePath)\n    if (!file.exists()) throw FileNotFoundException(\"File not found: $filePath\")\n    return file.readText()\n}",
    "summary": "Reads the entire content of a text file specified by the file path and returns it as a string."
  },
  {
    "id": 105,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"Invalid file path\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads and returns all lines from a file specified by the given file path."
  },
  {
    "id": 106,
    "code": "import java.io.File\n\nfun readFileContent(filePath: String): String {\n    return File(filePath).bufferedReader().use { it.readText() }\n}",
    "summary": "Reads the entire content of a file specified by its path into a single string."
  },
  {
    "id": 107,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists()) {\n        throw IllegalArgumentException(\"File does not exist: $filePath\")\n    }\n    return file.readLines()\n}",
    "summary": "This function reads all lines from a file given its path and returns them as a list of strings."
  },
  {
    "id": 108,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file at the given path and returns them as a list of strings."
  },
  {
    "id": 109,
    "code": "fun readFirstLineFromFile(filePath: String): String? {\n    return try {\n        File(filePath).useLines { lines -> lines.firstOrNull() }\n    } catch (e: IOException) {\n        println(\"Error reading file: ${e.message}\")\n        null\n    }\n}",
    "summary": "Reads and returns the first line of a file given its path, handling any I/O exceptions."
  },
  {
    "id": 110,
    "code": "fun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file at the specified path into a list of strings."
  },
  {
    "id": 111,
    "code": "import java.io.File\n\nfun readFirstLine(filePath: String): String? {\n    return File(filePath).useLines { it.firstOrNull() }\n}",
    "summary": "Reads and returns the first line of a file specified by the file path, or null if the file is empty."
  },
  {
    "id": 112,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).readLines()\n}",
    "summary": "Reads all lines from a file at the specified path and returns them as a list of strings."
  },
  {
    "id": 113,
    "code": "fun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from the specified file and returns them as a list of strings."
  },
  {
    "id": 114,
    "code": "import java.io.File\n\nfun countLinesInFile(filePath: String): Int {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"The provided path does not point to a valid file.\")\n    }\n    return file.useLines { it.count() }\n}",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 115,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        throw IllegalArgumentException(\"File not found or is not a valid file\")\n    }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 116,
    "code": "fun readTextFile(filePath: String): String {\n    return File(filePath).bufferedReader().use { it.readText() }\n}",
    "summary": "Reads the entire content of a text file from the specified file path and returns it as a string."
  },
  {
    "id": 117,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 118,
    "code": "import java.io.File\n\nfun readLinesFromFile(fileName: String): List<String> {\n    val file = File(fileName)\n    if (!file.exists()) {\n        throw FileNotFoundException(\"The file $fileName does not exist.\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads and returns all lines from a specified file as a list of strings, throwing an exception if the file does not exist."
  },
  {
    "id": 119,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        throw IllegalArgumentException(\"Invalid file path: $filePath\")\n    }\n}",
    "summary": "Reads and returns all lines from a file specified by the given file path."
  },
  {
    "id": 120,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 121,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file at the specified path into a list of strings."
  },
  {
    "id": 122,
    "code": "import java.io.File\n\nfun readFirstLineFromFile(filePath: String): String? {\n    return try {\n        File(filePath).useLines { it.firstOrNull() }\n    } catch (e: Exception) {\n        println(\"Error reading file: ${e.message}\")\n        null\n    }\n}",
    "summary": "Reads and returns the first line of a file at the given path, or null if an error occurs."
  },
  {
    "id": 123,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return try {\n        File(filePath).readLines()\n    } catch (e: Exception) {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings, returning an empty list if an error occurs."
  },
  {
    "id": 124,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        throw IllegalArgumentException(\"File not found or is not a valid file\")\n    }\n}",
    "summary": "Reads and returns all lines from a specified file, throwing an exception if the file does not exist or is invalid."
  },
  {
    "id": 125,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists()) {\n        file.readLines()\n    } else {\n        throw IllegalArgumentException(\"File does not exist: $filePath\")\n    }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 126,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 127,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        throw IllegalArgumentException(\"File not found or is not a valid file: $filePath\")\n    }\n}",
    "summary": "Reads and returns all lines from a specified file as a list of strings, throwing an exception if the file is not found."
  },
  {
    "id": 128,
    "code": "import java.io.File\n\nfun readFirstLineFromFile(filePath: String): String? {\n    return File(filePath).useLines { lines -> lines.firstOrNull() }\n}",
    "summary": "Reads and returns the first line from a file specified by the given file path, or null if the file is empty."
  },
  {
    "id": 129,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists()) {\n        throw IllegalArgumentException(\"File does not exist at the specified path.\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads and returns all lines from a file at the given path as a list of strings."
  },
  {
    "id": 130,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 131,
    "code": "import java.io.File\n\nfun countLinesInFile(filePath: String): Int {\n    return File(filePath).useLines { it.count() }\n}",
    "summary": "Counts and returns the number of lines in the specified file."
  },
  {
    "id": 132,
    "code": "import java.io.File\n\nfun readFileAsString(filePath: String): String {\n    return File(filePath).readText(Charsets.UTF_8)\n}",
    "summary": "Reads the entire content of a file specified by its path and returns it as a UTF-8 encoded string."
  },
  {
    "id": 133,
    "code": "fun readFileAsString(filePath: String): String {\n    return File(filePath).readText(Charsets.UTF_8)\n}",
    "summary": "Reads a file from the given path and returns its content as a UTF-8 encoded string."
  },
  {
    "id": 134,
    "code": "import java.io.File\nimport java.io.IOException\n\nfun readFirstLineOfFile(filePath: String): String? {\n    return try {\n        File(filePath).bufferedReader().use { it.readLine() }\n    } catch (e: IOException) {\n        println(\"Error reading file: ${e.message}\")\n        null\n    }\n}",
    "summary": "Reads and returns the first line of a file specified by its path, handling any IO exceptions."
  },
  {
    "id": 135,
    "code": "import java.io.File\n\nfun readLinesFromFile(fileName: String): List<String> {\n    return File(fileName).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 136,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists()) {\n        throw IllegalArgumentException(\"File not found: $filePath\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads and returns all lines from a file as a list of strings, throwing an exception if the file does not exist."
  },
  {
    "id": 137,
    "code": "fun readFileLines(path: String): List<String> {\n    return try {\n        File(path).readLines()\n    } catch (e: IOException) {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a file into a list of strings, returning an empty list if an error occurs."
  },
  {
    "id": 138,
    "code": "fun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 139,
    "code": "import java.io.File\n\nfun readFirstLine(filePath: String): String? {\n    return File(filePath).useLines { lines -> lines.firstOrNull() }\n}",
    "summary": "Reads and returns the first line from a specified file, or null if the file is empty."
  },
  {
    "id": 140,
    "code": "import java.io.File\n\nfun readFirstLine(filePath: String): String? {\n    return File(filePath).bufferedReader().use { it.readLine() }\n}",
    "summary": "Reads and returns the first line of a file specified by the given file path, or null if the file is empty."
  },
  {
    "id": 141,
    "code": "import java.io.File\n\nfun readFirstLineOfFile(filePath: String): String? {\n    return File(filePath).useLines { it.firstOrNull() }\n}",
    "summary": "Reads and returns the first line of a file specified by the file path, or null if the file is empty."
  },
  {
    "id": 142,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 143,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).readLines()\n}",
    "summary": "Reads all lines from a file at the given path and returns them as a list of strings."
  },
  {
    "id": 144,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings, or an empty list if the file does not exist or is not a file."
  },
  {
    "id": 145,
    "code": "import java.io.File\n\nfun readFirstLineFromFile(filePath: String): String? {\n    return try {\n        File(filePath).useLines { it.firstOrNull() }\n    } catch (e: Exception) {\n        null\n    }\n}",
    "summary": "Reads and returns the first line from a specified file, or null if an error occurs."
  },
  {
    "id": 146,
    "code": "import java.io.File\n\nfun readFirstLineOfFile(filePath: String): String? {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.bufferedReader().use { it.readLine() }\n    } else {\n        null\n    }\n}",
    "summary": "Reads and returns the first line of a file specified by its file path, or null if the file doesn't exist."
  },
  {
    "id": 147,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file and returns them as a list of strings."
  },
  {
    "id": 148,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by the given file path and returns them as a list of strings."
  },
  {
    "id": 149,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"Invalid file path provided.\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 150,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 151,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file at the given path and returns them as a list of strings."
  },
  {
    "id": 152,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file located at the given file path and returns them as a list of strings."
  },
  {
    "id": 153,
    "code": "fun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists()) {\n        throw FileNotFoundException(\"File not found: $filePath\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads all lines from a file specified by the given file path and returns them as a list of strings."
  },
  {
    "id": 154,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file at the specified path and returns them as a list of strings."
  },
  {
    "id": 155,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        throw IllegalArgumentException(\"The file does not exist or is not a valid file\")\n    }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 156,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 157,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).readLines()\n}",
    "summary": "Reads all lines from a file specified by the given file path and returns them as a list of strings."
  },
  {
    "id": 158,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).readLines()\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 159,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file at the specified path and returns them as a list of strings."
  },
  {
    "id": 160,
    "code": "import java.io.File\n\nfun readFileAsString(filePath: String): String {\n    return File(filePath).readText()\n}",
    "summary": "Reads the entire content of a file specified by the file path into a single string."
  },
  {
    "id": 161,
    "code": "import java.io.File\n\nfun readFirstLineOfFile(filePath: String): String? {\n    return try {\n        File(filePath).useLines { it.firstOrNull() }\n    } catch (e: Exception) {\n        println(\"Error reading file: ${e.message}\")\n        null\n    }\n}",
    "summary": "Reads and returns the first line from a file at the given path, or null if an error occurs."
  },
  {
    "id": 162,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.canRead()) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings if the file exists and is readable."
  },
  {
    "id": 163,
    "code": "import java.io.File\n\nfun readFirstLineOfFile(filePath: String): String? {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.useLines { it.firstOrNull() }\n    } else {\n        null\n    }\n}",
    "summary": "Reads and returns the first line of a file specified by its path, or null if the file does not exist."
  },
  {
    "id": 164,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 165,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by the given path and returns them as a list of strings."
  },
  {
    "id": 166,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).readLines()\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 167,
    "code": "import java.io.File\nimport java.io.IOException\n\nfun readFirstLineOfFile(filePath: String): String? {\n    return try {\n        File(filePath).bufferedReader().use { it.readLine() }\n    } catch (e: IOException) {\n        println(\"Error reading file: ${e.message}\")\n        null\n    }\n}",
    "summary": "Reads and returns the first line of a specified file, or null if an error occurs."
  },
  {
    "id": 168,
    "code": "import java.io.File\n\nfun readFileAsLines(filePath: String): List<String> {\n    return File(filePath).readLines()\n}",
    "summary": "Reads a file from the specified path and returns its contents as a list of strings, with each string representing a line."
  },
  {
    "id": 169,
    "code": "import java.io.File\n\nfun readFirstNLines(filePath: String, n: Int): List<String> {\n    val lines = mutableListOf<String>()\n    File(filePath).useLines { sequence ->\n        sequence.take(n).forEach { lines.add(it) }\n    }\n    return lines\n}",
    "summary": "Reads and returns the first N lines from a specified file as a list of strings."
  },
  {
    "id": 170,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file at the specified path and returns them as a list of strings."
  },
  {
    "id": 171,
    "code": "fun readFileAsLines(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists()) {\n        throw FileNotFoundException(\"File not found: $filePath\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads a file from the given path and returns its contents as a list of strings."
  },
  {
    "id": 172,
    "code": "import java.io.File\n\nfun readFirstLineOfFile(filePath: String): String? {\n    return try {\n        File(filePath).useLines { it.firstOrNull() }\n    } catch (e: Exception) {\n        null\n    }\n}",
    "summary": "Reads and returns the first line of a file specified by the given file path, or null if an error occurs."
  },
  {
    "id": 173,
    "code": "fun readFirstLineFromFile(filePath: String): String? {\n    return try {\n        File(filePath).useLines { it.firstOrNull() }\n    } catch (e: IOException) {\n        println(\"Error reading file: ${e.message}\")\n        null\n    }\n}",
    "summary": "This function reads and returns the first line from a specified file, or null if an error occurs."
  },
  {
    "id": 174,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 175,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 176,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file and returns them as a list of strings."
  },
  {
    "id": 177,
    "code": "import java.io.File\n\nfun readFirstLineFromFile(filePath: String): String? {\n    return try {\n        File(filePath).useLines { it.firstOrNull() }\n    } catch (e: Exception) {\n        null\n    }\n}",
    "summary": "Reads the first line from a specified file, returning null if an error occurs."
  },
  {
    "id": 178,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists() || !file.canRead()) {\n        throw IllegalArgumentException(\"File cannot be read or does not exist: $filePath\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 179,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 180,
    "code": "import java.io.File\n\nfun countLinesInFile(filePath: String): Int {\n    return try {\n        File(filePath).useLines { it.count() }\n    } catch (e: Exception) {\n        println(\"Error reading file: ${e.message}\")\n        0\n    }\n}",
    "summary": "Counts the number of lines in a specified file and handles any exceptions that occur during file reading."
  },
  {
    "id": 181,
    "code": "import java.io.File\n\nfun readTextFile(filePath: String): String {\n    return File(filePath).useLines { lines -> \n        lines.joinToString(\"\\n\")\n    }\n}",
    "summary": "Reads a text file from the specified path and returns its content as a single string."
  },
  {
    "id": 182,
    "code": "fun readFileLines(filePath: String): List<String>? {\n    return try {\n        File(filePath).readLines()\n    } catch (e: IOException) {\n        e.printStackTrace()\n        null\n    }\n}",
    "summary": "Reads all lines from a file and returns them as a list of strings, handling IO exceptions."
  },
  {
    "id": 183,
    "code": "fun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists()) {\n        throw FileNotFoundException(\"The file at path $filePath does not exist.\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads all lines from a file and returns them as a list of strings, throwing an exception if the file does not exist."
  },
  {
    "id": 184,
    "code": "fun readLinesFromFile(filePath: String): List<String> {\n    val file = java.io.File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        throw IllegalArgumentException(\"File does not exist or is not a valid file: $filePath\")\n    }\n}",
    "summary": "Reads and returns all lines from a file at the specified path or throws an exception if the file is invalid."
  },
  {
    "id": 185,
    "code": "import java.io.File\n\nfun readFileAsLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads a file from the given path and returns its contents as a list of strings, each representing a line."
  },
  {
    "id": 186,
    "code": "import java.io.File\n\nfun readFirstLineFromFile(filePath: String): String? {\n    return try {\n        File(filePath).useLines { it.firstOrNull() }\n    } catch (e: Exception) {\n        println(\"Error reading file: ${e.message}\")\n        null\n    }\n}",
    "summary": "Reads and returns the first line from a specified file, handling any exceptions."
  },
  {
    "id": 187,
    "code": "import java.io.File\n\nfun countLinesInFile(filePath: String): Int {\n    val file = File(filePath)\n    if (!file.exists()) {\n        throw IllegalArgumentException(\"File does not exist: $filePath\")\n    }\n    return file.useLines { it.count() }\n}",
    "summary": "Counts the number of lines in a given file and returns the count."
  },
  {
    "id": 188,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads and returns all lines from a specified file, or an empty list if the file does not exist or is not a file."
  },
  {
    "id": 189,
    "code": "fun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        throw FileNotFoundException(\"File not found or is not a regular file.\")\n    }\n}",
    "summary": "Reads all lines from a file at the specified path and returns them as a list of strings."
  },
  {
    "id": 190,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file into a list of strings given the file path."
  },
  {
    "id": 191,
    "code": "import java.io.File\n\nfun readFirstLineOfFile(filePath: String): String? {\n    return File(filePath).useLines { it.firstOrNull() }\n}",
    "summary": "Reads and returns the first line of a file specified by the file path."
  },
  {
    "id": 192,
    "code": "import java.io.File\n\nfun readFirstLineFromFile(filePath: String): String? {\n    return File(filePath).useLines { it.firstOrNull() }\n}",
    "summary": "Reads and returns the first line from a specified file, or null if the file is empty."
  },
  {
    "id": 193,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists()) throw IllegalArgumentException(\"File does not exist at the specified path.\")\n    return file.readLines()\n}",
    "summary": "Reads all lines from a file at the given path and returns them as a list of strings."
  },
  {
    "id": 194,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads and returns all lines from a file as a list of strings, or an empty list if the file does not exist."
  },
  {
    "id": 195,
    "code": "import java.io.File\n\nfun readFirstLine(filePath: String): String? {\n    return File(filePath).useLines { lines -> lines.firstOrNull() }\n}",
    "summary": "Reads and returns the first line of a file, or null if the file is empty."
  },
  {
    "id": 196,
    "code": "fun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a file and returns them as a list of strings."
  },
  {
    "id": 197,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists()) file.readLines() else emptyList()\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 198,
    "code": "import java.io.File\nimport java.io.IOException\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return try {\n        File(filePath).useLines { it.toList() }\n    } catch (e: IOException) {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings, or an empty list if an error occurs."
  },
  {
    "id": 199,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings, or an empty list if the file does not exist."
  },
  {
    "id": 200,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings, or an empty list if the file does not exist or is not a regular file."
  },
  {
    "id": 201,
    "code": "import java.io.File\n\nfun readTextFile(filePath: String): String {\n    val file = File(filePath)\n    if (!file.exists()) {\n        throw IllegalArgumentException(\"File at $filePath does not exist.\")\n    }\n    return file.readText(Charsets.UTF_8)\n}",
    "summary": "Reads the entire content of a text file located at the given file path and returns it as a UTF-8 string."
  },
  {
    "id": 202,
    "code": "import java.io.File\n\nfun writeTextToFile(filePath: String, content: String) {\n    val file = File(filePath)\n    file.writeText(content)\n}",
    "summary": "Writes the specified text content to a file at the given file path."
  },
  {
    "id": 203,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads and returns all lines from a file as a list of strings, or an empty list if the file does not exist."
  },
  {
    "id": 204,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings, or an empty list if the file does not exist."
  },
  {
    "id": 205,
    "code": "fun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a specified file into a list of strings, returning an empty list if the file does not exist."
  },
  {
    "id": 206,
    "code": "import java.io.File\n\nfun readTextFile(filePath: String): String {\n    return File(filePath).useLines { it.joinToString(\"\\n\") }\n}",
    "summary": "Reads and returns the entire content of a text file as a single string."
  },
  {
    "id": 207,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 208,
    "code": "fun readLinesFromFile(filePath: String): List<String> {\n    val lines = mutableListOf<String>()\n    File(filePath).useLines { lineSequence ->\n        lineSequence.forEach { lines.add(it) }\n    }\n    return lines\n}",
    "summary": "Reads all lines from a file at the given path and returns them as a list of strings."
  },
  {
    "id": 209,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String>? {\n    return try {\n        File(filePath).readLines()\n    } catch (e: Exception) {\n        null\n    }\n}",
    "summary": "Reads all lines from a file at the given path and returns them as a list of strings, or null if an error occurs."
  },
  {
    "id": 210,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists()) {\n        throw FileNotFoundException(\"File not found: $filePath\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 211,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by filePath and returns them as a list of strings."
  },
  {
    "id": 212,
    "code": "import java.io.File\n\nfun readFileAsLines(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads a file from the specified path and returns its contents as a list of strings, or an empty list if the file does not exist."
  },
  {
    "id": 213,
    "code": "import java.io.File\n\nfun readFirstLineOfFile(filePath: String): String? {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.useLines { it.firstOrNull() }\n    } else {\n        null\n    }\n}",
    "summary": "Reads and returns the first line of a specified file, or null if the file does not exist or is not a regular file."
  },
  {
    "id": 214,
    "code": "fun readLinesFromFile(filePath: String): List<String> {\n    val lines = mutableListOf<String>()\n    File(filePath).forEachLine { lines.add(it) }\n    return lines\n}",
    "summary": "Reads all lines from a file at the given path and returns them as a list of strings."
  },
  {
    "id": 215,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists()) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads and returns all lines from a file at the specified path, or an empty list if the file does not exist."
  },
  {
    "id": 216,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 217,
    "code": "fun readFirstLineOfFile(filePath: String): String? {\n    return try {\n        File(filePath).bufferedReader().use { it.readLine() }\n    } catch (e: IOException) {\n        println(\"Error reading file: ${e.message}\")\n        null\n    }\n}",
    "summary": "Reads and returns the first line from the specified file, handling any I/O exceptions."
  },
  {
    "id": 218,
    "code": "fun readLinesFromFile(filePath: String): List<String> {\n    val lines = mutableListOf<String>()\n    File(filePath).useLines { sequence ->\n        sequence.forEach { line ->\n            lines.add(line)\n        }\n    }\n    return lines\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 219,
    "code": "import java.io.File\n\nfun readFileAsLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads a file and returns its content as a list of strings, with each string representing a line."
  },
  {
    "id": 220,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by the path and returns them as a list of strings."
  },
  {
    "id": 221,
    "code": "import java.io.File\n\nfun readFirstLineFromFile(filePath: String): String? {\n    return try {\n        File(filePath).bufferedReader().use { it.readLine() }\n    } catch (e: Exception) {\n        println(\"An error occurred: ${e.message}\")\n        null\n    }\n}",
    "summary": "Reads and returns the first line from a file at the specified file path, handling exceptions gracefully."
  },
  {
    "id": 222,
    "code": "fun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 223,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists()) {\n        throw FileNotFoundException(\"File not found: $filePath\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 224,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file at the specified path and returns them as a list of strings."
  },
  {
    "id": 225,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 226,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"The provided path is not a valid file.\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 227,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return try {\n        File(filePath).readLines()\n    } catch (e: Exception) {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a file specified by the given file path and returns them as a list of strings."
  },
  {
    "id": 228,
    "code": "import java.io.File\n\nfun readFileAsLines(filePath: String): List<String> {\n    return File(filePath).readLines()\n}",
    "summary": "Reads a file from the given path and returns its contents as a list of strings, each representing a line."
  },
  {
    "id": 229,
    "code": "import java.io.File\nimport java.io.IOException\n\nfun readFileToString(filePath: String): String {\n    return try {\n        File(filePath).readText()\n    } catch (e: IOException) {\n        \"Error reading file: ${e.message}\"\n    }\n}",
    "summary": "Reads the contents of a file into a string and handles any I/O exceptions by returning an error message."
  },
  {
    "id": 230,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String>? {\n    return try {\n        File(filePath).readLines()\n    } catch (e: Exception) {\n        e.printStackTrace()\n        null\n    }\n}",
    "summary": "This function reads all lines from a specified file and returns them as a list of strings, or null if an error occurs."
  },
  {
    "id": 231,
    "code": "import java.io.File\n\nfun readTextFile(filePath: String): String {\n    return File(filePath).bufferedReader().use { it.readText() }\n}",
    "summary": "Reads the entire content of a text file specified by the file path and returns it as a string."
  },
  {
    "id": 232,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 233,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"File not found or is not a valid file\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 234,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file at the specified path and returns them as a list of strings."
  },
  {
    "id": 235,
    "code": "import java.io.File\n\nfun readTextFile(filePath: String): String {\n    return File(filePath).bufferedReader().use { it.readText() }\n}",
    "summary": "Reads the entire content of a text file specified by its file path and returns it as a String."
  },
  {
    "id": 236,
    "code": "fun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists()) throw FileNotFoundException(\"File not found: $filePath\")\n    return file.readLines()\n}",
    "summary": "Reads and returns all lines from a specified file as a list of strings."
  },
  {
    "id": 237,
    "code": "import java.io.File\n\nfun readFileAsLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads a file and returns its contents as a list of strings, where each string represents a line in the file."
  },
  {
    "id": 238,
    "code": "fun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file at the specified path and returns them as a list of strings."
  },
  {
    "id": 239,
    "code": "import java.io.File\n\nfun readFirstLineOfFile(filePath: String): String? {\n    return File(filePath).useLines { it.firstOrNull() }\n}",
    "summary": "Reads and returns the first line of a file given its path, or null if the file is empty."
  },
  {
    "id": 240,
    "code": "import java.io.File\n\nfun countLinesInFile(filePath: String): Int {\n    val file = File(filePath)\n    if (!file.exists()) throw FileNotFoundException(\"File not found: $filePath\")\n    return file.readLines().size\n}",
    "summary": "Counts the number of lines in a specified file and returns the total count."
  },
  {
    "id": 241,
    "code": "import java.io.File\n\nfun readTextFile(filePath: String): String {\n    return File(filePath).readText()\n}",
    "summary": "Reads and returns the entire content of a text file specified by the file path."
  },
  {
    "id": 242,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file located at the given file path and returns them as a list of strings."
  },
  {
    "id": 243,
    "code": "import java.io.File\n\nfun readFirstLineOfFile(filePath: String): String? {\n    return File(filePath).useLines { it.firstOrNull() }\n}",
    "summary": "Reads and returns the first line of a file from the specified file path, or null if the file is empty."
  },
  {
    "id": 244,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file at the specified file path and returns them as a list of strings."
  },
  {
    "id": 245,
    "code": "import java.io.File\nimport java.io.IOException\n\nfun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists() || !file.canRead()) {\n        throw IOException(\"File not found or cannot be read.\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads all lines from a file specified by the given file path and returns them as a list of strings."
  },
  {
    "id": 246,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 247,
    "code": "import java.io.File\n\nfun readFirstLineOfFile(filePath: String): String? {\n    return File(filePath).useLines { it.firstOrNull() }\n}",
    "summary": "Reads and returns the first line of the specified file, or null if the file is empty."
  },
  {
    "id": 248,
    "code": "import java.io.File\n\nfun readFileToLines(filePath: String): List<String> {\n    return File(filePath).readLines()\n}",
    "summary": "Reads a file from the specified path and returns its content as a list of strings, with each string representing a line."
  },
  {
    "id": 249,
    "code": "import java.io.File\n\nfun readFileAsLines(filePath: String): List<String> {\n    return File(filePath).readLines()\n}",
    "summary": "This function reads a file from the given file path and returns its contents as a list of strings, each representing a line."
  },
  {
    "id": 250,
    "code": "import java.io.File\n\nfun readFirstLineOfFile(filePath: String): String? {\n    return File(filePath).useLines { it.firstOrNull() }\n}",
    "summary": "Reads and returns the first line of a file specified by the given file path, or null if the file is empty."
  },
  {
    "id": 251,
    "code": "import java.io.File\n\nfun readFirstLineOfFile(filePath: String): String? {\n    return try {\n        File(filePath).bufferedReader().use { it.readLine() }\n    } catch (e: Exception) {\n        println(\"Error reading file: ${e.message}\")\n        null\n    }\n}",
    "summary": "Reads and returns the first line of a file specified by the given file path, handling any exceptions that occur."
  },
  {
    "id": 252,
    "code": "import java.io.File\n\nfun readFirstLine(filePath: String): String? {\n    return try {\n        File(filePath).useLines { it.firstOrNull() }\n    } catch (e: Exception) {\n        null\n    }\n}",
    "summary": "Reads and returns the first line of a file specified by the given file path, or null if an error occurs."
  },
  {
    "id": 253,
    "code": "fun readLinesFromFile(filePath: String): List<String> {\n    val file = java.io.File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings, or an empty list if the file does not exist."
  },
  {
    "id": 254,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file at the specified path and returns them as a list of strings."
  },
  {
    "id": 255,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 256,
    "code": "fun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists()) {\n        throw FileNotFoundException(\"The file at path $filePath does not exist.\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 257,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String>? {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        null\n    }\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings, or null if the file does not exist or is not a file."
  },
  {
    "id": 258,
    "code": "fun readLinesFromFile(filePath: String): List<String> {\n    val file = java.io.File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"Invalid file path: $filePath\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads all lines from a specified file into a list of strings, ensuring the file exists and is valid."
  },
  {
    "id": 259,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 260,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a file and returns them as a list of strings, or an empty list if the file doesn't exist."
  },
  {
    "id": 261,
    "code": "import java.io.File\n\nfun readFirstLineOfFile(filePath: String): String? {\n    return File(filePath).useLines { it.firstOrNull() }\n}",
    "summary": "Reads and returns the first line of a file specified by the given file path, or null if the file is empty."
  },
  {
    "id": 262,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file at the given path and returns them as a list of strings."
  },
  {
    "id": 263,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists()) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from the specified file and returns them as a list of strings, or an empty list if the file does not exist."
  },
  {
    "id": 264,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists()) throw FileNotFoundException(\"File not found: $filePath\")\n    return file.readLines()\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings, throwing an exception if the file does not exist."
  },
  {
    "id": 265,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"The specified path does not point to a valid file.\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings, throwing an exception if the file is not valid."
  },
  {
    "id": 266,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"File does not exist or is not a valid file: $filePath\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 267,
    "code": "fun readLinesFromFile(filePath: String): List<String> {\n    return try {\n        File(filePath).readLines()\n    } catch (e: IOException) {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a file and returns them as a list of strings, returning an empty list if an IOException occurs."
  },
  {
    "id": 268,
    "code": "fun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists()) {\n        throw FileNotFoundException(\"The file at path $filePath does not exist.\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings, throwing an exception if the file does not exist."
  },
  {
    "id": 269,
    "code": "fun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 270,
    "code": "fun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw FileNotFoundException(\"The file at path $filePath does not exist or is not a file.\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings, throwing an exception if the file is not found."
  },
  {
    "id": 271,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads a file from the specified path and returns its contents as a list of strings, each representing a line."
  },
  {
    "id": 272,
    "code": "import java.io.File\n\nfun writeTextToFile(filePath: String, text: String) {\n    File(filePath).writeText(text)\n}",
    "summary": "Writes a given text to a specified file path, overwriting any existing content."
  },
  {
    "id": 273,
    "code": "import java.io.File\n\nfun readFileAsString(filePath: String): String {\n    return File(filePath).readText(Charsets.UTF_8)\n}",
    "summary": "Reads the entire content of a file at the specified path as a UTF-8 encoded string."
  },
  {
    "id": 274,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists()) throw IllegalArgumentException(\"File not found: $filePath\")\n    return file.readLines()\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 275,
    "code": "import java.io.File\n\nfun readFirstLineFromFile(filePath: String): String? {\n    return File(filePath).useLines { it.firstOrNull() }\n}",
    "summary": "Reads and returns the first line from a file specified by the given file path, or null if the file is empty."
  },
  {
    "id": 276,
    "code": "import java.io.File\n\nfun readFirstLine(filePath: String): String? {\n    val file = File(filePath)\n    return if (file.exists()) {\n        file.useLines { it.firstOrNull() }\n    } else {\n        null\n    }\n}",
    "summary": "Reads and returns the first line of a file given its path, or null if the file doesn't exist."
  },
  {
    "id": 277,
    "code": "fun readLinesFromFile(filePath: String): List<String> {\n    val file = java.io.File(filePath)\n    return if (file.exists()) file.readLines() else emptyList()\n}",
    "summary": "This function reads all lines from a specified file and returns them as a list of strings, or an empty list if the file does not exist."
  },
  {
    "id": 278,
    "code": "import java.io.File\n\nfun readFirstLineFromFile(filePath: String): String? {\n    return File(filePath).useLines { it.firstOrNull() }\n}",
    "summary": "Reads and returns the first line from the specified file, or null if the file is empty."
  },
  {
    "id": 279,
    "code": "import java.io.File\n\nfun readFirstLineOfFile(filePath: String): String? {\n    return File(filePath).bufferedReader().use { it.readLine() }\n}",
    "summary": "Reads and returns the first line of a file specified by the provided file path."
  },
  {
    "id": 280,
    "code": "import java.io.File\n\nfun readTextFile(filePath: String): String {\n    return File(filePath).bufferedReader().use { it.readText() }\n}",
    "summary": "Reads and returns the entire content of a text file specified by the file path."
  },
  {
    "id": 281,
    "code": "import java.io.File\n\nfun readFileToString(filePath: String): String {\n    return File(filePath).readText(Charsets.UTF_8)\n}",
    "summary": "Reads the content of a file at the given path and returns it as a UTF-8 encoded string."
  },
  {
    "id": 282,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"The specified path does not exist or is not a file.\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads and returns all lines from a specified file as a list of strings."
  },
  {
    "id": 283,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 284,
    "code": "import java.io.File\n\nfun countLinesInFile(filePath: String): Int {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"Invalid file path: $filePath\")\n    }\n    return file.useLines { it.count() }\n}",
    "summary": "Counts and returns the number of lines in the specified file."
  },
  {
    "id": 285,
    "code": "import java.io.File\n\nfun readFirstNLines(filePath: String, n: Int): List<String> {\n    val file = File(filePath)\n    return file.useLines { lines -> lines.take(n).toList() }\n}",
    "summary": "Reads the first N lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 286,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"Invalid file path: $filePath\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 287,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from the specified file and returns them as a list of strings."
  },
  {
    "id": 288,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists()) {\n        throw IllegalArgumentException(\"File does not exist at the specified path: $filePath\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads all lines from a file at the given path and returns them as a list of strings."
  },
  {
    "id": 289,
    "code": "fun readFileAsString(filePath: String): String {\n    return File(filePath).readText(Charsets.UTF_8)\n}",
    "summary": "Reads the entire content of a file specified by the file path into a string using UTF-8 encoding."
  },
  {
    "id": 290,
    "code": "fun readFileLines(fileName: String): List<String> {\n    val file = java.io.File(fileName)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a given file and returns them as a list of strings, or an empty list if the file is not found."
  },
  {
    "id": 291,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "This function reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 292,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists()) {\n        throw IllegalArgumentException(\"File does not exist: $filePath\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads all lines from a file at the given path into a list of strings, throwing an exception if the file does not exist."
  },
  {
    "id": 293,
    "code": "import java.io.File\n\nfun countLinesInFile(filePath: String): Int {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"The provided path does not point to a valid file.\")\n    }\n    return file.useLines { it.count() }\n}",
    "summary": "Counts the number of lines in a specified file and returns the total count."
  },
  {
    "id": 294,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 295,
    "code": "import java.io.File\n\nfun countLinesInFile(filePath: String): Int {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"Invalid file path.\")\n    }\n    return file.useLines { it.count() }\n}",
    "summary": "Counts the number of lines in a specified file."
  },
  {
    "id": 296,
    "code": "import java.io.File\n\nfun readFileAsString(filePath: String): String {\n    return File(filePath).readText(Charsets.UTF_8)\n}",
    "summary": "Reads the entire content of a file specified by the file path into a string using UTF-8 encoding."
  },
  {
    "id": 297,
    "code": "import java.io.File\nimport java.io.IOException\n\n@Throws(IOException::class)\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by `filePath` and returns them as a list of strings."
  },
  {
    "id": 298,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists()) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a file at the specified path and returns them as a list of strings."
  },
  {
    "id": 299,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 300,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file at the specified path into a list of strings."
  },
  {
    "id": 301,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists()) throw FileNotFoundException(\"File not found: $filePath\")\n    return file.readLines()\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 302,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.canRead()) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads and returns all lines from a file as a list of strings if the file is readable, otherwise returns an empty list."
  },
  {
    "id": 303,
    "code": "fun readFileLines(fileName: String): List<String> {\n    val file = java.io.File(fileName)\n    if (!file.exists()) throw IllegalArgumentException(\"File not found: $fileName\")\n    return file.readLines()\n}",
    "summary": "Reads all lines from a specified file into a list of strings, throwing an exception if the file does not exist."
  },
  {
    "id": 304,
    "code": "import java.io.File\n\nfun countLinesInFile(filePath: String): Int {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"Invalid file path: $filePath\")\n    }\n    return file.readLines().size\n}",
    "summary": "Counts the number of lines in a specified file and returns the total."
  },
  {
    "id": 305,
    "code": "import java.io.File\n\nfun readFirstLine(filePath: String): String? {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.bufferedReader().use { it.readLine() }\n    } else {\n        null\n    }\n}",
    "summary": "Reads and returns the first line of a file specified by its path, or null if the file does not exist."
  },
  {
    "id": 306,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists() || !file.canRead()) {\n        throw IllegalArgumentException(\"File not found or cannot be read\")\n    }\n    return file.readLines()\n}",
    "summary": "This function reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 307,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"Invalid file path provided.\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 308,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by the given file path and returns them as a list of strings."
  },
  {
    "id": 309,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 310,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists()) {\n        throw IllegalArgumentException(\"File at path $filePath does not exist.\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 311,
    "code": "import java.io.File\n\nfun countLinesInFile(filePath: String): Int {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"Invalid file path\")\n    }\n    return file.useLines { it.count() }\n}",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 312,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 313,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        throw IllegalArgumentException(\"File not found or is not a valid file: $filePath\")\n    }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 314,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).readLines()\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 315,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 316,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a file at the specified path and returns them as a list of strings."
  },
  {
    "id": 317,
    "code": "import java.io.File\nimport java.io.IOException\n\n@Throws(IOException::class)\nfun readFileAsString(filePath: String): String {\n    return File(filePath).readText(Charsets.UTF_8)\n}",
    "summary": "Reads the entire content of a file specified by the file path and returns it as a string using UTF-8 encoding."
  },
  {
    "id": 318,
    "code": "fun readTextFile(filePath: String): String {\n    val file = java.io.File(filePath)\n    return file.readText()\n}",
    "summary": "Reads the entire content of a text file specified by its file path and returns it as a string."
  },
  {
    "id": 319,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a file and returns them as a list of strings, or an empty list if the file does not exist."
  },
  {
    "id": 320,
    "code": "import java.io.File\n\nfun countLinesInFile(filePath: String): Int {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"Invalid file path: $filePath\")\n    }\n    return file.useLines { it.count() }\n}",
    "summary": "Counts the number of lines in a specified file, throwing an exception for invalid file paths."
  },
  {
    "id": 321,
    "code": "import java.io.File\n\nfun readFirstLineFromFile(filePath: String): String? {\n    return File(filePath).useLines { lines -> lines.firstOrNull() }\n}",
    "summary": "Reads and returns the first line from a specified file, or null if the file is empty."
  },
  {
    "id": 322,
    "code": "import java.io.File\n\nfun readFirstLine(filePath: String): String? {\n    return File(filePath).useLines { it.firstOrNull() }\n}",
    "summary": "Reads the first line of a file specified by the file path and returns it, or null if the file is empty."
  },
  {
    "id": 323,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a file and returns them as a list of strings, or an empty list if the file does not exist."
  },
  {
    "id": 324,
    "code": "import java.io.File\n\nfun readFirstLineFromFile(filePath: String): String? {\n    return try {\n        File(filePath).bufferedReader().use { it.readLine() }\n    } catch (e: Exception) {\n        e.printStackTrace()\n        null\n    }\n}",
    "summary": "Reads and returns the first line from a specified file, or null if an exception occurs."
  },
  {
    "id": 325,
    "code": "fun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads and returns all lines from a file as a list of strings, or an empty list if the file does not exist."
  },
  {
    "id": 326,
    "code": "fun readTextFile(filePath: String): String {\n    return File(filePath).bufferedReader().use { it.readText() }\n}",
    "summary": "Reads and returns the entire content of a text file as a String given its file path."
  },
  {
    "id": 327,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 328,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file at the given path and returns them as a list of strings."
  },
  {
    "id": 329,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads and returns all lines from a file as a list of strings if the file exists, otherwise returns an empty list."
  },
  {
    "id": 330,
    "code": "import java.io.File\n\nfun readFileAsString(filePath: String): String {\n    return File(filePath).readText(Charsets.UTF_8)\n}",
    "summary": "Reads the content of a file specified by the file path and returns it as a String using UTF-8 encoding."
  },
  {
    "id": 331,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file and returns them as a list of strings."
  },
  {
    "id": 332,
    "code": "fun readFirstLineFromFile(fileName: String): String? {\n    return try {\n        File(fileName).bufferedReader().use { it.readLine() }\n    } catch (e: IOException) {\n        println(\"Error reading file: ${e.message}\")\n        null\n    }\n}",
    "summary": "Reads and returns the first line from a specified file, handling any IOExceptions that may occur."
  },
  {
    "id": 333,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a given file and returns them as a list of strings."
  },
  {
    "id": 334,
    "code": "fun readLinesFromFile(filePath: String): List<String> {\n    val file = java.io.File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a file at the given path and returns them as a list of strings."
  },
  {
    "id": 335,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists() || !file.canRead()) {\n        throw IllegalArgumentException(\"File cannot be read or does not exist: $filePath\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 336,
    "code": "import java.io.File\n\nfun readFirstLineOfFile(filePath: String): String? {\n    return File(filePath).useLines { it.firstOrNull() }\n}",
    "summary": "Reads and returns the first line of a file specified by the given file path, or null if the file is empty."
  },
  {
    "id": 337,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a file and returns them as a list of strings, or an empty list if the file does not exist."
  },
  {
    "id": 338,
    "code": "import java.io.File\nimport java.io.IOException\n\nfun readFirstLine(filePath: String): String? {\n    return try {\n        File(filePath).useLines { lines -> lines.firstOrNull() }\n    } catch (e: IOException) {\n        println(\"Error reading file: ${e.message}\")\n        null\n    }\n}",
    "summary": "Reads and returns the first line of a file specified by the given file path, or null if an error occurs."
  },
  {
    "id": 339,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String>? {\n    return try {\n        File(filePath).readLines()\n    } catch (e: Exception) {\n        e.printStackTrace()\n        null\n    }\n}",
    "summary": "Reads all lines from a file at the given path and returns them as a list of strings, or null if an error occurs."
  },
  {
    "id": 340,
    "code": "fun readTextFile(filePath: String): String {\n    return try {\n        File(filePath).readText()\n    } catch (e: IOException) {\n        \"Error reading file: ${e.message}\"\n    }\n}",
    "summary": "Reads the content of a text file and returns it as a string, handling IO exceptions."
  },
  {
    "id": 341,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings, or an empty list if the file does not exist."
  },
  {
    "id": 342,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads and returns all lines from a file as a list of strings if the file exists, otherwise returns an empty list."
  },
  {
    "id": 343,
    "code": "import java.io.File\n\nfun readFirstLineOfFile(filePath: String): String? {\n    return try {\n        File(filePath).useLines { it.firstOrNull() }\n    } catch (e: Exception) {\n        null\n    }\n}",
    "summary": "Reads the first line of a file at the specified path and returns it, or null if an error occurs."
  },
  {
    "id": 344,
    "code": "import java.io.File\n\nfun readFirstNLines(filePath: String, n: Int): List<String> {\n    val file = File(filePath)\n    return file.useLines { lines -> lines.take(n).toList() }\n}",
    "summary": "Reads and returns the first N lines from a specified file."
  },
  {
    "id": 345,
    "code": "import java.io.File\n\nfun readFirstNLines(filePath: String, n: Int): List<String> {\n    return File(filePath).useLines { lines ->\n        lines.take(n).toList()\n    }\n}",
    "summary": "Reads the first N lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 346,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 347,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"The provided path does not exist or is not a file.\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 348,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 349,
    "code": "import java.io.File\n\nfun readFirstLine(filePath: String): String? {\n    return try {\n        File(filePath).useLines { it.firstOrNull() }\n    } catch (e: Exception) {\n        println(\"Error reading file: ${e.message}\")\n        null\n    }\n}",
    "summary": "Reads and returns the first line of a file specified by the given file path, or null if an error occurs."
  },
  {
    "id": 350,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file and returns them as a list of strings."
  },
  {
    "id": 351,
    "code": "import java.io.File\n\nfun readFileLinesToList(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a specified file into a list of strings, returning an empty list if the file does not exist."
  },
  {
    "id": 352,
    "code": "import java.io.File\n\nfun readFileLines(fileName: String): List<String> {\n    return File(fileName).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 353,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 354,
    "code": "import java.io.File\n\nfun readFileAsLines(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads a file from the given path and returns its content as a list of strings, or an empty list if the file does not exist or is not a file."
  },
  {
    "id": 355,
    "code": "import java.io.File\n\nfun readFirstLineOfFile(filePath: String): String? {\n    return File(filePath).bufferedReader().use { it.readLine() }\n}",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 356,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists()) {\n        throw IllegalArgumentException(\"File does not exist at path: $filePath\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 357,
    "code": "fun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads and returns all lines from a file as a list of strings."
  },
  {
    "id": 358,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        throw IllegalArgumentException(\"File not found or is not a valid file.\")\n    }\n}",
    "summary": "Reads and returns all lines from a specified file as a list of strings."
  },
  {
    "id": 359,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 360,
    "code": "fun readTextFile(filePath: String): String {\n    return File(filePath).bufferedReader().use { it.readText() }\n}",
    "summary": "Reads the entire content of a text file specified by the file path and returns it as a String."
  },
  {
    "id": 361,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 362,
    "code": "fun readTextFile(filePath: String): String {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readText()\n    } else {\n        throw FileNotFoundException(\"The file at $filePath does not exist or is not a valid file.\")\n    }\n}",
    "summary": "Reads and returns the content of a text file specified by the file path, throwing an exception if the file is not found."
  },
  {
    "id": 363,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String>? {\n    return try {\n        File(filePath).readLines()\n    } catch (e: Exception) {\n        e.printStackTrace()\n        null\n    }\n}",
    "summary": "Reads all lines from a file specified by the given path and returns them as a list of strings."
  },
  {
    "id": 364,
    "code": "import java.io.File\n\nfun countLinesInFile(filePath: String): Int {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"The provided path is not a valid file.\")\n    }\n    return file.readLines().size\n}",
    "summary": "Counts the number of lines in a specified file, throwing an exception if the path is invalid."
  },
  {
    "id": 365,
    "code": "import java.io.File\n\nfun countLinesInFile(filePath: String): Int {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"Invalid file path\")\n    }\n    return file.useLines { it.count() }\n}",
    "summary": "Counts and returns the number of lines in a specified file path."
  },
  {
    "id": 366,
    "code": "import java.io.File\n\nfun countLinesInFile(filePath: String): Int {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"Invalid file path\")\n    }\n    return file.useLines { it.count() }\n}",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 367,
    "code": "import java.io.File\n\nfun countLinesInFile(filePath: String): Int {\n    val file = File(filePath)\n    if (!file.exists()) {\n        throw FileNotFoundException(\"File not found: $filePath\")\n    }\n    return file.readLines().size\n}",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 368,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        throw IllegalArgumentException(\"File does not exist or is not a valid file: $filePath\")\n    }\n}",
    "summary": "Reads and returns all lines from a specified file as a list of strings, throwing an exception if the file is invalid."
  },
  {
    "id": 369,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 370,
    "code": "import java.io.File\n\nfun countLinesInFile(filePath: String): Int {\n    return File(filePath).useLines { it.count() }\n}",
    "summary": "Counts the number of lines in a given file specified by the file path."
  },
  {
    "id": 371,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists()) {\n        throw IllegalArgumentException(\"File at $filePath does not exist.\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads and returns all lines from a file specified by the given file path."
  },
  {
    "id": 372,
    "code": "fun readLinesFromFile(filePath: String): List<String> {\n    val lines = mutableListOf<String>()\n    File(filePath).useLines { it.forEach { line -> lines.add(line) } }\n    return lines\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 373,
    "code": "fun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"File does not exist or is not a regular file.\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads and returns all lines from a file as a list of strings, throwing an error if the file does not exist or is not valid."
  },
  {
    "id": 374,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a file specified by filePath and returns them as a list of strings."
  },
  {
    "id": 375,
    "code": "fun readFileLines(filePath: String): List<String> {\n    val file = java.io.File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a file and returns them as a list of strings if the file exists, otherwise returns an empty list."
  },
  {
    "id": 376,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 377,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by filePath and returns them as a list of strings."
  },
  {
    "id": 378,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 379,
    "code": "fun readFileLines(filePath: String): List<String> {\n    return try {\n        File(filePath).readLines()\n    } catch (e: IOException) {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a file at the specified path and returns them as a list of strings, or an empty list if an error occurs."
  },
  {
    "id": 380,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file and returns them as a list of strings."
  },
  {
    "id": 381,
    "code": "import java.io.File\n\nfun readFirstLineFromFile(filePath: String): String? {\n    return File(filePath).useLines { it.firstOrNull() }\n}",
    "summary": "Reads and returns the first line from a file at the specified path, or null if the file is empty."
  },
  {
    "id": 382,
    "code": "import java.io.File\n\nfun readFileAsString(filePath: String): String {\n    return File(filePath).readText(Charsets.UTF_8)\n}",
    "summary": "Reads the entire content of a file specified by the file path into a string using UTF-8 encoding."
  },
  {
    "id": 383,
    "code": "import java.io.File\n\nfun countLinesInFile(filePath: String): Int {\n    return File(filePath).useLines { it.count() }\n}",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 384,
    "code": "fun readLinesFromFile(filePath: String): List<String> {\n    val lines = mutableListOf<String>()\n    File(filePath).useLines { it.forEach { line -> lines.add(line) } }\n    return lines\n}",
    "summary": "Reads and returns all lines from a specified file as a list of strings."
  },
  {
    "id": 385,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 386,
    "code": "fun readLinesFromFile(filePath: String): List<String> {\n    val file = java.io.File(filePath)\n    if (!file.exists()) {\n        throw IllegalArgumentException(\"File not found: $filePath\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 387,
    "code": "import java.io.File\n\nfun readTextFile(filePath: String): String {\n    return File(filePath).useLines { lines -> lines.joinToString(\"\\n\") }\n}",
    "summary": "Reads and returns the contents of a text file as a single string."
  },
  {
    "id": 388,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists()) {\n        throw IllegalArgumentException(\"File does not exist at path: $filePath\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 389,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists()) {\n        throw IllegalArgumentException(\"File does not exist: $filePath\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads all lines from a specified file into a list of strings."
  },
  {
    "id": 390,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists()) {\n        throw IllegalArgumentException(\"File does not exist: $filePath\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads and returns all lines from a file specified by the given file path."
  },
  {
    "id": 391,
    "code": "import java.io.File\n\nfun countLinesInFile(filePath: String): Int {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"The specified path does not point to a valid file.\")\n    }\n    return file.useLines { it.count() }\n}",
    "summary": "This function counts and returns the number of lines in a file given its file path."
  },
  {
    "id": 392,
    "code": "import java.io.File\n\nfun readFirstLineOfFile(filePath: String): String? {\n    return File(filePath).useLines { it.firstOrNull() }\n}",
    "summary": "Reads and returns the first line of a file at the specified path, or null if the file is empty."
  },
  {
    "id": 393,
    "code": "import java.io.File\n\nfun readFirstLineOfFile(filePath: String): String? {\n    return try {\n        File(filePath).bufferedReader().use { it.readLine() }\n    } catch (e: Exception) {\n        null\n    }\n}",
    "summary": "Reads and returns the first line of a file specified by the file path, or null if an error occurs."
  },
  {
    "id": 394,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file at the given path and returns them as a list of strings."
  },
  {
    "id": 395,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        throw IllegalArgumentException(\"The specified path does not point to a valid file.\")\n    }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 396,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by its path and returns them as a list of strings."
  },
  {
    "id": 397,
    "code": "fun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file at the specified path and returns them as a list of strings."
  },
  {
    "id": 398,
    "code": "import java.io.File\n\nfun readTextFile(filePath: String): String {\n    return File(filePath).readText(Charsets.UTF_8)\n}",
    "summary": "Reads the contents of a file at the specified path as a UTF-8 encoded string."
  },
  {
    "id": 399,
    "code": "import java.io.File\nimport java.io.IOException\n\nfun readFileLines(filePath: String): List<String> {\n    return try {\n        File(filePath).readLines()\n    } catch (e: IOException) {\n        println(\"Error reading file: ${e.message}\")\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 400,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file at the given path and returns them as a list of strings."
  },
  {
    "id": 401,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file at the specified path into a list of strings."
  },
  {
    "id": 402,
    "code": "import java.io.File\n\nfun readFirstLineOfFile(filePath: String): String? {\n    return File(filePath).bufferedReader().use { it.readLine() }\n}",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 403,
    "code": "fun readFileLines(filePath: String): List<String>? {\n    return try {\n        File(filePath).readLines()\n    } catch (e: IOException) {\n        println(\"Error reading file: ${e.message}\")\n        null\n    }\n}",
    "summary": "Reads all lines from a file and returns them as a list of strings, handling any I/O exceptions."
  },
  {
    "id": 404,
    "code": "import java.io.File\n\nfun readFileToString(filePath: String): String {\n    return File(filePath).readText(Charsets.UTF_8)\n}",
    "summary": "Reads the contents of a file at the specified path into a string using UTF-8 encoding."
  },
  {
    "id": 405,
    "code": "import java.io.File\n\nfun readFirstLineFromFile(filePath: String): String? {\n    return File(filePath).useLines { lines -> lines.firstOrNull() }\n}",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 406,
    "code": "fun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists()) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a file at the given path and returns them as a list of strings."
  },
  {
    "id": 407,
    "code": "fun readTextFile(filePath: String): String {\n    return File(filePath).useLines { it.joinToString(\"\\n\") }\n}",
    "summary": "Reads a text file from the given path and returns its content as a single string."
  },
  {
    "id": 408,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).readLines()\n}",
    "summary": "Reads all lines from a file at the given path and returns them as a list of strings."
  },
  {
    "id": 409,
    "code": "import java.io.File\n\nfun readFirstLineFromFile(filename: String): String? {\n    return try {\n        File(filename).useLines { it.firstOrNull() }\n    } catch (e: Exception) {\n        null\n    }\n}",
    "summary": "Reads and returns the first line from a specified file, or null if an error occurs."
  },
  {
    "id": 410,
    "code": "import java.io.File\nimport java.io.IOException\n\n@Throws(IOException::class)\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IOException(\"File does not exist or is not a valid file\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings, throwing an IOException if the file is invalid."
  },
  {
    "id": 411,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings, or an empty list if the file does not exist."
  },
  {
    "id": 412,
    "code": "import java.io.File\n\nfun readFileAsString(filePath: String): String {\n    return File(filePath).readText(Charsets.UTF_8)\n}",
    "summary": "Reads the entire content of a file specified by its path into a string using UTF-8 encoding."
  },
  {
    "id": 413,
    "code": "import java.io.File\n\nfun readFirstLineFromFile(filePath: String): String? {\n    return File(filePath).bufferedReader().use { it.readLine() }\n}",
    "summary": "Reads and returns the first line from a specified file, or null if the file is empty or an error occurs."
  },
  {
    "id": 414,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.canRead()) {\n        file.readLines()\n    } else {\n        throw IllegalArgumentException(\"File does not exist or cannot be read\")\n    }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 415,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "This function reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 416,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 417,
    "code": "import java.io.File\nimport java.io.IOException\n\nfun readFileAsLines(filePath: String): List<String> {\n    return try {\n        File(filePath).readLines()\n    } catch (e: IOException) {\n        println(\"An error occurred: ${e.message}\")\n        emptyList()\n    }\n}",
    "summary": "Reads a file from the given path and returns its contents as a list of strings, handling any IO exceptions."
  },
  {
    "id": 418,
    "code": "import java.io.File\n\nfun countLinesInFile(filePath: String): Int {\n    return File(filePath).useLines { it.count() }\n}",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 419,
    "code": "import java.io.File\nimport java.io.IOException\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return try {\n        File(filePath).readLines()\n    } catch (e: IOException) {\n        println(\"Error reading file: ${e.message}\")\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings, handling any I/O exceptions that may occur."
  },
  {
    "id": 420,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file at the given path and returns them as a list of strings."
  },
  {
    "id": 421,
    "code": "fun readFirstLineFromFile(filePath: String): String? {\n    return try {\n        val file = java.io.File(filePath)\n        file.bufferedReader().use { it.readLine() }\n    } catch (e: Exception) {\n        null\n    }\n}",
    "summary": "Reads and returns the first line from a specified file, or null if an error occurs."
  },
  {
    "id": 422,
    "code": "import java.io.File\n\nfun countLinesInFile(filePath: String): Int {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"Invalid file path\")\n    }\n    return file.readLines().size\n}",
    "summary": "Counts the number of lines in a specified file, throwing an exception for invalid file paths."
  },
  {
    "id": 423,
    "code": "fun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 424,
    "code": "fun readFileLines(filePath: String): List<String> {\n    return try {\n        File(filePath).useLines { it.toList() }\n    } catch (e: IOException) {\n        emptyList()\n    }\n}",
    "summary": "This function reads all lines from a file specified by the file path and returns them as a list of strings, or an empty list if an I/O error occurs."
  },
  {
    "id": 425,
    "code": "import java.io.File\n\nfun readFirstLine(filePath: String): String? {\n    return try {\n        File(filePath).useLines { it.firstOrNull() }\n    } catch (e: Exception) {\n        null\n    }\n}",
    "summary": "Reads and returns the first line of a file, returning null if an error occurs or the file is empty."
  },
  {
    "id": 426,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists()) {\n        file.readLines()\n    } else {\n        throw FileNotFoundException(\"File not found at the specified path: $filePath\")\n    }\n}",
    "summary": "Reads and returns all lines from a file at the given path, or throws FileNotFoundException if the file does not exist."
  },
  {
    "id": 427,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).readLines()\n}",
    "summary": "Reads all lines from a file specified by its path and returns them as a list of strings."
  },
  {
    "id": 428,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists()) {\n        throw FileNotFoundException(\"The file at $filePath does not exist.\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads and returns all lines from a file specified by the given file path."
  },
  {
    "id": 429,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 430,
    "code": "import java.io.File\n\nfun readFirstLineFromFile(filePath: String): String? {\n    return File(filePath).useLines { it.firstOrNull() }\n}",
    "summary": "Reads and returns the first line from a specified file, or null if the file is empty."
  },
  {
    "id": 431,
    "code": "import java.io.File\n\nfun countLinesInFile(filePath: String): Int {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"File not found or is not a valid file.\")\n    }\n    return file.useLines { it.count() }\n}",
    "summary": "Counts the number of lines in a given file and returns the count."
  },
  {
    "id": 432,
    "code": "fun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file at the specified path into a list of strings."
  },
  {
    "id": 433,
    "code": "import java.io.File\n\nfun countLinesInFile(filePath: String): Int {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"The specified path does not point to a valid file.\")\n    }\n    return file.useLines { it.count() }\n}",
    "summary": "Counts the number of lines in a specified file, throwing an exception if the file is invalid."
  },
  {
    "id": 434,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists()) throw FileNotFoundException(\"File not found: $filePath\")\n    return file.readLines()\n}",
    "summary": "Reads and returns all lines from a file at the specified path, throwing an exception if the file does not exist."
  },
  {
    "id": 435,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).readLines()\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 436,
    "code": "fun readFileLineByLine(filePath: String): List<String> {\n    val lines = mutableListOf<String>()\n    File(filePath).useLines { lineSequence ->\n        lineSequence.forEach { line ->\n            lines.add(line)\n        }\n    }\n    return lines\n}",
    "summary": "Reads a file line by line and returns the content as a list of strings."
  },
  {
    "id": 437,
    "code": "fun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        throw IllegalArgumentException(\"The specified path does not point to a valid file.\")\n    }\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 438,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        throw IllegalArgumentException(\"File does not exist or is not a regular file\")\n    }\n}",
    "summary": "This function reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 439,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a file and returns them as a list of strings, or an empty list if the file does not exist or is not valid."
  },
  {
    "id": 440,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file and returns them as a list of strings."
  },
  {
    "id": 441,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        throw IllegalArgumentException(\"The provided path does not point to a valid file.\")\n    }\n}",
    "summary": "Reads and returns all lines from a file at the given path, throwing an exception if the file is invalid."
  },
  {
    "id": 442,
    "code": "fun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file and returns them as a list of strings."
  },
  {
    "id": 443,
    "code": "fun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.canRead()) {\n        file.readLines()\n    } else {\n        throw FileNotFoundException(\"The file at $filePath could not be found or is not readable.\")\n    }\n}",
    "summary": "Reads all lines from a file at the specified path and returns them as a list of strings."
  },
  {
    "id": 444,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 445,
    "code": "import java.io.File\n\nfun readTextFile(filePath: String): String {\n    return File(filePath).readText(Charsets.UTF_8)\n}",
    "summary": "Reads and returns the content of a text file specified by the file path using UTF-8 encoding."
  },
  {
    "id": 446,
    "code": "import java.io.File\n\nfun countLinesInFile(filePath: String): Int {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"Invalid file path: $filePath\")\n    }\n    return file.readLines().size\n}",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 447,
    "code": "fun readLinesFromFile(filePath: String): List<String> {\n    val lines = mutableListOf<String>()\n    File(filePath).useLines { lineSequence ->\n        lineSequence.forEach { lines.add(it) }\n    }\n    return lines\n}",
    "summary": "Reads all lines from a file at a given path and returns them as a list of strings."
  },
  {
    "id": 448,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a file given its path and returns them as a list of strings, or an empty list if the file doesn't exist."
  },
  {
    "id": 449,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads and returns all lines from a file specified by the given file path as a list of strings."
  },
  {
    "id": 450,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by the given file path and returns them as a list of strings."
  },
  {
    "id": 451,
    "code": "import java.io.File\nimport java.io.IOException\n\nfun readFileLines(filePath: String): List<String> {\n    return try {\n        File(filePath).readLines()\n    } catch (e: IOException) {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings, or returns an empty list if an error occurs."
  },
  {
    "id": 452,
    "code": "import java.io.File\n\nfun readFirstLineFromFile(filePath: String): String? {\n    return try {\n        File(filePath).useLines { it.firstOrNull() }\n    } catch (e: Exception) {\n        println(\"Error reading file: ${e.message}\")\n        null\n    }\n}",
    "summary": "Reads and returns the first line from a specified file, handling exceptions and returning null if an error occurs."
  },
  {
    "id": 453,
    "code": "fun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file at the given path and returns them as a list of strings."
  },
  {
    "id": 454,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"Invalid file path: $filePath\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 455,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file and returns them as a list of strings."
  },
  {
    "id": 456,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists()) {\n        throw IllegalArgumentException(\"File not found: $filePath\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 457,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by filePath and returns them as a list of strings."
  },
  {
    "id": 458,
    "code": "import java.io.File\n\nfun readFileAsLines(fileName: String): List<String> {\n    val file = File(fileName)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads a file's contents into a list of strings, returning an empty list if the file does not exist or is not a file."
  },
  {
    "id": 459,
    "code": "import java.io.File\nimport java.io.IOException\n\n@Throws(IOException::class)\nfun readFileAsLines(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists()) {\n        throw IOException(\"File not found: $filePath\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads a file from the given path and returns its contents as a list of strings, throwing an exception if the file is not found."
  },
  {
    "id": 460,
    "code": "import java.io.File\nimport java.io.IOException\n\nfun readTextFile(filePath: String): String {\n    return try {\n        File(filePath).readText()\n    } catch (e: IOException) {\n        \"Error reading file: ${e.message}\"\n    }\n}",
    "summary": "Reads the contents of a text file and returns it as a string, handling any IO exceptions."
  },
  {
    "id": 461,
    "code": "import java.io.File\n\nfun readFirstLineFromFile(filePath: String): String? {\n    return File(filePath).useLines { it.firstOrNull() }\n}",
    "summary": "Reads and returns the first line from a file at the specified file path, or null if the file is empty."
  },
  {
    "id": 462,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists()) {\n        throw IllegalArgumentException(\"File does not exist at the specified path: $filePath\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads all lines from a file at the specified path and returns them as a list of strings."
  },
  {
    "id": 463,
    "code": "import java.io.File\n\nfun readTextFile(filePath: String): String {\n    return File(filePath).bufferedReader().use { it.readText() }\n}",
    "summary": "Reads and returns the entire content of a text file specified by the file path."
  },
  {
    "id": 464,
    "code": "import java.io.File\n\nfun readFirstLineOfFile(filePath: String): String? {\n    return try {\n        File(filePath).bufferedReader().use { it.readLine() }\n    } catch (e: Exception) {\n        null\n    }\n}",
    "summary": "Reads and returns the first line of a file specified by the file path, or null if an error occurs."
  },
  {
    "id": 465,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists()) {\n        throw IllegalArgumentException(\"File does not exist: $filePath\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads and returns all lines from a specified file as a list of strings."
  },
  {
    "id": 466,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 467,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads and returns all lines from a file as a list of strings, or an empty list if the file does not exist."
  },
  {
    "id": 468,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists()) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a file specified by the given file path and returns them as a list of strings."
  },
  {
    "id": 469,
    "code": "import java.io.File\n\nfun readFirstLineOfFile(filePath: String): String? {\n    return File(filePath).useLines { it.firstOrNull() }\n}",
    "summary": "This function reads and returns the first line of a file given its file path."
  },
  {
    "id": 470,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists()) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads and returns all lines from a file as a list of strings, or an empty list if the file does not exist."
  },
  {
    "id": 471,
    "code": "import java.io.File\n\nfun readFileToString(filePath: String): String {\n    return File(filePath).readText(Charsets.UTF_8)\n}",
    "summary": "Reads the entire content of a file specified by its path into a single string using UTF-8 encoding."
  },
  {
    "id": 472,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists()) {\n        throw IllegalArgumentException(\"File does not exist: $filePath\")\n    }\n    return file.readLines()\n}",
    "summary": "This function reads and returns all lines from a specified file as a list of strings, throwing an exception if the file does not exist."
  },
  {
    "id": 473,
    "code": "import java.io.File\n\nfun writeTextToFile(fileName: String, content: String) {\n    File(fileName).bufferedWriter().use { writer ->\n        writer.write(content)\n    }\n}",
    "summary": "Writes the provided text content to a specified file using a buffered writer."
  },
  {
    "id": 474,
    "code": "fun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"Invalid file path: $filePath\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings, throwing an exception if the file is invalid."
  },
  {
    "id": 475,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 476,
    "code": "import java.io.File\n\nfun readFirstLineOfFile(filePath: String): String? {\n    return File(filePath).useLines { it.firstOrNull() }\n}",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 477,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "This function reads all lines from a file specified by its path and returns them as a list of strings."
  },
  {
    "id": 478,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists()) {\n        throw IllegalArgumentException(\"File does not exist at the specified path: $filePath\")\n    }\n    return file.readLines()\n}",
    "summary": "This function reads all lines from a file specified by the given file path and returns them as a list of strings."
  },
  {
    "id": 479,
    "code": "import java.io.File\n\nfun readLinesFromFile(fileName: String): List<String> {\n    return File(fileName).useLines { it.toList() }\n}",
    "summary": "Reads and returns all lines from a specified file as a list of strings."
  },
  {
    "id": 480,
    "code": "import java.io.File\n\nfun readFirstLineOfFile(filePath: String): String? {\n    return try {\n        File(filePath).useLines { it.firstOrNull() }\n    } catch (e: Exception) {\n        println(\"Error reading file: ${e.message}\")\n        null\n    }\n}",
    "summary": "Reads and returns the first line of a file specified by the file path, or null if an error occurs."
  },
  {
    "id": 481,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 482,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.canRead()) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings, or an empty list if the file is not readable."
  },
  {
    "id": 483,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by `filePath` and returns them as a list of strings."
  },
  {
    "id": 484,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 485,
    "code": "fun readFileAsText(filePath: String): String {\n    return File(filePath).readText(Charsets.UTF_8)\n}",
    "summary": "Reads the content of a file at the specified path into a String using UTF-8 encoding."
  },
  {
    "id": 486,
    "code": "fun readTextFile(filePath: String): String {\n    return File(filePath).bufferedReader().use { it.readText() }\n}",
    "summary": "Reads and returns the content of a text file specified by the file path."
  },
  {
    "id": 487,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file and returns them as a list of strings."
  },
  {
    "id": 488,
    "code": "fun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"File not found or is not a valid file: $filePath\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 489,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 490,
    "code": "import java.io.File\nimport java.io.IOException\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return try {\n        File(filePath).readLines()\n    } catch (e: IOException) {\n        println(\"Error reading file: ${e.message}\")\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings, handling any IOExceptions."
  },
  {
    "id": 491,
    "code": "import java.io.File\n\nfun readFileAsString(filePath: String): String {\n    return File(filePath).readText(Charsets.UTF_8)\n}",
    "summary": "Reads the content of a file specified by the file path into a string using UTF-8 encoding."
  },
  {
    "id": 492,
    "code": "import java.io.File\n\nfun countLinesInFile(filePath: String): Int {\n    return File(filePath).useLines { it.count() }\n}",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 493,
    "code": "fun readLinesFromFile(fileName: String): List<String> {\n    val lines = mutableListOf<String>()\n    File(fileName).useLines { lineSequence ->\n        lineSequence.forEach { lines.add(it) }\n    }\n    return lines\n}",
    "summary": "Reads all lines from a file and returns them as a list of strings."
  },
  {
    "id": 494,
    "code": "import java.io.File\n\nfun writeTextToFile(filePath: String, text: String) {\n    File(filePath).writeText(text)\n}",
    "summary": "Writes the given text to a specified file, overwriting any existing content."
  },
  {
    "id": 495,
    "code": "import java.io.File\n\nfun readFirstLineOfFile(filePath: String): String? {\n    return File(filePath).useLines { it.firstOrNull() }\n}",
    "summary": "Reads and returns the first line of a file, or null if the file is empty."
  },
  {
    "id": 496,
    "code": "fun readTextFile(filePath: String): String {\n    val file = File(filePath)\n    if (!file.exists()) {\n        throw FileNotFoundException(\"The file at path $filePath does not exist.\")\n    }\n    return file.readText()\n}",
    "summary": "Reads and returns the contents of a text file, throwing an exception if the file does not exist."
  },
  {
    "id": 497,
    "code": "import java.io.File\n\nfun readFirstLineFromFile(filePath: String): String? {\n    return File(filePath).bufferedReader().use { it.readLine() }\n}",
    "summary": "Reads and returns the first line from a specified file, or null if the file is empty."
  },
  {
    "id": 498,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).readLines()\n}",
    "summary": "Reads and returns all lines from a file as a list of strings."
  },
  {
    "id": 499,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 500,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 501,
    "code": "fun readLinesFromFile(filePath: String): List<String> {\n    val lines = mutableListOf<String>()\n    File(filePath).useLines { lineSequence ->\n        lineSequence.forEach { lines.add(it) }\n    }\n    return lines\n}",
    "summary": "Reads all lines from a file at the given path and returns them as a list of strings."
  },
  {
    "id": 502,
    "code": "fun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"Invalid file path provided.\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 503,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 504,
    "code": "fun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file at the specified path and returns them as a list of strings."
  },
  {
    "id": 505,
    "code": "fun readTextFile(filePath: String): String {\n    val file = java.io.File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readText()\n    } else {\n        throw java.io.FileNotFoundException(\"File not found or is not a valid file: $filePath\")\n    }\n}",
    "summary": "Reads the content of a text file from the specified path and returns it as a string, throwing an exception if the file does not exist."
  },
  {
    "id": 506,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).readLines()\n}",
    "summary": "Reads all lines from a file specified by its path and returns them as a list of strings."
  },
  {
    "id": 507,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by its file path and returns them as a list of strings."
  },
  {
    "id": 508,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"File does not exist or is not a regular file\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 509,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads and returns all lines from a specified file as a list of strings, or an empty list if the file doesn't exist."
  },
  {
    "id": 510,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by its path and returns them as a list of strings."
  },
  {
    "id": 511,
    "code": "import java.io.File\n\nfun readFirstLineFromFile(filePath: String): String? {\n    return File(filePath).useLines { lines -> lines.firstOrNull() }\n}",
    "summary": "Reads and returns the first line from a file given its file path, or null if the file is empty."
  },
  {
    "id": 512,
    "code": "fun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 513,
    "code": "import java.io.File\n\nfun countLinesInFile(filePath: String): Int {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"File does not exist or is not a valid file.\")\n    }\n    return file.readLines().size\n}",
    "summary": "Counts the number of lines in a file specified by the file path."
  },
  {
    "id": 514,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String>? {\n    return try {\n        File(filePath).readLines()\n    } catch (e: Exception) {\n        println(\"Error reading file: ${e.message}\")\n        null\n    }\n}",
    "summary": "This function reads all lines from a specified file and returns them as a list of strings, handling exceptions if any occur."
  },
  {
    "id": 515,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists()) {\n        throw IllegalArgumentException(\"File does not exist at path: $filePath\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads all lines from a file at a specified path and returns them as a list of strings."
  },
  {
    "id": 516,
    "code": "import java.io.File\n\nfun readFileAsLines(filePath: String): List<String> {\n    return File(filePath).readLines()\n}",
    "summary": "Reads a file from the given path and returns its content as a list of strings, each representing a line."
  },
  {
    "id": 517,
    "code": "import java.io.File\n\nfun readFileToList(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"The specified path does not point to a valid file.\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads a file from the given path and returns its content as a list of strings, with each element representing a line."
  },
  {
    "id": 518,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists()) {\n        throw IllegalArgumentException(\"File does not exist: $filePath\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 519,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists()) {\n        file.readLines()\n    } else {\n        throw FileNotFoundException(\"The file at path $filePath does not exist.\")\n    }\n}",
    "summary": "Reads all lines from a specified file, throwing an exception if the file does not exist."
  },
  {
    "id": 520,
    "code": "import java.io.File\n\nfun readTextFile(filePath: String): String {\n    return File(filePath).readText(Charsets.UTF_8)\n}",
    "summary": "Reads and returns the content of a text file specified by the file path."
  },
  {
    "id": 521,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads and returns all lines from a file as a list of strings, or an empty list if the file does not exist or is not a file."
  },
  {
    "id": 522,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 523,
    "code": "import java.io.File\n\nfun countLinesInFile(filePath: String): Int {\n    val file = File(filePath)\n    if (!file.exists()) throw IllegalArgumentException(\"File does not exist: $filePath\")\n    return file.readLines().size\n}",
    "summary": "Counts the number of lines in a specified file and returns the line count."
  },
  {
    "id": 524,
    "code": "fun readTextFile(filePath: String): String {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readText()\n    } else {\n        throw FileNotFoundException(\"File not found: $filePath\")\n    }\n}",
    "summary": "Reads and returns the content of a text file, or throws an exception if the file does not exist."
  },
  {
    "id": 525,
    "code": "import java.io.File\n\nfun countLinesInFile(filePath: String): Int {\n    return File(filePath).useLines { it.count() }\n}",
    "summary": "Counts the number of lines in a specified file and returns the count as an integer."
  },
  {
    "id": 526,
    "code": "fun readLinesFromFile(fileName: String): List<String> {\n    val lines = mutableListOf<String>()\n    File(fileName).useLines { sequence ->\n        lines.addAll(sequence.toList())\n    }\n    return lines\n}",
    "summary": "Reads all lines from a file and returns them as a list of strings."
  },
  {
    "id": 527,
    "code": "fun readLinesFromFile(filePath: String): List<String> {\n    val lines = mutableListOf<String>()\n    File(filePath).useLines { it.forEach { line -> lines.add(line) } }\n    return lines\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 528,
    "code": "import java.io.File\n\nfun readFirstLineFromFile(filePath: String): String? {\n    val file = File(filePath)\n    return if (file.exists()) {\n        file.bufferedReader().use { it.readLine() }\n    } else {\n        null\n    }\n}",
    "summary": "Reads and returns the first line from a file, or null if the file does not exist."
  },
  {
    "id": 529,
    "code": "fun readFileAsString(filePath: String): String {\n    return File(filePath).readText(Charsets.UTF_8)\n}",
    "summary": "Reads the content of a file at the specified path and returns it as a string using UTF-8 encoding."
  },
  {
    "id": 530,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 531,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists()) {\n        throw IllegalArgumentException(\"File does not exist at path: $filePath\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads all lines from a file at the specified path and returns them as a list of strings."
  },
  {
    "id": 532,
    "code": "fun readTextFile(filePath: String): String {\n    return File(filePath).bufferedReader().use { it.readText() }\n}",
    "summary": "Reads and returns the entire content of a text file as a string."
  },
  {
    "id": 533,
    "code": "import java.io.File\n\nfun readFirstLineFromFile(filePath: String): String? {\n    return File(filePath).useLines { lines -> lines.firstOrNull() }\n}",
    "summary": "Reads and returns the first line from a specified file, or null if the file is empty."
  },
  {
    "id": 534,
    "code": "fun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.canRead()) {\n        file.readLines()\n    } else {\n        throw FileNotFoundException(\"File not found or cannot be read: $filePath\")\n    }\n}",
    "summary": "Reads all lines from a file and returns them as a list of strings, throwing an exception if the file is missing or unreadable."
  },
  {
    "id": 535,
    "code": "fun readTextFile(filePath: String): String {\n    return File(filePath).bufferedReader().use { it.readText() }\n}",
    "summary": "Reads and returns the entire content of a text file specified by the file path."
  },
  {
    "id": 536,
    "code": "import java.io.File\n\nfun readTextFile(filePath: String): String {\n    return File(filePath).bufferedReader().use { it.readText() }\n}",
    "summary": "Reads and returns the entire content of a text file specified by the given file path."
  },
  {
    "id": 537,
    "code": "fun readFirstLineFromFile(filePath: String): String? {\n    return try {\n        File(filePath).bufferedReader().use { it.readLine() }\n    } catch (e: IOException) {\n        e.printStackTrace()\n        null\n    }\n}",
    "summary": "Reads and returns the first line from a file at the specified path, or null if an error occurs."
  },
  {
    "id": 538,
    "code": "import java.io.File\n\nfun readTextFile(filePath: String): String {\n    return File(filePath).useLines { lines -> \n        lines.joinToString(\"\\n\") \n    }\n}",
    "summary": "Reads a text file from the specified file path and returns its contents as a single string."
  },
  {
    "id": 539,
    "code": "import java.io.File\n\nfun writeTextToFile(filePath: String, text: String) {\n    val file = File(filePath)\n    file.writeText(text)\n}",
    "summary": "Writes the specified text to a file at the given file path."
  },
  {
    "id": 540,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists()) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a file at the specified path and returns them as a list of strings."
  },
  {
    "id": 541,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists()) {\n        throw IllegalArgumentException(\"File does not exist: $filePath\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads and returns all lines from a file given its file path, throwing an exception if the file does not exist."
  },
  {
    "id": 542,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"Invalid file path provided.\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 543,
    "code": "import java.io.File\n\nfun countLinesInFile(filePath: String): Int {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"The provided path is not a valid file.\")\n    }\n    return file.useLines { it.count() }\n}",
    "summary": "This function counts the number of lines in a given file specified by its file path."
  },
  {
    "id": 544,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file at the specified path and returns them as a list of strings."
  },
  {
    "id": 545,
    "code": "import java.io.File\n\nfun readFirstLineFromFile(filePath: String): String? {\n    return File(filePath).useLines { it.firstOrNull() }\n}",
    "summary": "Reads and returns the first line from a file at the specified path, or null if the file is empty."
  },
  {
    "id": 546,
    "code": "import java.io.File\nimport java.io.IOException\n\nfun readFirstLineFromFile(filePath: String): String? {\n    return try {\n        File(filePath).useLines { lines -> lines.firstOrNull() }\n    } catch (e: IOException) {\n        println(\"Error reading file: ${e.message}\")\n        null\n    }\n}",
    "summary": "Reads and returns the first line from a file specified by the given file path, or null if an error occurs."
  },
  {
    "id": 547,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 548,
    "code": "import java.io.File\n\nfun readTextFile(filePath: String): String {\n    return File(filePath).useLines { lines -> lines.joinToString(\"\\n\") }\n}",
    "summary": "Reads and returns the contents of a text file as a single string."
  },
  {
    "id": 549,
    "code": "import java.io.File\n\nfun countLinesInFile(filePath: String): Int {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"Invalid file path: $filePath\")\n    }\n    return file.useLines { it.count() }\n}",
    "summary": "Counts the number of lines in a specified file and returns the total line count."
  },
  {
    "id": 550,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists()) {\n        throw IllegalArgumentException(\"File does not exist: $filePath\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 551,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "This function reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 552,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        throw IllegalArgumentException(\"Invalid file path: $filePath\")\n    }\n}",
    "summary": "This function reads all lines from a file at the specified path and returns them as a list of strings."
  },
  {
    "id": 553,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"File not found or is not a file: $filePath\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 554,
    "code": "fun readTextFile(filePath: String): String {\n    return File(filePath).bufferedReader().use { it.readText() }\n}",
    "summary": "Reads the entire content of a text file specified by the file path and returns it as a string."
  },
  {
    "id": 555,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 556,
    "code": "fun readFileAsString(filePath: String): String {\n    return File(filePath).readText()\n}",
    "summary": "Reads the entire content of a file specified by its path into a single string."
  },
  {
    "id": 557,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by its file path and returns them as a list of strings."
  },
  {
    "id": 558,
    "code": "fun readLinesFromFile(fileName: String): List<String> {\n    val file = File(fileName)\n    return if (file.exists()) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a file into a list of strings, returning an empty list if the file does not exist."
  },
  {
    "id": 559,
    "code": "import java.io.File\n\nfun readFirstLine(filePath: String): String? {\n    return try {\n        File(filePath).bufferedReader().use { it.readLine() }\n    } catch (e: Exception) {\n        null\n    }\n}",
    "summary": "This function reads and returns the first line of a file specified by the given file path, or returns null if an error occurs."
  },
  {
    "id": 560,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        throw IllegalArgumentException(\"File not found or is not a valid file.\")\n    }\n}",
    "summary": "Reads and returns all lines from a specified file as a list of strings."
  },
  {
    "id": 561,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by the given file path into a list of strings."
  },
  {
    "id": 562,
    "code": "import java.io.File\n\nfun readFirstLineFromFile(filePath: String): String? {\n    return File(filePath).bufferedReader().use { it.readLine() }\n}",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 563,
    "code": "import java.io.File\n\nfun countWordsInFile(filePath: String): Int {\n    val file = File(filePath)\n    if (!file.exists()) return 0\n    \n    return file.readLines()\n        .flatMap { it.split(\"\\\\s+\".toRegex()) }\n        .filter { it.isNotBlank() }\n        .count()\n}",
    "summary": "Counts the number of words in a specified file, returning zero if the file does not exist."
  },
  {
    "id": 564,
    "code": "fun readFileLines(filePath: String): List<String> {\n    return try {\n        File(filePath).readLines()\n    } catch (e: IOException) {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a file specified by filePath and returns them as a list of strings, or an empty list if an error occurs."
  },
  {
    "id": 565,
    "code": "import java.io.File\nimport java.io.IOException\n\nfun readFileLines(filePath: String): List<String>? {\n    return try {\n        File(filePath).readLines()\n    } catch (e: IOException) {\n        e.printStackTrace()\n        null\n    }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings, handling I/O exceptions."
  },
  {
    "id": 566,
    "code": "fun readFileAsString(filePath: String): String {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readText()\n    } else {\n        throw FileNotFoundException(\"File not found: $filePath\")\n    }\n}",
    "summary": "Reads the entire content of a file as a string, throwing an exception if the file does not exist."
  },
  {
    "id": 567,
    "code": "fun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file and returns them as a list of strings."
  },
  {
    "id": 568,
    "code": "import java.io.File\n\nfun readTextFile(filePath: String): String? {\n    return try {\n        File(filePath).readText()\n    } catch (e: Exception) {\n        e.printStackTrace()\n        null\n    }\n}",
    "summary": "This function reads the entire content of a text file specified by its path and returns it as a String, handling any exceptions by printing the stack trace and returning null."
  },
  {
    "id": 569,
    "code": "fun readFileLines(filePath: String): List<String>? {\n    return try {\n        val file = java.io.File(filePath)\n        file.readLines()\n    } catch (e: Exception) {\n        println(\"Error reading file: ${e.message}\")\n        null\n    }\n}",
    "summary": "Reads and returns all lines from a file as a list of strings, or null if an error occurs."
  },
  {
    "id": 570,
    "code": "import java.io.File\nimport java.io.IOException\n\nfun writeFile(filePath: String, content: String) {\n    try {\n        File(filePath).writeText(content)\n    } catch (e: IOException) {\n        println(\"An error occurred: ${e.message}\")\n    }\n}",
    "summary": "Writes the given content to a file at the specified path, handling any IO exceptions."
  },
  {
    "id": 571,
    "code": "fun readTextFile(filePath: String): String {\n    return File(filePath).bufferedReader().use { it.readText() }\n}",
    "summary": "Reads and returns the entire content of a text file as a String using buffered reading."
  },
  {
    "id": 572,
    "code": "import java.io.File\n\nfun readFirstLineOfFile(filePath: String): String? {\n    return try {\n        File(filePath).useLines { it.firstOrNull() }\n    } catch (e: Exception) {\n        null\n    }\n}",
    "summary": "Reads and returns the first line of a file specified by the file path, or null if an error occurs."
  },
  {
    "id": 573,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 574,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 575,
    "code": "import java.io.File\n\nfun readFirstLine(filePath: String): String? {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.useLines { it.firstOrNull() }\n    } else {\n        null\n    }\n}",
    "summary": "Reads and returns the first line of a file, or null if the file does not exist or is not a valid file."
  },
  {
    "id": 576,
    "code": "import java.io.File\n\nfun readTextFile(filePath: String): String {\n    return File(filePath).bufferedReader().use { it.readText() }\n}",
    "summary": "Reads the entire content of a text file specified by the file path and returns it as a String."
  },
  {
    "id": 577,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"Invalid file path: $filePath\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads and returns all lines from a file specified by the given file path."
  },
  {
    "id": 578,
    "code": "import java.io.File\n\nfun readTextFile(filePath: String): String {\n    return File(filePath).bufferedReader().use { it.readText() }\n}",
    "summary": "Reads the entire content of a text file specified by the file path and returns it as a String."
  },
  {
    "id": 579,
    "code": "fun readFileLines(fileName: String): List<String> {\n    return File(fileName).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file and returns them as a list of strings."
  },
  {
    "id": 580,
    "code": "fun readFileAsString(filePath: String): String {\n    return File(filePath).readText(Charsets.UTF_8)\n}",
    "summary": "Reads the entire content of a file specified by the file path as a UTF-8 string."
  },
  {
    "id": 581,
    "code": "import java.io.File\n\nfun readFileToString(filePath: String): String {\n    return File(filePath).readText()\n}",
    "summary": "Reads the entire content of a file specified by the file path into a string."
  },
  {
    "id": 582,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists()) {\n        file.readLines()\n    } else {\n        throw IllegalArgumentException(\"File not found: $filePath\")\n    }\n}",
    "summary": "Reads all lines from a specified file into a list of strings, throwing an exception if the file does not exist."
  },
  {
    "id": 583,
    "code": "import java.io.File\n\nfun countLinesInFile(filePath: String): Int {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"File not found or is not a file: $filePath\")\n    }\n    return file.useLines { it.count() }\n}",
    "summary": "Counts the number of lines in a specified file and returns the total line count."
  },
  {
    "id": 584,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 585,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"Invalid file path: $filePath\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 586,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists()) throw IllegalArgumentException(\"File does not exist: $filePath\")\n    return file.readLines()\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 587,
    "code": "fun readFirstLineFromFile(fileName: String): String? {\n    return try {\n        File(fileName).bufferedReader().use { it.readLine() }\n    } catch (e: IOException) {\n        println(\"Error reading file: ${e.message}\")\n        null\n    }\n}",
    "summary": "Reads and returns the first line from the specified file, handling any I/O exceptions."
  },
  {
    "id": 588,
    "code": "import java.io.File\n\nfun countLinesInFile(filePath: String): Int {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"File does not exist or is not a valid file.\")\n    }\n    return file.useLines { it.count() }\n}",
    "summary": "This function counts the number of lines in a specified file, throwing an exception if the file is invalid."
  },
  {
    "id": 589,
    "code": "import java.io.File\nimport java.io.IOException\n\nfun readFirstLineFromFile(filePath: String): String? {\n    return try {\n        File(filePath).useLines { it.firstOrNull() }\n    } catch (e: IOException) {\n        println(\"Error reading file: ${e.message}\")\n        null\n    }\n}",
    "summary": "Reads and returns the first line from a file at the specified path, handling any IO exceptions."
  },
  {
    "id": 590,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        throw IllegalArgumentException(\"File not found or is not a valid file: $filePath\")\n    }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 591,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 592,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return try {\n        File(filePath).readLines()\n    } catch (e: Exception) {\n        emptyList()\n    }\n}",
    "summary": "Reads and returns all lines from a file as a list of strings, or an empty list if an error occurs."
  },
  {
    "id": 593,
    "code": "import java.io.File\n\nfun readFirstLineFromFile(filePath: String): String? {\n    return File(filePath).useLines { lines -> lines.firstOrNull() }\n}",
    "summary": "Reads and returns the first line from a specified file, or null if the file is empty."
  },
  {
    "id": 594,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 595,
    "code": "import java.io.File\n\nfun readFirstLineOfFile(filePath: String): String? {\n    return File(filePath).useLines { it.firstOrNull() }\n}",
    "summary": "Reads and returns the first line of a file located at the specified file path, or null if the file is empty."
  },
  {
    "id": 596,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists()) {\n        throw IllegalArgumentException(\"File not found: $filePath\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads all lines from a file at the specified path and returns them as a list of strings, throwing an error if the file does not exist."
  },
  {
    "id": 597,
    "code": "fun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file at the specified path and returns them as a list of strings."
  },
  {
    "id": 598,
    "code": "import java.io.File\n\nfun countLinesInFile(filePath: String): Int {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"Invalid file path: $filePath\")\n    }\n    return file.readLines().size\n}",
    "summary": "Counts the number of lines in a specified file and returns the count."
  },
  {
    "id": 599,
    "code": "fun readTextFile(filePath: String): String {\n    return File(filePath).useLines { lines -> lines.joinToString(\"\\n\") }\n}",
    "summary": "Reads a text file from the given path and returns its content as a single string."
  },
  {
    "id": 600,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists()) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a file at the given path and returns them as a list of strings."
  },
  {
    "id": 601,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads a file from the specified path and returns its contents as a list of strings, each representing a line."
  },
  {
    "id": 602,
    "code": "import java.io.File\nimport java.io.IOException\n\nfun readFileLines(filePath: String): List<String> {\n    try {\n        return File(filePath).readLines()\n    } catch (e: IOException) {\n        println(\"Error reading file: ${e.message}\")\n        return emptyList()\n    }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings, handling IO exceptions."
  },
  {
    "id": 603,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a file at the specified path and returns them as a list of strings."
  },
  {
    "id": 604,
    "code": "fun readFileAsString(filePath: String): String {\n    return File(filePath).readText(Charsets.UTF_8)\n}",
    "summary": "Reads the content of a file specified by its path into a string using UTF-8 encoding."
  },
  {
    "id": 605,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"Invalid file path: $filePath\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 606,
    "code": "fun readTextFile(filePath: String): String {\n    return File(filePath).useLines { lines -> lines.joinToString(\"\\n\") }\n}",
    "summary": "Reads a text file from the specified path and returns its content as a single string."
  },
  {
    "id": 607,
    "code": "fun readFileAsString(filePath: String): String {\n    return File(filePath).bufferedReader().use { it.readText() }\n}",
    "summary": "Reads the entire content of a file specified by its path into a string."
  },
  {
    "id": 608,
    "code": "import java.io.File\n\nfun readFileAsLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads a file from the given path and returns its content as a list of lines."
  },
  {
    "id": 609,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "This function reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 610,
    "code": "import java.io.File\n\nfun readFirstLineFromFile(filePath: String): String? {\n    return try {\n        File(filePath).useLines { it.firstOrNull() }\n    } catch (e: Exception) {\n        null\n    }\n}",
    "summary": "Reads and returns the first line from a specified file, or null if an error occurs."
  },
  {
    "id": 611,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists()) {\n        throw IllegalArgumentException(\"File does not exist: $filePath\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads and returns all lines from a file given its path, throwing an exception if the file does not exist."
  },
  {
    "id": 612,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads and returns all lines from a file as a list of strings."
  },
  {
    "id": 613,
    "code": "import java.io.File\nimport java.io.IOException\n\n@Throws(IOException::class)\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"The provided path does not point to a valid file.\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 614,
    "code": "import java.io.File\nimport java.io.IOException\n\n@Throws(IOException::class)\nfun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists()) {\n        throw IOException(\"File does not exist at path: $filePath\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads and returns all lines from a file specified by its path, throwing an exception if the file does not exist."
  },
  {
    "id": 615,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings, or an empty list if the file doesn't exist."
  },
  {
    "id": 616,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads and returns all lines from a specified file as a list of strings."
  },
  {
    "id": 617,
    "code": "import java.io.File\n\nfun readTextFile(filePath: String): String {\n    return File(filePath).bufferedReader().use { it.readText() }\n}",
    "summary": "Reads and returns the entire content of a text file as a string from the specified file path."
  },
  {
    "id": 618,
    "code": "import java.io.File\n\nfun readTextFile(filePath: String): String {\n    return File(filePath).useLines { lines -> \n        lines.joinToString(separator = \"\\n\") \n    }\n}",
    "summary": "Reads the contents of a text file and returns it as a single string."
  },
  {
    "id": 619,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a file at the specified path and returns them as a list of strings."
  },
  {
    "id": 620,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a file at the specified path and returns them as a list of strings."
  },
  {
    "id": 621,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"The provided path is not a valid file\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads and returns all lines from a specified file as a list of strings."
  },
  {
    "id": 622,
    "code": "fun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists()) {\n        throw FileNotFoundException(\"The file at path $filePath does not exist.\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads and returns all lines from a file at the specified path, or throws an exception if the file does not exist."
  },
  {
    "id": 623,
    "code": "import java.io.File\n\nfun readFirstLineFromFile(filePath: String): String? {\n    val file = File(filePath)\n    return if (file.exists() && file.canRead()) {\n        file.useLines { it.firstOrNull() }\n    } else {\n        null\n    }\n}",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 624,
    "code": "import java.io.File\n\nfun readFirstLineFromFile(filePath: String): String? {\n    return File(filePath).useLines { it.firstOrNull() }\n}",
    "summary": "Reads and returns the first line from a file at the specified path, or null if the file is empty."
  },
  {
    "id": 625,
    "code": "import java.io.File\n\nfun readFirstLineOfFile(filePath: String): String? {\n    return File(filePath).bufferedReader().use { it.readLine() }\n}",
    "summary": "Reads and returns the first line of a file specified by the file path, or null if the file is empty."
  },
  {
    "id": 626,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists()) {\n        throw FileNotFoundException(\"File not found at path: $filePath\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 627,
    "code": "import java.io.File\n\nfun readFileAsString(filePath: String): String {\n    return File(filePath).readText()\n}",
    "summary": "Reads the entire content of a file specified by the file path and returns it as a String."
  },
  {
    "id": 628,
    "code": "import java.io.File\n\nfun readTextFile(filePath: String): String {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readText()\n    } else {\n        throw IllegalArgumentException(\"File does not exist or is not a valid file.\")\n    }\n}",
    "summary": "Reads and returns the content of a text file given a valid file path or throws an exception if the file is invalid."
  },
  {
    "id": 629,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 630,
    "code": "fun readTextFile(filePath: String): String {\n    return try {\n        File(filePath).readText()\n    } catch (e: IOException) {\n        \"Error reading file: ${e.message}\"\n    }\n}",
    "summary": "This function reads the contents of a text file from a given path and returns it as a string, handling IO exceptions gracefully."
  },
  {
    "id": 631,
    "code": "fun readLinesFromFile(filePath: String): List<String> {\n    val lines = mutableListOf<String>()\n    File(filePath).useLines { it.forEach { line -> lines.add(line) } }\n    return lines\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 632,
    "code": "import java.io.File\n\nfun countLinesInFile(filePath: String): Int {\n    val file = File(filePath)\n    if (!file.exists()) throw IllegalArgumentException(\"File does not exist: $filePath\")\n    return file.useLines { it.count() }\n}",
    "summary": "Counts the number of lines in a file and returns the count, throwing an exception if the file does not exist."
  },
  {
    "id": 633,
    "code": "fun readTextFile(filePath: String): String {\n    return File(filePath).bufferedReader().use { it.readText() }\n}",
    "summary": "Reads the entire content of a text file and returns it as a string."
  },
  {
    "id": 634,
    "code": "fun readLinesFromFile(filePath: String): List<String> {\n    val file = java.io.File(filePath)\n    return if (file.exists()) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings, or an empty list if the file does not exist."
  },
  {
    "id": 635,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings, or an empty list if the file does not exist."
  },
  {
    "id": 636,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        throw IllegalArgumentException(\"File not found or is not a valid file\")\n    }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 637,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.canRead()) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "This function reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 638,
    "code": "fun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "This function reads a file from the given path and returns its contents as a list of strings, each representing a line."
  },
  {
    "id": 639,
    "code": "fun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 640,
    "code": "import java.io.File\n\nfun countWordsInFile(filePath: String): Int {\n    val file = File(filePath)\n    if (!file.exists()) {\n        throw IllegalArgumentException(\"File not found: $filePath\")\n    }\n    return file.readLines()\n        .flatMap { it.split(\"\\\\s+\".toRegex()) }\n        .filter { it.isNotEmpty() }\n        .size\n}",
    "summary": "Counts and returns the number of words in a specified file."
  },
  {
    "id": 641,
    "code": "fun readTextFile(filePath: String): String {\n    return try {\n        File(filePath).readText(Charsets.UTF_8)\n    } catch (e: IOException) {\n        e.printStackTrace()\n        \"\"\n    }\n}",
    "summary": "Reads the entire content of a text file specified by the file path and returns it as a string."
  },
  {
    "id": 642,
    "code": "import java.io.File\nimport java.io.IOException\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return try {\n        File(filePath).readLines()\n    } catch (e: IOException) {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings, or an empty list if an IOException occurs."
  },
  {
    "id": 643,
    "code": "import java.io.File\n\nfun readFirstLineFromFile(filePath: String): String? {\n    return File(filePath).useLines { it.firstOrNull() }\n}",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 644,
    "code": "import java.io.File\n\nfun readFirstLineFromFile(filePath: String): String? {\n    return File(filePath).bufferedReader().use { it.readLine() }\n}",
    "summary": "Reads and returns the first line from a file specified by the file path."
  },
  {
    "id": 645,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 646,
    "code": "fun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists() || !file.canRead()) {\n        throw FileNotFoundException(\"The file at $filePath cannot be found or read.\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 647,
    "code": "import java.io.File\n\nfun readLinesFromFile(fileName: String): List<String> {\n    val file = File(fileName)\n    return if (file.exists()) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads and returns all lines from a file as a list of strings, or an empty list if the file does not exist."
  },
  {
    "id": 648,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads and returns all lines from a file as a list of strings."
  },
  {
    "id": 649,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        throw IllegalArgumentException(\"File not found or is not a regular file.\")\n    }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 650,
    "code": "import java.io.File\n\nfun readFileAsString(filePath: String): String {\n    return File(filePath).readText(Charsets.UTF_8)\n}",
    "summary": "Reads the entire content of a file specified by the file path and returns it as a UTF-8 encoded string."
  },
  {
    "id": 651,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        throw IllegalArgumentException(\"The file path provided is invalid or does not exist.\")\n    }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 652,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file and returns them as a list of strings."
  },
  {
    "id": 653,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return try {\n        File(filePath).readLines()\n    } catch (e: Exception) {\n        emptyList()\n    }\n}",
    "summary": "This function reads all lines from a file given its path and returns them as a list of strings, returning an empty list if an error occurs."
  },
  {
    "id": 654,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists()) {\n        throw IllegalArgumentException(\"File does not exist: $filePath\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 655,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 656,
    "code": "fun readLinesFromFile(filePath: String): List<String>? {\n    return try {\n        File(filePath).readLines()\n    } catch (e: IOException) {\n        e.printStackTrace()\n        null\n    }\n}",
    "summary": "Reads and returns all lines from a specified file as a list of strings, handling any IOExceptions by printing the stack trace and returning null."
  },
  {
    "id": 657,
    "code": "fun readTextFile(filePath: String): String? {\n    val file = java.io.File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readText(Charsets.UTF_8)\n    } else {\n        null\n    }\n}",
    "summary": "Reads and returns the content of a text file as a string, or null if the file does not exist."
  },
  {
    "id": 658,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 659,
    "code": "import java.io.File\n\nfun readFirstLineOfFile(filePath: String): String? {\n    return try {\n        File(filePath).bufferedReader().use { it.readLine() }\n    } catch (e: Exception) {\n        null\n    }\n}",
    "summary": "Reads and returns the first line from a specified file, returning null if an error occurs."
  },
  {
    "id": 660,
    "code": "import java.io.File\n\nfun countLinesInFile(filePath: String): Int {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"The specified path does not point to a valid file.\")\n    }\n\n    return file.useLines { it.count() }\n}",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 661,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists() || !file.isFile) {\n        throw IllegalArgumentException(\"Invalid file path.\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 662,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        throw IllegalArgumentException(\"File does not exist or is not a valid file\")\n    }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 663,
    "code": "import java.io.File\n\nfun readTextFile(filePath: String): String {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readText()\n    } else {\n        throw IllegalArgumentException(\"File not found or is not a valid file\")\n    }\n}",
    "summary": "Reads the content of a text file from the specified path and returns it as a string."
  },
  {
    "id": 664,
    "code": "import java.io.File\n\nfun readFileToList(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads a file from the given path and returns its contents as a list of strings, or an empty list if the file does not exist."
  },
  {
    "id": 665,
    "code": "import java.io.File\n\nfun readTextFile(filePath: String): String {\n    return File(filePath).useLines { it.joinToString(\"\\n\") }\n}",
    "summary": "Reads a text file from the given file path and returns its content as a single string."
  },
  {
    "id": 666,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        throw IllegalArgumentException(\"Provided path is not a valid file: $filePath\")\n    }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 667,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 668,
    "code": "fun readLinesFromFile(filePath: String): List<String> {\n    val lines = mutableListOf<String>()\n    File(filePath).useLines { it.forEach { line -> lines.add(line) } }\n    return lines\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 669,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists()) {\n        throw IllegalArgumentException(\"File not found at the specified path\")\n    }\n    return file.readLines()\n}",
    "summary": "Reads all lines from a file at the specified path and returns them as a list of strings."
  },
  {
    "id": 670,
    "code": "fun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads a file from the given path and returns its content as a list of strings, each representing a line."
  },
  {
    "id": 671,
    "code": "import java.io.File\n\nfun readFileAsLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads a file from the specified path and returns its contents as a list of strings, where each string represents a line."
  },
  {
    "id": 672,
    "code": "import java.io.File\n\nfun readFirstLineFromFile(filePath: String): String? {\n    return try {\n        File(filePath).useLines { it.firstOrNull() }\n    } catch (e: Exception) {\n        e.printStackTrace()\n        null\n    }\n}",
    "summary": "Reads and returns the first line from a file specified by the file path, handling exceptions if they occur."
  },
  {
    "id": 673,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "This function reads all lines from a file given its path and returns them as a list of strings."
  },
  {
    "id": 674,
    "code": "import java.io.File\n\nfun readFirstLineFromFile(filePath: String): String? {\n    return try {\n        File(filePath).bufferedReader().use { it.readLine() }\n    } catch (e: Exception) {\n        e.printStackTrace()\n        null\n    }\n}",
    "summary": "Reads and returns the first line from a file at the specified path, or null if an error occurs."
  },
  {
    "id": 675,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings, or an empty list if the file doesn't exist."
  },
  {
    "id": 676,
    "code": "import java.io.File\n\nfun readFileAsString(filePath: String): String {\n    return File(filePath).readText(Charsets.UTF_8)\n}",
    "summary": "Reads the entire content of a file specified by its path into a string using UTF-8 encoding."
  },
  {
    "id": 677,
    "code": "import java.io.File\n\nfun readFileAsLines(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        throw IllegalArgumentException(\"The specified file does not exist or is not a file: $filePath\")\n    }\n}",
    "summary": "Reads a file from the given path and returns its contents as a list of strings, throwing an exception if the file is invalid."
  },
  {
    "id": 678,
    "code": "fun readLinesFromFile(fileName: String): List<String> {\n    val lines = mutableListOf<String>()\n    File(fileName).useLines { sequence ->\n        sequence.forEach { line ->\n            lines.add(line.trim())\n        }\n    }\n    return lines\n}",
    "summary": "Reads all lines from a file, trims whitespace, and returns them as a list of strings."
  },
  {
    "id": 679,
    "code": "fun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file at the specified path and returns them as a list of strings."
  },
  {
    "id": 680,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 681,
    "code": "import java.io.File\nimport java.io.IOException\n\nfun readFileLines(filePath: String): List<String> {\n    return try {\n        File(filePath).readLines()\n    } catch (e: IOException) {\n        println(\"Error reading file: ${e.message}\")\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a file at the specified path, handling any IOExceptions and returning an empty list if an error occurs."
  },
  {
    "id": 682,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads all lines from a file and returns them as a list of strings, or an empty list if the file doesn't exist."
  },
  {
    "id": 683,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        throw IllegalArgumentException(\"File does not exist or is not a regular file\")\n    }\n}",
    "summary": "Reads all lines from a file at the given path and returns them as a list of strings."
  },
  {
    "id": 684,
    "code": "import java.io.File\n\nfun readTextFile(filePath: String): String? {\n    return try {\n        File(filePath).readText()\n    } catch (e: Exception) {\n        null\n    }\n}",
    "summary": "Reads the entire content of a text file specified by its path, returning it as a string, or null if an error occurs."
  },
  {
    "id": 685,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        throw IllegalArgumentException(\"File does not exist or is not a regular file.\")\n    }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings, throwing an exception if the file does not exist or is not a regular file."
  },
  {
    "id": 686,
    "code": "import java.io.File\nimport java.io.IOException\n\nfun readFileToString(filePath: String): String? {\n    return try {\n        File(filePath).readText()\n    } catch (e: IOException) {\n        println(\"Error reading file: ${e.message}\")\n        null\n    }\n}",
    "summary": "Reads the entire content of a file located at the given path into a string, handling IO exceptions."
  },
  {
    "id": 687,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file at the given path and returns them as a list of strings."
  },
  {
    "id": 688,
    "code": "import java.io.File\n\nfun readFirstLine(filePath: String): String? {\n    return File(filePath).useLines { lines -> lines.firstOrNull() }\n}",
    "summary": "Reads and returns the first line from a file, or null if the file is empty."
  },
  {
    "id": 689,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads a file line by line and returns a list of strings containing each line."
  },
  {
    "id": 690,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists()) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads and returns all lines from a file as a list of strings, or an empty list if the file does not exist."
  },
  {
    "id": 691,
    "code": "fun readFirstLineFromFile(filePath: String): String? {\n    return try {\n        File(filePath).useLines { lines -> lines.firstOrNull() }\n    } catch (e: IOException) {\n        println(\"An error occurred: ${e.message}\")\n        null\n    }\n}",
    "summary": "Reads and returns the first line from a specified file, handling any IOExceptions."
  },
  {
    "id": 692,
    "code": "fun readFileLines(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by the file path into a list of strings."
  },
  {
    "id": 693,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file located at the specified path into a list of strings."
  },
  {
    "id": 694,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.readLines()\n    } else {\n        emptyList()\n    }\n}",
    "summary": "Reads and returns all lines from a file as a list of strings, or an empty list if the file does not exist."
  },
  {
    "id": 695,
    "code": "import java.io.File\n\nfun readFirstLineOfFile(filePath: String): String? {\n    val file = File(filePath)\n    return if (file.exists() && file.isFile) {\n        file.bufferedReader().use { it.readLine() }\n    } else {\n        null\n    }\n}",
    "summary": "Reads and returns the first line of a file specified by the file path, or null if the file does not exist."
  },
  {
    "id": 696,
    "code": "import java.io.File\n\nfun readFileLines(filePath: String): List<String> {\n    return File(filePath).readLines()\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 697,
    "code": "import java.io.File\n\nfun readFirstLineFromFile(filePath: String): String? {\n    return File(filePath).useLines { it.firstOrNull() }\n}",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 698,
    "code": "import java.io.File\nimport java.io.IOException\n\nfun readLinesFromFile(filePath: String): List<String> {\n    val lines = mutableListOf<String>()\n    try {\n        File(filePath).useLines { it.forEach { line -> lines.add(line) } }\n    } catch (e: IOException) {\n        println(\"Error reading file: ${e.message}\")\n    }\n    return lines\n}",
    "summary": "This function reads all lines from a file specified by 'filePath' and returns them as a list of strings, handling any IOExceptions."
  },
  {
    "id": 699,
    "code": "fun readLinesFromFile(filePath: String): List<String> {\n    val file = File(filePath)\n    if (!file.exists()) {\n        throw FileNotFoundException(\"File at $filePath does not exist.\")\n    }\n    return file.useLines { it.toList() }\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 700,
    "code": "import java.io.File\n\nfun readLinesFromFile(filePath: String): List<String> {\n    return File(filePath).useLines { it.toList() }\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  }
]