[
  {
    "id": 1,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 2,
    "code": "public static List<String> readLinesFromFile(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            lines.add(line);\n        }\n    }\n    return lines;\n}",
    "summary": "This function reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 3,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 4,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 5,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 6,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContent(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "This function reads the contents of a file specified by `filePath` and returns it as a single string."
  },
  {
    "id": 7,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a file specified by its path."
  },
  {
    "id": 8,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a file specified by the file path."
  },
  {
    "id": 9,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String currentLine;\n        while ((currentLine = br.readLine()) != null) {\n            contentBuilder.append(currentLine).append(\"\\n\");\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by the file path into a single string, handling IO exceptions."
  },
  {
    "id": 10,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "This function reads a file line by line and prints each line to the console."
  },
  {
    "id": 11,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileAsString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            contentBuilder.append(line).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by its path into a single string."
  },
  {
    "id": 12,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 13,
    "code": "```java\npublic static List<String> readLinesFromFile(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            lines.add(line);\n        }\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file and returns them as a list of strings."
  },
  {
    "id": 14,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by the file path into a single string."
  },
  {
    "id": 15,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 16,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a text file specified by the file path."
  },
  {
    "id": 17,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class FileProcessor {\n    public static String readFirstLine(String filePath) throws IOException {\n        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n            return reader.readLine();\n        }\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 18,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "Reads the first line of a file specified by the given file path."
  },
  {
    "id": 19,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a buffered reader."
  },
  {
    "id": 20,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 21,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line of a text file specified by the given file path."
  },
  {
    "id": 22,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 23,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a text file specified by the file path."
  },
  {
    "id": 24,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a buffered reader."
  },
  {
    "id": 25,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 26,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 27,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 28,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void readFileAndPrintLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads a file line by line from the specified path and prints each line to the console."
  },
  {
    "id": 29,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(\"\\n\");\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire contents of a file specified by `filePath` into a single string."
  },
  {
    "id": 30,
    "code": "```java\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\n\npublic void appendTextToFile(Path filePath, String text) throws IOException {\n    Files.write(filePath, text.getBytes(), StandardOpenOption.APPEND, StandardOpenOption.CREATE);\n}\n```",
    "summary": "Appends the specified text to a file, creating the file if it does not exist."
  },
  {
    "id": 31,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 32,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 33,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line of a text file specified by its file path."
  },
  {
    "id": 34,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Prints each line of a specified file to the console."
  },
  {
    "id": 35,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            contentBuilder.append(line).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "This function reads the contents of a file specified by the file path into a single string."
  },
  {
    "id": 36,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContent(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString().trim();\n}\n```",
    "summary": "Reads the entire content of a file specified by `filePath` and returns it as a single string."
  },
  {
    "id": 37,
    "code": "```java\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.List;\n\npublic static List<String> readFileLines(String filePath) throws IOException {\n    return Files.readAllLines(Paths.get(filePath));\n}\n```",
    "summary": "Reads all lines from a file specified by the given file path and returns them as a list of strings."
  },
  {
    "id": 38,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "Reads and prints each line of a file specified by its file path."
  },
  {
    "id": 39,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String currentLine;\n        while ((currentLine = br.readLine()) != null) {\n            contentBuilder.append(currentLine).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads the entire content of a file into a single String, appending system-specific line separators."
  },
  {
    "id": 40,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file given its file path."
  },
  {
    "id": 41,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using BufferedReader."
  },
  {
    "id": 42,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 43,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a buffered reader."
  },
  {
    "id": 44,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "Reads and returns the first line from a file given its file path."
  },
  {
    "id": 45,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "This function reads and returns the first line from a file specified by its file path."
  },
  {
    "id": 46,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line of a file specified by its file path."
  },
  {
    "id": 47,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a buffered reader."
  },
  {
    "id": 48,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line of a file given its file path."
  },
  {
    "id": 49,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 50,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file path."
  },
  {
    "id": 51,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 52,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 53,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "This function prints each line of a file specified by the file path to the console."
  },
  {
    "id": 54,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the file path."
  },
  {
    "id": 55,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 56,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            contentBuilder.append(line).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "This function reads a file from a given file path and returns its entire content as a single string."
  },
  {
    "id": 57,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file path using buffered reading."
  },
  {
    "id": 58,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "This function reads a file line by line from a given path and prints each line to the console."
  },
  {
    "id": 59,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLinesContaining(String filePath, String keyword) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            if (line.contains(keyword)) {\n                System.out.println(line);\n            }\n        }\n    }\n}\n```",
    "summary": "This function reads a file line by line and prints lines that contain a specified keyword."
  },
  {
    "id": 60,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 61,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line of a text file specified by the file path."
  },
  {
    "id": 62,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileIntoString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String currentLine;\n        while ((currentLine = br.readLine()) != null) {\n            contentBuilder.append(currentLine).append(\"\\n\");\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads a file from the specified path and returns its content as a single string."
  },
  {
    "id": 63,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads and prints each line of a file specified by the file path."
  },
  {
    "id": 64,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 65,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the file path."
  },
  {
    "id": 66,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 67,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 68,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire contents of a text file specified by filePath into a single string."
  },
  {
    "id": 69,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 70,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 71,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 72,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void countLinesInFile(String filePath) {\n    int lineCount = 0;\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        while (reader.readLine() != null) {\n            lineCount++;\n        }\n    } catch (IOException e) {\n        System.err.println(\"An error occurred while reading the file: \" + e.getMessage());\n    }\n    System.out.println(\"Total number of lines: \" + lineCount);\n}\n```",
    "summary": "This function counts and prints the number of lines in a specified file."
  },
  {
    "id": 73,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 74,
    "code": "```java\nimport java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic void writeLinesToFile(String filePath, String[] lines) throws IOException {\n    try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {\n        for (String line : lines) {\n            writer.write(line);\n            writer.newLine();\n        }\n    }\n}\n```",
    "summary": "Writes an array of strings to a specified file, with each string on a new line."
  },
  {
    "id": 75,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire contents of a file specified by the file path into a single string, including line separators."
  },
  {
    "id": 76,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 77,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a file specified by its file path."
  },
  {
    "id": 78,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 79,
    "code": "```java\nimport java.io.*;\n\npublic static void copyFile(String sourcePath, String destinationPath) throws IOException {\n    try (InputStream inputStream = new FileInputStream(sourcePath);\n         OutputStream outputStream = new FileOutputStream(destinationPath)) {\n        byte[] buffer = new byte[1024];\n        int bytesRead;\n        while ((bytesRead = inputStream.read(buffer)) != -1) {\n            outputStream.write(buffer, 0, bytesRead);\n        }\n    }\n}\n```",
    "summary": "This function copies the contents of a file from a specified source path to a destination path using buffered streams."
  },
  {
    "id": 80,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a text file specified by the given file path."
  },
  {
    "id": 81,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 82,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class FileProcessor {\n    public static String readFirstLine(String filePath) throws IOException {\n        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n            return reader.readLine();\n        }\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 83,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 84,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 85,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void readFileAndPrintLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads a file line by line from the specified path and prints each line to the console."
  },
  {
    "id": 86,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a file specified by the file path."
  },
  {
    "id": 87,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}",
    "summary": "This function reads a file line by line and prints each line to the console."
  },
  {
    "id": 88,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 89,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            contentBuilder.append(line).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads a file from the specified path and returns its contents as a single string."
  },
  {
    "id": 90,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads the first line from a specified file and returns it as a string."
  },
  {
    "id": 91,
    "code": "```java\nimport java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic static void writeStringToFile(String content, String filePath) {\n    try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {\n        writer.write(content);\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Writes a given string to a specified file, overwriting existing content if the file exists."
  },
  {
    "id": 92,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 93,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String currentLine;\n        while ((currentLine = br.readLine()) != null) {\n            contentBuilder.append(currentLine).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by its path into a single string."
  },
  {
    "id": 94,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 95,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String currentLine;\n        while ((currentLine = br.readLine()) != null) {\n            contentBuilder.append(currentLine).append(\"\\n\");\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by the file path into a single string."
  },
  {
    "id": 96,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 97,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic static List<String> readLinesFromFile(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            lines.add(line);\n        }\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 98,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            contentBuilder.append(line).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads a text file from a given file path and returns its content as a single string."
  },
  {
    "id": 99,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            contentBuilder.append(line).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by its path into a single string."
  },
  {
    "id": 100,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a file into a single string, appending a line separator after each line."
  },
  {
    "id": 101,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 102,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a specified file."
  },
  {
    "id": 103,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 104,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            contentBuilder.append(line).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "This function reads the content of a file from the given file path and returns it as a single string."
  },
  {
    "id": 105,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLinesWithNumbers(String filename) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filename))) {\n        String line;\n        int lineNumber = 1;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(lineNumber++ + \": \" + line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads a file and prints each line prefixed with its line number."
  },
  {
    "id": 106,
    "code": "```java\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.List;\n\npublic static List<String> readLinesFromFile(String filePath) throws IOException {\n    return Files.readAllLines(Paths.get(filePath));\n}\n```",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 107,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads and prints each line from a file specified by its file path."
  },
  {
    "id": 108,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}",
    "summary": "This function reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 109,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the contents of a file specified by its path and returns it as a single string."
  },
  {
    "id": 110,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line of a specified file."
  },
  {
    "id": 111,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "Reads and prints each line of a file specified by the given file path."
  },
  {
    "id": 112,
    "code": "```java\nimport java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic void writeLinesToFile(String filePath, List<String> lines) throws IOException {\n    try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {\n        for (String line : lines) {\n            writer.write(line);\n            writer.newLine();\n        }\n    }\n}\n```",
    "summary": "Writes a list of strings to a specified file, each string on a new line, using a buffered writer."
  },
  {
    "id": 113,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 114,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    } catch (IOException e) {\n        e.printStackTrace();\n        return null;\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file, or returns null if an error occurs."
  },
  {
    "id": 115,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 116,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineOfFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 117,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a BufferedReader."
  },
  {
    "id": 118,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a BufferedReader."
  },
  {
    "id": 119,
    "code": "```java\nimport java.io.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic static List<String> readLinesFromFile(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            lines.add(line);\n        }\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 120,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 121,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            contentBuilder.append(line).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "This function reads the entire content of a file from the specified path into a single string."
  },
  {
    "id": 122,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 123,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "This function reads a file line by line and prints each line to the console."
  },
  {
    "id": 124,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "This function reads a file line by line and prints each line to the console."
  },
  {
    "id": 125,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 126,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 127,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 128,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFile(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads a file from the given path and returns its entire content as a single string with lines separated by system line separators."
  },
  {
    "id": 129,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "This function reads and prints each line from a file specified by the given file path."
  },
  {
    "id": 130,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads and prints each line from a specified file using a BufferedReader."
  },
  {
    "id": 131,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads a file from the given file path and returns its contents as a single string."
  },
  {
    "id": 132,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}",
    "summary": "This function reads a file line by line from a given file path and prints each line to the console."
  },
  {
    "id": 133,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder fileContent = new StringBuilder();\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = bufferedReader.readLine()) != null) {\n            fileContent.append(line).append(System.lineSeparator());\n        }\n    }\n    return fileContent.toString();\n}\n```",
    "summary": "Reads the contents of a file specified by the file path into a single string."
  },
  {
    "id": 134,
    "code": "```java\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.List;\n\npublic static void writeLinesToFile(String filePath, List<String> lines) throws IOException {\n    Files.write(Paths.get(filePath), lines);\n}\n```",
    "summary": "Writes a list of strings to a specified file, each string on a new line."
  },
  {
    "id": 135,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 136,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContent(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by the file path and returns it as a string."
  },
  {
    "id": 137,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 138,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"An error occurred while reading the file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "This function reads a file line by line and prints each line to the console."
  },
  {
    "id": 139,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 140,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the file path."
  },
  {
    "id": 141,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String currentLine;\n        while ((currentLine = br.readLine()) != null) {\n            contentBuilder.append(currentLine).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by the file path and returns it as a single string."
  },
  {
    "id": 142,
    "code": "```java\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.List;\n\npublic static List<String> readFileLines(String filePath) throws IOException {\n    return Files.readAllLines(Path.of(filePath));\n}\n```",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 143,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 144,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContent(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by its path and returns it as a single string."
  },
  {
    "id": 145,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a file into a string, preserving line separators."
  },
  {
    "id": 146,
    "code": "```java\npublic static List<String> readLinesFromFile(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            lines.add(line);\n        }\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 147,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by its path and returns it as a String."
  },
  {
    "id": 148,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a file specified by the file path."
  },
  {
    "id": 149,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 150,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String currentLine;\n        while ((currentLine = br.readLine()) != null) {\n            contentBuilder.append(currentLine).append(\"\\n\");\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by `filePath` into a single `String`."
  },
  {
    "id": 151,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads a file line by line and prints each line to the console."
  },
  {
    "id": 152,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 153,
    "code": "```java\nimport java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic static void writeToFile(String filename, String content) {\n    try (BufferedWriter writer = new BufferedWriter(new FileWriter(filename))) {\n        writer.write(content);\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Writes the given content to a specified file, creating or overwriting it."
  },
  {
    "id": 154,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 155,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "This function reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 156,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 157,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "This function reads the entire content of a file specified by its path into a single string."
  },
  {
    "id": 158,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class FileProcessor {\n    public static String readFileContent(String filePath) throws IOException {\n        StringBuilder content = new StringBuilder();\n        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                content.append(line).append(System.lineSeparator());\n            }\n        }\n        return content.toString();\n    }\n}\n```",
    "summary": "Reads the entire content of a file specified by the file path and returns it as a string."
  },
  {
    "id": 159,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static int countLinesInFile(String filePath) throws IOException {\n    int lineCount = 0;\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        while (reader.readLine() != null) {\n            lineCount++;\n        }\n    }\n    return lineCount;\n}\n```",
    "summary": "This function counts the number of lines in a file, given its file path."
  },
  {
    "id": 160,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by the file path into a single string."
  },
  {
    "id": 161,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the file path."
  },
  {
    "id": 162,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the file path."
  },
  {
    "id": 163,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire contents of a file from the specified path into a single string."
  },
  {
    "id": 164,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String currentLine;\n        while ((currentLine = br.readLine()) != null) {\n            contentBuilder.append(currentLine).append(\"\\n\");\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by `filePath` into a single string."
  },
  {
    "id": 165,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads a file from the specified path and returns its entire content as a single string."
  },
  {
    "id": 166,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 167,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineOfFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 168,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 169,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "This function reads and returns the first line of a text file specified by the file path."
  },
  {
    "id": 170,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}",
    "summary": "This function reads a file from the specified path and returns its content as a single string."
  },
  {
    "id": 171,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the contents of a file from the specified path and returns it as a single string."
  },
  {
    "id": 172,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "This function reads a file line by line and prints each line to the console."
  },
  {
    "id": 173,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContent(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString().trim();\n}\n```",
    "summary": "Reads the content of a file specified by its path and returns it as a single string."
  },
  {
    "id": 174,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line of a specified file."
  },
  {
    "id": 175,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the contents of a file at the given path into a single string, including line separators."
  },
  {
    "id": 176,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 177,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads a file from the specified path and returns its content as a single string."
  },
  {
    "id": 178,
    "code": "public static List<String> readLinesFromFile(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            lines.add(line);\n        }\n    }\n    return lines;\n}",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 179,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 180,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}",
    "summary": "Prints each line of a text file specified by the file path to the console."
  },
  {
    "id": 181,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading the file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "Reads and prints each line of a specified file to the console, handling potential I/O exceptions."
  },
  {
    "id": 182,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "Reads and prints each line of a file specified by the file path."
  },
  {
    "id": 183,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String currentLine;\n        while ((currentLine = br.readLine()) != null) {\n            contentBuilder.append(currentLine).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "This function reads a file from the specified path and returns its content as a single string."
  },
  {
    "id": 184,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class FileProcessor {\n    public static String readFirstLine(String filePath) throws IOException {\n        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n            return reader.readLine();\n        }\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 185,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    } catch (IOException e) {\n        e.printStackTrace();\n        return null;\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the file path, handling any IO exceptions."
  },
  {
    "id": 186,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by its file path."
  },
  {
    "id": 187,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder fileContent = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            fileContent.append(line).append(System.lineSeparator());\n        }\n    }\n    return fileContent.toString();\n}\n```",
    "summary": "This function reads the contents of a file specified by its path and returns it as a single string."
  },
  {
    "id": 188,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileContents(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}",
    "summary": "This function reads a file line by line and prints its contents to the standard output."
  },
  {
    "id": 189,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void readFileAndPrintLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}",
    "summary": "Reads a file line-by-line from the given file path and prints each line to the console."
  },
  {
    "id": 190,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String currentLine;\n        while ((currentLine = br.readLine()) != null) {\n            contentBuilder.append(currentLine).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads a text file from the specified file path and returns its entire content as a single string."
  },
  {
    "id": 191,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by `filePath` into a single string, including line separators."
  },
  {
    "id": 192,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire contents of a file from the specified path and returns it as a string."
  },
  {
    "id": 193,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder fileContent = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            fileContent.append(line).append(System.lineSeparator());\n        }\n    }\n    return fileContent.toString();\n}\n```",
    "summary": "Reads the contents of a file at the specified path into a single string with lines separated by the system line separator."
  },
  {
    "id": 194,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "This function reads a file line by line and prints each line to the console."
  },
  {
    "id": 195,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String currentLine;\n        while ((currentLine = br.readLine()) != null) {\n            contentBuilder.append(currentLine).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads the contents of a file specified by `filePath` into a single `String`."
  },
  {
    "id": 196,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line of a specified file."
  },
  {
    "id": 197,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by the file path and returns it as a string."
  },
  {
    "id": 198,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 199,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 200,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line of a file specified by its file path."
  },
  {
    "id": 201,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 202,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "Reads and prints each line from a specified file using a BufferedReader."
  },
  {
    "id": 203,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a text file specified by the given file path."
  },
  {
    "id": 204,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 205,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLinesContainingKeyword(String filePath, String keyword) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            if (line.contains(keyword)) {\n                System.out.println(line);\n            }\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads a file and prints lines that contain a specified keyword."
  },
  {
    "id": 206,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "This function reads a file line by line from a specified path and prints each line to the console."
  },
  {
    "id": 207,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a BufferedReader."
  },
  {
    "id": 208,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLinesContainingKeyword(String filePath, String keyword) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            if (line.contains(keyword)) {\n                System.out.println(line);\n            }\n        }\n    }\n}\n```",
    "summary": "Reads a file line by line and prints lines containing a specified keyword."
  },
  {
    "id": 209,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 210,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the file path."
  },
  {
    "id": 211,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire contents of a file specified by `filePath` and returns it as a string."
  },
  {
    "id": 212,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "This function reads the entire content of a file specified by `filePath` and returns it as a single string."
  },
  {
    "id": 213,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder fileContent = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            fileContent.append(line).append(System.lineSeparator());\n        }\n    }\n    return fileContent.toString();\n}\n```",
    "summary": "Reads a file from the given path and returns its content as a single string."
  },
  {
    "id": 214,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            contentBuilder.append(line).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "This function reads the entire content of a file specified by its path into a single string."
  },
  {
    "id": 215,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void readFirstNLines(String filePath, int n) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        int count = 0;\n        while ((line = reader.readLine()) != null && count < n) {\n            System.out.println(line);\n            count++;\n        }\n    }\n}\n```",
    "summary": "Reads and prints the first N lines from a specified file."
  },
  {
    "id": 216,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads and returns the entire contents of a file as a single string, given the file's path."
  },
  {
    "id": 217,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by `filePath` into a single `String`, preserving line breaks."
  },
  {
    "id": 218,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line of a file specified by the file path."
  },
  {
    "id": 219,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line of a file specified by its file path."
  },
  {
    "id": 220,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "Reads and prints each line of a file specified by the file path, handling any IO exceptions."
  },
  {
    "id": 221,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 222,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a specified file using a buffered reader."
  },
  {
    "id": 223,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 224,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a file specified by its file path."
  },
  {
    "id": 225,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "This function reads a file line-by-line from the specified path and prints each line to the console."
  },
  {
    "id": 226,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 227,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}",
    "summary": "Reads and returns the first line of a file specified by its file path."
  },
  {
    "id": 228,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 229,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    } catch (IOException e) {\n        e.printStackTrace();\n        return null;\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file, handling any I/O exceptions."
  },
  {
    "id": 230,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 231,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineOfFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line of a file specified by its path."
  },
  {
    "id": 232,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "Reads and prints each line from a file specified by its file path."
  },
  {
    "id": 233,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String currentLine;\n        while ((currentLine = br.readLine()) != null) {\n            contentBuilder.append(currentLine).append(\"\\n\");\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "This function reads the entire content of a file specified by `filePath` and returns it as a single string."
  },
  {
    "id": 234,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a buffered reader."
  },
  {
    "id": 235,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileContents(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "This function reads and prints the contents of a file line by line using a BufferedReader."
  },
  {
    "id": 236,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "This function reads the entire content of a file specified by its path into a single string."
  },
  {
    "id": 237,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void readFileAndPrintLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "This function reads a file line by line from a specified path and prints each line to the console."
  },
  {
    "id": 238,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 239,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 240,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the content of a file specified by the file path and returns it as a single string."
  },
  {
    "id": 241,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "This function reads and prints each line from a specified file."
  },
  {
    "id": 242,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the file path."
  },
  {
    "id": 243,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "This function reads a file line by line from the given file path and prints each line to the console."
  },
  {
    "id": 244,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "This function reads and prints each line of a file specified by the file path."
  },
  {
    "id": 245,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by `filePath` and returns it as a string."
  },
  {
    "id": 246,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic static List<String> readLinesFromFile(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            lines.add(line);\n        }\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a list of strings."
  },
  {
    "id": 247,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a text file specified by the file path."
  },
  {
    "id": 248,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line of a file specified by its file path."
  },
  {
    "id": 249,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String currentLine;\n        while ((currentLine = br.readLine()) != null) {\n            contentBuilder.append(currentLine).append(\"\\n\");\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads a file from the given file path and returns its contents as a single string."
  },
  {
    "id": 250,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 251,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file, using a BufferedReader for efficient reading."
  },
  {
    "id": 252,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file, using a buffered reader."
  },
  {
    "id": 253,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads and prints each line of a file specified by its path using a BufferedReader."
  },
  {
    "id": 254,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 255,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "Reads and prints each line of a file specified by its file path."
  },
  {
    "id": 256,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads and prints each line of a file specified by its file path."
  },
  {
    "id": 257,
    "code": "```java\nimport java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic static void writeLinesToFile(String filename, List<String> lines) throws IOException {\n    try (BufferedWriter writer = new BufferedWriter(new FileWriter(filename))) {\n        for (String line : lines) {\n            writer.write(line);\n            writer.newLine();\n        }\n    }\n}\n```",
    "summary": "Writes a list of strings to a file, each as a new line, using buffered writing."
  },
  {
    "id": 258,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 259,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 260,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by its path into a single string."
  },
  {
    "id": 261,
    "code": "```java\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic static void writeStringToFile(String filePath, String content) throws IOException {\n    try (FileWriter writer = new FileWriter(filePath)) {\n        writer.write(content);\n    }\n}\n```",
    "summary": "This function writes a given string content to a specified file path using a FileWriter."
  },
  {
    "id": 262,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineOfFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "The function reads and returns the first line from a specified file using a BufferedReader in Java."
  },
  {
    "id": 263,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "Reads a file line by line from the given file path and prints each line to the console."
  },
  {
    "id": 264,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 265,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "This function reads a file line-by-line from the given file path and prints each line to the console."
  },
  {
    "id": 266,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLineCount(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        int lineCount = 0;\n        while (reader.readLine() != null) {\n            lineCount++;\n        }\n        System.out.println(\"Total lines: \" + lineCount);\n    } catch (IOException e) {\n        System.err.println(\"An error occurred: \" + e.getMessage());\n    }\n}\n```",
    "summary": "Counts and prints the number of lines in a specified file."
  },
  {
    "id": 267,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 268,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire contents of a file specified by its path and returns it as a string."
  },
  {
    "id": 269,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic static List<String> readLinesFromFile(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            lines.add(line);\n        }\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 270,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 271,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads a file line by line and prints each line to the console."
  },
  {
    "id": 272,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            contentBuilder.append(line).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads a file from the given path and returns its content as a single string."
  },
  {
    "id": 273,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "This function reads a file line by line and prints each line to the console."
  },
  {
    "id": 274,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 275,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by `filePath` into a single string, with lines separated by the system line separator."
  },
  {
    "id": 276,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "Reads and returns the first line from a specified file using a BufferedReader."
  },
  {
    "id": 277,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 278,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file path using a BufferedReader."
  },
  {
    "id": 279,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 280,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 281,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContent(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a file from the given file path and returns it as a string."
  },
  {
    "id": 282,
    "code": "```java\npublic static List<String> readLinesFromFile(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            lines.add(line);\n        }\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 283,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void countLinesInFile(String filePath) {\n    int lineCount = 0;\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        while (reader.readLine() != null) {\n            lineCount++;\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    System.out.println(\"Total lines: \" + lineCount);\n}\n```",
    "summary": "Counts and prints the number of lines in a specified text file."
  },
  {
    "id": 284,
    "code": "```java\nimport java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic static void appendToFile(String filePath, String content) throws IOException {\n    try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath, true))) {\n        writer.write(content);\n        writer.newLine();\n    }\n}\n```",
    "summary": "Appends the specified content to the end of a given file, creating a new line."
  },
  {
    "id": 285,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "This function reads and prints each line from a specified file."
  },
  {
    "id": 286,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a specified file, using a buffered reader for efficiency."
  },
  {
    "id": 287,
    "code": "```java\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.List;\n\npublic static List<String> readLinesFromFile(String filePath) throws IOException {\n    Path path = Paths.get(filePath);\n    return Files.readAllLines(path);\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 288,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 289,
    "code": "```java\nimport java.io.FileReader;\nimport java.io.BufferedReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a BufferedReader."
  },
  {
    "id": 290,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 291,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a BufferedReader."
  },
  {
    "id": 292,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String currentLine;\n        while ((currentLine = br.readLine()) != null) {\n            contentBuilder.append(currentLine).append(\"\\n\");\n        }\n    }\n    return contentBuilder.toString().trim();\n}\n```",
    "summary": "Reads the entire content of a file specified by `filePath` into a single string."
  },
  {
    "id": 293,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 294,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the file path."
  },
  {
    "id": 295,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading the file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "This function reads a file line by line from a given file path and prints each line to the standard output."
  },
  {
    "id": 296,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by its file path."
  },
  {
    "id": 297,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            contentBuilder.append(line).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "This function reads a text file from the specified path and returns its entire content as a single string."
  },
  {
    "id": 298,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads the first line from a specified file and returns it as a string."
  },
  {
    "id": 299,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line of a file specified by the filePath."
  },
  {
    "id": 300,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static int countLinesInFile(String filePath) throws IOException {\n    int lineCount = 0;\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        while (reader.readLine() != null) {\n            lineCount++;\n        }\n    }\n    return lineCount;\n}\n```",
    "summary": "This function counts and returns the number of lines in a specified file."
  },
  {
    "id": 301,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "This function reads a file line by line and prints each line to the standard output."
  },
  {
    "id": 302,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "Reads and prints each line of a specified file using a buffered reader."
  },
  {
    "id": 303,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads and prints each line of a file specified by its path, handling exceptions if they occur."
  },
  {
    "id": 304,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a specified file using a BufferedReader."
  },
  {
    "id": 305,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic void printFileLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "This function reads all lines from a specified file and prints each line to the console."
  },
  {
    "id": 306,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 307,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}",
    "summary": "Reads and returns the first line from a specified file using a buffered reader."
  },
  {
    "id": 308,
    "code": "import java.io.File;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\n\npublic static void deleteFileIfEmpty(String filePath) throws IOException {\n    Path path = new File(filePath).toPath();\n    if (Files.exists(path) && Files.size(path) == 0) {\n        Files.delete(path);\n    }\n}",
    "summary": "This function deletes a file if it is empty and exists at the specified file path."
  },
  {
    "id": 309,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = bufferedReader.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "Reads and prints each line of a file specified by the file path."
  },
  {
    "id": 310,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "Reads and returns the first line from a specified file, using a BufferedReader for efficient file access."
  },
  {
    "id": 311,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a BufferedReader."
  },
  {
    "id": 312,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 313,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "This function reads and returns the first line from a specified file path using a BufferedReader."
  },
  {
    "id": 314,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void readFileAndPrintLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads a file line by line and prints each line to the console."
  },
  {
    "id": 315,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "This function reads a file line by line and prints each line to the console."
  },
  {
    "id": 316,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            contentBuilder.append(line).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "This function reads the entire content of a file specified by the file path into a single string."
  },
  {
    "id": 317,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from the specified file using a BufferedReader."
  },
  {
    "id": 318,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 319,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the file path."
  },
  {
    "id": 320,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 321,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 322,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the file path."
  },
  {
    "id": 323,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "This function reads a file line by line from a specified path and prints each line to the console."
  },
  {
    "id": 324,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a BufferedReader."
  },
  {
    "id": 325,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class FileProcessor {\n    public static String readFirstLine(String filePath) throws IOException {\n        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n            return reader.readLine();\n        }\n    }\n}\n```",
    "summary": "This function reads and returns the first line of a file specified by its file path."
  },
  {
    "id": 326,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the file path."
  },
  {
    "id": 327,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by its file path."
  },
  {
    "id": 328,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading the file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "Reads and prints each line from a specified file, handling any I/O exceptions that occur."
  },
  {
    "id": 329,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 330,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 331,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String currentLine;\n        while ((currentLine = br.readLine()) != null) {\n            contentBuilder.append(currentLine).append(\"\\n\");\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads a text file from the specified path and returns its entire content as a single string."
  },
  {
    "id": 332,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(\"\\n\");\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by its path into a single string."
  },
  {
    "id": 333,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filename) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filename))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 334,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString().trim();\n}\n```",
    "summary": "Reads the contents of a file specified by `filePath` and returns it as a trimmed string."
  },
  {
    "id": 335,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads a file from the specified path and returns its contents as a string."
  },
  {
    "id": 336,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder fileContent = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            fileContent.append(line).append(System.lineSeparator());\n        }\n    }\n    return fileContent.toString().trim();\n}\n```",
    "summary": "This function reads the contents of a file specified by its path and returns it as a single string."
  },
  {
    "id": 337,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 338,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 339,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire contents of a file at the given file path into a single string."
  },
  {
    "id": 340,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 341,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 342,
    "code": "```java\nimport java.nio.file.*;\nimport java.io.IOException;\nimport java.util.List;\n\npublic static void printFileLines(String filePath) throws IOException {\n    List<String> lines = Files.readAllLines(Paths.get(filePath));\n    for (String line : lines) {\n        System.out.println(line);\n    }\n}\n```",
    "summary": "Reads a file line by line from the specified file path and prints each line to the console."
  },
  {
    "id": 343,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 344,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a BufferedReader."
  },
  {
    "id": 345,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 346,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a BufferedReader."
  },
  {
    "id": 347,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads and prints each line of a specified file to the console."
  },
  {
    "id": 348,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineOfFile(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    } catch (IOException e) {\n        e.printStackTrace();\n        return null;\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file, handling any IOExceptions."
  },
  {
    "id": 349,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 350,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 351,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 352,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line of a specified file using its file path."
  },
  {
    "id": 353,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 354,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class FileProcessor {\n\n    public static String readFirstLine(String filePath) throws IOException {\n        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n            return reader.readLine();\n        }\n    }\n}\n```",
    "summary": "This function reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 355,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = bufferedReader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the contents of a file specified by its path and returns it as a single string."
  },
  {
    "id": 356,
    "code": "```java\npublic static List<String> readLinesFromFile(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = bufferedReader.readLine()) != null) {\n            lines.add(line);\n        }\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a list of strings."
  },
  {
    "id": 357,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineOfFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line of a file specified by its file path."
  },
  {
    "id": 358,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a buffered reader."
  },
  {
    "id": 359,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads and returns the entire contents of a file as a single string, with each line separated by the system's line separator."
  },
  {
    "id": 360,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 361,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a file into a single string, including line separators."
  },
  {
    "id": 362,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by `filePath` and returns it as a string."
  },
  {
    "id": 363,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 364,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            contentBuilder.append(line).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by `filePath` into a single string."
  },
  {
    "id": 365,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContent(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads and returns the entire content of a file as a string."
  },
  {
    "id": 366,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a buffered reader."
  },
  {
    "id": 367,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder fileContent = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            fileContent.append(line).append(System.lineSeparator());\n        }\n    }\n    return fileContent.toString();\n}\n```",
    "summary": "Reads the entire content of a file into a single String, appending a newline after each line."
  },
  {
    "id": 368,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 369,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineOfFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the file path."
  },
  {
    "id": 370,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            contentBuilder.append(line).append(\"\\n\");\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads the contents of a file specified by `filePath` into a single string, including line breaks."
  },
  {
    "id": 371,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 372,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a text file specified by the file path."
  },
  {
    "id": 373,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line of a file specified by its file path."
  },
  {
    "id": 374,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a file given its file path."
  },
  {
    "id": 375,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "This function reads and prints each line of a file specified by the given file path."
  },
  {
    "id": 376,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "This function reads the contents of a file specified by its path and returns it as a single string."
  },
  {
    "id": 377,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filepath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filepath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "Reads and prints each line from a file specified by the given file path."
  },
  {
    "id": 378,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileAsString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            contentBuilder.append(line).append(\"\\n\");\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads a file from the given path and returns its contents as a single string."
  },
  {
    "id": 379,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static int countLinesInFile(String filePath) throws IOException {\n    int lineCount = 0;\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        while (reader.readLine() != null) {\n            lineCount++;\n        }\n    }\n    return lineCount;\n}\n```",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 380,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString().trim();\n}\n```",
    "summary": "Reads the contents of a file and returns it as a single string, with lines separated by the system's line separator."
  },
  {
    "id": 381,
    "code": "import java.io.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic static List<String> readFileLines(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            lines.add(line);\n        }\n    }\n    return lines;\n}",
    "summary": "Reads all lines from a file specified by the given path and returns them as a list of strings."
  },
  {
    "id": 382,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 383,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLinesContainingKeyword(String filePath, String keyword) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            if (line.contains(keyword)) {\n                System.out.println(line);\n            }\n        }\n    }\n}\n```",
    "summary": "This function reads a file line by line and prints lines that contain a specified keyword."
  },
  {
    "id": 384,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a buffered reader."
  },
  {
    "id": 385,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads and prints each line from a file specified by its file path."
  },
  {
    "id": 386,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 387,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the content of a file specified by its path into a single string, preserving line separators."
  },
  {
    "id": 388,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads and prints each line of a file specified by the given file path."
  },
  {
    "id": 389,
    "code": "```java\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic static void writeFile(String filePath, String content) throws IOException {\n    File file = new File(filePath);\n    try (FileWriter writer = new FileWriter(file)) {\n        writer.write(content);\n    }\n}\n```",
    "summary": "Writes the specified content to a file at the given file path, creating or overwriting the file as needed."
  },
  {
    "id": 390,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the content of a file specified by `filePath` into a single string with line separators preserved."
  },
  {
    "id": 391,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "Reads and prints each line of a file specified by the given file path."
  },
  {
    "id": 392,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "The function reads and returns the first line from a specified file."
  },
  {
    "id": 393,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    } catch (IOException e) {\n        e.printStackTrace();\n        return null;\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file, handling any IOExceptions that occur."
  },
  {
    "id": 394,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void readFileAndPrintLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads a file line-by-line from a specified path and prints each line to the console."
  },
  {
    "id": 395,
    "code": "```java\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic static String readFileAsString(String filePath) throws IOException {\n    return new String(Files.readAllBytes(Paths.get(filePath)));\n}\n```",
    "summary": "Reads the entire content of a file specified by the file path and returns it as a string."
  },
  {
    "id": 396,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineOfFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line of a file given its file path."
  },
  {
    "id": 397,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 398,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "Reads a file line by line and prints each line to the console."
  },
  {
    "id": 399,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "This function reads a file line-by-line from a given file path and prints each line to the standard output."
  },
  {
    "id": 400,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire contents of a file specified by its path into a single string."
  },
  {
    "id": 401,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the content of a file from a given file path and returns it as a single string."
  },
  {
    "id": 402,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}",
    "summary": "The function reads a file line by line and prints each line to the console."
  },
  {
    "id": 403,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the contents of a file specified by `filePath` into a single string."
  },
  {
    "id": 404,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 405,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "This function reads and prints each line from a specified file, handling any IO exceptions that occur."
  },
  {
    "id": 406,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class FileProcessor {\n    public static String readFirstLine(String filePath) throws IOException {\n        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n            return reader.readLine();\n        }\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 407,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "Reads and prints each line from a text file located at the specified file path."
  },
  {
    "id": 408,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a file into a single String, with lines separated by the system's line separator."
  },
  {
    "id": 409,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 410,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "This function reads the entire content of a file specified by its path and returns it as a single string."
  },
  {
    "id": 411,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 412,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "Reads a file line by line and prints each line to the console."
  },
  {
    "id": 413,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a text file specified by the file path."
  },
  {
    "id": 414,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 415,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 416,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic void printFileLinesContainingKeyword(String filePath, String keyword) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            if (line.contains(keyword)) {\n                System.out.println(line);\n            }\n        }\n    }\n}\n```",
    "summary": "Reads a file and prints lines that contain a specified keyword."
  },
  {
    "id": 417,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "Reads a file line by line and prints each line to the console."
  },
  {
    "id": 418,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 419,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a specified file."
  },
  {
    "id": 420,
    "code": "```java\npublic static void copyFile(String sourcePath, String destPath) throws IOException {\n    try (InputStream inputStream = new FileInputStream(sourcePath);\n         OutputStream outputStream = new FileOutputStream(destPath)) {\n        byte[] buffer = new byte[1024];\n        int bytesRead;\n        while ((bytesRead = inputStream.read(buffer)) != -1) {\n            outputStream.write(buffer, 0, bytesRead);\n        }\n    }\n}\n```",
    "summary": "Copies the contents of a file from a source path to a destination path using streams."
  },
  {
    "id": 421,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads and prints each line of a file specified by `filePath` to the console, handling any IO exceptions."
  },
  {
    "id": 422,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 423,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "Reads and returns the first line of a file specified by the file path."
  },
  {
    "id": 424,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 425,
    "code": "import java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.List;\n\npublic static List<String> readLinesFromFile(String filePath) throws IOException {\n    return Files.readAllLines(Paths.get(filePath));\n}",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 426,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Prints each line of a file specified by the given file path to the standard output."
  },
  {
    "id": 427,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "This function reads a file line by line and prints each line to the console."
  },
  {
    "id": 428,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    } catch (IOException e) {\n        e.printStackTrace();\n        return null;\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file, handling any IO exceptions."
  },
  {
    "id": 429,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file, using a BufferedReader."
  },
  {
    "id": 430,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String currentLine;\n        while ((currentLine = br.readLine()) != null) {\n            contentBuilder.append(currentLine).append(\"\\n\");\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads the entirety of a file into a single string, appending a newline after each line."
  },
  {
    "id": 431,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 432,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 433,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 434,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "Reads and returns the first line from a file specified by the file path."
  },
  {
    "id": 435,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a file into a single string, preserving line breaks."
  },
  {
    "id": 436,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String currentLine;\n        while ((currentLine = br.readLine()) != null) {\n            contentBuilder.append(currentLine).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads the entire content of a file into a single string, preserving line breaks."
  },
  {
    "id": 437,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading the file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "Reads and prints each line of a specified file, handling any I/O exceptions encountered."
  },
  {
    "id": 438,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 439,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContent(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by its path and returns it as a single string."
  },
  {
    "id": 440,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 441,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileAsString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}",
    "summary": "Reads the entire content of a file specified by its path into a single string."
  },
  {
    "id": 442,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "Reads and returns the first line of a specified file."
  },
  {
    "id": 443,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by its file path."
  },
  {
    "id": 444,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 445,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContent(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by the file path and returns it as a string."
  },
  {
    "id": 446,
    "code": "```java\npublic static void writeFile(String filePath, String content) throws IOException {\n    try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {\n        writer.write(content);\n    }\n}\n```",
    "summary": "Writes the specified content to a file at the given file path, creating or overwriting the file."
  },
  {
    "id": 447,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 448,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}",
    "summary": "Reads and returns the first line from a specified file using a BufferedReader."
  },
  {
    "id": 449,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLinesContainingKeyword(String filePath, String keyword) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            if (line.contains(keyword)) {\n                System.out.println(line);\n            }\n        }\n    }\n}",
    "summary": "This function reads a file and prints all lines that contain a specified keyword."
  },
  {
    "id": 450,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the contents of a file from the specified path and returns it as a single string with lines separated by the system's line separator."
  },
  {
    "id": 451,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}",
    "summary": "Prints each line of a file specified by the file path to the standard output."
  },
  {
    "id": 452,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire contents of a file specified by `filePath` and returns it as a single string."
  },
  {
    "id": 453,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContent(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString().trim();\n}\n```",
    "summary": "Reads the entire content of a file specified by the file path into a single string."
  },
  {
    "id": 454,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the file path."
  },
  {
    "id": 455,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a buffered reader."
  },
  {
    "id": 456,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileAsString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String currentLine;\n        while ((currentLine = br.readLine()) != null) {\n            contentBuilder.append(currentLine).append(\"\\n\");\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by the file path into a single string."
  },
  {
    "id": 457,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 458,
    "code": "```java\nimport java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic static void writeStringToFile(String content, String filePath) throws IOException {\n    try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {\n        writer.write(content);\n    }\n}\n```",
    "summary": "Writes a given string to a specified file using a buffered writer."
  },
  {
    "id": 459,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file using a BufferedReader."
  },
  {
    "id": 460,
    "code": "```java\nimport java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic void writeToTextFile(String filePath, String content) throws IOException {\n    try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {\n        writer.write(content);\n    }\n}\n```",
    "summary": "Writes the given content to a specified text file, overwriting if it exists."
  },
  {
    "id": 461,
    "code": "```java\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic static void writeFile(String filePath, String content) throws IOException {\n    File file = new File(filePath);\n    try (FileWriter writer = new FileWriter(file)) {\n        writer.write(content);\n    }\n}\n```",
    "summary": "Writes the specified content to a file at the given file path, creating the file if it doesn't exist."
  },
  {
    "id": 462,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "This function reads the contents of a file specified by its path and returns it as a single string."
  },
  {
    "id": 463,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFile(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads a file from a specified path and returns its entire content as a string."
  },
  {
    "id": 464,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLinesContainingKeyword(String filePath, String keyword) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            if (line.contains(keyword)) {\n                System.out.println(line);\n            }\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "This function reads a file and prints lines containing a specified keyword."
  },
  {
    "id": 465,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    } catch (IOException e) {\n        e.printStackTrace();\n        return null;\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file, handling potential IO exceptions."
  },
  {
    "id": 466,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a text file specified by the given file path."
  },
  {
    "id": 467,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic static List<String> readLinesFromFile(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            lines.add(line);\n        }\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 468,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 469,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 470,
    "code": "```java\nimport java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic void writeStringToFile(String filePath, String content) throws IOException {\n    try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {\n        writer.write(content);\n    }\n}\n```",
    "summary": "Writes a given string to a specified file, overwriting any existing content."
  },
  {
    "id": 471,
    "code": "```java\npublic static List<String> readLinesFromFile(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            lines.add(line);\n        }\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file at the specified path into a list of strings."
  },
  {
    "id": 472,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by its file path."
  },
  {
    "id": 473,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "This function reads a file line by line from the given file path and prints each line to the console."
  },
  {
    "id": 474,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a file specified by its file path."
  },
  {
    "id": 475,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 476,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 477,
    "code": "```java\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic void appendToFile(String filePath, String content) throws IOException {\n    File file = new File(filePath);\n    try (FileWriter writer = new FileWriter(file, true)) {\n        writer.write(content);\n    }\n}\n```",
    "summary": "Appends the given content to a file specified by the file path, creating the file if it does not exist."
  },
  {
    "id": 478,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileAsString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            contentBuilder.append(line).append(\"\\n\");\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "This function reads the entire content of a file specified by its file path and returns it as a single string."
  },
  {
    "id": 479,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "This function reads and prints each line of a text file specified by the given file path."
  },
  {
    "id": 480,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "This function reads a file line by line and prints each line to the console."
  },
  {
    "id": 481,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}",
    "summary": "This function reads and prints each line of a file specified by its file path."
  },
  {
    "id": 482,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}",
    "summary": "This function reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 483,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a text file specified by the file path."
  },
  {
    "id": 484,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 485,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}",
    "summary": "Reads and prints each line of a file specified by the file path."
  },
  {
    "id": 486,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "This function reads a file line by line from the specified path and prints each line to the console."
  },
  {
    "id": 487,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the contents of a file specified by the file path into a single string."
  },
  {
    "id": 488,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 489,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file using a buffered reader."
  },
  {
    "id": 490,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 491,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic void printFileLines(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "Reads and prints each line of a given file using a BufferedReader."
  },
  {
    "id": 492,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineOfFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line of a file specified by its file path."
  },
  {
    "id": 493,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}",
    "summary": "Reads the entire contents of a file into a single String."
  },
  {
    "id": 494,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a BufferedReader."
  },
  {
    "id": 495,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 496,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 497,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineOfFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 498,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads and returns the contents of a file as a single string, with each line separated by a system-dependent line separator."
  },
  {
    "id": 499,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic void readFileAndPrintLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "This function reads a file line by line from the given path and prints each line to the console."
  },
  {
    "id": 500,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "This function reads and returns the first line of a file specified by its file path."
  },
  {
    "id": 501,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 502,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileContents(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "This function reads and prints each line of a file specified by the given file path."
  },
  {
    "id": 503,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 504,
    "code": "```java\nimport java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic void writeToFile(String filename, String content) {\n    try (BufferedWriter writer = new BufferedWriter(new FileWriter(filename))) {\n        writer.write(content);\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Writes the specified content to a file with the given filename, handling any IO exceptions."
  },
  {
    "id": 505,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString().trim();\n}\n```",
    "summary": "This function reads the contents of a file specified by its path and returns it as a single string."
  },
  {
    "id": 506,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static int countLinesInFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        int lineCount = 0;\n        while (reader.readLine() != null) {\n            lineCount++;\n        }\n        return lineCount;\n    }\n}\n```",
    "summary": "Counts the number of lines in a specified file."
  },
  {
    "id": 507,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 508,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the file path."
  },
  {
    "id": 509,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContent(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "This function reads the content of a file specified by its path and returns it as a single string."
  },
  {
    "id": 510,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 511,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line of a file specified by its file path."
  },
  {
    "id": 512,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file at the specified file path."
  },
  {
    "id": 513,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Prints each line of a specified file to the console."
  },
  {
    "id": 514,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) throws IOException {\n    BufferedReader reader = new BufferedReader(new FileReader(filePath));\n    String line;\n    while ((line = reader.readLine()) != null) {\n        System.out.println(line);\n    }\n    reader.close();\n}\n```",
    "summary": "This function reads and prints each line from a specified text file."
  },
  {
    "id": 515,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 516,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "This function reads the entire contents of a file specified by its path and returns it as a single string."
  },
  {
    "id": 517,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineOfFile(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    } catch (IOException e) {\n        e.printStackTrace();\n        return null;\n    }\n}\n```",
    "summary": "This function reads and returns the first line of a specified file, handling any I/O exceptions that may occur."
  },
  {
    "id": 518,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 519,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by the file path and returns it as a single string."
  },
  {
    "id": 520,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the file path."
  },
  {
    "id": 521,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "Reads and prints each line from a specified file, handling potential I/O exceptions."
  },
  {
    "id": 522,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the contents of a file at the specified path and returns it as a single string."
  },
  {
    "id": 523,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = bufferedReader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "This function reads and returns the entire contents of a file specified by its file path."
  },
  {
    "id": 524,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 525,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 526,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "This function reads and prints each line of a text file specified by the file path."
  },
  {
    "id": 527,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by the file path and returns it as a string."
  },
  {
    "id": 528,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 529,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 530,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLinesContainingKeyword(String filePath, String keyword) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            if (line.contains(keyword)) {\n                System.out.println(line);\n            }\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "This function reads a file line by line and prints lines that contain a specified keyword."
  },
  {
    "id": 531,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "This function reads and returns the first line from a file specified by its file path."
  },
  {
    "id": 532,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by its file path."
  },
  {
    "id": 533,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "Reads and returns the first line from a specified file using a BufferedReader."
  },
  {
    "id": 534,
    "code": "```java\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.List;\n\npublic static List<String> readFileLines(String filePath) throws IOException {\n    return Files.readAllLines(Paths.get(filePath));\n}\n```",
    "summary": "Reads all lines from a specified file into a list of strings using the file path."
  },
  {
    "id": 535,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}",
    "summary": "This function reads and returns the first line from a file specified by its file path."
  },
  {
    "id": 536,
    "code": "```java\npublic void writeStringToFile(String filename, String content) throws IOException {\n    try (BufferedWriter writer = new BufferedWriter(new FileWriter(filename))) {\n        writer.write(content);\n    }\n}\n```",
    "summary": "Writes a given string to a specified file, overwriting its current contents."
  },
  {
    "id": 537,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void readFileLineByLine(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}",
    "summary": "Reads a file line by line and prints each line to the console."
  },
  {
    "id": 538,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads a file's content from the specified path into a single string with line separators."
  },
  {
    "id": 539,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 540,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 541,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "This function reads the contents of a file specified by `filePath` and returns it as a single string."
  },
  {
    "id": 542,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "Reads the first line from a file specified by its file path."
  },
  {
    "id": 543,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void countLinesInFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        int lineCount = 0;\n        while (reader.readLine() != null) {\n            lineCount++;\n        }\n        System.out.println(\"Total lines: \" + lineCount);\n    }\n}\n```",
    "summary": "Counts and prints the number of lines in the specified file."
  },
  {
    "id": 544,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the contents of a file specified by `filePath` into a single string, preserving line breaks."
  },
  {
    "id": 545,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "This function reads and prints each line of a text file specified by the given file path."
  },
  {
    "id": 546,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 547,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            contentBuilder.append(line).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "This function reads the contents of a file specified by the given file path and returns it as a single string."
  },
  {
    "id": 548,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            contentBuilder.append(line).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by its path into a single string."
  },
  {
    "id": 549,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 550,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void readFileAndPrintLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads a file line by line and prints each line to the console."
  },
  {
    "id": 551,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 552,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a buffered reader."
  },
  {
    "id": 553,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire contents of a file specified by its path and returns it as a single string."
  },
  {
    "id": 554,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from the specified file."
  },
  {
    "id": 555,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLinesWithNumbers(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        int lineNumber = 1;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(lineNumber++ + \": \" + line);\n        }\n    }\n}\n```",
    "summary": "Prints each line of a file with line numbers to the console."
  },
  {
    "id": 556,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void readFileAndPrintLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads a file line-by-line and prints each line to the console."
  },
  {
    "id": 557,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "This function reads a file line by line and prints each line to the console."
  },
  {
    "id": 558,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFirstLineOfFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String firstLine = reader.readLine();\n        if (firstLine != null) {\n            System.out.println(firstLine);\n        }\n    }\n}\n```",
    "summary": "Reads and prints the first line of a specified file."
  },
  {
    "id": 559,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "This function reads a file line by line and prints each line to the standard output."
  },
  {
    "id": 560,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String currentLine;\n        while ((currentLine = br.readLine()) != null) {\n            contentBuilder.append(currentLine).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by its path into a single string."
  },
  {
    "id": 561,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            contentBuilder.append(line).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads a file from a given path and returns its entire content as a single string."
  },
  {
    "id": 562,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 563,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFile(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "This function reads a file from the specified path and returns its content as a string."
  },
  {
    "id": 564,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 565,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by its path into a single string."
  },
  {
    "id": 566,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "This function reads a file line by line from the specified path and prints each line to the console."
  },
  {
    "id": 567,
    "code": "```java\npublic static List<String> readLinesFromFile(String filePath) {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            lines.add(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by the file path into a list of strings."
  },
  {
    "id": 568,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void readFileAndPrintLines(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "Reads a file line by line from the specified path and prints each line to the console."
  },
  {
    "id": 569,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 570,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static int countLinesInFile(String filePath) throws IOException {\n    int lineCount = 0;\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        while (reader.readLine() != null) {\n            lineCount++;\n        }\n    }\n    return lineCount;\n}\n```",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 571,
    "code": "```java\nimport java.io.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic static List<String> readFileLines(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            lines.add(line);\n        }\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 572,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads and prints each line from a file specified by the given file path."
  },
  {
    "id": 573,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire contents of a text file and returns it as a single string."
  },
  {
    "id": 574,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 575,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 576,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFile(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by the file path and returns it as a single string."
  },
  {
    "id": 577,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContent(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by its path and returns it as a string."
  },
  {
    "id": 578,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 579,
    "code": "```java\npublic void writeStringToFile(String filePath, String content) throws IOException {\n    try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {\n        writer.write(content);\n    }\n}\n```",
    "summary": "Writes a given string to a specified file, overwriting any existing content."
  },
  {
    "id": 580,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "This function reads the entire contents of a file specified by its path and returns it as a single string."
  },
  {
    "id": 581,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = bufferedReader.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "Reads and prints each line from a specified file using a buffered reader."
  },
  {
    "id": 582,
    "code": "```java\npublic static List<String> readLinesFromFile(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            lines.add(line);\n        }\n    }\n    return lines;\n}\n```",
    "summary": "This function reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 583,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "Reads and prints each line of a given file using a buffered reader."
  },
  {
    "id": 584,
    "code": "```java\nimport java.io.*;\n\npublic static void copyFile(String sourcePath, String destPath) throws IOException {\n    try (InputStream in = new FileInputStream(sourcePath);\n         OutputStream out = new FileOutputStream(destPath)) {\n        byte[] buffer = new byte[1024];\n        int length;\n        while ((length = in.read(buffer)) > 0) {\n            out.write(buffer, 0, length);\n        }\n    }\n}\n```",
    "summary": "Copies a file from a source path to a destination path using byte streams."
  },
  {
    "id": 585,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 586,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 587,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString().trim();\n}\n```",
    "summary": "Reads the contents of a file into a single string, maintaining line breaks."
  },
  {
    "id": 588,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "This function reads the entire content of a file specified by its path into a single string."
  },
  {
    "id": 589,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire contents of a file specified by its path and returns it as a single string."
  },
  {
    "id": 590,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 591,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 592,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 593,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads and prints each line of a file specified by the given file path."
  },
  {
    "id": 594,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "Reads and prints each line of a file specified by the given file path."
  },
  {
    "id": 595,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by its file path."
  },
  {
    "id": 596,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "Reads a file line by line from the specified path and prints each line to the console."
  },
  {
    "id": 597,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "This function reads and prints each line from a specified file."
  },
  {
    "id": 598,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 599,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 600,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from the specified file."
  },
  {
    "id": 601,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 602,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}",
    "summary": "This function reads the contents of a file specified by its path and returns it as a single string."
  },
  {
    "id": 603,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "This function reads the entire content of a file specified by its path into a single string."
  },
  {
    "id": 604,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 605,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads and prints each line of a file specified by the given file path."
  },
  {
    "id": 606,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "Reads and prints each line from a specified file, handling any I/O exceptions that occur."
  },
  {
    "id": 607,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 608,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContent(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            contentBuilder.append(line).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by its file path and returns it as a single string."
  },
  {
    "id": 609,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 610,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "This function reads and prints each line of a specified file using a BufferedReader."
  },
  {
    "id": 611,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}",
    "summary": "This function reads the entire content of a file specified by its path into a single string, with each line separated by a system line separator."
  },
  {
    "id": 612,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder fileContent = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            fileContent.append(line).append(System.lineSeparator());\n        }\n    }\n    return fileContent.toString();\n}\n```",
    "summary": "Reads a text file from the specified path and returns its entire content as a string."
  },
  {
    "id": 613,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 614,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 615,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "Reads and returns the first line from a specified file using a BufferedReader."
  },
  {
    "id": 616,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 617,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = bufferedReader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "This function reads a file line-by-line from the specified path and prints each line to the console."
  },
  {
    "id": 618,
    "code": "```java\npublic static List<String> readLinesFromFile(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            lines.add(line);\n        }\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 619,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 620,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 621,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the file path."
  },
  {
    "id": 622,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "This function reads the entire contents of a file specified by its path and returns it as a single string."
  },
  {
    "id": 623,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 624,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "This function reads a file line-by-line from the specified path and prints each line to the console."
  },
  {
    "id": 625,
    "code": "```java\npublic static List<String> readLinesFromFile(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            lines.add(line);\n        }\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 626,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 627,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void countLinesInFile(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        int lineCount = 0;\n        while (br.readLine() != null) {\n            lineCount++;\n        }\n        System.out.println(\"Total lines: \" + lineCount);\n    } catch (IOException e) {\n        System.err.println(\"An error occurred: \" + e.getMessage());\n    }\n}\n```",
    "summary": "This function counts and prints the total number of lines in a specified file."
  },
  {
    "id": 628,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = bufferedReader.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "Reads and prints each line from a specified file using a BufferedReader."
  },
  {
    "id": 629,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class FileProcessor {\n    public static String readFirstLine(String filePath) throws IOException {\n        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n            return reader.readLine();\n        }\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 630,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 631,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 632,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a file specified by its file path."
  },
  {
    "id": 633,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}",
    "summary": "Reads the entire contents of a file specified by the file path and returns it as a string."
  },
  {
    "id": 634,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class FileProcessor {\n\n    public static String readFirstLine(String filePath) throws IOException {\n        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n            return br.readLine();\n        }\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 635,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "Reads and prints each line of a specified file using a buffered reader."
  },
  {
    "id": 636,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads and returns the entire contents of a file as a String, given the file path."
  },
  {
    "id": 637,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the file path."
  },
  {
    "id": 638,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder fileContent = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            fileContent.append(line).append(System.lineSeparator());\n        }\n    }\n    return fileContent.toString();\n}\n```",
    "summary": "This function reads the contents of a file specified by its path and returns it as a single string."
  },
  {
    "id": 639,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "Reads and prints each line of a specified file using buffered reading."
  },
  {
    "id": 640,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a BufferedReader."
  },
  {
    "id": 641,
    "code": "```java\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic static void appendToFile(String filePath, String content) throws IOException {\n    File file = new File(filePath);\n    try (FileWriter writer = new FileWriter(file, true)) {\n        writer.write(content);\n    }\n}\n```",
    "summary": "Appends the specified content to a file at the given file path."
  },
  {
    "id": 642,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "Reads and prints each line of a file specified by the file path."
  },
  {
    "id": 643,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 644,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads a file from the given file path and prints each line to the console."
  },
  {
    "id": 645,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    } catch (IOException e) {\n        e.printStackTrace();\n        return null;\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file, handling potential IO exceptions."
  },
  {
    "id": 646,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file using a BufferedReader."
  },
  {
    "id": 647,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 648,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 649,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads and prints each line of a file specified by the given file path."
  },
  {
    "id": 650,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFile(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads a file from the specified path and returns its contents as a string."
  },
  {
    "id": 651,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 652,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads a text file from the given path and returns its entire content as a single string."
  },
  {
    "id": 653,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"An error occurred while reading the file: \" + e.getMessage());\n    }\n}",
    "summary": "This function reads and prints each line of a file specified by its file path."
  },
  {
    "id": 654,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 655,
    "code": "```java\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.file.Files;\n\npublic static String readFileContents(String filePath) throws IOException {\n    return new String(Files.readAllBytes(new File(filePath).toPath()));\n}\n```",
    "summary": "Reads the entire content of a file specified by its path into a string."
  },
  {
    "id": 656,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the content of a file specified by `filePath` into a single string, including line separators."
  },
  {
    "id": 657,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the file path."
  },
  {
    "id": 658,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 659,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineOfFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 660,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "Reads and prints each line of a file specified by the given file path."
  },
  {
    "id": 661,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "This function reads and prints each line of a specified file."
  },
  {
    "id": 662,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 663,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String currentLine;\n        while ((currentLine = br.readLine()) != null) {\n            contentBuilder.append(currentLine).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "This function reads the entire content of a file specified by its path into a single string, including line breaks."
  },
  {
    "id": 664,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 665,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "Reads and prints each line of a file specified by the given file path."
  },
  {
    "id": 666,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 667,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "This function reads and prints each line from a specified file, handling any IOExceptions that may occur."
  },
  {
    "id": 668,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line of a file specified by its file path."
  },
  {
    "id": 669,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            contentBuilder.append(line).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads the contents of a file specified by its path and returns it as a single string."
  },
  {
    "id": 670,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "This function reads the content of a file specified by its path and returns it as a single string."
  },
  {
    "id": 671,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "This function reads and prints each line from a specified file, handling any IOExceptions that may occur."
  },
  {
    "id": 672,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "Reads and returns the first line from a specified file, using a buffered reader for efficient processing."
  },
  {
    "id": 673,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString().trim();\n}",
    "summary": "The function reads and returns the entire contents of a file as a string, given its file path."
  },
  {
    "id": 674,
    "code": "```java\npublic static List<String> readLinesFromFile(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            lines.add(line);\n        }\n    }\n    return lines;\n}\n```",
    "summary": "This function reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 675,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 676,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a BufferedReader."
  },
  {
    "id": 677,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 678,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineOfFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line of a specified file using a BufferedReader."
  },
  {
    "id": 679,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "This function reads the entire content of a file specified by `filePath` and returns it as a single `String`."
  },
  {
    "id": 680,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire contents of a file specified by the file path and returns it as a string."
  },
  {
    "id": 681,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 682,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads the first line from a file specified by the given file path."
  },
  {
    "id": 683,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file using its file path."
  },
  {
    "id": 684,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by its path into a single string."
  },
  {
    "id": 685,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a buffered reader."
  },
  {
    "id": 686,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "Reads a file line by line and prints each line to the standard output."
  },
  {
    "id": 687,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "Reads and prints each line of a specified file using buffered reading."
  },
  {
    "id": 688,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileAsString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String currentLine;\n        while ((currentLine = br.readLine()) != null) {\n            contentBuilder.append(currentLine).append(\"\\n\");\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads the contents of a file and returns it as a single string."
  },
  {
    "id": 689,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContent(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by its path and returns it as a string."
  },
  {
    "id": 690,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 691,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 692,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 693,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}",
    "summary": "This function reads and returns the first line from a specified text file."
  },
  {
    "id": 694,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void readFileAndPrintLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads a file line by line from the specified path and prints each line to the console."
  },
  {
    "id": 695,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 696,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void readFileLineByLine(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads a file line by line and prints each line to the console."
  },
  {
    "id": 697,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the file path."
  },
  {
    "id": 698,
    "code": "```java\npublic static List<String> readLinesFromFile(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            lines.add(line);\n        }\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 699,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            contentBuilder.append(line).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "This function reads a file from the specified path and returns its content as a single string."
  },
  {
    "id": 700,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void countLinesInFile(String filePath) throws IOException {\n    int lineCount = 0;\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        while (reader.readLine() != null) {\n            lineCount++;\n        }\n    }\n    System.out.println(\"Total lines: \" + lineCount);\n}\n```",
    "summary": "This function counts and prints the number of lines in a specified file."
  },
  {
    "id": 701,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}",
    "summary": "Reads and returns the first line of a file specified by the file path."
  },
  {
    "id": 702,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "This function reads the contents of a file specified by its path and returns it as a single string."
  },
  {
    "id": 703,
    "code": "```java\npublic static List<String> readLinesFromFile(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            lines.add(line);\n        }\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a list of strings."
  },
  {
    "id": 704,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "Reads and prints each line of a specified file to the console."
  },
  {
    "id": 705,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "This function reads and prints each line from a specified file."
  },
  {
    "id": 706,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLinesContaining(String filePath, String keyword) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            if (line.contains(keyword)) {\n                System.out.println(line);\n            }\n        }\n    }\n}\n```",
    "summary": "The function reads a file line by line and prints lines that contain a specified keyword."
  },
  {
    "id": 707,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 708,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "Reads and prints each line from a specified file using a buffered reader."
  },
  {
    "id": 709,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 710,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a file into a single string, including line separators."
  },
  {
    "id": 711,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class FileProcessor {\n    public static void readFileAndPrintLines(String filePath) {\n        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n            String line;\n            while ((line = br.readLine()) != null) {\n                System.out.println(line);\n            }\n        } catch (IOException e) {\n            System.err.println(\"Error reading file: \" + e.getMessage());\n        }\n    }\n}\n```",
    "summary": "Reads a file line by line and prints each line to the standard output."
  },
  {
    "id": 712,
    "code": "```java\nimport java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic static void writeLinesToFile(String filePath, List<String> lines) throws IOException {\n    try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {\n        for (String line : lines) {\n            writer.write(line);\n            writer.newLine();\n        }\n    }\n}\n```",
    "summary": "Writes a list of strings to a specified file, each string on a new line."
  },
  {
    "id": 713,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 714,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineOfFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by its file path."
  },
  {
    "id": 715,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire contents of a file specified by `filePath` and returns it as a single string."
  },
  {
    "id": 716,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire contents of a file specified by `filePath` into a single `String`."
  },
  {
    "id": 717,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            contentBuilder.append(line).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads the contents of a file at the specified path into a single string."
  },
  {
    "id": 718,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 719,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using buffered I/O in Java."
  },
  {
    "id": 720,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 721,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "This function reads and prints each line of a file specified by its file path."
  },
  {
    "id": 722,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the file path."
  },
  {
    "id": 723,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void countLinesInFile(String filePath) {\n    int lineCount = 0;\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        while (reader.readLine() != null) {\n            lineCount++;\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    System.out.println(\"Total number of lines: \" + lineCount);\n}\n```",
    "summary": "This function counts and prints the total number of lines in a specified file."
  },
  {
    "id": 724,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 725,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by its path into a single string."
  },
  {
    "id": 726,
    "code": "```java\nimport java.io.File;\nimport java.io.IOException;\n\npublic static void createFileIfNotExists(String filePath) throws IOException {\n    File file = new File(filePath);\n    if (!file.exists()) {\n        if (file.createNewFile()) {\n            System.out.println(\"File created: \" + file.getName());\n        } else {\n            System.out.println(\"Failed to create the file.\");\n        }\n    } else {\n        System.out.println(\"File already exists.\");\n    }\n}\n```",
    "summary": "Creates a new file at the specified path if it does not already exist."
  },
  {
    "id": 727,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire contents of a file specified by `filePath` and returns it as a single string."
  },
  {
    "id": 728,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 729,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 730,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 731,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 732,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file path."
  },
  {
    "id": 733,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "This function reads and prints each line of a file specified by the given file path."
  },
  {
    "id": 734,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file given its file path."
  },
  {
    "id": 735,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String currentLine;\n        while ((currentLine = br.readLine()) != null) {\n            contentBuilder.append(currentLine).append(\"\\n\");\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads the contents of a file into a single String, appending a newline after each line."
  },
  {
    "id": 736,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the file path."
  },
  {
    "id": 737,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a buffered reader."
  },
  {
    "id": 738,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 739,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"An error occurred while reading the file: \" + e.getMessage());\n    }\n}",
    "summary": "This function reads a file line-by-line from the specified path and prints each line to the console."
  },
  {
    "id": 740,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 741,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 742,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            contentBuilder.append(line).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}",
    "summary": "Reads the content of a file specified by its path and returns it as a single string."
  },
  {
    "id": 743,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLinesContainingKeyword(String filePath, String keyword) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            if (line.contains(keyword)) {\n                System.out.println(line);\n            }\n        }\n    }\n}\n```",
    "summary": "This function reads a file line by line and prints lines containing a specified keyword."
  },
  {
    "id": 744,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 745,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFile(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the contents of a file specified by its file path and returns it as a single string."
  },
  {
    "id": 746,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Prints each line of a specified file to the console using a buffered reader."
  },
  {
    "id": 747,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 748,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads and prints each line from a specified file to the console."
  },
  {
    "id": 749,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "This function reads a file line-by-line from the given file path and prints each line to the console."
  },
  {
    "id": 750,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 751,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 752,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = bufferedReader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire contents of a file specified by its path into a single string."
  },
  {
    "id": 753,
    "code": "```java\npublic static List<String> readFileLines(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            lines.add(line);\n        }\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 754,
    "code": "```java\npublic static List<String> readLinesFromFile(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            lines.add(line);\n        }\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file and returns them as a list of strings."
  },
  {
    "id": 755,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString().trim();\n}\n```",
    "summary": "Reads and returns the contents of a file specified by the path as a single string."
  },
  {
    "id": 756,
    "code": "```java\npublic static List<String> readLinesFromFile(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            lines.add(line);\n        }\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a list of strings."
  },
  {
    "id": 757,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            contentBuilder.append(line).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "This function reads a file from the specified path and returns its entire content as a single string."
  },
  {
    "id": 758,
    "code": "```java\nimport java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic static void writeToFile(String filePath, String content) throws IOException {\n    try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {\n        writer.write(content);\n    }\n}\n```",
    "summary": "Writes the specified content to a file at the given file path using a buffered writer."
  },
  {
    "id": 759,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line of a file specified by the file path."
  },
  {
    "id": 760,
    "code": "```java\npublic static List<String> readLinesFromFile(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            lines.add(line);\n        }\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file at the given path and returns them as a list of strings."
  },
  {
    "id": 761,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a file specified by its file path."
  },
  {
    "id": 762,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line of a text file specified by the given file path."
  },
  {
    "id": 763,
    "code": "```java\npublic static List<String> readLinesFromFile(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            lines.add(line);\n        }\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 764,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String currentLine;\n        while ((currentLine = br.readLine()) != null) {\n            contentBuilder.append(currentLine).append(\"\\n\");\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by a file path into a single string."
  },
  {
    "id": 765,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 766,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 767,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a text file given its file path."
  },
  {
    "id": 768,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the contents of a file specified by `filePath` into a single `String`."
  },
  {
    "id": 769,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a file into a single string, preserving line breaks."
  },
  {
    "id": 770,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the content of a file specified by the given file path and returns it as a single string."
  },
  {
    "id": 771,
    "code": "```java\npublic static List<String> readLinesFromFile(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            lines.add(line);\n        }\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file and returns them as a list of strings."
  },
  {
    "id": 772,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String currentLine;\n        while ((currentLine = br.readLine()) != null) {\n            contentBuilder.append(currentLine).append(\"\\n\");\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by its path into a single string."
  },
  {
    "id": 773,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the file path."
  },
  {
    "id": 774,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContent(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by the file path and returns it as a single string."
  },
  {
    "id": 775,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}",
    "summary": "This function reads a file line by line from a specified path and prints each line to the console."
  },
  {
    "id": 776,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads and prints each line from a file specified by its file path."
  },
  {
    "id": 777,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = bufferedReader.readLine()) != null) {\n            contentBuilder.append(line).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads the contents of a file specified by its path and returns it as a single string."
  },
  {
    "id": 778,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "Reads and prints each line of a file specified by the file path."
  },
  {
    "id": 779,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 780,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 781,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "This function reads and prints each line of a specified file using a buffered reader."
  },
  {
    "id": 782,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void countLinesInFile(String filePath) {\n    int lineCount = 0;\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        while (reader.readLine() != null) {\n            lineCount++;\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n    System.out.println(\"Total lines: \" + lineCount);\n}\n```",
    "summary": "Counts and prints the number of lines in a specified file."
  },
  {
    "id": 783,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}",
    "summary": "Reads and returns the first line from a specified file using a BufferedReader."
  },
  {
    "id": 784,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "Reads and prints each line of a specified file to the console, handling potential I/O exceptions."
  },
  {
    "id": 785,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFirstLineOfFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String firstLine = reader.readLine();\n        if (firstLine != null) {\n            System.out.println(firstLine);\n        }\n    }\n}\n```",
    "summary": "This function reads and prints the first line of a specified file."
  },
  {
    "id": 786,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContent(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads and returns the entire content of a file as a String using a BufferedReader."
  },
  {
    "id": 787,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a text file specified by its path into a single string."
  },
  {
    "id": 788,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 789,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line of a file specified by its file path."
  },
  {
    "id": 790,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 791,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileAsString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String currentLine;\n        while ((currentLine = br.readLine()) != null) {\n            contentBuilder.append(currentLine).append(\"\\n\");\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "This function reads the contents of a file specified by its path and returns it as a single string."
  },
  {
    "id": 792,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic static List<String> readLinesFromFile(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            lines.add(line);\n        }\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by its path and returns them as a list of strings."
  },
  {
    "id": 793,
    "code": "```java\nimport java.nio.file.*;\nimport java.io.IOException;\nimport java.util.List;\n\npublic static List<String> readLinesFromFile(String filePath) throws IOException {\n    return Files.readAllLines(Paths.get(filePath));\n}\n```",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 794,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 795,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void countLinesInFile(String filePath) {\n    int lineCount = 0;\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        while (reader.readLine() != null) {\n            lineCount++;\n        }\n        System.out.println(\"Total lines: \" + lineCount);\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "Counts and prints the number of lines in a file specified by the file path."
  },
  {
    "id": 796,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 797,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void countLinesInFile(String filePath) {\n    int lineCount = 0;\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        while (reader.readLine() != null) {\n            lineCount++;\n        }\n    } catch (IOException e) {\n        System.err.println(\"An error occurred: \" + e.getMessage());\n    }\n    System.out.println(\"Total lines: \" + lineCount);\n}\n```",
    "summary": "This function counts and prints the number of lines in a specified file."
  },
  {
    "id": 798,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 799,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a text file specified by the given file path."
  },
  {
    "id": 800,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 801,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 802,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}",
    "summary": "Reads the contents of a file from a specified path into a single string."
  },
  {
    "id": 803,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 804,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 805,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 806,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}",
    "summary": "Reads the entire contents of a file specified by its path and returns it as a string."
  },
  {
    "id": 807,
    "code": "```java\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            contentBuilder.append(line).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString().trim();\n}\n```",
    "summary": "Reads the contents of a file specified by `filePath` into a single string."
  },
  {
    "id": 808,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 809,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContent(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}",
    "summary": "This function reads and returns the entire content of a file specified by its file path."
  },
  {
    "id": 810,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 811,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file using buffered reading."
  },
  {
    "id": 812,
    "code": "```java\npublic static List<String> readLinesFromFile(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            lines.add(line);\n        }\n    }\n    return lines;\n}\n```",
    "summary": "This function reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 813,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads the first line from a specified file and returns it as a string."
  },
  {
    "id": 814,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 815,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads a file from the given path and returns its content as a single string."
  },
  {
    "id": 816,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 817,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 818,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 819,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 820,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the contents of a file specified by the file path into a single string, appending a line separator after each line."
  },
  {
    "id": 821,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 822,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a BufferedReader."
  },
  {
    "id": 823,
    "code": "```java\npublic static List<String> readLinesFromFile(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            lines.add(line);\n        }\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 824,
    "code": "```java\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic static void copyFile(String sourcePath, String destinationPath) throws IOException {\n    File sourceFile = new File(sourcePath);\n    File destinationFile = new File(destinationPath);\n    if (!sourceFile.exists()) {\n        throw new IOException(\"Source file does not exist: \" + sourcePath);\n    }\n    Files.copy(Paths.get(sourcePath), Paths.get(destinationPath));\n}\n```",
    "summary": "This function copies a file from a source path to a destination path, throwing an exception if the source file does not exist."
  },
  {
    "id": 825,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            contentBuilder.append(line).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads the entire contents of a file at a given path and returns it as a string."
  },
  {
    "id": 826,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the contents of a specified file into a single String, preserving line breaks."
  },
  {
    "id": 827,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "The function reads and prints each line from a file specified by the given file path."
  },
  {
    "id": 828,
    "code": "```java\npublic static List<String> readLinesFromFile(String filePath) {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            lines.add(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by the file path into a list of strings."
  },
  {
    "id": 829,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire contents of a file specified by `filePath` into a single string."
  },
  {
    "id": 830,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line of a file specified by its path."
  },
  {
    "id": 831,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "This function reads the contents of a file specified by the file path and returns it as a single string."
  },
  {
    "id": 832,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 833,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String sCurrentLine;\n        while ((sCurrentLine = br.readLine()) != null) {\n            contentBuilder.append(sCurrentLine).append(\"\\n\");\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "This function reads the entire content of a file specified by its path into a single string."
  },
  {
    "id": 834,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 835,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}",
    "summary": "This function reads a file line by line and prints each line to the console."
  },
  {
    "id": 836,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            contentBuilder.append(line).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString().trim();\n}\n```",
    "summary": "Reads a file from a given path and returns its content as a single string."
  },
  {
    "id": 837,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 838,
    "code": "```java\npublic static List<String> readFileLines(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            lines.add(line);\n        }\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 839,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static int countLinesInFile(String filePath) throws IOException {\n    int lineCount = 0;\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        while (reader.readLine() != null) {\n            lineCount++;\n        }\n    }\n    return lineCount;\n}\n```",
    "summary": "Counts and returns the number of lines in a specified file."
  },
  {
    "id": 840,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFile(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "This function reads the content of a file specified by its path and returns it as a single string."
  },
  {
    "id": 841,
    "code": "```java\nimport java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic static void writeToFile(String filePath, String content) throws IOException {\n    try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {\n        writer.write(content);\n    }\n}\n```",
    "summary": "Writes the specified content to a file at the given file path using buffered writing."
  },
  {
    "id": 842,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "Reads and prints each line of a file specified by its path."
  },
  {
    "id": 843,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 844,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String currentLine;\n        while ((currentLine = br.readLine()) != null) {\n            contentBuilder.append(currentLine).append(\"\\n\");\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads a file from the specified path and returns its content as a single string."
  },
  {
    "id": 845,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 846,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by `filePath` into a single `String`."
  },
  {
    "id": 847,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 848,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "Reads and prints each line of a specified file, handling any I/O exceptions."
  },
  {
    "id": 849,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineOfFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a specified file."
  },
  {
    "id": 850,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 851,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 852,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 853,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 854,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "Reads and prints each line of a file specified by the file path."
  },
  {
    "id": 855,
    "code": "```java\nimport java.nio.file.*;\nimport java.io.IOException;\n\npublic static void copyFile(String sourcePath, String destinationPath) throws IOException {\n    Path source = Paths.get(sourcePath);\n    Path destination = Paths.get(destinationPath);\n    Files.copy(source, destination, StandardCopyOption.REPLACE_EXISTING);\n}\n```",
    "summary": "This function copies a file from a source path to a destination path, replacing the destination file if it exists."
  },
  {
    "id": 856,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}",
    "summary": "Reads the entire contents of a file specified by its path and returns it as a string."
  },
  {
    "id": 857,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    } catch (IOException e) {\n        e.printStackTrace();\n        return null;\n    }\n}",
    "summary": "Reads and returns the first line from a specified file path, handling any IOExceptions."
  },
  {
    "id": 858,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from the specified file."
  },
  {
    "id": 859,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic static List<String> readLinesFromFile(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            lines.add(line);\n        }\n    }\n    return lines;\n}",
    "summary": "Reads all lines from a specified file into a list of strings."
  },
  {
    "id": 860,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by the file path into a string."
  },
  {
    "id": 861,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a text file specified by its file path."
  },
  {
    "id": 862,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads and prints each line of a file specified by the file path."
  },
  {
    "id": 863,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "Reads and prints each line from a specified file using a BufferedReader."
  },
  {
    "id": 864,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads and prints each line from a specified file, handling any I/O exceptions that occur."
  },
  {
    "id": 865,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String currentLine;\n        while ((currentLine = br.readLine()) != null) {\n            contentBuilder.append(currentLine).append(\"\\n\");\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads a file from the given path and returns its contents as a single string."
  },
  {
    "id": 866,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a BufferedReader."
  },
  {
    "id": 867,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "Reads and prints each line from a file specified by its file path."
  },
  {
    "id": 868,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 869,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "This function reads the contents of a file from a given file path and returns it as a string."
  },
  {
    "id": 870,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}",
    "summary": "This function reads and prints each line of a file specified by the given file path."
  },
  {
    "id": 871,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "This function reads and prints each line of a text file specified by its file path."
  },
  {
    "id": 872,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    } catch (IOException e) {\n        e.printStackTrace();\n        return null;\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 873,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the contents of a file specified by `filePath` into a single `String`."
  },
  {
    "id": 874,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 875,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileAsString(String filePath) throws IOException {\n    StringBuilder fileContent = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            fileContent.append(line).append(System.lineSeparator());\n        }\n    }\n    return fileContent.toString();\n}\n```",
    "summary": "Reads the entire content of a file into a single string, with lines separated by the system line separator."
  },
  {
    "id": 876,
    "code": "```\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    } catch (IOException e) {\n        e.printStackTrace();\n        return null;\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 877,
    "code": "```java\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\n\npublic static void copyFile(String sourcePath, String destinationPath) throws IOException {\n    File sourceFile = new File(sourcePath);\n    File destinationFile = new File(destinationPath);\n    if (!sourceFile.exists()) {\n        throw new IOException(\"Source file does not exist.\");\n    }\n    if (destinationFile.exists()) {\n        throw new IOException(\"Destination file already exists.\");\n    }\n    Files.copy(sourceFile.toPath(), destinationFile.toPath());\n}\n```",
    "summary": "This function copies a file from a source path to a destination path, throwing an exception if the source file doesn't exist or the destination file already exists."
  },
  {
    "id": 878,
    "code": "```java\npublic void writeFile(String fileName, String content) throws IOException {\n    try (BufferedWriter writer = new BufferedWriter(new FileWriter(fileName))) {\n        writer.write(content);\n    }\n}\n```",
    "summary": "Writes the specified content to a file, creating the file if it doesn't exist."
  },
  {
    "id": 879,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a buffered reader."
  },
  {
    "id": 880,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads and prints each line of a file specified by its file path."
  },
  {
    "id": 881,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 882,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the contents of a file specified by `filePath` into a single string, preserving line breaks."
  },
  {
    "id": 883,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 884,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            contentBuilder.append(line).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads a text file from the specified path and returns its content as a single string."
  },
  {
    "id": 885,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileFirstLine(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    } catch (IOException e) {\n        e.printStackTrace();\n        return null;\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 886,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineOfFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 887,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line of a specified file using a BufferedReader in Java."
  },
  {
    "id": 888,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a buffered reader."
  },
  {
    "id": 889,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder fileContents = new StringBuilder();\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = bufferedReader.readLine()) != null) {\n            fileContents.append(line).append(System.lineSeparator());\n        }\n    }\n    return fileContents.toString();\n}\n```",
    "summary": "Reads a file from the specified path and returns its contents as a single string."
  },
  {
    "id": 890,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "Reads and returns the first line from a given file using a BufferedReader."
  },
  {
    "id": 891,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by the file path into a single string."
  },
  {
    "id": 892,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 893,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the file path."
  },
  {
    "id": 894,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a buffered reader."
  },
  {
    "id": 895,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 896,
    "code": "```java\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.util.List;\n\npublic static List<String> readLinesFromFile(String filePath) throws IOException {\n    File file = new File(filePath);\n    return Files.readAllLines(file.toPath());\n}\n```",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 897,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstNLines(String filePath, int n) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        int count = 0;\n        while ((line = reader.readLine()) != null && count < n) {\n            content.append(line).append(System.lineSeparator());\n            count++;\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads and returns the first N lines of a file specified by the file path."
  },
  {
    "id": 898,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 899,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the contents of a file specified by the file path and returns it as a single string."
  },
  {
    "id": 900,
    "code": "```java\npublic static List<String> readLinesFromFile(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            lines.add(line);\n        }\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 901,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    } catch (IOException e) {\n        e.printStackTrace();\n        return null;\n    }\n}",
    "summary": "This function reads and returns the first line of a file specified by its path."
  },
  {
    "id": 902,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineOfFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line of a specified file."
  },
  {
    "id": 903,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "This function reads a file line by line and prints each line to the console."
  },
  {
    "id": 904,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineOfFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by its path."
  },
  {
    "id": 905,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}",
    "summary": "Reads and returns the first line from a specified file using a BufferedReader."
  },
  {
    "id": 906,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic void printFileLinesContainingWord(String filePath, String word) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            if (line.contains(word)) {\n                System.out.println(line);\n            }\n        }\n    }\n}\n```",
    "summary": "This function reads a file line-by-line and prints lines that contain a specified word."
  },
  {
    "id": 907,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 908,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the file path."
  },
  {
    "id": 909,
    "code": "```java\nimport java.nio.file.*;\nimport java.io.IOException;\nimport java.util.List;\n\npublic static List<String> readLinesFromFile(String path) throws IOException {\n    return Files.readAllLines(Paths.get(path));\n}\n```",
    "summary": "Reads all lines from a file at the specified path into a list of strings."
  },
  {
    "id": 910,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileAsString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String currentLine;\n        while ((currentLine = br.readLine()) != null) {\n            contentBuilder.append(currentLine).append(\"\\n\");\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads a file from the specified path and returns its contents as a single string."
  },
  {
    "id": 911,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 912,
    "code": "```java\nimport java.io.*;\n\npublic static void appendToFile(String filePath, String content) throws IOException {\n    try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath, true))) {\n        writer.write(content);\n        writer.newLine();\n    }\n}\n```",
    "summary": "Appends the specified content to a file, creating a new line at the end."
  },
  {
    "id": 913,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "This function reads a file line by line from a specified path and prints each line to the console."
  },
  {
    "id": 914,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic void printFileLinesContaining(String filePath, String keyword) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            if (line.contains(keyword)) {\n                System.out.println(line);\n            }\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads a file line by line and prints lines containing a specified keyword."
  },
  {
    "id": 915,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "Reads and prints each line of a text file specified by its file path."
  },
  {
    "id": 916,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 917,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a file specified by its file path."
  },
  {
    "id": 918,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a buffered reader."
  },
  {
    "id": 919,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 920,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String currentLine;\n        while ((currentLine = br.readLine()) != null) {\n            contentBuilder.append(currentLine).append(\"\\n\");\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads the entire contents of a file specified by `filePath` into a single string with lines separated by newline characters."
  },
  {
    "id": 921,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 922,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "Reads and prints each line from a specified file using a BufferedReader."
  },
  {
    "id": 923,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 924,
    "code": "```java\npublic static void writeStringToFile(String filePath, String content) throws IOException {\n    try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {\n        writer.write(content);\n    }\n}\n```",
    "summary": "Writes a string to a file at the specified path using a BufferedWriter."
  },
  {
    "id": 925,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the contents of a file specified by its path and returns it as a string."
  },
  {
    "id": 926,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a text file specified by the file path."
  },
  {
    "id": 927,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void readFileAndPrintLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}",
    "summary": "This function reads a file line by line from the specified path and prints each line to the console."
  },
  {
    "id": 928,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void readFileAndPrintLines(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "Reads a file line by line and prints each line to the console."
  },
  {
    "id": 929,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 930,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "Reads a file line by line from the specified path and prints each line to the console."
  },
  {
    "id": 931,
    "code": "```java\npublic static List<String> readLinesFromFile(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            lines.add(line);\n        }\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by `filePath` into a list of strings."
  },
  {
    "id": 932,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "This function reads and returns the first line of a specified file."
  },
  {
    "id": 933,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}",
    "summary": "This function reads a file line by line from a given file path and prints each line to the console."
  },
  {
    "id": 934,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "This function reads and returns the first line of a text file specified by the file path."
  },
  {
    "id": 935,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String currentLine;\n        while ((currentLine = br.readLine()) != null) {\n            contentBuilder.append(currentLine).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by its path into a single string."
  },
  {
    "id": 936,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads and prints each line of a specified file to the console, handling any IO exceptions."
  },
  {
    "id": 937,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "This function reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 938,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void readAndPrintFile(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}",
    "summary": "This function reads a file line by line from the specified path and prints each line to the console."
  },
  {
    "id": 939,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}",
    "summary": "Reads a file line by line and prints each line to the console."
  },
  {
    "id": 940,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 941,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire contents of a file specified by the file path into a single string, handling IO exceptions."
  },
  {
    "id": 942,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a buffered reader."
  },
  {
    "id": 943,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 944,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLinesContainingKeyword(String filePath, String keyword) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            if (line.contains(keyword)) {\n                System.out.println(line);\n            }\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads a file line by line and prints lines that contain a specified keyword."
  },
  {
    "id": 945,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "This function reads a file line-by-line from the specified path and prints each line to the console."
  },
  {
    "id": 946,
    "code": "```java\npublic static List<String> readLinesFromFile(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = bufferedReader.readLine()) != null) {\n            lines.add(line);\n        }\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a list of strings."
  },
  {
    "id": 947,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileContents(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "Reads and prints the contents of a file line by line from the specified file path."
  },
  {
    "id": 948,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads and returns the entire contents of a file as a single string, appending a system line separator after each line."
  },
  {
    "id": 949,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 950,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 951,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "This function reads the contents of a file into a single string, appending a newline after each line."
  },
  {
    "id": 952,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "This function reads a file from the given path and returns its content as a single string."
  },
  {
    "id": 953,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file path."
  },
  {
    "id": 954,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileContents(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "This function reads and prints each line of a specified file, handling any IOExceptions encountered."
  },
  {
    "id": 955,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads and prints each line of a file specified by the file path, handling any IOExceptions."
  },
  {
    "id": 956,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "The function reads and returns the first line from a specified file."
  },
  {
    "id": 957,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "Reads and prints each line from a specified file using a BufferedReader."
  },
  {
    "id": 958,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 959,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "This function reads the contents of a file specified by its path and returns the content as a single string."
  },
  {
    "id": 960,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "Reads and prints each line from a specified file to the console."
  },
  {
    "id": 961,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "This function reads and returns the first line of a file specified by its file path."
  },
  {
    "id": 962,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFile(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String currentLine;\n        while ((currentLine = br.readLine()) != null) {\n            contentBuilder.append(currentLine).append(\"\\n\");\n        }\n    }\n    return contentBuilder.toString();\n}",
    "summary": "Reads the contents of a file from the given file path and returns it as a string."
  },
  {
    "id": 963,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 964,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the file path."
  },
  {
    "id": 965,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class FileProcessor {\n    public static String readFileContents(String filePath) throws IOException {\n        StringBuilder content = new StringBuilder();\n        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                content.append(line).append(System.lineSeparator());\n            }\n        }\n        return content.toString();\n    }\n}\n```",
    "summary": "Reads and returns the entire contents of a file as a single string."
  },
  {
    "id": 966,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 967,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads and prints each line from a file specified by the given file path."
  },
  {
    "id": 968,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineOfFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 969,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a buffered reader."
  },
  {
    "id": 970,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 971,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 972,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the contents of a file into a single string, preserving line breaks."
  },
  {
    "id": 973,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "This function reads the content of a file specified by its path and returns it as a single string."
  },
  {
    "id": 974,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line of a file given its file path."
  },
  {
    "id": 975,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class FileProcessor {\n\n    public static String readFirstLine(String filePath) throws IOException {\n        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n            return br.readLine();\n        }\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 976,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 977,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 978,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "Reads and prints each line of a text file specified by the file path."
  },
  {
    "id": 979,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by its file path."
  },
  {
    "id": 980,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void readLinesFromFile(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads and prints each line from a file specified by the given file path."
  },
  {
    "id": 981,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "This function reads a file line by line and prints each line to the console."
  },
  {
    "id": 982,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String currentLine;\n        while ((currentLine = br.readLine()) != null) {\n            contentBuilder.append(currentLine).append(\"\\n\");\n        }\n    }\n    return contentBuilder.toString();\n}",
    "summary": "This function reads the contents of a file specified by its path and returns it as a single string."
  },
  {
    "id": 983,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the contents of a file specified by `filePath` into a single `String` with line separators."
  },
  {
    "id": 984,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 985,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "Reads a file line by line from the given file path and prints each line to the console."
  },
  {
    "id": 986,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 987,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 988,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 989,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 990,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads a file from the specified path and returns its entire content as a single string."
  },
  {
    "id": 991,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the contents of a file specified by the file path into a single string."
  },
  {
    "id": 992,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 993,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileAsString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String currentLine;\n        while ((currentLine = br.readLine()) != null) {\n            contentBuilder.append(currentLine).append(\"\\n\");\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads the entire contents of a specified file into a single string."
  },
  {
    "id": 994,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            contentBuilder.append(line).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "This function reads the contents of a file and returns it as a single string."
  },
  {
    "id": 995,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a BufferedReader."
  },
  {
    "id": 996,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 997,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString().trim();\n}\n```",
    "summary": "Reads the entire content of a file located at the specified path and returns it as a trimmed string."
  },
  {
    "id": 998,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 999,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void readFileAndPrintLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads a file line by line from the given file path and prints each line to the console."
  },
  {
    "id": 1000,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "This function reads and prints each line of a file specified by its file path."
  },
  {
    "id": 1001,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1002,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1003,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "Reads and returns the first line from the specified file."
  },
  {
    "id": 1004,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void readFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "This function reads a file line by line and prints each line to the console."
  },
  {
    "id": 1005,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 1006,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line of a file specified by its file path."
  },
  {
    "id": 1007,
    "code": "```java\npublic static List<String> readLinesFromFile(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            lines.add(line);\n        }\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 1008,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Unable to read file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "Reads and prints each line of a text file specified by the file path."
  },
  {
    "id": 1009,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a buffered reader."
  },
  {
    "id": 1010,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 1011,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a BufferedReader."
  },
  {
    "id": 1012,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "This function reads a file line by line from the specified file path and prints each line to the console."
  },
  {
    "id": 1013,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1014,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads a text file from the specified file path and returns its contents as a single string."
  },
  {
    "id": 1015,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a specified file using a buffered reader."
  },
  {
    "id": 1016,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads a file from the given path and returns its content as a string."
  },
  {
    "id": 1017,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from the specified file."
  },
  {
    "id": 1018,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 1019,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1020,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileAsString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            contentBuilder.append(line).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by `filePath` into a single string."
  },
  {
    "id": 1021,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "This function reads and prints each line of a file specified by its file path."
  },
  {
    "id": 1022,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String currentLine;\n        while ((currentLine = br.readLine()) != null) {\n            contentBuilder.append(currentLine).append(\"\\n\");\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by the filePath into a single string, with lines separated by newline characters."
  },
  {
    "id": 1023,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 1024,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "This function reads the content of a file specified by its file path and returns it as a single string."
  },
  {
    "id": 1025,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line of a text file specified by its file path."
  },
  {
    "id": 1026,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineOfFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a specified file."
  },
  {
    "id": 1027,
    "code": "```java\npublic static List<String> readLinesFromFile(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            lines.add(line);\n        }\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a list of strings."
  },
  {
    "id": 1028,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1029,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 1030,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFile(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by `filePath` into a single string, preserving line breaks."
  },
  {
    "id": 1031,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by its path into a single String, including line separators."
  },
  {
    "id": 1032,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "This function reads the entire content of a file specified by the file path and returns it as a single string."
  },
  {
    "id": 1033,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the file path."
  },
  {
    "id": 1034,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1035,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a text file specified by the given file path."
  },
  {
    "id": 1036,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1037,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file at the specified file path."
  },
  {
    "id": 1038,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a text file specified by the file path."
  },
  {
    "id": 1039,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the file path."
  },
  {
    "id": 1040,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the file path."
  },
  {
    "id": 1041,
    "code": "```java\npublic static List<String> readLinesFromFile(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            lines.add(line);\n        }\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 1042,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line of a file specified by its file path."
  },
  {
    "id": 1043,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 1044,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a file specified by its file path."
  },
  {
    "id": 1045,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileContent(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading the file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "Reads and prints the contents of a file line by line from the specified file path."
  },
  {
    "id": 1046,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "This function reads a file line-by-line from the specified file path and prints each line to the console."
  },
  {
    "id": 1047,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the file path."
  },
  {
    "id": 1048,
    "code": "```java\nimport java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic class FileProcessor {\n    public static void appendTextToFile(String filePath, String text) {\n        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath, true))) {\n            writer.write(text);\n            writer.newLine();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```",
    "summary": "Appends a line of text to a specified file, creating the file if it does not exist."
  },
  {
    "id": 1049,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire contents of a file specified by its path and returns it as a string."
  },
  {
    "id": 1050,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 1051,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "Reads and prints each line of a specified file using a BufferedReader."
  },
  {
    "id": 1052,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 1053,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "This function reads a file line by line and prints each line to the console."
  },
  {
    "id": 1054,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1055,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads and prints each line from the specified file using a BufferedReader."
  },
  {
    "id": 1056,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the file path."
  },
  {
    "id": 1057,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a BufferedReader."
  },
  {
    "id": 1058,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads and returns the entire contents of a file as a single string."
  },
  {
    "id": 1059,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by its file path."
  },
  {
    "id": 1060,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "Reads and prints each line from a specified file to the console."
  },
  {
    "id": 1061,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFile(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads a text file from the specified path and returns its content as a single string."
  },
  {
    "id": 1062,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1063,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a specified file."
  },
  {
    "id": 1064,
    "code": "import java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic static void appendToFile(String filePath, String content) {\n    FileWriter fileWriter = null;\n    try {\n        File file = new File(filePath);\n        fileWriter = new FileWriter(file, true);\n        fileWriter.write(content);\n        fileWriter.flush();\n    } catch (IOException e) {\n        e.printStackTrace();\n    } finally {\n        if (fileWriter != null) {\n            try {\n                fileWriter.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}",
    "summary": "This function appends the given content to a file specified by the file path."
  },
  {
    "id": 1065,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified text file."
  },
  {
    "id": 1066,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String currentLine;\n        while ((currentLine = br.readLine()) != null) {\n            contentBuilder.append(currentLine).append(\"\\n\");\n        }\n    }\n    return contentBuilder.toString();\n}",
    "summary": "This function reads the entire content of a file specified by its path and returns it as a single string."
  },
  {
    "id": 1067,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a BufferedReader."
  },
  {
    "id": 1068,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineOfFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 1069,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "This function reads a file line by line and prints each line to the console."
  },
  {
    "id": 1070,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileAsString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String currentLine;\n        while ((currentLine = br.readLine()) != null) {\n            contentBuilder.append(currentLine).append(\"\\n\");\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by its path into a single string."
  },
  {
    "id": 1071,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1072,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a buffered reader."
  },
  {
    "id": 1073,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String currentLine;\n        while ((currentLine = br.readLine()) != null) {\n            contentBuilder.append(currentLine).append(\"\\n\");\n        }\n    }\n    return contentBuilder.toString();\n}",
    "summary": "Reads a file from the given path and returns its content as a single string."
  },
  {
    "id": 1074,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "Reads and returns the first line from a specified file using a BufferedReader."
  },
  {
    "id": 1075,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by the file path into a single string."
  },
  {
    "id": 1076,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "This function reads a file line by line from the specified file path and prints each line to the console."
  },
  {
    "id": 1077,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads the first line from a specified file and returns it as a string."
  },
  {
    "id": 1078,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the file path."
  },
  {
    "id": 1079,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLinesContainingKeyword(String filePath, String keyword) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            if (line.contains(keyword)) {\n                System.out.println(line);\n            }\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "Reads a file line by line and prints lines that contain a specified keyword."
  },
  {
    "id": 1080,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 1081,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the file path."
  },
  {
    "id": 1082,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "This function reads a file from the specified path and returns its contents as a single string."
  },
  {
    "id": 1083,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a file specified by its file path."
  },
  {
    "id": 1084,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "Reads and returns the first line from the specified file."
  },
  {
    "id": 1085,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class FileProcessor {\n    public static int countLinesInFile(String filePath) throws IOException {\n        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n            int lineCount = 0;\n            while (reader.readLine() != null) {\n                lineCount++;\n            }\n            return lineCount;\n        }\n    }\n}",
    "summary": "Counts the number of lines in a specified file using a BufferedReader."
  },
  {
    "id": 1086,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file, handling IO exceptions."
  },
  {
    "id": 1087,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file using a BufferedReader."
  },
  {
    "id": 1088,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "This function reads a file line by line from the given file path and prints each line to the console."
  },
  {
    "id": 1089,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1090,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    } catch (IOException e) {\n        e.printStackTrace();\n        return null;\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 1091,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void readFileLineByLine(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads a file line by line and prints each line to the console."
  },
  {
    "id": 1092,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "This function reads and returns the first line of a file specified by its file path."
  },
  {
    "id": 1093,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "Reads a file line-by-line and prints each line to the console, handling any IO exceptions that occur."
  },
  {
    "id": 1094,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a buffered reader."
  },
  {
    "id": 1095,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFile(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}",
    "summary": "Reads the contents of a file into a single string with line separators preserved."
  },
  {
    "id": 1096,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "This function reads and prints each line of a file specified by its file path."
  },
  {
    "id": 1097,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a file into a single string, preserving line breaks."
  },
  {
    "id": 1098,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 1099,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a buffered reader."
  },
  {
    "id": 1100,
    "code": "```java\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 1101,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the file path."
  },
  {
    "id": 1102,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1103,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by its file path."
  },
  {
    "id": 1104,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic static List<String> readLinesFromFile(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            lines.add(line);\n        }\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 1105,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String path) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(path))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 1106,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a text file specified by the file path into a single string."
  },
  {
    "id": 1107,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified text file."
  },
  {
    "id": 1108,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "This function reads a file line by line and prints each line to the console."
  },
  {
    "id": 1109,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a file specified by its file path."
  },
  {
    "id": 1110,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    } catch (IOException e) {\n        e.printStackTrace();\n        return null;\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file, or null if an error occurs."
  },
  {
    "id": 1111,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1112,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(\"\\n\");\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads and returns the entire content of a file as a string."
  },
  {
    "id": 1113,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads and prints each line from a file specified by the file path."
  },
  {
    "id": 1114,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a file specified by its file path."
  },
  {
    "id": 1115,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 1116,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by `filePath` into a single `String`."
  },
  {
    "id": 1117,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 1118,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a given file."
  },
  {
    "id": 1119,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    } catch (IOException e) {\n        e.printStackTrace();\n        return null;\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 1120,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from the specified file."
  },
  {
    "id": 1121,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a buffered reader."
  },
  {
    "id": 1122,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1123,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1124,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1125,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 1126,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 1127,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}",
    "summary": "This function reads the entire content of a file specified by its file path and returns it as a String."
  },
  {
    "id": 1128,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}",
    "summary": "This function reads and prints each line of a file specified by the given file path."
  },
  {
    "id": 1129,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the content of a file at a given path into a single string, including line breaks."
  },
  {
    "id": 1130,
    "code": "```java\npublic static List<String> readLinesFromFile(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            lines.add(line);\n        }\n    }\n    return lines;\n}\n```",
    "summary": "This function reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 1131,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String currentLine;\n        while ((currentLine = br.readLine()) != null) {\n            contentBuilder.append(currentLine).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "This function reads the contents of a file specified by its path into a single string."
  },
  {
    "id": 1132,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the file path."
  },
  {
    "id": 1133,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1134,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a file into a string, appending a line separator after each line."
  },
  {
    "id": 1135,
    "code": "```java\npublic static List<String> readLinesFromFile(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            lines.add(line);\n        }\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 1136,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String currentLine;\n        while ((currentLine = br.readLine()) != null) {\n            contentBuilder.append(currentLine).append(\"\\n\");\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads a file from the given path and returns its contents as a single string."
  },
  {
    "id": 1137,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "Reads and returns the first line from a specified file using a BufferedReader."
  },
  {
    "id": 1138,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 1139,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1140,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic void readFileAndPrintLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads a file line by line from the specified path and prints each line to the console."
  },
  {
    "id": 1141,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "Reads a text file line by line and prints each line to the standard output."
  },
  {
    "id": 1142,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a text file specified by the file path."
  },
  {
    "id": 1143,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContent(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by its path and returns it as a string."
  },
  {
    "id": 1144,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 1145,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static int countLinesInFile(String filePath) throws IOException {\n    int lineCount = 0;\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        while (reader.readLine() != null) {\n            lineCount++;\n        }\n    }\n    return lineCount;\n}\n```",
    "summary": "Counts the number of lines in a file specified by its file path."
  },
  {
    "id": 1146,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1147,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}",
    "summary": "Reads a file's content and returns it as a single string, with lines separated by system line separators."
  },
  {
    "id": 1148,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}",
    "summary": "This function reads the entire contents of a file at a given path and returns it as a single string."
  },
  {
    "id": 1149,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            contentBuilder.append(line).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}",
    "summary": "This function reads the entire content of a file specified by its path into a single string."
  },
  {
    "id": 1150,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLinesWithNumbers(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        int lineNumber = 1;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(lineNumber + \": \" + line);\n            lineNumber++;\n        }\n    }\n}",
    "summary": "Prints each line of a file prefixed with its line number."
  },
  {
    "id": 1151,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads and prints each line of a specified file to the standard output."
  },
  {
    "id": 1152,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            contentBuilder.append(line).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads a text file from the specified path and returns its contents as a single string."
  },
  {
    "id": 1153,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a text file specified by the file path."
  },
  {
    "id": 1154,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLinesContainingKeyword(String filePath, String keyword) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            if (line.contains(keyword)) {\n                System.out.println(line);\n            }\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads a file and prints lines that contain a specified keyword."
  },
  {
    "id": 1155,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1156,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire contents of a file specified by the file path and returns it as a single string."
  },
  {
    "id": 1157,
    "code": "```java\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.List;\n\npublic static List<String> readFileLines(String filePath) throws IOException {\n    return Files.readAllLines(Path.of(filePath));\n}\n```",
    "summary": "Reads all lines from a file specified by its path and returns them as a list of strings."
  },
  {
    "id": 1158,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "This function reads the entire content of a file specified by its path into a single string."
  },
  {
    "id": 1159,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the contents of a file from the given file path and returns it as a string."
  },
  {
    "id": 1160,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 1161,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineOfFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 1162,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void countLinesInFile(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        int lineCount = 0;\n        while (reader.readLine() != null) {\n            lineCount++;\n        }\n        System.out.println(\"Total number of lines: \" + lineCount);\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "Reads a file and prints the total number of lines it contains, handling any I/O exceptions."
  },
  {
    "id": 1163,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 1164,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLinesContainingKeyword(String filename, String keyword) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filename))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            if (line.contains(keyword)) {\n                System.out.println(line);\n            }\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "This function reads a file line-by-line and prints lines that contain a specified keyword."
  },
  {
    "id": 1165,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "Reads a file line by line and prints each line to the standard output."
  },
  {
    "id": 1166,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads and prints each line of a specified file to the console."
  },
  {
    "id": 1167,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContent(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = bufferedReader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString().trim();\n}\n```",
    "summary": "Reads and returns the entire content of a file as a string, line by line."
  },
  {
    "id": 1168,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 1169,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "This function reads and prints each line of a file specified by the filePath."
  },
  {
    "id": 1170,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire contents of a file specified by the file path and returns it as a single string."
  },
  {
    "id": 1171,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "Reads the first line from a file given its file path."
  },
  {
    "id": 1172,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 1173,
    "code": "```java\npublic static List<String> readFileLines(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            lines.add(line);\n        }\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 1174,
    "code": "```java\nimport java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic void appendToFile(String filePath, String content) throws IOException {\n    try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath, true))) {\n        writer.write(content);\n        writer.newLine();\n    }\n}\n```",
    "summary": "Appends a given string of content to a specified file, creating a new line in the file."
  },
  {
    "id": 1175,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a file specified by the file path."
  },
  {
    "id": 1176,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by its file path."
  },
  {
    "id": 1177,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            contentBuilder.append(line).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "This function reads a file from the given file path and returns its entire content as a single string."
  },
  {
    "id": 1178,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads and prints each line of a specified file to the console."
  },
  {
    "id": 1179,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a buffered reader."
  },
  {
    "id": 1180,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by its file path."
  },
  {
    "id": 1181,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the file path."
  },
  {
    "id": 1182,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a BufferedReader."
  },
  {
    "id": 1183,
    "code": "```java\nimport java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic static void writeToFile(String filePath, String content) throws IOException {\n    try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {\n        writer.write(content);\n    }\n}\n```",
    "summary": "This function writes a given string to a specified file, overwriting the file if it already exists."
  },
  {
    "id": 1184,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void readFile(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}",
    "summary": "This function reads and prints each line of a file specified by its file path."
  },
  {
    "id": 1185,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1186,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1187,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1188,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 1189,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the contents of a file into a single string, including line separators."
  },
  {
    "id": 1190,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line of a file specified by its file path."
  },
  {
    "id": 1191,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a BufferedReader."
  },
  {
    "id": 1192,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line of a file given its file path."
  },
  {
    "id": 1193,
    "code": "```java\npublic static void copyTextFile(String sourcePath, String destinationPath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(sourcePath));\n         BufferedWriter writer = new BufferedWriter(new FileWriter(destinationPath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            writer.write(line);\n            writer.newLine();\n        }\n    }\n}\n```",
    "summary": "Copies the contents of a text file from a source path to a destination path using buffered streams."
  },
  {
    "id": 1194,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the file path."
  },
  {
    "id": 1195,
    "code": "```java\nimport java.io.*;\n\npublic static void writeStringToFile(String content, String filePath) throws IOException {\n    try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {\n        writer.write(content);\n    }\n}\n```",
    "summary": "Writes a given string to a specified file, creating or overwriting the file."
  },
  {
    "id": 1196,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContent(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by its path and returns it as a single string."
  },
  {
    "id": 1197,
    "code": "```java\npublic static List<String> readLinesFromFile(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            lines.add(line);\n        }\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 1198,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "This function reads the entire content of a file into a single string."
  },
  {
    "id": 1199,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1200,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            contentBuilder.append(line).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads the entire content of a file into a single string, preserving line breaks."
  },
  {
    "id": 1201,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString().trim();\n}\n```",
    "summary": "Reads the contents of a file specified by the file path into a single string."
  },
  {
    "id": 1202,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic void countLinesInFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        int lineCount = 0;\n        while (reader.readLine() != null) {\n            lineCount++;\n        }\n        System.out.println(\"Total lines: \" + lineCount);\n    }\n}\n```",
    "summary": "Counts and prints the number of lines in a specified file."
  },
  {
    "id": 1203,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from the specified file."
  },
  {
    "id": 1204,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1205,
    "code": "```java\nimport java.nio.file.*;\nimport java.io.IOException;\nimport java.util.List;\n\npublic static List<String> readFileLines(String filePath) throws IOException {\n    return Files.readAllLines(Paths.get(filePath));\n}\n```",
    "summary": "Reads and returns all lines from a file specified by the given file path as a list of strings."
  },
  {
    "id": 1206,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by its path into a single string."
  },
  {
    "id": 1207,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static int countLinesInFile(String filePath) {\n    int lineCount = 0;\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        while (reader.readLine() != null) {\n            lineCount++;\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return lineCount;\n}",
    "summary": "This function counts and returns the number of lines in a specified file."
  },
  {
    "id": 1208,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContent(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "This function reads and returns the entire content of a file specified by the given file path as a single string."
  },
  {
    "id": 1209,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "Reads and returns the first line from a file specified by its path."
  },
  {
    "id": 1210,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a BufferedReader."
  },
  {
    "id": 1211,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by its file path."
  },
  {
    "id": 1212,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1213,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLinesContainingWord(String filePath, String word) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            if (line.contains(word)) {\n                System.out.println(line);\n            }\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "This function reads a file and prints all lines containing a specified word."
  },
  {
    "id": 1214,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1215,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the contents of a file specified by the file path into a single string."
  },
  {
    "id": 1216,
    "code": "```java\nimport java.nio.file.*;\nimport java.io.IOException;\n\npublic static void writeStringToFile(String content, String filePath) throws IOException {\n    Path path = Paths.get(filePath);\n    Files.write(path, content.getBytes());\n}\n```",
    "summary": "Writes a given string to a specified file, creating the file if it doesn't exist."
  },
  {
    "id": 1217,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            contentBuilder.append(line).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads the contents of a file specified by `filePath` into a single string."
  },
  {
    "id": 1218,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic void printFileLines(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "Reads and prints each line from a file specified by the given file path."
  },
  {
    "id": 1219,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 1220,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "This function reads a file line by line from a specified file path and prints each line to the console."
  },
  {
    "id": 1221,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 1222,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(\"\\n\");\n        }\n    }\n    return content.toString();\n}",
    "summary": "This function reads the contents of a file into a single string, appending a newline after each line."
  },
  {
    "id": 1223,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "This function reads the entire contents of a file specified by its path and returns it as a single string."
  },
  {
    "id": 1224,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "Reads and returns the first line of a file specified by the file path."
  },
  {
    "id": 1225,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "Reads and returns the first line of a file specified by the file path."
  },
  {
    "id": 1226,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String currentLine;\n        while ((currentLine = br.readLine()) != null) {\n            contentBuilder.append(currentLine).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by its path into a single string, preserving line breaks."
  },
  {
    "id": 1227,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static int countLinesInFile(String filePath) throws IOException {\n    int lineCount = 0;\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        while (reader.readLine() != null) {\n            lineCount++;\n        }\n    }\n    return lineCount;\n}\n```",
    "summary": "Counts the number of lines in a file specified by the given file path."
  },
  {
    "id": 1228,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "This function reads a file line by line from the specified path and prints each line to the console."
  },
  {
    "id": 1229,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            contentBuilder.append(line).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "This function reads the contents of a file specified by its path and returns it as a single string."
  },
  {
    "id": 1230,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1231,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String currentLine;\n        while ((currentLine = br.readLine()) != null) {\n            contentBuilder.append(currentLine).append(\"\\n\");\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads the contents of a file specified by the file path and returns it as a single string."
  },
  {
    "id": 1232,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a file specified by its file path."
  },
  {
    "id": 1233,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the contents of a file specified by `filePath` into a single string with lines separated by the system's line separator."
  },
  {
    "id": 1234,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "Reads and returns the first line of a file specified by the file path."
  },
  {
    "id": 1235,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads and prints each line from a specified file using a BufferedReader."
  },
  {
    "id": 1236,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void countLinesInFile(String filePath) {\n    int lineCount = 0;\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        while (br.readLine() != null) {\n            lineCount++;\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n    System.out.println(\"Total number of lines: \" + lineCount);\n}",
    "summary": "This function counts and prints the number of lines in a specified file."
  },
  {
    "id": 1237,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from the specified file using a BufferedReader."
  },
  {
    "id": 1238,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a BufferedReader."
  },
  {
    "id": 1239,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "Reads and prints each line of a file specified by the file path."
  },
  {
    "id": 1240,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using BufferedReader."
  },
  {
    "id": 1241,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String currentLine;\n        while ((currentLine = br.readLine()) != null) {\n            contentBuilder.append(currentLine).append(\"\\n\");\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads the contents of a file into a single string, appending a newline after each line."
  },
  {
    "id": 1242,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}",
    "summary": "Prints each line of a file specified by the file path to the standard output."
  },
  {
    "id": 1243,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1244,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    } catch (IOException e) {\n        e.printStackTrace();\n        return null;\n    }\n}",
    "summary": "This function reads and returns the first line from a specified file path, handling any IOExceptions that may occur."
  },
  {
    "id": 1245,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1246,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}",
    "summary": "This function reads and prints each line of a file specified by its file path."
  },
  {
    "id": 1247,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 1248,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads and prints each line from a file specified by its path, handling any I/O exceptions that occur."
  },
  {
    "id": 1249,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "This function reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 1250,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1251,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 1252,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 1253,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by its path into a single string, handling exceptions related to file reading."
  },
  {
    "id": 1254,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 1255,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 1256,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 1257,
    "code": "```java\npublic static List<String> readLinesFromFile(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            lines.add(line);\n        }\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 1258,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 1259,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic void printFileLines(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "This function reads a file line by line and prints each line to the console."
  },
  {
    "id": 1260,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String currentLine;\n        while ((currentLine = br.readLine()) != null) {\n            contentBuilder.append(currentLine).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString().trim();\n}\n```",
    "summary": "Reads the entire content of a file into a single string, handling line breaks appropriately."
  },
  {
    "id": 1261,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 1262,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 1263,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "Reads and returns the first line from a file specified by the file path."
  },
  {
    "id": 1264,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 1265,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 1266,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLinesContainingKeyword(String filePath, String keyword) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            if (line.contains(keyword)) {\n                System.out.println(line);\n            }\n        }\n    }\n}\n```",
    "summary": "This function reads a file line-by-line and prints lines containing a specified keyword."
  },
  {
    "id": 1267,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLinesContainingKeyword(String filePath, String keyword) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            if (line.contains(keyword)) {\n                System.out.println(line);\n            }\n        }\n    } catch (IOException e) {\n        System.err.println(\"An error occurred while processing the file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "This function reads a file line by line and prints lines that contain a specified keyword."
  },
  {
    "id": 1268,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 1269,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads and prints each line from a specified file using a buffered reader."
  },
  {
    "id": 1270,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1271,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    } catch (IOException e) {\n        e.printStackTrace();\n        return null;\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file, handling any IO exceptions that occur."
  },
  {
    "id": 1272,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}",
    "summary": "This function reads and prints each line of a file specified by its path."
  },
  {
    "id": 1273,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            contentBuilder.append(line).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "This function reads the entire content of a file specified by its path into a single string, including line separators."
  },
  {
    "id": 1274,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a file specified by its file path."
  },
  {
    "id": 1275,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire contents of a file specified by a given file path and returns it as a string."
  },
  {
    "id": 1276,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "This function reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 1277,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the file path."
  },
  {
    "id": 1278,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder fileContent = new StringBuilder();\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = bufferedReader.readLine()) != null) {\n            fileContent.append(line).append(System.lineSeparator());\n        }\n    }\n    return fileContent.toString();\n}\n```",
    "summary": "This function reads the contents of a file specified by the filePath and returns it as a single string."
  },
  {
    "id": 1279,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the file path."
  },
  {
    "id": 1280,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by its file path."
  },
  {
    "id": 1281,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String currentLine;\n        while ((currentLine = br.readLine()) != null) {\n            contentBuilder.append(currentLine).append(\"\\n\");\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "This function reads the contents of a file specified by its path and returns it as a single string."
  },
  {
    "id": 1282,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 1283,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a text file specified by the file path."
  },
  {
    "id": 1284,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "This function reads and prints each line of a file specified by its file path."
  },
  {
    "id": 1285,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the contents of a file specified by its path and returns it as a single string."
  },
  {
    "id": 1286,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "Reads and returns the first line of a file specified by the file path."
  },
  {
    "id": 1287,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the file path."
  },
  {
    "id": 1288,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1289,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line of a file specified by the file path."
  },
  {
    "id": 1290,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLinesReverse(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        StringBuilder content = new StringBuilder();\n        while ((line = reader.readLine()) != null) {\n            content.insert(0, line + System.lineSeparator());\n        }\n        System.out.print(content.toString());\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "This function reads a file line-by-line and prints its content in reverse order."
  },
  {
    "id": 1291,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a buffered reader."
  },
  {
    "id": 1292,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line of a text file specified by its file path."
  },
  {
    "id": 1293,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1294,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 1295,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire contents of a specified file and returns it as a single string with lines separated by the system line separator."
  },
  {
    "id": 1296,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1297,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by the given path and returns it as a single string."
  },
  {
    "id": 1298,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineOfFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file from the specified file path."
  },
  {
    "id": 1299,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "Reads and prints each line of a file specified by its path, handling any IO exceptions that occur."
  },
  {
    "id": 1300,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            contentBuilder.append(line).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "This function reads the contents of a file specified by `filePath` and returns it as a single `String`."
  },
  {
    "id": 1301,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 1302,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String currentLine;\n        while ((currentLine = br.readLine()) != null) {\n            contentBuilder.append(currentLine).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by its path into a single string."
  },
  {
    "id": 1303,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1304,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by the file path and returns it as a String."
  },
  {
    "id": 1305,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 1306,
    "code": "```java\npublic static List<String> readLinesFromFile(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            lines.add(line);\n        }\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 1307,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "Reads and prints each line of a file specified by the file path."
  },
  {
    "id": 1308,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the contents of a file specified by the file path into a single string."
  },
  {
    "id": 1309,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1310,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1311,
    "code": "```java\npublic static List<String> readLinesFromFile(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = bufferedReader.readLine()) != null) {\n            lines.add(line);\n        }\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a list of strings."
  },
  {
    "id": 1312,
    "code": "```java\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.List;\n\npublic static List<String> readLinesFromFile(String filePath) throws IOException {\n    return Files.readAllLines(Paths.get(filePath));\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 1313,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "Reads and returns the first line from a specified file using a BufferedReader."
  },
  {
    "id": 1314,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line of a file specified by the file path."
  },
  {
    "id": 1315,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}",
    "summary": "This function reads and prints each line of a specified file to the console."
  },
  {
    "id": 1316,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileAsString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            contentBuilder.append(line).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "This function reads a file from the given file path and returns its content as a single string."
  },
  {
    "id": 1317,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileContents(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"An error occurred while reading the file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "This function reads and prints each line of a file specified by its path, handling any IO exceptions that occur."
  },
  {
    "id": 1318,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire contents of a file at the specified path into a single string."
  },
  {
    "id": 1319,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a specified file."
  },
  {
    "id": 1320,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            contentBuilder.append(line).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads the content of a file at the specified path into a single string, preserving line breaks."
  },
  {
    "id": 1321,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "This function reads a file line by line and prints each line to the console."
  },
  {
    "id": 1322,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a text file specified by the file path."
  },
  {
    "id": 1323,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a buffered reader."
  },
  {
    "id": 1324,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file, using buffered reading for efficiency."
  },
  {
    "id": 1325,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 1326,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}",
    "summary": "The function reads and prints each line of a text file given its file path."
  },
  {
    "id": 1327,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(\"\\n\");\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by its path and returns it as a single string."
  },
  {
    "id": 1328,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by its file path."
  },
  {
    "id": 1329,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by the file path into a single string."
  },
  {
    "id": 1330,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "This function reads the contents of a file specified by its path into a single string."
  },
  {
    "id": 1331,
    "code": "```java\npublic static List<String> readLinesFromFile(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            lines.add(line);\n        }\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by the given file path and returns them as a list of strings."
  },
  {
    "id": 1332,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLinesContaining(String filePath, String keyword) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            if (line.contains(keyword)) {\n                System.out.println(line);\n            }\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}",
    "summary": "This function reads a file line-by-line and prints lines that contain a specified keyword."
  },
  {
    "id": 1333,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line of a file given its file path."
  },
  {
    "id": 1334,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 1335,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "This function reads a file line by line and prints each line to the standard output."
  },
  {
    "id": 1336,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the file path."
  },
  {
    "id": 1337,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            contentBuilder.append(line).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads the content of a file at the specified path and returns it as a single string."
  },
  {
    "id": 1338,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 1339,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineOfFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a buffered reader."
  },
  {
    "id": 1340,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified text file."
  },
  {
    "id": 1341,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads a file from the given file path and returns its content as a single string."
  },
  {
    "id": 1342,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    } catch (IOException e) {\n        e.printStackTrace();\n        return null;\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file, handling any potential IO exceptions."
  },
  {
    "id": 1343,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads and prints each line of a file specified by its file path."
  },
  {
    "id": 1344,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = bufferedReader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"An error occurred while reading the file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "Prints each line of a specified file to the console, handling any IOExceptions that occur."
  },
  {
    "id": 1345,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "Reads and prints each line of a file specified by its path using a buffered reader."
  },
  {
    "id": 1346,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the file path."
  },
  {
    "id": 1347,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads and prints each line from a specified file to the console."
  },
  {
    "id": 1348,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the file path."
  },
  {
    "id": 1349,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a BufferedReader."
  },
  {
    "id": 1350,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLinesReverse(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        reader.lines().collect(java.util.stream.Collectors.toCollection(java.util.LinkedList::new))\n              .descendingIterator()\n              .forEachRemaining(System.out::println);\n    }\n}\n```",
    "summary": "Reads and prints the lines of a file in reverse order."
  },
  {
    "id": 1351,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "This function reads the contents of a file specified by `filePath` into a single string, preserving line breaks."
  },
  {
    "id": 1352,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "This function reads the contents of a file specified by its path into a single string."
  },
  {
    "id": 1353,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 1354,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads the first line from a specified file and returns it as a string."
  },
  {
    "id": 1355,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void readFileAndPrintLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads a file line by line from a specified path and prints each line to the console."
  },
  {
    "id": 1356,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads and prints each line from a specified file, handling potential I/O exceptions."
  },
  {
    "id": 1357,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void readFileAndPrint(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}",
    "summary": "Reads a file line by line from the specified path and prints each line to the console."
  },
  {
    "id": 1358,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "This function reads a text file line by line and prints each line to the console, handling any IOExceptions that may occur."
  },
  {
    "id": 1359,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "This function reads a file line by line from a given file path and prints each line to the console."
  },
  {
    "id": 1360,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a BufferedReader."
  },
  {
    "id": 1361,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContent(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}",
    "summary": "This function reads the content of a file specified by its file path and returns it as a single string."
  },
  {
    "id": 1362,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "This function reads a file line by line and prints each line to the standard output."
  },
  {
    "id": 1363,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by its file path."
  },
  {
    "id": 1364,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 1365,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic static List<String> readLinesFromFile(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            lines.add(line);\n        }\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 1366,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1367,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "This function reads and prints each line from a file specified by the given file path."
  },
  {
    "id": 1368,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    } catch (IOException e) {\n        e.printStackTrace();\n        return null;\n    }\n}",
    "summary": "Reads and returns the first line of a specified file, handling IO exceptions."
  },
  {
    "id": 1369,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filename) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filename))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a BufferedReader."
  },
  {
    "id": 1370,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1371,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "This function reads a file line by line and prints each line to the standard output."
  },
  {
    "id": 1372,
    "code": "```java\nimport java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic void writeToFile(String filePath, String content) throws IOException {\n    try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {\n        writer.write(content);\n    }\n}\n```",
    "summary": "Writes the specified content to a file at the given path using buffered writing for efficiency."
  },
  {
    "id": 1373,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic static List<String> readLinesContainingKeyword(String filePath, String keyword) throws IOException {\n    List<String> matchingLines = new ArrayList<>();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            if (line.contains(keyword)) {\n                matchingLines.add(line);\n            }\n        }\n    }\n    return matchingLines;\n}\n```",
    "summary": "Reads a file and returns a list of lines containing a specified keyword."
  },
  {
    "id": 1374,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file given its file path."
  },
  {
    "id": 1375,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1376,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "Reads and returns the first line from a file specified by the file path."
  },
  {
    "id": 1377,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "This function reads and returns the first line of a text file given its file path."
  },
  {
    "id": 1378,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}",
    "summary": "This function reads a text file line by line and prints each line to the console."
  },
  {
    "id": 1379,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from the specified file."
  },
  {
    "id": 1380,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString().trim();\n}",
    "summary": "Reads the content of a file specified by its path into a single string."
  },
  {
    "id": 1381,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1382,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by the file path into a single string."
  },
  {
    "id": 1383,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String currentLine;\n        while ((currentLine = br.readLine()) != null) {\n            contentBuilder.append(currentLine).append(\"\\n\");\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads the content of a file specified by a file path into a single string."
  },
  {
    "id": 1384,
    "code": "```java\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.List;\n\npublic static List<String> readFileLines(String filePath) throws IOException {\n    return Files.readAllLines(Paths.get(filePath));\n}\n```",
    "summary": "This function reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 1385,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1386,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void readFileLineByLine(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "This function reads a file line by line and prints each line to the console."
  },
  {
    "id": 1387,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = bufferedReader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "Reads and prints each line of a file specified by its file path."
  },
  {
    "id": 1388,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line of a specified file."
  },
  {
    "id": 1389,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1390,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the contents of a file specified by its path into a single string, including line breaks."
  },
  {
    "id": 1391,
    "code": "```java\npublic static List<String> readLinesFromFile(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            lines.add(line);\n        }\n    }\n    return lines;\n}\n```",
    "summary": "This function reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 1392,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by its file path."
  },
  {
    "id": 1393,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContent(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by the file path and returns it as a String."
  },
  {
    "id": 1394,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFile(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by `filePath` into a single string."
  },
  {
    "id": 1395,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1396,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 1397,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads a text file from the specified path and returns its contents as a single string."
  },
  {
    "id": 1398,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "This function reads the contents of a file specified by its path and returns it as a single string."
  },
  {
    "id": 1399,
    "code": "```java\npublic static List<String> readLinesFromFile(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            lines.add(line);\n        }\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file and returns them as a list of strings."
  },
  {
    "id": 1400,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "This function reads a file line by line and prints each line to the console."
  },
  {
    "id": 1401,
    "code": "```java\npublic static List<String> readLinesFromFile(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            lines.add(line);\n        }\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a list of strings."
  },
  {
    "id": 1402,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileContent(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}",
    "summary": "The function reads and prints each line of a specified file using a BufferedReader."
  },
  {
    "id": 1403,
    "code": "```java\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic void writeFile(String filename, String content) {\n    try (FileWriter writer = new FileWriter(filename)) {\n        writer.write(content);\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "This function writes the specified content to a file with the given filename using a FileWriter."
  },
  {
    "id": 1404,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from the specified file."
  },
  {
    "id": 1405,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    } catch (IOException e) {\n        e.printStackTrace();\n        return null;\n    }\n}",
    "summary": "This function reads and returns the first line from a file specified by the file path."
  },
  {
    "id": 1406,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void reverseFileLines(String inputFilePath, String outputFilePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(inputFilePath));\n         java.io.BufferedWriter writer = new java.io.BufferedWriter(new java.io.FileWriter(outputFilePath))) {\n        java.util.List<String> lines = new java.util.ArrayList<>();\n        String line;\n        while ((line = reader.readLine()) != null) {\n            lines.add(line);\n        }\n        for (int i = lines.size() - 1; i >= 0; i--) {\n            writer.write(lines.get(i));\n            writer.newLine();\n        }\n    }\n}",
    "summary": "This function reads lines from an input file, reverses their order, and writes them to an output file."
  },
  {
    "id": 1407,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineOfFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 1408,
    "code": "import java.io.*;\n\npublic static void writeToFile(String filePath, String content) throws IOException {\n    try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {\n        writer.write(content);\n    }\n}",
    "summary": "Writes the specified content to a file at the given file path using a BufferedWriter."
  },
  {
    "id": 1409,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 1410,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}",
    "summary": "This function reads a file line by line and prints each line to the console."
  },
  {
    "id": 1411,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1412,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class FileProcessor {\n    public static String readFirstLineFromFile(String filePath) throws IOException {\n        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n            return reader.readLine();\n        }\n    }\n}\n```",
    "summary": "This function reads and returns the first line of a file specified by the file path."
  },
  {
    "id": 1413,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"An error occurred while reading the file: \" + e.getMessage());\n    }\n}",
    "summary": "This function reads a file line by line from a given file path and prints each line to the console."
  },
  {
    "id": 1414,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}",
    "summary": "This function reads a file line by line and prints each line to the console."
  },
  {
    "id": 1415,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1416,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "Reads and prints each line of a file specified by its file path, handling any IO exceptions."
  },
  {
    "id": 1417,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 1418,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class FileProcessor {\n    public static String readFileContents(String filePath) throws IOException {\n        StringBuilder content = new StringBuilder();\n        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                content.append(line).append(System.lineSeparator());\n            }\n        }\n        return content.toString().trim();\n    }\n}\n```",
    "summary": "This function reads a text file line by line and returns its entire content as a single string."
  },
  {
    "id": 1419,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire content of a file at a given path into a single string."
  },
  {
    "id": 1420,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1421,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLinesWithNumbers(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        int lineNumber = 1;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(lineNumber + \": \" + line);\n            lineNumber++;\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "Reads a file and prints each line with its corresponding line number to the console."
  },
  {
    "id": 1422,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads and prints each line of a file specified by its path."
  },
  {
    "id": 1423,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "This function reads a file line by line from the given file path and prints each line to the console."
  },
  {
    "id": 1424,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "This function reads and prints each line of a specified file to the console."
  },
  {
    "id": 1425,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "This function reads the entire contents of a text file from a given file path and returns it as a single string."
  },
  {
    "id": 1426,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1427,
    "code": "```java\npublic static List<String> readLinesFromFile(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            lines.add(line);\n        }\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file into a list of strings."
  },
  {
    "id": 1428,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the file path."
  },
  {
    "id": 1429,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 1430,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 1431,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "Reads a file line-by-line from the given path and prints each line to the console."
  },
  {
    "id": 1432,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileAsString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            contentBuilder.append(line).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}",
    "summary": "Reads the entire content of a file into a single string, preserving line breaks."
  },
  {
    "id": 1433,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "This function reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 1434,
    "code": "public static List<String> readLinesFromFile(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            lines.add(line);\n        }\n    }\n    return lines;\n}",
    "summary": "This function reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 1435,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = bufferedReader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}",
    "summary": "This function reads and prints each line of a text file specified by the file path."
  },
  {
    "id": 1436,
    "code": "```java\npublic static List<String> readLinesFromFile(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            lines.add(line);\n        }\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a file specified by the file path and returns them as a list of strings."
  },
  {
    "id": 1437,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}",
    "summary": "This function reads the contents of a file specified by its path and returns it as a single string."
  },
  {
    "id": 1438,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String currentLine;\n        while ((currentLine = br.readLine()) != null) {\n            contentBuilder.append(currentLine).append(\"\\n\");\n        }\n    }\n    return contentBuilder.toString();\n}",
    "summary": "This function reads the contents of a file specified by its file path and returns it as a single string."
  },
  {
    "id": 1439,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "This function reads and prints each line from a specified file using a buffered reader."
  },
  {
    "id": 1440,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a BufferedReader."
  },
  {
    "id": 1441,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1442,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileContents(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "This function reads a file line by line and prints each line to the console."
  },
  {
    "id": 1443,
    "code": "```java\npublic static List<String> readLinesFromFile(String filePath) throws IOException {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            lines.add(line);\n        }\n    }\n    return lines;\n}\n```",
    "summary": "Reads all lines from a specified file and returns them as a list of strings."
  },
  {
    "id": 1444,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads and prints each line of a file specified by the given file path."
  },
  {
    "id": 1445,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire contents of a file into a string, adding a newline after each line."
  },
  {
    "id": 1446,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line of a file from the specified file path."
  },
  {
    "id": 1447,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1448,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String currentLine;\n        while ((currentLine = br.readLine()) != null) {\n            contentBuilder.append(currentLine).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}",
    "summary": "This function reads the contents of a file into a single string, preserving line breaks."
  },
  {
    "id": 1449,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 1450,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            contentBuilder.append(line).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}",
    "summary": "This function reads the contents of a file specified by the file path and returns it as a single string."
  },
  {
    "id": 1451,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "This function reads a file line by line from the specified path and prints each line to the console."
  },
  {
    "id": 1452,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the given file path."
  },
  {
    "id": 1453,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void readLinesFromFile(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}",
    "summary": "Reads and prints each line from a specified file using a BufferedReader."
  },
  {
    "id": 1454,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            contentBuilder.append(line).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "Reads the entire content of a file specified by its path into a single string."
  },
  {
    "id": 1455,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1456,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 1457,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileContents(String filePath) {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "This function reads and prints the contents of a file line by line given its file path."
  },
  {
    "id": 1458,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the contents of a file specified by `filePath` and returns it as a single `String`."
  },
  {
    "id": 1459,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    } catch (IOException e) {\n        e.printStackTrace();\n        return null;\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file, handling any IO exceptions that may occur."
  },
  {
    "id": 1460,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1461,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLinesWithNumber(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        int lineNumber = 1;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(lineNumber + \": \" + line);\n            lineNumber++;\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "This function reads a file and prints each line prefixed with its line number."
  },
  {
    "id": 1462,
    "code": "```java\npublic void writeStringToFile(String filePath, String content) throws IOException {\n    try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {\n        writer.write(content);\n    }\n}\n```",
    "summary": "Writes a string to a specified file using a buffered writer."
  },
  {
    "id": 1463,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a file specified by the file path."
  },
  {
    "id": 1464,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "This function reads a file line by line from a given file path and prints each line to the standard output."
  },
  {
    "id": 1465,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file given its file path."
  },
  {
    "id": 1466,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1467,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"An error occurred while reading the file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "Reads and prints each line from a specified file, handling IO exceptions if they occur."
  },
  {
    "id": 1468,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            contentBuilder.append(line).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}\n```",
    "summary": "This function reads the entire content of a file specified by its path and returns it as a single string."
  },
  {
    "id": 1469,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the contents of a file specified by the file path and returns it as a string."
  },
  {
    "id": 1470,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1471,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        return bufferedReader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 1472,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using BufferedReader."
  },
  {
    "id": 1473,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1474,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n}\n```",
    "summary": "Reads and prints each line of a file specified by the given file path."
  },
  {
    "id": 1475,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileContents(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the entire contents of a file specified by `filePath` and returns it as a single string."
  },
  {
    "id": 1476,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder contentBuilder = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            contentBuilder.append(line).append(System.lineSeparator());\n        }\n    }\n    return contentBuilder.toString();\n}",
    "summary": "Reads the entire content of a file into a single string, with each line separated by the system's line separator."
  },
  {
    "id": 1477,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading the file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "Reads a file line by line and prints each line to the console, handling any IOExceptions that occur."
  },
  {
    "id": 1478,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}\n```",
    "summary": "Reads and prints each line of a specified file, handling any potential IO exceptions."
  },
  {
    "id": 1479,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic static List<String> readFileLines(String filePath) {\n    List<String> lines = new ArrayList<>();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            lines.add(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return lines;\n}\n```",
    "summary": "This function reads all lines from a file at a given path and returns them as a list of strings."
  },
  {
    "id": 1480,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "This function reads and returns the first line from a specified file."
  },
  {
    "id": 1481,
    "code": "```java\nimport java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic void writeToFile(String filePath, String content) throws IOException {\n    try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {\n        writer.write(content);\n    }\n}\n```",
    "summary": "Writes the specified content to a file at the given file path using a BufferedWriter."
  },
  {
    "id": 1482,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}",
    "summary": "The function reads the entire content of a file specified by the file path into a single string."
  },
  {
    "id": 1483,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}",
    "summary": "Reads and returns the first line of a file specified by the given file path."
  },
  {
    "id": 1484,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = bufferedReader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "This function reads the contents of a file specified by the file path and returns it as a single string."
  },
  {
    "id": 1485,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    } catch (IOException e) {\n        e.printStackTrace();\n        return null;\n    }\n}\n```",
    "summary": "This function reads and returns the first line from a specified file, handling any IO exceptions."
  },
  {
    "id": 1486,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void readFileAndPrintLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n```",
    "summary": "Reads a file line by line from the specified path and prints each line to the console."
  },
  {
    "id": 1487,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1488,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by the file path."
  },
  {
    "id": 1489,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        return br.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a file specified by the file path."
  },
  {
    "id": 1490,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the contents of a file specified by `filePath` and returns it as a single string."
  },
  {
    "id": 1491,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a buffered reader."
  },
  {
    "id": 1492,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}",
    "summary": "This function reads the contents of a file specified by its path and returns it as a string."
  },
  {
    "id": 1493,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading file: \" + e.getMessage());\n    }\n}",
    "summary": "This function reads a file line by line and prints each line to the console, handling any potential IOExceptions."
  },
  {
    "id": 1494,
    "code": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static void printFileLines(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        System.err.println(\"Error reading the file: \" + e.getMessage());\n    }\n}",
    "summary": "This function reads and prints each line of a file specified by the file path."
  },
  {
    "id": 1495,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line of a text file specified by the file path."
  },
  {
    "id": 1496,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file."
  },
  {
    "id": 1497,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFileToString(String filePath) throws IOException {\n    StringBuilder content = new StringBuilder();\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            content.append(line).append(System.lineSeparator());\n        }\n    }\n    return content.toString();\n}\n```",
    "summary": "Reads the contents of a file specified by the filePath into a single string."
  },
  {
    "id": 1498,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLine(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from the specified file."
  },
  {
    "id": 1499,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a specified file using a buffered reader."
  },
  {
    "id": 1500,
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic static String readFirstLineFromFile(String filePath) throws IOException {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        return reader.readLine();\n    }\n}\n```",
    "summary": "Reads and returns the first line from a file specified by its file path."
  }
]