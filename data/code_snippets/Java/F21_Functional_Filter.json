[
  {
    "task": "Filter out all even numbers from a list of integers.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class FunctionalFilter {\n    public static List<Integer> filterOutEvenNumbers(List<Integer> numbers) {\n        return numbers.stream()\n                      .filter(n -> n % 2 != 0)\n                      .collect(Collectors.toList());\n    }\n}\n```"
  },
  {
    "task": "Select all words from a list that start with the letter 'a'.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class FunctionalFilter {\n    public static List<String> filterWordsStartingWithA(List<String> words) {\n        return words.stream()\n                    .filter(word -> word.startsWith(\"a\"))\n                    .collect(Collectors.toList());\n    }\n}\n```"
  },
  {
    "task": "Find all positive numbers in a collection of integers.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class PositiveNumberFilter {\n    public static List<Integer> findPositiveNumbers(List<Integer> numbers) {\n        return numbers.stream()\n                      .filter(n -> n > 0)\n                      .collect(Collectors.toList());\n    }\n}\n```"
  },
  {
    "task": "Extract all employees who are older than 30 from an employee directory.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass Employee {\n    String name;\n    int age;\n\n    Employee(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public int getAge() {\n        return age;\n    }\n}\n\npublic class EmployeeFilter {\n\n    public static List<Employee> filterEmployeesOlderThan30(List<Employee> employees) {\n        return employees.stream()\n                        .filter(employee -> employee.getAge() > 30)\n                        .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        // Example usage\n        List<Employee> employees = List.of(\n            new Employee(\"Alice\", 31),\n            new Employee(\"Bob\", 25),\n            new Employee(\"Charlie\", 35)\n        );\n\n        List<Employee> result = filterEmployeesOlderThan30(employees);\n        // The 'result' list now contains employees older than 30\n    }\n}\n```"
  },
  {
    "task": "List all cities with a population greater than one million from a dataset.",
    "code": "```java\nimport java.util.*;\nimport java.util.stream.*;\n\nclass City {\n    String name;\n    int population;\n\n    City(String name, int population) {\n        this.name = name;\n        this.population = population;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getPopulation() {\n        return population;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        List<City> cities = Arrays.asList(\n            new City(\"CityA\", 500000),\n            new City(\"CityB\", 2000000),\n            new City(\"CityC\", 1500000),\n            new City(\"CityD\", 800000)\n        );\n        \n        List<String> largeCities = cities.stream()\n            .filter(city -> city.getPopulation() > 1000000)\n            .map(City::getName)\n            .collect(Collectors.toList());\n        \n        largeCities.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Filter out products that are out of stock from a product list.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass Product {\n    private String name;\n    private int stock;\n\n    public Product(String name, int stock) {\n        this.name = name;\n        this.stock = stock;\n    }\n\n    public int getStock() {\n        return stock;\n    }\n}\n\npublic class ProductFilter {\n    public static List<Product> filterInStockProducts(List<Product> products) {\n        return products.stream()\n                       .filter(product -> product.getStock() > 0)\n                       .collect(Collectors.toList());\n    }\n}\n```"
  },
  {
    "task": "Select all students who have passed with a grade above 70 from a list of student scores.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass Student {\n    private String name;\n    private int score;\n\n    public Student(String name, int score) {\n        this.name = name;\n        this.score = score;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getScore() {\n        return score;\n    }\n}\n\npublic class FunctionalFilter {\n    public static List<Student> getPassingStudents(List<Student> students) {\n        return students.stream()\n                .filter(student -> student.getScore() > 70)\n                .collect(Collectors.toList());\n    }\n}\n```"
  },
  {
    "task": "Identify all strings in an array that contain the substring 'cat'.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class FunctionalFilter {\n    public static void main(String[] args) {\n        String[] strings = {\"catalog\", \"dog\", \"category\", \"concatenate\", \"bat\"};\n        \n        List<String> filteredStrings = Arrays.stream(strings)\n                                             .filter(s -> s.contains(\"cat\"))\n                                             .collect(Collectors.toList());\n        \n        filteredStrings.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Extract all transactions above $1000 from a financial record.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass Transaction {\n    double amount;\n    \n    public Transaction(double amount) {\n        this.amount = amount;\n    }\n    \n    public double getAmount() {\n        return amount;\n    }\n}\n\npublic class FinancialRecord {\n    public static List<Transaction> filterTransactionsAbove1000(List<Transaction> transactions) {\n        return transactions.stream()\n                           .filter(transaction -> transaction.getAmount() > 1000)\n                           .collect(Collectors.toList());\n    }\n}\n```"
  },
  {
    "task": "Filter out all non-prime numbers from a list of numbers.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\n\npublic class PrimeFilter {\n    public static List<Integer> filterPrimes(List<Integer> numbers) {\n        return numbers.stream()\n                .filter(PrimeFilter::isPrime)\n                .collect(Collectors.toList());\n    }\n\n    private static boolean isPrime(int number) {\n        if (number <= 1) return false;\n        return IntStream.rangeClosed(2, (int) Math.sqrt(number))\n                        .allMatch(n -> number % n != 0);\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = List.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n        List<Integer> primes = filterPrimes(numbers);\n        System.out.println(primes);\n    }\n}\n```"
  },
  {
    "task": "Select all books with more than 300 pages from a library catalog.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass Book {\n    private String title;\n    private int pages;\n\n    public Book(String title, int pages) {\n        this.title = title;\n        this.pages = pages;\n    }\n\n    public int getPages() {\n        return pages;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n}\n\npublic class LibraryCatalog {\n    public static List<Book> filterBooksByPages(List<Book> catalog, int minPages) {\n        return catalog.stream()\n                .filter(book -> book.getPages() > minPages)\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        List<Book> catalog = List.of(\n                new Book(\"Book One\", 250),\n                new Book(\"Book Two\", 350),\n                new Book(\"Book Three\", 200),\n                new Book(\"Book Four\", 400)\n        );\n\n        List<Book> filteredBooks = filterBooksByPages(catalog, 300);\n        filteredBooks.forEach(book -> System.out.println(book.getTitle()));\n    }\n}\n```"
  },
  {
    "task": "Identify all users who have logged in within the past week from a user database.",
    "code": "```java\nimport java.time.LocalDateTime;\nimport java.time.temporal.ChronoUnit;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass User {\n    private String name;\n    private LocalDateTime lastLogin;\n\n    public User(String name, LocalDateTime lastLogin) {\n        this.name = name;\n        this.lastLogin = lastLogin;\n    }\n\n    public LocalDateTime getLastLogin() {\n        return lastLogin;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n\npublic class UserFilter {\n    public static List<User> filterActiveUsers(List<User> users) {\n        LocalDateTime oneWeekAgo = LocalDateTime.now().minus(1, ChronoUnit.WEEKS);\n        return users.stream()\n                .filter(user -> user.getLastLogin().isAfter(oneWeekAgo))\n                .collect(Collectors.toList());\n    }\n}\n```"
  },
  {
    "task": "Extract all URLs that contain 'https' from a list of web addresses.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class URLFilter {\n    public static List<String> filterHttpsUrls(List<String> urls) {\n        return urls.stream()\n                   .filter(url -> url.contains(\"https\"))\n                   .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        List<String> webAddresses = List.of(\"https://example.com\", \"http://test.com\", \"https://secure.com\");\n        List<String> httpsUrls = filterHttpsUrls(webAddresses);\n        httpsUrls.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Find all movies released after the year 2000 from a movie database.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass Movie {\n    private String title;\n    private int releaseYear;\n\n    public Movie(String title, int releaseYear) {\n        this.title = title;\n        this.releaseYear = releaseYear;\n    }\n\n    public int getReleaseYear() {\n        return releaseYear;\n    }\n}\n\npublic class MovieFilter {\n    public static List<Movie> filterMoviesReleasedAfter2000(List<Movie> movies) {\n        return movies.stream()\n                .filter(movie -> movie.getReleaseYear() > 2000)\n                .collect(Collectors.toList());\n    }\n}\n```"
  },
  {
    "task": "Select all tasks with a priority level of 'high' from a task management system.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass Task {\n    private String name;\n    private String priority;\n\n    public Task(String name, String priority) {\n        this.name = name;\n        this.priority = priority;\n    }\n\n    public String getPriority() {\n        return priority;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n\npublic class TaskFilter {\n    public static List<Task> filterHighPriorityTasks(List<Task> tasks) {\n        return tasks.stream()\n                .filter(task -> \"high\".equals(task.getPriority()))\n                .collect(Collectors.toList());\n    }\n}\n```"
  },
  {
    "task": "Filter out all words longer than five characters from a text document.",
    "code": "```java\nimport java.nio.file.*;\nimport java.io.IOException;\nimport java.util.stream.*;\n\npublic class FunctionalFilter {\n    public static void main(String[] args) {\n        try {\n            Files.lines(Paths.get(\"document.txt\"))\n                .flatMap(line -> Stream.of(line.split(\"\\\\s+\")))\n                .filter(word -> word.length() <= 5)\n                .forEach(System.out::println);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
  },
  {
    "task": "Extract all odd numbers from a sequence of integers.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class FunctionalFilter {\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n        List<Integer> oddNumbers = numbers.stream()\n                                          .filter(n -> n % 2 != 0)\n                                          .collect(Collectors.toList());\n        System.out.println(oddNumbers);\n    }\n}\n```"
  },
  {
    "task": "Select all files larger than 10MB from a list of files.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport java.nio.file.Path;\nimport java.nio.file.Files;\nimport java.io.IOException;\n\npublic class FileFilter {\n    public static List<Path> filterFilesLargerThan10MB(List<Path> files) throws IOException {\n        return files.stream()\n                    .filter(file -> {\n                        try {\n                            return Files.size(file) > 10 * 1024 * 1024;\n                        } catch (IOException e) {\n                            e.printStackTrace();\n                            return false;\n                        }\n                    })\n                    .collect(Collectors.toList());\n    }\n}\n```"
  },
  {
    "task": "Identify all events occurring on weekends from an event schedule.",
    "code": "```java\nimport java.time.LocalDate;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass Event {\n    private String name;\n    private LocalDate date;\n\n    public Event(String name, LocalDate date) {\n        this.name = name;\n        this.date = date;\n    }\n\n    public LocalDate getDate() {\n        return date;\n    }\n\n    @Override\n    public String toString() {\n        return \"Event{name='\" + name + \"', date=\" + date + '}';\n    }\n}\n\npublic class WeekendEventFilter {\n\n    public static List<Event> filterWeekendEvents(List<Event> events) {\n        return events.stream()\n                .filter(event -> {\n                    int dayOfWeek = event.getDate().getDayOfWeek().getValue();\n                    return dayOfWeek == 6 || dayOfWeek == 7;\n                })\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        List<Event> events = List.of(\n                new Event(\"Conference\", LocalDate.of(2023, 10, 13)),\n                new Event(\"Workshop\", LocalDate.of(2023, 10, 14)),\n                new Event(\"Meetup\", LocalDate.of(2023, 10, 15)),\n                new Event(\"Webinar\", LocalDate.of(2023, 10, 16))\n        );\n\n        List<Event> weekendEvents = filterWeekendEvents(events);\n        weekendEvents.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Find all emails from a specific domain in an email list.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class EmailFilter {\n    public static List<String> filterEmailsByDomain(List<String> emails, String domain) {\n        return emails.stream()\n                     .filter(email -> email.endsWith(\"@\" + domain))\n                     .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        List<String> emails = List.of(\"user1@example.com\", \"user2@test.com\", \"user3@example.com\");\n        String domain = \"example.com\";\n        List<String> filteredEmails = filterEmailsByDomain(emails, domain);\n        filteredEmails.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Filter out all people not living in a specific city from a contact list.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass Person {\n    String name;\n    String city;\n\n    Person(String name, String city) {\n        this.name = name;\n        this.city = city;\n    }\n\n    public String getCity() {\n        return city;\n    }\n}\n\npublic class ContactFilter {\n    public static List<Person> filterByCity(List<Person> contacts, String city) {\n        return contacts.stream()\n                .filter(person -> person.getCity().equals(city))\n                .collect(Collectors.toList());\n    }\n}\n```"
  },
  {
    "task": "Select all rectangles with an area greater than 50 from a list of rectangles.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass Rectangle {\n    private double width;\n    private double height;\n\n    public Rectangle(double width, double height) {\n        this.width = width;\n        this.height = height;\n    }\n\n    public double getArea() {\n        return width * height;\n    }\n}\n\npublic class RectangleFilter {\n    public static List<Rectangle> filterRectanglesByArea(List<Rectangle> rectangles) {\n        return rectangles.stream()\n                .filter(rect -> rect.getArea() > 50)\n                .collect(Collectors.toList());\n    }\n}\n```"
  },
  {
    "task": "Extract all elements that are not null from a collection.",
    "code": "```java\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class FunctionalFilter {\n    public static <T> List<T> filterNonNull(Collection<T> collection) {\n        return collection.stream()\n                         .filter(element -> element != null)\n                         .collect(Collectors.toList());\n    }\n}\n```"
  },
  {
    "task": "Identify all registered voters over the age of 18 from a voter registration list.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass Voter {\n    private String name;\n    private int age;\n\n    public Voter(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n\npublic class VoterFilter {\n    public static List<Voter> getEligibleVoters(List<Voter> voters) {\n        return voters.stream()\n                     .filter(voter -> voter.getAge() > 18)\n                     .collect(Collectors.toList());\n    }\n}\n```"
  },
  {
    "task": "Select all cars manufactured after 2015 from a vehicle registry.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass Car {\n    private String make;\n    private int year;\n\n    public Car(String make, int year) {\n        this.make = make;\n        this.year = year;\n    }\n\n    public int getYear() {\n        return year;\n    }\n}\n\npublic class VehicleRegistry {\n    public static List<Car> filterCarsAfter2015(List<Car> cars) {\n        return cars.stream()\n                   .filter(car -> car.getYear() > 2015)\n                   .collect(Collectors.toList());\n    }\n}\n```"
  },
  {
    "task": "Filter out all negative numbers from a dataset of integers.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class FunctionalFilter {\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(0, -5, 10, -2, 3, -8, 7);\n        List<Integer> filteredNumbers = numbers.stream()\n                                               .filter(n -> n >= 0)\n                                               .collect(Collectors.toList());\n        System.out.println(filteredNumbers);\n    }\n}\n```"
  },
  {
    "task": "Extract all characters from a string that are uppercase.",
    "code": "```java\nimport java.util.stream.Collectors;\n\npublic class UppercaseFilter {\n    public static void main(String[] args) {\n        String input = \"HelloWorld\";\n        String result = input.chars()\n                             .filter(Character::isUpperCase)\n                             .mapToObj(c -> String.valueOf((char) c))\n                             .collect(Collectors.joining());\n        System.out.println(result);\n    }\n}\n```"
  },
  {
    "task": "Identify all projects with a deadline within the next month from a project database.",
    "code": "```java\nimport java.time.LocalDate;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass Project {\n    private String name;\n    private LocalDate deadline;\n\n    public Project(String name, LocalDate deadline) {\n        this.name = name;\n        this.deadline = deadline;\n    }\n\n    public LocalDate getDeadline() {\n        return deadline;\n    }\n\n    @Override\n    public String toString() {\n        return name;\n    }\n}\n\npublic class ProjectFilter {\n    public static List<Project> filterProjectsByDeadline(List<Project> projects) {\n        LocalDate oneMonthLater = LocalDate.now().plusMonths(1);\n        return projects.stream()\n                .filter(project -> project.getDeadline().isBefore(oneMonthLater))\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        List<Project> projects = List.of(\n                new Project(\"Project Alpha\", LocalDate.now().plusDays(10)),\n                new Project(\"Project Beta\", LocalDate.now().plusDays(40)),\n                new Project(\"Project Gamma\", LocalDate.now().plusDays(20))\n        );\n\n        List<Project> filteredProjects = filterProjectsByDeadline(projects);\n        filteredProjects.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Select all athletes with a score higher than 90 from a competition result list.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass Athlete {\n    private String name;\n    private int score;\n\n    public Athlete(String name, int score) {\n        this.name = name;\n        this.score = score;\n    }\n\n    public int getScore() {\n        return score;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Athlete> results = List.of(\n                new Athlete(\"Athlete1\", 95),\n                new Athlete(\"Athlete2\", 85),\n                new Athlete(\"Athlete3\", 92),\n                new Athlete(\"Athlete4\", 88)\n        );\n\n        List<Athlete> highScorers = results.stream()\n                .filter(athlete -> athlete.getScore() > 90)\n                .collect(Collectors.toList());\n\n        highScorers.forEach(athlete -> System.out.println(athlete.getName()));\n    }\n}\n```"
  },
  {
    "task": "Filter out all strings that do not contain vowels from a list of words.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class VowelFilter {\n    public static List<String> filterWordsWithVowels(List<String> words) {\n        return words.stream()\n                .filter(word -> word.matches(\".*[aeiouAEIOU].*\"))\n                .collect(Collectors.toList());\n    }\n}\n```"
  },
  {
    "task": "Extract all dates that fall on a weekday from a calendar.",
    "code": "```java\nimport java.time.LocalDate;\nimport java.time.DayOfWeek;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class DateFilter {\n    public static List<LocalDate> filterWeekdays(List<LocalDate> dates) {\n        return dates.stream()\n                .filter(date -> {\n                    DayOfWeek day = date.getDayOfWeek();\n                    return day != DayOfWeek.SATURDAY && day != DayOfWeek.SUNDAY;\n                })\n                .collect(Collectors.toList());\n    }\n}\n```"
  },
  {
    "task": "Find all software versions that are stable releases from a list of software versions.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class StableVersionFilter {\n\n    public static List<String> filterStableVersions(List<String> versions) {\n        return versions.stream()\n                .filter(version -> !version.contains(\"-\"))\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        List<String> versions = List.of(\"1.0.0\", \"1.0.1-beta\", \"2.0.0\", \"2.1.0-alpha\", \"3.0.0\");\n        List<String> stableVersions = filterStableVersions(versions);\n        stableVersions.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Select all temperatures above freezing from a weather report.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class WeatherReport {\n    public static void main(String[] args) {\n        List<Integer> temperatures = Arrays.asList(-5, 0, 3, 10, -2, 7, 12);\n        List<Integer> aboveFreezing = temperatures.stream()\n                                                  .filter(temp -> temp > 0)\n                                                  .collect(Collectors.toList());\n        System.out.println(aboveFreezing);\n    }\n}\n```"
  },
  {
    "task": "Identify all countries with a GDP per capita above $40,000 from a country dataset.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass Country {\n    String name;\n    double gdpPerCapita;\n\n    Country(String name, double gdpPerCapita) {\n        this.name = name;\n        this.gdpPerCapita = gdpPerCapita;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public double getGdpPerCapita() {\n        return gdpPerCapita;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Country> countries = List.of(\n            new Country(\"CountryA\", 45000),\n            new Country(\"CountryB\", 39000),\n            new Country(\"CountryC\", 52000)\n        );\n\n        List<String> highGdpCountries = countries.stream()\n            .filter(country -> country.getGdpPerCapita() > 40000)\n            .map(Country::getName)\n            .collect(Collectors.toList());\n\n        highGdpCountries.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Filter out all names shorter than four letters from a roster.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<String> roster = Arrays.asList(\"John\", \"Amy\", \"Eve\", \"Rob\", \"Chris\", \"Ann\");\n        List<String> filteredRoster = roster.stream()\n                                            .filter(name -> name.length() >= 4)\n                                            .collect(Collectors.toList());\n        System.out.println(filteredRoster);\n    }\n}\n```"
  },
  {
    "task": "Extract all numbers divisible by five from a sequence.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class FunctionalFilter {\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(10, 15, 23, 30, 42, 50, 68);\n        List<Integer> divisibleByFive = numbers.stream()\n                                               .filter(n -> n % 5 == 0)\n                                               .collect(Collectors.toList());\n        System.out.println(divisibleByFive);\n    }\n}\n```"
  },
  {
    "task": "Select all movies with a rating above 4 stars from a film review site.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass Movie {\n    private String title;\n    private double rating;\n\n    public Movie(String title, double rating) {\n        this.title = title;\n        this.rating = rating;\n    }\n\n    public double getRating() {\n        return rating;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n}\n\npublic class MovieFilter {\n    public static List<Movie> filterHighRatedMovies(List<Movie> movies) {\n        return movies.stream()\n                .filter(movie -> movie.getRating() > 4.0)\n                .collect(Collectors.toList());\n    }\n}\n```"
  },
  {
    "task": "Find all jobs with a salary above $50,000 from a job listing.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass Job {\n    String title;\n    double salary;\n\n    public Job(String title, double salary) {\n        this.title = title;\n        this.salary = salary;\n    }\n\n    public double getSalary() {\n        return salary;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n}\n\npublic class JobFilter {\n    public static List<Job> filterJobsBySalary(List<Job> jobs) {\n        return jobs.stream()\n                   .filter(job -> job.getSalary() > 50000)\n                   .collect(Collectors.toList());\n    }\n}\n```"
  },
  {
    "task": "Filter out all entries without an email address from a contact form submission list.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass ContactForm {\n    private String name;\n    private String email;\n\n    public ContactForm(String name, String email) {\n        this.name = name;\n        this.email = email;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    @Override\n    public String toString() {\n        return \"ContactForm{\" +\n                \"name='\" + name + '\\'' +\n                \", email='\" + email + '\\'' +\n                '}';\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        List<ContactForm> submissions = new ArrayList<>();\n        submissions.add(new ContactForm(\"Alice\", \"alice@example.com\"));\n        submissions.add(new ContactForm(\"Bob\", \"\"));\n        submissions.add(new ContactForm(\"Charlie\", null));\n        submissions.add(new ContactForm(\"David\", \"david@example.com\"));\n\n        List<ContactForm> filteredSubmissions = submissions.stream()\n                .filter(contact -> contact.getEmail() != null && !contact.getEmail().isEmpty())\n                .collect(Collectors.toList());\n\n        filteredSubmissions.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Identify all animals weighing more than 50kg from a zoo inventory.",
    "code": "```java\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.stream.Collectors;\n\nclass Animal {\n    private String name;\n    private double weight;\n\n    public Animal(String name, double weight) {\n        this.name = name;\n        this.weight = weight;\n    }\n\n    public double getWeight() {\n        return weight;\n    }\n\n    @Override\n    public String toString() {\n        return name + \" (\" + weight + \"kg)\";\n    }\n}\n\npublic class ZooInventory {\n    public static List<Animal> filterHeavyAnimals(List<Animal> animals) {\n        return animals.stream()\n                      .filter(animal -> animal.getWeight() > 50)\n                      .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        List<Animal> zooInventory = new ArrayList<>();\n        zooInventory.add(new Animal(\"Elephant\", 5000));\n        zooInventory.add(new Animal(\"Tiger\", 220));\n        zooInventory.add(new Animal(\"Kangaroo\", 85));\n        zooInventory.add(new Animal(\"Rabbit\", 4));\n\n        List<Animal> heavyAnimals = filterHeavyAnimals(zooInventory);\n        heavyAnimals.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Select all songs with a duration longer than three minutes from a playlist.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass Song {\n    private String title;\n    private int duration; // duration in seconds\n\n    public Song(String title, int duration) {\n        this.title = title;\n        this.duration = duration;\n    }\n\n    public int getDuration() {\n        return duration;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n}\n\npublic class PlaylistFilter {\n    public static List<Song> filterLongSongs(List<Song> playlist) {\n        return playlist.stream()\n                .filter(song -> song.getDuration() > 180)\n                .collect(Collectors.toList());\n    }\n}\n```"
  },
  {
    "task": "Extract all accounts with a balance below zero from a bank statement.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass Account {\n    private String accountNumber;\n    private double balance;\n\n    public Account(String accountNumber, double balance) {\n        this.accountNumber = accountNumber;\n        this.balance = balance;\n    }\n\n    public double getBalance() {\n        return balance;\n    }\n\n    @Override\n    public String toString() {\n        return \"Account{\" +\n                \"accountNumber='\" + accountNumber + '\\'' +\n                \", balance=\" + balance +\n                '}';\n    }\n}\n\npublic class BankStatement {\n\n    public static List<Account> getAccountsWithNegativeBalance(List<Account> accounts) {\n        return accounts.stream()\n                .filter(account -> account.getBalance() < 0)\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        List<Account> accounts = List.of(\n                new Account(\"001\", 1500.0),\n                new Account(\"002\", -20.0),\n                new Account(\"003\", 0.0),\n                new Account(\"004\", -500.0)\n        );\n\n        List<Account> negativeBalanceAccounts = getAccountsWithNegativeBalance(accounts);\n        negativeBalanceAccounts.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Filter out all non-alphabetic characters from a string of text.",
    "code": "```java\nimport java.util.function.Predicate;\nimport java.util.stream.Collectors;\n\npublic class FilterNonAlphabetic {\n    public static void main(String[] args) {\n        String text = \"Example123, with non-alphabetic! characters.\";\n        String filteredText = filterAlphabetic(text);\n        System.out.println(filteredText);\n    }\n\n    public static String filterAlphabetic(String text) {\n        Predicate<Character> isAlphabetic = Character::isAlphabetic;\n        return text.chars()\n                   .mapToObj(c -> (char) c)\n                   .filter(isAlphabetic)\n                   .map(String::valueOf)\n                   .collect(Collectors.joining());\n    }\n}\n```"
  },
  {
    "task": "Select all participants who scored above average in a competition.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class Competition {\n    static class Participant {\n        String name;\n        double score;\n\n        Participant(String name, double score) {\n            this.name = name;\n            this.score = score;\n        }\n    }\n\n    public static List<Participant> filterAboveAverage(List<Participant> participants) {\n        double averageScore = participants.stream()\n                                          .mapToDouble(p -> p.score)\n                                          .average()\n                                          .orElse(0);\n\n        return participants.stream()\n                           .filter(p -> p.score > averageScore)\n                           .collect(Collectors.toList());\n    }\n}\n```"
  },
  {
    "task": "Find all houses priced under $300,000 from a real estate database.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass House {\n    private final double price;\n\n    public House(double price) {\n        this.price = price;\n    }\n\n    public double getPrice() {\n        return price;\n    }\n}\n\npublic class RealEstateFilter {\n    public static List<House> filterAffordableHouses(List<House> houses) {\n        return houses.stream()\n                .filter(house -> house.getPrice() < 300000)\n                .collect(Collectors.toList());\n    }\n}\n```"
  },
  {
    "task": "Identify all plants that bloom in spring from a botanical catalog.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport java.util.Arrays;\n\nclass Plant {\n    String name;\n    String bloomSeason;\n\n    Plant(String name, String bloomSeason) {\n        this.name = name;\n        this.bloomSeason = bloomSeason;\n    }\n\n    String getBloomSeason() {\n        return bloomSeason;\n    }\n\n    @Override\n    public String toString() {\n        return name;\n    }\n}\n\npublic class BotanicalCatalog {\n    public static void main(String[] args) {\n        List<Plant> plants = Arrays.asList(\n            new Plant(\"Rose\", \"Spring\"),\n            new Plant(\"Tulip\", \"Spring\"),\n            new Plant(\"Daffodil\", \"Spring\"),\n            new Plant(\"Sunflower\", \"Summer\"),\n            new Plant(\"Chrysanthemum\", \"Fall\")\n        );\n\n        List<Plant> springBloomingPlants = plants.stream()\n            .filter(plant -> \"Spring\".equalsIgnoreCase(plant.getBloomSeason()))\n            .collect(Collectors.toList());\n\n        springBloomingPlants.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Extract all passwords that are longer than eight characters from a user database.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class PasswordFilter {\n    public static List<String> filterLongPasswords(List<String> passwords) {\n        return passwords.stream()\n                        .filter(password -> password.length() > 8)\n                        .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        List<String> userPasswords = List.of(\"1234567\", \"password123\", \"admin\", \"securePassword\", \"abc123456789\");\n        List<String> longPasswords = filterLongPasswords(userPasswords);\n        longPasswords.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Filter out all projects that are not yet started from a project management tool.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass Project {\n    private String name;\n    private boolean isStarted;\n\n    public Project(String name, boolean isStarted) {\n        this.name = name;\n        this.isStarted = isStarted;\n    }\n\n    public boolean isStarted() {\n        return isStarted;\n    }\n\n    @Override\n    public String toString() {\n        return name;\n    }\n}\n\npublic class ProjectFilter {\n    public static void main(String[] args) {\n        List<Project> projects = Arrays.asList(\n                new Project(\"Project A\", true),\n                new Project(\"Project B\", false),\n                new Project(\"Project C\", true),\n                new Project(\"Project D\", false)\n        );\n\n        List<Project> startedProjects = projects.stream()\n                .filter(Project::isStarted)\n                .collect(Collectors.toList());\n\n        System.out.println(startedProjects);\n    }\n}\n```"
  },
  {
    "task": "Select all days with temperatures exceeding 25\u00b0C from a climate report.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class ClimateReport {\n    public static class Day {\n        private final String name;\n        private final double temperature;\n\n        public Day(String name, double temperature) {\n            this.name = name;\n            this.temperature = temperature;\n        }\n\n        public String getName() {\n            return name;\n        }\n\n        public double getTemperature() {\n            return temperature;\n        }\n    }\n\n    public static List<Day> filterHotDays(List<Day> days) {\n        return days.stream()\n                   .filter(day -> day.getTemperature() > 25)\n                   .collect(Collectors.toList());\n    }\n}\n```"
  },
  {
    "task": "Find all recipes that are vegetarian from a cookbook.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass Recipe {\n    private String name;\n    private boolean isVegetarian;\n\n    public Recipe(String name, boolean isVegetarian) {\n        this.name = name;\n        this.isVegetarian = isVegetarian;\n    }\n\n    public boolean isVegetarian() {\n        return isVegetarian;\n    }\n\n    @Override\n    public String toString() {\n        return name;\n    }\n}\n\npublic class Cookbook {\n    public static void main(String[] args) {\n        List<Recipe> recipes = List.of(\n            new Recipe(\"Spaghetti Bolognese\", false),\n            new Recipe(\"Vegetable Stir Fry\", true),\n            new Recipe(\"Chicken Curry\", false),\n            new Recipe(\"Mushroom Risotto\", true)\n        );\n\n        List<Recipe> vegetarianRecipes = recipes.stream()\n            .filter(Recipe::isVegetarian)\n            .collect(Collectors.toList());\n\n        vegetarianRecipes.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Identify all articles that mention a specific keyword from a news feed.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class NewsFilter {\n    public static List<String> filterArticlesByKeyword(List<String> articles, String keyword) {\n        return articles.stream()\n                .filter(article -> article.contains(keyword))\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        List<String> newsFeed = List.of(\n                \"Breaking news: Java becomes the most popular programming language.\",\n                \"New Python update released with exciting features.\",\n                \"Java developers are in high demand this year.\",\n                \"Learn JavaScript for web development.\"\n        );\n\n        String keyword = \"Java\";\n        List<String> filteredArticles = filterArticlesByKeyword(newsFeed, keyword);\n        filteredArticles.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Extract all files with the '.jpg' extension from a directory.",
    "code": "```java\nimport java.io.File;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class JpgFilter {\n    public static void main(String[] args) {\n        File directory = new File(\"path/to/directory\");\n        List<File> jpgFiles = Arrays.stream(directory.listFiles())\n                                    .filter(file -> file.isFile() && file.getName().endsWith(\".jpg\"))\n                                    .collect(Collectors.toList());\n        jpgFiles.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Filter out all transactions that are not categorized from a financial statement.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass Transaction {\n    private String category;\n\n    public Transaction(String category) {\n        this.category = category;\n    }\n\n    public String getCategory() {\n        return category;\n    }\n}\n\npublic class FinancialFilter {\n    public static List<Transaction> filterUncategorizedTransactions(List<Transaction> transactions) {\n        return transactions.stream()\n                .filter(transaction -> transaction.getCategory() != null && !transaction.getCategory().isEmpty())\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        // Example usage\n        List<Transaction> transactions = List.of(\n                new Transaction(\"Groceries\"),\n                new Transaction(null),\n                new Transaction(\"\"),\n                new Transaction(\"Utilities\")\n        );\n\n        List<Transaction> categorizedTransactions = filterUncategorizedTransactions(transactions);\n        categorizedTransactions.forEach(t -> System.out.println(t.getCategory()));\n    }\n}\n```"
  },
  {
    "task": "Select all paintings created before 1900 from an art gallery collection.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass Painting {\n    String title;\n    int year;\n\n    public Painting(String title, int year) {\n        this.title = title;\n        this.year = year;\n    }\n\n    public int getYear() {\n        return year;\n    }\n\n    @Override\n    public String toString() {\n        return \"Painting{\" + \"title='\" + title + '\\'' + \", year=\" + year + '}';\n    }\n}\n\npublic class ArtGallery {\n    public static void main(String[] args) {\n        List<Painting> paintings = new ArrayList<>();\n        paintings.add(new Painting(\"Starry Night\", 1889));\n        paintings.add(new Painting(\"The Persistence of Memory\", 1931));\n        paintings.add(new Painting(\"Mona Lisa\", 1503));\n        paintings.add(new Painting(\"The Scream\", 1893));\n\n        List<Painting> paintingsBefore1900 = paintings.stream()\n                .filter(p -> p.getYear() < 1900)\n                .collect(Collectors.toList());\n\n        paintingsBefore1900.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Find all students with perfect attendance from a school record.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass Student {\n    private String name;\n    private int attendance;\n\n    public Student(String name, int attendance) {\n        this.name = name;\n        this.attendance = attendance;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAttendance() {\n        return attendance;\n    }\n}\n\npublic class SchoolRecord {\n    public static List<Student> findStudentsWithPerfectAttendance(List<Student> students) {\n        return students.stream()\n                .filter(student -> student.getAttendance() == 100)\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        List<Student> students = List.of(\n                new Student(\"John\", 100),\n                new Student(\"Jane\", 95),\n                new Student(\"Alex\", 100),\n                new Student(\"Emily\", 85)\n        );\n\n        List<Student> perfectAttendanceStudents = findStudentsWithPerfectAttendance(students);\n        perfectAttendanceStudents.forEach(student -> System.out.println(student.getName()));\n    }\n}\n```"
  },
  {
    "task": "Identify all messages sent by a specific user from a chat application.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass Message {\n    String user;\n    String content;\n\n    // Constructor\n    public Message(String user, String content) {\n        this.user = user;\n        this.content = content;\n    }\n\n    // Getter for user\n    public String getUser() {\n        return user;\n    }\n\n    // Getter for content\n    public String getContent() {\n        return content;\n    }\n}\n\npublic class ChatFilter {\n\n    public static List<Message> filterMessagesByUser(List<Message> messages, String user) {\n        return messages.stream()\n                       .filter(message -> message.getUser().equals(user))\n                       .collect(Collectors.toList());\n    }\n}\n```"
  },
  {
    "task": "Extract all elements greater than 100 from an array of numbers.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class FunctionalFilter {\n    public static void main(String[] args) {\n        int[] numbers = {50, 150, 200, 75, 125, 90};\n        \n        List<Integer> filteredNumbers = Arrays.stream(numbers)\n                                              .filter(num -> num > 100)\n                                              .boxed()\n                                              .collect(Collectors.toList());\n        \n        System.out.println(filteredNumbers);\n    }\n}\n```"
  },
  {
    "task": "Filter out all words that do not end in 'ed' from a paragraph.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class FunctionalFilter {\n    public static void main(String[] args) {\n        String paragraph = \"This is a paragraph with words like played, started, and finished, but also jump, run, and go.\";\n        List<String> words = Arrays.asList(paragraph.split(\"\\\\s+\"));\n        List<String> filteredWords = words.stream()\n                                          .filter(word -> word.endsWith(\"ed\"))\n                                          .collect(Collectors.toList());\n        System.out.println(filteredWords);\n    }\n}\n```"
  },
  {
    "task": "Select all flights departing before noon from a flight schedule.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.function.Predicate;\nimport java.time.LocalTime;\n\nclass Flight {\n    private String flightNumber;\n    private LocalTime departureTime;\n\n    public Flight(String flightNumber, LocalTime departureTime) {\n        this.flightNumber = flightNumber;\n        this.departureTime = departureTime;\n    }\n\n    public LocalTime getDepartureTime() {\n        return departureTime;\n    }\n\n    @Override\n    public String toString() {\n        return \"Flight{\" +\n               \"flightNumber='\" + flightNumber + '\\'' +\n               \", departureTime=\" + departureTime +\n               '}';\n    }\n}\n\npublic class FlightFilter {\n    public static List<Flight> filterFlights(List<Flight> flights, Predicate<Flight> predicate) {\n        List<Flight> result = new ArrayList<>();\n        for (Flight flight : flights) {\n            if (predicate.test(flight)) {\n                result.add(flight);\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Flight> schedule = List.of(\n            new Flight(\"AA123\", LocalTime.of(8, 30)),\n            new Flight(\"BA456\", LocalTime.of(13, 15)),\n            new Flight(\"CA789\", LocalTime.of(11, 45))\n        );\n\n        List<Flight> morningFlights = filterFlights(schedule, flight ->\n            flight.getDepartureTime().isBefore(LocalTime.NOON)\n        );\n\n        morningFlights.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Find all products priced above $20 from an online store inventory.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass Product {\n    private String name;\n    private double price;\n\n    public Product(String name, double price) {\n        this.name = name;\n        this.price = price;\n    }\n\n    public double getPrice() {\n        return price;\n    }\n\n    public String toString() {\n        return name + \": $\" + price;\n    }\n}\n\npublic class InventoryFilter {\n    public static void main(String[] args) {\n        List<Product> inventory = List.of(\n            new Product(\"Product1\", 15.99),\n            new Product(\"Product2\", 25.00),\n            new Product(\"Product3\", 30.00),\n            new Product(\"Product4\", 10.00),\n            new Product(\"Product5\", 50.00)\n        );\n\n        List<Product> expensiveProducts = inventory.stream()\n            .filter(product -> product.getPrice() > 20)\n            .collect(Collectors.toList());\n\n        expensiveProducts.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Identify all sessions longer than one hour from a webinar series.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass Session {\n    private String title;\n    private int durationInMinutes;\n\n    public Session(String title, int durationInMinutes) {\n        this.title = title;\n        this.durationInMinutes = durationInMinutes;\n    }\n\n    public int getDurationInMinutes() {\n        return durationInMinutes;\n    }\n\n    @Override\n    public String toString() {\n        return \"Session{\" +\n                \"title='\" + title + '\\'' +\n                \", durationInMinutes=\" + durationInMinutes +\n                '}';\n    }\n}\n\npublic class WebinarFilter {\n    public static List<Session> filterLongSessions(List<Session> sessions) {\n        return sessions.stream()\n                .filter(session -> session.getDurationInMinutes() > 60)\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        List<Session> sessions = List.of(\n                new Session(\"Intro to Java\", 45),\n                new Session(\"Advanced Java\", 90),\n                new Session(\"Java Streams\", 75)\n        );\n\n        List<Session> longSessions = filterLongSessions(sessions);\n        longSessions.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Extract all images with a resolution higher than 1080p from a photo library.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass Image {\n    private int width;\n    private int height;\n\n    public Image(int width, int height) {\n        this.width = width;\n        this.height = height;\n    }\n\n    public int getWidth() {\n        return width;\n    }\n\n    public int getHeight() {\n        return height;\n    }\n}\n\npublic class PhotoLibrary {\n    public static List<Image> filterHighResolutionImages(List<Image> images) {\n        return images.stream()\n                .filter(image -> image.getWidth() > 1920 && image.getHeight() > 1080)\n                .collect(Collectors.toList());\n    }\n}\n```"
  },
  {
    "task": "Filter out all responses that are not 'yes' or 'no' from a survey result.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class SurveyFilter {\n    public static void main(String[] args) {\n        List<String> surveyResponses = Arrays.asList(\"yes\", \"no\", \"maybe\", \"yes\", \"no\", \"unknown\");\n        \n        List<String> filteredResponses = surveyResponses.stream()\n                .filter(response -> response.equals(\"yes\") || response.equals(\"no\"))\n                .collect(Collectors.toList());\n        \n        System.out.println(filteredResponses);\n    }\n}\n```"
  },
  {
    "task": "Select all tweets with more than 100 likes from a Twitter feed.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass Tweet {\n    private String content;\n    private int likes;\n\n    public Tweet(String content, int likes) {\n        this.content = content;\n        this.likes = likes;\n    }\n\n    public int getLikes() {\n        return likes;\n    }\n\n    public String getContent() {\n        return content;\n    }\n}\n\npublic class TwitterFeedFilter {\n    public List<Tweet> filterTweets(List<Tweet> tweets) {\n        return tweets.stream()\n                     .filter(tweet -> tweet.getLikes() > 100)\n                     .collect(Collectors.toList());\n    }\n}\n```"
  },
  {
    "task": "Find all links that are broken from a webpage.",
    "code": "```java\nimport java.io.IOException;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.select.Elements;\n\npublic class BrokenLinkFinder {\n\n    public static void main(String[] args) {\n        String url = \"http://example.com\";\n        findBrokenLinks(url).forEach(System.out::println);\n    }\n\n    public static List<String> findBrokenLinks(String url) {\n        try {\n            Document doc = Jsoup.connect(url).get();\n            Elements links = doc.select(\"a[href]\");\n            return links.stream()\n                .map(link -> link.attr(\"abs:href\"))\n                .filter(BrokenLinkFinder::isLinkBroken)\n                .collect(Collectors.toList());\n        } catch (IOException e) {\n            throw new RuntimeException(\"Failed to connect to the webpage.\", e);\n        }\n    }\n\n    private static boolean isLinkBroken(String url) {\n        try {\n            HttpURLConnection connection = (HttpURLConnection) new URL(url).openConnection();\n            connection.setRequestMethod(\"HEAD\");\n            int responseCode = connection.getResponseCode();\n            return responseCode >= 400;\n        } catch (IOException e) {\n            return true;\n        }\n    }\n}\n```"
  },
  {
    "task": "Identify all machines that are currently offline from a network monitoring tool.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass Machine {\n    private String name;\n    private boolean isOnline;\n\n    public Machine(String name, boolean isOnline) {\n        this.name = name;\n        this.isOnline = isOnline;\n    }\n\n    public boolean isOnline() {\n        return isOnline;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n\npublic class NetworkMonitor {\n    public static List<Machine> getOfflineMachines(List<Machine> machines) {\n        return machines.stream()\n                .filter(machine -> !machine.isOnline())\n                .collect(Collectors.toList());\n    }\n}\n```"
  },
  {
    "task": "Extract all invoices with a due date in the current month from an accounting system.",
    "code": "```java\nimport java.time.LocalDate;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass Invoice {\n    private LocalDate dueDate;\n\n    public Invoice(LocalDate dueDate) {\n        this.dueDate = dueDate;\n    }\n\n    public LocalDate getDueDate() {\n        return dueDate;\n    }\n}\n\npublic class InvoiceFilter {\n    public static List<Invoice> filterInvoicesDueThisMonth(List<Invoice> invoices) {\n        LocalDate now = LocalDate.now();\n        return invoices.stream()\n                .filter(invoice -> invoice.getDueDate().getYear() == now.getYear() &&\n                                   invoice.getDueDate().getMonth() == now.getMonth())\n                .collect(Collectors.toList());\n    }\n}\n```"
  },
  {
    "task": "Filter out all lines in a file that start with a '#' from a configuration file.",
    "code": "```java\nimport java.io.*;\nimport java.nio.file.*;\nimport java.util.stream.*;\n\npublic class ConfigFilter {\n    public static void main(String[] args) {\n        Path inputPath = Paths.get(\"config.txt\");\n        Path outputPath = Paths.get(\"filtered_config.txt\");\n        \n        try (Stream<String> lines = Files.lines(inputPath);\n             BufferedWriter writer = Files.newBufferedWriter(outputPath)) {\n            lines.filter(line -> !line.trim().startsWith(\"#\"))\n                 .forEach(line -> {\n                     try {\n                         writer.write(line);\n                         writer.newLine();\n                     } catch (IOException e) {\n                         e.printStackTrace();\n                     }\n                 });\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
  },
  {
    "task": "Select all posts with a comment count higher than 50 from a blog.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass Post {\n    private int commentCount;\n    // Assume there are other fields and methods\n\n    public int getCommentCount() {\n        return commentCount;\n    }\n}\n\npublic class Blog {\n    private List<Post> posts;\n\n    public Blog(List<Post> posts) {\n        this.posts = posts;\n    }\n\n    public List<Post> getPostsWithHighCommentCount() {\n        return posts.stream()\n                .filter(post -> post.getCommentCount() > 50)\n                .collect(Collectors.toList());\n    }\n}\n```"
  },
  {
    "task": "Find all offers that expire within the next week from a promotional database.",
    "code": "```java\nimport java.time.LocalDate;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass Offer {\n    private LocalDate expiryDate;\n\n    public Offer(LocalDate expiryDate) {\n        this.expiryDate = expiryDate;\n    }\n\n    public LocalDate getExpiryDate() {\n        return expiryDate;\n    }\n}\n\npublic class OfferFilter {\n    public static List<Offer> filterOffersExpiringWithinAWeek(List<Offer> offers) {\n        LocalDate today = LocalDate.now();\n        LocalDate nextWeek = today.plusWeeks(1);\n        return offers.stream()\n                     .filter(offer -> !offer.getExpiryDate().isBefore(today) && \n                                      offer.getExpiryDate().isBefore(nextWeek))\n                     .collect(Collectors.toList());\n    }\n}\n```"
  },
  {
    "task": "Identify all items that are on sale from a shopping catalog.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass Item {\n    private String name;\n    private boolean onSale;\n\n    public Item(String name, boolean onSale) {\n        this.name = name;\n        this.onSale = onSale;\n    }\n\n    public boolean isOnSale() {\n        return onSale;\n    }\n\n    @Override\n    public String toString() {\n        return name;\n    }\n}\n\npublic class ShoppingCatalog {\n    public static void main(String[] args) {\n        List<Item> catalog = new ArrayList<>();\n        catalog.add(new Item(\"Laptop\", false));\n        catalog.add(new Item(\"Smartphone\", true));\n        catalog.add(new Item(\"Tablet\", true));\n        catalog.add(new Item(\"Headphones\", false));\n\n        List<Item> itemsOnSale = catalog.stream()\n                .filter(Item::isOnSale)\n                .collect(Collectors.toList());\n\n        itemsOnSale.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Extract all notes that mention 'urgent' from a meeting record.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class MeetingNotesFilter {\n    public static List<String> filterUrgentNotes(List<String> notes) {\n        return notes.stream()\n                    .filter(note -> note.toLowerCase().contains(\"urgent\"))\n                    .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        List<String> meetingNotes = List.of(\n            \"Discuss project timeline\",\n            \"urgent: review budget allocation\",\n            \"Team lunch next week\",\n            \"urgent: finalize presentation slides\"\n        );\n\n        List<String> urgentNotes = filterUrgentNotes(meetingNotes);\n        urgentNotes.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Filter out all numbers that do not have a remainder when divided by two from a list.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class FunctionalFilter {\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n        List<Integer> filteredNumbers = numbers.stream()\n                                               .filter(n -> n % 2 != 0)\n                                               .collect(Collectors.toList());\n        System.out.println(filteredNumbers);\n    }\n}\n```"
  },
  {
    "task": "Select all concerts happening in the summer from an event calendar.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.function.Predicate;\nimport java.time.LocalDate;\nimport java.time.Month;\n\nclass Event {\n    private String name;\n    private LocalDate date;\n\n    public Event(String name, LocalDate date) {\n        this.name = name;\n        this.date = date;\n    }\n\n    public LocalDate getDate() {\n        return date;\n    }\n\n    @Override\n    public String toString() {\n        return \"Event{name='\" + name + \"', date=\" + date + '}';\n    }\n}\n\npublic class EventFilter {\n    public static void main(String[] args) {\n        List<Event> events = List.of(\n            new Event(\"Concert A\", LocalDate.of(2023, Month.JUNE, 21)),\n            new Event(\"Concert B\", LocalDate.of(2023, Month.JULY, 10)),\n            new Event(\"Concert C\", LocalDate.of(2023, Month.APRIL, 5)),\n            new Event(\"Concert D\", LocalDate.of(2023, Month.AUGUST, 15))\n        );\n\n        Predicate<Event> isSummerConcert = event -> {\n            Month month = event.getDate().getMonth();\n            return month == Month.JUNE || month == Month.JULY || month == Month.AUGUST;\n        };\n\n        List<Event> summerConcerts = events.stream()\n                                           .filter(isSummerConcert)\n                                           .toList();\n\n        summerConcerts.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Find all users with more than 1000 followers from a social media platform.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass User {\n    String name;\n    int followers;\n\n    User(String name, int followers) {\n        this.name = name;\n        this.followers = followers;\n    }\n\n    public int getFollowers() {\n        return followers;\n    }\n\n    @Override\n    public String toString() {\n        return \"User{name='\" + name + \"', followers=\" + followers + '}';\n    }\n}\n\npublic class SocialMediaPlatform {\n    public static List<User> filterUsersWithMoreThanThousandFollowers(List<User> users) {\n        return users.stream()\n                .filter(user -> user.getFollowers() > 1000)\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        List<User> users = List.of(\n                new User(\"Alice\", 1500),\n                new User(\"Bob\", 800),\n                new User(\"Charlie\", 1200)\n        );\n\n        List<User> popularUsers = filterUsersWithMoreThanThousandFollowers(users);\n        popularUsers.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Identify all stocks with a growth rate above 10% from a financial portfolio.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass Stock {\n    private String name;\n    private double growthRate;\n\n    public Stock(String name, double growthRate) {\n        this.name = name;\n        this.growthRate = growthRate;\n    }\n\n    public double getGrowthRate() {\n        return growthRate;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n\npublic class FinancialPortfolio {\n\n    public static void main(String[] args) {\n        List<Stock> portfolio = new ArrayList<>();\n        portfolio.add(new Stock(\"AAPL\", 12.5));\n        portfolio.add(new Stock(\"GOOGL\", 8.0));\n        portfolio.add(new Stock(\"AMZN\", 15.0));\n        portfolio.add(new Stock(\"MSFT\", 9.5));\n\n        List<Stock> highGrowthStocks = portfolio.stream()\n            .filter(stock -> stock.getGrowthRate() > 10.0)\n            .collect(Collectors.toList());\n\n        highGrowthStocks.forEach(stock -> System.out.println(stock.getName()));\n    }\n}\n```"
  },
  {
    "task": "Extract all reviews that have a five-star rating from a product review site.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass Review {\n    private int rating;\n    private String content;\n    \n    public Review(int rating, String content) {\n        this.rating = rating;\n        this.content = content;\n    }\n\n    public int getRating() {\n        return rating;\n    }\n\n    public String getContent() {\n        return content;\n    }\n}\n\npublic class ReviewFilter {\n    public static List<Review> filterFiveStarReviews(List<Review> reviews) {\n        return reviews.stream()\n                .filter(review -> review.getRating() == 5)\n                .collect(Collectors.toList());\n    }\n}\n```"
  },
  {
    "task": "Filter out all emails that are not flagged from an inbox.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass Email {\n    private boolean flagged;\n    private String content;\n\n    public Email(boolean flagged, String content) {\n        this.flagged = flagged;\n        this.content = content;\n    }\n\n    public boolean isFlagged() {\n        return flagged;\n    }\n\n    public String getContent() {\n        return content;\n    }\n}\n\npublic class EmailFilter {\n    public static List<Email> filterFlaggedEmails(List<Email> inbox) {\n        return inbox.stream()\n                    .filter(Email::isFlagged)\n                    .collect(Collectors.toList());\n    }\n}\n```"
  },
  {
    "task": "Select all entries with a timestamp from the past 24 hours from a log file.",
    "code": "```java\nimport java.nio.file.*;\nimport java.io.IOException;\nimport java.time.*;\nimport java.util.stream.*;\n\npublic class LogFilter {\n    public static void main(String[] args) {\n        try {\n            Path logFile = Paths.get(\"log.txt\");\n            Stream<String> lines = Files.lines(logFile);\n\n            LocalDateTime twentyFourHoursAgo = LocalDateTime.now().minusHours(24);\n\n            lines.filter(line -> {\n                // Assuming each line starts with a timestamp in ISO_LOCAL_DATE_TIME format\n                String timestampString = line.substring(0, line.indexOf(' '));\n                LocalDateTime timestamp = LocalDateTime.parse(timestampString);\n                return timestamp.isAfter(twentyFourHoursAgo);\n            }).forEach(System.out::println);\n\n            lines.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
  },
  {
    "task": "Find all books by a specific author from a library database.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass Book {\n    private String title;\n    private String author;\n\n    public Book(String title, String author) {\n        this.title = title;\n        this.author = author;\n    }\n\n    public String getAuthor() {\n        return author;\n    }\n}\n\npublic class Library {\n    private List<Book> books;\n\n    public Library(List<Book> books) {\n        this.books = books;\n    }\n\n    public List<Book> findBooksByAuthor(String author) {\n        return books.stream()\n                .filter(book -> book.getAuthor().equals(author))\n                .collect(Collectors.toList());\n    }\n}\n```"
  },
  {
    "task": "Identify all donations above $500 from a charity fundraiser report.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class DonationFilter {\n\n    public static List<Double> filterDonationsAbove500(List<Double> donations) {\n        return donations.stream()\n                .filter(donation -> donation > 500)\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        List<Double> donations = List.of(100.0, 550.0, 300.0, 750.0, 200.0, 650.0);\n        List<Double> filteredDonations = filterDonationsAbove500(donations);\n        System.out.println(filteredDonations);\n    }\n}\n```"
  },
  {
    "task": "Extract all assignments due in the next week from a course syllabus.",
    "code": "```java\nimport java.time.LocalDate;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass Assignment {\n    private String name;\n    private LocalDate dueDate;\n\n    public Assignment(String name, LocalDate dueDate) {\n        this.name = name;\n        this.dueDate = dueDate;\n    }\n\n    public LocalDate getDueDate() {\n        return dueDate;\n    }\n}\n\npublic class Syllabus {\n    public static List<Assignment> filterAssignmentsDueNextWeek(List<Assignment> assignments) {\n        LocalDate now = LocalDate.now();\n        LocalDate nextWeek = now.plusWeeks(1);\n        return assignments.stream()\n                .filter(assignment -> {\n                    LocalDate dueDate = assignment.getDueDate();\n                    return dueDate.isAfter(now) && dueDate.isBefore(nextWeek);\n                })\n                .collect(Collectors.toList());\n    }\n}\n```"
  },
  {
    "task": "Filter out all movies that are not in English from a streaming service.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass Movie {\n    private String title;\n    private String language;\n\n    public Movie(String title, String language) {\n        this.title = title;\n        this.language = language;\n    }\n\n    public String getLanguage() {\n        return language;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n}\n\npublic class StreamingService {\n    public List<Movie> filterEnglishMovies(List<Movie> movies) {\n        return movies.stream()\n                .filter(movie -> \"English\".equalsIgnoreCase(movie.getLanguage()))\n                .collect(Collectors.toList());\n    }\n}\n```"
  },
  {
    "task": "Select all landmarks located in Europe from a travel guide.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass Landmark {\n    String name;\n    String continent;\n\n    Landmark(String name, String continent) {\n        this.name = name;\n        this.continent = continent;\n    }\n}\n\npublic class TravelGuide {\n    public static void main(String[] args) {\n        List<Landmark> landmarks = Arrays.asList(\n            new Landmark(\"Eiffel Tower\", \"Europe\"),\n            new Landmark(\"Great Wall\", \"Asia\"),\n            new Landmark(\"Colosseum\", \"Europe\"),\n            new Landmark(\"Statue of Liberty\", \"North America\"),\n            new Landmark(\"Big Ben\", \"Europe\")\n        );\n\n        List<Landmark> europeanLandmarks = landmarks.stream()\n            .filter(landmark -> \"Europe\".equals(landmark.continent))\n            .collect(Collectors.toList());\n\n        europeanLandmarks.forEach(landmark -> System.out.println(landmark.name));\n    }\n}\n```"
  },
  {
    "task": "Find all contracts that are set to renew next month from a contract management system.",
    "code": "```java\nimport java.time.LocalDate;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass Contract {\n    private LocalDate renewalDate;\n\n    public Contract(LocalDate renewalDate) {\n        this.renewalDate = renewalDate;\n    }\n\n    public LocalDate getRenewalDate() {\n        return renewalDate;\n    }\n}\n\npublic class ContractFilter {\n    public List<Contract> findContractsToRenewNextMonth(List<Contract> contracts) {\n        LocalDate today = LocalDate.now();\n        LocalDate nextMonth = today.plusMonths(1);\n\n        return contracts.stream()\n                .filter(contract -> isRenewingNextMonth(contract, nextMonth))\n                .collect(Collectors.toList());\n    }\n\n    private boolean isRenewingNextMonth(Contract contract, LocalDate nextMonth) {\n        return contract.getRenewalDate().getMonth() == nextMonth.getMonth()\n                && contract.getRenewalDate().getYear() == nextMonth.getYear();\n    }\n}\n```"
  },
  {
    "task": "Identify all volunteer hours logged in the past year from a non-profit organization database.",
    "code": "```java\nimport java.time.LocalDate;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass VolunteerHour {\n    private LocalDate date;\n    private int hours;\n\n    public VolunteerHour(LocalDate date, int hours) {\n        this.date = date;\n        this.hours = hours;\n    }\n\n    public LocalDate getDate() {\n        return date;\n    }\n\n    public int getHours() {\n        return hours;\n    }\n}\n\nclass VolunteerHourFilter {\n    public List<VolunteerHour> filterLastYear(List<VolunteerHour> allHours) {\n        LocalDate oneYearAgo = LocalDate.now().minusYears(1);\n        return allHours.stream()\n                .filter(vh -> vh.getDate().isAfter(oneYearAgo))\n                .collect(Collectors.toList());\n    }\n}\n```"
  },
  {
    "task": "Extract all elements that are not strings from a mixed-type list.",
    "code": "```java\nimport java.util.List;\nimport java.util.Arrays;\nimport java.util.stream.Collectors;\n\npublic class FunctionalFilter {\n    public static void main(String[] args) {\n        List<Object> mixedList = Arrays.asList(\"Hello\", 42, 3.14, \"World\", true, 100L, 'A');\n        \n        List<Object> nonStringElements = mixedList.stream()\n            .filter(element -> !(element instanceof String))\n            .collect(Collectors.toList());\n        \n        System.out.println(nonStringElements);\n    }\n}\n```"
  },
  {
    "task": "Filter out all orders that are not yet shipped from an e-commerce system.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass Order {\n    private boolean shipped;\n\n    public Order(boolean shipped) {\n        this.shipped = shipped;\n    }\n\n    public boolean isShipped() {\n        return shipped;\n    }\n}\n\npublic class OrderFilter {\n    public static List<Order> filterUnshippedOrders(List<Order> orders) {\n        return orders.stream()\n                     .filter(Order::isShipped)\n                     .collect(Collectors.toList());\n    }\n}\n```"
  },
  {
    "task": "Select all emails sent from a specific address in an email server.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass Email {\n    private String sender;\n    private String recipient;\n    private String subject;\n    private String body;\n\n    // Constructor and Getters\n\n    public Email(String sender, String recipient, String subject, String body) {\n        this.sender = sender;\n        this.recipient = recipient;\n        this.subject = subject;\n        this.body = body;\n    }\n\n    public String getSender() {\n        return sender;\n    }\n}\n\npublic class EmailFilter {\n    public static List<Email> filterEmailsBySender(List<Email> emails, String specificSender) {\n        return emails.stream()\n            .filter(email -> email.getSender().equals(specificSender))\n            .collect(Collectors.toList());\n    }\n}\n```"
  },
  {
    "task": "Find all passwords with at least one special character from a security database.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class PasswordFilter {\n    public static void main(String[] args) {\n        List<String> passwords = Arrays.asList(\"password123\", \"admin!\", \"welcome#\", \"user123\", \"secure$\");\n\n        List<String> filteredPasswords = passwords.stream()\n                .filter(password -> password.matches(\".*[!@#$%^&*(),.?\\\":{}|<>].*\"))\n                .collect(Collectors.toList());\n\n        filteredPasswords.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Identify all courses with a prerequisite from a university catalog.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass Course {\n    private String name;\n    private boolean hasPrerequisite;\n\n    public Course(String name, boolean hasPrerequisite) {\n        this.name = name;\n        this.hasPrerequisite = hasPrerequisite;\n    }\n\n    public boolean hasPrerequisite() {\n        return hasPrerequisite;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n\npublic class UniversityCatalog {\n\n    public static List<Course> filterCoursesWithPrerequisites(List<Course> courses) {\n        return courses.stream()\n                .filter(Course::hasPrerequisite)\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        List<Course> courses = List.of(\n                new Course(\"Mathematics\", true),\n                new Course(\"History\", false),\n                new Course(\"Biology\", true),\n                new Course(\"Art\", false)\n        );\n\n        List<Course> coursesWithPrerequisites = filterCoursesWithPrerequisites(courses);\n        coursesWithPrerequisites.forEach(course -> System.out.println(course.getName()));\n    }\n}\n```"
  },
  {
    "task": "Extract all genes associated with a specific trait from a genetic database.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass Gene {\n    private String name;\n    private List<String> associatedTraits;\n\n    public Gene(String name, List<String> associatedTraits) {\n        this.name = name;\n        this.associatedTraits = associatedTraits;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public List<String> getAssociatedTraits() {\n        return associatedTraits;\n    }\n}\n\npublic class GeneticDatabase {\n    public static List<Gene> filterGenesByTrait(List<Gene> genes, String targetTrait) {\n        return genes.stream()\n                .filter(gene -> gene.getAssociatedTraits().contains(targetTrait))\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        // Example usage\n        List<Gene> genes = List.of(\n                new Gene(\"Gene1\", List.of(\"TraitA\", \"TraitB\")),\n                new Gene(\"Gene2\", List.of(\"TraitB\")),\n                new Gene(\"Gene3\", List.of(\"TraitC\", \"TraitA\"))\n        );\n\n        List<Gene> filteredGenes = filterGenesByTrait(genes, \"TraitA\");\n        filteredGenes.forEach(gene -> System.out.println(gene.getName()));\n    }\n}\n```"
  },
  {
    "task": "Filter out all investments with a risk level below medium from a portfolio.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class InvestmentFilter {\n\n    enum RiskLevel {\n        LOW, MEDIUM, HIGH\n    }\n\n    static class Investment {\n        String name;\n        RiskLevel riskLevel;\n\n        Investment(String name, RiskLevel riskLevel) {\n            this.name = name;\n            this.riskLevel = riskLevel;\n        }\n\n        RiskLevel getRiskLevel() {\n            return riskLevel;\n        }\n    }\n\n    public static List<Investment> filterInvestments(List<Investment> portfolio) {\n        return portfolio.stream()\n                .filter(investment -> investment.getRiskLevel().ordinal() >= RiskLevel.MEDIUM.ordinal())\n                .collect(Collectors.toList());\n    }\n}\n```"
  },
  {
    "task": "Select all calls longer than five minutes from a call log.",
    "code": "```java\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.stream.Collectors;\n\nclass Call {\n    private final int duration; // duration in seconds\n\n    public Call(int duration) {\n        this.duration = duration;\n    }\n\n    public int getDuration() {\n        return duration;\n    }\n}\n\npublic class CallFilter {\n    public static List<Call> filterLongCalls(List<Call> callLog) {\n        return callLog.stream()\n                .filter(call -> call.getDuration() > 300)\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        List<Call> callLog = new ArrayList<>();\n        callLog.add(new Call(200));\n        callLog.add(new Call(400));\n        callLog.add(new Call(600));\n\n        List<Call> longCalls = filterLongCalls(callLog);\n        // longCalls now contains calls longer than five minutes\n    }\n}\n```"
  }
]