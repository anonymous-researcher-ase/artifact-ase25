[
  {
    "task": "Create a function that modifies the first element of an array passed to it. Explain how the changes are reflected in the original array.",
    "code": "```java\npublic class Main {\n    public static void main(String[] args) {\n        int[] numbers = {10, 20, 30};\n        modifyFirstElement(numbers);\n        for (int number : numbers) {\n            System.out.print(number + \" \");\n        }\n    }\n\n    public static void modifyFirstElement(int[] arr) {\n        if (arr.length > 0) {\n            arr[0] = 99;\n        }\n    }\n}\n```"
  },
  {
    "task": "Design a function that swaps the values of two variables using pass-by-reference. Demonstrate how the swap affects the original variables.",
    "code": "```java\npublic class SwapExample {\n    static class IntHolder {\n        int value;\n        IntHolder(int value) {\n            this.value = value;\n        }\n    }\n\n    public static void swap(IntHolder a, IntHolder b) {\n        int temp = a.value;\n        a.value = b.value;\n        b.value = temp;\n    }\n\n    public static void main(String[] args) {\n        IntHolder x = new IntHolder(5);\n        IntHolder y = new IntHolder(10);\n        \n        System.out.println(\"Before swap: x = \" + x.value + \", y = \" + y.value);\n        swap(x, y);\n        System.out.println(\"After swap: x = \" + x.value + \", y = \" + y.value);\n    }\n}\n```"
  },
  {
    "task": "Write a program that passes a large data structure to a function by value and by reference. Compare the performance and memory usage for both approaches.",
    "code": "```java\npublic class ParameterPassingExample {\n\n    static class LargeDataStructure {\n        int[] data = new int[1000000];\n        \n        public LargeDataStructure() {\n            for (int i = 0; i < data.length; i++) {\n                data[i] = i;\n            }\n        }\n    }\n\n    public static void passByValue(LargeDataStructure largeDataStructure) {\n        int sum = 0;\n        for (int num : largeDataStructure.data) {\n            sum += num;\n        }\n    }\n\n    public static void passByReference(LargeDataStructure[] largeDataStructureRef) {\n        int sum = 0;\n        for (int num : largeDataStructureRef[0].data) {\n            sum += num;\n        }\n    }\n\n    public static void main(String[] args) {\n        LargeDataStructure largeData = new LargeDataStructure();\n        \n        long startTime = System.currentTimeMillis();\n        passByValue(largeData);\n        long endTime = System.currentTimeMillis();\n        System.out.println(\"Pass by value time: \" + (endTime - startTime) + \"ms\");\n        \n        startTime = System.currentTimeMillis();\n        passByReference(new LargeDataStructure[]{largeData});\n        endTime = System.currentTimeMillis();\n        System.out.println(\"Pass by reference time: \" + (endTime - startTime) + \"ms\");\n    }\n}\n```"
  },
  {
    "task": "Implement a function that accepts an integer and doubles its value. Show the difference in the original variable when using pass-by-value versus pass-by-reference.",
    "code": "```java\npublic class ParameterPassing {\n\n    // Function demonstrating pass-by-value\n    public static void doubleValue(int num) {\n        num = num * 2;\n    }\n\n    // Function demonstrating pass-by-reference using an array\n    public static void doubleValueRef(int[] num) {\n        num[0] = num[0] * 2;\n    }\n\n    public static void main(String[] args) {\n        int originalValue = 5;\n        \n        // Pass-by-value\n        System.out.println(\"Original value before pass-by-value: \" + originalValue);\n        doubleValue(originalValue);\n        System.out.println(\"Original value after pass-by-value: \" + originalValue);\n\n        // Pass-by-reference\n        int[] originalValueRef = {5};\n        System.out.println(\"Original value before pass-by-reference: \" + originalValueRef[0]);\n        doubleValueRef(originalValueRef);\n        System.out.println(\"Original value after pass-by-reference: \" + originalValueRef[0]);\n    }\n}\n```"
  },
  {
    "task": "Create a function that takes a list and returns a new list with elements doubled. Ensure the original list remains unchanged.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ListDoubler {\n    public static List<Integer> doubleListElements(List<Integer> originalList) {\n        List<Integer> doubledList = new ArrayList<>();\n        for (Integer element : originalList) {\n            doubledList.add(element * 2);\n        }\n        return doubledList;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> originalList = List.of(1, 2, 3, 4, 5);\n        List<Integer> doubledList = doubleListElements(originalList);\n        \n        System.out.println(\"Original List: \" + originalList);\n        System.out.println(\"Doubled List: \" + doubledList);\n    }\n}\n```"
  },
  {
    "task": "Design a function that takes a string argument and appends a character to it. Illustrate the result when the string is passed by value.",
    "code": "```java\npublic class StringAppendDemo {\n    public static void main(String[] args) {\n        String original = \"Hello\";\n        String result = appendCharacter(original, '!');\n        System.out.println(\"Original: \" + original);  // Output: Hello\n        System.out.println(\"Result: \" + result);      // Output: Hello!\n    }\n\n    public static String appendCharacter(String str, char ch) {\n        return str + ch;\n    }\n}\n```"
  },
  {
    "task": "Write a function that increments a counter variable. Pass the variable by reference to see changes in the original variable.",
    "code": "Java does not support passing variables by reference in the same way some other languages do. However, you can achieve similar behavior by using a mutable object. Here's how you can implement the task:\n\n```java\nclass Counter {\n    int value;\n\n    Counter(int value) {\n        this.value = value;\n    }\n}\n\npublic class Main {\n    public static void incrementCounter(Counter counter) {\n        counter.value++;\n    }\n\n    public static void main(String[] args) {\n        Counter counter = new Counter(0);\n        System.out.println(\"Before increment: \" + counter.value);\n        incrementCounter(counter);\n        System.out.println(\"After increment: \" + counter.value);\n    }\n}\n```"
  },
  {
    "task": "Develop a function that removes an item from a dictionary passed to it. Demonstrate how pass-by-reference affects the original dictionary.",
    "code": "```java\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        HashMap<String, String> dictionary = new HashMap<>();\n        dictionary.put(\"apple\", \"A fruit\");\n        dictionary.put(\"book\", \"A set of pages\");\n\n        System.out.println(\"Original Dictionary: \" + dictionary);\n        removeItem(dictionary, \"apple\");\n        System.out.println(\"Modified Dictionary: \" + dictionary);\n    }\n\n    public static void removeItem(HashMap<String, String> dict, String key) {\n        dict.remove(key);\n    }\n}\n```"
  },
  {
    "task": "Create a program that passes a matrix to a function, which transposes it. Explain how the transposition affects the original matrix with pass-by-reference.",
    "code": "```java\npublic class MatrixTranspose {\n\n    public static void main(String[] args) {\n        int[][] matrix = {\n            {1, 2, 3},\n            {4, 5, 6},\n            {7, 8, 9}\n        };\n\n        System.out.println(\"Original Matrix:\");\n        printMatrix(matrix);\n\n        transpose(matrix);\n\n        System.out.println(\"Transposed Matrix:\");\n        printMatrix(matrix);\n    }\n\n    public static void transpose(int[][] matrix) {\n        int n = matrix.length;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                int temp = matrix[i][j];\n                matrix[i][j] = matrix[j][i];\n                matrix[j][i] = temp;\n            }\n        }\n    }\n\n    public static void printMatrix(int[][] matrix) {\n        for (int[] row : matrix) {\n            for (int value : row) {\n                System.out.print(value + \" \");\n            }\n            System.out.println();\n        }\n    }\n}\n```"
  },
  {
    "task": "Implement a function that takes a float number and rounds it. Discuss the implications of passing the number by value.",
    "code": "```java\npublic class RoundNumber {\n\n    public static void main(String[] args) {\n        float number = 3.75f;\n        int roundedNumber = roundFloat(number);\n        System.out.println(\"Original number: \" + number);\n        System.out.println(\"Rounded number: \" + roundedNumber);\n    }\n\n    public static int roundFloat(float num) {\n        return Math.round(num);\n    }\n}\n```"
  },
  {
    "task": "Design a function that accepts a dictionary and adds a key-value pair to it. Show the changes when the dictionary is passed by reference.",
    "code": "```java\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        Map<String, String> dictionary = new HashMap<>();\n        dictionary.put(\"key1\", \"value1\");\n        \n        System.out.println(\"Before: \" + dictionary);\n        addKeyValuePair(dictionary, \"key2\", \"value2\");\n        System.out.println(\"After: \" + dictionary);\n    }\n\n    public static void addKeyValuePair(Map<String, String> dict, String key, String value) {\n        dict.put(key, value);\n    }\n}\n```"
  },
  {
    "task": "Write a program that passes a string to a function that converts it to uppercase. Explain how this affects the original string with pass-by-value.",
    "code": "```java\npublic class Main {\n    public static void main(String[] args) {\n        String originalString = \"hello, world\";\n        String uppercasedString = convertToUppercase(originalString);\n        \n        System.out.println(\"Original String: \" + originalString);\n        System.out.println(\"Uppercased String: \" + uppercasedString);\n    }\n\n    public static String convertToUppercase(String str) {\n        return str.toUpperCase();\n    }\n}\n```"
  },
  {
    "task": "Create a function that receives a tuple and attempts to modify one of its elements. Discuss the outcome of using pass-by-value.",
    "code": "```java\npublic class TupleExample {\n\n    public static void main(String[] args) {\n        // Creating a tuple-like structure using a custom class\n        Tuple tuple = new Tuple(10, 20);\n        \n        System.out.println(\"Before modification: \" + tuple);\n        \n        // Attempt to modify the tuple\n        modifyTuple(tuple);\n        \n        System.out.println(\"After modification: \" + tuple);\n    }\n\n    public static void modifyTuple(Tuple tuple) {\n        // Attempting to modify the tuple's element\n        tuple.setFirst(99);\n    }\n}\n\nclass Tuple {\n    private int first;\n    private int second;\n\n    public Tuple(int first, int second) {\n        this.first = first;\n        this.second = second;\n    }\n\n    public int getFirst() {\n        return first;\n    }\n\n    public void setFirst(int first) {\n        this.first = first;\n    }\n\n    public int getSecond() {\n        return second;\n    }\n\n    public void setSecond(int second) {\n        this.second = second;\n    }\n\n    @Override\n    public String toString() {\n        return \"(\" + first + \", \" + second + \")\";\n    }\n}\n```"
  },
  {
    "task": "Develop a function that accepts an object and modifies one of its attributes. Illustrate how pass-by-reference alters the original object.",
    "code": "```java\nclass MyObject {\n    public int attribute;\n\n    public MyObject(int attribute) {\n        this.attribute = attribute;\n    }\n}\n\npublic class Main {\n    public static void modifyObject(MyObject obj) {\n        obj.attribute = 42;\n    }\n\n    public static void main(String[] args) {\n        MyObject myObj = new MyObject(10);\n        System.out.println(\"Before modification: \" + myObj.attribute);\n        modifyObject(myObj);\n        System.out.println(\"After modification: \" + myObj.attribute);\n    }\n}\n```"
  },
  {
    "task": "Design a function that outputs the sum of all elements in an array passed by value. Confirm the original array remains unchanged.",
    "code": "```java\npublic class SumArray {\n\n    public static int sumElements(int[] array) {\n        int sum = 0;\n        for (int element : array) {\n            sum += element;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        int[] originalArray = {1, 2, 3, 4, 5};\n        int sum = sumElements(originalArray);\n        System.out.println(\"Sum: \" + sum);\n        // Printing original array to confirm it remains unchanged\n        for (int element : originalArray) {\n            System.out.print(element + \" \");\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a function that takes a boolean flag and toggles its value. Demonstrate the effect of pass-by-reference on the original flag.",
    "code": "```java\npublic class ToggleFlag {\n    static class BooleanWrapper {\n        boolean value;\n\n        BooleanWrapper(boolean value) {\n            this.value = value;\n        }\n    }\n\n    public static void toggle(BooleanWrapper flag) {\n        flag.value = !flag.value;\n    }\n\n    public static void main(String[] args) {\n        BooleanWrapper flag = new BooleanWrapper(true);\n        System.out.println(\"Original flag value: \" + flag.value);\n        toggle(flag);\n        System.out.println(\"Toggled flag value: \" + flag.value);\n    }\n}\n```"
  },
  {
    "task": "Create a function that takes an object and clones it. Modify the clone and show that the original object remains unaffected.",
    "code": "```java\nclass MyObject implements Cloneable {\n    private int value;\n\n    public MyObject(int value) {\n        this.value = value;\n    }\n\n    public int getValue() {\n        return value;\n    }\n\n    public void setValue(int value) {\n        this.value = value;\n    }\n\n    @Override\n    protected Object clone() throws CloneNotSupportedException {\n        return super.clone();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        MyObject original = new MyObject(10);\n        MyObject cloned = cloneAndModify(original);\n        \n        System.out.println(\"Original value: \" + original.getValue());\n        System.out.println(\"Cloned value: \" + cloned.getValue());\n    }\n    \n    public static MyObject cloneAndModify(MyObject obj) {\n        try {\n            MyObject clonedObj = (MyObject) obj.clone();\n            clonedObj.setValue(clonedObj.getValue() + 10);\n            return clonedObj;\n        } catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n}\n```"
  },
  {
    "task": "Implement a function that accepts a list of integers and removes all even numbers. Describe the difference in behavior when using pass-by-value and pass-by-reference.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\n\npublic class Main {\n    \n    public static void removeEvens(List<Integer> numbers) {\n        Iterator<Integer> iterator = numbers.iterator();\n        while (iterator.hasNext()) {\n            if (iterator.next() % 2 == 0) {\n                iterator.remove();\n            }\n        }\n    }\n    \n    public static void main(String[] args) {\n        List<Integer> numbers = new ArrayList<>();\n        numbers.add(1);\n        numbers.add(2);\n        numbers.add(3);\n        numbers.add(4);\n        numbers.add(5);\n        \n        // Pass-by-value in Java (reference to the list is passed by value)\n        removeEvens(numbers);\n        \n        System.out.println(numbers); // Output: [1, 3, 5]\n    }\n}\n```"
  },
  {
    "task": "Develop a function that takes a complex number and returns its conjugate. Explain how pass-by-value affects the original complex number.",
    "code": "```java\npublic class ComplexNumber {\n    private double real;\n    private double imaginary;\n\n    public ComplexNumber(double real, double imaginary) {\n        this.real = real;\n        this.imaginary = imaginary;\n    }\n\n    public ComplexNumber getConjugate() {\n        return new ComplexNumber(real, -imaginary);\n    }\n\n    public double getReal() {\n        return real;\n    }\n\n    public double getImaginary() {\n        return imaginary;\n    }\n\n    public static void main(String[] args) {\n        ComplexNumber num = new ComplexNumber(3.0, 4.0);\n        ComplexNumber conjugate = num.getConjugate();\n        System.out.println(\"Original: \" + num.getReal() + \" + \" + num.getImaginary() + \"i\");\n        System.out.println(\"Conjugate: \" + conjugate.getReal() + \" + \" + conjugate.getImaginary() + \"i\");\n    }\n}\n```"
  },
  {
    "task": "Design a program where a function receives a binary tree and inverts it. Discuss how pass-by-reference impacts the original tree structure.",
    "code": "```java\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n    \n    TreeNode(int x) {\n        val = x;\n    }\n}\n\npublic class BinaryTreeInverter {\n    \n    public void invertTree(TreeNode root) {\n        if (root == null) {\n            return;\n        }\n        \n        TreeNode temp = root.left;\n        root.left = root.right;\n        root.right = temp;\n        \n        invertTree(root.left);\n        invertTree(root.right);\n    }\n    \n    public static void main(String[] args) {\n        TreeNode root = new TreeNode(1);\n        root.left = new TreeNode(2);\n        root.right = new TreeNode(3);\n        root.left.left = new TreeNode(4);\n        root.left.right = new TreeNode(5);\n        \n        BinaryTreeInverter inverter = new BinaryTreeInverter();\n        inverter.invertTree(root);\n        \n        // The structure of the original tree is modified because Java passes the reference to the object.\n    }\n}\n```"
  },
  {
    "task": "Write a function that adds an element to a set passed to it. Show how pass-by-reference affects the original set.",
    "code": "```java\nimport java.util.Set;\nimport java.util.HashSet;\n\npublic class Main {\n    public static void main(String[] args) {\n        Set<String> mySet = new HashSet<>();\n        mySet.add(\"Original\");\n\n        System.out.println(\"Before adding: \" + mySet);\n        addElementToSet(mySet, \"NewElement\");\n        System.out.println(\"After adding: \" + mySet);\n    }\n\n    public static void addElementToSet(Set<String> set, String element) {\n        set.add(element);\n    }\n}\n```"
  },
  {
    "task": "Create a function that accepts an integer array and sorts it. Demonstrate the difference when the array is passed by value.",
    "code": "```java\nimport java.util.Arrays;\n\npublic class ArraySort {\n\n    public static void main(String[] args) {\n        int[] numbers = {5, 2, 9, 1, 5, 6};\n        System.out.println(\"Original array: \" + Arrays.toString(numbers));\n\n        // Sort array using the sortArray method\n        sortArray(numbers);\n        System.out.println(\"Sorted array: \" + Arrays.toString(numbers));\n\n        // Attempt to demonstrate pass by value (not applicable to arrays, which are reference types)\n        int[] tempArray = numbers.clone();\n        passByValueAttempt(tempArray);\n        System.out.println(\"After passByValueAttempt: \" + Arrays.toString(tempArray));\n    }\n\n    // Sorts the array in place\n    public static void sortArray(int[] arr) {\n        Arrays.sort(arr);\n    }\n\n    // Attempts to modify the array assuming pass by value\n    public static void passByValueAttempt(int[] arr) {\n        arr = new int[]{100, 200, 300}; // This modification won't affect the original array\n    }\n}\n```"
  },
  {
    "task": "Implement a function that takes a configuration object and toggles a setting. Illustrate the changes with pass-by-reference.",
    "code": "```java\nclass Configuration {\n    boolean setting;\n\n    public Configuration(boolean setting) {\n        this.setting = setting;\n    }\n}\n\npublic class Main {\n    public static void toggleSetting(Configuration config) {\n        config.setting = !config.setting;\n    }\n\n    public static void main(String[] args) {\n        Configuration config = new Configuration(false);\n        System.out.println(\"Initial setting: \" + config.setting);\n        toggleSetting(config);\n        System.out.println(\"Toggled setting: \" + config.setting);\n    }\n}\n```"
  },
  {
    "task": "Design a function that receives a file path and reads its content. Explain how passing the path by value affects the outcome.",
    "code": "```java\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class FileReaderExample {\n\n    public static void main(String[] args) {\n        String filePath = \"example.txt\";\n        readFileContent(filePath);\n    }\n\n    public static void readFileContent(String path) {\n        try {\n            String content = new String(Files.readAllBytes(Paths.get(path)));\n            System.out.println(content);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a program in which a function takes a stack and reverses its elements. Discuss the impact of pass-by-reference on the stack.",
    "code": "```java\nimport java.util.Stack;\n\npublic class StackReverser {\n\n    public static void reverseStack(Stack<Integer> stack) {\n        if (!stack.isEmpty()) {\n            int temp = stack.pop();\n            reverseStack(stack);\n            insertAtBottom(stack, temp);\n        }\n    }\n\n    private static void insertAtBottom(Stack<Integer> stack, int value) {\n        if (stack.isEmpty()) {\n            stack.push(value);\n        } else {\n            int temp = stack.pop();\n            insertAtBottom(stack, value);\n            stack.push(temp);\n        }\n    }\n\n    public static void main(String[] args) {\n        Stack<Integer> stack = new Stack<>();\n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n        stack.push(4);\n\n        reverseStack(stack);\n\n        while (!stack.isEmpty()) {\n            System.out.println(stack.pop());\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a function that takes a queue and dequeues an element. Show the result when the queue is passed by reference.",
    "code": "```java\nimport java.util.LinkedList;\nimport java.util.Queue;\n\npublic class QueueDemo {\n\n    public static void dequeueElement(Queue<Integer> queue) {\n        if (!queue.isEmpty()) {\n            queue.poll();\n        }\n    }\n\n    public static void main(String[] args) {\n        Queue<Integer> queue = new LinkedList<>();\n        queue.add(1);\n        queue.add(2);\n        queue.add(3);\n\n        System.out.println(\"Queue before dequeue: \" + queue);\n        dequeueElement(queue);\n        System.out.println(\"Queue after dequeue: \" + queue);\n    }\n}\n```"
  },
  {
    "task": "Develop a function that accepts a hashmap and updates a value for a specific key. Illustrate the effects of pass-by-reference.",
    "code": "```java\nimport java.util.HashMap;\n\npublic class ParameterPassingExample {\n    public static void main(String[] args) {\n        HashMap<String, String> map = new HashMap<>();\n        map.put(\"key1\", \"value1\");\n        \n        System.out.println(\"Before update: \" + map.get(\"key1\"));\n        \n        updateValue(map, \"key1\", \"newValue1\");\n        \n        System.out.println(\"After update: \" + map.get(\"key1\"));\n    }\n    \n    public static void updateValue(HashMap<String, String> map, String key, String newValue) {\n        if (map.containsKey(key)) {\n            map.put(key, newValue);\n        }\n    }\n}\n```"
  },
  {
    "task": "Design a function that receives a JSON object and adds a new property. Discuss the implications of modifying the object by reference.",
    "code": "```java\nimport org.json.JSONObject;\n\npublic class JsonModifier {\n    public static void addProperty(JSONObject jsonObj, String key, Object value) {\n        jsonObj.put(key, value);\n    }\n\n    public static void main(String[] args) {\n        JSONObject jsonObject = new JSONObject();\n        jsonObject.put(\"name\", \"John\");\n        \n        addProperty(jsonObject, \"age\", 30);\n        \n        System.out.println(jsonObject.toString());\n    }\n}\n```"
  },
  {
    "task": "Write a program where a function accepts a graph and adds a node. Explain how pass-by-reference affects the original graph structure.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nclass Graph {\n    private Map<Integer, List<Integer>> adjacencyList;\n\n    public Graph() {\n        adjacencyList = new HashMap<>();\n    }\n\n    public void addNode(int node) {\n        adjacencyList.putIfAbsent(node, new ArrayList<>());\n    }\n\n    public Map<Integer, List<Integer>> getAdjacencyList() {\n        return adjacencyList;\n    }\n}\n\npublic class GraphExample {\n    public static void main(String[] args) {\n        Graph graph = new Graph();\n        modifyGraph(graph, 1);\n        System.out.println(graph.getAdjacencyList());\n    }\n\n    public static void modifyGraph(Graph graph, int newNode) {\n        graph.addNode(newNode);\n    }\n}\n```"
  },
  {
    "task": "Create a function that accepts a set of coordinates and shifts them. Demonstrate how pass-by-value ensures the original set is unchanged.",
    "code": "```java\nimport java.util.Arrays;\n\npublic class CoordinateShift {\n\n    public static void main(String[] args) {\n        int[] originalCoordinates = {10, 20};\n        int shiftX = 5;\n        int shiftY = -3;\n\n        int[] newCoordinates = shiftCoordinates(originalCoordinates, shiftX, shiftY);\n\n        System.out.println(\"Original Coordinates: \" + Arrays.toString(originalCoordinates));\n        System.out.println(\"Shifted Coordinates: \" + Arrays.toString(newCoordinates));\n    }\n\n    public static int[] shiftCoordinates(int[] coordinates, int shiftX, int shiftY) {\n        int[] shiftedCoordinates = Arrays.copyOf(coordinates, coordinates.length);\n        shiftedCoordinates[0] += shiftX;\n        shiftedCoordinates[1] += shiftY;\n        return shiftedCoordinates;\n    }\n}\n```"
  },
  {
    "task": "Implement a function that takes a date object and sets it to the next day. Discuss the effects of pass-by-reference on the date object.",
    "code": "```java\nimport java.util.Calendar;\nimport java.util.Date;\n\npublic class DateUtil {\n    public static void main(String[] args) {\n        Date today = new Date();\n        System.out.println(\"Today: \" + today);\n        setToNextDay(today);\n        System.out.println(\"Next day: \" + today);\n    }\n    \n    public static void setToNextDay(Date date) {\n        Calendar calendar = Calendar.getInstance();\n        calendar.setTime(date);\n        calendar.add(Calendar.DAY_OF_MONTH, 1);\n        date.setTime(calendar.getTimeInMillis());\n    }\n}\n```"
  },
  {
    "task": "Develop a function that receives a polynomial represented as a list of coefficients and differentiates it. Show how the original list remains unchanged with pass-by-value.",
    "code": "```java\nimport java.util.Arrays;\n\npublic class PolynomialDifferentiation {\n\n    public static void main(String[] args) {\n        int[] coefficients = {3, 2, 1}; // represents 3x^2 + 2x + 1\n        int[] differentiated = differentiate(coefficients);\n\n        System.out.println(\"Original coefficients: \" + Arrays.toString(coefficients));\n        System.out.println(\"Differentiated coefficients: \" + Arrays.toString(differentiated));\n    }\n\n    public static int[] differentiate(int[] coeffs) {\n        int n = coeffs.length;\n        if (n <= 1) return new int[]{0};\n\n        int[] differentiated = new int[n - 1];\n        for (int i = 1; i < n; i++) {\n            differentiated[i - 1] = coeffs[i] * i;\n        }\n\n        return differentiated;\n    }\n}\n```"
  },
  {
    "task": "Design a function that accepts a stack and clears it. Explain how pass-by-reference affects the original stack.",
    "code": "```java\nimport java.util.Stack;\n\npublic class StackClearer {\n    public static void clearStack(Stack<?> stack) {\n        stack.clear();\n    }\n\n    public static void main(String[] args) {\n        Stack<Integer> stack = new Stack<>();\n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n\n        clearStack(stack);\n\n        System.out.println(stack); // Should print an empty stack: []\n    }\n}\n```"
  },
  {
    "task": "Write a function that takes a linked list and appends a new node. Demonstrate the impact of pass-by-reference on the list.",
    "code": "```java\nclass Node {\n    int data;\n    Node next;\n    \n    Node(int data) {\n        this.data = data;\n        this.next = null;\n    }\n}\n\nclass LinkedList {\n    Node head;\n    \n    LinkedList() {\n        this.head = null;\n    }\n    \n    void appendNode(Node newNode) {\n        if (head == null) {\n            head = newNode;\n            return;\n        }\n        Node current = head;\n        while (current.next != null) {\n            current = current.next;\n        }\n        current.next = newNode;\n    }\n    \n    void printList() {\n        Node current = head;\n        while (current != null) {\n            System.out.print(current.data + \" \");\n            current = current.next;\n        }\n        System.out.println();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedList list = new LinkedList();\n        \n        Node first = new Node(1);\n        Node second = new Node(2);\n        Node third = new Node(3);\n        \n        list.appendNode(first);\n        list.appendNode(second);\n        \n        // Before appending third node\n        list.printList();\n        \n        // Demonstrating pass-by-reference\n        appendAndModify(list, third);\n        \n        // After appending third node\n        list.printList();\n    }\n    \n    public static void appendAndModify(LinkedList list, Node newNode) {\n        list.appendNode(newNode);\n    }\n}\n```"
  },
  {
    "task": "Create a function that receives a URL and extracts the domain name. Discuss the effects of pass-by-value on the URL string.",
    "code": "```java\npublic class DomainExtractor {\n    public static void main(String[] args) {\n        String url = \"https://www.example.com/path/to/resource\";\n        String domain = extractDomain(url);\n        System.out.println(\"Extracted Domain: \" + domain);\n    }\n\n    public static String extractDomain(String url) {\n        int start = url.indexOf(\"://\") + 3;\n        int end = url.indexOf('/', start);\n        if (end == -1) {\n            end = url.length();\n        }\n        return url.substring(start, end);\n    }\n}\n```"
  },
  {
    "task": "Implement a function that takes a priority queue and changes the priority of an element. Illustrate the effects using pass-by-reference.",
    "code": "```java\nimport java.util.PriorityQueue;\nimport java.util.Comparator;\n\npublic class PriorityManipulator {\n\n    public static void main(String[] args) {\n        PriorityQueue<Element> queue = new PriorityQueue<>(new ElementComparator());\n        queue.add(new Element(\"Task 1\", 3));\n        queue.add(new Element(\"Task 2\", 1));\n        queue.add(new Element(\"Task 3\", 2));\n\n        System.out.println(\"Before change:\");\n        for (Element e : queue) {\n            System.out.println(e);\n        }\n\n        // Change priority of \"Task 3\"\n        changePriority(queue, \"Task 3\", 0);\n\n        System.out.println(\"\\nAfter change:\");\n        for (Element e : queue) {\n            System.out.println(e);\n        }\n    }\n\n    public static void changePriority(PriorityQueue<Element> queue, String name, int newPriority) {\n        // Find the element and remove it from the queue\n        Element toChange = null;\n        for (Element e : queue) {\n            if (e.name.equals(name)) {\n                toChange = e;\n                break;\n            }\n        }\n        if (toChange != null) {\n            queue.remove(toChange);\n            toChange.priority = newPriority;\n            queue.add(toChange);\n        }\n    }\n\n    static class Element {\n        String name;\n        int priority;\n\n        public Element(String name, int priority) {\n            this.name = name;\n            this.priority = priority;\n        }\n\n        @Override\n        public String toString() {\n            return \"Element{name='\" + name + \"', priority=\" + priority + \"}\";\n        }\n    }\n\n    static class ElementComparator implements Comparator<Element> {\n        @Override\n        public int compare(Element e1, Element e2) {\n            return Integer.compare(e1.priority, e2.priority);\n        }\n    }\n}\n```"
  },
  {
    "task": "Develop a function that accepts a circular buffer and reads an element. Explain how pass-by-reference influences the buffer.",
    "code": "```java\nimport java.util.LinkedList;\nimport java.util.Queue;\n\nclass CircularBuffer {\n    private Queue<Integer> buffer;\n    private int maxSize;\n\n    public CircularBuffer(int size) {\n        this.buffer = new LinkedList<>();\n        this.maxSize = size;\n    }\n\n    public void add(int value) {\n        if (buffer.size() >= maxSize) {\n            buffer.poll();\n        }\n        buffer.offer(value);\n    }\n\n    public Integer read() {\n        return buffer.poll();\n    }\n\n    public boolean isEmpty() {\n        return buffer.isEmpty();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        CircularBuffer circularBuffer = new CircularBuffer(5);\n        circularBuffer.add(1);\n        circularBuffer.add(2);\n        circularBuffer.add(3);\n        \n        System.out.println(readElement(circularBuffer)); // Pass-by-reference\n    }\n\n    public static Integer readElement(CircularBuffer buffer) {\n        return buffer.read(); // Pass-by-reference allows modification of buffer\n    }\n}\n```"
  },
  {
    "task": "Design a program where a function receives a record and updates a field. Show how pass-by-reference affects the original record.",
    "code": "```java\nclass Record {\n    String field;\n\n    Record(String field) {\n        this.field = field;\n    }\n}\n\npublic class ParameterPassingExample {\n\n    public static void updateRecord(Record record) {\n        record.field = \"Updated Field\";\n    }\n\n    public static void main(String[] args) {\n        Record myRecord = new Record(\"Original Field\");\n        System.out.println(\"Before update: \" + myRecord.field);\n\n        updateRecord(myRecord);\n        System.out.println(\"After update: \" + myRecord.field);\n    }\n}\n```"
  },
  {
    "task": "Write a function that takes a frequency list and normalizes it. Describe how pass-by-value ensures the original list remains unchanged.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FrequencyNormalizer {\n\n    public static List<Double> normalizeFrequencies(List<Integer> frequencies) {\n        int sum = 0;\n        for (int freq : frequencies) {\n            sum += freq;\n        }\n        \n        List<Double> normalized = new ArrayList<>();\n        for (int freq : frequencies) {\n            normalized.add((double) freq / sum);\n        }\n        \n        return normalized;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> frequencies = List.of(10, 20, 30, 40);\n        List<Double> normalizedFrequencies = normalizeFrequencies(frequencies);\n        \n        System.out.println(\"Original Frequencies: \" + frequencies);\n        System.out.println(\"Normalized Frequencies: \" + normalizedFrequencies);\n    }\n}\n```"
  },
  {
    "task": "Create a function that accepts a chessboard and makes a move. Discuss how pass-by-reference alters the original board setup.",
    "code": "```java\npublic class ChessGame {\n    public static void main(String[] args) {\n        char[][] chessboard = {\n            {'R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R'},\n            {'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'},\n            {'.', '.', '.', '.', '.', '.', '.', '.'},\n            {'.', '.', '.', '.', '.', '.', '.', '.'},\n            {'.', '.', '.', '.', '.', '.', '.', '.'},\n            {'.', '.', '.', '.', '.', '.', '.', '.'},\n            {'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'},\n            {'r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'}\n        };\n\n        // Example move: pawn from e2 to e4\n        makeMove(chessboard, 6, 4, 4, 4);\n\n        // Print the board after the move\n        printBoard(chessboard);\n    }\n\n    public static void makeMove(char[][] board, int fromRow, int fromCol, int toRow, int toCol) {\n        board[toRow][toCol] = board[fromRow][fromCol];\n        board[fromRow][fromCol] = '.';\n    }\n\n    public static void printBoard(char[][] board) {\n        for (char[] row : board) {\n            for (char piece : row) {\n                System.out.print(piece + \" \");\n            }\n            System.out.println();\n        }\n    }\n}\n```"
  },
  {
    "task": "Implement a function that takes a decimal number and converts it to binary. Explain the effects of pass-by-value on the original number.",
    "code": "```java\npublic class DecimalToBinary {\n\n    public static void main(String[] args) {\n        int decimalNumber = 25;\n        String binaryRepresentation = convertToBinary(decimalNumber);\n        System.out.println(\"Decimal: \" + decimalNumber);\n        System.out.println(\"Binary: \" + binaryRepresentation);\n    }\n\n    public static String convertToBinary(int number) {\n        StringBuilder binary = new StringBuilder();\n        while (number > 0) {\n            binary.insert(0, number % 2);\n            number = number / 2;\n        }\n        return binary.toString();\n    }\n}\n```"
  },
  {
    "task": "Develop a function that receives a DNA sequence and counts nucleotides. Illustrate how pass-by-value ensures the original sequence remains intact.",
    "code": "```java\npublic class NucleotideCounter {\n\n    public static void main(String[] args) {\n        String dnaSequence = \"AGCTTAGCTA\";\n        int[] counts = countNucleotides(dnaSequence);\n        System.out.println(\"A: \" + counts[0]);\n        System.out.println(\"C: \" + counts[1]);\n        System.out.println(\"G: \" + counts[2]);\n        System.out.println(\"T: \" + counts[3]);\n        System.out.println(\"Original Sequence: \" + dnaSequence);\n    }\n\n    public static int[] countNucleotides(String sequence) {\n        int[] nucleotideCounts = new int[4]; // A, C, G, T\n        for (int i = 0; i < sequence.length(); i++) {\n            char nucleotide = sequence.charAt(i);\n            switch (nucleotide) {\n                case 'A':\n                    nucleotideCounts[0]++;\n                    break;\n                case 'C':\n                    nucleotideCounts[1]++;\n                    break;\n                case 'G':\n                    nucleotideCounts[2]++;\n                    break;\n                case 'T':\n                    nucleotideCounts[3]++;\n                    break;\n                default:\n                    break;\n            }\n        }\n        return nucleotideCounts;\n    }\n}\n```"
  },
  {
    "task": "Design a function that accepts a shopping cart object and applies a discount. Show the changes with pass-by-reference.",
    "code": "```java\nclass ShoppingCart {\n    double totalAmount;\n\n    ShoppingCart(double totalAmount) {\n        this.totalAmount = totalAmount;\n    }\n}\n\npublic class DiscountApplicator {\n    public static void applyDiscount(ShoppingCart cart, double discountRate) {\n        cart.totalAmount -= cart.totalAmount * discountRate;\n    }\n\n    public static void main(String[] args) {\n        ShoppingCart cart = new ShoppingCart(100.0);\n        System.out.println(\"Original Total: $\" + cart.totalAmount);\n        applyDiscount(cart, 0.1);\n        System.out.println(\"Discounted Total: $\" + cart.totalAmount);\n    }\n}\n```"
  },
  {
    "task": "Write a program where a function receives a playlist and adds a song. Discuss how pass-by-reference affects the original playlist.",
    "code": "```java\nimport java.util.ArrayList;\n\npublic class PlaylistManager {\n\n    public static void main(String[] args) {\n        ArrayList<String> playlist = new ArrayList<>();\n        playlist.add(\"Song 1\");\n        playlist.add(\"Song 2\");\n\n        addSong(playlist, \"New Song\");\n\n        for (String song : playlist) {\n            System.out.println(song);\n        }\n    }\n\n    public static void addSong(ArrayList<String> playlist, String song) {\n        playlist.add(song);\n    }\n}\n```"
  },
  {
    "task": "Create a function that takes a sprite in a game and moves it. Demonstrate the result when the sprite is passed by reference.",
    "code": "```java\nclass Sprite {\n    int x;\n    int y;\n\n    Sprite(int x, int y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    void move(int deltaX, int deltaY) {\n        this.x += deltaX;\n        this.y += deltaY;\n    }\n\n    @Override\n    public String toString() {\n        return \"Sprite{\" + \"x=\" + x + \", y=\" + y + '}';\n    }\n}\n\npublic class Game {\n    static void moveSprite(Sprite sprite, int deltaX, int deltaY) {\n        sprite.move(deltaX, deltaY);\n    }\n\n    public static void main(String[] args) {\n        Sprite mySprite = new Sprite(10, 20);\n        System.out.println(\"Before move: \" + mySprite);\n        moveSprite(mySprite, 5, 7);\n        System.out.println(\"After move: \" + mySprite);\n    }\n}\n```"
  },
  {
    "task": "Implement a function that accepts a book object and updates the title. Illustrate the impact of pass-by-reference on the original object.",
    "code": "```java\nclass Book {\n    String title;\n    \n    Book(String title) {\n        this.title = title;\n    }\n}\n\npublic class Main {\n    public static void updateBookTitle(Book book, String newTitle) {\n        book.title = newTitle;\n    }\n\n    public static void main(String[] args) {\n        Book myBook = new Book(\"Original Title\");\n        System.out.println(\"Before update: \" + myBook.title);\n        \n        updateBookTitle(myBook, \"Updated Title\");\n        System.out.println(\"After update: \" + myBook.title);\n    }\n}\n```"
  },
  {
    "task": "Develop a function that receives a sound wave and normalizes it. Explain how pass-by-value affects the original sound wave.",
    "code": "```java\npublic class SoundWaveNormalizer {\n\n    public static void main(String[] args) {\n        double[] soundWave = {0.5, 1.5, -2.0, 3.0, -4.5};\n        normalizeSoundWave(soundWave);\n        \n        // Output the modified soundWave\n        for (double value : soundWave) {\n            System.out.print(value + \" \");\n        }\n    }\n\n    public static void normalizeSoundWave(double[] wave) {\n        double maxAmplitude = findMaxAmplitude(wave);\n\n        for (int i = 0; i < wave.length; i++) {\n            wave[i] /= maxAmplitude;\n        }\n    }\n\n    private static double findMaxAmplitude(double[] wave) {\n        double max = 0;\n        for (double value : wave) {\n            if (Math.abs(value) > max) {\n                max = Math.abs(value);\n            }\n        }\n        return max;\n    }\n}\n```"
  },
  {
    "task": "Design a program where a function receives a bank account object and credits an amount. Discuss the effects of pass-by-reference.",
    "code": "```java\nclass BankAccount {\n    private double balance;\n\n    public BankAccount(double initialBalance) {\n        this.balance = initialBalance;\n    }\n\n    public double getBalance() {\n        return balance;\n    }\n\n    public void credit(double amount) {\n        if (amount > 0) {\n            balance += amount;\n        }\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        BankAccount account = new BankAccount(1000.0);\n        creditAccount(account, 200.0);\n        System.out.println(\"Updated Balance: \" + account.getBalance());\n    }\n\n    public static void creditAccount(BankAccount account, double amount) {\n        account.credit(amount);\n    }\n}\n```"
  },
  {
    "task": "Write a function that takes an email list and filters out invalid addresses. Show the difference in the list when using pass-by-value.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class EmailFilter {\n\n    public static void main(String[] args) {\n        List<String> emailList = new ArrayList<>();\n        emailList.add(\"valid@example.com\");\n        emailList.add(\"invalid-email\");\n        emailList.add(\"another.valid@example.com\");\n        emailList.add(\"bad@address\");\n\n        System.out.println(\"Original email list: \" + emailList);\n        filterInvalidEmailsPassByValue(new ArrayList<>(emailList));\n        System.out.println(\"After pass-by-value filtering: \" + emailList);\n    }\n\n    public static void filterInvalidEmailsPassByValue(List<String> emails) {\n        emails.removeIf(email -> !email.contains(\"@\") || !email.contains(\".\"));\n    }\n}\n```"
  },
  {
    "task": "Create a function that accepts a 3D model and scales it. Demonstrate how pass-by-reference affects the original model.",
    "code": "```java\nclass Model {\n    public double scale;\n\n    public Model(double scale) {\n        this.scale = scale;\n    }\n\n    public void scaleModel(double factor) {\n        this.scale *= factor;\n    }\n\n    @Override\n    public String toString() {\n        return \"Model scale: \" + scale;\n    }\n}\n\npublic class Main {\n    public static void scaleModel(Model model, double factor) {\n        model.scaleModel(factor);\n    }\n\n    public static void main(String[] args) {\n        Model myModel = new Model(1.0);\n        System.out.println(\"Original \" + myModel);\n        scaleModel(myModel, 2.5);\n        System.out.println(\"Scaled \" + myModel);\n    }\n}\n```"
  },
  {
    "task": "Implement a function that receives a text document and redacts sensitive information. Explain the impact of pass-by-reference.",
    "code": "```java\nimport java.util.regex.Pattern;\n\npublic class Redactor {\n    public static void main(String[] args) {\n        StringBuilder document = new StringBuilder(\"This is a sample document with sensitive info: email@example.com and phone number: 123-456-7890.\");\n        redactSensitiveInfo(document);\n        System.out.println(document.toString());\n    }\n\n    public static void redactSensitiveInfo(StringBuilder document) {\n        // Redacts email addresses\n        Pattern emailPattern = Pattern.compile(\"\\\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Z|a-z]{2,}\\\\b\");\n        String emailRedacted = emailPattern.matcher(document).replaceAll(\"[REDACTED_EMAIL]\");\n\n        // Redacts phone numbers\n        Pattern phonePattern = Pattern.compile(\"\\\\b\\\\d{3}-\\\\d{3}-\\\\d{4}\\\\b\");\n        String finalRedacted = phonePattern.matcher(emailRedacted).replaceAll(\"[REDACTED_PHONE]\");\n\n        // Update the original document with the redacted version\n        document.setLength(0);\n        document.append(finalRedacted);\n    }\n}\n```"
  },
  {
    "task": "Develop a function that takes a temperature reading and adjusts for calibration. Discuss how pass-by-value ensures the original reading is unchanged.",
    "code": "```java\npublic class TemperatureCalibration {\n\n    public static void main(String[] args) {\n        double originalTemperature = 25.0;\n        double calibratedTemperature = adjustForCalibration(originalTemperature);\n        \n        System.out.println(\"Original Temperature: \" + originalTemperature);\n        System.out.println(\"Calibrated Temperature: \" + calibratedTemperature);\n    }\n\n    public static double adjustForCalibration(double temperatureReading) {\n        double calibrationOffset = 2.5;\n        return temperatureReading + calibrationOffset;\n    }\n}\n```"
  },
  {
    "task": "Design a function that accepts a bug report and updates its status. Show the changes with pass-by-reference.",
    "code": "```java\nclass BugReport {\n    String status;\n\n    BugReport(String status) {\n        this.status = status;\n    }\n}\n\npublic class BugTracker {\n\n    public static void updateBugReportStatus(BugReport report, String newStatus) {\n        report.status = newStatus;\n    }\n\n    public static void main(String[] args) {\n        BugReport report = new BugReport(\"Open\");\n        System.out.println(\"Initial Status: \" + report.status);\n\n        updateBugReportStatus(report, \"Resolved\");\n        System.out.println(\"Updated Status: \" + report.status);\n    }\n}\n```"
  },
  {
    "task": "Write a program where a function receives a sensor array and calibrates it. Demonstrate the effect of pass-by-reference on the array.",
    "code": "```java\npublic class SensorCalibration {\n    public static void main(String[] args) {\n        double[] sensorData = {2.5, 3.0, 4.1, 5.6};\n        \n        System.out.println(\"Before calibration:\");\n        for (double data : sensorData) {\n            System.out.print(data + \" \");\n        }\n        \n        calibrateSensors(sensorData);\n        \n        System.out.println(\"\\nAfter calibration:\");\n        for (double data : sensorData) {\n            System.out.print(data + \" \");\n        }\n    }\n    \n    public static void calibrateSensors(double[] sensorArray) {\n        // Calibrate by adding 1.0 to each sensor reading\n        for (int i = 0; i < sensorArray.length; i++) {\n            sensorArray[i] += 1.0;\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a function that takes a vector and rotates it. Explain how pass-by-value ensures the original vector remains unchanged.",
    "code": "```java\nimport java.util.Arrays;\n\npublic class VectorRotation {\n\n    public static void main(String[] args) {\n        int[] originalVector = {1, 2, 3, 4, 5};\n        int[] rotatedVector = rotateVector(originalVector);\n        System.out.println(\"Original Vector: \" + Arrays.toString(originalVector));\n        System.out.println(\"Rotated Vector: \" + Arrays.toString(rotatedVector));\n    }\n\n    public static int[] rotateVector(int[] vector) {\n        if (vector == null || vector.length <= 1) {\n            return vector;\n        }\n        int[] rotated = new int[vector.length];\n        rotated[0] = vector[vector.length - 1];\n        System.arraycopy(vector, 0, rotated, 1, vector.length - 1);\n        return rotated;\n    }\n}\n```"
  },
  {
    "task": "Implement a function that accepts an operation log and compresses it. Discuss the impact of pass-by-reference on the log.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class OperationLogCompressor {\n\n    public static void main(String[] args) {\n        List<String> operationLog = new ArrayList<>();\n        operationLog.add(\"START\");\n        operationLog.add(\"OPEN_FILE\");\n        operationLog.add(\"READ_FILE\");\n        operationLog.add(\"READ_FILE\");\n        operationLog.add(\"CLOSE_FILE\");\n        operationLog.add(\"END\");\n\n        compressLog(operationLog);\n        \n        // Output the compressed log to verify the result\n        for (String operation : operationLog) {\n            System.out.println(operation);\n        }\n    }\n\n    public static void compressLog(List<String> log) {\n        if (log == null || log.isEmpty()) {\n            return;\n        }\n\n        int index = 0;\n        while (index < log.size() - 1) {\n            if (log.get(index).equals(log.get(index + 1))) {\n                log.remove(index + 1);\n            } else {\n                index++;\n            }\n        }\n    }\n}\n```"
  },
  {
    "task": "Develop a function that receives a neural network model and updates its weights. Illustrate the effects of pass-by-reference.",
    "code": "```java\nimport java.util.Arrays;\n\nclass NeuralNetwork {\n    private double[] weights;\n\n    public NeuralNetwork(double[] initialWeights) {\n        this.weights = initialWeights;\n    }\n\n    public double[] getWeights() {\n        return weights;\n    }\n}\n\npublic class Main {\n    public static void updateWeights(NeuralNetwork model) {\n        double[] weights = model.getWeights();\n        for (int i = 0; i < weights.length; i++) {\n            weights[i] += 0.1; // Some arbitrary update to illustrate pass-by-reference\n        }\n    }\n\n    public static void main(String[] args) {\n        double[] initialWeights = {0.5, 0.6, 0.7};\n        NeuralNetwork model = new NeuralNetwork(initialWeights);\n\n        System.out.println(\"Weights before update: \" + Arrays.toString(model.getWeights()));\n        updateWeights(model);\n        System.out.println(\"Weights after update: \" + Arrays.toString(model.getWeights()));\n    }\n}\n```"
  },
  {
    "task": "Design a function that accepts a command history and reverts the last command. Show the changes with pass-by-reference.",
    "code": "```java\nimport java.util.List;\n\npublic class CommandHistoryManager {\n    public static void main(String[] args) {\n        List<String> commandHistory = List.of(\"command1\", \"command2\", \"command3\");\n        revertLastCommand(commandHistory);\n        System.out.println(commandHistory);\n    }\n\n    public static void revertLastCommand(List<String> history) {\n        if (!history.isEmpty()) {\n            history.remove(history.size() - 1);\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a function that takes a user profile and anonymizes it. Discuss how pass-by-reference affects the original profile.",
    "code": "```java\npublic class UserProfile {\n    String name;\n    String email;\n    \n    public UserProfile(String name, String email) {\n        this.name = name;\n        this.email = email;\n    }\n    \n    @Override\n    public String toString() {\n        return \"UserProfile{name='\" + name + \"', email='\" + email + \"'}\";\n    }\n}\n\npublic class Anonymizer {\n    public static void anonymize(UserProfile profile) {\n        profile.name = \"Anonymous\";\n        profile.email = \"anonymous@example.com\";\n    }\n    \n    public static void main(String[] args) {\n        UserProfile profile = new UserProfile(\"John Doe\", \"johndoe@example.com\");\n        System.out.println(\"Before anonymization: \" + profile);\n        anonymize(profile);\n        System.out.println(\"After anonymization: \" + profile);\n    }\n}\n```"
  },
  {
    "task": "Create a function that accepts a polynomial and evaluates it at a given point. Explain how pass-by-value ensures the polynomial remains unchanged.",
    "code": "```java\npublic class PolynomialEvaluator {\n\n    public static void main(String[] args) {\n        int[] polynomial = {3, 0, 2}; // Represents 3 + 0x + 2x^2\n        int point = 5;\n        int result = evaluatePolynomial(polynomial, point);\n        System.out.println(\"Polynomial evaluated at point \" + point + \" is: \" + result);\n    }\n\n    public static int evaluatePolynomial(int[] coefficients, int x) {\n        int result = 0;\n        for (int i = 0; i < coefficients.length; i++) {\n            result += coefficients[i] * Math.pow(x, i);\n        }\n        return result;\n    }\n}\n```"
  },
  {
    "task": "Implement a function that receives a video stream and applies a filter. Demonstrate the effects of pass-by-reference on the stream.",
    "code": "```java\nimport java.util.Arrays;\n\nclass VideoStream {\n    private int[] frames;\n\n    public VideoStream(int[] frames) {\n        this.frames = frames;\n    }\n\n    public int[] getFrames() {\n        return frames;\n    }\n\n    public void applyFilter() {\n        for (int i = 0; i < frames.length; i++) {\n            frames[i] = frames[i] / 2; // Simple filter effect\n        }\n    }\n\n    @Override\n    public String toString() {\n        return Arrays.toString(frames);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        int[] frames = {100, 200, 150, 250, 300};\n        VideoStream stream = new VideoStream(frames);\n\n        System.out.println(\"Before filter: \" + stream);\n        applyFilterToStream(stream);\n        System.out.println(\"After filter: \" + stream);\n    }\n\n    public static void applyFilterToStream(VideoStream stream) {\n        stream.applyFilter();\n    }\n}\n```"
  },
  {
    "task": "Develop a function that takes a task queue and reorders tasks based on priority. Illustrate the impact of pass-by-reference.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\nclass Task {\n    String name;\n    int priority;\n\n    public Task(String name, int priority) {\n        this.name = name;\n        this.priority = priority;\n    }\n\n    @Override\n    public String toString() {\n        return \"Task{name='\" + name + \"', priority=\" + priority + '}';\n    }\n}\n\npublic class TaskQueueManager {\n\n    public static void reorderTasks(List<Task> tasks) {\n        Collections.sort(tasks, Comparator.comparingInt(task -> -task.priority));\n    }\n\n    public static void main(String[] args) {\n        List<Task> taskQueue = new ArrayList<>();\n        taskQueue.add(new Task(\"Task1\", 2));\n        taskQueue.add(new Task(\"Task2\", 1));\n        taskQueue.add(new Task(\"Task3\", 3));\n\n        System.out.println(\"Before reordering: \" + taskQueue);\n        reorderTasks(taskQueue);\n        System.out.println(\"After reordering: \" + taskQueue);\n    }\n}\n```"
  },
  {
    "task": "Design a program where a function receives a blockchain and verifies a transaction. Discuss how pass-by-reference affects the blockchain.",
    "code": "```java\nclass Transaction {\n    private String transactionId;\n    private double amount;\n\n    public Transaction(String transactionId, double amount) {\n        this.transactionId = transactionId;\n        this.amount = amount;\n    }\n\n    public String getTransactionId() {\n        return transactionId;\n    }\n\n    public double getAmount() {\n        return amount;\n    }\n}\n\nclass Block {\n    private List<Transaction> transactions;\n\n    public Block() {\n        this.transactions = new ArrayList<>();\n    }\n\n    public void addTransaction(Transaction transaction) {\n        transactions.add(transaction);\n    }\n\n    public List<Transaction> getTransactions() {\n        return transactions;\n    }\n}\n\nclass Blockchain {\n    private List<Block> blocks;\n\n    public Blockchain() {\n        this.blocks = new ArrayList<>();\n    }\n\n    public void addBlock(Block block) {\n        blocks.add(block);\n    }\n\n    public List<Block> getBlocks() {\n        return blocks;\n    }\n}\n\npublic class BlockchainVerification {\n\n    public static boolean verifyTransaction(Blockchain blockchain, Transaction transaction) {\n        for (Block block : blockchain.getBlocks()) {\n            for (Transaction t : block.getTransactions()) {\n                if (t.getTransactionId().equals(transaction.getTransactionId())) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Blockchain blockchain = new Blockchain();\n        \n        Block block1 = new Block();\n        block1.addTransaction(new Transaction(\"tx1\", 100.0));\n        blockchain.addBlock(block1);\n\n        Transaction transaction = new Transaction(\"tx1\", 100.0);\n        \n        boolean isVerified = verifyTransaction(blockchain, transaction);\n        System.out.println(\"Transaction verified: \" + isVerified);\n    }\n}\n```"
  },
  {
    "task": "Write a function that takes a game leaderboard and updates scores. Show the changes with pass-by-reference.",
    "code": "```java\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class LeaderboardUpdater {\n\n    public static void updateScores(Map<String, Integer> leaderboard, String player, int additionalScore) {\n        if (leaderboard.containsKey(player)) {\n            leaderboard.put(player, leaderboard.get(player) + additionalScore);\n        } else {\n            leaderboard.put(player, additionalScore);\n        }\n    }\n\n    public static void main(String[] args) {\n        Map<String, Integer> leaderboard = new HashMap<>();\n        leaderboard.put(\"Alice\", 1500);\n        leaderboard.put(\"Bob\", 1200);\n\n        System.out.println(\"Before update: \" + leaderboard);\n\n        updateScores(leaderboard, \"Alice\", 200);\n        updateScores(leaderboard, \"Charlie\", 500);\n\n        System.out.println(\"After update: \" + leaderboard);\n    }\n}\n```"
  },
  {
    "task": "Create a function that accepts a project timeline and adjusts for delays. Explain how pass-by-reference influences the timeline.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class TimelineAdjuster {\n\n    public static void main(String[] args) {\n        List<String> projectTimeline = new ArrayList<>();\n        projectTimeline.add(\"Phase 1: Planning\");\n        projectTimeline.add(\"Phase 2: Development\");\n        projectTimeline.add(\"Phase 3: Testing\");\n        projectTimeline.add(\"Phase 4: Deployment\");\n\n        System.out.println(\"Original Timeline: \" + projectTimeline);\n\n        adjustForDelays(projectTimeline);\n\n        System.out.println(\"Adjusted Timeline: \" + projectTimeline);\n    }\n\n    private static void adjustForDelays(List<String> timeline) {\n        // Adjusting the timeline by appending delay information\n        for (int i = 0; i < timeline.size(); i++) {\n            timeline.set(i, timeline.get(i) + \" - Delayed\");\n        }\n    }\n}\n```"
  },
  {
    "task": "Implement a function that receives a to-do list and completes a task. Demonstrate the effect of pass-by-reference on the list.",
    "code": "```java\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class TodoListManager {\n    public static void main(String[] args) {\n        List<String> todoList = new ArrayList<>();\n        todoList.add(\"Buy groceries\");\n        todoList.add(\"Call John\");\n        todoList.add(\"Complete homework\");\n        \n        System.out.println(\"Before completing a task: \" + todoList);\n        completeTask(todoList, 1);\n        System.out.println(\"After completing a task: \" + todoList);\n    }\n    \n    public static void completeTask(List<String> list, int taskIndex) {\n        if (taskIndex >= 0 && taskIndex < list.size()) {\n            list.remove(taskIndex);\n        }\n    }\n}\n```"
  },
  {
    "task": "Develop a function that takes a paint canvas and adds a layer. Discuss the impact of pass-by-reference on the canvas.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass Canvas {\n    private List<String> layers;\n\n    public Canvas() {\n        this.layers = new ArrayList<>();\n    }\n\n    public void addLayer(String layer) {\n        layers.add(layer);\n    }\n\n    public List<String> getLayers() {\n        return layers;\n    }\n\n    public void printLayers() {\n        for (String layer : layers) {\n            System.out.println(layer);\n        }\n    }\n}\n\npublic class Paint {\n    public static void addLayerToCanvas(Canvas canvas, String layer) {\n        canvas.addLayer(layer);\n    }\n\n    public static void main(String[] args) {\n        Canvas myCanvas = new Canvas();\n        addLayerToCanvas(myCanvas, \"Layer 1\");\n        addLayerToCanvas(myCanvas, \"Layer 2\");\n        myCanvas.printLayers();\n    }\n}\n```"
  },
  {
    "task": "Design a function that accepts a URL list and fetches content. Show the difference in the list when using pass-by-value.",
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class URLFetcher {\n\n    public static void main(String[] args) {\n        List<String> urlList = new ArrayList<>(Arrays.asList(\n            \"http://example.com\",\n            \"http://example.org\"\n        ));\n        \n        System.out.println(\"Original URL List: \" + urlList);\n        fetchContent(urlList);\n        System.out.println(\"URL List after fetchContent: \" + urlList);\n    }\n\n    public static void fetchContent(List<String> urls) {\n        // Simulate pass-by-value by modifying the list reference\n        urls = new ArrayList<>(urls);\n        \n        for (String url : urls) {\n            try {\n                HttpURLConnection connection = (HttpURLConnection) new URL(url).openConnection();\n                connection.setRequestMethod(\"GET\");\n                BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n                String inputLine;\n                StringBuilder content = new StringBuilder();\n                while ((inputLine = in.readLine()) != null) {\n                    content.append(inputLine);\n                }\n                in.close();\n                System.out.println(\"Fetched content from \" + url + \": \" + content.substring(0, Math.min(content.length(), 50)) + \"...\");\n            } catch (Exception e) {\n                System.out.println(\"Failed to fetch content from \" + url);\n            }\n        }\n        \n        // Further modify the list inside the method\n        urls.clear();\n    }\n}\n```"
  },
  {
    "task": "Write a program where a function receives a game board and resets it. Illustrate the effects of pass-by-reference.",
    "code": "```java\npublic class GameBoardReset {\n    public static void main(String[] args) {\n        char[][] board = {\n            {'X', 'O', 'X'},\n            {'O', 'X', 'O'},\n            {'X', 'O', 'X'}\n        };\n        \n        System.out.println(\"Board before reset:\");\n        printBoard(board);\n        \n        resetBoard(board);\n        \n        System.out.println(\"Board after reset:\");\n        printBoard(board);\n    }\n    \n    public static void resetBoard(char[][] board) {\n        for (int i = 0; i < board.length; i++) {\n            for (int j = 0; j < board[i].length; j++) {\n                board[i][j] = '-';\n            }\n        }\n    }\n    \n    public static void printBoard(char[][] board) {\n        for (char[] row : board) {\n            for (char cell : row) {\n                System.out.print(cell + \" \");\n            }\n            System.out.println();\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a function that takes a sound effect and increases its volume. Explain how pass-by-reference affects the original sound.",
    "code": "```java\nclass SoundEffect {\n    private int volume;\n\n    public SoundEffect(int volume) {\n        this.volume = volume;\n    }\n\n    public int getVolume() {\n        return volume;\n    }\n\n    public void setVolume(int volume) {\n        this.volume = volume;\n    }\n}\n\npublic class SoundProcessor {\n    public static void increaseVolume(SoundEffect soundEffect, int increment) {\n        soundEffect.setVolume(soundEffect.getVolume() + increment);\n    }\n\n    public static void main(String[] args) {\n        SoundEffect soundEffect = new SoundEffect(5);\n        System.out.println(\"Original Volume: \" + soundEffect.getVolume());\n        increaseVolume(soundEffect, 10);\n        System.out.println(\"Increased Volume: \" + soundEffect.getVolume());\n    }\n}\n```"
  },
  {
    "task": "Implement a function that accepts a weather forecast and updates temperature predictions. Discuss the impact of pass-by-reference.",
    "code": "```java\npublic class WeatherForecast {\n    static class Forecast {\n        double temperature;\n\n        Forecast(double temperature) {\n            this.temperature = temperature;\n        }\n    }\n\n    public static void updateTemperature(Forecast forecast, double newTemperature) {\n        forecast.temperature = newTemperature;\n    }\n\n    public static void main(String[] args) {\n        Forecast todayForecast = new Forecast(25.0);\n        System.out.println(\"Before update: \" + todayForecast.temperature);\n        updateTemperature(todayForecast, 30.0);\n        System.out.println(\"After update: \" + todayForecast.temperature);\n    }\n}\n```"
  },
  {
    "task": "Develop a function that receives a system log and extracts error messages. Show how pass-by-value ensures the original log remains unchanged.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class LogProcessor {\n\n    public static void main(String[] args) {\n        List<String> systemLog = new ArrayList<>();\n        systemLog.add(\"INFO: System started\");\n        systemLog.add(\"ERROR: Null pointer exception\");\n        systemLog.add(\"DEBUG: Variable x initialized\");\n        systemLog.add(\"ERROR: Array index out of bounds\");\n\n        List<String> errors = extractErrorMessages(systemLog);\n\n        System.out.println(\"Original Log:\");\n        for (String log : systemLog) {\n            System.out.println(log);\n        }\n\n        System.out.println(\"\\nExtracted Errors:\");\n        for (String error : errors) {\n            System.out.println(error);\n        }\n    }\n\n    public static List<String> extractErrorMessages(List<String> log) {\n        List<String> errorMessages = new ArrayList<>();\n        for (String entry : log) {\n            if (entry.startsWith(\"ERROR\")) {\n                errorMessages.add(entry);\n            }\n        }\n        return errorMessages;\n    }\n}\n```"
  },
  {
    "task": "Design a function that accepts a data packet and encrypts it. Demonstrate the effect of pass-by-value on the packet.",
    "code": "```java\npublic class PacketEncryption {\n\n    public static void main(String[] args) {\n        String dataPacket = \"SensitiveData123\";\n        System.out.println(\"Original Data Packet: \" + dataPacket);\n        encryptPacket(dataPacket);\n        System.out.println(\"After Encryption Attempt: \" + dataPacket);\n    }\n\n    public static void encryptPacket(String packet) {\n        packet = \"Encrypted(\" + packet + \")\";\n        System.out.println(\"Inside Function: \" + packet);\n    }\n}\n```"
  },
  {
    "task": "Write a function that takes a website theme and applies a color change. Explain how pass-by-reference affects the original theme.",
    "code": "```java\nclass Theme {\n    String color;\n\n    Theme(String color) {\n        this.color = color;\n    }\n}\n\npublic class ThemeChanger {\n    public static void changeThemeColor(Theme theme, String newColor) {\n        theme.color = newColor;\n    }\n\n    public static void main(String[] args) {\n        Theme myTheme = new Theme(\"Blue\");\n        System.out.println(\"Original Theme Color: \" + myTheme.color);\n        \n        changeThemeColor(myTheme, \"Red\");\n        \n        System.out.println(\"Changed Theme Color: \" + myTheme.color);\n    }\n}\n```"
  },
  {
    "task": "Create a function that accepts a digital signature and verifies it. Discuss the implications of pass-by-value on the signature.",
    "code": "```java\nimport java.security.*;\n\npublic class SignatureVerifier {\n    public static boolean verifySignature(byte[] signature, byte[] data, PublicKey publicKey) {\n        try {\n            Signature verifier = Signature.getInstance(\"SHA256withRSA\");\n            verifier.initVerify(publicKey);\n            verifier.update(data);\n            return verifier.verify(signature);\n        } catch (NoSuchAlgorithmException | InvalidKeyException | SignatureException e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public static void main(String[] args) {\n        // Example usage (in a real scenario, initialize these variables properly)\n        byte[] signature = new byte[0];\n        byte[] data = new byte[0];\n        PublicKey publicKey = null;\n\n        boolean isValid = verifySignature(signature, data, publicKey);\n        System.out.println(\"Signature valid: \" + isValid);\n    }\n}\n```"
  },
  {
    "task": "Implement a function that receives a robot's path and optimizes it. Illustrate the effects of pass-by-reference on the path.",
    "code": "```java\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class RobotPathOptimizer {\n\n    public static void main(String[] args) {\n        List<String> path = new ArrayList<>();\n        path.add(\"UP\");\n        path.add(\"UP\");\n        path.add(\"DOWN\");\n        path.add(\"DOWN\");\n        path.add(\"LEFT\");\n        path.add(\"RIGHT\");\n        path.add(\"LEFT\");\n        path.add(\"UP\");\n\n        optimizePath(path);\n\n        System.out.println(\"Optimized Path: \" + path);\n    }\n\n    public static void optimizePath(List<String> path) {\n        for (int i = 0; i < path.size() - 1; i++) {\n            if ((path.get(i).equals(\"UP\") && path.get(i + 1).equals(\"DOWN\")) ||\n                (path.get(i).equals(\"DOWN\") && path.get(i + 1).equals(\"UP\")) ||\n                (path.get(i).equals(\"LEFT\") && path.get(i + 1).equals(\"RIGHT\")) ||\n                (path.get(i).equals(\"RIGHT\") && path.get(i + 1).equals(\"LEFT\"))) {\n                path.remove(i + 1);\n                path.remove(i);\n                i = Math.max(-1, i - 2);\n            }\n        }\n    }\n}\n```"
  },
  {
    "task": "Develop a function that takes a music playlist and shuffles it. Demonstrate the impact of pass-by-reference on the playlist.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class PlaylistShuffler {\n    public static void main(String[] args) {\n        List<String> playlist = new ArrayList<>();\n        playlist.add(\"Song A\");\n        playlist.add(\"Song B\");\n        playlist.add(\"Song C\");\n        playlist.add(\"Song D\");\n        \n        System.out.println(\"Original Playlist: \" + playlist);\n        shufflePlaylist(playlist);\n        System.out.println(\"Shuffled Playlist: \" + playlist);\n    }\n\n    public static void shufflePlaylist(List<String> playlist) {\n        Collections.shuffle(playlist);\n    }\n}\n```"
  },
  {
    "task": "Design a program where a function receives a social media feed and removes duplicates. Show the changes with pass-by-reference.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Set;\n\npublic class SocialMediaFeedCleaner {\n\n    public static void removeDuplicates(List<String> feed) {\n        Set<String> uniquePosts = new HashSet<>(feed);\n        feed.clear();\n        feed.addAll(uniquePosts);\n    }\n\n    public static void main(String[] args) {\n        List<String> socialMediaFeed = new ArrayList<>();\n        socialMediaFeed.add(\"Post 1\");\n        socialMediaFeed.add(\"Post 2\");\n        socialMediaFeed.add(\"Post 1\");\n        socialMediaFeed.add(\"Post 3\");\n        socialMediaFeed.add(\"Post 2\");\n\n        System.out.println(\"Before removing duplicates: \" + socialMediaFeed);\n        removeDuplicates(socialMediaFeed);\n        System.out.println(\"After removing duplicates: \" + socialMediaFeed);\n    }\n}\n```"
  },
  {
    "task": "Write a function that takes a coding challenge and adds test cases. Discuss the effects of pass-by-reference on the challenge.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass CodingChallenge {\n    private String challenge;\n    private List<String> testCases;\n\n    public CodingChallenge(String challenge) {\n        this.challenge = challenge;\n        this.testCases = new ArrayList<>();\n    }\n\n    public String getChallenge() {\n        return challenge;\n    }\n\n    public List<String> getTestCases() {\n        return testCases;\n    }\n\n    public void addTestCase(String testCase) {\n        testCases.add(testCase);\n    }\n}\n\npublic class ChallengeManager {\n\n    public static void addTestCases(CodingChallenge codingChallenge) {\n        codingChallenge.addTestCase(\"Test Case 1\");\n        codingChallenge.addTestCase(\"Test Case 2\");\n    }\n\n    public static void main(String[] args) {\n        CodingChallenge challenge = new CodingChallenge(\"Solve the problem\");\n        addTestCases(challenge);\n\n        System.out.println(\"Coding Challenge: \" + challenge.getChallenge());\n        System.out.println(\"Test Cases: \");\n        for (String testCase : challenge.getTestCases()) {\n            System.out.println(testCase);\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a function that accepts an animation sequence and reverses it. Explain how pass-by-value ensures the sequence remains unchanged.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class AnimationSequenceReversal {\n\n    public static void main(String[] args) {\n        List<String> animationSequence = new ArrayList<>();\n        animationSequence.add(\"Frame1\");\n        animationSequence.add(\"Frame2\");\n        animationSequence.add(\"Frame3\");\n\n        List<String> reversedSequence = reverseAnimationSequence(animationSequence);\n\n        System.out.println(\"Original Sequence: \" + animationSequence);\n        System.out.println(\"Reversed Sequence: \" + reversedSequence);\n    }\n\n    public static List<String> reverseAnimationSequence(List<String> sequence) {\n        List<String> reversed = new ArrayList<>(sequence);\n        Collections.reverse(reversed);\n        return reversed;\n    }\n}\n```"
  },
  {
    "task": "Implement a function that receives a GPS route and recalculates it. Illustrate the impact of pass-by-reference on the route.",
    "code": "```java\nimport java.util.List;\n\nclass GPSPoint {\n    double latitude;\n    double longitude;\n\n    GPSPoint(double latitude, double longitude) {\n        this.latitude = latitude;\n        this.longitude = longitude;\n    }\n\n    @Override\n    public String toString() {\n        return \"GPSPoint{\" + \"latitude=\" + latitude + \", longitude=\" + longitude + '}';\n    }\n}\n\npublic class GPSRoute {\n\n    public static void recalculateRoute(List<GPSPoint> route) {\n        for (GPSPoint point : route) {\n            point.latitude += 0.001; // Simulate recalculating with a small change\n            point.longitude += 0.001;\n        }\n    }\n\n    public static void main(String[] args) {\n        List<GPSPoint> route = List.of(\n                new GPSPoint(40.7128, -74.0060),\n                new GPSPoint(34.0522, -118.2437),\n                new GPSPoint(51.5074, -0.1278)\n        );\n\n        System.out.println(\"Original Route:\");\n        for (GPSPoint point : route) {\n            System.out.println(point);\n        }\n\n        recalculateRoute(route);\n\n        System.out.println(\"Recalculated Route:\");\n        for (GPSPoint point : route) {\n            System.out.println(point);\n        }\n    }\n}\n```"
  },
  {
    "task": "Develop a function that takes a chat history and censors inappropriate language. Show the effect of pass-by-reference on the history.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class ChatCensor {\n\n    // List of inappropriate words to be censored\n    private static final List<String> inappropriateWords = Arrays.asList(\"badword1\", \"badword2\", \"badword3\");\n\n    // Function to censor inappropriate language in a chat history\n    public static void censorChatHistory(String[] chatHistory) {\n        for (int i = 0; i < chatHistory.length; i++) {\n            for (String badWord : inappropriateWords) {\n                chatHistory[i] = chatHistory[i].replaceAll(\"(?i)\" + badWord, \"****\");\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        String[] chatHistory = {\n            \"This is a clean message.\",\n            \"This is a badword1 message.\",\n            \"Another badword2 message here.\",\n            \"Yet another clean message.\"\n        };\n\n        System.out.println(\"Before Censoring:\");\n        for (String message : chatHistory) {\n            System.out.println(message);\n        }\n\n        censorChatHistory(chatHistory);\n\n        System.out.println(\"\\nAfter Censoring:\");\n        for (String message : chatHistory) {\n            System.out.println(message);\n        }\n    }\n}\n```"
  },
  {
    "task": "Design a function that accepts a lighting setup and adjusts brightness. Discuss the changes when the setup is passed by reference.",
    "code": "```java\nclass LightingSetup {\n    private int brightness;\n\n    public LightingSetup(int brightness) {\n        this.brightness = brightness;\n    }\n\n    public int getBrightness() {\n        return brightness;\n    }\n\n    public void setBrightness(int brightness) {\n        this.brightness = brightness;\n    }\n}\n\npublic class LightingController {\n    public void adjustBrightness(LightingSetup setup, int newBrightness) {\n        setup.setBrightness(newBrightness);\n    }\n\n    public static void main(String[] args) {\n        LightingSetup setup = new LightingSetup(50);\n        LightingController controller = new LightingController();\n\n        System.out.println(\"Initial Brightness: \" + setup.getBrightness());\n        controller.adjustBrightness(setup, 75);\n        System.out.println(\"Adjusted Brightness: \" + setup.getBrightness());\n    }\n}\n```"
  },
  {
    "task": "Write a program where a function receives a VR environment and changes the scenery. Demonstrate the effects of pass-by-reference.",
    "code": "```java\nclass VREnvironment {\n    String scenery;\n\n    VREnvironment(String scenery) {\n        this.scenery = scenery;\n    }\n\n    void displayScenery() {\n        System.out.println(\"Current scenery: \" + scenery);\n    }\n}\n\npublic class Main {\n\n    public static void changeScenery(VREnvironment vrEnv, String newScenery) {\n        vrEnv.scenery = newScenery;\n    }\n\n    public static void main(String[] args) {\n        VREnvironment myVREnvironment = new VREnvironment(\"Beach\");\n        myVREnvironment.displayScenery();\n\n        changeScenery(myVREnvironment, \"Mountain\");\n        myVREnvironment.displayScenery();\n    }\n}\n```"
  },
  {
    "task": "Create a function that takes a blockchain ledger and adds a block. Explain how pass-by-reference affects the ledger.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nclass Block {\n    private int index;\n    private String data;\n    private String previousHash;\n\n    public Block(int index, String data, String previousHash) {\n        this.index = index;\n        this.data = data;\n        this.previousHash = previousHash;\n    }\n\n    @Override\n    public String toString() {\n        return \"Block{\" +\n                \"index=\" + index +\n                \", data='\" + data + '\\'' +\n                \", previousHash='\" + previousHash + '\\'' +\n                '}';\n    }\n}\n\nclass Blockchain {\n    private List<Block> ledger;\n\n    public Blockchain() {\n        this.ledger = new ArrayList<>();\n    }\n\n    public List<Block> getLedger() {\n        return ledger;\n    }\n\n    public void addBlock(Block block) {\n        ledger.add(block);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Blockchain blockchain = new Blockchain();\n\n        System.out.println(\"Before adding a block:\");\n        System.out.println(blockchain.getLedger());\n\n        Block newBlock = new Block(1, \"Transaction Data\", \"0\");\n        addBlockToLedger(blockchain.getLedger(), newBlock);\n\n        System.out.println(\"After adding a block:\");\n        System.out.println(blockchain.getLedger());\n    }\n\n    public static void addBlockToLedger(List<Block> ledger, Block block) {\n        ledger.add(block);\n    }\n}\n```"
  },
  {
    "task": "Implement a function that accepts a network packet and alters its headers. Discuss the implications of pass-by-value on the packet.",
    "code": "```java\npublic class NetworkPacket {\n    private String header;\n    private String data;\n\n    public NetworkPacket(String header, String data) {\n        this.header = header;\n        this.data = data;\n    }\n\n    public String getHeader() {\n        return header;\n    }\n\n    public void setHeader(String header) {\n        this.header = header;\n    }\n\n    public String getData() {\n        return data;\n    }\n\n    public void setData(String data) {\n        this.data = data;\n    }\n\n    @Override\n    public String toString() {\n        return \"Header: \" + header + \", Data: \" + data;\n    }\n}\n\npublic class PacketProcessor {\n\n    public void alterPacketHeader(NetworkPacket packet) {\n        packet.setHeader(\"NewHeader\");\n    }\n\n    public static void main(String[] args) {\n        NetworkPacket packet = new NetworkPacket(\"OriginalHeader\", \"PacketData\");\n        PacketProcessor processor = new PacketProcessor();\n        \n        System.out.println(\"Before altering: \" + packet);\n        processor.alterPacketHeader(packet);\n        System.out.println(\"After altering: \" + packet);\n    }\n}\n```"
  }
]