[
  {
    "task": "Convert a list of temperatures from Celsius to Fahrenheit using a map function.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class TemperatureConverter {\n    public static void main(String[] args) {\n        List<Double> celsiusTemperatures = Arrays.asList(0.0, 20.0, 30.0, 100.0);\n        List<Double> fahrenheitTemperatures = celsiusTemperatures.stream()\n            .map(celsius -> celsius * 9 / 5 + 32)\n            .collect(Collectors.toList());\n        \n        System.out.println(fahrenheitTemperatures);\n    }\n}\n```"
  },
  {
    "task": "Use map to convert a list of lowercase words to uppercase.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class FunctionalMapExample {\n    public static void main(String[] args) {\n        List<String> words = Arrays.asList(\"apple\", \"banana\", \"cherry\");\n        List<String> upperCaseWords = words.stream()\n                                           .map(String::toUpperCase)\n                                           .collect(Collectors.toList());\n        System.out.println(upperCaseWords);\n    }\n}\n```"
  },
  {
    "task": "Apply map to add a prefix to each string in a list of filenames.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<String> filenames = Arrays.asList(\"file1.txt\", \"file2.txt\", \"file3.txt\");\n        String prefix = \"prefix_\";\n        \n        List<String> prefixedFilenames = filenames.stream()\n            .map(filename -> prefix + filename)\n            .collect(Collectors.toList());\n\n        prefixedFilenames.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Transform a list of numbers by squaring each element with a map function.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class SquareNumbers {\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);\n        List<Integer> squaredNumbers = numbers.stream()\n                                              .map(n -> n * n)\n                                              .collect(Collectors.toList());\n        System.out.println(squaredNumbers);\n    }\n}\n```"
  },
  {
    "task": "Convert a list of integers to their string representations using map.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class FunctionalMapExample {\n    public static void main(String[] args) {\n        List<Integer> integerList = Arrays.asList(1, 2, 3, 4, 5);\n        List<String> stringList = integerList.stream()\n            .map(String::valueOf)\n            .collect(Collectors.toList());\n        \n        System.out.println(stringList);\n    }\n}\n```"
  },
  {
    "task": "Use map to compute the length of each string in a list of sentences.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class SentenceLengths {\n    public static void main(String[] args) {\n        List<String> sentences = Arrays.asList(\"This is a sentence\", \"Another sentence\", \"Map function is useful\");\n        List<Integer> lengths = sentences.stream()\n                                         .map(String::length)\n                                         .collect(Collectors.toList());\n        System.out.println(lengths);\n    }\n}\n```"
  },
  {
    "task": "Apply a discount to a list of prices using a map function.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class DiscountApplier {\n    public static void main(String[] args) {\n        List<Double> prices = Arrays.asList(100.0, 200.0, 300.0, 400.0, 500.0);\n        double discountRate = 0.1; // 10% discount\n\n        List<Double> discountedPrices = prices.stream()\n            .map(price -> price - price * discountRate)\n            .collect(Collectors.toList());\n\n        discountedPrices.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Extract the first element from each tuple in a list of tuples with map.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class FunctionalMapExample {\n    public static void main(String[] args) {\n        List<Tuple<Integer, String>> tuples = Arrays.asList(\n            new Tuple<>(1, \"one\"),\n            new Tuple<>(2, \"two\"),\n            new Tuple<>(3, \"three\")\n        );\n\n        List<Integer> firstElements = tuples.stream()\n            .map(Tuple::getFirst)\n            .collect(Collectors.toList());\n\n        System.out.println(firstElements);\n    }\n}\n\nclass Tuple<T, U> {\n    private final T first;\n    private final U second;\n\n    public Tuple(T first, U second) {\n        this.first = first;\n        this.second = second;\n    }\n\n    public T getFirst() {\n        return first;\n    }\n\n    public U getSecond() {\n        return second;\n    }\n}\n```"
  },
  {
    "task": "Use map to round a list of floating-point numbers to two decimal places.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Double> numbers = Arrays.asList(3.14159, 2.71828, 1.41421, 1.73205);\n        List<Double> roundedNumbers = numbers.stream()\n            .map(num -> Math.round(num * 100.0) / 100.0)\n            .collect(Collectors.toList());\n        \n        System.out.println(roundedNumbers);\n    }\n}\n```"
  },
  {
    "task": "Capitalize the first letter of each word in a list of names using map.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class CapitalizeNames {\n    public static void main(String[] args) {\n        List<String> names = Arrays.asList(\"alice\", \"bob\", \"charlie\");\n\n        List<String> capitalizedNames = names.stream()\n            .map(name -> name.substring(0, 1).toUpperCase() + name.substring(1))\n            .collect(Collectors.toList());\n\n        System.out.println(capitalizedNames);\n    }\n}\n```"
  },
  {
    "task": "Convert a list of JSON strings to corresponding dictionary objects with map.",
    "code": "```java\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\npublic class JsonToMapConverter {\n    public static void main(String[] args) {\n        List<String> jsonStringList = Arrays.asList(\n                \"{\\\"key1\\\":\\\"value1\\\", \\\"key2\\\":\\\"value2\\\"}\",\n                \"{\\\"key3\\\":\\\"value3\\\", \\\"key4\\\":\\\"value4\\\"}\"\n        );\n\n        ObjectMapper objectMapper = new ObjectMapper();\n\n        List<Map<String, Object>> mapList = jsonStringList.stream()\n                .map(json -> {\n                    try {\n                        return objectMapper.readValue(json, Map.class);\n                    } catch (JsonProcessingException e) {\n                        throw new RuntimeException(e);\n                    }\n                })\n                .collect(Collectors.toList());\n\n        mapList.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Use map to double the value of each number in a list.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class DoubleValues {\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);\n        List<Integer> doubledNumbers = numbers.stream()\n                                              .map(n -> n * 2)\n                                              .collect(Collectors.toList());\n        System.out.println(doubledNumbers);\n    }\n}\n```"
  },
  {
    "task": "Transform a list of RGB tuples to hexadecimal color codes using map.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class RGBToHexConverter {\n    public static List<String> transformToHex(List<int[]> rgbTuples) {\n        return rgbTuples.stream()\n            .map(rgb -> String.format(\"#%02X%02X%02X\", rgb[0], rgb[1], rgb[2]))\n            .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        List<int[]> rgbTuples = List.of(\n            new int[]{255, 99, 71},\n            new int[]{144, 238, 144},\n            new int[]{30, 144, 255}\n        );\n\n        List<String> hexCodes = transformToHex(rgbTuples);\n        hexCodes.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Use map to compute the factorial of each number in a list.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class FactorialMap {\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);\n        List<Integer> factorials = numbers.stream()\n                .map(FactorialMap::factorial)\n                .collect(Collectors.toList());\n        System.out.println(factorials);\n    }\n\n    private static int factorial(int n) {\n        return n <= 1 ? 1 : n * factorial(n - 1);\n    }\n}\n```"
  },
  {
    "task": "Translate a list of English words to Spanish using a map function.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\npublic class FunctionalMapExample {\n    public static void main(String[] args) {\n        List<String> englishWords = Arrays.asList(\"hello\", \"world\", \"apple\", \"goodbye\");\n        Map<String, String> translationMap = Map.of(\n            \"hello\", \"hola\",\n            \"world\", \"mundo\",\n            \"apple\", \"manzana\",\n            \"goodbye\", \"adios\"\n        );\n\n        List<String> spanishWords = englishWords.stream()\n            .map(word -> translationMap.getOrDefault(word, word))\n            .collect(Collectors.toList());\n\n        System.out.println(spanishWords);\n    }\n}\n```"
  },
  {
    "task": "Apply a map function to format a list of dates from one format to another.",
    "code": "```java\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class DateFormatter {\n    public static void main(String[] args) {\n        List<String> dates = Arrays.asList(\"01-12-2023\", \"15-01-2024\", \"23-11-2023\");\n\n        SimpleDateFormat inputFormat = new SimpleDateFormat(\"dd-MM-yyyy\");\n        SimpleDateFormat outputFormat = new SimpleDateFormat(\"yyyy/MM/dd\");\n\n        List<String> formattedDates = dates.stream().map(date -> {\n            try {\n                return outputFormat.format(inputFormat.parse(date));\n            } catch (ParseException e) {\n                throw new RuntimeException(e);\n            }\n        }).collect(Collectors.toList());\n\n        formattedDates.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Use map to check if each number in a list is even, returning a list of booleans.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6);\n        List<Boolean> isEvenList = numbers.stream()\n                                          .map(n -> n % 2 == 0)\n                                          .collect(Collectors.toList());\n        System.out.println(isEvenList);\n    }\n}\n```"
  },
  {
    "task": "Convert a list of binary strings to decimal numbers using map.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class BinaryToDecimal {\n    public static void main(String[] args) {\n        List<String> binaryStrings = Arrays.asList(\"101\", \"110\", \"111\", \"1000\");\n        List<Integer> decimalNumbers = binaryStrings.stream()\n                .map(s -> Integer.parseInt(s, 2))\n                .collect(Collectors.toList());\n\n        decimalNumbers.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Use map to append a domain name to a list of user names to create email addresses.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class EmailGenerator {\n    public static void main(String[] args) {\n        List<String> userNames = Arrays.asList(\"alice\", \"bob\", \"charlie\");\n        String domain = \"@example.com\";\n        \n        List<String> emailAddresses = userNames.stream()\n            .map(userName -> userName + domain)\n            .collect(Collectors.toList());\n        \n        emailAddresses.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Calculate the area of each circle in a list of radii using a map function.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class CircleAreaCalculator {\n\n    public static void main(String[] args) {\n        List<Double> radii = Arrays.asList(1.0, 2.0, 3.0, 4.0);\n        List<Double> areas = radii.stream()\n                                  .map(radius -> Math.PI * radius * radius)\n                                  .collect(Collectors.toList());\n        System.out.println(areas);\n    }\n}\n```"
  },
  {
    "task": "Use map to strip whitespace from the start and end of each string in a list.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class FunctionalMapExample {\n    public static void main(String[] args) {\n        List<String> stringsWithWhitespace = Arrays.asList(\"  hello  \", \"  world  \", \"  java  \");\n        List<String> trimmedStrings = stringsWithWhitespace.stream()\n            .map(String::trim)\n            .collect(Collectors.toList());\n        \n        trimmedStrings.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Apply map to replace spaces with underscores in a list of file paths.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class FilePathMapper {\n\n    public static List<String> replaceSpacesWithUnderscores(List<String> filePaths) {\n        return filePaths.stream()\n                .map(filePath -> filePath.replace(\" \", \"_\"))\n                .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        List<String> filePaths = List.of(\"file path one\", \"second file path\", \"another path\");\n        List<String> updatedFilePaths = replaceSpacesWithUnderscores(filePaths);\n        updatedFilePaths.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Convert a list of mixed-case strings to title case using map.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class TitleCaseConverter {\n    public static void main(String[] args) {\n        List<String> mixedCaseStrings = Arrays.asList(\"hello world\", \"java programming\", \"functional MAP\");\n\n        List<String> titleCaseStrings = mixedCaseStrings.stream()\n            .map(s -> Arrays.stream(s.split(\" \"))\n                .map(word -> word.substring(0, 1).toUpperCase() + word.substring(1).toLowerCase())\n                .collect(Collectors.joining(\" \")))\n            .collect(Collectors.toList());\n\n        titleCaseStrings.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Use map to filter out only the digits from a list of mixed alphanumeric strings.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class FunctionalMapExample {\n    public static void main(String[] args) {\n        List<String> mixedList = Arrays.asList(\"abc123\", \"def456\", \"ghi789\", \"123abc\", \"456def\");\n        \n        List<String> digitsList = mixedList.stream()\n            .map(s -> s.replaceAll(\"\\\\D\", \"\"))\n            .filter(s -> !s.isEmpty())\n            .collect(Collectors.toList());\n        \n        digitsList.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Apply map to convert a list of Unix timestamps to readable date strings.",
    "code": "```java\nimport java.time.Instant;\nimport java.time.ZoneId;\nimport java.time.format.DateTimeFormatter;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class TimestampConverter {\n\n    public static List<String> convertTimestampsToReadableDates(List<Long> timestamps) {\n        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\")\n                                                       .withZone(ZoneId.systemDefault());\n        return timestamps.stream()\n                         .map(Instant::ofEpochSecond)\n                         .map(formatter::format)\n                         .collect(Collectors.toList());\n    }\n}\n```"
  },
  {
    "task": "Transform a list of dictionary objects by extracting a specific key's value using map.",
    "code": "```java\nimport java.util.*;\nimport java.util.stream.Collectors;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Map<String, Object>> list = new ArrayList<>();\n        \n        Map<String, Object> map1 = new HashMap<>();\n        map1.put(\"key1\", \"value1\");\n        map1.put(\"key2\", \"value2\");\n        list.add(map1);\n        \n        Map<String, Object> map2 = new HashMap<>();\n        map2.put(\"key1\", \"value3\");\n        map2.put(\"key2\", \"value4\");\n        list.add(map2);\n        \n        List<Object> transformedList = list.stream()\n                                           .map(m -> m.get(\"key1\"))\n                                           .collect(Collectors.toList());\n        \n        System.out.println(transformedList);\n    }\n}\n```"
  },
  {
    "task": "Use map to compute the cube of each number in a list.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class CubeNumbers {\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);\n        List<Integer> cubes = numbers.stream()\n                                     .map(n -> n * n * n)\n                                     .collect(Collectors.toList());\n        System.out.println(cubes);\n    }\n}\n```"
  },
  {
    "task": "Translate a list of URLs to their respective domain names using a map function.",
    "code": "```java\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class UrlToDomainMapper {\n    public static void main(String[] args) {\n        List<String> urls = Arrays.asList(\n            \"http://example.com/path\",\n            \"https://another-example.org/home\",\n            \"http://subdomain.example.net/resource\"\n        );\n\n        List<String> domains = urls.stream()\n            .map(url -> {\n                try {\n                    return new URI(url).getHost();\n                } catch (URISyntaxException e) {\n                    return null;\n                }\n            })\n            .collect(Collectors.toList());\n\n        domains.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Use map to generate HTML list items from a list of text strings.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class HtmlListGenerator {\n    public static void main(String[] args) {\n        List<String> items = Arrays.asList(\"Item1\", \"Item2\", \"Item3\");\n        \n        List<String> htmlListItems = items.stream()\n            .map(item -> \"<li>\" + item + \"</li>\")\n            .collect(Collectors.toList());\n\n        htmlListItems.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Convert a list of polar coordinates to Cartesian coordinates using map.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class PolarToCartesian {\n\n    public static class PolarCoordinate {\n        double radius;\n        double angle; // in radians\n\n        public PolarCoordinate(double radius, double angle) {\n            this.radius = radius;\n            this.angle = angle;\n        }\n    }\n\n    public static class CartesianCoordinate {\n        double x;\n        double y;\n\n        public CartesianCoordinate(double x, double y) {\n            this.x = x;\n            this.y = y;\n        }\n    }\n\n    public static List<CartesianCoordinate> convertToCartesian(List<PolarCoordinate> polarCoordinates) {\n        return polarCoordinates.stream()\n            .map(p -> new CartesianCoordinate(p.radius * Math.cos(p.angle), p.radius * Math.sin(p.angle)))\n            .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        List<PolarCoordinate> polarCoordinates = List.of(\n            new PolarCoordinate(1, Math.PI / 4),\n            new PolarCoordinate(2, Math.PI / 2),\n            new PolarCoordinate(3, Math.PI)\n        );\n\n        List<CartesianCoordinate> cartesianCoordinates = convertToCartesian(polarCoordinates);\n\n        cartesianCoordinates.forEach(c -> System.out.println(\"(\" + c.x + \", \" + c.y + \")\"));\n    }\n}\n```"
  },
  {
    "task": "Use map to decode a list of Base64 encoded strings.",
    "code": "```java\nimport java.util.Base64;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class Base64Decoder {\n    public static List<String> decodeBase64Strings(List<String> encodedStrings) {\n        return encodedStrings.stream()\n                .map(encoded -> new String(Base64.getDecoder().decode(encoded)))\n                .collect(Collectors.toList());\n    }\n}\n```"
  },
  {
    "task": "Convert a list of English sentences to Pig Latin using a map function.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class PigLatinConverter {\n    public static void main(String[] args) {\n        List<String> sentences = Arrays.asList(\n            \"hello world\",\n            \"java programming\",\n            \"functional map\"\n        );\n\n        List<String> pigLatinSentences = sentences.stream()\n            .map(PigLatinConverter::convertToPigLatin)\n            .collect(Collectors.toList());\n\n        pigLatinSentences.forEach(System.out::println);\n    }\n\n    private static String convertToPigLatin(String sentence) {\n        return Arrays.stream(sentence.split(\" \"))\n            .map(PigLatinConverter::convertWordToPigLatin)\n            .collect(Collectors.joining(\" \"));\n    }\n\n    private static String convertWordToPigLatin(String word) {\n        char firstChar = word.charAt(0);\n        return word.substring(1) + firstChar + \"ay\";\n    }\n}\n```"
  },
  {
    "task": "Use map to anonymize a list of email addresses by masking them.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class EmailAnonymizer {\n    public static void main(String[] args) {\n        List<String> emails = Arrays.asList(\"example1@example.com\", \"user2@domain.com\", \"contact3@service.org\");\n        \n        List<String> anonymizedEmails = emails.stream()\n            .map(email -> {\n                int atIndex = email.indexOf('@');\n                return \"****\" + email.substring(atIndex);\n            })\n            .collect(Collectors.toList());\n\n        anonymizedEmails.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Apply map to reverse each string in a list of words.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class ReverseStrings {\n    public static void main(String[] args) {\n        List<String> words = Arrays.asList(\"apple\", \"banana\", \"cherry\");\n        \n        List<String> reversedWords = words.stream()\n                .map(word -> new StringBuilder(word).reverse().toString())\n                .collect(Collectors.toList());\n        \n        System.out.println(reversedWords);\n    }\n}\n```"
  },
  {
    "task": "Convert a list of hexadecimal color codes to RGB tuples using map.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class HexToRGB {\n    public static void main(String[] args) {\n        List<String> hexColors = Arrays.asList(\"#FF5733\", \"#33FF57\", \"#3357FF\");\n        \n        List<int[]> rgbColors = hexColors.stream()\n            .map(HexToRGB::hexToRgb)\n            .collect(Collectors.toList());\n\n        rgbColors.forEach(rgb -> System.out.println(Arrays.toString(rgb)));\n    }\n\n    private static int[] hexToRgb(String hex) {\n        int r = Integer.parseInt(hex.substring(1, 3), 16);\n        int g = Integer.parseInt(hex.substring(3, 5), 16);\n        int b = Integer.parseInt(hex.substring(5, 7), 16);\n        return new int[] {r, g, b};\n    }\n}\n```"
  },
  {
    "task": "Use map to increment each integer in a list by a constant value.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class IncrementList {\n\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);\n        int incrementValue = 1;\n\n        List<Integer> incrementedNumbers = numbers.stream()\n            .map(n -> n + incrementValue)\n            .collect(Collectors.toList());\n\n        System.out.println(incrementedNumbers);\n    }\n}\n```"
  },
  {
    "task": "Calculate the square root of each number in a list using a map function.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class SquareRootCalculator {\n    public static void main(String[] args) {\n        List<Double> numbers = Arrays.asList(1.0, 4.0, 9.0, 16.0, 25.0);\n        List<Double> squareRoots = numbers.stream()\n                                          .map(Math::sqrt)\n                                          .collect(Collectors.toList());\n        squareRoots.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Use map to convert a list of currency amounts from dollars to euros.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class CurrencyConverter {\n    public static void main(String[] args) {\n        List<Double> dollarAmounts = Arrays.asList(10.0, 20.0, 30.0, 40.0, 50.0);\n        double conversionRate = 0.85; // Example conversion rate from dollars to euros\n        \n        List<Double> euroAmounts = dollarAmounts.stream()\n                                                .map(amount -> amount * conversionRate)\n                                                .collect(Collectors.toList());\n\n        euroAmounts.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Extract the domain from each email address in a list using map.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class EmailDomainExtractor {\n    public static void main(String[] args) {\n        List<String> emails = Arrays.asList(\"user1@example.com\", \"user2@test.com\", \"user3@sample.org\");\n        List<String> domains = emails.stream()\n            .map(email -> email.substring(email.indexOf('@') + 1))\n            .collect(Collectors.toList());\n        domains.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Use map to serialize a list of objects into JSON strings.",
    "code": "```java\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class SerializeObjectsToJson {\n    public static void main(String[] args) {\n        List<MyObject> objects = List.of(new MyObject(\"First\", 1), new MyObject(\"Second\", 2));\n        ObjectMapper objectMapper = new ObjectMapper();\n        List<String> jsonStrings = objects.stream()\n                .map(obj -> {\n                    try {\n                        return objectMapper.writeValueAsString(obj);\n                    } catch (JsonProcessingException e) {\n                        throw new RuntimeException(e);\n                    }\n                })\n                .collect(Collectors.toList());\n\n        jsonStrings.forEach(System.out::println);\n    }\n}\n\nclass MyObject {\n    private String name;\n    private int value;\n\n    public MyObject(String name, int value) {\n        this.name = name;\n        this.value = value;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getValue() {\n        return value;\n    }\n}\n```"
  },
  {
    "task": "Transform a list of file sizes from bytes to kilobytes using map.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class FileSizeTransformer {\n    public static void main(String[] args) {\n        List<Integer> fileSizesInBytes = Arrays.asList(1024, 2048, 5120, 10240, 20480);\n        \n        List<Double> fileSizesInKilobytes = fileSizesInBytes.stream()\n            .map(sizeInBytes -> sizeInBytes / 1024.0)\n            .collect(Collectors.toList());\n        \n        System.out.println(fileSizesInKilobytes);\n    }\n}\n```"
  },
  {
    "task": "Use map to append a suffix to each string in a list of identifiers.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class FunctionalMapExample {\n    public static void main(String[] args) {\n        List<String> identifiers = Arrays.asList(\"id1\", \"id2\", \"id3\");\n        String suffix = \"_suffix\";\n\n        List<String> modifiedIdentifiers = identifiers.stream()\n                .map(id -> id + suffix)\n                .collect(Collectors.toList());\n\n        System.out.println(modifiedIdentifiers);\n    }\n}\n```"
  },
  {
    "task": "Apply map to convert measurements from inches to centimeters in a list.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class MeasurementConverter {\n    public static void main(String[] args) {\n        List<Double> measurementsInInches = Arrays.asList(2.0, 3.5, 4.0, 5.25);\n        List<Double> measurementsInCentimeters = measurementsInInches\n            .stream()\n            .map(inches -> inches * 2.54)\n            .collect(Collectors.toList());\n        System.out.println(measurementsInCentimeters);\n    }\n}\n```"
  },
  {
    "task": "Use map to encrypt a list of plaintext messages using a simple cipher.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class SimpleCipher {\n    private static final int SHIFT = 3;\n\n    public static void main(String[] args) {\n        List<String> plaintexts = Arrays.asList(\"hello\", \"world\", \"java\");\n        List<String> encryptedTexts = plaintexts.stream()\n                .map(SimpleCipher::encrypt)\n                .collect(Collectors.toList());\n        \n        encryptedTexts.forEach(System.out::println);\n    }\n\n    private static String encrypt(String text) {\n        StringBuilder encrypted = new StringBuilder();\n        for (char c : text.toCharArray()) {\n            encrypted.append((char) (c + SHIFT));\n        }\n        return encrypted.toString();\n    }\n}\n```"
  },
  {
    "task": "Transform a list of date strings to day of the week names using a map function.",
    "code": "```java\nimport java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class DateTransformer {\n    public static void main(String[] args) {\n        List<String> dateStrings = Arrays.asList(\"2023-10-01\", \"2023-10-02\", \"2023-10-03\");\n\n        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n        \n        List<String> daysOfWeek = dateStrings.stream()\n            .map(date -> LocalDate.parse(date, formatter))\n            .map(date -> date.getDayOfWeek().toString())\n            .collect(Collectors.toList());\n\n        System.out.println(daysOfWeek);\n    }\n}\n```"
  },
  {
    "task": "Use map to derive the absolute value of each number in a list.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class FunctionalMapExample {\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(-1, 2, -3, 4, -5);\n        List<Integer> absoluteValues = numbers.stream()\n                                              .map(Math::abs)\n                                              .collect(Collectors.toList());\n        System.out.println(absoluteValues);\n    }\n}\n```"
  },
  {
    "task": "Convert a list of lowercase hexadecimal strings to uppercase using map.",
    "code": "```java\nimport java.util.*;\nimport java.util.stream.*;\n\npublic class FunctionalMapExample {\n    public static void main(String[] args) {\n        List<String> hexStrings = Arrays.asList(\"a1\", \"b2\", \"c3\", \"d4\");\n        List<String> upperCaseHexStrings = hexStrings.stream()\n            .map(String::toUpperCase)\n            .collect(Collectors.toList());\n        \n        System.out.println(upperCaseHexStrings);\n    }\n}\n```"
  },
  {
    "task": "Use map to find the maximum value in a list of lists of numbers.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<List<Integer>> listOfLists = Arrays.asList(\n            Arrays.asList(3, 5, 7),\n            Arrays.asList(0, 2, 8),\n            Arrays.asList(1, 9, 4)\n        );\n\n        int max = listOfLists.stream()\n            .flatMap(List::stream)\n            .mapToInt(Integer::intValue)\n            .max()\n            .orElseThrow();\n\n        System.out.println(\"Maximum value: \" + max);\n    }\n}\n```"
  },
  {
    "task": "Apply map to extract the year from each date in a list of date objects.",
    "code": "```java\nimport java.util.*;\nimport java.time.LocalDate;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<LocalDate> dates = Arrays.asList(\n            LocalDate.of(2021, 5, 15),\n            LocalDate.of(2020, 8, 23),\n            LocalDate.of(2019, 1, 5)\n        );\n\n        List<Integer> years = dates.stream()\n                                   .map(LocalDate::getYear)\n                                   .toList();\n\n        years.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Use map to prepend a country code to each phone number in a list.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class FunctionalMapExample {\n    public static void main(String[] args) {\n        List<String> phoneNumbers = List.of(\"123456789\", \"987654321\", \"555555555\");\n        String countryCode = \"+1\";\n\n        List<String> updatedNumbers = phoneNumbers.stream()\n                .map(number -> countryCode + number)\n                .collect(Collectors.toList());\n\n        updatedNumbers.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Capitalize the last letter of each word in a list using a map function.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class CapitalizeLastLetter {\n    public static void main(String[] args) {\n        List<String> words = Arrays.asList(\"hello\", \"world\", \"java\", \"stream\");\n        \n        List<String> capitalizedWords = words.stream()\n            .map(word -> {\n                int len = word.length();\n                return word.substring(0, len - 1) + Character.toUpperCase(word.charAt(len - 1));\n            })\n            .collect(Collectors.toList());\n\n        capitalizedWords.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Use map to transform a list of strings by removing all vowels.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class RemoveVowels {\n    public static void main(String[] args) {\n        List<String> strings = Arrays.asList(\"apple\", \"orange\", \"banana\", \"grape\");\n        List<String> transformed = strings.stream()\n            .map(s -> s.replaceAll(\"[aeiouAEIOU]\", \"\"))\n            .collect(Collectors.toList());\n        \n        System.out.println(transformed);\n    }\n}\n```"
  },
  {
    "task": "Convert a list of music notes to their corresponding frequencies using map.",
    "code": "```java\nimport java.util.*;\nimport java.util.stream.*;\n\npublic class MusicNoteFrequencies {\n    public static void main(String[] args) {\n        List<String> notes = Arrays.asList(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\");\n        \n        Map<String, Double> noteToFrequency = new HashMap<>();\n        noteToFrequency.put(\"A\", 440.0);\n        noteToFrequency.put(\"B\", 493.88);\n        noteToFrequency.put(\"C\", 261.63);\n        noteToFrequency.put(\"D\", 293.66);\n        noteToFrequency.put(\"E\", 329.63);\n        noteToFrequency.put(\"F\", 349.23);\n        noteToFrequency.put(\"G\", 392.00);\n        \n        List<Double> frequencies = notes.stream()\n                                        .map(noteToFrequency::get)\n                                        .collect(Collectors.toList());\n        \n        frequencies.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Use map to find the reciprocal of each number in a list.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class ReciprocalMap {\n    public static void main(String[] args) {\n        List<Double> numbers = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0);\n        List<Double> reciprocals = numbers.stream()\n                                          .map(n -> 1 / n)\n                                          .collect(Collectors.toList());\n        System.out.println(reciprocals);\n    }\n}\n```"
  },
  {
    "task": "Transform a list of URLs to their shortened versions using a map function.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class UrlShortener {\n    public static List<String> shortenUrls(List<String> urls) {\n        return urls.stream()\n                   .map(UrlShortener::shortenUrl)\n                   .collect(Collectors.toList());\n    }\n\n    private static String shortenUrl(String url) {\n        // Placeholder implementation for URL shortening\n        return \"short.ly/\" + url.hashCode();\n    }\n\n    public static void main(String[] args) {\n        List<String> urls = List.of(\"http://example.com\", \"http://anotherexample.com\");\n        List<String> shortenedUrls = shortenUrls(urls);\n        shortenedUrls.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Use map to generate a list of initials from a list of full names.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class InitialsGenerator {\n    public static void main(String[] args) {\n        List<String> names = Arrays.asList(\"John Doe\", \"Jane Smith\", \"Alice Johnson\");\n        List<String> initials = names.stream()\n            .map(name -> Arrays.stream(name.split(\" \"))\n                               .map(part -> part.substring(0, 1))\n                               .collect(Collectors.joining()))\n            .collect(Collectors.toList());\n        System.out.println(initials);\n    }\n}\n```"
  },
  {
    "task": "Convert a list of decimal numbers to their binary string representations using map.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class DecimalToBinary {\n    public static void main(String[] args) {\n        List<Integer> decimals = Arrays.asList(10, 15, 255, 8, 32);\n        List<String> binaryStrings = decimals.stream()\n                                             .map(Integer::toBinaryString)\n                                             .collect(Collectors.toList());\n        System.out.println(binaryStrings);\n    }\n}\n```"
  },
  {
    "task": "Use map to adjust the brightness of each color in a list of RGB tuples.",
    "code": "```java\nimport java.util.*;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\n\npublic class AdjustBrightness {\n    public static void main(String[] args) {\n        List<int[]> colors = Arrays.asList(\n            new int[]{255, 0, 0},  // Red\n            new int[]{0, 255, 0},  // Green\n            new int[]{0, 0, 255}   // Blue\n        );\n\n        double brightnessFactor = 0.8; // Example brightness adjustment factor\n\n        Function<int[], int[]> adjustBrightness = color -> new int[]{\n            (int) Math.min(255, color[0] * brightnessFactor),\n            (int) Math.min(255, color[1] * brightnessFactor),\n            (int) Math.min(255, color[2] * brightnessFactor)\n        };\n\n        List<int[]> adjustedColors = colors.stream()\n            .map(adjustBrightness)\n            .collect(Collectors.toList());\n\n        adjustedColors.forEach(color ->\n            System.out.println(Arrays.toString(color))\n        );\n    }\n}\n```"
  },
  {
    "task": "Apply map to filter out only alphabetic characters from a list of strings.",
    "code": "```java\nimport java.util.*;\nimport java.util.stream.Collectors;\n\npublic class FunctionalMapExample {\n    public static void main(String[] args) {\n        List<String> strings = Arrays.asList(\"abc123\", \"def!\", \"4ghi\", \"@jkl\");\n\n        List<String> filteredStrings = strings.stream()\n                .map(s -> s.chars()\n                        .filter(Character::isAlphabetic)\n                        .mapToObj(c -> String.valueOf((char) c))\n                        .collect(Collectors.joining()))\n                .collect(Collectors.toList());\n\n        System.out.println(filteredStrings);\n    }\n}\n```"
  },
  {
    "task": "Use map to compute the prime factorization of each number in a list.",
    "code": "```java\nimport java.util.*;\nimport java.util.stream.*;\n\npublic class PrimeFactorization {\n\n    public static List<List<Integer>> primeFactorizations(List<Integer> numbers) {\n        return numbers.stream()\n                .map(PrimeFactorization::primeFactors)\n                .collect(Collectors.toList());\n    }\n\n    private static List<Integer> primeFactors(int number) {\n        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= number / i; i++) {\n            while (number % i == 0) {\n                factors.add(i);\n                number /= i;\n            }\n        }\n        if (number > 1) {\n            factors.add(number);\n        }\n        return factors;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(12, 15, 18, 20);\n        List<List<Integer>> result = primeFactorizations(numbers);\n        System.out.println(result);\n    }\n}\n```"
  },
  {
    "task": "Calculate the exponential of each number in a list using a map function.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class FunctionalMapExample {\n    public static void main(String[] args) {\n        List<Double> numbers = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0);\n        List<Double> exponentials = numbers.stream()\n                                           .map(Math::exp)\n                                           .collect(Collectors.toList());\n        System.out.println(exponentials);\n    }\n}\n```"
  },
  {
    "task": "Use map to convert a list of text messages to morse code.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\npublic class TextToMorseCode {\n    private static final Map<Character, String> MORSE_CODE_MAP = Map.ofEntries(\n        Map.entry('A', \".-\"), Map.entry('B', \"-...\"), Map.entry('C', \"-.-.\"),\n        Map.entry('D', \"-..\"), Map.entry('E', \".\"), Map.entry('F', \"..-.\"),\n        Map.entry('G', \"--.\"), Map.entry('H', \"....\"), Map.entry('I', \"..\"),\n        Map.entry('J', \".---\"), Map.entry('K', \"-.-\"), Map.entry('L', \".-..\"),\n        Map.entry('M', \"--\"), Map.entry('N', \"-.\"), Map.entry('O', \"---\"),\n        Map.entry('P', \".--.\"), Map.entry('Q', \"--.-\"), Map.entry('R', \".-.\"),\n        Map.entry('S', \"...\"), Map.entry('T', \"-\"), Map.entry('U', \"..-\"),\n        Map.entry('V', \"...-\"), Map.entry('W', \".--\"), Map.entry('X', \"-..-\"),\n        Map.entry('Y', \"-.--\"), Map.entry('Z', \"--..\"), Map.entry('1', \".----\"),\n        Map.entry('2', \"..---\"), Map.entry('3', \"...--\"), Map.entry('4', \"....-\"),\n        Map.entry('5', \".....\"), Map.entry('6', \"-....\"), Map.entry('7', \"--...\"),\n        Map.entry('8', \"---..\"), Map.entry('9', \"----.\"), Map.entry('0', \"-----\"),\n        Map.entry(' ', \"/\")\n    );\n\n    public static void main(String[] args) {\n        List<String> messages = Arrays.asList(\"HELLO\", \"WORLD\");\n        List<String> morseMessages = messages.stream()\n            .map(TextToMorseCode::textToMorse)\n            .collect(Collectors.toList());\n        morseMessages.forEach(System.out::println);\n    }\n\n    private static String textToMorse(String text) {\n        return text.chars()\n            .mapToObj(c -> MORSE_CODE_MAP.getOrDefault(Character.toUpperCase((char) c), \"\"))\n            .collect(Collectors.joining(\" \"));\n    }\n}\n```"
  },
  {
    "task": "Transform a list of JSON objects to XML strings using a map function.",
    "code": "```java\nimport org.json.JSONObject;\nimport org.json.XML;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class JsonToXmlTransformer {\n    public static List<String> transformJsonListToXml(List<String> jsonList) {\n        return jsonList.stream()\n                .map(json -> new JSONObject(json))\n                .map(XML::toString)\n                .collect(Collectors.toList());\n    }\n}\n```"
  },
  {
    "task": "Use map to extract the extension from each filename in a list.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class ExtractFileExtensions {\n    public static void main(String[] args) {\n        List<String> filenames = Arrays.asList(\"file1.txt\", \"document.pdf\", \"image.jpeg\");\n        List<String> extensions = filenames.stream()\n            .map(filename -> {\n                int dotIndex = filename.lastIndexOf('.');\n                return dotIndex != -1 ? filename.substring(dotIndex + 1) : \"\";\n            })\n            .collect(Collectors.toList());\n        \n        System.out.println(extensions);\n    }\n}\n```"
  },
  {
    "task": "Convert a list of temperatures from Fahrenheit to Kelvin using map.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class TemperatureConverter {\n    public static void main(String[] args) {\n        List<Double> fahrenheitTemps = Arrays.asList(32.0, 68.0, 104.0, 140.0);\n        List<Double> kelvinTemps = fahrenheitTemps.stream()\n                .map(f -> (f - 32) * 5/9 + 273.15)\n                .collect(Collectors.toList());\n        \n        kelvinTemps.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Use map to calculate the perimeter of each rectangle in a list of dimensions.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class RectanglePerimeter {\n    public static void main(String[] args) {\n        List<int[]> dimensions = Arrays.asList(new int[]{5, 10}, new int[]{8, 12}, new int[]{15, 20});\n\n        List<Integer> perimeters = dimensions.stream()\n                .map(dim -> 2 * (dim[0] + dim[1]))\n                .collect(Collectors.toList());\n\n        perimeters.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Apply map to format a list of phone numbers into a standard format.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class PhoneNumberFormatter {\n    public static void main(String[] args) {\n        List<String> phoneNumbers = Arrays.asList(\"1234567890\", \"9876543210\", \"5556667777\");\n        List<String> formattedNumbers = phoneNumbers.stream()\n            .map(PhoneNumberFormatter::formatNumber)\n            .collect(Collectors.toList());\n        \n        formattedNumbers.forEach(System.out::println);\n    }\n\n    private static String formatNumber(String number) {\n        return String.format(\"(%s) %s-%s\", \n                             number.substring(0, 3), \n                             number.substring(3, 6), \n                             number.substring(6, 10));\n    }\n}\n```"
  },
  {
    "task": "Use map to generate a hashed version of passwords from a list.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n\npublic class PasswordHasher {\n\n    public static void main(String[] args) {\n        List<String> passwords = Arrays.asList(\"password123\", \"admin\", \"guest\");\n        List<String> hashedPasswords = passwords.stream()\n                .map(PasswordHasher::hashPassword)\n                .collect(Collectors.toList());\n\n        hashedPasswords.forEach(System.out::println);\n    }\n\n    private static String hashPassword(String password) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n            byte[] hashBytes = md.digest(password.getBytes());\n            StringBuilder sb = new StringBuilder();\n            for (byte b : hashBytes) {\n                sb.append(String.format(\"%02x\", b));\n            }\n            return sb.toString();\n        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}\n```"
  },
  {
    "task": "Convert a list of text paragraphs to a word count using map.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class WordCount {\n    public static void main(String[] args) {\n        List<String> paragraphs = Arrays.asList(\n            \"This is the first paragraph.\",\n            \"Here is another paragraph of text.\",\n            \"And here is a third one.\"\n        );\n\n        List<Integer> wordCounts = paragraphs.stream()\n            .map(paragraph -> paragraph.split(\"\\\\s+\").length)\n            .collect(Collectors.toList());\n\n        System.out.println(wordCounts);\n    }\n}\n```"
  },
  {
    "task": "Use map to remove punctuation from each string in a list of sentences.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class RemovePunctuation {\n    public static void main(String[] args) {\n        List<String> sentences = Arrays.asList(\n            \"Hello, world!\",\n            \"Java programming: is fun.\",\n            \"Let's remove; punctuation?\"\n        );\n\n        List<String> cleanedSentences = sentences.stream()\n            .map(sentence -> sentence.replaceAll(\"\\\\p{Punct}\", \"\"))\n            .collect(Collectors.toList());\n\n        cleanedSentences.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Transform a list of URLs to their base domain using a map function.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<String> urls = Arrays.asList(\n                \"https://www.example.com/page1\",\n                \"http://blog.example.org/article\",\n                \"https://shop.example.net/products\"\n        );\n\n        List<String> domains = urls.stream()\n                                   .map(Main::extractBaseDomain)\n                                   .collect(Collectors.toList());\n\n        domains.forEach(System.out::println);\n    }\n\n    public static String extractBaseDomain(String url) {\n        String domain = url.replaceFirst(\"^(https?://)?(www\\\\.)?\", \"\");\n        return domain.split(\"/\")[0];\n    }\n}\n```"
  },
  {
    "task": "Use map to translate a list of expressions to their symbolic algebraic forms.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\n\npublic class FunctionalMapExample {\n    public static void main(String[] args) {\n        List<String> expressions = Arrays.asList(\"a+b\", \"c*d\", \"e-f\");\n        Function<String, String> toSymbolicForm = expression -> expression.replace(\"+\", \" plus \")\n                                                                          .replace(\"-\", \" minus \")\n                                                                          .replace(\"*\", \" times \");\n        \n        List<String> symbolicForms = expressions.stream()\n                                                .map(toSymbolicForm)\n                                                .collect(Collectors.toList());\n\n        symbolicForms.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Apply map to convert a list of ASCII codes to corresponding characters.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class AsciiToChar {\n    public static void main(String[] args) {\n        List<Integer> asciiCodes = Arrays.asList(65, 66, 67, 68, 69);\n        List<Character> characters = asciiCodes.stream()\n                                               .map(code -> (char) code.intValue())\n                                               .collect(Collectors.toList());\n        System.out.println(characters);\n    }\n}\n```"
  },
  {
    "task": "Use map to transform a list of text strings to their lemmatized forms.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport opennlp.tools.lemmatizer.SimpleLemmatizer;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class LemmatizeExample {\n    public static void main(String[] args) {\n        List<String> words = Arrays.asList(\"running\", \"jumps\", \"easily\", \"fairly\");\n        \n        try (FileInputStream modelIn = new FileInputStream(\"en-lemmatizer.txt\")) {\n            SimpleLemmatizer lemmatizer = new SimpleLemmatizer(modelIn);\n            \n            List<String> lemmatizedWords = words.stream()\n                .map(word -> lemmatizer.lemmatize(word, \"O\"))\n                .collect(Collectors.toList());\n            \n            lemmatizedWords.forEach(System.out::println);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
  },
  {
    "task": "Convert a list of HTML strings to plain text using map.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class HtmlToPlainText {\n    public static void main(String[] args) {\n        List<String> htmlStrings = List.of(\"<p>Hello</p>\", \"<div>World</div>\", \"<span>!</span>\");\n        \n        List<String> plainTexts = htmlStrings.stream()\n            .map(html -> html.replaceAll(\"<[^>]*>\", \"\"))\n            .collect(Collectors.toList());\n        \n        plainTexts.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Use map to create a summary of each article in a list of texts.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class ArticleSummary {\n    public static void main(String[] args) {\n        List<String> articles = Arrays.asList(\n            \"Java is a high-level, class-based, object-oriented programming language.\",\n            \"Python is an interpreted high-level general-purpose programming language.\",\n            \"JavaScript, often abbreviated as JS, is a programming language that is one of the core technologies of the World Wide Web.\"\n        );\n\n        List<String> summaries = articles.stream()\n            .map(text -> text.split(\"\\\\.\")[0] + \".\")\n            .collect(Collectors.toList());\n\n        summaries.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Transform a list of paths to their absolute paths using a map function.",
    "code": "```java\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class AbsolutePathTransformer {\n    public static List<Path> transformToAbsolutePaths(List<String> paths) {\n        return paths.stream()\n                    .map(Paths::get)\n                    .map(Path::toAbsolutePath)\n                    .collect(Collectors.toList());\n    }\n}\n```"
  },
  {
    "task": "Use map to generate QR codes from a list of URLs.",
    "code": "```java\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport com.google.zxing.BarcodeFormat;\nimport com.google.zxing.WriterException;\nimport com.google.zxing.client.j2se.MatrixToImageWriter;\nimport com.google.zxing.qrcode.QRCodeWriter;\nimport java.io.IOException;\nimport java.nio.file.Paths;\n\npublic class QRCodeGenerator {\n    public static void main(String[] args) {\n        List<String> urls = List.of(\"https://example.com\", \"https://another-example.com\");\n        List<String> qrCodes = urls.stream()\n            .map(QRCodeGenerator::generateQRCode)\n            .collect(Collectors.toList());\n    }\n\n    private static String generateQRCode(String url) {\n        QRCodeWriter qrCodeWriter = new QRCodeWriter();\n        try {\n            var bitMatrix = qrCodeWriter.encode(url, BarcodeFormat.QR_CODE, 300, 300);\n            String filePath = \"qrcode_\" + url.hashCode() + \".png\";\n            MatrixToImageWriter.writeToPath(bitMatrix, \"PNG\", Paths.get(filePath));\n            return filePath;\n        } catch (WriterException | IOException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n}\n```"
  },
  {
    "task": "Convert a list of angles from degrees to radians using map.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class AngleConverter {\n    public static void main(String[] args) {\n        List<Double> degrees = Arrays.asList(0.0, 30.0, 45.0, 60.0, 90.0, 180.0, 270.0, 360.0);\n        List<Double> radians = degrees.stream()\n                                      .map(degree -> Math.toRadians(degree))\n                                      .collect(Collectors.toList());\n        System.out.println(radians);\n    }\n}\n```"
  },
  {
    "task": "Use map to anonymize a list of IP addresses by masking parts of them.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class AnonymizeIP {\n    public static void main(String[] args) {\n        List<String> ipAddresses = Arrays.asList(\n            \"192.168.1.1\",\n            \"10.0.0.2\",\n            \"172.16.0.3\"\n        );\n\n        List<String> anonymizedIPs = ipAddresses.stream()\n            .map(ip -> {\n                String[] segments = ip.split(\"\\\\.\");\n                return segments[0] + \".\" + segments[1] + \".xxx.xxx\";\n            })\n            .collect(Collectors.toList());\n\n        anonymizedIPs.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Transform a list of tuples by swapping their elements using a map function.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<int[]> tuples = Arrays.asList(new int[]{1, 2}, new int[]{3, 4}, new int[]{5, 6});\n        \n        List<int[]> swappedTuples = tuples.stream()\n                .map(tuple -> new int[]{tuple[1], tuple[0]})\n                .collect(Collectors.toList());\n        \n        swappedTuples.forEach(tuple -> System.out.println(Arrays.toString(tuple)));\n    }\n}\n```"
  },
  {
    "task": "Use map to compute the greatest common divisor of pairs in a list of number pairs.",
    "code": "```java\nimport java.util.*;\nimport java.util.stream.*;\n\npublic class GCDMap {\n    public static void main(String[] args) {\n        List<int[]> pairs = Arrays.asList(\n            new int[]{48, 18},\n            new int[]{56, 98},\n            new int[]{101, 103}\n        );\n        \n        List<Integer> gcdResults = pairs.stream()\n            .map(pair -> gcd(pair[0], pair[1]))\n            .collect(Collectors.toList());\n        \n        gcdResults.forEach(System.out::println);\n    }\n\n    private static int gcd(int a, int b) {\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n}\n```"
  },
  {
    "task": "Convert a list of file paths to their directory names using map.",
    "code": "```java\nimport java.nio.file.Paths;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<String> filePaths = Arrays.asList(\n                \"/home/user/docs/file1.txt\",\n                \"/var/log/system.log\",\n                \"/usr/local/bin/script.sh\"\n        );\n\n        List<String> directoryNames = filePaths.stream()\n                .map(path -> Paths.get(path).getParent().toString())\n                .collect(Collectors.toList());\n\n        directoryNames.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Use map to replace each vowel in a list of strings with a specific character.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class VowelReplacer {\n    public static void main(String[] args) {\n        List<String> strings = Arrays.asList(\"apple\", \"orange\", \"grape\", \"banana\");\n        char replacementChar = '*';\n\n        List<String> replacedStrings = strings.stream()\n                .map(s -> s.replaceAll(\"[aeiouAEIOU]\", String.valueOf(replacementChar)))\n                .collect(Collectors.toList());\n\n        replacedStrings.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Transform a list of integers to their hexadecimal representations using map.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class HexTransform {\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(10, 15, 255, 1000);\n        List<String> hexNumbers = numbers.stream()\n            .map(Integer::toHexString)\n            .collect(Collectors.toList());\n        \n        System.out.println(hexNumbers);\n    }\n}\n```"
  },
  {
    "task": "Use map to apply a transformation matrix to a list of 2D vectors.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class FunctionalMapExample {\n    public static void main(String[] args) {\n        List<double[]> vectors = Arrays.asList(\n            new double[]{1, 2},\n            new double[]{3, 4},\n            new double[]{5, 6}\n        );\n\n        double[][] transformationMatrix = {\n            {2, 0},\n            {0, 2}\n        };\n\n        List<double[]> transformedVectors = vectors.stream()\n            .map(vector -> applyTransformation(vector, transformationMatrix))\n            .collect(Collectors.toList());\n\n        transformedVectors.forEach(v -> System.out.println(Arrays.toString(v)));\n    }\n\n    private static double[] applyTransformation(double[] vector, double[][] matrix) {\n        double[] result = new double[2];\n        result[0] = vector[0] * matrix[0][0] + vector[1] * matrix[0][1];\n        result[1] = vector[0] * matrix[1][0] + vector[1] * matrix[1][1];\n        return result;\n    }\n}\n```"
  },
  {
    "task": "Convert a list of text strings to their phonetic alphabet equivalents using map.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\npublic class PhoneticConverter {\n    private static final Map<String, String> phoneticAlphabet = Map.ofEntries(\n        Map.entry(\"A\", \"Alfa\"),\n        Map.entry(\"B\", \"Bravo\"),\n        Map.entry(\"C\", \"Charlie\"),\n        Map.entry(\"D\", \"Delta\"),\n        Map.entry(\"E\", \"Echo\"),\n        Map.entry(\"F\", \"Foxtrot\"),\n        Map.entry(\"G\", \"Golf\"),\n        Map.entry(\"H\", \"Hotel\"),\n        Map.entry(\"I\", \"India\"),\n        Map.entry(\"J\", \"Juliett\"),\n        Map.entry(\"K\", \"Kilo\"),\n        Map.entry(\"L\", \"Lima\"),\n        Map.entry(\"M\", \"Mike\"),\n        Map.entry(\"N\", \"November\"),\n        Map.entry(\"O\", \"Oscar\"),\n        Map.entry(\"P\", \"Papa\"),\n        Map.entry(\"Q\", \"Quebec\"),\n        Map.entry(\"R\", \"Romeo\"),\n        Map.entry(\"S\", \"Sierra\"),\n        Map.entry(\"T\", \"Tango\"),\n        Map.entry(\"U\", \"Uniform\"),\n        Map.entry(\"V\", \"Victor\"),\n        Map.entry(\"W\", \"Whiskey\"),\n        Map.entry(\"X\", \"X-ray\"),\n        Map.entry(\"Y\", \"Yankee\"),\n        Map.entry(\"Z\", \"Zulu\")\n    );\n\n    public static List<String> convertToPhonetic(List<String> textList) {\n        return textList.stream()\n            .map(String::toUpperCase)\n            .map(str -> Arrays.stream(str.split(\"\"))\n                .map(ch -> phoneticAlphabet.getOrDefault(ch, ch))\n                .collect(Collectors.joining(\" \")))\n            .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        List<String> input = Arrays.asList(\"hello\", \"world\");\n        List<String> phoneticOutput = convertToPhonetic(input);\n        phoneticOutput.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Use map to determine if each word in a list is a palindrome, returning booleans.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class PalindromeChecker {\n    public static void main(String[] args) {\n        List<String> words = Arrays.asList(\"racecar\", \"hello\", \"level\", \"world\", \"radar\");\n        List<Boolean> palindromes = words.stream()\n                                         .map(word -> isPalindrome(word))\n                                         .collect(Collectors.toList());\n        System.out.println(palindromes);\n    }\n\n    private static boolean isPalindrome(String word) {\n        String reversed = new StringBuilder(word).reverse().toString();\n        return word.equals(reversed);\n    }\n}\n```"
  },
  {
    "task": "Transform a list of dictionaries by renaming a specified key using a map function.",
    "code": "```java\nimport java.util.*;\nimport java.util.stream.*;\n\npublic class FunctionalMapExample {\n    public static void main(String[] args) {\n        List<Map<String, Object>> listOfDicts = new ArrayList<>();\n        \n        // Sample dictionaries\n        Map<String, Object> dict1 = new HashMap<>();\n        dict1.put(\"oldKey\", \"value1\");\n        dict1.put(\"anotherKey\", \"value2\");\n        \n        Map<String, Object> dict2 = new HashMap<>();\n        dict2.put(\"oldKey\", \"value3\");\n        dict2.put(\"anotherKey\", \"value4\");\n        \n        listOfDicts.add(dict1);\n        listOfDicts.add(dict2);\n        \n        String oldKey = \"oldKey\";\n        String newKey = \"newKey\";\n        \n        List<Map<String, Object>> transformedList = listOfDicts.stream()\n            .map(dict -> {\n                Map<String, Object> newDict = new HashMap<>(dict);\n                if (newDict.containsKey(oldKey)) {\n                    Object value = newDict.remove(oldKey);\n                    newDict.put(newKey, value);\n                }\n                return newDict;\n            })\n            .collect(Collectors.toList());\n        \n        System.out.println(transformedList);\n    }\n}\n```"
  },
  {
    "task": "Use map to compute the logarithm of each number in a list.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class FunctionalMapExample {\n    public static void main(String[] args) {\n        List<Double> numbers = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0);\n        List<Double> logarithms = numbers.stream()\n                                         .map(Math::log)\n                                         .collect(Collectors.toList());\n        System.out.println(logarithms);\n    }\n}\n```"
  },
  {
    "task": "Convert a list of image file paths to grayscale versions using map.",
    "code": "```java\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport javax.imageio.ImageIO;\n\npublic class GrayscaleConverter {\n\n    public static void main(String[] args) {\n        List<String> imagePaths = List.of(\"image1.jpg\", \"image2.png\", \"image3.bmp\");\n\n        List<BufferedImage> grayscaleImages = imagePaths.stream()\n            .map(GrayscaleConverter::convertToGrayscale)\n            .collect(Collectors.toList());\n\n        // Example of how to save the processed images if needed\n        for (int i = 0; i < grayscaleImages.size(); i++) {\n            saveImage(grayscaleImages.get(i), \"grayscale_\" + i + \".png\");\n        }\n    }\n\n    private static BufferedImage convertToGrayscale(String imagePath) {\n        try {\n            BufferedImage original = ImageIO.read(new File(imagePath));\n            BufferedImage grayscale = new BufferedImage(original.getWidth(), original.getHeight(), BufferedImage.TYPE_BYTE_GRAY);\n            for (int y = 0; y < original.getHeight(); y++) {\n                for (int x = 0; x < original.getWidth(); x++) {\n                    int rgb = original.getRGB(x, y);\n                    grayscale.setRGB(x, y, rgb & 0xFF000000 | ((rgb >> 16) & 0xFF) * 0x10101);\n                }\n            }\n            return grayscale;\n        } catch (IOException e) {\n            throw new RuntimeException(\"Error reading image file: \" + imagePath, e);\n        }\n    }\n\n    private static void saveImage(BufferedImage image, String outputPath) {\n        try {\n            ImageIO.write(image, \"png\", new File(outputPath));\n        } catch (IOException e) {\n            throw new RuntimeException(\"Error writing image file: \" + outputPath, e);\n        }\n    }\n}\n```"
  },
  {
    "task": "Use map to flatten a list of lists of strings into a single list of strings.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class FlattenList {\n    public static void main(String[] args) {\n        List<List<String>> listOfLists = Arrays.asList(\n            Arrays.asList(\"a\", \"b\", \"c\"),\n            Arrays.asList(\"d\", \"e\"),\n            Arrays.asList(\"f\", \"g\", \"h\")\n        );\n\n        List<String> flattenedList = listOfLists.stream()\n            .flatMap(List::stream)\n            .collect(Collectors.toList());\n\n        System.out.println(flattenedList);\n    }\n}\n```"
  },
  {
    "task": "Transform a list of temperature readings to temperature anomalies using a map function.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class TemperatureAnomalies {\n    public static void main(String[] args) {\n        List<Double> temperatureReadings = Arrays.asList(15.5, 16.0, 14.8, 17.3, 15.0);\n        double averageTemperature = temperatureReadings.stream()\n                .mapToDouble(Double::doubleValue)\n                .average()\n                .orElse(0.0);\n        \n        List<Double> temperatureAnomalies = temperatureReadings.stream()\n                .map(temp -> temp - averageTemperature)\n                .collect(Collectors.toList());\n        \n        System.out.println(temperatureAnomalies);\n    }\n}\n```"
  }
]