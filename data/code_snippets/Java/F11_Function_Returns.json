[
  {
    "task": "Create a function that calculates the sum of two numbers and returns the result.",
    "code": "```java\npublic class SumCalculator {\n    public static int calculateSum(int a, int b) {\n        return a + b;\n    }\n\n    public static void main(String[] args) {\n        int result = calculateSum(5, 10);\n        System.out.println(\"The sum is: \" + result);\n    }\n}\n```"
  },
  {
    "task": "Design a function that takes a string and returns its length.",
    "code": "```java\npublic class StringLengthCalculator {\n    public static int getStringLength(String input) {\n        return input.length();\n    }\n\n    public static void main(String[] args) {\n        // Example usage\n        String example = \"Hello, World!\";\n        int length = getStringLength(example);\n        System.out.println(\"Length: \" + length);\n    }\n}\n```"
  },
  {
    "task": "Write a function that checks if a number is prime and returns a boolean value.",
    "code": "```java\npublic class PrimeChecker {\n    public static boolean isPrime(int number) {\n        if (number <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(number); i++) {\n            if (number % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        // Example usage\n        System.out.println(isPrime(5));  // true\n        System.out.println(isPrime(4));  // false\n    }\n}\n```"
  },
  {
    "task": "Implement a function that returns the highest value in a list of integers.",
    "code": "```java\nimport java.util.List;\n\npublic class HighestValueFinder {\n    public static int findHighestValue(List<Integer> numbers) {\n        if (numbers == null || numbers.isEmpty()) {\n            throw new IllegalArgumentException(\"List cannot be null or empty\");\n        }\n        \n        int highest = numbers.get(0);\n        for (int number : numbers) {\n            if (number > highest) {\n                highest = number;\n            }\n        }\n        return highest;\n    }\n}\n```"
  },
  {
    "task": "Create a function that accepts a list of words and returns the longest word.",
    "code": "```java\nimport java.util.List;\n\npublic class LongestWordFinder {\n    public static String findLongestWord(List<String> words) {\n        if (words == null || words.isEmpty()) {\n            return null;\n        }\n        String longestWord = \"\";\n        for (String word : words) {\n            if (word.length() > longestWord.length()) {\n                longestWord = word;\n            }\n        }\n        return longestWord;\n    }\n}\n```"
  },
  {
    "task": "Write a function that takes a temperature in Celsius and returns the equivalent in Fahrenheit.",
    "code": "```java\npublic class TemperatureConverter {\n    public static double celsiusToFahrenheit(double celsius) {\n        return celsius * 9 / 5 + 32;\n    }\n\n    public static void main(String[] args) {\n        double celsius = 25.0;\n        double fahrenheit = celsiusToFahrenheit(celsius);\n        System.out.println(\"Temperature in Fahrenheit: \" + fahrenheit);\n    }\n}\n```"
  },
  {
    "task": "Develop a function that returns the factorial of a given number.",
    "code": "```java\npublic class FactorialCalculator {\n    public static long factorial(int n) {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"Number must be non-negative.\");\n        }\n        long result = 1;\n        for (int i = 2; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        int number = 5; // Example usage\n        System.out.println(\"Factorial of \" + number + \" is \" + factorial(number));\n    }\n}\n```"
  },
  {
    "task": "Implement a function that receives a date and returns the day of the week.",
    "code": "```java\nimport java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\nimport java.time.DayOfWeek;\n\npublic class DateUtil {\n    public static String getDayOfWeek(String date) {\n        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n        LocalDate localDate = LocalDate.parse(date, formatter);\n        DayOfWeek dayOfWeek = localDate.getDayOfWeek();\n        return dayOfWeek.name();\n    }\n\n    public static void main(String[] args) {\n        String date = \"2023-10-05\";\n        String dayOfWeek = getDayOfWeek(date);\n        System.out.println(\"The day of the week is: \" + dayOfWeek);\n    }\n}\n```"
  },
  {
    "task": "Write a function that calculates the area of a circle given its radius and returns the value.",
    "code": "```java\npublic class CircleAreaCalculator {\n    public static double calculateArea(double radius) {\n        return Math.PI * radius * radius;\n    }\n}\n```"
  },
  {
    "task": "Create a function that converts a string to uppercase and returns the modified string.",
    "code": "```java\npublic class StringConverter {\n    public static String toUpperCase(String input) {\n        return input.toUpperCase();\n    }\n\n    public static void main(String[] args) {\n        String result = toUpperCase(\"example\");\n        System.out.println(result);\n    }\n}\n```"
  },
  {
    "task": "Design a function that returns the reverse of a given list.",
    "code": "```java\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Collections;\n\npublic class ListReverser {\n    public static <T> List<T> reverseList(List<T> originalList) {\n        List<T> reversedList = new ArrayList<>(originalList);\n        Collections.reverse(reversedList);\n        return reversedList;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> list = List.of(1, 2, 3, 4, 5);\n        List<Integer> reversed = reverseList(list);\n        System.out.println(reversed);\n    }\n}\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns a dictionary with character frequencies.",
    "code": "```java\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class CharacterFrequency {\n\n    public static Map<Character, Integer> getCharacterFrequencies(String input) {\n        Map<Character, Integer> frequencyMap = new HashMap<>();\n        for (char c : input.toCharArray()) {\n            frequencyMap.put(c, frequencyMap.getOrDefault(c, 0) + 1);\n        }\n        return frequencyMap;\n    }\n\n    public static void main(String[] args) {\n        String testString = \"example\";\n        Map<Character, Integer> result = getCharacterFrequencies(testString);\n        System.out.println(result);\n    }\n}\n```"
  },
  {
    "task": "Write a function that returns the first non-repeating character in a string.",
    "code": "```java\npublic class FirstNonRepeatingCharacter {\n    public static Character firstNonRepeatingChar(String str) {\n        for (int i = 0; i < str.length(); i++) {\n            char c = str.charAt(i);\n            if (str.indexOf(c) == str.lastIndexOf(c)) {\n                return c;\n            }\n        }\n        return null;\n    }\n\n    public static void main(String[] args) {\n        String input = \"swiss\";\n        Character result = firstNonRepeatingChar(input);\n        System.out.println(\"First non-repeating character: \" + result);\n    }\n}\n```"
  },
  {
    "task": "Create a function that takes a list of numbers and returns a new list with only even numbers.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class EvenNumbers {\n    public static List<Integer> getEvenNumbers(List<Integer> numbers) {\n        List<Integer> evenNumbers = new ArrayList<>();\n        for (Integer number : numbers) {\n            if (number % 2 == 0) {\n                evenNumbers.add(number);\n            }\n        }\n        return evenNumbers;\n    }\n}\n```"
  },
  {
    "task": "Develop a function that receives a sentence and returns the word count.",
    "code": "```java\npublic class WordCounter {\n    public static int getWordCount(String sentence) {\n        if (sentence == null || sentence.isEmpty()) {\n            return 0;\n        }\n        String[] words = sentence.trim().split(\"\\\\s+\");\n        return words.length;\n    }\n\n    public static void main(String[] args) {\n        String sentence = \"This is an example sentence.\";\n        int count = getWordCount(sentence);\n        System.out.println(\"Word count: \" + count);\n    }\n}\n```"
  },
  {
    "task": "Implement a function that returns the smallest element in an array.",
    "code": "```java\npublic class SmallestElementFinder {\n    public static int findSmallestElement(int[] arr) {\n        if (arr == null || arr.length == 0) {\n            throw new IllegalArgumentException(\"Array must not be null or empty\");\n        }\n        int smallest = arr[0];\n        for (int i = 1; i < arr.length; i++) {\n            if (arr[i] < smallest) {\n                smallest = arr[i];\n            }\n        }\n        return smallest;\n    }\n\n    public static void main(String[] args) {\n        int[] array = {5, 3, 7, 1, 4};\n        int smallest = findSmallestElement(array);\n        System.out.println(\"The smallest element is: \" + smallest);\n    }\n}\n```"
  },
  {
    "task": "Write a function that takes two strings and returns true if they are anagrams.",
    "code": "```java\nimport java.util.Arrays;\n\npublic class AnagramChecker {\n    public static boolean areAnagrams(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return false;\n        }\n        char[] charArray1 = str1.toCharArray();\n        char[] charArray2 = str2.toCharArray();\n        Arrays.sort(charArray1);\n        Arrays.sort(charArray2);\n        return Arrays.equals(charArray1, charArray2);\n    }\n}\n```"
  },
  {
    "task": "Create a function that accepts an integer and returns a list of its divisors.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class DivisorsFinder {\n    public static List<Integer> getDivisors(int number) {\n        List<Integer> divisors = new ArrayList<>();\n        for (int i = 1; i <= number; i++) {\n            if (number % i == 0) {\n                divisors.add(i);\n            }\n        }\n        return divisors;\n    }\n}\n```"
  },
  {
    "task": "Design a function that returns the square root of a given number.",
    "code": "```java\npublic class SquareRootCalculator {\n    public static double getSquareRoot(double number) {\n        return Math.sqrt(number);\n    }\n\n    public static void main(String[] args) {\n        double number = 25.0;\n        double squareRoot = getSquareRoot(number);\n        System.out.println(\"Square root of \" + number + \" is: \" + squareRoot);\n    }\n}\n```"
  },
  {
    "task": "Implement a function that accepts a list and returns it sorted in ascending order.",
    "code": "```java\nimport java.util.List;\nimport java.util.Collections;\n\npublic class SortList {\n    public static List<Integer> sortListAscending(List<Integer> list) {\n        Collections.sort(list);\n        return list;\n    }\n}\n```"
  },
  {
    "task": "Write a function that checks whether a given year is a leap year and returns a boolean.",
    "code": "```java\npublic class LeapYearChecker {\n    public static boolean isLeapYear(int year) {\n        if (year % 4 == 0) {\n            if (year % 100 == 0) {\n                if (year % 400 == 0) {\n                    return true;\n                } else {\n                    return false;\n                }\n            } else {\n                return true;\n            }\n        } else {\n            return false;\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a function that receives a list of numbers and returns their average.",
    "code": "```java\nimport java.util.List;\n\npublic class AverageCalculator {\n    public static double calculateAverage(List<Double> numbers) {\n        if (numbers == null || numbers.isEmpty()) {\n            return 0;\n        }\n        double sum = 0;\n        for (double number : numbers) {\n            sum += number;\n        }\n        return sum / numbers.size();\n    }\n}\n```"
  },
  {
    "task": "Develop a function that returns the nth Fibonacci number.",
    "code": "```java\npublic class Fibonacci {\n\n    public static int fibonacci(int n) {\n        if (n <= 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else {\n            return fibonacci(n - 1) + fibonacci(n - 2);\n        }\n    }\n\n    public static void main(String[] args) {\n        int n = 10; // Example input\n        System.out.println(fibonacci(n));\n    }\n}\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns it with vowels removed.",
    "code": "```java\npublic class VowelRemover {\n    public static String removeVowels(String input) {\n        return input.replaceAll(\"[AEIOUaeiou]\", \"\");\n    }\n\n    public static void main(String[] args) {\n        String result = removeVowels(\"Hello World\");\n        System.out.println(result); // Hll Wrld\n    }\n}\n```"
  },
  {
    "task": "Write a function that takes two dates and returns the number of days between them.",
    "code": "```java\nimport java.time.LocalDate;\nimport java.time.temporal.ChronoUnit;\n\npublic class DateDifferenceCalculator {\n    public static long daysBetween(LocalDate startDate, LocalDate endDate) {\n        return ChronoUnit.DAYS.between(startDate, endDate);\n    }\n\n    public static void main(String[] args) {\n        LocalDate date1 = LocalDate.of(2023, 10, 1);\n        LocalDate date2 = LocalDate.of(2023, 10, 15);\n        long daysBetween = daysBetween(date1, date2);\n        System.out.println(\"Days between: \" + daysBetween);\n    }\n}\n```"
  },
  {
    "task": "Create a function that returns the last element of a list.",
    "code": "```java\nimport java.util.List;\n\npublic class LastElementFinder {\n    public static <T> T getLastElement(List<T> list) {\n        if (list == null || list.isEmpty()) {\n            return null;\n        }\n        return list.get(list.size() - 1);\n    }\n}\n```"
  },
  {
    "task": "Design a function that calculates the GCD of two numbers and returns it.",
    "code": "```java\npublic class GCD {\n    public static int calculateGCD(int a, int b) {\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n    \n    public static void main(String[] args) {\n        int num1 = 48;\n        int num2 = 18;\n        int gcd = calculateGCD(num1, num2);\n        System.out.println(\"GCD is: \" + gcd);\n    }\n}\n```"
  },
  {
    "task": "Implement a function that takes a list and returns a tuple with the min and max values.",
    "code": "```java\nimport java.util.List;\n\npublic class MinMaxFinder {\n    public static Tuple<Integer, Integer> findMinMax(List<Integer> numbers) {\n        if (numbers == null || numbers.isEmpty()) {\n            return null;\n        }\n        \n        int min = Integer.MAX_VALUE;\n        int max = Integer.MIN_VALUE;\n        \n        for (int number : numbers) {\n            if (number < min) {\n                min = number;\n            }\n            if (number > max) {\n                max = number;\n            }\n        }\n        \n        return new Tuple<>(min, max);\n    }\n    \n    public static class Tuple<X, Y> {\n        public final X x;\n        public final Y y;\n        \n        public Tuple(X x, Y y) {\n            this.x = x;\n            this.y = y;\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a function that converts a binary string to its decimal representation and returns it.",
    "code": "```java\npublic class BinaryToDecimalConverter {\n    public static int binaryToDecimal(String binaryString) {\n        return Integer.parseInt(binaryString, 2);\n    }\n\n    public static void main(String[] args) {\n        String binaryString = \"1010\";\n        int decimal = binaryToDecimal(binaryString);\n        System.out.println(\"Decimal representation: \" + decimal);\n    }\n}\n```"
  },
  {
    "task": "Create a function that accepts a dictionary and returns a list of its keys.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Example usage\n        Map<String, Integer> map = Map.of(\"key1\", 1, \"key2\", 2, \"key3\", 3);\n        List<String> keys = getKeys(map);\n        System.out.println(keys);\n    }\n\n    public static List<String> getKeys(Map<String, ?> map) {\n        return new ArrayList<>(map.keySet());\n    }\n}\n```"
  },
  {
    "task": "Develop a function that returns the concatenation of two strings.",
    "code": "```java\npublic class StringConcatenator {\n    public static String concatenateStrings(String str1, String str2) {\n        return str1 + str2;\n    }\n\n    public static void main(String[] args) {\n        String result = concatenateStrings(\"Hello, \", \"World!\");\n        System.out.println(result); // Output: Hello, World!\n    }\n}\n```"
  },
  {
    "task": "Implement a function that receives a list and returns a new list with duplicates removed.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\n\npublic class RemoveDuplicates {\n    public static <T> List<T> removeDuplicates(List<T> inputList) {\n        return new ArrayList<>(new HashSet<>(inputList));\n    }\n}\n```"
  },
  {
    "task": "Write a function that returns the intersection of two lists.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\npublic class ListIntersection {\n    public static List<Integer> intersection(List<Integer> list1, List<Integer> list2) {\n        Set<Integer> set1 = new HashSet<>(list1);\n        Set<Integer> set2 = new HashSet<>(list2);\n        set1.retainAll(set2);\n        return new ArrayList<>(set1);\n    }\n}\n```"
  },
  {
    "task": "Create a function that takes an integer and returns whether it is even or odd as a string.",
    "code": "```java\npublic class EvenOrOddChecker {\n    public static String checkEvenOrOdd(int number) {\n        return number % 2 == 0 ? \"even\" : \"odd\";\n    }\n}\n```"
  },
  {
    "task": "Design a function that returns the number of vowels in a given string.",
    "code": "```java\npublic class VowelCounter {\n\n    public static int countVowels(String input) {\n        int count = 0;\n        String vowels = \"aeiouAEIOU\";\n        for (int i = 0; i < input.length(); i++) {\n            if (vowels.indexOf(input.charAt(i)) != -1) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        String testString = \"Hello World\";\n        int numberOfVowels = countVowels(testString);\n        System.out.println(\"Number of vowels: \" + numberOfVowels);\n    }\n}\n```"
  },
  {
    "task": "Implement a function that counts the occurrences of a substring within a string and returns it.",
    "code": "```java\npublic class SubstringCounter {\n    public static int countOccurrences(String str, String subStr) {\n        int count = 0;\n        int index = str.indexOf(subStr);\n        while (index != -1) {\n            count++;\n            index = str.indexOf(subStr, index + 1);\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        String str = \"hellohellohello\";\n        String subStr = \"hello\";\n        int occurrences = countOccurrences(str, subStr);\n        System.out.println(\"Occurrences: \" + occurrences);\n    }\n}\n```"
  },
  {
    "task": "Write a function that accepts a list of numbers and returns them sorted in descending order.",
    "code": "```java\nimport java.util.List;\nimport java.util.Collections;\n\npublic class NumberSorter {\n    public static List<Integer> sortDescending(List<Integer> numbers) {\n        Collections.sort(numbers, Collections.reverseOrder());\n        return numbers;\n    }\n}\n```"
  },
  {
    "task": "Create a function that returns the median of a list of numbers.",
    "code": "```java\nimport java.util.Arrays;\n\npublic class MedianCalculator {\n    public static double findMedian(int[] numbers) {\n        Arrays.sort(numbers);\n        int length = numbers.length;\n        if (length % 2 == 0) {\n            return (numbers[length / 2 - 1] + numbers[length / 2]) / 2.0;\n        } else {\n            return numbers[length / 2];\n        }\n    }\n    \n    public static void main(String[] args) {\n        int[] numbers = {3, 5, 1, 4, 2};\n        System.out.println(findMedian(numbers));\n    }\n}\n```"
  },
  {
    "task": "Develop a function that receives a sentence and returns it with words in reverse order.",
    "code": "```java\npublic class ReverseWords {\n\n    public static String reverseWordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        StringBuilder reversedSentence = new StringBuilder();\n        \n        for (int i = words.length - 1; i >= 0; i--) {\n            reversedSentence.append(words[i]);\n            if (i != 0) {\n                reversedSentence.append(\" \");\n            }\n        }\n        \n        return reversedSentence.toString();\n    }\n\n    public static void main(String[] args) {\n        String sentence = \"Hello world this is Java\";\n        String result = reverseWordsInSentence(sentence);\n        System.out.println(result);\n    }\n}\n```"
  },
  {
    "task": "Implement a function that returns the sum of all elements in a matrix.",
    "code": "```java\npublic class MatrixSum {\n    public static int sumMatrix(int[][] matrix) {\n        int sum = 0;\n        for (int[] row : matrix) {\n            for (int element : row) {\n                sum += element;\n            }\n        }\n        return sum;\n    }\n}\n```"
  },
  {
    "task": "Write a function that accepts a string and returns true if it is a palindrome.",
    "code": "```java\npublic class PalindromeChecker {\n    public static boolean isPalindrome(String text) {\n        String cleaned = text.replaceAll(\"\\\\s+\", \"\").toLowerCase();\n        int left = 0;\n        int right = cleaned.length() - 1;\n        while (left < right) {\n            if (cleaned.charAt(left) != cleaned.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}\n```"
  },
  {
    "task": "Create a function that takes a number and returns its binary representation as a string.",
    "code": "```java\npublic class NumberToBinary {\n    public static String toBinaryString(int number) {\n        return Integer.toBinaryString(number);\n    }\n\n    public static void main(String[] args) {\n        int number = 10;\n        String binaryRepresentation = toBinaryString(number);\n        System.out.println(\"Binary representation of \" + number + \" is: \" + binaryRepresentation);\n    }\n}\n```"
  },
  {
    "task": "Design a function that returns the number of words in a paragraph.",
    "code": "```java\npublic class WordCounter {\n    \n    public static int countWords(String paragraph) {\n        if (paragraph == null || paragraph.isEmpty()) {\n            return 0;\n        }\n        String[] words = paragraph.trim().split(\"\\\\s+\");\n        return words.length;\n    }\n\n    public static void main(String[] args) {\n        String paragraph = \"This is an example paragraph to count words.\";\n        int wordCount = countWords(paragraph);\n        System.out.println(\"Number of words: \" + wordCount);\n    }\n}\n```"
  },
  {
    "task": "Implement a function that accepts a list and returns the index of its maximum element.",
    "code": "```java\nimport java.util.List;\n\npublic class MaxIndexFinder {\n    public static int findMaxIndex(List<Integer> list) {\n        if (list == null || list.isEmpty()) {\n            throw new IllegalArgumentException(\"List must not be null or empty\");\n        }\n        int maxIndex = 0;\n        for (int i = 1; i < list.size(); i++) {\n            if (list.get(i) > list.get(maxIndex)) {\n                maxIndex = i;\n            }\n        }\n        return maxIndex;\n    }\n}\n```"
  },
  {
    "task": "Write a function that takes a list of grades and returns the highest grade.",
    "code": "```java\nimport java.util.List;\n\npublic class GradeCalculator {\n    public static int getHighestGrade(List<Integer> grades) {\n        if (grades == null || grades.isEmpty()) {\n            throw new IllegalArgumentException(\"The grade list cannot be null or empty.\");\n        }\n        int highest = grades.get(0);\n        for (int grade : grades) {\n            if (grade > highest) {\n                highest = grade;\n            }\n        }\n        return highest;\n    }\n}\n```"
  },
  {
    "task": "Create a function that returns the product of all positive integers up to a given number.",
    "code": "```java\npublic class ProductCalculator {\n    public static long productUpTo(int n) {\n        if (n < 1) return 0;\n        long product = 1;\n        for (int i = 1; i <= n; i++) {\n            product *= i;\n        }\n        return product;\n    }\n\n    public static void main(String[] args) {\n        int number = 5; // Example input\n        System.out.println(productUpTo(number)); // Output: 120\n    }\n}\n```"
  },
  {
    "task": "Develop a function that receives a string and returns a new string with spaces replaced by hyphens.",
    "code": "```java\npublic class StringModifier {\n    public static String replaceSpacesWithHyphens(String input) {\n        return input.replace(\" \", \"-\");\n    }\n    \n    public static void main(String[] args) {\n        String result = replaceSpacesWithHyphens(\"This is a test string\");\n        System.out.println(result);\n    }\n}\n```"
  },
  {
    "task": "Implement a function that takes a list of integers and returns their sum.",
    "code": "```java\nimport java.util.List;\n\npublic class SumCalculator {\n    public static int sum(List<Integer> numbers) {\n        int total = 0;\n        for (int number : numbers) {\n            total += number;\n        }\n        return total;\n    }\n}\n```"
  },
  {
    "task": "Write a function that checks if a string is a valid email address and returns a boolean.",
    "code": "```java\nimport java.util.regex.Pattern;\n\npublic class EmailValidator {\n\n    public static boolean isValidEmail(String email) {\n        String regex = \"^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$\";\n        Pattern pattern = Pattern.compile(regex);\n        return pattern.matcher(email).matches();\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(isValidEmail(\"example@test.com\")); // true\n        System.out.println(isValidEmail(\"invalid-email.com\")); // false\n    }\n}\n```"
  },
  {
    "task": "Create a function that returns the decimal equivalent of a hexadecimal string.",
    "code": "```java\npublic class HexToDecimalConverter {\n    public static int hexToDecimal(String hex) {\n        return Integer.parseInt(hex, 16);\n    }\n\n    public static void main(String[] args) {\n        String hexString = \"1A3F\";\n        int decimalValue = hexToDecimal(hexString);\n        System.out.println(\"Decimal equivalent: \" + decimalValue);\n    }\n}\n```"
  },
  {
    "task": "Design a function that calculates and returns the body mass index based on height and weight.",
    "code": "```java\npublic class BMICalculator {\n    public static void main(String[] args) {\n        double weight = 70; // in kilograms\n        double height = 1.75; // in meters\n        double bmi = calculateBMI(weight, height);\n        System.out.println(\"BMI: \" + bmi);\n    }\n\n    public static double calculateBMI(double weight, double height) {\n        return weight / (height * height);\n    }\n}\n```"
  },
  {
    "task": "Implement a function that returns the initials of a person's name given a full name.",
    "code": "```java\npublic class InitialsExtractor {\n    public static String getInitials(String fullName) {\n        String[] nameParts = fullName.split(\"\\\\s+\");\n        StringBuilder initials = new StringBuilder();\n        for (String part : nameParts) {\n            if (!part.isEmpty()) {\n                initials.append(part.charAt(0));\n            }\n        }\n        return initials.toString().toUpperCase();\n    }\n\n    public static void main(String[] args) {\n        String fullName = \"John Doe\";\n        String initials = getInitials(fullName);\n        System.out.println(\"Initials: \" + initials);\n    }\n}\n```"
  },
  {
    "task": "Write a function that accepts a list of names and returns them sorted alphabetically.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class NameSorter {\n    public static List<String> sortNames(List<String> names) {\n        List<String> sortedNames = new ArrayList<>(names);\n        Collections.sort(sortedNames);\n        return sortedNames;\n    }\n}\n```"
  },
  {
    "task": "Create a function that takes a list of integers and returns a list of their squares.",
    "code": "```java\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class SquareCalculator {\n    public static List<Integer> squareList(List<Integer> numbers) {\n        List<Integer> squares = new ArrayList<>();\n        for (int number : numbers) {\n            squares.add(number * number);\n        }\n        return squares;\n    }\n}\n```"
  },
  {
    "task": "Develop a function that returns the common elements between two sets.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class CommonElements {\n    public static Set<Integer> findCommonElements(Set<Integer> set1, Set<Integer> set2) {\n        Set<Integer> commonElements = new HashSet<>(set1);\n        commonElements.retainAll(set2);\n        return commonElements;\n    }\n\n    public static void main(String[] args) {\n        Set<Integer> set1 = Set.of(1, 2, 3, 4, 5);\n        Set<Integer> set2 = Set.of(3, 4, 5, 6, 7);\n        Set<Integer> common = findCommonElements(set1, set2);\n        System.out.println(common);\n    }\n}\n```"
  },
  {
    "task": "Implement a function that receives a list of strings and returns the shortest string.",
    "code": "```java\nimport java.util.List;\n\npublic class ShortestStringFinder {\n    public static String findShortestString(List<String> strings) {\n        if (strings == null || strings.isEmpty()) {\n            return null;\n        }\n        String shortest = strings.get(0);\n        for (String str : strings) {\n            if (str.length() < shortest.length()) {\n                shortest = str;\n            }\n        }\n        return shortest;\n    }\n}\n```"
  },
  {
    "task": "Write a function that returns the sum of digits of a given integer.",
    "code": "```java\npublic class SumOfDigits {\n\n    public static int sumOfDigits(int number) {\n        int sum = 0;\n        number = Math.abs(number);\n        while (number != 0) {\n            sum += number % 10;\n            number /= 10;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sumOfDigits(123)); // Example usage\n    }\n}\n```"
  },
  {
    "task": "Create a function that takes a matrix and returns its transpose.",
    "code": "```java\npublic class MatrixTranspose {\n    public static int[][] transpose(int[][] matrix) {\n        int rows = matrix.length;\n        int cols = matrix[0].length;\n        int[][] transposedMatrix = new int[cols][rows];\n        \n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                transposedMatrix[j][i] = matrix[i][j];\n            }\n        }\n        \n        return transposedMatrix;\n    }\n}\n```"
  },
  {
    "task": "Design a function that returns the percentage of uppercase letters in a string.",
    "code": "```java\npublic class StringAnalyzer {\n\n    public static double percentageOfUppercase(String input) {\n        if (input == null || input.isEmpty()) {\n            return 0.0;\n        }\n        \n        int uppercaseCount = 0;\n        \n        for (char c : input.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                uppercaseCount++;\n            }\n        }\n        \n        return (uppercaseCount * 100.0) / input.length();\n    }\n\n    public static void main(String[] args) {\n        String testString = \"Hello World!\";\n        double percentage = percentageOfUppercase(testString);\n        System.out.println(\"Percentage of uppercase letters: \" + percentage);\n    }\n}\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns it with each word capitalized.",
    "code": "```java\npublic class CapitalizeWords {\n    public static String capitalizeEachWord(String input) {\n        if (input == null || input.isEmpty()) {\n            return input;\n        }\n        String[] words = input.split(\"\\\\s+\");\n        StringBuilder capitalized = new StringBuilder();\n        for (String word : words) {\n            if (!word.isEmpty()) {\n                capitalized.append(Character.toUpperCase(word.charAt(0)))\n                        .append(word.substring(1).toLowerCase())\n                        .append(\" \");\n            }\n        }\n        return capitalized.toString().trim();\n    }\n\n    public static void main(String[] args) {\n        String input = \"hello world! this is a test.\";\n        String result = capitalizeEachWord(input);\n        System.out.println(result);\n    }\n}\n```"
  },
  {
    "task": "Write a function that takes a list and returns the difference between the max and min values.",
    "code": "```java\nimport java.util.List;\nimport java.util.Collections;\n\npublic class ListDifference {\n    public static int findDifference(List<Integer> numbers) {\n        if (numbers == null || numbers.isEmpty()) {\n            throw new IllegalArgumentException(\"List must not be null or empty\");\n        }\n        int max = Collections.max(numbers);\n        int min = Collections.min(numbers);\n        return max - min;\n    }\n}\n```"
  },
  {
    "task": "Create a function that returns a list containing the first n prime numbers.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class PrimeNumbers {\n    public static List<Integer> getFirstNPrimes(int n) {\n        List<Integer> primes = new ArrayList<>();\n        int num = 2;\n        while (primes.size() < n) {\n            if (isPrime(num)) {\n                primes.add(num);\n            }\n            num++;\n        }\n        return primes;\n    }\n\n    private static boolean isPrime(int num) {\n        if (num < 2) return false;\n        for (int i = 2; i <= Math.sqrt(num); i++) {\n            if (num % i == 0) return false;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> primes = getFirstNPrimes(10);\n        System.out.println(primes);\n    }\n}\n```"
  },
  {
    "task": "Develop a function that receives a dictionary and returns a new dictionary with keys and values swapped.",
    "code": "```java\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class DictionarySwapper {\n    public static <K, V> Map<V, K> swapKeysAndValues(Map<K, V> original) {\n        Map<V, K> swapped = new HashMap<>();\n        for (Map.Entry<K, V> entry : original.entrySet()) {\n            swapped.put(entry.getValue(), entry.getKey());\n        }\n        return swapped;\n    }\n\n    public static void main(String[] args) {\n        Map<String, Integer> original = new HashMap<>();\n        original.put(\"one\", 1);\n        original.put(\"two\", 2);\n        original.put(\"three\", 3);\n        \n        Map<Integer, String> swapped = swapKeysAndValues(original);\n        \n        System.out.println(swapped);\n    }\n}\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns the frequency of each word.",
    "code": "```java\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class WordFrequency {\n    public static Map<String, Integer> getWordFrequency(String input) {\n        Map<String, Integer> frequencyMap = new HashMap<>();\n        if (input == null || input.isEmpty()) {\n            return frequencyMap;\n        }\n        \n        String[] words = input.split(\"\\\\s+\");\n        for (String word : words) {\n            word = word.toLowerCase();\n            frequencyMap.put(word, frequencyMap.getOrDefault(word, 0) + 1);\n        }\n        \n        return frequencyMap;\n    }\n\n    public static void main(String[] args) {\n        String text = \"example example text with text and more text\";\n        Map<String, Integer> frequency = getWordFrequency(text);\n        System.out.println(frequency);\n    }\n}\n```"
  },
  {
    "task": "Write a function that takes two numbers and returns their greatest common divisor.",
    "code": "```java\npublic class GCD {\n    public static int greatestCommonDivisor(int a, int b) {\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n\n    public static void main(String[] args) {\n        int num1 = 48;\n        int num2 = 18;\n        int gcd = greatestCommonDivisor(num1, num2);\n        System.out.println(\"The GCD of \" + num1 + \" and \" + num2 + \" is \" + gcd);\n    }\n}\n```"
  },
  {
    "task": "Create a function that returns the number of consonants in a given string.",
    "code": "```java\npublic class ConsonantCounter {\n    public static int countConsonants(String input) {\n        int count = 0;\n        for (char c : input.toLowerCase().toCharArray()) {\n            if (c >= 'a' && c <= 'z' && \"aeiou\".indexOf(c) == -1) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        String str = \"Example String\";\n        System.out.println(\"Number of consonants: \" + countConsonants(str));\n    }\n}\n```"
  },
  {
    "task": "Design a function that checks if a number is a perfect square and returns a boolean.",
    "code": "```java\npublic class PerfectSquareChecker {\n\n    public static boolean isPerfectSquare(int num) {\n        if (num < 0) {\n            return false;\n        }\n        int sqrt = (int) Math.sqrt(num);\n        return sqrt * sqrt == num;\n    }\n\n    public static void main(String[] args) {\n        // Test the function\n        System.out.println(isPerfectSquare(16)); // true\n        System.out.println(isPerfectSquare(14)); // false\n    }\n}\n```"
  },
  {
    "task": "Implement a function that takes a list of numbers and returns the mode.",
    "code": "```java\nimport java.util.*;\n\npublic class ModeCalculator {\n    public static Integer findMode(List<Integer> numbers) {\n        if (numbers == null || numbers.isEmpty()) {\n            return null;\n        }\n        \n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        for (int num : numbers) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n        \n        int mode = numbers.get(0);\n        int maxFrequency = 0;\n        \n        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n            if (entry.getValue() > maxFrequency) {\n                maxFrequency = entry.getValue();\n                mode = entry.getKey();\n            }\n        }\n        \n        return mode;\n    }\n    \n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 3, 2, 3, 4, 3, 2);\n        System.out.println(\"Mode: \" + findMode(numbers));\n    }\n}\n```"
  },
  {
    "task": "Write a function that accepts a string and returns a new string with characters in reverse order.",
    "code": "```java\npublic class StringReverser {\n    public static String reverseString(String input) {\n        StringBuilder reversed = new StringBuilder(input);\n        return reversed.reverse().toString();\n    }\n\n    public static void main(String[] args) {\n        String original = \"hello\";\n        String reversed = reverseString(original);\n        System.out.println(reversed);\n    }\n}\n```"
  },
  {
    "task": "Create a function that returns the sum of all even numbers in a list.",
    "code": "```java\nimport java.util.List;\n\npublic class SumEvenNumbers {\n    public static int sumOfEvens(List<Integer> numbers) {\n        int sum = 0;\n        for (int num : numbers) {\n            if (num % 2 == 0) {\n                sum += num;\n            }\n        }\n        return sum;\n    }\n}\n```"
  },
  {
    "task": "Develop a function that receives two lists and returns their union.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\npublic class ListUnion {\n\n    public static <T> List<T> union(List<T> list1, List<T> list2) {\n        Set<T> set = new HashSet<>(list1);\n        set.addAll(list2);\n        return new ArrayList<>(set);\n    }\n\n    public static void main(String[] args) {\n        List<Integer> list1 = List.of(1, 2, 3);\n        List<Integer> list2 = List.of(3, 4, 5);\n        List<Integer> result = union(list1, list2);\n        System.out.println(result); // Output: [1, 2, 3, 4, 5]\n    }\n}\n```"
  },
  {
    "task": "Implement a function that takes a string and returns the number of unique characters.",
    "code": "```java\nimport java.util.HashSet;\n\npublic class UniqueCharacterCounter {\n    public static int countUniqueCharacters(String input) {\n        HashSet<Character> uniqueChars = new HashSet<>();\n        for (char c : input.toCharArray()) {\n            uniqueChars.add(c);\n        }\n        return uniqueChars.size();\n    }\n\n    public static void main(String[] args) {\n        String testString = \"example\";\n        int numberOfUniqueChars = countUniqueCharacters(testString);\n        System.out.println(\"Number of unique characters: \" + numberOfUniqueChars);\n    }\n}\n```"
  },
  {
    "task": "Write a function that returns the cube of a given number.",
    "code": "```java\npublic class CubeCalculator {\n    public static int cube(int number) {\n        return number * number * number;\n    }\n\n    public static void main(String[] args) {\n        int result = cube(3); // Example usage\n        System.out.println(result); // Output: 27\n    }\n}\n```"
  },
  {
    "task": "Create a function that calculates the power of a number given a base and exponent and returns the result.",
    "code": "```java\npublic class PowerCalculator {\n    public static double power(double base, int exponent) {\n        return Math.pow(base, exponent);\n    }\n\n    public static void main(String[] args) {\n        double result = power(2, 3);\n        System.out.println(\"2 raised to the power of 3 is: \" + result);\n    }\n}\n```"
  },
  {
    "task": "Design a function that accepts a URL and returns its domain name.",
    "code": "```java\nimport java.net.MalformedURLException;\nimport java.net.URL;\n\npublic class DomainExtractor {\n    public static String getDomainName(String url) {\n        try {\n            URL urlObj = new URL(url);\n            return urlObj.getHost();\n        } catch (MalformedURLException e) {\n            return null;\n        }\n    }\n\n    public static void main(String[] args) {\n        String url = \"https://www.example.com/path\";\n        String domain = getDomainName(url);\n        System.out.println(domain);  // Output: www.example.com\n    }\n}\n```"
  },
  {
    "task": "Implement a function that takes a sentence and returns it with each letter shifted by one in the alphabet.",
    "code": "```java\npublic class ShiftedSentence {\n\n    public static String shiftSentence(String sentence) {\n        StringBuilder shifted = new StringBuilder();\n        for (char c : sentence.toCharArray()) {\n            if (Character.isLetter(c)) {\n                char shiftedChar = (char) (c + 1);\n                if (c == 'z') {\n                    shiftedChar = 'a';\n                } else if (c == 'Z') {\n                    shiftedChar = 'A';\n                }\n                shifted.append(shiftedChar);\n            } else {\n                shifted.append(c);\n            }\n        }\n        return shifted.toString();\n    }\n\n    public static void main(String[] args) {\n        String sentence = \"Hello World!\";\n        System.out.println(shiftSentence(sentence));\n    }\n}\n```"
  },
  {
    "task": "Write a function that checks if a list is sorted and returns a boolean.",
    "code": "```java\nimport java.util.List;\n\npublic class ListUtils {\n    public static boolean isSorted(List<Integer> list) {\n        for (int i = 0; i < list.size() - 1; i++) {\n            if (list.get(i) > list.get(i + 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```"
  },
  {
    "task": "Create a function that returns the longest increasing subsequence in a list of numbers.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class LongestIncreasingSubsequence {\n\n    public static List<Integer> longestIncreasingSubsequence(List<Integer> numbers) {\n        if (numbers == null || numbers.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        int n = numbers.size();\n        int[] lengths = new int[n];\n        int[] previous = new int[n];\n        \n        int maxLength = 0;\n        int endIndex = 0;\n\n        for (int i = 0; i < n; i++) {\n            lengths[i] = 1;\n            previous[i] = -1;\n            for (int j = 0; j < i; j++) {\n                if (numbers.get(i) > numbers.get(j) && lengths[i] < lengths[j] + 1) {\n                    lengths[i] = lengths[j] + 1;\n                    previous[i] = j;\n                }\n            }\n            if (lengths[i] > maxLength) {\n                maxLength = lengths[i];\n                endIndex = i;\n            }\n        }\n\n        List<Integer> lis = new ArrayList<>();\n        for (int i = endIndex; i >= 0; i = previous[i]) {\n            lis.add(0, numbers.get(i));\n            if (previous[i] == -1) break;\n        }\n        \n        return lis;\n    }\n}\n```"
  },
  {
    "task": "Develop a function that calculates and returns the compound interest for given principal, rate, and time.",
    "code": "```java\npublic class CompoundInterestCalculator {\n\n    public static double calculateCompoundInterest(double principal, double rate, int time) {\n        return principal * Math.pow(1 + rate, time) - principal;\n    }\n\n    public static void main(String[] args) {\n        double principal = 1000.0;\n        double rate = 0.05;\n        int time = 5;\n\n        double interest = calculateCompoundInterest(principal, rate, time);\n        System.out.println(\"Compound Interest: \" + interest);\n    }\n}\n```"
  },
  {
    "task": "Implement a function that accepts two strings and returns their longest common substring.",
    "code": "```java\npublic class LongestCommonSubstring {\n    public static String longestCommonSubstring(String s1, String s2) {\n        int m = s1.length();\n        int n = s2.length();\n        int[][] dp = new int[m + 1][n + 1];\n        int maxLength = 0;\n        int endIndex = 0;\n\n        for (int i = 1; i <= m; i++) {\n            for (int j = 1; j <= n; j++) {\n                if (s1.charAt(i - 1) == s2.charAt(j - 1)) {\n                    dp[i][j] = dp[i - 1][j - 1] + 1;\n                    if (dp[i][j] > maxLength) {\n                        maxLength = dp[i][j];\n                        endIndex = i;\n                    }\n                }\n            }\n        }\n        \n        return s1.substring(endIndex - maxLength, endIndex);\n    }\n    \n    public static void main(String[] args) {\n        String s1 = \"abcde\";\n        String s2 = \"abfde\";\n        System.out.println(longestCommonSubstring(s1, s2)); // Output: \"ab\"\n    }\n}\n```"
  },
  {
    "task": "Write a function that takes a number and returns true if it is a palindrome.",
    "code": "```java\npublic class PalindromeChecker {\n    public static boolean isPalindrome(int number) {\n        int original = number;\n        int reversed = 0;\n        \n        while (number != 0) {\n            int digit = number % 10;\n            reversed = reversed * 10 + digit;\n            number /= 10;\n        }\n        \n        return original == reversed;\n    }\n}\n```"
  },
  {
    "task": "Create a function that returns the average length of words in a given sentence.",
    "code": "```java\npublic class AverageWordLength {\n\n    public static double averageWordLength(String sentence) {\n        if (sentence == null || sentence.isEmpty()) {\n            return 0;\n        }\n        String[] words = sentence.split(\"\\\\s+\");\n        int totalLength = 0;\n        for (String word : words) {\n            totalLength += word.length();\n        }\n        return (double) totalLength / words.length;\n    }\n\n    public static void main(String[] args) {\n        String sentence = \"Create a function that returns the average length of words in a given sentence.\";\n        double averageLength = averageWordLength(sentence);\n        System.out.println(\"Average word length: \" + averageLength);\n    }\n}\n```"
  },
  {
    "task": "Design a function that checks if a string contains only digits and returns a boolean.",
    "code": "```java\npublic class StringUtils {\n    public static boolean containsOnlyDigits(String input) {\n        if (input == null || input.isEmpty()) {\n            return false;\n        }\n        for (char c : input.toCharArray()) {\n            if (!Character.isDigit(c)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```"
  },
  {
    "task": "Implement a function that receives a list of tuples and returns a list of the first elements.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class TupleFunction {\n\n    public static <T> List<T> getFirstElements(List<Tuple<T, ?>> tuples) {\n        List<T> firstElements = new ArrayList<>();\n        for (Tuple<T, ?> tuple : tuples) {\n            firstElements.add(tuple.first);\n        }\n        return firstElements;\n    }\n\n    public static class Tuple<A, B> {\n        public A first;\n        public B second;\n\n        public Tuple(A first, B second) {\n            this.first = first;\n            this.second = second;\n        }\n    }\n\n    public static void main(String[] args) {\n        List<Tuple<Integer, String>> tuples = new ArrayList<>();\n        tuples.add(new Tuple<>(1, \"a\"));\n        tuples.add(new Tuple<>(2, \"b\"));\n        tuples.add(new Tuple<>(3, \"c\"));\n\n        List<Integer> firstElements = getFirstElements(tuples);\n        System.out.println(firstElements); // Output: [1, 2, 3]\n    }\n}\n```"
  },
  {
    "task": "Write a function that takes a year and returns the Chinese zodiac sign for that year.",
    "code": "```java\npublic class ChineseZodiac {\n\n    public static String getZodiacSign(int year) {\n        String[] zodiacSigns = {\n            \"Monkey\", \"Rooster\", \"Dog\", \"Pig\", \"Rat\", \"Ox\",\n            \"Tiger\", \"Rabbit\", \"Dragon\", \"Snake\", \"Horse\", \"Goat\"\n        };\n        return zodiacSigns[year % 12];\n    }\n\n    public static void main(String[] args) {\n        int year = 2021;\n        System.out.println(\"The Chinese Zodiac sign for the year \" + year + \" is: \" + getZodiacSign(year));\n    }\n}\n```"
  },
  {
    "task": "Create a function that returns the number of trailing zeros in a factorial of a given number.",
    "code": "```java\npublic class FactorialTrailingZeros {\n    public static int trailingZeros(int n) {\n        int count = 0;\n        for (int i = 5; n / i >= 1; i *= 5) {\n            count += n / i;\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        int number = 10; // Example number\n        int result = trailingZeros(number);\n        System.out.println(\"Trailing zeros in \" + number + \"! is: \" + result);\n    }\n}\n```"
  },
  {
    "task": "Develop a function that accepts a list and returns a new list with elements multiplied by their index.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ListMultiplier {\n    public static List<Integer> multiplyElementsByIndex(List<Integer> inputList) {\n        List<Integer> resultList = new ArrayList<>();\n        for (int i = 0; i < inputList.size(); i++) {\n            resultList.add(inputList.get(i) * i);\n        }\n        return resultList;\n    }\n}\n```"
  },
  {
    "task": "Implement a function that receives a string and returns a dictionary of word lengths.",
    "code": "```java\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class WordLengths {\n    public static Map<String, Integer> getWordLengths(String input) {\n        Map<String, Integer> wordLengths = new HashMap<>();\n        String[] words = input.split(\"\\\\s+\");\n        for (String word : words) {\n            wordLengths.put(word, word.length());\n        }\n        return wordLengths;\n    }\n\n    public static void main(String[] args) {\n        String input = \"example string for testing\";\n        Map<String, Integer> result = getWordLengths(input);\n        System.out.println(result);\n    }\n}\n```"
  },
  {
    "task": "Write a function that takes a list of integers and returns a list of numbers that are divisible by 3.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class DivisibleByThree {\n    public static List<Integer> getNumbersDivisibleByThree(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        for (Integer number : numbers) {\n            if (number % 3 == 0) {\n                result.add(number);\n            }\n        }\n        return result;\n    }\n}\n```"
  },
  {
    "task": "Create a function that returns the result of a quadratic equation given its coefficients.",
    "code": "```java\npublic class QuadraticEquationSolver {\n\n    public static double[] solveQuadraticEquation(double a, double b, double c) {\n        double discriminant = b * b - 4 * a * c;\n        if (discriminant < 0) {\n            return new double[] {}; // No real roots\n        } else if (discriminant == 0) {\n            double root = -b / (2 * a);\n            return new double[] { root }; // One real root\n        } else {\n            double root1 = (-b + Math.sqrt(discriminant)) / (2 * a);\n            double root2 = (-b - Math.sqrt(discriminant)) / (2 * a);\n            return new double[] { root1, root2 }; // Two real roots\n        }\n    }\n\n    public static void main(String[] args) {\n        double[] roots = solveQuadraticEquation(1, -3, 2);\n        for (double root : roots) {\n            System.out.println(root);\n        }\n    }\n}\n```"
  },
  {
    "task": "Design a function that checks if two lists have any elements in common and returns a boolean.",
    "code": "```java\nimport java.util.List;\n\npublic class ListChecker {\n    public static boolean haveCommonElements(List<?> list1, List<?> list2) {\n        for (Object element : list1) {\n            if (list2.contains(element)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n```"
  },
  {
    "task": "Implement a function that accepts a list and returns the sum of its elements using recursion.",
    "code": "```java\nimport java.util.List;\n\npublic class SumRecursive {\n    public static int sumList(List<Integer> list) {\n        return sumHelper(list, 0);\n    }\n\n    private static int sumHelper(List<Integer> list, int index) {\n        if (index == list.size()) {\n            return 0;\n        }\n        return list.get(index) + sumHelper(list, index + 1);\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = List.of(1, 2, 3, 4, 5);\n        int sum = sumList(numbers);\n        System.out.println(\"Sum: \" + sum);\n    }\n}\n```"
  },
  {
    "task": "Write a function that takes a list of numbers and returns the variance.",
    "code": "```java\nimport java.util.List;\n\npublic class VarianceCalculator {\n    public static double calculateVariance(List<Double> numbers) {\n        double mean = numbers.stream().mapToDouble(Double::doubleValue).average().orElse(0.0);\n        double variance = numbers.stream()\n                                 .mapToDouble(num -> Math.pow(num - mean, 2))\n                                 .average()\n                                 .orElse(0.0);\n        return variance;\n    }\n}\n```"
  },
  {
    "task": "Create a function that returns the ASCII value of a given character.",
    "code": "```java\npublic class AsciiValue {\n    public static int getAsciiValue(char character) {\n        return (int) character;\n    }\n    \n    public static void main(String[] args) {\n        char exampleChar = 'A';\n        System.out.println(\"ASCII value of \" + exampleChar + \" is: \" + getAsciiValue(exampleChar));\n    }\n}\n```"
  },
  {
    "task": "Develop a function that takes a number and returns the number of bits required for its binary representation.",
    "code": "```java\npublic class BitCounter {\n    public static int countBits(int number) {\n        return Integer.toBinaryString(number).length();\n    }\n\n    public static void main(String[] args) {\n        int number = 10;\n        int bits = countBits(number);\n        System.out.println(\"Number of bits required: \" + bits);\n    }\n}\n```"
  }
]