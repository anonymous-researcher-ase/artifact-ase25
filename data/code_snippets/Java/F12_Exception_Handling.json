[
  {
    "task": "Write a function that reads a file and handles the exception if the file is not found.",
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class FileReadExample {\n    public static void readFile(String filePath) {\n        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                System.out.println(line);\n            }\n        } catch (IOException e) {\n            System.err.println(\"File not found: \" + e.getMessage());\n        }\n    }\n\n    public static void main(String[] args) {\n        readFile(\"example.txt\");\n    }\n}\n```"
  },
  {
    "task": "Create a program that divides two numbers and catches any division by zero errors.",
    "code": "```java\nimport java.util.Scanner;\n\npublic class DivisionProgram {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        \n        try {\n            System.out.println(\"Enter the numerator:\");\n            double numerator = scanner.nextDouble();\n            \n            System.out.println(\"Enter the denominator:\");\n            double denominator = scanner.nextDouble();\n            \n            double result = divide(numerator, denominator);\n            System.out.println(\"The result is: \" + result);\n        } catch (ArithmeticException e) {\n            System.out.println(\"Error: Division by zero is not allowed.\");\n        } catch (Exception e) {\n            System.out.println(\"An error occurred: \" + e.getMessage());\n        } finally {\n            scanner.close();\n        }\n    }\n    \n    public static double divide(double numerator, double denominator) {\n        if (denominator == 0) {\n            throw new ArithmeticException(\"Division by zero\");\n        }\n        return numerator / denominator;\n    }\n}\n```"
  },
  {
    "task": "Design a function to parse an integer from a string and manage invalid input exceptions.",
    "code": "```java\npublic class IntegerParser {\n    public static Integer parseInteger(String input) {\n        try {\n            return Integer.parseInt(input);\n        } catch (NumberFormatException e) {\n            System.err.println(\"Invalid input: \" + input);\n            return null;\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(parseInteger(\"123\"));  // Valid input\n        System.out.println(parseInteger(\"abc\"));  // Invalid input\n    }\n}\n```"
  },
  {
    "task": "Implement an API call and catch exceptions related to network errors or timeouts.",
    "code": "```java\nimport java.io.IOException;\nimport java.net.HttpURLConnection;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.util.Scanner;\n\npublic class ApiCaller {\n\n    public static void main(String[] args) {\n        String apiUrl = \"https://api.example.com/data\";\n        try {\n            String response = makeApiCall(apiUrl);\n            System.out.println(\"API Response: \" + response);\n        } catch (IOException e) {\n            System.err.println(\"Network error or timeout occurred: \" + e.getMessage());\n        }\n    }\n\n    private static String makeApiCall(String apiUrl) throws IOException {\n        HttpURLConnection connection = null;\n        try {\n            URL url = new URL(apiUrl);\n            connection = (HttpURLConnection) url.openConnection();\n            connection.setRequestMethod(\"GET\");\n            connection.setConnectTimeout(5000);\n            connection.setReadTimeout(5000);\n\n            int status = connection.getResponseCode();\n            if (status != HttpURLConnection.HTTP_OK) {\n                throw new IOException(\"Failed to fetch data. HTTP status: \" + status);\n            }\n\n            Scanner scanner = new Scanner(connection.getInputStream());\n            StringBuilder response = new StringBuilder();\n            while (scanner.hasNext()) {\n                response.append(scanner.nextLine());\n            }\n            scanner.close();\n            return response.toString();\n\n        } catch (MalformedURLException e) {\n            throw new IOException(\"Invalid URL format: \" + apiUrl, e);\n        } finally {\n            if (connection != null) {\n                connection.disconnect();\n            }\n        }\n    }\n}\n```"
  },
  {
    "task": "Develop a program that opens a database connection and handles any connection failure exceptions.",
    "code": "```java\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\npublic class DatabaseConnection {\n\n    public static void main(String[] args) {\n        String url = \"jdbc:yourdatabaseurl\"; // replace with your database URL\n        String user = \"yourusername\"; // replace with your database username\n        String password = \"yourpassword\"; // replace with your database password\n\n        Connection connection = null;\n\n        try {\n            connection = DriverManager.getConnection(url, user, password);\n            System.out.println(\"Database connection established successfully.\");\n        } catch (SQLException e) {\n            System.err.println(\"Failed to establish database connection.\");\n            e.printStackTrace();\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                    System.out.println(\"Database connection closed.\");\n                } catch (SQLException e) {\n                    System.err.println(\"Failed to close database connection.\");\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a function that accesses an array by index and catches out-of-bounds exceptions.",
    "code": "```java\npublic class ArrayAccessor {\n\n    public static void accessArrayByIndex(int[] array, int index) {\n        try {\n            int value = array[index];\n            System.out.println(\"Value at index \" + index + \": \" + value);\n        } catch (ArrayIndexOutOfBoundsException e) {\n            System.out.println(\"Index \" + index + \" is out of bounds.\");\n        }\n    }\n\n    public static void main(String[] args) {\n        int[] sampleArray = {1, 2, 3, 4, 5};\n        accessArrayByIndex(sampleArray, 2);  // Valid index\n        accessArrayByIndex(sampleArray, 10); // Invalid index\n    }\n}\n```"
  },
  {
    "task": "Create a function that converts a string to a date object and manages format exceptions.",
    "code": "```java\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\npublic class DateConverter {\n    public static Date convertStringToDate(String dateString) {\n        SimpleDateFormat formatter = new SimpleDateFormat(\"yyyy-MM-dd\");\n        try {\n            return formatter.parse(dateString);\n        } catch (ParseException e) {\n            System.out.println(\"Invalid date format: \" + e.getMessage());\n            return null;\n        }\n    }\n\n    public static void main(String[] args) {\n        Date date = convertStringToDate(\"2023-10-10\");\n        if (date != null) {\n            System.out.println(\"Converted date: \" + date);\n        }\n    }\n}\n```"
  },
  {
    "task": "Design a program that writes data to a file and catches any file permission exceptions.",
    "code": "```java\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic class FileWriteExample {\n    public static void main(String[] args) {\n        FileWriter writer = null;\n        try {\n            writer = new FileWriter(\"output.txt\");\n            writer.write(\"Example data to write to the file.\");\n        } catch (IOException e) {\n            System.err.println(\"An IOException occurred: \" + e.getMessage());\n        } finally {\n            if (writer != null) {\n                try {\n                    writer.close();\n                } catch (IOException e) {\n                    System.err.println(\"Failed to close the writer: \" + e.getMessage());\n                }\n            }\n        }\n    }\n}\n```"
  },
  {
    "task": "Implement a module that retrieves data from a URL and handles malformed URL exceptions.",
    "code": "```java\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.io.IOException;\n\npublic class DataRetriever {\n\n    public String fetchData(String urlString) {\n        StringBuilder result = new StringBuilder();\n        try {\n            URL url = new URL(urlString);\n            URLConnection conn = url.openConnection();\n            BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n            String line;\n            while ((line = reader.readLine()) != null) {\n                result.append(line);\n            }\n            reader.close();\n        } catch (MalformedURLException e) {\n            System.err.println(\"Malformed URL: \" + e.getMessage());\n        } catch (IOException e) {\n            System.err.println(\"I/O Error: \" + e.getMessage());\n        }\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        DataRetriever retriever = new DataRetriever();\n        String data = retriever.fetchData(\"http://example.com\");\n        System.out.println(data);\n    }\n}\n```"
  },
  {
    "task": "Write a function to calculate the square root of a number and catch any negative input exceptions.",
    "code": "```java\npublic class SquareRootCalculator {\n\n    public static void main(String[] args) {\n        try {\n            double result = calculateSquareRoot(-4);\n            System.out.println(\"Square root: \" + result);\n        } catch (IllegalArgumentException e) {\n            System.out.println(\"Exception: \" + e.getMessage());\n        }\n    }\n\n    public static double calculateSquareRoot(double number) {\n        if (number < 0) {\n            throw new IllegalArgumentException(\"Negative input: Square root of a negative number is not defined.\");\n        }\n        return Math.sqrt(number);\n    }\n}\n```"
  },
  {
    "task": "Develop a program that sends an email and manages exceptions for invalid email addresses.",
    "code": "```java\nimport javax.mail.*;\nimport javax.mail.internet.*;\nimport java.util.Properties;\n\npublic class EmailSender {\n\n    public static void main(String[] args) {\n        String to = \"invalid-email\"; // example of invalid email address\n        String from = \"your-email@example.com\";\n        String host = \"smtp.example.com\";\n\n        Properties properties = System.getProperties();\n        properties.setProperty(\"mail.smtp.host\", host);\n\n        Session session = Session.getDefaultInstance(properties);\n\n        try {\n            MimeMessage message = new MimeMessage(session);\n            message.setFrom(new InternetAddress(from));\n            message.addRecipient(Message.RecipientType.TO, new InternetAddress(to));\n            message.setSubject(\"Test Email\");\n            message.setText(\"This is a test email.\");\n\n            Transport.send(message);\n            System.out.println(\"Email sent successfully.\");\n        } catch (AddressException ae) {\n            System.out.println(\"Invalid email address: \" + ae.getMessage());\n        } catch (MessagingException me) {\n            System.out.println(\"Error occurred while sending email: \" + me.getMessage());\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a calculator application that handles invalid operations gracefully.",
    "code": "```java\nimport java.util.Scanner;\n\npublic class Calculator {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.println(\"Enter first number: \");\n        double num1 = getValidNumber(scanner);\n\n        System.out.println(\"Enter an operator (+, -, *, /): \");\n        char operator = scanner.next().charAt(0);\n\n        System.out.println(\"Enter second number: \");\n        double num2 = getValidNumber(scanner);\n\n        try {\n            double result = calculate(num1, num2, operator);\n            System.out.printf(\"The result is: %.2f%n\", result);\n        } catch (IllegalArgumentException e) {\n            System.out.println(\"Error: \" + e.getMessage());\n        }\n    }\n\n    private static double getValidNumber(Scanner scanner) {\n        while (true) {\n            try {\n                return Double.parseDouble(scanner.next());\n            } catch (NumberFormatException e) {\n                System.out.println(\"Invalid input. Please enter a valid number: \");\n            }\n        }\n    }\n\n    private static double calculate(double num1, double num2, char operator) {\n        switch (operator) {\n            case '+':\n                return num1 + num2;\n            case '-':\n                return num1 - num2;\n            case '*':\n                return num1 * num2;\n            case '/':\n                if (num2 == 0) {\n                    throw new IllegalArgumentException(\"Division by zero is not allowed.\");\n                }\n                return num1 / num2;\n            default:\n                throw new IllegalArgumentException(\"Invalid operator. Please use +, -, *, or /.\");\n        }\n    }\n}\n```"
  },
  {
    "task": "Design a function that tries to parse JSON data and catches parsing errors.",
    "code": "```java\nimport org.json.JSONObject;\nimport org.json.JSONException;\n\npublic class JsonParser {\n\n    public static JSONObject parseJson(String jsonData) {\n        try {\n            return new JSONObject(jsonData);\n        } catch (JSONException e) {\n            System.out.println(\"Error parsing JSON data: \" + e.getMessage());\n            return null;\n        }\n    }\n\n    public static void main(String[] args) {\n        String jsonData = \"{ \\\"name\\\": \\\"John\\\", \\\"age\\\": 30 }\";\n        JSONObject jsonObject = parseJson(jsonData);\n        \n        if (jsonObject != null) {\n            System.out.println(\"Parsed JSON: \" + jsonObject.toString());\n        }\n    }\n}\n```"
  },
  {
    "task": "Implement a system that processes user input and handles any type conversion exceptions.",
    "code": "```java\nimport java.util.Scanner;\n\npublic class UserInputProcessor {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"Enter an integer:\");\n\n        try {\n            String input = scanner.nextLine();\n            int number = Integer.parseInt(input);\n            System.out.println(\"You entered: \" + number);\n        } catch (NumberFormatException e) {\n            System.out.println(\"Invalid input. Please enter a valid integer.\");\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a function that fetches data from a database and manages exceptions for missing records.",
    "code": "```java\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\npublic class DatabaseFetcher {\n\n    public String fetchData(int recordId) {\n        String result = null;\n        Connection connection = null;\n        Statement statement = null;\n        ResultSet resultSet = null;\n        try {\n            connection = DriverManager.getConnection(\"jdbc:yourdatabaseurl\", \"username\", \"password\");\n            statement = connection.createStatement();\n            resultSet = statement.executeQuery(\"SELECT data FROM your_table WHERE id = \" + recordId);\n\n            if (resultSet.next()) {\n                result = resultSet.getString(\"data\");\n            } else {\n                throw new RecordNotFoundException(\"Record with ID \" + recordId + \" not found.\");\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } catch (RecordNotFoundException e) {\n            System.out.println(e.getMessage());\n        } finally {\n            try {\n                if (resultSet != null) resultSet.close();\n                if (statement != null) statement.close();\n                if (connection != null) connection.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        DatabaseFetcher fetcher = new DatabaseFetcher();\n        String data = fetcher.fetchData(1);\n        System.out.println(\"Fetched Data: \" + data);\n    }\n}\n\nclass RecordNotFoundException extends Exception {\n    public RecordNotFoundException(String message) {\n        super(message);\n    }\n}\n```"
  },
  {
    "task": "Create a program that connects to a remote server and handles authentication failure exceptions.",
    "code": "```java\nimport java.io.IOException;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\npublic class ServerConnection {\n\n    public static void main(String[] args) {\n        try {\n            connectToServer(\"http://example.com\");\n        } catch (AuthenticationFailureException e) {\n            System.out.println(\"Authentication failed: \" + e.getMessage());\n        } catch (IOException e) {\n            System.out.println(\"An error occurred: \" + e.getMessage());\n        }\n    }\n\n    public static void connectToServer(String serverUrl) throws IOException, AuthenticationFailureException {\n        HttpURLConnection connection = (HttpURLConnection) new URL(serverUrl).openConnection();\n        connection.setRequestMethod(\"GET\");\n        \n        int responseCode = connection.getResponseCode();\n        if (responseCode == HttpURLConnection.HTTP_UNAUTHORIZED) {\n            throw new AuthenticationFailureException(\"Invalid credentials provided.\");\n        } else if (responseCode != HttpURLConnection.HTTP_OK) {\n            throw new IOException(\"Failed to connect: HTTP error code \" + responseCode);\n        }\n        \n        // Process the connection (if needed)\n    }\n}\n\nclass AuthenticationFailureException extends Exception {\n    public AuthenticationFailureException(String message) {\n        super(message);\n    }\n}\n```"
  },
  {
    "task": "Develop a function to download a file from the internet and handle file not found exceptions.",
    "code": "```java\nimport java.io.BufferedInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\npublic class FileDownloader {\n\n    public static void downloadFile(String urlString, String destination) {\n        BufferedInputStream inputStream = null;\n        FileOutputStream fileOS = null;\n        HttpURLConnection connection = null;\n        \n        try {\n            URL url = new URL(urlString);\n            connection = (HttpURLConnection) url.openConnection();\n            connection.setRequestMethod(\"GET\");\n            connection.connect();\n            \n            if (connection.getResponseCode() != HttpURLConnection.HTTP_OK) {\n                throw new IOException(\"File not found: \" + urlString);\n            }\n\n            inputStream = new BufferedInputStream(connection.getInputStream());\n            fileOS = new FileOutputStream(destination);\n            byte[] data = new byte[1024];\n            int byteContent;\n            while ((byteContent = inputStream.read(data, 0, 1024)) != -1) {\n                fileOS.write(data, 0, byteContent);\n            }\n        } catch (IOException e) {\n            System.err.println(\"An error occurred: \" + e.getMessage());\n        } finally {\n            try {\n                if (inputStream != null) {\n                    inputStream.close();\n                }\n                if (fileOS != null) {\n                    fileOS.close();\n                }\n                if (connection != null) {\n                    connection.disconnect();\n                }\n            } catch (IOException e) {\n                System.err.println(\"Failed to close resources: \" + e.getMessage());\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        downloadFile(\"http://example.com/file.txt\", \"localfile.txt\");\n    }\n}\n```"
  },
  {
    "task": "Design a program that attempts to connect to an API and handles rate limit exceptions.",
    "code": "```java\nimport java.io.IOException;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\npublic class ApiConnector {\n\n    public static void main(String[] args) {\n        ApiConnector connector = new ApiConnector();\n        connector.connectToApi(\"https://api.example.com/data\");\n    }\n\n    public void connectToApi(String apiEndpoint) {\n        try {\n            URL url = new URL(apiEndpoint);\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n            connection.setRequestMethod(\"GET\");\n\n            int responseCode = connection.getResponseCode();\n            if (responseCode == 429) {\n                throw new RateLimitExceededException(\"Rate limit exceeded. Please try again later.\");\n            }\n\n            // Handle other response codes and process the response as needed.\n\n        } catch (RateLimitExceededException e) {\n            System.err.println(e.getMessage());\n            // Implement retry logic or wait mechanism if necessary.\n        } catch (IOException e) {\n            System.err.println(\"An error occurred while connecting to the API: \" + e.getMessage());\n        }\n    }\n\n    static class RateLimitExceededException extends Exception {\n        public RateLimitExceededException(String message) {\n            super(message);\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a function that reads from a configuration file and manages key not found exceptions.",
    "code": "```java\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.Properties;\n\npublic class ConfigReader {\n    public static String readConfig(String filePath, String key) {\n        Properties properties = new Properties();\n        try (FileInputStream inputStream = new FileInputStream(filePath)) {\n            properties.load(inputStream);\n            if (!properties.containsKey(key)) {\n                throw new KeyNotFoundException(\"Key not found: \" + key);\n            }\n            return properties.getProperty(key);\n        } catch (IOException e) {\n            e.printStackTrace();\n        } catch (KeyNotFoundException e) {\n            System.err.println(e.getMessage());\n        }\n        return null;\n    }\n\n    public static void main(String[] args) {\n        String value = readConfig(\"config.properties\", \"someKey\");\n        if (value != null) {\n            System.out.println(\"Value: \" + value);\n        }\n    }\n}\n\nclass KeyNotFoundException extends Exception {\n    public KeyNotFoundException(String message) {\n        super(message);\n    }\n}\n```"
  },
  {
    "task": "Create an application that processes a list of tasks and catches any task execution exceptions.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass Task {\n    private String name;\n\n    public Task(String name) {\n        this.name = name;\n    }\n\n    public void execute() throws Exception {\n        if (Math.random() > 0.5) {\n            throw new Exception(\"Execution failed for task: \" + name);\n        }\n        System.out.println(\"Task \" + name + \" executed successfully.\");\n    }\n}\n\npublic class TaskProcessor {\n\n    public static void main(String[] args) {\n        List<Task> tasks = new ArrayList<>();\n        tasks.add(new Task(\"Task 1\"));\n        tasks.add(new Task(\"Task 2\"));\n        tasks.add(new Task(\"Task 3\"));\n\n        for (Task task : tasks) {\n            try {\n                task.execute();\n            } catch (Exception e) {\n                System.out.println(\"Caught exception: \" + e.getMessage());\n            }\n        }\n    }\n}\n```"
  },
  {
    "task": "Implement a program that performs batch processing and handles individual item processing exceptions.",
    "code": "```java\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class BatchProcessor {\n\n    public static void main(String[] args) {\n        List<String> items = List.of(\"item1\", \"item2\", \"item3\", \"item4\");\n        processBatch(items);\n    }\n\n    public static void processBatch(List<String> items) {\n        for (String item : items) {\n            try {\n                processItem(item);\n            } catch (Exception e) {\n                System.out.println(\"Error processing \" + item + \": \" + e.getMessage());\n            }\n        }\n    }\n\n    public static void processItem(String item) throws Exception {\n        if (item.equals(\"item3\")) {\n            throw new Exception(\"Processing failed for item3\");\n        }\n        System.out.println(\"Processed \" + item);\n    }\n}\n```"
  },
  {
    "task": "Develop a function that performs mathematical operations and catches arithmetic exceptions.",
    "code": "```java\npublic class MathOperations {\n\n    public static double performOperation(double a, double b, String operation) {\n        try {\n            switch (operation) {\n                case \"add\":\n                    return a + b;\n                case \"subtract\":\n                    return a - b;\n                case \"multiply\":\n                    return a * b;\n                case \"divide\":\n                    return a / b;\n                default:\n                    throw new IllegalArgumentException(\"Invalid operation: \" + operation);\n            }\n        } catch (ArithmeticException e) {\n            System.out.println(\"Arithmetic error occurred: \" + e.getMessage());\n            return Double.NaN;\n        } catch (IllegalArgumentException e) {\n            System.out.println(\"Error: \" + e.getMessage());\n            return Double.NaN;\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(performOperation(10, 0, \"divide\"));\n        System.out.println(performOperation(10, 5, \"multiply\"));\n        System.out.println(performOperation(10, 5, \"invalid\"));\n    }\n}\n```"
  },
  {
    "task": "Write a program that logs error messages when exceptions occur during data processing.",
    "code": "```java\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\npublic class DataProcessor {\n    private static final Logger logger = Logger.getLogger(DataProcessor.class.getName());\n\n    public static void main(String[] args) {\n        try {\n            processData();\n        } catch (Exception e) {\n            logger.log(Level.SEVERE, \"An error occurred during data processing\", e);\n        }\n    }\n\n    public static void processData() throws Exception {\n        // Simulate data processing\n        // This is where the exception might occur\n        throw new Exception(\"Simulated data processing error\");\n    }\n}\n```"
  },
  {
    "task": "Create a script that monitors system resources and handles exceptions when limits are exceeded.",
    "code": "```java\nimport java.lang.management.ManagementFactory;\nimport java.lang.management.OperatingSystemMXBean;\n\npublic class ResourceMonitor {\n\n    private static final double CPU_USAGE_THRESHOLD = 0.8; // 80%\n    private static final double MEMORY_USAGE_THRESHOLD = 0.8; // 80%\n\n    public static void main(String[] args) {\n        OperatingSystemMXBean osBean = ManagementFactory.getOperatingSystemMXBean();\n\n        try {\n            monitorResources(osBean);\n        } catch (ResourceLimitExceededException e) {\n            System.err.println(\"Resource limit exceeded: \" + e.getMessage());\n        }\n    }\n\n    private static void monitorResources(OperatingSystemMXBean osBean) throws ResourceLimitExceededException {\n        double cpuLoad = osBean.getSystemLoadAverage() / osBean.getAvailableProcessors();\n        if (cpuLoad > CPU_USAGE_THRESHOLD) {\n            throw new ResourceLimitExceededException(\"CPU usage exceeded threshold: \" + (cpuLoad * 100) + \"%\");\n        }\n\n        long totalMemory = Runtime.getRuntime().totalMemory();\n        long freeMemory = Runtime.getRuntime().freeMemory();\n        double memoryUsage = (double) (totalMemory - freeMemory) / totalMemory;\n        if (memoryUsage > MEMORY_USAGE_THRESHOLD) {\n            throw new ResourceLimitExceededException(\"Memory usage exceeded threshold: \" + (memoryUsage * 100) + \"%\");\n        }\n\n        System.out.println(\"CPU and Memory usage are within acceptable limits.\");\n    }\n\n    static class ResourceLimitExceededException extends Exception {\n        public ResourceLimitExceededException(String message) {\n            super(message);\n        }\n    }\n}\n```"
  },
  {
    "task": "Design a function that validates user input and manages any format exceptions.",
    "code": "```java\nimport java.util.Scanner;\n\npublic class UserInputValidator {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"Enter a number:\");\n\n        try {\n            String input = scanner.nextLine();\n            int number = validateInput(input);\n            System.out.println(\"You entered a valid number: \" + number);\n        } catch (NumberFormatException e) {\n            System.out.println(\"Invalid input format. Please enter a valid number.\");\n        }\n    }\n\n    public static int validateInput(String input) throws NumberFormatException {\n        return Integer.parseInt(input);\n    }\n}\n```"
  },
  {
    "task": "Implement a service that interacts with third-party APIs and handles unexpected response exceptions.",
    "code": "```java\nimport java.io.IOException;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\npublic class ApiService {\n    \n    public String fetchDataFromApi(String apiUrl) {\n        HttpURLConnection connection = null;\n        try {\n            URL url = new URL(apiUrl);\n            connection = (HttpURLConnection) url.openConnection();\n            connection.setRequestMethod(\"GET\");\n            \n            int responseCode = connection.getResponseCode();\n            if (responseCode != 200) {\n                throw new IOException(\"Unexpected response code: \" + responseCode);\n            }\n            \n            Scanner scanner = new Scanner(connection.getInputStream());\n            StringBuilder response = new StringBuilder();\n            while (scanner.hasNextLine()) {\n                response.append(scanner.nextLine());\n            }\n            scanner.close();\n            \n            return response.toString();\n        } catch (IOException e) {\n            System.err.println(\"Error while fetching data: \" + e.getMessage());\n            return null;\n        } finally {\n            if (connection != null) {\n                connection.disconnect();\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        ApiService apiService = new ApiService();\n        String apiUrl = \"https://api.example.com/data\";\n        String response = apiService.fetchDataFromApi(apiUrl);\n        \n        if (response != null) {\n            System.out.println(\"API Response: \" + response);\n        } else {\n            System.out.println(\"Failed to fetch data from API.\");\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a function that uploads files to a server and handles exceptions for unsupported file types.",
    "code": "```java\nimport java.io.File;\n\npublic class FileUploader {\n\n    public void uploadFile(File file) {\n        try {\n            if (!isSupportedFileType(file)) {\n                throw new UnsupportedFileTypeException(\"File type not supported: \" + getFileExtension(file));\n            }\n            // Simulate file upload to server\n            System.out.println(\"File uploaded successfully: \" + file.getName());\n        } catch (UnsupportedFileTypeException e) {\n            System.err.println(e.getMessage());\n        } catch (Exception e) {\n            System.err.println(\"An error occurred while uploading the file: \" + e.getMessage());\n        }\n    }\n\n    private boolean isSupportedFileType(File file) {\n        String extension = getFileExtension(file);\n        return \"txt\".equals(extension) || \"jpg\".equals(extension) || \"png\".equals(extension);\n    }\n\n    private String getFileExtension(File file) {\n        String fileName = file.getName();\n        int dotIndex = fileName.lastIndexOf('.');\n        return (dotIndex == -1) ? \"\" : fileName.substring(dotIndex + 1).toLowerCase();\n    }\n\n    public static void main(String[] args) {\n        FileUploader uploader = new FileUploader();\n        uploader.uploadFile(new File(\"example.txt\"));\n        uploader.uploadFile(new File(\"example.unsupported\"));\n    }\n}\n\nclass UnsupportedFileTypeException extends Exception {\n    public UnsupportedFileTypeException(String message) {\n        super(message);\n    }\n}\n```"
  },
  {
    "task": "Create a program that simulates network traffic and manages packet loss exceptions.",
    "code": "```java\nimport java.util.Random;\n\nclass NetworkTrafficSimulator {\n    public static void main(String[] args) {\n        NetworkTrafficSimulator simulator = new NetworkTrafficSimulator();\n        try {\n            simulator.simulateTraffic();\n        } catch (PacketLossException e) {\n            System.out.println(\"Error: \" + e.getMessage());\n        }\n    }\n\n    public void simulateTraffic() throws PacketLossException {\n        Random random = new Random();\n        int packetCount = 100;\n        for (int i = 0; i < packetCount; i++) {\n            if (random.nextDouble() < 0.1) { // 10% chance of packet loss\n                throw new PacketLossException(\"Packet lost at index \" + i);\n            }\n            System.out.println(\"Packet \" + i + \" sent successfully.\");\n        }\n    }\n}\n\nclass PacketLossException extends Exception {\n    public PacketLossException(String message) {\n        super(message);\n    }\n}\n```"
  },
  {
    "task": "Develop a function that processes XML data and catches any structural exceptions.",
    "code": "```java\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.ParserConfigurationException;\nimport org.w3c.dom.Document;\nimport org.xml.sax.SAXException;\nimport java.io.IOException;\nimport java.io.InputStream;\n\npublic class XMLProcessor {\n\n    public void processXML(InputStream xmlInput) {\n        try {\n            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n            DocumentBuilder builder = factory.newDocumentBuilder();\n            Document document = builder.parse(xmlInput);\n            // Further processing of the document can be done here\n        } catch (ParserConfigurationException e) {\n            System.out.println(\"Parser Configuration Error: \" + e.getMessage());\n        } catch (SAXException e) {\n            System.out.println(\"SAX Parsing Error: \" + e.getMessage());\n        } catch (IOException e) {\n            System.out.println(\"IO Error: \" + e.getMessage());\n        }\n    }\n}\n```"
  },
  {
    "task": "Design a program that handles exceptions when accessing environment variables.",
    "code": "```java\npublic class EnvironmentVariableHandler {\n    public static void main(String[] args) {\n        String variableName = \"MY_ENV_VAR\";\n\n        try {\n            String value = System.getenv(variableName);\n            if (value == null) {\n                throw new IllegalArgumentException(\"Environment variable \" + variableName + \" is not set.\");\n            }\n            System.out.println(\"Value of \" + variableName + \": \" + value);\n        } catch (SecurityException e) {\n            System.err.println(\"Security exception occurred while accessing environment variable: \" + e.getMessage());\n        } catch (IllegalArgumentException e) {\n            System.err.println(\"Error: \" + e.getMessage());\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a function that calculates factorial and manages exceptions for negative input values.",
    "code": "```java\npublic class FactorialCalculator {\n\n    public static void main(String[] args) {\n        try {\n            System.out.println(factorial(5)); // Output: 120\n            System.out.println(factorial(-1)); // Throws exception\n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n\n    public static long factorial(int n) {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"Factorial is not defined for negative numbers.\");\n        }\n        return n == 0 ? 1 : n * factorial(n - 1);\n    }\n}\n```"
  },
  {
    "task": "Create a software tool that converts file formats and handles unsupported format exceptions.",
    "code": "```java\nimport java.io.File;\n\nclass UnsupportedFormatException extends Exception {\n    public UnsupportedFormatException(String message) {\n        super(message);\n    }\n}\n\npublic class FileFormatConverter {\n    public void convertFileFormat(File inputFile, String outputFormat) throws UnsupportedFormatException {\n        String inputFileName = inputFile.getName();\n        String inputFileExtension = inputFileName.substring(inputFileName.lastIndexOf('.') + 1);\n\n        if (!isSupportedFormat(outputFormat)) {\n            throw new UnsupportedFormatException(\"Unsupported format: \" + outputFormat);\n        }\n\n        // Dummy conversion logic for demonstration\n        System.out.println(\"Converting \" + inputFileExtension + \" to \" + outputFormat + \"...\");\n        // Actual conversion logic would go here\n\n        System.out.println(\"Conversion successful.\");\n    }\n\n    private boolean isSupportedFormat(String format) {\n        // Add supported formats here\n        return format.equals(\"txt\") || format.equals(\"pdf\") || format.equals(\"docx\");\n    }\n\n    public static void main(String[] args) {\n        FileFormatConverter converter = new FileFormatConverter();\n        File file = new File(\"example.txt\");\n\n        try {\n            converter.convertFileFormat(file, \"pdf\");\n            converter.convertFileFormat(file, \"unsupported_format\");\n        } catch (UnsupportedFormatException e) {\n            System.err.println(e.getMessage());\n        }\n    }\n}\n```"
  },
  {
    "task": "Implement a function that sends HTTP requests and catches exceptions for invalid response status codes.",
    "code": "```java\nimport java.io.IOException;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\npublic class HttpRequestHandler {\n\n    public static void sendHttpRequest(String urlString) {\n        HttpURLConnection connection = null;\n        try {\n            URL url = new URL(urlString);\n            connection = (HttpURLConnection) url.openConnection();\n            connection.setRequestMethod(\"GET\");\n            int responseCode = connection.getResponseCode();\n            \n            if (responseCode != HttpURLConnection.HTTP_OK) {\n                throw new IOException(\"Invalid response status code: \" + responseCode);\n            }\n            \n            // Handling of the response can be added here\n\n        } catch (IOException e) {\n            System.err.println(\"Exception occurred: \" + e.getMessage());\n        } finally {\n            if (connection != null) {\n                connection.disconnect();\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        sendHttpRequest(\"http://example.com\");\n    }\n}\n```"
  },
  {
    "task": "Develop a program that interacts with a message queue and handles message delivery exceptions.",
    "code": "```java\nimport java.util.LinkedList;\nimport java.util.Queue;\n\nclass MessageQueue {\n    private Queue<String> queue = new LinkedList<>();\n\n    public void sendMessage(String message) throws MessageDeliveryException {\n        if (message == null || message.isEmpty()) {\n            throw new MessageDeliveryException(\"Message cannot be null or empty\");\n        }\n        // Simulate adding to a queue\n        queue.add(message);\n        System.out.println(\"Message sent: \" + message);\n    }\n\n    public String receiveMessage() throws MessageDeliveryException {\n        if (queue.isEmpty()) {\n            throw new MessageDeliveryException(\"No messages available\");\n        }\n        return queue.poll();\n    }\n}\n\nclass MessageDeliveryException extends Exception {\n    public MessageDeliveryException(String message) {\n        super(message);\n    }\n}\n\npublic class MessageQueueApp {\n    public static void main(String[] args) {\n        MessageQueue messageQueue = new MessageQueue();\n\n        try {\n            messageQueue.sendMessage(\"Hello, World!\");\n            String message = messageQueue.receiveMessage();\n            System.out.println(\"Message received: \" + message);\n\n            // Attempt to receive a message from an empty queue\n            messageQueue.receiveMessage();\n        } catch (MessageDeliveryException e) {\n            System.err.println(\"Error: \" + e.getMessage());\n        }\n\n        try {\n            // Attempt to send a null message\n            messageQueue.sendMessage(null);\n        } catch (MessageDeliveryException e) {\n            System.err.println(\"Error: \" + e.getMessage());\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a function that reads user input and catches exceptions for unexpected data types.",
    "code": "```java\nimport java.util.Scanner;\n\npublic class UserInputHandler {\n    public static void main(String[] args) {\n        readUserInput();\n    }\n\n    public static void readUserInput() {\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"Enter an integer:\");\n\n        try {\n            int userInput = scanner.nextInt();\n            System.out.println(\"You entered: \" + userInput);\n        } catch (Exception e) {\n            System.out.println(\"Invalid input. Please enter a valid integer.\");\n        } finally {\n            scanner.close();\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a system that processes transactions and manages exceptions for insufficient funds.",
    "code": "```java\npublic class TransactionSystem {\n\n    public static void main(String[] args) {\n        Account account = new Account(100.0);\n\n        try {\n            account.processTransaction(50.0);\n            account.processTransaction(60.0); // This should trigger an exception\n        } catch (InsufficientFundsException e) {\n            System.out.println(\"Transaction failed: \" + e.getMessage());\n        }\n    }\n}\n\nclass Account {\n    private double balance;\n\n    public Account(double balance) {\n        this.balance = balance;\n    }\n\n    public void processTransaction(double amount) throws InsufficientFundsException {\n        if (amount > balance) {\n            throw new InsufficientFundsException(\"Insufficient funds for this transaction.\");\n        }\n        balance -= amount;\n        System.out.println(\"Transaction successful. Remaining balance: \" + balance);\n    }\n}\n\nclass InsufficientFundsException extends Exception {\n    public InsufficientFundsException(String message) {\n        super(message);\n    }\n}\n```"
  },
  {
    "task": "Design a function that generates random numbers and handles exceptions when the range is invalid.",
    "code": "```java\nimport java.util.Random;\n\npublic class RandomNumberGenerator {\n\n    public static int generateRandomNumber(int min, int max) {\n        try {\n            if (min > max) {\n                throw new IllegalArgumentException(\"Invalid range: min should be less than or equal to max.\");\n            }\n            Random random = new Random();\n            return random.nextInt((max - min) + 1) + min;\n        } catch (IllegalArgumentException e) {\n            System.err.println(\"Exception caught: \" + e.getMessage());\n            // Return a default value or rethrow the exception as needed\n            return -1; // Example default value\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(generateRandomNumber(10, 5)); // Invalid range\n        System.out.println(generateRandomNumber(5, 10)); // Valid range\n    }\n}\n```"
  },
  {
    "task": "Implement a program that performs image processing and catches exceptions for unsupported file dimensions.",
    "code": "```java\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.IOException;\nimport javax.imageio.ImageIO;\n\npublic class ImageProcessor {\n\n    public static void main(String[] args) {\n        try {\n            BufferedImage image = ImageIO.read(new File(\"image.jpg\"));\n            processImage(image);\n        } catch (IOException e) {\n            System.out.println(\"Error reading the image file: \" + e.getMessage());\n        } catch (UnsupportedDimensionException e) {\n            System.out.println(\"Unsupported image dimensions: \" + e.getMessage());\n        }\n    }\n\n    public static void processImage(BufferedImage image) throws UnsupportedDimensionException {\n        int width = image.getWidth();\n        int height = image.getHeight();\n\n        if (width > 2000 || height > 2000) {\n            throw new UnsupportedDimensionException(\"Width or height exceeds 2000 pixels.\");\n        }\n\n        // Image processing logic here\n    }\n}\n\nclass UnsupportedDimensionException extends Exception {\n    public UnsupportedDimensionException(String message) {\n        super(message);\n    }\n}\n```"
  },
  {
    "task": "Write a function that manipulates strings and manages exceptions for invalid operations.",
    "code": "```java\npublic class StringManipulator {\n\n    public static void main(String[] args) {\n        try {\n            System.out.println(manipulateString(\"Hello, World!\", 5));\n            System.out.println(manipulateString(\"Java\", -1));\n        } catch (IllegalArgumentException e) {\n            System.out.println(\"Caught exception: \" + e.getMessage());\n        }\n    }\n\n    public static String manipulateString(String input, int index) {\n        if (input == null) {\n            throw new IllegalArgumentException(\"Input string cannot be null.\");\n        }\n        if (index < 0 || index >= input.length()) {\n            throw new IllegalArgumentException(\"Index out of bounds.\");\n        }\n        \n        try {\n            StringBuilder result = new StringBuilder(input);\n            result.setCharAt(index, Character.toUpperCase(result.charAt(index)));\n            return result.toString();\n        } catch (Exception e) {\n            throw new IllegalArgumentException(\"An error occurred during string manipulation.\", e);\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a script that automates tasks and handles exceptions for missing dependencies.",
    "code": "```java\nimport java.io.IOException;\n\npublic class TaskAutomation {\n\n    public static void main(String[] args) {\n        try {\n            // Simulate a task that requires a dependency\n            runTaskWithDependency();\n        } catch (MissingDependencyException e) {\n            System.err.println(\"Error: \" + e.getMessage());\n            System.err.println(\"Please install the required dependencies and try again.\");\n        }\n    }\n\n    private static void runTaskWithDependency() throws MissingDependencyException {\n        // Check for a hypothetical dependency\n        boolean isDependencyAvailable = checkDependency();\n\n        if (!isDependencyAvailable) {\n            throw new MissingDependencyException(\"Required dependency is missing.\");\n        }\n\n        // Proceed with the task if the dependency is available\n        System.out.println(\"Task is running with all dependencies available.\");\n    }\n\n    private static boolean checkDependency() {\n        // Simulate checking for a dependency\n        // In a real scenario, you might check for a library, environment variable, etc.\n        return false; // Assume the dependency is missing for this example\n    }\n}\n\nclass MissingDependencyException extends Exception {\n    public MissingDependencyException(String message) {\n        super(message);\n    }\n}\n```"
  },
  {
    "task": "Develop a function that accesses nested data structures and manages key access exceptions.",
    "code": "```java\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class NestedDataAccess {\n\n    public static Object accessNestedData(Map<String, Object> data, String... keys) {\n        try {\n            Map<String, Object> currentMap = data;\n            for (int i = 0; i < keys.length - 1; i++) {\n                currentMap = (Map<String, Object>) currentMap.get(keys[i]);\n                if (currentMap == null) {\n                    throw new NullPointerException(\"Key not found: \" + keys[i]);\n                }\n            }\n            return currentMap.get(keys[keys.length - 1]);\n        } catch (ClassCastException | NullPointerException e) {\n            System.out.println(\"Error accessing nested data: \" + e.getMessage());\n            return null;\n        }\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> data = new HashMap<>();\n        Map<String, Object> level1 = new HashMap<>();\n        Map<String, Object> level2 = new HashMap<>();\n        level2.put(\"key3\", \"value3\");\n        level1.put(\"key2\", level2);\n        data.put(\"key1\", level1);\n\n        System.out.println(accessNestedData(data, \"key1\", \"key2\", \"key3\")); // Outputs: value3\n        System.out.println(accessNestedData(data, \"key1\", \"key2\", \"nonexistentKey\")); // Error message\n    }\n}\n```"
  },
  {
    "task": "Design a program that synchronizes data between sources and handles data mismatch exceptions.",
    "code": "```java\nimport java.util.List;\nimport java.util.ArrayList;\n\nclass DataMismatchException extends Exception {\n    public DataMismatchException(String message) {\n        super(message);\n    }\n}\n\nclass DataSource {\n    private List<String> data;\n\n    public DataSource(List<String> data) {\n        this.data = data;\n    }\n\n    public List<String> getData() {\n        return data;\n    }\n}\n\nclass DataSynchronizer {\n    public void synchronize(DataSource source1, DataSource source2) throws DataMismatchException {\n        List<String> data1 = source1.getData();\n        List<String> data2 = source2.getData();\n\n        if (data1.size() != data2.size()) {\n            throw new DataMismatchException(\"Data size mismatch between sources.\");\n        }\n\n        for (int i = 0; i < data1.size(); i++) {\n            if (!data1.get(i).equals(data2.get(i))) {\n                throw new DataMismatchException(\"Data mismatch at index \" + i + \": \" + data1.get(i) + \" != \" + data2.get(i));\n            }\n        }\n\n        System.out.println(\"Data synchronized successfully.\");\n    }\n}\n\npublic class DataSyncApp {\n    public static void main(String[] args) {\n        List<String> data1 = new ArrayList<>();\n        data1.add(\"A\");\n        data1.add(\"B\");\n        data1.add(\"C\");\n\n        List<String> data2 = new ArrayList<>();\n        data2.add(\"A\");\n        data2.add(\"B\");\n        data2.add(\"C\");\n\n        DataSource source1 = new DataSource(data1);\n        DataSource source2 = new DataSource(data2);\n        DataSynchronizer synchronizer = new DataSynchronizer();\n\n        try {\n            synchronizer.synchronize(source1, source2);\n        } catch (DataMismatchException e) {\n            System.err.println(\"Failed to synchronize data: \" + e.getMessage());\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a function that interacts with hardware devices and handles connection failure exceptions.",
    "code": "```java\npublic class HardwareInteraction {\n\n    public static void main(String[] args) {\n        try {\n            interactWithHardware();\n        } catch (ConnectionFailureException e) {\n            System.out.println(\"Connection failed: \" + e.getMessage());\n        }\n    }\n\n    public static void interactWithHardware() throws ConnectionFailureException {\n        boolean connectionSuccessful = attemptConnectionToDevice();\n        if (!connectionSuccessful) {\n            throw new ConnectionFailureException(\"Unable to establish connection with the hardware device.\");\n        }\n        System.out.println(\"Hardware interaction successful.\");\n    }\n\n    private static boolean attemptConnectionToDevice() {\n        // Simulate connection attempt (could be random or based on specific logic)\n        return false;\n    }\n\n    static class ConnectionFailureException extends Exception {\n        public ConnectionFailureException(String message) {\n            super(message);\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a tool that compresses files and manages exceptions for unsupported compression formats.",
    "code": "```java\nimport java.io.*;\nimport java.util.zip.*;\n\npublic class FileCompressor {\n\n    public void compressFile(String sourceFilePath, String destFilePath) {\n        try (FileInputStream fis = new FileInputStream(sourceFilePath);\n             FileOutputStream fos = new FileOutputStream(destFilePath);\n             GZIPOutputStream gzipOS = new GZIPOutputStream(fos)) {\n\n            byte[] buffer = new byte[1024];\n            int len;\n            while ((len = fis.read(buffer)) != -1) {\n                gzipOS.write(buffer, 0, len);\n            }\n\n        } catch (FileNotFoundException e) {\n            System.err.println(\"File not found: \" + e.getMessage());\n        } catch (IOException e) {\n            System.err.println(\"I/O error occurred: \" + e.getMessage());\n        } catch (Exception e) {\n            System.err.println(\"An unexpected error occurred: \" + e.getMessage());\n        }\n    }\n\n    public static void main(String[] args) {\n        if (args.length != 2) {\n            System.out.println(\"Usage: java FileCompressor <source file> <destination file>\");\n            return;\n        }\n\n        FileCompressor compressor = new FileCompressor();\n        compressor.compressFile(args[0], args[1]);\n    }\n}\n```"
  },
  {
    "task": "Implement a function that parses command-line arguments and handles missing argument exceptions.",
    "code": "```java\npublic class CommandLineParser {\n\n    public static void main(String[] args) {\n        try {\n            parseArguments(args);\n        } catch (IllegalArgumentException e) {\n            System.err.println(e.getMessage());\n        }\n    }\n\n    public static void parseArguments(String[] args) {\n        if (args.length == 0) {\n            throw new IllegalArgumentException(\"No command-line arguments provided.\");\n        }\n\n        for (String arg : args) {\n            System.out.println(\"Argument: \" + arg);\n        }\n    }\n}\n```"
  },
  {
    "task": "Develop a program that simulates user interactions and manages timing exceptions.",
    "code": "```java\nimport java.util.Scanner;\nimport java.util.concurrent.TimeUnit;\n\npublic class UserInteractionSimulator {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        try {\n            System.out.println(\"Enter a command:\");\n            String command = scanner.nextLine();\n            \n            simulateProcessing(command);\n            \n            System.out.println(\"Command processed successfully.\");\n        } catch (InterruptedException e) {\n            System.err.println(\"The operation was interrupted.\");\n        } catch (Exception e) {\n            System.err.println(\"An unexpected error occurred: \" + e.getMessage());\n        } finally {\n            scanner.close();\n        }\n    }\n\n    private static void simulateProcessing(String command) throws InterruptedException {\n        if (\"wait\".equalsIgnoreCase(command)) {\n            System.out.println(\"Simulating a delay...\");\n            TimeUnit.SECONDS.sleep(10); // simulate a long processing time\n        } else if (\"interrupt\".equalsIgnoreCase(command)) {\n            throw new InterruptedException(\"Simulated interruption.\");\n        } else {\n            System.out.println(\"Executing command: \" + command);\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a function that encrypts data and handles exceptions for unsupported encryption algorithms.",
    "code": "```java\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.InvalidKeyException;\nimport javax.crypto.NoSuchPaddingException;\nimport java.util.Base64;\n\npublic class Encryptor {\n\n    public static String encrypt(String data) {\n        try {\n            // Generate a key\n            KeyGenerator keyGenerator = KeyGenerator.getInstance(\"AES\");\n            keyGenerator.init(128);\n            SecretKey secretKey = keyGenerator.generateKey();\n\n            // Create a cipher\n            Cipher cipher = Cipher.getInstance(\"AES\");\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n\n            // Encrypt the data\n            byte[] encryptedBytes = cipher.doFinal(data.getBytes());\n            return Base64.getEncoder().encodeToString(encryptedBytes);\n\n        } catch (NoSuchAlgorithmException | NoSuchPaddingException e) {\n            System.err.println(\"Encryption algorithm not supported: \" + e.getMessage());\n        } catch (InvalidKeyException e) {\n            System.err.println(\"Invalid Key: \" + e.getMessage());\n        } catch (Exception e) {\n            System.err.println(\"Unexpected error during encryption: \" + e.getMessage());\n        }\n        return null;\n    }\n\n    public static void main(String[] args) {\n        String encryptedData = encrypt(\"Hello, World!\");\n        if (encryptedData != null) {\n            System.out.println(\"Encrypted Data: \" + encryptedData);\n        } else {\n            System.out.println(\"Encryption failed.\");\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a system that aggregates data and manages exceptions for data inconsistency.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass DataAggregator {\n    private List<Integer> data;\n\n    public DataAggregator() {\n        this.data = new ArrayList<>();\n    }\n\n    public void addData(Integer value) throws DataInconsistencyException {\n        if (value == null) {\n            throw new DataInconsistencyException(\"Data cannot be null\");\n        }\n        data.add(value);\n    }\n\n    public int aggregateData() throws DataInconsistencyException {\n        if (data.isEmpty()) {\n            throw new DataInconsistencyException(\"No data to aggregate\");\n        }\n        int sum = 0;\n        for (Integer value : data) {\n            sum += value;\n        }\n        return sum;\n    }\n}\n\nclass DataInconsistencyException extends Exception {\n    public DataInconsistencyException(String message) {\n        super(message);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        DataAggregator aggregator = new DataAggregator();\n        try {\n            aggregator.addData(10);\n            aggregator.addData(20);\n            aggregator.addData(null);\n        } catch (DataInconsistencyException e) {\n            System.out.println(\"Exception caught: \" + e.getMessage());\n        }\n\n        try {\n            int result = aggregator.aggregateData();\n            System.out.println(\"Aggregated Result: \" + result);\n        } catch (DataInconsistencyException e) {\n            System.out.println(\"Exception caught: \" + e.getMessage());\n        }\n    }\n}\n```"
  },
  {
    "task": "Design a program that processes real-time data streams and handles connection drop exceptions.",
    "code": "```java\nimport java.util.Random;\n\npublic class RealTimeDataProcessor {\n    public static void main(String[] args) {\n        RealTimeDataProcessor processor = new RealTimeDataProcessor();\n        processor.processDataStream();\n    }\n\n    public void processDataStream() {\n        while (true) {\n            try {\n                simulateDataProcessing();\n            } catch (ConnectionDropException e) {\n                System.err.println(\"Connection dropped: \" + e.getMessage());\n                // Attempt to reconnect or handle the drop\n                reconnect();\n            }\n        }\n    }\n\n    private void simulateDataProcessing() throws ConnectionDropException {\n        Random random = new Random();\n        if (random.nextInt(10) < 2) { // Simulate a 20% chance of connection drop\n            throw new ConnectionDropException(\"Simulated connection drop occurred.\");\n        }\n        // Simulate data processing\n        System.out.println(\"Processing data...\");\n        try {\n            Thread.sleep(1000); // Simulate time taken to process data\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n    }\n\n    private void reconnect() {\n        System.out.println(\"Reconnecting...\");\n        try {\n            Thread.sleep(2000); // Simulate time taken to reconnect\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n        System.out.println(\"Reconnected.\");\n    }\n}\n\nclass ConnectionDropException extends Exception {\n    public ConnectionDropException(String message) {\n        super(message);\n    }\n}\n```"
  },
  {
    "task": "Implement a function that performs scientific calculations and manages precision exceptions.",
    "code": "```java\nimport java.math.BigDecimal;\nimport java.math.MathContext;\n\npublic class ScientificCalculator {\n\n    public static BigDecimal performScientificCalculation(BigDecimal value, int precision) {\n        try {\n            MathContext mc = new MathContext(precision);\n            // Example calculation: square root\n            BigDecimal result = value.sqrt(mc);\n            return result;\n        } catch (ArithmeticException e) {\n            System.err.println(\"Precision error: \" + e.getMessage());\n            return BigDecimal.ZERO;\n        }\n    }\n\n    public static void main(String[] args) {\n        BigDecimal value = new BigDecimal(\"2\");\n        int precision = 10;\n        \n        BigDecimal result = performScientificCalculation(value, precision);\n        System.out.println(\"Result: \" + result);\n    }\n}\n```"
  },
  {
    "task": "Write a script that generates reports and handles exceptions for missing data sources.",
    "code": "```java\nimport java.util.Random;\n\npublic class ReportGenerator {\n\n    public static void main(String[] args) {\n        try {\n            generateReport();\n        } catch (MissingDataSourceException e) {\n            System.err.println(\"Error: \" + e.getMessage());\n        }\n    }\n\n    public static void generateReport() throws MissingDataSourceException {\n        if (!isDataSourceAvailable()) {\n            throw new MissingDataSourceException(\"Data source is missing.\");\n        }\n        System.out.println(\"Report generated successfully.\");\n    }\n\n    public static boolean isDataSourceAvailable() {\n        // Simulate data source availability\n        return new Random().nextBoolean();\n    }\n}\n\nclass MissingDataSourceException extends Exception {\n    public MissingDataSourceException(String message) {\n        super(message);\n    }\n}\n```"
  },
  {
    "task": "Create a program that validates digital certificates and manages trust exceptions.",
    "code": "```java\nimport java.security.cert.Certificate;\nimport java.security.cert.CertificateException;\nimport java.security.cert.CertificateFactory;\nimport java.security.cert.X509Certificate;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.security.cert.CertificateExpiredException;\nimport java.security.cert.CertificateNotYetValidException;\n\npublic class CertificateValidator {\n\n    public static void main(String[] args) {\n        try {\n            FileInputStream fis = new FileInputStream(\"path/to/certificate.crt\");\n            CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n            X509Certificate cert = (X509Certificate) cf.generateCertificate(fis);\n\n            validateCertificate(cert);\n        } catch (IOException e) {\n            System.out.println(\"File error: \" + e.getMessage());\n        } catch (CertificateException e) {\n            System.out.println(\"Certificate error: \" + e.getMessage());\n        }\n    }\n\n    public static void validateCertificate(X509Certificate cert) {\n        try {\n            cert.checkValidity();\n            System.out.println(\"Certificate is valid.\");\n        } catch (CertificateExpiredException e) {\n            System.out.println(\"Certificate has expired: \" + e.getMessage());\n        } catch (CertificateNotYetValidException e) {\n            System.out.println(\"Certificate is not yet valid: \" + e.getMessage());\n        }\n    }\n}\n```"
  },
  {
    "task": "Develop a function that schedules tasks and handles exceptions for scheduling conflicts.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class TaskScheduler {\n\n    private Set<String> scheduledTasks;\n\n    public TaskScheduler() {\n        this.scheduledTasks = new HashSet<>();\n    }\n\n    public void scheduleTask(String task) {\n        try {\n            if (scheduledTasks.contains(task)) {\n                throw new SchedulingConflictException(\"Task already scheduled: \" + task);\n            }\n            scheduledTasks.add(task);\n            System.out.println(\"Task scheduled successfully: \" + task);\n        } catch (SchedulingConflictException e) {\n            System.err.println(\"Error scheduling task: \" + e.getMessage());\n        }\n    }\n\n    private static class SchedulingConflictException extends Exception {\n        public SchedulingConflictException(String message) {\n            super(message);\n        }\n    }\n\n    public static void main(String[] args) {\n        TaskScheduler scheduler = new TaskScheduler();\n        scheduler.scheduleTask(\"Task1\");\n        scheduler.scheduleTask(\"Task1\"); // This will cause an exception\n    }\n}\n```"
  },
  {
    "task": "Design a system that manages user sessions and handles session timeout exceptions.",
    "code": "```java\nimport java.util.HashMap;\nimport java.util.Map;\n\nclass SessionTimeoutException extends Exception {\n    public SessionTimeoutException(String message) {\n        super(message);\n    }\n}\n\nclass Session {\n    private String userId;\n    private long lastAccessTime;\n    private static final long TIMEOUT_DURATION = 300000; // Example: 5 minutes in milliseconds\n    \n    public Session(String userId) {\n        this.userId = userId;\n        this.lastAccessTime = System.currentTimeMillis();\n    }\n\n    public String getUserId() {\n        return userId;\n    }\n\n    public void refresh() {\n        this.lastAccessTime = System.currentTimeMillis();\n    }\n\n    public boolean isExpired() {\n        return (System.currentTimeMillis() - lastAccessTime) > TIMEOUT_DURATION;\n    }\n}\n\nclass SessionManager {\n    private Map<String, Session> sessions = new HashMap<>();\n\n    public void createSession(String userId) {\n        sessions.put(userId, new Session(userId));\n    }\n\n    public void accessSession(String userId) throws SessionTimeoutException {\n        Session session = sessions.get(userId);\n        if (session == null) {\n            throw new SessionTimeoutException(\"Session not found for user: \" + userId);\n        }\n        if (session.isExpired()) {\n            sessions.remove(userId);\n            throw new SessionTimeoutException(\"Session has expired for user: \" + userId);\n        }\n        session.refresh();\n    }\n\n    public void endSession(String userId) {\n        sessions.remove(userId);\n    }\n}\n\npublic class SessionManagementSystem {\n    public static void main(String[] args) {\n        SessionManager sessionManager = new SessionManager();\n        \n        try {\n            sessionManager.createSession(\"user1\");\n            // Simulate some operations\n            Thread.sleep(1000); // Sleep for 1 second\n            sessionManager.accessSession(\"user1\");\n            \n            // Simulate session timeout\n            Thread.sleep(310000); // Sleep for 310 seconds\n            sessionManager.accessSession(\"user1\");\n        } catch (SessionTimeoutException | InterruptedException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a function that processes audio files and manages exceptions for unsupported audio formats.",
    "code": "```java\nimport java.io.File;\nimport java.io.IOException;\n\npublic class AudioProcessor {\n\n    public void processAudioFile(String filePath) {\n        try {\n            File audioFile = new File(filePath);\n            if (!isSupportedFormat(audioFile)) {\n                throw new UnsupportedAudioFormatException(\"Unsupported audio format: \" + filePath);\n            }\n            // Process the audio file\n            System.out.println(\"Processing audio file: \" + filePath);\n        } catch (UnsupportedAudioFormatException e) {\n            System.err.println(e.getMessage());\n        } catch (IOException e) {\n            System.err.println(\"IO error occurred while processing the file: \" + e.getMessage());\n        }\n    }\n\n    private boolean isSupportedFormat(File audioFile) throws IOException {\n        // Logic to determine if the audio file format is supported\n        String fileName = audioFile.getName().toLowerCase();\n        return fileName.endsWith(\".mp3\") || fileName.endsWith(\".wav\");\n    }\n\n    public static void main(String[] args) {\n        AudioProcessor processor = new AudioProcessor();\n        processor.processAudioFile(\"example.mp3\");\n        processor.processAudioFile(\"example.unsupported\");\n    }\n}\n\nclass UnsupportedAudioFormatException extends Exception {\n    public UnsupportedAudioFormatException(String message) {\n        super(message);\n    }\n}\n```"
  },
  {
    "task": "Create a service that sends notifications and handles exceptions for unreachable destinations.",
    "code": "```java\npublic class NotificationService {\n\n    public void sendNotification(String destination, String message) {\n        try {\n            if (destination == null || destination.isEmpty()) {\n                throw new IllegalArgumentException(\"Destination is unreachable or invalid.\");\n            }\n            // Simulate sending a notification\n            System.out.println(\"Sending notification to: \" + destination);\n            System.out.println(\"Message: \" + message);\n        } catch (IllegalArgumentException e) {\n            System.err.println(\"Error: \" + e.getMessage());\n        } catch (Exception e) {\n            System.err.println(\"An unexpected error occurred: \" + e.getMessage());\n        }\n    }\n\n    public static void main(String[] args) {\n        NotificationService service = new NotificationService();\n        service.sendNotification(\"\", \"Hello, World!\");\n        service.sendNotification(\"user@example.com\", \"Hello, World!\");\n    }\n}\n```"
  },
  {
    "task": "Implement a program that performs data migration and manages data transformation exceptions.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class DataMigration {\n    public static void main(String[] args) {\n        List<String> dataToMigrate = List.of(\"123\", \"456\", \"abc\", \"789\");\n        List<Integer> migratedData = new ArrayList<>();\n\n        for (String data : dataToMigrate) {\n            try {\n                int transformedData = transformData(data);\n                migratedData.add(transformedData);\n            } catch (DataTransformationException e) {\n                System.err.println(\"Error transforming data: \" + e.getMessage());\n            }\n        }\n\n        System.out.println(\"Migrated data: \" + migratedData);\n    }\n\n    private static int transformData(String data) throws DataTransformationException {\n        try {\n            return Integer.parseInt(data);\n        } catch (NumberFormatException e) {\n            throw new DataTransformationException(\"Invalid data format for transformation: \" + data);\n        }\n    }\n}\n\nclass DataTransformationException extends Exception {\n    public DataTransformationException(String message) {\n        super(message);\n    }\n}\n```"
  },
  {
    "task": "Develop a function that processes video files and handles codec compatibility exceptions.",
    "code": "```java\nimport java.io.File;\n\npublic class VideoProcessor {\n\n    public void processVideoFile(String filePath) {\n        try {\n            File videoFile = new File(filePath);\n            if (!videoFile.exists()) {\n                throw new Exception(\"File does not exist.\");\n            }\n            // Simulate processing video file\n            if (!isCodecCompatible(videoFile)) {\n                throw new CodecCompatibilityException(\"Incompatible codec.\");\n            }\n            System.out.println(\"Processing video file: \" + videoFile.getName());\n        } catch (CodecCompatibilityException e) {\n            System.err.println(\"Error: \" + e.getMessage());\n        } catch (Exception e) {\n            System.err.println(\"An error occurred: \" + e.getMessage());\n        }\n    }\n\n    private boolean isCodecCompatible(File videoFile) {\n        // Simulate codec compatibility check\n        return false; // Assuming incompatibility for demonstration\n    }\n\n    public static void main(String[] args) {\n        VideoProcessor processor = new VideoProcessor();\n        processor.processVideoFile(\"sample_video.mp4\");\n    }\n}\n\nclass CodecCompatibilityException extends Exception {\n    public CodecCompatibilityException(String message) {\n        super(message);\n    }\n}\n```"
  },
  {
    "task": "Write a function that manages memory allocation and catches out-of-memory exceptions.",
    "code": "```java\npublic class MemoryManager {\n\n    public static void main(String[] args) {\n        try {\n            allocateMemory();\n        } catch (OutOfMemoryError e) {\n            System.err.println(\"Out of memory: \" + e.getMessage());\n        }\n    }\n\n    public static void allocateMemory() {\n        try {\n            // Attempt to allocate a large amount of memory\n            int[] largeArray = new int[Integer.MAX_VALUE];\n        } catch (OutOfMemoryError e) {\n            System.out.println(\"Caught an out-of-memory error during allocation.\");\n            throw e;\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a program that processes financial transactions and handles currency conversion exceptions.",
    "code": "```java\nimport java.util.HashMap;\nimport java.util.Map;\n\nclass CurrencyConversionException extends Exception {\n    public CurrencyConversionException(String message) {\n        super(message);\n    }\n}\n\nclass TransactionProcessor {\n    private Map<String, Double> exchangeRates;\n\n    public TransactionProcessor() {\n        exchangeRates = new HashMap<>();\n        exchangeRates.put(\"USD\", 1.0);\n        exchangeRates.put(\"EUR\", 0.85);\n        exchangeRates.put(\"JPY\", 110.0);\n    }\n\n    public double convertCurrency(String fromCurrency, String toCurrency, double amount) throws CurrencyConversionException {\n        if (!exchangeRates.containsKey(fromCurrency) || !exchangeRates.containsKey(toCurrency)) {\n            throw new CurrencyConversionException(\"Currency conversion rate not available for: \" + fromCurrency + \" to \" + toCurrency);\n        }\n        double fromRate = exchangeRates.get(fromCurrency);\n        double toRate = exchangeRates.get(toCurrency);\n        return (amount / fromRate) * toRate;\n    }\n\n    public void processTransaction(String fromCurrency, String toCurrency, double amount) {\n        try {\n            double convertedAmount = convertCurrency(fromCurrency, toCurrency, amount);\n            System.out.println(\"Processed transaction: \" + amount + \" \" + fromCurrency + \" = \" + convertedAmount + \" \" + toCurrency);\n        } catch (CurrencyConversionException e) {\n            System.err.println(\"Error processing transaction: \" + e.getMessage());\n        }\n    }\n}\n\npublic class FinancialTransactionApp {\n    public static void main(String[] args) {\n        TransactionProcessor processor = new TransactionProcessor();\n        processor.processTransaction(\"USD\", \"EUR\", 100);\n        processor.processTransaction(\"EUR\", \"JPY\", 150);\n        processor.processTransaction(\"USD\", \"INR\", 200); // This will cause an exception\n    }\n}\n```"
  },
  {
    "task": "Design a function that interacts with cloud storage and manages access permission exceptions.",
    "code": "```java\nimport java.io.IOException;\n\npublic class CloudStorageHandler {\n\n    public void accessCloudStorage() {\n        try {\n            // Simulated cloud storage access\n            boolean hasPermission = checkPermission();\n            if (!hasPermission) {\n                throw new AccessDeniedException(\"Access denied: Insufficient permissions.\");\n            }\n            // Simulate operation on cloud storage\n            performCloudOperation();\n        } catch (AccessDeniedException e) {\n            System.err.println(\"Exception: \" + e.getMessage());\n        } catch (IOException e) {\n            System.err.println(\"IO Exception occurred: \" + e.getMessage());\n        }\n    }\n    \n    private boolean checkPermission() {\n        // Placeholder method to simulate permission check\n        return false; // Simulating permission denial\n    }\n    \n    private void performCloudOperation() throws IOException {\n        // Placeholder method to simulate cloud operation\n        // Throw IOException if any I/O operation fails\n        throw new IOException(\"Failed to perform cloud operation.\");\n    }\n    \n    public static void main(String[] args) {\n        CloudStorageHandler handler = new CloudStorageHandler();\n        handler.accessCloudStorage();\n    }\n}\n\nclass AccessDeniedException extends Exception {\n    public AccessDeniedException(String message) {\n        super(message);\n    }\n}\n```"
  },
  {
    "task": "Implement a script that automates deployment and handles exceptions for missing configuration files.",
    "code": "```java\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class DeploymentAutomation {\n\n    public static void main(String[] args) {\n        try {\n            deployApplication();\n        } catch (MissingConfigurationException e) {\n            System.err.println(\"Deployment failed: \" + e.getMessage());\n        }\n    }\n\n    public static void deployApplication() throws MissingConfigurationException {\n        String configFilePath = \"config/deployment-config.json\";\n        \n        if (!Files.exists(Paths.get(configFilePath))) {\n            throw new MissingConfigurationException(\"Configuration file is missing: \" + configFilePath);\n        }\n        \n        // Simulate deployment process\n        try {\n            System.out.println(\"Reading configuration file...\");\n            String configContent = new String(Files.readAllBytes(Paths.get(configFilePath)));\n            System.out.println(\"Configuration content: \" + configContent);\n            \n            System.out.println(\"Starting deployment...\");\n            // Simulate deployment logic here...\n            System.out.println(\"Deployment successful!\");\n        } catch (IOException e) {\n            throw new MissingConfigurationException(\"Error reading configuration file: \" + e.getMessage());\n        }\n    }\n}\n\nclass MissingConfigurationException extends Exception {\n    public MissingConfigurationException(String message) {\n        super(message);\n    }\n}\n```"
  },
  {
    "task": "Write a function that normalizes data and handles exceptions for invalid data ranges.",
    "code": "```java\npublic class DataNormalizer {\n\n    public static double normalizeData(double value, double min, double max) throws IllegalArgumentException {\n        if (min >= max) {\n            throw new IllegalArgumentException(\"Invalid range: min should be less than max.\");\n        }\n        if (value < min || value > max) {\n            throw new IllegalArgumentException(\"Value out of range: \" + value);\n        }\n        return (value - min) / (max - min);\n    }\n\n    public static void main(String[] args) {\n        try {\n            double normalizedValue = normalizeData(5.0, 0.0, 10.0);\n            System.out.println(\"Normalized Value: \" + normalizedValue);\n        } catch (IllegalArgumentException e) {\n            System.out.println(\"Error: \" + e.getMessage());\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a system that monitors application performance and handles threshold breach exceptions.",
    "code": "```java\nimport java.util.Random;\n\nclass PerformanceMonitorException extends Exception {\n    public PerformanceMonitorException(String message) {\n        super(message);\n    }\n}\n\nclass PerformanceMonitor {\n    private static final int THRESHOLD = 80;\n\n    public void checkPerformance(int metricValue) throws PerformanceMonitorException {\n        if (metricValue > THRESHOLD) {\n            throw new PerformanceMonitorException(\"Threshold breached! Current metric: \" + metricValue);\n        }\n    }\n\n    public static void main(String[] args) {\n        PerformanceMonitor monitor = new PerformanceMonitor();\n        Random random = new Random();\n\n        for (int i = 0; i < 5; i++) {\n            int metricValue = random.nextInt(100);\n            try {\n                monitor.checkPerformance(metricValue);\n                System.out.println(\"Metric is within acceptable range: \" + metricValue);\n            } catch (PerformanceMonitorException e) {\n                System.out.println(e.getMessage());\n            }\n        }\n    }\n}\n```"
  },
  {
    "task": "Develop a program that processes social media data and manages API limit exceptions.",
    "code": "```java\nimport java.util.Random;\n\nclass SocialMediaDataProcessor {\n    private static final int API_CALL_LIMIT = 5;\n    private int apiCallCount = 0;\n\n    public void processData() {\n        try {\n            while (true) {\n                makeApiCall();\n            }\n        } catch (ApiLimitException e) {\n            System.out.println(\"Error: \" + e.getMessage());\n        }\n    }\n\n    private void makeApiCall() throws ApiLimitException {\n        if (apiCallCount >= API_CALL_LIMIT) {\n            throw new ApiLimitException(\"API call limit exceeded\");\n        }\n        // Simulate API call\n        System.out.println(\"Processing social media data...\");\n        apiCallCount++;\n        // Simulate random exception\n        if (new Random().nextInt(10) > 7) {\n            throw new ApiLimitException(\"Random API error occurred\");\n        }\n    }\n\n    public static void main(String[] args) {\n        SocialMediaDataProcessor processor = new SocialMediaDataProcessor();\n        processor.processData();\n    }\n}\n\nclass ApiLimitException extends Exception {\n    public ApiLimitException(String message) {\n        super(message);\n    }\n}\n```"
  },
  {
    "task": "Design a function that integrates with payment gateways and handles payment failure exceptions.",
    "code": "```java\nimport java.util.Random;\n\npublic class PaymentProcessor {\n\n    public static void main(String[] args) {\n        try {\n            processPayment(\"12345\", 100.00);\n        } catch (PaymentFailedException e) {\n            System.out.println(\"Payment failed: \" + e.getMessage());\n        }\n    }\n\n    public static void processPayment(String paymentId, double amount) throws PaymentFailedException {\n        try {\n            if (simulatePaymentGateway()) {\n                System.out.println(\"Payment successful for ID: \" + paymentId);\n            } else {\n                throw new PaymentFailedException(\"Payment gateway error for ID: \" + paymentId);\n            }\n        } catch (Exception e) {\n            throw new PaymentFailedException(\"An error occurred while processing payment ID: \" + paymentId, e);\n        }\n    }\n\n    private static boolean simulatePaymentGateway() {\n        // Simulate random success or failure\n        Random random = new Random();\n        return random.nextBoolean();\n    }\n}\n\nclass PaymentFailedException extends Exception {\n    public PaymentFailedException(String message) {\n        super(message);\n    }\n\n    public PaymentFailedException(String message, Throwable cause) {\n        super(message, cause);\n    }\n}\n```"
  },
  {
    "task": "Write a function that backs up data and handles exceptions for unavailable storage media.",
    "code": "```java\nimport java.io.IOException;\n\npublic class DataBackup {\n\n    public static void main(String[] args) {\n        try {\n            backupData();\n        } catch (StorageUnavailableException e) {\n            System.err.println(\"Backup failed: \" + e.getMessage());\n        }\n    }\n\n    public static void backupData() throws StorageUnavailableException {\n        try {\n            // Simulated backup logic\n            if (!isStorageAvailable()) {\n                throw new IOException(\"Storage media is unavailable\");\n            }\n            System.out.println(\"Data backed up successfully\");\n        } catch (IOException e) {\n            throw new StorageUnavailableException(\"Unable to access storage media\", e);\n        }\n    }\n\n    public static boolean isStorageAvailable() {\n        // Simulated check for storage availability\n        return false; // Assume storage is unavailable\n    }\n}\n\nclass StorageUnavailableException extends Exception {\n    public StorageUnavailableException(String message, Throwable cause) {\n        super(message, cause);\n    }\n}\n```"
  },
  {
    "task": "Create a tool that manages software updates and handles exceptions for version conflicts.",
    "code": "```java\npublic class SoftwareUpdateManager {\n\n    public static void main(String[] args) {\n        try {\n            manageUpdate(\"1.0\", \"1.0\");\n        } catch (VersionConflictException e) {\n            System.out.println(\"Exception caught: \" + e.getMessage());\n        }\n    }\n\n    public static void manageUpdate(String currentVersion, String newVersion) throws VersionConflictException {\n        if (currentVersion.equals(newVersion)) {\n            throw new VersionConflictException(\"Version conflict: The new version is the same as the current version.\");\n        }\n        System.out.println(\"Update from version \" + currentVersion + \" to version \" + newVersion + \" is successful.\");\n    }\n}\n\nclass VersionConflictException extends Exception {\n    public VersionConflictException(String message) {\n        super(message);\n    }\n}\n```"
  },
  {
    "task": "Implement a program that performs sentiment analysis and manages exceptions for ambiguous texts.",
    "code": "```java\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class SentimentAnalysis {\n\n    private static final Map<String, Integer> SENTIMENT_DICTIONARY = new HashMap<>();\n\n    static {\n        SENTIMENT_DICTIONARY.put(\"happy\", 1);\n        SENTIMENT_DICTIONARY.put(\"sad\", -1);\n        SENTIMENT_DICTIONARY.put(\"neutral\", 0);\n        // Add more words as needed\n    }\n\n    public static void main(String[] args) {\n        String text = \"I am happy but also sad.\";\n\n        try {\n            int sentimentScore = analyzeSentiment(text);\n            System.out.println(\"Sentiment score: \" + sentimentScore);\n        } catch (AmbiguousTextException e) {\n            System.err.println(\"Exception: \" + e.getMessage());\n        }\n    }\n\n    private static int analyzeSentiment(String text) throws AmbiguousTextException {\n        int score = 0;\n        String[] words = text.toLowerCase().split(\"\\\\W+\");\n        boolean hasPositive = false;\n        boolean hasNegative = false;\n\n        for (String word : words) {\n            if (SENTIMENT_DICTIONARY.containsKey(word)) {\n                int wordScore = SENTIMENT_DICTIONARY.get(word);\n                score += wordScore;\n                if (wordScore > 0) {\n                    hasPositive = true;\n                } else if (wordScore < 0) {\n                    hasNegative = true;\n                }\n            }\n        }\n\n        if (hasPositive && hasNegative) {\n            throw new AmbiguousTextException(\"Text contains both positive and negative sentiments.\");\n        }\n\n        return score;\n    }\n}\n\nclass AmbiguousTextException extends Exception {\n    public AmbiguousTextException(String message) {\n        super(message);\n    }\n}\n```"
  },
  {
    "task": "Develop a function that manages user authentication and handles credential mismatch exceptions.",
    "code": "```java\npublic class AuthenticationManager {\n\n    public static void main(String[] args) {\n        try {\n            authenticateUser(\"username\", \"wrongPassword\");\n        } catch (CredentialMismatchException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n\n    public static void authenticateUser(String username, String password) throws CredentialMismatchException {\n        String correctUsername = \"username\";\n        String correctPassword = \"password\";\n\n        if (!correctUsername.equals(username) || !correctPassword.equals(password)) {\n            throw new CredentialMismatchException(\"Credentials do not match!\");\n        }\n\n        System.out.println(\"User authenticated successfully.\");\n    }\n}\n\nclass CredentialMismatchException extends Exception {\n    public CredentialMismatchException(String message) {\n        super(message);\n    }\n}\n```"
  },
  {
    "task": "Write a program that processes geographic data and handles exceptions for invalid coordinates.",
    "code": "```java\npublic class GeoDataProcessor {\n\n    public static void main(String[] args) {\n        double[] latitudes = {45.0, -91.0, 60.5}; // Example latitudes\n        double[] longitudes = {120.0, 200.0, -75.0}; // Example longitudes\n\n        for (int i = 0; i < latitudes.length; i++) {\n            try {\n                processCoordinates(latitudes[i], longitudes[i]);\n            } catch (InvalidCoordinateException e) {\n                System.out.println(\"Error: \" + e.getMessage());\n            }\n        }\n    }\n\n    public static void processCoordinates(double latitude, double longitude) throws InvalidCoordinateException {\n        if (latitude < -90.0 || latitude > 90.0) {\n            throw new InvalidCoordinateException(\"Invalid latitude: \" + latitude);\n        }\n        if (longitude < -180.0 || longitude > 180.0) {\n            throw new InvalidCoordinateException(\"Invalid longitude: \" + longitude);\n        }\n        System.out.println(\"Processing coordinates: (\" + latitude + \", \" + longitude + \")\");\n    }\n}\n\nclass InvalidCoordinateException extends Exception {\n    public InvalidCoordinateException(String message) {\n        super(message);\n    }\n}\n```"
  },
  {
    "task": "Create a script that manages network configurations and handles exceptions for invalid syntax.",
    "code": "```java\nimport java.util.Scanner;\n\npublic class NetworkConfigManager {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"Enter network configuration:\");\n\n        String config = scanner.nextLine();\n        try {\n            validateConfig(config);\n            System.out.println(\"Configuration is valid.\");\n            // Further processing of the configuration\n        } catch (InvalidConfigException e) {\n            System.err.println(\"Error: \" + e.getMessage());\n        } finally {\n            scanner.close();\n        }\n    }\n\n    private static void validateConfig(String config) throws InvalidConfigException {\n        if (config == null || config.isEmpty()) {\n            throw new InvalidConfigException(\"Configuration cannot be null or empty.\");\n        }\n        if (!config.matches(\"^\\\\w+=\\\\w+(;\\\\w+=\\\\w+)*$\")) { // Simple regex for key=value;key=value\n            throw new InvalidConfigException(\"Invalid configuration syntax.\");\n        }\n    }\n}\n\nclass InvalidConfigException extends Exception {\n    public InvalidConfigException(String message) {\n        super(message);\n    }\n}\n```"
  },
  {
    "task": "Design a function that processes biometric data and handles exceptions for sensor errors.",
    "code": "```java\npublic class BiometricProcessor {\n\n    public void processBiometricData() {\n        try {\n            // Simulate processing biometric data\n            processSensorData();\n        } catch (SensorException e) {\n            System.err.println(\"Error processing sensor data: \" + e.getMessage());\n        }\n    }\n\n    private void processSensorData() throws SensorException {\n        // Simulate a scenario where a sensor error might occur\n        if (Math.random() > 0.5) {\n            throw new SensorException(\"Sensor error detected.\");\n        }\n        System.out.println(\"Biometric data processed successfully.\");\n    }\n\n    public static void main(String[] args) {\n        BiometricProcessor processor = new BiometricProcessor();\n        processor.processBiometricData();\n    }\n}\n\nclass SensorException extends Exception {\n    public SensorException(String message) {\n        super(message);\n    }\n}\n```"
  },
  {
    "task": "Implement a system that manages access control and handles exceptions for unauthorized access attempts.",
    "code": "```java\npublic class AccessControlSystem {\n    private boolean hasAccess;\n\n    public AccessControlSystem(boolean initialAccess) {\n        this.hasAccess = initialAccess;\n    }\n\n    public void requestAccess() {\n        try {\n            checkAccess();\n            System.out.println(\"Access granted.\");\n        } catch (UnauthorizedAccessException e) {\n            System.out.println(\"Access denied: \" + e.getMessage());\n        }\n    }\n\n    private void checkAccess() throws UnauthorizedAccessException {\n        if (!hasAccess) {\n            throw new UnauthorizedAccessException(\"User does not have access rights.\");\n        }\n    }\n\n    public void setAccess(boolean access) {\n        this.hasAccess = access;\n    }\n\n    public static void main(String[] args) {\n        AccessControlSystem system = new AccessControlSystem(false);\n        system.requestAccess();\n        \n        system.setAccess(true);\n        system.requestAccess();\n    }\n}\n\nclass UnauthorizedAccessException extends Exception {\n    public UnauthorizedAccessException(String message) {\n        super(message);\n    }\n}\n```"
  },
  {
    "task": "Write a function that performs load balancing and handles exceptions for unreachable nodes.",
    "code": "```java\nimport java.util.List;\n\npublic class LoadBalancer {\n\n    public void performLoadBalancing(List<String> nodes) {\n        for (String node : nodes) {\n            try {\n                accessNode(node);\n            } catch (NodeUnreachableException e) {\n                System.err.println(\"Node unreachable: \" + node);\n            }\n        }\n    }\n\n    private void accessNode(String node) throws NodeUnreachableException {\n        if (Math.random() < 0.3) { // Simulate a 30% chance of being unreachable\n            throw new NodeUnreachableException(\"Cannot reach node: \" + node);\n        }\n        System.out.println(\"Node accessed: \" + node);\n    }\n\n    public static void main(String[] args) {\n        LoadBalancer lb = new LoadBalancer();\n        lb.performLoadBalancing(List.of(\"Node1\", \"Node2\", \"Node3\"));\n    }\n}\n\nclass NodeUnreachableException extends Exception {\n    public NodeUnreachableException(String message) {\n        super(message);\n    }\n}\n```"
  },
  {
    "task": "Create a program that simulates virtual environments and manages resource allocation exceptions.",
    "code": "```java\nimport java.util.Random;\n\nclass ResourceAllocationException extends Exception {\n    public ResourceAllocationException(String message) {\n        super(message);\n    }\n}\n\nclass VirtualEnvironment {\n    private static final int MAX_RESOURCES = 10;\n    private int allocatedResources = 0;\n\n    public void allocateResources(int resources) throws ResourceAllocationException {\n        if (allocatedResources + resources > MAX_RESOURCES) {\n            throw new ResourceAllocationException(\"Not enough resources available to allocate.\");\n        }\n        allocatedResources += resources;\n    }\n\n    public void releaseResources(int resources) {\n        allocatedResources -= Math.min(resources, allocatedResources);\n    }\n\n    public int getAvailableResources() {\n        return MAX_RESOURCES - allocatedResources;\n    }\n}\n\npublic class VirtualEnvironmentSimulator {\n    public static void main(String[] args) {\n        VirtualEnvironment env = new VirtualEnvironment();\n        Random random = new Random();\n\n        for (int i = 0; i < 5; i++) {\n            int resourcesToAllocate = random.nextInt(5) + 1;\n            try {\n                env.allocateResources(resourcesToAllocate);\n                System.out.println(\"Allocated \" + resourcesToAllocate + \" resources.\");\n            } catch (ResourceAllocationException e) {\n                System.out.println(\"Failed to allocate \" + resourcesToAllocate + \" resources: \" + e.getMessage());\n            }\n            System.out.println(\"Available resources: \" + env.getAvailableResources());\n        }\n    }\n}\n```"
  },
  {
    "task": "Develop a tool that manages digital rights and handles exceptions for unauthorized content access.",
    "code": "```java\npublic class DigitalRightsManager {\n    public static void main(String[] args) {\n        DigitalRightsManager drm = new DigitalRightsManager();\n        try {\n            drm.accessContent(\"user123\", \"content456\");\n        } catch (UnauthorizedAccessException e) {\n            System.out.println(\"Access denied: \" + e.getMessage());\n        }\n    }\n\n    public void accessContent(String userId, String contentId) throws UnauthorizedAccessException {\n        if (!hasAccess(userId, contentId)) {\n            throw new UnauthorizedAccessException(\"User \" + userId + \" is not authorized to access content \" + contentId);\n        }\n        System.out.println(\"Access granted to user \" + userId + \" for content \" + contentId);\n    }\n\n    private boolean hasAccess(String userId, String contentId) {\n        // Simulate access control logic\n        return false; // In a real system, this would check user permissions\n    }\n}\n\nclass UnauthorizedAccessException extends Exception {\n    public UnauthorizedAccessException(String message) {\n        super(message);\n    }\n}\n```"
  },
  {
    "task": "Design a function that synchronizes clocks and handles exceptions for time drift.",
    "code": "```java\nimport java.time.LocalDateTime;\nimport java.time.temporal.ChronoUnit;\n\npublic class ClockSynchronizer {\n\n    public static void synchronizeClocks(LocalDateTime referenceTime, LocalDateTime[] clocks) {\n        for (int i = 0; i < clocks.length; i++) {\n            try {\n                clocks[i] = synchronizeClock(referenceTime, clocks[i]);\n            } catch (TimeDriftException e) {\n                System.err.println(\"Clock \" + i + \" has a time drift issue: \" + e.getMessage());\n            }\n        }\n    }\n\n    private static LocalDateTime synchronizeClock(LocalDateTime referenceTime, LocalDateTime clockTime) throws TimeDriftException {\n        long drift = ChronoUnit.SECONDS.between(clockTime, referenceTime);\n        if (Math.abs(drift) > 5) { // Assuming a drift of more than 5 seconds is unacceptable\n            throw new TimeDriftException(\"Drift of \" + drift + \" seconds.\");\n        }\n        return referenceTime; // Synchronize clock to reference time\n    }\n\n    public static void main(String[] args) {\n        LocalDateTime referenceTime = LocalDateTime.now();\n        LocalDateTime[] clocks = {\n            referenceTime.plusSeconds(2),\n            referenceTime.plusSeconds(10), // This will cause an exception\n            referenceTime.minusSeconds(3)\n        };\n\n        synchronizeClocks(referenceTime, clocks);\n\n        for (LocalDateTime clock : clocks) {\n            System.out.println(clock);\n        }\n    }\n}\n\nclass TimeDriftException extends Exception {\n    public TimeDriftException(String message) {\n        super(message);\n    }\n}\n```"
  },
  {
    "task": "Write a script that manages system backups and handles exceptions for insufficient backup space.",
    "code": "```java\nimport java.io.IOException;\n\npublic class BackupManager {\n    public static void main(String[] args) {\n        try {\n            performBackup();\n        } catch (InsufficientSpaceException e) {\n            System.err.println(\"Backup failed: \" + e.getMessage());\n        }\n    }\n\n    public static void performBackup() throws InsufficientSpaceException {\n        // Simulate checking for backup space\n        boolean hasSufficientSpace = checkBackupSpace();\n\n        if (!hasSufficientSpace) {\n            throw new InsufficientSpaceException(\"Not enough space for backup.\");\n        }\n\n        // Code to perform the backup\n        System.out.println(\"Backup completed successfully.\");\n    }\n\n    public static boolean checkBackupSpace() {\n        // Simulate a space check. This should return false to trigger the exception.\n        return false;\n    }\n}\n\nclass InsufficientSpaceException extends IOException {\n    public InsufficientSpaceException(String message) {\n        super(message);\n    }\n}\n```"
  },
  {
    "task": "Create a program that processes natural language text and handles parsing exceptions.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class TextParser {\n    public static void main(String[] args) {\n        String text = \"This is a sample text for parsing.\";\n        \n        try {\n            List<String> words = parseText(text);\n            System.out.println(\"Parsed words: \" + words);\n        } catch (TextParsingException e) {\n            System.err.println(\"Error parsing text: \" + e.getMessage());\n        }\n    }\n\n    public static List<String> parseText(String text) throws TextParsingException {\n        if (text == null || text.isEmpty()) {\n            throw new TextParsingException(\"Input text is null or empty.\");\n        }\n        try {\n            // Simple parsing logic: split by spaces.\n            return Arrays.asList(text.split(\"\\\\s+\"));\n        } catch (Exception e) {\n            throw new TextParsingException(\"Failed to parse text.\", e);\n        }\n    }\n}\n\nclass TextParsingException extends Exception {\n    public TextParsingException(String message) {\n        super(message);\n    }\n\n    public TextParsingException(String message, Throwable cause) {\n        super(message, cause);\n    }\n}\n```"
  },
  {
    "task": "Implement a function that manages thread execution and handles race condition exceptions.",
    "code": "```java\npublic class ThreadManager {\n\n    public static void main(String[] args) {\n        ThreadManager manager = new ThreadManager();\n        manager.executeThreads();\n    }\n\n    public void executeThreads() {\n        Thread thread1 = new Thread(new Task(), \"Thread-1\");\n        Thread thread2 = new Thread(new Task(), \"Thread-2\");\n\n        try {\n            thread1.start();\n            thread2.start();\n\n            thread1.join();\n            thread2.join();\n        } catch (InterruptedException e) {\n            System.out.println(\"Thread execution interrupted: \" + e.getMessage());\n        } catch (Exception e) {\n            System.out.println(\"An error occurred: \" + e.getMessage());\n        }\n    }\n\n    private static class Task implements Runnable {\n        private static int counter = 0;\n\n        @Override\n        public void run() {\n            try {\n                synchronized (Task.class) {\n                    for (int i = 0; i < 5; i++) {\n                        counter++;\n                        System.out.println(Thread.currentThread().getName() + \": \" + counter);\n                    }\n                }\n            } catch (Exception e) {\n                System.out.println(\"Exception in \" + Thread.currentThread().getName() + \": \" + e.getMessage());\n            }\n        }\n    }\n}\n```"
  },
  {
    "task": "Develop a system that integrates with IoT devices and handles connectivity exceptions.",
    "code": "```java\nimport java.util.Random;\n\npublic class IoTDeviceSystem {\n\n    public static void main(String[] args) {\n        IoTDeviceSystem system = new IoTDeviceSystem();\n        system.connectToDevice();\n    }\n\n    public void connectToDevice() {\n        try {\n            attemptConnection();\n            System.out.println(\"Connected to IoT device successfully.\");\n        } catch (IoTDeviceConnectionException e) {\n            System.err.println(\"Failed to connect to IoT device: \" + e.getMessage());\n        }\n    }\n\n    private void attemptConnection() throws IoTDeviceConnectionException {\n        // Simulate a connection attempt with a random success/failure\n        Random random = new Random();\n        boolean connectionSuccessful = random.nextBoolean();\n\n        if (!connectionSuccessful) {\n            throw new IoTDeviceConnectionException(\"Connection timed out.\");\n        }\n    }\n\n    public static class IoTDeviceConnectionException extends Exception {\n        public IoTDeviceConnectionException(String message) {\n            super(message);\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a function that manages application logging and handles exceptions for log overflow.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Logger {\n    private List<String> logs;\n    private int maxLogs;\n\n    public Logger(int maxLogs) {\n        this.logs = new ArrayList<>();\n        this.maxLogs = maxLogs;\n    }\n\n    public void log(String message) {\n        try {\n            if (logs.size() >= maxLogs) {\n                throw new LogOverflowException(\"Log overflow: Maximum log entries reached.\");\n            }\n            logs.add(message);\n        } catch (LogOverflowException e) {\n            System.err.println(e.getMessage());\n            // Handle overflow, e.g., clear logs or remove oldest entry\n            // For example: logs.remove(0); // remove oldest log\n        }\n    }\n\n    public List<String> getLogs() {\n        return new ArrayList<>(logs);\n    }\n\n    private static class LogOverflowException extends Exception {\n        public LogOverflowException(String message) {\n            super(message);\n        }\n    }\n\n    public static void main(String[] args) {\n        Logger logger = new Logger(5);\n\n        for (int i = 1; i <= 7; i++) {\n            logger.log(\"Log entry \" + i);\n        }\n\n        System.out.println(\"Current Logs: \" + logger.getLogs());\n    }\n}\n```"
  },
  {
    "task": "Create a tool that visualizes data and handles exceptions for unsupported visualization types.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class DataVisualizer {\n\n    private static final List<String> SUPPORTED_TYPES = Arrays.asList(\"bar\", \"line\", \"pie\");\n\n    public static void main(String[] args) {\n        try {\n            visualizeData(\"scatter\");\n        } catch (UnsupportedVisualizationTypeException e) {\n            System.out.println(e.getMessage());\n        }\n\n        try {\n            visualizeData(\"bar\");\n        } catch (UnsupportedVisualizationTypeException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n\n    public static void visualizeData(String type) throws UnsupportedVisualizationTypeException {\n        if (!SUPPORTED_TYPES.contains(type.toLowerCase())) {\n            throw new UnsupportedVisualizationTypeException(\"Unsupported visualization type: \" + type);\n        }\n        System.out.println(\"Visualizing data as a \" + type + \" chart.\");\n    }\n}\n\nclass UnsupportedVisualizationTypeException extends Exception {\n    public UnsupportedVisualizationTypeException(String message) {\n        super(message);\n    }\n}\n```"
  },
  {
    "task": "Design a program that performs genetic algorithm simulations and manages exception for invalid mutations.",
    "code": "```java\nimport java.util.Random;\n\npublic class GeneticAlgorithm {\n\n    public static void main(String[] args) {\n        try {\n            GeneticAlgorithm ga = new GeneticAlgorithm();\n            ga.runSimulation();\n        } catch (InvalidMutationException e) {\n            System.err.println(\"Error: \" + e.getMessage());\n        }\n    }\n\n    public void runSimulation() throws InvalidMutationException {\n        Random random = new Random();\n        for (int i = 0; i < 10; i++) {\n            int mutation = random.nextInt(10);\n            if (!isValidMutation(mutation)) {\n                throw new InvalidMutationException(\"Invalid mutation detected: \" + mutation);\n            }\n            System.out.println(\"Mutation #\" + i + \": \" + mutation);\n        }\n    }\n\n    private boolean isValidMutation(int mutation) {\n        return mutation >= 0 && mutation <= 5;\n    }\n\n    class InvalidMutationException extends Exception {\n        public InvalidMutationException(String message) {\n            super(message);\n        }\n    }\n}\n```"
  },
  {
    "task": "Implement a function that manages distributed transactions and handles consistency exceptions.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass TransactionException extends Exception {\n    public TransactionException(String message) {\n        super(message);\n    }\n}\n\nclass ConsistencyException extends TransactionException {\n    public ConsistencyException(String message) {\n        super(message);\n    }\n}\n\npublic class DistributedTransactionManager {\n\n    public void manageTransactions(List<Runnable> transactions) {\n        List<Runnable> successfulTransactions = new ArrayList<>();\n        try {\n            for (Runnable transaction : transactions) {\n                transaction.run();\n                successfulTransactions.add(transaction);\n            }\n        } catch (Exception e) {\n            handleException(new ConsistencyException(\"Consistency issue occurred during transaction processing.\"));\n        }\n    }\n\n    private void handleException(TransactionException e) {\n        System.err.println(e.getMessage());\n        rollbackTransactions();\n    }\n\n    private void rollbackTransactions() {\n        System.out.println(\"Rolling back transactions...\");\n    }\n\n    public static void main(String[] args) {\n        List<Runnable> transactions = new ArrayList<>();\n        transactions.add(() -> System.out.println(\"Transaction 1 executed\"));\n        transactions.add(() -> { throw new RuntimeException(\"Error in transaction 2\"); });\n        transactions.add(() -> System.out.println(\"Transaction 3 executed\"));\n\n        DistributedTransactionManager manager = new DistributedTransactionManager();\n        manager.manageTransactions(transactions);\n    }\n}\n```"
  },
  {
    "task": "Write a function that handles secure communications and manages encryption key exceptions.",
    "code": "```java\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\n\npublic class SecureCommunication {\n\n    public static void main(String[] args) {\n        try {\n            SecretKey key = generateKey();\n            byte[] encryptedMessage = encryptMessage(\"Hello, World!\", key);\n            System.out.println(\"Encrypted Message: \" + new String(encryptedMessage));\n        } catch (EncryptionKeyException e) {\n            System.err.println(\"Encryption key error: \" + e.getMessage());\n        }\n    }\n\n    public static SecretKey generateKey() throws EncryptionKeyException {\n        try {\n            KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\n            keyGen.init(128);\n            return keyGen.generateKey();\n        } catch (NoSuchAlgorithmException e) {\n            throw new EncryptionKeyException(\"Failed to generate encryption key\", e);\n        }\n    }\n\n    public static byte[] encryptMessage(String message, SecretKey key) throws EncryptionKeyException {\n        try {\n            Cipher cipher = Cipher.getInstance(\"AES\");\n            cipher.init(Cipher.ENCRYPT_MODE, key);\n            return cipher.doFinal(message.getBytes());\n        } catch (NoSuchAlgorithmException | InvalidKeyException e) {\n            throw new EncryptionKeyException(\"Encryption failed due to key error\", e);\n        } catch (Exception e) {\n            throw new EncryptionKeyException(\"General encryption error\", e);\n        }\n    }\n\n    static class EncryptionKeyException extends Exception {\n        public EncryptionKeyException(String message, Throwable cause) {\n            super(message, cause);\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a system that processes sensor data and handles out-of-range value exceptions.",
    "code": "```java\npublic class SensorDataProcessor {\n\n    public static void main(String[] args) {\n        SensorDataProcessor processor = new SensorDataProcessor();\n        try {\n            processor.processSensorData(120);\n        } catch (OutOfRangeException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n\n    public void processSensorData(int sensorValue) throws OutOfRangeException {\n        if (sensorValue < 0 || sensorValue > 100) {\n            throw new OutOfRangeException(\"Sensor value out of range: \" + sensorValue);\n        }\n        System.out.println(\"Sensor value is within range: \" + sensorValue);\n    }\n\n    class OutOfRangeException extends Exception {\n        public OutOfRangeException(String message) {\n            super(message);\n        }\n    }\n}\n```"
  },
  {
    "task": "Develop a program that simulates weather patterns and handles model prediction exceptions.",
    "code": "```java\nimport java.util.Random;\n\nclass WeatherModelException extends Exception {\n    public WeatherModelException(String message) {\n        super(message);\n    }\n}\n\npublic class WeatherSimulation {\n\n    public static void main(String[] args) {\n        try {\n            simulateWeather();\n        } catch (WeatherModelException e) {\n            System.out.println(\"Exception caught: \" + e.getMessage());\n        }\n    }\n\n    public static void simulateWeather() throws WeatherModelException {\n        Random random = new Random();\n        int prediction = random.nextInt(10);\n        \n        if (prediction < 3) {\n            throw new WeatherModelException(\"Prediction model failed due to insufficient data.\");\n        } else {\n            System.out.println(\"Weather prediction is successful. Model output: \" + prediction);\n        }\n    }\n}\n```"
  },
  {
    "task": "Design a function that manages API versioning and handles backward compatibility exceptions.",
    "code": "```java\npublic class ApiVersionManager {\n\n    public static void main(String[] args) {\n        try {\n            handleApiRequest(\"v2\");\n            handleApiRequest(\"v3\");\n            handleApiRequest(\"v1\"); // This should trigger an exception\n        } catch (BackwardCompatibilityException e) {\n            System.out.println(\"Exception: \" + e.getMessage());\n        }\n    }\n\n    public static void handleApiRequest(String version) throws BackwardCompatibilityException {\n        switch (version) {\n            case \"v1\":\n                throw new BackwardCompatibilityException(\"Version \" + version + \" is no longer supported.\");\n            case \"v2\":\n                System.out.println(\"Handling API version 2 request.\");\n                break;\n            case \"v3\":\n                System.out.println(\"Handling API version 3 request.\");\n                break;\n            default:\n                throw new BackwardCompatibilityException(\"Unknown API version: \" + version);\n        }\n    }\n\n    public static class BackwardCompatibilityException extends Exception {\n        public BackwardCompatibilityException(String message) {\n            super(message);\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a tool that converts character encodings and handles unsupported encoding exceptions.",
    "code": "```java\nimport java.nio.charset.Charset;\nimport java.nio.charset.UnsupportedCharsetException;\n\npublic class EncodingConverter {\n\n    public static String convertEncoding(String input, String srcEncoding, String destEncoding) {\n        try {\n            byte[] bytes = input.getBytes(Charset.forName(srcEncoding));\n            return new String(bytes, Charset.forName(destEncoding));\n        } catch (UnsupportedCharsetException e) {\n            System.err.println(\"Unsupported encoding: \" + e.getCharsetName());\n            return null;\n        }\n    }\n\n    public static void main(String[] args) {\n        String originalText = \"Hello, world!\";\n        String srcEncoding = \"UTF-8\";\n        String destEncoding = \"ISO-8859-1\";\n\n        String convertedText = convertEncoding(originalText, srcEncoding, destEncoding);\n        if (convertedText != null) {\n            System.out.println(\"Converted Text: \" + convertedText);\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a program that handles dynamic content generation and manages template parsing exceptions.",
    "code": "```java\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class TemplateEngine {\n    public static void main(String[] args) {\n        TemplateEngine engine = new TemplateEngine();\n        Map<String, String> data = new HashMap<>();\n        data.put(\"name\", \"Alice\");\n        data.put(\"occupation\", \"Engineer\");\n\n        String template = \"Hello, my name is {{name}} and I am an {{occupation}}.\";\n        \n        try {\n            String result = engine.parseTemplate(template, data);\n            System.out.println(result);\n        } catch (TemplateParseException e) {\n            System.err.println(\"Error parsing template: \" + e.getMessage());\n        }\n    }\n\n    public String parseTemplate(String template, Map<String, String> data) throws TemplateParseException {\n        StringBuilder parsedContent = new StringBuilder();\n        int start = 0;\n        \n        while (start < template.length()) {\n            int openBrace = template.indexOf(\"{{\", start);\n            if (openBrace == -1) {\n                parsedContent.append(template.substring(start));\n                break;\n            }\n            \n            parsedContent.append(template.substring(start, openBrace));\n            int closeBrace = template.indexOf(\"}}\", openBrace);\n            if (closeBrace == -1) {\n                throw new TemplateParseException(\"Unmatched opening brace found at position \" + openBrace);\n            }\n            \n            String key = template.substring(openBrace + 2, closeBrace).trim();\n            String value = data.get(key);\n            if (value == null) {\n                throw new TemplateParseException(\"No value found for template key: \" + key);\n            }\n            \n            parsedContent.append(value);\n            start = closeBrace + 2;\n        }\n        \n        return parsedContent.toString();\n    }\n}\n\nclass TemplateParseException extends Exception {\n    public TemplateParseException(String message) {\n        super(message);\n    }\n}\n```"
  },
  {
    "task": "Implement a script that schedules automated tests and handles exceptions for missing test cases.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass TestScheduler {\n    private List<String> testCases = new ArrayList<>();\n\n    public void addTestCase(String testCase) {\n        testCases.add(testCase);\n    }\n\n    public void executeTests() {\n        for (String testCase : testCases) {\n            try {\n                runTest(testCase);\n            } catch (TestCaseNotFoundException e) {\n                System.out.println(\"Exception: \" + e.getMessage());\n            }\n        }\n    }\n\n    private void runTest(String testCase) throws TestCaseNotFoundException {\n        if (testCase == null || testCase.isEmpty()) {\n            throw new TestCaseNotFoundException(\"Test case not found or is empty.\");\n        }\n        // Simulate test execution\n        System.out.println(\"Executing \" + testCase);\n    }\n\n    public static void main(String[] args) {\n        TestScheduler scheduler = new TestScheduler();\n        scheduler.addTestCase(\"Test1\");\n        scheduler.addTestCase(\"\"); // This will cause an exception\n        scheduler.addTestCase(\"Test3\");\n\n        scheduler.executeTests();\n    }\n}\n\nclass TestCaseNotFoundException extends Exception {\n    public TestCaseNotFoundException(String message) {\n        super(message);\n    }\n}\n```"
  },
  {
    "task": "Develop a system that manages virtual machine instances and handles provisioning exceptions.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass VirtualMachine {\n    private String id;\n    private String status;\n\n    public VirtualMachine(String id) {\n        this.id = id;\n        this.status = \"stopped\";\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public String getStatus() {\n        return status;\n    }\n\n    public void start() throws ProvisioningException {\n        if (\"running\".equals(status)) {\n            throw new ProvisioningException(\"VM is already running: \" + id);\n        }\n        status = \"running\";\n    }\n\n    public void stop() throws ProvisioningException {\n        if (\"stopped\".equals(status)) {\n            throw new ProvisioningException(\"VM is already stopped: \" + id);\n        }\n        status = \"stopped\";\n    }\n}\n\nclass ProvisioningException extends Exception {\n    public ProvisioningException(String message) {\n        super(message);\n    }\n}\n\nclass VMManager {\n    private List<VirtualMachine> vmList;\n\n    public VMManager() {\n        vmList = new ArrayList<>();\n    }\n\n    public void addVM(String vmId) {\n        vmList.add(new VirtualMachine(vmId));\n    }\n\n    public void startVM(String vmId) {\n        try {\n            VirtualMachine vm = findVM(vmId);\n            if (vm != null) {\n                vm.start();\n                System.out.println(\"VM started: \" + vmId);\n            } else {\n                System.out.println(\"VM not found: \" + vmId);\n            }\n        } catch (ProvisioningException e) {\n            System.out.println(\"Error starting VM: \" + e.getMessage());\n        }\n    }\n\n    public void stopVM(String vmId) {\n        try {\n            VirtualMachine vm = findVM(vmId);\n            if (vm != null) {\n                vm.stop();\n                System.out.println(\"VM stopped: \" + vmId);\n            } else {\n                System.out.println(\"VM not found: \" + vmId);\n            }\n        } catch (ProvisioningException e) {\n            System.out.println(\"Error stopping VM: \" + e.getMessage());\n        }\n    }\n\n    private VirtualMachine findVM(String vmId) {\n        for (VirtualMachine vm : vmList) {\n            if (vm.getId().equals(vmId)) {\n                return vm;\n            }\n        }\n        return null;\n    }\n}\n\npublic class VMManagementSystem {\n    public static void main(String[] args) {\n        VMManager manager = new VMManager();\n        manager.addVM(\"vm1\");\n        manager.addVM(\"vm2\");\n\n        manager.startVM(\"vm1\");\n        manager.startVM(\"vm1\"); // Attempting to start an already running VM\n        manager.stopVM(\"vm1\");\n        manager.stopVM(\"vm1\"); // Attempting to stop an already stopped VM\n\n        manager.startVM(\"vm3\"); // Attempting to start a non-existing VM\n    }\n}\n```"
  },
  {
    "task": "Write a function that processes credit scores and handles exceptions for missing credit history.",
    "code": "```java\npublic class CreditScoreProcessor {\n\n    public static void main(String[] args) {\n        try {\n            processCreditScore(null);\n        } catch (MissingCreditHistoryException e) {\n            System.out.println(\"Exception caught: \" + e.getMessage());\n        }\n    }\n\n    public static void processCreditScore(Integer creditScore) throws MissingCreditHistoryException {\n        if (creditScore == null) {\n            throw new MissingCreditHistoryException(\"Credit history is missing.\");\n        }\n        \n        // Process the credit score\n        System.out.println(\"Processing credit score: \" + creditScore);\n    }\n}\n\nclass MissingCreditHistoryException extends Exception {\n    public MissingCreditHistoryException(String message) {\n        super(message);\n    }\n}\n```"
  },
  {
    "task": "Create a tool that manages digital certificates and handles expiration exceptions.",
    "code": "```java\nimport java.time.LocalDate;\n\nclass Certificate {\n    private String name;\n    private LocalDate expirationDate;\n\n    public Certificate(String name, LocalDate expirationDate) {\n        this.name = name;\n        this.expirationDate = expirationDate;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public LocalDate getExpirationDate() {\n        return expirationDate;\n    }\n}\n\nclass CertificateExpiredException extends Exception {\n    public CertificateExpiredException(String message) {\n        super(message);\n    }\n}\n\nclass CertificateManager {\n    public void validateCertificate(Certificate cert) throws CertificateExpiredException {\n        if (cert.getExpirationDate().isBefore(LocalDate.now())) {\n            throw new CertificateExpiredException(\"Certificate \" + cert.getName() + \" is expired.\");\n        }\n        System.out.println(\"Certificate \" + cert.getName() + \" is valid.\");\n    }\n}\n\npublic class DigitalCertificateTool {\n    public static void main(String[] args) {\n        Certificate cert1 = new Certificate(\"Cert1\", LocalDate.of(2025, 12, 31));\n        Certificate cert2 = new Certificate(\"Cert2\", LocalDate.of(2020, 12, 31));\n\n        CertificateManager manager = new CertificateManager();\n\n        try {\n            manager.validateCertificate(cert1);\n        } catch (CertificateExpiredException e) {\n            System.err.println(e.getMessage());\n        }\n\n        try {\n            manager.validateCertificate(cert2);\n        } catch (CertificateExpiredException e) {\n            System.err.println(e.getMessage());\n        }\n    }\n}\n```"
  },
  {
    "task": "Design a program that processes genome sequences and handles exceptions for sequence alignment.",
    "code": "```java\nimport java.util.*;\n\nclass GenomeSequenceProcessor {\n\n    public static void main(String[] args) {\n        List<String> sequences = Arrays.asList(\"ATCG\", \"ATG\", \"ATCGG\", \"AT\");\n\n        for (String sequence : sequences) {\n            try {\n                processSequence(sequence);\n            } catch (InvalidSequenceException e) {\n                System.err.println(\"Error processing sequence: \" + e.getMessage());\n            }\n        }\n    }\n\n    public static void processSequence(String sequence) throws InvalidSequenceException {\n        if (sequence.length() < 4) {\n            throw new InvalidSequenceException(\"Sequence is too short for alignment: \" + sequence);\n        }\n        \n        // Simulate sequence alignment processing\n        System.out.println(\"Aligning sequence: \" + sequence);\n    }\n}\n\nclass InvalidSequenceException extends Exception {\n    public InvalidSequenceException(String message) {\n        super(message);\n    }\n}\n```"
  }
]