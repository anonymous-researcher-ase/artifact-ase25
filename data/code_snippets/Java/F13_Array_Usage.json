[
  {
    "task": "Create a function that initializes an array with the first ten prime numbers.",
    "code": "```java\npublic class PrimeArray {\n    public static int[] initializePrimeArray() {\n        return new int[]{2, 3, 5, 7, 11, 13, 17, 19, 23, 29};\n    }\n    \n    public static void main(String[] args) {\n        int[] primeArray = initializePrimeArray();\n        for (int prime : primeArray) {\n            System.out.println(prime);\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a program to reverse the elements of a given array.",
    "code": "```java\npublic class ReverseArray {\n    public static void main(String[] args) {\n        int[] array = {1, 2, 3, 4, 5};\n        int[] reversedArray = reverseArray(array);\n\n        for (int num : reversedArray) {\n            System.out.print(num + \" \");\n        }\n    }\n\n    public static int[] reverseArray(int[] array) {\n        int[] reversed = new int[array.length];\n        for (int i = 0; i < array.length; i++) {\n            reversed[i] = array[array.length - 1 - i];\n        }\n        return reversed;\n    }\n}\n```"
  },
  {
    "task": "Implement an algorithm that finds the maximum value in an array of integers.",
    "code": "```java\npublic class MaxValueInArray {\n    public static int findMaxValue(int[] numbers) {\n        if (numbers == null || numbers.length == 0) {\n            throw new IllegalArgumentException(\"Array must not be null or empty\");\n        }\n        int maxValue = numbers[0];\n        for (int i = 1; i < numbers.length; i++) {\n            if (numbers[i] > maxValue) {\n                maxValue = numbers[i];\n            }\n        }\n        return maxValue;\n    }\n\n    public static void main(String[] args) {\n        int[] numbers = {3, 5, 7, 2, 8, -1, 4, 10, 12};\n        System.out.println(\"The maximum value is: \" + findMaxValue(numbers));\n    }\n}\n```"
  },
  {
    "task": "Design a routine to rotate an array to the right by a given number of steps.",
    "code": "```java\npublic class ArrayRotator {\n    public static void rotateRight(int[] array, int steps) {\n        if (array == null || array.length == 0) return;\n        int length = array.length;\n        steps = steps % length;\n        if (steps == 0) return;\n\n        reverseArray(array, 0, length - 1);\n        reverseArray(array, 0, steps - 1);\n        reverseArray(array, steps, length - 1);\n    }\n\n    private static void reverseArray(int[] array, int start, int end) {\n        while (start < end) {\n            int temp = array[start];\n            array[start] = array[end];\n            array[end] = temp;\n            start++;\n            end--;\n        }\n    }\n\n    public static void main(String[] args) {\n        int[] array = {1, 2, 3, 4, 5, 6, 7};\n        int steps = 3;\n        rotateRight(array, steps);\n        for (int num : array) {\n            System.out.print(num + \" \");\n        }\n    }\n}\n```"
  },
  {
    "task": "Develop a function to merge two sorted arrays into one sorted array.",
    "code": "```java\nimport java.util.Arrays;\n\npublic class ArrayMerger {\n    public static int[] mergeSortedArrays(int[] array1, int[] array2) {\n        int[] mergedArray = new int[array1.length + array2.length];\n        int i = 0, j = 0, k = 0;\n        \n        while (i < array1.length && j < array2.length) {\n            if (array1[i] <= array2[j]) {\n                mergedArray[k++] = array1[i++];\n            } else {\n                mergedArray[k++] = array2[j++];\n            }\n        }\n        \n        while (i < array1.length) {\n            mergedArray[k++] = array1[i++];\n        }\n        \n        while (j < array2.length) {\n            mergedArray[k++] = array2[j++];\n        }\n        \n        return mergedArray;\n    }\n\n    public static void main(String[] args) {\n        int[] array1 = {1, 3, 5};\n        int[] array2 = {2, 4, 6};\n        int[] mergedArray = mergeSortedArrays(array1, array2);\n        System.out.println(Arrays.toString(mergedArray));\n    }\n}\n```"
  },
  {
    "task": "Create a method to remove duplicate values from an array.",
    "code": "```java\nimport java.util.Arrays;\n\npublic class RemoveDuplicates {\n    public static int[] removeDuplicates(int[] array) {\n        return Arrays.stream(array).distinct().toArray();\n    }\n    \n    public static void main(String[] args) {\n        int[] array = {1, 2, 2, 3, 4, 4, 5};\n        int[] result = removeDuplicates(array);\n        System.out.println(Arrays.toString(result));\n    }\n}\n```"
  },
  {
    "task": "Write a script to calculate the sum of all elements in an array.",
    "code": "```java\npublic class ArraySum {\n    public static void main(String[] args) {\n        int[] numbers = {1, 2, 3, 4, 5}; // Example array\n        int sum = 0;\n        \n        for (int number : numbers) {\n            sum += number;\n        }\n        \n        System.out.println(\"Sum of array elements: \" + sum);\n    }\n}\n```"
  },
  {
    "task": "Construct a function that finds the second largest element in an array.",
    "code": "```java\npublic class SecondLargestFinder {\n    public static int findSecondLargest(int[] array) {\n        if (array == null || array.length < 2) {\n            throw new IllegalArgumentException(\"Array must have at least two elements.\");\n        }\n        int firstLargest = Integer.MIN_VALUE;\n        int secondLargest = Integer.MIN_VALUE;\n        for (int num : array) {\n            if (num > firstLargest) {\n                secondLargest = firstLargest;\n                firstLargest = num;\n            } else if (num > secondLargest && num != firstLargest) {\n                secondLargest = num;\n            }\n        }\n        if (secondLargest == Integer.MIN_VALUE) {\n            throw new IllegalArgumentException(\"No second largest element found.\");\n        }\n        return secondLargest;\n    }\n\n    public static void main(String[] args) {\n        int[] numbers = {3, 1, 4, 4, 5, 2, 5};\n        System.out.println(findSecondLargest(numbers)); // Output should be 4\n    }\n}\n```"
  },
  {
    "task": "Design a program to check if an array contains a specific value.",
    "code": "```java\npublic class ArrayValueChecker {\n    public static boolean containsValue(int[] array, int value) {\n        for (int element : array) {\n            if (element == value) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        int[] sampleArray = {1, 2, 3, 4, 5};\n        int valueToCheck = 3;\n        \n        boolean result = containsValue(sampleArray, valueToCheck);\n        System.out.println(\"Array contains \" + valueToCheck + \": \" + result);\n    }\n}\n```"
  },
  {
    "task": "Implement a function to sort an array of strings alphabetically.",
    "code": "```java\nimport java.util.Arrays;\n\npublic class StringArraySorter {\n    public static void sortStringsAlphabetically(String[] array) {\n        Arrays.sort(array);\n    }\n\n    public static void main(String[] args) {\n        String[] strings = {\"banana\", \"apple\", \"orange\"};\n        sortStringsAlphabetically(strings);\n        for (String str : strings) {\n            System.out.println(str);\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a method to search for a value in an array using binary search.",
    "code": "```java\npublic class BinarySearch {\n\n    public static int binarySearch(int[] array, int target) {\n        int left = 0;\n        int right = array.length - 1;\n\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n\n            if (array[mid] == target) {\n                return mid;\n            }\n\n            if (array[mid] < target) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n\n        return -1; // Target not found\n    }\n\n    public static void main(String[] args) {\n        int[] array = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n        int target = 7;\n        int result = binarySearch(array, target);\n\n        if (result != -1) {\n            System.out.println(\"Target found at index: \" + result);\n        } else {\n            System.out.println(\"Target not found.\");\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a routine to calculate the average of numbers in an array.",
    "code": "```java\npublic class AverageCalculator {\n    public static double calculateAverage(int[] numbers) {\n        if (numbers == null || numbers.length == 0) {\n            throw new IllegalArgumentException(\"Array must not be null or empty\");\n        }\n        int sum = 0;\n        for (int number : numbers) {\n            sum += number;\n        }\n        return (double) sum / numbers.length;\n    }\n\n    public static void main(String[] args) {\n        int[] numbers = {1, 2, 3, 4, 5};\n        double average = calculateAverage(numbers);\n        System.out.println(\"Average: \" + average);\n    }\n}\n```"
  },
  {
    "task": "Develop a function to find the intersection of two arrays.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\n\npublic class ArrayIntersection {\n\n    public static int[] findIntersection(int[] array1, int[] array2) {\n        HashSet<Integer> set1 = new HashSet<>();\n        HashSet<Integer> intersection = new HashSet<>();\n\n        for (int num : array1) {\n            set1.add(num);\n        }\n\n        for (int num : array2) {\n            if (set1.contains(num)) {\n                intersection.add(num);\n            }\n        }\n\n        int[] result = new int[intersection.size()];\n        int index = 0;\n        for (int num : intersection) {\n            result[index++] = num;\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        int[] array1 = {1, 2, 2, 3, 4};\n        int[] array2 = {2, 3, 5};\n\n        int[] intersection = findIntersection(array1, array2);\n\n        for (int num : intersection) {\n            System.out.print(num + \" \");\n        }\n    }\n}\n```"
  },
  {
    "task": "Implement a method to find the union of two arrays without duplicates.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class ArrayUnion {\n\n    public static int[] union(int[] array1, int[] array2) {\n        Set<Integer> resultSet = new HashSet<>();\n        \n        for (int num : array1) {\n            resultSet.add(num);\n        }\n        \n        for (int num : array2) {\n            resultSet.add(num);\n        }\n        \n        int[] resultArray = new int[resultSet.size()];\n        int index = 0;\n        for (int num : resultSet) {\n            resultArray[index++] = num;\n        }\n        \n        return resultArray;\n    }\n    \n    public static void main(String[] args) {\n        int[] array1 = {1, 2, 3, 4};\n        int[] array2 = {3, 4, 5, 6};\n        int[] result = union(array1, array2);\n        \n        for (int num : result) {\n            System.out.print(num + \" \");\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a program that shifts all zeroes in an array to the end.",
    "code": "```java\npublic class ShiftZeroes {\n    public static void shiftZeroesToEnd(int[] nums) {\n        int index = 0;\n        for (int num : nums) {\n            if (num != 0) {\n                nums[index++] = num;\n            }\n        }\n        while (index < nums.length) {\n            nums[index++] = 0;\n        }\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {0, 1, 0, 3, 12};\n        shiftZeroesToEnd(nums);\n        for (int num : nums) {\n            System.out.print(num + \" \");\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a function to split an array into two parts at a given index.",
    "code": "```java\npublic class ArraySplitter {\n    public static int[][] splitArray(int[] array, int index) {\n        if (index < 0 || index > array.length) {\n            throw new IllegalArgumentException(\"Index out of bounds\");\n        }\n        \n        int[] firstPart = new int[index];\n        int[] secondPart = new int[array.length - index];\n        \n        System.arraycopy(array, 0, firstPart, 0, index);\n        System.arraycopy(array, index, secondPart, 0, array.length - index);\n        \n        return new int[][] { firstPart, secondPart };\n    }\n\n    public static void main(String[] args) {\n        int[] array = {1, 2, 3, 4, 5};\n        int index = 3;\n        int[][] result = splitArray(array, index);\n        \n        // Output the result for demonstration\n        for (int[] part : result) {\n            for (int num : part) {\n                System.out.print(num + \" \");\n            }\n            System.out.println();\n        }\n    }\n}\n```"
  },
  {
    "task": "Design a script to find all pairs in an array that sum up to a specific target.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class PairSum {\n    public static List<int[]> findPairs(int[] array, int target) {\n        List<int[]> pairs = new ArrayList<>();\n        for (int i = 0; i < array.length; i++) {\n            for (int j = i + 1; j < array.length; j++) {\n                if (array[i] + array[j] == target) {\n                    pairs.add(new int[]{array[i], array[j]});\n                }\n            }\n        }\n        return pairs;\n    }\n\n    public static void main(String[] args) {\n        int[] array = {2, 4, 3, 5, 6, -2, 4, 7, 8, 9};\n        int target = 7;\n        List<int[]> pairs = findPairs(array, target);\n        for (int[] pair : pairs) {\n            System.out.println(pair[0] + \", \" + pair[1]);\n        }\n    }\n}\n```"
  },
  {
    "task": "Construct a method to remove all occurrences of a specific value from an array.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\npublic class ArrayUtils {\n    public static int[] removeOccurrences(int[] array, int value) {\n        ArrayList<Integer> resultList = new ArrayList<>();\n        for (int num : array) {\n            if (num != value) {\n                resultList.add(num);\n            }\n        }\n        int[] resultArray = new int[resultList.size()];\n        for (int i = 0; i < resultList.size(); i++) {\n            resultArray[i] = resultList.get(i);\n        }\n        return resultArray;\n    }\n\n    public static void main(String[] args) {\n        int[] array = {1, 2, 3, 4, 3, 5};\n        int valueToRemove = 3;\n        int[] resultArray = removeOccurrences(array, valueToRemove);\n        System.out.println(Arrays.toString(resultArray));\n    }\n}\n```"
  },
  {
    "task": "Write a function to find the longest increasing subsequence in an array.",
    "code": "```java\nimport java.util.Arrays;\n\npublic class LongestIncreasingSubsequence {\n    public static int lengthOfLIS(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            return 0;\n        }\n        \n        int[] dp = new int[nums.length];\n        Arrays.fill(dp, 1);\n        \n        int maxLength = 1;\n        \n        for (int i = 1; i < nums.length; i++) {\n            for (int j = 0; j < i; j++) {\n                if (nums[i] > nums[j]) {\n                    dp[i] = Math.max(dp[i], dp[j] + 1);\n                }\n            }\n            maxLength = Math.max(maxLength, dp[i]);\n        }\n        \n        return maxLength;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {10, 9, 2, 5, 3, 7, 101, 18};\n        System.out.println(lengthOfLIS(nums)); // Output: 4\n    }\n}\n```"
  },
  {
    "task": "Develop an algorithm to find the missing number in a sequential array.",
    "code": "```java\npublic class MissingNumberFinder {\n    public static int findMissingNumber(int[] nums) {\n        int n = nums.length + 1;\n        int expectedSum = n * (n + 1) / 2;\n        int actualSum = 0;\n\n        for (int num : nums) {\n            actualSum += num;\n        }\n\n        return expectedSum - actualSum;\n    }\n\n    public static void main(String[] args) {\n        int[] sequentialArray = {1, 2, 3, 4, 6, 7, 8, 9, 10}; // Example array\n        int missingNumber = findMissingNumber(sequentialArray);\n        System.out.println(\"The missing number is: \" + missingNumber);\n    }\n}\n```"
  },
  {
    "task": "Create a program to find the common elements between two arrays.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class CommonElements {\n    public static void main(String[] args) {\n        int[] array1 = {1, 2, 3, 4, 5};\n        int[] array2 = {4, 5, 6, 7, 8};\n\n        Set<Integer> commonElements = findCommonElements(array1, array2);\n        System.out.println(\"Common elements: \" + commonElements);\n    }\n\n    public static Set<Integer> findCommonElements(int[] array1, int[] array2) {\n        Set<Integer> set1 = new HashSet<>();\n        Set<Integer> commonSet = new HashSet<>();\n\n        for (int num : array1) {\n            set1.add(num);\n        }\n\n        for (int num : array2) {\n            if (set1.contains(num)) {\n                commonSet.add(num);\n            }\n        }\n\n        return commonSet;\n    }\n}\n```"
  },
  {
    "task": "Implement a function to move all negative numbers to the beginning of an array.",
    "code": "```java\npublic class ArrayUtils {\n    public static void moveNegativesToFront(int[] arr) {\n        int n = arr.length;\n        int[] result = new int[n];\n        int index = 0;\n        \n        // Add all negative numbers first\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                result[index++] = arr[i];\n            }\n        }\n        \n        // Add all non-negative numbers next\n        for (int i = 0; i < n; i++) {\n            if (arr[i] >= 0) {\n                result[index++] = arr[i];\n            }\n        }\n        \n        // Copy result back to the original array\n        System.arraycopy(result, 0, arr, 0, n);\n    }\n}\n```"
  },
  {
    "task": "Write a method to check if an array is a palindrome.",
    "code": "```java\npublic class PalindromeChecker {\n    public static boolean isPalindrome(int[] array) {\n        int start = 0;\n        int end = array.length - 1;\n        while (start < end) {\n            if (array[start] != array[end]) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        int[] testArray = {1, 2, 3, 2, 1};\n        System.out.println(isPalindrome(testArray)); // Output: true\n    }\n}\n```"
  },
  {
    "task": "Design a routine to create a new array that is the element-wise sum of two input arrays.",
    "code": "```java\npublic class ArraySum {\n    public static int[] elementWiseSum(int[] array1, int[] array2) {\n        if (array1.length != array2.length) {\n            throw new IllegalArgumentException(\"Arrays must be of the same length\");\n        }\n        int[] result = new int[array1.length];\n        for (int i = 0; i < array1.length; i++) {\n            result[i] = array1[i] + array2[i];\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        int[] array1 = {1, 2, 3};\n        int[] array2 = {4, 5, 6};\n        int[] summedArray = elementWiseSum(array1, array2);\n        for (int value : summedArray) {\n            System.out.print(value + \" \");\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a function to find the product of all elements in an array, excluding the current element.",
    "code": "```java\npublic class ProductArray {\n\n    public static int[] productExceptSelf(int[] nums) {\n        int n = nums.length;\n        int[] result = new int[n];\n        int[] leftProducts = new int[n];\n        int[] rightProducts = new int[n];\n        \n        leftProducts[0] = 1;\n        for (int i = 1; i < n; i++) {\n            leftProducts[i] = leftProducts[i - 1] * nums[i - 1];\n        }\n\n        rightProducts[n - 1] = 1;\n        for (int i = n - 2; i >= 0; i--) {\n            rightProducts[i] = rightProducts[i + 1] * nums[i + 1];\n        }\n\n        for (int i = 0; i < n; i++) {\n            result[i] = leftProducts[i] * rightProducts[i];\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 2, 3, 4};\n        int[] result = productExceptSelf(nums);\n        for (int value : result) {\n            System.out.println(value);\n        }\n    }\n}\n```"
  },
  {
    "task": "Develop a script to remove elements from an array that are smaller than a given threshold.",
    "code": "```java\nimport java.util.Arrays;\n\npublic class ArrayFilter {\n    public static void main(String[] args) {\n        int[] array = {5, 2, 9, 1, 7, 3};\n        int threshold = 4;\n        int[] filteredArray = removeSmallerThan(array, threshold);\n        System.out.println(Arrays.toString(filteredArray));\n    }\n\n    public static int[] removeSmallerThan(int[] array, int threshold) {\n        return Arrays.stream(array)\n                     .filter(e -> e >= threshold)\n                     .toArray();\n    }\n}\n```"
  },
  {
    "task": "Implement a method to clone an array without using built-in functions.",
    "code": "```java\npublic class ArrayCloner {\n    public static int[] cloneArray(int[] original) {\n        int[] clonedArray = new int[original.length];\n        for (int i = 0; i < original.length; i++) {\n            clonedArray[i] = original[i];\n        }\n        return clonedArray;\n    }\n\n    public static void main(String[] args) {\n        int[] originalArray = {1, 2, 3, 4, 5};\n        int[] clonedArray = cloneArray(originalArray);\n        \n        // Example usage\n        for (int i : clonedArray) {\n            System.out.print(i + \" \");\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a program that rotates a 2D array (matrix) 90 degrees clockwise.",
    "code": "```java\npublic class MatrixRotation {\n    public static void main(String[] args) {\n        int[][] matrix = {\n            {1, 2, 3},\n            {4, 5, 6},\n            {7, 8, 9}\n        };\n        \n        int[][] rotatedMatrix = rotateMatrix90DegreesClockwise(matrix);\n        \n        for (int i = 0; i < rotatedMatrix.length; i++) {\n            for (int j = 0; j < rotatedMatrix[i].length; j++) {\n                System.out.print(rotatedMatrix[i][j] + \" \");\n            }\n            System.out.println();\n        }\n    }\n    \n    public static int[][] rotateMatrix90DegreesClockwise(int[][] matrix) {\n        int n = matrix.length;\n        int[][] rotatedMatrix = new int[n][n];\n        \n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                rotatedMatrix[j][n - 1 - i] = matrix[i][j];\n            }\n        }\n        \n        return rotatedMatrix;\n    }\n}\n```"
  },
  {
    "task": "Write a function to find the kth smallest element in an unsorted array.",
    "code": "```java\nimport java.util.Arrays;\n\npublic class KthSmallestElement {\n\n    public static int findKthSmallest(int[] array, int k) {\n        Arrays.sort(array);\n        return array[k - 1];\n    }\n\n    public static void main(String[] args) {\n        int[] array = {7, 10, 4, 3, 20, 15};\n        int k = 3;\n        System.out.println(\"The \" + k + \"rd smallest element is \" + findKthSmallest(array, k));\n    }\n}\n```"
  },
  {
    "task": "Design a routine to partition an array into even and odd numbers.",
    "code": "```java\npublic class ArrayPartition {\n\n    public static void partitionArray(int[] array) {\n        int[] result = new int[array.length];\n        int evenIndex = 0;\n        int oddIndex = array.length - 1;\n\n        for (int value : array) {\n            if (value % 2 == 0) {\n                result[evenIndex++] = value;\n            } else {\n                result[oddIndex--] = value;\n            }\n        }\n\n        // Copy result back to the original array\n        System.arraycopy(result, 0, array, 0, array.length);\n    }\n\n    public static void main(String[] args) {\n        int[] numbers = {3, 1, 4, 2, 7, 8, 6, 5};\n        partitionArray(numbers);\n        \n        for (int number : numbers) {\n            System.out.print(number + \" \");\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a method to merge overlapping intervals in an array.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class IntervalMerger {\n    public static int[][] mergeIntervals(int[][] intervals) {\n        if (intervals.length <= 1) {\n            return intervals;\n        }\n\n        Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));\n\n        List<int[]> merged = new ArrayList<>();\n        int[] currentInterval = intervals[0];\n        merged.add(currentInterval);\n\n        for (int[] interval : intervals) {\n            int currentEnd = currentInterval[1];\n            int nextBegin = interval[0];\n            int nextEnd = interval[1];\n\n            if (currentEnd >= nextBegin) {\n                currentInterval[1] = Math.max(currentEnd, nextEnd);\n            } else {\n                currentInterval = interval;\n                merged.add(currentInterval);\n            }\n        }\n\n        return merged.toArray(new int[merged.size()][]);\n    }\n\n    public static void main(String[] args) {\n        int[][] intervals = {{1, 3}, {2, 6}, {8, 10}, {15, 18}};\n        int[][] mergedIntervals = mergeIntervals(intervals);\n\n        for (int[] interval : mergedIntervals) {\n            System.out.println(Arrays.toString(interval));\n        }\n    }\n}\n```"
  },
  {
    "task": "Develop a function to count the frequency of each unique element in an array.",
    "code": "```java\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class FrequencyCounter {\n    public static Map<Integer, Integer> countFrequencies(int[] array) {\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        for (int num : array) {\n            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        }\n        return frequencyMap;\n    }\n\n    public static void main(String[] args) {\n        int[] array = {1, 2, 2, 3, 3, 3, 4};\n        Map<Integer, Integer> frequencies = countFrequencies(array);\n        for (Map.Entry<Integer, Integer> entry : frequencies.entrySet()) {\n            System.out.println(\"Element: \" + entry.getKey() + \", Frequency: \" + entry.getValue());\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a program to generate all possible subsets of an array.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class SubsetGenerator {\n\n    public static List<List<Integer>> generateSubsets(int[] nums) {\n        List<List<Integer>> subsets = new ArrayList<>();\n        generateSubsetsHelper(nums, 0, new ArrayList<>(), subsets);\n        return subsets;\n    }\n\n    private static void generateSubsetsHelper(int[] nums, int index, List<Integer> current, List<List<Integer>> subsets) {\n        if (index == nums.length) {\n            subsets.add(new ArrayList<>(current));\n            return;\n        }\n        generateSubsetsHelper(nums, index + 1, current, subsets);\n        current.add(nums[index]);\n        generateSubsetsHelper(nums, index + 1, current, subsets);\n        current.remove(current.size() - 1);\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 2, 3};\n        List<List<Integer>> subsets = generateSubsets(nums);\n        System.out.println(subsets);\n    }\n}\n```"
  },
  {
    "task": "Implement a routine to cyclically permute the elements of an array.",
    "code": "```java\npublic class CyclicPermutation {\n    \n    public static void cyclicPermute(int[] array) {\n        if (array == null || array.length == 0) {\n            return;\n        }\n        \n        int lastElement = array[array.length - 1];\n        for (int i = array.length - 1; i > 0; i--) {\n            array[i] = array[i - 1];\n        }\n        array[0] = lastElement;\n    }\n    \n    public static void main(String[] args) {\n        int[] array = {1, 2, 3, 4, 5};\n        cyclicPermute(array);\n        \n        for (int num : array) {\n            System.out.print(num + \" \");\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a function that checks if two arrays are equal regardless of element order.",
    "code": "```java\nimport java.util.Arrays;\n\npublic class ArrayEqualityChecker {\n    public static boolean areArraysEqual(int[] array1, int[] array2) {\n        if (array1.length != array2.length) {\n            return false;\n        }\n        Arrays.sort(array1);\n        Arrays.sort(array2);\n        return Arrays.equals(array1, array2);\n    }\n\n    public static void main(String[] args) {\n        int[] array1 = {1, 2, 3, 4};\n        int[] array2 = {4, 3, 2, 1};\n        boolean result = areArraysEqual(array1, array2);\n        System.out.println(\"Arrays are equal: \" + result);\n    }\n}\n```"
  },
  {
    "task": "Design a script to initialize an array with random integers within a specified range.",
    "code": "```java\nimport java.util.Random;\n\npublic class RandomArray {\n    public static void main(String[] args) {\n        int arraySize = 10; // Example size\n        int lowerBound = 1; // Example lower bound\n        int upperBound = 100; // Example upper bound\n\n        int[] randomArray = new int[arraySize];\n        Random random = new Random();\n\n        for (int i = 0; i < arraySize; i++) {\n            randomArray[i] = random.nextInt(upperBound - lowerBound + 1) + lowerBound;\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a method to convert an array of integers to a single concatenated number.",
    "code": "```java\npublic class ArrayConcatenation {\n    public static void main(String[] args) {\n        int[] numbers = {1, 2, 3, 4, 5};\n        System.out.println(concatenateArray(numbers));\n    }\n\n    public static String concatenateArray(int[] array) {\n        StringBuilder result = new StringBuilder();\n        for (int num : array) {\n            result.append(num);\n        }\n        return result.toString();\n    }\n}\n```"
  },
  {
    "task": "Develop a function to find the median value of an unsorted array.",
    "code": "```java\nimport java.util.Arrays;\n\npublic class MedianFinder {\n    public static double findMedian(int[] nums) {\n        Arrays.sort(nums);\n        int n = nums.length;\n        if (n % 2 == 0) {\n            return (nums[n / 2 - 1] + nums[n / 2]) / 2.0;\n        } else {\n            return nums[n / 2];\n        }\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {3, 1, 4, 1, 5, 9, 2};\n        System.out.println(\"Median: \" + findMedian(nums));\n    }\n}\n```"
  },
  {
    "task": "Create a routine to determine if an array is sorted in ascending order.",
    "code": "```java\npublic class ArrayCheck {\n    public static boolean isSortedAscending(int[] array) {\n        for (int i = 0; i < array.length - 1; i++) {\n            if (array[i] > array[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        int[] array = {1, 2, 3, 4, 5};\n        System.out.println(isSortedAscending(array));\n    }\n}\n```"
  },
  {
    "task": "Implement a method to find the longest contiguous subarray with equal number of 0s and 1s.",
    "code": "```java\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class LongestSubarray {\n\n    public static int findMaxLength(int[] nums) {\n        Map<Integer, Integer> map = new HashMap<>();\n        map.put(0, -1);\n        int maxLength = 0, count = 0;\n        \n        for (int i = 0; i < nums.length; i++) {\n            count += (nums[i] == 1) ? 1 : -1;\n            \n            if (map.containsKey(count)) {\n                maxLength = Math.max(maxLength, i - map.get(count));\n            } else {\n                map.put(count, i);\n            }\n        }\n        \n        return maxLength;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {0, 1, 0};\n        System.out.println(findMaxLength(nums)); // Output: 2\n    }\n}\n```"
  },
  {
    "task": "Write a function to interleave two arrays of equal length.",
    "code": "```java\npublic class ArrayInterleaver {\n    public static int[] interleaveArrays(int[] array1, int[] array2) {\n        int[] interleavedArray = new int[array1.length + array2.length];\n        for (int i = 0, j = 0; i < array1.length; i++) {\n            interleavedArray[j++] = array1[i];\n            interleavedArray[j++] = array2[i];\n        }\n        return interleavedArray;\n    }\n\n    public static void main(String[] args) {\n        int[] array1 = {1, 3, 5};\n        int[] array2 = {2, 4, 6};\n        int[] result = interleaveArrays(array1, array2);\n        \n        for (int num : result) {\n            System.out.print(num + \" \");\n        }\n    }\n}\n```"
  },
  {
    "task": "Design a program to replace each element in an array with the next greatest element.",
    "code": "```java\npublic class NextGreatestElement {\n    public static void replaceWithNextGreatest(int[] arr) {\n        int n = arr.length;\n        int maxFromRight = arr[n - 1];\n        arr[n - 1] = -1; // Replace last element with -1 as there's no greater element to its right\n\n        for (int i = n - 2; i >= 0; i--) {\n            int temp = arr[i];\n            arr[i] = maxFromRight;\n            if (temp > maxFromRight) {\n                maxFromRight = temp;\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {16, 17, 4, 3, 5, 2};\n        replaceWithNextGreatest(arr);\n        for (int num : arr) {\n            System.out.print(num + \" \");\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a function to calculate the dot product of two numeric arrays.",
    "code": "```java\npublic class DotProductCalculator {\n    public static int calculateDotProduct(int[] array1, int[] array2) {\n        if (array1.length != array2.length) {\n            throw new IllegalArgumentException(\"Arrays must be of the same length.\");\n        }\n        int dotProduct = 0;\n        for (int i = 0; i < array1.length; i++) {\n            dotProduct += array1[i] * array2[i];\n        }\n        return dotProduct;\n    }\n\n    public static void main(String[] args) {\n        int[] array1 = {1, 2, 3};\n        int[] array2 = {4, 5, 6};\n        int result = calculateDotProduct(array1, array2);\n        System.out.println(\"Dot Product: \" + result);\n    }\n}\n```"
  },
  {
    "task": "Develop a script to find the first recurring element in an array.",
    "code": "```java\nimport java.util.HashSet;\n\npublic class FirstRecurringElement {\n    public static Integer findFirstRecurringElement(int[] array) {\n        HashSet<Integer> seen = new HashSet<>();\n        for (int num : array) {\n            if (seen.contains(num)) {\n                return num;\n            }\n            seen.add(num);\n        }\n        return null;\n    }\n\n    public static void main(String[] args) {\n        int[] array = {2, 5, 3, 4, 5, 3, 2};\n        Integer result = findFirstRecurringElement(array);\n        System.out.println(result);\n    }\n}\n```"
  },
  {
    "task": "Write a method to check if an array is a subset of another array.",
    "code": "```java\nimport java.util.HashSet;\n\npublic class SubsetChecker {\n    public static boolean isSubset(int[] array1, int[] array2) {\n        HashSet<Integer> set = new HashSet<>();\n        for (int num : array2) {\n            set.add(num);\n        }\n        for (int num : array1) {\n            if (!set.contains(num)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```"
  },
  {
    "task": "Implement a function to add a specific value to each element in an array.",
    "code": "```java\npublic class ArrayUtils {\n    public static void addValueToEachElement(int[] array, int valueToAdd) {\n        for (int i = 0; i < array.length; i++) {\n            array[i] += valueToAdd;\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a program that finds the largest product of three numbers in an array.",
    "code": "```java\npublic class LargestProductOfThree {\n    public static void main(String[] args) {\n        int[] numbers = {1, 10, 2, 6, 5, 3};\n        int largestProduct = findLargestProductOfThree(numbers);\n        System.out.println(\"Largest product of three numbers: \" + largestProduct);\n    }\n\n    public static int findLargestProductOfThree(int[] nums) {\n        if (nums.length < 3) return 0;\n        Arrays.sort(nums);\n        int n = nums.length;\n        int product1 = nums[n - 1] * nums[n - 2] * nums[n - 3];\n        int product2 = nums[0] * nums[1] * nums[n - 1];\n        return Math.max(product1, product2);\n    }\n}\n```"
  },
  {
    "task": "Design a routine to find all unique permutations of an array.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class UniquePermutations {\n    public static List<List<Integer>> permuteUnique(int[] nums) {\n        List<List<Integer>> result = new ArrayList<>();\n        Arrays.sort(nums);\n        boolean[] used = new boolean[nums.length];\n        backtrack(nums, new ArrayList<>(), used, result);\n        return result;\n    }\n\n    private static void backtrack(int[] nums, List<Integer> path, boolean[] used, List<List<Integer>> result) {\n        if (path.size() == nums.length) {\n            result.add(new ArrayList<>(path));\n            return;\n        }\n        for (int i = 0; i < nums.length; i++) {\n            if (used[i] || (i > 0 && nums[i] == nums[i - 1] && !used[i - 1])) {\n                continue;\n            }\n            used[i] = true;\n            path.add(nums[i]);\n            backtrack(nums, path, used, result);\n            used[i] = false;\n            path.remove(path.size() - 1);\n        }\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 1, 2};\n        List<List<Integer>> permutations = permuteUnique(nums);\n        for (List<Integer> permutation : permutations) {\n            System.out.println(permutation);\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a function to transpose a square matrix represented as a 2D array.",
    "code": "```java\npublic class MatrixUtils {\n    public static void transpose(int[][] matrix) {\n        int n = matrix.length;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                int temp = matrix[i][j];\n                matrix[i][j] = matrix[j][i];\n                matrix[j][i] = temp;\n            }\n        }\n    }\n}\n```"
  },
  {
    "task": "Develop a method to find the longest common prefix in an array of strings.",
    "code": "```java\npublic class LongestCommonPrefix {\n    public static String longestCommonPrefix(String[] strs) {\n        if (strs == null || strs.length == 0) return \"\";\n        String prefix = strs[0];\n        for (int i = 1; i < strs.length; i++) {\n            while (strs[i].indexOf(prefix) != 0) {\n                prefix = prefix.substring(0, prefix.length() - 1);\n                if (prefix.isEmpty()) return \"\";\n            }\n        }\n        return prefix;\n    }\n\n    public static void main(String[] args) {\n        String[] strs = {\"flower\", \"flow\", \"flight\"};\n        System.out.println(longestCommonPrefix(strs)); // Output: \"fl\"\n    }\n}\n```"
  },
  {
    "task": "Implement a function to flatten a multi-dimensional array into a single array.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ArrayFlattener {\n    public static void main(String[] args) {\n        Object[] multiDimensionalArray = {1, new Object[]{2, 3, new Object[]{4, 5}}, 6};\n        Object[] flattenedArray = flattenArray(multiDimensionalArray);\n        for (Object element : flattenedArray) {\n            System.out.print(element + \" \");\n        }\n    }\n\n    public static Object[] flattenArray(Object[] inputArray) {\n        List<Object> flatList = new ArrayList<>();\n        for (Object element : inputArray) {\n            if (element instanceof Object[]) {\n                Object[] deeperArray = flattenArray((Object[]) element);\n                for (Object deeperElement : deeperArray) {\n                    flatList.add(deeperElement);\n                }\n            } else {\n                flatList.add(element);\n            }\n        }\n        return flatList.toArray();\n    }\n}\n```"
  },
  {
    "task": "Create a script to shift elements of an array to the left by a given number of positions.",
    "code": "```java\npublic class ArrayShift {\n    public static void main(String[] args) {\n        int[] array = {1, 2, 3, 4, 5};\n        int positions = 2;\n        int[] shiftedArray = shiftArrayLeft(array, positions);\n\n        for (int num : shiftedArray) {\n            System.out.print(num + \" \");\n        }\n    }\n\n    public static int[] shiftArrayLeft(int[] array, int positions) {\n        int length = array.length;\n        int[] result = new int[length];\n\n        for (int i = 0; i < length; i++) {\n            result[i] = array[(i + positions) % length];\n        }\n\n        return result;\n    }\n}\n```"
  },
  {
    "task": "Write a routine to sort an array of objects based on a specific property.",
    "code": "```java\nimport java.util.Arrays;\n\nclass MyObject {\n    int property;\n\n    MyObject(int property) {\n        this.property = property;\n    }\n\n    public int getProperty() {\n        return property;\n    }\n}\n\npublic class ArraySorter {\n    public static void main(String[] args) {\n        MyObject[] objects = {\n            new MyObject(5),\n            new MyObject(3),\n            new MyObject(8),\n            new MyObject(1),\n            new MyObject(4)\n        };\n\n        Arrays.sort(objects, (o1, o2) -> Integer.compare(o1.getProperty(), o2.getProperty()));\n\n        for (MyObject obj : objects) {\n            System.out.println(obj.getProperty());\n        }\n    }\n}\n```"
  },
  {
    "task": "Design a program to find the smallest missing positive integer in an array.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class SmallestMissingPositive {\n\n    public static int findSmallestMissingPositive(int[] nums) {\n        Set<Integer> set = new HashSet<>();\n        for (int num : nums) {\n            if (num > 0) {\n                set.add(num);\n            }\n        }\n\n        int smallestMissing = 1;\n        while (set.contains(smallestMissing)) {\n            smallestMissing++;\n        }\n\n        return smallestMissing;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {3, 4, -1, 1};\n        System.out.println(findSmallestMissingPositive(nums)); // Output: 2\n    }\n}\n```"
  },
  {
    "task": "Create a function to calculate the cumulative sum of an array.",
    "code": "```java\npublic class CumulativeSum {\n    public static int[] calculateCumulativeSum(int[] numbers) {\n        int[] cumulativeSum = new int[numbers.length];\n        if (numbers.length > 0) {\n            cumulativeSum[0] = numbers[0];\n            for (int i = 1; i < numbers.length; i++) {\n                cumulativeSum[i] = cumulativeSum[i - 1] + numbers[i];\n            }\n        }\n        return cumulativeSum;\n    }\n\n    public static void main(String[] args) {\n        int[] numbers = {1, 2, 3, 4, 5};\n        int[] result = calculateCumulativeSum(numbers);\n        for (int num : result) {\n            System.out.print(num + \" \");\n        }\n    }\n}\n```"
  },
  {
    "task": "Develop a function to remove consecutive duplicate elements in an array.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\npublic class RemoveConsecutiveDuplicates {\n\n    public static int[] removeConsecutiveDuplicates(int[] array) {\n        if (array == null || array.length == 0) {\n            return array;\n        }\n\n        ArrayList<Integer> result = new ArrayList<>();\n        result.add(array[0]);\n\n        for (int i = 1; i < array.length; i++) {\n            if (array[i] != array[i - 1]) {\n                result.add(array[i]);\n            }\n        }\n\n        int[] noDuplicates = new int[result.size()];\n        for (int i = 0; i < result.size(); i++) {\n            noDuplicates[i] = result.get(i);\n        }\n\n        return noDuplicates;\n    }\n\n    public static void main(String[] args) {\n        int[] array = {1, 1, 2, 3, 3, 4, 5, 5, 5, 6};\n        int[] result = removeConsecutiveDuplicates(array);\n        System.out.println(Arrays.toString(result));\n    }\n}\n```"
  },
  {
    "task": "Implement a method to find the majority element in an array, if any.",
    "code": "```java\nimport java.util.HashMap;\n\npublic class MajorityElementFinder {\n    public static Integer findMajorityElement(int[] nums) {\n        HashMap<Integer, Integer> countMap = new HashMap<>();\n        int majorityCount = nums.length / 2;\n\n        for (int num : nums) {\n            countMap.put(num, countMap.getOrDefault(num, 0) + 1);\n            if (countMap.get(num) > majorityCount) {\n                return num;\n            }\n        }\n        return null; // Return null if no majority element exists\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {3, 3, 4, 2, 4, 4, 2, 4, 4};\n        Integer majorityElement = findMajorityElement(nums);\n        if (majorityElement != null) {\n            System.out.println(\"Majority element is: \" + majorityElement);\n        } else {\n            System.out.println(\"No majority element found.\");\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a script to split an array into chunks of a given size.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ArrayChunker {\n    public static <T> List<List<T>> chunkArray(T[] array, int chunkSize) {\n        List<List<T>> chunks = new ArrayList<>();\n        for (int i = 0; i < array.length; i += chunkSize) {\n            List<T> chunk = new ArrayList<>();\n            for (int j = i; j < i + chunkSize && j < array.length; j++) {\n                chunk.add(array[j]);\n            }\n            chunks.add(chunk);\n        }\n        return chunks;\n    }\n\n    public static void main(String[] args) {\n        Integer[] array = {1, 2, 3, 4, 5, 6, 7, 8, 9};\n        int chunkSize = 3;\n        List<List<Integer>> chunks = chunkArray(array, chunkSize);\n        for (List<Integer> chunk : chunks) {\n            System.out.println(chunk);\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a program to calculate the difference between the largest and smallest values in an array.",
    "code": "```java\npublic class ArrayDifference {\n    public static void main(String[] args) {\n        int[] numbers = {5, 3, 8, 1, 9, 2};\n        int max = numbers[0];\n        int min = numbers[0];\n\n        for (int i = 1; i < numbers.length; i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n            }\n            if (numbers[i] < min) {\n                min = numbers[i];\n            }\n        }\n\n        int difference = max - min;\n        System.out.println(\"Difference: \" + difference);\n    }\n}\n```"
  },
  {
    "task": "Design a routine to find the starting index of a target subarray in a larger array.",
    "code": "```java\npublic class SubarrayFinder {\n    public static int findSubarrayIndex(int[] array, int[] subarray) {\n        for (int i = 0; i <= array.length - subarray.length; i++) {\n            boolean found = true;\n            for (int j = 0; j < subarray.length; j++) {\n                if (array[i + j] != subarray[j]) {\n                    found = false;\n                    break;\n                }\n            }\n            if (found) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    public static void main(String[] args) {\n        int[] array = {1, 2, 3, 4, 5, 6};\n        int[] subarray = {3, 4};\n\n        int index = findSubarrayIndex(array, subarray);\n        System.out.println(\"Starting index: \" + index);\n    }\n}\n```"
  },
  {
    "task": "Write a function to compress an array by eliminating zero values.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\npublic class Compressor {\n    public static int[] compressArray(int[] input) {\n        ArrayList<Integer> compressed = new ArrayList<>();\n        for (int value : input) {\n            if (value != 0) {\n                compressed.add(value);\n            }\n        }\n        int[] result = new int[compressed.size()];\n        for (int i = 0; i < compressed.size(); i++) {\n            result[i] = compressed.get(i);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        int[] array = {0, 1, 0, 2, 3, 0, 4, 0};\n        int[] compressedArray = compressArray(array);\n        System.out.println(Arrays.toString(compressedArray));\n    }\n}\n```"
  },
  {
    "task": "Develop a method to determine if an array can be split into two parts with equal sums.",
    "code": "```java\npublic class ArraySplitter {\n\n    public static boolean canSplitIntoEqualSums(int[] arr) {\n        int totalSum = 0;\n        for (int num : arr) {\n            totalSum += num;\n        }\n        \n        if (totalSum % 2 != 0) {\n            return false;\n        }\n        \n        int targetSum = totalSum / 2;\n        int currentSum = 0;\n        \n        for (int num : arr) {\n            currentSum += num;\n            if (currentSum == targetSum) {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 3, 4, 5, 5};\n        System.out.println(canSplitIntoEqualSums(arr)); // Output: true\n    }\n}\n```"
  },
  {
    "task": "Implement a function to round each element in an array to the nearest integer.",
    "code": "```java\npublic class ArrayRounder {\n    public static int[] roundArray(double[] array) {\n        int[] roundedArray = new int[array.length];\n        for (int i = 0; i < array.length; i++) {\n            roundedArray[i] = (int) Math.round(array[i]);\n        }\n        return roundedArray;\n    }\n\n    public static void main(String[] args) {\n        double[] inputArray = {1.2, 2.5, 3.8, 4.1};\n        int[] result = roundArray(inputArray);\n        for (int value : result) {\n            System.out.println(value);\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a routine to generate an array of the Fibonacci sequence up to a given number.",
    "code": "```java\npublic class FibonacciGenerator {\n    public static int[] generateFibonacci(int n) {\n        if (n <= 0) return new int[0];\n        int[] fibonacciArray = new int[n];\n        fibonacciArray[0] = 0;\n        if (n > 1) {\n            fibonacciArray[1] = 1;\n            for (int i = 2; i < n; i++) {\n                fibonacciArray[i] = fibonacciArray[i - 1] + fibonacciArray[i - 2];\n            }\n        }\n        return fibonacciArray;\n    }\n\n    public static void main(String[] args) {\n        int n = 10; // Example number\n        int[] result = generateFibonacci(n);\n        for (int num : result) {\n            System.out.print(num + \" \");\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a program to find the longest repeating sequence in an array.",
    "code": "```java\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class LongestRepeatingSequence {\n\n    public static int[] findLongestRepeatingSequence(int[] array) {\n        if (array == null || array.length == 0) return new int[0];\n\n        Map<String, Integer> map = new HashMap<>();\n        int maxLength = 0;\n        String longestSequence = \"\";\n\n        for (int i = 0; i < array.length; i++) {\n            StringBuilder sequence = new StringBuilder();\n            for (int j = i; j < array.length; j++) {\n                sequence.append(array[j]).append(\",\");\n                String seqStr = sequence.toString();\n                map.put(seqStr, map.getOrDefault(seqStr, 0) + 1);\n\n                if (map.get(seqStr) > 1 && seqStr.length() > maxLength) {\n                    maxLength = seqStr.length();\n                    longestSequence = seqStr;\n                }\n            }\n        }\n\n        if (longestSequence.isEmpty()) return new int[0];\n\n        String[] longestSeqArray = longestSequence.split(\",\");\n        int[] result = new int[longestSeqArray.length];\n        for (int i = 0; i < longestSeqArray.length; i++) {\n            result[i] = Integer.parseInt(longestSeqArray[i]);\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        int[] array = {1, 2, 3, 2, 3, 4, 2, 3, 2, 3, 4};\n        int[] result = findLongestRepeatingSequence(array);\n        for (int num : result) {\n            System.out.print(num + \" \");\n        }\n    }\n}\n```"
  },
  {
    "task": "Design a function to multiply each element of an array by its index.",
    "code": "```java\npublic class ArrayMultiplier {\n    public static int[] multiplyElementsByIndex(int[] array) {\n        int[] result = new int[array.length];\n        for (int i = 0; i < array.length; i++) {\n            result[i] = array[i] * i;\n        }\n        return result;\n    }\n}\n```"
  },
  {
    "task": "Create a method to convert an array of characters into a single string.",
    "code": "```java\npublic class CharArrayToString {\n    public static String convertCharArrayToString(char[] charArray) {\n        return new String(charArray);\n    }\n\n    public static void main(String[] args) {\n        char[] charArray = {'H', 'e', 'l', 'l', 'o'};\n        String result = convertCharArrayToString(charArray);\n        System.out.println(result);\n    }\n}\n```"
  },
  {
    "task": "Develop a function to fill an array with a specified value.",
    "code": "```java\npublic class ArrayFiller {\n\n    public static void fillArray(int[] array, int value) {\n        for (int i = 0; i < array.length; i++) {\n            array[i] = value;\n        }\n    }\n\n    public static void main(String[] args) {\n        int[] myArray = new int[10];\n        fillArray(myArray, 5);\n\n        for (int i : myArray) {\n            System.out.print(i + \" \");\n        }\n    }\n}\n```"
  },
  {
    "task": "Implement a routine to determine if an array has any duplicate elements.",
    "code": "```java\nimport java.util.HashSet;\n\npublic class DuplicateChecker {\n    public static boolean hasDuplicates(int[] array) {\n        HashSet<Integer> seen = new HashSet<>();\n        for (int num : array) {\n            if (seen.contains(num)) {\n                return true;\n            }\n            seen.add(num);\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        int[] array = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n        System.out.println(hasDuplicates(array)); // Output: false\n\n        int[] arrayWithDuplicates = {1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10};\n        System.out.println(hasDuplicates(arrayWithDuplicates)); // Output: true\n    }\n}\n```"
  },
  {
    "task": "Write a script to reverse the order of words in an array of strings.",
    "code": "```java\npublic class ReverseWords {\n    public static void main(String[] args) {\n        String[] words = {\"hello\", \"world\", \"this\", \"is\", \"Java\"};\n        reverseArray(words);\n        for (String word : words) {\n            System.out.print(word + \" \");\n        }\n    }\n\n    public static void reverseArray(String[] arr) {\n        int left = 0;\n        int right = arr.length - 1;\n        while (left < right) {\n            String temp = arr[left];\n            arr[left] = arr[right];\n            arr[right] = temp;\n            left++;\n            right--;\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a function to calculate the total number of distinct elements in an array.",
    "code": "```java\nimport java.util.HashSet;\n\npublic class DistinctElements {\n    public static int countDistinctElements(int[] array) {\n        HashSet<Integer> distinctElements = new HashSet<>();\n        for (int element : array) {\n            distinctElements.add(element);\n        }\n        return distinctElements.size();\n    }\n\n    public static void main(String[] args) {\n        int[] array = {1, 2, 3, 2, 1, 4, 5};\n        System.out.println(countDistinctElements(array)); // Output: 5\n    }\n}\n```"
  },
  {
    "task": "Design a program to find the largest gap between consecutive elements in a sorted array.",
    "code": "```java\npublic class LargestGap {\n\n    public static int findLargestGap(int[] arr) {\n        if (arr == null || arr.length < 2) {\n            return 0;\n        }\n        \n        int largestGap = 0;\n        \n        for (int i = 1; i < arr.length; i++) {\n            int gap = arr[i] - arr[i - 1];\n            if (gap > largestGap) {\n                largestGap = gap;\n            }\n        }\n        \n        return largestGap;\n    }\n\n    public static void main(String[] args) {\n        int[] sortedArray = {1, 3, 6, 9, 10};\n        System.out.println(\"Largest Gap: \" + findLargestGap(sortedArray));\n    }\n}\n```"
  },
  {
    "task": "Write a routine to perform element-wise multiplication of two arrays.",
    "code": "```java\npublic class ArrayMultiplier {\n\n    public static int[] elementWiseMultiply(int[] array1, int[] array2) {\n        if (array1.length != array2.length) {\n            throw new IllegalArgumentException(\"Arrays must have the same length\");\n        }\n        \n        int[] result = new int[array1.length];\n        for (int i = 0; i < array1.length; i++) {\n            result[i] = array1[i] * array2[i];\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        int[] array1 = {1, 2, 3, 4};\n        int[] array2 = {5, 6, 7, 8};\n        int[] result = elementWiseMultiply(array1, array2);\n        \n        for (int value : result) {\n            System.out.println(value);\n        }\n    }\n}\n```"
  },
  {
    "task": "Develop a method to split a string into an array of words.",
    "code": "```java\npublic class StringSplitter {\n    public static String[] splitIntoWords(String input) {\n        if (input == null || input.isEmpty()) {\n            return new String[0];\n        }\n        return input.split(\"\\\\s+\");\n    }\n\n    public static void main(String[] args) {\n        String text = \"This is a sample string\";\n        String[] words = splitIntoWords(text);\n        for (String word : words) {\n            System.out.println(word);\n        }\n    }\n}\n```"
  },
  {
    "task": "Implement a function to find the longest contiguous subarray with a sum less than a target.",
    "code": "```java\npublic class LongestSubarray {\n\n    public static int longestSubarrayWithSumLessThanTarget(int[] nums, int target) {\n        int maxLength = 0;\n        int currentSum = 0;\n        int start = 0;\n\n        for (int end = 0; end < nums.length; end++) {\n            currentSum += nums[end];\n\n            while (currentSum >= target && start <= end) {\n                currentSum -= nums[start];\n                start++;\n            }\n\n            if (currentSum < target) {\n                maxLength = Math.max(maxLength, end - start + 1);\n            }\n        }\n\n        return maxLength;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 2, 3, 4, 5};\n        int target = 11;\n        System.out.println(longestSubarrayWithSumLessThanTarget(nums, target)); // Output: 4\n    }\n}\n```"
  },
  {
    "task": "Create a script to rotate a 2D array (matrix) 180 degrees.",
    "code": "```java\npublic class RotateMatrix180Degrees {\n\n    public static void main(String[] args) {\n        int[][] matrix = {\n            {1, 2, 3},\n            {4, 5, 6},\n            {7, 8, 9}\n        };\n\n        int[][] rotatedMatrix = rotate180Degrees(matrix);\n\n        for (int i = 0; i < rotatedMatrix.length; i++) {\n            for (int j = 0; j < rotatedMatrix[i].length; j++) {\n                System.out.print(rotatedMatrix[i][j] + \" \");\n            }\n            System.out.println();\n        }\n    }\n\n    public static int[][] rotate180Degrees(int[][] matrix) {\n        int n = matrix.length;\n        int m = matrix[0].length;\n        int[][] rotated = new int[n][m];\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                rotated[n - 1 - i][m - 1 - j] = matrix[i][j];\n            }\n        }\n\n        return rotated;\n    }\n}\n```"
  },
  {
    "task": "Write a program to convert an array of binary digits to its decimal equivalent.",
    "code": "```java\npublic class BinaryToDecimal {\n    public static void main(String[] args) {\n        int[] binaryArray = {1, 0, 1, 1, 0, 1}; // Example binary array\n        int decimalValue = convertBinaryToDecimal(binaryArray);\n        System.out.println(\"Decimal Equivalent: \" + decimalValue);\n    }\n\n    public static int convertBinaryToDecimal(int[] binaryArray) {\n        int decimal = 0;\n        int length = binaryArray.length;\n        for (int i = 0; i < length; i++) {\n            decimal += binaryArray[length - 1 - i] * Math.pow(2, i);\n        }\n        return decimal;\n    }\n}\n```"
  },
  {
    "task": "Design a function to return a new array with elements squared from the input array.",
    "code": "```java\npublic class ArraySquared {\n    public static int[] squareElements(int[] inputArray) {\n        int[] squaredArray = new int[inputArray.length];\n        for (int i = 0; i < inputArray.length; i++) {\n            squaredArray[i] = inputArray[i] * inputArray[i];\n        }\n        return squaredArray;\n    }\n}\n```"
  },
  {
    "task": "Create a method to check if all elements in an array are unique.",
    "code": "```java\nimport java.util.HashSet;\n\npublic class UniqueArrayChecker {\n    public static boolean areElementsUnique(int[] array) {\n        HashSet<Integer> set = new HashSet<>();\n        for (int num : array) {\n            if (!set.add(num)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        int[] array = {1, 2, 3, 4, 5};\n        System.out.println(areElementsUnique(array)); // true\n        int[] arrayWithDuplicates = {1, 2, 3, 4, 5, 3};\n        System.out.println(areElementsUnique(arrayWithDuplicates)); // false\n    }\n}\n```"
  },
  {
    "task": "Develop a routine to find the indices of all occurrences of a specific element in an array.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ArrayIndicesFinder {\n\n    public static List<Integer> findIndicesOfElement(int[] array, int element) {\n        List<Integer> indices = new ArrayList<>();\n        for (int i = 0; i < array.length; i++) {\n            if (array[i] == element) {\n                indices.add(i);\n            }\n        }\n        return indices;\n    }\n\n    public static void main(String[] args) {\n        int[] array = {1, 2, 3, 2, 4, 2, 5};\n        int elementToFind = 2;\n        List<Integer> indices = findIndicesOfElement(array, elementToFind);\n        System.out.println(indices);\n    }\n}\n```"
  },
  {
    "task": "Implement a function to merge multiple arrays into one.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ArrayMerger {\n    public static int[] mergeArrays(int[][] arrays) {\n        List<Integer> resultList = new ArrayList<>();\n        for (int[] array : arrays) {\n            for (int element : array) {\n                resultList.add(element);\n            }\n        }\n        int[] resultArray = new int[resultList.size()];\n        for (int i = 0; i < resultList.size(); i++) {\n            resultArray[i] = resultList.get(i);\n        }\n        return resultArray;\n    }\n\n    public static void main(String[] args) {\n        int[][] arrays = {\n            {1, 2, 3},\n            {4, 5},\n            {6, 7, 8, 9}\n        };\n        int[] mergedArray = mergeArrays(arrays);\n        for (int num : mergedArray) {\n            System.out.print(num + \" \");\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a script to convert an array of integers into a formatted string.",
    "code": "```java\nimport java.util.Arrays;\n\npublic class ArrayToString {\n    public static void main(String[] args) {\n        int[] numbers = {1, 2, 3, 4, 5};\n        String formattedString = Arrays.toString(numbers);\n        System.out.println(formattedString);\n    }\n}\n```"
  },
  {
    "task": "Create a program to find the largest sum of any contiguous subarray.",
    "code": "```java\npublic class LargestSumContiguousSubarray {\n    public static void main(String[] args) {\n        int[] array = {-2, 1, -3, 4, -1, 2, 1, -5, 4};\n        int maxSum = findMaxSum(array);\n        System.out.println(\"The largest sum of any contiguous subarray is: \" + maxSum);\n    }\n\n    public static int findMaxSum(int[] array) {\n        int maxSum = Integer.MIN_VALUE;\n        int currentSum = 0;\n\n        for (int i = 0; i < array.length; i++) {\n            currentSum += array[i];\n            if (currentSum > maxSum) {\n                maxSum = currentSum;\n            }\n            if (currentSum < 0) {\n                currentSum = 0;\n            }\n        }\n        return maxSum;\n    }\n}\n```"
  },
  {
    "task": "Design a function to compare two arrays and return the differences.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class ArrayDifference {\n\n    public static List<Integer> findDifferences(int[] array1, int[] array2) {\n        List<Integer> differences = new ArrayList<>();\n        \n        // Convert arrays to lists for easier comparison\n        List<Integer> list1 = Arrays.asList(Arrays.stream(array1).boxed().toArray(Integer[]::new));\n        List<Integer> list2 = Arrays.asList(Arrays.stream(array2).boxed().toArray(Integer[]::new));\n\n        // Add elements to differences list if they are not present in the other array\n        for (int num : array1) {\n            if (!list2.contains(num)) {\n                differences.add(num);\n            }\n        }\n        \n        for (int num : array2) {\n            if (!list1.contains(num)) {\n                differences.add(num);\n            }\n        }\n\n        return differences;\n    }\n\n    public static void main(String[] args) {\n        int[] array1 = {1, 2, 3, 4, 5};\n        int[] array2 = {4, 5, 6, 7, 8};\n        \n        List<Integer> differences = findDifferences(array1, array2);\n        System.out.println(differences);\n    }\n}\n```"
  },
  {
    "task": "Write a method to find the longest subarray with elements in arithmetic progression.",
    "code": "```java\npublic class LongestAPSubarray {\n    public static int[] longestAPSubarray(int[] arr) {\n        if (arr.length < 2) return arr;\n\n        int maxLength = 2;\n        int currentLength = 2;\n        int start = 0;\n        int diff = arr[1] - arr[0];\n        int bestStart = 0;\n\n        for (int i = 2; i < arr.length; i++) {\n            if (arr[i] - arr[i - 1] == diff) {\n                currentLength++;\n            } else {\n                if (currentLength > maxLength) {\n                    maxLength = currentLength;\n                    bestStart = start;\n                }\n                diff = arr[i] - arr[i - 1];\n                currentLength = 2;\n                start = i - 1;\n            }\n        }\n        if (currentLength > maxLength) {\n            bestStart = start;\n            maxLength = currentLength;\n        }\n\n        int[] longestAP = new int[maxLength];\n        System.arraycopy(arr, bestStart, longestAP, 0, maxLength);\n        return longestAP;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {1, 7, 10, 13, 14, 19};\n        int[] longestAP = longestAPSubarray(arr);\n        for (int num : longestAP) {\n            System.out.print(num + \" \");\n        }\n    }\n}\n```"
  },
  {
    "task": "Develop a routine to remove elements from an array based on a predicate function.",
    "code": "```java\nimport java.util.function.Predicate;\nimport java.util.Arrays;\n\npublic class ArrayUtils {\n\n    public static <T> T[] removeIf(T[] array, Predicate<T> predicate) {\n        return Arrays.stream(array)\n                     .filter(predicate.negate())\n                     .toArray(size -> Arrays.copyOf(array, size));\n    }\n\n    public static void main(String[] args) {\n        Integer[] numbers = {1, 2, 3, 4, 5, 6};\n        Predicate<Integer> isEven = n -> n % 2 == 0;\n        \n        Integer[] result = removeIf(numbers, isEven);\n        System.out.println(Arrays.toString(result)); // Output: [1, 3, 5]\n    }\n}\n```"
  },
  {
    "task": "Implement a function to determine if two arrays have any common elements.",
    "code": "```java\nimport java.util.HashSet;\n\npublic class ArrayCommonElements {\n    public static boolean haveCommonElements(int[] array1, int[] array2) {\n        HashSet<Integer> elements = new HashSet<>();\n        \n        for (int num : array1) {\n            elements.add(num);\n        }\n        \n        for (int num : array2) {\n            if (elements.contains(num)) {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n}\n```"
  },
  {
    "task": "Create a script to initialize an empty array and populate it with user input.",
    "code": "```java\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        \n        System.out.print(\"Enter the number of elements: \");\n        int n = scanner.nextInt();\n        \n        int[] array = new int[n];\n        \n        for (int i = 0; i < n; i++) {\n            System.out.print(\"Enter element \" + (i + 1) + \": \");\n            array[i] = scanner.nextInt();\n        }\n        \n        scanner.close();\n    }\n}\n```"
  },
  {
    "task": "Write a program to find the maximum sum of non-adjacent elements in an array.",
    "code": "```java\npublic class MaxSumNonAdjacent {\n    public static int findMaxSum(int[] nums) {\n        if (nums == null || nums.length == 0) return 0;\n        if (nums.length == 1) return nums[0];\n\n        int prev1 = Math.max(nums[0], nums[1]);\n        int prev2 = nums[0];\n        int maxSum = prev1;\n\n        for (int i = 2; i < nums.length; i++) {\n            maxSum = Math.max(prev1, prev2 + nums[i]);\n            prev2 = prev1;\n            prev1 = maxSum;\n        }\n\n        return maxSum;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {3, 2, 5, 10, 7};\n        System.out.println(\"Maximum sum of non-adjacent elements: \" + findMaxSum(nums));\n    }\n}\n```"
  },
  {
    "task": "Design a function to shuffle an array randomly.",
    "code": "```java\nimport java.util.Random;\n\npublic class ArrayShuffler {\n\n    public static void shuffleArray(int[] array) {\n        Random random = new Random();\n        for (int i = array.length - 1; i > 0; i--) {\n            int index = random.nextInt(i + 1);\n            int temp = array[index];\n            array[index] = array[i];\n            array[i] = temp;\n        }\n    }\n\n    public static void main(String[] args) {\n        int[] array = {1, 2, 3, 4, 5};\n        shuffleArray(array);\n        for (int num : array) {\n            System.out.print(num + \" \");\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a method to generate a new array where each element is the cumulative product of the input array.",
    "code": "```java\npublic class CumulativeProductArray {\n    public static int[] cumulativeProduct(int[] inputArray) {\n        int[] resultArray = new int[inputArray.length];\n        int cumulativeProduct = 1;\n        for (int i = 0; i < inputArray.length; i++) {\n            cumulativeProduct *= inputArray[i];\n            resultArray[i] = cumulativeProduct;\n        }\n        return resultArray;\n    }\n\n    public static void main(String[] args) {\n        int[] inputArray = {1, 2, 3, 4, 5};\n        int[] resultArray = cumulativeProduct(inputArray);\n        for (int value : resultArray) {\n            System.out.print(value + \" \");\n        }\n    }\n}\n```"
  },
  {
    "task": "Develop a routine to find the largest element in each row of a 2D array.",
    "code": "```java\npublic class LargestElementInRow {\n\n    public static int[] findLargestInRows(int[][] matrix) {\n        int numRows = matrix.length;\n        int[] largestInRows = new int[numRows];\n\n        for (int i = 0; i < numRows; i++) {\n            int maxInRow = matrix[i][0];\n            for (int j = 1; j < matrix[i].length; j++) {\n                if (matrix[i][j] > maxInRow) {\n                    maxInRow = matrix[i][j];\n                }\n            }\n            largestInRows[i] = maxInRow;\n        }\n\n        return largestInRows;\n    }\n\n    public static void main(String[] args) {\n        int[][] matrix = {\n            {3, 5, 1},\n            {7, 2, 9},\n            {8, 6, 4}\n        };\n\n        int[] result = findLargestInRows(matrix);\n\n        for (int max : result) {\n            System.out.println(max);\n        }\n    }\n}\n```"
  },
  {
    "task": "Implement a function to count the number of negative numbers in an array.",
    "code": "```java\npublic class NegativeNumberCounter {\n    public static int countNegatives(int[] numbers) {\n        int count = 0;\n        for (int number : numbers) {\n            if (number < 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        int[] array = {-1, 2, -3, 4, -5, 6};\n        System.out.println(countNegatives(array)); // Output: 3\n    }\n}\n```"
  },
  {
    "task": "Write a script to find the longest subarray with all distinct elements.",
    "code": "```java\nimport java.util.HashSet;\n\npublic class LongestDistinctSubarray {\n\n    public static int findLongestSubarrayWithDistinctElements(int[] arr) {\n        int n = arr.length;\n        int maxLength = 0;\n        int start = 0;\n        \n        HashSet<Integer> set = new HashSet<>();\n        \n        for (int end = 0; end < n; end++) {\n            while (set.contains(arr[end])) {\n                set.remove(arr[start]);\n                start++;\n            }\n            set.add(arr[end]);\n            maxLength = Math.max(maxLength, end - start + 1);\n        }\n        \n        return maxLength;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 3, 1, 2, 3, 4, 5};\n        int result = findLongestSubarrayWithDistinctElements(arr);\n        System.out.println(\"Length of the longest subarray with all distinct elements: \" + result);\n    }\n}\n```"
  }
]