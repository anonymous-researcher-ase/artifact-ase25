[
  {
    "task": "Create a function that takes two boolean inputs and returns true if both are true using logical AND.",
    "code": "```java\npublic class LogicalOperations {\n    public static boolean bothTrue(boolean a, boolean b) {\n        return a && b;\n    }\n}\n```"
  },
  {
    "task": "Write a script to check if either of two given conditions are met using logical OR.",
    "code": "```java\npublic class LogicalOperations {\n    public static void main(String[] args) {\n        boolean condition1 = true; // Example condition\n        boolean condition2 = false; // Example condition\n        \n        if (condition1 || condition2) {\n            System.out.println(\"At least one condition is met.\");\n        } else {\n            System.out.println(\"Neither condition is met.\");\n        }\n    }\n}\n```"
  },
  {
    "task": "Develop a program that negates a boolean variable using logical NOT.",
    "code": "```java\npublic class LogicalNotExample {\n    public static void main(String[] args) {\n        boolean originalValue = true;\n        boolean negatedValue = !originalValue;\n        System.out.println(\"Original: \" + originalValue);\n        System.out.println(\"Negated: \" + negatedValue);\n    }\n}\n```"
  },
  {
    "task": "Implement a feature that determines if a number is within a specific range using logical operators.",
    "code": "```java\npublic class RangeChecker {\n\n    public static boolean isWithinRange(int number, int lowerBound, int upperBound) {\n        return number >= lowerBound && number <= upperBound;\n    }\n\n    public static void main(String[] args) {\n        int number = 10;\n        int lowerBound = 5;\n        int upperBound = 15;\n        \n        boolean result = isWithinRange(number, lowerBound, upperBound);\n        System.out.println(\"Is the number within range? \" + result);\n    }\n}\n```"
  },
  {
    "task": "Design a system that checks if a user has both read and write permissions using logical AND.",
    "code": "```java\npublic class PermissionChecker {\n\n    public static boolean hasReadAndWritePermissions(boolean hasReadPermission, boolean hasWritePermission) {\n        return hasReadPermission && hasWritePermission;\n    }\n\n    public static void main(String[] args) {\n        boolean userHasReadPermission = true;  // Example input\n        boolean userHasWritePermission = true; // Example input\n\n        boolean hasBothPermissions = hasReadAndWritePermissions(userHasReadPermission, userHasWritePermission);\n        System.out.println(\"User has both read and write permissions: \" + hasBothPermissions);\n    }\n}\n```"
  },
  {
    "task": "Write a function to verify if a string is neither empty nor null using logical NOT.",
    "code": "```java\npublic class StringVerifier {\n    public static boolean isNotEmptyOrNull(String str) {\n        return !(str == null || str.isEmpty());\n    }\n}\n```"
  },
  {
    "task": "Create a conditional statement that executes a block of code if either of two expressions are true using logical OR.",
    "code": "```java\npublic class LogicalOperationsExample {\n    public static void main(String[] args) {\n        boolean expression1 = true; // Example value\n        boolean expression2 = false; // Example value\n\n        if (expression1 || expression2) {\n            System.out.println(\"At least one of the expressions is true.\");\n        }\n    }\n}\n```"
  },
  {
    "task": "Build a program that inverts the truth value of a given condition using logical NOT.",
    "code": "```java\npublic class LogicalNotExample {\n    public static void main(String[] args) {\n        boolean condition = true;\n        boolean invertedCondition = !condition;\n\n        System.out.println(\"Original Condition: \" + condition);\n        System.out.println(\"Inverted Condition: \" + invertedCondition);\n    }\n}\n```"
  },
  {
    "task": "Compose a function to return true if a list is not empty using logical NOT.",
    "code": "```java\nimport java.util.List;\n\npublic class ListChecker {\n    public static boolean isNotEmpty(List<?> list) {\n        return !list.isEmpty();\n    }\n}\n```"
  },
  {
    "task": "Develop a filter that selects items from a collection only if they meet multiple criteria using logical AND.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass Item {\n    String name;\n    int value;\n\n    Item(String name, int value) {\n        this.name = name;\n        this.value = value;\n    }\n\n    boolean meetsCriteria() {\n        return name.startsWith(\"A\") && value > 10;\n    }\n}\n\npublic class FilterItems {\n    public static void main(String[] args) {\n        List<Item> items = new ArrayList<>();\n        items.add(new Item(\"Apple\", 15));\n        items.add(new Item(\"Banana\", 20));\n        items.add(new Item(\"Apricot\", 8));\n        items.add(new Item(\"Avocado\", 25));\n\n        List<Item> filteredItems = filterItems(items);\n\n        for (Item item : filteredItems) {\n            System.out.println(\"Selected Item: \" + item.name);\n        }\n    }\n\n    public static List<Item> filterItems(List<Item> items) {\n        List<Item> filteredItems = new ArrayList<>();\n        for (Item item : items) {\n            if (item.meetsCriteria()) {\n                filteredItems.add(item);\n            }\n        }\n        return filteredItems;\n    }\n}\n```"
  },
  {
    "task": "Write a script that checks if a value is outside a given range using logical OR.",
    "code": "```java\npublic class RangeChecker {\n    public static void main(String[] args) {\n        int value = 25; // Example value\n        int lowerBound = 10;\n        int upperBound = 20;\n\n        if (value < lowerBound || value > upperBound) {\n            System.out.println(\"The value is outside the range.\");\n        } else {\n            System.out.println(\"The value is within the range.\");\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a small program to toggle a boolean flag using logical NOT.",
    "code": "```java\npublic class ToggleFlag {\n    public static void main(String[] args) {\n        boolean flag = false;\n        System.out.println(\"Initial flag value: \" + flag);\n        \n        // Toggle the flag\n        flag = !flag;\n        System.out.println(\"Toggled flag value: \" + flag);\n        \n        // Toggle the flag again\n        flag = !flag;\n        System.out.println(\"Toggled flag value again: \" + flag);\n    }\n}\n```"
  },
  {
    "task": "Implement a feature that evaluates if a username is both unique and valid using logical AND.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class UsernameValidator {\n\n    private Set<String> usernames;\n\n    public UsernameValidator() {\n        usernames = new HashSet<>();\n    }\n\n    public boolean isUnique(String username) {\n        return !usernames.contains(username);\n    }\n\n    public boolean isValid(String username) {\n        return username != null && !username.trim().isEmpty();\n    }\n\n    public boolean isUniqueAndValid(String username) {\n        return isUnique(username) && isValid(username);\n    }\n\n    public void addUsername(String username) {\n        if (isUniqueAndValid(username)) {\n            usernames.add(username);\n        }\n    }\n}\n```"
  },
  {
    "task": "Design a conditional to perform an action if neither of two flags are set using logical NOT.",
    "code": "```java\npublic class FlagChecker {\n    public static void main(String[] args) {\n        boolean flag1 = false;\n        boolean flag2 = false;\n\n        if (!flag1 && !flag2) {\n            // Action to perform if neither flag1 nor flag2 is set\n            System.out.println(\"Neither flag1 nor flag2 is set.\");\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a function that returns true if at least one of multiple boolean inputs is true using logical OR.",
    "code": "```java\npublic class LogicalOperations {\n    public static boolean atLeastOneTrue(boolean... inputs) {\n        for (boolean input : inputs) {\n            if (input) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n```"
  },
  {
    "task": "Create a loop that continues executing as long as two conditions are both false using logical NOT and AND.",
    "code": "```java\npublic class Main {\n    public static void main(String[] args) {\n        boolean condition1 = false;\n        boolean condition2 = false;\n        \n        while (!(condition1 || condition2)) {\n            // Your loop logic here\n            \n            // Example: Update conditions to eventually exit the loop\n            condition1 = true; // or some logic to change the conditions\n            condition2 = true; // or some logic to change the conditions\n        }\n    }\n}\n```"
  },
  {
    "task": "Develop a sequence that checks if a character is either a vowel or a consonant using logical OR.",
    "code": "```java\npublic class VowelOrConsonant {\n    public static void main(String[] args) {\n        char ch = 'a'; // Example character\n        if (isVowel(ch)) {\n            System.out.println(ch + \" is a vowel.\");\n        } else if (isConsonant(ch)) {\n            System.out.println(ch + \" is a consonant.\");\n        } else {\n            System.out.println(ch + \" is neither a vowel nor a consonant.\");\n        }\n    }\n\n    public static boolean isVowel(char ch) {\n        ch = Character.toLowerCase(ch);\n        return ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u';\n    }\n\n    public static boolean isConsonant(char ch) {\n        ch = Character.toLowerCase(ch);\n        return (ch >= 'a' && ch <= 'z') && !isVowel(ch);\n    }\n}\n```"
  },
  {
    "task": "Implement a validation that ensures a password is both of minimum length and contains numbers using logical AND.",
    "code": "```java\npublic class PasswordValidator {\n    private static final int MIN_LENGTH = 8;\n\n    public static boolean isValidPassword(String password) {\n        return password.length() >= MIN_LENGTH && containsNumber(password);\n    }\n\n    private static boolean containsNumber(String password) {\n        for (char c : password.toCharArray()) {\n            if (Character.isDigit(c)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        String password = \"pass1234\";\n        System.out.println(\"Is valid password: \" + isValidPassword(password));\n    }\n}\n```"
  },
  {
    "task": "Compose a test to determine if a point is not within a circle using logical NOT.",
    "code": "```java\npublic class PointInCircleTest {\n    public static void main(String[] args) {\n        double circleX = 0.0;\n        double circleY = 0.0;\n        double radius = 5.0;\n        \n        double pointX = 6.0;\n        double pointY = 0.0;\n\n        boolean isOutsideCircle = isPointOutsideCircle(circleX, circleY, radius, pointX, pointY);\n        System.out.println(\"The point is outside the circle: \" + isOutsideCircle);\n    }\n\n    public static boolean isPointOutsideCircle(double circleX, double circleY, double radius, double pointX, double pointY) {\n        double distanceSquared = Math.pow(pointX - circleX, 2) + Math.pow(pointY - circleY, 2);\n        return !(distanceSquared <= Math.pow(radius, 2));\n    }\n}\n```"
  },
  {
    "task": "Write a function to decide if a user is either an admin or an editor using logical OR.",
    "code": "```java\npublic class UserAuthorization {\n\n    public static boolean isAdminOrEditor(boolean isAdmin, boolean isEditor) {\n        return isAdmin || isEditor;\n    }\n\n    public static void main(String[] args) {\n        boolean isAdmin = true;\n        boolean isEditor = false;\n        \n        boolean result = isAdminOrEditor(isAdmin, isEditor);\n        System.out.println(\"User is admin or editor: \" + result);\n    }\n}\n```"
  },
  {
    "task": "Create a conditional statement to trigger an alert if two sensors both detect motion using logical AND.",
    "code": "```java\npublic class MotionSensorAlert {\n\n    public static void main(String[] args) {\n        boolean sensor1DetectedMotion = true; // Example value\n        boolean sensor2DetectedMotion = true; // Example value\n\n        if (sensor1DetectedMotion && sensor2DetectedMotion) {\n            System.out.println(\"Alert: Motion detected by both sensors!\");\n        }\n    }\n}\n```"
  },
  {
    "task": "Design a program to validate an email format and ensure it contains a domain using logical AND.",
    "code": "```java\npublic class EmailValidator {\n\n    public static boolean isValidEmail(String email) {\n        return email.contains(\"@\") && email.contains(\".\");\n    }\n\n    public static void main(String[] args) {\n        String email = \"example@domain.com\";\n        if (isValidEmail(email)) {\n            System.out.println(\"The email format is valid.\");\n        } else {\n            System.out.println(\"The email format is invalid.\");\n        }\n    }\n}\n```"
  },
  {
    "task": "Develop a method to confirm that a transaction is neither fraudulent nor unauthorized using logical NOT.",
    "code": "```java\npublic class TransactionChecker {\n\n    public boolean isTransactionValid(boolean isFraudulent, boolean isUnauthorized) {\n        return !isFraudulent && !isUnauthorized;\n    }\n\n    public static void main(String[] args) {\n        TransactionChecker checker = new TransactionChecker();\n\n        boolean isFraudulent = false;\n        boolean isUnauthorized = false;\n\n        boolean isValid = checker.isTransactionValid(isFraudulent, isUnauthorized);\n        System.out.println(\"Transaction is valid: \" + isValid);\n    }\n}\n```"
  },
  {
    "task": "Write a function that outputs true if a file is either missing or empty using logical OR.",
    "code": "```java\nimport java.io.File;\n\npublic class FileChecker {\n    public static boolean isFileMissingOrEmpty(String filePath) {\n        File file = new File(filePath);\n        return !file.exists() || file.length() == 0;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(isFileMissingOrEmpty(\"example.txt\")); // Example usage\n    }\n}\n```"
  },
  {
    "task": "Implement a system to check if a student's grade is neither failing nor incomplete using logical NOT.",
    "code": "```java\npublic class GradeChecker {\n    public static void main(String[] args) {\n        String grade = \"B\";  // Example grade\n        boolean isFailing = grade.equals(\"F\");\n        boolean isIncomplete = grade.equals(\"I\");\n        \n        if (!(isFailing || isIncomplete)) {\n            System.out.println(\"The grade is neither failing nor incomplete.\");\n        } else {\n            System.out.println(\"The grade is either failing or incomplete.\");\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a script that executes a command if a file is both readable and writable using logical AND.",
    "code": "```java\nimport java.io.File;\n\npublic class FileCheck {\n    public static void main(String[] args) {\n        File file = new File(\"path/to/your/file.txt\");\n        \n        if (file.canRead() && file.canWrite()) {\n            executeCommand();\n        }\n    }\n\n    private static void executeCommand() {\n        System.out.println(\"Executing command...\");\n        // Add your command logic here\n    }\n}\n```"
  },
  {
    "task": "Compose a function to determine if a temperature is not within a safe operating range using logical NOT.",
    "code": "```java\npublic class TemperatureChecker {\n\n    public static boolean isTemperatureUnsafe(int temperature) {\n        int safeLowerBound = 60;\n        int safeUpperBound = 75;\n        return !(temperature >= safeLowerBound && temperature <= safeUpperBound);\n    }\n\n    public static void main(String[] args) {\n        int temperature = 80;\n        boolean unsafe = isTemperatureUnsafe(temperature);\n        System.out.println(\"Is temperature unsafe? \" + unsafe);\n    }\n}\n```"
  },
  {
    "task": "Design a check to see if a car is either out of fuel or needs maintenance using logical OR.",
    "code": "```java\npublic class CarStatusChecker {\n    private boolean isOutOfFuel;\n    private boolean needsMaintenance;\n\n    public CarStatusChecker(boolean isOutOfFuel, boolean needsMaintenance) {\n        this.isOutOfFuel = isOutOfFuel;\n        this.needsMaintenance = needsMaintenance;\n    }\n\n    public boolean checkCarStatus() {\n        return isOutOfFuel || needsMaintenance;\n    }\n\n    public static void main(String[] args) {\n        CarStatusChecker car1 = new CarStatusChecker(true, false);\n        System.out.println(\"Car 1 needs attention: \" + car1.checkCarStatus());\n\n        CarStatusChecker car2 = new CarStatusChecker(false, true);\n        System.out.println(\"Car 2 needs attention: \" + car2.checkCarStatus());\n\n        CarStatusChecker car3 = new CarStatusChecker(false, false);\n        System.out.println(\"Car 3 needs attention: \" + car3.checkCarStatus());\n    }\n}\n```"
  },
  {
    "task": "Develop a routine that ensures a network connection is both stable and secure using logical AND.",
    "code": "```java\npublic class NetworkConnection {\n    private boolean isStable;\n    private boolean isSecure;\n\n    public NetworkConnection(boolean isStable, boolean isSecure) {\n        this.isStable = isStable;\n        this.isSecure = isSecure;\n    }\n\n    public boolean isConnectionStableAndSecure() {\n        return isStable && isSecure;\n    }\n\n    public static void main(String[] args) {\n        NetworkConnection connection = new NetworkConnection(true, true);\n        boolean result = connection.isConnectionStableAndSecure();\n        System.out.println(\"Connection is stable and secure: \" + result);\n    }\n}\n```"
  },
  {
    "task": "Write a conditional to print a message if a user is not logged in using logical NOT.",
    "code": "```java\nboolean isLoggedIn = false;\n\nif (!isLoggedIn) {\n    System.out.println(\"User is not logged in.\");\n}\n```"
  },
  {
    "task": "Create a function that checks if a number is both even and positive using logical AND.",
    "code": "```java\npublic class NumberCheck {\n    public static boolean isEvenAndPositive(int number) {\n        return number > 0 && number % 2 == 0;\n    }\n\n    public static void main(String[] args) {\n        int testNumber = 4;\n        System.out.println(\"Is the number \" + testNumber + \" even and positive? \" + isEvenAndPositive(testNumber));\n    }\n}\n```"
  },
  {
    "task": "Implement a feature that turns off a device if neither of two switches are on using logical NOT.",
    "code": "```java\npublic class DeviceController {\n    private boolean switch1;\n    private boolean switch2;\n    private boolean deviceOn;\n\n    public DeviceController() {\n        this.switch1 = false;\n        this.switch2 = false;\n        this.deviceOn = false;\n    }\n\n    public void setSwitch1(boolean state) {\n        this.switch1 = state;\n        updateDeviceState();\n    }\n\n    public void setSwitch2(boolean state) {\n        this.switch2 = state;\n        updateDeviceState();\n    }\n\n    private void updateDeviceState() {\n        if (!(switch1 || switch2)) {\n            deviceOn = false;\n        }\n    }\n\n    public boolean isDeviceOn() {\n        return deviceOn;\n    }\n}\n```"
  },
  {
    "task": "Compose a script to alert if a server is either down or running slow using logical OR.",
    "code": "```java\npublic class ServerStatusChecker {\n    public static void main(String[] args) {\n        boolean isServerDown = checkIfServerIsDown();\n        boolean isServerSlow = checkIfServerIsSlow();\n\n        if (isServerDown || isServerSlow) {\n            System.out.println(\"Alert: The server is either down or running slow.\");\n        }\n    }\n\n    private static boolean checkIfServerIsDown() {\n        // Placeholder for actual server down check logic\n        return false;\n    }\n\n    private static boolean checkIfServerIsSlow() {\n        // Placeholder for actual server slow check logic\n        return false;\n    }\n}\n```"
  },
  {
    "task": "Design a validation method to ensure a form field is not empty using logical NOT.",
    "code": "```java\npublic class FormValidator {\n\n    public static boolean isFieldNotEmpty(String field) {\n        return !(field == null || field.isEmpty());\n    }\n\n    public static void main(String[] args) {\n        String testField = \"Hello, World!\";\n        System.out.println(\"Is field not empty? \" + isFieldNotEmpty(testField));\n    }\n}\n```"
  },
  {
    "task": "Write a program to determine if two strings are both non-empty using logical AND.",
    "code": "```java\npublic class LogicalOperations {\n    public static void main(String[] args) {\n        String str1 = \"Hello\";\n        String str2 = \"World\";\n\n        if (!str1.isEmpty() && !str2.isEmpty()) {\n            System.out.println(\"Both strings are non-empty.\");\n        } else {\n            System.out.println(\"At least one string is empty.\");\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a function that checks if a number is either prime or a perfect square using logical OR.",
    "code": "```java\npublic class NumberCheck {\n    public static void main(String[] args) {\n        System.out.println(isPrimeOrPerfectSquare(5));  // true\n        System.out.println(isPrimeOrPerfectSquare(9));  // true\n        System.out.println(isPrimeOrPerfectSquare(8));  // false\n    }\n\n    public static boolean isPrimeOrPerfectSquare(int number) {\n        return isPrime(number) || isPerfectSquare(number);\n    }\n\n    private static boolean isPrime(int number) {\n        if (number <= 1) return false;\n        for (int i = 2; i * i <= number; i++) {\n            if (number % i == 0) return false;\n        }\n        return true;\n    }\n\n    private static boolean isPerfectSquare(int number) {\n        int sqrt = (int) Math.sqrt(number);\n        return sqrt * sqrt == number;\n    }\n}\n```"
  },
  {
    "task": "Develop a script to ensure a user is either an adult or has parental consent using logical OR.",
    "code": "```java\nimport java.util.Scanner;\n\npublic class UserConsentChecker {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.println(\"Enter your age:\");\n        int age = scanner.nextInt();\n\n        System.out.println(\"Do you have parental consent? (true/false):\");\n        boolean hasParentalConsent = scanner.nextBoolean();\n\n        if (age >= 18 || hasParentalConsent) {\n            System.out.println(\"Access granted.\");\n        } else {\n            System.out.println(\"Access denied.\");\n        }\n\n        scanner.close();\n    }\n}\n```"
  },
  {
    "task": "Implement a condition to execute a task if a variable is neither zero nor negative using logical NOT.",
    "code": "```java\npublic class LogicalOperations {\n    public static void main(String[] args) {\n        int variable = 5; // Example value\n\n        if (!(variable <= 0)) {\n            // Execute task\n            System.out.println(\"Variable is positive and non-zero.\");\n        }\n    }\n}\n```"
  },
  {
    "task": "Compose a method to verify if a system is both up-to-date and functioning using logical AND.",
    "code": "```java\npublic class SystemStatus {\n\n    public boolean isSystemUpToDateAndFunctioning(boolean isUpToDate, boolean isFunctioning) {\n        return isUpToDate && isFunctioning;\n    }\n\n    public static void main(String[] args) {\n        SystemStatus statusChecker = new SystemStatus();\n        boolean upToDate = true; // Example value\n        boolean functioning = true; // Example value\n\n        boolean result = statusChecker.isSystemUpToDateAndFunctioning(upToDate, functioning);\n        System.out.println(\"System is both up-to-date and functioning: \" + result);\n    }\n}\n```"
  },
  {
    "task": "Write a function that returns true if a list contains neither duplicates nor null values using logical NOT.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.List;\n\npublic class ListChecker {\n    public static boolean containsNoDuplicatesOrNulls(List<?> list) {\n        if (list == null) return false;\n        HashSet<Object> seen = new HashSet<>();\n        for (Object item : list) {\n            if (item == null || !seen.add(item)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```"
  },
  {
    "task": "Create a script to perform an action if a temperature is either too high or too low using logical OR.",
    "code": "```java\npublic class TemperatureCheck {\n    public static void main(String[] args) {\n        int temperature = 35; // Example temperature\n        int highThreshold = 30;\n        int lowThreshold = 15;\n\n        if (temperature > highThreshold || temperature < lowThreshold) {\n            System.out.println(\"Temperature is out of the acceptable range.\");\n        } else {\n            System.out.println(\"Temperature is within the acceptable range.\");\n        }\n    }\n}\n```"
  },
  {
    "task": "Design a feature to toggle an option if a setting is not enabled using logical NOT.",
    "code": "```java\npublic class ToggleOption {\n    private boolean settingEnabled;\n    private boolean optionToggled;\n\n    public ToggleOption(boolean settingEnabled) {\n        this.settingEnabled = settingEnabled;\n        this.optionToggled = false;\n    }\n\n    public void toggleOptionIfSettingNotEnabled() {\n        if (!settingEnabled) {\n            optionToggled = !optionToggled;\n        }\n    }\n\n    public boolean isOptionToggled() {\n        return optionToggled;\n    }\n\n    public static void main(String[] args) {\n        ToggleOption toggleOption = new ToggleOption(false);\n        toggleOption.toggleOptionIfSettingNotEnabled();\n        System.out.println(\"Option Toggled: \" + toggleOption.isOptionToggled());\n    }\n}\n```"
  },
  {
    "task": "Develop a check to ensure a username is both available and meets length requirements using logical AND.",
    "code": "```java\npublic class UsernameCheck {\n    public static boolean isUsernameValid(String username, boolean isAvailable, int minLength, int maxLength) {\n        return isAvailable && username.length() >= minLength && username.length() <= maxLength;\n    }\n\n    public static void main(String[] args) {\n        String username = \"exampleUser\";\n        boolean isAvailable = true;\n        int minLength = 5;\n        int maxLength = 15;\n\n        boolean result = isUsernameValid(username, isAvailable, minLength, maxLength);\n        System.out.println(\"Is the username valid? \" + result);\n    }\n}\n```"
  },
  {
    "task": "Implement a function that returns true if a number is neither too large nor too small using logical NOT.",
    "code": "```java\npublic class NumberChecker {\n    public static boolean isNeitherTooLargeNorTooSmall(int number) {\n        int lowerBound = 10;\n        int upperBound = 100;\n        return !(number < lowerBound || number > upperBound);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(isNeitherTooLargeNorTooSmall(50));  // true\n        System.out.println(isNeitherTooLargeNorTooSmall(5));   // false\n        System.out.println(isNeitherTooLargeNorTooSmall(105)); // false\n    }\n}\n```"
  },
  {
    "task": "Write a conditional to print a warning if a disk is either full or nearly full using logical OR.",
    "code": "```java\npublic class DiskSpaceMonitor {\n    public static void main(String[] args) {\n        double diskUsagePercentage = 92.5; // Example usage percentage\n\n        if (diskUsagePercentage >= 90.0 || diskUsagePercentage == 100.0) {\n            System.out.println(\"Warning: Disk is either full or nearly full!\");\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a routine to validate that two dates are both within a valid range using logical AND.",
    "code": "```java\nimport java.time.LocalDate;\n\npublic class DateValidator {\n\n    public static boolean areDatesWithinRange(LocalDate date1, LocalDate date2, LocalDate startDate, LocalDate endDate) {\n        return (date1 != null && date2 != null) && \n               (!date1.isBefore(startDate) && !date1.isAfter(endDate)) && \n               (!date2.isBefore(startDate) && !date2.isAfter(endDate));\n    }\n\n    public static void main(String[] args) {\n        LocalDate startDate = LocalDate.of(2023, 1, 1);\n        LocalDate endDate = LocalDate.of(2023, 12, 31);\n        LocalDate date1 = LocalDate.of(2023, 5, 15);\n        LocalDate date2 = LocalDate.of(2023, 8, 20);\n\n        boolean result = areDatesWithinRange(date1, date2, startDate, endDate);\n        System.out.println(\"Both dates are within range: \" + result);\n    }\n}\n```"
  },
  {
    "task": "Compose a function to decide if a person is either a minor or a senior using logical OR.",
    "code": "```java\npublic class AgeChecker {\n    public static boolean isMinorOrSenior(int age) {\n        return age < 18 || age >= 65;\n    }\n\n    public static void main(String[] args) {\n        int age1 = 16;\n        int age2 = 30;\n        int age3 = 70;\n\n        System.out.println(\"Age \" + age1 + \" is minor or senior: \" + isMinorOrSenior(age1));\n        System.out.println(\"Age \" + age2 + \" is minor or senior: \" + isMinorOrSenior(age2));\n        System.out.println(\"Age \" + age3 + \" is minor or senior: \" + isMinorOrSenior(age3));\n    }\n}\n```"
  },
  {
    "task": "Design a script to execute a task if a condition is not met using logical NOT.",
    "code": "```java\npublic class LogicalNotExample {\n    public static void main(String[] args) {\n        boolean condition = false;\n\n        if (!condition) {\n            executeTask();\n        }\n    }\n\n    public static void executeTask() {\n        System.out.println(\"Executing task because condition is not met.\");\n    }\n}\n```"
  },
  {
    "task": "Develop a program to verify if a process is neither running nor scheduled using logical NOT.",
    "code": "```java\npublic class ProcessChecker {\n    public static void main(String[] args) {\n        boolean isRunning = false; // Example state, can be set to true or false\n        boolean isScheduled = false; // Example state, can be set to true or false\n\n        if (!isRunning && !isScheduled) {\n            System.out.println(\"The process is neither running nor scheduled.\");\n        } else {\n            System.out.println(\"The process is either running or scheduled.\");\n        }\n    }\n}\n```"
  },
  {
    "task": "Implement a feature that confirms a file is both accessible and not locked using logical AND.",
    "code": "```java\nimport java.nio.file.*;\nimport java.nio.channels.*;\nimport java.io.*;\n\npublic class FileAccessChecker {\n\n    public static boolean isFileAccessibleAndNotLocked(Path path) {\n        return Files.isReadable(path) && isFileNotLocked(path);\n    }\n\n    private static boolean isFileNotLocked(Path path) {\n        try (FileChannel channel = FileChannel.open(path, StandardOpenOption.WRITE)) {\n            return true;\n        } catch (IOException e) {\n            return false;\n        }\n    }\n\n    public static void main(String[] args) {\n        Path filePath = Paths.get(\"example.txt\");\n        if (isFileAccessibleAndNotLocked(filePath)) {\n            System.out.println(\"The file is accessible and not locked.\");\n        } else {\n            System.out.println(\"The file is either not accessible or locked.\");\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a script to check if a device is either offline or in maintenance mode using logical OR.",
    "code": "```java\npublic class DeviceStatusChecker {\n\n    public static void main(String[] args) {\n        boolean isOffline = true; // Example status\n        boolean inMaintenanceMode = false; // Example status\n\n        if (isOffline || inMaintenanceMode) {\n            System.out.println(\"The device is either offline or in maintenance mode.\");\n        } else {\n            System.out.println(\"The device is online and not in maintenance mode.\");\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a function to ensure a password is both complex and unique using logical AND.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class PasswordValidator {\n    private Set<String> previousPasswords = new HashSet<>();\n\n    public boolean isPasswordValid(String password) {\n        return isComplex(password) && isUnique(password);\n    }\n\n    private boolean isComplex(String password) {\n        boolean hasUpper = false, hasLower = false, hasDigit = false, hasSpecial = false;\n        String specialCharacters = \"!@#$%^&*()-+\";\n\n        for (char ch : password.toCharArray()) {\n            if (Character.isUpperCase(ch)) hasUpper = true;\n            if (Character.isLowerCase(ch)) hasLower = true;\n            if (Character.isDigit(ch)) hasDigit = true;\n            if (specialCharacters.indexOf(ch) != -1) hasSpecial = true;\n        }\n\n        return hasUpper && hasLower && hasDigit && hasSpecial && password.length() >= 8;\n    }\n\n    private boolean isUnique(String password) {\n        if (previousPasswords.contains(password)) {\n            return false;\n        } else {\n            previousPasswords.add(password);\n            return true;\n        }\n    }\n\n    public static void main(String[] args) {\n        PasswordValidator validator = new PasswordValidator();\n        System.out.println(validator.isPasswordValid(\"Abcdef1!\")); // Example usage\n    }\n}\n```"
  },
  {
    "task": "Design a validation that ensures a value is not negative using logical NOT.",
    "code": "```java\npublic class ValueValidator {\n    public static boolean isNonNegative(int value) {\n        return !(value < 0);\n    }\n\n    public static void main(String[] args) {\n        int testValue = 5;\n        if (isNonNegative(testValue)) {\n            System.out.println(\"Value is non-negative.\");\n        } else {\n            System.out.println(\"Value is negative.\");\n        }\n    }\n}\n```"
  },
  {
    "task": "Develop a check to see if a user has either exceeded their quota or is nearing it using logical OR.",
    "code": "```java\npublic class QuotaChecker {\n    private static final int QUOTA_LIMIT = 100;\n    private static final int NEAR_QUOTA_THRESHOLD = 90;\n\n    public static boolean isQuotaExceededOrNearing(int usage) {\n        return usage > QUOTA_LIMIT || usage >= NEAR_QUOTA_THRESHOLD;\n    }\n\n    public static void main(String[] args) {\n        int userUsage = 95;\n        if (isQuotaExceededOrNearing(userUsage)) {\n            System.out.println(\"User has either exceeded their quota or is nearing it.\");\n        } else {\n            System.out.println(\"User is within the safe usage limit.\");\n        }\n    }\n}\n```"
  },
  {
    "task": "Implement a routine to confirm that a user is both authenticated and authorized using logical AND.",
    "code": "```java\npublic class UserAccess {\n\n    public static void main(String[] args) {\n        boolean isAuthenticated = true; // Example value\n        boolean isAuthorized = true; // Example value\n\n        if (isUserAuthenticatedAndAuthorized(isAuthenticated, isAuthorized)) {\n            System.out.println(\"User is authenticated and authorized.\");\n        } else {\n            System.out.println(\"User access denied.\");\n        }\n    }\n\n    public static boolean isUserAuthenticatedAndAuthorized(boolean isAuthenticated, boolean isAuthorized) {\n        return isAuthenticated && isAuthorized;\n    }\n}\n```"
  },
  {
    "task": "Compose a function to determine if a light is either on or blinking using logical OR.",
    "code": "```java\npublic class LightStatus {\n\n    public static boolean isLightOnOrBlinking(boolean isOn, boolean isBlinking) {\n        return isOn || isBlinking;\n    }\n\n    public static void main(String[] args) {\n        boolean lightOn = true;\n        boolean lightBlinking = false;\n\n        boolean result = isLightOnOrBlinking(lightOn, lightBlinking);\n        System.out.println(\"The light is on or blinking: \" + result);\n    }\n}\n```"
  },
  {
    "task": "Write a script that executes a command if a network connection is neither weak nor unstable using logical NOT.",
    "code": "```java\npublic class NetworkChecker {\n    public static void main(String[] args) {\n        boolean isWeakConnection = false; // Example value\n        boolean isUnstableConnection = false; // Example value\n\n        if (!(isWeakConnection || isUnstableConnection)) {\n            executeCommand();\n        }\n    }\n\n    public static void executeCommand() {\n        System.out.println(\"Executing command...\");\n    }\n}\n```"
  },
  {
    "task": "Create a program to verify that a sensor is both calibrated and active using logical AND.",
    "code": "```java\npublic class SensorCheck {\n    public static void main(String[] args) {\n        boolean isCalibrated = true;  // Assume sensor is calibrated\n        boolean isActive = true;      // Assume sensor is active\n\n        if (isCalibrated && isActive) {\n            System.out.println(\"Sensor is both calibrated and active.\");\n        } else {\n            System.out.println(\"Sensor is not properly calibrated or active.\");\n        }\n    }\n}\n```"
  },
  {
    "task": "Design a feature to alert if a process is either overdue or incomplete using logical OR.",
    "code": "```java\npublic class ProcessAlert {\n\n    public static boolean isProcessOverdue() {\n        // Placeholder for overdue logic\n        return false; // Example value\n    }\n\n    public static boolean isProcessIncomplete() {\n        // Placeholder for incomplete logic\n        return true; // Example value\n    }\n\n    public static boolean shouldAlert() {\n        return isProcessOverdue() || isProcessIncomplete();\n    }\n\n    public static void main(String[] args) {\n        if (shouldAlert()) {\n            System.out.println(\"Alert: The process is either overdue or incomplete.\");\n        } else {\n            System.out.println(\"No alert: The process is on track.\");\n        }\n    }\n}\n```"
  },
  {
    "task": "Develop a script to check if a person is neither a guest nor a temporary user using logical NOT.",
    "code": "```java\npublic class UserChecker {\n    public static void main(String[] args) {\n        boolean isGuest = false;\n        boolean isTemporaryUser = false;\n\n        boolean isNeitherGuestNorTemporary = !isGuest && !isTemporaryUser;\n\n        System.out.println(\"The person is neither a guest nor a temporary user: \" + isNeitherGuestNorTemporary);\n    }\n}\n```"
  },
  {
    "task": "Implement a function to toggle a light if a switch is not pressed using logical NOT.",
    "code": "```java\npublic class LightToggle {\n\n    private boolean lightOn = false;\n\n    public void toggleLight(boolean switchPressed) {\n        if (!switchPressed) {\n            lightOn = !lightOn;\n        }\n    }\n\n    public boolean isLightOn() {\n        return lightOn;\n    }\n\n    public static void main(String[] args) {\n        LightToggle lightToggle = new LightToggle();\n        System.out.println(\"Initial light state: \" + lightToggle.isLightOn());\n        lightToggle.toggleLight(false);\n        System.out.println(\"Light state after toggle: \" + lightToggle.isLightOn());\n    }\n}\n```"
  },
  {
    "task": "Write a conditional to trigger an event if a file is either corrupted or missing using logical OR.",
    "code": "```java\nimport java.nio.file.Files;\nimport java.nio.file.Path;\n\npublic class FileChecker {\n    public static void main(String[] args) {\n        Path filePath = Path.of(\"example.txt\");\n        boolean isCorrupted = checkFileCorruption(filePath);\n\n        if (Files.notExists(filePath) || isCorrupted) {\n            triggerEvent();\n        }\n    }\n\n    private static boolean checkFileCorruption(Path filePath) {\n        // Implement corruption check logic here\n        return false; // Placeholder return value\n    }\n\n    private static void triggerEvent() {\n        System.out.println(\"Event triggered: File is corrupted or missing.\");\n    }\n}\n```"
  },
  {
    "task": "Create a routine that verifies if a vehicle is both insured and registered using logical AND.",
    "code": "```java\npublic class VehicleChecker {\n    public boolean isVehicleEligible(boolean isInsured, boolean isRegistered) {\n        return isInsured && isRegistered;\n    }\n\n    public static void main(String[] args) {\n        VehicleChecker checker = new VehicleChecker();\n        \n        boolean insured = true;\n        boolean registered = true;\n        \n        boolean isEligible = checker.isVehicleEligible(insured, registered);\n        System.out.println(\"Vehicle is eligible: \" + isEligible);\n    }\n}\n```"
  },
  {
    "task": "Compose a method to check if an account is either overdrawn or flagged using logical OR.",
    "code": "```java\npublic class Account {\n    \n    private boolean isOverdrawn;\n    private boolean isFlagged;\n    \n    public Account(boolean isOverdrawn, boolean isFlagged) {\n        this.isOverdrawn = isOverdrawn;\n        this.isFlagged = isFlagged;\n    }\n    \n    public boolean isOverdrawnOrFlagged() {\n        return isOverdrawn || isFlagged;\n    }\n    \n    public static void main(String[] args) {\n        Account account = new Account(true, false);\n        System.out.println(\"Account is overdrawn or flagged: \" + account.isOverdrawnOrFlagged());\n    }\n}\n```"
  },
  {
    "task": "Design a program to ensure an application is both installed and updated using logical AND.",
    "code": "```java\npublic class ApplicationChecker {\n    private boolean isInstalled;\n    private boolean isUpdated;\n\n    public ApplicationChecker(boolean isInstalled, boolean isUpdated) {\n        this.isInstalled = isInstalled;\n        this.isUpdated = isUpdated;\n    }\n\n    public boolean isReadyToUse() {\n        return isInstalled && isUpdated;\n    }\n\n    public static void main(String[] args) {\n        ApplicationChecker appChecker = new ApplicationChecker(true, true);\n        if (appChecker.isReadyToUse()) {\n            System.out.println(\"The application is both installed and updated.\");\n        } else {\n            System.out.println(\"The application is not ready. Please ensure it is installed and updated.\");\n        }\n    }\n}\n```"
  },
  {
    "task": "Develop a function that returns true if a number is neither divisible by 3 nor 5 using logical NOT.",
    "code": "```java\npublic class NumberChecker {\n    public static boolean isNotDivisibleBy3Or5(int number) {\n        return !(number % 3 == 0 || number % 5 == 0);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(isNotDivisibleBy3Or5(7)); // true\n        System.out.println(isNotDivisibleBy3Or5(9)); // false\n        System.out.println(isNotDivisibleBy3Or5(10)); // false\n        System.out.println(isNotDivisibleBy3Or5(11)); // true\n    }\n}\n```"
  },
  {
    "task": "Implement a script that alerts if a device is either overheating or underperforming using logical OR.",
    "code": "```java\npublic class DeviceMonitor {\n\n    public static void main(String[] args) {\n        int temperature = 85; // Example temperature in degrees Celsius\n        int performance = 45; // Example performance in percentage\n\n        // Define thresholds for overheating and underperforming\n        int overheatingThreshold = 80;\n        int underperformingThreshold = 50;\n\n        // Check if device is either overheating or underperforming\n        if (temperature > overheatingThreshold || performance < underperformingThreshold) {\n            System.out.println(\"Alert: Device is either overheating or underperforming.\");\n        } else {\n            System.out.println(\"Device is operating within normal parameters.\");\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a function to validate that a directory is both writable and not full using logical AND.",
    "code": "```java\nimport java.nio.file.*;\nimport java.io.IOException;\n\npublic class DirectoryValidator {\n\n    public boolean isDirectoryWritableAndNotFull(Path directory) {\n        try {\n            return Files.isWritable(directory) && hasFreeSpace(directory);\n        } catch (IOException e) {\n            return false;\n        }\n    }\n\n    private boolean hasFreeSpace(Path directory) throws IOException {\n        FileStore store = Files.getFileStore(directory);\n        return store.getUsableSpace() > 0;\n    }\n}\n```"
  },
  {
    "task": "Create a conditional statement that executes if a button is not clicked using logical NOT.",
    "code": "```java\nboolean isButtonClicked = false;\n\nif (!isButtonClicked) {\n    // Execute this block if the button is not clicked\n    System.out.println(\"Button has not been clicked.\");\n}\n```"
  },
  {
    "task": "Design a check to ensure a transaction is both verified and complete using logical AND.",
    "code": "```java\npublic class TransactionChecker {\n    public static boolean isTransactionValid(boolean isVerified, boolean isComplete) {\n        return isVerified && isComplete;\n    }\n\n    public static void main(String[] args) {\n        boolean transactionVerified = true;\n        boolean transactionComplete = true;\n        \n        boolean isValid = isTransactionValid(transactionVerified, transactionComplete);\n        System.out.println(\"Transaction is valid: \" + isValid);\n    }\n}\n```"
  },
  {
    "task": "Develop a routine to determine if a string is either uppercase or lowercase using logical OR.",
    "code": "```java\npublic class StringCaseChecker {\n\n    public static boolean isUpperCaseOrLowerCase(String input) {\n        return input.equals(input.toUpperCase()) || input.equals(input.toLowerCase());\n    }\n\n    public static void main(String[] args) {\n        String testString1 = \"HELLO\";\n        String testString2 = \"hello\";\n        String testString3 = \"Hello\";\n\n        System.out.println(isUpperCaseOrLowerCase(testString1)); // true\n        System.out.println(isUpperCaseOrLowerCase(testString2)); // true\n        System.out.println(isUpperCaseOrLowerCase(testString3)); // false\n    }\n}\n```"
  },
  {
    "task": "Implement a feature to execute a task if a variable is neither null nor undefined using logical NOT.",
    "code": "```java\npublic class TaskExecutor {\n\n    public static void executeTaskIfNotNullOrUndefined(Object variable) {\n        if (!(variable == null)) {\n            // Execute the task\n            System.out.println(\"Executing task...\");\n        } else {\n            System.out.println(\"Variable is null or undefined.\");\n        }\n    }\n\n    public static void main(String[] args) {\n        Object testVariable = new Object();\n        executeTaskIfNotNullOrUndefined(testVariable);\n        \n        testVariable = null;\n        executeTaskIfNotNullOrUndefined(testVariable);\n    }\n}\n```"
  },
  {
    "task": "Compose a function to return true if a date is either today or tomorrow using logical OR.",
    "code": "```java\nimport java.time.LocalDate;\n\npublic class DateChecker {\n    public boolean isTodayOrTomorrow(LocalDate date) {\n        LocalDate today = LocalDate.now();\n        LocalDate tomorrow = today.plusDays(1);\n        return date.equals(today) || date.equals(tomorrow);\n    }\n}\n```"
  },
  {
    "task": "Write a script to confirm that a system is both running and not in maintenance mode using logical AND.",
    "code": "```java\npublic class SystemCheck {\n    public static void main(String[] args) {\n        boolean isRunning = true; // Example value\n        boolean isInMaintenance = false; // Example value\n\n        if (isRunning && !isInMaintenance) {\n            System.out.println(\"System is running and not in maintenance mode.\");\n        } else {\n            System.out.println(\"System check failed.\");\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a program to verify if a text field is neither empty nor exceeds character limit using logical NOT.",
    "code": "```java\npublic class TextFieldValidator {\n    private static final int CHARACTER_LIMIT = 100;\n\n    public static boolean isValidTextField(String text) {\n        return !(text.isEmpty() || text.length() > CHARACTER_LIMIT);\n    }\n\n    public static void main(String[] args) {\n        String testText = \"Sample text\";\n        if (isValidTextField(testText)) {\n            System.out.println(\"The text field is valid.\");\n        } else {\n            System.out.println(\"The text field is invalid.\");\n        }\n    }\n}\n```"
  },
  {
    "task": "Design a feature that checks if a user has either admin privileges or editor rights using logical OR.",
    "code": "```java\npublic class UserPrivilegesChecker {\n    private boolean isAdmin;\n    private boolean isEditor;\n\n    public UserPrivilegesChecker(boolean isAdmin, boolean isEditor) {\n        this.isAdmin = isAdmin;\n        this.isEditor = isEditor;\n    }\n\n    public boolean hasPrivileges() {\n        return isAdmin || isEditor;\n    }\n\n    public static void main(String[] args) {\n        UserPrivilegesChecker user1 = new UserPrivilegesChecker(true, false);\n        UserPrivilegesChecker user2 = new UserPrivilegesChecker(false, true);\n        UserPrivilegesChecker user3 = new UserPrivilegesChecker(false, false);\n\n        System.out.println(\"User1 has privileges: \" + user1.hasPrivileges());\n        System.out.println(\"User2 has privileges: \" + user2.hasPrivileges());\n        System.out.println(\"User3 has privileges: \" + user3.hasPrivileges());\n    }\n}\n```"
  },
  {
    "task": "Develop a script to ensure a file is both present and not empty using logical AND.",
    "code": "```java\nimport java.io.File;\n\npublic class FileCheck {\n    public static void main(String[] args) {\n        String filePath = \"path/to/your/file.txt\";\n        File file = new File(filePath);\n\n        if (file.exists() && file.length() > 0) {\n            System.out.println(\"The file is present and not empty.\");\n        } else {\n            System.out.println(\"The file is either missing or empty.\");\n        }\n    }\n}\n```"
  },
  {
    "task": "Implement a condition to execute a command if a setting is not active using logical NOT.",
    "code": "```java\npublic class Main {\n    public static void main(String[] args) {\n        boolean isSettingActive = false; // Assume this is your setting status\n\n        if (!isSettingActive) {\n            executeCommand();\n        }\n    }\n\n    public static void executeCommand() {\n        System.out.println(\"Command executed because the setting is not active.\");\n    }\n}\n```"
  },
  {
    "task": "Compose a method to decide if a person is either eligible or exempt using logical OR.",
    "code": "```java\npublic class EligibilityChecker {\n\n    public boolean isEligibleOrExempt(boolean isEligible, boolean isExempt) {\n        return isEligible || isExempt;\n    }\n\n    public static void main(String[] args) {\n        EligibilityChecker checker = new EligibilityChecker();\n        \n        boolean result1 = checker.isEligibleOrExempt(true, false);\n        boolean result2 = checker.isEligibleOrExempt(false, true);\n        boolean result3 = checker.isEligibleOrExempt(false, false);\n        \n        System.out.println(\"Result 1: \" + result1); // true\n        System.out.println(\"Result 2: \" + result2); // true\n        System.out.println(\"Result 3: \" + result3); // false\n    }\n}\n```"
  },
  {
    "task": "Write a function that returns true if a number is both greater than zero and less than ten using logical AND.",
    "code": "```java\npublic class NumberCheck {\n    public static boolean isBetweenZeroAndTen(int number) {\n        return number > 0 && number < 10;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(isBetweenZeroAndTen(5));  // Example usage\n    }\n}\n```"
  },
  {
    "task": "Create a loop to continue as long as a condition is either true or false using logical OR.",
    "code": "```java\npublic class LogicalOperationsExample {\n    public static void main(String[] args) {\n        boolean condition1 = true;\n        boolean condition2 = false;\n        \n        while (condition1 || condition2) {\n            // Loop body logic here\n            \n            // Example to break out of the loop after one iteration\n            condition1 = false;\n            condition2 = false;\n        }\n    }\n}\n```"
  },
  {
    "task": "Design a program to verify if an account is neither inactive nor suspended using logical NOT.",
    "code": "```java\npublic class AccountStatusChecker {\n    public static void main(String[] args) {\n        boolean isInactive = false;\n        boolean isSuspended = false;\n\n        boolean isActive = !(isInactive || isSuspended);\n\n        if (isActive) {\n            System.out.println(\"The account is active.\");\n        } else {\n            System.out.println(\"The account is either inactive or suspended.\");\n        }\n    }\n}\n```"
  },
  {
    "task": "Develop a feature to confirm that a document is both signed and verified using logical AND.",
    "code": "```java\npublic class DocumentChecker {\n    public static boolean isSignedAndVerified(boolean isSigned, boolean isVerified) {\n        return isSigned && isVerified;\n    }\n\n    public static void main(String[] args) {\n        boolean signed = true; // Example value\n        boolean verified = true; // Example value\n\n        if (isSignedAndVerified(signed, verified)) {\n            System.out.println(\"The document is both signed and verified.\");\n        } else {\n            System.out.println(\"The document is not properly signed and verified.\");\n        }\n    }\n}\n```"
  },
  {
    "task": "Implement a script to alert if a network is either congested or down using logical OR.",
    "code": "```java\npublic class NetworkMonitor {\n\n    public static void main(String[] args) {\n        boolean isNetworkCongested = checkNetworkCongestion();\n        boolean isNetworkDown = checkNetworkStatus();\n\n        if (isNetworkCongested || isNetworkDown) {\n            System.out.println(\"Alert: The network is either congested or down.\");\n        } else {\n            System.out.println(\"The network is operating normally.\");\n        }\n    }\n\n    private static boolean checkNetworkCongestion() {\n        // Simulate network congestion check\n        return false; // Replace with actual congestion check logic\n    }\n\n    private static boolean checkNetworkStatus() {\n        // Simulate network status check\n        return false; // Replace with actual status check logic\n    }\n}\n```"
  },
  {
    "task": "Write a function to ensure a list is both sorted and unique using logical AND.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class UniqueSortedList {\n\n    public static List<Integer> ensureSortedAndUnique(List<Integer> list) {\n        List<Integer> uniqueSortedList = new ArrayList<>();\n        if (list != null && !list.isEmpty()) {\n            list.stream().distinct().sorted().forEach(uniqueSortedList::add);\n        }\n        return uniqueSortedList;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> list = Arrays.asList(3, 1, 2, 3, 4, 1, 5);\n        List<Integer> result = ensureSortedAndUnique(list);\n        System.out.println(result);\n    }\n}\n```"
  },
  {
    "task": "Create a conditional statement to execute if a task is not completed using logical NOT.",
    "code": "```java\nboolean isTaskCompleted = false;\n\nif (!isTaskCompleted) {\n    // Execute code if the task is not completed\n    System.out.println(\"Task is not completed.\");\n}\n```"
  },
  {
    "task": "Design a check to determine if a component is either faulty or missing using logical OR.",
    "code": "```java\npublic class ComponentChecker {\n    public boolean isFaultyOrMissing(boolean isFaulty, boolean isMissing) {\n        return isFaulty || isMissing;\n    }\n\n    public static void main(String[] args) {\n        ComponentChecker checker = new ComponentChecker();\n        \n        boolean isFaulty = true;  // Example input\n        boolean isMissing = false; // Example input\n\n        boolean result = checker.isFaultyOrMissing(isFaulty, isMissing);\n        System.out.println(\"Component is either faulty or missing: \" + result);\n    }\n}\n```"
  },
  {
    "task": "Develop a routine to verify if a user is both online and available using logical AND.",
    "code": "```java\npublic class UserStatus {\n\n    public static boolean isUserOnlineAndAvailable(boolean isOnline, boolean isAvailable) {\n        return isOnline && isAvailable;\n    }\n\n    public static void main(String[] args) {\n        boolean userOnline = true;\n        boolean userAvailable = true;\n\n        boolean result = isUserOnlineAndAvailable(userOnline, userAvailable);\n        System.out.println(\"User is online and available: \" + result);\n    }\n}\n```"
  },
  {
    "task": "Implement a feature to toggle an alert if a condition is not satisfied using logical NOT.",
    "code": "```java\npublic class AlertToggle {\n    private boolean alertOn = false;\n\n    public void toggleAlert(boolean condition) {\n        if (!condition) {\n            alertOn = !alertOn;\n        }\n    }\n\n    public boolean isAlertOn() {\n        return alertOn;\n    }\n\n    public static void main(String[] args) {\n        AlertToggle alertToggle = new AlertToggle();\n\n        boolean condition = false;\n        alertToggle.toggleAlert(condition);\n        System.out.println(\"Alert is on: \" + alertToggle.isAlertOn());\n\n        condition = true;\n        alertToggle.toggleAlert(condition);\n        System.out.println(\"Alert is on: \" + alertToggle.isAlertOn());\n\n        condition = false;\n        alertToggle.toggleAlert(condition);\n        System.out.println(\"Alert is on: \" + alertToggle.isAlertOn());\n    }\n}\n```"
  },
  {
    "task": "Compose a function to return true if a transaction is either pending or failed using logical OR.",
    "code": "```java\npublic class TransactionStatus {\n\n    public static boolean isTransactionPendingOrFailed(String status) {\n        return status.equals(\"pending\") || status.equals(\"failed\");\n    }\n\n    public static void main(String[] args) {\n        System.out.println(isTransactionPendingOrFailed(\"pending\")); // true\n        System.out.println(isTransactionPendingOrFailed(\"failed\"));  // true\n        System.out.println(isTransactionPendingOrFailed(\"completed\")); // false\n    }\n}\n```"
  },
  {
    "task": "Write a script to ensure a configuration is both correct and active using logical AND.",
    "code": "```java\npublic class ConfigurationChecker {\n    public static void main(String[] args) {\n        boolean isCorrect = checkConfigurationCorrectness();\n        boolean isActive = checkConfigurationActivity();\n\n        if (isCorrect && isActive) {\n            System.out.println(\"Configuration is both correct and active.\");\n        } else {\n            System.out.println(\"Configuration is either incorrect or inactive.\");\n        }\n    }\n\n    private static boolean checkConfigurationCorrectness() {\n        // Placeholder for actual correctness checking logic\n        return true; // Assume configuration is correct for demonstration purposes\n    }\n\n    private static boolean checkConfigurationActivity() {\n        // Placeholder for actual activity checking logic\n        return true; // Assume configuration is active for demonstration purposes\n    }\n}\n```"
  }
]