[
  {
    "task": "Create a program that continuously asks the user to enter a number until they input a negative number.",
    "code": "```java\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int number;\n        \n        while (true) {\n            System.out.print(\"Enter a number: \");\n            number = scanner.nextInt();\n            if (number < 0) {\n                break;\n            }\n        }\n\n        scanner.close();\n    }\n}\n```"
  },
  {
    "task": "Write a function that doubles a number and repeats the process until the number is greater than 1000.",
    "code": "```java\npublic class DoubleUntilThousand {\n    public static void doubleUntilGreaterThanThousand(int number) {\n        while (number <= 1000) {\n            number *= 2;\n        }\n        System.out.println(number);\n    }\n\n    public static void main(String[] args) {\n        doubleUntilGreaterThanThousand(1); // Example usage\n    }\n}\n```"
  },
  {
    "task": "Develop a routine to keep printing 'Hello, World!' until a counter reaches 10.",
    "code": "```java\npublic class HelloWorldLoop {\n    public static void main(String[] args) {\n        int counter = 0;\n        while (counter < 10) {\n            System.out.println(\"Hello, World!\");\n            counter++;\n        }\n    }\n}\n```"
  },
  {
    "task": "Construct a loop that checks if a randomly generated number is even, repeating until an odd number is found.",
    "code": "```java\nimport java.util.Random;\n\npublic class Main {\n    public static void main(String[] args) {\n        Random random = new Random();\n        int number;\n        \n        while (true) {\n            number = random.nextInt();\n            if (number % 2 != 0) {\n                break;\n            }\n        }\n        \n        System.out.println(\"Found an odd number: \" + number);\n    }\n}\n```"
  },
  {
    "task": "Design a countdown timer that prints each second until it reaches zero.",
    "code": "```java\npublic class CountdownTimer {\n    public static void main(String[] args) {\n        int seconds = 10; // Example starting point for countdown\n        while (seconds >= 0) {\n            System.out.println(seconds);\n            seconds--;\n            try {\n                Thread.sleep(1000); // Pause for 1 second\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        }\n    }\n}\n```"
  },
  {
    "task": "Implement a system where a user can keep adding items to a list until they type 'stop'.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class ItemAdder {\n    public static void main(String[] args) {\n        ArrayList<String> items = new ArrayList<>();\n        Scanner scanner = new Scanner(System.in);\n        String input;\n\n        System.out.println(\"Enter items to add to the list. Type 'stop' to finish.\");\n\n        while (true) {\n            input = scanner.nextLine();\n            if (input.equalsIgnoreCase(\"stop\")) {\n                break;\n            }\n            items.add(input);\n        }\n\n        System.out.println(\"Items added: \" + items);\n        scanner.close();\n    }\n}\n```"
  },
  {
    "task": "Write a script that simulates rolling a die and continues until a six is rolled.",
    "code": "```java\nimport java.util.Random;\n\npublic class RollDieUntilSix {\n    public static void main(String[] args) {\n        Random random = new Random();\n        int roll = 0;\n\n        while (roll != 6) {\n            roll = random.nextInt(6) + 1;\n            System.out.println(\"Rolled: \" + roll);\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a program that asks for a password and keeps prompting until the correct password is entered.",
    "code": "```java\nimport java.util.Scanner;\n\npublic class PasswordPrompt {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String correctPassword = \"password123\";\n        String inputPassword = \"\";\n\n        while (!inputPassword.equals(correctPassword)) {\n            System.out.print(\"Enter password: \");\n            inputPassword = scanner.nextLine();\n        }\n\n        System.out.println(\"Access granted.\");\n        scanner.close();\n    }\n}\n```"
  },
  {
    "task": "Design a loop that calculates the sum of entered numbers until the user enters zero.",
    "code": "```java\nimport java.util.Scanner;\n\npublic class SumCalculator {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int sum = 0;\n        int number;\n\n        System.out.println(\"Enter numbers to sum, enter 0 to stop:\");\n\n        while ((number = scanner.nextInt()) != 0) {\n            sum += number;\n        }\n\n        System.out.println(\"The total sum is: \" + sum);\n    }\n}\n```"
  },
  {
    "task": "Implement a feature that prints Fibonacci numbers until a number exceeds 100.",
    "code": "```java\npublic class Fibonacci {\n    public static void main(String[] args) {\n        int a = 0, b = 1;\n        \n        while (a <= 100) {\n            System.out.println(a);\n            int next = a + b;\n            a = b;\n            b = next;\n        }\n    }\n}\n```"
  },
  {
    "task": "Develop a loop that keeps halving a number until it becomes less than one.",
    "code": "```java\npublic class HalfNumber {\n    public static void main(String[] args) {\n        double number = 64.0;\n        \n        while (number >= 1) {\n            number /= 2;\n        }\n        \n        System.out.println(\"Final number: \" + number);\n    }\n}\n```"
  },
  {
    "task": "Write a program that asks for names and keeps storing them until the user enters 'done'.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class NameCollector {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        ArrayList<String> names = new ArrayList<>();\n        String input;\n\n        System.out.println(\"Enter names (type 'done' to finish):\");\n        while (true) {\n            input = scanner.nextLine();\n            if (input.equalsIgnoreCase(\"done\")) {\n                break;\n            }\n            names.add(input);\n        }\n\n        System.out.println(\"Names collected: \" + names);\n        scanner.close();\n    }\n}\n```"
  },
  {
    "task": "Create a process that keeps flipping a coin, recording results until there have been five heads.",
    "code": "```java\nimport java.util.Random;\n\npublic class CoinFlip {\n    public static void main(String[] args) {\n        Random random = new Random();\n        int headsCount = 0;\n\n        while (headsCount < 5) {\n            boolean isHeads = random.nextBoolean();\n            if (isHeads) {\n                headsCount++;\n                System.out.println(\"Heads\");\n            } else {\n                System.out.println(\"Tails\");\n            }\n        }\n    }\n}\n```"
  },
  {
    "task": "Implement a countdown that decreases by two each time, starting from 20, until it reaches zero.",
    "code": "```java\npublic class Countdown {\n    public static void main(String[] args) {\n        int number = 20;\n        while (number >= 0) {\n            System.out.println(number);\n            number -= 2;\n        }\n    }\n}\n```"
  },
  {
    "task": "Design a solution that repeatedly asks for user input and repeats it back until they type 'exit'.",
    "code": "```java\nimport java.util.Scanner;\n\npublic class EchoUntilExit {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input;\n        \n        while (true) {\n            System.out.print(\"Enter input: \");\n            input = scanner.nextLine();\n            if (input.equalsIgnoreCase(\"exit\")) {\n                break;\n            }\n            System.out.println(\"You entered: \" + input);\n        }\n\n        scanner.close();\n    }\n}\n```"
  },
  {
    "task": "Develop a loop to simulate a bank account balance, repeatedly deducting a fee until the balance is below zero.",
    "code": "```java\npublic class BankAccountSimulator {\n    public static void main(String[] args) {\n        double balance = 100.0; // Initial balance\n        double fee = 10.0; // Fee to be deducted\n\n        while (balance >= 0) {\n            balance -= fee;\n            System.out.println(\"Current balance: \" + balance);\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a sequence generator that multiplies a number by three each time until it reaches or exceeds 100.",
    "code": "```java\npublic class SequenceGenerator {\n    public static void main(String[] args) {\n        int number = 1;\n        while (number < 100) {\n            System.out.println(number);\n            number *= 3;\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a program that keeps generating random numbers between 1 and 10 until it gets a five.",
    "code": "```java\nimport java.util.Random;\n\npublic class RandomNumberGenerator {\n    public static void main(String[] args) {\n        Random random = new Random();\n        int number = 0;\n        \n        while (number != 5) {\n            number = random.nextInt(10) + 1;\n            System.out.println(\"Generated number: \" + number);\n        }\n    }\n}\n```"
  },
  {
    "task": "Implement a system to keep checking the temperature and only stop when it falls below freezing.",
    "code": "```java\nimport java.util.Scanner;\n\npublic class TemperatureChecker {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        double temperature;\n\n        while (true) {\n            System.out.print(\"Enter current temperature: \");\n            temperature = scanner.nextDouble();\n            if (temperature < 0.0) {\n                break;\n            }\n        }\n\n        System.out.println(\"Temperature has fallen below freezing.\");\n        scanner.close();\n    }\n}\n```"
  },
  {
    "task": "Construct a quiz game that continues asking questions until the player answers incorrectly.",
    "code": "```java\nimport java.util.Scanner;\n\npublic class QuizGame {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        boolean correct = true;\n        \n        while (correct) {\n            System.out.println(\"What is the capital of France?\");\n            String answer = scanner.nextLine();\n            if (answer.equalsIgnoreCase(\"Paris\")) {\n                System.out.println(\"Correct! Next question.\");\n            } else {\n                System.out.println(\"Incorrect! Game over.\");\n                correct = false;\n            }\n        }\n        \n        scanner.close();\n    }\n}\n```"
  },
  {
    "task": "Write a function that calculates factorials of a number, repeating the process for numbers 1 through 5.",
    "code": "```java\npublic class FactorialCalculator {\n    public static void main(String[] args) {\n        int number = 1;\n        while (number <= 5) {\n            System.out.println(\"Factorial of \" + number + \" is \" + factorial(number));\n            number++;\n        }\n    }\n    \n    public static int factorial(int n) {\n        int result = 1;\n        while (n > 1) {\n            result *= n;\n            n--;\n        }\n        return result;\n    }\n}\n```"
  },
  {
    "task": "Create a loop that prints all even numbers between 1 and 50.",
    "code": "```java\npublic class EvenNumbers {\n    public static void main(String[] args) {\n        int number = 2;\n        while (number <= 50) {\n            System.out.println(number);\n            number += 2;\n        }\n    }\n}\n```"
  },
  {
    "task": "Design a program that continuously asks for user input until a palindrome is entered.",
    "code": "```java\nimport java.util.Scanner;\n\npublic class PalindromeChecker {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input;\n\n        while (true) {\n            System.out.println(\"Enter a string: \");\n            input = scanner.nextLine();\n            if (isPalindrome(input)) {\n                break;\n            }\n        }\n\n        System.out.println(\"Palindrome entered: \" + input);\n        scanner.close();\n    }\n\n    private static boolean isPalindrome(String str) {\n        int left = 0;\n        int right = str.length() - 1;\n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}\n```"
  },
  {
    "task": "Implement a countdown that decreases by one each second, starting from 100.",
    "code": "```java\npublic class Countdown {\n    public static void main(String[] args) {\n        int count = 100;\n        while (count > 0) {\n            System.out.println(count);\n            count--;\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a script that repeatedly asks for a number and adds it to a total until the total exceeds 500.",
    "code": "```java\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int total = 0;\n\n        while (total <= 500) {\n            System.out.print(\"Enter a number: \");\n            int number = scanner.nextInt();\n            total += number;\n        }\n\n        System.out.println(\"Total exceeded 500: \" + total);\n        scanner.close();\n    }\n}\n```"
  },
  {
    "task": "Create a loop that generates random letters until the letter 'Z' appears.",
    "code": "```java\nimport java.util.Random;\n\npublic class RandomLetterGenerator {\n    public static void main(String[] args) {\n        Random random = new Random();\n        char letter;\n        \n        do {\n            letter = (char) (random.nextInt(26) + 'A');\n            System.out.println(letter);\n        } while (letter != 'Z');\n    }\n}\n```"
  },
  {
    "task": "Write a process that continues prompting for two numbers and prints their sum if it's even.",
    "code": "```java\nimport java.util.Scanner;\n\npublic class EvenSum {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        while (true) {\n            System.out.print(\"Enter first number: \");\n            int num1 = scanner.nextInt();\n            System.out.print(\"Enter second number: \");\n            int num2 = scanner.nextInt();\n            int sum = num1 + num2;\n            if (sum % 2 == 0) {\n                System.out.println(\"The sum is even: \" + sum);\n            }\n        }\n    }\n}\n```"
  },
  {
    "task": "Develop a loop that simulates a traffic light sequence until a manual stop command is received.",
    "code": "```java\nimport java.util.Scanner;\n\npublic class TrafficLightSimulator {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        boolean stop = false;\n        String[] lights = {\"Red\", \"Green\", \"Yellow\"};\n        int index = 0;\n\n        while (!stop) {\n            System.out.println(\"The light is \" + lights[index]);\n            index = (index + 1) % lights.length;\n\n            System.out.println(\"Enter 'stop' to end the simulation or press Enter to continue:\");\n            String command = scanner.nextLine();\n            if (\"stop\".equalsIgnoreCase(command)) {\n                stop = true;\n            }\n        }\n        \n        scanner.close();\n        System.out.println(\"Simulation stopped.\");\n    }\n}\n```"
  },
  {
    "task": "Implement a feature that keeps printing numbers in reverse order starting from 10.",
    "code": "```java\npublic class ReverseOrder {\n    public static void main(String[] args) {\n        int number = 10;\n        while (number > 0) {\n            System.out.println(number);\n            number--;\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a program that rolls two dice and continues until the sum is exactly seven.",
    "code": "```java\nimport java.util.Random;\n\npublic class DiceRoller {\n    public static void main(String[] args) {\n        Random random = new Random();\n        int sum;\n        \n        do {\n            int die1 = random.nextInt(6) + 1;\n            int die2 = random.nextInt(6) + 1;\n            sum = die1 + die2;\n        } while (sum != 7);\n    }\n}\n```"
  },
  {
    "task": "Design a loop that keeps asking for ages and prints the average once a negative age is entered.",
    "code": "```java\nimport java.util.Scanner;\n\npublic class AgeAverage {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int age;\n        int sum = 0;\n        int count = 0;\n\n        while (true) {\n            System.out.print(\"Enter age: \");\n            age = scanner.nextInt();\n            if (age < 0) {\n                break;\n            }\n            sum += age;\n            count++;\n        }\n\n        if (count > 0) {\n            double average = (double) sum / count;\n            System.out.println(\"Average age: \" + average);\n        } else {\n            System.out.println(\"No valid ages entered.\");\n        }\n\n        scanner.close();\n    }\n}\n```"
  },
  {
    "task": "Write a routine that squares numbers starting from 1 until the square is greater than 500.",
    "code": "```java\npublic class SquareNumbers {\n    public static void main(String[] args) {\n        int number = 1;\n        while (number * number <= 500) {\n            System.out.println(\"Number: \" + number + \", Square: \" + (number * number));\n            number++;\n        }\n    }\n}\n```"
  },
  {
    "task": "Implement a system to ask for a string and append it to a file until 'end' is typed.",
    "code": "```java\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.Scanner;\n\npublic class AppendToFileUntilEnd {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        try (FileWriter fileWriter = new FileWriter(\"output.txt\", true)) {\n            System.out.println(\"Enter strings to append to the file. Type 'end' to stop.\");\n            while (true) {\n                String input = scanner.nextLine();\n                if (\"end\".equals(input)) {\n                    break;\n                }\n                fileWriter.write(input + System.lineSeparator());\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            scanner.close();\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a script that checks if a number is prime, repeating for each number entered by the user.",
    "code": "```java\nimport java.util.Scanner;\n\npublic class PrimeChecker {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        \n        while (true) {\n            System.out.print(\"Enter a number to check if it is prime (or type 'exit' to quit): \");\n            String input = scanner.nextLine();\n            \n            if (input.equalsIgnoreCase(\"exit\")) {\n                break;\n            }\n            \n            try {\n                int number = Integer.parseInt(input);\n                if (isPrime(number)) {\n                    System.out.println(number + \" is a prime number.\");\n                } else {\n                    System.out.println(number + \" is not a prime number.\");\n                }\n            } catch (NumberFormatException e) {\n                System.out.println(\"Please enter a valid integer.\");\n            }\n        }\n        \n        scanner.close();\n    }\n    \n    public static boolean isPrime(int num) {\n        if (num <= 1) {\n            return false;\n        }\n        if (num <= 3) {\n            return true;\n        }\n        if (num % 2 == 0 || num % 3 == 0) {\n            return false;\n        }\n        int i = 5;\n        while (i * i <= num) {\n            if (num % i == 0 || num % (i + 2) == 0) {\n                return false;\n            }\n            i += 6;\n        }\n        return true;\n    }\n}\n```"
  },
  {
    "task": "Develop a countdown that prints numbers starting from 50 down to 1.",
    "code": "```java\npublic class Countdown {\n    public static void main(String[] args) {\n        int number = 50;\n        while (number >= 1) {\n            System.out.println(number);\n            number--;\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a program that keeps doubling the value of a variable until it exceeds 200.",
    "code": "```java\npublic class DoubleUntilExceeds200 {\n    public static void main(String[] args) {\n        int value = 1;\n        while (value <= 200) {\n            value *= 2;\n        }\n        System.out.println(value);\n    }\n}\n```"
  },
  {
    "task": "Design a loop that keeps generating a random string of letters until a specific word is formed.",
    "code": "```java\nimport java.util.Random;\n\npublic class RandomStringGenerator {\n    public static void main(String[] args) {\n        Random random = new Random();\n        String targetWord = \"target\";\n        String generatedWord = \"\";\n        \n        while (!generatedWord.equals(targetWord)) {\n            StringBuilder sb = new StringBuilder();\n            for (int i = 0; i < targetWord.length(); i++) {\n                char randomChar = (char) ('a' + random.nextInt(26));\n                sb.append(randomChar);\n            }\n            generatedWord = sb.toString();\n            System.out.println(generatedWord);\n        }\n    }\n}\n```"
  },
  {
    "task": "Implement a system that continuously fetches data from a sensor until a threshold is crossed.",
    "code": "```java\npublic class SensorSystem {\n    public static void main(String[] args) {\n        Sensor sensor = new Sensor();\n        double threshold = 100.0;\n        double data = 0.0;\n\n        while (data <= threshold) {\n            data = sensor.fetchData();\n            System.out.println(\"Fetched data: \" + data);\n        }\n\n        System.out.println(\"Threshold crossed. Stopping data fetch.\");\n    }\n}\n\nclass Sensor {\n    public double fetchData() {\n        // Simulate fetching data from a sensor.\n        return Math.random() * 150; // Example random data for demonstration.\n    }\n}\n```"
  },
  {
    "task": "Create a game where a player guesses a number, and the game continues until the player guesses correctly.",
    "code": "```java\nimport java.util.Scanner;\nimport java.util.Random;\n\npublic class GuessingGame {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        Random random = new Random();\n        \n        int numberToGuess = random.nextInt(100) + 1;\n        int playerGuess = 0;\n        \n        while (playerGuess != numberToGuess) {\n            System.out.print(\"Guess the number: \");\n            playerGuess = scanner.nextInt();\n            \n            if (playerGuess < numberToGuess) {\n                System.out.println(\"Too low! Try again.\");\n            } else if (playerGuess > numberToGuess) {\n                System.out.println(\"Too high! Try again.\");\n            } else {\n                System.out.println(\"Congratulations! You guessed the number.\");\n            }\n        }\n        \n        scanner.close();\n    }\n}\n```"
  },
  {
    "task": "Write a loop that continues to add random numbers to a list until the list has 10 even numbers.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Random;\n\npublic class RandomEvenNumbers {\n    public static void main(String[] args) {\n        List<Integer> evenNumbers = new ArrayList<>();\n        Random random = new Random();\n\n        while (evenNumbers.size() < 10) {\n            int num = random.nextInt();\n            if (num % 2 == 0) {\n                evenNumbers.add(num);\n            }\n        }\n    }\n}\n```"
  },
  {
    "task": "Design a routine that keeps removing elements from a list until it is empty.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> list = new ArrayList<>();\n        list.add(1);\n        list.add(2);\n        list.add(3);\n        \n        while (!list.isEmpty()) {\n            list.remove(0);\n        }\n    }\n}\n```"
  },
  {
    "task": "Implement a sequence that prints the alphabet repeatedly until interrupted by the user.",
    "code": "```java\npublic class AlphabetLoop {\n    public static void main(String[] args) {\n        while (true) {\n            for (char letter = 'A'; letter <= 'Z'; letter++) {\n                System.out.print(letter + \" \");\n            }\n            System.out.println();\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a program that continuously checks for updates and stops once an update is available.",
    "code": "```java\npublic class UpdateChecker {\n    public static void main(String[] args) {\n        boolean updateAvailable = false;\n        \n        while (!updateAvailable) {\n            updateAvailable = checkForUpdates();\n            // Simulate a delay for this example\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        }\n        \n        System.out.println(\"Update is available!\");\n    }\n\n    private static boolean checkForUpdates() {\n        // Implement the logic to check for updates\n        // This is a placeholder that simulates an update being available\n        return Math.random() > 0.9;\n    }\n}\n```"
  },
  {
    "task": "Write a function that keeps dividing a number by two until it results in a fractional value.",
    "code": "```java\npublic class Divider {\n    public static void divideUntilFractional(int number) {\n        while (number % 2 == 0) {\n            number /= 2;\n        }\n        System.out.println(\"Result: \" + number);\n    }\n\n    public static void main(String[] args) {\n        divideUntilFractional(40); // Example call\n    }\n}\n```"
  },
  {
    "task": "Develop a loop that keeps asking for student's grades and calculates the average until a grade of -1 is entered.",
    "code": "```java\nimport java.util.Scanner;\n\npublic class GradeCalculator {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int count = 0;\n        double sum = 0;\n        System.out.println(\"Enter grades one by one, enter -1 to finish:\");\n\n        while (true) {\n            double grade = scanner.nextDouble();\n            if (grade == -1) {\n                break;\n            }\n            sum += grade;\n            count++;\n        }\n        \n        if (count > 0) {\n            double average = sum / count;\n            System.out.println(\"The average grade is: \" + average);\n        } else {\n            System.out.println(\"No grades were entered.\");\n        }\n        \n        scanner.close();\n    }\n}\n```"
  },
  {
    "task": "Design a feature that continuously monitors a file for changes and stops when no changes are detected for a minute.",
    "code": "```java\nimport java.io.IOException;\nimport java.nio.file.*;\n\npublic class FileMonitor {\n    public static void main(String[] args) throws IOException, InterruptedException {\n        Path filePath = Paths.get(\"path/to/your/file.txt\");\n        long lastModifiedTime = Files.getLastModifiedTime(filePath).toMillis();\n        long noChangeDuration = 0;\n        long startTime = System.currentTimeMillis();\n        \n        while (noChangeDuration < 60000) { // 60000 milliseconds = 1 minute\n            Thread.sleep(1000); // Check every second\n            long currentModifiedTime = Files.getLastModifiedTime(filePath).toMillis();\n            \n            if (currentModifiedTime != lastModifiedTime) {\n                lastModifiedTime = currentModifiedTime;\n                startTime = System.currentTimeMillis();\n            }\n            \n            noChangeDuration = System.currentTimeMillis() - startTime;\n        }\n        \n        System.out.println(\"No changes detected for a minute. Monitoring stopped.\");\n    }\n}\n```"
  },
  {
    "task": "Implement a process where a motor runs until a certain distance is reached.",
    "code": "```java\npublic class MotorController {\n    private int currentDistance = 0;\n    private final int targetDistance = 100; // Example target distance\n\n    public void runMotor() {\n        while (currentDistance < targetDistance) {\n            // Simulating the motor running and increasing the distance\n            currentDistance += 5; // Example increment\n        }\n        stopMotor();\n    }\n\n    private void stopMotor() {\n        // Logic to stop the motor\n        System.out.println(\"Motor stopped. Target distance reached.\");\n    }\n\n    public static void main(String[] args) {\n        MotorController motorController = new MotorController();\n        motorController.runMotor();\n    }\n}\n```"
  },
  {
    "task": "Create a script that keeps generating random numbers and stops when it generates a prime number.",
    "code": "```java\nimport java.util.Random;\n\npublic class RandomPrimeGenerator {\n    public static void main(String[] args) {\n        Random random = new Random();\n        int number;\n        \n        while (true) {\n            number = random.nextInt(Integer.MAX_VALUE);\n            if (isPrime(number)) {\n                break;\n            }\n        }\n        \n        System.out.println(\"Generated prime number: \" + number);\n    }\n    \n    private static boolean isPrime(int n) {\n        if (n <= 1) return false;\n        if (n <= 3) return true;\n        if (n % 2 == 0 || n % 3 == 0) return false;\n        \n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) return false;\n        }\n        \n        return true;\n    }\n}\n```"
  },
  {
    "task": "Write a program that asks for the user's favorite color and keeps asking until they say 'blue'.",
    "code": "```java\nimport java.util.Scanner;\n\npublic class FavoriteColor {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String color = \"\";\n\n        while (!color.equalsIgnoreCase(\"blue\")) {\n            System.out.print(\"What is your favorite color? \");\n            color = scanner.nextLine();\n        }\n\n        scanner.close();\n    }\n}\n```"
  },
  {
    "task": "Develop a loop that continuously prints the time every second until a key is pressed.",
    "code": "```java\nimport java.time.LocalTime;\nimport java.time.format.DateTimeFormatter;\nimport java.io.IOException;\n\npublic class TimePrinter {\n    public static void main(String[] args) {\n        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"HH:mm:ss\");\n        \n        Thread inputThread = new Thread(() -> {\n            try {\n                System.in.read();\n                System.exit(0);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        });\n        \n        inputThread.setDaemon(true);\n        inputThread.start();\n        \n        while (true) {\n            System.out.println(LocalTime.now().format(formatter));\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n                break;\n            }\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a system to keep downloading data from a server until the connection is lost.",
    "code": "```java\nimport java.util.Random;\n\npublic class DataDownloader {\n\n    public static void main(String[] args) {\n        boolean connectionActive = true;\n        Random random = new Random();\n\n        while (connectionActive) {\n            // Simulate data download\n            System.out.println(\"Downloading data from server...\");\n\n            // Simulate connection status, with a 10% chance of losing connection\n            connectionActive = random.nextInt(10) != 0;\n\n            if (!connectionActive) {\n                System.out.println(\"Connection lost. Stopping download.\");\n            }\n\n            // Simulating a delay between downloads\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a process to keep a light on until the ambient light level is sufficient.",
    "code": "```java\npublic class LightControl {\n    public static void main(String[] args) {\n        int ambientLightLevel = getAmbientLightLevel();\n        int sufficientLightLevel = 10; // Example threshold for sufficient light\n\n        while (ambientLightLevel < sufficientLightLevel) {\n            turnLightOn();\n            ambientLightLevel = getAmbientLightLevel();\n        }\n        turnLightOff();\n    }\n\n    private static int getAmbientLightLevel() {\n        // Example method to simulate getting the ambient light level\n        return (int) (Math.random() * 20);\n    }\n\n    private static void turnLightOn() {\n        System.out.println(\"Light is ON\");\n    }\n\n    private static void turnLightOff() {\n        System.out.println(\"Light is OFF\");\n    }\n}\n```"
  },
  {
    "task": "Implement a feature that continuously plays a sound until the user presses a button.",
    "code": "```java\nimport javax.sound.sampled.*;\nimport java.io.File;\nimport java.io.IOException;\nimport javax.swing.JButton;\nimport javax.swing.JFrame;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\npublic class SoundLoop {\n    private static boolean isPlaying = true;\n\n    public static void main(String[] args) {\n        JFrame frame = new JFrame(\"Sound Player\");\n        JButton stopButton = new JButton(\"Stop Sound\");\n\n        stopButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                isPlaying = false;\n            }\n        });\n\n        frame.add(stopButton);\n        frame.setSize(200, 100);\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        frame.setVisible(true);\n\n        while (isPlaying) {\n            playSound(\"soundfile.wav\");\n        }\n    }\n\n    private static void playSound(String soundFile) {\n        try {\n            File file = new File(soundFile);\n            AudioInputStream audioStream = AudioSystem.getAudioInputStream(file);\n            Clip clip = AudioSystem.getClip();\n            clip.open(audioStream);\n            clip.start();\n            Thread.sleep(clip.getMicrosecondLength() / 1000);\n            clip.close();\n        } catch (UnsupportedAudioFileException | IOException | LineUnavailableException | InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
  },
  {
    "task": "Design a program that keeps multiplying a matrix by itself until its determinant is greater than 1000.",
    "code": "```java\nimport java.util.Random;\n\npublic class MatrixMultiplier {\n    public static void main(String[] args) {\n        int size = 3; // Example for a 3x3 matrix\n        double[][] matrix = generateRandomMatrix(size);\n        \n        while (determinant(matrix) <= 1000) {\n            matrix = multiplyMatrix(matrix, matrix);\n        }\n    }\n    \n    public static double[][] generateRandomMatrix(int size) {\n        Random rand = new Random();\n        double[][] matrix = new double[size][size];\n        for (int i = 0; i < size; i++) {\n            for (int j = 0; j < size; j++) {\n                matrix[i][j] = rand.nextInt(10) + 1;\n            }\n        }\n        return matrix;\n    }\n\n    public static double[][] multiplyMatrix(double[][] a, double[][] b) {\n        int n = a.length;\n        double[][] result = new double[n][n];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                for (int k = 0; k < n; k++) {\n                    result[i][j] += a[i][k] * b[k][j];\n                }\n            }\n        }\n        return result;\n    }\n\n    public static double determinant(double[][] matrix) {\n        int n = matrix.length;\n        if (n == 1) return matrix[0][0];\n        if (n == 2) return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0];\n        \n        double det = 0;\n        for (int p = 0; p < n; p++) {\n            double[][] subMatrix = new double[n - 1][n - 1];\n            for (int i = 1; i < n; i++) {\n                int subCol = 0;\n                for (int j = 0; j < n; j++) {\n                    if (j == p) continue;\n                    subMatrix[i - 1][subCol++] = matrix[i][j];\n                }\n            }\n            det += matrix[0][p] * determinant(subMatrix) * (p % 2 == 0 ? 1 : -1);\n        }\n        return det;\n    }\n}\n```"
  },
  {
    "task": "Create a script that keeps prompting the user to guess a word until they get it right.",
    "code": "```java\nimport java.util.Scanner;\n\npublic class GuessWord {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String secretWord = \"java\";\n        String userGuess = \"\";\n\n        while (!userGuess.equals(secretWord)) {\n            System.out.print(\"Guess the word: \");\n            userGuess = scanner.nextLine();\n        }\n\n        System.out.println(\"Congratulations! You guessed the word.\");\n        scanner.close();\n    }\n}\n```"
  },
  {
    "task": "Write a loop that simulates a car's fuel consumption and stops when the tank is empty.",
    "code": "```java\npublic class FuelConsumptionSimulation {\n    public static void main(String[] args) {\n        double fuelTankCapacity = 50.0; // in liters\n        double fuelConsumptionRate = 5.0; // liters per hour\n        double fuelRemaining = fuelTankCapacity;\n\n        while (fuelRemaining > 0) {\n            // Simulate one hour of driving\n            fuelRemaining -= fuelConsumptionRate;\n            if (fuelRemaining < 0) {\n                fuelRemaining = 0;\n            }\n            System.out.println(\"Fuel remaining: \" + fuelRemaining + \" liters\");\n        }\n\n        System.out.println(\"The tank is empty.\");\n    }\n}\n```"
  },
  {
    "task": "Develop a routine that keeps checking if a file exists and stops once it does.",
    "code": "```java\nimport java.io.File;\n\npublic class FileChecker {\n    public static void main(String[] args) {\n        String filePath = \"path/to/your/file.txt\";\n        File file = new File(filePath);\n        \n        while (!file.exists()) {\n            // The loop continues until the file exists\n        }\n        \n        System.out.println(\"File exists!\");\n    }\n}\n```"
  },
  {
    "task": "Implement a feature that continuously calculates the square root of a number until it's less than 0.1.",
    "code": "```java\npublic class SquareRootCalculator {\n    public static void main(String[] args) {\n        double number = 100; // Example starting number\n        while (number >= 0.1) {\n            number = Math.sqrt(number);\n            System.out.println(\"Current square root: \" + number);\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a system that prints 'Processing...' every second until a task is complete.",
    "code": "```java\npublic class TaskProcessor {\n    public static void main(String[] args) {\n        boolean taskComplete = false;\n        \n        while (!taskComplete) {\n            System.out.println(\"Processing...\");\n            \n            // Simulate checking if task is complete\n            // Here, for demonstration, we'll stop the loop after 5 seconds\n            try {\n                Thread.sleep(1000); // Sleep for 1 second\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            \n            // Example condition to break the loop\n            // In a real scenario, this would be replaced with actual task completion logic\n            taskComplete = System.currentTimeMillis() % 5000 < 1000;\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a loop that repeatedly checks the status of a process until it reports 'complete'.",
    "code": "```java\npublic class ProcessChecker {\n    public static void main(String[] args) {\n        String processStatus = getProcessStatus();\n        \n        while (!processStatus.equals(\"complete\")) {\n            // Simulate checking status\n            processStatus = getProcessStatus();\n        }\n        \n        System.out.println(\"Process is complete.\");\n    }\n    \n    // Mock method to simulate getting the status of a process\n    private static String getProcessStatus() {\n        // This would typically involve checking the actual process status\n        // For demonstration purposes, we'll just return \"complete\"\n        return \"complete\";\n    }\n}\n```"
  },
  {
    "task": "Design a routine to keep pinging a server and alert when the connection is lost.",
    "code": "```java\nimport java.io.IOException;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\npublic class ServerPinger {\n    private static final String SERVER_URL = \"http://example.com\"; // Replace with actual server URL\n    private static final int PING_INTERVAL_MS = 5000;\n\n    public static void main(String[] args) {\n        while (true) {\n            try {\n                URL url = new URL(SERVER_URL);\n                HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n                connection.setRequestMethod(\"HEAD\");\n                int responseCode = connection.getResponseCode();\n                if (responseCode != HttpURLConnection.HTTP_OK) {\n                    alertConnectionLost();\n                }\n                Thread.sleep(PING_INTERVAL_MS);\n            } catch (IOException | InterruptedException e) {\n                alertConnectionLost();\n            }\n        }\n    }\n\n    private static void alertConnectionLost() {\n        System.out.println(\"Alert: Connection to the server is lost.\");\n    }\n}\n```"
  },
  {
    "task": "Implement a loop that counts down from 100 by fives until it reaches zero.",
    "code": "```java\npublic class Countdown {\n    public static void main(String[] args) {\n        int number = 100;\n        while (number >= 0) {\n            System.out.println(number);\n            number -= 5;\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a script that keeps track of inventory items being added or removed until an end signal is given.",
    "code": "```java\nimport java.util.Scanner;\n\npublic class InventoryTracker {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int inventoryCount = 0;\n        String input;\n\n        while (true) {\n            System.out.println(\"Enter command (+item, -item, end): \");\n            input = scanner.nextLine();\n\n            if (input.equals(\"end\")) {\n                break;\n            } else if (input.equals(\"+item\")) {\n                inventoryCount++;\n            } else if (input.equals(\"-item\")) {\n                inventoryCount--;\n            } else {\n                System.out.println(\"Invalid command.\");\n            }\n\n            System.out.println(\"Current inventory count: \" + inventoryCount);\n        }\n\n        System.out.println(\"Final inventory count: \" + inventoryCount);\n        scanner.close();\n    }\n}\n```"
  },
  {
    "task": "Write a program that keeps calculating the power of two for numbers until a result is greater than 1000.",
    "code": "```java\npublic class PowerOfTwo {\n    public static void main(String[] args) {\n        int number = 1;\n        int result = 1;\n        \n        while (result <= 1000) {\n            result = (int) Math.pow(2, number);\n            System.out.println(\"2^\" + number + \" = \" + result);\n            number++;\n        }\n    }\n}\n```"
  },
  {
    "task": "Develop a sequence that keeps appending random numbers to an array until its length is 20.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.Random;\n\npublic class RandomSequence {\n    public static void main(String[] args) {\n        ArrayList<Integer> sequence = new ArrayList<>();\n        Random random = new Random();\n\n        while (sequence.size() < 20) {\n            sequence.add(random.nextInt());\n        }\n        \n        System.out.println(sequence);\n    }\n}\n```"
  },
  {
    "task": "Implement a routine that continuously rotates an image until it matches a reference orientation.",
    "code": "```java\nimport java.awt.image.BufferedImage;\n\npublic class ImageRotator {\n\n    public static boolean matchesReferenceOrientation(BufferedImage image, BufferedImage reference) {\n        // Placeholder for actual orientation matching logic\n        return false;\n    }\n\n    public static BufferedImage rotateImage(BufferedImage image) {\n        // Placeholder for actual image rotation logic\n        return image;\n    }\n\n    public static void rotateUntilMatch(BufferedImage image, BufferedImage reference) {\n        while (!matchesReferenceOrientation(image, reference)) {\n            image = rotateImage(image);\n        }\n    }\n\n    public static void main(String[] args) {\n        BufferedImage image = null; // Initialize with actual image\n        BufferedImage reference = null; // Initialize with actual reference image\n        rotateUntilMatch(image, reference);\n    }\n}\n```"
  },
  {
    "task": "Design a loop that keeps printing random jokes until the user stops it.",
    "code": "```java\nimport java.util.Random;\nimport java.util.Scanner;\n\npublic class RandomJokes {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        Random random = new Random();\n        String[] jokes = {\n            \"Why don't scientists trust atoms? Because they make up everything!\",\n            \"What do you get when you cross a snowman and a vampire? Frostbite.\",\n            \"Why was the math book sad? Because it had too many problems.\",\n            \"How does a penguin build its house? Igloos it together.\"\n        };\n        \n        String userInput = \"\";\n        \n        while (!userInput.equalsIgnoreCase(\"stop\")) {\n            int index = random.nextInt(jokes.length);\n            System.out.println(jokes[index]);\n            System.out.println(\"Type 'stop' to end or press enter to hear another joke.\");\n            userInput = scanner.nextLine();\n        }\n        \n        scanner.close();\n    }\n}\n```"
  },
  {
    "task": "Create a program that accepts user feedback and continues until a positive feedback is received.",
    "code": "```java\nimport java.util.Scanner;\n\npublic class FeedbackLoop {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String feedback = \"\";\n\n        while (!feedback.equalsIgnoreCase(\"positive\")) {\n            System.out.println(\"Please enter your feedback:\");\n            feedback = scanner.nextLine();\n        }\n\n        System.out.println(\"Thank you for your positive feedback!\");\n        scanner.close();\n    }\n}\n```"
  },
  {
    "task": "Write a loop that repeatedly reads sensor data and stops when a stable reading is observed.",
    "code": "```java\nimport java.util.Scanner;\n\npublic class SensorReader {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        double previousReading = Double.NaN;\n        double currentReading;\n\n        while (true) {\n            System.out.print(\"Enter sensor reading: \");\n            currentReading = scanner.nextDouble();\n\n            if (!Double.isNaN(previousReading) && currentReading == previousReading) {\n                System.out.println(\"Stable reading observed: \" + currentReading);\n                break;\n            }\n\n            previousReading = currentReading;\n        }\n\n        scanner.close();\n    }\n}\n```"
  },
  {
    "task": "Develop a system that simulates a stopwatch, counting seconds until stopped manually.",
    "code": "```java\nimport java.util.Scanner;\n\npublic class Stopwatch {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        boolean running = true;\n        int seconds = 0;\n\n        System.out.println(\"Stopwatch started. Press Enter to stop.\");\n\n        Thread thread = new Thread(() -> {\n            while (running) {\n                try {\n                    Thread.sleep(1000);\n                    seconds++;\n                    System.out.println(\"Seconds: \" + seconds);\n                } catch (InterruptedException e) {\n                    Thread.currentThread().interrupt();\n                }\n            }\n        });\n\n        thread.start();\n        scanner.nextLine();\n        running = false;\n        System.out.println(\"Stopwatch stopped at \" + seconds + \" seconds.\");\n        scanner.close();\n    }\n}\n```"
  },
  {
    "task": "Create a script that continues adding random integers to a sum until the sum exceeds 100.",
    "code": "```java\nimport java.util.Random;\n\npublic class RandomSum {\n    public static void main(String[] args) {\n        Random random = new Random();\n        int sum = 0;\n        \n        while (sum <= 100) {\n            sum += random.nextInt(100) + 1;\n        }\n        \n        System.out.println(\"Final sum: \" + sum);\n    }\n}\n```"
  },
  {
    "task": "Implement a process to track a moving object until it stops.",
    "code": "```java\npublic class MovingObjectTracker {\n\n    public static void main(String[] args) {\n        int speed = getInitialSpeed(); // Placeholder for initial speed\n        trackMovingObject(speed);\n    }\n\n    private static int getInitialSpeed() {\n        // Placeholder method to get the initial speed of the object\n        return 10; // Assume some initial speed\n    }\n\n    private static void trackMovingObject(int speed) {\n        while (speed > 0) {\n            System.out.println(\"Tracking object moving at speed: \" + speed);\n            speed = getUpdatedSpeed(speed); // Placeholder for speed update logic\n        }\n        System.out.println(\"Object has stopped.\");\n    }\n\n    private static int getUpdatedSpeed(int currentSpeed) {\n        // Placeholder method to simulate speed reduction\n        return currentSpeed - 1; // Decrease speed for demonstration purposes\n    }\n}\n```"
  },
  {
    "task": "Design a routine to keep checking user login attempts until a successful login occurs.",
    "code": "```java\nimport java.util.Scanner;\n\npublic class LoginChecker {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String correctUsername = \"user\";\n        String correctPassword = \"password\";\n        boolean loggedIn = false;\n\n        while (!loggedIn) {\n            System.out.print(\"Enter username: \");\n            String username = scanner.nextLine();\n            System.out.print(\"Enter password: \");\n            String password = scanner.nextLine();\n\n            if (username.equals(correctUsername) && password.equals(correctPassword)) {\n                System.out.println(\"Login successful!\");\n                loggedIn = true;\n            } else {\n                System.out.println(\"Invalid credentials. Please try again.\");\n            }\n        }\n        \n        scanner.close();\n    }\n}\n```"
  },
  {
    "task": "Write a loop that repeatedly calculates the area of a circle for radii from 1 to 10.",
    "code": "```java\npublic class CircleAreas {\n    public static void main(String[] args) {\n        int radius = 1;\n        while (radius <= 10) {\n            double area = Math.PI * radius * radius;\n            System.out.println(\"Radius: \" + radius + \", Area: \" + area);\n            radius++;\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a program that continues flipping a card from a deck until an ace is drawn.",
    "code": "```java\nimport java.util.Random;\n\npublic class CardFlipper {\n    public static void main(String[] args) {\n        Random random = new Random();\n        boolean aceDrawn = false;\n\n        while (!aceDrawn) {\n            int card = random.nextInt(52); // Simulate drawing a card from a deck\n\n            // Assuming 0, 13, 26, 39 represent the four aces in a standard deck\n            if (card % 13 == 0) {\n                aceDrawn = true;\n                System.out.println(\"Ace drawn!\");\n            } else {\n                System.out.println(\"Card drawn: \" + card);\n            }\n        }\n    }\n}\n```"
  },
  {
    "task": "Develop a loop that keeps asking for a word and stores it until a word with more than five letters is entered.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        ArrayList<String> words = new ArrayList<>();\n\n        while (true) {\n            System.out.print(\"Enter a word: \");\n            String word = scanner.nextLine();\n            words.add(word);\n            if (word.length() > 5) {\n                break;\n            }\n        }\n\n        scanner.close();\n    }\n}\n```"
  },
  {
    "task": "Implement a feature that continuously calculates the exponential growth of a population until it doubles.",
    "code": "```java\npublic class PopulationGrowth {\n    public static void main(String[] args) {\n        double initialPopulation = 1000; // Example initial population\n        double growthRate = 0.05; // Example growth rate (5%)\n        double targetPopulation = initialPopulation * 2;\n        double currentPopulation = initialPopulation;\n\n        while (currentPopulation < targetPopulation) {\n            currentPopulation += currentPopulation * growthRate;\n        }\n\n        System.out.println(\"Population doubled to: \" + currentPopulation);\n    }\n}\n```"
  },
  {
    "task": "Write a script that repeats a string a certain number of times until a limit is reached.",
    "code": "```java\npublic class RepeatString {\n    public static void main(String[] args) {\n        String str = \"Hello\";\n        int limit = 5;\n        int count = 0;\n        StringBuilder result = new StringBuilder();\n        \n        while (count < limit) {\n            result.append(str);\n            count++;\n        }\n        \n        System.out.println(result.toString());\n    }\n}\n```"
  },
  {
    "task": "Create a routine that keeps accessing an API endpoint until it returns a specific result.",
    "code": "```java\nimport java.io.IOException;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Scanner;\n\npublic class ApiPolling {\n\n    private static final String API_URL = \"https://api.example.com/endpoint\";\n    private static final String TARGET_RESULT = \"desired_result\";\n\n    public static void main(String[] args) {\n        while (true) {\n            try {\n                String result = accessApi();\n                if (result.equals(TARGET_RESULT)) {\n                    break;\n                }\n                Thread.sleep(1000); // Optional: Wait 1 second before retrying\n            } catch (IOException | InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n        System.out.println(\"Target result received.\");\n    }\n\n    private static String accessApi() throws IOException {\n        HttpURLConnection connection = (HttpURLConnection) new URL(API_URL).openConnection();\n        connection.setRequestMethod(\"GET\");\n\n        Scanner scanner = new Scanner(connection.getInputStream());\n        StringBuilder response = new StringBuilder();\n        while (scanner.hasNext()) {\n            response.append(scanner.nextLine());\n        }\n        scanner.close();\n\n        return response.toString();\n    }\n}\n```"
  },
  {
    "task": "Design a loop that continues to fetch stock prices until a certain price threshold is crossed.",
    "code": "```java\npublic class StockPriceFetcher {\n    public static void main(String[] args) {\n        double priceThreshold = 150.0;\n        double currentPrice = 0.0;\n        \n        while (currentPrice < priceThreshold) {\n            currentPrice = fetchStockPrice();\n            System.out.println(\"Current Stock Price: \" + currentPrice);\n        }\n        \n        System.out.println(\"Price threshold crossed!\");\n    }\n\n    private static double fetchStockPrice() {\n        // This method should connect to a stock price service\n        // and return the latest stock price.\n        // Here we return a mock value for demonstration purposes.\n        return Math.random() * 200; // Mock stock price for testing\n    }\n}\n```"
  },
  {
    "task": "Implement a process that keeps monitoring CPU usage until it drops below 10%.",
    "code": "```java\nimport java.lang.management.ManagementFactory;\nimport com.sun.management.OperatingSystemMXBean;\n\npublic class CPUMonitor {\n    public static void main(String[] args) {\n        OperatingSystemMXBean osBean = ManagementFactory.getPlatformMXBean(OperatingSystemMXBean.class);\n        \n        while (true) {\n            double cpuLoad = osBean.getSystemCpuLoad() * 100;\n            \n            if (cpuLoad < 10) {\n                break;\n            }\n            \n            try {\n                Thread.sleep(1000); // Sleep for 1 second before next check\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        }\n        \n        System.out.println(\"CPU usage dropped below 10%\");\n    }\n}\n```"
  },
  {
    "task": "Write a program that asks for a series of numbers and prints the largest once a negative number is entered.",
    "code": "```java\nimport java.util.Scanner;\n\npublic class LargestNumberFinder {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int largest = Integer.MIN_VALUE;\n        \n        while (true) {\n            System.out.print(\"Enter a number: \");\n            int number = scanner.nextInt();\n            \n            if (number < 0) {\n                break;\n            }\n            \n            if (number > largest) {\n                largest = number;\n            }\n        }\n        \n        System.out.println(\"The largest number entered is: \" + largest);\n        scanner.close();\n    }\n}\n```"
  },
  {
    "task": "Develop a system that keeps a heater on until the room reaches a desired temperature.",
    "code": "```java\npublic class HeaterSystem {\n    private double currentTemperature;\n    private double desiredTemperature;\n\n    public HeaterSystem(double currentTemperature, double desiredTemperature) {\n        this.currentTemperature = currentTemperature;\n        this.desiredTemperature = desiredTemperature;\n    }\n\n    public void controlHeater() {\n        while (currentTemperature < desiredTemperature) {\n            turnHeaterOn();\n            updateTemperature();\n        }\n        turnHeaterOff();\n    }\n\n    private void turnHeaterOn() {\n        System.out.println(\"Heater is ON.\");\n    }\n\n    private void turnHeaterOff() {\n        System.out.println(\"Heater is OFF.\");\n    }\n\n    private void updateTemperature() {\n        // Simulate temperature increase\n        currentTemperature += 0.5;\n        System.out.println(\"Current Temperature: \" + currentTemperature);\n    }\n\n    public static void main(String[] args) {\n        HeaterSystem heaterSystem = new HeaterSystem(18.0, 22.0);\n        heaterSystem.controlHeater();\n    }\n}\n```"
  },
  {
    "task": "Create a loop that repeatedly checks if a door is open and alerts if it remains open for too long.",
    "code": "```java\npublic class DoorMonitor {\n    public static void main(String[] args) {\n        boolean doorOpen = true; // Assume the door is initially open\n        int alertThreshold = 5; // Set a threshold for how many checks before alert\n        int checkCount = 0;\n\n        while (doorOpen) {\n            // Simulate checking the door status\n            checkCount++;\n            System.out.println(\"Checking if the door is open...\");\n\n            if (checkCount >= alertThreshold) {\n                System.out.println(\"Alert: The door has been open for too long!\");\n                break;\n            }\n\n            // Simulate a condition to close the door and exit the loop\n            // In a real scenario, this would be replaced by actual door status\n            if (checkCount == 3) {\n                doorOpen = false;\n            }\n\n            // Simulate some delay between checks\n            try {\n                Thread.sleep(1000); // 1 second delay\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n```"
  },
  {
    "task": "Implement a feature that keeps adding random characters to a string until its length is 8.",
    "code": "```java\nimport java.util.Random;\n\npublic class RandomStringGenerator {\n    public static void main(String[] args) {\n        Random random = new Random();\n        StringBuilder sb = new StringBuilder();\n        \n        while (sb.length() < 8) {\n            char randomChar = (char) (random.nextInt(26) + 'a');\n            sb.append(randomChar);\n        }\n        \n        System.out.println(sb.toString());\n    }\n}\n```"
  },
  {
    "task": "Design a routine that simulates a race and continues until a participant crosses the finish line.",
    "code": "```java\npublic class RaceSimulation {\n    public static void main(String[] args) {\n        int finishLine = 100;\n        int participantPosition = 0;\n        \n        while (participantPosition < finishLine) {\n            // Simulate participant moving forward\n            participantPosition += (int)(Math.random() * 10) + 1;\n            System.out.println(\"Participant position: \" + participantPosition);\n        }\n        \n        System.out.println(\"Participant has crossed the finish line!\");\n    }\n}\n```"
  },
  {
    "task": "Write a script that keeps checking an email inbox until a specific email is received.",
    "code": "```java\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class EmailChecker {\n    public static void main(String[] args) {\n        List<String> inbox = new ArrayList<>();\n        boolean emailReceived = false;\n\n        // Dummy inbox population for simulation\n        inbox.add(\"Welcome Email\");\n        inbox.add(\"Newsletter\");\n        inbox.add(\"Special Offer\");\n        inbox.add(\"Target Email\"); // This is the specific email we are looking for\n\n        int index = 0;\n\n        while (!emailReceived && index < inbox.size()) {\n            String email = inbox.get(index);\n            if (email.equals(\"Target Email\")) {\n                emailReceived = true;\n                System.out.println(\"Specific email received: \" + email);\n            }\n            index++;\n        }\n\n        if (!emailReceived) {\n            System.out.println(\"Specific email not found in the inbox.\");\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a loop that continues to play a video on repeat until the user interrupts.",
    "code": "```java\nimport java.util.Scanner;\n\npublic class VideoPlayer {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        boolean continuePlaying = true;\n        \n        while (continuePlaying) {\n            playVideo();\n            System.out.println(\"Press 'q' to quit or any other key to replay.\");\n            String input = scanner.nextLine();\n            if (input.equalsIgnoreCase(\"q\")) {\n                continuePlaying = false;\n            }\n        }\n        \n        scanner.close();\n    }\n\n    public static void playVideo() {\n        System.out.println(\"Playing video...\");\n        // Simulate video playing duration\n        try {\n            Thread.sleep(5000); // 5 seconds\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n    }\n}\n```"
  },
  {
    "task": "Develop a process that keeps scanning for Bluetooth devices until a specific device is found.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass BluetoothScanner {\n    private static final String TARGET_DEVICE_NAME = \"MyTargetDevice\";\n\n    public static void main(String[] args) {\n        boolean deviceFound = false;\n        List<String> availableDevices = new ArrayList<>();\n\n        while (!deviceFound) {\n            availableDevices = scanForBluetoothDevices();\n            for (String device : availableDevices) {\n                if (device.equals(TARGET_DEVICE_NAME)) {\n                    deviceFound = true;\n                    break;\n                }\n            }\n            if (!deviceFound) {\n                try {\n                    Thread.sleep(5000); // Wait for 5 seconds before the next scan\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n\n        System.out.println(\"Target device found: \" + TARGET_DEVICE_NAME);\n    }\n\n    private static List<String> scanForBluetoothDevices() {\n        // Simulated scan result\n        List<String> devices = new ArrayList<>();\n        devices.add(\"Device1\");\n        devices.add(\"Device2\");\n        devices.add(\"MyTargetDevice\"); // Simulating that the target device is eventually found\n        return devices;\n    }\n}\n```"
  },
  {
    "task": "Implement a script that continuously captures images from a webcam until a motion is detected.",
    "code": "```java\nimport org.opencv.core.Core;\nimport org.opencv.core.Mat;\nimport org.opencv.core.Size;\nimport org.opencv.imgproc.Imgproc;\nimport org.opencv.videoio.VideoCapture;\n\npublic class MotionDetector {\n    static {\n        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);\n    }\n\n    public static void main(String[] args) {\n        VideoCapture capture = new VideoCapture(0);\n        if (!capture.isOpened()) {\n            System.out.println(\"Error: Cannot open webcam\");\n            return;\n        }\n\n        Mat frame = new Mat();\n        Mat previousFrame = new Mat();\n        Mat diffFrame = new Mat();\n        \n        while (true) {\n            if (!capture.read(frame)) {\n                System.out.println(\"Error: Cannot read frame from webcam\");\n                break;\n            }\n\n            if (!previousFrame.empty()) {\n                Core.absdiff(frame, previousFrame, diffFrame);\n                Imgproc.cvtColor(diffFrame, diffFrame, Imgproc.COLOR_BGR2GRAY);\n                Imgproc.threshold(diffFrame, diffFrame, 25, 255, Imgproc.THRESH_BINARY);\n                \n                int nonZeroCount = Core.countNonZero(diffFrame);\n                if (nonZeroCount > 0) {\n                    System.out.println(\"Motion detected\");\n                    break;\n                }\n            }\n\n            frame.copyTo(previousFrame);\n        }\n\n        capture.release();\n    }\n}\n```"
  },
  {
    "task": "Design a program that keeps playing a sound file until the user presses a mute button.",
    "code": "```java\nimport javax.sound.sampled.*;\nimport java.io.File;\nimport java.io.IOException;\nimport javax.swing.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\npublic class SoundPlayer {\n    private static boolean isMuted = false;\n\n    public static void main(String[] args) {\n        JFrame frame = new JFrame(\"Sound Player\");\n        JButton muteButton = new JButton(\"Mute\");\n        \n        muteButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                isMuted = true;\n            }\n        });\n\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        frame.setSize(200, 100);\n        frame.add(muteButton);\n        frame.setVisible(true);\n\n        while (!isMuted) {\n            playSound(\"soundfile.wav\");\n        }\n    }\n\n    private static void playSound(String soundFilePath) {\n        try {\n            File soundFile = new File(soundFilePath);\n            AudioInputStream audioStream = AudioSystem.getAudioInputStream(soundFile);\n            Clip clip = AudioSystem.getClip();\n            clip.open(audioStream);\n            clip.start();\n            Thread.sleep(clip.getMicrosecondLength() / 1000);\n            clip.close();\n        } catch (UnsupportedAudioFileException | IOException | LineUnavailableException | InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a loop that repeatedly generates a random password until it meets certain security criteria.",
    "code": "```java\nimport java.security.SecureRandom;\n\npublic class PasswordGenerator {\n    private static final String CHARACTERS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_+=<>?\";\n    private static final int PASSWORD_LENGTH = 12;\n\n    public static void main(String[] args) {\n        String password;\n        do {\n            password = generateRandomPassword();\n        } while (!meetsSecurityCriteria(password));\n        System.out.println(\"Generated secure password: \" + password);\n    }\n\n    private static String generateRandomPassword() {\n        SecureRandom random = new SecureRandom();\n        StringBuilder password = new StringBuilder(PASSWORD_LENGTH);\n        for (int i = 0; i < PASSWORD_LENGTH; i++) {\n            int index = random.nextInt(CHARACTERS.length());\n            password.append(CHARACTERS.charAt(index));\n        }\n        return password.toString();\n    }\n\n    private static boolean meetsSecurityCriteria(String password) {\n        if (password.length() < PASSWORD_LENGTH) return false;\n        boolean hasUpper = false, hasLower = false, hasDigit = false, hasSpecial = false;\n        for (char c : password.toCharArray()) {\n            if (Character.isUpperCase(c)) hasUpper = true;\n            else if (Character.isLowerCase(c)) hasLower = true;\n            else if (Character.isDigit(c)) hasDigit = true;\n            else if (\"!@#$%^&*()-_+=<>?\".indexOf(c) >= 0) hasSpecial = true;\n        }\n        return hasUpper && hasLower && hasDigit && hasSpecial;\n    }\n}\n```"
  },
  {
    "task": "Write a process that keeps checking for file changes in a directory and logs them until stopped.",
    "code": "```java\nimport java.io.IOException;\nimport java.nio.file.*;\n\npublic class DirectoryWatcher {\n    public static void main(String[] args) {\n        Path path = Paths.get(\"path/to/directory\");\n        try (WatchService watchService = FileSystems.getDefault().newWatchService()) {\n            path.register(watchService, StandardWatchEventKinds.ENTRY_CREATE, \n                                       StandardWatchEventKinds.ENTRY_DELETE, \n                                       StandardWatchEventKinds.ENTRY_MODIFY);\n            boolean running = true;\n            while (running) {\n                WatchKey key;\n                try {\n                    key = watchService.take();\n                } catch (InterruptedException ex) {\n                    return;\n                }\n                for (WatchEvent<?> event : key.pollEvents()) {\n                    WatchEvent.Kind<?> kind = event.kind();\n                    Path fileName = (Path) event.context();\n                    System.out.println(\"Event kind:\" + kind + \". File affected: \" + fileName + \".\");\n                }\n                boolean valid = key.reset();\n                if (!valid) {\n                    break;\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
  }
]