[
  {
    "task": "Create a base class for a vehicle with methods for speed and fuel efficiency, then derive a car class that overrides these methods to provide specific implementations.",
    "code": "```java\nclass Vehicle {\n    public double getSpeed() {\n        return 0.0;\n    }\n\n    public double getFuelEfficiency() {\n        return 0.0;\n    }\n}\n\nclass Car extends Vehicle {\n    @Override\n    public double getSpeed() {\n        return 120.0; // Example speed for a car\n    }\n\n    @Override\n    public double getFuelEfficiency() {\n        return 15.0; // Example fuel efficiency for a car\n    }\n}\n```"
  },
  {
    "task": "Design a base class for a multimedia file with properties like duration and format, then extend it with a video class that includes resolution and frame rate.",
    "code": "```java\nclass MultimediaFile {\n    private int duration; // in seconds\n    private String format;\n\n    public MultimediaFile(int duration, String format) {\n        this.duration = duration;\n        this.format = format;\n    }\n\n    public int getDuration() {\n        return duration;\n    }\n\n    public void setDuration(int duration) {\n        this.duration = duration;\n    }\n\n    public String getFormat() {\n        return format;\n    }\n\n    public void setFormat(String format) {\n        this.format = format;\n    }\n}\n\nclass VideoFile extends MultimediaFile {\n    private String resolution; // e.g., 1920x1080\n    private double frameRate;  // e.g., 24.0 fps\n\n    public VideoFile(int duration, String format, String resolution, double frameRate) {\n        super(duration, format);\n        this.resolution = resolution;\n        this.frameRate = frameRate;\n    }\n\n    public String getResolution() {\n        return resolution;\n    }\n\n    public void setResolution(String resolution) {\n        this.resolution = resolution;\n    }\n\n    public double getFrameRate() {\n        return frameRate;\n    }\n\n    public void setFrameRate(double frameRate) {\n        this.frameRate = frameRate;\n    }\n}\n```"
  },
  {
    "task": "Develop a superclass for bank accounts with methods for deposit and withdrawal, then create a savings account subclass that overrides the withdrawal method to incorporate interest deductions.",
    "code": "```java\nclass BankAccount {\n    protected double balance;\n\n    public BankAccount(double initialBalance) {\n        this.balance = initialBalance;\n    }\n\n    public void deposit(double amount) {\n        if (amount > 0) {\n            balance += amount;\n        }\n    }\n\n    public void withdraw(double amount) {\n        if (amount > 0 && amount <= balance) {\n            balance -= amount;\n        }\n    }\n\n    public double getBalance() {\n        return balance;\n    }\n}\n\nclass SavingsAccount extends BankAccount {\n    private double interestRate;\n\n    public SavingsAccount(double initialBalance, double interestRate) {\n        super(initialBalance);\n        this.interestRate = interestRate;\n    }\n\n    @Override\n    public void withdraw(double amount) {\n        double interest = amount * interestRate / 100;\n        double totalAmount = amount + interest;\n        if (totalAmount <= balance) {\n            balance -= totalAmount;\n        }\n    }\n}\n```"
  },
  {
    "task": "Implement a base class for a geometric shape with methods to calculate area and perimeter, then create a rectangle subclass that provides specific calculations for these methods.",
    "code": "```java\nabstract class GeometricShape {\n    abstract double calculateArea();\n    abstract double calculatePerimeter();\n}\n\nclass Rectangle extends GeometricShape {\n    private double width;\n    private double height;\n\n    public Rectangle(double width, double height) {\n        this.width = width;\n        this.height = height;\n    }\n\n    @Override\n    double calculateArea() {\n        return width * height;\n    }\n\n    @Override\n    double calculatePerimeter() {\n        return 2 * (width + height);\n    }\n}\n```"
  },
  {
    "task": "Construct a parent class for employees with a method to calculate salary, then derive a manager class that overrides this method to include bonuses.",
    "code": "```java\nclass Employee {\n    protected double baseSalary;\n\n    public Employee(double baseSalary) {\n        this.baseSalary = baseSalary;\n    }\n\n    public double calculateSalary() {\n        return baseSalary;\n    }\n}\n\nclass Manager extends Employee {\n    private double bonus;\n\n    public Manager(double baseSalary, double bonus) {\n        super(baseSalary);\n        this.bonus = bonus;\n    }\n\n    @Override\n    public double calculateSalary() {\n        return baseSalary + bonus;\n    }\n}\n```"
  },
  {
    "task": "Set up a base class for a library item with properties like title and author, and extend it with a book subclass that adds a number of pages property.",
    "code": "```java\nclass LibraryItem {\n    private String title;\n    private String author;\n\n    public LibraryItem(String title, String author) {\n        this.title = title;\n        this.author = author;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n\n    public String getAuthor() {\n        return author;\n    }\n}\n\nclass Book extends LibraryItem {\n    private int numberOfPages;\n\n    public Book(String title, String author, int numberOfPages) {\n        super(title, author);\n        this.numberOfPages = numberOfPages;\n    }\n\n    public int getNumberOfPages() {\n        return numberOfPages;\n    }\n}\n```"
  },
  {
    "task": "Create a foundation class for an electronic device with a method to turn on and off, and derive a smartphone class that overrides the turn on method to require a passcode.",
    "code": "```java\nclass ElectronicDevice {\n    private boolean isOn;\n\n    public void turnOn() {\n        isOn = true;\n        System.out.println(\"Device is turned on.\");\n    }\n\n    public void turnOff() {\n        isOn = false;\n        System.out.println(\"Device is turned off.\");\n    }\n}\n\nclass Smartphone extends ElectronicDevice {\n\n    @Override\n    public void turnOn() {\n        System.out.println(\"Enter passcode to turn on the device.\");\n        // Simulate passcode entry\n        String passcode = \"1234\"; // Example passcode\n        if (authenticate(passcode)) {\n            super.turnOn();\n        } else {\n            System.out.println(\"Incorrect passcode. Device remains off.\");\n        }\n    }\n\n    private boolean authenticate(String passcode) {\n        // Example passcode check, replace with actual logic\n        return \"1234\".equals(passcode);\n    }\n}\n```"
  },
  {
    "task": "Design a base class for an animal with a method to make a sound, then create a dog subclass that overrides this method to bark.",
    "code": "```java\nclass Animal {\n    public void makeSound() {\n        System.out.println(\"Some generic animal sound\");\n    }\n}\n\nclass Dog extends Animal {\n    @Override\n    public void makeSound() {\n        System.out.println(\"Bark\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Animal genericAnimal = new Animal();\n        genericAnimal.makeSound();\n\n        Dog dog = new Dog();\n        dog.makeSound();\n    }\n}\n```"
  },
  {
    "task": "Develop a superclass for meals with a method to calculate calories, then create a dessert subclass that overrides it to add extra sugar calories.",
    "code": "```java\nclass Meal {\n    protected int baseCalories;\n\n    public Meal(int baseCalories) {\n        this.baseCalories = baseCalories;\n    }\n\n    public int calculateCalories() {\n        return baseCalories;\n    }\n}\n\nclass Dessert extends Meal {\n    private int sugarCalories;\n\n    public Dessert(int baseCalories, int sugarCalories) {\n        super(baseCalories);\n        this.sugarCalories = sugarCalories;\n    }\n\n    @Override\n    public int calculateCalories() {\n        return super.calculateCalories() + sugarCalories;\n    }\n}\n```"
  },
  {
    "task": "Implement a base class for a transportation mode with a method to calculate travel time, then extend it with a plane subclass that overrides the method to calculate based on speed.",
    "code": "```java\nclass TransportationMode {\n    public double calculateTravelTime(double distance) {\n        // Default implementation, assuming an average speed\n        double averageSpeed = 50.0; // km/h\n        return distance / averageSpeed;\n    }\n}\n\nclass Plane extends TransportationMode {\n    private double speed;\n\n    public Plane(double speed) {\n        this.speed = speed;\n    }\n\n    @Override\n    public double calculateTravelTime(double distance) {\n        return distance / speed;\n    }\n}\n```"
  },
  {
    "task": "Construct a parent class for a musical instrument with a method to play sound, then derive a piano class that overrides the method to play specific notes.",
    "code": "```java\nclass MusicalInstrument {\n    public void playSound() {\n        System.out.println(\"Playing sound from the instrument.\");\n    }\n}\n\nclass Piano extends MusicalInstrument {\n    @Override\n    public void playSound() {\n        System.out.println(\"Playing piano notes: C E G\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        MusicalInstrument instrument = new MusicalInstrument();\n        instrument.playSound();\n        \n        Piano piano = new Piano();\n        piano.playSound();\n    }\n}\n```"
  },
  {
    "task": "Set up a base class for a user account with a method to reset password, and extend it with an admin account subclass that overrides it to include security questions.",
    "code": "```java\nclass UserAccount {\n    private String password;\n\n    public UserAccount(String password) {\n        this.password = password;\n    }\n\n    public void resetPassword(String newPassword) {\n        this.password = newPassword;\n        System.out.println(\"Password has been reset.\");\n    }\n}\n\nclass AdminAccount extends UserAccount {\n    private String securityQuestion;\n\n    public AdminAccount(String password, String securityQuestion) {\n        super(password);\n        this.securityQuestion = securityQuestion;\n    }\n\n    @Override\n    public void resetPassword(String newPassword) {\n        // Assuming security questions are verified here\n        super.resetPassword(newPassword);\n        System.out.println(\"Password has been reset with security question.\");\n    }\n}\n```"
  },
  {
    "task": "Create a foundational class for a beverage with properties like volume and temperature, and derive a coffee class that overrides the temperature property to be hot.",
    "code": "```java\nclass Beverage {\n    private double volume;\n    protected String temperature;\n\n    public Beverage(double volume, String temperature) {\n        this.volume = volume;\n        this.temperature = temperature;\n    }\n\n    public double getVolume() {\n        return volume;\n    }\n\n    public String getTemperature() {\n        return temperature;\n    }\n}\n\nclass Coffee extends Beverage {\n\n    public Coffee(double volume) {\n        super(volume, \"hot\");\n    }\n\n    @Override\n    public String getTemperature() {\n        return temperature;\n    }\n}\n```"
  },
  {
    "task": "Design a base class for a service appointment with a method to schedule time, then create a doctor appointment subclass that overrides this method to include consultation duration.",
    "code": "```java\n// Base class for a service appointment\nclass ServiceAppointment {\n    private String time;\n\n    // Method to schedule time\n    public void scheduleTime(String time) {\n        this.time = time;\n    }\n\n    public String getTime() {\n        return time;\n    }\n}\n\n// Doctor appointment subclass\nclass DoctorAppointment extends ServiceAppointment {\n    private int consultationDuration;\n\n    // Overridden method to schedule time with consultation duration\n    @Override\n    public void scheduleTime(String time) {\n        super.scheduleTime(time);\n        // Implementation to include consultation duration\n        this.consultationDuration = 30; // Default duration in minutes\n    }\n\n    public int getConsultationDuration() {\n        return consultationDuration;\n    }\n}\n```"
  },
  {
    "task": "Develop a superclass for electronic gadgets with a method to calculate battery life, then extend it with a laptop class that overrides this method to consider usage patterns.",
    "code": "```java\nclass ElectronicGadget {\n    private double batteryCapacity; // in mAh\n    private double powerConsumption; // in mA\n\n    public ElectronicGadget(double batteryCapacity, double powerConsumption) {\n        this.batteryCapacity = batteryCapacity;\n        this.powerConsumption = powerConsumption;\n    }\n\n    public double calculateBatteryLife() {\n        return batteryCapacity / powerConsumption; // in hours\n    }\n}\n\nclass Laptop extends ElectronicGadget {\n    private double usageFactor; // a factor to represent usage patterns\n\n    public Laptop(double batteryCapacity, double powerConsumption, double usageFactor) {\n        super(batteryCapacity, powerConsumption);\n        this.usageFactor = usageFactor;\n    }\n\n    @Override\n    public double calculateBatteryLife() {\n        return super.calculateBatteryLife() * usageFactor;\n    }\n}\n```"
  },
  {
    "task": "Implement a base class for a website component with a method to render content, then create a blog post subclass that overrides this method to include author information.",
    "code": "```java\nclass WebsiteComponent {\n    public void renderContent() {\n        System.out.println(\"Rendering generic website content.\");\n    }\n}\n\nclass BlogPost extends WebsiteComponent {\n    private String author;\n\n    public BlogPost(String author) {\n        this.author = author;\n    }\n\n    @Override\n    public void renderContent() {\n        System.out.println(\"Rendering blog post content by author: \" + author);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        WebsiteComponent genericComponent = new WebsiteComponent();\n        genericComponent.renderContent();\n\n        BlogPost blogPost = new BlogPost(\"John Doe\");\n        blogPost.renderContent();\n    }\n}\n```"
  },
  {
    "task": "Construct a parent class for a recipe with methods for ingredients and instructions, then derive a cake recipe class that overrides these methods to add baking steps.",
    "code": "```java\nclass Recipe {\n    public void ingredients() {\n        System.out.println(\"List of generic ingredients.\");\n    }\n\n    public void instructions() {\n        System.out.println(\"Generic cooking instructions.\");\n    }\n}\n\nclass CakeRecipe extends Recipe {\n    @Override\n    public void ingredients() {\n        System.out.println(\"List of cake-specific ingredients.\");\n    }\n\n    @Override\n    public void instructions() {\n        System.out.println(\"Cake-specific baking instructions.\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Recipe genericRecipe = new Recipe();\n        genericRecipe.ingredients();\n        genericRecipe.instructions();\n\n        Recipe cakeRecipe = new CakeRecipe();\n        cakeRecipe.ingredients();\n        cakeRecipe.instructions();\n    }\n}\n```"
  },
  {
    "task": "Set up a base class for a plant with methods for sunlight and water needs, and extend it with a cactus subclass that overrides these methods to require less water.",
    "code": "```java\nclass Plant {\n    public void sunlightNeeds() {\n        System.out.println(\"Needs moderate sunlight.\");\n    }\n    \n    public void waterNeeds() {\n        System.out.println(\"Needs regular watering.\");\n    }\n}\n\nclass Cactus extends Plant {\n    @Override\n    public void sunlightNeeds() {\n        System.out.println(\"Needs a lot of sunlight.\");\n    }\n\n    @Override\n    public void waterNeeds() {\n        System.out.println(\"Needs minimal watering.\");\n    }\n}\n```"
  },
  {
    "task": "Create a foundational class for a building with properties like height and material, and derive a skyscraper class that overrides the height property to be significantly taller.",
    "code": "```java\nclass Building {\n    protected double height;\n    protected String material;\n\n    public Building(double height, String material) {\n        this.height = height;\n        this.material = material;\n    }\n\n    public double getHeight() {\n        return height;\n    }\n\n    public String getMaterial() {\n        return material;\n    }\n}\n\nclass Skyscraper extends Building {\n\n    public Skyscraper(double height, String material) {\n        super(height, material);\n        this.height = height * 10; // Significantly taller\n    }\n\n    @Override\n    public double getHeight() {\n        return height;\n    }\n}\n```"
  },
  {
    "task": "Design a base class for a payment method with a method to process transactions, then create a credit card subclass that overrides this method to include credit limits.",
    "code": "```java\nclass PaymentMethod {\n    public void processTransaction(double amount) {\n        System.out.println(\"Processing transaction of amount: \" + amount);\n    }\n}\n\nclass CreditCard extends PaymentMethod {\n    private double creditLimit;\n    private double currentBalance;\n\n    public CreditCard(double creditLimit) {\n        this.creditLimit = creditLimit;\n        this.currentBalance = 0.0;\n    }\n\n    @Override\n    public void processTransaction(double amount) {\n        if (currentBalance + amount > creditLimit) {\n            System.out.println(\"Transaction declined! Exceeds credit limit.\");\n        } else {\n            currentBalance += amount;\n            System.out.println(\"Transaction approved! New balance: \" + currentBalance);\n        }\n    }\n\n    public double getCreditLimit() {\n        return creditLimit;\n    }\n\n    public double getCurrentBalance() {\n        return currentBalance;\n    }\n}\n```"
  },
  {
    "task": "Develop a superclass for a computer program with methods for input and output, then extend it with a game subclass that overrides these methods to include player interactions.",
    "code": "```java\nclass ComputerProgram {\n    public void input() {\n        System.out.println(\"Generic input method.\");\n    }\n\n    public void output() {\n        System.out.println(\"Generic output method.\");\n    }\n}\n\nclass Game extends ComputerProgram {\n    @Override\n    public void input() {\n        System.out.println(\"Player input method.\");\n    }\n\n    @Override\n    public void output() {\n        System.out.println(\"Player output method.\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        ComputerProgram program = new ComputerProgram();\n        program.input();\n        program.output();\n\n        Game game = new Game();\n        game.input();\n        game.output();\n    }\n}\n```"
  },
  {
    "task": "Implement a base class for a dining establishment with a method to calculate wait time, then create a fast food subclass that overrides this method to be shorter.",
    "code": "```java\nclass DiningEstablishment {\n    public int calculateWaitTime(int numberOfPeople) {\n        return numberOfPeople * 10;\n    }\n}\n\nclass FastFood extends DiningEstablishment {\n    @Override\n    public int calculateWaitTime(int numberOfPeople) {\n        return numberOfPeople * 5;\n    }\n}\n```"
  },
  {
    "task": "Construct a parent class for a social media profile with methods for posting and liking, then derive a business profile class that overrides these methods to include promotions.",
    "code": "```java\nclass SocialMediaProfile {\n    public void post(String content) {\n        System.out.println(\"Posting: \" + content);\n    }\n\n    public void like(String content) {\n        System.out.println(\"Liking: \" + content);\n    }\n}\n\nclass BusinessProfile extends SocialMediaProfile {\n    @Override\n    public void post(String content) {\n        System.out.println(\"Posting with promotion: \" + content);\n    }\n\n    @Override\n    public void like(String content) {\n        System.out.println(\"Liking with promotion: \" + content);\n    }\n}\n```"
  },
  {
    "task": "Set up a base class for an educational course with methods for syllabus and grading, and extend it with an online course subclass that overrides these methods for remote learning.",
    "code": "```java\nclass Course {\n    public void syllabus() {\n        System.out.println(\"General course syllabus.\");\n    }\n\n    public void grading() {\n        System.out.println(\"Standard grading system.\");\n    }\n}\n\nclass OnlineCourse extends Course {\n    @Override\n    public void syllabus() {\n        System.out.println(\"Online course syllabus with digital resources.\");\n    }\n\n    @Override\n    public void grading() {\n        System.out.println(\"Grading with online assessment tools.\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Course generalCourse = new Course();\n        generalCourse.syllabus();\n        generalCourse.grading();\n\n        OnlineCourse onlineCourse = new OnlineCourse();\n        onlineCourse.syllabus();\n        onlineCourse.grading();\n    }\n}\n```"
  },
  {
    "task": "Create a foundational class for a sports team with properties like team name and coach, and derive a football team class that overrides the coach property with a specific person.",
    "code": "```java\nclass SportsTeam {\n    protected String teamName;\n    protected String coach;\n\n    public SportsTeam(String teamName, String coach) {\n        this.teamName = teamName;\n        this.coach = coach;\n    }\n\n    public String getTeamName() {\n        return teamName;\n    }\n\n    public String getCoach() {\n        return coach;\n    }\n}\n\nclass FootballTeam extends SportsTeam {\n    public FootballTeam(String teamName, String specificCoach) {\n        super(teamName, specificCoach);\n    }\n}\n```"
  },
  {
    "task": "Design a base class for a document with methods for printing and saving, then create a PDF document subclass that overrides these methods to include encryption.",
    "code": "```java\nabstract class Document {\n    public abstract void print();\n    public abstract void save();\n}\n\nclass PDFDocument extends Document {\n    @Override\n    public void print() {\n        System.out.println(\"Printing PDF Document with encryption...\");\n    }\n\n    @Override\n    public void save() {\n        System.out.println(\"Saving PDF Document with encryption...\");\n    }\n}\n```"
  },
  {
    "task": "Develop a superclass for a retail product with methods for pricing and discount, then extend it with an electronics product class that overrides the discount method to offer more.",
    "code": "```java\nclass RetailProduct {\n    private double price;\n\n    public RetailProduct(double price) {\n        this.price = price;\n    }\n\n    public double getPrice() {\n        return price;\n    }\n\n    public double calculateDiscount() {\n        return price * 0.1; // Default 10% discount\n    }\n}\n\nclass ElectronicsProduct extends RetailProduct {\n\n    public ElectronicsProduct(double price) {\n        super(price);\n    }\n\n    @Override\n    public double calculateDiscount() {\n        // Override to offer a larger discount\n        return getPrice() * 0.2; // 20% discount for electronics\n    }\n}\n```"
  },
  {
    "task": "Implement a base class for a subscription service with a method to renew membership, then create a monthly subscription subclass that overrides this method for automatic renewal.",
    "code": "```java\nclass SubscriptionService {\n    public void renewMembership() {\n        System.out.println(\"Membership renewed.\");\n    }\n}\n\nclass MonthlySubscription extends SubscriptionService {\n    @Override\n    public void renewMembership() {\n        System.out.println(\"Automatic monthly membership renewal.\");\n    }\n}\n```"
  },
  {
    "task": "Construct a parent class for a language translator with a method to translate text, then derive a French translator class that overrides this method for French language specifics.",
    "code": "```java\n// Parent class for a language translator\nclass LanguageTranslator {\n    public String translate(String text) {\n        return \"Translation not available\";\n    }\n}\n\n// Derived French translator class\nclass FrenchTranslator extends LanguageTranslator {\n    @Override\n    public String translate(String text) {\n        // Specific implementation for French translation\n        return \"Traduction fran\u00e7aise pour: \" + text;\n    }\n}\n```"
  },
  {
    "task": "Set up a base class for a customer order with methods for placing and tracking, and extend it with a food order subclass that overrides tracking for delivery status.",
    "code": "```java\nclass CustomerOrder {\n    public void placeOrder() {\n        System.out.println(\"Placing customer order.\");\n    }\n\n    public void trackOrder() {\n        System.out.println(\"Tracking customer order.\");\n    }\n}\n\nclass FoodOrder extends CustomerOrder {\n    @Override\n    public void trackOrder() {\n        System.out.println(\"Tracking food order delivery status.\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        CustomerOrder customerOrder = new CustomerOrder();\n        customerOrder.placeOrder();\n        customerOrder.trackOrder();\n\n        FoodOrder foodOrder = new FoodOrder();\n        foodOrder.placeOrder();\n        foodOrder.trackOrder();\n    }\n}\n```"
  },
  {
    "task": "Create a foundational class for an artwork with properties like artist and medium, and derive a painting class that overrides the medium property to be 'canvas'.",
    "code": "```java\nclass Artwork {\n    private String artist;\n    protected String medium;\n\n    public Artwork(String artist, String medium) {\n        this.artist = artist;\n        this.medium = medium;\n    }\n\n    public String getArtist() {\n        return artist;\n    }\n\n    public String getMedium() {\n        return medium;\n    }\n}\n\nclass Painting extends Artwork {\n\n    public Painting(String artist) {\n        super(artist, \"canvas\");\n    }\n}\n```"
  },
  {
    "task": "Design a base class for a computer network with methods for connectivity and bandwidth, then create a wireless network subclass that overrides these methods for signal strength.",
    "code": "```java\nclass ComputerNetwork {\n    public void connectivity() {\n        System.out.println(\"Checking connectivity in general network...\");\n    }\n\n    public void bandwidth() {\n        System.out.println(\"Checking bandwidth in general network...\");\n    }\n}\n\nclass WirelessNetwork extends ComputerNetwork {\n    @Override\n    public void connectivity() {\n        System.out.println(\"Checking connectivity in wireless network based on signal strength...\");\n    }\n\n    @Override\n    public void bandwidth() {\n        System.out.println(\"Checking bandwidth in wireless network based on signal strength...\");\n    }\n}\n```"
  },
  {
    "task": "Develop a superclass for a messaging app with methods for sending and receiving messages, then extend it with a secure messaging subclass that overrides these methods for encryption.",
    "code": "```java\nclass MessagingApp {\n    public void sendMessage(String message) {\n        System.out.println(\"Sending message: \" + message);\n    }\n    \n    public void receiveMessage(String message) {\n        System.out.println(\"Receiving message: \" + message);\n    }\n}\n\nclass SecureMessagingApp extends MessagingApp {\n    @Override\n    public void sendMessage(String message) {\n        String encryptedMessage = encrypt(message);\n        System.out.println(\"Sending encrypted message: \" + encryptedMessage);\n    }\n    \n    @Override\n    public void receiveMessage(String message) {\n        String decryptedMessage = decrypt(message);\n        System.out.println(\"Receiving decrypted message: \" + decryptedMessage);\n    }\n    \n    private String encrypt(String message) {\n        // Simple encryption stub\n        return new StringBuilder(message).reverse().toString();\n    }\n    \n    private String decrypt(String message) {\n        // Simple decryption stub\n        return new StringBuilder(message).reverse().toString();\n    }\n}\n```"
  },
  {
    "task": "Implement a base class for a travel itinerary with methods for destinations and activities, then create a vacation itinerary subclass that overrides these methods for leisure activities.",
    "code": "```java\nclass TravelItinerary {\n    public void destinations() {\n        System.out.println(\"Listing general destinations...\");\n    }\n\n    public void activities() {\n        System.out.println(\"Listing general activities...\");\n    }\n}\n\nclass VacationItinerary extends TravelItinerary {\n    @Override\n    public void destinations() {\n        System.out.println(\"Listing vacation destinations...\");\n    }\n\n    @Override\n    public void activities() {\n        System.out.println(\"Listing leisure activities...\");\n    }\n}\n```"
  },
  {
    "task": "Construct a parent class for a healthcare record with methods for patient data and treatment history, then derive a pediatric record class that overrides these methods for child-specific data.",
    "code": "```java\nclass HealthcareRecord {\n    public String getPatientData() {\n        return \"General patient data\";\n    }\n\n    public String getTreatmentHistory() {\n        return \"General treatment history\";\n    }\n}\n\nclass PediatricRecord extends HealthcareRecord {\n    @Override\n    public String getPatientData() {\n        return \"Child-specific patient data\";\n    }\n\n    @Override\n    public String getTreatmentHistory() {\n        return \"Child-specific treatment history\";\n    }\n}\n```"
  },
  {
    "task": "Set up a base class for a culinary dish with methods for preparation and serving, and extend it with an appetizer subclass that overrides these methods for smaller portions.",
    "code": "```java\nclass CulinaryDish {\n    public void prepare() {\n        System.out.println(\"Preparing the dish.\");\n    }\n\n    public void serve() {\n        System.out.println(\"Serving the dish.\");\n    }\n}\n\nclass Appetizer extends CulinaryDish {\n    @Override\n    public void prepare() {\n        System.out.println(\"Preparing a smaller portion of the dish.\");\n    }\n\n    @Override\n    public void serve() {\n        System.out.println(\"Serving a smaller portion of the dish.\");\n    }\n}\n```"
  },
  {
    "task": "Create a foundational class for a book collection with properties like genre and author, and derive a mystery collection class that overrides the genre property to be 'mystery'.",
    "code": "```java\nclass BookCollection {\n    private String genre;\n    private String author;\n\n    public BookCollection(String genre, String author) {\n        this.genre = genre;\n        this.author = author;\n    }\n\n    public String getGenre() {\n        return genre;\n    }\n\n    public void setGenre(String genre) {\n        this.genre = genre;\n    }\n\n    public String getAuthor() {\n        return author;\n    }\n\n    public void setAuthor(String author) {\n        this.author = author;\n    }\n}\n\nclass MysteryCollection extends BookCollection {\n\n    public MysteryCollection(String author) {\n        super(\"mystery\", author);\n    }\n\n    @Override\n    public void setGenre(String genre) {\n        super.setGenre(\"mystery\");\n    }\n}\n```"
  },
  {
    "task": "Design a base class for a file storage system with methods for saving and deleting files, then create a cloud storage subclass that overrides these methods for remote access.",
    "code": "```java\nclass FileStorageSystem {\n    public void saveFile(String filename) {\n        System.out.println(\"Saving file: \" + filename + \" to local storage.\");\n    }\n\n    public void deleteFile(String filename) {\n        System.out.println(\"Deleting file: \" + filename + \" from local storage.\");\n    }\n}\n\nclass CloudStorageSystem extends FileStorageSystem {\n    @Override\n    public void saveFile(String filename) {\n        System.out.println(\"Saving file: \" + filename + \" to cloud storage.\");\n    }\n\n    @Override\n    public void deleteFile(String filename) {\n        System.out.println(\"Deleting file: \" + filename + \" from cloud storage.\");\n    }\n}\n```"
  },
  {
    "task": "Develop a superclass for a seasonal sale event with methods for discounts and promotions, then extend it with a summer sale subclass that overrides these methods for summer items.",
    "code": "```java\nclass SeasonalSaleEvent {\n    public double applyDiscount(double price) {\n        // Default discount logic\n        return price * 0.90; // 10% discount\n    }\n\n    public String promotionDetails() {\n        // Default promotion details\n        return \"General sale event promotion.\";\n    }\n}\n\nclass SummerSale extends SeasonalSaleEvent {\n    @Override\n    public double applyDiscount(double price) {\n        // Summer-specific discount logic\n        return price * 0.85; // 15% discount for summer items\n    }\n\n    @Override\n    public String promotionDetails() {\n        // Summer-specific promotion details\n        return \"Special summer sale event promotion.\";\n    }\n}\n```"
  },
  {
    "task": "Implement a base class for a personal budget with methods for income and expenses, then create a student budget subclass that overrides these methods for tuition and fees.",
    "code": "```java\nclass PersonalBudget {\n    private double income;\n    private double expenses;\n\n    public PersonalBudget(double income, double expenses) {\n        this.income = income;\n        this.expenses = expenses;\n    }\n\n    public double getIncome() {\n        return income;\n    }\n\n    public double getExpenses() {\n        return expenses;\n    }\n\n    public void addIncome(double amount) {\n        income += amount;\n    }\n\n    public void addExpense(double amount) {\n        expenses += amount;\n    }\n}\n\nclass StudentBudget extends PersonalBudget {\n    private double tuition;\n    private double fees;\n\n    public StudentBudget(double income, double expenses, double tuition, double fees) {\n        super(income, expenses);\n        this.tuition = tuition;\n        this.fees = fees;\n    }\n\n    @Override\n    public void addIncome(double amount) {\n        super.addIncome(amount);\n        System.out.println(\"Student-specific income processed.\");\n    }\n\n    @Override\n    public void addExpense(double amount) {\n        super.addExpense(amount);\n        System.out.println(\"Student-specific expense processed.\");\n    }\n\n    public double getTuition() {\n        return tuition;\n    }\n\n    public double getFees() {\n        return fees;\n    }\n\n    public void addTuition(double amount) {\n        tuition += amount;\n    }\n\n    public void addFees(double amount) {\n        fees += amount;\n    }\n}\n```"
  },
  {
    "task": "Construct a parent class for a fitness routine with methods for exercises and duration, then derive a yoga routine class that overrides these methods for flexibility exercises.",
    "code": "```java\nclass FitnessRoutine {\n    public void performExercises() {\n        System.out.println(\"Performing general fitness exercises.\");\n    }\n\n    public void routineDuration() {\n        System.out.println(\"General routine duration is 30 minutes.\");\n    }\n}\n\nclass YogaRoutine extends FitnessRoutine {\n    @Override\n    public void performExercises() {\n        System.out.println(\"Performing yoga flexibility exercises.\");\n    }\n\n    @Override\n    public void routineDuration() {\n        System.out.println(\"Yoga routine duration is 60 minutes.\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        FitnessRoutine generalRoutine = new FitnessRoutine();\n        generalRoutine.performExercises();\n        generalRoutine.routineDuration();\n\n        YogaRoutine yogaRoutine = new YogaRoutine();\n        yogaRoutine.performExercises();\n        yogaRoutine.routineDuration();\n    }\n}\n```"
  },
  {
    "task": "Set up a base class for a transportation ticket with methods for pricing and validity, and extend it with an airline ticket subclass that overrides these methods for baggage allowance.",
    "code": "```java\nclass TransportationTicket {\n    public double getPrice() {\n        return 50.0; // Base price for a general transportation ticket\n    }\n\n    public boolean isValid() {\n        return true; // Assume the ticket is valid\n    }\n}\n\nclass AirlineTicket extends TransportationTicket {\n    @Override\n    public double getPrice() {\n        return 150.0; // Specific price for an airline ticket\n    }\n\n    @Override\n    public boolean isValid() {\n        return true; // Assume the ticket is valid\n    }\n    \n    public int getBaggageAllowance() {\n        return 20; // Baggage allowance in kg for an airline ticket\n    }\n}\n```"
  },
  {
    "task": "Create a foundational class for a digital photo album with properties like album name and date, and derive a vacation album class that overrides the date property to be specific.",
    "code": "```java\nimport java.time.LocalDate;\n\nclass PhotoAlbum {\n    private String albumName;\n    private LocalDate date;\n\n    public PhotoAlbum(String albumName, LocalDate date) {\n        this.albumName = albumName;\n        this.date = date;\n    }\n\n    public String getAlbumName() {\n        return albumName;\n    }\n\n    public LocalDate getDate() {\n        return date;\n    }\n}\n\nclass VacationAlbum extends PhotoAlbum {\n    private String vacationDate;\n\n    public VacationAlbum(String albumName, String vacationDate) {\n        super(albumName, null);\n        this.vacationDate = vacationDate;\n    }\n\n    @Override\n    public LocalDate getDate() {\n        return LocalDate.parse(vacationDate);\n    }\n}\n```"
  },
  {
    "task": "Design a base class for a home appliance with methods for power usage and warranty, then create a refrigerator subclass that overrides these methods for energy efficiency.",
    "code": "```java\nclass HomeAppliance {\n    public double getPowerUsage() {\n        return 1000.0; // Default power usage in watts\n    }\n\n    public int getWarrantyInYears() {\n        return 2; // Default warranty period in years\n    }\n}\n\nclass Refrigerator extends HomeAppliance {\n    @Override\n    public double getPowerUsage() {\n        return 800.0; // Overridden power usage for energy efficiency in watts\n    }\n\n    @Override\n    public int getWarrantyInYears() {\n        return 3; // Overridden warranty period in years\n    }\n}\n```"
  },
  {
    "task": "Develop a superclass for a software update with methods for versioning and patch notes, then extend it with a security update subclass that overrides these methods for vulnerabilities.",
    "code": "```java\nclass SoftwareUpdate {\n    private String version;\n    private String patchNotes;\n\n    public SoftwareUpdate(String version, String patchNotes) {\n        this.version = version;\n        this.patchNotes = patchNotes;\n    }\n\n    public String getVersion() {\n        return version;\n    }\n\n    public String getPatchNotes() {\n        return patchNotes;\n    }\n}\n\nclass SecurityUpdate extends SoftwareUpdate {\n    private String vulnerabilities;\n\n    public SecurityUpdate(String version, String patchNotes, String vulnerabilities) {\n        super(version, patchNotes);\n        this.vulnerabilities = vulnerabilities;\n    }\n\n    @Override\n    public String getVersion() {\n        return super.getVersion() + \" (Security Update)\";\n    }\n\n    @Override\n    public String getPatchNotes() {\n        return super.getPatchNotes() + \"\\nVulnerabilities addressed: \" + vulnerabilities;\n    }\n}\n```"
  },
  {
    "task": "Implement a base class for a musical performance with methods for rehearsal and execution, then create a concert performance subclass that overrides these methods for live audience.",
    "code": "```java\nclass MusicalPerformance {\n    public void rehearsal() {\n        System.out.println(\"Rehearsing musical performance.\");\n    }\n\n    public void execution() {\n        System.out.println(\"Executing musical performance.\");\n    }\n}\n\nclass ConcertPerformance extends MusicalPerformance {\n    @Override\n    public void rehearsal() {\n        System.out.println(\"Rehearsing concert performance for live audience.\");\n    }\n\n    @Override\n    public void execution() {\n        System.out.println(\"Executing concert performance for live audience.\");\n    }\n}\n```"
  },
  {
    "task": "Construct a parent class for an academic degree with methods for course requirements and credits, then derive a master's degree class that overrides these methods for advanced studies.",
    "code": "```java\nclass AcademicDegree {\n    public String courseRequirements() {\n        return \"General course requirements for academic degree.\";\n    }\n\n    public int credits() {\n        return 120;\n    }\n}\n\nclass MastersDegree extends AcademicDegree {\n    @Override\n    public String courseRequirements() {\n        return \"Advanced course requirements for master's degree.\";\n    }\n\n    @Override\n    public int credits() {\n        return 60;\n    }\n}\n```"
  },
  {
    "task": "Set up a base class for a weather forecast with methods for temperature and conditions, and extend it with a winter forecast subclass that overrides these methods for snow conditions.",
    "code": "```java\nclass WeatherForecast {\n    public String getTemperature() {\n        return \"Standard Temperature\";\n    }\n\n    public String getConditions() {\n        return \"Standard Conditions\";\n    }\n}\n\nclass WinterForecast extends WeatherForecast {\n    @Override\n    public String getTemperature() {\n        return \"Cold Temperature\";\n    }\n\n    @Override\n    public String getConditions() {\n        return \"Snowy Conditions\";\n    }\n}\n```"
  },
  {
    "task": "Create a foundational class for a personal diary with properties like date and entries, and derive a travel diary class that overrides the date property with travel dates.",
    "code": "```java\nclass PersonalDiary {\n    protected String date;\n    protected String entries;\n\n    public PersonalDiary(String date, String entries) {\n        this.date = date;\n        this.entries = entries;\n    }\n\n    public String getDate() {\n        return date;\n    }\n\n    public String getEntries() {\n        return entries;\n    }\n}\n\nclass TravelDiary extends PersonalDiary {\n    private String travelDate;\n\n    public TravelDiary(String travelDate, String entries) {\n        super(travelDate, entries);\n        this.travelDate = travelDate;\n    }\n\n    @Override\n    public String getDate() {\n        return travelDate;\n    }\n}\n```"
  },
  {
    "task": "Design a base class for a pet with methods for feeding and grooming, then create a cat subclass that overrides these methods with specific food preferences.",
    "code": "```java\nclass Pet {\n    public void feed() {\n        System.out.println(\"Feeding the pet.\");\n    }\n    \n    public void groom() {\n        System.out.println(\"Grooming the pet.\");\n    }\n}\n\nclass Cat extends Pet {\n    @Override\n    public void feed() {\n        System.out.println(\"Feeding the cat with cat food.\");\n    }\n    \n    @Override\n    public void groom() {\n        System.out.println(\"Grooming the cat specifically for cats.\");\n    }\n}\n```"
  },
  {
    "task": "Develop a superclass for a software library with methods for installation and updates, then extend it with a graphics library subclass that overrides these methods for rendering capabilities.",
    "code": "```java\nclass SoftwareLibrary {\n    public void install() {\n        System.out.println(\"Installing the software library.\");\n    }\n\n    public void update() {\n        System.out.println(\"Updating the software library.\");\n    }\n}\n\nclass GraphicsLibrary extends SoftwareLibrary {\n    @Override\n    public void install() {\n        System.out.println(\"Installing the graphics library with rendering capabilities.\");\n    }\n\n    @Override\n    public void update() {\n        System.out.println(\"Updating the graphics library with rendering capabilities.\");\n    }\n}\n```"
  },
  {
    "task": "Implement a base class for a political campaign with methods for fundraising and events, then create a presidential campaign subclass that overrides these methods for national scale.",
    "code": "```java\nclass PoliticalCampaign {\n    public void fundraise() {\n        System.out.println(\"Fundraising at a local level.\");\n    }\n\n    public void hostEvent() {\n        System.out.println(\"Hosting a local event.\");\n    }\n}\n\nclass PresidentialCampaign extends PoliticalCampaign {\n    @Override\n    public void fundraise() {\n        System.out.println(\"Fundraising at a national level.\");\n    }\n\n    @Override\n    public void hostEvent() {\n        System.out.println(\"Hosting a national event.\");\n    }\n}\n```"
  },
  {
    "task": "Construct a parent class for an automotive part with methods for durability and replacement, then derive an engine part class that overrides these methods for performance.",
    "code": "```java\nclass AutomotivePart {\n    public void durability() {\n        System.out.println(\"Calculating durability of the part...\");\n    }\n    \n    public void replacement() {\n        System.out.println(\"Determining replacement schedule for the part...\");\n    }\n}\n\nclass EnginePart extends AutomotivePart {\n    @Override\n    public void durability() {\n        System.out.println(\"Calculating enhanced durability of the engine part...\");\n    }\n    \n    @Override\n    public void replacement() {\n        System.out.println(\"Determining performance-based replacement schedule for the engine part...\");\n    }\n}\n```"
  },
  {
    "task": "Set up a base class for an online tutorial with methods for lessons and quizzes, and extend it with a coding tutorial subclass that overrides these methods for interactive exercises.",
    "code": "```java\nclass OnlineTutorial {\n    public void lessons() {\n        System.out.println(\"Displaying general lessons.\");\n    }\n\n    public void quizzes() {\n        System.out.println(\"Displaying general quizzes.\");\n    }\n}\n\nclass CodingTutorial extends OnlineTutorial {\n    @Override\n    public void lessons() {\n        System.out.println(\"Displaying coding lessons with interactive examples.\");\n    }\n\n    @Override\n    public void quizzes() {\n        System.out.println(\"Displaying coding quizzes with interactive exercises.\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        OnlineTutorial generalTutorial = new OnlineTutorial();\n        generalTutorial.lessons();\n        generalTutorial.quizzes();\n\n        CodingTutorial codingTutorial = new CodingTutorial();\n        codingTutorial.lessons();\n        codingTutorial.quizzes();\n    }\n}\n```"
  },
  {
    "task": "Create a foundational class for a personal collection with properties like item type and value, and derive a stamp collection class that overrides the item type property to be 'stamps'.",
    "code": "```java\nclass PersonalCollection {\n    protected String itemType;\n    protected double value;\n\n    public PersonalCollection(String itemType, double value) {\n        this.itemType = itemType;\n        this.value = value;\n    }\n\n    public String getItemType() {\n        return itemType;\n    }\n\n    public double getValue() {\n        return value;\n    }\n}\n\nclass StampCollection extends PersonalCollection {\n    public StampCollection(double value) {\n        super(\"stamps\", value);\n    }\n}\n```"
  },
  {
    "task": "Design a base class for a video game character with methods for health and abilities, then create a warrior character subclass that overrides these methods for strength.",
    "code": "```java\n// Base class for a video game character\nclass GameCharacter {\n    private int health;\n    \n    public GameCharacter(int health) {\n        this.health = health;\n    }\n    \n    public int getHealth() {\n        return health;\n    }\n    \n    public void setHealth(int health) {\n        this.health = health;\n    }\n    \n    public String abilities() {\n        return \"Basic abilities\";\n    }\n}\n\n// Warrior subclass\nclass Warrior extends GameCharacter {\n    public Warrior(int health) {\n        super(health);\n    }\n    \n    @Override\n    public String abilities() {\n        return \"Warrior abilities with strength\";\n    }\n    \n    public int strength() {\n        return 100; // Example strength value\n    }\n}\n```"
  },
  {
    "task": "Develop a superclass for an event planner with methods for scheduling and budgeting, then extend it with a wedding planner subclass that overrides these methods for ceremony details.",
    "code": "```java\nclass EventPlanner {\n    public void scheduleEvent(String date, String time) {\n        System.out.println(\"Event scheduled on \" + date + \" at \" + time);\n    }\n    \n    public void budgetEvent(double budget) {\n        System.out.println(\"Event budget set at $\" + budget);\n    }\n}\n\nclass WeddingPlanner extends EventPlanner {\n    @Override\n    public void scheduleEvent(String date, String time) {\n        System.out.println(\"Wedding ceremony scheduled on \" + date + \" at \" + time);\n    }\n    \n    @Override\n    public void budgetEvent(double budget) {\n        System.out.println(\"Wedding ceremony budget set at $\" + budget);\n    }\n}\n```"
  },
  {
    "task": "Implement a base class for a software feature with methods for functionality and user feedback, then create a beta feature subclass that overrides these methods for testing.",
    "code": "```java\nclass Feature {\n    public void functionality() {\n        System.out.println(\"Feature functionality.\");\n    }\n    \n    public void userFeedback() {\n        System.out.println(\"User feedback for feature.\");\n    }\n}\n\nclass BetaFeature extends Feature {\n    @Override\n    public void functionality() {\n        System.out.println(\"Beta feature functionality for testing.\");\n    }\n    \n    @Override\n    public void userFeedback() {\n        System.out.println(\"User feedback for beta feature testing.\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Feature feature = new Feature();\n        feature.functionality();\n        feature.userFeedback();\n        \n        BetaFeature betaFeature = new BetaFeature();\n        betaFeature.functionality();\n        betaFeature.userFeedback();\n    }\n}\n```"
  },
  {
    "task": "Construct a parent class for a gardening tool with methods for usage and maintenance, then derive a lawn mower class that overrides these methods for grass cutting.",
    "code": "```java\nclass GardeningTool {\n    public void use() {\n        System.out.println(\"Using the gardening tool.\");\n    }\n\n    public void maintain() {\n        System.out.println(\"Maintaining the gardening tool.\");\n    }\n}\n\nclass LawnMower extends GardeningTool {\n    @Override\n    public void use() {\n        System.out.println(\"Using the lawn mower to cut grass.\");\n    }\n\n    @Override\n    public void maintain() {\n        System.out.println(\"Maintaining the lawn mower.\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        GardeningTool tool = new GardeningTool();\n        tool.use();\n        tool.maintain();\n        \n        LawnMower mower = new LawnMower();\n        mower.use();\n        mower.maintain();\n    }\n}\n```"
  },
  {
    "task": "Set up a base class for a household chore with methods for time and effort, and extend it with a cleaning chore subclass that overrides these methods for dirt removal.",
    "code": "```java\nclass HouseholdChore {\n    public int getTime() {\n        return 60; // Default time in minutes\n    }\n\n    public int getEffort() {\n        return 5; // Default effort level\n    }\n}\n\nclass CleaningChore extends HouseholdChore {\n    @Override\n    public int getTime() {\n        return 90; // Time for cleaning in minutes\n    }\n\n    @Override\n    public int getEffort() {\n        return 8; // Effort level for cleaning\n    }\n}\n```"
  },
  {
    "task": "Create a foundational class for a personal project with properties like name and deadline, and derive a coding project class that overrides the deadline property for milestones.",
    "code": "```java\nclass Project {\n    private String name;\n    private String deadline;\n\n    public Project(String name, String deadline) {\n        this.name = name;\n        this.deadline = deadline;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getDeadline() {\n        return deadline;\n    }\n}\n\nclass CodingProject extends Project {\n    private String milestoneDeadline;\n\n    public CodingProject(String name, String deadline, String milestoneDeadline) {\n        super(name, deadline);\n        this.milestoneDeadline = milestoneDeadline;\n    }\n\n    @Override\n    public String getDeadline() {\n        return milestoneDeadline;\n    }\n}\n```"
  },
  {
    "task": "Design a base class for a holiday celebration with methods for traditions and activities, then create a Christmas celebration subclass that overrides these methods for gift exchange.",
    "code": "```java\nclass HolidayCelebration {\n    public void traditions() {\n        System.out.println(\"General holiday traditions.\");\n    }\n\n    public void activities() {\n        System.out.println(\"General holiday activities.\");\n    }\n}\n\nclass ChristmasCelebration extends HolidayCelebration {\n    @Override\n    public void traditions() {\n        System.out.println(\"Christmas traditions: Decorating the tree, singing carols.\");\n    }\n\n    @Override\n    public void activities() {\n        System.out.println(\"Christmas activities: Gift exchange, family dinner.\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        HolidayCelebration holiday = new HolidayCelebration();\n        holiday.traditions();\n        holiday.activities();\n\n        ChristmasCelebration christmas = new ChristmasCelebration();\n        christmas.traditions();\n        christmas.activities();\n    }\n}\n```"
  },
  {
    "task": "Develop a superclass for a customer feedback system with methods for collecting and analyzing, then extend it with a product feedback subclass that overrides these methods for reviews.",
    "code": "```java\n// Superclass for customer feedback\nclass CustomerFeedback {\n    public void collectFeedback() {\n        System.out.println(\"Collecting general customer feedback.\");\n    }\n    \n    public void analyzeFeedback() {\n        System.out.println(\"Analyzing general customer feedback.\");\n    }\n}\n\n// Subclass for product feedback\nclass ProductFeedback extends CustomerFeedback {\n    @Override\n    public void collectFeedback() {\n        System.out.println(\"Collecting product-specific feedback.\");\n    }\n    \n    @Override\n    public void analyzeFeedback() {\n        System.out.println(\"Analyzing product-specific feedback.\");\n    }\n}\n```"
  },
  {
    "task": "Implement a base class for a civic service with methods for public engagement and policy, then create a community service subclass that overrides these methods for local impact.",
    "code": "```java\nclass CivicService {\n    public void publicEngagement() {\n        System.out.println(\"Engaging with the public on a broad scale.\");\n    }\n\n    public void policy() {\n        System.out.println(\"Creating policies for civic improvement.\");\n    }\n}\n\nclass CommunityService extends CivicService {\n    @Override\n    public void publicEngagement() {\n        System.out.println(\"Engaging with the community on a local level.\");\n    }\n\n    @Override\n    public void policy() {\n        System.out.println(\"Creating policies for local community needs.\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        CivicService civicService = new CivicService();\n        civicService.publicEngagement();\n        civicService.policy();\n\n        CommunityService communityService = new CommunityService();\n        communityService.publicEngagement();\n        communityService.policy();\n    }\n}\n```"
  },
  {
    "task": "Construct a parent class for a culinary ingredient with methods for flavor and preparation, then derive a spice ingredient class that overrides these methods for seasoning.",
    "code": "```java\nclass CulinaryIngredient {\n    public String flavor() {\n        return \"Generic flavor\";\n    }\n\n    public String preparation() {\n        return \"Generic preparation\";\n    }\n}\n\nclass SpiceIngredient extends CulinaryIngredient {\n    @Override\n    public String flavor() {\n        return \"Spicy flavor\";\n    }\n\n    @Override\n    public String preparation() {\n        return \"Seasoning preparation\";\n    }\n}\n```"
  },
  {
    "task": "Set up a base class for a scientific experiment with methods for hypothesis and testing, and extend it with a chemistry experiment subclass that overrides these methods for reactions.",
    "code": "```java\nclass ScientificExperiment {\n    public void hypothesis() {\n        System.out.println(\"This is a general hypothesis for a scientific experiment.\");\n    }\n\n    public void testing() {\n        System.out.println(\"Conducting a general scientific test.\");\n    }\n}\n\nclass ChemistryExperiment extends ScientificExperiment {\n    @Override\n    public void hypothesis() {\n        System.out.println(\"This is a hypothesis specific to a chemistry experiment involving reactions.\");\n    }\n\n    @Override\n    public void testing() {\n        System.out.println(\"Conducting a chemistry test with specific reactions.\");\n    }\n}\n```"
  },
  {
    "task": "Create a foundational class for an inventory system with properties like item ID and quantity, and derive a warehouse inventory class that overrides the quantity property for bulk storage.",
    "code": "```java\nclass InventoryItem {\n    protected String itemId;\n    protected int quantity;\n    \n    public InventoryItem(String itemId, int quantity) {\n        this.itemId = itemId;\n        this.quantity = quantity;\n    }\n    \n    public String getItemId() {\n        return itemId;\n    }\n    \n    public int getQuantity() {\n        return quantity;\n    }\n}\n\nclass WarehouseInventoryItem extends InventoryItem {\n    protected int bulkQuantity;\n    \n    public WarehouseInventoryItem(String itemId, int bulkQuantity) {\n        super(itemId, 0); // quantity in base class is not used for bulk storage\n        this.bulkQuantity = bulkQuantity;\n    }\n    \n    @Override\n    public int getQuantity() {\n        return bulkQuantity;\n    }\n}\n```"
  },
  {
    "task": "Design a base class for a travel agency with methods for itinerary and bookings, then create a luxury travel subclass that overrides these methods for premium services.",
    "code": "```java\nclass TravelAgency {\n    public void createItinerary() {\n        System.out.println(\"Creating a standard itinerary.\");\n    }\n\n    public void makeBooking() {\n        System.out.println(\"Making a standard booking.\");\n    }\n}\n\nclass LuxuryTravel extends TravelAgency {\n    @Override\n    public void createItinerary() {\n        System.out.println(\"Creating a luxury itinerary with premium services.\");\n    }\n\n    @Override\n    public void makeBooking() {\n        System.out.println(\"Making a luxury booking with premium features.\");\n    }\n}\n```"
  },
  {
    "task": "Develop a superclass for an educational tool with methods for teaching and assessment, then extend it with a math tool subclass that overrides these methods for problem-solving.",
    "code": "```java\n// Superclass\nclass EducationalTool {\n    public void teach() {\n        System.out.println(\"General teaching method.\");\n    }\n\n    public void assess() {\n        System.out.println(\"General assessment method.\");\n    }\n}\n\n// Subclass\nclass MathTool extends EducationalTool {\n    @Override\n    public void teach() {\n        System.out.println(\"Teaching math problem-solving.\");\n    }\n\n    @Override\n    public void assess() {\n        System.out.println(\"Assessing math problem-solving skills.\");\n    }\n}\n\n// Example usage\npublic class Main {\n    public static void main(String[] args) {\n        EducationalTool generalTool = new EducationalTool();\n        generalTool.teach();\n        generalTool.assess();\n\n        MathTool mathTool = new MathTool();\n        mathTool.teach();\n        mathTool.assess();\n    }\n}\n```"
  },
  {
    "task": "Implement a base class for a community project with methods for planning and execution, then create a park renovation subclass that overrides these methods for landscaping.",
    "code": "```java\n// Base class for a community project\nclass CommunityProject {\n    public void plan() {\n        System.out.println(\"Planning the community project...\");\n    }\n    \n    public void execute() {\n        System.out.println(\"Executing the community project...\");\n    }\n}\n\n// Subclass for a park renovation project\nclass ParkRenovation extends CommunityProject {\n    @Override\n    public void plan() {\n        System.out.println(\"Planning the park renovation with landscaping...\");\n    }\n    \n    @Override\n    public void execute() {\n        System.out.println(\"Executing the park renovation with landscaping...\");\n    }\n}\n\n// Example usage\npublic class Main {\n    public static void main(String[] args) {\n        CommunityProject project = new CommunityProject();\n        project.plan();\n        project.execute();\n        \n        ParkRenovation parkRenovation = new ParkRenovation();\n        parkRenovation.plan();\n        parkRenovation.execute();\n    }\n}\n```"
  },
  {
    "task": "Construct a parent class for a digital marketing strategy with methods for targeting and engagement, then derive a social media strategy class that overrides these methods for platforms.",
    "code": "```java\nabstract class DigitalMarketingStrategy {\n    public void targeting() {\n        System.out.println(\"General targeting strategy.\");\n    }\n\n    public void engagement() {\n        System.out.println(\"General engagement strategy.\");\n    }\n}\n\nclass SocialMediaStrategy extends DigitalMarketingStrategy {\n    @Override\n    public void targeting() {\n        System.out.println(\"Social media specific targeting.\");\n    }\n\n    @Override\n    public void engagement() {\n        System.out.println(\"Social media specific engagement.\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        DigitalMarketingStrategy strategy = new SocialMediaStrategy();\n        strategy.targeting();\n        strategy.engagement();\n    }\n}\n```"
  },
  {
    "task": "Set up a base class for a scientific publication with methods for research and review, and extend it with a journal article subclass that overrides these methods for peer review.",
    "code": "```java\nclass ScientificPublication {\n    public void research() {\n        System.out.println(\"Conducting general research in the scientific field.\");\n    }\n\n    public void review() {\n        System.out.println(\"Reviewing the scientific publication.\");\n    }\n}\n\nclass JournalArticle extends ScientificPublication {\n    @Override\n    public void research() {\n        System.out.println(\"Conducting specific research for a journal article.\");\n    }\n\n    @Override\n    public void review() {\n        System.out.println(\"Conducting peer review for the journal article.\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        ScientificPublication publication = new ScientificPublication();\n        publication.research();\n        publication.review();\n\n        JournalArticle article = new JournalArticle();\n        article.research();\n        article.review();\n    }\n}\n```"
  },
  {
    "task": "Create a foundational class for a software module with properties like name and dependencies, and derive a user interface module class that overrides the dependencies property for UI libraries.",
    "code": "```java\nclass SoftwareModule {\n    private String name;\n    private String dependencies;\n\n    public SoftwareModule(String name, String dependencies) {\n        this.name = name;\n        this.dependencies = dependencies;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getDependencies() {\n        return dependencies;\n    }\n}\n\nclass UIModule extends SoftwareModule {\n    private String dependencies;\n\n    public UIModule(String name, String dependencies) {\n        super(name, dependencies);\n        this.dependencies = dependencies;\n    }\n\n    @Override\n    public String getDependencies() {\n        return dependencies;\n    }\n}\n```"
  },
  {
    "task": "Design a base class for a fashion line with methods for design and production, then create a summer collection subclass that overrides these methods for seasonal trends.",
    "code": "```java\nabstract class FashionLine {\n    public abstract void design();\n    public abstract void production();\n}\n\nclass SummerCollection extends FashionLine {\n    @Override\n    public void design() {\n        System.out.println(\"Designing summer collection with bright colors and lightweight fabrics.\");\n    }\n\n    @Override\n    public void production() {\n        System.out.println(\"Producing summer collection with quick-dry and breathable materials.\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        FashionLine summerCollection = new SummerCollection();\n        summerCollection.design();\n        summerCollection.production();\n    }\n}\n```"
  },
  {
    "task": "Develop a superclass for a family tree with methods for ancestry and descendants, then extend it with a royal lineage subclass that overrides these methods for historical accuracy.",
    "code": "```java\nclass FamilyTree {\n    public String getAncestry() {\n        return \"General ancestry information.\";\n    }\n\n    public String getDescendants() {\n        return \"General descendants information.\";\n    }\n}\n\nclass RoyalLineage extends FamilyTree {\n    @Override\n    public String getAncestry() {\n        return \"Historically accurate royal ancestry information.\";\n    }\n\n    @Override\n    public String getDescendants() {\n        return \"Historically accurate royal descendants information.\";\n    }\n}\n```"
  },
  {
    "task": "Implement a base class for a musical score with methods for composition and arrangement, then create a symphony subclass that overrides these methods for orchestration.",
    "code": "```java\nabstract class MusicalScore {\n    public abstract void compose();\n    public abstract void arrange();\n}\n\nclass Symphony extends MusicalScore {\n    @Override\n    public void compose() {\n        System.out.println(\"Composing symphony score.\");\n    }\n\n    @Override\n    public void arrange() {\n        System.out.println(\"Arranging symphony score for orchestra.\");\n    }\n}\n```"
  },
  {
    "task": "Construct a parent class for a historical record with methods for events and dates, then derive a war history class that overrides these methods for battles.",
    "code": "```java\nclass HistoricalRecord {\n    public void event() {\n        System.out.println(\"General historical event\");\n    }\n\n    public void date() {\n        System.out.println(\"General date\");\n    }\n}\n\nclass WarHistory extends HistoricalRecord {\n    @Override\n    public void event() {\n        System.out.println(\"Battle event\");\n    }\n\n    @Override\n    public void date() {\n        System.out.println(\"Date of battle\");\n    }\n}\n```"
  },
  {
    "task": "Set up a base class for a pet adoption service with methods for application and approval, and extend it with a dog adoption subclass that overrides these methods for breed compatibility.",
    "code": "```java\nclass PetAdoptionService {\n    public void applyForAdoption() {\n        System.out.println(\"Application received for pet adoption.\");\n    }\n\n    public void approveAdoption() {\n        System.out.println(\"Adoption approved.\");\n    }\n}\n\nclass DogAdoptionService extends PetAdoptionService {\n    @Override\n    public void applyForAdoption() {\n        System.out.println(\"Application received for dog adoption.\");\n    }\n\n    @Override\n    public void approveAdoption() {\n        System.out.println(\"Dog adoption approved based on breed compatibility.\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        PetAdoptionService petService = new PetAdoptionService();\n        petService.applyForAdoption();\n        petService.approveAdoption();\n\n        DogAdoptionService dogService = new DogAdoptionService();\n        dogService.applyForAdoption();\n        dogService.approveAdoption();\n    }\n}\n```"
  },
  {
    "task": "Create a foundational class for a financial report with properties like fiscal year and summary, and derive an annual report class that overrides the fiscal year property for yearly data.",
    "code": "```java\nclass FinancialReport {\n    protected String fiscalYear;\n    protected String summary;\n\n    public FinancialReport(String fiscalYear, String summary) {\n        this.fiscalYear = fiscalYear;\n        this.summary = summary;\n    }\n\n    public String getFiscalYear() {\n        return fiscalYear;\n    }\n\n    public void setFiscalYear(String fiscalYear) {\n        this.fiscalYear = fiscalYear;\n    }\n\n    public String getSummary() {\n        return summary;\n    }\n\n    public void setSummary(String summary) {\n        this.summary = summary;\n    }\n}\n\nclass AnnualReport extends FinancialReport {\n\n    public AnnualReport(String fiscalYear, String summary) {\n        super(fiscalYear, summary);\n    }\n\n    @Override\n    public String getFiscalYear() {\n        return \"Annual Report for Year: \" + super.fiscalYear;\n    }\n}\n```"
  },
  {
    "task": "Design a base class for a movie franchise with methods for casting and production, then create a sequel subclass that overrides these methods for continuity.",
    "code": "```java\nclass MovieFranchise {\n    public void casting() {\n        System.out.println(\"Casting actors for the movie franchise.\");\n    }\n\n    public void production() {\n        System.out.println(\"Producing the movie franchise.\");\n    }\n}\n\nclass Sequel extends MovieFranchise {\n    @Override\n    public void casting() {\n        System.out.println(\"Casting actors for the sequel with continuity in mind.\");\n    }\n\n    @Override\n    public void production() {\n        System.out.println(\"Producing the sequel with continuity in mind.\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        MovieFranchise franchise = new MovieFranchise();\n        franchise.casting();\n        franchise.production();\n\n        Sequel sequel = new Sequel();\n        sequel.casting();\n        sequel.production();\n    }\n}\n```"
  },
  {
    "task": "Develop a superclass for a real estate listing with methods for pricing and description, then extend it with a luxury listing subclass that overrides these methods for high-end features.",
    "code": "```java\nclass RealEstateListing {\n    private double price;\n    private String description;\n\n    public RealEstateListing(double price, String description) {\n        this.price = price;\n        this.description = description;\n    }\n\n    public double getPrice() {\n        return price;\n    }\n\n    public String getDescription() {\n        return description;\n    }\n}\n\nclass LuxuryListing extends RealEstateListing {\n    public LuxuryListing(double price, String description) {\n        super(price, description);\n    }\n\n    @Override\n    public double getPrice() {\n        return super.getPrice() * 1.2; // Example of a luxury price adjustment\n    }\n\n    @Override\n    public String getDescription() {\n        return \"Luxury: \" + super.getDescription() + \" with high-end features.\";\n    }\n}\n```"
  },
  {
    "task": "Implement a base class for a mobile app with methods for user interface and performance, then create a gaming app subclass that overrides these methods for graphics and speed.",
    "code": "```java\nclass MobileApp {\n    public void userInterface() {\n        System.out.println(\"Standard mobile app user interface.\");\n    }\n\n    public void performance() {\n        System.out.println(\"Standard mobile app performance.\");\n    }\n}\n\nclass GamingApp extends MobileApp {\n    @Override\n    public void userInterface() {\n        System.out.println(\"Enhanced gaming app user interface with graphics.\");\n    }\n\n    @Override\n    public void performance() {\n        System.out.println(\"Optimized gaming app performance for speed.\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        MobileApp standardApp = new MobileApp();\n        standardApp.userInterface();\n        standardApp.performance();\n\n        GamingApp gamingApp = new GamingApp();\n        gamingApp.userInterface();\n        gamingApp.performance();\n    }\n}\n```"
  },
  {
    "task": "Construct a parent class for a corporate policy with methods for compliance and enforcement, then derive an HR policy class that overrides these methods for employee relations.",
    "code": "```java\nclass CorporatePolicy {\n    public void compliance() {\n        System.out.println(\"General corporate compliance guidelines.\");\n    }\n\n    public void enforcement() {\n        System.out.println(\"General corporate enforcement procedures.\");\n    }\n}\n\nclass HRPolicy extends CorporatePolicy {\n    @Override\n    public void compliance() {\n        System.out.println(\"HR-specific compliance guidelines for employee relations.\");\n    }\n\n    @Override\n    public void enforcement() {\n        System.out.println(\"HR-specific enforcement procedures for employee relations.\");\n    }\n}\n```"
  },
  {
    "task": "Set up a base class for a scientific calculator with methods for basic operations and advanced functions, and extend it with a graphing calculator subclass that overrides these methods for plotting.",
    "code": "```java\n// Base class for a scientific calculator\nclass ScientificCalculator {\n    // Basic operations\n    public double add(double a, double b) {\n        return a + b;\n    }\n\n    public double subtract(double a, double b) {\n        return a - b;\n    }\n\n    public double multiply(double a, double b) {\n        return a * b;\n    }\n\n    public double divide(double a, double b) {\n        if (b == 0) {\n            throw new ArithmeticException(\"Cannot divide by zero\");\n        }\n        return a / b;\n    }\n\n    // Advanced functions\n    public double power(double base, double exponent) {\n        return Math.pow(base, exponent);\n    }\n\n    public double squareRoot(double value) {\n        if (value < 0) {\n            throw new ArithmeticException(\"Cannot take square root of negative number\");\n        }\n        return Math.sqrt(value);\n    }\n}\n\n// Subclass for a graphing calculator\nclass GraphingCalculator extends ScientificCalculator {\n    @Override\n    public double add(double a, double b) {\n        // Implementation for plotting the result of addition\n        double result = super.add(a, b);\n        plot(result);\n        return result;\n    }\n\n    @Override\n    public double subtract(double a, double b) {\n        // Implementation for plotting the result of subtraction\n        double result = super.subtract(a, b);\n        plot(result);\n        return result;\n    }\n\n    @Override\n    public double multiply(double a, double b) {\n        // Implementation for plotting the result of multiplication\n        double result = super.multiply(a, b);\n        plot(result);\n        return result;\n    }\n\n    @Override\n    public double divide(double a, double b) {\n        // Implementation for plotting the result of division\n        double result = super.divide(a, b);\n        plot(result);\n        return result;\n    }\n\n    @Override\n    public double power(double base, double exponent) {\n        // Implementation for plotting the result of power\n        double result = super.power(base, exponent);\n        plot(result);\n        return result;\n    }\n\n    @Override\n    public double squareRoot(double value) {\n        // Implementation for plotting the result of square root\n        double result = super.squareRoot(value);\n        plot(result);\n        return result;\n    }\n\n    private void plot(double value) {\n        // Placeholder for plotting logic\n        System.out.println(\"Plotting result: \" + value);\n    }\n}\n```"
  },
  {
    "task": "Create a foundational class for a children's book with properties like age group and illustrations, and derive a picture book class that overrides the illustrations property to be more prominent.",
    "code": "```java\nclass ChildrensBook {\n    private String ageGroup;\n    private String illustrations;\n\n    public ChildrensBook(String ageGroup, String illustrations) {\n        this.ageGroup = ageGroup;\n        this.illustrations = illustrations;\n    }\n\n    public String getAgeGroup() {\n        return ageGroup;\n    }\n\n    public String getIllustrations() {\n        return illustrations;\n    }\n}\n\nclass PictureBook extends ChildrensBook {\n    private String prominentIllustrations;\n\n    public PictureBook(String ageGroup, String prominentIllustrations) {\n        super(ageGroup, prominentIllustrations);\n        this.prominentIllustrations = prominentIllustrations;\n    }\n\n    @Override\n    public String getIllustrations() {\n        return \"Prominent: \" + prominentIllustrations;\n    }\n}\n```"
  },
  {
    "task": "Design a base class for a cooking class with methods for ingredients and techniques, then create a baking class subclass that overrides these methods for dough preparation.",
    "code": "```java\nclass CookingClass {\n    public void ingredients() {\n        System.out.println(\"Listing general cooking ingredients...\");\n    }\n\n    public void techniques() {\n        System.out.println(\"Demonstrating general cooking techniques...\");\n    }\n}\n\nclass BakingClass extends CookingClass {\n    @Override\n    public void ingredients() {\n        System.out.println(\"Listing ingredients specific to baking...\");\n    }\n\n    @Override\n    public void techniques() {\n        System.out.println(\"Demonstrating dough preparation techniques...\");\n    }\n}\n```"
  },
  {
    "task": "Develop a superclass for a public transportation system with methods for routes and schedules, then extend it with a metro system subclass that overrides these methods for urban areas.",
    "code": "```java\nclass PublicTransportationSystem {\n    public void displayRoutes() {\n        System.out.println(\"Displaying generic transportation routes.\");\n    }\n\n    public void displaySchedules() {\n        System.out.println(\"Displaying generic transportation schedules.\");\n    }\n}\n\nclass MetroSystem extends PublicTransportationSystem {\n    @Override\n    public void displayRoutes() {\n        System.out.println(\"Displaying metro routes for urban areas.\");\n    }\n\n    @Override\n    public void displaySchedules() {\n        System.out.println(\"Displaying metro schedules for urban areas.\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        PublicTransportationSystem generalSystem = new PublicTransportationSystem();\n        generalSystem.displayRoutes();\n        generalSystem.displaySchedules();\n\n        MetroSystem metroSystem = new MetroSystem();\n        metroSystem.displayRoutes();\n        metroSystem.displaySchedules();\n    }\n}\n```"
  },
  {
    "task": "Implement a base class for a music store inventory with methods for stock and sales, then create a vinyl record subclass that overrides these methods for collectible items.",
    "code": "```java\nclass MusicStoreItem {\n    private int stock;\n    private double price;\n\n    public MusicStoreItem(int stock, double price) {\n        this.stock = stock;\n        this.price = price;\n    }\n\n    public int getStock() {\n        return stock;\n    }\n\n    public double getPrice() {\n        return price;\n    }\n\n    public void sellItem(int quantity) {\n        if (stock >= quantity) {\n            stock -= quantity;\n            System.out.println(quantity + \" item(s) sold.\");\n        } else {\n            System.out.println(\"Insufficient stock.\");\n        }\n    }\n\n    public void addStock(int quantity) {\n        stock += quantity;\n        System.out.println(quantity + \" item(s) added to stock.\");\n    }\n}\n\nclass VinylRecord extends MusicStoreItem {\n    private boolean isCollectible;\n\n    public VinylRecord(int stock, double price, boolean isCollectible) {\n        super(stock, price);\n        this.isCollectible = isCollectible;\n    }\n\n    @Override\n    public void sellItem(int quantity) {\n        if (isCollectible) {\n            System.out.println(\"Selling collectible vinyl record(s) at premium price.\");\n        }\n        super.sellItem(quantity);\n    }\n\n    @Override\n    public void addStock(int quantity) {\n        if (isCollectible) {\n            System.out.println(\"Adding collectible vinyl record(s) to inventory.\");\n        }\n        super.addStock(quantity);\n    }\n\n    public boolean isCollectible() {\n        return isCollectible;\n    }\n}\n```"
  },
  {
    "task": "Construct a parent class for a legal contract with methods for terms and conditions, then derive a rental agreement class that overrides these methods for tenant rights.",
    "code": "```java\n// Parent class for a legal contract\nclass LegalContract {\n    public String getTerms() {\n        return \"General terms of the contract.\";\n    }\n\n    public String getConditions() {\n        return \"General conditions of the contract.\";\n    }\n}\n\n// Derived class for a rental agreement\nclass RentalAgreement extends LegalContract {\n    @Override\n    public String getTerms() {\n        return \"Specific terms related to rental agreements.\";\n    }\n\n    @Override\n    public String getConditions() {\n        return \"Specific conditions related to tenant rights.\";\n    }\n}\n```"
  },
  {
    "task": "Set up a base class for a journalism piece with methods for reporting and editing, and extend it with an investigative article subclass that overrides these methods for in-depth analysis.",
    "code": "```java\nclass JournalismPiece {\n    public void report() {\n        System.out.println(\"Reporting general news.\");\n    }\n\n    public void edit() {\n        System.out.println(\"Editing the general news piece.\");\n    }\n}\n\nclass InvestigativeArticle extends JournalismPiece {\n    @Override\n    public void report() {\n        System.out.println(\"Reporting in-depth investigative findings.\");\n    }\n\n    @Override\n    public void edit() {\n        System.out.println(\"Editing the investigative article for accuracy and depth.\");\n    }\n}\n```"
  },
  {
    "task": "Create a foundational class for a wildlife reserve with properties like area and species, and derive a bird sanctuary class that overrides the species property for avians.",
    "code": "```java\nclass WildlifeReserve {\n    protected double area;\n    protected String species;\n\n    public WildlifeReserve(double area, String species) {\n        this.area = area;\n        this.species = species;\n    }\n\n    public double getArea() {\n        return area;\n    }\n\n    public String getSpecies() {\n        return species;\n    }\n}\n\nclass BirdSanctuary extends WildlifeReserve {\n    private String birdSpecies;\n\n    public BirdSanctuary(double area, String birdSpecies) {\n        super(area, \"Avians\");\n        this.birdSpecies = birdSpecies;\n    }\n\n    @Override\n    public String getSpecies() {\n        return birdSpecies;\n    }\n}\n```"
  },
  {
    "task": "Design a base class for a subscription box service with methods for curation and delivery, then create a gourmet food box subclass that overrides these methods for artisanal products.",
    "code": "```java\nclass SubscriptionBox {\n    public void curate() {\n        System.out.println(\"Curating a selection of items.\");\n    }\n\n    public void deliver() {\n        System.out.println(\"Delivering the subscription box.\");\n    }\n}\n\nclass GourmetFoodBox extends SubscriptionBox {\n    @Override\n    public void curate() {\n        System.out.println(\"Curating a selection of artisanal food products.\");\n    }\n\n    @Override\n    public void deliver() {\n        System.out.println(\"Delivering the gourmet food box.\");\n    }\n}\n```"
  },
  {
    "task": "Develop a superclass for a fitness app with methods for tracking and motivation, then extend it with a running app subclass that overrides these methods for pace and distance.",
    "code": "```java\nclass FitnessApp {\n    public void track() {\n        System.out.println(\"Tracking fitness activity...\");\n    }\n    \n    public void motivate() {\n        System.out.println(\"Stay motivated!\");\n    }\n}\n\nclass RunningApp extends FitnessApp {\n    @Override\n    public void track() {\n        System.out.println(\"Tracking running pace and distance...\");\n    }\n\n    @Override\n    public void motivate() {\n        System.out.println(\"Push your limits!\");\n    }\n}\n```"
  },
  {
    "task": "Implement a base class for a digital portfolio with methods for showcasing and updating, then create an artist portfolio subclass that overrides these methods for galleries.",
    "code": "```java\nclass DigitalPortfolio {\n    public void showcase() {\n        System.out.println(\"Showcasing digital portfolio.\");\n    }\n\n    public void update() {\n        System.out.println(\"Updating digital portfolio.\");\n    }\n}\n\nclass ArtistPortfolio extends DigitalPortfolio {\n    @Override\n    public void showcase() {\n        System.out.println(\"Showcasing artist portfolio in a gallery.\");\n    }\n\n    @Override\n    public void update() {\n        System.out.println(\"Updating artist portfolio gallery.\");\n    }\n}\n```"
  },
  {
    "task": "Construct a parent class for a gaming console with methods for performance and compatibility, then derive a next-gen console class that overrides these methods for new features.",
    "code": "```java\nclass GamingConsole {\n    public void performance() {\n        System.out.println(\"Standard performance for gaming.\");\n    }\n\n    public void compatibility() {\n        System.out.println(\"Compatible with previous generation games.\");\n    }\n}\n\nclass NextGenConsole extends GamingConsole {\n    @Override\n    public void performance() {\n        System.out.println(\"Enhanced performance with advanced graphics.\");\n    }\n\n    @Override\n    public void compatibility() {\n        System.out.println(\"Compatible with all previous generation games and new features.\");\n    }\n}\n```"
  },
  {
    "task": "Set up a base class for a cultural festival with methods for events and participation, and extend it with a music festival subclass that overrides these methods for performances.",
    "code": "```java\nclass CulturalFestival {\n    public void events() {\n        System.out.println(\"General cultural events.\");\n    }\n\n    public void participation() {\n        System.out.println(\"Participation in cultural activities.\");\n    }\n}\n\nclass MusicFestival extends CulturalFestival {\n    @Override\n    public void events() {\n        System.out.println(\"Music festival events.\");\n    }\n\n    @Override\n    public void participation() {\n        System.out.println(\"Participation in music performances.\");\n    }\n}\n```"
  }
]