[
  {
    "task": "Create a list of the first ten positive integers and calculate their sum.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class SumList {\n    public static void main(String[] args) {\n        List<Integer> numbers = new ArrayList<>();\n        for (int i = 1; i <= 10; i++) {\n            numbers.add(i);\n        }\n\n        int sum = 0;\n        for (int number : numbers) {\n            sum += number;\n        }\n\n        System.out.println(\"Sum: \" + sum);\n    }\n}\n```"
  },
  {
    "task": "Write a program to reverse the order of elements in a given list.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class ReverseList {\n    public static void main(String[] args) {\n        List<Integer> list = new ArrayList<>();\n        list.add(1);\n        list.add(2);\n        list.add(3);\n        list.add(4);\n        list.add(5);\n\n        Collections.reverse(list);\n\n        System.out.println(list);\n    }\n}\n```"
  },
  {
    "task": "Implement a function that takes a list and returns the list with duplicates removed.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\n\npublic class ListUtils {\n    public static List<Integer> removeDuplicates(List<Integer> list) {\n        return new ArrayList<>(new HashSet<>(list));\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = new ArrayList<>();\n        numbers.add(1);\n        numbers.add(2);\n        numbers.add(2);\n        numbers.add(3);\n        List<Integer> result = removeDuplicates(numbers);\n        System.out.println(result);\n    }\n}\n```"
  },
  {
    "task": "Create a list of names and sort them in alphabetical order.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<String> names = new ArrayList<>();\n        names.add(\"Charlie\");\n        names.add(\"Alice\");\n        names.add(\"Bob\");\n        \n        Collections.sort(names);\n        \n        for (String name : names) {\n            System.out.println(name);\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a function that appends a new element to an existing list.",
    "code": "```java\nimport java.util.List;\n\npublic class ListManager {\n    public static void appendElement(List<Object> list, Object element) {\n        list.add(element);\n    }\n}\n```"
  },
  {
    "task": "Generate a list of the first 20 even numbers.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class EvenNumbersList {\n    public static void main(String[] args) {\n        List<Integer> evenNumbers = new ArrayList<>();\n        \n        for (int i = 1; i <= 20; i++) {\n            evenNumbers.add(i * 2);\n        }\n        \n        System.out.println(evenNumbers);\n    }\n}\n```"
  },
  {
    "task": "Create a nested list (a list of lists) and access an element from the inner list.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class NestedListExample {\n    public static void main(String[] args) {\n        List<List<Integer>> nestedList = new ArrayList<>();\n\n        List<Integer> innerList1 = new ArrayList<>();\n        innerList1.add(1);\n        innerList1.add(2);\n        innerList1.add(3);\n\n        List<Integer> innerList2 = new ArrayList<>();\n        innerList2.add(4);\n        innerList2.add(5);\n        innerList2.add(6);\n\n        nestedList.add(innerList1);\n        nestedList.add(innerList2);\n\n        int element = nestedList.get(1).get(0); // Access an element from the inner list\n        System.out.println(element);\n    }\n}\n```"
  },
  {
    "task": "Write a program that finds the maximum value in a list of integers.",
    "code": "```java\nimport java.util.List;\nimport java.util.Arrays;\n\npublic class MaxValueFinder {\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(3, 5, 7, 2, 8);\n        int maxValue = findMaxValue(numbers);\n        System.out.println(\"The maximum value is: \" + maxValue);\n    }\n    \n    public static int findMaxValue(List<Integer> numbers) {\n        int max = Integer.MIN_VALUE;\n        for (Integer number : numbers) {\n            if (number > max) {\n                max = number;\n            }\n        }\n        return max;\n    }\n}\n```"
  },
  {
    "task": "Implement a function to merge two lists into a single list without duplicates.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\npublic class ListMerger {\n    public static List<Integer> mergeLists(List<Integer> list1, List<Integer> list2) {\n        Set<Integer> set = new HashSet<>(list1);\n        set.addAll(list2);\n        return new ArrayList<>(set);\n    }\n\n    public static void main(String[] args) {\n        List<Integer> list1 = List.of(1, 2, 3, 4);\n        List<Integer> list2 = List.of(3, 4, 5, 6);\n        List<Integer> mergedList = mergeLists(list1, list2);\n        System.out.println(mergedList);\n    }\n}\n```"
  },
  {
    "task": "Create a list from user input, then display the list in reverse order.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class ReverseList {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        List<String> list = new ArrayList<>();\n\n        System.out.println(\"Enter items for the list (type 'end' to finish):\");\n        while (true) {\n            String input = scanner.nextLine();\n            if (\"end\".equalsIgnoreCase(input)) {\n                break;\n            }\n            list.add(input);\n        }\n\n        Collections.reverse(list);\n        System.out.println(\"Reversed list:\");\n        for (String item : list) {\n            System.out.println(item);\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a function that takes a list and returns a new list containing only the even numbers.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class EvenNumberList {\n    public static List<Integer> filterEvenNumbers(List<Integer> numbers) {\n        List<Integer> evenNumbers = new ArrayList<>();\n        for (Integer number : numbers) {\n            if (number % 2 == 0) {\n                evenNumbers.add(number);\n            }\n        }\n        return evenNumbers;\n    }\n}\n```"
  },
  {
    "task": "Generate a list of squares for the numbers 1 through 10.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class SquaresList {\n    public static void main(String[] args) {\n        List<Integer> squares = new ArrayList<>();\n        for (int i = 1; i <= 10; i++) {\n            squares.add(i * i);\n        }\n        System.out.println(squares);\n    }\n}\n```"
  },
  {
    "task": "Create a list of floating-point numbers and find their average.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class AverageCalculator {\n    public static void main(String[] args) {\n        List<Double> numbers = new ArrayList<>();\n        numbers.add(10.5);\n        numbers.add(20.3);\n        numbers.add(30.2);\n        numbers.add(40.1);\n        numbers.add(50.0);\n\n        double sum = 0.0;\n        for (double number : numbers) {\n            sum += number;\n        }\n\n        double average = sum / numbers.size();\n        System.out.println(\"Average: \" + average);\n    }\n}\n```"
  },
  {
    "task": "Implement a program to rotate the elements of a list to the right by a given number of steps.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ListRotator {\n    public static List<Integer> rotateList(List<Integer> list, int steps) {\n        int size = list.size();\n        if (size == 0 || steps % size == 0) {\n            return new ArrayList<>(list);\n        }\n        \n        steps = steps % size;\n        List<Integer> rotatedList = new ArrayList<>(list.subList(size - steps, size));\n        rotatedList.addAll(list.subList(0, size - steps));\n        \n        return rotatedList;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> list = List.of(1, 2, 3, 4, 5);\n        int steps = 2;\n        List<Integer> rotated = rotateList(list, steps);\n        System.out.println(rotated);\n    }\n}\n```"
  },
  {
    "task": "Write a function that checks if a list is a palindrome (reads the same forwards and backwards).",
    "code": "```java\nimport java.util.List;\n\npublic class PalindromeChecker {\n    public static boolean isPalindrome(List<?> list) {\n        int left = 0;\n        int right = list.size() - 1;\n        while (left < right) {\n            if (!list.get(left).equals(list.get(right))) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}\n```"
  },
  {
    "task": "Create a list of random integers and count how many are greater than 50.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Random;\n\npublic class RandomIntegerList {\n    public static void main(String[] args) {\n        List<Integer> randomIntegers = new ArrayList<>();\n        Random random = new Random();\n        int countGreaterThan50 = 0;\n\n        for (int i = 0; i < 10; i++) { // Example size of the list\n            int randomNumber = random.nextInt(100); // Random integers between 0 and 99\n            randomIntegers.add(randomNumber);\n            if (randomNumber > 50) {\n                countGreaterThan50++;\n            }\n        }\n\n        System.out.println(\"Random Integers: \" + randomIntegers);\n        System.out.println(\"Count of numbers greater than 50: \" + countGreaterThan50);\n    }\n}\n```"
  },
  {
    "task": "Write a program that removes the first occurrence of a specified element from a list.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class RemoveFirstOccurrence {\n    public static void main(String[] args) {\n        List<String> list = new ArrayList<>();\n        list.add(\"apple\");\n        list.add(\"banana\");\n        list.add(\"cherry\");\n        list.add(\"banana\");\n        \n        String elementToRemove = \"banana\";\n        \n        list.remove(elementToRemove);\n        \n        System.out.println(list);\n    }\n}\n```"
  },
  {
    "task": "Implement a function that takes two lists and returns a list containing their intersection.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ListIntersection {\n    public static List<Integer> findIntersection(List<Integer> list1, List<Integer> list2) {\n        List<Integer> intersection = new ArrayList<>();\n        for (Integer item : list1) {\n            if (list2.contains(item) && !intersection.contains(item)) {\n                intersection.add(item);\n            }\n        }\n        return intersection;\n    }\n}\n```"
  },
  {
    "task": "Create a list of prime numbers less than 100.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class PrimeNumbers {\n    public static void main(String[] args) {\n        List<Integer> primeNumbers = new ArrayList<>();\n        for (int number = 2; number < 100; number++) {\n            if (isPrime(number)) {\n                primeNumbers.add(number);\n            }\n        }\n        System.out.println(primeNumbers);\n    }\n\n    private static boolean isPrime(int number) {\n        if (number <= 1) return false;\n        for (int i = 2; i <= Math.sqrt(number); i++) {\n            if (number % i == 0) return false;\n        }\n        return true;\n    }\n}\n```"
  },
  {
    "task": "Write a function to split a list into two lists: one with even numbers and one with odd numbers.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> numbers = List.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n        List<List<Integer>> splitLists = splitEvenOdd(numbers);\n        System.out.println(\"Even Numbers: \" + splitLists.get(0));\n        System.out.println(\"Odd Numbers: \" + splitLists.get(1));\n    }\n\n    public static List<List<Integer>> splitEvenOdd(List<Integer> numbers) {\n        List<Integer> evens = new ArrayList<>();\n        List<Integer> odds = new ArrayList<>();\n        for (int number : numbers) {\n            if (number % 2 == 0) {\n                evens.add(number);\n            } else {\n                odds.add(number);\n            }\n        }\n        List<List<Integer>> result = new ArrayList<>();\n        result.add(evens);\n        result.add(odds);\n        return result;\n    }\n}\n```"
  },
  {
    "task": "Create a list of strings and convert all the strings to uppercase.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ListUsage {\n    public static void main(String[] args) {\n        List<String> strings = new ArrayList<>();\n        strings.add(\"apple\");\n        strings.add(\"banana\");\n        strings.add(\"cherry\");\n\n        List<String> uppercasedStrings = new ArrayList<>();\n        for (String s : strings) {\n            uppercasedStrings.add(s.toUpperCase());\n        }\n\n        System.out.println(uppercasedStrings);\n    }\n}\n```"
  },
  {
    "task": "Implement a program that removes all elements from a list that are less than a specified value.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\n\npublic class ListFilter {\n    public static void main(String[] args) {\n        List<Integer> numbers = new ArrayList<>();\n        numbers.add(10);\n        numbers.add(5);\n        numbers.add(8);\n        numbers.add(3);\n        numbers.add(12);\n\n        int threshold = 7;\n        removeLessThan(numbers, threshold);\n\n        System.out.println(numbers);\n    }\n\n    public static void removeLessThan(List<Integer> list, int value) {\n        Iterator<Integer> iterator = list.iterator();\n        while (iterator.hasNext()) {\n            if (iterator.next() < value) {\n                iterator.remove();\n            }\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a function that takes a list and returns a new list with elements in random order.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class RandomOrderList {\n    public static <T> List<T> shuffleList(List<T> inputList) {\n        List<T> shuffledList = new ArrayList<>(inputList);\n        Collections.shuffle(shuffledList);\n        return shuffledList;\n    }\n}\n```"
  },
  {
    "task": "Create a list of tuples where each tuple contains a number and its square.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class NumberSquareList {\n    public static void main(String[] args) {\n        List<int[]> numberSquareList = new ArrayList<>();\n        \n        for (int i = 1; i <= 10; i++) {\n            int[] tuple = { i, i * i };\n            numberSquareList.add(tuple);\n        }\n        \n        for (int[] tuple : numberSquareList) {\n            System.out.println(\"(\" + tuple[0] + \", \" + tuple[1] + \")\");\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a program to multiply all elements in a list by a given factor.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class MultiplyList {\n    public static void main(String[] args) {\n        List<Integer> numbers = new ArrayList<>();\n        numbers.add(1);\n        numbers.add(2);\n        numbers.add(3);\n        numbers.add(4);\n        numbers.add(5);\n\n        int factor = 3; // Example factor\n        List<Integer> multipliedNumbers = multiplyElements(numbers, factor);\n\n        for (int number : multipliedNumbers) {\n            System.out.println(number);\n        }\n    }\n\n    public static List<Integer> multiplyElements(List<Integer> list, int factor) {\n        List<Integer> result = new ArrayList<>();\n        for (int number : list) {\n            result.add(number * factor);\n        }\n        return result;\n    }\n}\n```"
  },
  {
    "task": "Implement a function that flattens a nested list.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ListFlattener {\n\n    public static List<Object> flatten(List<Object> nestedList) {\n        List<Object> flatList = new ArrayList<>();\n        for (Object element : nestedList) {\n            if (element instanceof List<?>) {\n                flatList.addAll(flatten((List<Object>) element));\n            } else {\n                flatList.add(element);\n            }\n        }\n        return flatList;\n    }\n\n    public static void main(String[] args) {\n        List<Object> nestedList = new ArrayList<>();\n        nestedList.add(1);\n        nestedList.add(2);\n        List<Object> subList = new ArrayList<>();\n        subList.add(3);\n        subList.add(4);\n        nestedList.add(subList);\n        nestedList.add(5);\n\n        List<Object> flatList = flatten(nestedList);\n        System.out.println(flatList);\n    }\n}\n```"
  },
  {
    "task": "Create a list of dates and sort them chronologically.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.List;\n\npublic class DateSorter {\n    public static void main(String[] args) throws ParseException {\n        List<Date> dateList = new ArrayList<>();\n        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n        \n        dateList.add(sdf.parse(\"2023-10-05\"));\n        dateList.add(sdf.parse(\"2022-01-15\"));\n        dateList.add(sdf.parse(\"2023-04-22\"));\n        \n        Collections.sort(dateList);\n        \n        for (Date date : dateList) {\n            System.out.println(sdf.format(date));\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a function that finds the index of the first occurrence of a given element in a list.",
    "code": "```java\nimport java.util.List;\n\npublic class ListUtils {\n    public static int findFirstOccurrence(List<Integer> list, int element) {\n        return list.indexOf(element);\n    }\n}\n```"
  },
  {
    "task": "Generate a list of Fibonacci numbers up to a specified limit.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FibonacciList {\n    public static List<Integer> generateFibonacciUpToLimit(int limit) {\n        List<Integer> fibonacciList = new ArrayList<>();\n        if (limit < 1) return fibonacciList;\n        \n        fibonacciList.add(0);\n        if (limit == 1) return fibonacciList;\n        \n        fibonacciList.add(1);\n        int a = 0, b = 1;\n        while (true) {\n            int next = a + b;\n            if (next > limit) break;\n            fibonacciList.add(next);\n            a = b;\n            b = next;\n        }\n        return fibonacciList;\n    }\n    \n    public static void main(String[] args) {\n        int limit = 100; // Example limit\n        List<Integer> fibonacciNumbers = generateFibonacciUpToLimit(limit);\n        System.out.println(fibonacciNumbers);\n    }\n}\n```"
  },
  {
    "task": "Create a list of booleans and determine if all are True.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Boolean> booleanList = Arrays.asList(true, true, true);\n        boolean allTrue = booleanList.stream().allMatch(b -> b);\n        System.out.println(\"All are true: \" + allTrue);\n    }\n}\n```"
  },
  {
    "task": "Write a program to concatenate two lists.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ConcatenateLists {\n    public static void main(String[] args) {\n        List<String> list1 = new ArrayList<>();\n        list1.add(\"Apple\");\n        list1.add(\"Banana\");\n        \n        List<String> list2 = new ArrayList<>();\n        list2.add(\"Orange\");\n        list2.add(\"Grape\");\n\n        List<String> concatenatedList = new ArrayList<>(list1);\n        concatenatedList.addAll(list2);\n\n        System.out.println(concatenatedList);\n    }\n}\n```"
  },
  {
    "task": "Implement a function that returns the length of a list without using built-in functions.",
    "code": "```java\nimport java.util.List;\n\npublic class ListLengthCalculator {\n    public static int getListLength(List<?> list) {\n        int length = 0;\n        for (Object item : list) {\n            length++;\n        }\n        return length;\n    }\n}\n```"
  },
  {
    "task": "Create a list of words and find the longest word.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class LongestWordFinder {\n    public static void main(String[] args) {\n        List<String> words = new ArrayList<>();\n        words.add(\"apple\");\n        words.add(\"banana\");\n        words.add(\"strawberry\");\n        words.add(\"orange\");\n        \n        String longestWord = findLongestWord(words);\n        System.out.println(\"The longest word is: \" + longestWord);\n    }\n\n    public static String findLongestWord(List<String> words) {\n        String longestWord = \"\";\n        for (String word : words) {\n            if (word.length() > longestWord.length()) {\n                longestWord = word;\n            }\n        }\n        return longestWord;\n    }\n}\n```"
  },
  {
    "task": "Write a function that takes a list and a predicate function, returning a list of elements that satisfy the predicate.",
    "code": "```java\nimport java.util.List;\nimport java.util.function.Predicate;\nimport java.util.stream.Collectors;\n\npublic class ListFilter {\n    public static <T> List<T> filterList(List<T> list, Predicate<T> predicate) {\n        return list.stream()\n                   .filter(predicate)\n                   .collect(Collectors.toList());\n    }\n}\n```"
  },
  {
    "task": "Generate a list of strings and filter out those with less than 5 characters.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class FilterStrings {\n    public static void main(String[] args) {\n        List<String> strings = List.of(\"apple\", \"dog\", \"banana\", \"cat\", \"elephant\", \"sun\");\n        List<String> filteredStrings = strings.stream()\n                                              .filter(s -> s.length() >= 5)\n                                              .collect(Collectors.toList());\n        System.out.println(filteredStrings);\n    }\n}\n```"
  },
  {
    "task": "Create a list of mixed data types and separate them into lists by type.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Object> mixedList = new ArrayList<>();\n        mixedList.add(\"Hello\");\n        mixedList.add(42);\n        mixedList.add(3.14);\n        mixedList.add(true);\n        mixedList.add(\"World\");\n        \n        List<String> stringList = new ArrayList<>();\n        List<Integer> integerList = new ArrayList<>();\n        List<Double> doubleList = new ArrayList<>();\n        List<Boolean> booleanList = new ArrayList<>();\n        \n        for (Object obj : mixedList) {\n            if (obj instanceof String) {\n                stringList.add((String) obj);\n            } else if (obj instanceof Integer) {\n                integerList.add((Integer) obj);\n            } else if (obj instanceof Double) {\n                doubleList.add((Double) obj);\n            } else if (obj instanceof Boolean) {\n                booleanList.add((Boolean) obj);\n            }\n        }\n        \n        // Lists are separated by type\n        System.out.println(\"Strings: \" + stringList);\n        System.out.println(\"Integers: \" + integerList);\n        System.out.println(\"Doubles: \" + doubleList);\n        System.out.println(\"Booleans: \" + booleanList);\n    }\n}\n```"
  },
  {
    "task": "Write a program to find the common elements between two lists.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class CommonElements {\n    public static void main(String[] args) {\n        List<Integer> list1 = List.of(1, 2, 3, 4, 5);\n        List<Integer> list2 = List.of(3, 4, 5, 6, 7);\n\n        List<Integer> commonElements = findCommonElements(list1, list2);\n        System.out.println(\"Common elements: \" + commonElements);\n    }\n\n    private static List<Integer> findCommonElements(List<Integer> list1, List<Integer> list2) {\n        List<Integer> common = new ArrayList<>();\n        for (Integer element : list1) {\n            if (list2.contains(element)) {\n                common.add(element);\n            }\n        }\n        return common;\n    }\n}\n```"
  },
  {
    "task": "Implement a function to rotate the elements of a list to the left by a given number of steps.",
    "code": "```java\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Collections;\n\npublic class ListRotator {\n\n    public static <T> List<T> rotateLeft(List<T> list, int steps) {\n        if (list == null || list.isEmpty()) {\n            return list;\n        }\n        int size = list.size();\n        int actualSteps = steps % size;\n        List<T> rotatedList = new ArrayList<>(list);\n        Collections.rotate(rotatedList, -actualSteps);\n        return rotatedList;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> list = new ArrayList<>();\n        list.add(1);\n        list.add(2);\n        list.add(3);\n        list.add(4);\n        list.add(5);\n\n        List<Integer> rotatedList = rotateLeft(list, 2);\n        System.out.println(rotatedList);\n    }\n}\n```"
  },
  {
    "task": "Create a list of numbers and find the product of all the elements.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ProductOfList {\n    public static void main(String[] args) {\n        List<Integer> numbers = new ArrayList<>();\n        numbers.add(1);\n        numbers.add(2);\n        numbers.add(3);\n        numbers.add(4);\n        numbers.add(5);\n\n        int product = 1;\n        for (int number : numbers) {\n            product *= number;\n        }\n\n        System.out.println(\"Product of all elements: \" + product);\n    }\n}\n```"
  },
  {
    "task": "Write a function that removes all occurrences of a specified element from a list.",
    "code": "```java\nimport java.util.List;\nimport java.util.Iterator;\n\npublic class ListUtils {\n    public static <T> void removeAllOccurrences(List<T> list, T element) {\n        Iterator<T> iterator = list.iterator();\n        while (iterator.hasNext()) {\n            if (iterator.next().equals(element)) {\n                iterator.remove();\n            }\n        }\n    }\n}\n```"
  },
  {
    "task": "Generate a list of random numbers and find the median value.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Random;\n\npublic class RandomMedian {\n    public static void main(String[] args) {\n        List<Integer> numbers = new ArrayList<>();\n        Random random = new Random();\n        \n        // Generate a list of random numbers\n        for (int i = 0; i < 10; i++) {\n            numbers.add(random.nextInt(100)); // Random numbers between 0 and 99\n        }\n\n        // Sort the list\n        Collections.sort(numbers);\n\n        // Find the median\n        double median;\n        int size = numbers.size();\n        if (size % 2 == 0) {\n            median = (numbers.get(size / 2 - 1) + numbers.get(size / 2)) / 2.0;\n        } else {\n            median = numbers.get(size / 2);\n        }\n\n        System.out.println(\"Numbers: \" + numbers);\n        System.out.println(\"Median: \" + median);\n    }\n}\n```"
  },
  {
    "task": "Create a list of dictionaries and sort them by a specific key.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        ArrayList<HashMap<String, String>> list = new ArrayList<>();\n\n        HashMap<String, String> dict1 = new HashMap<>();\n        dict1.put(\"key\", \"value1\");\n        dict1.put(\"sortKey\", \"2\");\n\n        HashMap<String, String> dict2 = new HashMap<>();\n        dict2.put(\"key\", \"value2\");\n        dict2.put(\"sortKey\", \"1\");\n\n        HashMap<String, String> dict3 = new HashMap<>();\n        dict3.put(\"key\", \"value3\");\n        dict3.put(\"sortKey\", \"3\");\n\n        list.add(dict1);\n        list.add(dict2);\n        list.add(dict3);\n\n        Collections.sort(list, new Comparator<HashMap<String, String>>() {\n            public int compare(HashMap<String, String> o1, HashMap<String, String> o2) {\n                return o1.get(\"sortKey\").compareTo(o2.get(\"sortKey\"));\n            }\n        });\n\n        for (HashMap<String, String> dict : list) {\n            System.out.println(dict);\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a program to split a list into chunks of a specified size.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ListChunker {\n\n    public static <T> List<List<T>> chunkList(List<T> list, int chunkSize) {\n        List<List<T>> chunks = new ArrayList<>();\n        int listSize = list.size();\n        for (int i = 0; i < listSize; i += chunkSize) {\n            int end = Math.min(listSize, i + chunkSize);\n            chunks.add(new ArrayList<>(list.subList(i, end)));\n        }\n        return chunks;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = new ArrayList<>();\n        for (int i = 1; i <= 10; i++) {\n            numbers.add(i);\n        }\n        int chunkSize = 3;\n        List<List<Integer>> chunks = chunkList(numbers, chunkSize);\n        for (List<Integer> chunk : chunks) {\n            System.out.println(chunk);\n        }\n    }\n}\n```"
  },
  {
    "task": "Implement a function that takes a list and returns a dictionary with the frequency of each element.",
    "code": "```java\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class FrequencyCounter {\n    public static Map<Object, Integer> getFrequency(List<Object> list) {\n        Map<Object, Integer> frequencyMap = new HashMap<>();\n        for (Object element : list) {\n            frequencyMap.put(element, frequencyMap.getOrDefault(element, 0) + 1);\n        }\n        return frequencyMap;\n    }\n}\n```"
  },
  {
    "task": "Create a list of integers and replace all negative numbers with zero.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class ReplaceNegatives {\n    public static void main(String[] args) {\n        List<Integer> numbers = new ArrayList<>(Arrays.asList(3, -1, 4, -5, 9, -2));\n        \n        for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i) < 0) {\n                numbers.set(i, 0);\n            }\n        }\n        \n        System.out.println(numbers);\n    }\n}\n```"
  },
  {
    "task": "Write a function that returns the first n elements of a list.",
    "code": "```java\nimport java.util.List;\n\npublic class ListUtils {\n    public static <T> List<T> getFirstNElements(List<T> list, int n) {\n        if (n > list.size()) {\n            n = list.size();\n        }\n        return list.subList(0, n);\n    }\n}\n```"
  },
  {
    "task": "Generate a list of strings and join them into a single string with spaces.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.StringJoiner;\n\npublic class ListUsageExample {\n    public static void main(String[] args) {\n        List<String> stringList = new ArrayList<>();\n        stringList.add(\"Hello\");\n        stringList.add(\"world\");\n        stringList.add(\"from\");\n        stringList.add(\"Java\");\n\n        StringJoiner joiner = new StringJoiner(\" \");\n        for (String s : stringList) {\n            joiner.add(s);\n        }\n        String result = joiner.toString();\n        System.out.println(result);\n    }\n}\n```"
  },
  {
    "task": "Create a list of lists and find the sum of each inner list.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class ListOfListsSum {\n    public static void main(String[] args) {\n        List<List<Integer>> listOfLists = new ArrayList<>();\n        listOfLists.add(Arrays.asList(1, 2, 3));\n        listOfLists.add(Arrays.asList(4, 5, 6));\n        listOfLists.add(Arrays.asList(7, 8, 9));\n\n        for (List<Integer> innerList : listOfLists) {\n            int sum = 0;\n            for (int number : innerList) {\n                sum += number;\n            }\n            System.out.println(\"Sum of inner list: \" + sum);\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a function that finds the second largest number in a list.",
    "code": "```java\nimport java.util.List;\nimport java.util.Collections;\n\npublic class SecondLargestFinder {\n\n    public static Integer findSecondLargest(List<Integer> numbers) {\n        if (numbers == null || numbers.size() < 2) {\n            return null; // not enough elements\n        }\n        \n        Integer first = null;\n        Integer second = null;\n        \n        for (Integer number : numbers) {\n            if (first == null || number > first) {\n                second = first;\n                first = number;\n            } else if ((second == null || number > second) && !number.equals(first)) {\n                second = number;\n            }\n        }\n        \n        return second;\n    }\n}\n```"
  },
  {
    "task": "Generate a list of numbers and remove the duplicates while maintaining order.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.LinkedHashSet;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> numbers = new ArrayList<>();\n        numbers.add(3);\n        numbers.add(1);\n        numbers.add(4);\n        numbers.add(1);\n        numbers.add(5);\n        numbers.add(9);\n        numbers.add(2);\n        numbers.add(6);\n        numbers.add(5);\n\n        List<Integer> uniqueNumbers = new ArrayList<>(new LinkedHashSet<>(numbers));\n\n        for (Integer number : uniqueNumbers) {\n            System.out.println(number);\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a list of integers and partition it into two lists: one with numbers above the average and one below.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class PartitionList {\n    public static void main(String[] args) {\n        List<Integer> numbers = List.of(3, 7, 5, 9, 2, 8, 10);\n        List<Integer> aboveAverage = new ArrayList<>();\n        List<Integer> belowAverage = new ArrayList<>();\n\n        double average = numbers.stream().mapToInt(Integer::intValue).average().orElse(0);\n\n        for (int number : numbers) {\n            if (number > average) {\n                aboveAverage.add(number);\n            } else if (number < average) {\n                belowAverage.add(number);\n            }\n        }\n\n        System.out.println(\"Above Average: \" + aboveAverage);\n        System.out.println(\"Below Average: \" + belowAverage);\n    }\n}\n```"
  },
  {
    "task": "Write a program to find the longest increasing subsequence in a list of numbers.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class LongestIncreasingSubsequence {\n    public static List<Integer> findLongestIncreasingSubsequence(List<Integer> numbers) {\n        if (numbers == null || numbers.isEmpty()) {\n            return new ArrayList<>();\n        }\n        \n        int n = numbers.size();\n        int[] lengths = new int[n];\n        int[] previous = new int[n];\n        int maxLength = 0;\n        int maxIndex = -1;\n\n        for (int i = 0; i < n; i++) {\n            lengths[i] = 1;\n            previous[i] = -1;\n            for (int j = 0; j < i; j++) {\n                if (numbers.get(i) > numbers.get(j) && lengths[i] < lengths[j] + 1) {\n                    lengths[i] = lengths[j] + 1;\n                    previous[i] = j;\n                }\n            }\n            if (maxLength < lengths[i]) {\n                maxLength = lengths[i];\n                maxIndex = i;\n            }\n        }\n\n        List<Integer> lis = new ArrayList<>();\n        for (int i = maxIndex; i >= 0; i = previous[i]) {\n            lis.add(0, numbers.get(i));\n            if (previous[i] == -1) break;\n        }\n        \n        return lis;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = List.of(10, 22, 9, 33, 21, 50, 41, 60);\n        List<Integer> lis = findLongestIncreasingSubsequence(numbers);\n        System.out.println(lis);\n    }\n}\n```"
  },
  {
    "task": "Implement a function to zip two lists into a single list of tuples.",
    "code": "```java\nimport java.util.*;\n\npublic class ListZipper {\n    public static <T, U> List<Tuple<T, U>> zipLists(List<T> list1, List<U> list2) {\n        List<Tuple<T, U>> zippedList = new ArrayList<>();\n        int minSize = Math.min(list1.size(), list2.size());\n        \n        for (int i = 0; i < minSize; i++) {\n            zippedList.add(new Tuple<>(list1.get(i), list2.get(i)));\n        }\n        \n        return zippedList;\n    }\n    \n    public static class Tuple<T, U> {\n        public final T first;\n        public final U second;\n        \n        public Tuple(T first, U second) {\n            this.first = first;\n            this.second = second;\n        }\n    }\n    \n    public static void main(String[] args) {\n        List<Integer> list1 = Arrays.asList(1, 2, 3);\n        List<String> list2 = Arrays.asList(\"a\", \"b\", \"c\");\n        \n        List<Tuple<Integer, String>> zipped = zipLists(list1, list2);\n        for (Tuple<Integer, String> tuple : zipped) {\n            System.out.println(\"(\" + tuple.first + \", \" + tuple.second + \")\");\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a list of characters and count the vowels.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class VowelCounter {\n    public static void main(String[] args) {\n        List<Character> characters = Arrays.asList('a', 'b', 'c', 'e', 'i', 'o', 'u', 'x', 'y', 'z');\n        List<Character> vowels = Arrays.asList('a', 'e', 'i', 'o', 'u');\n        \n        long vowelCount = characters.stream()\n                                    .filter(vowels::contains)\n                                    .count();\n        \n        System.out.println(\"Number of vowels: \" + vowelCount);\n    }\n}\n```"
  },
  {
    "task": "Write a function that returns the last n elements of a list.",
    "code": "```java\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class ListUtil {\n    public static <T> List<T> getLastNElements(List<T> list, int n) {\n        if (list == null || n <= 0) {\n            return new ArrayList<>();\n        }\n        int size = list.size();\n        return list.subList(Math.max(size - n, 0), size);\n    }\n}\n```"
  },
  {
    "task": "Generate a list of numbers and split it into two lists: one with positive numbers and one with negative numbers.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class NumberListSplitter {\n    public static void main(String[] args) {\n        List<Integer> numbers = List.of(3, -2, 7, -5, 0, 9, -8, 4);\n        List<Integer> positiveNumbers = new ArrayList<>();\n        List<Integer> negativeNumbers = new ArrayList<>();\n\n        for (Integer number : numbers) {\n            if (number > 0) {\n                positiveNumbers.add(number);\n            } else if (number < 0) {\n                negativeNumbers.add(number);\n            }\n        }\n\n        System.out.println(\"Positive Numbers: \" + positiveNumbers);\n        System.out.println(\"Negative Numbers: \" + negativeNumbers);\n    }\n}\n```"
  },
  {
    "task": "Create a list of random integers and find the mode.",
    "code": "```java\nimport java.util.*;\n\npublic class ModeFinder {\n    public static void main(String[] args) {\n        List<Integer> numbers = new ArrayList<>();\n        Random random = new Random();\n        \n        // Create a list of random integers\n        for (int i = 0; i < 100; i++) {\n            numbers.add(random.nextInt(100));\n        }\n        \n        // Find the mode\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        for (int number : numbers) {\n            frequencyMap.put(number, frequencyMap.getOrDefault(number, 0) + 1);\n        }\n        \n        int mode = numbers.get(0);\n        int maxCount = 0;\n        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n            if (entry.getValue() > maxCount) {\n                maxCount = entry.getValue();\n                mode = entry.getKey();\n            }\n        }\n        \n        System.out.println(\"Mode: \" + mode);\n    }\n}\n```"
  },
  {
    "task": "Write a program to find the shortest path in a grid using a list to represent the path.",
    "code": "```java\nimport java.util.*;\n\npublic class ShortestPathInGrid {\n    private static class Point {\n        int x, y;\n        Point(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n    }\n    \n    public static List<Point> findShortestPath(int[][] grid) {\n        int rows = grid.length;\n        int cols = grid[0].length;\n        boolean[][] visited = new boolean[rows][cols];\n        Queue<List<Point>> queue = new LinkedList<>();\n        \n        List<Point> startPath = new ArrayList<>();\n        startPath.add(new Point(0, 0));\n        queue.add(startPath);\n        visited[0][0] = true;\n        \n        int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n        \n        while (!queue.isEmpty()) {\n            List<Point> path = queue.poll();\n            Point lastPoint = path.get(path.size() - 1);\n            \n            if (lastPoint.x == rows - 1 && lastPoint.y == cols - 1) {\n                return path;\n            }\n            \n            for (int[] direction : directions) {\n                int newX = lastPoint.x + direction[0];\n                int newY = lastPoint.y + direction[1];\n                \n                if (newX >= 0 && newX < rows && newY >= 0 && newY < cols && \n                    grid[newX][newY] == 0 && !visited[newX][newY]) {\n                    List<Point> newPath = new ArrayList<>(path);\n                    newPath.add(new Point(newX, newY));\n                    queue.add(newPath);\n                    visited[newX][newY] = true;\n                }\n            }\n        }\n        \n        return new ArrayList<>();\n    }\n    \n    public static void main(String[] args) {\n        int[][] grid = {\n            {0, 0, 1, 0},\n            {1, 0, 1, 0},\n            {0, 0, 0, 0},\n            {0, 1, 1, 0}\n        };\n        \n        List<Point> shortestPath = findShortestPath(grid);\n        for (Point point : shortestPath) {\n            System.out.println(\"(\" + point.x + \", \" + point.y + \")\");\n        }\n    }\n}\n```"
  },
  {
    "task": "Implement a function that takes a list and returns a list with elements doubled.",
    "code": "```java\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class ListDoubler {\n\n    public static List<Integer> doubleElements(List<Integer> inputList) {\n        List<Integer> doubledList = new ArrayList<>();\n        for (Integer element : inputList) {\n            doubledList.add(element * 2);\n        }\n        return doubledList;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = List.of(1, 2, 3, 4, 5);\n        List<Integer> result = doubleElements(numbers);\n        System.out.println(result);\n    }\n}\n```"
  },
  {
    "task": "Create a list of integers and sort them in descending order.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> numbers = new ArrayList<>();\n        numbers.add(5);\n        numbers.add(2);\n        numbers.add(9);\n        numbers.add(1);\n        numbers.add(3);\n\n        Collections.sort(numbers, Collections.reverseOrder());\n\n        System.out.println(numbers);\n    }\n}\n```"
  },
  {
    "task": "Write a function that takes a list of intervals and merges overlapping intervals.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\npublic class IntervalMerger {\n    public static List<int[]> mergeIntervals(List<int[]> intervals) {\n        if (intervals == null || intervals.size() <= 1) {\n            return intervals;\n        }\n        \n        // Sort intervals based on the starting value\n        Collections.sort(intervals, Comparator.comparingInt(a -> a[0]));\n        \n        List<int[]> merged = new ArrayList<>();\n        int[] currentInterval = intervals.get(0);\n        merged.add(currentInterval);\n        \n        for (int[] interval : intervals) {\n            int currentEnd = currentInterval[1];\n            int nextStart = interval[0];\n            int nextEnd = interval[1];\n            \n            if (currentEnd >= nextStart) {\n                currentInterval[1] = Math.max(currentEnd, nextEnd);\n            } else {\n                currentInterval = interval;\n                merged.add(currentInterval);\n            }\n        }\n        \n        return merged;\n    }\n\n    public static void main(String[] args) {\n        List<int[]> intervals = Arrays.asList(\n            new int[]{1, 3},\n            new int[]{2, 6},\n            new int[]{8, 10},\n            new int[]{15, 18}\n        );\n        \n        List<int[]> mergedIntervals = mergeIntervals(intervals);\n        \n        for (int[] interval : mergedIntervals) {\n            System.out.println(Arrays.toString(interval));\n        }\n    }\n}\n```"
  },
  {
    "task": "Generate a list of random numbers and find the range (difference between max and min).",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Random;\n\npublic class RandomNumberRange {\n    public static void main(String[] args) {\n        List<Integer> numbers = new ArrayList<>();\n        Random random = new Random();\n        \n        for (int i = 0; i < 10; i++) {\n            numbers.add(random.nextInt(100)); // Generates random numbers between 0 and 99\n        }\n        \n        int max = Collections.max(numbers);\n        int min = Collections.min(numbers);\n        int range = max - min;\n        \n        System.out.println(\"Numbers: \" + numbers);\n        System.out.println(\"Range: \" + range);\n    }\n}\n```"
  },
  {
    "task": "Create a list of strings and remove any that are palindromes.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\n\npublic class RemovePalindromes {\n    public static void main(String[] args) {\n        List<String> strings = new ArrayList<>();\n        strings.add(\"level\");\n        strings.add(\"world\");\n        strings.add(\"deified\");\n        strings.add(\"hello\");\n        strings.add(\"radar\");\n\n        Iterator<String> iterator = strings.iterator();\n        while (iterator.hasNext()) {\n            String s = iterator.next();\n            if (isPalindrome(s)) {\n                iterator.remove();\n            }\n        }\n\n        System.out.println(strings);\n    }\n\n    private static boolean isPalindrome(String s) {\n        int left = 0;\n        int right = s.length() - 1;\n        while (left < right) {\n            if (s.charAt(left) != s.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}\n```"
  },
  {
    "task": "Write a program to cyclically permute the elements of a list.",
    "code": "```java\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Collections;\n\npublic class CyclicPermute {\n    public static void main(String[] args) {\n        List<Integer> list = new ArrayList<>();\n        list.add(1);\n        list.add(2);\n        list.add(3);\n        list.add(4);\n        \n        cyclicPermute(list);\n        System.out.println(list);\n    }\n\n    public static <T> void cyclicPermute(List<T> list) {\n        if (list.size() > 1) {\n            T lastElement = list.remove(list.size() - 1);\n            list.add(0, lastElement);\n        }\n    }\n}\n```"
  },
  {
    "task": "Implement a function to create a list of cumulative sums from a list of numbers.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class CumulativeSum {\n\n    public static List<Integer> cumulativeSums(List<Integer> numbers) {\n        List<Integer> cumulativeList = new ArrayList<>();\n        int sum = 0;\n        for (int number : numbers) {\n            sum += number;\n            cumulativeList.add(sum);\n        }\n        return cumulativeList;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = List.of(1, 2, 3, 4, 5);\n        List<Integer> result = cumulativeSums(numbers);\n        System.out.println(result);\n    }\n}\n```"
  },
  {
    "task": "Create a list of numbers and shift all zeros to the end.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ShiftZeros {\n    public static void main(String[] args) {\n        List<Integer> numbers = new ArrayList<>();\n        numbers.add(0);\n        numbers.add(1);\n        numbers.add(0);\n        numbers.add(3);\n        numbers.add(12);\n\n        shiftZerosToEnd(numbers);\n\n        System.out.println(numbers);\n    }\n\n    public static void shiftZerosToEnd(List<Integer> numbers) {\n        int insertPos = 0;\n        for (int num : numbers) {\n            if (num != 0) {\n                numbers.set(insertPos++, num);\n            }\n        }\n        while (insertPos < numbers.size()) {\n            numbers.set(insertPos++, 0);\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a program to simulate a queue using a list.",
    "code": "```java\nimport java.util.LinkedList;\nimport java.util.List;\n\npublic class QueueSimulation {\n    private List<Integer> queue;\n\n    public QueueSimulation() {\n        queue = new LinkedList<>();\n    }\n\n    public void enqueue(int item) {\n        queue.add(item);\n    }\n\n    public int dequeue() {\n        if (queue.isEmpty()) {\n            throw new IllegalStateException(\"Queue is empty\");\n        }\n        return queue.remove(0);\n    }\n\n    public int peek() {\n        if (queue.isEmpty()) {\n            throw new IllegalStateException(\"Queue is empty\");\n        }\n        return queue.get(0);\n    }\n\n    public boolean isEmpty() {\n        return queue.isEmpty();\n    }\n\n    public static void main(String[] args) {\n        QueueSimulation queue = new QueueSimulation();\n        queue.enqueue(1);\n        queue.enqueue(2);\n        queue.enqueue(3);\n\n        System.out.println(\"Peek: \" + queue.peek());\n        System.out.println(\"Dequeue: \" + queue.dequeue());\n        System.out.println(\"Dequeue: \" + queue.dequeue());\n        System.out.println(\"IsEmpty: \" + queue.isEmpty());\n    }\n}\n```"
  },
  {
    "task": "Generate a list of numbers and identify all prime numbers.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class PrimeNumbers {\n    public static void main(String[] args) {\n        List<Integer> numbers = generateNumbers(100);\n        List<Integer> primeNumbers = findPrimeNumbers(numbers);\n        System.out.println(primeNumbers);\n    }\n\n    public static List<Integer> generateNumbers(int limit) {\n        List<Integer> numbers = new ArrayList<>();\n        for (int i = 2; i <= limit; i++) {\n            numbers.add(i);\n        }\n        return numbers;\n    }\n\n    public static List<Integer> findPrimeNumbers(List<Integer> numbers) {\n        List<Integer> primeNumbers = new ArrayList<>();\n        for (Integer number : numbers) {\n            if (isPrime(number)) {\n                primeNumbers.add(number);\n            }\n        }\n        return primeNumbers;\n    }\n\n    public static boolean isPrime(int number) {\n        if (number <= 1) return false;\n        for (int i = 2; i <= Math.sqrt(number); i++) {\n            if (number % i == 0) return false;\n        }\n        return true;\n    }\n}\n```"
  },
  {
    "task": "Create a list of strings and group them by their starting letter.",
    "code": "```java\nimport java.util.*;\n\npublic class GroupStringsByStartingLetter {\n    public static void main(String[] args) {\n        List<String> strings = Arrays.asList(\"apple\", \"apricot\", \"banana\", \"blueberry\", \"cherry\", \"cranberry\");\n        Map<Character, List<String>> groupedStrings = new HashMap<>();\n\n        for (String str : strings) {\n            char initial = str.charAt(0);\n            groupedStrings.computeIfAbsent(initial, k -> new ArrayList<>()).add(str);\n        }\n\n        for (Map.Entry<Character, List<String>> entry : groupedStrings.entrySet()) {\n            System.out.println(entry.getKey() + \": \" + entry.getValue());\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a function that takes a list and returns a new list with all elements squared.",
    "code": "```java\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class ListUtils {\n    public static List<Integer> squareElements(List<Integer> inputList) {\n        List<Integer> squaredList = new ArrayList<>();\n        for (Integer number : inputList) {\n            squaredList.add(number * number);\n        }\n        return squaredList;\n    }\n}\n```"
  },
  {
    "task": "Generate a list of timestamps and find the time difference between consecutive elements.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\n\npublic class TimestampDifference {\n\n    public static void main(String[] args) {\n        List<Long> timestamps = new ArrayList<>();\n        \n        // Simulating timestamp generation\n        timestamps.add(System.currentTimeMillis());\n        try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); }\n        timestamps.add(System.currentTimeMillis());\n        try { Thread.sleep(2000); } catch (InterruptedException e) { e.printStackTrace(); }\n        timestamps.add(System.currentTimeMillis());\n        \n        // Finding the time difference between consecutive timestamps\n        List<Long> differences = new ArrayList<>();\n        for (int i = 1; i < timestamps.size(); i++) {\n            long diff = timestamps.get(i) - timestamps.get(i - 1);\n            differences.add(diff);\n        }\n        \n        // Output the differences\n        for (Long difference : differences) {\n            System.out.println(\"Difference: \" + TimeUnit.MILLISECONDS.toSeconds(difference) + \" seconds\");\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a list of numbers and rotate it such that the smallest number is first.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class RotateList {\n    public static void main(String[] args) {\n        List<Integer> numbers = new ArrayList<>();\n        numbers.add(4);\n        numbers.add(2);\n        numbers.add(3);\n        numbers.add(1);\n        numbers.add(5);\n\n        rotateListToSmallestFirst(numbers);\n\n        System.out.println(numbers);\n    }\n\n    public static void rotateListToSmallestFirst(List<Integer> list) {\n        if (list == null || list.isEmpty()) {\n            return;\n        }\n        int minIndex = list.indexOf(Collections.min(list));\n        Collections.rotate(list, -minIndex);\n    }\n}\n```"
  },
  {
    "task": "Write a program to find all unique pairs in a list that sum up to a specific target.",
    "code": "```java\nimport java.util.*;\n\npublic class UniquePairsSum {\n    public static List<List<Integer>> findUniquePairs(List<Integer> numbers, int target) {\n        Set<List<Integer>> uniquePairs = new HashSet<>();\n        Map<Integer, Integer> complements = new HashMap<>();\n\n        for (int number : numbers) {\n            int complement = target - number;\n            if (complements.containsKey(complement) && complements.get(complement) > 0) {\n                List<Integer> pair = Arrays.asList(complement, number);\n                Collections.sort(pair);\n                uniquePairs.add(pair);\n                complements.put(complement, complements.get(complement) - 1);\n            } else {\n                complements.put(number, complements.getOrDefault(number, 0) + 1);\n            }\n        }\n\n        return new ArrayList<>(uniquePairs);\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 3, 2, 1);\n        int target = 5;\n        List<List<Integer>> result = findUniquePairs(numbers, target);\n        for (List<Integer> pair : result) {\n            System.out.println(pair);\n        }\n    }\n}\n```"
  },
  {
    "task": "Implement a function that returns true if a list contains a cycle.",
    "code": "```java\nimport java.util.List;\n\npublic class CycleDetector {\n    public static boolean containsCycle(List<?> list) {\n        if (list == null || list.isEmpty()) {\n            return false;\n        }\n\n        ListNode slow = new ListNode(null);\n        ListNode fast = new ListNode(null);\n\n        slow.next = fast.next = createLinkedListFromList(list);\n\n        while (fast != null && fast.next != null) {\n            slow = slow.next;\n            fast = fast.next.next;\n            if (slow == fast) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private static ListNode createLinkedListFromList(List<?> list) {\n        ListNode dummy = new ListNode(null);\n        ListNode current = dummy;\n        for (Object item : list) {\n            current.next = new ListNode(item);\n            current = current.next;\n        }\n        return dummy.next;\n    }\n    \n    static class ListNode {\n        Object value;\n        ListNode next;\n        \n        ListNode(Object value) {\n            this.value = value;\n            this.next = null;\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a list of numbers and find the contiguous subarray with the maximum sum.",
    "code": "```java\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class MaxSubarraySum {\n    public static int maxSubArray(List<Integer> nums) {\n        int maxSoFar = nums.get(0);\n        int maxEndingHere = nums.get(0);\n\n        for (int i = 1; i < nums.size(); i++) {\n            maxEndingHere = Math.max(nums.get(i), maxEndingHere + nums.get(i));\n            maxSoFar = Math.max(maxSoFar, maxEndingHere);\n        }\n\n        return maxSoFar;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(-2, 1, -3, 4, -1, 2, 1, -5, 4);\n        int maxSum = maxSubArray(numbers);\n        System.out.println(\"Maximum subarray sum: \" + maxSum);\n    }\n}\n```"
  },
  {
    "task": "Write a function that takes a list and a number, and finds two numbers in the list that sum to the given number.",
    "code": "```java\nimport java.util.*;\n\npublic class SumFinder {\n    public static List<Integer> findTwoNumbers(List<Integer> numbers, int target) {\n        Set<Integer> seen = new HashSet<>();\n        for (int num : numbers) {\n            int complement = target - num;\n            if (seen.contains(complement)) {\n                return Arrays.asList(complement, num);\n            }\n            seen.add(num);\n        }\n        return new ArrayList<>(); // return an empty list if no pair is found\n    }\n}\n```"
  },
  {
    "task": "Generate a list of even numbers and filter out those that are greater than a specific value.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class EvenNumberFilter {\n    public static void main(String[] args) {\n        List<Integer> numbers = new ArrayList<>();\n        for (int i = 0; i <= 50; i += 2) {\n            numbers.add(i);\n        }\n\n        int specificValue = 20;\n        List<Integer> filteredNumbers = numbers.stream()\n                                               .filter(num -> num <= specificValue)\n                                               .collect(Collectors.toList());\n\n        System.out.println(filteredNumbers);\n    }\n}\n```"
  },
  {
    "task": "Create a list of characters and reverse the vowels only.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ReverseVowels {\n    public static void main(String[] args) {\n        List<Character> charList = new ArrayList<>();\n        charList.add('h');\n        charList.add('e');\n        charList.add('l');\n        charList.add('l');\n        charList.add('o');\n\n        reverseVowels(charList);\n\n        for (char c : charList) {\n            System.out.print(c);\n        }\n    }\n\n    public static void reverseVowels(List<Character> charList) {\n        List<Integer> vowelIndices = new ArrayList<>();\n        List<Character> vowels = new ArrayList<>();\n\n        for (int i = 0; i < charList.size(); i++) {\n            char c = charList.get(i);\n            if (isVowel(c)) {\n                vowelIndices.add(i);\n                vowels.add(c);\n            }\n        }\n\n        for (int i = 0; i < vowels.size() / 2; i++) {\n            char temp = vowels.get(i);\n            vowels.set(i, vowels.get(vowels.size() - 1 - i));\n            vowels.set(vowels.size() - 1 - i, temp);\n        }\n\n        for (int i = 0; i < vowelIndices.size(); i++) {\n            charList.set(vowelIndices.get(i), vowels.get(i));\n        }\n    }\n\n    public static boolean isVowel(char c) {\n        return \"aeiouAEIOU\".indexOf(c) != -1;\n    }\n}\n```"
  },
  {
    "task": "Write a program to find all permutations of a list of elements.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Permutations {\n    public static void main(String[] args) {\n        List<Integer> elements = List.of(1, 2, 3);\n        List<List<Integer>> result = new ArrayList<>();\n        permute(elements, 0, result);\n        System.out.println(result);\n    }\n\n    private static void permute(List<Integer> elements, int start, List<List<Integer>> result) {\n        if (start == elements.size() - 1) {\n            result.add(new ArrayList<>(elements));\n            return;\n        }\n        for (int i = start; i < elements.size(); i++) {\n            List<Integer> newElements = new ArrayList<>(elements);\n            swap(newElements, start, i);\n            permute(newElements, start + 1, result);\n        }\n    }\n\n    private static void swap(List<Integer> list, int i, int j) {\n        Integer temp = list.get(i);\n        list.set(i, list.get(j));\n        list.set(j, temp);\n    }\n}\n```"
  },
  {
    "task": "Implement a function that takes a list and returns the most frequently occurring element.",
    "code": "```java\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class MostFrequentElement {\n\n    public static <T> T findMostFrequent(List<T> list) {\n        Map<T, Integer> frequencyMap = new HashMap<>();\n        for (T item : list) {\n            frequencyMap.put(item, frequencyMap.getOrDefault(item, 0) + 1);\n        }\n        T mostFrequent = null;\n        int maxCount = 0;\n        for (Map.Entry<T, Integer> entry : frequencyMap.entrySet()) {\n            if (entry.getValue() > maxCount) {\n                mostFrequent = entry.getKey();\n                maxCount = entry.getValue();\n            }\n        }\n        return mostFrequent;\n    }\n}\n```"
  },
  {
    "task": "Create a list of numbers and calculate the variance.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class VarianceCalculator {\n    public static void main(String[] args) {\n        List<Double> numbers = new ArrayList<>();\n        numbers.add(5.0);\n        numbers.add(10.0);\n        numbers.add(15.0);\n        numbers.add(20.0);\n        \n        double mean = calculateMean(numbers);\n        double variance = calculateVariance(numbers, mean);\n        \n        System.out.println(\"Variance: \" + variance);\n    }\n    \n    private static double calculateMean(List<Double> numbers) {\n        double sum = 0.0;\n        for (Double number : numbers) {\n            sum += number;\n        }\n        return sum / numbers.size();\n    }\n    \n    private static double calculateVariance(List<Double> numbers, double mean) {\n        double sumSquareDiffs = 0.0;\n        for (Double number : numbers) {\n            double diff = number - mean;\n            sumSquareDiffs += diff * diff;\n        }\n        return sumSquareDiffs / numbers.size();\n    }\n}\n```"
  },
  {
    "task": "Write a function to concatenate a list of lists into a single list.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ListConcatenator {\n    public static <T> List<T> concatenateLists(List<List<T>> listOfLists) {\n        List<T> result = new ArrayList<>();\n        for (List<T> list : listOfLists) {\n            result.addAll(list);\n        }\n        return result;\n    }\n}\n```"
  },
  {
    "task": "Generate a list of numbers and replace each element with the product of all other elements.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);\n        List<Integer> result = new ArrayList<>();\n\n        for (int i = 0; i < numbers.size(); i++) {\n            int product = 1;\n            for (int j = 0; j < numbers.size(); j++) {\n                if (i != j) {\n                    product *= numbers.get(j);\n                }\n            }\n            result.add(product);\n        }\n\n        System.out.println(result);\n    }\n}\n```"
  },
  {
    "task": "Create a list of strings and find the common prefix.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class CommonPrefixFinder {\n    public static void main(String[] args) {\n        List<String> strings = new ArrayList<>();\n        strings.add(\"flower\");\n        strings.add(\"flow\");\n        strings.add(\"flight\");\n\n        String commonPrefix = findCommonPrefix(strings);\n        System.out.println(\"Common Prefix: \" + commonPrefix);\n    }\n\n    public static String findCommonPrefix(List<String> strings) {\n        if (strings == null || strings.isEmpty()) {\n            return \"\";\n        }\n\n        String prefix = strings.get(0);\n        for (int i = 1; i < strings.size(); i++) {\n            while (strings.get(i).indexOf(prefix) != 0) {\n                prefix = prefix.substring(0, prefix.length() - 1);\n                if (prefix.isEmpty()) {\n                    return \"\";\n                }\n            }\n        }\n        return prefix;\n    }\n}\n```"
  },
  {
    "task": "Write a program to partition a list into two lists based on a predicate function.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.function.Predicate;\n\npublic class ListPartitioner {\n    public static <T> List<List<T>> partitionList(List<T> list, Predicate<T> predicate) {\n        List<T> trueList = new ArrayList<>();\n        List<T> falseList = new ArrayList<>();\n        \n        for (T item : list) {\n            if (predicate.test(item)) {\n                trueList.add(item);\n            } else {\n                falseList.add(item);\n            }\n        }\n        \n        List<List<T>> partitionedLists = new ArrayList<>();\n        partitionedLists.add(trueList);\n        partitionedLists.add(falseList);\n        \n        return partitionedLists;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = List.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n        Predicate<Integer> isEven = n -> n % 2 == 0;\n        \n        List<List<Integer>> partitioned = partitionList(numbers, isEven);\n        \n        System.out.println(\"Even numbers: \" + partitioned.get(0));\n        System.out.println(\"Odd numbers: \" + partitioned.get(1));\n    }\n}\n```"
  },
  {
    "task": "Implement a function to find the kth smallest element in a list.",
    "code": "```java\nimport java.util.Collections;\nimport java.util.List;\n\npublic class KthSmallestElementFinder {\n    public static <T extends Comparable<T>> T findKthSmallest(List<T> list, int k) {\n        Collections.sort(list);\n        return list.get(k - 1);\n    }\n}\n```"
  },
  {
    "task": "Create a list of integers and find the length of the longest contiguous sequence.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class LongestContiguousSequence {\n    public static void main(String[] args) {\n        List<Integer> numbers = new ArrayList<>();\n        numbers.add(1);\n        numbers.add(2);\n        numbers.add(2);\n        numbers.add(3);\n        numbers.add(4);\n        numbers.add(4);\n        numbers.add(5);\n\n        int maxLength = 0;\n        int currentLength = 1;\n\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) == numbers.get(i - 1)) {\n                currentLength++;\n            } else {\n                maxLength = Math.max(maxLength, currentLength);\n                currentLength = 1;\n            }\n        }\n        maxLength = Math.max(maxLength, currentLength);\n\n        System.out.println(\"Length of the longest contiguous sequence: \" + maxLength);\n    }\n}\n```"
  },
  {
    "task": "Write a function that rotates elements in a list while maintaining the relative order of non-rotated elements.",
    "code": "```java\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class ListRotator {\n    public static <T> void rotateList(List<T> list, int k) {\n        if (list == null || list.isEmpty() || k <= 0) {\n            return;\n        }\n        int n = list.size();\n        k = k % n;\n        List<T> rotatedPart = new ArrayList<>(list.subList(n - k, n));\n        List<T> nonRotatedPart = new ArrayList<>(list.subList(0, n - k));\n        list.clear();\n        list.addAll(rotatedPart);\n        list.addAll(nonRotatedPart);\n    }\n    \n    public static void main(String[] args) {\n        List<Integer> list = new ArrayList<>();\n        list.add(1);\n        list.add(2);\n        list.add(3);\n        list.add(4);\n        list.add(5);\n        \n        rotateList(list, 2);\n        \n        for (Integer i : list) {\n            System.out.print(i + \" \");\n        }\n    }\n}\n```"
  },
  {
    "task": "Generate a list of random numbers and sort them while maintaining the original index positions.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\nimport java.util.Random;\n\npublic class RandomNumberList {\n    public static void main(String[] args) {\n        List<IndexedNumber> numbers = new ArrayList<>();\n        Random random = new Random();\n        \n        // Generate a list of random numbers\n        for (int i = 0; i < 10; i++) {\n            numbers.add(new IndexedNumber(random.nextInt(100), i));\n        }\n        \n        // Sort the list while maintaining original index positions\n        Collections.sort(numbers, Comparator.comparingInt(IndexedNumber::getNumber));\n        \n        // Print the sorted numbers along with their original indices\n        for (IndexedNumber number : numbers) {\n            System.out.println(\"Index: \" + number.getIndex() + \", Number: \" + number.getNumber());\n        }\n    }\n}\n\nclass IndexedNumber {\n    private final int number;\n    private final int index;\n\n    public IndexedNumber(int number, int index) {\n        this.number = number;\n        this.index = index;\n    }\n\n    public int getNumber() {\n        return number;\n    }\n\n    public int getIndex() {\n        return index;\n    }\n}\n```"
  },
  {
    "task": "Create a list of numbers and find all subsets that sum up to a specific target.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class SubsetSum {\n    public static void main(String[] args) {\n        List<Integer> numbers = List.of(1, 2, 3, 4, 5);\n        int targetSum = 5;\n        List<List<Integer>> result = findSubsetsThatSumToTarget(numbers, targetSum);\n        System.out.println(result);\n    }\n\n    public static List<List<Integer>> findSubsetsThatSumToTarget(List<Integer> numbers, int targetSum) {\n        List<List<Integer>> result = new ArrayList<>();\n        findSubsets(numbers, targetSum, 0, new ArrayList<>(), result);\n        return result;\n    }\n\n    private static void findSubsets(List<Integer> numbers, int targetSum, int index, List<Integer> current, List<List<Integer>> result) {\n        if (targetSum == 0) {\n            result.add(new ArrayList<>(current));\n            return;\n        }\n        if (targetSum < 0 || index == numbers.size()) {\n            return;\n        }\n        findSubsets(numbers, targetSum, index + 1, current, result);\n        current.add(numbers.get(index));\n        findSubsets(numbers, targetSum - numbers.get(index), index + 1, current, result);\n        current.remove(current.size() - 1);\n    }\n}\n```"
  },
  {
    "task": "Write a program to simulate a stack using a list.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class StackSimulation {\n    private List<Integer> stack;\n\n    public StackSimulation() {\n        stack = new ArrayList<>();\n    }\n\n    public void push(int value) {\n        stack.add(value);\n    }\n\n    public int pop() {\n        if (isEmpty()) {\n            throw new IllegalStateException(\"Stack is empty\");\n        }\n        return stack.remove(stack.size() - 1);\n    }\n\n    public int peek() {\n        if (isEmpty()) {\n            throw new IllegalStateException(\"Stack is empty\");\n        }\n        return stack.get(stack.size() - 1);\n    }\n\n    public boolean isEmpty() {\n        return stack.isEmpty();\n    }\n\n    public static void main(String[] args) {\n        StackSimulation stack = new StackSimulation();\n        stack.push(10);\n        stack.push(20);\n        stack.push(30);\n        System.out.println(stack.peek()); // 30\n        System.out.println(stack.pop());  // 30\n        System.out.println(stack.pop());  // 20\n        System.out.println(stack.isEmpty()); // false\n        System.out.println(stack.pop());  // 10\n        System.out.println(stack.isEmpty()); // true\n    }\n}\n```"
  }
]