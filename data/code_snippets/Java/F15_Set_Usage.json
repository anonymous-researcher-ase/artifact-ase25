[
  {
    "task": "Create a set to store unique usernames and demonstrate adding new ones.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class UniqueUsernames {\n    public static void main(String[] args) {\n        Set<String> usernames = new HashSet<>();\n        \n        // Adding new usernames\n        usernames.add(\"user1\");\n        usernames.add(\"user2\");\n        usernames.add(\"user3\");\n        \n        // Attempt to add duplicate username\n        usernames.add(\"user1\");\n        \n        // Displaying the usernames\n        for (String username : usernames) {\n            System.out.println(username);\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a function that returns the union of two sets of integers.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class SetUnion {\n    public static Set<Integer> union(Set<Integer> set1, Set<Integer> set2) {\n        Set<Integer> result = new HashSet<>(set1);\n        result.addAll(set2);\n        return result;\n    }\n}\n```"
  },
  {
    "task": "Given two sets of strings, find their intersection.",
    "code": "```java\nimport java.util.Set;\nimport java.util.HashSet;\n\npublic class SetIntersection {\n    public static Set<String> findIntersection(Set<String> set1, Set<String> set2) {\n        Set<String> intersection = new HashSet<>(set1);\n        intersection.retainAll(set2);\n        return intersection;\n    }\n\n    public static void main(String[] args) {\n        Set<String> set1 = new HashSet<>();\n        set1.add(\"apple\");\n        set1.add(\"banana\");\n        set1.add(\"cherry\");\n\n        Set<String> set2 = new HashSet<>();\n        set2.add(\"banana\");\n        set2.add(\"dragonfruit\");\n        set2.add(\"cherry\");\n\n        Set<String> intersection = findIntersection(set1, set2);\n        System.out.println(intersection);\n    }\n}\n```"
  },
  {
    "task": "Implement a set to track visited web pages and check if a page has been visited.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class WebPageTracker {\n    private Set<String> visitedPages;\n\n    public WebPageTracker() {\n        visitedPages = new HashSet<>();\n    }\n\n    public void visitPage(String url) {\n        visitedPages.add(url);\n    }\n\n    public boolean hasVisited(String url) {\n        return visitedPages.contains(url);\n    }\n\n    public static void main(String[] args) {\n        WebPageTracker tracker = new WebPageTracker();\n        tracker.visitPage(\"https://example.com\");\n        System.out.println(tracker.hasVisited(\"https://example.com\")); // true\n        System.out.println(tracker.hasVisited(\"https://anotherpage.com\")); // false\n    }\n}\n```"
  },
  {
    "task": "Create a set from a list of numbers and remove duplicates.",
    "code": "```java\nimport java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 2, 3, 4, 4, 5);\n        Set<Integer> uniqueNumbers = new HashSet<>(numbers);\n        \n        System.out.println(uniqueNumbers);\n    }\n}\n```"
  },
  {
    "task": "Check if a set is a subset of another set.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class SubsetCheck {\n    public static void main(String[] args) {\n        Set<Integer> set1 = new HashSet<>();\n        set1.add(1);\n        set1.add(2);\n        set1.add(3);\n\n        Set<Integer> set2 = new HashSet<>();\n        set2.add(2);\n        set2.add(3);\n\n        boolean isSubset = set1.containsAll(set2);\n        System.out.println(\"Set2 is a subset of Set1: \" + isSubset);\n    }\n}\n```"
  },
  {
    "task": "Demonstrate adding and removing elements from a set of book titles.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class BookSetDemo {\n    public static void main(String[] args) {\n        Set<String> bookTitles = new HashSet<>();\n\n        // Add book titles to the set\n        bookTitles.add(\"To Kill a Mockingbird\");\n        bookTitles.add(\"1984\");\n        bookTitles.add(\"The Great Gatsby\");\n        bookTitles.add(\"The Catcher in the Rye\");\n\n        // Remove a book title from the set\n        bookTitles.remove(\"1984\");\n\n        // Display the book titles in the set\n        for (String title : bookTitles) {\n            System.out.println(title);\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a set and show how to clear all its elements.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class Main {\n    public static void main(String[] args) {\n        Set<String> mySet = new HashSet<>();\n        mySet.add(\"Element1\");\n        mySet.add(\"Element2\");\n        mySet.add(\"Element3\");\n        \n        // Clearing all elements from the set\n        mySet.clear();\n        \n        System.out.println(\"Set size after clearing: \" + mySet.size());\n    }\n}\n```"
  },
  {
    "task": "Write a program to find the difference between two sets of employee IDs.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class EmployeeIDDifference {\n    public static void main(String[] args) {\n        Set<Integer> set1 = new HashSet<>();\n        Set<Integer> set2 = new HashSet<>();\n        \n        // Example employee IDs\n        set1.add(101);\n        set1.add(102);\n        set1.add(103);\n        \n        set2.add(102);\n        set2.add(104);\n        \n        // Find the difference between set1 and set2\n        Set<Integer> difference = new HashSet<>(set1);\n        difference.removeAll(set2);\n        \n        // Output the difference\n        System.out.println(\"Difference between set1 and set2: \" + difference);\n    }\n}\n```"
  },
  {
    "task": "Implement a set to store unique email addresses and check membership.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class EmailSet {\n    private Set<String> emailSet;\n\n    public EmailSet() {\n        emailSet = new HashSet<>();\n    }\n\n    public void addEmail(String email) {\n        emailSet.add(email);\n    }\n\n    public boolean containsEmail(String email) {\n        return emailSet.contains(email);\n    }\n\n    public static void main(String[] args) {\n        EmailSet emailSet = new EmailSet();\n        emailSet.addEmail(\"example@example.com\");\n        System.out.println(emailSet.containsEmail(\"example@example.com\")); // true\n        System.out.println(emailSet.containsEmail(\"not_in_set@example.com\")); // false\n    }\n}\n```"
  },
  {
    "task": "Use a set to determine if two lists have any common elements.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\npublic class CommonElementsChecker {\n    public static boolean haveCommonElements(List<?> list1, List<?> list2) {\n        Set<Object> set = new HashSet<>(list1);\n        for (Object elem : list2) {\n            if (set.contains(elem)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n```"
  },
  {
    "task": "Create a set to represent a group of students and update it with new entries.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class StudentGroup {\n    public static void main(String[] args) {\n        Set<String> students = new HashSet<>();\n        \n        // Add initial students\n        students.add(\"Alice\");\n        students.add(\"Bob\");\n        students.add(\"Charlie\");\n        \n        // Update with new entries\n        students.add(\"David\");\n        students.add(\"Eve\");\n        \n        // Print the set of students\n        System.out.println(students);\n    }\n}\n```"
  },
  {
    "task": "Write a function to find symmetric difference between two sets of colors.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class SymmetricDifference {\n\n    public static Set<String> findSymmetricDifference(Set<String> set1, Set<String> set2) {\n        Set<String> result = new HashSet<>(set1);\n        Set<String> temp = new HashSet<>(set2);\n\n        result.removeAll(set2);\n        temp.removeAll(set1);\n        result.addAll(temp);\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Set<String> colors1 = new HashSet<>();\n        colors1.add(\"red\");\n        colors1.add(\"green\");\n        colors1.add(\"blue\");\n\n        Set<String> colors2 = new HashSet<>();\n        colors2.add(\"yellow\");\n        colors2.add(\"green\");\n        colors2.add(\"blue\");\n\n        Set<String> symmetricDifference = findSymmetricDifference(colors1, colors2);\n        System.out.println(symmetricDifference);\n    }\n}\n```"
  },
  {
    "task": "Implement a set to store unique product codes and demonstrate iteration over it.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class UniqueProductCodes {\n    public static void main(String[] args) {\n        Set<String> productCodes = new HashSet<>();\n\n        // Adding product codes\n        productCodes.add(\"P123\");\n        productCodes.add(\"P456\");\n        productCodes.add(\"P789\");\n        productCodes.add(\"P123\"); // Duplicate, will not be added\n\n        // Iterating over the set\n        for (String code : productCodes) {\n            System.out.println(code);\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a set and demonstrate the use of the `discard` method.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class SetUsageExample {\n    public static void main(String[] args) {\n        Set<String> mySet = new HashSet<>();\n        mySet.add(\"apple\");\n        mySet.add(\"banana\");\n        mySet.add(\"orange\");\n\n        mySet.remove(\"banana\"); // Discard equivalent in Java\n        \n        System.out.println(mySet);\n    }\n}\n```"
  },
  {
    "task": "Given a list of numbers, create a set and check if a specific number is present.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\npublic class NumberSetChecker {\n\n    public static boolean isNumberPresent(List<Integer> numbers, int target) {\n        Set<Integer> numberSet = new HashSet<>(numbers);\n        return numberSet.contains(target);\n    }\n\n    public static void main(String[] args) {\n        List<Integer> numbers = List.of(1, 2, 3, 4, 5);\n        int target = 3;\n        boolean isPresent = isNumberPresent(numbers, target);\n        System.out.println(\"Is the number present? \" + isPresent);\n    }\n}\n```"
  },
  {
    "task": "Use a set to find all unique words in a sentence.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class UniqueWordsFinder {\n    public static void main(String[] args) {\n        String sentence = \"This is a sample sentence with sample words in this sentence\";\n        String[] words = sentence.split(\"\\\\s+\");\n        Set<String> uniqueWords = new HashSet<>();\n\n        for (String word : words) {\n            uniqueWords.add(word);\n        }\n\n        System.out.println(\"Unique words: \" + uniqueWords);\n    }\n}\n```"
  },
  {
    "task": "Create a set from a sequence of characters and demonstrate set operations.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class CharacterSetDemo {\n    public static void main(String[] args) {\n        // Create a set from a sequence of characters\n        String sequence = \"charactersequence\";\n        Set<Character> charSet = new HashSet<>();\n        \n        for (char c : sequence.toCharArray()) {\n            charSet.add(c);\n        }\n\n        // Demonstrate set operations\n        // Add an element\n        charSet.add('x');\n\n        // Remove an element\n        charSet.remove('a');\n\n        // Check if an element exists\n        boolean hasC = charSet.contains('c');\n\n        // Print the set\n        System.out.println(\"Character Set: \" + charSet);\n        System.out.println(\"Contains 'c': \" + hasC);\n    }\n}\n```"
  },
  {
    "task": "Write a function to merge two sets and return the result.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class SetMerger {\n    public static <T> Set<T> mergeSets(Set<T> set1, Set<T> set2) {\n        Set<T> resultSet = new HashSet<>(set1);\n        resultSet.addAll(set2);\n        return resultSet;\n    }\n}\n```"
  },
  {
    "task": "Implement a set to hold unique IP addresses and demonstrate basic operations.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class UniqueIPAddresses {\n    public static void main(String[] args) {\n        Set<String> ipAddresses = new HashSet<>();\n\n        // Adding IP addresses\n        ipAddresses.add(\"192.168.0.1\");\n        ipAddresses.add(\"10.0.0.1\");\n        ipAddresses.add(\"172.16.0.1\");\n        ipAddresses.add(\"192.168.0.1\"); // Duplicate, will not be added\n\n        // Display all unique IP addresses\n        System.out.println(\"Unique IP Addresses:\");\n        for (String ip : ipAddresses) {\n            System.out.println(ip);\n        }\n\n        // Check if a specific IP address is in the set\n        String ipToCheck = \"10.0.0.1\";\n        if (ipAddresses.contains(ipToCheck)) {\n            System.out.println(ipToCheck + \" is in the set.\");\n        } else {\n            System.out.println(ipToCheck + \" is not in the set.\");\n        }\n\n        // Remove an IP address\n        ipAddresses.remove(\"172.16.0.1\");\n\n        // Display the set after removal\n        System.out.println(\"IP Addresses after removal:\");\n        for (String ip : ipAddresses) {\n            System.out.println(ip);\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a set and demonstrate how to find the size of the set.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class Main {\n    public static void main(String[] args) {\n        Set<String> mySet = new HashSet<>();\n        mySet.add(\"apple\");\n        mySet.add(\"banana\");\n        mySet.add(\"cherry\");\n\n        int size = mySet.size();\n        System.out.println(\"Size of the set: \" + size);\n    }\n}\n```"
  },
  {
    "task": "Write a program to check if two sets of dates are disjoint.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class DisjointSets {\n    public static void main(String[] args) {\n        Set<String> set1 = new HashSet<>();\n        set1.add(\"2023-10-01\");\n        set1.add(\"2023-10-02\");\n        set1.add(\"2023-10-03\");\n\n        Set<String> set2 = new HashSet<>();\n        set2.add(\"2023-10-04\");\n        set2.add(\"2023-10-05\");\n        set2.add(\"2023-10-06\");\n\n        boolean disjoint = areDisjoint(set1, set2);\n        System.out.println(\"The two sets are disjoint: \" + disjoint);\n    }\n\n    public static boolean areDisjoint(Set<String> set1, Set<String> set2) {\n        for (String date : set1) {\n            if (set2.contains(date)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```"
  },
  {
    "task": "Create a set to manage a collection of tags and demonstrate addition and removal.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class TagManager {\n    public static void main(String[] args) {\n        Set<String> tags = new HashSet<>();\n\n        // Add tags\n        tags.add(\"Java\");\n        tags.add(\"Programming\");\n        tags.add(\"Code\");\n\n        // Remove a tag\n        tags.remove(\"Code\");\n\n        // Display tags\n        for (String tag : tags) {\n            System.out.println(tag);\n        }\n    }\n}\n```"
  },
  {
    "task": "Implement a set to track unique inventory items in a store.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class Inventory {\n    private Set<String> items;\n\n    public Inventory() {\n        items = new HashSet<>();\n    }\n\n    public boolean addItem(String item) {\n        return items.add(item);\n    }\n\n    public boolean removeItem(String item) {\n        return items.remove(item);\n    }\n\n    public boolean hasItem(String item) {\n        return items.contains(item);\n    }\n\n    public int getItemCount() {\n        return items.size();\n    }\n\n    public static void main(String[] args) {\n        Inventory inventory = new Inventory();\n        inventory.addItem(\"Apple\");\n        inventory.addItem(\"Banana\");\n        inventory.addItem(\"Orange\");\n        System.out.println(\"Inventory Count: \" + inventory.getItemCount());\n        System.out.println(\"Has Apple: \" + inventory.hasItem(\"Apple\"));\n        inventory.removeItem(\"Banana\");\n        System.out.println(\"Inventory Count after removing Banana: \" + inventory.getItemCount());\n    }\n}\n```"
  },
  {
    "task": "Create a set of numbers and demonstrate conversion to a list.",
    "code": "```java\nimport java.util.*;\n\npublic class SetToListExample {\n    public static void main(String[] args) {\n        Set<Integer> numberSet = new HashSet<>();\n        numberSet.add(1);\n        numberSet.add(2);\n        numberSet.add(3);\n        numberSet.add(4);\n        numberSet.add(5);\n\n        List<Integer> numberList = new ArrayList<>(numberSet);\n\n        System.out.println(\"Set: \" + numberSet);\n        System.out.println(\"List: \" + numberList);\n    }\n}\n```"
  },
  {
    "task": "Write a function that returns all elements present in either of two sets but not both.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class SymmetricDifference {\n    public static <T> Set<T> symmetricDifference(Set<T> set1, Set<T> set2) {\n        Set<T> result = new HashSet<>(set1);\n        for (T element : set2) {\n            if (!result.add(element)) {\n                result.remove(element);\n            }\n        }\n        return result;\n    }\n}\n```"
  },
  {
    "task": "Use a set to manage a collection of unique transaction IDs.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class TransactionManager {\n    private Set<String> transactionIds;\n\n    public TransactionManager() {\n        transactionIds = new HashSet<>();\n    }\n\n    public boolean addTransactionId(String transactionId) {\n        return transactionIds.add(transactionId);\n    }\n\n    public boolean containsTransactionId(String transactionId) {\n        return transactionIds.contains(transactionId);\n    }\n\n    public boolean removeTransactionId(String transactionId) {\n        return transactionIds.remove(transactionId);\n    }\n\n    public int getTransactionCount() {\n        return transactionIds.size();\n    }\n\n    public static void main(String[] args) {\n        TransactionManager manager = new TransactionManager();\n        manager.addTransactionId(\"TXN123\");\n        manager.addTransactionId(\"TXN456\");\n        manager.addTransactionId(\"TXN789\");\n        System.out.println(manager.containsTransactionId(\"TXN123\"));\n        System.out.println(manager.getTransactionCount());\n        manager.removeTransactionId(\"TXN123\");\n        System.out.println(manager.getTransactionCount());\n    }\n}\n```"
  },
  {
    "task": "Create a set of integers and demonstrate the `pop` operation.",
    "code": "```java\nimport java.util.Iterator;\nimport java.util.LinkedHashSet;\nimport java.util.Set;\n\npublic class Main {\n    public static void main(String[] args) {\n        Set<Integer> intSet = new LinkedHashSet<>();\n        intSet.add(10);\n        intSet.add(20);\n        intSet.add(30);\n        \n        // Demonstrating pop operation\n        Iterator<Integer> iterator = intSet.iterator();\n        if (iterator.hasNext()) {\n            Integer firstElement = iterator.next();\n            iterator.remove();\n            System.out.println(\"Popped element: \" + firstElement);\n        }\n        \n        System.out.println(\"Set after pop operation: \" + intSet);\n    }\n}\n```"
  },
  {
    "task": "Write a program to find the maximum element in a set of floating-point numbers.",
    "code": "```java\nimport java.util.Set;\nimport java.util.HashSet;\n\npublic class MaxInSet {\n    public static void main(String[] args) {\n        Set<Double> numbers = new HashSet<>();\n        numbers.add(2.5);\n        numbers.add(3.7);\n        numbers.add(1.4);\n        numbers.add(9.8);\n\n        double max = Double.NEGATIVE_INFINITY;\n        for (double number : numbers) {\n            if (number > max) {\n                max = number;\n            }\n        }\n\n        System.out.println(\"The maximum element is: \" + max);\n    }\n}\n```"
  },
  {
    "task": "Create a set and demonstrate the use of the `update` method with another set.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class SetUsageExample {\n    public static void main(String[] args) {\n        Set<String> set1 = new HashSet<>();\n        set1.add(\"apple\");\n        set1.add(\"banana\");\n\n        Set<String> set2 = new HashSet<>();\n        set2.add(\"banana\");\n        set2.add(\"cherry\");\n\n        set1.addAll(set2);\n\n        System.out.println(\"Updated Set: \" + set1);\n    }\n}\n```"
  },
  {
    "task": "Implement a set to keep track of unique file extensions in a directory.",
    "code": "```java\nimport java.io.File;\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class FileExtensionsTracker {\n    public static void main(String[] args) {\n        File directory = new File(\"path/to/directory\");\n        Set<String> extensions = new HashSet<>();\n        \n        if (directory.isDirectory()) {\n            for (File file : directory.listFiles()) {\n                if (file.isFile()) {\n                    String name = file.getName();\n                    int lastIndex = name.lastIndexOf('.');\n                    if (lastIndex > 0 && lastIndex < name.length() - 1) {\n                        String extension = name.substring(lastIndex + 1).toLowerCase();\n                        extensions.add(extension);\n                    }\n                }\n            }\n        }\n        \n        // Print unique file extensions\n        for (String extension : extensions) {\n            System.out.println(extension);\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a set of strings and demonstrate how to iterate over it in reverse order.",
    "code": "```java\nimport java.util.Set;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Collections;\n\npublic class ReverseSetIteration {\n    public static void main(String[] args) {\n        Set<String> stringSet = new HashSet<>();\n        stringSet.add(\"Apple\");\n        stringSet.add(\"Banana\");\n        stringSet.add(\"Cherry\");\n\n        List<String> list = new ArrayList<>(stringSet);\n        Collections.reverse(list);\n\n        for (String item : list) {\n            System.out.println(item);\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a function to check if a set is empty.",
    "code": "```java\nimport java.util.Set;\n\npublic class SetUtility {\n    public static boolean isSetEmpty(Set<?> set) {\n        return set.isEmpty();\n    }\n}\n```"
  },
  {
    "task": "Use a set to filter out duplicate entries from a list of participants.",
    "code": "```java\nimport java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<String> participants = Arrays.asList(\"Alice\", \"Bob\", \"Charlie\", \"Alice\", \"David\", \"Bob\");\n        Set<String> uniqueParticipants = new HashSet<>(participants);\n\n        System.out.println(\"Unique Participants: \" + uniqueParticipants);\n    }\n}\n```"
  },
  {
    "task": "Create a set of tuples and demonstrate basic set operations.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class SetOfTuples {\n    public static void main(String[] args) {\n        Set<Tuple> tupleSet = new HashSet<>();\n\n        // Adding tuples to the set\n        tupleSet.add(new Tuple(1, 2));\n        tupleSet.add(new Tuple(3, 4));\n        tupleSet.add(new Tuple(5, 6));\n\n        // Demonstrating basic set operations\n        // Check if the set contains a tuple\n        boolean contains = tupleSet.contains(new Tuple(1, 2));\n\n        // Remove a tuple from the set\n        tupleSet.remove(new Tuple(3, 4));\n\n        // Iterate over the set\n        for (Tuple tuple : tupleSet) {\n            System.out.println(tuple);\n        }\n    }\n}\n\nclass Tuple {\n    private final int first;\n    private final int second;\n\n    public Tuple(int first, int second) {\n        this.first = first;\n        this.second = second;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof Tuple)) return false;\n        Tuple tuple = (Tuple) o;\n        return first == tuple.first && second == tuple.second;\n    }\n\n    @Override\n    public int hashCode() {\n        int result = first;\n        result = 31 * result + second;\n        return result;\n    }\n\n    @Override\n    public String toString() {\n        return \"(\" + first + \", \" + second + \")\";\n    }\n}\n```"
  },
  {
    "task": "Write a program to find the common elements between two sets of country names.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class CommonCountries {\n    public static void main(String[] args) {\n        Set<String> set1 = new HashSet<>();\n        set1.add(\"USA\");\n        set1.add(\"Canada\");\n        set1.add(\"Mexico\");\n\n        Set<String> set2 = new HashSet<>();\n        set2.add(\"Mexico\");\n        set2.add(\"Brazil\");\n        set2.add(\"Canada\");\n\n        set1.retainAll(set2);\n\n        System.out.println(\"Common countries: \" + set1);\n    }\n}\n```"
  },
  {
    "task": "Create a set of characters and demonstrate the use of the `issubset` method.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class SubsetDemo {\n    public static void main(String[] args) {\n        Set<Character> set1 = new HashSet<>();\n        set1.add('a');\n        set1.add('b');\n        set1.add('c');\n\n        Set<Character> set2 = new HashSet<>();\n        set2.add('a');\n        set2.add('b');\n\n        boolean isSubset = set1.containsAll(set2);\n\n        System.out.println(\"Set2 is a subset of Set1: \" + isSubset);\n    }\n}\n```"
  },
  {
    "task": "Implement a set to manage a collection of unique hashtags from social media posts.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class HashtagManager {\n    private Set<String> hashtags;\n\n    public HashtagManager() {\n        this.hashtags = new HashSet<>();\n    }\n\n    public void addHashtag(String hashtag) {\n        hashtags.add(hashtag);\n    }\n\n    public void removeHashtag(String hashtag) {\n        hashtags.remove(hashtag);\n    }\n\n    public boolean containsHashtag(String hashtag) {\n        return hashtags.contains(hashtag);\n    }\n\n    public Set<String> getAllHashtags() {\n        return new HashSet<>(hashtags);\n    }\n\n    public static void main(String[] args) {\n        HashtagManager manager = new HashtagManager();\n        manager.addHashtag(\"#Java\");\n        manager.addHashtag(\"#Programming\");\n        manager.addHashtag(\"#Code\");\n\n        System.out.println(\"Hashtags: \" + manager.getAllHashtags());\n        System.out.println(\"Contains #Java: \" + manager.containsHashtag(\"#Java\"));\n        \n        manager.removeHashtag(\"#Java\");\n        System.out.println(\"Contains #Java after removal: \" + manager.containsHashtag(\"#Java\"));\n    }\n}\n```"
  },
  {
    "task": "Create a set and demonstrate how to copy it to another set.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class SetExample {\n    public static void main(String[] args) {\n        Set<Integer> originalSet = new HashSet<>();\n        originalSet.add(1);\n        originalSet.add(2);\n        originalSet.add(3);\n\n        Set<Integer> copiedSet = new HashSet<>(originalSet);\n\n        System.out.println(\"Original Set: \" + originalSet);\n        System.out.println(\"Copied Set: \" + copiedSet);\n    }\n}\n```"
  },
  {
    "task": "Write a function that accepts two sets and returns a new set with elements found in both.",
    "code": "```java\nimport java.util.Set;\nimport java.util.HashSet;\n\npublic class SetOperations {\n    public static Set<Integer> intersection(Set<Integer> set1, Set<Integer> set2) {\n        Set<Integer> resultSet = new HashSet<>(set1);\n        resultSet.retainAll(set2);\n        return resultSet;\n    }\n}\n```"
  },
  {
    "task": "Use a set to determine the unique items purchased in a day.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class UniqueItemsPurchased {\n\n    public static void main(String[] args) {\n        String[] itemsPurchased = {\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"kiwi\"};\n        Set<String> uniqueItems = new HashSet<>();\n\n        for (String item : itemsPurchased) {\n            uniqueItems.add(item);\n        }\n\n        System.out.println(\"Unique items purchased: \" + uniqueItems);\n    }\n}\n```"
  },
  {
    "task": "Create a set of student IDs and demonstrate set comprehension to filter IDs.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\npublic class StudentIDFilter {\n\n    public static void main(String[] args) {\n        // Create a set of student IDs\n        Set<Integer> studentIDs = new HashSet<>();\n        studentIDs.add(101);\n        studentIDs.add(102);\n        studentIDs.add(103);\n        studentIDs.add(104);\n        studentIDs.add(105);\n\n        // Filter IDs that are greater than 102 using set comprehension\n        Set<Integer> filteredIDs = studentIDs.stream()\n                                             .filter(id -> id > 102)\n                                             .collect(Collectors.toSet());\n\n        // Output the filtered set\n        System.out.println(filteredIDs);\n    }\n}\n```"
  },
  {
    "task": "Write a program to check if a set of strings is a superset of another set.",
    "code": "```java\nimport java.util.Set;\nimport java.util.HashSet;\n\npublic class SupersetChecker {\n    public static void main(String[] args) {\n        Set<String> setA = new HashSet<>();\n        setA.add(\"apple\");\n        setA.add(\"banana\");\n        setA.add(\"cherry\");\n\n        Set<String> setB = new HashSet<>();\n        setB.add(\"apple\");\n        setB.add(\"banana\");\n\n        boolean isSuperset = setA.containsAll(setB);\n        System.out.println(\"Set A is a superset of Set B: \" + isSuperset);\n    }\n}\n```"
  },
  {
    "task": "Create a set of unique words from a text file.",
    "code": "```java\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\npublic class UniqueWordSet {\n    public static void main(String[] args) {\n        String filePath = \"path/to/your/textfile.txt\";\n        Set<String> uniqueWords = new HashSet<>();\n        \n        try {\n            List<String> lines = Files.readAllLines(Paths.get(filePath));\n            for (String line : lines) {\n                String[] words = line.split(\"\\\\W+\");\n                for (String word : words) {\n                    if (!word.isEmpty()) {\n                        uniqueWords.add(word.toLowerCase());\n                    }\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        \n        uniqueWords.forEach(System.out::println);\n    }\n}\n```"
  },
  {
    "task": "Implement a set to store unique project identifiers and demonstrate membership testing.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class ProjectIdentifierSet {\n    public static void main(String[] args) {\n        Set<String> projectIdentifiers = new HashSet<>();\n\n        // Adding project identifiers to the set\n        projectIdentifiers.add(\"ProjectA\");\n        projectIdentifiers.add(\"ProjectB\");\n        projectIdentifiers.add(\"ProjectC\");\n\n        // Demonstrating membership testing\n        String identifierToCheck = \"ProjectB\";\n        if (projectIdentifiers.contains(identifierToCheck)) {\n            System.out.println(identifierToCheck + \" is in the set.\");\n        } else {\n            System.out.println(identifierToCheck + \" is not in the set.\");\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a set and demonstrate the `symmetric_difference_update` method.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class SymmetricDifferenceDemo {\n    public static void main(String[] args) {\n        Set<Integer> set1 = new HashSet<>();\n        set1.add(1);\n        set1.add(2);\n        set1.add(3);\n\n        Set<Integer> set2 = new HashSet<>();\n        set2.add(3);\n        set2.add(4);\n        set2.add(5);\n\n        Set<Integer> symmetricDifference = new HashSet<>(set1);\n        symmetricDifference.addAll(set2);\n        \n        Set<Integer> tmp = new HashSet<>(set1);\n        tmp.retainAll(set2);\n        \n        symmetricDifference.removeAll(tmp);\n\n        System.out.println(symmetricDifference);\n    }\n}\n```"
  },
  {
    "task": "Write a function to remove all elements from a set that are also in another set.",
    "code": "```java\nimport java.util.Set;\n\npublic class SetOperations {\n    public static void removeElements(Set<Integer> sourceSet, Set<Integer> elementsToRemove) {\n        sourceSet.removeAll(elementsToRemove);\n    }\n}\n```"
  },
  {
    "task": "Use a set to keep track of unique error codes from server logs.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class ErrorCodeTracker {\n    private Set<String> errorCodes;\n\n    public ErrorCodeTracker() {\n        errorCodes = new HashSet<>();\n    }\n\n    public void addErrorCode(String errorCode) {\n        errorCodes.add(errorCode);\n    }\n\n    public Set<String> getUniqueErrorCodes() {\n        return errorCodes;\n    }\n\n    public static void main(String[] args) {\n        ErrorCodeTracker tracker = new ErrorCodeTracker();\n        tracker.addErrorCode(\"404\");\n        tracker.addErrorCode(\"500\");\n        tracker.addErrorCode(\"403\");\n        tracker.addErrorCode(\"404\");\n\n        Set<String> uniqueErrorCodes = tracker.getUniqueErrorCodes();\n        for (String code : uniqueErrorCodes) {\n            System.out.println(code);\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a set and demonstrate how to find all unique pairs of elements.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class UniquePairs {\n    public static void main(String[] args) {\n        Set<Integer> numbers = new HashSet<>();\n        numbers.add(1);\n        numbers.add(2);\n        numbers.add(3);\n        numbers.add(4);\n\n        Set<String> uniquePairs = new HashSet<>();\n\n        for (Integer first : numbers) {\n            for (Integer second : numbers) {\n                if (!first.equals(second)) {\n                    int min = Math.min(first, second);\n                    int max = Math.max(first, second);\n                    uniquePairs.add(min + \",\" + max);\n                }\n            }\n        }\n\n        for (String pair : uniquePairs) {\n            System.out.println(\"Pair: \" + pair);\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a program to find the smallest element in a set of integers.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class SmallestElementInSet {\n    public static void main(String[] args) {\n        Set<Integer> numbers = new HashSet<>();\n        numbers.add(5);\n        numbers.add(2);\n        numbers.add(9);\n        numbers.add(3);\n        numbers.add(7);\n\n        int smallest = Integer.MAX_VALUE;\n        for (int number : numbers) {\n            if (number < smallest) {\n                smallest = number;\n            }\n        }\n\n        System.out.println(\"The smallest element is: \" + smallest);\n    }\n}\n```"
  },
  {
    "task": "Create a set and demonstrate the `add` method with multiple elements.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class SetUsageExample {\n    public static void main(String[] args) {\n        Set<String> elements = new HashSet<>();\n        \n        elements.add(\"Element1\");\n        elements.add(\"Element2\");\n        elements.add(\"Element3\");\n        elements.add(\"Element4\");\n        \n        for (String element : elements) {\n            System.out.println(element);\n        }\n    }\n}\n```"
  },
  {
    "task": "Implement a set to manage a collection of unique author names.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class AuthorSetManager {\n    private Set<String> authorNames;\n\n    public AuthorSetManager() {\n        authorNames = new HashSet<>();\n    }\n\n    public void addAuthor(String authorName) {\n        authorNames.add(authorName);\n    }\n\n    public void removeAuthor(String authorName) {\n        authorNames.remove(authorName);\n    }\n\n    public boolean containsAuthor(String authorName) {\n        return authorNames.contains(authorName);\n    }\n\n    public Set<String> getAuthors() {\n        return new HashSet<>(authorNames);\n    }\n}\n```"
  },
  {
    "task": "Create a set of integers and demonstrate converting it to a sorted list.",
    "code": "```java\nimport java.util.Set;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Collections;\n\npublic class SetToSortedList {\n    public static void main(String[] args) {\n        Set<Integer> integerSet = new HashSet<>();\n        integerSet.add(5);\n        integerSet.add(2);\n        integerSet.add(9);\n        integerSet.add(1);\n        \n        List<Integer> sortedList = new ArrayList<>(integerSet);\n        Collections.sort(sortedList);\n        \n        System.out.println(sortedList);\n    }\n}\n```"
  },
  {
    "task": "Write a function that returns the union of multiple sets.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class SetUnion {\n    public static <T> Set<T> union(Set<T>... sets) {\n        Set<T> result = new HashSet<>();\n        for (Set<T> set : sets) {\n            result.addAll(set);\n        }\n        return result;\n    }\n}\n```"
  },
  {
    "task": "Use a set to identify unique characters in a string.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class UniqueCharacters {\n    public static void main(String[] args) {\n        String input = \"example string\";\n        Set<Character> uniqueChars = new HashSet<>();\n        \n        for (char c : input.toCharArray()) {\n            uniqueChars.add(c);\n        }\n        \n        System.out.println(\"Unique characters: \" + uniqueChars);\n    }\n}\n```"
  },
  {
    "task": "Create a set of prime numbers and demonstrate basic set operations.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class PrimeSetDemo {\n    public static void main(String[] args) {\n        Set<Integer> primes = new HashSet<>();\n        // Add prime numbers to the set\n        primes.add(2);\n        primes.add(3);\n        primes.add(5);\n        primes.add(7);\n        primes.add(11);\n        primes.add(13);\n\n        // Demonstrate basic set operations\n\n        // Check if a number is in the set\n        boolean containsFive = primes.contains(5);\n        System.out.println(\"Set contains 5: \" + containsFive);\n\n        // Remove a number from the set\n        primes.remove(2);\n\n        // Display the set\n        System.out.println(\"Primes set: \" + primes);\n\n        // Add a new prime number to the set\n        primes.add(17);\n\n        // Display the updated set\n        System.out.println(\"Updated primes set: \" + primes);\n\n        // Check the size of the set\n        int size = primes.size();\n        System.out.println(\"Size of the set: \" + size);\n    }\n}\n```"
  },
  {
    "task": "Create a set and demonstrate how to check for non-membership.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class NonMembershipCheck {\n    public static void main(String[] args) {\n        Set<String> mySet = new HashSet<>();\n        mySet.add(\"apple\");\n        mySet.add(\"banana\");\n        mySet.add(\"cherry\");\n\n        String itemToCheck = \"orange\";\n        if (!mySet.contains(itemToCheck)) {\n            System.out.println(itemToCheck + \" is not in the set.\");\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a program to find the largest element in a set of numbers.",
    "code": "```java\nimport java.util.Set;\nimport java.util.HashSet;\n\npublic class LargestElementInSet {\n    public static void main(String[] args) {\n        Set<Integer> numbers = new HashSet<>();\n        numbers.add(3);\n        numbers.add(5);\n        numbers.add(7);\n        numbers.add(2);\n        numbers.add(9);\n\n        int largest = findLargest(numbers);\n        System.out.println(\"The largest element is: \" + largest);\n    }\n\n    private static int findLargest(Set<Integer> numbers) {\n        int largest = Integer.MIN_VALUE;\n        for (int number : numbers) {\n            if (number > largest) {\n                largest = number;\n            }\n        }\n        return largest;\n    }\n}\n```"
  },
  {
    "task": "Create a set of unique movie titles and demonstrate membership testing.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class MovieSetDemo {\n    public static void main(String[] args) {\n        Set<String> movieTitles = new HashSet<>();\n        \n        // Adding movie titles\n        movieTitles.add(\"Inception\");\n        movieTitles.add(\"The Matrix\");\n        movieTitles.add(\"Interstellar\");\n        movieTitles.add(\"The Matrix\"); // Duplicate entry\n\n        // Membership testing\n        if (movieTitles.contains(\"Inception\")) {\n            System.out.println(\"Inception is in the set.\");\n        } else {\n            System.out.println(\"Inception is not in the set.\");\n        }\n        \n        if (movieTitles.contains(\"Avatar\")) {\n            System.out.println(\"Avatar is in the set.\");\n        } else {\n            System.out.println(\"Avatar is not in the set.\");\n        }\n    }\n}\n```"
  },
  {
    "task": "Implement a set to store unique keys from a dictionary.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Set;\n\npublic class UniqueKeys {\n    public static void main(String[] args) {\n        Map<String, String> dictionary = Map.of(\n                \"key1\", \"value1\",\n                \"key2\", \"value2\",\n                \"key3\", \"value3\"\n        );\n\n        Set<String> uniqueKeys = new HashSet<>(dictionary.keySet());\n\n        // uniqueKeys now contains all the unique keys from the dictionary\n    }\n}\n```"
  },
  {
    "task": "Create a set and demonstrate the `difference_update` method.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class SetUsageDemo {\n    public static void main(String[] args) {\n        Set<Integer> set1 = new HashSet<>();\n        set1.add(1);\n        set1.add(2);\n        set1.add(3);\n        set1.add(4);\n\n        Set<Integer> set2 = new HashSet<>();\n        set2.add(3);\n        set2.add(4);\n        set2.add(5);\n        set2.add(6);\n\n        set1.removeAll(set2);\n\n        System.out.println(set1);\n    }\n}\n```"
  },
  {
    "task": "Write a function to merge multiple sets into a single set.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class SetMerger {\n    public static <T> Set<T> mergeSets(Set<T>... sets) {\n        Set<T> resultSet = new HashSet<>();\n        for (Set<T> set : sets) {\n            resultSet.addAll(set);\n        }\n        return resultSet;\n    }\n}\n```"
  },
  {
    "task": "Use a set to filter out duplicate letters from a word.",
    "code": "```java\nimport java.util.LinkedHashSet;\nimport java.util.Set;\n\npublic class FilterDuplicates {\n    public static void main(String[] args) {\n        String word = \"programming\";\n        String result = removeDuplicateLetters(word);\n        System.out.println(result);\n    }\n\n    public static String removeDuplicateLetters(String word) {\n        Set<Character> charSet = new LinkedHashSet<>();\n        for (char c : word.toCharArray()) {\n            charSet.add(c);\n        }\n        StringBuilder sb = new StringBuilder();\n        for (char c : charSet) {\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n}\n```"
  },
  {
    "task": "Create a set and demonstrate the use of the `isdisjoint` method.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class Main {\n    public static void main(String[] args) {\n        Set<Integer> set1 = new HashSet<>();\n        set1.add(1);\n        set1.add(2);\n        set1.add(3);\n\n        Set<Integer> set2 = new HashSet<>();\n        set2.add(4);\n        set2.add(5);\n        set2.add(6);\n\n        boolean isDisjoint = set1.stream().noneMatch(set2::contains);\n\n        System.out.println(\"Set1 and Set2 are disjoint: \" + isDisjoint);\n    }\n}\n```"
  },
  {
    "task": "Write a program to find all elements that are only in one of two sets.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class UniqueElementsInSets {\n    public static void main(String[] args) {\n        Set<Integer> set1 = new HashSet<>();\n        Set<Integer> set2 = new HashSet<>();\n\n        // Example elements\n        set1.add(1);\n        set1.add(2);\n        set1.add(3);\n\n        set2.add(3);\n        set2.add(4);\n        set2.add(5);\n\n        Set<Integer> uniqueInSet1 = new HashSet<>(set1);\n        Set<Integer> uniqueInSet2 = new HashSet<>(set2);\n\n        uniqueInSet1.removeAll(set2);\n        uniqueInSet2.removeAll(set1);\n\n        Set<Integer> result = new HashSet<>(uniqueInSet1);\n        result.addAll(uniqueInSet2);\n\n        System.out.println(result);\n    }\n}\n```"
  },
  {
    "task": "Create a set of unique book authors and demonstrate basic set operations.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class UniqueBookAuthors {\n    public static void main(String[] args) {\n        Set<String> authors = new HashSet<>();\n\n        // Adding authors to the set\n        authors.add(\"J.K. Rowling\");\n        authors.add(\"George R.R. Martin\");\n        authors.add(\"J.R.R. Tolkien\");\n        authors.add(\"Agatha Christie\");\n\n        // Demonstrate basic set operations\n        // Adding a duplicate author\n        authors.add(\"J.K. Rowling\");\n\n        // Checking if a particular author is in the set\n        boolean hasAuthor = authors.contains(\"George R.R. Martin\");\n\n        // Removing an author from the set\n        authors.remove(\"Agatha Christie\");\n\n        // Printing the set of authors\n        System.out.println(\"Unique authors: \" + authors);\n\n        // Checking the size of the set\n        int size = authors.size();\n\n        // Printing the results of the operations\n        System.out.println(\"Contains George R.R. Martin: \" + hasAuthor);\n        System.out.println(\"Number of unique authors: \" + size);\n    }\n}\n```"
  },
  {
    "task": "Implement a set to store unique phone numbers and check for duplicates.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class PhoneNumberSet {\n    private Set<String> phoneNumbers;\n\n    public PhoneNumberSet() {\n        phoneNumbers = new HashSet<>();\n    }\n\n    public boolean addPhoneNumber(String phoneNumber) {\n        return phoneNumbers.add(phoneNumber);\n    }\n\n    public boolean isDuplicate(String phoneNumber) {\n        return !addPhoneNumber(phoneNumber);\n    }\n\n    public static void main(String[] args) {\n        PhoneNumberSet phoneNumberSet = new PhoneNumberSet();\n        System.out.println(phoneNumberSet.addPhoneNumber(\"123-456-7890\")); // true\n        System.out.println(phoneNumberSet.isDuplicate(\"123-456-7890\")); // true\n        System.out.println(phoneNumberSet.addPhoneNumber(\"987-654-3210\")); // true\n        System.out.println(phoneNumberSet.isDuplicate(\"987-654-3210\")); // true\n        System.out.println(phoneNumberSet.isDuplicate(\"123-456-7890\")); // false\n    }\n}\n```"
  },
  {
    "task": "Create a set of floating-point numbers and demonstrate rounding each element.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class Main {\n    public static void main(String[] args) {\n        Set<Double> floatSet = new HashSet<>();\n        floatSet.add(3.14159);\n        floatSet.add(2.71828);\n        floatSet.add(1.61803);\n        floatSet.add(0.57721);\n\n        Set<Long> roundedSet = new HashSet<>();\n        for (Double number : floatSet) {\n            roundedSet.add(Math.round(number));\n        }\n\n        for (Long roundedNumber : roundedSet) {\n            System.out.println(roundedNumber);\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a function that returns a set of all vowels present in a given sentence.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class VowelExtractor {\n\n    public static Set<Character> getVowels(String sentence) {\n        Set<Character> vowels = new HashSet<>();\n        String lowerCaseSentence = sentence.toLowerCase();\n        for (char c : lowerCaseSentence.toCharArray()) {\n            if (\"aeiou\".indexOf(c) != -1) {\n                vowels.add(c);\n            }\n        }\n        return vowels;\n    }\n}\n```"
  },
  {
    "task": "Use a set to track unique session IDs for a web application.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class SessionTracker {\n    private Set<String> uniqueSessionIds;\n\n    public SessionTracker() {\n        uniqueSessionIds = new HashSet<>();\n    }\n\n    public void addSessionId(String sessionId) {\n        uniqueSessionIds.add(sessionId);\n    }\n\n    public boolean isSessionIdUnique(String sessionId) {\n        return !uniqueSessionIds.contains(sessionId);\n    }\n\n    public static void main(String[] args) {\n        SessionTracker sessionTracker = new SessionTracker();\n        sessionTracker.addSessionId(\"abc123\");\n        sessionTracker.addSessionId(\"def456\");\n\n        System.out.println(sessionTracker.isSessionIdUnique(\"abc123\")); // false\n        System.out.println(sessionTracker.isSessionIdUnique(\"ghi789\")); // true\n    }\n}\n```"
  },
  {
    "task": "Create a set of unique city names and demonstrate set operations with it.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class UniqueCitySet {\n    public static void main(String[] args) {\n        Set<String> citySet = new HashSet<>();\n\n        // Adding city names to the set\n        citySet.add(\"New York\");\n        citySet.add(\"Los Angeles\");\n        citySet.add(\"Chicago\");\n        citySet.add(\"Houston\");\n        citySet.add(\"Phoenix\");\n\n        // Demonstrating set operations\n        System.out.println(\"Initial Set of Cities: \" + citySet);\n\n        // Adding a duplicate city\n        citySet.add(\"New York\");\n        System.out.println(\"After adding a duplicate city: \" + citySet);\n\n        // Removing a city\n        citySet.remove(\"Chicago\");\n        System.out.println(\"After removing Chicago: \" + citySet);\n\n        // Checking if a city is in the set\n        boolean containsHouston = citySet.contains(\"Houston\");\n        System.out.println(\"Contains Houston: \" + containsHouston);\n\n        // Iterating over the set\n        System.out.println(\"Iterating over set:\");\n        for (String city : citySet) {\n            System.out.println(city);\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a program to find the common elements in three sets.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class CommonElementsInSets {\n    public static void main(String[] args) {\n        Set<Integer> set1 = new HashSet<>();\n        Set<Integer> set2 = new HashSet<>();\n        Set<Integer> set3 = new HashSet<>();\n\n        // Example data\n        set1.add(1); set1.add(2); set1.add(3); set1.add(4);\n        set2.add(3); set2.add(4); set2.add(5); set2.add(6);\n        set3.add(4); set3.add(6); set3.add(7); set3.add(8);\n\n        Set<Integer> commonElements = new HashSet<>(set1);\n        commonElements.retainAll(set2);\n        commonElements.retainAll(set3);\n\n        System.out.println(\"Common elements: \" + commonElements);\n    }\n}\n```"
  },
  {
    "task": "Create a set and demonstrate how to remove an element by its value.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class SetExample {\n    public static void main(String[] args) {\n        Set<String> mySet = new HashSet<>();\n        mySet.add(\"Element1\");\n        mySet.add(\"Element2\");\n        mySet.add(\"Element3\");\n\n        // Remove an element by its value\n        mySet.remove(\"Element2\");\n\n        // Display the set\n        for (String element : mySet) {\n            System.out.println(element);\n        }\n    }\n}\n```"
  },
  {
    "task": "Implement a set to store a collection of unique ISBN numbers.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class ISBNCollection {\n    private Set<String> isbnSet;\n\n    public ISBNCollection() {\n        isbnSet = new HashSet<>();\n    }\n\n    public boolean addISBN(String isbn) {\n        return isbnSet.add(isbn);\n    }\n\n    public boolean removeISBN(String isbn) {\n        return isbnSet.remove(isbn);\n    }\n\n    public boolean containsISBN(String isbn) {\n        return isbnSet.contains(isbn);\n    }\n\n    public int size() {\n        return isbnSet.size();\n    }\n\n    public static void main(String[] args) {\n        ISBNCollection collection = new ISBNCollection();\n        collection.addISBN(\"978-3-16-148410-0\");\n        collection.addISBN(\"978-1-4028-9462-6\");\n        System.out.println(\"Contains 978-3-16-148410-0: \" + collection.containsISBN(\"978-3-16-148410-0\"));\n        System.out.println(\"Size of collection: \" + collection.size());\n    }\n}\n```"
  },
  {
    "task": "Create a set and demonstrate the `intersection_update` method.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class SetIntersectionUpdateDemo {\n    public static void main(String[] args) {\n        Set<Integer> set1 = new HashSet<>();\n        set1.add(1);\n        set1.add(2);\n        set1.add(3);\n        set1.add(4);\n\n        Set<Integer> set2 = new HashSet<>();\n        set2.add(3);\n        set2.add(4);\n        set2.add(5);\n        set2.add(6);\n\n        set1.retainAll(set2);\n\n        System.out.println(\"Set after intersection_update: \" + set1);\n    }\n}\n```"
  },
  {
    "task": "Write a function to generate a set of all unique elements in a list.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\npublic class UniqueElements {\n    public static <T> Set<T> generateUniqueSet(List<T> list) {\n        return new HashSet<>(list);\n    }\n}\n```"
  },
  {
    "task": "Use a set to determine the unique characters in two strings.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class UniqueCharacters {\n    public static Set<Character> findUniqueCharacters(String str1, String str2) {\n        Set<Character> uniqueChars = new HashSet<>();\n\n        for (char c : str1.toCharArray()) {\n            uniqueChars.add(c);\n        }\n\n        for (char c : str2.toCharArray()) {\n            uniqueChars.add(c);\n        }\n\n        return uniqueChars;\n    }\n\n    public static void main(String[] args) {\n        String string1 = \"hello\";\n        String string2 = \"world\";\n\n        Set<Character> uniqueCharacters = findUniqueCharacters(string1, string2);\n        \n        System.out.println(\"Unique characters: \" + uniqueCharacters);\n    }\n}\n```"
  },
  {
    "task": "Create a set of unique animal names and demonstrate the `discard` method.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class AnimalSetExample {\n    public static void main(String[] args) {\n        Set<String> animalNames = new HashSet<>();\n\n        // Add some animal names to the set\n        animalNames.add(\"Lion\");\n        animalNames.add(\"Tiger\");\n        animalNames.add(\"Bear\");\n        \n        // Demonstrate removing an element from the set\n        animalNames.remove(\"Tiger\");\n        \n        // Print the set to show the result\n        System.out.println(animalNames);\n    }\n}\n```"
  },
  {
    "task": "Write a program to find all elements present in the first set but not in the second.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class SetDifference {\n    public static void main(String[] args) {\n        Set<Integer> firstSet = new HashSet<>();\n        Set<Integer> secondSet = new HashSet<>();\n\n        // Example elements for first set\n        firstSet.add(1);\n        firstSet.add(2);\n        firstSet.add(3);\n        firstSet.add(4);\n\n        // Example elements for second set\n        secondSet.add(3);\n        secondSet.add(4);\n        secondSet.add(5);\n        secondSet.add(6);\n\n        // Find elements present in the first set but not in the second\n        firstSet.removeAll(secondSet);\n\n        // Print the result\n        System.out.println(\"Elements present in the first set but not in the second: \" + firstSet);\n    }\n}\n```"
  },
  {
    "task": "Create a set of integers and demonstrate using it to eliminate duplicates from a list.",
    "code": "```java\nimport java.util.*;\n\npublic class RemoveDuplicates {\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 2, 4, 5, 1, 6, 3, 7);\n        Set<Integer> uniqueNumbers = new HashSet<>(numbers);\n        List<Integer> listWithoutDuplicates = new ArrayList<>(uniqueNumbers);\n        \n        System.out.println(listWithoutDuplicates);\n    }\n}\n```"
  },
  {
    "task": "Implement a set to manage a collection of unique car models.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class CarModelManager {\n    private Set<String> carModels;\n\n    public CarModelManager() {\n        carModels = new HashSet<>();\n    }\n\n    public boolean addCarModel(String model) {\n        return carModels.add(model);\n    }\n\n    public boolean removeCarModel(String model) {\n        return carModels.remove(model);\n    }\n\n    public boolean hasCarModel(String model) {\n        return carModels.contains(model);\n    }\n\n    public Set<String> getAllCarModels() {\n        return new HashSet<>(carModels);\n    }\n}\n```"
  },
  {
    "task": "Create a set and demonstrate the use of the `clear` method.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class SetExample {\n    public static void main(String[] args) {\n        Set<String> mySet = new HashSet<>();\n        mySet.add(\"apple\");\n        mySet.add(\"banana\");\n        mySet.add(\"cherry\");\n        \n        System.out.println(\"Set before clear: \" + mySet);\n        \n        mySet.clear();\n        \n        System.out.println(\"Set after clear: \" + mySet);\n    }\n}\n```"
  },
  {
    "task": "Write a function that finds the intersection of multiple sets.",
    "code": "```java\nimport java.util.Set;\nimport java.util.HashSet;\n\npublic class SetIntersection {\n\n    public static <T> Set<T> findIntersection(Set<T>... sets) {\n        if (sets == null || sets.length == 0) {\n            return new HashSet<>();\n        }\n\n        Set<T> intersection = new HashSet<>(sets[0]);\n\n        for (int i = 1; i < sets.length; i++) {\n            intersection.retainAll(sets[i]);\n        }\n\n        return intersection;\n    }\n\n    public static void main(String[] args) {\n        Set<Integer> set1 = new HashSet<>();\n        set1.add(1);\n        set1.add(2);\n        set1.add(3);\n\n        Set<Integer> set2 = new HashSet<>();\n        set2.add(2);\n        set2.add(3);\n        set2.add(4);\n\n        Set<Integer> set3 = new HashSet<>();\n        set3.add(3);\n        set3.add(4);\n        set3.add(5);\n\n        Set<Integer> result = findIntersection(set1, set2, set3);\n        System.out.println(result);\n    }\n}\n```"
  },
  {
    "task": "Use a set to identify unique words in a paragraph.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class UniqueWords {\n    public static void main(String[] args) {\n        String paragraph = \"This is a sample paragraph with some sample words and some unique words\";\n        \n        String[] words = paragraph.split(\"\\\\W+\");\n        Set<String> uniqueWords = new HashSet<>();\n        \n        for (String word : words) {\n            uniqueWords.add(word.toLowerCase());\n        }\n        \n        System.out.println(uniqueWords);\n    }\n}\n```"
  },
  {
    "task": "Create a set of unique country codes and demonstrate membership testing.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class CountryCodeSet {\n    public static void main(String[] args) {\n        Set<String> countryCodes = new HashSet<>();\n\n        // Adding some country codes\n        countryCodes.add(\"US\");\n        countryCodes.add(\"CA\");\n        countryCodes.add(\"MX\");\n        countryCodes.add(\"FR\");\n        countryCodes.add(\"DE\");\n\n        // Membership testing\n        String codeToCheck = \"US\";\n        if (countryCodes.contains(codeToCheck)) {\n            System.out.println(codeToCheck + \" is in the set.\");\n        } else {\n            System.out.println(codeToCheck + \" is not in the set.\");\n        }\n    }\n}\n```"
  },
  {
    "task": "Write a program to find the union of two sets and return it as a list.",
    "code": "```java\nimport java.util.*;\n\npublic class UnionOfSets {\n    public static List<Integer> unionOfSets(Set<Integer> set1, Set<Integer> set2) {\n        Set<Integer> unionSet = new HashSet<>(set1);\n        unionSet.addAll(set2);\n        return new ArrayList<>(unionSet);\n    }\n\n    public static void main(String[] args) {\n        Set<Integer> set1 = new HashSet<>(Arrays.asList(1, 2, 3, 4));\n        Set<Integer> set2 = new HashSet<>(Arrays.asList(3, 4, 5, 6));\n        List<Integer> unionList = unionOfSets(set1, set2);\n        System.out.println(unionList);\n    }\n}\n```"
  },
  {
    "task": "Create a set and demonstrate using it to check if all elements of another set are present.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class SetUsageExample {\n    public static void main(String[] args) {\n        Set<String> setA = new HashSet<>();\n        setA.add(\"apple\");\n        setA.add(\"banana\");\n        setA.add(\"cherry\");\n\n        Set<String> setB = new HashSet<>();\n        setB.add(\"banana\");\n        setB.add(\"cherry\");\n\n        boolean allElementsPresent = setA.containsAll(setB);\n\n        System.out.println(\"Are all elements of setB present in setA? \" + allElementsPresent);\n    }\n}\n```"
  },
  {
    "task": "Implement a set to store unique coupon codes and demonstrate adding new codes.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class CouponCodeSet {\n    public static void main(String[] args) {\n        Set<String> couponCodes = new HashSet<>();\n        \n        // Adding new coupon codes\n        couponCodes.add(\"SAVE10\");\n        couponCodes.add(\"WELCOME20\");\n        couponCodes.add(\"FREESHIP\");\n\n        // Demonstrating adding duplicate code\n        boolean added = couponCodes.add(\"SAVE10\"); // This will not add since \"SAVE10\" is already present\n        \n        // Output the set\n        System.out.println(\"Coupon Codes: \" + couponCodes);\n        System.out.println(\"Was 'SAVE10' added again? \" + added);\n    }\n}\n```"
  },
  {
    "task": "Create a set and demonstrate the `copy` method.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class SetCopyExample {\n    public static void main(String[] args) {\n        Set<String> originalSet = new HashSet<>();\n        originalSet.add(\"apple\");\n        originalSet.add(\"banana\");\n        originalSet.add(\"cherry\");\n\n        Set<String> copiedSet = new HashSet<>(originalSet);\n\n        // Output the original and copied sets\n        System.out.println(\"Original Set: \" + originalSet);\n        System.out.println(\"Copied Set: \" + copiedSet);\n    }\n}\n```"
  },
  {
    "task": "Write a function to remove duplicates from a list using a set.",
    "code": "```java\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\npublic class RemoveDuplicates {\n\n    public static List<Integer> removeDuplicates(List<Integer> inputList) {\n        Set<Integer> set = new HashSet<>(inputList);\n        return new ArrayList<>(set);\n    }\n\n    public static void main(String[] args) {\n        List<Integer> list = List.of(1, 2, 3, 2, 1, 4, 5);\n        List<Integer> uniqueList = removeDuplicates(list);\n        System.out.println(uniqueList);\n    }\n}\n```"
  },
  {
    "task": "Use a set to identify unique numbers in a sequence.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class UniqueNumbers {\n    public static void main(String[] args) {\n        int[] numbers = {1, 2, 3, 2, 4, 5, 1, 6};\n        Set<Integer> uniqueNumbers = new HashSet<>();\n        \n        for (int number : numbers) {\n            uniqueNumbers.add(number);\n        }\n        \n        System.out.println(\"Unique numbers: \" + uniqueNumbers);\n    }\n}\n```"
  },
  {
    "task": "Create a set of unique fruit names and demonstrate set operations with it.",
    "code": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class FruitSetExample {\n    public static void main(String[] args) {\n        Set<String> fruitSet = new HashSet<>();\n\n        // Adding fruit names to the set\n        fruitSet.add(\"Apple\");\n        fruitSet.add(\"Banana\");\n        fruitSet.add(\"Orange\");\n        fruitSet.add(\"Mango\");\n\n        // Trying to add a duplicate fruit name\n        fruitSet.add(\"Apple\");\n\n        // Display the set\n        System.out.println(\"Fruit Set: \" + fruitSet);\n\n        // Check if a fruit is in the set\n        if (fruitSet.contains(\"Banana\")) {\n            System.out.println(\"Banana is in the set.\");\n        }\n\n        // Remove a fruit from the set\n        fruitSet.remove(\"Orange\");\n\n        // Display the set after removal\n        System.out.println(\"Updated Fruit Set: \" + fruitSet);\n\n        // Iterate over the set\n        for (String fruit : fruitSet) {\n            System.out.println(\"Fruit: \" + fruit);\n        }\n    }\n}\n```"
  }
]