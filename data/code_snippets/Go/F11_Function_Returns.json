[
  {
    "task": "Create a function that calculates the sum of two numbers and returns the result.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc sum(a int, b int) int {\n    return a + b\n}\n\nfunc main() {\n    result := sum(5, 7)\n    fmt.Println(result)\n}\n```"
  },
  {
    "task": "Design a function that takes a string and returns its length.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc lengthOfString(s string) int {\n\treturn len(s)\n}\n\nfunc main() {\n\tfmt.Println(lengthOfString(\"Hello, World!\"))\n}\n```"
  },
  {
    "task": "Write a function that checks if a number is prime and returns a boolean value.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc isPrime(n int) bool {\n\tif n <= 1 {\n\t\treturn false\n\t}\n\tif n == 2 {\n\t\treturn true\n\t}\n\tif n%2 == 0 {\n\t\treturn false\n\t}\n\tfor i := 3; i*i <= n; i += 2 {\n\t\tif n%i == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc main() {\n\tfmt.Println(isPrime(5))  // Output: true\n\tfmt.Println(isPrime(4))  // Output: false\n}\n```"
  },
  {
    "task": "Implement a function that returns the highest value in a list of integers.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc maxInList(nums []int) int {\n\tif len(nums) == 0 {\n\t\treturn 0 // or handle empty list case as needed\n\t}\n\tmax := nums[0]\n\tfor _, num := range nums {\n\t\tif num > max {\n\t\t\tmax = num\n\t\t}\n\t}\n\treturn max\n}\n\nfunc main() {\n\tnumbers := []int{3, 5, 7, 2, 8, -1, 4}\n\tfmt.Println(maxInList(numbers))\n}\n```"
  },
  {
    "task": "Create a function that accepts a list of words and returns the longest word.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc longestWord(words []string) string {\n\tlongest := \"\"\n\tfor _, word := range words {\n\t\tif len(word) > len(longest) {\n\t\t\tlongest = word\n\t\t}\n\t}\n\treturn longest\n}\n\nfunc main() {\n\twords := []string{\"apple\", \"banana\", \"cherry\", \"date\"}\n\tfmt.Println(longestWord(words)) // Output: banana\n}\n```"
  },
  {
    "task": "Write a function that takes a temperature in Celsius and returns the equivalent in Fahrenheit.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc celsiusToFahrenheit(celsius float64) float64 {\n\treturn (celsius * 9/5) + 32\n}\n\nfunc main() {\n\ttempCelsius := 25.0\n\ttempFahrenheit := celsiusToFahrenheit(tempCelsius)\n\tfmt.Printf(\"%.2f Celsius is %.2f Fahrenheit\\n\", tempCelsius, tempFahrenheit)\n}\n```"
  },
  {
    "task": "Develop a function that returns the factorial of a given number.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc factorial(n int) int {\n\tif n == 0 {\n\t\treturn 1\n\t}\n\treturn n * factorial(n-1)\n}\n\nfunc main() {\n\tfmt.Println(factorial(5))\n}\n```"
  },
  {
    "task": "Implement a function that receives a date and returns the day of the week.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc dayOfWeek(dateString string) (string, error) {\n\tlayout := \"2006-01-02\"\n\tdate, err := time.Parse(layout, dateString)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn date.Weekday().String(), nil\n}\n\nfunc main() {\n\tdateStr := \"2023-10-10\"\n\tday, err := dayOfWeek(dateStr)\n\tif err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t\treturn\n\t}\n\tfmt.Println(\"Day of the week:\", day)\n}\n```"
  },
  {
    "task": "Write a function that calculates the area of a circle given its radius and returns the value.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc areaOfCircle(radius float64) float64 {\n\treturn math.Pi * radius * radius\n}\n\nfunc main() {\n\tradius := 5.0\n\tarea := areaOfCircle(radius)\n\tfmt.Printf(\"The area of the circle is: %.2f\\n\", area)\n}\n```"
  },
  {
    "task": "Create a function that converts a string to uppercase and returns the modified string.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc toUpperCase(s string) string {\n\treturn strings.ToUpper(s)\n}\n\nfunc main() {\n\tresult := toUpperCase(\"hello, world\")\n\tfmt.Println(result)\n}\n```"
  },
  {
    "task": "Design a function that returns the reverse of a given list.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc reverseList(input []int) []int {\n\tlength := len(input)\n\treversed := make([]int, length)\n\tfor i := 0; i < length; i++ {\n\t\treversed[i] = input[length-1-i]\n\t}\n\treturn reversed\n}\n\nfunc main() {\n\tlist := []int{1, 2, 3, 4, 5}\n\treversed := reverseList(list)\n\tfmt.Println(reversed)\n}\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns a dictionary with character frequencies.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc charFrequencies(s string) map[rune]int {\n\tfrequencies := make(map[rune]int)\n\tfor _, char := range s {\n\t\tfrequencies[char]++\n\t}\n\treturn frequencies\n}\n\nfunc main() {\n\ts := \"example\"\n\tfreqs := charFrequencies(s)\n\tfmt.Println(freqs)\n}\n```"
  },
  {
    "task": "Write a function that returns the first non-repeating character in a string.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc firstNonRepeatingCharacter(s string) string {\n\tcounts := make(map[rune]int)\n\tfor _, char := range s {\n\t\tcounts[char]++\n\t}\n\tfor _, char := range s {\n\t\tif counts[char] == 1 {\n\t\t\treturn string(char)\n\t\t}\n\t}\n\treturn \"\"\n}\n\nfunc main() {\n\tfmt.Println(firstNonRepeatingCharacter(\"swiss\")) // Output: \"w\"\n}\n```"
  },
  {
    "task": "Create a function that takes a list of numbers and returns a new list with only even numbers.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc filterEvenNumbers(numbers []int) []int {\n    var evenNumbers []int\n    for _, num := range numbers {\n        if num%2 == 0 {\n            evenNumbers = append(evenNumbers, num)\n        }\n    }\n    return evenNumbers\n}\n\nfunc main() {\n    numbers := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n    evenNumbers := filterEvenNumbers(numbers)\n    fmt.Println(evenNumbers)\n}\n```"
  },
  {
    "task": "Develop a function that receives a sentence and returns the word count.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc wordCount(sentence string) int {\n\twords := strings.Fields(sentence)\n\treturn len(words)\n}\n\nfunc main() {\n\tsentence := \"Develop a function that receives a sentence and returns the word count.\"\n\tfmt.Println(wordCount(sentence))\n}\n```"
  },
  {
    "task": "Implement a function that returns the smallest element in an array.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc smallestElement(arr []int) int {\n\tif len(arr) == 0 {\n\t\treturn 0\n\t}\n\tsmallest := arr[0]\n\tfor _, num := range arr {\n\t\tif num < smallest {\n\t\t\tsmallest = num\n\t\t}\n\t}\n\treturn smallest\n}\n\nfunc main() {\n\tarr := []int{3, 1, 4, 1, 5, 9, 2, 6, 5}\n\tfmt.Println(smallestElement(arr))\n}\n```"
  },
  {
    "task": "Write a function that takes two strings and returns true if they are anagrams.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sort\"\n\t\"strings\"\n)\n\nfunc areAnagrams(s1, s2 string) bool {\n\tif len(s1) != len(s2) {\n\t\treturn false\n\t}\n\treturn sortString(s1) == sortString(s2)\n}\n\nfunc sortString(s string) string {\n\ts = strings.ToLower(s)\n\trunes := []rune(s)\n\tsort.Slice(runes, func(i, j int) bool {\n\t\treturn runes[i] < runes[j]\n\t})\n\treturn string(runes)\n}\n\nfunc main() {\n\tfmt.Println(areAnagrams(\"listen\", \"silent\")) // true\n\tfmt.Println(areAnagrams(\"hello\", \"world\"))   // false\n}\n```"
  },
  {
    "task": "Create a function that accepts an integer and returns a list of its divisors.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc divisors(n int) []int {\n\tvar result []int\n\tfor i := 1; i <= n; i++ {\n\t\tif n%i == 0 {\n\t\t\tresult = append(result, i)\n\t\t}\n\t}\n\treturn result\n}\n\nfunc main() {\n\tfmt.Println(divisors(28))\n}\n```"
  },
  {
    "task": "Design a function that returns the square root of a given number.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc squareRoot(num float64) float64 {\n\treturn math.Sqrt(num)\n}\n\nfunc main() {\n\tnumber := 16.0\n\tresult := squareRoot(number)\n\tfmt.Println(\"The square root is:\", result)\n}\n```"
  },
  {
    "task": "Implement a function that accepts a list and returns it sorted in ascending order.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sort\"\n)\n\nfunc sortList(list []int) []int {\n\tsort.Ints(list)\n\treturn list\n}\n\nfunc main() {\n\tunsortedList := []int{5, 2, 9, 1, 5, 6}\n\tsortedList := sortList(unsortedList)\n\tfmt.Println(sortedList)\n}\n```"
  },
  {
    "task": "Write a function that checks whether a given year is a leap year and returns a boolean.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc isLeapYear(year int) bool {\n    if year%4 == 0 {\n        if year%100 == 0 {\n            return year%400 == 0\n        }\n        return true\n    }\n    return false\n}\n\nfunc main() {\n    fmt.Println(isLeapYear(2020)) // true\n    fmt.Println(isLeapYear(2021)) // false\n}\n```"
  },
  {
    "task": "Create a function that receives a list of numbers and returns their average.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc average(numbers []float64) float64 {\n\tvar sum float64\n\tfor _, num := range numbers {\n\t\tsum += num\n\t}\n\treturn sum / float64(len(numbers))\n}\n\nfunc main() {\n\tnumbers := []float64{10, 20, 30, 40, 50}\n\tavg := average(numbers)\n\tfmt.Println(\"Average:\", avg)\n}\n```"
  },
  {
    "task": "Develop a function that returns the nth Fibonacci number.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc fibonacci(n int) int {\n\tif n <= 1 {\n\t\treturn n\n\t}\n\treturn fibonacci(n-1) + fibonacci(n-2)\n}\n\nfunc main() {\n\tn := 10\n\tfmt.Println(fibonacci(n))\n}\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns it with vowels removed.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc removeVowels(input string) string {\n\tvowels := \"aeiouAEIOU\"\n\tvar result strings.Builder\n\tfor _, ch := range input {\n\t\tif !strings.ContainsRune(vowels, ch) {\n\t\t\tresult.WriteRune(ch)\n\t\t}\n\t}\n\treturn result.String()\n}\n\nfunc main() {\n\tfmt.Println(removeVowels(\"Hello World\"))\n}\n```"
  },
  {
    "task": "Write a function that takes two dates and returns the number of days between them.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc daysBetween(date1, date2 string) int {\n\tlayout := \"2006-01-02\"\n\td1, _ := time.Parse(layout, date1)\n\td2, _ := time.Parse(layout, date2)\n\treturn int(d2.Sub(d1).Hours() / 24)\n}\n\nfunc main() {\n\tdate1 := \"2023-10-01\"\n\tdate2 := \"2023-10-10\"\n\tfmt.Println(daysBetween(date1, date2))\n}\n```"
  },
  {
    "task": "Create a function that returns the last element of a list.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc lastElement(list []int) (int, bool) {\n\tif len(list) == 0 {\n\t\treturn 0, false\n\t}\n\treturn list[len(list)-1], true\n}\n\nfunc main() {\n\tlist := []int{1, 2, 3, 4, 5}\n\tlast, ok := lastElement(list)\n\tif ok {\n\t\tfmt.Println(\"Last element:\", last)\n\t} else {\n\t\tfmt.Println(\"List is empty.\")\n\t}\n}\n```"
  },
  {
    "task": "Design a function that calculates the GCD of two numbers and returns it.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc gcd(a, b int) int {\n\tfor b != 0 {\n\t\ta, b = b, a%b\n\t}\n\treturn a\n}\n\nfunc main() {\n\tfmt.Println(gcd(48, 18))\n}\n```"
  },
  {
    "task": "Implement a function that takes a list and returns a tuple with the min and max values.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc minMax(values []int) (int, int) {\n\tif len(values) == 0 {\n\t\tpanic(\"List is empty\")\n\t}\n\tminVal, maxVal := values[0], values[0]\n\tfor _, value := range values {\n\t\tif value < minVal {\n\t\t\tminVal = value\n\t\t}\n\t\tif value > maxVal {\n\t\t\tmaxVal = value\n\t\t}\n\t}\n\treturn minVal, maxVal\n}\n\nfunc main() {\n\tlist := []int{3, 1, 4, 1, 5, 9, 2, 6, 5}\n\tmin, max := minMax(list)\n\tfmt.Printf(\"Min: %d, Max: %d\\n\", min, max)\n}\n```"
  },
  {
    "task": "Write a function that converts a binary string to its decimal representation and returns it.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n)\n\nfunc binaryToDecimal(binaryStr string) (int64, error) {\n\tdecimalValue, err := strconv.ParseInt(binaryStr, 2, 64)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\treturn decimalValue, nil\n}\n\nfunc main() {\n\tbinaryStr := \"1101\"\n\tdecimalValue, err := binaryToDecimal(binaryStr)\n\tif err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t\treturn\n\t}\n\tfmt.Println(\"Decimal Value:\", decimalValue)\n}\n```"
  },
  {
    "task": "Create a function that accepts a dictionary and returns a list of its keys.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc getKeys(m map[string]interface{}) []string {\n\tkeys := make([]string, 0, len(m))\n\tfor key := range m {\n\t\tkeys = append(keys, key)\n\t}\n\treturn keys\n}\n\nfunc main() {\n\tdictionary := map[string]interface{}{\n\t\t\"name\": \"Alice\",\n\t\t\"age\":  30,\n\t\t\"city\": \"Wonderland\",\n\t}\n\tkeys := getKeys(dictionary)\n\tfmt.Println(keys)\n}\n```"
  },
  {
    "task": "Develop a function that returns the concatenation of two strings.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc concatenateStrings(str1, str2 string) string {\n\treturn str1 + str2\n}\n\nfunc main() {\n\tresult := concatenateStrings(\"Hello, \", \"World!\")\n\tfmt.Println(result)\n}\n```"
  },
  {
    "task": "Implement a function that receives a list and returns a new list with duplicates removed.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc removeDuplicates(input []int) []int {\n\tseen := make(map[int]bool)\n\tvar result []int\n\tfor _, value := range input {\n\t\tif !seen[value] {\n\t\t\tseen[value] = true\n\t\t\tresult = append(result, value)\n\t\t}\n\t}\n\treturn result\n}\n\nfunc main() {\n\tlist := []int{1, 2, 2, 3, 4, 4, 5}\n\tuniqueList := removeDuplicates(list)\n\tfmt.Println(uniqueList)\n}\n```"
  },
  {
    "task": "Write a function that returns the intersection of two lists.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc intersection(list1, list2 []int) []int {\n\tset := make(map[int]struct{})\n\tfor _, num := range list1 {\n\t\tset[num] = struct{}{}\n\t}\n\n\tvar result []int\n\tfor _, num := range list2 {\n\t\tif _, exists := set[num]; exists {\n\t\t\tresult = append(result, num)\n\t\t\tdelete(set, num)\n\t\t}\n\t}\n\n\treturn result\n}\n\nfunc main() {\n\tlist1 := []int{1, 2, 3, 4, 5}\n\tlist2 := []int{3, 4, 5, 6, 7}\n\tfmt.Println(intersection(list1, list2))\n}\n```"
  },
  {
    "task": "Create a function that takes an integer and returns whether it is even or odd as a string.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc evenOrOdd(n int) string {\n\tif n%2 == 0 {\n\t\treturn \"even\"\n\t}\n\treturn \"odd\"\n}\n\nfunc main() {\n\tfmt.Println(evenOrOdd(1)) // Output: odd\n\tfmt.Println(evenOrOdd(2)) // Output: even\n}\n```"
  },
  {
    "task": "Design a function that returns the number of vowels in a given string.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc countVowels(s string) int {\n\tvowels := \"aeiouAEIOU\"\n\tcount := 0\n\tfor _, char := range s {\n\t\tif strings.ContainsRune(vowels, char) {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\nfunc main() {\n\tfmt.Println(countVowels(\"Hello World\")) // Example usage\n}\n```"
  },
  {
    "task": "Implement a function that counts the occurrences of a substring within a string and returns it.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc countOccurrences(s, substr string) int {\n\treturn strings.Count(s, substr)\n}\n\nfunc main() {\n\ts := \"hello world, hello universe\"\n\tsubstr := \"hello\"\n\tfmt.Println(countOccurrences(s, substr))\n}\n```"
  },
  {
    "task": "Write a function that accepts a list of numbers and returns them sorted in descending order.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sort\"\n)\n\nfunc sortDescending(numbers []int) []int {\n\tsort.Sort(sort.Reverse(sort.IntSlice(numbers)))\n\treturn numbers\n}\n\nfunc main() {\n\tnumbers := []int{3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5}\n\tsortedNumbers := sortDescending(numbers)\n\tfmt.Println(sortedNumbers)\n}\n```"
  },
  {
    "task": "Create a function that returns the median of a list of numbers.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sort\"\n)\n\nfunc median(numbers []float64) float64 {\n\tsort.Float64s(numbers)\n\tn := len(numbers)\n\tif n%2 == 0 {\n\t\treturn (numbers[n/2-1] + numbers[n/2]) / 2\n\t}\n\treturn numbers[n/2]\n}\n\nfunc main() {\n\tnums := []float64{3, 1, 4, 1, 5, 9, 2}\n\tfmt.Println(median(nums))\n}\n```"
  },
  {
    "task": "Develop a function that receives a sentence and returns it with words in reverse order.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc reverseWords(sentence string) string {\n\twords := strings.Fields(sentence)\n\tfor i, j := 0, len(words)-1; i < j; i, j = i+1, j-1 {\n\t\twords[i], words[j] = words[j], words[i]\n\t}\n\treturn strings.Join(words, \" \")\n}\n\nfunc main() {\n\tsentence := \"Develop a function that receives a sentence\"\n\treversed := reverseWords(sentence)\n\tfmt.Println(reversed)\n}\n```"
  },
  {
    "task": "Implement a function that returns the sum of all elements in a matrix.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc sumMatrix(matrix [][]int) int {\n\tsum := 0\n\tfor _, row := range matrix {\n\t\tfor _, value := range row {\n\t\t\tsum += value\n\t\t}\n\t}\n\treturn sum\n}\n\nfunc main() {\n\tmatrix := [][]int{\n\t\t{1, 2, 3},\n\t\t{4, 5, 6},\n\t\t{7, 8, 9},\n\t}\n\tfmt.Println(sumMatrix(matrix))\n}\n```"
  },
  {
    "task": "Write a function that accepts a string and returns true if it is a palindrome.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc isPalindrome(s string) bool {\n\ts = strings.ToLower(s)\n\tfor i, j := 0, len(s)-1; i < j; i, j = i+1, j-1 {\n\t\tif s[i] != s[j] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc main() {\n\tfmt.Println(isPalindrome(\"Racecar\")) // Output: true\n\tfmt.Println(isPalindrome(\"Hello\"))   // Output: false\n}\n```"
  },
  {
    "task": "Create a function that takes a number and returns its binary representation as a string.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n)\n\nfunc toBinary(n int) string {\n\treturn strconv.FormatInt(int64(n), 2)\n}\n\nfunc main() {\n\tfmt.Println(toBinary(10)) // Example usage\n}\n```"
  },
  {
    "task": "Design a function that returns the number of words in a paragraph.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc countWords(paragraph string) int {\n\twords := strings.Fields(paragraph)\n\treturn len(words)\n}\n\nfunc main() {\n\tparagraph := \"This is a sample paragraph containing multiple words.\"\n\twordCount := countWords(paragraph)\n\tfmt.Println(\"Number of words:\", wordCount)\n}\n```"
  },
  {
    "task": "Implement a function that accepts a list and returns the index of its maximum element.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc indexOfMaxElement(nums []int) int {\n\tif len(nums) == 0 {\n\t\treturn -1\n\t}\n\tmaxIndex := 0\n\tfor i, num := range nums {\n\t\tif num > nums[maxIndex] {\n\t\t\tmaxIndex = i\n\t\t}\n\t}\n\treturn maxIndex\n}\n\nfunc main() {\n\tlist := []int{1, 3, 7, 2, 5}\n\tfmt.Println(indexOfMaxElement(list)) // Output: 2\n}\n```"
  },
  {
    "task": "Write a function that takes a list of grades and returns the highest grade.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc highestGrade(grades []int) int {\n\tif len(grades) == 0 {\n\t\treturn 0\n\t}\n\thighest := grades[0]\n\tfor _, grade := range grades {\n\t\tif grade > highest {\n\t\t\thighest = grade\n\t\t}\n\t}\n\treturn highest\n}\n\nfunc main() {\n\tgrades := []int{85, 92, 88, 74, 96}\n\tfmt.Println(highestGrade(grades))\n}\n```"
  },
  {
    "task": "Create a function that returns the product of all positive integers up to a given number.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc productUpTo(n int) int {\n\tif n <= 0 {\n\t\treturn 0\n\t}\n\tproduct := 1\n\tfor i := 1; i <= n; i++ {\n\t\tproduct *= i\n\t}\n\treturn product\n}\n\nfunc main() {\n\tfmt.Println(productUpTo(5)) // Example usage\n}\n```"
  },
  {
    "task": "Develop a function that receives a string and returns a new string with spaces replaced by hyphens.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc replaceSpaces(input string) string {\n\treturn strings.ReplaceAll(input, \" \", \"-\")\n}\n\nfunc main() {\n\tresult := replaceSpaces(\"Hello World Go Lang\")\n\tfmt.Println(result)\n}\n```"
  },
  {
    "task": "Implement a function that takes a list of integers and returns their sum.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc sum(numbers []int) int {\n\ttotal := 0\n\tfor _, number := range numbers {\n\t\ttotal += number\n\t}\n\treturn total\n}\n\nfunc main() {\n\tnumbers := []int{1, 2, 3, 4, 5}\n\tfmt.Println(sum(numbers))\n}\n```"
  },
  {
    "task": "Write a function that checks if a string is a valid email address and returns a boolean.",
    "code": "```go\npackage main\n\nimport (\n\t\"regexp\"\n)\n\nfunc isValidEmail(email string) bool {\n\tre := regexp.MustCompile(`^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$`)\n\treturn re.MatchString(email)\n}\n```"
  },
  {
    "task": "Create a function that returns the decimal equivalent of a hexadecimal string.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n)\n\nfunc hexToDecimal(hexStr string) (int64, error) {\n\treturn strconv.ParseInt(hexStr, 16, 64)\n}\n\nfunc main() {\n\thexStr := \"1A\"\n\tdecimal, err := hexToDecimal(hexStr)\n\tif err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t} else {\n\t\tfmt.Println(\"Decimal:\", decimal)\n\t}\n}\n```"
  },
  {
    "task": "Design a function that calculates and returns the body mass index based on height and weight.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc calculateBMI(weight, height float64) float64 {\n\treturn weight / (height * height)\n}\n\nfunc main() {\n\tweight := 70.0 // example weight in kilograms\n\theight := 1.75 // example height in meters\n\tbmi := calculateBMI(weight, height)\n\tfmt.Printf(\"The BMI is %.2f\\n\", bmi)\n}\n```"
  },
  {
    "task": "Implement a function that returns the initials of a person's name given a full name.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc getInitials(fullName string) string {\n\twords := strings.Fields(fullName)\n\tinitials := \"\"\n\tfor _, word := range words {\n\t\tinitials += strings.ToUpper(string(word[0]))\n\t}\n\treturn initials\n}\n\nfunc main() {\n\tfmt.Println(getInitials(\"John Doe\")) // Output: JD\n}\n```"
  },
  {
    "task": "Write a function that accepts a list of names and returns them sorted alphabetically.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sort\"\n)\n\nfunc sortNames(names []string) []string {\n\tsort.Strings(names)\n\treturn names\n}\n\nfunc main() {\n\tnames := []string{\"Charlie\", \"Alice\", \"Bob\"}\n\tsortedNames := sortNames(names)\n\tfmt.Println(sortedNames)\n}\n```"
  },
  {
    "task": "Create a function that takes a list of integers and returns a list of their squares.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc squareList(numbers []int) []int {\n\tsquares := make([]int, len(numbers))\n\tfor i, num := range numbers {\n\t\tsquares[i] = num * num\n\t}\n\treturn squares\n}\n\nfunc main() {\n\tnumbers := []int{1, 2, 3, 4, 5}\n\tsquares := squareList(numbers)\n\tfmt.Println(squares)\n}\n```"
  },
  {
    "task": "Develop a function that returns the common elements between two sets.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc commonElements(set1, set2 []int) []int {\n\tm := make(map[int]bool)\n\tfor _, elem := range set1 {\n\t\tm[elem] = true\n\t}\n\n\tvar common []int\n\tfor _, elem := range set2 {\n\t\tif m[elem] {\n\t\t\tcommon = append(common, elem)\n\t\t}\n\t}\n\treturn common\n}\n\nfunc main() {\n\tset1 := []int{1, 2, 3, 4, 5}\n\tset2 := []int{3, 4, 5, 6, 7}\n\tfmt.Println(commonElements(set1, set2))\n}\n```"
  },
  {
    "task": "Implement a function that receives a list of strings and returns the shortest string.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc shortestString(strings []string) string {\n\tif len(strings) == 0 {\n\t\treturn \"\"\n\t}\n\tshortest := strings[0]\n\tfor _, str := range strings {\n\t\tif len(str) < len(shortest) {\n\t\t\tshortest = str\n\t\t}\n\t}\n\treturn shortest\n}\n\nfunc main() {\n\tstrs := []string{\"apple\", \"banana\", \"peach\", \"kiwi\"}\n\tfmt.Println(shortestString(strs))\n}\n```"
  },
  {
    "task": "Write a function that returns the sum of digits of a given integer.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc sumOfDigits(n int) int {\n\tsum := 0\n\tn = int(math.Abs(float64(n))) // Handle negative numbers\n\tfor n != 0 {\n\t\tsum += n % 10\n\t\tn /= 10\n\t}\n\treturn sum\n}\n\nfunc main() {\n\tfmt.Println(sumOfDigits(123))  // Output: 6\n\tfmt.Println(sumOfDigits(-456)) // Output: 15\n}\n```"
  },
  {
    "task": "Create a function that takes a matrix and returns its transpose.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc transpose(matrix [][]int) [][]int {\n\tif len(matrix) == 0 || len(matrix[0]) == 0 {\n\t\treturn [][]int{}\n\t}\n\n\trows, cols := len(matrix), len(matrix[0])\n\ttransposed := make([][]int, cols)\n\tfor i := range transposed {\n\t\ttransposed[i] = make([]int, rows)\n\t}\n\n\tfor i := 0; i < rows; i++ {\n\t\tfor j := 0; j < cols; j++ {\n\t\t\ttransposed[j][i] = matrix[i][j]\n\t\t}\n\t}\n\n\treturn transposed\n}\n\nfunc main() {\n\tmatrix := [][]int{\n\t\t{1, 2, 3},\n\t\t{4, 5, 6},\n\t}\n\ttransposed := transpose(matrix)\n\tfmt.Println(transposed)\n}\n```"
  },
  {
    "task": "Design a function that returns the percentage of uppercase letters in a string.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"unicode\"\n)\n\nfunc percentageUppercase(s string) float64 {\n\tif len(s) == 0 {\n\t\treturn 0.0\n\t}\n\tupperCount := 0\n\tfor _, r := range s {\n\t\tif unicode.IsUpper(r) {\n\t\t\tupperCount++\n\t\t}\n\t}\n\treturn (float64(upperCount) / float64(len(s))) * 100\n}\n\nfunc main() {\n\tstr := \"Hello World!\"\n\tfmt.Printf(\"Percentage of uppercase letters: %.2f%%\\n\", percentageUppercase(str))\n}\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns it with each word capitalized.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"unicode\"\n)\n\nfunc capitalizeWords(input string) string {\n\treturn strings.Map(func(r rune) rune {\n\t\treturn unicode.ToTitle(r)\n\t}, strings.ToLower(input))\n}\n\nfunc main() {\n\tfmt.Println(capitalizeWords(\"hello world\"))\n}\n```"
  },
  {
    "task": "Write a function that takes a list and returns the difference between the max and min values.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc differenceMaxMin(values []int) int {\n\tif len(values) == 0 {\n\t\treturn 0\n\t}\n\tmin, max := values[0], values[0]\n\tfor _, v := range values {\n\t\tif v < min {\n\t\t\tmin = v\n\t\t}\n\t\tif v > max {\n\t\t\tmax = v\n\t\t}\n\t}\n\treturn max - min\n}\n\nfunc main() {\n\tnumbers := []int{10, 4, 8, 15, 23, 42}\n\tfmt.Println(differenceMaxMin(numbers))\n}\n```"
  },
  {
    "task": "Create a function that returns a list containing the first n prime numbers.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc isPrime(num int) bool {\n\tif num <= 1 {\n\t\treturn false\n\t}\n\tif num <= 3 {\n\t\treturn true\n\t}\n\tif num%2 == 0 || num%3 == 0 {\n\t\treturn false\n\t}\n\tfor i := 5; i*i <= num; i += 6 {\n\t\tif num%i == 0 || num%(i+2) == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc firstNPrimes(n int) []int {\n\tprimes := []int{}\n\tnum := 2\n\tfor len(primes) < n {\n\t\tif isPrime(num) {\n\t\t\tprimes = append(primes, num)\n\t\t}\n\t\tnum++\n\t}\n\treturn primes\n}\n\nfunc main() {\n\tn := 10\n\tfmt.Println(firstNPrimes(n))\n}\n```"
  },
  {
    "task": "Develop a function that receives a dictionary and returns a new dictionary with keys and values swapped.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc swapKeysAndValues(original map[string]string) map[string]string {\n\tswapped := make(map[string]string)\n\tfor key, value := range original {\n\t\tswapped[value] = key\n\t}\n\treturn swapped\n}\n\nfunc main() {\n\tdict := map[string]string{\"a\": \"1\", \"b\": \"2\", \"c\": \"3\"}\n\tswappedDict := swapKeysAndValues(dict)\n\tfmt.Println(swappedDict)\n}\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns the frequency of each word.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc wordFrequency(s string) map[string]int {\n\twords := strings.Fields(s)\n\tfrequency := make(map[string]int)\n\n\tfor _, word := range words {\n\t\tfrequency[word]++\n\t}\n\treturn frequency\n}\n\nfunc main() {\n\ttext := \"this is a test this is only a test\"\n\tfreq := wordFrequency(text)\n\tfmt.Println(freq)\n}\n```"
  },
  {
    "task": "Write a function that takes two numbers and returns their greatest common divisor.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc gcd(a, b int) int {\n\tfor b != 0 {\n\t\ta, b = b, a%b\n\t}\n\treturn a\n}\n\nfunc main() {\n\tfmt.Println(gcd(48, 18)) // Example usage\n}\n```"
  },
  {
    "task": "Create a function that returns the number of consonants in a given string.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc countConsonants(s string) int {\n\tconsonants := \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n\tcount := 0\n\tfor _, char := range s {\n\t\tif strings.ContainsRune(consonants, char) {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\nfunc main() {\n\ts := \"Hello, World!\"\n\tfmt.Println(countConsonants(s)) // Example usage\n}\n```"
  },
  {
    "task": "Design a function that checks if a number is a perfect square and returns a boolean.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc isPerfectSquare(n int) bool {\n\tif n < 0 {\n\t\treturn false\n\t}\n\tsqrt := int(math.Sqrt(float64(n)))\n\treturn sqrt*sqrt == n\n}\n\nfunc main() {\n\tfmt.Println(isPerfectSquare(16)) // true\n\tfmt.Println(isPerfectSquare(14)) // false\n}\n```"
  },
  {
    "task": "Implement a function that takes a list of numbers and returns the mode.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc mode(numbers []int) int {\n\tfrequency := make(map[int]int)\n\tfor _, number := range numbers {\n\t\tfrequency[number]++\n\t}\n\n\tmaxCount := 0\n\tmodeValue := numbers[0]\n\tfor number, count := range frequency {\n\t\tif count > maxCount {\n\t\t\tmaxCount = count\n\t\t\tmodeValue = number\n\t\t}\n\t}\n\n\treturn modeValue\n}\n\nfunc main() {\n\tnumbers := []int{1, 2, 3, 4, 1, 2, 2}\n\tfmt.Println(mode(numbers))\n}\n```"
  },
  {
    "task": "Write a function that accepts a string and returns a new string with characters in reverse order.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc reverseString(s string) string {\n\trunes := []rune(s)\n\tfor i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n\t\trunes[i], runes[j] = runes[j], runes[i]\n\t}\n\treturn string(runes)\n}\n\nfunc main() {\n\tfmt.Println(reverseString(\"hello\"))\n}\n```"
  },
  {
    "task": "Create a function that returns the sum of all even numbers in a list.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc sumOfEvens(numbers []int) int {\n\tsum := 0\n\tfor _, num := range numbers {\n\t\tif num%2 == 0 {\n\t\t\tsum += num\n\t\t}\n\t}\n\treturn sum\n}\n\nfunc main() {\n\tnumbers := []int{1, 2, 3, 4, 5, 6}\n\tfmt.Println(sumOfEvens(numbers)) // Output: 12\n}\n```"
  },
  {
    "task": "Develop a function that receives two lists and returns their union.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc union(list1, list2 []int) []int {\n\telements := make(map[int]bool)\n\tvar result []int\n\n\tfor _, elem := range list1 {\n\t\telements[elem] = true\n\t}\n\n\tfor _, elem := range list2 {\n\t\telements[elem] = true\n\t}\n\n\tfor key := range elements {\n\t\tresult = append(result, key)\n\t}\n\n\treturn result\n}\n\nfunc main() {\n\tlist1 := []int{1, 2, 3}\n\tlist2 := []int{3, 4, 5}\n\tresult := union(list1, list2)\n\tfmt.Println(result)\n}\n```"
  },
  {
    "task": "Implement a function that takes a string and returns the number of unique characters.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc countUniqueChars(s string) int {\n\tcharSet := make(map[rune]struct{})\n\tfor _, char := range s {\n\t\tcharSet[char] = struct{}{}\n\t}\n\treturn len(charSet)\n}\n\nfunc main() {\n\tresult := countUniqueChars(\"hello\")\n\tfmt.Println(result)\n}\n```"
  },
  {
    "task": "Write a function that returns the cube of a given number.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc cube(n int) int {\n\treturn n * n * n\n}\n\nfunc main() {\n\tfmt.Println(cube(3)) // Example usage\n}\n```"
  },
  {
    "task": "Create a function that calculates the power of a number given a base and exponent and returns the result.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc power(base, exponent int) int {\n\tresult := 1\n\tfor i := 0; i < exponent; i++ {\n\t\tresult *= base\n\t}\n\treturn result\n}\n\nfunc main() {\n\tbase := 2\n\texponent := 3\n\tfmt.Println(power(base, exponent))\n}\n```"
  },
  {
    "task": "Design a function that accepts a URL and returns its domain name.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/url\"\n\t\"strings\"\n)\n\nfunc getDomainName(rawURL string) (string, error) {\n\tparsedURL, err := url.Parse(rawURL)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\thostname := parsedURL.Hostname()\n\tdomainParts := strings.Split(hostname, \".\")\n\tif len(domainParts) < 2 {\n\t\treturn \"\", fmt.Errorf(\"invalid domain\")\n\t}\n\treturn domainParts[len(domainParts)-2] + \".\" + domainParts[len(domainParts)-1], nil\n}\n\nfunc main() {\n\tdomain, err := getDomainName(\"https://www.example.com/path\")\n\tif err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t} else {\n\t\tfmt.Println(\"Domain:\", domain)\n\t}\n}\n```"
  },
  {
    "task": "Implement a function that takes a sentence and returns it with each letter shifted by one in the alphabet.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc shiftSentence(sentence string) string {\n\tshifted := make([]rune, len(sentence))\n\tfor i, r := range sentence {\n\t\tif r >= 'a' && r <= 'z' {\n\t\t\tshifted[i] = (r-'a'+1)%26 + 'a'\n\t\t} else if r >= 'A' && r <= 'Z' {\n\t\t\tshifted[i] = (r-'A'+1)%26 + 'A'\n\t\t} else {\n\t\t\tshifted[i] = r\n\t\t}\n\t}\n\treturn string(shifted)\n}\n\nfunc main() {\n\tsentence := \"Hello World!\"\n\tfmt.Println(shiftSentence(sentence))\n}\n```"
  },
  {
    "task": "Write a function that checks if a list is sorted and returns a boolean.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc isSorted(list []int) bool {\n\tfor i := 1; i < len(list); i++ {\n\t\tif list[i] < list[i-1] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc main() {\n\tlist := []int{1, 2, 3, 4, 5}\n\tfmt.Println(isSorted(list)) // Output: true\n}\n```"
  },
  {
    "task": "Create a function that returns the longest increasing subsequence in a list of numbers.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc longestIncreasingSubsequence(nums []int) []int {\n\tif len(nums) == 0 {\n\t\treturn []int{}\n\t}\n\n\tdp := make([]int, len(nums))\n\tprevIndex := make([]int, len(nums))\n\tfor i := range dp {\n\t\tdp[i] = 1\n\t\tprevIndex[i] = -1\n\t}\n\n\tmaxLength := 1\n\tmaxIndex := 0\n\n\tfor i := 1; i < len(nums); i++ {\n\t\tfor j := 0; j < i; j++ {\n\t\t\tif nums[i] > nums[j] && dp[i] < dp[j]+1 {\n\t\t\t\tdp[i] = dp[j] + 1\n\t\t\t\tprevIndex[i] = j\n\t\t\t}\n\t\t}\n\t\tif dp[i] > maxLength {\n\t\t\tmaxLength = dp[i]\n\t\t\tmaxIndex = i\n\t\t}\n\t}\n\n\tlis := []int{}\n\tfor i := maxIndex; i != -1; i = prevIndex[i] {\n\t\tlis = append([]int{nums[i]}, lis...)\n\t}\n\n\treturn lis\n}\n\nfunc main() {\n\tnums := []int{10, 9, 2, 5, 3, 7, 101, 18}\n\tlis := longestIncreasingSubsequence(nums)\n\tfmt.Println(lis)\n}\n```"
  },
  {
    "task": "Develop a function that calculates and returns the compound interest for given principal, rate, and time.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc compoundInterest(principal, rate, time float64) float64 {\n\treturn principal * math.Pow((1 + rate/100), time)\n}\n\nfunc main() {\n\tprincipal := 1000.0\n\trate := 5.0\n\ttime := 2.0\n\tinterest := compoundInterest(principal, rate, time)\n\tfmt.Printf(\"Compound Interest: %.2f\\n\", interest)\n}\n```"
  },
  {
    "task": "Implement a function that accepts two strings and returns their longest common substring.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc longestCommonSubstring(s1, s2 string) string {\n\tm, n := len(s1), len(s2)\n\tif m == 0 || n == 0 {\n\t\treturn \"\"\n\t}\n\n\tlcs := make([][]int, m+1)\n\tfor i := range lcs {\n\t\tlcs[i] = make([]int, n+1)\n\t}\n\n\tlength := 0\n\tend := 0\n\n\tfor i := 1; i <= m; i++ {\n\t\tfor j := 1; j <= n; j++ {\n\t\t\tif s1[i-1] == s2[j-1] {\n\t\t\t\tlcs[i][j] = lcs[i-1][j-1] + 1\n\t\t\t\tif lcs[i][j] > length {\n\t\t\t\t\tlength = lcs[i][j]\n\t\t\t\t\tend = i\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn s1[end-length : end]\n}\n\nfunc main() {\n\ts1 := \"abcdef\"\n\ts2 := \"zcdemf\"\n\tfmt.Println(longestCommonSubstring(s1, s2)) // Output: \"cde\"\n}\n```"
  },
  {
    "task": "Write a function that takes a number and returns true if it is a palindrome.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n)\n\nfunc isPalindrome(number int) bool {\n\tstr := strconv.Itoa(number)\n\tfor i, j := 0, len(str)-1; i < j; i, j = i+1, j-1 {\n\t\tif str[i] != str[j] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc main() {\n\tfmt.Println(isPalindrome(121))  // true\n\tfmt.Println(isPalindrome(123))  // false\n}\n```"
  },
  {
    "task": "Create a function that returns the average length of words in a given sentence.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc averageWordLength(sentence string) float64 {\n\twords := strings.Fields(sentence)\n\ttotalLength := 0\n\tfor _, word := range words {\n\t\ttotalLength += len(word)\n\t}\n\tif len(words) == 0 {\n\t\treturn 0\n\t}\n\treturn float64(totalLength) / float64(len(words))\n}\n\nfunc main() {\n\tsentence := \"Create a function that returns the average length of words in a given sentence.\"\n\tfmt.Println(averageWordLength(sentence))\n}\n```"
  },
  {
    "task": "Design a function that checks if a string contains only digits and returns a boolean.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"unicode\"\n)\n\nfunc isDigitsOnly(s string) bool {\n\tfor _, r := range s {\n\t\tif !unicode.IsDigit(r) {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc main() {\n\tfmt.Println(isDigitsOnly(\"12345\")) // true\n\tfmt.Println(isDigitsOnly(\"123a5\")) // false\n}\n```"
  },
  {
    "task": "Implement a function that receives a list of tuples and returns a list of the first elements.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc firstElements(tuples [][2]interface{}) []interface{} {\n\tresult := make([]interface{}, len(tuples))\n\tfor i, tuple := range tuples {\n\t\tresult[i] = tuple[0]\n\t}\n\treturn result\n}\n\nfunc main() {\n\ttuples := [][2]interface{}{\n\t\t{\"a\", 1},\n\t\t{\"b\", 2},\n\t\t{\"c\", 3},\n\t}\n\tfirsts := firstElements(tuples)\n\tfmt.Println(firsts)\n}\n```"
  },
  {
    "task": "Write a function that takes a year and returns the Chinese zodiac sign for that year.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc getChineseZodiac(year int) string {\n\tzodiacs := []string{\"Monkey\", \"Rooster\", \"Dog\", \"Pig\", \"Rat\", \"Ox\", \"Tiger\", \"Rabbit\", \"Dragon\", \"Snake\", \"Horse\", \"Goat\"}\n\treturn zodiacs[year%12]\n}\n\nfunc main() {\n\tyear := 2021\n\tzodiac := getChineseZodiac(year)\n\tfmt.Println(\"The Chinese zodiac sign for the year\", year, \"is\", zodiac)\n}\n```"
  },
  {
    "task": "Create a function that returns the number of trailing zeros in a factorial of a given number.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc trailingZerosInFactorial(n int) int {\n\tcount := 0\n\tfor i := 5; n/i >= 1; i *= 5 {\n\t\tcount += n / i\n\t}\n\treturn count\n}\n\nfunc main() {\n\tfmt.Println(trailingZerosInFactorial(5))  // Output: 1\n\tfmt.Println(trailingZerosInFactorial(10)) // Output: 2\n}\n```"
  },
  {
    "task": "Develop a function that accepts a list and returns a new list with elements multiplied by their index.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc multiplyByIndex(lst []int) []int {\n\tresult := make([]int, len(lst))\n\tfor i, val := range lst {\n\t\tresult[i] = val * i\n\t}\n\treturn result\n}\n\nfunc main() {\n\tinput := []int{1, 2, 3, 4, 5}\n\toutput := multiplyByIndex(input)\n\tfmt.Println(output)\n}\n```"
  },
  {
    "task": "Implement a function that receives a string and returns a dictionary of word lengths.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc wordLengths(s string) map[string]int {\n\twords := strings.Fields(s)\n\tlengths := make(map[string]int)\n\tfor _, word := range words {\n\t\tlengths[word] = len(word)\n\t}\n\treturn lengths\n}\n\nfunc main() {\n\ts := \"Implement a function that receives a string\"\n\tresult := wordLengths(s)\n\tfmt.Println(result)\n}\n```"
  },
  {
    "task": "Write a function that takes a list of integers and returns a list of numbers that are divisible by 3.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc divisibleByThree(nums []int) []int {\n\tvar result []int\n\tfor _, num := range nums {\n\t\tif num%3 == 0 {\n\t\t\tresult = append(result, num)\n\t\t}\n\t}\n\treturn result\n}\n\nfunc main() {\n\tnumbers := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n\tfmt.Println(divisibleByThree(numbers))\n}\n```"
  },
  {
    "task": "Create a function that returns the result of a quadratic equation given its coefficients.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc quadraticEquation(a, b, c float64) (float64, float64) {\n\tdiscriminant := b*b - 4*a*c\n\tif discriminant < 0 {\n\t\treturn math.NaN(), math.NaN()\n\t}\n\troot1 := (-b + math.Sqrt(discriminant)) / (2 * a)\n\troot2 := (-b - math.Sqrt(discriminant)) / (2 * a)\n\treturn root1, root2\n}\n\nfunc main() {\n\troot1, root2 := quadraticEquation(1, -3, 2)\n\tfmt.Printf(\"Root 1: %f, Root 2: %f\\n\", root1, root2)\n}\n```"
  },
  {
    "task": "Design a function that checks if two lists have any elements in common and returns a boolean.",
    "code": "```go\npackage main\n\nfunc haveCommonElements(list1, list2 []int) bool {\n\telementSet := make(map[int]struct{})\n\tfor _, item := range list1 {\n\t\telementSet[item] = struct{}{}\n\t}\n\tfor _, item := range list2 {\n\t\tif _, found := elementSet[item]; found {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n```"
  },
  {
    "task": "Implement a function that accepts a list and returns the sum of its elements using recursion.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc sumRecursive(list []int) int {\n\tif len(list) == 0 {\n\t\treturn 0\n\t}\n\treturn list[0] + sumRecursive(list[1:])\n}\n\nfunc main() {\n\tnumbers := []int{1, 2, 3, 4, 5}\n\tfmt.Println(sumRecursive(numbers)) // Output: 15\n}\n```"
  },
  {
    "task": "Write a function that takes a list of numbers and returns the variance.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc variance(nums []float64) float64 {\n\tif len(nums) == 0 {\n\t\treturn 0\n\t}\n\n\tmean := 0.0\n\tfor _, num := range nums {\n\t\tmean += num\n\t}\n\tmean /= float64(len(nums))\n\n\tvar sumOfSquares float64\n\tfor _, num := range nums {\n\t\tdiff := num - mean\n\t\tsumOfSquares += diff * diff\n\t}\n\n\treturn sumOfSquares / float64(len(nums))\n}\n\nfunc main() {\n\tnumbers := []float64{1, 2, 3, 4, 5}\n\tfmt.Println(variance(numbers))\n}\n```"
  },
  {
    "task": "Create a function that returns the ASCII value of a given character.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc asciiValue(char rune) int {\n    return int(char)\n}\n\nfunc main() {\n    fmt.Println(asciiValue('A')) // Example usage\n}\n```"
  },
  {
    "task": "Develop a function that takes a number and returns the number of bits required for its binary representation.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc bitsRequired(num int) int {\n\tif num == 0 {\n\t\treturn 1\n\t}\n\tcount := 0\n\tfor num != 0 {\n\t\tcount++\n\t\tnum >>= 1\n\t}\n\treturn count\n}\n\nfunc main() {\n\tfmt.Println(bitsRequired(5))  // Output: 3\n}\n```"
  }
]