[
  {
    "task": "Define a class representing a book with attributes for title, author, and number of pages, and a method to display the book's information.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype Book struct {\n\tTitle      string\n\tAuthor     string\n\tNumOfPages int\n}\n\nfunc (b Book) DisplayInfo() {\n\tfmt.Printf(\"Title: %s\\nAuthor: %s\\nPages: %d\\n\", b.Title, b.Author, b.NumOfPages)\n}\n\nfunc main() {\n\tbook := Book{\n\t\tTitle:      \"Go Programming\",\n\t\tAuthor:     \"John Doe\",\n\t\tNumOfPages: 320,\n\t}\n\tbook.DisplayInfo()\n}\n```"
  },
  {
    "task": "Create a class for a bank account that includes attributes for account number, balance, and a method to deposit funds.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype BankAccount struct {\n\tAccountNumber string\n\tBalance       float64\n}\n\nfunc (b *BankAccount) Deposit(amount float64) {\n\tb.Balance += amount\n}\n\nfunc main() {\n\taccount := BankAccount{AccountNumber: \"123456789\", Balance: 1000.0}\n\taccount.Deposit(500.0)\n\tfmt.Printf(\"Account Number: %s, Balance: %.2f\\n\", account.AccountNumber, account.Balance)\n}\n```"
  },
  {
    "task": "Design a class for a vehicle with properties for make, model, and year, and a method to start the engine.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype Vehicle struct {\n\tMake  string\n\tModel string\n\tYear  int\n}\n\nfunc (v *Vehicle) StartEngine() {\n\tfmt.Printf(\"Starting the engine of the %d %s %s.\\n\", v.Year, v.Make, v.Model)\n}\n\nfunc main() {\n\tv := Vehicle{Make: \"Toyota\", Model: \"Corolla\", Year: 2020}\n\tv.StartEngine()\n}\n```"
  },
  {
    "task": "Implement a class that models a student with attributes for name, ID, and grades, and a method to calculate the GPA.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype Student struct {\n\tName   string\n\tID     int\n\tGrades []float64\n}\n\nfunc (s *Student) CalculateGPA() float64 {\n\tif len(s.Grades) == 0 {\n\t\treturn 0.0\n\t}\n\tsum := 0.0\n\tfor _, grade := range s.Grades {\n\t\tsum += grade\n\t}\n\treturn sum / float64(len(s.Grades))\n}\n\nfunc main() {\n\tstudent := Student{\n\t\tName:   \"John Doe\",\n\t\tID:     12345,\n\t\tGrades: []float64{3.5, 4.0, 3.8},\n\t}\n\tfmt.Printf(\"GPA of %s is %.2f\\n\", student.Name, student.CalculateGPA())\n}\n```"
  },
  {
    "task": "Construct a class for a rectangle that has attributes for width and height, and methods to calculate area and perimeter.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype Rectangle struct {\n\twidth, height float64\n}\n\nfunc (r Rectangle) Area() float64 {\n\treturn r.width * r.height\n}\n\nfunc (r Rectangle) Perimeter() float64 {\n\treturn 2*r.width + 2*r.height\n}\n\nfunc main() {\n\trect := Rectangle{width: 5, height: 3}\n\tfmt.Println(\"Area:\", rect.Area())\n\tfmt.Println(\"Perimeter:\", rect.Perimeter())\n}\n```"
  },
  {
    "task": "Formulate a class for a smartphone with properties for brand, model, and battery life, and a method to make a call.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype Smartphone struct {\n\tBrand      string\n\tModel      string\n\tBatteryLife int\n}\n\nfunc (s Smartphone) MakeCall() {\n\tfmt.Println(\"Making a call from\", s.Brand, s.Model)\n}\n\nfunc main() {\n\tphone := Smartphone{Brand: \"BrandX\", Model: \"X100\", BatteryLife: 10}\n\tphone.MakeCall()\n}\n```"
  },
  {
    "task": "Build a class representing a movie with attributes for title, director, and duration, and a method to play the movie.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype Movie struct {\n\tTitle    string\n\tDirector string\n\tDuration int\n}\n\nfunc (m Movie) Play() {\n\tfmt.Printf(\"Playing movie: %s\\n\", m.Title)\n}\n\nfunc main() {\n\tmovie := Movie{\n\t\tTitle:    \"Inception\",\n\t\tDirector: \"Christopher Nolan\",\n\t\tDuration: 148,\n\t}\n\tmovie.Play()\n}\n```"
  },
  {
    "task": "Create a class for an employee with attributes for name, position, and salary, and a method to display their profile.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype Employee struct {\n\tName     string\n\tPosition string\n\tSalary   float64\n}\n\nfunc (e Employee) DisplayProfile() {\n\tfmt.Printf(\"Name: %s\\nPosition: %s\\nSalary: %.2f\\n\", e.Name, e.Position, e.Salary)\n}\n\nfunc main() {\n\te := Employee{Name: \"John Doe\", Position: \"Developer\", Salary: 75000.00}\n\te.DisplayProfile()\n}\n```"
  },
  {
    "task": "Design a class for a library that includes attributes for name, location, and books available, and a method to add a new book.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype Library struct {\n\tName     string\n\tLocation string\n\tBooks    []string\n}\n\nfunc (lib *Library) AddBook(book string) {\n\tlib.Books = append(lib.Books, book)\n}\n\nfunc main() {\n\tmyLibrary := Library{\n\t\tName:     \"City Library\",\n\t\tLocation: \"Downtown\",\n\t\tBooks:    []string{\"1984\", \"To Kill a Mockingbird\"},\n\t}\n\n\tmyLibrary.AddBook(\"Brave New World\")\n\tfmt.Println(myLibrary.Books)\n}\n```"
  },
  {
    "task": "Develop a class for a shopping cart with properties for items and total cost, and methods to add and remove items.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\ntype Item struct {\n\tName  string\n\tPrice float64\n}\n\ntype ShoppingCart struct {\n\titems     []Item\n\ttotalCost float64\n}\n\nfunc (cart *ShoppingCart) AddItem(item Item) {\n\tcart.items = append(cart.items, item)\n\tcart.totalCost += item.Price\n}\n\nfunc (cart *ShoppingCart) RemoveItem(itemName string) {\n\tfor i, item := range cart.items {\n\t\tif item.Name == itemName {\n\t\t\tcart.items = append(cart.items[:i], cart.items[i+1:]...)\n\t\t\tcart.totalCost -= item.Price\n\t\t\tbreak\n\t\t}\n\t}\n}\n\nfunc main() {\n\tcart := ShoppingCart{}\n\tcart.AddItem(Item{\"Apple\", 0.99})\n\tcart.AddItem(Item{\"Banana\", 1.29})\n\tfmt.Println(\"Total Cost:\", cart.totalCost)\n\tcart.RemoveItem(\"Apple\")\n\tfmt.Println(\"Total Cost after removing Apple:\", cart.totalCost)\n}\n```"
  },
  {
    "task": "Implement a class for a thermostat with attributes for current temperature and desired temperature, and a method to adjust the temperature.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype Thermostat struct {\n\tcurrentTemperature float64\n\tdesiredTemperature float64\n}\n\nfunc (t *Thermostat) AdjustTemperature() {\n\tif t.currentTemperature < t.desiredTemperature {\n\t\tfmt.Println(\"Heating up\")\n\t} else if t.currentTemperature > t.desiredTemperature {\n\t\tfmt.Println(\"Cooling down\")\n\t} else {\n\t\tfmt.Println(\"Temperature is optimal\")\n\t}\n}\n\nfunc main() {\n\tthermostat := Thermostat{\n\t\tcurrentTemperature: 68.0,\n\t\tdesiredTemperature: 72.0,\n\t}\n\n\tthermostat.AdjustTemperature()\n}\n```"
  },
  {
    "task": "Formulate a class for a person with attributes for first name, last name, and age, and a method to return the full name.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype Person struct {\n    FirstName string\n    LastName  string\n    Age       int\n}\n\nfunc (p *Person) FullName() string {\n    return p.FirstName + \" \" + p.LastName\n}\n\nfunc main() {\n    person := Person{FirstName: \"John\", LastName: \"Doe\", Age: 30}\n    fmt.Println(person.FullName())\n}\n```"
  },
  {
    "task": "Construct a class for a game character with properties for health, strength, and inventory, and a method to attack.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype GameCharacter struct {\n\tHealth   int\n\tStrength int\n\tInventory []string\n}\n\nfunc (c *GameCharacter) Attack() string {\n\treturn fmt.Sprintf(\"Attacking with strength %d!\", c.Strength)\n}\n\nfunc main() {\n\tcharacter := GameCharacter{\n\t\tHealth:   100,\n\t\tStrength: 50,\n\t\tInventory: []string{\"Sword\", \"Shield\"},\n\t}\n\n\tfmt.Println(character.Attack())\n}\n```"
  },
  {
    "task": "Create a class for a calendar event with attributes for title, date, and location, and a method to reschedule the event.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype CalendarEvent struct {\n\tTitle    string\n\tDate     string\n\tLocation string\n}\n\nfunc (e *CalendarEvent) Reschedule(newDate string) {\n\te.Date = newDate\n}\n\nfunc main() {\n\tevent := CalendarEvent{\n\t\tTitle:    \"Meeting\",\n\t\tDate:     \"2023-10-12\",\n\t\tLocation: \"Room 101\",\n\t}\n\n\tfmt.Println(\"Before Rescheduling:\", event)\n\tevent.Reschedule(\"2023-10-20\")\n\tfmt.Println(\"After Rescheduling:\", event)\n}\n```"
  },
  {
    "task": "Design a class representing a song with properties for title, artist, and duration, and a method to play the song.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype Song struct {\n\tTitle    string\n\tArtist   string\n\tDuration int // in seconds\n}\n\nfunc (s Song) Play() {\n\tfmt.Printf(\"Playing '%s' by %s, duration %d seconds.\\n\", s.Title, s.Artist, s.Duration)\n}\n\nfunc main() {\n\tsong := Song{\n\t\tTitle:    \"Imagine\",\n\t\tArtist:   \"John Lennon\",\n\t\tDuration: 183,\n\t}\n\tsong.Play()\n}\n```"
  },
  {
    "task": "Develop a class for an order in an e-commerce system with attributes for order ID, customer, and items, and a method to calculate total price.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype Customer struct {\n\tName  string\n\tEmail string\n}\n\ntype Item struct {\n\tName  string\n\tPrice float64\n}\n\ntype Order struct {\n\tOrderID  string\n\tCustomer Customer\n\tItems    []Item\n}\n\nfunc (o Order) CalculateTotalPrice() float64 {\n\ttotalPrice := 0.0\n\tfor _, item := range o.Items {\n\t\ttotalPrice += item.Price\n\t}\n\treturn totalPrice\n}\n\nfunc main() {\n\tcustomer := Customer{Name: \"John Doe\", Email: \"john.doe@example.com\"}\n\titems := []Item{\n\t\t{Name: \"Laptop\", Price: 999.99},\n\t\t{Name: \"Mouse\", Price: 25.50},\n\t}\n\torder := Order{OrderID: \"12345\", Customer: customer, Items: items}\n\ttotalPrice := order.CalculateTotalPrice()\n\tfmt.Printf(\"The total price of the order is: $%.2f\\n\", totalPrice)\n}\n```"
  },
  {
    "task": "Build a class for a social media post with attributes for content, author, and timestamp, and a method to like the post.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\ntype Post struct {\n\tContent   string\n\tAuthor    string\n\tTimestamp time.Time\n\tLikes     int\n}\n\nfunc (p *Post) Like() {\n\tp.Likes++\n}\n\nfunc main() {\n\tpost := Post{\n\t\tContent:   \"Hello, world!\",\n\t\tAuthor:    \"JohnDoe\",\n\t\tTimestamp: time.Now(),\n\t}\n\n\tpost.Like()\n\tfmt.Printf(\"Post by %s: %s\\nLikes: %d\\n\", post.Author, post.Content, post.Likes)\n}\n```"
  },
  {
    "task": "Create a class for a computer with properties for processor, RAM, and storage, and a method to display system specifications.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype Computer struct {\n\tProcessor string\n\tRAM       string\n\tStorage   string\n}\n\nfunc (c *Computer) DisplaySpecs() {\n\tfmt.Printf(\"Processor: %s\\nRAM: %s\\nStorage: %s\\n\", c.Processor, c.RAM, c.Storage)\n}\n\nfunc main() {\n\tcomp := Computer{\n\t\tProcessor: \"Intel Core i7\",\n\t\tRAM:       \"16GB\",\n\t\tStorage:   \"512GB SSD\",\n\t}\n\tcomp.DisplaySpecs()\n}\n```"
  },
  {
    "task": "Implement a class for a restaurant menu item with attributes for name, price, and description, and a method to update the price.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype MenuItem struct {\n\tName        string\n\tPrice       float64\n\tDescription string\n}\n\nfunc (m *MenuItem) UpdatePrice(newPrice float64) {\n\tm.Price = newPrice\n}\n\nfunc main() {\n\titem := MenuItem{\n\t\tName:        \"Pasta\",\n\t\tPrice:       12.99,\n\t\tDescription: \"Delicious Italian pasta\",\n\t}\n\n\tfmt.Println(\"Before update:\", item.Price)\n\titem.UpdatePrice(14.99)\n\tfmt.Println(\"After update:\", item.Price)\n}\n```"
  },
  {
    "task": "Design a class for a package delivery with attributes for tracking number, destination, and status, and a method to update the status.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype PackageDelivery struct {\n\tTrackingNumber string\n\tDestination    string\n\tStatus         string\n}\n\nfunc (p *PackageDelivery) UpdateStatus(newStatus string) {\n\tp.Status = newStatus\n}\n\nfunc main() {\n\tpkg := PackageDelivery{\n\t\tTrackingNumber: \"123456789\",\n\t\tDestination:    \"123 Main St, Anytown, USA\",\n\t\tStatus:         \"In Transit\",\n\t}\n\tfmt.Println(\"Before update:\", pkg.Status)\n\t\n\tpkg.UpdateStatus(\"Delivered\")\n\tfmt.Println(\"After update:\", pkg.Status)\n}\n```"
  },
  {
    "task": "Construct a class representing a pet with attributes for species, age, and name, and a method to display its details.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype Pet struct {\n\tSpecies string\n\tAge     int\n\tName    string\n}\n\nfunc (p Pet) DisplayDetails() {\n\tfmt.Printf(\"Species: %s, Age: %d, Name: %s\\n\", p.Species, p.Age, p.Name)\n}\n\nfunc main() {\n\tmyPet := Pet{Species: \"Dog\", Age: 5, Name: \"Buddy\"}\n\tmyPet.DisplayDetails()\n}\n```"
  },
  {
    "task": "Formulate a class for a product in a store with properties for SKU, name, and price, and a method to apply a discount.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype Product struct {\n\tSKU   string\n\tName  string\n\tPrice float64\n}\n\nfunc (p *Product) ApplyDiscount(discount float64) {\n\tp.Price -= p.Price * discount / 100\n}\n\nfunc main() {\n\tproduct := Product{SKU: \"12345\", Name: \"Widget\", Price: 100.0}\n\tfmt.Printf(\"Original Price: %.2f\\n\", product.Price)\n\tproduct.ApplyDiscount(10)\n\tfmt.Printf(\"Discounted Price: %.2f\\n\", product.Price)\n}\n```"
  },
  {
    "task": "Develop a class for a university course with attributes for course code, title, and credits, and a method to enroll a student.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype Course struct {\n\tcourseCode string\n\ttitle      string\n\tcredits    int\n\tstudents   []string\n}\n\nfunc (c *Course) EnrollStudent(studentName string) {\n\tc.students = append(c.students, studentName)\n}\n\nfunc main() {\n\tcourse := Course{\n\t\tcourseCode: \"CS101\",\n\t\ttitle:      \"Introduction to Computer Science\",\n\t\tcredits:    3,\n\t}\n\tcourse.EnrollStudent(\"John Doe\")\n\tfmt.Println(course)\n}\n```"
  },
  {
    "task": "Create a class for a smart light bulb with attributes for color, brightness, and state (on/off), and a method to change the color.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype SmartLightBulb struct {\n\tColor      string\n\tBrightness int\n\tState      bool\n}\n\nfunc (bulb *SmartLightBulb) ChangeColor(newColor string) {\n\tbulb.Color = newColor\n}\n\nfunc main() {\n\tlightBulb := SmartLightBulb{Color: \"White\", Brightness: 100, State: true}\n\tfmt.Println(\"Current Color:\", lightBulb.Color)\n\tlightBulb.ChangeColor(\"Blue\")\n\tfmt.Println(\"New Color:\", lightBulb.Color)\n}\n```"
  },
  {
    "task": "Design a class for a blog post with properties for title, content, and date published, and a method to edit the content.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\ntype BlogPost struct {\n\tTitle       string\n\tContent     string\n\tDatePublished time.Time\n}\n\nfunc (b *BlogPost) EditContent(newContent string) {\n\tb.Content = newContent\n}\n\nfunc main() {\n\tpost := BlogPost{\n\t\tTitle:       \"My First Blog Post\",\n\t\tContent:     \"This is the content of my first blog post.\",\n\t\tDatePublished: time.Now(),\n\t}\n\n\tfmt.Println(\"Original Content:\", post.Content)\n\tpost.EditContent(\"This is the updated content of my first blog post.\")\n\tfmt.Println(\"Updated Content:\", post.Content)\n}\n```"
  },
  {
    "task": "Build a class for a bank transaction with attributes for transaction ID, amount, and type, and a method to reverse the transaction.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype Transaction struct {\n\tID     string\n\tAmount float64\n\tType   string\n}\n\nfunc (t *Transaction) Reverse() {\n\tif t.Type == \"credit\" {\n\t\tt.Type = \"debit\"\n\t} else if t.Type == \"debit\" {\n\t\tt.Type = \"credit\"\n\t}\n\tt.Amount = -t.Amount\n}\n\nfunc main() {\n\ttx := Transaction{\n\t\tID:     \"TX123\",\n\t\tAmount: 100.0,\n\t\tType:   \"credit\",\n\t}\n\n\tfmt.Printf(\"Before Reverse: %+v\\n\", tx)\n\ttx.Reverse()\n\tfmt.Printf(\"After Reverse: %+v\\n\", tx)\n}\n```"
  },
  {
    "task": "Implement a class for a city with properties for name, population, and area, and a method to calculate population density.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype City struct {\n\tName       string\n\tPopulation int\n\tArea       float64\n}\n\nfunc (c *City) PopulationDensity() float64 {\n\treturn float64(c.Population) / c.Area\n}\n\nfunc main() {\n\tcity := City{Name: \"Sample City\", Population: 1000000, Area: 500.5}\n\tfmt.Printf(\"Population Density of %s: %.2f\\n\", city.Name, city.PopulationDensity())\n}\n```"
  },
  {
    "task": "Construct a class for a library member with attributes for member ID, name, and borrowed books, and a method to borrow a book.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype LibraryMember struct {\n\tMemberID    int\n\tName        string\n\tBorrowedBooks []string\n}\n\nfunc (m *LibraryMember) BorrowBook(book string) {\n\tm.BorrowedBooks = append(m.BorrowedBooks, book)\n}\n\nfunc main() {\n\tmember := LibraryMember{\n\t\tMemberID: 1,\n\t\tName: \"John Doe\",\n\t\tBorrowedBooks: []string{},\n\t}\n\tmember.BorrowBook(\"The Great Gatsby\")\n\tfmt.Println(member)\n}\n```"
  },
  {
    "task": "Create a class for a flight reservation with attributes for flight number, passenger name, and seat number, and a method to change the seat.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype FlightReservation struct {\n\tFlightNumber string\n\tPassengerName string\n\tSeatNumber string\n}\n\nfunc (fr *FlightReservation) ChangeSeat(newSeat string) {\n\tfr.SeatNumber = newSeat\n}\n\nfunc main() {\n\treservation := FlightReservation{\n\t\tFlightNumber: \"AB123\",\n\t\tPassengerName: \"John Doe\",\n\t\tSeatNumber: \"12A\",\n\t}\n\tfmt.Println(\"Before seat change:\", reservation.SeatNumber)\n\treservation.ChangeSeat(\"14B\")\n\tfmt.Println(\"After seat change:\", reservation.SeatNumber)\n}\n```"
  },
  {
    "task": "Develop a class for a digital photo album with properties for album name, photos, and a method to add a new photo.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\ntype PhotoAlbum struct {\n\tAlbumName string\n\tPhotos    []string\n}\n\nfunc (pa *PhotoAlbum) AddPhoto(photo string) {\n\tpa.Photos = append(pa.Photos, photo)\n}\n\nfunc main() {\n\talbum := PhotoAlbum{AlbumName: \"Vacation\"}\n\talbum.AddPhoto(\"beach.jpg\")\n\talbum.AddPhoto(\"mountain.jpg\")\n\tfmt.Println(album.AlbumName)\n\tfmt.Println(album.Photos)\n}\n```"
  },
  {
    "task": "Design a class for a task in a to-do list with attributes for description, deadline, and status, and a method to mark it as complete.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype Task struct {\n\tDescription string\n\tDeadline    string\n\tStatus      string\n}\n\nfunc (t *Task) MarkAsComplete() {\n\tt.Status = \"Complete\"\n}\n\nfunc main() {\n\ttask := Task{Description: \"Complete Go assignment\", Deadline: \"2023-10-31\", Status: \"Incomplete\"}\n\tfmt.Println(\"Before:\", task)\n\ttask.MarkAsComplete()\n\tfmt.Println(\"After:\", task)\n}\n```"
  },
  {
    "task": "Formulate a class for a conference speaker with attributes for name, topic, and time slot, and a method to update the time slot.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype Speaker struct {\n\tName    string\n\tTopic   string\n\tTimeSlot string\n}\n\nfunc (s *Speaker) UpdateTimeSlot(newTimeSlot string) {\n\ts.TimeSlot = newTimeSlot\n}\n\nfunc main() {\n\tspeaker := Speaker{Name: \"John Doe\", Topic: \"Go Programming\", TimeSlot: \"10:00 AM\"}\n\tfmt.Println(\"Before update:\", speaker.TimeSlot)\n\tspeaker.UpdateTimeSlot(\"11:00 AM\")\n\tfmt.Println(\"After update:\", speaker.TimeSlot)\n}\n```"
  },
  {
    "task": "Construct a class for a real estate property with attributes for address, price, and square footage, and a method to change the price.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype RealEstateProperty struct {\n\tAddress      string\n\tPrice        float64\n\tSquareFootage int\n}\n\nfunc (p *RealEstateProperty) ChangePrice(newPrice float64) {\n\tp.Price = newPrice\n}\n\nfunc main() {\n\tproperty := RealEstateProperty{\n\t\tAddress:      \"123 Main St\",\n\t\tPrice:        250000,\n\t\tSquareFootage: 2000,\n\t}\n\n\tfmt.Println(\"Original Price:\", property.Price)\n\tproperty.ChangePrice(275000)\n\tfmt.Println(\"Updated Price:\", property.Price)\n}\n```"
  },
  {
    "task": "Create a class for a weather forecast with properties for temperature, humidity, and condition, and a method to update the forecast.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype WeatherForecast struct {\n\tTemperature float64\n\tHumidity    float64\n\tCondition   string\n}\n\nfunc (wf *WeatherForecast) UpdateForecast(temp float64, humidity float64, condition string) {\n\twf.Temperature = temp\n\twf.Humidity = humidity\n\twf.Condition = condition\n}\n\nfunc main() {\n\tforecast := WeatherForecast{Temperature: 20.0, Humidity: 50.0, Condition: \"Sunny\"}\n\tfmt.Println(forecast)\n\tforecast.UpdateForecast(25.0, 60.0, \"Cloudy\")\n\tfmt.Println(forecast)\n}\n```"
  },
  {
    "task": "Build a class for a musical instrument with attributes for type, brand, and model, and a method to play a note.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype MusicalInstrument struct {\n\tType  string\n\tBrand string\n\tModel string\n}\n\nfunc (m *MusicalInstrument) PlayNote(note string) {\n\tfmt.Printf(\"Playing note %s on %s %s %s\\n\", note, m.Brand, m.Model, m.Type)\n}\n\nfunc main() {\n\tinstrument := MusicalInstrument{\n\t\tType:  \"Guitar\",\n\t\tBrand: \"Fender\",\n\t\tModel: \"Stratocaster\",\n\t}\n\n\tinstrument.PlayNote(\"C\")\n}\n```"
  },
  {
    "task": "Design a class for a sports team with attributes for team name, players, and coach, and a method to add a new player.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype SportsTeam struct {\n\tteamName string\n\tplayers  []string\n\tcoach    string\n}\n\nfunc (t *SportsTeam) AddPlayer(player string) {\n\tt.players = append(t.players, player)\n}\n\nfunc main() {\n\tteam := SportsTeam{\n\t\tteamName: \"Sharks\",\n\t\tplayers:  []string{\"Alice\", \"Bob\"},\n\t\tcoach:    \"Coach Smith\",\n\t}\n\n\tteam.AddPlayer(\"Charlie\")\n\tfmt.Println(team)\n}\n```"
  },
  {
    "task": "Implement a class for a podcast episode with attributes for title, duration, and host, and a method to play the episode.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\ntype PodcastEpisode struct {\n\tTitle    string\n\tDuration int // in minutes\n\tHost     string\n}\n\nfunc (p *PodcastEpisode) Play() {\n\tfmt.Printf(\"Playing %s hosted by %s for %d minutes.\\n\", p.Title, p.Host, p.Duration)\n}\n\nfunc main() {\n\tepisode := PodcastEpisode{\n\t\tTitle:    \"The Go Programming Language\",\n\t\tDuration: 60,\n\t\tHost:     \"Jane Doe\",\n\t}\n\tepisode.Play()\n}\n```"
  },
  {
    "task": "Develop a class for a space mission with properties for mission name, crew, and launch date, and a method to launch the mission.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\ntype SpaceMission struct {\n\tMissionName string\n\tCrew        []string\n\tLaunchDate  time.Time\n}\n\nfunc (sm *SpaceMission) Launch() {\n\tfmt.Printf(\"Launching mission %s with crew %v on %s\\n\", sm.MissionName, sm.Crew, sm.LaunchDate.Format(\"2006-01-02\"))\n}\n\nfunc main() {\n\tmission := SpaceMission{\n\t\tMissionName: \"Apollo 11\",\n\t\tCrew:        []string{\"Neil Armstrong\", \"Buzz Aldrin\", \"Michael Collins\"},\n\t\tLaunchDate:  time.Date(1969, 7, 16, 0, 0, 0, 0, time.UTC),\n\t}\n\tmission.Launch()\n}\n```"
  },
  {
    "task": "Create a class for a virtual assistant with attributes for name, language, and skills, and a method to add a new skill.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype VirtualAssistant struct {\n\tName     string\n\tLanguage string\n\tSkills   []string\n}\n\nfunc (va *VirtualAssistant) AddSkill(skill string) {\n\tva.Skills = append(va.Skills, skill)\n}\n\nfunc main() {\n\tassistant := VirtualAssistant{Name: \"Alexa\", Language: \"English\", Skills: []string{\"Music\", \"Weather\"}}\n\tassistant.AddSkill(\"News\")\n\tfmt.Println(assistant)\n}\n```"
  },
  {
    "task": "Formulate a class for a news article with attributes for headline, content, and author, and a method to publish the article.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype NewsArticle struct {\n\tHeadline string\n\tContent  string\n\tAuthor   string\n}\n\nfunc (n *NewsArticle) Publish() {\n\tfmt.Printf(\"Publishing Article:\\nHeadline: %s\\nContent: %s\\nAuthor: %s\\n\", n.Headline, n.Content, n.Author)\n}\n\nfunc main() {\n\tarticle := NewsArticle{\n\t\tHeadline: \"Breaking News\",\n\t\tContent:  \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\",\n\t\tAuthor:   \"John Doe\",\n\t}\n\tarticle.Publish()\n}\n```"
  },
  {
    "task": "Construct a class for a hiking trail with attributes for trail name, length, and difficulty, and a method to update the difficulty.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype HikingTrail struct {\n\tTrailName  string\n\tLength     float64\n\tDifficulty string\n}\n\nfunc (h *HikingTrail) UpdateDifficulty(newDifficulty string) {\n\th.Difficulty = newDifficulty\n}\n\nfunc main() {\n\ttrail := HikingTrail{\n\t\tTrailName:  \"Sunset Peak\",\n\t\tLength:     5.8,\n\t\tDifficulty: \"Moderate\",\n\t}\n\n\tfmt.Println(\"Before update:\", trail.Difficulty)\n\ttrail.UpdateDifficulty(\"Hard\")\n\tfmt.Println(\"After update:\", trail.Difficulty)\n}\n```"
  },
  {
    "task": "Design a class for a subscription service with properties for service name, subscriber count, and subscription fee, and a method to update the fee.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype SubscriptionService struct {\n\tServiceName     string\n\tSubscriberCount int\n\tSubscriptionFee float64\n}\n\nfunc (s *SubscriptionService) UpdateFee(newFee float64) {\n\ts.SubscriptionFee = newFee\n}\n\nfunc main() {\n\tservice := SubscriptionService{\n\t\tServiceName:     \"Premium Service\",\n\t\tSubscriberCount: 1000,\n\t\tSubscriptionFee: 9.99,\n\t}\n\t\n\tfmt.Println(\"Original Fee:\", service.SubscriptionFee)\n\tservice.UpdateFee(12.99)\n\tfmt.Println(\"Updated Fee:\", service.SubscriptionFee)\n}\n```"
  },
  {
    "task": "Build a class for a digital wallet with attributes for balance, transaction history, and a method to add funds.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype DigitalWallet struct {\n\tbalance          float64\n\ttransactionHistory []string\n}\n\nfunc (dw *DigitalWallet) AddFunds(amount float64) {\n\tdw.balance += amount\n\tdw.transactionHistory = append(dw.transactionHistory, fmt.Sprintf(\"Added: $%.2f\", amount))\n}\n\nfunc main() {\n\twallet := DigitalWallet{}\n\twallet.AddFunds(100.0)\n\tfmt.Println(\"Balance:\", wallet.balance)\n\tfmt.Println(\"Transaction History:\", wallet.transactionHistory)\n}\n```"
  },
  {
    "task": "Implement a class for a cooking recipe with attributes for name, ingredients, and instructions, and a method to update the instructions.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype Recipe struct {\n\tName         string\n\tIngredients  []string\n\tInstructions string\n}\n\nfunc (r *Recipe) UpdateInstructions(newInstructions string) {\n\tr.Instructions = newInstructions\n}\n\nfunc main() {\n\trecipe := Recipe{\n\t\tName:         \"Pancakes\",\n\t\tIngredients:  []string{\"Flour\", \"Eggs\", \"Milk\"},\n\t\tInstructions: \"Mix ingredients and cook on skillet.\",\n\t}\n\n\tfmt.Println(\"Original Instructions:\", recipe.Instructions)\n\n\trecipe.UpdateInstructions(\"Whisk ingredients thoroughly and cook on a hot skillet.\")\n\tfmt.Println(\"Updated Instructions:\", recipe.Instructions)\n}\n```"
  },
  {
    "task": "Develop a class for a time zone with properties for zone name, offset, and a method to convert time from another time zone.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\ntype TimeZone struct {\n\tZoneName string\n\tOffset   int // Offset in minutes\n}\n\nfunc (tz *TimeZone) ConvertTime(t time.Time, from *TimeZone) time.Time {\n\toffsetDiff := time.Duration(tz.Offset-from.Offset) * time.Minute\n\treturn t.Add(offsetDiff)\n}\n\nfunc main() {\n\tutc := TimeZone{ZoneName: \"UTC\", Offset: 0}\n\test := TimeZone{ZoneName: \"EST\", Offset: -300}\n\n\tcurrentTime := time.Now()\n\testTime := est.ConvertTime(currentTime, &utc)\n\n\tfmt.Printf(\"Current Time in UTC: %v\\n\", currentTime)\n\tfmt.Printf(\"Current Time in EST: %v\\n\", estTime)\n}\n```"
  },
  {
    "task": "Create a class for a camera with attributes for resolution, brand, and model, and a method to take a picture.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype Camera struct {\n\tResolution string\n\tBrand      string\n\tModel      string\n}\n\nfunc (c Camera) TakePicture() {\n\tfmt.Println(\"Taking a picture with\", c.Brand, c.Model, \"at\", c.Resolution, \"resolution.\")\n}\n\nfunc main() {\n\tcamera := Camera{\n\t\tResolution: \"1080p\",\n\t\tBrand:      \"Canon\",\n\t\tModel:      \"EOS 5D\",\n\t}\n\tcamera.TakePicture()\n}\n```"
  },
  {
    "task": "Design a class for a gaming console with properties for brand, model, and storage capacity, and a method to install a game.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype GamingConsole struct {\n\tBrand          string\n\tModel          string\n\tStorageCapacity int\n}\n\nfunc (gc *GamingConsole) InstallGame(gameName string) {\n\tfmt.Printf(\"Installing %s on %s %s with %dGB storage.\\n\", gameName, gc.Brand, gc.Model, gc.StorageCapacity)\n}\n\nfunc main() {\n\tconsole := GamingConsole{\n\t\tBrand:          \"Sony\",\n\t\tModel:          \"PlayStation 5\",\n\t\tStorageCapacity: 825,\n\t}\n\tconsole.InstallGame(\"The Last of Us Part II\")\n}\n```"
  },
  {
    "task": "Formulate a class for a museum exhibit with attributes for exhibit name, artist, and year, and a method to update the year.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype Exhibit struct {\n\tName   string\n\tArtist string\n\tYear   int\n}\n\nfunc (e *Exhibit) UpdateYear(newYear int) {\n\te.Year = newYear\n}\n\nfunc main() {\n\texhibit := Exhibit{Name: \"Starry Night\", Artist: \"Vincent van Gogh\", Year: 1889}\n\tfmt.Println(exhibit)\n\texhibit.UpdateYear(1890)\n\tfmt.Println(exhibit)\n}\n```"
  },
  {
    "task": "Construct a class for a fitness tracker with attributes for steps, calories burned, and heart rate, and a method to add steps.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\ntype FitnessTracker struct {\n\tSteps       int\n\tCalories    float64\n\tHeartRate   int\n}\n\nfunc (ft *FitnessTracker) AddSteps(steps int) {\n\tft.Steps += steps\n}\n\nfunc main() {\n\ttracker := FitnessTracker{Steps: 0, Calories: 0.0, HeartRate: 0}\n\ttracker.AddSteps(1500)\n\tfmt.Printf(\"Steps: %d, Calories: %.2f, Heart Rate: %d\\n\", tracker.Steps, tracker.Calories, tracker.HeartRate)\n}\n```"
  },
  {
    "task": "Build a class for an aquarium with properties for tank size, fish species, and water temperature, and a method to add a new fish.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\ntype Aquarium struct {\n\tTankSize       float64\n\tFishSpecies    []string\n\tWaterTemperature float64\n}\n\nfunc (a *Aquarium) AddFish(species string) {\n\ta.FishSpecies = append(a.FishSpecies, species)\n}\n\nfunc main() {\n\taquarium := Aquarium{\n\t\tTankSize:       100.0,\n\t\tFishSpecies:    []string{\"Goldfish\", \"Guppy\"},\n\t\tWaterTemperature: 25.0,\n\t}\n\taquarium.AddFish(\"Betta\")\n\tfmt.Println(aquarium.FishSpecies)\n}\n```"
  },
  {
    "task": "Create a class for a chat message with attributes for sender, content, and timestamp, and a method to edit the content.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\ntype ChatMessage struct {\n\tSender    string\n\tContent   string\n\tTimestamp time.Time\n}\n\nfunc (cm *ChatMessage) EditContent(newContent string) {\n\tcm.Content = newContent\n}\n\nfunc main() {\n\tmessage := ChatMessage{\n\t\tSender:    \"Alice\",\n\t\tContent:   \"Hello, World!\",\n\t\tTimestamp: time.Now(),\n\t}\n\n\tfmt.Println(\"Before Edit:\", message.Content)\n\n\tmessage.EditContent(\"Hello, Go!\")\n\tfmt.Println(\"After Edit:\", message.Content)\n}\n```"
  },
  {
    "task": "Design a class for a vending machine with properties for items available, prices, and a method to dispense an item.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype VendingMachine struct {\n\titems  map[string]float64\n\tprices map[string]float64\n}\n\nfunc (vm *VendingMachine) DispenseItem(item string) string {\n\tif _, exists := vm.items[item]; exists {\n\t\treturn fmt.Sprintf(\"Dispensing %s\", item)\n\t}\n\treturn \"Item not available\"\n}\n\nfunc main() {\n\titems := map[string]float64{\n\t\t\"soda\":    1.50,\n\t\t\"chips\":   1.00,\n\t\t\"chocolate\": 1.25,\n\t}\n\n\tprices := map[string]float64{\n\t\t\"soda\":    1.50,\n\t\t\"chips\":   1.00,\n\t\t\"chocolate\": 1.25,\n\t}\n\n\tvm := VendingMachine{items: items, prices: prices}\n\tfmt.Println(vm.DispenseItem(\"soda\"))\n\tfmt.Println(vm.DispenseItem(\"water\"))\n}\n```"
  },
  {
    "task": "Implement a class for a digital clock with attributes for current time, time zone, and a method to set an alarm.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\ntype DigitalClock struct {\n\tCurrentTime time.Time\n\tTimeZone    *time.Location\n\tAlarmTime   time.Time\n}\n\nfunc (dc *DigitalClock) SetAlarm(alarmTime time.Time) {\n\tdc.AlarmTime = alarmTime\n}\n\nfunc main() {\n\tlocation, _ := time.LoadLocation(\"Local\")\n\tclock := DigitalClock{\n\t\tCurrentTime: time.Now(),\n\t\tTimeZone:    location,\n\t}\n\n\talarmTime := time.Date(2023, 10, 10, 7, 0, 0, 0, location)\n\tclock.SetAlarm(alarmTime)\n\n\tfmt.Println(\"Current Time:\", clock.CurrentTime)\n\tfmt.Println(\"Time Zone:\", clock.TimeZone)\n\tfmt.Println(\"Alarm Time:\", clock.AlarmTime)\n}\n```"
  },
  {
    "task": "Develop a class for a historical figure with attributes for name, birthdate, and achievements, and a method to add an achievement.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype HistoricalFigure struct {\n\tname        string\n\tbirthdate   string\n\tachievements []string\n}\n\nfunc (hf *HistoricalFigure) AddAchievement(achievement string) {\n\thf.achievements = append(hf.achievements, achievement)\n}\n\nfunc main() {\n\tfigure := HistoricalFigure{\n\t\tname:        \"Ada Lovelace\",\n\t\tbirthdate:   \"10 December 1815\",\n\t\tachievements: []string{\"First computer programmer\"},\n\t}\n\n\tfigure.AddAchievement(\"Pioneer in computer science\")\n\tfmt.Println(figure)\n}\n```"
  },
  {
    "task": "Formulate a class for a travel itinerary with attributes for destinations, travel dates, and activities, and a method to add a destination.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype Itinerary struct {\n\tDestinations []string\n\tTravelDates  []string\n\tActivities   []string\n}\n\nfunc (i *Itinerary) AddDestination(destination string) {\n\ti.Destinations = append(i.Destinations, destination)\n}\n\nfunc main() {\n\titinerary := Itinerary{}\n\titinerary.AddDestination(\"Paris\")\n\tfmt.Println(itinerary.Destinations)\n}\n```"
  },
  {
    "task": "Construct a class for a fashion brand with properties for brand name, founder, and product lines, and a method to launch a new product line.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype FashionBrand struct {\n\tbrandName   string\n\tfounder     string\n\tproductLines []string\n}\n\nfunc (fb *FashionBrand) LaunchNewProductLine(newLine string) {\n\tfb.productLines = append(fb.productLines, newLine)\n}\n\nfunc main() {\n\tfb := &FashionBrand{\n\t\tbrandName: \"ChicStyle\",\n\t\tfounder: \"Jane Doe\",\n\t\tproductLines: []string{\"Spring Collection\", \"Summer Collection\"},\n\t}\n\n\tfmt.Println(\"Before:\", fb.productLines)\n\n\tfb.LaunchNewProductLine(\"Autumn Collection\")\n\n\tfmt.Println(\"After:\", fb.productLines)\n}\n```"
  },
  {
    "task": "Create a class for a video game with attributes for title, genre, and rating, and a method to update the rating.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype VideoGame struct {\n\tTitle  string\n\tGenre  string\n\tRating float64\n}\n\nfunc (v *VideoGame) UpdateRating(newRating float64) {\n\tv.Rating = newRating\n}\n\nfunc main() {\n\tgame := VideoGame{Title: \"Adventure Quest\", Genre: \"Adventure\", Rating: 4.5}\n\tfmt.Println(\"Before update:\", game)\n\tgame.UpdateRating(4.7)\n\tfmt.Println(\"After update:\", game)\n}\n```"
  },
  {
    "task": "Build a class for a scientific experiment with attributes for experiment name, hypothesis, and results, and a method to record results.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype Experiment struct {\n\tName      string\n\tHypothesis string\n\tResults    string\n}\n\nfunc (e *Experiment) RecordResults(results string) {\n\te.Results = results\n}\n\nfunc main() {\n\texperiment := Experiment{\n\t\tName:      \"Gravity Test\",\n\t\tHypothesis: \"Objects fall at the same rate regardless of mass.\",\n\t}\n\n\texperiment.RecordResults(\"Confirmed hypothesis with multiple trials.\")\n\tfmt.Println(\"Experiment Name:\", experiment.Name)\n\tfmt.Println(\"Hypothesis:\", experiment.Hypothesis)\n\tfmt.Println(\"Results:\", experiment.Results)\n}\n```"
  },
  {
    "task": "Design a class for a gourmet dish with properties for dish name, ingredients, and cooking time, and a method to change cooking time.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype GourmetDish struct {\n\tDishName    string\n\tIngredients []string\n\tCookingTime int\n}\n\nfunc (d *GourmetDish) ChangeCookingTime(newTime int) {\n\td.CookingTime = newTime\n}\n\nfunc main() {\n\tdish := GourmetDish{\n\t\tDishName:    \"Risotto\",\n\t\tIngredients: []string{\"Rice\", \"Parmesan\", \"Mushrooms\"},\n\t\tCookingTime: 30,\n\t}\n\n\tfmt.Println(\"Before:\", dish.CookingTime)\n\n\tdish.ChangeCookingTime(35)\n\n\tfmt.Println(\"After:\", dish.CookingTime)\n}\n```"
  },
  {
    "task": "Implement a class for a political office with attributes for office title, holder, and term length, and a method to change the holder.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype PoliticalOffice struct {\n\tOfficeTitle string\n\tHolder      string\n\tTermLength  int\n}\n\nfunc (p *PoliticalOffice) ChangeHolder(newHolder string) {\n\tp.Holder = newHolder\n}\n\nfunc main() {\n\toffice := PoliticalOffice{\n\t\tOfficeTitle: \"President\",\n\t\tHolder:      \"John Doe\",\n\t\tTermLength:  4,\n\t}\n\n\tfmt.Println(\"Before change:\", office.Holder)\n\toffice.ChangeHolder(\"Jane Smith\")\n\tfmt.Println(\"After change:\", office.Holder)\n}\n```"
  },
  {
    "task": "Develop a class for an astronomical object with properties for name, type, and distance from Earth, and a method to update the distance.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype AstronomicalObject struct {\n\tName           string\n\tType           string\n\tDistanceFromEarth float64\n}\n\nfunc (ao *AstronomicalObject) UpdateDistance(newDistance float64) {\n\tao.DistanceFromEarth = newDistance\n}\n\nfunc main() {\n\tobj := AstronomicalObject{Name: \"Mars\", Type: \"Planet\", DistanceFromEarth: 225.0}\n\tfmt.Println(\"Before update:\", obj)\n\tobj.UpdateDistance(228.0)\n\tfmt.Println(\"After update:\", obj)\n}\n```"
  },
  {
    "task": "Formulate a class for a public transportation route with attributes for route number, stops, and schedule, and a method to add a stop.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype Route struct {\n\trouteNumber string\n\tstops       []string\n\tschedule    map[string]string\n}\n\nfunc (r *Route) AddStop(stop string) {\n\tr.stops = append(r.stops, stop)\n}\n\nfunc main() {\n\troute := Route{\n\t\trouteNumber: \"101\",\n\t\tstops:       []string{\"Stop1\", \"Stop2\"},\n\t\tschedule:    map[string]string{\"Stop1\": \"08:00\", \"Stop2\": \"08:15\"},\n\t}\n\n\troute.AddStop(\"Stop3\")\n\tfmt.Println(route.stops)\n}\n```"
  },
  {
    "task": "Construct a class for a board game with properties for game name, player count, and rules, and a method to change the rules.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype BoardGame struct {\n\tGameName   string\n\tPlayerCount int\n\tRules      string\n}\n\nfunc (bg *BoardGame) ChangeRules(newRules string) {\n\tbg.Rules = newRules\n}\n\nfunc main() {\n\tgame := BoardGame{\n\t\tGameName:   \"Chess\",\n\t\tPlayerCount: 2,\n\t\tRules:      \"Standard rules\",\n\t}\n\n\tfmt.Println(\"Before changing rules:\", game.Rules)\n\tgame.ChangeRules(\"New custom rules\")\n\tfmt.Println(\"After changing rules:\", game.Rules)\n}\n```"
  },
  {
    "task": "Create a class for a customer loyalty program with attributes for program name, points, and rewards, and a method to redeem points.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype LoyaltyProgram struct {\n\tProgramName string\n\tPoints      int\n\tRewards     []string\n}\n\nfunc (lp *LoyaltyProgram) RedeemPoints(pointsToRedeem int) {\n\tif pointsToRedeem <= lp.Points {\n\t\tlp.Points -= pointsToRedeem\n\t\tfmt.Printf(\"Redeemed %d points. Remaining points: %d\\n\", pointsToRedeem, lp.Points)\n\t} else {\n\t\tfmt.Println(\"Not enough points to redeem.\")\n\t}\n}\n\nfunc main() {\n\tprogram := LoyaltyProgram{\n\t\tProgramName: \"SuperSaver\",\n\t\tPoints:      500,\n\t\tRewards:     []string{\"Free Coffee\", \"Discount Voucher\"},\n\t}\n\tprogram.RedeemPoints(100)\n}\n```"
  },
  {
    "task": "Design a class for an art gallery with properties for gallery name, location, and exhibitions, and a method to add a new exhibition.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype ArtGallery struct {\n\tGalleryName string\n\tLocation    string\n\tExhibitions []string\n}\n\nfunc (ag *ArtGallery) AddExhibition(exhibition string) {\n\tag.Exhibitions = append(ag.Exhibitions, exhibition)\n}\n\nfunc main() {\n\tgallery := ArtGallery{\n\t\tGalleryName: \"Modern Art Gallery\",\n\t\tLocation:    \"Downtown\",\n\t\tExhibitions: []string{\"Impressionism\", \"Cubism\"},\n\t}\n\n\tgallery.AddExhibition(\"Surrealism\")\n\tfmt.Println(gallery.Exhibitions)\n}\n```"
  },
  {
    "task": "Build a class for a personal blog with attributes for blog name, posts, and a method to add a new post.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\ntype Blog struct {\n\tName  string\n\tPosts []string\n}\n\nfunc (b *Blog) AddPost(post string) {\n\tb.Posts = append(b.Posts, post)\n}\n\nfunc main() {\n\tmyBlog := Blog{Name: \"My Personal Blog\"}\n\tmyBlog.AddPost(\"First Post\")\n\tfmt.Println(myBlog.Name)\n\tfmt.Println(myBlog.Posts)\n}\n```"
  },
  {
    "task": "Implement a class for a mobile application with properties for app name, version, and developer, and a method to update the version.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype MobileApp struct {\n\tAppName   string\n\tVersion   string\n\tDeveloper string\n}\n\nfunc (app *MobileApp) UpdateVersion(newVersion string) {\n\tapp.Version = newVersion\n}\n\nfunc main() {\n\tapp := MobileApp{\n\t\tAppName:   \"ExampleApp\",\n\t\tVersion:   \"1.0\",\n\t\tDeveloper: \"ExampleDev\",\n\t}\n\n\tfmt.Println(\"Before update:\", app.Version)\n\tapp.UpdateVersion(\"1.1\")\n\tfmt.Println(\"After update:\", app.Version)\n}\n```"
  },
  {
    "task": "Develop a class for a language translator with attributes for source language, target language, and translation method, and a method to translate a text.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype LanguageTranslator struct {\n\tsourceLanguage   string\n\ttargetLanguage   string\n\ttranslationMethod string\n}\n\nfunc (lt *LanguageTranslator) Translate(text string) string {\n\t// Simple placeholder implementation for demonstration\n\treturn fmt.Sprintf(\"Translating '%s' from %s to %s using %s method.\", text, lt.sourceLanguage, lt.targetLanguage, lt.translationMethod)\n}\n\nfunc main() {\n\ttranslator := LanguageTranslator{\n\t\tsourceLanguage:   \"English\",\n\t\ttargetLanguage:   \"Spanish\",\n\t\ttranslationMethod: \"Neural Machine Translation\",\n\t}\n\n\tresult := translator.Translate(\"Hello, world!\")\n\tfmt.Println(result)\n}\n```"
  },
  {
    "task": "Formulate a class for a culinary school with properties for school name, courses offered, and a method to add a new course.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype CulinarySchool struct {\n\tSchoolName    string\n\tCoursesOffered []string\n}\n\nfunc (cs *CulinarySchool) AddCourse(course string) {\n\tcs.CoursesOffered = append(cs.CoursesOffered, course)\n}\n\nfunc main() {\n\tschool := CulinarySchool{\n\t\tSchoolName:    \"Gourmet Academy\",\n\t\tCoursesOffered: []string{\"Baking Basics\", \"Advanced Pastry\"},\n\t}\n\n\tschool.AddCourse(\"Italian Cuisine\")\n\n\tfmt.Println(\"School Name:\", school.SchoolName)\n\tfmt.Println(\"Courses Offered:\", school.CoursesOffered)\n}\n```"
  },
  {
    "task": "Construct a class for a musical band with attributes for band name, members, and genre, and a method to add a new member.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype Band struct {\n\tname    string\n\tmembers []string\n\tgenre   string\n}\n\nfunc (b *Band) AddMember(newMember string) {\n\tb.members = append(b.members, newMember)\n}\n\nfunc main() {\n\tband := Band{\n\t\tname:    \"The Go Getters\",\n\t\tmembers: []string{\"Alice\", \"Bob\"},\n\t\tgenre:   \"Rock\",\n\t}\n\n\tband.AddMember(\"Charlie\")\n\tfmt.Println(band)\n}\n```"
  },
  {
    "task": "Create a class for a television series with properties for series title, episodes, and network, and a method to add a new episode.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\ntype TelevisionSeries struct {\n\tTitle    string\n\tEpisodes []string\n\tNetwork  string\n}\n\nfunc (ts *TelevisionSeries) AddEpisode(episode string) {\n\tts.Episodes = append(ts.Episodes, episode)\n}\n\nfunc main() {\n\tseries := TelevisionSeries{\n\t\tTitle:   \"Example Series\",\n\t\tNetwork: \"Example Network\",\n\t}\n\tseries.AddEpisode(\"Episode 1\")\n\tseries.AddEpisode(\"Episode 2\")\n\tfmt.Println(series)\n}\n```"
  },
  {
    "task": "Design a class for a wildlife reserve with attributes for reserve name, species protected, and area size, and a method to expand the area.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype WildlifeReserve struct {\n\tReserveName    string\n\tSpeciesProtected []string\n\tAreaSize       float64\n}\n\nfunc (wr *WildlifeReserve) ExpandArea(additionalArea float64) {\n\twr.AreaSize += additionalArea\n}\n\nfunc main() {\n\treserve := WildlifeReserve{\n\t\tReserveName:      \"Serengeti\",\n\t\tSpeciesProtected: []string{\"Lion\", \"Elephant\", \"Rhinoceros\"},\n\t\tAreaSize:         14000.0,\n\t}\n\n\tfmt.Printf(\"Initial Area: %.2f\\n\", reserve.AreaSize)\n\treserve.ExpandArea(1000.0)\n\tfmt.Printf(\"Expanded Area: %.2f\\n\", reserve.AreaSize)\n}\n```"
  },
  {
    "task": "Build a class for a luxury car with properties for brand, model, and price, and a method to update the price.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype LuxuryCar struct {\n\tBrand string\n\tModel string\n\tPrice float64\n}\n\nfunc (lc *LuxuryCar) UpdatePrice(newPrice float64) {\n\tlc.Price = newPrice\n}\n\nfunc main() {\n\tcar := LuxuryCar{Brand: \"Mercedes\", Model: \"S-Class\", Price: 100000.00}\n\tfmt.Println(car)\n\tcar.UpdatePrice(120000.00)\n\tfmt.Println(car)\n}\n```"
  },
  {
    "task": "Implement a class for a scientific journal with attributes for journal name, articles, and impact factor, and a method to add a new article.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype ScientificJournal struct {\n\tJournalName string\n\tArticles    []string\n\tImpactFactor float64\n}\n\nfunc (sj *ScientificJournal) AddArticle(article string) {\n\tsj.Articles = append(sj.Articles, article)\n}\n\nfunc main() {\n\tjournal := ScientificJournal{\n\t\tJournalName: \"Nature\",\n\t\tArticles:    []string{},\n\t\tImpactFactor: 42.778,\n\t}\n\n\tjournal.AddArticle(\"New Insights into Quantum Computing\")\n\tfmt.Println(journal)\n}\n```"
  },
  {
    "task": "Develop a class for a historical monument with properties for monument name, location, and year established, and a method to update the location.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype HistoricalMonument struct {\n\tmonumentName    string\n\tlocation        string\n\tyearEstablished int\n}\n\nfunc (hm *HistoricalMonument) updateLocation(newLocation string) {\n\thm.location = newLocation\n}\n\nfunc main() {\n\tmonument := HistoricalMonument{\n\t\tmonumentName:    \"Great Wall of China\",\n\t\tlocation:        \"China\",\n\t\tyearEstablished: 700,\n\t}\n\n\tfmt.Printf(\"Before update: %v\\n\", monument.location)\n\tmonument.updateLocation(\"Beijing, China\")\n\tfmt.Printf(\"After update: %v\\n\", monument.location)\n}\n```"
  },
  {
    "task": "Formulate a class for an educational course with attributes for course title, instructor, and syllabus, and a method to update the syllabus.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype Course struct {\n\tTitle     string\n\tInstructor string\n\tSyllabus  string\n}\n\nfunc (c *Course) UpdateSyllabus(newSyllabus string) {\n\tc.Syllabus = newSyllabus\n}\n\nfunc main() {\n\tcourse := Course{\n\t\tTitle:     \"Introduction to Go\",\n\t\tInstructor: \"Dr. Smith\",\n\t\tSyllabus:  \"Week 1: Basics\",\n\t}\n\n\tfmt.Println(\"Original Syllabus:\", course.Syllabus)\n\tcourse.UpdateSyllabus(\"Week 1: Basics, Week 2: Advanced Topics\")\n\tfmt.Println(\"Updated Syllabus:\", course.Syllabus)\n}\n```"
  },
  {
    "task": "Construct a class for a city park with properties for park name, facilities, and opening hours, and a method to add a new facility.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype CityPark struct {\n\tParkName     string\n\tFacilities   []string\n\tOpeningHours string\n}\n\nfunc (cp *CityPark) AddFacility(facility string) {\n\tcp.Facilities = append(cp.Facilities, facility)\n}\n\nfunc main() {\n\tpark := CityPark{\n\t\tParkName:     \"Central Park\",\n\t\tFacilities:   []string{\"Playground\", \"Basketball Court\"},\n\t\tOpeningHours: \"6 AM - 10 PM\",\n\t}\n\t\n\tpark.AddFacility(\"Swimming Pool\")\n\tfmt.Println(park)\n}\n```"
  },
  {
    "task": "Create a class for a fitness class with attributes for class name, instructor, and schedule, and a method to update the schedule.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype FitnessClass struct {\n\tClassName  string\n\tInstructor string\n\tSchedule   string\n}\n\nfunc (fc *FitnessClass) UpdateSchedule(newSchedule string) {\n\tfc.Schedule = newSchedule\n}\n\nfunc main() {\n\tfitnessClass := FitnessClass{\n\t\tClassName:  \"Yoga\",\n\t\tInstructor: \"Alice\",\n\t\tSchedule:   \"Monday 10 AM\",\n\t}\n\n\tfmt.Println(fitnessClass)\n\tfitnessClass.UpdateSchedule(\"Wednesday 5 PM\")\n\tfmt.Println(fitnessClass)\n}\n```"
  },
  {
    "task": "Design a class for a virtual reality game with properties for game name, platform, and VR compatibility, and a method to change the platform.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype VRGame struct {\n\tGameName      string\n\tPlatform      string\n\tVRCompatible  bool\n}\n\nfunc (game *VRGame) ChangePlatform(newPlatform string) {\n\tgame.Platform = newPlatform\n}\n\nfunc main() {\n\tgame := VRGame{\n\t\tGameName:     \"Adventure VR\",\n\t\tPlatform:     \"PC\",\n\t\tVRCompatible: true,\n\t}\n\tfmt.Println(\"Before:\", game.Platform)\n\n\tgame.ChangePlatform(\"Console\")\n\tfmt.Println(\"After:\", game.Platform)\n}\n```"
  },
  {
    "task": "Build a class for a mountain range with attributes for range name, highest peak, and countries covered, and a method to add a new peak.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype MountainRange struct {\n\tRangeName   string\n\tHighestPeak string\n\tCountries   []string\n\tPeaks       []string\n}\n\nfunc (m *MountainRange) AddNewPeak(peak string) {\n\tm.Peaks = append(m.Peaks, peak)\n}\n\nfunc main() {\n\tmRange := MountainRange{\n\t\tRangeName:   \"Himalayas\",\n\t\tHighestPeak: \"Mount Everest\",\n\t\tCountries:   []string{\"Nepal\", \"China\", \"India\"},\n\t\tPeaks:       []string{\"Mount Everest\"},\n\t}\n\n\tmRange.AddNewPeak(\"K2\")\n\tfmt.Println(mRange)\n}\n```"
  },
  {
    "task": "Implement a class for a documentary film with properties for title, director, and subject, and a method to update the subject.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype DocumentaryFilm struct {\n\tTitle    string\n\tDirector string\n\tSubject  string\n}\n\nfunc (d *DocumentaryFilm) UpdateSubject(newSubject string) {\n\td.Subject = newSubject\n}\n\nfunc main() {\n\tfilm := DocumentaryFilm{\n\t\tTitle:    \"Planet Earth\",\n\t\tDirector: \"David Attenborough\",\n\t\tSubject:  \"Nature\",\n\t}\n\n\tfmt.Println(\"Before update:\", film.Subject)\n\tfilm.UpdateSubject(\"Wildlife\")\n\tfmt.Println(\"After update:\", film.Subject)\n}\n```"
  },
  {
    "task": "Develop a class for a classical music composition with attributes for composition name, composer, and duration, and a method to change the duration.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype ClassicalComposition struct {\n\tName     string\n\tComposer string\n\tDuration int\n}\n\nfunc (c *ClassicalComposition) ChangeDuration(newDuration int) {\n\tc.Duration = newDuration\n}\n\nfunc main() {\n\tcomp := ClassicalComposition{Name: \"Symphony No. 5\", Composer: \"Ludwig van Beethoven\", Duration: 3300}\n\tfmt.Println(comp)\n\tcomp.ChangeDuration(3600)\n\tfmt.Println(comp)\n}\n```"
  },
  {
    "task": "Formulate a class for a public library with properties for library name, books available, and membership, and a method to add a new book.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\ntype Library struct {\n\tName      string\n\tBooks     []string\n\tMembership bool\n}\n\nfunc (l *Library) AddBook(newBook string) {\n\tl.Books = append(l.Books, newBook)\n}\n\nfunc main() {\n\tlib := Library{\n\t\tName:      \"City Library\",\n\t\tBooks:     []string{\"1984\", \"To Kill a Mockingbird\"},\n\t\tMembership: true,\n\t}\n\n\tlib.AddBook(\"The Great Gatsby\")\n\tfmt.Println(lib.Books)\n}\n```"
  },
  {
    "task": "Construct a class for a tech startup with attributes for startup name, founder, and funding, and a method to raise additional funding.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype TechStartup struct {\n\tName    string\n\tFounder string\n\tFunding float64\n}\n\nfunc (ts *TechStartup) RaiseFunding(amount float64) {\n\tts.Funding += amount\n}\n\nfunc main() {\n\tstartup := TechStartup{Name: \"InnovateX\", Founder: \"Alice Smith\", Funding: 500000.0}\n\tfmt.Println(\"Initial Funding:\", startup.Funding)\n\tstartup.RaiseFunding(200000.0)\n\tfmt.Println(\"New Funding:\", startup.Funding)\n}\n```"
  }
]