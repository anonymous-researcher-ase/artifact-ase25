[
  {
    "task": "Create a function that initializes an array with the first ten prime numbers.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc initializePrimes() [10]int {\n\tprimes := [10]int{2, 3, 5, 7, 11, 13, 17, 19, 23, 29}\n\treturn primes\n}\n\nfunc main() {\n\tprimes := initializePrimes()\n\tfmt.Println(primes)\n}\n```"
  },
  {
    "task": "Write a program to reverse the elements of a given array.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc reverseArray(arr []int) []int {\n\tn := len(arr)\n\treversed := make([]int, n)\n\tfor i := 0; i < n; i++ {\n\t\treversed[i] = arr[n-1-i]\n\t}\n\treturn reversed\n}\n\nfunc main() {\n\tarr := []int{1, 2, 3, 4, 5}\n\treversed := reverseArray(arr)\n\tfmt.Println(\"Original array:\", arr)\n\tfmt.Println(\"Reversed array:\", reversed)\n}\n```"
  },
  {
    "task": "Implement an algorithm that finds the maximum value in an array of integers.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc findMax(arr []int) int {\n\tif len(arr) == 0 {\n\t\tpanic(\"array is empty\")\n\t}\n\tmax := arr[0]\n\tfor _, value := range arr {\n\t\tif value > max {\n\t\t\tmax = value\n\t\t}\n\t}\n\treturn max\n}\n\nfunc main() {\n\tnumbers := []int{3, 5, 7, 2, 8, -1, 4, 10, 12}\n\tmaxValue := findMax(numbers)\n\tfmt.Println(\"The maximum value is:\", maxValue)\n}\n```"
  },
  {
    "task": "Design a routine to rotate an array to the right by a given number of steps.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc rotateRight(arr []int, steps int) []int {\n\tn := len(arr)\n\tif n == 0 || steps <= 0 {\n\t\treturn arr\n\t}\n\tsteps = steps % n\n\treturn append(arr[n-steps:], arr[:n-steps]...)\n}\n\nfunc main() {\n\tarr := []int{1, 2, 3, 4, 5}\n\tsteps := 2\n\trotatedArr := rotateRight(arr, steps)\n\tfmt.Println(rotatedArr)\n}\n```"
  },
  {
    "task": "Develop a function to merge two sorted arrays into one sorted array.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc mergeSortedArrays(arr1, arr2 []int) []int {\n    result := make([]int, 0, len(arr1) + len(arr2))\n    i, j := 0, 0\n    for i < len(arr1) && j < len(arr2) {\n        if arr1[i] < arr2[j] {\n            result = append(result, arr1[i])\n            i++\n        } else {\n            result = append(result, arr2[j])\n            j++\n        }\n    }\n    for i < len(arr1) {\n        result = append(result, arr1[i])\n        i++\n    }\n    for j < len(arr2) {\n        result = append(result, arr2[j])\n        j++\n    }\n    return result\n}\n\nfunc main() {\n    arr1 := []int{1, 3, 5, 7}\n    arr2 := []int{2, 4, 6, 8}\n    mergedArray := mergeSortedArrays(arr1, arr2)\n    fmt.Println(mergedArray)\n}\n```"
  },
  {
    "task": "Create a method to remove duplicate values from an array.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc removeDuplicates(arr []int) []int {\n\tuniqueMap := make(map[int]bool)\n\tvar result []int\n\n\tfor _, v := range arr {\n\t\tif _, found := uniqueMap[v]; !found {\n\t\t\tuniqueMap[v] = true\n\t\t\tresult = append(result, v)\n\t\t}\n\t}\n\n\treturn result\n}\n\nfunc main() {\n\tarr := []int{1, 2, 2, 3, 4, 4, 5}\n\tuniqueArr := removeDuplicates(arr)\n\tfmt.Println(uniqueArr)\n}\n```"
  },
  {
    "task": "Write a script to calculate the sum of all elements in an array.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    arr := []int{1, 2, 3, 4, 5}\n    sum := 0\n\n    for _, value := range arr {\n        sum += value\n    }\n\n    fmt.Println(\"Sum of all elements:\", sum)\n}\n```"
  },
  {
    "task": "Construct a function that finds the second largest element in an array.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc secondLargest(arr []int) int {\n\tif len(arr) < 2 {\n\t\treturn math.MinInt\n\t}\n\n\tfirst, second := math.MinInt, math.MinInt\n\tfor _, v := range arr {\n\t\tif v > first {\n\t\t\tsecond = first\n\t\t\tfirst = v\n\t\t} else if v > second && v != first {\n\t\t\tsecond = v\n\t\t}\n\t}\n\n\treturn second\n}\n\nfunc main() {\n\tarr := []int{3, 1, 4, 1, 5, 9, 2, 6, 5}\n\tfmt.Println(secondLargest(arr))\n}\n```"
  },
  {
    "task": "Design a program to check if an array contains a specific value.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc contains(array []int, value int) bool {\n\tfor _, v := range array {\n\t\tif v == value {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\nfunc main() {\n\tarray := []int{1, 2, 3, 4, 5}\n\tvalue := 3\n\n\tif contains(array, value) {\n\t\tfmt.Println(\"Array contains the value.\")\n\t} else {\n\t\tfmt.Println(\"Array does not contain the value.\")\n\t}\n}\n```"
  },
  {
    "task": "Implement a function to sort an array of strings alphabetically.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sort\"\n)\n\nfunc sortStrings(arr []string) []string {\n\tsort.Strings(arr)\n\treturn arr\n}\n\nfunc main() {\n\tstrings := []string{\"banana\", \"apple\", \"cherry\"}\n\tsortedStrings := sortStrings(strings)\n\tfmt.Println(sortedStrings)\n}\n```"
  },
  {
    "task": "Create a method to search for a value in an array using binary search.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc binarySearch(arr []int, target int) int {\n\tleft, right := 0, len(arr)-1\n\tfor left <= right {\n\t\tmid := left + (right-left)/2\n\t\tif arr[mid] == target {\n\t\t\treturn mid\n\t\t} else if arr[mid] < target {\n\t\t\tleft = mid + 1\n\t\t} else {\n\t\t\tright = mid - 1\n\t\t}\n\t}\n\treturn -1\n}\n\nfunc main() {\n\tarr := []int{1, 2, 3, 4, 5, 6, 7, 8, 9}\n\ttarget := 5\n\tindex := binarySearch(arr, target)\n\tfmt.Println(\"Index of target:\", index)\n}\n```"
  },
  {
    "task": "Write a routine to calculate the average of numbers in an array.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc average(numbers []float64) float64 {\n\tvar sum float64\n\tfor _, number := range numbers {\n\t\tsum += number\n\t}\n\treturn sum / float64(len(numbers))\n}\n\nfunc main() {\n\tnumbers := []float64{1.0, 2.0, 3.0, 4.0, 5.0}\n\tavg := average(numbers)\n\tfmt.Printf(\"Average: %.2f\\n\", avg)\n}\n```"
  },
  {
    "task": "Develop a function to find the intersection of two arrays.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc intersection(arr1, arr2 []int) []int {\n\tset := make(map[int]bool)\n\tfor _, v := range arr1 {\n\t\tset[v] = true\n\t}\n\tresult := []int{}\n\tfor _, v := range arr2 {\n\t\tif set[v] {\n\t\t\tresult = append(result, v)\n\t\t\tdelete(set, v) // Ensures unique elements in the intersection\n\t\t}\n\t}\n\treturn result\n}\n\nfunc main() {\n\tarr1 := []int{1, 2, 2, 3, 4}\n\tarr2 := []int{2, 3, 5}\n\tfmt.Println(intersection(arr1, arr2)) // Output: [2 3]\n}\n```"
  },
  {
    "task": "Implement a method to find the union of two arrays without duplicates.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc union(arr1, arr2 []int) []int {\n\telements := make(map[int]bool)\n\tvar result []int\n\n\tfor _, num := range arr1 {\n\t\tif !elements[num] {\n\t\t\telements[num] = true\n\t\t\tresult = append(result, num)\n\t\t}\n\t}\n\n\tfor _, num := range arr2 {\n\t\tif !elements[num] {\n\t\t\telements[num] = true\n\t\t\tresult = append(result, num)\n\t\t}\n\t}\n\n\treturn result\n}\n\nfunc main() {\n\tarr1 := []int{1, 2, 3, 4}\n\tarr2 := []int{3, 4, 5, 6}\n\tunionResult := union(arr1, arr2)\n\tfmt.Println(unionResult)\n}\n```"
  },
  {
    "task": "Create a program that shifts all zeroes in an array to the end.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc shiftZeroesToEnd(arr []int) []int {\n    n := len(arr)\n    lastNonZeroFoundAt := 0\n\n    for i := 0; i < n; i++ {\n        if arr[i] != 0 {\n            arr[lastNonZeroFoundAt], arr[i] = arr[i], arr[lastNonZeroFoundAt]\n            lastNonZeroFoundAt++\n        }\n    }\n    return arr\n}\n\nfunc main() {\n    arr := []int{0, 1, 0, 3, 12}\n    result := shiftZeroesToEnd(arr)\n    fmt.Println(result)\n}\n```"
  },
  {
    "task": "Write a function to split an array into two parts at a given index.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc splitArray(arr []int, index int) ([]int, []int) {\n\tif index < 0 || index > len(arr) {\n\t\treturn arr, nil\n\t}\n\treturn arr[:index], arr[index:]\n}\n\nfunc main() {\n\tarr := []int{1, 2, 3, 4, 5}\n\tpart1, part2 := splitArray(arr, 2)\n\tfmt.Println(\"Part 1:\", part1)\n\tfmt.Println(\"Part 2:\", part2)\n}\n```"
  },
  {
    "task": "Design a script to find all pairs in an array that sum up to a specific target.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc findPairsWithSum(arr []int, target int) [][2]int {\n\tvar pairs [][2]int\n\tseen := make(map[int]bool)\n\n\tfor _, num := range arr {\n\t\tcomplement := target - num\n\t\tif seen[complement] {\n\t\t\tpairs = append(pairs, [2]int{complement, num})\n\t\t}\n\t\tseen[num] = true\n\t}\n\n\treturn pairs\n}\n\nfunc main() {\n\tarr := []int{1, 2, 3, 4, 5, 6, 7, 8, 9}\n\ttarget := 10\n\tpairs := findPairsWithSum(arr, target)\n\tfmt.Println(pairs)\n}\n```"
  },
  {
    "task": "Construct a method to remove all occurrences of a specific value from an array.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc removeOccurrences(arr []int, value int) []int {\n\tvar result []int\n\tfor _, v := range arr {\n\t\tif v != value {\n\t\t\tresult = append(result, v)\n\t\t}\n\t}\n\treturn result\n}\n\nfunc main() {\n\tarr := []int{1, 2, 3, 4, 3, 5, 3}\n\tvalueToRemove := 3\n\tnewArr := removeOccurrences(arr, valueToRemove)\n\tfmt.Println(newArr)\n}\n```"
  },
  {
    "task": "Write a function to find the longest increasing subsequence in an array.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc longestIncreasingSubsequence(arr []int) []int {\n\tn := len(arr)\n\tif n == 0 {\n\t\treturn []int{}\n\t}\n\n\tlengths := make([]int, n)\n\tprevious := make([]int, n)\n\n\tfor i := range lengths {\n\t\tlengths[i] = 1\n\t\tprevious[i] = -1\n\t}\n\n\tmaxLength := 1\n\tmaxIndex := 0\n\n\tfor i := 1; i < n; i++ {\n\t\tfor j := 0; j < i; j++ {\n\t\t\tif arr[i] > arr[j] && lengths[i] < lengths[j]+1 {\n\t\t\t\tlengths[i] = lengths[j] + 1\n\t\t\t\tprevious[i] = j\n\t\t\t}\n\t\t}\n\t\tif lengths[i] > maxLength {\n\t\t\tmaxLength = lengths[i]\n\t\t\tmaxIndex = i\n\t\t}\n\t}\n\n\tlis := []int{}\n\tfor maxIndex != -1 {\n\t\tlis = append([]int{arr[maxIndex]}, lis...)\n\t\tmaxIndex = previous[maxIndex]\n\t}\n\n\treturn lis\n}\n\nfunc main() {\n\tarr := []int{10, 9, 2, 5, 3, 7, 101, 18}\n\tlis := longestIncreasingSubsequence(arr)\n\tfmt.Println(lis)\n}\n```"
  },
  {
    "task": "Develop an algorithm to find the missing number in a sequential array.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc findMissingNumber(arr []int) int {\n\tn := len(arr) + 1\n\ttotal := n * (n + 1) / 2\n\tsum := 0\n\tfor _, num := range arr {\n\t\tsum += num\n\t}\n\treturn total - sum\n}\n\nfunc main() {\n\tarr := []int{1, 2, 4, 5, 6}\n\tmissing := findMissingNumber(arr)\n\tfmt.Println(\"Missing number:\", missing)\n}\n```"
  },
  {
    "task": "Create a program to find the common elements between two arrays.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tarray1 := []int{1, 2, 3, 4, 5}\n\tarray2 := []int{4, 5, 6, 7, 8}\n\n\tcommonElements := findCommonElements(array1, array2)\n\tfmt.Println(\"Common elements:\", commonElements)\n}\n\nfunc findCommonElements(arr1, arr2 []int) []int {\n\telementsMap := make(map[int]bool)\n\tfor _, num := range arr1 {\n\t\telementsMap[num] = true\n\t}\n\n\tvar common []int\n\tfor _, num := range arr2 {\n\t\tif elementsMap[num] {\n\t\t\tcommon = append(common, num)\n\t\t}\n\t}\n\n\treturn common\n}\n```"
  },
  {
    "task": "Implement a function to move all negative numbers to the beginning of an array.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc moveNegativesToFront(arr []int) []int {\n\tresult := make([]int, len(arr))\n\tposIndex := len(arr) - 1\n\tnegIndex := 0\n\n\tfor _, num := range arr {\n\t\tif num < 0 {\n\t\t\tresult[negIndex] = num\n\t\t\tnegIndex++\n\t\t} else {\n\t\t\tresult[posIndex] = num\n\t\t\tposIndex--\n\t\t}\n\t}\n\n\treturn result\n}\n\nfunc main() {\n\tarr := []int{1, -2, 3, -4, 5, -6, 7}\n\tfmt.Println(moveNegativesToFront(arr))\n}\n```"
  },
  {
    "task": "Write a method to check if an array is a palindrome.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc isPalindrome(arr []int) bool {\n\tn := len(arr)\n\tfor i := 0; i < n/2; i++ {\n\t\tif arr[i] != arr[n-i-1] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc main() {\n\tarray := []int{1, 2, 3, 2, 1}\n\tfmt.Println(isPalindrome(array)) // Output: true\n}\n```"
  },
  {
    "task": "Design a routine to create a new array that is the element-wise sum of two input arrays.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc elementWiseSum(arr1, arr2 []int) []int {\n    if len(arr1) != len(arr2) {\n        return nil\n    }\n    result := make([]int, len(arr1))\n    for i := range arr1 {\n        result[i] = arr1[i] + arr2[i]\n    }\n    return result\n}\n\nfunc main() {\n    arr1 := []int{1, 2, 3, 4}\n    arr2 := []int{5, 6, 7, 8}\n    sum := elementWiseSum(arr1, arr2)\n    fmt.Println(sum)\n}\n```"
  },
  {
    "task": "Create a function to find the product of all elements in an array, excluding the current element.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc productExceptSelf(nums []int) []int {\n\tn := len(nums)\n\tresult := make([]int, n)\n\t\n\t// Calculate prefix products\n\tprefix := 1\n\tfor i := 0; i < n; i++ {\n\t\tresult[i] = prefix\n\t\tprefix *= nums[i]\n\t}\n\t\n\t// Calculate suffix products and multiply with prefix results\n\tsuffix := 1\n\tfor i := n - 1; i >= 0; i-- {\n\t\tresult[i] *= suffix\n\t\tsuffix *= nums[i]\n\t}\n\t\n\treturn result\n}\n\nfunc main() {\n\tnums := []int{1, 2, 3, 4}\n\tfmt.Println(productExceptSelf(nums)) // Output: [24, 12, 8, 6]\n}\n```"
  },
  {
    "task": "Develop a script to remove elements from an array that are smaller than a given threshold.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc filterArray(arr []int, threshold int) []int {\n\tvar result []int\n\tfor _, value := range arr {\n\t\tif value >= threshold {\n\t\t\tresult = append(result, value)\n\t\t}\n\t}\n\treturn result\n}\n\nfunc main() {\n\tarr := []int{5, 3, 8, 1, 9, 2, 7}\n\tthreshold := 5\n\tfilteredArr := filterArray(arr, threshold)\n\tfmt.Println(filteredArr)\n}\n```"
  },
  {
    "task": "Implement a method to clone an array without using built-in functions.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc cloneArray(original []int) []int {\n\tcloned := make([]int, len(original))\n\tfor i := 0; i < len(original); i++ {\n\t\tcloned[i] = original[i]\n\t}\n\treturn cloned\n}\n\nfunc main() {\n\toriginalArray := []int{1, 2, 3, 4, 5}\n\tclonedArray := cloneArray(originalArray)\n\tfmt.Println(\"Original Array:\", originalArray)\n\tfmt.Println(\"Cloned Array:  \", clonedArray)\n}\n```"
  },
  {
    "task": "Create a program that rotates a 2D array (matrix) 90 degrees clockwise.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc rotateMatrix(matrix [][]int) [][]int {\n\tn := len(matrix)\n\trotated := make([][]int, n)\n\tfor i := range rotated {\n\t\trotated[i] = make([]int, n)\n\t}\n\n\tfor i := 0; i < n; i++ {\n\t\tfor j := 0; j < n; j++ {\n\t\t\trotated[j][n-1-i] = matrix[i][j]\n\t\t}\n\t}\n\n\treturn rotated\n}\n\nfunc main() {\n\tmatrix := [][]int{\n\t\t{1, 2, 3},\n\t\t{4, 5, 6},\n\t\t{7, 8, 9},\n\t}\n\n\trotatedMatrix := rotateMatrix(matrix)\n\n\tfor _, row := range rotatedMatrix {\n\t\tfmt.Println(row)\n\t}\n}\n```"
  },
  {
    "task": "Write a function to find the kth smallest element in an unsorted array.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sort\"\n)\n\nfunc findKthSmallest(arr []int, k int) int {\n\tif k <= 0 || k > len(arr) {\n\t\treturn -1\n\t}\n\tsort.Ints(arr)\n\treturn arr[k-1]\n}\n\nfunc main() {\n\tarr := []int{3, 1, 4, 2, 5}\n\tk := 3\n\tresult := findKthSmallest(arr, k)\n\tfmt.Println(result)\n}\n```"
  },
  {
    "task": "Design a routine to partition an array into even and odd numbers.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc partitionArray(arr []int) ([]int, []int) {\n\tvar evens []int\n\tvar odds []int\n\t\n\tfor _, num := range arr {\n\t\tif num%2 == 0 {\n\t\t\tevens = append(evens, num)\n\t\t} else {\n\t\t\todds = append(odds, num)\n\t\t}\n\t}\n\t\n\treturn evens, odds\n}\n\nfunc main() {\n\tarr := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n\tevens, odds := partitionArray(arr)\n\tfmt.Println(\"Evens:\", evens)\n\tfmt.Println(\"Odds:\", odds)\n}\n```"
  },
  {
    "task": "Create a method to merge overlapping intervals in an array.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sort\"\n)\n\nfunc mergeIntervals(intervals [][]int) [][]int {\n\tif len(intervals) == 0 {\n\t\treturn intervals\n\t}\n\n\tsort.Slice(intervals, func(i, j int) bool {\n\t\treturn intervals[i][0] < intervals[j][0]\n\t})\n\n\tmerged := [][]int{intervals[0]}\n\n\tfor _, interval := range intervals[1:] {\n\t\tlastMerged := merged[len(merged)-1]\n\t\tif interval[0] <= lastMerged[1] {\n\t\t\tif interval[1] > lastMerged[1] {\n\t\t\t\tlastMerged[1] = interval[1]\n\t\t\t}\n\t\t} else {\n\t\t\tmerged = append(merged, interval)\n\t\t}\n\t}\n\n\treturn merged\n}\n\nfunc main() {\n\tintervals := [][]int{{1, 3}, {2, 6}, {8, 10}, {15, 18}}\n\tresult := mergeIntervals(intervals)\n\tfmt.Println(result)\n}\n```"
  },
  {
    "task": "Develop a function to count the frequency of each unique element in an array.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc countFrequencies(arr []int) map[int]int {\n\tfrequencyMap := make(map[int]int)\n\tfor _, element := range arr {\n\t\tfrequencyMap[element]++\n\t}\n\treturn frequencyMap\n}\n\nfunc main() {\n\tarray := []int{1, 2, 2, 3, 4, 4, 4, 5}\n\tfrequencies := countFrequencies(array)\n\tfmt.Println(frequencies)\n}\n```"
  },
  {
    "task": "Write a program to generate all possible subsets of an array.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc subsets(nums []int) [][]int {\n\tresult := [][]int{{}}\n\tfor _, num := range nums {\n\t\tnewSubsets := [][]int{}\n\t\tfor _, subset := range result {\n\t\t\tnewSubset := append([]int{}, subset...)\n\t\t\tnewSubset = append(newSubset, num)\n\t\t\tnewSubsets = append(newSubsets, newSubset)\n\t\t}\n\t\tresult = append(result, newSubsets...)\n\t}\n\treturn result\n}\n\nfunc main() {\n\tarr := []int{1, 2, 3}\n\tfmt.Println(subsets(arr))\n}\n```"
  },
  {
    "task": "Implement a routine to cyclically permute the elements of an array.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc cyclicPermute(arr []int) []int {\n\tif len(arr) == 0 {\n\t\treturn arr\n\t}\n\tfirst := arr[0]\n\tcopy(arr, arr[1:])\n\tarr[len(arr)-1] = first\n\treturn arr\n}\n\nfunc main() {\n\tarr := []int{1, 2, 3, 4, 5}\n\tfmt.Println(\"Original array:\", arr)\n\tpermutedArray := cyclicPermute(arr)\n\tfmt.Println(\"Cyclically permuted array:\", permutedArray)\n}\n```"
  },
  {
    "task": "Create a function that checks if two arrays are equal regardless of element order.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sort\"\n)\n\nfunc arraysEqual(arr1, arr2 []int) bool {\n\tif len(arr1) != len(arr2) {\n\t\treturn false\n\t}\n\n\tsortedArr1 := make([]int, len(arr1))\n\tsortedArr2 := make([]int, len(arr2))\n\n\tcopy(sortedArr1, arr1)\n\tcopy(sortedArr2, arr2)\n\n\tsort.Ints(sortedArr1)\n\tsort.Ints(sortedArr2)\n\n\tfor i := range sortedArr1 {\n\t\tif sortedArr1[i] != sortedArr2[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc main() {\n\tarr1 := []int{1, 2, 3, 4}\n\tarr2 := []int{4, 3, 2, 1}\n\tfmt.Println(arraysEqual(arr1, arr2)) // Output: true\n\n\tarr3 := []int{1, 2, 3}\n\tarr4 := []int{1, 2, 2}\n\tfmt.Println(arraysEqual(arr3, arr4)) // Output: false\n}\n```"
  },
  {
    "task": "Design a script to initialize an array with random integers within a specified range.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n\t\"time\"\n)\n\nfunc main() {\n\trand.Seed(time.Now().UnixNano())\n\tarraySize := 10\n\tmin := 1\n\tmax := 100\n\n\tarray := make([]int, arraySize)\n\tfor i := 0; i < arraySize; i++ {\n\t\tarray[i] = rand.Intn(max-min+1) + min\n\t}\n\n\tfmt.Println(array)\n}\n```"
  },
  {
    "task": "Write a method to convert an array of integers to a single concatenated number.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n)\n\nfunc concatenateArray(arr []int) int {\n\tvar result string\n\tfor _, num := range arr {\n\t\tresult += strconv.Itoa(num)\n\t}\n\tconcatenatedNumber, _ := strconv.Atoi(result)\n\treturn concatenatedNumber\n}\n\nfunc main() {\n\tarr := []int{1, 2, 3, 4, 5}\n\tfmt.Println(concatenateArray(arr))\n}\n```"
  },
  {
    "task": "Develop a function to find the median value of an unsorted array.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sort\"\n)\n\nfunc findMedian(arr []int) float64 {\n\tsort.Ints(arr)\n\tn := len(arr)\n\tif n%2 == 0 {\n\t\treturn float64(arr[n/2-1]+arr[n/2]) / 2\n\t}\n\treturn float64(arr[n/2])\n}\n\nfunc main() {\n\tarr := []int{5, 3, 8, 1, 9}\n\tmedian := findMedian(arr)\n\tfmt.Println(\"Median:\", median)\n}\n```"
  },
  {
    "task": "Create a routine to determine if an array is sorted in ascending order.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc isSorted(arr []int) bool {\n\tfor i := 0; i < len(arr)-1; i++ {\n\t\tif arr[i] > arr[i+1] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc main() {\n\tarr := []int{1, 2, 3, 4, 5}\n\tfmt.Println(isSorted(arr)) // true\n\n\tarr = []int{5, 3, 2, 1}\n\tfmt.Println(isSorted(arr)) // false\n}\n```"
  },
  {
    "task": "Implement a method to find the longest contiguous subarray with equal number of 0s and 1s.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc findMaxLength(nums []int) int {\n\tcountMap := make(map[int]int)\n\tcountMap[0] = -1\n\tmaxLength, count := 0, 0\n\n\tfor i, num := range nums {\n\t\tif num == 0 {\n\t\t\tcount--\n\t\t} else {\n\t\t\tcount++\n\t\t}\n\n\t\tif prevIndex, found := countMap[count]; found {\n\t\t\tmaxLength = max(maxLength, i-prevIndex)\n\t\t} else {\n\t\t\tcountMap[count] = i\n\t\t}\n\t}\n\n\treturn maxLength\n}\n\nfunc max(a, b int) int {\n\tif a > b {\n\t\treturn a\n\t}\n\treturn b\n}\n\nfunc main() {\n\tarr := []int{0, 1, 0, 1, 0, 1, 1}\n\tfmt.Println(findMaxLength(arr))\n}\n```"
  },
  {
    "task": "Write a function to interleave two arrays of equal length.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc interleaveArrays(arr1, arr2 []int) []int {\n\tn := len(arr1)\n\tinterleaved := make([]int, 2*n)\n\tfor i := 0; i < n; i++ {\n\t\tinterleaved[2*i] = arr1[i]\n\t\tinterleaved[2*i+1] = arr2[i]\n\t}\n\treturn interleaved\n}\n\nfunc main() {\n\tarr1 := []int{1, 3, 5}\n\tarr2 := []int{2, 4, 6}\n\tresult := interleaveArrays(arr1, arr2)\n\tfmt.Println(result)\n}\n```"
  },
  {
    "task": "Design a program to replace each element in an array with the next greatest element.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc replaceWithNextGreatest(arr []int) {\n\tn := len(arr)\n\tif n == 0 {\n\t\treturn\n\t}\n\n\t// Initialize the greatest element\n\tgreatest := arr[n-1]\n\tarr[n-1] = -1\n\n\t// Traverse the array from right to left\n\tfor i := n - 2; i >= 0; i-- {\n\t\ttemp := arr[i]\n\t\tarr[i] = greatest\n\t\tif temp > greatest {\n\t\t\tgreatest = temp\n\t\t}\n\t}\n}\n\nfunc main() {\n\tarr := []int{16, 17, 4, 3, 5, 2}\n\treplaceWithNextGreatest(arr)\n\tfmt.Println(arr) // Output: [17, 5, 5, 5, 2, -1]\n}\n```"
  },
  {
    "task": "Create a function to calculate the dot product of two numeric arrays.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc dotProduct(a, b []int) int {\n\tif len(a) != len(b) {\n\t\tpanic(\"Arrays must be of the same length\")\n\t}\n\tresult := 0\n\tfor i := 0; i < len(a); i++ {\n\t\tresult += a[i] * b[i]\n\t}\n\treturn result\n}\n\nfunc main() {\n\tarr1 := []int{1, 2, 3}\n\tarr2 := []int{4, 5, 6}\n\tfmt.Println(dotProduct(arr1, arr2))\n}\n```"
  },
  {
    "task": "Develop a script to find the first recurring element in an array.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc findFirstRecurringElement(arr []int) int {\n\tseen := make(map[int]bool)\n\tfor _, value := range arr {\n\t\tif seen[value] {\n\t\t\treturn value\n\t\t}\n\t\tseen[value] = true\n\t}\n\treturn -1 // Indicates no recurring element found\n}\n\nfunc main() {\n\tarr := []int{2, 5, 1, 2, 3, 5, 1, 2, 4}\n\tresult := findFirstRecurringElement(arr)\n\tfmt.Println(\"First recurring element:\", result)\n}\n```"
  },
  {
    "task": "Write a method to check if an array is a subset of another array.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc isSubset(arr1, arr2 []int) bool {\n\telementMap := make(map[int]bool)\n\tfor _, elem := range arr2 {\n\t\telementMap[elem] = true\n\t}\n\tfor _, elem := range arr1 {\n\t\tif !elementMap[elem] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc main() {\n\tarr1 := []int{1, 2, 3}\n\tarr2 := []int{1, 2, 3, 4, 5}\n\tfmt.Println(isSubset(arr1, arr2)) // true\n\n\tarr3 := []int{1, 6, 3}\n\tfmt.Println(isSubset(arr3, arr2)) // false\n}\n```"
  },
  {
    "task": "Implement a function to add a specific value to each element in an array.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc addValueToArray(arr []int, value int) []int {\n    for i := range arr {\n        arr[i] += value\n    }\n    return arr\n}\n\nfunc main() {\n    arr := []int{1, 2, 3, 4, 5}\n    valueToAdd := 10\n    result := addValueToArray(arr, valueToAdd)\n    fmt.Println(result)\n}\n```"
  },
  {
    "task": "Create a program that finds the largest product of three numbers in an array.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sort\"\n)\n\nfunc maxProductOfThree(nums []int) int {\n\tsort.Ints(nums)\n\tn := len(nums)\n\treturn max(nums[0]*nums[1]*nums[n-1], nums[n-1]*nums[n-2]*nums[n-3])\n}\n\nfunc max(a, b int) int {\n\tif a > b {\n\t\treturn a\n\t}\n\treturn b\n}\n\nfunc main() {\n\tarray := []int{1, 10, 2, 6, 5, 3}\n\tresult := maxProductOfThree(array)\n\tfmt.Println(\"Largest product of three numbers:\", result)\n}\n```"
  },
  {
    "task": "Design a routine to find all unique permutations of an array.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sort\"\n)\n\nfunc permuteUnique(nums []int) [][]int {\n\tvar result [][]int\n\tsort.Ints(nums)\n\tbacktrack(nums, []int{}, &result, make([]bool, len(nums)))\n\treturn result\n}\n\nfunc backtrack(nums, current []int, result *[][]int, used []bool) {\n\tif len(current) == len(nums) {\n\t\tperm := make([]int, len(current))\n\t\tcopy(perm, current)\n\t\t*result = append(*result, perm)\n\t\treturn\n\t}\n\tfor i := 0; i < len(nums); i++ {\n\t\tif used[i] || (i > 0 && nums[i] == nums[i-1] && !used[i-1]) {\n\t\t\tcontinue\n\t\t}\n\t\tused[i] = true\n\t\tcurrent = append(current, nums[i])\n\t\tbacktrack(nums, current, result, used)\n\t\tcurrent = current[:len(current)-1]\n\t\tused[i] = false\n\t}\n}\n\nfunc main() {\n\tnums := []int{1, 1, 2}\n\tpermutations := permuteUnique(nums)\n\tfor _, perm := range permutations {\n\t\tfmt.Println(perm)\n\t}\n}\n```"
  },
  {
    "task": "Write a function to transpose a square matrix represented as a 2D array.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc transpose(matrix [][]int) [][]int {\n\tn := len(matrix)\n\ttransposed := make([][]int, n)\n\tfor i := range transposed {\n\t\ttransposed[i] = make([]int, n)\n\t}\n\n\tfor i := 0; i < n; i++ {\n\t\tfor j := 0; j < n; j++ {\n\t\t\ttransposed[j][i] = matrix[i][j]\n\t\t}\n\t}\n\n\treturn transposed\n}\n\nfunc main() {\n\tmatrix := [][]int{\n\t\t{1, 2, 3},\n\t\t{4, 5, 6},\n\t\t{7, 8, 9},\n\t}\n\ttransposedMatrix := transpose(matrix)\n\tfor _, row := range transposedMatrix {\n\t\tfmt.Println(row)\n\t}\n}\n```"
  },
  {
    "task": "Develop a method to find the longest common prefix in an array of strings.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc longestCommonPrefix(strs []string) string {\n\tif len(strs) == 0 {\n\t\treturn \"\"\n\t}\n\tprefix := strs[0]\n\tfor _, str := range strs[1:] {\n\t\tfor len(str) < len(prefix) || str[:len(prefix)] != prefix {\n\t\t\tif len(prefix) == 0 {\n\t\t\t\treturn \"\"\n\t\t\t}\n\t\t\tprefix = prefix[:len(prefix)-1]\n\t\t}\n\t}\n\treturn prefix\n}\n\nfunc main() {\n\tstrs := []string{\"flower\", \"flow\", \"flight\"}\n\tfmt.Println(longestCommonPrefix(strs)) // Output: \"fl\"\n}\n```"
  },
  {
    "task": "Implement a function to flatten a multi-dimensional array into a single array.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc flatten(arr interface{}) []interface{} {\n\tvar result []interface{}\n\tswitch v := arr.(type) {\n\tcase []interface{}:\n\t\tfor _, item := range v {\n\t\t\tresult = append(result, flatten(item)...)\n\t\t}\n\tdefault:\n\t\tresult = append(result, v)\n\t}\n\treturn result\n}\n\nfunc main() {\n\tnestedArray := []interface{}{1, []interface{}{2, 3, []interface{}{4, 5}}, 6}\n\tflattenedArray := flatten(nestedArray)\n\tfmt.Println(flattenedArray) // Output: [1 2 3 4 5 6]\n}\n```"
  },
  {
    "task": "Create a script to shift elements of an array to the left by a given number of positions.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc shiftLeft(arr []int, positions int) []int {\n\tn := len(arr)\n\tif n == 0 || positions <= 0 {\n\t\treturn arr\n\t}\n\tpositions = positions % n\n\treturn append(arr[positions:], arr[:positions]...)\n}\n\nfunc main() {\n\tarr := []int{1, 2, 3, 4, 5}\n\tpositions := 2\n\tresult := shiftLeft(arr, positions)\n\tfmt.Println(result)\n}\n```"
  },
  {
    "task": "Write a routine to sort an array of objects based on a specific property.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sort\"\n)\n\ntype Object struct {\n\tName  string\n\tValue int\n}\n\nfunc main() {\n\tobjects := []Object{\n\t\t{\"Object1\", 5},\n\t\t{\"Object2\", 3},\n\t\t{\"Object3\", 8},\n\t\t{\"Object4\", 1},\n\t}\n\n\tsort.Slice(objects, func(i, j int) bool {\n\t\treturn objects[i].Value < objects[j].Value\n\t})\n\n\tfor _, obj := range objects {\n\t\tfmt.Printf(\"Name: %s, Value: %d\\n\", obj.Name, obj.Value)\n\t}\n}\n```"
  },
  {
    "task": "Design a program to find the smallest missing positive integer in an array.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc findSmallestMissingPositive(arr []int) int {\n\tn := len(arr)\n\tfor i := 0; i < n; i++ {\n\t\tfor arr[i] > 0 && arr[i] <= n && arr[arr[i]-1] != arr[i] {\n\t\t\tarr[arr[i]-1], arr[i] = arr[i], arr[arr[i]-1]\n\t\t}\n\t}\n\tfor i := 0; i < n; i++ {\n\t\tif arr[i] != i+1 {\n\t\t\treturn i + 1\n\t\t}\n\t}\n\treturn n + 1\n}\n\nfunc main() {\n\tarr := []int{3, 4, -1, 1}\n\tfmt.Println(findSmallestMissingPositive(arr))\n}\n```"
  },
  {
    "task": "Create a function to calculate the cumulative sum of an array.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc cumulativeSum(arr []int) []int {\n    result := make([]int, len(arr))\n    if len(arr) == 0 {\n        return result\n    }\n    result[0] = arr[0]\n    for i := 1; i < len(arr); i++ {\n        result[i] = result[i-1] + arr[i]\n    }\n    return result\n}\n\nfunc main() {\n    arr := []int{1, 2, 3, 4, 5}\n    fmt.Println(cumulativeSum(arr))\n}\n```"
  },
  {
    "task": "Develop a function to remove consecutive duplicate elements in an array.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc removeConsecutiveDuplicates(arr []int) []int {\n\tif len(arr) == 0 {\n\t\treturn arr\n\t}\n\n\tresult := []int{arr[0]}\n\tfor i := 1; i < len(arr); i++ {\n\t\tif arr[i] != arr[i-1] {\n\t\t\tresult = append(result, arr[i])\n\t\t}\n\t}\n\treturn result\n}\n\nfunc main() {\n\tarr := []int{1, 1, 2, 2, 3, 1, 1, 4, 4, 5}\n\tfmt.Println(removeConsecutiveDuplicates(arr))\n}\n```"
  },
  {
    "task": "Implement a method to find the majority element in an array, if any.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc majorityElement(nums []int) int {\n\tcounts := make(map[int]int)\n\tfor _, num := range nums {\n\t\tcounts[num]++\n\t\tif counts[num] > len(nums)/2 {\n\t\t\treturn num\n\t\t}\n\t}\n\treturn -1 // No majority element\n}\n\nfunc main() {\n\tnums := []int{2, 2, 1, 1, 1, 2, 2}\n\tfmt.Println(majorityElement(nums)) // Output: 2\n}\n```"
  },
  {
    "task": "Write a script to split an array into chunks of a given size.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc chunkArray(arr []int, size int) [][]int {\n\tvar chunks [][]int\n\tfor size < len(arr) {\n\t\tarr, chunks = arr[size:], append(chunks, arr[0:size:size])\n\t}\n\tchunks = append(chunks, arr)\n\treturn chunks\n}\n\nfunc main() {\n\tarr := []int{1, 2, 3, 4, 5, 6, 7, 8, 9}\n\tsize := 3\n\tchunks := chunkArray(arr, size)\n\tfmt.Println(chunks)\n}\n```"
  },
  {
    "task": "Create a program to calculate the difference between the largest and smallest values in an array.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tarr := []int{10, 3, 5, 6, 1, 9}\n\tif len(arr) == 0 {\n\t\tfmt.Println(\"Array is empty\")\n\t\treturn\n\t}\n\n\tmin, max := arr[0], arr[0]\n\tfor _, value := range arr[1:] {\n\t\tif value < min {\n\t\t\tmin = value\n\t\t}\n\t\tif value > max {\n\t\t\tmax = value\n\t\t}\n\t}\n\n\tdifference := max - min\n\tfmt.Println(\"The difference between the largest and smallest values is:\", difference)\n}\n```"
  },
  {
    "task": "Design a routine to find the starting index of a target subarray in a larger array.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc findSubarrayIndex(arr, subarr []int) int {\n\tarrLen := len(arr)\n\tsubarrLen := len(subarr)\n\n\tfor i := 0; i <= arrLen-subarrLen; i++ {\n\t\tmatch := true\n\t\tfor j := 0; j < subarrLen; j++ {\n\t\t\tif arr[i+j] != subarr[j] {\n\t\t\t\tmatch = false\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif match {\n\t\t\treturn i\n\t\t}\n\t}\n\treturn -1\n}\n\nfunc main() {\n\tarr := []int{1, 2, 3, 4, 5}\n\tsubarr := []int{3, 4}\n\tindex := findSubarrayIndex(arr, subarr)\n\tfmt.Println(index)\n}\n```"
  },
  {
    "task": "Write a function to compress an array by eliminating zero values.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc compressArray(arr []int) []int {\n\tvar compressed []int\n\tfor _, v := range arr {\n\t\tif v != 0 {\n\t\t\tcompressed = append(compressed, v)\n\t\t}\n\t}\n\treturn compressed\n}\n\nfunc main() {\n\tarr := []int{0, 1, 0, 2, 3, 0, 4, 5}\n\tcompressed := compressArray(arr)\n\tfmt.Println(compressed)\n}\n```"
  },
  {
    "task": "Develop a method to determine if an array can be split into two parts with equal sums.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc canSplitArray(arr []int) bool {\n\ttotalSum := 0\n\tfor _, num := range arr {\n\t\ttotalSum += num\n\t}\n\n\tif totalSum%2 != 0 {\n\t\treturn false\n\t}\n\n\ttargetSum := totalSum / 2\n\tcurrentSum := 0\n\n\tfor _, num := range arr {\n\t\tcurrentSum += num\n\t\tif currentSum == targetSum {\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn false\n}\n\nfunc main() {\n\tarr := []int{1, 2, 3, 4, 5, 5}\n\tfmt.Println(canSplitArray(arr))\n}\n```"
  },
  {
    "task": "Implement a function to round each element in an array to the nearest integer.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc roundArray(arr []float64) []int {\n\trounded := make([]int, len(arr))\n\tfor i, v := range arr {\n\t\trounded[i] = int(math.Round(v))\n\t}\n\treturn rounded\n}\n\nfunc main() {\n\tarr := []float64{1.2, 2.5, 3.7, 4.4, 5.6}\n\troundedArr := roundArray(arr)\n\tfmt.Println(roundedArr)\n}\n```"
  },
  {
    "task": "Create a routine to generate an array of the Fibonacci sequence up to a given number.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc fibonacci(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    fibs := make([]int, n)\n    fibs[0] = 0\n    if n > 1 {\n        fibs[1] = 1\n        for i := 2; i < n; i++ {\n            fibs[i] = fibs[i-1] + fibs[i-2]\n        }\n    }\n    return fibs\n}\n\nfunc main() {\n    n := 10\n    fibSequence := fibonacci(n)\n    fmt.Println(fibSequence)\n}\n```"
  },
  {
    "task": "Write a program to find the longest repeating sequence in an array.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc longestRepeatingSequence(arr []int) []int {\n\tn := len(arr)\n\tif n == 0 {\n\t\treturn []int{}\n\t}\n\n\tlongestSeq := []int{}\n\tcurrentSeq := []int{arr[0]}\n\n\tfor i := 1; i < n; i++ {\n\t\tif arr[i] == arr[i-1] {\n\t\t\tcurrentSeq = append(currentSeq, arr[i])\n\t\t} else {\n\t\t\tif len(currentSeq) > len(longestSeq) {\n\t\t\t\tlongestSeq = currentSeq\n\t\t\t}\n\t\t\tcurrentSeq = []int{arr[i]}\n\t\t}\n\t}\n\n\tif len(currentSeq) > len(longestSeq) {\n\t\tlongestSeq = currentSeq\n\t}\n\n\treturn longestSeq\n}\n\nfunc main() {\n\tarr := []int{1, 2, 2, 3, 3, 3, 2, 2, 2, 2, 1, 1}\n\tresult := longestRepeatingSequence(arr)\n\tfmt.Println(\"Longest Repeating Sequence:\", result)\n}\n```"
  },
  {
    "task": "Design a function to multiply each element of an array by its index.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc multiplyByIndex(arr []int) []int {\n\tfor i := range arr {\n\t\tarr[i] *= i\n\t}\n\treturn arr\n}\n\nfunc main() {\n\tarr := []int{1, 2, 3, 4, 5}\n\tresult := multiplyByIndex(arr)\n\tfmt.Println(result)\n}\n```"
  },
  {
    "task": "Create a method to convert an array of characters into a single string.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc arrayToString(arr []rune) string {\n\treturn string(arr)\n}\n\nfunc main() {\n\tcharArray := []rune{'H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd'}\n\tresult := arrayToString(charArray)\n\tfmt.Println(result)\n}\n```"
  },
  {
    "task": "Develop a function to fill an array with a specified value.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc fillArray(size int, value int) []int {\n\tarr := make([]int, size)\n\tfor i := range arr {\n\t\tarr[i] = value\n\t}\n\treturn arr\n}\n\nfunc main() {\n\tsize := 5\n\tvalue := 3\n\tarr := fillArray(size, value)\n\tfmt.Println(arr)\n}\n```"
  },
  {
    "task": "Implement a routine to determine if an array has any duplicate elements.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc hasDuplicates(arr []int) bool {\n\tseen := make(map[int]bool)\n\tfor _, value := range arr {\n\t\tif seen[value] {\n\t\t\treturn true\n\t\t}\n\t\tseen[value] = true\n\t}\n\treturn false\n}\n\nfunc main() {\n\tarr := []int{1, 2, 3, 4, 5, 6, 1}\n\tfmt.Println(hasDuplicates(arr)) // Output: true\n}\n```"
  },
  {
    "task": "Write a script to reverse the order of words in an array of strings.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc reverseWords(words []string) []string {\n\tlength := len(words)\n\treversed := make([]string, length)\n\tfor i, word := range words {\n\t\treversed[length-i-1] = word\n\t}\n\treturn reversed\n}\n\nfunc main() {\n\twords := []string{\"Hello\", \"World\", \"This\", \"Is\", \"Go\"}\n\treversedWords := reverseWords(words)\n\tfmt.Println(reversedWords)\n}\n```"
  },
  {
    "task": "Create a function to calculate the total number of distinct elements in an array.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc countDistinctElements(arr []int) int {\n\telementMap := make(map[int]bool)\n\tfor _, elem := range arr {\n\t\telementMap[elem] = true\n\t}\n\treturn len(elementMap)\n}\n\nfunc main() {\n\tarr := []int{1, 2, 2, 3, 4, 4, 5}\n\tfmt.Println(countDistinctElements(arr))\n}\n```"
  },
  {
    "task": "Design a program to find the largest gap between consecutive elements in a sorted array.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc largestGap(arr []int) int {\n\tif len(arr) < 2 {\n\t\treturn 0\n\t}\n\tmaxGap := 0\n\tfor i := 1; i < len(arr); i++ {\n\t\tgap := arr[i] - arr[i-1]\n\t\tif gap > maxGap {\n\t\t\tmaxGap = gap\n\t\t}\n\t}\n\treturn maxGap\n}\n\nfunc main() {\n\tarr := []int{1, 2, 4, 7, 13, 20}\n\tfmt.Println(largestGap(arr))\n}\n```"
  },
  {
    "task": "Write a routine to perform element-wise multiplication of two arrays.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc elementwiseMultiply(arr1, arr2 []int) []int {\n\tif len(arr1) != len(arr2) {\n\t\treturn nil\n\t}\n\tresult := make([]int, len(arr1))\n\tfor i := range arr1 {\n\t\tresult[i] = arr1[i] * arr2[i]\n\t}\n\treturn result\n}\n\nfunc main() {\n\tarr1 := []int{1, 2, 3, 4, 5}\n\tarr2 := []int{6, 7, 8, 9, 10}\n\tresult := elementwiseMultiply(arr1, arr2)\n\tfmt.Println(result)\n}\n```"
  },
  {
    "task": "Develop a method to split a string into an array of words.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc splitIntoWords(input string) []string {\n\treturn strings.Fields(input)\n}\n\nfunc main() {\n\ttext := \"Develop a method to split a string into an array of words\"\n\twords := splitIntoWords(text)\n\tfmt.Println(words)\n}\n```"
  },
  {
    "task": "Implement a function to find the longest contiguous subarray with a sum less than a target.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc longestSubarray(nums []int, target int) []int {\n    start, sum, maxLength, maxStart := 0, 0, 0, 0\n\n    for end := 0; end < len(nums); end++ {\n        sum += nums[end]\n        for sum >= target && start <= end {\n            sum -= nums[start]\n            start++\n        }\n        if end-start+1 > maxLength {\n            maxLength = end - start + 1\n            maxStart = start\n        }\n    }\n    \n    return nums[maxStart : maxStart+maxLength]\n}\n\nfunc main() {\n    nums := []int{1, 2, 3, 4, 5}\n    target := 9\n    result := longestSubarray(nums, target)\n    fmt.Println(result)\n}\n```"
  },
  {
    "task": "Create a script to rotate a 2D array (matrix) 180 degrees.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc rotate180(matrix [][]int) [][]int {\n    rows := len(matrix)\n    if rows == 0 {\n        return matrix\n    }\n    cols := len(matrix[0])\n    rotated := make([][]int, rows)\n    for i := range rotated {\n        rotated[i] = make([]int, cols)\n    }\n\n    for i := 0; i < rows; i++ {\n        for j := 0; j < cols; j++ {\n            rotated[rows-1-i][cols-1-j] = matrix[i][j]\n        }\n    }\n    return rotated\n}\n\nfunc main() {\n    matrix := [][]int{\n        {1, 2, 3},\n        {4, 5, 6},\n        {7, 8, 9},\n    }\n    rotatedMatrix := rotate180(matrix)\n    fmt.Println(\"Original Matrix:\")\n    for _, row := range matrix {\n        fmt.Println(row)\n    }\n    fmt.Println(\"Rotated Matrix 180 degrees:\")\n    for _, row := range rotatedMatrix {\n        fmt.Println(row)\n    }\n}\n```"
  },
  {
    "task": "Write a program to convert an array of binary digits to its decimal equivalent.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc binaryToDecimal(binary []int) int {\n\tdecimal := 0\n\tlength := len(binary)\n\tfor i, digit := range binary {\n\t\tpower := length - i - 1\n\t\tdecimal += digit * int(math.Pow(2, float64(power)))\n\t}\n\treturn decimal\n}\n\nfunc main() {\n\tbinary := []int{1, 0, 1, 1}\n\tdecimal := binaryToDecimal(binary)\n\tfmt.Println(\"Decimal equivalent:\", decimal)\n}\n```"
  },
  {
    "task": "Design a function to return a new array with elements squared from the input array.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc squareElements(input []int) []int {\n\tresult := make([]int, len(input))\n\tfor i, v := range input {\n\t\tresult[i] = v * v\n\t}\n\treturn result\n}\n\nfunc main() {\n\tinput := []int{1, 2, 3, 4, 5}\n\toutput := squareElements(input)\n\tfmt.Println(output)\n}\n```"
  },
  {
    "task": "Create a method to check if all elements in an array are unique.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc allUnique(arr []int) bool {\n\tseen := make(map[int]bool)\n\tfor _, num := range arr {\n\t\tif seen[num] {\n\t\t\treturn false\n\t\t}\n\t\tseen[num] = true\n\t}\n\treturn true\n}\n\nfunc main() {\n\tarr := []int{1, 2, 3, 4, 5}\n\tfmt.Println(allUnique(arr)) // Output: true\n\tarr = []int{1, 2, 3, 4, 5, 5}\n\tfmt.Println(allUnique(arr)) // Output: false\n}\n```"
  },
  {
    "task": "Develop a routine to find the indices of all occurrences of a specific element in an array.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc findIndices(arr []int, target int) []int {\n\tindices := []int{}\n\tfor i, v := range arr {\n\t\tif v == target {\n\t\t\tindices = append(indices, i)\n\t\t}\n\t}\n\treturn indices\n}\n\nfunc main() {\n\tarr := []int{1, 2, 3, 2, 4, 2, 5}\n\ttarget := 2\n\tresult := findIndices(arr, target)\n\tfmt.Println(result)\n}\n```"
  },
  {
    "task": "Implement a function to merge multiple arrays into one.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc mergeArrays(arrays ...[]int) []int {\n\tvar merged []int\n\tfor _, array := range arrays {\n\t\tmerged = append(merged, array...)\n\t}\n\treturn merged\n}\n\nfunc main() {\n\tarray1 := []int{1, 2, 3}\n\tarray2 := []int{4, 5, 6}\n\tarray3 := []int{7, 8, 9}\n\n\tresult := mergeArrays(array1, array2, array3)\n\tfmt.Println(result)\n}\n```"
  },
  {
    "task": "Write a script to convert an array of integers into a formatted string.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc main() {\n\tarr := []int{1, 2, 3, 4, 5}\n\tvar strArr []string\n\tfor _, num := range arr {\n\t\tstrArr = append(strArr, fmt.Sprintf(\"%d\", num))\n\t}\n\tresult := strings.Join(strArr, \", \")\n\tfmt.Println(result)\n}\n```"
  },
  {
    "task": "Create a program to find the largest sum of any contiguous subarray.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc maxSubArray(nums []int) int {\n\tmaxSum := nums[0]\n\tcurrentSum := nums[0]\n\n\tfor i := 1; i < len(nums); i++ {\n\t\tif currentSum < 0 {\n\t\t\tcurrentSum = nums[i]\n\t\t} else {\n\t\t\tcurrentSum += nums[i]\n\t\t}\n\t\tif currentSum > maxSum {\n\t\t\tmaxSum = currentSum\n\t\t}\n\t}\n\treturn maxSum\n}\n\nfunc main() {\n\tarr := []int{-2, 1, -3, 4, -1, 2, 1, -5, 4}\n\tfmt.Println(maxSubArray(arr))\n}\n```"
  },
  {
    "task": "Design a function to compare two arrays and return the differences.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc difference(a, b []int) []int {\n    diffMap := make(map[int]bool)\n    for _, num := range b {\n        diffMap[num] = true\n    }\n\n    var diff []int\n    for _, num := range a {\n        if !diffMap[num] {\n            diff = append(diff, num)\n        }\n    }\n\n    return diff\n}\n\nfunc main() {\n    a := []int{1, 2, 3, 4, 5}\n    b := []int{4, 5, 6, 7, 8}\n    fmt.Println(\"Differences:\", difference(a, b))\n}\n```"
  },
  {
    "task": "Write a method to find the longest subarray with elements in arithmetic progression.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc longestAPSubarray(arr []int) []int {\n\tif len(arr) < 2 {\n\t\treturn arr\n\t}\n\n\tstart, maxLength := 0, 2\n\tcurrentStart, currentLength := 0, 2\n\tdiff := arr[1] - arr[0]\n\n\tfor i := 2; i < len(arr); i++ {\n\t\tif arr[i]-arr[i-1] == diff {\n\t\t\tcurrentLength++\n\t\t} else {\n\t\t\tif currentLength > maxLength {\n\t\t\t\tstart = currentStart\n\t\t\t\tmaxLength = currentLength\n\t\t\t}\n\t\t\tcurrentStart = i - 1\n\t\t\tcurrentLength = 2\n\t\t\tdiff = arr[i] - arr[i-1]\n\t\t}\n\t}\n\n\tif currentLength > maxLength {\n\t\tstart = currentStart\n\t\tmaxLength = currentLength\n\t}\n\n\treturn arr[start : start+maxLength]\n}\n\nfunc main() {\n\tarr := []int{1, 7, 10, 13, 14, 19}\n\tresult := longestAPSubarray(arr)\n\tfmt.Println(result)\n}\n```"
  },
  {
    "task": "Develop a routine to remove elements from an array based on a predicate function.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc filterArray(arr []int, predicate func(int) bool) []int {\n\tvar result []int\n\tfor _, v := range arr {\n\t\tif predicate(v) {\n\t\t\tresult = append(result, v)\n\t\t}\n\t}\n\treturn result\n}\n\nfunc main() {\n\tarr := []int{1, 2, 3, 4, 5}\n\tpredicate := func(n int) bool {\n\t\treturn n%2 == 0\n\t}\n\tfilteredArray := filterArray(arr, predicate)\n\tfmt.Println(filteredArray)\n}\n```"
  },
  {
    "task": "Implement a function to determine if two arrays have any common elements.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc hasCommonElements(arr1 []int, arr2 []int) bool {\n\telementMap := make(map[int]bool)\n\tfor _, num := range arr1 {\n\t\telementMap[num] = true\n\t}\n\tfor _, num := range arr2 {\n\t\tif elementMap[num] {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\nfunc main() {\n\tarray1 := []int{1, 2, 3, 4, 5}\n\tarray2 := []int{5, 6, 7, 8, 9}\n\tfmt.Println(hasCommonElements(array1, array2)) // Output: true\n}\n```"
  },
  {
    "task": "Create a script to initialize an empty array and populate it with user input.",
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n)\n\nfunc main() {\n\tvar arr []int\n\tscanner := bufio.NewScanner(os.Stdin)\n\n\tfmt.Println(\"Enter numbers (type 'end' to finish):\")\n\tfor scanner.Scan() {\n\t\tinput := scanner.Text()\n\t\tif input == \"end\" {\n\t\t\tbreak\n\t\t}\n\t\tnum, err := strconv.Atoi(input)\n\t\tif err == nil {\n\t\t\tarr = append(arr, num)\n\t\t} else {\n\t\t\tfmt.Println(\"Invalid input, please enter a number or 'end' to finish:\")\n\t\t}\n\t}\n\n\tfmt.Println(\"Array contents:\", arr)\n}\n```"
  },
  {
    "task": "Write a program to find the maximum sum of non-adjacent elements in an array.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc max(a, b int) int {\n\tif a > b {\n\t\treturn a\n\t}\n\treturn b\n}\n\nfunc maxNonAdjacentSum(nums []int) int {\n\tif len(nums) == 0 {\n\t\treturn 0\n\t}\n\n\tinclude := 0\n\texclude := 0\n\n\tfor _, num := range nums {\n\t\tnewInclude := exclude + num\n\t\texclude = max(include, exclude)\n\t\tinclude = newInclude\n\t}\n\n\treturn max(include, exclude)\n}\n\nfunc main() {\n\tarr := []int{3, 2, 5, 10, 7}\n\tfmt.Println(maxNonAdjacentSum(arr))\n}\n```"
  },
  {
    "task": "Design a function to shuffle an array randomly.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n\t\"time\"\n)\n\nfunc shuffleArray(arr []int) {\n\trand.Seed(time.Now().UnixNano())\n\trand.Shuffle(len(arr), func(i, j int) {\n\t\tarr[i], arr[j] = arr[j], arr[i]\n\t})\n}\n\nfunc main() {\n\tarr := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n\tshuffleArray(arr)\n\tfmt.Println(arr)\n}\n```"
  },
  {
    "task": "Create a method to generate a new array where each element is the cumulative product of the input array.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc cumulativeProduct(arr []int) []int {\n\tif len(arr) == 0 {\n\t\treturn []int{}\n\t}\n\n\tresult := make([]int, len(arr))\n\tproduct := 1\n\n\tfor i, val := range arr {\n\t\tproduct *= val\n\t\tresult[i] = product\n\t}\n\n\treturn result\n}\n\nfunc main() {\n\tinput := []int{1, 2, 3, 4}\n\toutput := cumulativeProduct(input)\n\tfmt.Println(output) // Output: [1 2 6 24]\n}\n```"
  },
  {
    "task": "Develop a routine to find the largest element in each row of a 2D array.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc findLargestInRows(matrix [][]int) []int {\n\tlargestInRows := make([]int, len(matrix))\n\tfor i, row := range matrix {\n\t\tmax := row[0]\n\t\tfor _, value := range row {\n\t\t\tif value > max {\n\t\t\t\tmax = value\n\t\t\t}\n\t\t}\n\t\tlargestInRows[i] = max\n\t}\n\treturn largestInRows\n}\n\nfunc main() {\n\tmatrix := [][]int{\n\t\t{3, 5, 9},\n\t\t{1, 4, 7},\n\t\t{8, 2, 6},\n\t}\n\n\tresult := findLargestInRows(matrix)\n\tfmt.Println(result)\n}\n```"
  },
  {
    "task": "Implement a function to count the number of negative numbers in an array.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc countNegatives(arr []int) int {\n\tcount := 0\n\tfor _, num := range arr {\n\t\tif num < 0 {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\nfunc main() {\n\tnumbers := []int{-1, 2, -3, 4, -5, 6}\n\tfmt.Println(countNegatives(numbers)) // Output: 3\n}\n```"
  },
  {
    "task": "Write a script to find the longest subarray with all distinct elements.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc longestDistinctSubarray(arr []int) int {\n\tn := len(arr)\n\tmaxLen := 0\n\tstart := 0\n\telementIndex := make(map[int]int)\n\n\tfor end := 0; end < n; end++ {\n\t\tif idx, found := elementIndex[arr[end]]; found && idx >= start {\n\t\t\tstart = idx + 1\n\t\t}\n\t\telementIndex[arr[end]] = end\n\t\tif end-start+1 > maxLen {\n\t\t\tmaxLen = end - start + 1\n\t\t}\n\t}\n\n\treturn maxLen\n}\n\nfunc main() {\n\tarr := []int{1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6}\n\tfmt.Println(\"Length of the longest subarray with all distinct elements: \", longestDistinctSubarray(arr))\n}\n```"
  }
]