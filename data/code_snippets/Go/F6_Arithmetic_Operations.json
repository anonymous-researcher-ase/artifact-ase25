[
  {
    "task": "Write a function that takes two numbers and returns their sum.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc sum(a, b int) int {\n    return a + b\n}\n\nfunc main() {\n    result := sum(3, 5)\n    fmt.Println(result)\n}\n```"
  },
  {
    "task": "Create a program that calculates the difference between two given integers.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tvar a, b int\n\tfmt.Println(\"Enter two integers:\")\n\tfmt.Scan(&a, &b)\n\tdifference := a - b\n\tfmt.Printf(\"The difference is: %d\\n\", difference)\n}\n```"
  },
  {
    "task": "Design a function to multiply two floating-point numbers and return the result.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc multiply(a, b float64) float64 {\n    return a * b\n}\n\nfunc main() {\n    fmt.Println(multiply(3.5, 2.0))\n}\n```"
  },
  {
    "task": "Implement a function that divides two numbers and handles division by zero exceptions.",
    "code": "```go\npackage main\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n)\n\nfunc divide(a, b float64) (float64, error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"division by zero\")\n\t}\n\treturn a / b, nil\n}\n\nfunc main() {\n\tresult, err := divide(10, 2)\n\tif err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t} else {\n\t\tfmt.Println(\"Result:\", result)\n\t}\n\n\tresult, err = divide(10, 0)\n\tif err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t} else {\n\t\tfmt.Println(\"Result:\", result)\n\t}\n}\n```"
  },
  {
    "task": "Build a calculator that can perform addition, subtraction, multiplication, and division on user-provided inputs.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tvar num1, num2 float64\n\tvar operator string\n\n\tfmt.Print(\"Enter first number: \")\n\tfmt.Scanln(&num1)\n\n\tfmt.Print(\"Enter second number: \")\n\tfmt.Scanln(&num2)\n\n\tfmt.Print(\"Enter operator (+, -, *, /): \")\n\tfmt.Scanln(&operator)\n\n\tswitch operator {\n\tcase \"+\":\n\t\tfmt.Printf(\"Result: %f\\n\", num1+num2)\n\tcase \"-\":\n\t\tfmt.Printf(\"Result: %f\\n\", num1-num2)\n\tcase \"*\":\n\t\tfmt.Printf(\"Result: %f\\n\", num1*num2)\n\tcase \"/\":\n\t\tif num2 != 0 {\n\t\t\tfmt.Printf(\"Result: %f\\n\", num1/num2)\n\t\t} else {\n\t\t\tfmt.Println(\"Error: Division by zero\")\n\t\t}\n\tdefault:\n\t\tfmt.Println(\"Invalid operator\")\n\t}\n}\n```"
  },
  {
    "task": "Write a script to compute the average of a list of numbers using arithmetic operations.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    numbers := []float64{10, 20, 30, 40, 50}\n    var sum float64\n    for _, number := range numbers {\n        sum += number\n    }\n    average := sum / float64(len(numbers))\n    fmt.Printf(\"The average is: %.2f\\n\", average)\n}\n```"
  },
  {
    "task": "Create a function that returns the remainder of the division of two integers.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc remainder(a, b int) int {\n\treturn a % b\n}\n\nfunc main() {\n\tfmt.Println(remainder(10, 3)) // Example usage\n}\n```"
  },
  {
    "task": "Develop a function that can add a variable number of arguments and return the total.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc add(args ...int) int {\n\ttotal := 0\n\tfor _, num := range args {\n\t\ttotal += num\n\t}\n\treturn total\n}\n\nfunc main() {\n\tfmt.Println(add(1, 2, 3, 4, 5)) // Output: 15\n}\n```"
  },
  {
    "task": "Write a program that subtracts a series of numbers from an initial value.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc subtractNumbers(initial int, numbers []int) int {\n\tfor _, num := range numbers {\n\t\tinitial -= num\n\t}\n\treturn initial\n}\n\nfunc main() {\n\tinitialValue := 100\n\tnumbersToSubtract := []int{10, 5, 15, 20}\n\tresult := subtractNumbers(initialValue, numbersToSubtract)\n\tfmt.Println(\"Result after subtraction:\", result)\n}\n```"
  },
  {
    "task": "Implement a function that multiplies all elements in an array and returns the product.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc multiplyElements(arr []int) int {\n\tproduct := 1\n\tfor _, num := range arr {\n\t\tproduct *= num\n\t}\n\treturn product\n}\n\nfunc main() {\n\tarr := []int{1, 2, 3, 4, 5}\n\tfmt.Println(multiplyElements(arr))\n}\n```"
  },
  {
    "task": "Design a program that divides a number by another and rounds the result to two decimal places.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tnum1 := 10.0\n\tnum2 := 3.0\n\tresult := num1 / num2\n\troundedResult := fmt.Sprintf(\"%.2f\", result)\n\tfmt.Println(roundedResult)\n}\n```"
  },
  {
    "task": "Create a function that performs arithmetic operations on complex numbers.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc complexArithmetic(a, b complex128) (complex128, complex128, complex128, complex128) {\n\tsum := a + b\n\tdifference := a - b\n\tproduct := a * b\n\tquotient := a / b\n\treturn sum, difference, product, quotient\n}\n\nfunc main() {\n\ta := complex(3, 4)\n\tb := complex(1, 2)\n\n\tsum, difference, product, quotient := complexArithmetic(a, b)\n\n\tfmt.Printf(\"Sum: %v\\n\", sum)\n\tfmt.Printf(\"Difference: %v\\n\", difference)\n\tfmt.Printf(\"Product: %v\\n\", product)\n\tfmt.Printf(\"Quotient: %v\\n\", quotient)\n}\n```"
  },
  {
    "task": "Write a function to calculate the area of a rectangle given its length and width using multiplication.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc rectangleArea(length, width float64) float64 {\n    return length * width\n}\n\nfunc main() {\n    length := 10.0\n    width := 5.0\n    area := rectangleArea(length, width)\n    fmt.Printf(\"The area of the rectangle is: %.2f\\n\", area)\n}\n```"
  },
  {
    "task": "Build a program that converts a price in dollars to another currency using multiplication with exchange rates.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tvar dollars float64\n\tvar exchangeRate float64\n\n\tfmt.Print(\"Enter the amount in dollars: \")\n\tfmt.Scanln(&dollars)\n\n\tfmt.Print(\"Enter the exchange rate: \")\n\tfmt.Scanln(&exchangeRate)\n\n\tconvertedAmount := dollars * exchangeRate\n\tfmt.Printf(\"The converted amount is: %.2f\\n\", convertedAmount)\n}\n```"
  },
  {
    "task": "Implement a function that checks if a number is divisible by another and returns a boolean.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc isDivisible(dividend, divisor int) bool {\n    return dividend%divisor == 0\n}\n\nfunc main() {\n    fmt.Println(isDivisible(10, 2)) // true\n    fmt.Println(isDivisible(10, 3)) // false\n}\n```"
  },
  {
    "task": "Write a script to sum the digits of an integer using arithmetic operations.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc sumOfDigits(n int) int {\n\tsum := 0\n\tfor n != 0 {\n\t\tsum += n % 10\n\t\tn /= 10\n\t}\n\treturn sum\n}\n\nfunc main() {\n\tnum := 12345\n\tfmt.Println(\"Sum of digits:\", sumOfDigits(num))\n}\n```"
  },
  {
    "task": "Develop a function that applies a discount percentage to a price using subtraction and multiplication.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc applyDiscount(price, discountPercentage float64) float64 {\n\tdiscountAmount := price * (discountPercentage / 100)\n\tfinalPrice := price - discountAmount\n\treturn finalPrice\n}\n\nfunc main() {\n\tprice := 100.0\n\tdiscount := 15.0\n\tfinalPrice := applyDiscount(price, discount)\n\tfmt.Printf(\"Final price after discount: %.2f\\n\", finalPrice)\n}\n```"
  },
  {
    "task": "Create a program to calculate the yearly salary given an hourly wage and hours worked per week.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc calculateYearlySalary(hourlyWage float64, hoursPerWeek float64) float64 {\n\tweeksPerYear := 52\n\treturn hourlyWage * hoursPerWeek * float64(weeksPerYear)\n}\n\nfunc main() {\n\thourlyWage := 20.0\n\thoursPerWeek := 40.0\n\n\tyearlySalary := calculateYearlySalary(hourlyWage, hoursPerWeek)\n\tfmt.Printf(\"The yearly salary is: $%.2f\\n\", yearlySalary)\n}\n```"
  },
  {
    "task": "Design a function that calculates the compound interest over a given period using arithmetic operations.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc compoundInterest(principal, rate, timesCompounded, years float64) float64 {\n\tamount := principal * math.Pow((1+rate/timesCompounded), timesCompounded*years)\n\treturn amount - principal\n}\n\nfunc main() {\n\tprincipal := 1000.0  // Example principal amount\n\trate := 0.05         // Example interest rate (5%)\n\ttimesCompounded := 4 // Quarterly compounding\n\tyears := 10          // Duration in years\n\n\tinterest := compoundInterest(principal, rate, timesCompounded, years)\n\tfmt.Printf(\"Compound Interest: %.2f\\n\", interest)\n}\n```"
  },
  {
    "task": "Write a program that scales a 2D point by a given factor using multiplication.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype Point struct {\n\tx, y float64\n}\n\nfunc scalePoint(p Point, factor float64) Point {\n\treturn Point{p.x * factor, p.y * factor}\n}\n\nfunc main() {\n\tp := Point{3.0, 4.0}\n\tfactor := 2.0\n\tscaledPoint := scalePoint(p, factor)\n\tfmt.Printf(\"Scaled Point: (%.2f, %.2f)\\n\", scaledPoint.x, scaledPoint.y)\n}\n```"
  },
  {
    "task": "Implement a function that calculates the perimeter of a triangle given its side lengths.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc perimeterOfTriangle(a, b, c float64) float64 {\n    return a + b + c\n}\n\nfunc main() {\n    a, b, c := 3.0, 4.0, 5.0\n    fmt.Println(\"The perimeter of the triangle is:\", perimeterOfTriangle(a, b, c))\n}\n```"
  },
  {
    "task": "Create a function to determine if three sides can form a right triangle using the Pythagorean theorem.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc isRightTriangle(a, b, c float64) bool {\n\treturn a*a+b*b == c*c || a*a+c*c == b*b || b*b+c*c == a*a\n}\n\nfunc main() {\n\tfmt.Println(isRightTriangle(3, 4, 5)) // Example usage\n}\n```"
  },
  {
    "task": "Write a script that calculates the total cost of items in a shopping cart using addition.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tshoppingCart := []float64{19.99, 5.49, 3.50, 12.99, 7.25}\n\tvar totalCost float64\n\n\tfor _, price := range shoppingCart {\n\t\ttotalCost += price\n\t}\n\n\tfmt.Printf(\"Total cost: $%.2f\\n\", totalCost)\n}\n```"
  },
  {
    "task": "Develop a function that returns the quotient and remainder of a division operation.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc quotientAndRemainder(dividend, divisor int) (int, int) {\n\tquotient := dividend / divisor\n\tremainder := dividend % divisor\n\treturn quotient, remainder\n}\n\nfunc main() {\n\tq, r := quotientAndRemainder(10, 3)\n\tfmt.Printf(\"Quotient: %d, Remainder: %d\\n\", q, r)\n}\n```"
  },
  {
    "task": "Build a program that simulates a basic checkout system using arithmetic operations for totals and discounts.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\titems := []float64{10.0, 20.0, 15.0, 5.0} // prices of items\n\tdiscountRate := 0.1                      // 10% discount\n\n\ttotal := 0.0\n\tfor _, price := range items {\n\t\ttotal += price\n\t}\n\n\tdiscount := total * discountRate\n\tfinalTotal := total - discount\n\n\tfmt.Printf(\"Total before discount: $%.2f\\n\", total)\n\tfmt.Printf(\"Discount: $%.2f\\n\", discount)\n\tfmt.Printf(\"Final total after discount: $%.2f\\n\", finalTotal)\n}\n```"
  },
  {
    "task": "Implement a function to calculate the distance between two points on a plane using subtraction and square roots.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc distance(x1, y1, x2, y2 float64) float64 {\n\tdx := x2 - x1\n\tdy := y2 - y1\n\treturn math.Sqrt(dx*dx + dy*dy)\n}\n\nfunc main() {\n\tx1, y1 := 1.0, 2.0\n\tx2, y2 := 4.0, 6.0\n\tfmt.Printf(\"Distance: %.2f\\n\", distance(x1, y1, x2, y2))\n}\n```"
  },
  {
    "task": "Write a function that calculates the speed of a vehicle given distance and time using division.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc calculateSpeed(distance, time float64) float64 {\n\treturn distance / time\n}\n\nfunc main() {\n\tdistance := 150.0\n\ttime := 3.0\n\tspeed := calculateSpeed(distance, time)\n\tfmt.Printf(\"Speed: %.2f units/time\\n\", speed)\n}\n```"
  },
  {
    "task": "Create a program to compute the total minutes in a given number of hours using multiplication.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\thours := 5\n\tminutes := hours * 60\n\tfmt.Printf(\"Total minutes in %d hours: %d\\n\", hours, minutes)\n}\n```"
  },
  {
    "task": "Design a function that determines the number of dozens of eggs from a given total number of eggs.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc dozensOfEggs(totalEggs int) int {\n\treturn totalEggs / 12\n}\n\nfunc main() {\n\tfmt.Println(dozensOfEggs(25)) // Example usage\n}\n```"
  },
  {
    "task": "Write a script to find the greatest common divisor of two numbers using arithmetic operations.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc gcd(a, b int) int {\n\tfor b != 0 {\n\t\ta, b = b, a%b\n\t}\n\treturn a\n}\n\nfunc main() {\n\tnum1, num2 := 56, 98\n\tfmt.Printf(\"GCD of %d and %d is %d\\n\", num1, num2, gcd(num1, num2))\n}\n```"
  },
  {
    "task": "Develop a program that calculates the total weight of multiple items using addition.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\titems := []float64{2.5, 3.0, 1.75, 4.25}\n\ttotalWeight := 0.0\n\n\tfor _, weight := range items {\n\t\ttotalWeight += weight\n\t}\n\n\tfmt.Printf(\"Total weight: %.2f\\n\", totalWeight)\n}\n```"
  },
  {
    "task": "Implement a function to convert a temperature from Celsius to Fahrenheit using multiplication and addition.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc celsiusToFahrenheit(celsius float64) float64 {\n\treturn celsius*9/5 + 32\n}\n\nfunc main() {\n\tcelsius := 25.0\n\tfahrenheit := celsiusToFahrenheit(celsius)\n\tfmt.Printf(\"%.2f Celsius is %.2f Fahrenheit\\n\", celsius, fahrenheit)\n}\n```"
  },
  {
    "task": "Create a program that determines the age difference between two people given their birth years.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tvar birthYear1, birthYear2 int\n\n\tfmt.Print(\"Enter the birth year of the first person: \")\n\tfmt.Scan(&birthYear1)\n\tfmt.Print(\"Enter the birth year of the second person: \")\n\tfmt.Scan(&birthYear2)\n\n\tageDifference := birthYear1 - birthYear2\n\tif ageDifference < 0 {\n\t\tageDifference = -ageDifference\n\t}\n\n\tfmt.Printf(\"The age difference is %d years.\\n\", ageDifference)\n}\n```"
  },
  {
    "task": "Write a function to calculate the final price after applying tax and discount using addition and subtraction.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc calculateFinalPrice(initialPrice, taxRate, discount float64) float64 {\n\ttaxAmount := initialPrice * taxRate / 100\n\tpriceAfterTax := initialPrice + taxAmount\n\tfinalPrice := priceAfterTax - discount\n\treturn finalPrice\n}\n\nfunc main() {\n\tinitialPrice := 100.0\n\ttaxRate := 10.0 // 10%\n\tdiscount := 5.0\n\n\tfinalPrice := calculateFinalPrice(initialPrice, taxRate, discount)\n\tfmt.Printf(\"The final price is: %.2f\\n\", finalPrice)\n}\n```"
  },
  {
    "task": "Design a program to compute the net profit given total revenue and expenses.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    totalRevenue := 10000.0\n    totalExpenses := 7500.0\n\n    netProfit := totalRevenue - totalExpenses\n\n    fmt.Printf(\"Net Profit: %.2f\\n\", netProfit)\n}\n```"
  },
  {
    "task": "Develop a function to calculate the BMI given weight and height using division and multiplication.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc calculateBMI(weightKg, heightM float64) float64 {\n\treturn weightKg / (heightM * heightM)\n}\n\nfunc main() {\n\tweight := 70.0\n\theight := 1.75\n\tbmi := calculateBMI(weight, height)\n\tfmt.Printf(\"BMI: %.2f\\n\", bmi)\n}\n```"
  },
  {
    "task": "Create a function that calculates the midpoint between two numbers using addition and division.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc midpoint(a, b float64) float64 {\n\treturn (a + b) / 2\n}\n\nfunc main() {\n\tfmt.Println(midpoint(10, 20)) // Example usage\n}\n```"
  },
  {
    "task": "Write a program that outputs the result of dividing a number by another with remainder.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tvar a, b int\n\ta = 10 // example dividend\n\tb = 3  // example divisor\n\n\tquotient := a / b\n\tremainder := a % b\n\n\tfmt.Printf(\"Quotient: %d, Remainder: %d\\n\", quotient, remainder)\n}\n```"
  },
  {
    "task": "Implement a function to calculate the factorial of a number using multiplication.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc factorial(n int) int {\n\tif n == 0 {\n\t\treturn 1\n\t}\n\tresult := 1\n\tfor i := 1; i <= n; i++ {\n\t\tresult *= i\n\t}\n\treturn result\n}\n\nfunc main() {\n\tfmt.Println(factorial(5)) // Example usage\n}\n```"
  },
  {
    "task": "Build a script to find the average of three numbers using addition and division.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tnum1 := 5.0\n\tnum2 := 10.0\n\tnum3 := 15.0\n\n\tsum := num1 + num2 + num3\n\taverage := sum / 3\n\n\tfmt.Printf(\"The average is: %.2f\\n\", average)\n}\n```"
  },
  {
    "task": "Create a program that simulates a simple bank account using arithmetic operations for deposits and withdrawals.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\ntype BankAccount struct {\n\tbalance float64\n}\n\nfunc (account *BankAccount) Deposit(amount float64) {\n\taccount.balance += amount\n}\n\nfunc (account *BankAccount) Withdraw(amount float64) {\n\tif amount <= account.balance {\n\t\taccount.balance -= amount\n\t} else {\n\t\tfmt.Println(\"Insufficient funds.\")\n\t}\n}\n\nfunc (account *BankAccount) GetBalance() float64 {\n\treturn account.balance\n}\n\nfunc main() {\n\taccount := BankAccount{balance: 0}\n\taccount.Deposit(1000)\n\tfmt.Printf(\"Balance after deposit: $%.2f\\n\", account.GetBalance())\n\n\taccount.Withdraw(500)\n\tfmt.Printf(\"Balance after withdrawal: $%.2f\\n\", account.GetBalance())\n\n\taccount.Withdraw(600)\n\tfmt.Printf(\"Balance after attempted overdraft: $%.2f\\n\", account.GetBalance())\n}\n```"
  },
  {
    "task": "Write a function that computes the cost per item given a total cost and quantity using division.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc costPerItem(totalCost float64, quantity int) float64 {\n\tif quantity == 0 {\n\t\treturn 0\n\t}\n\treturn totalCost / float64(quantity)\n}\n\nfunc main() {\n\tfmt.Println(costPerItem(100, 5))\n}\n```"
  },
  {
    "task": "Design a program that calculates the time required to travel a distance at a given speed.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc calculateTime(distance, speed float64) float64 {\n\tif speed == 0 {\n\t\treturn 0\n\t}\n\treturn distance / speed\n}\n\nfunc main() {\n\tvar distance, speed float64\n\n\tfmt.Print(\"Enter distance (in km): \")\n\tfmt.Scanln(&distance)\n\n\tfmt.Print(\"Enter speed (in km/h): \")\n\tfmt.Scanln(&speed)\n\n\ttime := calculateTime(distance, speed)\n\tfmt.Printf(\"Time required to travel %.2f km at %.2f km/h is %.2f hours\\n\", distance, speed, time)\n}\n```"
  },
  {
    "task": "Develop a function that returns the absolute difference between two numbers.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc absoluteDifference(a, b float64) float64 {\n\treturn math.Abs(a - b)\n}\n\nfunc main() {\n\tfmt.Println(absoluteDifference(5.5, 3.2))\n}\n```"
  },
  {
    "task": "Implement a program to compute the geometric mean of a set of numbers using multiplication and roots.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc geometricMean(numbers []float64) float64 {\n\tproduct := 1.0\n\tfor _, num := range numbers {\n\t\tproduct *= num\n\t}\n\tn := float64(len(numbers))\n\treturn math.Pow(product, 1/n)\n}\n\nfunc main() {\n\tnumbers := []float64{2, 8, 4, 16}\n\tmean := geometricMean(numbers)\n\tfmt.Printf(\"Geometric Mean: %.2f\\n\", mean)\n}\n```"
  },
  {
    "task": "Write a function to calculate the total interest paid on a loan using arithmetic operations.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc totalInterest(principal, annualRate float64, years int) float64 {\n\tinterest := principal * annualRate * float64(years)\n\treturn interest\n}\n\nfunc main() {\n\tprincipal := 1000.0\n\tannualRate := 0.05\n\tyears := 5\n\n\ttotalInterestPaid := totalInterest(principal, annualRate, years)\n\tfmt.Printf(\"Total interest paid: %.2f\\n\", totalInterestPaid)\n}\n```"
  },
  {
    "task": "Create a program that calculates the sum of even numbers within a specified range.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc sumOfEvenNumbers(start, end int) int {\n\tsum := 0\n\tfor i := start; i <= end; i++ {\n\t\tif i%2 == 0 {\n\t\t\tsum += i\n\t\t}\n\t}\n\treturn sum\n}\n\nfunc main() {\n\tstart := 1\n\tend := 10\n\tfmt.Printf(\"Sum of even numbers between %d and %d is: %d\\n\", start, end, sumOfEvenNumbers(start, end))\n}\n```"
  },
  {
    "task": "Design a script to determine the final balance in a savings account after regular deposits and withdrawals.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tinitialBalance := 1000.0\n\tdeposits := []float64{200.0, 150.0, 300.0}\n\twithdrawals := []float64{100.0, 50.0, 25.0}\n\n\tfinalBalance := initialBalance\n\n\tfor _, deposit := range deposits {\n\t\tfinalBalance += deposit\n\t}\n\n\tfor _, withdrawal := range withdrawals {\n\t\tfinalBalance -= withdrawal\n\t}\n\n\tfmt.Printf(\"Final balance: %.2f\\n\", finalBalance)\n}\n```"
  },
  {
    "task": "Develop a function to compute the surface area of a cylinder given its radius and height.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc surfaceAreaOfCylinder(radius, height float64) float64 {\n\treturn 2*math.Pi*radius*height + 2*math.Pi*radius*radius\n}\n\nfunc main() {\n\tradius := 5.0\n\theight := 10.0\n\tsurfaceArea := surfaceAreaOfCylinder(radius, height)\n\tfmt.Printf(\"Surface area of the cylinder: %.2f\\n\", surfaceArea)\n}\n```"
  },
  {
    "task": "Write a program that outputs the result of an arithmetic sequence given the first term and common difference.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc arithmeticSequence(firstTerm int, commonDifference int, n int) {\n\tsequence := make([]int, n)\n\tfor i := 0; i < n; i++ {\n\t\tsequence[i] = firstTerm + i*commonDifference\n\t}\n\tfmt.Println(sequence)\n}\n\nfunc main() {\n\tfirstTerm := 2\n\tcommonDifference := 3\n\tn := 10\n\tarithmeticSequence(firstTerm, commonDifference, n)\n}\n```"
  },
  {
    "task": "Implement a function that finds the average speed for a trip given total distance and time.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc averageSpeed(totalDistance, totalTime float64) float64 {\n\tif totalTime == 0 {\n\t\treturn 0\n\t}\n\treturn totalDistance / totalTime\n}\n\nfunc main() {\n\tdistance := 150.0 // example distance in kilometers\n\ttime := 2.0       // example time in hours\n\tspeed := averageSpeed(distance, time)\n\tfmt.Printf(\"Average Speed: %.2f km/h\\n\", speed)\n}\n```"
  },
  {
    "task": "Create a function to calculate the total cost of a road trip given fuel cost per mile and distance.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc calculateTotalCost(fuelCostPerMile, distance float64) float64 {\n\treturn fuelCostPerMile * distance\n}\n\nfunc main() {\n\tfuelCostPerMile := 0.12\n\tdistance := 150.0\n\ttotalCost := calculateTotalCost(fuelCostPerMile, distance)\n\tfmt.Printf(\"The total cost of the road trip is: $%.2f\\n\", totalCost)\n}\n```"
  },
  {
    "task": "Write a script that determines the number of tiles required to cover a floor area using arithmetic operations.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc tilesRequired(floorLength, floorWidth, tileLength, tileWidth float64) int {\n\tfloorArea := floorLength * floorWidth\n\ttileArea := tileLength * tileWidth\n\ttiles := floorArea / tileArea\n\treturn int(tiles)\n}\n\nfunc main() {\n\tvar floorLength, floorWidth float64\n\tvar tileLength, tileWidth float64\n\n\tfmt.Print(\"Enter floor length: \")\n\tfmt.Scan(&floorLength)\n\tfmt.Print(\"Enter floor width: \")\n\tfmt.Scan(&floorWidth)\n\tfmt.Print(\"Enter tile length: \")\n\tfmt.Scan(&tileLength)\n\tfmt.Print(\"Enter tile width: \")\n\tfmt.Scan(&tileWidth)\n\n\trequiredTiles := tilesRequired(floorLength, floorWidth, tileLength, tileWidth)\n\tfmt.Printf(\"Number of tiles required: %d\\n\", requiredTiles)\n}\n```"
  },
  {
    "task": "Develop a program to calculate the amount of paint needed to cover a wall given its area.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tvar width, height, coveragePerLiter float64\n\n\t// Example values, these could be taken as input if needed\n\twidth = 10.0 // in meters\n\theight = 3.0 // in meters\n\tcoveragePerLiter = 12.0 // in square meters per liter\n\n\tarea := width * height\n\tpaintNeeded := area / coveragePerLiter\n\n\tfmt.Printf(\"Paint needed: %.2f liters\\n\", paintNeeded)\n}\n```"
  },
  {
    "task": "Build a function that calculates the price per unit weight given total price and weight.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc pricePerUnitWeight(totalPrice, weight float64) float64 {\n\treturn totalPrice / weight\n}\n\nfunc main() {\n\tfmt.Println(pricePerUnitWeight(100.0, 5.0))\n}\n```"
  },
  {
    "task": "Implement a program that computes the volume of a rectangular prism given its dimensions.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tlength := 10.0\n\twidth := 5.0\n\theight := 3.0\n\n\tvolume := length * width * height\n\n\tfmt.Printf(\"The volume of the rectangular prism is: %.2f\\n\", volume)\n}\n```"
  },
  {
    "task": "Write a function to find the percentage increase or decrease between two numbers.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc percentageChange(original, new float64) float64 {\n\tif original == 0 {\n\t\treturn 0\n\t}\n\tchange := new - original\n\tpercentage := (change / original) * 100\n\treturn percentage\n}\n\nfunc main() {\n\toriginal := 50.0\n\tnew := 75.0\n\tfmt.Printf(\"Percentage change: %.2f%%\\n\", percentageChange(original, new))\n}\n```"
  },
  {
    "task": "Create a program to determine the number of complete weeks within a specified number of days.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    days := 45\n    weeks := days / 7\n    fmt.Println(\"Number of complete weeks:\", weeks)\n}\n```"
  },
  {
    "task": "Design a function that calculates the break-even point for a business using cost and revenue data.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\n// BreakEvenPoint calculates the break-even point given fixed costs, variable costs per unit, and revenue per unit.\nfunc BreakEvenPoint(fixedCosts, variableCostPerUnit, revenuePerUnit float64) float64 {\n\tif revenuePerUnit <= variableCostPerUnit {\n\t\treturn -1 // No break-even point if revenue per unit is not greater than variable cost per unit\n\t}\n\treturn fixedCosts / (revenuePerUnit - variableCostPerUnit)\n}\n\nfunc main() {\n\tfixedCosts := 10000.0\n\tvariableCostPerUnit := 50.0\n\trevenuePerUnit := 100.0\n\n\tbreakEvenUnits := BreakEvenPoint(fixedCosts, variableCostPerUnit, revenuePerUnit)\n\tif breakEvenUnits == -1 {\n\t\tfmt.Println(\"No break-even point.\")\n\t} else {\n\t\tfmt.Printf(\"Break-even point is at %.2f units.\\n\", breakEvenUnits)\n\t}\n}\n```"
  },
  {
    "task": "Develop a program that converts a total number of seconds into hours, minutes, and seconds.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\ttotalSeconds := 3661 // Example input\n\thours := totalSeconds / 3600\n\tminutes := (totalSeconds % 3600) / 60\n\tseconds := totalSeconds % 60\n\n\tfmt.Printf(\"%d seconds is %d hours, %d minutes, and %d seconds.\\n\", totalSeconds, hours, minutes, seconds)\n}\n```"
  },
  {
    "task": "Write a function that calculates the depreciation of an asset over time using arithmetic operations.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc calculateDepreciation(initialValue, salvageValue, usefulLife float64) float64 {\n\tdepreciation := (initialValue - salvageValue) / usefulLife\n\treturn depreciation\n}\n\nfunc main() {\n\tinitialValue := 1000.0\n\tsalvageValue := 100.0\n\tusefulLife := 5.0\n\n\tdepreciation := calculateDepreciation(initialValue, salvageValue, usefulLife)\n\tfmt.Printf(\"Annual Depreciation: %.2f\\n\", depreciation)\n}\n```"
  },
  {
    "task": "Create a program that computes the final exam grade needed to achieve a target course average.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\t// Example inputs\n\tcurrentAverage := 85.0\n\tfinalExamWeight := 0.4\n\ttargetAverage := 90.0\n\n\t// Calculate the final exam grade needed\n\tfinalExamGradeNeeded := (targetAverage - (currentAverage * (1 - finalExamWeight))) / finalExamWeight\n\n\tfmt.Printf(\"Final exam grade needed to achieve the target average: %.2f\\n\", finalExamGradeNeeded)\n}\n```"
  },
  {
    "task": "Implement a function to calculate the total cost of groceries given prices and quantities of items.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc totalCost(prices []float64, quantities []int) float64 {\n\ttotal := 0.0\n\tfor i := 0; i < len(prices); i++ {\n\t\ttotal += prices[i] * float64(quantities[i])\n\t}\n\treturn total\n}\n\nfunc main() {\n\tprices := []float64{2.99, 1.49, 3.50}\n\tquantities := []int{3, 2, 1}\n\tfmt.Printf(\"Total cost: $%.2f\\n\", totalCost(prices, quantities))\n}\n```"
  },
  {
    "task": "Write a script that determines the number of years required to double an investment using a fixed interest rate.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tinitialInvestment := 1000.0\n\tinterestRate := 0.05\n\tfinalAmount := initialInvestment * 2\n\tyears := 0\n\n\tfor currentAmount := initialInvestment; currentAmount < finalAmount; years++ {\n\t\tcurrentAmount += currentAmount * interestRate\n\t}\n\n\tfmt.Printf(\"Years required to double the investment: %d\\n\", years)\n}\n```"
  },
  {
    "task": "Develop a function that computes the harmonic mean of a set of numbers using division and addition.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc harmonicMean(numbers []float64) float64 {\n\tif len(numbers) == 0 {\n\t\treturn 0\n\t}\n\n\tvar sum float64\n\tfor _, num := range numbers {\n\t\tsum += 1 / num\n\t}\n\treturn float64(len(numbers)) / sum\n}\n\nfunc main() {\n\tnumbers := []float64{1.0, 2.0, 4.0}\n\tfmt.Println(harmonicMean(numbers))\n}\n```"
  },
  {
    "task": "Create a program to find the sum of the squares of numbers in a given range.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc sumOfSquares(start, end int) int {\n\tsum := 0\n\tfor i := start; i <= end; i++ {\n\t\tsum += i * i\n\t}\n\treturn sum\n}\n\nfunc main() {\n\tstart, end := 1, 10 // Example range\n\tfmt.Println(\"Sum of squares:\", sumOfSquares(start, end))\n}\n```"
  },
  {
    "task": "Design a function that calculates the energy consumption of an appliance given power and usage time.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc calculateEnergyConsumption(power, time float64) float64 {\n\treturn power * time\n}\n\nfunc main() {\n\tpower := 1500.0 // in watts\n\ttime := 2.0     // in hours\n\tenergyConsumption := calculateEnergyConsumption(power, time)\n\tfmt.Printf(\"Energy Consumption: %.2f Wh\\n\", energyConsumption)\n}\n```"
  },
  {
    "task": "Write a program that simulates a simple stock portfolio using arithmetic operations for buying and selling.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\t// Initial portfolio\n\tstocks := map[string]float64{\n\t\t\"Apple\":  10,\n\t\t\"Google\": 5,\n\t}\n\n\t// Prices per share\n\tprices := map[string]float64{\n\t\t\"Apple\":  150.0,\n\t\t\"Google\": 2800.0,\n\t}\n\n\t// Buy 3 more shares of Apple\n\tstocks[\"Apple\"] += 3\n\n\t// Sell 2 shares of Google\n\tstocks[\"Google\"] -= 2\n\n\t// Calculate total portfolio value\n\ttotalValue := 0.0\n\tfor stock, shares := range stocks {\n\t\ttotalValue += shares * prices[stock]\n\t}\n\n\tfmt.Printf(\"Portfolio Value: $%.2f\\n\", totalValue)\n}\n```"
  },
  {
    "task": "Implement a function to calculate the gravitational force between two masses using multiplication and division.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc gravitationalForce(m1, m2, distance float64) float64 {\n\tG := 6.67430e-11 // Gravitational constant in m^3 kg^-1 s^-2\n\treturn G * (m1 * m2) / (distance * distance)\n}\n\nfunc main() {\n\tmass1 := 5.972e24 // Example mass in kg (like Earth)\n\tmass2 := 7.348e22 // Example mass in kg (like Moon)\n\tdistance := 3.844e8 // Example distance in meters (Earth-Moon distance)\n\n\tforce := gravitationalForce(mass1, mass2, distance)\n\tfmt.Printf(\"Gravitational Force: %e N\\n\", force)\n}\n```"
  },
  {
    "task": "Create a function that determines the price per square foot of a piece of real estate.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc pricePerSquareFoot(price, squareFeet float64) float64 {\n\tif squareFeet == 0 {\n\t\treturn 0\n\t}\n\treturn price / squareFeet\n}\n\nfunc main() {\n\tprice := 300000.0\n\tsquareFeet := 1500.0\n\tfmt.Printf(\"Price per square foot: $%.2f\\n\", pricePerSquareFoot(price, squareFeet))\n}\n```"
  },
  {
    "task": "Write a script to compute the total interest earned on a savings account with monthly compounding.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc main() {\n\tprincipal := 1000.0 // initial amount\n\trate := 0.05        // annual interest rate\n\tyears := 5          // number of years\n\n\t// Calculate the total amount after compounding\n\ttotalAmount := principal * math.Pow((1 + rate/12), 12*years)\n\n\t// Calculate the interest earned\n\tinterestEarned := totalAmount - principal\n\n\tfmt.Printf(\"Total interest earned: %.2f\\n\", interestEarned)\n}\n```"
  },
  {
    "task": "Develop a program that calculates the calories burned during exercise given MET value and duration.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc calculateCaloriesBurned(met float64, duration float64, weightKg float64) float64 {\n\treturn met * weightKg * duration / 60.0\n}\n\nfunc main() {\n\tvar met, duration, weightKg float64\n\n\tfmt.Print(\"Enter MET value: \")\n\tfmt.Scan(&met)\n\n\tfmt.Print(\"Enter duration (in minutes): \")\n\tfmt.Scan(&duration)\n\n\tfmt.Print(\"Enter weight (in kg): \")\n\tfmt.Scan(&weightKg)\n\n\tcaloriesBurned := calculateCaloriesBurned(met, duration, weightKg)\n\tfmt.Printf(\"Calories burned: %.2f\\n\", caloriesBurned)\n}\n```"
  },
  {
    "task": "Build a function that converts a speed from miles per hour to kilometers per hour using multiplication.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc mphToKph(speedMph float64) float64 {\n\treturn speedMph * 1.60934\n}\n\nfunc main() {\n\tspeedMph := 60.0\n\tspeedKph := mphToKph(speedMph)\n\tfmt.Printf(\"%.2f mph is %.2f kph\\n\", speedMph, speedKph)\n}\n```"
  },
  {
    "task": "Implement a program to find the number of days between two dates using arithmetic operations.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\tdate1 := \"2023-10-01\"\n\tdate2 := \"2023-10-15\"\n\n\tlayout := \"2006-01-02\"\n\tt1, err1 := time.Parse(layout, date1)\n\tt2, err2 := time.Parse(layout, date2)\n\n\tif err1 != nil || err2 != nil {\n\t\tfmt.Println(\"Error parsing dates\")\n\t\treturn\n\t}\n\n\tdaysBetween := int(t2.Sub(t1).Hours() / 24)\n\tfmt.Printf(\"Number of days between %s and %s is %d\\n\", date1, date2, daysBetween)\n}\n```"
  },
  {
    "task": "Write a function to calculate the area of a circle given its radius.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc areaOfCircle(radius float64) float64 {\n\treturn math.Pi * radius * radius\n}\n\nfunc main() {\n\tradius := 5.0\n\tarea := areaOfCircle(radius)\n\tfmt.Printf(\"The area of the circle with radius %.2f is %.2f\\n\", radius, area)\n}\n```"
  },
  {
    "task": "Create a program that determines the total distance driven given trips with varying speeds and durations.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype Trip struct {\n\tspeed     float64\n\tduration  float64\n}\n\nfunc main() {\n\ttrips := []Trip{\n\t\t{speed: 60.0, duration: 1.5},\n\t\t{speed: 70.0, duration: 2.0},\n\t\t{speed: 55.0, duration: 1.0},\n\t}\n\n\ttotalDistance := 0.0\n\tfor _, trip := range trips {\n\t\ttotalDistance += trip.speed * trip.duration\n\t}\n\n\tfmt.Printf(\"Total distance driven: %.2f miles\\n\", totalDistance)\n}\n```"
  },
  {
    "task": "Design a function to compute the final price of an item after applying multiple discounts sequentially.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc finalPrice(initialPrice float64, discounts []float64) float64 {\n\tfinalPrice := initialPrice\n\tfor _, discount := range discounts {\n\t\tfinalPrice -= finalPrice * discount / 100\n\t}\n\treturn finalPrice\n}\n\nfunc main() {\n\tinitialPrice := 100.0\n\tdiscounts := []float64{10, 20, 5}\n\tfmt.Printf(\"Final Price: %.2f\\n\", finalPrice(initialPrice, discounts))\n}\n```"
  },
  {
    "task": "Write a script that calculates the number of bricks needed to build a wall given wall dimensions and brick size.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    // Wall dimensions in meters\n    wallHeight := 2.5\n    wallWidth := 5.0\n\n    // Brick dimensions in meters\n    brickHeight := 0.065\n    brickWidth := 0.215\n\n    // Calculate wall area\n    wallArea := wallHeight * wallWidth\n\n    // Calculate brick area\n    brickArea := brickHeight * brickWidth\n\n    // Calculate the number of bricks needed\n    numberOfBricks := wallArea / brickArea\n\n    fmt.Printf(\"Number of bricks needed: %.0f\\n\", numberOfBricks)\n}\n```"
  },
  {
    "task": "Develop a program to determine the number of pizzas required for a party given the number of people and slices per pizza.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc main() {\n\tvar people, slicesPerPerson, slicesPerPizza int\n\n\tfmt.Print(\"Enter the number of people attending the party: \")\n\tfmt.Scan(&people)\n\tfmt.Print(\"Enter the number of slices each person will eat: \")\n\tfmt.Scan(&slicesPerPerson)\n\tfmt.Print(\"Enter the number of slices per pizza: \")\n\tfmt.Scan(&slicesPerPizza)\n\n\ttotalSlicesNeeded := people * slicesPerPerson\n\tpizzasNeeded := math.Ceil(float64(totalSlicesNeeded) / float64(slicesPerPizza))\n\n\tfmt.Printf(\"Number of pizzas required: %d\\n\", int(pizzasNeeded))\n}\n```"
  },
  {
    "task": "Implement a function that calculates the total cost of a meal including tax and tip.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc calculateTotalCost(mealCost, taxPercent, tipPercent float64) float64 {\n\ttax := mealCost * (taxPercent / 100)\n\ttip := mealCost * (tipPercent / 100)\n\ttotalCost := mealCost + tax + tip\n\treturn totalCost\n}\n\nfunc main() {\n\tmealCost := 50.0\n\ttaxPercent := 10.0\n\ttipPercent := 15.0\n\ttotal := calculateTotalCost(mealCost, taxPercent, tipPercent)\n\tfmt.Printf(\"Total cost of the meal: $%.2f\\n\", total)\n}\n```"
  },
  {
    "task": "Create a program to compute the average rainfall over a period using addition and division.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\trainfalls := []float64{1.2, 3.5, 2.8, 4.0, 0.5} // Example rainfall data\n\ttotal := 0.0\n\n\tfor _, rainfall := range rainfalls {\n\t\ttotal += rainfall\n\t}\n\n\taverage := total / float64(len(rainfalls))\n\tfmt.Printf(\"Average Rainfall: %.2f\\n\", average)\n}\n```"
  },
  {
    "task": "Write a function that determines the number of batches needed to produce a specific quantity of a product.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc batchesNeeded(totalQuantity, batchSize int) int {\n\tif batchSize == 0 {\n\t\treturn 0\n\t}\n\treturn (totalQuantity + batchSize - 1) / batchSize\n}\n\nfunc main() {\n\ttotalQuantity := 100\n\tbatchSize := 30\n\tfmt.Println(batchesNeeded(totalQuantity, batchSize))\n}\n```"
  },
  {
    "task": "Design a program to calculate the total energy consumption of a household given individual appliance usage.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tapplianceUsage := map[string]float64{\n\t\t\"fridge\":    1.5, // kWh per day\n\t\t\"tv\":        0.2, \n\t\t\"washingMachine\": 1.0,\n\t\t\"oven\":      2.0,\n\t\t\"microwave\": 0.8,\n\t}\n\t\n\ttotalEnergyConsumption := 0.0\n\tfor _, usage := range applianceUsage {\n\t\ttotalEnergyConsumption += usage\n\t}\n\t\n\tfmt.Printf(\"Total energy consumption: %.2f kWh\\n\", totalEnergyConsumption)\n}\n```"
  },
  {
    "task": "Develop a function that computes the body surface area of a person using height and weight.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc bodySurfaceArea(height, weight float64) float64 {\n\treturn math.Sqrt((height * weight) / 3600)\n}\n\nfunc main() {\n\theight := 175.0 // in cm\n\tweight := 70.0  // in kg\n\tbsa := bodySurfaceArea(height, weight)\n\tfmt.Printf(\"Body Surface Area: %.2f m\u00b2\\n\", bsa)\n}\n```"
  },
  {
    "task": "Build a script to calculate the monthly payment on a mortgage using principal, interest rate, and term.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc calculateMonthlyPayment(principal float64, annualInterestRate float64, termYears int) float64 {\n\tmonthlyInterestRate := annualInterestRate / 12 / 100\n\tnumberOfPayments := float64(termYears * 12)\n\treturn (principal * monthlyInterestRate) / (1 - math.Pow(1+monthlyInterestRate, -numberOfPayments))\n}\n\nfunc main() {\n\tprincipal := 200000.0\n\tannualInterestRate := 5.0\n\ttermYears := 30\n\n\tmonthlyPayment := calculateMonthlyPayment(principal, annualInterestRate, termYears)\n\tfmt.Printf(\"Monthly Payment: $%.2f\\n\", monthlyPayment)\n}\n```"
  },
  {
    "task": "Implement a function to find the volume of a cone given its height and radius.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc coneVolume(height, radius float64) float64 {\n\treturn (1.0 / 3.0) * math.Pi * math.Pow(radius, 2) * height\n}\n\nfunc main() {\n\theight := 10.0\n\tradius := 5.0\n\tvolume := coneVolume(height, radius)\n\tfmt.Printf(\"The volume of the cone is: %f\\n\", volume)\n}\n```"
  },
  {
    "task": "Write a program that estimates the cost of a trip using fuel efficiency and distance.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tvar distance, fuelEfficiency, fuelPrice float64\n\n\tfmt.Print(\"Enter the distance of the trip in kilometers: \")\n\tfmt.Scan(&distance)\n\n\tfmt.Print(\"Enter the fuel efficiency of the vehicle in liters per kilometer: \")\n\tfmt.Scan(&fuelEfficiency)\n\n\tfmt.Print(\"Enter the price of fuel per liter: \")\n\tfmt.Scan(&fuelPrice)\n\n\tcost := distance * fuelEfficiency * fuelPrice\n\n\tfmt.Printf(\"The estimated cost of the trip is: %.2f\\n\", cost)\n}\n```"
  }
]