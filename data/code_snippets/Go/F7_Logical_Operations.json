[
  {
    "task": "Create a function that takes two boolean inputs and returns true if both are true using logical AND.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc bothTrue(a, b bool) bool {\n\treturn a && b\n}\n\nfunc main() {\n\tfmt.Println(bothTrue(true, true))   // true\n\tfmt.Println(bothTrue(true, false))  // false\n\tfmt.Println(bothTrue(false, true))  // false\n\tfmt.Println(bothTrue(false, false)) // false\n}\n```"
  },
  {
    "task": "Write a script to check if either of two given conditions are met using logical OR.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tcondition1 := true\n\tcondition2 := false\n\n\tif condition1 || condition2 {\n\t\tfmt.Println(\"At least one condition is met.\")\n\t} else {\n\t\tfmt.Println(\"Neither condition is met.\")\n\t}\n}\n```"
  },
  {
    "task": "Develop a program that negates a boolean variable using logical NOT.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    booleanVar := true\n    negatedVar := !booleanVar\n    fmt.Println(\"Original:\", booleanVar)\n    fmt.Println(\"Negated:\", negatedVar)\n}\n```"
  },
  {
    "task": "Implement a feature that determines if a number is within a specific range using logical operators.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc isWithinRange(num, lower, upper int) bool {\n\treturn num >= lower && num <= upper\n}\n\nfunc main() {\n\tnum := 10\n\tlower := 5\n\tupper := 15\n\n\tif isWithinRange(num, lower, upper) {\n\t\tfmt.Printf(\"%d is within the range of %d and %d\\n\", num, lower, upper)\n\t} else {\n\t\tfmt.Printf(\"%d is not within the range of %d and %d\\n\", num, lower, upper)\n\t}\n}\n```"
  },
  {
    "task": "Design a system that checks if a user has both read and write permissions using logical AND.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc hasReadAndWritePermissions(read bool, write bool) bool {\n\treturn read && write\n}\n\nfunc main() {\n\tuserReadPermission := true\n\tuserWritePermission := true\n\n\tif hasReadAndWritePermissions(userReadPermission, userWritePermission) {\n\t\tfmt.Println(\"User has both read and write permissions.\")\n\t} else {\n\t\tfmt.Println(\"User does not have both read and write permissions.\")\n\t}\n}\n```"
  },
  {
    "task": "Write a function to verify if a string is neither empty nor null using logical NOT.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc isStringValid(s *string) bool {\n\treturn s != nil && *s != \"\"\n}\n\nfunc main() {\n\tstr1 := \"Hello\"\n\tstr2 := \"\"\n\n\tfmt.Println(isStringValid(&str1)) // true\n\tfmt.Println(isStringValid(&str2)) // false\n\tfmt.Println(isStringValid(nil))   // false\n}\n```"
  },
  {
    "task": "Create a conditional statement that executes a block of code if either of two expressions are true using logical OR.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    a := true\n    b := false\n\n    if a || b {\n        fmt.Println(\"At least one of the expressions is true.\")\n    }\n}\n```"
  },
  {
    "task": "Build a program that inverts the truth value of a given condition using logical NOT.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tcondition := true\n\tinvertedCondition := !condition\n\tfmt.Println(\"Original condition:\", condition)\n\tfmt.Println(\"Inverted condition:\", invertedCondition)\n}\n```"
  },
  {
    "task": "Compose a function to return true if a list is not empty using logical NOT.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc isNotEmpty(list []interface{}) bool {\n\treturn !(len(list) == 0)\n}\n\nfunc main() {\n\tfmt.Println(isNotEmpty([]interface{}{1, 2, 3})) // true\n\tfmt.Println(isNotEmpty([]interface{}{}))        // false\n}\n```"
  },
  {
    "task": "Develop a filter that selects items from a collection only if they meet multiple criteria using logical AND.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype Item struct {\n\tName  string\n\tPrice float64\n}\n\nfunc filterItems(items []Item, minPrice, maxPrice float64) []Item {\n\tvar filteredItems []Item\n\tfor _, item := range items {\n\t\tif item.Price >= minPrice && item.Price <= maxPrice {\n\t\t\tfilteredItems = append(filteredItems, item)\n\t\t}\n\t}\n\treturn filteredItems\n}\n\nfunc main() {\n\titems := []Item{\n\t\t{\"Item1\", 10.0},\n\t\t{\"Item2\", 20.0},\n\t\t{\"Item3\", 30.0},\n\t\t{\"Item4\", 40.0},\n\t}\n\n\tminPrice := 15.0\n\tmaxPrice := 35.0\n\tresult := filterItems(items, minPrice, maxPrice)\n\n\tfmt.Println(\"Filtered Items:\")\n\tfor _, item := range result {\n\t\tfmt.Printf(\"Name: %s, Price: %.2f\\n\", item.Name, item.Price)\n\t}\n}\n```"
  },
  {
    "task": "Write a script that checks if a value is outside a given range using logical OR.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tvalue := 15\n\tlowerBound := 10\n\tupperBound := 20\n\n\tif value < lowerBound || value > upperBound {\n\t\tfmt.Println(\"Value is outside the range.\")\n\t} else {\n\t\tfmt.Println(\"Value is within the range.\")\n\t}\n}\n```"
  },
  {
    "task": "Create a small program to toggle a boolean flag using logical NOT.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tflag := false\n\tfmt.Println(\"Initial flag:\", flag)\n\n\t// Toggle the flag using logical NOT\n\tflag = !flag\n\tfmt.Println(\"Toggled flag:\", flag)\n\n\t// Toggle again\n\tflag = !flag\n\tfmt.Println(\"Toggled again:\", flag)\n}\n```"
  },
  {
    "task": "Implement a feature that evaluates if a username is both unique and valid using logical AND.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc isUsernameUnique(username string, existingUsernames []string) bool {\n\tfor _, existing := range existingUsernames {\n\t\tif existing == username {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc isUsernameValid(username string) bool {\n\treturn len(username) >= 5 // Example validation: at least 5 characters\n}\n\nfunc isUsernameUniqueAndValid(username string, existingUsernames []string) bool {\n\treturn isUsernameUnique(username, existingUsernames) && isUsernameValid(username)\n}\n\nfunc main() {\n\texistingUsernames := []string{\"user1\", \"admin\", \"guest\"}\n\tnewUsername := \"newUser\"\n\n\tif isUsernameUniqueAndValid(newUsername, existingUsernames) {\n\t\tfmt.Println(\"The username is unique and valid.\")\n\t} else {\n\t\tfmt.Println(\"The username is either not unique or not valid.\")\n\t}\n}\n```"
  },
  {
    "task": "Design a conditional to perform an action if neither of two flags are set using logical NOT.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tflag1 := false\n\tflag2 := false\n\n\tif !flag1 && !flag2 {\n\t\tfmt.Println(\"Neither flag1 nor flag2 is set\")\n\t}\n}\n```"
  },
  {
    "task": "Write a function that returns true if at least one of multiple boolean inputs is true using logical OR.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc anyTrue(inputs ...bool) bool {\n\tfor _, input := range inputs {\n\t\tif input {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\nfunc main() {\n\tfmt.Println(anyTrue(false, false, true))  // Output: true\n\tfmt.Println(anyTrue(false, false, false)) // Output: false\n\tfmt.Println(anyTrue(true, false, false))  // Output: true\n}\n```"
  },
  {
    "task": "Create a loop that continues executing as long as two conditions are both false using logical NOT and AND.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tcondition1 := false\n\tcondition2 := false\n\n\tfor !condition1 && !condition2 {\n\t\tfmt.Println(\"Loop is executing\")\n\t\t// Logic to potentially change condition1 and condition2\n\t\t// For demonstration, break the loop after one iteration\n\t\tbreak\n\t}\n}\n```"
  },
  {
    "task": "Develop a sequence that checks if a character is either a vowel or a consonant using logical OR.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"unicode\"\n)\n\nfunc isVowelOrConsonant(char rune) string {\n\tif !unicode.IsLetter(char) {\n\t\treturn \"Not a letter\"\n\t}\n\tchar = unicode.ToLower(char)\n\tif char == 'a' || char == 'e' || char == 'i' || char == 'o' || char == 'u' {\n\t\treturn \"Vowel\"\n\t}\n\treturn \"Consonant\"\n}\n\nfunc main() {\n\tchar := 'a' // Example character\n\tfmt.Println(isVowelOrConsonant(char))\n}\n```"
  },
  {
    "task": "Implement a validation that ensures a password is both of minimum length and contains numbers using logical AND.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"unicode\"\n)\n\nfunc isValidPassword(password string) bool {\n\tconst minLength = 8\n\thasNumber := false\n\n\tif len(password) < minLength {\n\t\treturn false\n\t}\n\n\tfor _, char := range password {\n\t\tif unicode.IsDigit(char) {\n\t\t\thasNumber = true\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn len(password) >= minLength && hasNumber\n}\n\nfunc main() {\n\tpassword := \"P@ssw0rd123\"\n\tif isValidPassword(password) {\n\t\tfmt.Println(\"Password is valid.\")\n\t} else {\n\t\tfmt.Println(\"Password is invalid.\")\n\t}\n}\n```"
  },
  {
    "task": "Compose a test to determine if a point is not within a circle using logical NOT.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\ntype Point struct {\n\tx, y float64\n}\n\ntype Circle struct {\n\tcenter Point\n\tradius float64\n}\n\nfunc isPointOutsideCircle(point Point, circle Circle) bool {\n\tdistanceSquared := math.Pow(point.x-circle.center.x, 2) + math.Pow(point.y-circle.center.y, 2)\n\treturn !(distanceSquared <= math.Pow(circle.radius, 2))\n}\n\nfunc main() {\n\tcircle := Circle{center: Point{x: 0, y: 0}, radius: 5}\n\tpoint := Point{x: 6, y: 0}\n\n\tif isPointOutsideCircle(point, circle) {\n\t\tfmt.Println(\"The point is outside the circle.\")\n\t} else {\n\t\tfmt.Println(\"The point is within the circle.\")\n\t}\n}\n```"
  },
  {
    "task": "Write a function to decide if a user is either an admin or an editor using logical OR.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc isAdminOrEditor(userRole string) bool {\n\treturn userRole == \"admin\" || userRole == \"editor\"\n}\n\nfunc main() {\n\tfmt.Println(isAdminOrEditor(\"admin\"))  // true\n\tfmt.Println(isAdminOrEditor(\"editor\")) // true\n\tfmt.Println(isAdminOrEditor(\"user\"))   // false\n}\n```"
  },
  {
    "task": "Create a conditional statement to trigger an alert if two sensors both detect motion using logical AND.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    sensor1 := true\n    sensor2 := true\n\n    if sensor1 && sensor2 {\n        fmt.Println(\"Alert: Both sensors detected motion!\")\n    }\n}\n```"
  },
  {
    "task": "Design a program to validate an email format and ensure it contains a domain using logical AND.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"regexp\"\n)\n\nfunc isValidEmail(email string) bool {\n\temailPattern := `^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$`\n\tre := regexp.MustCompile(emailPattern)\n\treturn re.MatchString(email) && containsDomain(email)\n}\n\nfunc containsDomain(email string) bool {\n\tatIndex := -1\n\tfor i, char := range email {\n\t\tif char == '@' {\n\t\t\tatIndex = i\n\t\t\tbreak\n\t\t}\n\t}\n\treturn atIndex != -1 && atIndex < len(email)-1\n}\n\nfunc main() {\n\temail := \"example@domain.com\"\n\tif isValidEmail(email) {\n\t\tfmt.Println(\"Valid email format with domain.\")\n\t} else {\n\t\tfmt.Println(\"Invalid email format or missing domain.\")\n\t}\n}\n```"
  },
  {
    "task": "Develop a method to confirm that a transaction is neither fraudulent nor unauthorized using logical NOT.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc isTransactionValid(isFraudulent bool, isUnauthorized bool) bool {\n\treturn !isFraudulent && !isUnauthorized\n}\n\nfunc main() {\n\tisFraudulent := false\n\tisUnauthorized := false\n\n\tif isTransactionValid(isFraudulent, isUnauthorized) {\n\t\tfmt.Println(\"Transaction is valid.\")\n\t} else {\n\t\tfmt.Println(\"Transaction is invalid.\")\n\t}\n}\n```"
  },
  {
    "task": "Write a function that outputs true if a file is either missing or empty using logical OR.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc isFileMissingOrEmpty(filename string) bool {\n\tinfo, err := os.Stat(filename)\n\treturn os.IsNotExist(err) || info.Size() == 0\n}\n\nfunc main() {\n\tfmt.Println(isFileMissingOrEmpty(\"test.txt\"))\n}\n```"
  },
  {
    "task": "Implement a system to check if a student's grade is neither failing nor incomplete using logical NOT.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tstudentGrade := 75 // Example grade\n\tif isGradeValid(studentGrade) {\n\t\tfmt.Println(\"The grade is valid.\")\n\t} else {\n\t\tfmt.Println(\"The grade is either failing or incomplete.\")\n\t}\n}\n\nfunc isGradeValid(grade int) bool {\n\tconst passingGrade = 60\n\tconst incompleteGrade = -1\n\n\treturn !(grade < passingGrade || grade == incompleteGrade)\n}\n```"
  },
  {
    "task": "Create a script that executes a command if a file is both readable and writable using logical AND.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc main() {\n\tfilePath := \"example.txt\"\n\n\tfileInfo, err := os.Stat(filePath)\n\tif err != nil {\n\t\tfmt.Println(\"Error retrieving file information:\", err)\n\t\treturn\n\t}\n\n\treadable := fileInfo.Mode().Perm()&(1<<(uint(7))) != 0\n\twritable := fileInfo.Mode().Perm()&(1<<(uint(7)-1)) != 0\n\n\tif readable && writable {\n\t\tfmt.Println(\"The file is both readable and writable. Executing command...\")\n\t\t// Place the command execution logic here\n\t} else {\n\t\tfmt.Println(\"The file is not both readable and writable.\")\n\t}\n}\n```"
  },
  {
    "task": "Compose a function to determine if a temperature is not within a safe operating range using logical NOT.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc isTemperatureUnsafe(temp int) bool {\n\tconst (\n\t\tminSafeTemp = 60\n\t\tmaxSafeTemp = 80\n\t)\n\treturn !(temp >= minSafeTemp && temp <= maxSafeTemp)\n}\n\nfunc main() {\n\ttemp := 75\n\tfmt.Println(isTemperatureUnsafe(temp)) // Output: false\n}\n```"
  },
  {
    "task": "Design a check to see if a car is either out of fuel or needs maintenance using logical OR.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    outOfFuel := true\n    needsMaintenance := false\n\n    if outOfFuel || needsMaintenance {\n        fmt.Println(\"The car is either out of fuel or needs maintenance.\")\n    } else {\n        fmt.Println(\"The car is good to go.\")\n    }\n}\n```"
  },
  {
    "task": "Develop a routine that ensures a network connection is both stable and secure using logical AND.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc isConnectionStable() bool {\n\t// Simulate a check for connection stability\n\treturn true // Assume the connection is stable\n}\n\nfunc isConnectionSecure() bool {\n\t// Simulate a check for connection security\n\treturn true // Assume the connection is secure\n}\n\nfunc isConnectionStableAndSecure() bool {\n\treturn isConnectionStable() && isConnectionSecure()\n}\n\nfunc main() {\n\tif isConnectionStableAndSecure() {\n\t\tfmt.Println(\"The network connection is stable and secure.\")\n\t} else {\n\t\tfmt.Println(\"The network connection is not stable and secure.\")\n\t}\n}\n```"
  },
  {
    "task": "Write a conditional to print a message if a user is not logged in using logical NOT.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    userLoggedIn := false\n\n    if !userLoggedIn {\n        fmt.Println(\"User is not logged in.\")\n    }\n}\n```"
  },
  {
    "task": "Create a function that checks if a number is both even and positive using logical AND.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc isEvenAndPositive(num int) bool {\n\treturn num > 0 && num%2 == 0\n}\n\nfunc main() {\n\tfmt.Println(isEvenAndPositive(4))  // true\n\tfmt.Println(isEvenAndPositive(-4)) // false\n\tfmt.Println(isEvenAndPositive(3))  // false\n\tfmt.Println(isEvenAndPositive(0))  // false\n}\n```"
  },
  {
    "task": "Implement a feature that turns off a device if neither of two switches are on using logical NOT.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tswitch1 := false\n\tswitch2 := false\n\n\t// Turn off the device if neither switch is on\n\tdeviceOn := !(switch1 || switch2)\n\n\tfmt.Println(\"Device is on:\", deviceOn)\n}\n```"
  },
  {
    "task": "Compose a script to alert if a server is either down or running slow using logical OR.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tserverDown := false\n\tserverSlow := true\n\n\tif serverDown || serverSlow {\n\t\tfmt.Println(\"Alert: The server is either down or running slow.\")\n\t} else {\n\t\tfmt.Println(\"The server is running normally.\")\n\t}\n}\n```"
  },
  {
    "task": "Design a validation method to ensure a form field is not empty using logical NOT.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc isFieldEmpty(input string) bool {\n\treturn !(input != \"\")\n}\n\nfunc main() {\n\tfield := \"\"\n\tif isFieldEmpty(field) {\n\t\tfmt.Println(\"Field is empty\")\n\t} else {\n\t\tfmt.Println(\"Field is not empty\")\n\t}\n}\n```"
  },
  {
    "task": "Write a program to determine if two strings are both non-empty using logical AND.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tstr1 := \"hello\"\n\tstr2 := \"world\"\n\tif str1 != \"\" && str2 != \"\" {\n\t\tfmt.Println(\"Both strings are non-empty\")\n\t} else {\n\t\tfmt.Println(\"At least one string is empty\")\n\t}\n}\n```"
  },
  {
    "task": "Create a function that checks if a number is either prime or a perfect square using logical OR.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc isPrime(n int) bool {\n\tif n <= 1 {\n\t\treturn false\n\t}\n\tfor i := 2; i <= int(math.Sqrt(float64(n))); i++ {\n\t\tif n%i == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc isPerfectSquare(n int) bool {\n\tsqrt := int(math.Sqrt(float64(n)))\n\treturn sqrt*sqrt == n\n}\n\nfunc isPrimeOrPerfectSquare(n int) bool {\n\treturn isPrime(n) || isPerfectSquare(n)\n}\n\nfunc main() {\n\t// Example usage\n\tfmt.Println(isPrimeOrPerfectSquare(5))  // true (prime)\n\tfmt.Println(isPrimeOrPerfectSquare(4))  // true (perfect square)\n\tfmt.Println(isPrimeOrPerfectSquare(8))  // false\n\tfmt.Println(isPrimeOrPerfectSquare(9))  // true (perfect square)\n}\n```"
  },
  {
    "task": "Develop a script to ensure a user is either an adult or has parental consent using logical OR.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tage := 16\n\thasParentalConsent := true\n\n\tif age >= 18 || hasParentalConsent {\n\t\tfmt.Println(\"Access granted\")\n\t} else {\n\t\tfmt.Println(\"Access denied\")\n\t}\n}\n```"
  },
  {
    "task": "Implement a condition to execute a task if a variable is neither zero nor negative using logical NOT.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    var number int = 5\n\n    if !(number == 0 || number < 0) {\n        fmt.Println(\"Executing task: Number is positive and non-zero.\")\n    }\n}\n```"
  },
  {
    "task": "Compose a method to verify if a system is both up-to-date and functioning using logical AND.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc isSystemOperational(upToDate bool, functioning bool) bool {\n\treturn upToDate && functioning\n}\n\nfunc main() {\n\tupToDate := true\n\tfunctioning := true\n\tfmt.Println(isSystemOperational(upToDate, functioning))\n}\n```"
  },
  {
    "task": "Write a function that returns true if a list contains neither duplicates nor null values using logical NOT.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc containsNoDuplicatesOrNulls(list []interface{}) bool {\n\tseen := make(map[interface{}]bool)\n\tfor _, item := range list {\n\t\tif item == nil || seen[item] {\n\t\t\treturn false\n\t\t}\n\t\tseen[item] = true\n\t}\n\treturn true\n}\n\nfunc main() {\n\tlist := []interface{}{1, 2, 3, 4, 5}\n\tfmt.Println(containsNoDuplicatesOrNulls(list)) // Output: true\n}\n```"
  },
  {
    "task": "Create a script to perform an action if a temperature is either too high or too low using logical OR.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\ttemperature := 30 // Example temperature; adjust as needed\n\n\t// Define thresholds\n\ttooHigh := 35\n\ttooLow := 5\n\n\tif temperature > tooHigh || temperature < tooLow {\n\t\tfmt.Println(\"Temperature is out of the acceptable range.\")\n\t} else {\n\t\tfmt.Println(\"Temperature is within the acceptable range.\")\n\t}\n}\n```"
  },
  {
    "task": "Design a feature to toggle an option if a setting is not enabled using logical NOT.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc toggleOption(settingEnabled bool, optionEnabled bool) bool {\n\tif !settingEnabled {\n\t\toptionEnabled = !optionEnabled\n\t}\n\treturn optionEnabled\n}\n\nfunc main() {\n\tsettingEnabled := false\n\toptionEnabled := false\n\n\toptionEnabled = toggleOption(settingEnabled, optionEnabled)\n\tfmt.Println(\"Option Enabled:\", optionEnabled)\n}\n```"
  },
  {
    "task": "Develop a check to ensure a username is both available and meets length requirements using logical AND.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc isUsernameValid(username string, isAvailable bool) bool {\n\tminLength := 5\n\tmaxLength := 15\n\treturn isAvailable && len(username) >= minLength && len(username) <= maxLength\n}\n\nfunc main() {\n\tusername := \"exampleUser\"\n\tisAvailable := true\n\tif isUsernameValid(username, isAvailable) {\n\t\tfmt.Println(\"Username is valid and available.\")\n\t} else {\n\t\tfmt.Println(\"Username is either not available or does not meet length requirements.\")\n\t}\n}\n```"
  },
  {
    "task": "Implement a function that returns true if a number is neither too large nor too small using logical NOT.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc isNeitherTooLargeNorTooSmall(num, lower, upper int) bool {\n\treturn !(num < lower || num > upper)\n}\n\nfunc main() {\n\tfmt.Println(isNeitherTooLargeNorTooSmall(10, 5, 15)) // true\n\tfmt.Println(isNeitherTooLargeNorTooSmall(20, 5, 15)) // false\n\tfmt.Println(isNeitherTooLargeNorTooSmall(3, 5, 15))  // false\n}\n```"
  },
  {
    "task": "Write a conditional to print a warning if a disk is either full or nearly full using logical OR.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tdiskFull := false\n\tdiskNearlyFull := true\n\n\tif diskFull || diskNearlyFull {\n\t\tfmt.Println(\"Warning: Disk is either full or nearly full.\")\n\t}\n}\n```"
  },
  {
    "task": "Create a routine to validate that two dates are both within a valid range using logical AND.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc areDatesValid(date1, date2, start, end time.Time) bool {\n\treturn (date1.After(start) || date1.Equal(start)) && (date1.Before(end) || date1.Equal(end)) &&\n\t\t(date2.After(start) || date2.Equal(start)) && (date2.Before(end) || date2.Equal(end))\n}\n\nfunc main() {\n\tstart := time.Date(2023, 1, 1, 0, 0, 0, 0, time.UTC)\n\tend := time.Date(2023, 12, 31, 23, 59, 59, 0, time.UTC)\n\tdate1 := time.Date(2023, 6, 15, 0, 0, 0, 0, time.UTC)\n\tdate2 := time.Date(2023, 11, 20, 0, 0, 0, 0, time.UTC)\n\n\tif areDatesValid(date1, date2, start, end) {\n\t\tfmt.Println(\"Both dates are within the valid range.\")\n\t} else {\n\t\tfmt.Println(\"One or both dates are outside the valid range.\")\n\t}\n}\n```"
  },
  {
    "task": "Compose a function to decide if a person is either a minor or a senior using logical OR.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc isMinorOrSenior(age int) bool {\n\treturn age < 18 || age >= 65\n}\n\nfunc main() {\n\tfmt.Println(isMinorOrSenior(15)) // true\n\tfmt.Println(isMinorOrSenior(30)) // false\n\tfmt.Println(isMinorOrSenior(70)) // true\n}\n```"
  },
  {
    "task": "Design a script to execute a task if a condition is not met using logical NOT.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    condition := false\n\n    if !condition {\n        fmt.Println(\"Executing task as the condition is not met.\")\n    }\n}\n```"
  },
  {
    "task": "Develop a program to verify if a process is neither running nor scheduled using logical NOT.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tisRunning := false\n\tisScheduled := false\n\n\tif !isRunning && !isScheduled {\n\t\tfmt.Println(\"The process is neither running nor scheduled.\")\n\t} else {\n\t\tfmt.Println(\"The process is either running or scheduled.\")\n\t}\n}\n```"
  },
  {
    "task": "Implement a feature that confirms a file is both accessible and not locked using logical AND.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc isFileAccessibleAndUnlocked(filePath string) bool {\n\t_, err := os.Stat(filePath)\n\tisAccessible := err == nil\n\n\tfile, err := os.Open(filePath)\n\tisUnlocked := err == nil\n\tif file != nil {\n\t\tfile.Close()\n\t}\n\n\treturn isAccessible && isUnlocked\n}\n\nfunc main() {\n\tfilePath := \"example.txt\"\n\tif isFileAccessibleAndUnlocked(filePath) {\n\t\tfmt.Println(\"The file is accessible and not locked.\")\n\t} else {\n\t\tfmt.Println(\"The file is either not accessible or locked.\")\n\t}\n}\n```"
  },
  {
    "task": "Write a script to check if a device is either offline or in maintenance mode using logical OR.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc isDeviceOfflineOrInMaintenance(offline bool, maintenance bool) bool {\n\treturn offline || maintenance\n}\n\nfunc main() {\n\tdeviceOffline := true\n\tdeviceInMaintenance := false\n\n\tif isDeviceOfflineOrInMaintenance(deviceOffline, deviceInMaintenance) {\n\t\tfmt.Println(\"The device is either offline or in maintenance mode.\")\n\t} else {\n\t\tfmt.Println(\"The device is online and not in maintenance mode.\")\n\t}\n}\n```"
  },
  {
    "task": "Create a function to ensure a password is both complex and unique using logical AND.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"unicode\"\n)\n\nvar existingPasswords = map[string]bool{}\n\nfunc isComplex(password string) bool {\n\thasUpper := false\n\thasLower := false\n\thasDigit := false\n\thasSpecial := false\n\n\tfor _, ch := range password {\n\t\tswitch {\n\t\tcase unicode.IsUpper(ch):\n\t\t\thasUpper = true\n\t\tcase unicode.IsLower(ch):\n\t\t\thasLower = true\n\t\tcase unicode.IsDigit(ch):\n\t\t\thasDigit = true\n\t\tcase unicode.IsPunct(ch) || unicode.IsSymbol(ch):\n\t\t\thasSpecial = true\n\t\t}\n\t}\n\n\treturn hasUpper && hasLower && hasDigit && hasSpecial\n}\n\nfunc isUnique(password string) bool {\n\tif _, exists := existingPasswords[password]; exists {\n\t\treturn false\n\t}\n\texistingPasswords[password] = true\n\treturn true\n}\n\nfunc isComplexAndUnique(password string) bool {\n\treturn isComplex(password) && isUnique(password)\n}\n\nfunc main() {\n\tpassword := \"Abc123!\"\n\tif isComplexAndUnique(password) {\n\t\tfmt.Println(\"Password is complex and unique.\")\n\t} else {\n\t\tfmt.Println(\"Password is not complex and/or not unique.\")\n\t}\n}\n```"
  },
  {
    "task": "Design a validation that ensures a value is not negative using logical NOT.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc isNotNegative(value int) bool {\n\treturn !(value < 0)\n}\n\nfunc main() {\n\tvalue := 5\n\tif isNotNegative(value) {\n\t\tfmt.Println(\"The value is not negative.\")\n\t} else {\n\t\tfmt.Println(\"The value is negative.\")\n\t}\n}\n```"
  },
  {
    "task": "Develop a check to see if a user has either exceeded their quota or is nearing it using logical OR.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tuserQuota := 100\n\tuserUsage := 90\n\tthreshold := 95\n\n\tif userUsage > userQuota || userUsage >= threshold {\n\t\tfmt.Println(\"User has either exceeded their quota or is nearing it.\")\n\t} else {\n\t\tfmt.Println(\"User is within their quota.\")\n\t}\n}\n```"
  },
  {
    "task": "Implement a routine to confirm that a user is both authenticated and authorized using logical AND.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc isAuthenticated(user string) bool {\n\t// Placeholder logic for authentication check\n\treturn user == \"authenticatedUser\"\n}\n\nfunc isAuthorized(user string) bool {\n\t// Placeholder logic for authorization check\n\treturn user == \"authorizedUser\"\n}\n\nfunc isUserAuthenticatedAndAuthorized(user string) bool {\n\treturn isAuthenticated(user) && isAuthorized(user)\n}\n\nfunc main() {\n\tuser := \"authenticatedUser\"\n\n\tif isUserAuthenticatedAndAuthorized(user) {\n\t\tfmt.Println(\"User is authenticated and authorized.\")\n\t} else {\n\t\tfmt.Println(\"User is not authenticated or not authorized.\")\n\t}\n}\n```"
  },
  {
    "task": "Compose a function to determine if a light is either on or blinking using logical OR.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc isLightOnOrBlinking(lightOn bool, lightBlinking bool) bool {\n\treturn lightOn || lightBlinking\n}\n\nfunc main() {\n\tfmt.Println(isLightOnOrBlinking(true, false))  // true\n\tfmt.Println(isLightOnOrBlinking(false, true))  // true\n\tfmt.Println(isLightOnOrBlinking(false, false)) // false\n\tfmt.Println(isLightOnOrBlinking(true, true))   // true\n}\n```"
  },
  {
    "task": "Write a script that executes a command if a network connection is neither weak nor unstable using logical NOT.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tisWeak := false\n\tisUnstable := false\n\n\tif !(isWeak || isUnstable) {\n\t\texecuteCommand()\n\t}\n}\n\nfunc executeCommand() {\n\tfmt.Println(\"Executing command...\")\n}\n```"
  },
  {
    "task": "Create a program to verify that a sensor is both calibrated and active using logical AND.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tcalibrated := true  // Example value, can be true or false\n\tactive := true      // Example value, can be true or false\n\n\tif calibrated && active {\n\t\tfmt.Println(\"Sensor is both calibrated and active.\")\n\t} else {\n\t\tfmt.Println(\"Sensor is not both calibrated and active.\")\n\t}\n}\n```"
  },
  {
    "task": "Design a feature to alert if a process is either overdue or incomplete using logical OR.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tprocessOverdue := true\n\tprocessIncomplete := false\n\n\tif processOverdue || processIncomplete {\n\t\tfmt.Println(\"Alert: The process is either overdue or incomplete.\")\n\t} else {\n\t\tfmt.Println(\"The process is on track and complete.\")\n\t}\n}\n```"
  },
  {
    "task": "Develop a script to check if a person is neither a guest nor a temporary user using logical NOT.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tisGuest := false\n\tisTemporaryUser := false\n\n\tif !isGuest && !isTemporaryUser {\n\t\tfmt.Println(\"The person is neither a guest nor a temporary user.\")\n\t} else {\n\t\tfmt.Println(\"The person is either a guest or a temporary user.\")\n\t}\n}\n```"
  },
  {
    "task": "Implement a function to toggle a light if a switch is not pressed using logical NOT.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc toggleLight(isSwitchPressed bool) bool {\n\treturn !isSwitchPressed\n}\n\nfunc main() {\n\tlightState := toggleLight(false)\n\tfmt.Println(\"Light is on:\", lightState) // Light is on: true\n\n\tlightState = toggleLight(true)\n\tfmt.Println(\"Light is on:\", lightState) // Light is on: false\n}\n```"
  },
  {
    "task": "Write a conditional to trigger an event if a file is either corrupted or missing using logical OR.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc main() {\n\tfilePath := \"example.txt\"\n\n\t// Check if the file exists\n\t_, err := os.Stat(filePath)\n\tisMissing := os.IsNotExist(err)\n\n\t// Simulate checking if a file is corrupted (for example purposes, let's assume it's a simple boolean)\n\tisCorrupted := false\n\n\t// Trigger event if file is either corrupted or missing\n\tif isCorrupted || isMissing {\n\t\tfmt.Println(\"Event triggered: File is either corrupted or missing.\")\n\t} else {\n\t\tfmt.Println(\"File is intact and present.\")\n\t}\n}\n```"
  },
  {
    "task": "Create a routine that verifies if a vehicle is both insured and registered using logical AND.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc isInsuredAndRegistered(insured, registered bool) bool {\n\treturn insured && registered\n}\n\nfunc main() {\n\tinsured := true\n\tregistered := true\n\tfmt.Println(\"Vehicle is insured and registered:\", isInsuredAndRegistered(insured, registered))\n}\n```"
  },
  {
    "task": "Compose a method to check if an account is either overdrawn or flagged using logical OR.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype Account struct {\n\tBalance  float64\n\tFlagged  bool\n}\n\nfunc (a *Account) IsOverdrawnOrFlagged() bool {\n\treturn a.Balance < 0 || a.Flagged\n}\n\nfunc main() {\n\taccount := Account{-100.0, false}\n\tfmt.Println(account.IsOverdrawnOrFlagged()) // Output: true\n}\n```"
  },
  {
    "task": "Design a program to ensure an application is both installed and updated using logical AND.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tisInstalled := true\n\tisUpdated := true\n\n\tif isInstalled && isUpdated {\n\t\tfmt.Println(\"The application is both installed and updated.\")\n\t} else {\n\t\tfmt.Println(\"The application is not both installed and updated.\")\n\t}\n}\n```"
  },
  {
    "task": "Develop a function that returns true if a number is neither divisible by 3 nor 5 using logical NOT.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc notDivisibleBy3Or5(n int) bool {\n\treturn !(n%3 == 0 || n%5 == 0)\n}\n\nfunc main() {\n\tfmt.Println(notDivisibleBy3Or5(7))  // true\n\tfmt.Println(notDivisibleBy3Or5(9))  // false\n\tfmt.Println(notDivisibleBy3Or5(10)) // false\n\tfmt.Println(notDivisibleBy3Or5(11)) // true\n}\n```"
  },
  {
    "task": "Implement a script that alerts if a device is either overheating or underperforming using logical OR.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\ttemperature := 100 // Example temperature value\n\tperformance := 50  // Example performance value\n\n\tif temperature > 90 || performance < 60 {\n\t\tfmt.Println(\"Alert: Device is either overheating or underperforming.\")\n\t}\n}\n```"
  },
  {
    "task": "Write a function to validate that a directory is both writable and not full using logical AND.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"syscall\"\n)\n\nfunc isDirectoryWritableAndNotFull(path string) bool {\n\t// Check if the directory is writable\n\tfile, err := os.CreateTemp(path, \"check\")\n\tif err != nil {\n\t\treturn false\n\t}\n\tdefer os.Remove(file.Name())\n\tdefer file.Close()\n\n\t// Check if the directory is not full\n\tvar stat syscall.Statfs_t\n\tif err := syscall.Statfs(path, &stat); err != nil {\n\t\treturn false\n\t}\n\tisNotFull := stat.Bavail > 0\n\n\treturn isNotFull\n}\n\nfunc main() {\n\tdirPath := \"/your/directory/path\"\n\tif isDirectoryWritableAndNotFull(dirPath) {\n\t\tfmt.Println(\"Directory is writable and not full.\")\n\t} else {\n\t\tfmt.Println(\"Directory is either not writable or full.\")\n\t}\n}\n```"
  },
  {
    "task": "Create a conditional statement that executes if a button is not clicked using logical NOT.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tbuttonClicked := false\n\n\tif !buttonClicked {\n\t\tfmt.Println(\"Button has not been clicked.\")\n\t}\n}\n```"
  },
  {
    "task": "Design a check to ensure a transaction is both verified and complete using logical AND.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    verified := true\n    complete := true\n\n    if verified && complete {\n        fmt.Println(\"Transaction is verified and complete.\")\n    } else {\n        fmt.Println(\"Transaction is not verified or not complete.\")\n    }\n}\n```"
  },
  {
    "task": "Develop a routine to determine if a string is either uppercase or lowercase using logical OR.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc isUpperOrLower(s string) bool {\n\treturn strings.ToUpper(s) == s || strings.ToLower(s) == s\n}\n\nfunc main() {\n\tfmt.Println(isUpperOrLower(\"HELLO\")) // true\n\tfmt.Println(isUpperOrLower(\"world\")) // true\n\tfmt.Println(isUpperOrLower(\"Hello\")) // false\n}\n```"
  },
  {
    "task": "Implement a feature to execute a task if a variable is neither null nor undefined using logical NOT.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    var value interface{} = \"example\"\n\n    if value != nil {\n        fmt.Println(\"Executing task because value is neither null nor undefined.\")\n    } else {\n        fmt.Println(\"Value is null or undefined.\")\n    }\n}\n```"
  },
  {
    "task": "Compose a function to return true if a date is either today or tomorrow using logical OR.",
    "code": "```go\npackage main\n\nimport (\n\t\"time\"\n)\n\nfunc isTodayOrTomorrow(date time.Time) bool {\n\tnow := time.Now()\n\ttoday := now.Year() == date.Year() && now.YearDay() == date.YearDay()\n\n\ttomorrow := now.AddDate(0, 0, 1)\n\ttomorrowCheck := tomorrow.Year() == date.Year() && tomorrow.YearDay() == date.YearDay()\n\n\treturn today || tomorrowCheck\n}\n```"
  },
  {
    "task": "Write a script to confirm that a system is both running and not in maintenance mode using logical AND.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\trunning := true\n\tinMaintenanceMode := false\n\n\tif running && !inMaintenanceMode {\n\t\tfmt.Println(\"System is running and not in maintenance mode.\")\n\t} else {\n\t\tfmt.Println(\"System is either not running or in maintenance mode.\")\n\t}\n}\n```"
  },
  {
    "task": "Create a program to verify if a text field is neither empty nor exceeds character limit using logical NOT.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc isValidTextField(input string, charLimit int) bool {\n\treturn !(len(input) == 0 || len(input) > charLimit)\n}\n\nfunc main() {\n\ttext := \"Sample text\"\n\tcharLimit := 20\n\n\tif isValidTextField(text, charLimit) {\n\t\tfmt.Println(\"Text field is valid.\")\n\t} else {\n\t\tfmt.Println(\"Text field is invalid.\")\n\t}\n}\n```"
  },
  {
    "task": "Design a feature that checks if a user has either admin privileges or editor rights using logical OR.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc hasAccess(admin bool, editor bool) bool {\n\treturn admin || editor\n}\n\nfunc main() {\n\tuserIsAdmin := true\n\tuserIsEditor := false\n\n\tif hasAccess(userIsAdmin, userIsEditor) {\n\t\tfmt.Println(\"User has access.\")\n\t} else {\n\t\tfmt.Println(\"User does not have access.\")\n\t}\n}\n```"
  },
  {
    "task": "Develop a script to ensure a file is both present and not empty using logical AND.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc main() {\n\tfilePath := \"example.txt\"\n\n\tfileInfo, err := os.Stat(filePath)\n\tif err == nil && fileInfo.Size() > 0 {\n\t\tfmt.Println(\"File is present and not empty.\")\n\t} else {\n\t\tfmt.Println(\"File is either missing or empty.\")\n\t}\n}\n```"
  },
  {
    "task": "Implement a condition to execute a command if a setting is not active using logical NOT.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tsettingActive := false\n\n\tif !settingActive {\n\t\tfmt.Println(\"Executing command because setting is not active.\")\n\t}\n}\n```"
  },
  {
    "task": "Compose a method to decide if a person is either eligible or exempt using logical OR.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc isEligibleOrExempt(isEligible, isExempt bool) bool {\n\treturn isEligible || isExempt\n}\n\nfunc main() {\n\tfmt.Println(isEligibleOrExempt(true, false))  // Output: true\n\tfmt.Println(isEligibleOrExempt(false, true))  // Output: true\n\tfmt.Println(isEligibleOrExempt(true, true))   // Output: true\n\tfmt.Println(isEligibleOrExempt(false, false)) // Output: false\n}\n```"
  },
  {
    "task": "Write a function that returns true if a number is both greater than zero and less than ten using logical AND.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc isBetweenZeroAndTen(n int) bool {\n    return n > 0 && n < 10\n}\n\nfunc main() {\n    fmt.Println(isBetweenZeroAndTen(5))  // true\n    fmt.Println(isBetweenZeroAndTen(0))  // false\n    fmt.Println(isBetweenZeroAndTen(10)) // false\n}\n```"
  },
  {
    "task": "Create a loop to continue as long as a condition is either true or false using logical OR.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    conditionA := true\n    conditionB := false\n\n    for conditionA || conditionB {\n        fmt.Println(\"Looping as long as either conditionA or conditionB is true.\")\n        \n        // Example to break the loop for demonstration purpose\n        // In a real scenario, the conditions would be updated based on logic\n        conditionA = false\n        conditionB = false\n    }\n}\n```"
  },
  {
    "task": "Design a program to verify if an account is neither inactive nor suspended using logical NOT.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tisInactive := false\n\tisSuspended := false\n\n\tif !isInactive && !isSuspended {\n\t\tfmt.Println(\"Account is active and not suspended.\")\n\t} else {\n\t\tfmt.Println(\"Account is either inactive or suspended.\")\n\t}\n}\n```"
  },
  {
    "task": "Develop a feature to confirm that a document is both signed and verified using logical AND.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc isDocumentValid(signed, verified bool) bool {\n\treturn signed && verified\n}\n\nfunc main() {\n\tsigned := true\n\tverified := true\n\n\tif isDocumentValid(signed, verified) {\n\t\tfmt.Println(\"The document is valid: signed and verified.\")\n\t} else {\n\t\tfmt.Println(\"The document is invalid.\")\n\t}\n}\n```"
  },
  {
    "task": "Implement a script to alert if a network is either congested or down using logical OR.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc checkNetworkStatus(congested bool, down bool) {\n\tif congested || down {\n\t\tfmt.Println(\"Alert: Network is either congested or down!\")\n\t} else {\n\t\tfmt.Println(\"Network is operating normally.\")\n\t}\n}\n\nfunc main() {\n\tcongested := false\n\tdown := true\n\tcheckNetworkStatus(congested, down)\n}\n```"
  },
  {
    "task": "Write a function to ensure a list is both sorted and unique using logical AND.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sort\"\n)\n\nfunc sortAndUnique(list []int) []int {\n\tif len(list) == 0 {\n\t\treturn list\n\t}\n\tsort.Ints(list)\n\tuniqueList := []int{list[0]}\n\tfor i := 1; i < len(list); i++ {\n\t\tif list[i] != list[i-1] {\n\t\t\tuniqueList = append(uniqueList, list[i])\n\t\t}\n\t}\n\treturn uniqueList\n}\n\nfunc main() {\n\tlist := []int{4, 2, 3, 2, 1, 4, 5}\n\tsortedUniqueList := sortAndUnique(list)\n\tfmt.Println(sortedUniqueList)\n}\n```"
  },
  {
    "task": "Create a conditional statement to execute if a task is not completed using logical NOT.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\ttaskCompleted := false\n\n\tif !taskCompleted {\n\t\tfmt.Println(\"Task is not completed.\")\n\t}\n}\n```"
  },
  {
    "task": "Design a check to determine if a component is either faulty or missing using logical OR.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc isComponentFaultyOrMissing(isFaulty bool, isMissing bool) bool {\n\treturn isFaulty || isMissing\n}\n\nfunc main() {\n\tcomponentFaulty := false\n\tcomponentMissing := true\n\n\tif isComponentFaultyOrMissing(componentFaulty, componentMissing) {\n\t\tfmt.Println(\"The component is either faulty or missing.\")\n\t} else {\n\t\tfmt.Println(\"The component is neither faulty nor missing.\")\n\t}\n}\n```"
  },
  {
    "task": "Develop a routine to verify if a user is both online and available using logical AND.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc isUserOnlineAndAvailable(isOnline, isAvailable bool) bool {\n\treturn isOnline && isAvailable\n}\n\nfunc main() {\n\tuserOnline := true\n\tuserAvailable := true\n\n\tif isUserOnlineAndAvailable(userOnline, userAvailable) {\n\t\tfmt.Println(\"User is online and available.\")\n\t} else {\n\t\tfmt.Println(\"User is not online or not available.\")\n\t}\n}\n```"
  },
  {
    "task": "Implement a feature to toggle an alert if a condition is not satisfied using logical NOT.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc toggleAlert(condition bool) bool {\n\treturn !condition\n}\n\nfunc main() {\n\tcondition := false\n\talert := toggleAlert(condition)\n\tfmt.Println(\"Alert status:\", alert)\n}\n```"
  },
  {
    "task": "Compose a function to return true if a transaction is either pending or failed using logical OR.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc isTransactionPendingOrFailed(status string) bool {\n\treturn status == \"pending\" || status == \"failed\"\n}\n\nfunc main() {\n\tfmt.Println(isTransactionPendingOrFailed(\"pending\")) // true\n\tfmt.Println(isTransactionPendingOrFailed(\"failed\"))  // true\n\tfmt.Println(isTransactionPendingOrFailed(\"completed\")) // false\n}\n```"
  },
  {
    "task": "Write a script to ensure a configuration is both correct and active using logical AND.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tisConfigCorrect := true\n\tisConfigActive := true\n\n\tif isConfigCorrect && isConfigActive {\n\t\tfmt.Println(\"Configuration is both correct and active.\")\n\t} else {\n\t\tfmt.Println(\"Configuration is either incorrect or inactive.\")\n\t}\n}\n```"
  }
]