[
  {
    "task": "Write a program that prints numbers from 1 to 10 using a for loop.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    for i := 1; i <= 10; i++ {\n        fmt.Println(i)\n    }\n}\n```"
  },
  {
    "task": "Create a loop that iterates over an array of names and prints each name.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tnames := []string{\"Alice\", \"Bob\", \"Charlie\", \"David\"}\n\tfor _, name := range names {\n\t\tfmt.Println(name)\n\t}\n}\n```"
  },
  {
    "task": "Design a for loop to calculate the factorial of a given number.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    num := 5\n    factorial := 1\n\n    for i := 1; i <= num; i++ {\n        factorial *= i\n    }\n\n    fmt.Println(\"Factorial:\", factorial)\n}\n```"
  },
  {
    "task": "Implement a program that uses a for loop to sum all even numbers between 1 and 100.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tsum := 0\n\tfor i := 2; i <= 100; i += 2 {\n\t\tsum += i\n\t}\n\tfmt.Println(\"Sum of even numbers between 1 and 100:\", sum)\n}\n```"
  },
  {
    "task": "Use a for loop to generate and print the Fibonacci sequence up to 20 terms.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tn1, n2 := 0, 1\n\tfmt.Println(n1)\n\tfmt.Println(n2)\n\tfor i := 2; i < 20; i++ {\n\t\tn3 := n1 + n2\n\t\tfmt.Println(n3)\n\t\tn1 = n2\n\t\tn2 = n3\n\t}\n}\n```"
  },
  {
    "task": "Construct a for loop that prints the multiplication table for a given number.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tnumber := 5\n\tfor i := 1; i <= 10; i++ {\n\t\tfmt.Printf(\"%d x %d = %d\\n\", number, i, number*i)\n\t}\n}\n```"
  },
  {
    "task": "Write code to iterate through a list of student grades and print only those above a certain threshold.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    grades := []int{85, 92, 76, 81, 67, 90, 73}\n    threshold := 80\n\n    for _, grade := range grades {\n        if grade > threshold {\n            fmt.Println(grade)\n        }\n    }\n}\n```"
  },
  {
    "task": "Create a for loop that appends the square of numbers 1 to 10 to a list.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    var squares []int\n    for i := 1; i <= 10; i++ {\n        squares = append(squares, i*i)\n    }\n    fmt.Println(squares)\n}\n```"
  },
  {
    "task": "Develop a for loop that reverses a given string.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc reverseString(s string) string {\n\trunes := []rune(s)\n\tn := len(runes)\n\tfor i := 0; i < n/2; i++ {\n\t\trunes[i], runes[n-1-i] = runes[n-1-i], runes[i]\n\t}\n\treturn string(runes)\n}\n\nfunc main() {\n\tinput := \"Hello, World!\"\n\treversed := reverseString(input)\n\tfmt.Println(reversed)\n}\n```"
  },
  {
    "task": "Build a program that uses a for loop to print all elements in a 2D matrix.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tmatrix := [][]int{\n\t\t{1, 2, 3},\n\t\t{4, 5, 6},\n\t\t{7, 8, 9},\n\t}\n\n\tfor i := 0; i < len(matrix); i++ {\n\t\tfor j := 0; j < len(matrix[i]); j++ {\n\t\t\tfmt.Println(matrix[i][j])\n\t\t}\n\t}\n}\n```"
  },
  {
    "task": "Use a for loop to find the maximum value in an array of integers.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tnumbers := []int{3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5}\n\tmaxValue := numbers[0]\n\n\tfor i := 1; i < len(numbers); i++ {\n\t\tif numbers[i] > maxValue {\n\t\t\tmaxValue = numbers[i]\n\t\t}\n\t}\n\n\tfmt.Println(\"The maximum value is:\", maxValue)\n}\n```"
  },
  {
    "task": "Write a program that uses a for loop to print the characters of a string, one per line.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\ts := \"example\"\n\tfor _, c := range s {\n\t\tfmt.Println(string(c))\n\t}\n}\n```"
  },
  {
    "task": "Create a for loop that counts the number of vowels in a given sentence.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc main() {\n\tsentence := \"This is an example sentence.\"\n\tvowels := \"aeiouAEIOU\"\n\tcount := 0\n\n\tfor _, char := range sentence {\n\t\tif strings.ContainsRune(vowels, char) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tfmt.Println(\"Number of vowels:\", count)\n}\n```"
  },
  {
    "task": "Implement a for loop to check if a number is prime by testing divisibility.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc isPrime(num int) bool {\n\tif num <= 1 {\n\t\treturn false\n\t}\n\tfor i := 2; i <= int(math.Sqrt(float64(num))); i++ {\n\t\tif num%i == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc main() {\n\tnumber := 29\n\tif isPrime(number) {\n\t\tfmt.Printf(\"%d is a prime number.\\n\", number)\n\t} else {\n\t\tfmt.Printf(\"%d is not a prime number.\\n\", number)\n\t}\n}\n```"
  },
  {
    "task": "Design a for loop that prints a pyramid pattern of asterisks with a given height.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc printPyramid(height int) {\n\tfor i := 1; i <= height; i++ {\n\t\tspaces := strings.Repeat(\" \", height-i)\n\t\tstars := strings.Repeat(\"*\", 2*i-1)\n\t\tfmt.Println(spaces + stars)\n\t}\n}\n\nfunc main() {\n\tprintPyramid(5)\n}\n```"
  },
  {
    "task": "Write a program that uses a for loop to calculate the sum of digits of a number.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tnumber := 12345\n\tsum := 0\n\n\tfor number != 0 {\n\t\tsum += number % 10\n\t\tnumber /= 10\n\t}\n\n\tfmt.Println(\"Sum of digits:\", sum)\n}\n```"
  },
  {
    "task": "Construct a for loop to flatten a list of lists into a single list.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc flatten(listOfLists [][]int) []int {\n\tvar flattenedList []int\n\tfor _, sublist := range listOfLists {\n\t\tfor _, element := range sublist {\n\t\t\tflattenedList = append(flattenedList, element)\n\t\t}\n\t}\n\treturn flattenedList\n}\n\nfunc main() {\n\tlistOfLists := [][]int{{1, 2, 3}, {4, 5}, {6, 7, 8, 9}}\n\tflattened := flatten(listOfLists)\n\tfmt.Println(flattened)\n}\n```"
  },
  {
    "task": "Use a for loop to generate a list of random numbers and print them.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n\t\"time\"\n)\n\nfunc main() {\n\trand.Seed(time.Now().UnixNano())\n\tnumbers := make([]int, 10)\n\n\tfor i := 0; i < len(numbers); i++ {\n\t\tnumbers[i] = rand.Intn(100) // Generates a random number between 0 and 99\n\t}\n\n\tfor _, number := range numbers {\n\t\tfmt.Println(number)\n\t}\n}\n```"
  },
  {
    "task": "Create a for loop that iterates through a dictionary and prints its keys and values.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tdictionary := map[string]string{\n\t\t\"apple\":  \"fruit\",\n\t\t\"carrot\": \"vegetable\",\n\t\t\"milk\":   \"dairy\",\n\t}\n\n\tfor key, value := range dictionary {\n\t\tfmt.Printf(\"Key: %s, Value: %s\\n\", key, value)\n\t}\n}\n```"
  },
  {
    "task": "Develop a for loop that counts down from 10 to 1 and prints each number.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    for i := 10; i >= 1; i-- {\n        fmt.Println(i)\n    }\n}\n```"
  },
  {
    "task": "Write code to multiply each element in an array by 2 using a for loop.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    arr := []int{1, 2, 3, 4, 5}\n    for i := 0; i < len(arr); i++ {\n        arr[i] *= 2\n    }\n    fmt.Println(arr)\n}\n```"
  },
  {
    "task": "Create a for loop that calculates the average of numbers in a list.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tnumbers := []float64{10, 20, 30, 40, 50}\n\tvar sum float64\n\tfor _, number := range numbers {\n\t\tsum += number\n\t}\n\taverage := sum / float64(len(numbers))\n\tfmt.Println(\"Average:\", average)\n}\n```"
  },
  {
    "task": "Implement a for loop to find duplicate elements in an array.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc findDuplicates(arr []int) []int {\n\tduplicates := []int{}\n\tseen := make(map[int]bool)\n\n\tfor _, num := range arr {\n\t\tif seen[num] {\n\t\t\tduplicates = append(duplicates, num)\n\t\t} else {\n\t\t\tseen[num] = true\n\t\t}\n\t}\n\n\treturn duplicates\n}\n\nfunc main() {\n\tarr := []int{1, 2, 3, 4, 5, 2, 3, 6, 7, 8, 8}\n\tduplicates := findDuplicates(arr)\n\tfmt.Println(\"Duplicate elements:\", duplicates)\n}\n```"
  },
  {
    "task": "Design a for loop that removes all occurrences of a specific element from a list.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc removeElement(slice []int, element int) []int {\n\tresult := []int{}\n\tfor _, v := range slice {\n\t\tif v != element {\n\t\t\tresult = append(result, v)\n\t\t}\n\t}\n\treturn result\n}\n\nfunc main() {\n\tnums := []int{1, 2, 3, 4, 3, 5, 3}\n\telementToRemove := 3\n\tnums = removeElement(nums, elementToRemove)\n\tfmt.Println(nums)\n}\n```"
  },
  {
    "task": "Use a for loop to simulate rolling a dice 100 times and count the occurrences of each face.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n\t\"time\"\n)\n\nfunc main() {\n\trand.Seed(time.Now().UnixNano())\n\toccurrences := make(map[int]int)\n\n\tfor i := 0; i < 100; i++ {\n\t\tface := rand.Intn(6) + 1\n\t\toccurrences[face]++\n\t}\n\n\tfor face, count := range occurrences {\n\t\tfmt.Printf(\"Face %d: %d times\\n\", face, count)\n\t}\n}\n```"
  },
  {
    "task": "Write a for loop that prints all the prime numbers between 1 and 50.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc main() {\n\tfor num := 2; num <= 50; num++ {\n\t\tisPrime := true\n\t\tfor i := 2; i <= int(math.Sqrt(float64(num))); i++ {\n\t\t\tif num%i == 0 {\n\t\t\t\tisPrime = false\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif isPrime {\n\t\t\tfmt.Println(num)\n\t\t}\n\t}\n}\n```"
  },
  {
    "task": "Develop a for loop that extracts all the uppercase letters from a string.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"unicode\"\n)\n\nfunc extractUppercase(s string) string {\n\tvar result string\n\tfor _, r := range s {\n\t\tif unicode.IsUpper(r) {\n\t\t\tresult += string(r)\n\t\t}\n\t}\n\treturn result\n}\n\nfunc main() {\n\tinput := \"Hello, World!\"\n\toutput := extractUppercase(input)\n\tfmt.Println(output) // Output: \"HW\"\n}\n```"
  },
  {
    "task": "Create a for loop that checks if a list is sorted in ascending order.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc isSortedAscending(list []int) bool {\n\tfor i := 0; i < len(list)-1; i++ {\n\t\tif list[i] > list[i+1] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc main() {\n\tlist := []int{1, 2, 3, 4, 5}\n\tfmt.Println(isSortedAscending(list)) // Output: true\n}\n```"
  },
  {
    "task": "Implement a for loop to generate a list of the first 10 square numbers.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tsquares := make([]int, 10)\n\tfor i := 1; i <= 10; i++ {\n\t\tsquares[i-1] = i * i\n\t}\n\tfmt.Println(squares)\n}\n```"
  },
  {
    "task": "Write code to print all the elements of a list that are greater than a given number using a for loop.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tnumbers := []int{1, 5, 8, 10, 3, 15, 7}\n\tthreshold := 6\n\n\tfor _, num := range numbers {\n\t\tif num > threshold {\n\t\t\tfmt.Println(num)\n\t\t}\n\t}\n}\n```"
  },
  {
    "task": "Construct a for loop that finds the smallest number in an array.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tnumbers := []int{34, 15, 88, 2, 9, 3}\n\tsmallest := numbers[0]\n\n\tfor i := 1; i < len(numbers); i++ {\n\t\tif numbers[i] < smallest {\n\t\t\tsmallest = numbers[i]\n\t\t}\n\t}\n\n\tfmt.Println(\"The smallest number is:\", smallest)\n}\n```"
  },
  {
    "task": "Develop a for loop that prints the first N lines of Pascal's Triangle.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tN := 5 // Example value for N, you can change it to any number\n\tfor line := 0; line < N; line++ {\n\t\tnumber := 1\n\t\tfor i := 0; i <= line; i++ {\n\t\t\tfmt.Printf(\"%d \", number)\n\t\t\tnumber = number * (line - i) / (i + 1)\n\t\t}\n\t\tfmt.Println()\n\t}\n}\n```"
  },
  {
    "task": "Create a for loop that calculates the product of all elements in a list.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tnumbers := []int{1, 2, 3, 4, 5}\n\tproduct := 1\n\n\tfor _, number := range numbers {\n\t\tproduct *= number\n\t}\n\n\tfmt.Println(\"Product of all elements:\", product)\n}\n```"
  },
  {
    "task": "Use a for loop to print numbers from 1 to 100, but replace multiples of 3 with 'Fizz'.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tfor i := 1; i <= 100; i++ {\n\t\tif i%3 == 0 {\n\t\t\tfmt.Println(\"Fizz\")\n\t\t} else {\n\t\t\tfmt.Println(i)\n\t\t}\n\t}\n}\n```"
  },
  {
    "task": "Write a for loop that iterates over a string and counts the number of words.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc main() {\n\ttext := \"This is a sample string with several words\"\n\twordCount := 0\n\tinWord := false\n\n\tfor _, char := range text {\n\t\tif !strings.ContainsRune(\" \\t\\n\", char) {\n\t\t\tif !inWord {\n\t\t\t\twordCount++\n\t\t\t\tinWord = true\n\t\t\t}\n\t\t} else {\n\t\t\tinWord = false\n\t\t}\n\t}\n\n\tfmt.Println(\"Number of words:\", wordCount)\n}\n```"
  },
  {
    "task": "Design a for loop that prints numbers from 1 to 50, but skips numbers divisible by 5.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tfor i := 1; i <= 50; i++ {\n\t\tif i%5 == 0 {\n\t\t\tcontinue\n\t\t}\n\t\tfmt.Println(i)\n\t}\n}\n```"
  },
  {
    "task": "Implement a for loop that prints a checkerboard pattern of asterisks.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tsize := 8 // Define the size of the checkerboard\n\tfor i := 0; i < size; i++ {\n\t\tfor j := 0; j < size; j++ {\n\t\t\tif (i+j)%2 == 0 {\n\t\t\t\tfmt.Print(\"*\")\n\t\t\t} else {\n\t\t\t\tfmt.Print(\" \")\n\t\t\t}\n\t\t}\n\t\tfmt.Println()\n\t}\n}\n```"
  },
  {
    "task": "Create a for loop that finds the index of a target value in a list.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    list := []int{10, 20, 30, 40, 50}\n    target := 30\n    index := -1\n\n    for i, value := range list {\n        if value == target {\n            index = i\n            break\n        }\n    }\n\n    fmt.Println(\"Index of target:\", index)\n}\n```"
  },
  {
    "task": "Use a for loop to concatenate a list of strings into a single string.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tstrings := []string{\"Hello\", \" \", \"world\", \"!\"}\n\tvar result string\n\n\tfor _, str := range strings {\n\t\tresult += str\n\t}\n\n\tfmt.Println(result)\n}\n```"
  },
  {
    "task": "Develop a for loop that rotates a list to the right by a given number of positions.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc rotateRight(nums []int, k int) []int {\n\tn := len(nums)\n\tif n == 0 {\n\t\treturn nums\n\t}\n\tk = k % n\n\tresult := make([]int, n)\n\tfor i := 0; i < n; i++ {\n\t\tresult[(i+k)%n] = nums[i]\n\t}\n\treturn result\n}\n\nfunc main() {\n\tnums := []int{1, 2, 3, 4, 5}\n\tk := 2\n\trotated := rotateRight(nums, k)\n\tfmt.Println(rotated)\n}\n```"
  },
  {
    "task": "Write code that uses a for loop to insert an element into a sorted list while maintaining order.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc insertAndMaintainOrder(sortedList []int, element int) []int {\n\tnewList := make([]int, len(sortedList)+1)\n\tinserted := false\n\tfor i, j := 0, 0; i < len(sortedList); i, j = i+1, j+1 {\n\t\tif !inserted && element < sortedList[i] {\n\t\t\tnewList[j] = element\n\t\t\tinserted = true\n\t\t\tj++\n\t\t}\n\t\tnewList[j] = sortedList[i]\n\t}\n\tif !inserted {\n\t\tnewList[len(sortedList)] = element\n\t}\n\treturn newList\n}\n\nfunc main() {\n\tsortedList := []int{1, 3, 5, 7, 9}\n\telement := 4\n\tnewSortedList := insertAndMaintainOrder(sortedList, element)\n\tfmt.Println(newSortedList)\n}\n```"
  },
  {
    "task": "Implement a for loop that counts the frequency of each character in a string.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tinput := \"example string\"\n\tfrequency := make(map[rune]int)\n\n\tfor _, char := range input {\n\t\tfrequency[char]++\n\t}\n\n\tfor char, count := range frequency {\n\t\tfmt.Printf(\"%c: %d\\n\", char, count)\n\t}\n}\n```"
  },
  {
    "task": "Create a for loop that prints all subsets of a given set.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tset := []int{1, 2, 3}\n\tn := len(set)\n\tsubsets := 1 << n\n\n\tfor i := 0; i < subsets; i++ {\n\t\tfmt.Print(\"{ \")\n\t\tfor j := 0; j < n; j++ {\n\t\t\tif i&(1<<j) != 0 {\n\t\t\t\tfmt.Print(set[j], \" \")\n\t\t\t}\n\t\t}\n\t\tfmt.Println(\"}\")\n\t}\n}\n```"
  },
  {
    "task": "Design a for loop to generate all permutations of a string.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tstr := \"abc\"\n\tpermute([]rune(str), 0, len(str)-1)\n}\n\nfunc permute(arr []rune, l, r int) {\n\tif l == r {\n\t\tfmt.Println(string(arr))\n\t} else {\n\t\tfor i := l; i <= r; i++ {\n\t\t\tarr[l], arr[i] = arr[i], arr[l]\n\t\t\tpermute(arr, l+1, r)\n\t\t\tarr[l], arr[i] = arr[i], arr[l] // backtrack\n\t\t}\n\t}\n}\n```"
  },
  {
    "task": "Write a for loop that sorts an array in descending order.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tarr := []int{5, 2, 9, 1, 5, 6}\n\t\n\tfor i := 0; i < len(arr)-1; i++ {\n\t\tfor j := 0; j < len(arr)-i-1; j++ {\n\t\t\tif arr[j] < arr[j+1] {\n\t\t\t\tarr[j], arr[j+1] = arr[j+1], arr[j]\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfmt.Println(arr)\n}\n```"
  },
  {
    "task": "Use a for loop to generate a sequence of random characters and print them.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n\t\"time\"\n)\n\nfunc main() {\n\trand.Seed(time.Now().UnixNano())\n\tconst charset = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\tsequenceLength := 10\n\tfor i := 0; i < sequenceLength; i++ {\n\t\trandomChar := charset[rand.Intn(len(charset))]\n\t\tfmt.Print(string(randomChar))\n\t}\n\tfmt.Println()\n}\n```"
  },
  {
    "task": "Construct a for loop that finds the common elements between two lists.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tlist1 := []int{1, 2, 3, 4, 5}\n\tlist2 := []int{4, 5, 6, 7, 8}\n\n\tcommonElements := []int{}\n\n\tfor _, elem1 := range list1 {\n\t\tfor _, elem2 := range list2 {\n\t\t\tif elem1 == elem2 {\n\t\t\t\tcommonElements = append(commonElements, elem1)\n\t\t\t}\n\t\t}\n\t}\n\n\tfmt.Println(\"Common elements:\", commonElements)\n}\n```"
  },
  {
    "task": "Develop a for loop to calculate and print the cumulative sum of a list.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tnumbers := []int{1, 2, 3, 4, 5} // Example list of numbers\n\tcumulativeSum := 0\n\n\tfor _, number := range numbers {\n\t\tcumulativeSum += number\n\t\tfmt.Println(cumulativeSum)\n\t}\n}\n```"
  },
  {
    "task": "Create a for loop that prints a diamond pattern using asterisks.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tn := 5\n\n\t// Upper part of the diamond\n\tfor i := 1; i <= n; i++ {\n\t\tfor j := i; j < n; j++ {\n\t\t\tfmt.Print(\" \")\n\t\t}\n\t\tfor k := 1; k <= (2*i - 1); k++ {\n\t\t\tfmt.Print(\"*\")\n\t\t}\n\t\tfmt.Println()\n\t}\n\n\t// Lower part of the diamond\n\tfor i := n - 1; i >= 1; i-- {\n\t\tfor j := n; j > i; j-- {\n\t\t\tfmt.Print(\" \")\n\t\t}\n\t\tfor k := 1; k <= (2*i - 1); k++ {\n\t\t\tfmt.Print(\"*\")\n\t\t}\n\t\tfmt.Println()\n\t}\n}\n```"
  },
  {
    "task": "Write a for loop that simulates a countdown timer from a specified number of seconds.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\tcountdown := 10 // specify the number of seconds for the countdown\n\n\tfor i := countdown; i > 0; i-- {\n\t\tfmt.Println(i)\n\t\ttime.Sleep(1 * time.Second)\n\t}\n\tfmt.Println(\"Time's up!\")\n}\n```"
  },
  {
    "task": "Use a for loop to print the transpose of a matrix.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tmatrix := [][]int{\n\t\t{1, 2, 3},\n\t\t{4, 5, 6},\n\t\t{7, 8, 9},\n\t}\n\n\trows := len(matrix)\n\tcols := len(matrix[0])\n\n\tfor i := 0; i < cols; i++ {\n\t\tfor j := 0; j < rows; j++ {\n\t\t\tfmt.Print(matrix[j][i], \" \")\n\t\t}\n\t\tfmt.Println()\n\t}\n}\n```"
  },
  {
    "task": "Implement a for loop that reverses the order of words in a sentence.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc reverseWords(sentence string) string {\n\twords := strings.Fields(sentence)\n\tfor i, j := 0, len(words)-1; i < j; i, j = i+1, j-1 {\n\t\twords[i], words[j] = words[j], words[i]\n\t}\n\treturn strings.Join(words, \" \")\n}\n\nfunc main() {\n\tsentence := \"Go is a statically typed compiled language\"\n\treversed := reverseWords(sentence)\n\tfmt.Println(reversed)\n}\n```"
  },
  {
    "task": "Create a for loop that deletes elements from a list that are less than a given value.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc filterList(nums []int, threshold int) []int {\n\tvar result []int\n\tfor _, num := range nums {\n\t\tif num >= threshold {\n\t\t\tresult = append(result, num)\n\t\t}\n\t}\n\treturn result\n}\n\nfunc main() {\n\tnums := []int{1, 2, 3, 4, 5, 6}\n\tthreshold := 3\n\tfiltered := filterList(nums, threshold)\n\tfmt.Println(filtered)\n}\n```"
  },
  {
    "task": "Design a for loop to merge two sorted lists into a single sorted list.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc mergeSortedLists(list1, list2 []int) []int {\n    merged := make([]int, 0, len(list1)+len(list2))\n    i, j := 0, 0\n\n    for i < len(list1) && j < len(list2) {\n        if list1[i] < list2[j] {\n            merged = append(merged, list1[i])\n            i++\n        } else {\n            merged = append(merged, list2[j])\n            j++\n        }\n    }\n\n    for i < len(list1) {\n        merged = append(merged, list1[i])\n        i++\n    }\n\n    for j < len(list2) {\n        merged = append(merged, list2[j])\n        j++\n    }\n\n    return merged\n}\n\nfunc main() {\n    list1 := []int{1, 3, 5}\n    list2 := []int{2, 4, 6}\n    mergedList := mergeSortedLists(list1, list2)\n    fmt.Println(mergedList)\n}\n```"
  },
  {
    "task": "Write a for loop that calculates the power of a number using repeated multiplication.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tbase := 2\n\texponent := 5\n\tresult := 1\n\n\tfor i := 0; i < exponent; i++ {\n\t\tresult *= base\n\t}\n\n\tfmt.Println(result)\n}\n```"
  },
  {
    "task": "Use a for loop to find the longest word in a list of words.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\twords := []string{\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"}\n\tlongestWord := \"\"\n\tfor _, word := range words {\n\t\tif len(word) > len(longestWord) {\n\t\t\tlongestWord = word\n\t\t}\n\t}\n\tfmt.Println(\"The longest word is:\", longestWord)\n}\n```"
  },
  {
    "task": "Develop a for loop that sorts a list of tuples based on the second element.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sort\"\n)\n\nfunc main() {\n\ttuples := [][2]int{{5, 2}, {1, 3}, {4, 1}, {2, 4}}\n\tsort.Slice(tuples, func(i, j int) bool {\n\t\treturn tuples[i][1] < tuples[j][1]\n\t})\n\n\tfor _, tuple := range tuples {\n\t\tfmt.Println(tuple)\n\t}\n}\n```"
  },
  {
    "task": "Create a for loop that replicates each character in a string a given number of times.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc replicateChars(s string, count int) string {\n\tvar result strings.Builder\n\tfor _, char := range s {\n\t\tfor i := 0; i < count; i++ {\n\t\t\tresult.WriteRune(char)\n\t\t}\n\t}\n\treturn result.String()\n}\n\nfunc main() {\n\tstr := \"hello\"\n\treplicated := replicateChars(str, 3)\n\tfmt.Println(replicated) // Output: hhheeelllllooo\n}\n```"
  },
  {
    "task": "Construct a for loop that replaces spaces in a string with hyphens.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc replaceSpacesWithHyphens(s string) string {\n\tresult := []rune(s)\n\tfor i := 0; i < len(result); i++ {\n\t\tif result[i] == ' ' {\n\t\t\tresult[i] = '-'\n\t\t}\n\t}\n\treturn string(result)\n}\n\nfunc main() {\n\tinput := \"This is a test string\"\n\toutput := replaceSpacesWithHyphens(input)\n\tfmt.Println(output)\n}\n```"
  },
  {
    "task": "Design a for loop to find the intersection of two sets.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    setA := map[int]bool{1: true, 2: true, 3: true}\n    setB := map[int]bool{2: true, 3: true, 4: true}\n\n    intersection := []int{}\n\n    for key := range setA {\n        if setB[key] {\n            intersection = append(intersection, key)\n        }\n    }\n\n    fmt.Println(\"Intersection:\", intersection)\n}\n```"
  },
  {
    "task": "Write a for loop that generates a list of prime numbers up to a given number.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tlimit := 30\n\tprimes := []int{}\n\n\tfor num := 2; num <= limit; num++ {\n\t\tisPrime := true\n\t\tfor i := 2; i*i <= num; i++ {\n\t\t\tif num%i == 0 {\n\t\t\t\tisPrime = false\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif isPrime {\n\t\t\tprimes = append(primes, num)\n\t\t}\n\t}\n\n\tfmt.Println(primes)\n}\n```"
  },
  {
    "task": "Use a for loop to implement a simple text-based progress bar.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\ttotal := 10\n\tfmt.Print(\"Progress: [\")\n\tfor i := 0; i < total; i++ {\n\t\tfmt.Print(\"=\")\n\t\ttime.Sleep(100 * time.Millisecond) // Simulate work being done\n\t}\n\tfmt.Println(\"] Done!\")\n}\n```"
  },
  {
    "task": "Implement a for loop that finds and prints all palindromic numbers between 10 and 200.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n)\n\nfunc isPalindrome(n int) bool {\n\ts := strconv.Itoa(n)\n\tfor i, j := 0, len(s)-1; i < j; i, j = i+1, j-1 {\n\t\tif s[i] != s[j] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc main() {\n\tfor i := 10; i <= 200; i++ {\n\t\tif isPalindrome(i) {\n\t\t\tfmt.Println(i)\n\t\t}\n\t}\n}\n```"
  },
  {
    "task": "Create a for loop that multiplies corresponding elements of two lists and stores the result.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    list1 := []int{1, 2, 3, 4, 5}\n    list2 := []int{6, 7, 8, 9, 10}\n    result := make([]int, len(list1))\n\n    for i := 0; i < len(list1); i++ {\n        result[i] = list1[i] * list2[i]\n    }\n\n    fmt.Println(result)\n}\n```"
  },
  {
    "task": "Develop a for loop that finds the difference between the largest and smallest numbers in a list.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc main() {\n\tnumbers := []int{3, 7, 2, 9, 5, 1}\n\tif len(numbers) == 0 {\n\t\tfmt.Println(\"The list is empty.\")\n\t\treturn\n\t}\n\n\tmin, max := math.MaxInt, math.MinInt\n\tfor _, num := range numbers {\n\t\tif num < min {\n\t\t\tmin = num\n\t\t}\n\t\tif num > max {\n\t\t\tmax = num\n\t\t}\n\t}\n\n\tdifference := max - min\n\tfmt.Println(\"The difference between the largest and smallest numbers is:\", difference)\n}\n```"
  },
  {
    "task": "Write a for loop that prints numbers from 1 to 100, replacing multiples of 5 with 'Buzz'.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tfor i := 1; i <= 100; i++ {\n\t\tif i%5 == 0 {\n\t\t\tfmt.Println(\"Buzz\")\n\t\t} else {\n\t\t\tfmt.Println(i)\n\t\t}\n\t}\n}\n```"
  },
  {
    "task": "Use a for loop to convert a list of integers into their binary representation.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n)\n\nfunc main() {\n\tintegers := []int{5, 8, 15, 23, 42}\n\tbinaries := []string{}\n\n\tfor _, num := range integers {\n\t\tbinaries = append(binaries, strconv.FormatInt(int64(num), 2))\n\t}\n\n\tfmt.Println(binaries)\n}\n```"
  },
  {
    "task": "Design a for loop that fills a 2D array with consecutive numbers in a spiral pattern.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc fillSpiral(n int) [][]int {\n\tif n <= 0 {\n\t\treturn nil\n\t}\n\n\tmatrix := make([][]int, n)\n\tfor i := range matrix {\n\t\tmatrix[i] = make([]int, n)\n\t}\n\n\ttop, bottom, left, right := 0, n-1, 0, n-1\n\tnum := 1\n\n\tfor top <= bottom && left <= right {\n\t\tfor i := left; i <= right; i++ {\n\t\t\tmatrix[top][i] = num\n\t\t\tnum++\n\t\t}\n\t\ttop++\n\n\t\tfor i := top; i <= bottom; i++ {\n\t\t\tmatrix[i][right] = num\n\t\t\tnum++\n\t\t}\n\t\tright--\n\n\t\tif top <= bottom {\n\t\t\tfor i := right; i >= left; i-- {\n\t\t\t\tmatrix[bottom][i] = num\n\t\t\t\tnum++\n\t\t\t}\n\t\t\tbottom--\n\t\t}\n\n\t\tif left <= right {\n\t\t\tfor i := bottom; i >= top; i-- {\n\t\t\t\tmatrix[i][left] = num\n\t\t\t\tnum++\n\t\t\t}\n\t\t\tleft++\n\t\t}\n\t}\n\n\treturn matrix\n}\n\nfunc main() {\n\tn := 5\n\tmatrix := fillSpiral(n)\n\tfor _, row := range matrix {\n\t\tfmt.Println(row)\n\t}\n}\n```"
  },
  {
    "task": "Create a for loop that iterates over a list and removes duplicates.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc removeDuplicates(list []int) []int {\n\tunique := make(map[int]bool)\n\tvar result []int\n\n\tfor _, item := range list {\n\t\tif !unique[item] {\n\t\t\tunique[item] = true\n\t\t\tresult = append(result, item)\n\t\t}\n\t}\n\n\treturn result\n}\n\nfunc main() {\n\tlist := []int{1, 2, 2, 3, 4, 4, 5}\n\tlist = removeDuplicates(list)\n\tfmt.Println(list)\n}\n```"
  },
  {
    "task": "Implement a for loop to calculate the dot product of two vectors.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc dotProduct(a, b []int) int {\n\tif len(a) != len(b) {\n\t\treturn 0 // or handle error for mismatched lengths\n\t}\n\n\tresult := 0\n\tfor i := 0; i < len(a); i++ {\n\t\tresult += a[i] * b[i]\n\t}\n\treturn result\n}\n\nfunc main() {\n\tvectorA := []int{1, 2, 3}\n\tvectorB := []int{4, 5, 6}\n\tfmt.Println(dotProduct(vectorA, vectorB)) // Output: 32\n}\n```"
  },
  {
    "task": "Write a for loop that prints a sequence of numbers in reverse order.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tfor i := 10; i >= 1; i-- {\n\t\tfmt.Println(i)\n\t}\n}\n```"
  },
  {
    "task": "Develop a for loop that computes the greatest common divisor (GCD) of two numbers.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    a, b := 48, 18\n    for b != 0 {\n        a, b = b, a%b\n    }\n    fmt.Println(\"GCD is:\", a)\n}\n```"
  },
  {
    "task": "Construct a for loop that prints a square pattern of numbers with a given side length.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tsideLength := 5 // Example side length, can be changed to any desired value\n\n\tfor i := 0; i < sideLength; i++ {\n\t\tfor j := 0; j < sideLength; j++ {\n\t\t\tfmt.Print(j+1, \" \")\n\t\t}\n\t\tfmt.Println()\n\t}\n}\n```"
  },
  {
    "task": "Create a for loop that shifts all elements of a list to the left by one position.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc shiftLeft(arr []int) []int {\n\tif len(arr) == 0 {\n\t\treturn arr\n\t}\n\tfirst := arr[0]\n\tfor i := 0; i < len(arr)-1; i++ {\n\t\tarr[i] = arr[i+1]\n\t}\n\tarr[len(arr)-1] = first\n\treturn arr\n}\n\nfunc main() {\n\tlist := []int{1, 2, 3, 4, 5}\n\tfmt.Println(shiftLeft(list))\n}\n```"
  },
  {
    "task": "Use a for loop to print the first 20 triangular numbers.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tfor i := 1; i <= 20; i++ {\n\t\ttriangularNumber := i * (i + 1) / 2\n\t\tfmt.Println(triangularNumber)\n\t}\n}\n```"
  },
  {
    "task": "Write a for loop that finds the first repeating character in a string.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc firstRepeatingChar(s string) rune {\n\tseen := make(map[rune]bool)\n\tfor _, char := range s {\n\t\tif seen[char] {\n\t\t\treturn char\n\t\t}\n\t\tseen[char] = true\n\t}\n\treturn 0\n}\n\nfunc main() {\n\ts := \"swiss\"\n\tfmt.Printf(\"First repeating character: %c\\n\", firstRepeatingChar(s))\n}\n```"
  },
  {
    "task": "Design a for loop that transforms a list of temperatures from Celsius to Fahrenheit.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tcelsiusTemps := []float64{0, 20, 37, 100}\n\tfahrenheitTemps := make([]float64, len(celsiusTemps))\n\n\tfor i := 0; i < len(celsiusTemps); i++ {\n\t\tfahrenheitTemps[i] = celsiusTemps[i]*9/5 + 32\n\t}\n\n\tfmt.Println(\"Celsius:\", celsiusTemps)\n\tfmt.Println(\"Fahrenheit:\", fahrenheitTemps)\n}\n```"
  },
  {
    "task": "Implement a for loop to determine if a string is an isogram.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc isIsogram(s string) bool {\n\ts = strings.ToLower(s)\n\tseen := make(map[rune]bool)\n\tfor _, char := range s {\n\t\tif seen[char] {\n\t\t\treturn false\n\t\t}\n\t\tseen[char] = true\n\t}\n\treturn true\n}\n\nfunc main() {\n\ts := \"Dermatoglyphics\"\n\tfmt.Println(isIsogram(s))\n}\n```"
  },
  {
    "task": "Use a for loop to create a histogram from a list of integers.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tnumbers := []int{1, 2, 2, 3, 4, 4, 4, 5}\n\thistogram := make(map[int]int)\n\n\tfor _, number := range numbers {\n\t\thistogram[number]++\n\t}\n\n\tfor number, count := range histogram {\n\t\tfmt.Printf(\"%d: %s\\n\", number, string(repeat('*', count)))\n\t}\n}\n\nfunc repeat(char rune, count int) []rune {\n\tresult := make([]rune, count)\n\tfor i := 0; i < count; i++ {\n\t\tresult[i] = char\n\t}\n\treturn result\n}\n```"
  },
  {
    "task": "Create a for loop that prints the indexes of all occurrences of a particular element in a list.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tlist := []int{1, 2, 3, 2, 4, 2, 5}\n\ttarget := 2\n\n\tfor i, v := range list {\n\t\tif v == target {\n\t\t\tfmt.Println(i)\n\t\t}\n\t}\n}\n```"
  },
  {
    "task": "Write a for loop that checks if a given string is a palindrome.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc isPalindrome(s string) bool {\n\tlength := len(s)\n\tfor i := 0; i < length/2; i++ {\n\t\tif s[i] != s[length-1-i] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc main() {\n\ttestString := \"racecar\"\n\tfmt.Println(isPalindrome(testString)) // Output: true\n}\n```"
  },
  {
    "task": "Develop a for loop to simulate the behavior of a simple finite state machine.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tstates := []string{\"Start\", \"Processing\", \"End\"}\n\tstate := 0\n\n\tfor state < len(states) {\n\t\tswitch states[state] {\n\t\tcase \"Start\":\n\t\t\tfmt.Println(\"Entering Start state\")\n\t\t\tstate++\n\t\tcase \"Processing\":\n\t\t\tfmt.Println(\"Processing data\")\n\t\t\tstate++\n\t\tcase \"End\":\n\t\t\tfmt.Println(\"Reached End state\")\n\t\t\tstate++\n\t\t}\n\t}\n}\n```"
  },
  {
    "task": "Design a for loop that finds the sum of all odd numbers in a list.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tnumbers := []int{1, 2, 3, 4, 5, 6, 7, 8, 9}\n\tsum := 0\n\n\tfor _, num := range numbers {\n\t\tif num%2 != 0 {\n\t\t\tsum += num\n\t\t}\n\t}\n\n\tfmt.Println(\"Sum of odd numbers:\", sum)\n}\n```"
  },
  {
    "task": "Use a for loop to count how many words start with a vowel in a given sentence.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"unicode\"\n)\n\nfunc main() {\n\tsentence := \"An example of a sentence with some words starting with vowels\"\n\twords := strings.Fields(sentence)\n\tvowels := \"aeiouAEIOU\"\n\tcount := 0\n\n\tfor _, word := range words {\n\t\tif len(word) > 0 && strings.ContainsRune(vowels, rune(word[0])) {\n\t\t\tcount++\n\t\t}\n\t}\n\n\tfmt.Printf(\"Number of words starting with a vowel: %d\\n\", count)\n}\n```"
  },
  {
    "task": "Implement a for loop that sorts a list of strings by their length.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sort\"\n)\n\nfunc main() {\n\tstrings := []string{\"apple\", \"banana\", \"kiwi\", \"grape\", \"orange\"}\n\tsort.Slice(strings, func(i, j int) bool {\n\t\treturn len(strings[i]) < len(strings[j])\n\t})\n\tfor _, str := range strings {\n\t\tfmt.Println(str)\n\t}\n}\n```"
  },
  {
    "task": "Write a for loop that prints the factorial of numbers from 1 to 10.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tfor i := 1; i <= 10; i++ {\n\t\tfactorial := 1\n\t\tfor j := 1; j <= i; j++ {\n\t\t\tfactorial *= j\n\t\t}\n\t\tfmt.Printf(\"Factorial of %d is %d\\n\", i, factorial)\n\t}\n}\n```"
  },
  {
    "task": "Create a for loop that replaces all instances of a substring in a string with another substring.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc main() {\n\tstr := \"The quick brown fox jumps over the lazy dog\"\n\tsubstrToReplace := \"o\"\n\treplacement := \"0\"\n\t\n\tvar result strings.Builder\n\tfor i := 0; i < len(str); i++ {\n\t\tif strings.HasPrefix(str[i:], substrToReplace) {\n\t\t\tresult.WriteString(replacement)\n\t\t\ti += len(substrToReplace) - 1\n\t\t} else {\n\t\t\tresult.WriteByte(str[i])\n\t\t}\n\t}\n\n\tfmt.Println(result.String())\n}\n```"
  },
  {
    "task": "Develop a for loop that squares each element in a list of numbers.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    numbers := []int{1, 2, 3, 4, 5}\n    for i := 0; i < len(numbers); i++ {\n        numbers[i] *= numbers[i]\n    }\n    fmt.Println(numbers)\n}\n```"
  },
  {
    "task": "Use a for loop to reverse the order of elements in an array.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc reverseArray(arr []int) []int {\n\tn := len(arr)\n\tfor i := 0; i < n/2; i++ {\n\t\tarr[i], arr[n-i-1] = arr[n-i-1], arr[i]\n\t}\n\treturn arr\n}\n\nfunc main() {\n\tarr := []int{1, 2, 3, 4, 5}\n\treversedArr := reverseArray(arr)\n\tfmt.Println(reversedArr)\n}\n```"
  },
  {
    "task": "Implement a for loop that tests if two strings are anagrams of each other.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sort\"\n\t\"strings\"\n)\n\nfunc areAnagrams(str1, str2 string) bool {\n\tif len(str1) != len(str2) {\n\t\treturn false\n\t}\n\n\ts1 := strings.Split(str1, \"\")\n\ts2 := strings.Split(str2, \"\")\n\n\tsort.Strings(s1)\n\tsort.Strings(s2)\n\n\tfor i := 0; i < len(s1); i++ {\n\t\tif s1[i] != s2[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc main() {\n\tstr1 := \"listen\"\n\tstr2 := \"silent\"\n\tif areAnagrams(str1, str2) {\n\t\tfmt.Println(\"The strings are anagrams.\")\n\t} else {\n\t\tfmt.Println(\"The strings are not anagrams.\")\n\t}\n}\n```"
  },
  {
    "task": "Design a for loop to find and print all Armstrong numbers between 100 and 999.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc main() {\n\tfor num := 100; num <= 999; num++ {\n\t\thundreds := num / 100\n\t\ttens := (num / 10) % 10\n\t\tones := num % 10\n\n\t\tsumOfCubes := int(math.Pow(float64(hundreds), 3)) + int(math.Pow(float64(tens), 3)) + int(math.Pow(float64(ones), 3))\n\n\t\tif sumOfCubes == num {\n\t\t\tfmt.Println(num)\n\t\t}\n\t}\n}\n```"
  }
]