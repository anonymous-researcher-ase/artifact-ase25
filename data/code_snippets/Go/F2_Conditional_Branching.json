[
  {
    "task": "Write a program that checks if a number is even or odd and outputs the result.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    var number int\n    fmt.Println(\"Enter a number:\")\n    fmt.Scan(&number)\n\n    if number%2 == 0 {\n        fmt.Println(\"The number is even.\")\n    } else {\n        fmt.Println(\"The number is odd.\")\n    }\n}\n```"
  },
  {
    "task": "Create a function that determines if a given year is a leap year.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc isLeapYear(year int) bool {\n\tif year%4 == 0 {\n\t\tif year%100 == 0 {\n\t\t\tif year%400 == 0 {\n\t\t\t\treturn true\n\t\t\t}\n\t\t\treturn false\n\t\t}\n\t\treturn true\n\t}\n\treturn false\n}\n\nfunc main() {\n\tfmt.Println(isLeapYear(2020)) // true\n\tfmt.Println(isLeapYear(1900)) // false\n\tfmt.Println(isLeapYear(2000)) // true\n\tfmt.Println(isLeapYear(2021)) // false\n}\n```"
  },
  {
    "task": "Develop a script that categorizes an input number as positive, negative, or zero.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tvar number int\n\tfmt.Print(\"Enter a number: \")\n\tfmt.Scan(&number)\n\n\tif number > 0 {\n\t\tfmt.Println(\"The number is positive.\")\n\t} else if number < 0 {\n\t\tfmt.Println(\"The number is negative.\")\n\t} else {\n\t\tfmt.Println(\"The number is zero.\")\n\t}\n}\n```"
  },
  {
    "task": "Implement a system that grants access only if a correct password and username are provided.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tcorrectUsername := \"admin\"\n\tcorrectPassword := \"password123\"\n\n\tvar username, password string\n\n\tfmt.Println(\"Enter username:\")\n\tfmt.Scanln(&username)\n\n\tfmt.Println(\"Enter password:\")\n\tfmt.Scanln(&password)\n\n\tif username == correctUsername && password == correctPassword {\n\t\tfmt.Println(\"Access granted\")\n\t} else {\n\t\tfmt.Println(\"Access denied\")\n\t}\n}\n```"
  },
  {
    "task": "Design a program that outputs 'Fizz' for numbers divisible by 3, 'Buzz' for numbers divisible by 5, and 'FizzBuzz' for numbers divisible by both.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tfor i := 1; i <= 100; i++ {\n\t\tif i%3 == 0 && i%5 == 0 {\n\t\t\tfmt.Println(\"FizzBuzz\")\n\t\t} else if i%3 == 0 {\n\t\t\tfmt.Println(\"Fizz\")\n\t\t} else if i%5 == 0 {\n\t\t\tfmt.Println(\"Buzz\")\n\t\t} else {\n\t\t\tfmt.Println(i)\n\t\t}\n\t}\n}\n```"
  },
  {
    "task": "Write a function to determine if a character is a vowel or a consonant.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc isVowelOrConsonant(char rune) string {\n\tvowels := \"aeiouAEIOU\"\n\tif strings.ContainsRune(vowels, char) {\n\t\treturn \"vowel\"\n\t}\n\treturn \"consonant\"\n}\n\nfunc main() {\n\tchar := 'a'\n\tfmt.Printf(\"The character '%c' is a %s.\\n\", char, isVowelOrConsonant(char))\n}\n```"
  },
  {
    "task": "Create a program that assigns letter grades based on numerical scores.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc getLetterGrade(score int) string {\n\tif score >= 90 {\n\t\treturn \"A\"\n\t} else if score >= 80 {\n\t\treturn \"B\"\n\t} else if score >= 70 {\n\t\treturn \"C\"\n\t} else if score >= 60 {\n\t\treturn \"D\"\n\t} else {\n\t\treturn \"F\"\n\t}\n}\n\nfunc main() {\n\tscores := []int{95, 82, 67, 58, 73}\n\tfor _, score := range scores {\n\t\tfmt.Printf(\"Score: %d, Grade: %s\\n\", score, getLetterGrade(score))\n\t}\n}\n```"
  },
  {
    "task": "Develop a routine that suggests clothing based on the current temperature.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc suggestClothing(temperature int) string {\n\tif temperature <= 0 {\n\t\treturn \"Wear a heavy coat, scarf, and gloves.\"\n\t} else if temperature > 0 && temperature <= 10 {\n\t\treturn \"Wear a coat and a sweater.\"\n\t} else if temperature > 10 && temperature <= 20 {\n\t\treturn \"Wear a light jacket or sweater.\"\n\t} else if temperature > 20 && temperature <= 30 {\n\t\treturn \"Wear a t-shirt and shorts.\"\n\t} else {\n\t\treturn \"Wear light clothing and stay hydrated.\"\n\t}\n}\n\nfunc main() {\n\tvar temperature int\n\tfmt.Print(\"Enter the current temperature: \")\n\tfmt.Scan(&temperature)\n\tclothingSuggestion := suggestClothing(temperature)\n\tfmt.Println(clothingSuggestion)\n}\n```"
  },
  {
    "task": "Implement a system that checks if a user is an adult or a minor based on their age.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc checkAge(age int) string {\n\tif age >= 18 {\n\t\treturn \"Adult\"\n\t} else {\n\t\treturn \"Minor\"\n\t}\n}\n\nfunc main() {\n\tage := 20 // Example age value\n\tstatus := checkAge(age)\n\tfmt.Println(\"The user is an:\", status)\n}\n```"
  },
  {
    "task": "Design a program that validates if a triangle can exist based on its side lengths.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc isValidTriangle(a, b, c float64) bool {\n    return a+b > c && a+c > b && b+c > a\n}\n\nfunc main() {\n    var a, b, c float64\n    fmt.Println(\"Enter the lengths of the three sides of the triangle:\")\n    fmt.Scan(&a, &b, &c)\n\n    if isValidTriangle(a, b, c) {\n        fmt.Println(\"The triangle is valid.\")\n    } else {\n        fmt.Println(\"The triangle is not valid.\")\n    }\n}\n```"
  },
  {
    "task": "Write a function that determines the largest of three input numbers.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc largestOfThree(a, b, c int) int {\n\tif a >= b && a >= c {\n\t\treturn a\n\t} else if b >= a && b >= c {\n\t\treturn b\n\t} else {\n\t\treturn c\n\t}\n}\n\nfunc main() {\n\tfmt.Println(largestOfThree(3, 7, 5)) // Example usage\n}\n```"
  },
  {
    "task": "Create a program that checks if a string is a palindrome.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc isPalindrome(s string) bool {\n\ts = strings.ToLower(s)\n\tn := len(s)\n\tfor i := 0; i < n/2; i++ {\n\t\tif s[i] != s[n-i-1] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc main() {\n\tstr := \"Racecar\"\n\tif isPalindrome(str) {\n\t\tfmt.Println(\"The string is a palindrome.\")\n\t} else {\n\t\tfmt.Println(\"The string is not a palindrome.\")\n\t}\n}\n```"
  },
  {
    "task": "Develop a routine that calculates the total cost with a discount applied if applicable.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc calculateTotalCost(originalCost float64, discountThreshold float64, discountRate float64) float64 {\n\tif originalCost > discountThreshold {\n\t\treturn originalCost * (1 - discountRate)\n\t}\n\treturn originalCost\n}\n\nfunc main() {\n\toriginalCost := 150.0\n\tdiscountThreshold := 100.0\n\tdiscountRate := 0.1\n\n\ttotalCost := calculateTotalCost(originalCost, discountThreshold, discountRate)\n\tfmt.Printf(\"The total cost is: %.2f\\n\", totalCost)\n}\n```"
  },
  {
    "task": "Implement a system that checks if a person is eligible to vote based on age and citizenship.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc canVote(age int, isCitizen bool) bool {\n\tif age >= 18 && isCitizen {\n\t\treturn true\n\t}\n\treturn false\n}\n\nfunc main() {\n\tage := 20\n\tisCitizen := true\n\n\tif canVote(age, isCitizen) {\n\t\tfmt.Println(\"Eligible to vote.\")\n\t} else {\n\t\tfmt.Println(\"Not eligible to vote.\")\n\t}\n}\n```"
  },
  {
    "task": "Design a function that returns the day of the week given a number from 1 to 7.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc dayOfWeek(number int) string {\n\tswitch number {\n\tcase 1:\n\t\treturn \"Monday\"\n\tcase 2:\n\t\treturn \"Tuesday\"\n\tcase 3:\n\t\treturn \"Wednesday\"\n\tcase 4:\n\t\treturn \"Thursday\"\n\tcase 5:\n\t\treturn \"Friday\"\n\tcase 6:\n\t\treturn \"Saturday\"\n\tcase 7:\n\t\treturn \"Sunday\"\n\tdefault:\n\t\treturn \"Invalid day\"\n\t}\n}\n\nfunc main() {\n\tfmt.Println(dayOfWeek(3)) // Example usage\n}\n```"
  },
  {
    "task": "Write a program that determines if a word is found within a given sentence.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc main() {\n\tsentence := \"the quick brown fox jumps over the lazy dog\"\n\tword := \"fox\"\n\n\tif strings.Contains(sentence, word) {\n\t\tfmt.Println(\"Word found in the sentence.\")\n\t} else {\n\t\tfmt.Println(\"Word not found in the sentence.\")\n\t}\n}\n```"
  },
  {
    "task": "Create a script that checks if a number is within a specified range.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    number := 15\n    lowerBound := 10\n    upperBound := 20\n\n    if number >= lowerBound && number <= upperBound {\n        fmt.Println(\"Number is within the range.\")\n    } else {\n        fmt.Println(\"Number is outside the range.\")\n    }\n}\n```"
  },
  {
    "task": "Develop a routine to decide if a user input is a valid email address.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"regexp\"\n)\n\nfunc isValidEmail(email string) bool {\n\t// Define a regular expression for a simple email validation\n\tregex := `^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$`\n\tre := regexp.MustCompile(regex)\n\treturn re.MatchString(email)\n}\n\nfunc main() {\n\tvar email string\n\tfmt.Println(\"Enter an email address:\")\n\tfmt.Scanln(&email)\n\n\tif isValidEmail(email) {\n\t\tfmt.Println(\"Valid email address.\")\n\t} else {\n\t\tfmt.Println(\"Invalid email address.\")\n\t}\n}\n```"
  },
  {
    "task": "Implement a program that categorizes a number as small, medium, or large.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc categorizeNumber(num int) string {\n\tif num < 10 {\n\t\treturn \"small\"\n\t} else if num <= 100 {\n\t\treturn \"medium\"\n\t} else {\n\t\treturn \"large\"\n\t}\n}\n\nfunc main() {\n\tnumber := 42 // example number\n\tcategory := categorizeNumber(number)\n\tfmt.Printf(\"The number %d is categorized as %s.\\n\", number, category)\n}\n```"
  },
  {
    "task": "Design a function that outputs the season based on the month provided.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc getSeason(month string) string {\n\tswitch month {\n\tcase \"December\", \"January\", \"February\":\n\t\treturn \"Winter\"\n\tcase \"March\", \"April\", \"May\":\n\t\treturn \"Spring\"\n\tcase \"June\", \"July\", \"August\":\n\t\treturn \"Summer\"\n\tcase \"September\", \"October\", \"November\":\n\t\treturn \"Fall\"\n\tdefault:\n\t\treturn \"Unknown\"\n\t}\n}\n\nfunc main() {\n\tfmt.Println(getSeason(\"January\"))   // Winter\n\tfmt.Println(getSeason(\"April\"))     // Spring\n\tfmt.Println(getSeason(\"August\"))    // Summer\n\tfmt.Println(getSeason(\"October\"))   // Fall\n\tfmt.Println(getSeason(\"Invalid\"))   // Unknown\n}\n```"
  },
  {
    "task": "Write a program that checks if a string contains only alphabetic characters.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"unicode\"\n)\n\nfunc isAlphabetic(s string) bool {\n\tfor _, r := range s {\n\t\tif !unicode.IsLetter(r) {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc main() {\n\tstr := \"HelloWorld\"\n\tif isAlphabetic(str) {\n\t\tfmt.Println(\"The string contains only alphabetic characters.\")\n\t} else {\n\t\tfmt.Println(\"The string contains non-alphabetic characters.\")\n\t}\n}\n```"
  },
  {
    "task": "Create a routine that decides the type of triangle based on its angles.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc triangleType(angle1, angle2, angle3 int) string {\n\tif angle1+angle2+angle3 != 180 {\n\t\treturn \"Not a triangle\"\n\t}\n\n\tif angle1 == 90 || angle2 == 90 || angle3 == 90 {\n\t\treturn \"Right triangle\"\n\t} else if angle1 > 90 || angle2 > 90 || angle3 > 90 {\n\t\treturn \"Obtuse triangle\"\n\t} else {\n\t\treturn \"Acute triangle\"\n\t}\n}\n\nfunc main() {\n\tfmt.Println(triangleType(60, 60, 60)) // Acute triangle\n\tfmt.Println(triangleType(90, 45, 45)) // Right triangle\n\tfmt.Println(triangleType(120, 30, 30)) // Obtuse triangle\n\tfmt.Println(triangleType(0, 90, 90))  // Not a triangle\n}\n```"
  },
  {
    "task": "Develop a program that suggests a meal based on the time of day.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\tcurrentHour := time.Now().Hour()\n\tvar mealSuggestion string\n\n\tif currentHour >= 5 && currentHour < 11 {\n\t\tmealSuggestion = \"Breakfast\"\n\t} else if currentHour >= 11 && currentHour < 17 {\n\t\tmealSuggestion = \"Lunch\"\n\t} else if currentHour >= 17 && currentHour < 22 {\n\t\tmealSuggestion = \"Dinner\"\n\t} else {\n\t\tmealSuggestion = \"Snack\"\n\t}\n\n\tfmt.Printf(\"It's time for %s.\\n\", mealSuggestion)\n}\n```"
  },
  {
    "task": "Implement a function that determines if a point lies within a circle given its radius.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc isPointInCircle(x, y, radius float64) bool {\n\tdistance := math.Sqrt(x*x + y*y)\n\treturn distance <= radius\n}\n\nfunc main() {\n\tx, y, radius := 1.0, 2.0, 5.0\n\tif isPointInCircle(x, y, radius) {\n\t\tfmt.Println(\"Point is inside the circle.\")\n\t} else {\n\t\tfmt.Println(\"Point is outside the circle.\")\n\t}\n}\n```"
  },
  {
    "task": "Design a script that calculates overtime pay based on hours worked.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tvar hoursWorked, hourlyRate, overtimePay float64\n\tconst overtimeThreshold = 40.0\n\tconst overtimeMultiplier = 1.5\n\n\tfmt.Print(\"Enter hours worked: \")\n\tfmt.Scan(&hoursWorked)\n\tfmt.Print(\"Enter hourly rate: \")\n\tfmt.Scan(&hourlyRate)\n\n\tif hoursWorked > overtimeThreshold {\n\t\tregularHours := overtimeThreshold\n\t\tovertimeHours := hoursWorked - overtimeThreshold\n\t\tovertimePay = (regularHours * hourlyRate) + (overtimeHours * hourlyRate * overtimeMultiplier)\n\t} else {\n\t\tovertimePay = hoursWorked * hourlyRate\n\t}\n\n\tfmt.Printf(\"Total pay, including overtime if applicable: $%.2f\\n\", overtimePay)\n}\n```"
  },
  {
    "task": "Write a program that checks if two strings are anagrams of each other.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sort\"\n\t\"strings\"\n)\n\nfunc main() {\n\tstr1 := \"listen\"\n\tstr2 := \"silent\"\n\n\tif areAnagrams(str1, str2) {\n\t\tfmt.Println(\"The strings are anagrams.\")\n\t} else {\n\t\tfmt.Println(\"The strings are not anagrams.\")\n\t}\n}\n\nfunc areAnagrams(s1, s2 string) bool {\n\tif len(s1) != len(s2) {\n\t\treturn false\n\t}\n\n\ts1 = strings.ToLower(s1)\n\ts2 = strings.ToLower(s2)\n\n\ts1Rune := []rune(s1)\n\ts2Rune := []rune(s2)\n\n\tsort.Slice(s1Rune, func(i, j int) bool { return s1Rune[i] < s1Rune[j] })\n\tsort.Slice(s2Rune, func(i, j int) bool { return s2Rune[i] < s2Rune[j] })\n\n\treturn string(s1Rune) == string(s2Rune)\n}\n```"
  },
  {
    "task": "Create a function that classifies numbers as prime or composite.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc classifyNumber(n int) string {\n\tif n <= 1 {\n\t\treturn \"Composite\"\n\t}\n\tif n == 2 {\n\t\treturn \"Prime\"\n\t}\n\tif n%2 == 0 {\n\t\treturn \"Composite\"\n\t}\n\tsqrtN := int(math.Sqrt(float64(n)))\n\tfor i := 3; i <= sqrtN; i += 2 {\n\t\tif n%i == 0 {\n\t\t\treturn \"Composite\"\n\t\t}\n\t}\n\treturn \"Prime\"\n}\n\nfunc main() {\n\tnumber := 29\n\tresult := classifyNumber(number)\n\tfmt.Printf(\"The number %d is %s.\\n\", number, result)\n}\n```"
  },
  {
    "task": "Develop a routine to determine if a number is a power of two.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc isPowerOfTwo(n int) bool {\n\tif n <= 0 {\n\t\treturn false\n\t}\n\treturn (n & (n - 1)) == 0\n}\n\nfunc main() {\n\tfmt.Println(isPowerOfTwo(1))  // true\n\tfmt.Println(isPowerOfTwo(2))  // true\n\tfmt.Println(isPowerOfTwo(3))  // false\n\tfmt.Println(isPowerOfTwo(4))  // true\n\tfmt.Println(isPowerOfTwo(16)) // true\n\tfmt.Println(isPowerOfTwo(18)) // false\n}\n```"
  },
  {
    "task": "Implement a program that checks if a list is sorted in ascending order.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc isSortedAscending(arr []int) bool {\n\tfor i := 0; i < len(arr)-1; i++ {\n\t\tif arr[i] > arr[i+1] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc main() {\n\tlist := []int{1, 2, 3, 4, 5}\n\tif isSortedAscending(list) {\n\t\tfmt.Println(\"The list is sorted in ascending order.\")\n\t} else {\n\t\tfmt.Println(\"The list is not sorted in ascending order.\")\n\t}\n}\n```"
  },
  {
    "task": "Design a function that suggests a sport based on the weather conditions.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc suggestSport(weather string) string {\n\tswitch strings.ToLower(weather) {\n\tcase \"sunny\":\n\t\treturn \"Tennis\"\n\tcase \"rainy\":\n\t\treturn \"Swimming\"\n\tcase \"windy\":\n\t\treturn \"Sailing\"\n\tcase \"snowy\":\n\t\treturn \"Skiing\"\n\tdefault:\n\t\treturn \"Indoor Gym\"\n\t}\n}\n\nfunc main() {\n\tfmt.Println(suggestSport(\"Sunny\"))  // Output: Tennis\n\tfmt.Println(suggestSport(\"Rainy\"))  // Output: Swimming\n\tfmt.Println(suggestSport(\"Windy\"))  // Output: Sailing\n\tfmt.Println(suggestSport(\"Snowy\"))  // Output: Skiing\n\tfmt.Println(suggestSport(\"Cloudy\")) // Output: Indoor Gym\n}\n```"
  },
  {
    "task": "Write a program that determines if an entered date is valid.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc isValidDate(year int, month int, day int) bool {\n\tif month < 1 || month > 12 {\n\t\treturn false\n\t}\n\tif day < 1 || day > 31 {\n\t\treturn false\n\t}\n\tdateStr := fmt.Sprintf(\"%04d-%02d-%02d\", year, month, day)\n\t_, err := time.Parse(\"2006-01-02\", dateStr)\n\treturn err == nil\n}\n\nfunc main() {\n\tvar year, month, day int\n\tfmt.Println(\"Enter year, month, and day:\")\n\tfmt.Scan(&year, &month, &day)\n\n\tif isValidDate(year, month, day) {\n\t\tfmt.Println(\"The date is valid.\")\n\t} else {\n\t\tfmt.Println(\"The date is invalid.\")\n\t}\n}\n```"
  },
  {
    "task": "Create a script to decide which of two products to buy based on price and reviews.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\ntype Product struct {\n\tName   string\n\tPrice  float64\n\tRating float64\n}\n\nfunc main() {\n\tproduct1 := Product{Name: \"Product A\", Price: 29.99, Rating: 4.5}\n\tproduct2 := Product{Name: \"Product B\", Price: 39.99, Rating: 4.7}\n\n\tif product1.Price < product2.Price {\n\t\tif product1.Rating >= product2.Rating {\n\t\t\tfmt.Printf(\"Buy %s\\n\", product1.Name)\n\t\t} else {\n\t\t\tfmt.Printf(\"Buy %s\\n\", product2.Name)\n\t\t}\n\t} else if product2.Price < product1.Price {\n\t\tif product2.Rating >= product1.Rating {\n\t\t\tfmt.Printf(\"Buy %s\\n\", product2.Name)\n\t\t} else {\n\t\t\tfmt.Printf(\"Buy %s\\n\", product1.Name)\n\t\t}\n\t} else {\n\t\tif product1.Rating > product2.Rating {\n\t\t\tfmt.Printf(\"Buy %s\\n\", product1.Name)\n\t\t} else {\n\t\t\tfmt.Printf(\"Buy %s\\n\", product2.Name)\n\t\t}\n\t}\n}\n```"
  },
  {
    "task": "Develop a function that categorizes a person\u2019s BMI as underweight, normal, overweight, or obese.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc categorizeBMI(bmi float64) string {\n\tif bmi < 18.5 {\n\t\treturn \"Underweight\"\n\t} else if bmi >= 18.5 && bmi < 24.9 {\n\t\treturn \"Normal\"\n\t} else if bmi >= 25 && bmi < 29.9 {\n\t\treturn \"Overweight\"\n\t} else {\n\t\treturn \"Obese\"\n\t}\n}\n\nfunc main() {\n\tbmi := 22.0\n\tcategory := categorizeBMI(bmi)\n\tfmt.Println(\"BMI Category:\", category)\n}\n```"
  },
  {
    "task": "Implement a program that checks if a credit card number is valid using the Luhn algorithm.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n)\n\nfunc isValidLuhn(cardNumber string) bool {\n\tsum := 0\n\talternate := false\n\tnDigits := len(cardNumber)\n\n\tfor i := nDigits - 1; i >= 0; i-- {\n\t\tn, err := strconv.Atoi(string(cardNumber[i]))\n\t\tif err != nil {\n\t\t\treturn false\n\t\t}\n\n\t\tif alternate {\n\t\t\tn *= 2\n\t\t\tif n > 9 {\n\t\t\t\tn -= 9\n\t\t\t}\n\t\t}\n\n\t\tsum += n\n\t\talternate = !alternate\n\t}\n\n\treturn sum%10 == 0\n}\n\nfunc main() {\n\tcardNumber := \"1234567812345670\"\n\tif isValidLuhn(cardNumber) {\n\t\tfmt.Println(\"The credit card number is valid.\")\n\t} else {\n\t\tfmt.Println(\"The credit card number is invalid.\")\n\t}\n}\n```"
  },
  {
    "task": "Design a routine that outputs a greeting based on the current time of day.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\tcurrentHour := time.Now().Hour()\n\n\tif currentHour < 12 {\n\t\tfmt.Println(\"Good morning!\")\n\t} else if currentHour < 18 {\n\t\tfmt.Println(\"Good afternoon!\")\n\t} else {\n\t\tfmt.Println(\"Good evening!\")\n\t}\n}\n```"
  },
  {
    "task": "Write a program that determines if a given word can be formed with a set of letters.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc canFormWord(word string, letters string) bool {\n\tletterCount := make(map[rune]int)\n\tfor _, letter := range letters {\n\t\tletterCount[letter]++\n\t}\n\n\tfor _, char := range word {\n\t\tif letterCount[char] == 0 {\n\t\t\treturn false\n\t\t}\n\t\tletterCount[char]--\n\t}\n\n\treturn true\n}\n\nfunc main() {\n\tword := \"example\"\n\tletters := \"pmlxaeem\"\n\n\tif canFormWord(word, letters) {\n\t\tfmt.Println(\"The word can be formed.\")\n\t} else {\n\t\tfmt.Println(\"The word cannot be formed.\")\n\t}\n}\n```"
  },
  {
    "task": "Create a function that outputs the appropriate greeting based on the day of the week.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc getGreeting(dayOfWeek string) string {\n\tswitch dayOfWeek {\n\tcase \"Monday\":\n\t\treturn \"Happy Monday!\"\n\tcase \"Tuesday\":\n\t\treturn \"Happy Tuesday!\"\n\tcase \"Wednesday\":\n\t\treturn \"Happy Wednesday!\"\n\tcase \"Thursday\":\n\t\treturn \"Happy Thursday!\"\n\tcase \"Friday\":\n\t\treturn \"Happy Friday!\"\n\tcase \"Saturday\":\n\t\treturn \"Happy Saturday!\"\n\tcase \"Sunday\":\n\t\treturn \"Happy Sunday!\"\n\tdefault:\n\t\treturn \"Have a great day!\"\n\t}\n}\n\nfunc main() {\n\ttoday := time.Now().Weekday().String()\n\tgreeting := getGreeting(today)\n\tfmt.Println(greeting)\n}\n```"
  },
  {
    "task": "Develop a system to determine if a person qualifies for a senior citizen discount.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc qualifiesForSeniorDiscount(age int) bool {\n\tif age >= 65 {\n\t\treturn true\n\t}\n\treturn false\n}\n\nfunc main() {\n\tvar age int\n\tfmt.Print(\"Enter age: \")\n\tfmt.Scan(&age)\n\n\tif qualifiesForSeniorDiscount(age) {\n\t\tfmt.Println(\"Qualifies for senior citizen discount.\")\n\t} else {\n\t\tfmt.Println(\"Does not qualify for senior citizen discount.\")\n\t}\n}\n```"
  },
  {
    "task": "Implement a function that checks if a number is a perfect square.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc isPerfectSquare(num int) bool {\n\tif num < 0 {\n\t\treturn false\n\t}\n\tsqrt := int(math.Sqrt(float64(num)))\n\treturn sqrt*sqrt == num\n}\n\nfunc main() {\n\tfmt.Println(isPerfectSquare(16)) // true\n\tfmt.Println(isPerfectSquare(14)) // false\n}\n```"
  },
  {
    "task": "Design a program that outputs the correct shipping cost based on weight and distance.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tweight := 10.0  // Example weight in kilograms\n\tdistance := 500 // Example distance in kilometers\n\n\tvar cost float64\n\n\tif weight <= 5 {\n\t\tif distance <= 100 {\n\t\t\tcost = 5.0\n\t\t} else if distance <= 500 {\n\t\t\tcost = 10.0\n\t\t} else {\n\t\t\tcost = 15.0\n\t\t}\n\t} else if weight <= 20 {\n\t\tif distance <= 100 {\n\t\t\tcost = 10.0\n\t\t} else if distance <= 500 {\n\t\t\tcost = 20.0\n\t\t} else {\n\t\t\tcost = 30.0\n\t\t}\n\t} else {\n\t\tif distance <= 100 {\n\t\t\tcost = 20.0\n\t\t} else if distance <= 500 {\n\t\t\tcost = 40.0\n\t\t} else {\n\t\t\tcost = 60.0\n\t\t}\n\t}\n\n\tfmt.Printf(\"The shipping cost is: $%.2f\\n\", cost)\n}\n```"
  },
  {
    "task": "Write a routine that chooses the correct pronoun based on gender input.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc choosePronoun(gender string) string {\n\tswitch gender {\n\tcase \"male\":\n\t\treturn \"he\"\n\tcase \"female\":\n\t\treturn \"she\"\n\tdefault:\n\t\treturn \"they\"\n\t}\n}\n\nfunc main() {\n\tfmt.Println(choosePronoun(\"male\"))   // Output: he\n\tfmt.Println(choosePronoun(\"female\")) // Output: she\n\tfmt.Println(choosePronoun(\"other\"))  // Output: they\n}\n```"
  },
  {
    "task": "Create a program that checks if a user input is a palindrome number.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n)\n\nfunc isPalindrome(number int) bool {\n\tstrNum := strconv.Itoa(number)\n\tlength := len(strNum)\n\tfor i := 0; i < length/2; i++ {\n\t\tif strNum[i] != strNum[length-i-1] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc main() {\n\tvar input int\n\tfmt.Println(\"Enter a number:\")\n\t_, err := fmt.Scan(&input)\n\tif err != nil {\n\t\tfmt.Println(\"Invalid input\")\n\t\treturn\n\t}\n\n\tif isPalindrome(input) {\n\t\tfmt.Println(\"The number is a palindrome.\")\n\t} else {\n\t\tfmt.Println(\"The number is not a palindrome.\")\n\t}\n}\n```"
  },
  {
    "task": "Develop a script to decide if a number is a perfect number.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc isPerfectNumber(n int) bool {\n\tif n < 1 {\n\t\treturn false\n\t}\n\tsum := 0\n\tfor i := 1; i <= n/2; i++ {\n\t\tif n%i == 0 {\n\t\t\tsum += i\n\t\t}\n\t}\n\treturn sum == n\n}\n\nfunc main() {\n\tnumber := 28 // Example number\n\tif isPerfectNumber(number) {\n\t\tfmt.Printf(\"%d is a perfect number.\\n\", number)\n\t} else {\n\t\tfmt.Printf(\"%d is not a perfect number.\\n\", number)\n\t}\n}\n```"
  },
  {
    "task": "Implement a system that determines the winner in a rock-paper-scissors game.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc determineWinner(player1 string, player2 string) string {\n    if player1 == player2 {\n        return \"Tie\"\n    }\n    switch player1 {\n    case \"rock\":\n        if player2 == \"scissors\" {\n            return \"Player 1 wins\"\n        }\n        return \"Player 2 wins\"\n    case \"paper\":\n        if player2 == \"rock\" {\n            return \"Player 1 wins\"\n        }\n        return \"Player 2 wins\"\n    case \"scissors\":\n        if player2 == \"paper\" {\n            return \"Player 1 wins\"\n        }\n        return \"Player 2 wins\"\n    }\n    return \"Invalid input\"\n}\n\nfunc main() {\n    fmt.Println(determineWinner(\"rock\", \"scissors\")) // Player 1 wins\n    fmt.Println(determineWinner(\"rock\", \"paper\"))    // Player 2 wins\n    fmt.Println(determineWinner(\"paper\", \"paper\"))   // Tie\n}\n```"
  },
  {
    "task": "Design a function that suggests a movie genre based on user mood.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc suggestGenre(mood string) string {\n\tswitch mood {\n\tcase \"happy\":\n\t\treturn \"Comedy\"\n\tcase \"sad\":\n\t\treturn \"Drama\"\n\tcase \"adventurous\":\n\t\treturn \"Action\"\n\tcase \"romantic\":\n\t\treturn \"Romance\"\n\tcase \"scared\":\n\t\treturn \"Horror\"\n\tdefault:\n\t\treturn \"Documentary\"\n\t}\n}\n\nfunc main() {\n\tmood := \"happy\"\n\tgenre := suggestGenre(mood)\n\tfmt.Printf(\"Based on your mood, you might enjoy a %s movie.\\n\", genre)\n}\n```"
  },
  {
    "task": "Write a program that checks if a file extension is valid for an image file.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc isValidImageExtension(extension string) bool {\n\textension = strings.ToLower(extension)\n\tvalidExtensions := []string{\".jpg\", \".jpeg\", \".png\", \".gif\", \".bmp\", \".tiff\"}\n\tfor _, validExtension := range validExtensions {\n\t\tif extension == validExtension {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\nfunc main() {\n\tfmt.Println(isValidImageExtension(\".jpg\"))   // true\n\tfmt.Println(isValidImageExtension(\".txt\"))   // false\n\tfmt.Println(isValidImageExtension(\".png\"))   // true\n\tfmt.Println(isValidImageExtension(\".docx\"))  // false\n\tfmt.Println(isValidImageExtension(\".tiff\"))  // true\n}\n```"
  },
  {
    "task": "Create a routine that decides the appropriate currency symbol based on country.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc currencySymbol(country string) string {\n\tswitch country {\n\tcase \"USA\":\n\t\treturn \"$\"\n\tcase \"UK\":\n\t\treturn \"\u00a3\"\n\tcase \"EU\":\n\t\treturn \"\u20ac\"\n\tcase \"Japan\":\n\t\treturn \"\u00a5\"\n\tcase \"India\":\n\t\treturn \"\u20b9\"\n\tdefault:\n\t\treturn \"Unknown\"\n\t}\n}\n\nfunc main() {\n\tfmt.Println(currencySymbol(\"USA\"))   // Output: $\n\tfmt.Println(currencySymbol(\"UK\"))    // Output: \u00a3\n\tfmt.Println(currencySymbol(\"EU\"))    // Output: \u20ac\n\tfmt.Println(currencySymbol(\"Japan\")) // Output: \u00a5\n\tfmt.Println(currencySymbol(\"India\")) // Output: \u20b9\n\tfmt.Println(currencySymbol(\"Canada\"))// Output: Unknown\n}\n```"
  },
  {
    "task": "Develop a function that determines if a string is a valid palindrome ignoring spaces and punctuation.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"unicode\"\n)\n\nfunc isPalindrome(s string) bool {\n\tvar filtered []rune\n\tfor _, r := range s {\n\t\tif unicode.IsLetter(r) || unicode.IsDigit(r) {\n\t\t\tfiltered = append(filtered, unicode.ToLower(r))\n\t\t}\n\t}\n\n\tn := len(filtered)\n\tfor i := 0; i < n/2; i++ {\n\t\tif filtered[i] != filtered[n-i-1] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc main() {\n\tfmt.Println(isPalindrome(\"A man, a plan, a canal, Panama\")) // true\n\tfmt.Println(isPalindrome(\"Hello, World!\"))                  // false\n}\n```"
  },
  {
    "task": "Implement a program that checks if a number is in the Fibonacci sequence.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc isFibonacci(n int) bool {\n\tif n < 0 {\n\t\treturn false\n\t}\n\ta, b := 0, 1\n\tfor a <= n {\n\t\tif a == n {\n\t\t\treturn true\n\t\t}\n\t\ta, b = b, a+b\n\t}\n\treturn false\n}\n\nfunc main() {\n\tvar number int\n\tfmt.Print(\"Enter a number: \")\n\tfmt.Scan(&number)\n\n\tif isFibonacci(number) {\n\t\tfmt.Println(\"The number is in the Fibonacci sequence.\")\n\t} else {\n\t\tfmt.Println(\"The number is not in the Fibonacci sequence.\")\n\t}\n}\n```"
  },
  {
    "task": "Design a script to calculate the correct tip based on service quality rating.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc calculateTip(amount float64, rating string) float64 {\n\tvar tipPercentage float64\n\n\tswitch rating {\n\tcase \"excellent\":\n\t\ttipPercentage = 0.20\n\tcase \"good\":\n\t\ttipPercentage = 0.15\n\tcase \"average\":\n\t\ttipPercentage = 0.10\n\tcase \"poor\":\n\t\ttipPercentage = 0.05\n\tdefault:\n\t\ttipPercentage = 0.00\n\t}\n\n\treturn amount * tipPercentage\n}\n\nfunc main() {\n\tvar amount float64\n\tvar rating string\n\n\tfmt.Print(\"Enter the bill amount: \")\n\tfmt.Scan(&amount)\n\tfmt.Print(\"Enter the service quality rating (excellent, good, average, poor): \")\n\tfmt.Scan(&rating)\n\n\ttip := calculateTip(amount, rating)\n\tfmt.Printf(\"The tip amount is: %.2f\\n\", tip)\n}\n```"
  },
  {
    "task": "Write a function that determines if a year is a century year.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc isCenturyYear(year int) bool {\n\tif year%100 == 0 {\n\t\treturn true\n\t}\n\treturn false\n}\n\nfunc main() {\n\tfmt.Println(isCenturyYear(1900)) // true\n\tfmt.Println(isCenturyYear(2001)) // false\n}\n```"
  },
  {
    "task": "Create a program that checks if a date falls on a weekend.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\t// Example date\n\tdateToCheck := \"2023-10-15\"\n\tlayout := \"2006-01-02\"\n\tdate, err := time.Parse(layout, dateToCheck)\n\tif err != nil {\n\t\tfmt.Println(\"Error parsing date:\", err)\n\t\treturn\n\t}\n\n\tswitch date.Weekday() {\n\tcase time.Saturday, time.Sunday:\n\t\tfmt.Println(\"The date falls on a weekend.\")\n\tdefault:\n\t\tfmt.Println(\"The date does not fall on a weekend.\")\n\t}\n}\n```"
  },
  {
    "task": "Develop a routine that suggests a book based on genre preference.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc suggestBook(genre string) string {\n\tswitch genre {\n\tcase \"fiction\":\n\t\treturn \"To Kill a Mockingbird by Harper Lee\"\n\tcase \"mystery\":\n\t\treturn \"The Girl with the Dragon Tattoo by Stieg Larsson\"\n\tcase \"fantasy\":\n\t\treturn \"Harry Potter and the Sorcerer's Stone by J.K. Rowling\"\n\tcase \"science fiction\":\n\t\treturn \"Dune by Frank Herbert\"\n\tcase \"non-fiction\":\n\t\treturn \"Sapiens: A Brief History of Humankind by Yuval Noah Harari\"\n\tdefault:\n\t\treturn \"Unknown genre. Try exploring various genres to find your preference!\"\n\t}\n}\n\nfunc main() {\n\tvar genre string\n\tfmt.Println(\"Enter your preferred genre:\")\n\tfmt.Scan(&genre)\n\tbookSuggestion := suggestBook(genre)\n\tfmt.Println(\"We suggest reading:\", bookSuggestion)\n}\n```"
  },
  {
    "task": "Implement a system that determines if a student passes or fails based on their grades.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tgrades := []int{85, 90, 78, 92, 88}\n\tpassingGrade := 70\n\n\tfor i, grade := range grades {\n\t\tif grade >= passingGrade {\n\t\t\tfmt.Printf(\"Student %d: Pass\\n\", i+1)\n\t\t} else {\n\t\t\tfmt.Printf(\"Student %d: Fail\\n\", i+1)\n\t\t}\n\t}\n}\n```"
  },
  {
    "task": "Design a function to validate if a string is a valid URL.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/url\"\n)\n\nfunc isValidURL(str string) bool {\n\tparsedURL, err := url.Parse(str)\n\tif err != nil || parsedURL.Scheme == \"\" || parsedURL.Host == \"\" {\n\t\treturn false\n\t}\n\treturn true\n}\n\nfunc main() {\n\tfmt.Println(isValidURL(\"http://example.com\")) // Expected: true\n\tfmt.Println(isValidURL(\"not-a-valid-url\"))    // Expected: false\n}\n```"
  },
  {
    "task": "Write a program that checks if a point is inside a rectangle given its coordinates.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc isInsideRectangle(px, py, x1, y1, x2, y2 float64) bool {\n\tif px >= x1 && px <= x2 && py >= y1 && py <= y2 {\n\t\treturn true\n\t}\n\treturn false\n}\n\nfunc main() {\n\tpx, py := 3.0, 4.0\n\tx1, y1, x2, y2 := 1.0, 1.0, 5.0, 5.0\n\t\n\tif isInsideRectangle(px, py, x1, y1, x2, y2) {\n\t\tfmt.Println(\"The point is inside the rectangle.\")\n\t} else {\n\t\tfmt.Println(\"The point is outside the rectangle.\")\n\t}\n}\n```"
  },
  {
    "task": "Create a script to determine if a word can be constructed from a given set of letters.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc canConstruct(word string, letters string) bool {\n\tletterCount := make(map[rune]int)\n\tfor _, letter := range letters {\n\t\tletterCount[letter]++\n\t}\n\n\tfor _, char := range word {\n\t\tif letterCount[char] <= 0 {\n\t\t\treturn false\n\t\t}\n\t\tletterCount[char]--\n\t}\n\n\treturn true\n}\n\nfunc main() {\n\tword := \"hello\"\n\tletters := \"loleh\"\n\t\n\tif canConstruct(word, letters) {\n\t\tfmt.Println(\"The word can be constructed from the given letters.\")\n\t} else {\n\t\tfmt.Println(\"The word cannot be constructed from the given letters.\")\n\t}\n}\n```"
  },
  {
    "task": "Develop a routine that calculates insurance premiums based on age and driving record.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc calculatePremium(age int, hasGoodDrivingRecord bool) float64 {\n\tvar premium float64\n\n\tif age < 25 {\n\t\tif hasGoodDrivingRecord {\n\t\t\tpremium = 200.0\n\t\t} else {\n\t\t\tpremium = 400.0\n\t\t}\n\t} else {\n\t\tif hasGoodDrivingRecord {\n\t\t\tpremium = 100.0\n\t\t} else {\n\t\t\tpremium = 300.0\n\t\t}\n\t}\n\n\treturn premium\n}\n\nfunc main() {\n\tage := 30\n\thasGoodDrivingRecord := true\n\n\tpremium := calculatePremium(age, hasGoodDrivingRecord)\n\tfmt.Printf(\"The insurance premium is: $%.2f\\n\", premium)\n}\n```"
  },
  {
    "task": "Implement a program that checks for palindrome sentences.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"unicode\"\n)\n\nfunc isPalindrome(sentence string) bool {\n\tvar filtered []rune\n\tfor _, r := range sentence {\n\t\tif unicode.IsLetter(r) || unicode.IsDigit(r) {\n\t\t\tfiltered = append(filtered, unicode.ToLower(r))\n\t\t}\n\t}\n\tlength := len(filtered)\n\tfor i := 0; i < length/2; i++ {\n\t\tif filtered[i] != filtered[length-i-1] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc main() {\n\tvar input string\n\tfmt.Println(\"Enter a sentence:\")\n\tfmt.Scanln(&input)\n\tif isPalindrome(input) {\n\t\tfmt.Println(\"The sentence is a palindrome.\")\n\t} else {\n\t\tfmt.Println(\"The sentence is not a palindrome.\")\n\t}\n}\n```"
  },
  {
    "task": "Design a function to evaluate if a string contains balanced parentheses.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc isBalanced(s string) bool {\n\tbalance := 0\n\tfor _, char := range s {\n\t\tif char == '(' {\n\t\t\tbalance++\n\t\t} else if char == ')' {\n\t\t\tbalance--\n\t\t}\n\t\tif balance < 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn balance == 0\n}\n\nfunc main() {\n\tfmt.Println(isBalanced(\"(())\"))    // true\n\tfmt.Println(isBalanced(\"(()\"))     // false\n\tfmt.Println(isBalanced(\")(\"))      // false\n\tfmt.Println(isBalanced(\"()()\"))    // true\n\tfmt.Println(isBalanced(\"((()))\"))  // true\n}\n```"
  },
  {
    "task": "Write a program that suggests a pet based on living conditions and preferences.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tvar (\n\t\thasYard      bool\n\t\thasAllergies bool\n\t\tprefersQuiet bool\n\t)\n\n\tfmt.Println(\"Do you have a yard? (true/false):\")\n\tfmt.Scan(&hasYard)\n\n\tfmt.Println(\"Do you have allergies? (true/false):\")\n\tfmt.Scan(&hasAllergies)\n\n\tfmt.Println(\"Do you prefer quiet pets? (true/false):\")\n\tfmt.Scan(&prefersQuiet)\n\n\tif hasYard && !hasAllergies && !prefersQuiet {\n\t\tfmt.Println(\"We suggest you get a dog.\")\n\t} else if !hasYard && hasAllergies && prefersQuiet {\n\t\tfmt.Println(\"We suggest you get a fish.\")\n\t} else if !hasYard && !hasAllergies && prefersQuiet {\n\t\tfmt.Println(\"We suggest you get a cat.\")\n\t} else if hasYard && hasAllergies && prefersQuiet {\n\t\tfmt.Println(\"We suggest you get a turtle.\")\n\t} else {\n\t\tfmt.Println(\"We suggest you get a bird.\")\n\t}\n}\n```"
  },
  {
    "task": "Create a routine that determines if a phone number is valid based on format.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"regexp\"\n)\n\nfunc isValidPhoneNumber(phoneNumber string) bool {\n\t// Define a regex pattern for a valid phone number format\n\tphonePattern := `^\\+?[1-9]\\d{1,14}$`\n\tmatched, _ := regexp.MatchString(phonePattern, phoneNumber)\n\treturn matched\n}\n\nfunc main() {\n\tphoneNumbers := []string{\n\t\t\"+1234567890\",\n\t\t\"1234567890\",\n\t\t\"+1 234567890\",\n\t\t\"123-456-7890\",\n\t\t\"abc1234567\",\n\t}\n\n\tfor _, phoneNumber := range phoneNumbers {\n\t\tif isValidPhoneNumber(phoneNumber) {\n\t\t\tfmt.Printf(\"%s is a valid phone number.\\n\", phoneNumber)\n\t\t} else {\n\t\t\tfmt.Printf(\"%s is not a valid phone number.\\n\", phoneNumber)\n\t\t}\n\t}\n}\n```"
  },
  {
    "task": "Develop a function that checks if two rectangles overlap.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype Rectangle struct {\n    x1, y1, x2, y2 int\n}\n\nfunc doRectanglesOverlap(r1, r2 Rectangle) bool {\n    if r1.x1 >= r2.x2 || r2.x1 >= r1.x2 {\n        return false\n    }\n    if r1.y1 >= r2.y2 || r2.y1 >= r1.y2 {\n        return false\n    }\n    return true\n}\n\nfunc main() {\n    rect1 := Rectangle{0, 0, 2, 2}\n    rect2 := Rectangle{1, 1, 3, 3}\n    fmt.Println(doRectanglesOverlap(rect1, rect2)) // Expected: true\n}\n```"
  },
  {
    "task": "Implement a program that chooses a beverage based on user input time.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\tvar hour int\n\tfmt.Print(\"Enter the hour of the day (0-23): \")\n\tfmt.Scan(&hour)\n\n\tswitch {\n\tcase hour >= 5 && hour < 12:\n\t\tfmt.Println(\"Coffee\")\n\tcase hour >= 12 && hour < 18:\n\t\tfmt.Println(\"Tea\")\n\tcase hour >= 18 && hour < 22:\n\t\tfmt.Println(\"Juice\")\n\tdefault:\n\t\tfmt.Println(\"Water\")\n\t}\n}\n```"
  },
  {
    "task": "Design a script to determine if a URL is secure (HTTPS).",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc isSecureURL(url string) bool {\n\treturn strings.HasPrefix(url, \"https://\")\n}\n\nfunc main() {\n\turl := \"https://example.com\"\n\tif isSecureURL(url) {\n\t\tfmt.Println(\"The URL is secure.\")\n\t} else {\n\t\tfmt.Println(\"The URL is not secure.\")\n\t}\n}\n```"
  },
  {
    "task": "Write a function that outputs different messages based on the input number's divisibility.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc checkDivisibility(num int) {\n\tif num%15 == 0 {\n\t\tfmt.Println(\"Divisible by both 3 and 5\")\n\t} else if num%3 == 0 {\n\t\tfmt.Println(\"Divisible by 3\")\n\t} else if num%5 == 0 {\n\t\tfmt.Println(\"Divisible by 5\")\n\t} else {\n\t\tfmt.Println(\"Not divisible by 3 or 5\")\n\t}\n}\n\nfunc main() {\n\tcheckDivisibility(30)\n\tcheckDivisibility(9)\n\tcheckDivisibility(10)\n\tcheckDivisibility(7)\n}\n```"
  },
  {
    "task": "Create a program to decide if a person should bring an umbrella based on the weather forecast.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tweatherForecast := \"rainy\" // Example weather condition\n\n\tif weatherForecast == \"rainy\" || weatherForecast == \"stormy\" {\n\t\tfmt.Println(\"You should bring an umbrella.\")\n\t} else {\n\t\tfmt.Println(\"You don't need to bring an umbrella.\")\n\t}\n}\n```"
  },
  {
    "task": "Develop a routine that checks if a chess move is valid.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc isValidChessMove(start, end string, piece string) bool {\n\tif !isValidPosition(start) || !isValidPosition(end) {\n\t\treturn false\n\t}\n\n\tstartFile, startRank := start[0], start[1]\n\tendFile, endRank := end[0], end[1]\n\n\tfileDiff := int(endFile) - int(startFile)\n\trankDiff := int(endRank) - int(startRank)\n\n\tswitch strings.ToLower(piece) {\n\tcase \"pawn\":\n\t\tif (fileDiff == 0 && (rankDiff == 1 || rankDiff == -1)) || (fileDiff == 0 && rankDiff == 2 && (startRank == '2' || startRank == '7')) {\n\t\t\treturn true\n\t\t}\n\tcase \"rook\":\n\t\tif fileDiff == 0 || rankDiff == 0 {\n\t\t\treturn true\n\t\t}\n\tcase \"knight\":\n\t\tif (abs(fileDiff) == 2 && abs(rankDiff) == 1) || (abs(fileDiff) == 1 && abs(rankDiff) == 2) {\n\t\t\treturn true\n\t\t}\n\tcase \"bishop\":\n\t\tif abs(fileDiff) == abs(rankDiff) {\n\t\t\treturn true\n\t\t}\n\tcase \"queen\":\n\t\tif abs(fileDiff) == abs(rankDiff) || fileDiff == 0 || rankDiff == 0 {\n\t\t\treturn true\n\t\t}\n\tcase \"king\":\n\t\tif abs(fileDiff) <= 1 && abs(rankDiff) <= 1 {\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn false\n}\n\nfunc isValidPosition(pos string) bool {\n\tif len(pos) != 2 {\n\t\treturn false\n\t}\n\tfile, rank := pos[0], pos[1]\n\treturn file >= 'a' && file <= 'h' && rank >= '1' && rank <= '8'\n}\n\nfunc abs(n int) int {\n\tif n < 0 {\n\t\treturn -n\n\t}\n\treturn n\n}\n\nfunc main() {\n\tfmt.Println(isValidChessMove(\"e2\", \"e4\", \"pawn\"))   // true\n\tfmt.Println(isValidChessMove(\"a1\", \"a2\", \"rook\"))   // true\n\tfmt.Println(isValidChessMove(\"b1\", \"c3\", \"knight\")) // true\n\tfmt.Println(isValidChessMove(\"c1\", \"h6\", \"bishop\")) // true\n\tfmt.Println(isValidChessMove(\"d1\", \"h5\", \"queen\"))  // true\n\tfmt.Println(isValidChessMove(\"e1\", \"e2\", \"king\"))   // true\n}\n```"
  },
  {
    "task": "Implement a program that outputs the number of days in a given month.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tvar month int\n\tfmt.Println(\"Enter month (1-12):\")\n\tfmt.Scan(&month)\n\n\tswitch month {\n\tcase 1, 3, 5, 7, 8, 10, 12:\n\t\tfmt.Println(\"31 days\")\n\tcase 4, 6, 9, 11:\n\t\tfmt.Println(\"30 days\")\n\tcase 2:\n\t\tfmt.Println(\"28 or 29 days\")\n\tdefault:\n\t\tfmt.Println(\"Invalid month\")\n\t}\n}\n```"
  },
  {
    "task": "Design a function that validates if a string is a valid hexadecimal number.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc isValidHex(s string) bool {\n\tif strings.HasPrefix(s, \"0x\") || strings.HasPrefix(s, \"0X\") {\n\t\ts = s[2:]\n\t}\n\tif len(s) == 0 {\n\t\treturn false\n\t}\n\tfor _, c := range s {\n\t\tif !(c >= '0' && c <= '9') && !(c >= 'a' && c <= 'f') && !(c >= 'A' && c <= 'F') {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc main() {\n\tfmt.Println(isValidHex(\"0x1A3F\"))  // true\n\tfmt.Println(isValidHex(\"1A3G\"))    // false\n\tfmt.Println(isValidHex(\"0XFFEE\"))  // true\n\tfmt.Println(isValidHex(\"123\"))     // true\n\tfmt.Println(isValidHex(\"0x\"))      // false\n}\n```"
  },
  {
    "task": "Write a script that checks if a word is present in a list of predefined words.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\twords := []string{\"apple\", \"banana\", \"cherry\", \"date\"}\n\twordToCheck := \"banana\"\n\n\tfound := false\n\tfor _, word := range words {\n\t\tif word == wordToCheck {\n\t\t\tfound = true\n\t\t\tbreak\n\t\t}\n\t}\n\n\tif found {\n\t\tfmt.Println(\"Word found in the list.\")\n\t} else {\n\t\tfmt.Println(\"Word not found in the list.\")\n\t}\n}\n```"
  },
  {
    "task": "Create a routine to decide the correct tax bracket for a given income.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc taxBracket(income float64) string {\n\tswitch {\n\tcase income <= 9875:\n\t\treturn \"10%\"\n\tcase income <= 40125:\n\t\treturn \"12%\"\n\tcase income <= 85525:\n\t\treturn \"22%\"\n\tcase income <= 163300:\n\t\treturn \"24%\"\n\tcase income <= 207350:\n\t\treturn \"32%\"\n\tcase income <= 518400:\n\t\treturn \"35%\"\n\tdefault:\n\t\treturn \"37%\"\n\t}\n}\n\nfunc main() {\n\tincome := 50000.0\n\tbracket := taxBracket(income)\n\tfmt.Printf(\"The tax bracket for an income of $%.2f is %s\\n\", income, bracket)\n}\n```"
  },
  {
    "task": "Develop a function that determines if a point is within a triangle.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype Point struct {\n\tx, y float64\n}\n\nfunc sign(p1, p2, p3 Point) float64 {\n\treturn (p1.x-p3.x)*(p2.y-p3.y) - (p2.x-p3.x)*(p1.y-p3.y)\n}\n\nfunc isPointInTriangle(pt, v1, v2, v3 Point) bool {\n\td1 := sign(pt, v1, v2)\n\td2 := sign(pt, v2, v3)\n\td3 := sign(pt, v3, v1)\n\n\thasNeg := (d1 < 0) || (d2 < 0) || (d3 < 0)\n\thasPos := (d1 > 0) || (d2 > 0) || (d3 > 0)\n\n\treturn !(hasNeg && hasPos)\n}\n\nfunc main() {\n\tpoint := Point{0, 0}\n\tv1 := Point{0, 0}\n\tv2 := Point{5, 0}\n\tv3 := Point{0, 5}\n\tfmt.Println(isPointInTriangle(point, v1, v2, v3))\n}\n```"
  },
  {
    "task": "Implement a program that checks if a given string is a valid binary number.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc isValidBinary(s string) bool {\n\tfor _, char := range s {\n\t\tif char != '0' && char != '1' {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc main() {\n\tvar input string\n\tfmt.Println(\"Enter a string to check if it's a valid binary number:\")\n\tfmt.Scanln(&input)\n\n\tif isValidBinary(input) {\n\t\tfmt.Println(\"The string is a valid binary number.\")\n\t} else {\n\t\tfmt.Println(\"The string is not a valid binary number.\")\n\t}\n}\n```"
  },
  {
    "task": "Design a system to evaluate the risk level of an investment based on criteria.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc evaluateRiskLevel(investmentAmount float64, investmentDuration int, marketVolatility float64) string {\n\tif investmentAmount >= 1000000 {\n\t\tif marketVolatility > 0.7 {\n\t\t\treturn \"High Risk\"\n\t\t} else if marketVolatility > 0.4 {\n\t\t\treturn \"Medium Risk\"\n\t\t} else {\n\t\t\treturn \"Low Risk\"\n\t\t}\n\t} else if investmentAmount >= 500000 {\n\t\tif investmentDuration < 5 {\n\t\t\treturn \"High Risk\"\n\t\t} else {\n\t\t\treturn \"Medium Risk\"\n\t\t}\n\t} else {\n\t\tif marketVolatility > 0.5 {\n\t\t\treturn \"High Risk\"\n\t\t} else {\n\t\t\treturn \"Low Risk\"\n\t\t}\n\t}\n}\n\nfunc main() {\n\tinvestmentAmount := 750000.0\n\tinvestmentDuration := 4\n\tmarketVolatility := 0.6\n\n\triskLevel := evaluateRiskLevel(investmentAmount, investmentDuration, marketVolatility)\n\tfmt.Printf(\"The risk level of the investment is: %s\\n\", riskLevel)\n}\n```"
  },
  {
    "task": "Write a program that suggests a vacation destination based on budget and preferences.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tvar budget int\n\tvar preference string\n\n\tfmt.Println(\"Enter your budget:\")\n\tfmt.Scan(&budget)\n\tfmt.Println(\"Enter your preference (beach, mountains, city):\")\n\tfmt.Scan(&preference)\n\n\tif budget < 500 {\n\t\tswitch preference {\n\t\tcase \"beach\":\n\t\t\tfmt.Println(\"Suggested destination: Local Beach\")\n\t\tcase \"mountains\":\n\t\t\tfmt.Println(\"Suggested destination: Nearby Mountains\")\n\t\tcase \"city\":\n\t\t\tfmt.Println(\"Suggested destination: Local City Tour\")\n\t\tdefault:\n\t\t\tfmt.Println(\"Suggested destination: Staycation\")\n\t\t}\n\t} else if budget < 1500 {\n\t\tswitch preference {\n\t\tcase \"beach\":\n\t\t\tfmt.Println(\"Suggested destination: Florida\")\n\t\tcase \"mountains\":\n\t\t\tfmt.Println(\"Suggested destination: Colorado\")\n\t\tcase \"city\":\n\t\t\tfmt.Println(\"Suggested destination: New York City\")\n\t\tdefault:\n\t\t\tfmt.Println(\"Suggested destination: Road Trip\")\n\t\t}\n\t} else {\n\t\tswitch preference {\n\t\tcase \"beach\":\n\t\t\tfmt.Println(\"Suggested destination: Maldives\")\n\t\tcase \"mountains\":\n\t\t\tfmt.Println(\"Suggested destination: Swiss Alps\")\n\t\tcase \"city\":\n\t\t\tfmt.Println(\"Suggested destination: Paris\")\n\t\tdefault:\n\t\t\tfmt.Println(\"Suggested destination: World Tour\")\n\t\t}\n\t}\n}\n```"
  },
  {
    "task": "Create a routine that checks if a username is already taken in a database.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc isUsernameTaken(username string, database []string) bool {\n\tfor _, existingUsername := range database {\n\t\tif existingUsername == username {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\nfunc main() {\n\tdatabase := []string{\"alice\", \"bob\", \"charlie\"}\n\tusername := \"bob\"\n\tif isUsernameTaken(username, database) {\n\t\tfmt.Println(\"Username is already taken.\")\n\t} else {\n\t\tfmt.Println(\"Username is available.\")\n\t}\n}\n```"
  },
  {
    "task": "Develop a function that determines if a string is a valid IPv4 address.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n\t\"strings\"\n)\n\nfunc isValidIPv4(ip string) bool {\n\tparts := strings.Split(ip, \".\")\n\tif len(parts) != 4 {\n\t\treturn false\n\t}\n\n\tfor _, part := range parts {\n\t\tif len(part) == 0 || len(part) > 3 {\n\t\t\treturn false\n\t\t}\n\n\t\tif part[0] == '0' && len(part) > 1 {\n\t\t\treturn false\n\t\t}\n\n\t\tnum, err := strconv.Atoi(part)\n\t\tif err != nil || num < 0 || num > 255 {\n\t\t\treturn false\n\t\t}\n\t}\n\n\treturn true\n}\n\nfunc main() {\n\tfmt.Println(isValidIPv4(\"192.168.1.1\")) // true\n\tfmt.Println(isValidIPv4(\"0.0.0.0\"))     // true\n\tfmt.Println(isValidIPv4(\"255.255.255.255\")) // true\n\tfmt.Println(isValidIPv4(\"256.256.256.256\")) // false\n\tfmt.Println(isValidIPv4(\"192.168.1\"))   // false\n\tfmt.Println(isValidIPv4(\"192.168.01.1\")) // false\n}\n```"
  },
  {
    "task": "Implement a program to decide which transportation method is quickest based on distance.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tvar distance float64\n\tfmt.Print(\"Enter the distance in kilometers: \")\n\tfmt.Scan(&distance)\n\n\tif distance < 1 {\n\t\tfmt.Println(\"Walking is the quickest method for short distances.\")\n\t} else if distance >= 1 && distance < 5 {\n\t\tfmt.Println(\"Bicycling is the quickest method for short distances.\")\n\t} else if distance >= 5 && distance < 20 {\n\t\tfmt.Println(\"Driving is the quickest method for medium distances.\")\n\t} else {\n\t\tfmt.Println(\"Taking a train is the quickest method for long distances.\")\n\t}\n}\n```"
  },
  {
    "task": "Design a script to validate if a number is a prime number.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc isPrime(n int) bool {\n\tif n <= 1 {\n\t\treturn false\n\t}\n\tfor i := 2; i*i <= n; i++ {\n\t\tif n%i == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc main() {\n\tvar number int\n\tfmt.Print(\"Enter a number: \")\n\tfmt.Scan(&number)\n\n\tif isPrime(number) {\n\t\tfmt.Println(number, \"is a prime number.\")\n\t} else {\n\t\tfmt.Println(number, \"is not a prime number.\")\n\t}\n}\n```"
  },
  {
    "task": "Write a function that checks if a number is divisible by another number without remainder.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc isDivisibleWithoutRemainder(dividend, divisor int) bool {\n\tif divisor == 0 {\n\t\treturn false\n\t}\n\treturn dividend%divisor == 0\n}\n\nfunc main() {\n\tfmt.Println(isDivisibleWithoutRemainder(10, 5))  // true\n\tfmt.Println(isDivisibleWithoutRemainder(10, 3))  // false\n\tfmt.Println(isDivisibleWithoutRemainder(10, 0))  // false\n}\n```"
  },
  {
    "task": "Create a program that determines the type of a quadrilateral based on side lengths.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tvar a, b, c, d int\n\tfmt.Println(\"Enter four side lengths of a quadrilateral:\")\n\tfmt.Scan(&a, &b, &c, &d)\n\n\tif a == b && b == c && c == d {\n\t\tfmt.Println(\"The quadrilateral is a Square.\")\n\t} else if a == c && b == d {\n\t\tfmt.Println(\"The quadrilateral is a Rectangle.\")\n\t} else if a == b && c == d || a == d && b == c || a == c && b == d {\n\t\tfmt.Println(\"The quadrilateral is a Rhombus.\")\n\t} else {\n\t\tfmt.Println(\"The quadrilateral is an Irregular Quadrilateral.\")\n\t}\n}\n```"
  },
  {
    "task": "Develop a routine to check if a sentence contains all letters of the alphabet.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc containsAllLetters(sentence string) bool {\n\talphabet := \"abcdefghijklmnopqrstuvwxyz\"\n\tsentence = strings.ToLower(sentence)\n\n\tfor _, letter := range alphabet {\n\t\tif !strings.ContainsRune(sentence, letter) {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc main() {\n\tsentence := \"The quick brown fox jumps over the lazy dog\"\n\tfmt.Println(containsAllLetters(sentence)) // Output: true\n}\n```"
  },
  {
    "task": "Implement a program that outputs the appropriate error message based on an error code.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\terrorCode := 2\n\n\tswitch errorCode {\n\tcase 1:\n\t\tfmt.Println(\"Error 1: Network error\")\n\tcase 2:\n\t\tfmt.Println(\"Error 2: File not found\")\n\tcase 3:\n\t\tfmt.Println(\"Error 3: Access denied\")\n\tdefault:\n\t\tfmt.Println(\"Unknown error\")\n\t}\n}\n```"
  },
  {
    "task": "Design a function that categorizes a movie rating as G, PG, PG-13, or R.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc categorizeRating(rating int) string {\n\tif rating < 0 || rating > 100 {\n\t\treturn \"Invalid rating\"\n\t}\n\n\tswitch {\n\tcase rating <= 12:\n\t\treturn \"G\"\n\tcase rating <= 16:\n\t\treturn \"PG\"\n\tcase rating <= 18:\n\t\treturn \"PG-13\"\n\tdefault:\n\t\treturn \"R\"\n\t}\n}\n\nfunc main() {\n\tfmt.Println(categorizeRating(10))  // G\n\tfmt.Println(categorizeRating(13))  // PG\n\tfmt.Println(categorizeRating(17))  // PG-13\n\tfmt.Println(categorizeRating(19))  // R\n\tfmt.Println(categorizeRating(-1))  // Invalid rating\n\tfmt.Println(categorizeRating(101)) // Invalid rating\n}\n```"
  },
  {
    "task": "Write a script to check if a string is a valid Roman numeral.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"regexp\"\n)\n\nfunc isValidRomanNumeral(s string) bool {\n\tromanNumeralPattern := `^(?i:M{0,3}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3}))$`\n\tmatched, _ := regexp.MatchString(romanNumeralPattern, s)\n\treturn matched\n}\n\nfunc main() {\n\ttestCases := []string{\"XII\", \"IV\", \"MMXXI\", \"IIII\", \"ABC\", \"\"}\n\tfor _, testCase := range testCases {\n\t\tif isValidRomanNumeral(testCase) {\n\t\t\tfmt.Printf(\"%s is a valid Roman numeral.\\n\", testCase)\n\t\t} else {\n\t\t\tfmt.Printf(\"%s is not a valid Roman numeral.\\n\", testCase)\n\t\t}\n\t}\n}\n```"
  },
  {
    "task": "Create a routine that decides if a person can retire based on age and years worked.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc canRetire(age, yearsWorked int) bool {\n\tif age >= 65 || yearsWorked >= 30 {\n\t\treturn true\n\t}\n\treturn false\n}\n\nfunc main() {\n\tage := 64\n\tyearsWorked := 29\n\n\tif canRetire(age, yearsWorked) {\n\t\tfmt.Println(\"The person can retire.\")\n\t} else {\n\t\tfmt.Println(\"The person cannot retire.\")\n\t}\n}\n```"
  },
  {
    "task": "Develop a function that outputs a different emoji based on user mood input.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc moodEmoji(mood string) string {\n\tswitch mood {\n\tcase \"happy\":\n\t\treturn \"\ud83d\ude0a\"\n\tcase \"sad\":\n\t\treturn \"\ud83d\ude22\"\n\tcase \"angry\":\n\t\treturn \"\ud83d\ude20\"\n\tcase \"excited\":\n\t\treturn \"\ud83d\ude03\"\n\tcase \"bored\":\n\t\treturn \"\ud83d\ude10\"\n\tdefault:\n\t\treturn \"\ud83e\udd14\"\n\t}\n}\n\nfunc main() {\n\tfmt.Println(moodEmoji(\"happy\"))   // \ud83d\ude0a\n\tfmt.Println(moodEmoji(\"sad\"))     // \ud83d\ude22\n\tfmt.Println(moodEmoji(\"angry\"))   // \ud83d\ude20\n\tfmt.Println(moodEmoji(\"excited\")) // \ud83d\ude03\n\tfmt.Println(moodEmoji(\"bored\"))   // \ud83d\ude10\n\tfmt.Println(moodEmoji(\"confused\")) // \ud83e\udd14\n}\n```"
  },
  {
    "task": "Implement a program that checks if a password meets security requirements.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"unicode\"\n)\n\nfunc isPasswordSecure(password string) bool {\n\tvar hasMinLen, hasUpper, hasLower, hasDigit, hasSpecial bool\n\n\tif len(password) >= 8 {\n\t\thasMinLen = true\n\t}\n\n\tfor _, char := range password {\n\t\tswitch {\n\t\tcase unicode.IsUpper(char):\n\t\t\thasUpper = true\n\t\tcase unicode.IsLower(char):\n\t\t\thasLower = true\n\t\tcase unicode.IsDigit(char):\n\t\t\thasDigit = true\n\t\tcase unicode.IsPunct(char) || unicode.IsSymbol(char):\n\t\t\thasSpecial = true\n\t\t}\n\t}\n\n\treturn hasMinLen && hasUpper && hasLower && hasDigit && hasSpecial\n}\n\nfunc main() {\n\tpassword := \"P@ssw0rd\"\n\tif isPasswordSecure(password) {\n\t\tfmt.Println(\"Password is secure.\")\n\t} else {\n\t\tfmt.Println(\"Password is not secure.\")\n\t}\n}\n```"
  },
  {
    "task": "Design a script to determine if a number is a palindrome when reversed.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n)\n\nfunc isPalindrome(num int) bool {\n\toriginal := strconv.Itoa(num)\n\treversed := reverseString(original)\n\treturn original == reversed\n}\n\nfunc reverseString(s string) string {\n\trunes := []rune(s)\n\tfor i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n\t\trunes[i], runes[j] = runes[j], runes[i]\n\t}\n\treturn string(runes)\n}\n\nfunc main() {\n\tvar num int\n\tfmt.Print(\"Enter a number: \")\n\tfmt.Scan(&num)\n\n\tif isPalindrome(num) {\n\t\tfmt.Println(\"The number is a palindrome.\")\n\t} else {\n\t\tfmt.Println(\"The number is not a palindrome.\")\n\t}\n}\n```"
  },
  {
    "task": "Write a function that evaluates if a given day is a holiday.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc isHoliday(day string) bool {\n\tswitch day {\n\tcase \"New Year's Day\", \"Christmas Day\", \"Independence Day\", \"Thanksgiving\":\n\t\treturn true\n\tdefault:\n\t\treturn false\n\t}\n}\n\nfunc main() {\n\tfmt.Println(isHoliday(\"Christmas Day\")) // true\n\tfmt.Println(isHoliday(\"Monday\"))        // false\n}\n```"
  },
  {
    "task": "Create a program to decide if a library book is overdue based on the due date.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\t// Sample due date\n\tdueDate := time.Date(2023, time.October, 15, 0, 0, 0, 0, time.UTC)\n\n\t// Current date\n\tcurrentDate := time.Now()\n\n\t// Conditional branching to check if the book is overdue\n\tif currentDate.After(dueDate) {\n\t\tfmt.Println(\"The library book is overdue.\")\n\t} else {\n\t\tfmt.Println(\"The library book is not overdue.\")\n\t}\n}\n```"
  },
  {
    "task": "Develop a routine that checks if a given year is part of a leap century.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc isLeapCentury(year int) bool {\n\tif year%400 == 0 {\n\t\treturn true\n\t}\n\treturn false\n}\n\nfunc main() {\n\tyears := []int{1600, 1700, 1800, 2000, 2100, 2200, 2400}\n\tfor _, year := range years {\n\t\tif isLeapCentury(year) {\n\t\t\tfmt.Printf(\"%d is a leap century.\\n\", year)\n\t\t} else {\n\t\t\tfmt.Printf(\"%d is not a leap century.\\n\", year)\n\t\t}\n\t}\n}\n```"
  },
  {
    "task": "Implement a system to determine the correct category for a product based on user input.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc main() {\n\tvar product string\n\tfmt.Println(\"Enter the product name:\")\n\tfmt.Scanln(&product)\n\n\tcategory := determineCategory(product)\n\tfmt.Printf(\"The category for the product '%s' is: %s\\n\", product, category)\n}\n\nfunc determineCategory(product string) string {\n\tswitch strings.ToLower(product) {\n\tcase \"apple\", \"banana\", \"orange\":\n\t\treturn \"Fruit\"\n\tcase \"carrot\", \"broccoli\", \"spinach\":\n\t\treturn \"Vegetable\"\n\tcase \"chicken\", \"beef\", \"pork\":\n\t\treturn \"Meat\"\n\tdefault:\n\t\treturn \"Miscellaneous\"\n\t}\n}\n```"
  }
]