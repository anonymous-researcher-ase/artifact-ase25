[
  {
    "task": "Write a function that checks if two strings are equal, ignoring case sensitivity.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc areStringsEqualIgnoreCase(s1, s2 string) bool {\n\treturn strings.EqualFold(s1, s2)\n}\n\nfunc main() {\n\tfmt.Println(areStringsEqualIgnoreCase(\"Hello\", \"hello\")) // true\n\tfmt.Println(areStringsEqualIgnoreCase(\"Hello\", \"world\")) // false\n}\n```"
  },
  {
    "task": "Create a program that determines if a number is greater than 10.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    number := 15\n\n    if number > 10 {\n        fmt.Println(\"The number is greater than 10.\")\n    } else {\n        fmt.Println(\"The number is not greater than 10.\")\n    }\n}\n```"
  },
  {
    "task": "Implement a feature that compares the current date to a given date and returns if it is in the future.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc isFutureDate(givenDate time.Time) bool {\n\tcurrentDate := time.Now()\n\treturn currentDate.Before(givenDate)\n}\n\nfunc main() {\n\tgivenDate := time.Date(2024, 1, 1, 0, 0, 0, 0, time.UTC)\n\tfmt.Println(isFutureDate(givenDate))\n}\n```"
  },
  {
    "task": "Design a system that checks if a user's age is less than 18 and restricts access if true.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc checkAccess(age int) string {\n\tif age < 18 {\n\t\treturn \"Access Restricted\"\n\t}\n\treturn \"Access Granted\"\n}\n\nfunc main() {\n\tuserAge := 17\n\tfmt.Println(checkAccess(userAge))\n}\n```"
  },
  {
    "task": "Build an algorithm that finds the maximum of three given integers.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc maxOfThree(a, b, c int) int {\n\tmax := a\n\tif b > max {\n\t\tmax = b\n\t}\n\tif c > max {\n\t\tmax = c\n\t}\n\treturn max\n}\n\nfunc main() {\n\tfmt.Println(maxOfThree(3, 7, 5)) // Example usage\n}\n```"
  },
  {
    "task": "Write a function that verifies if two arrays contain the same elements in the same order.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc arraysAreEqual(arr1, arr2 []int) bool {\n\tif len(arr1) != len(arr2) {\n\t\treturn false\n\t}\n\tfor i := range arr1 {\n\t\tif arr1[i] != arr2[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc main() {\n\tarr1 := []int{1, 2, 3, 4}\n\tarr2 := []int{1, 2, 3, 4}\n\tarr3 := []int{4, 3, 2, 1}\n\n\tfmt.Println(arraysAreEqual(arr1, arr2)) // true\n\tfmt.Println(arraysAreEqual(arr1, arr3)) // false\n}\n```"
  },
  {
    "task": "Create a script that checks if a product's price is within a specified range.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc isPriceInRange(price, min, max float64) bool {\n    return price >= min && price <= max\n}\n\nfunc main() {\n    price := 150.0\n    minPrice := 100.0\n    maxPrice := 200.0\n\n    if isPriceInRange(price, minPrice, maxPrice) {\n        fmt.Println(\"The price is within the range.\")\n    } else {\n        fmt.Println(\"The price is outside the range.\")\n    }\n}\n```"
  },
  {
    "task": "Develop a tool that compares two versions of a software application and determines which is newer.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc compareVersions(version1, version2 string) int {\n\tv1Parts := strings.Split(version1, \".\")\n\tv2Parts := strings.Split(version2, \".\")\n\t\n\tmaxLen := len(v1Parts)\n\tif len(v2Parts) > maxLen {\n\t\tmaxLen = len(v2Parts)\n\t}\n\t\n\tfor i := 0; i < maxLen; i++ {\n\t\tv1Part, v2Part := 0, 0\n\t\tif i < len(v1Parts) {\n\t\t\tfmt.Sscanf(v1Parts[i], \"%d\", &v1Part)\n\t\t}\n\t\tif i < len(v2Parts) {\n\t\t\tfmt.Sscanf(v2Parts[i], \"%d\", &v2Part)\n\t\t}\n\t\tif v1Part > v2Part {\n\t\t\treturn 1\n\t\t} else if v1Part < v2Part {\n\t\t\treturn -1\n\t\t}\n\t}\n\treturn 0\n}\n\nfunc main() {\n\tversion1 := \"1.2.3\"\n\tversion2 := \"1.2.10\"\n\tresult := compareVersions(version1, version2)\n\t\n\tif result == 1 {\n\t\tfmt.Printf(\"Version %s is newer than version %s\\n\", version1, version2)\n\t} else if result == -1 {\n\t\tfmt.Printf(\"Version %s is newer than version %s\\n\", version2, version1)\n\t} else {\n\t\tfmt.Printf(\"Version %s is the same as version %s\\n\", version1, version2)\n\t}\n}\n```"
  },
  {
    "task": "Implement a test to see if a given year is a leap year.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc isLeapYear(year int) bool {\n\tif year%4 == 0 {\n\t\tif year%100 == 0 {\n\t\t\tif year%400 == 0 {\n\t\t\t\treturn true\n\t\t\t}\n\t\t\treturn false\n\t\t}\n\t\treturn true\n\t}\n\treturn false\n}\n\nfunc main() {\n\tyear := 2020\n\tif isLeapYear(year) {\n\t\tfmt.Println(year, \"is a leap year.\")\n\t} else {\n\t\tfmt.Println(year, \"is not a leap year.\")\n\t}\n}\n```"
  },
  {
    "task": "Design a feature that tells if a student\u2019s grade is passing or failing based on a threshold.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc isPassing(grade, threshold int) bool {\n\treturn grade >= threshold\n}\n\nfunc main() {\n\tgrade := 75\n\tthreshold := 60\n\tif isPassing(grade, threshold) {\n\t\tfmt.Println(\"Passing\")\n\t} else {\n\t\tfmt.Println(\"Failing\")\n\t}\n}\n```"
  },
  {
    "task": "Write a function to compare two file sizes and return the larger one.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc largerFileSize(file1, file2 string) (string, error) {\n\tinfo1, err1 := os.Stat(file1)\n\tif err1 != nil {\n\t\treturn \"\", err1\n\t}\n\n\tinfo2, err2 := os.Stat(file2)\n\tif err2 != nil {\n\t\treturn \"\", err2\n\t}\n\n\tif info1.Size() > info2.Size() {\n\t\treturn file1, nil\n\t}\n\treturn file2, nil\n}\n\nfunc main() {\n\tlargerFile, err := largerFileSize(\"file1.txt\", \"file2.txt\")\n\tif err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t} else {\n\t\tfmt.Println(\"Larger file:\", largerFile)\n\t}\n}\n```"
  },
  {
    "task": "Build a program that checks if the temperature is below freezing point.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\ttemperature := -5 // Example temperature value in Celsius\n\n\tif temperature < 0 {\n\t\tfmt.Println(\"The temperature is below freezing point.\")\n\t} else {\n\t\tfmt.Println(\"The temperature is above freezing point.\")\n\t}\n}\n```"
  },
  {
    "task": "Create a logic that determines if a number is within the Fibonacci sequence.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc isFibonacci(n int) bool {\n\tif n < 0 {\n\t\treturn false\n\t}\n\ta, b := 0, 1\n\tfor a < n {\n\t\ta, b = b, a+b\n\t}\n\treturn a == n\n}\n\nfunc main() {\n\tnumbers := []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 21, 22}\n\tfor _, num := range numbers {\n\t\tif isFibonacci(num) {\n\t\t\tfmt.Printf(\"%d is in the Fibonacci sequence.\\n\", num)\n\t\t} else {\n\t\t\tfmt.Printf(\"%d is not in the Fibonacci sequence.\\n\", num)\n\t\t}\n\t}\n}\n```"
  },
  {
    "task": "Develop a function that checks if a given word is a palindrome.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc isPalindrome(word string) bool {\n\tword = strings.ToLower(word)\n\tfor i, j := 0, len(word)-1; i < j; i, j = i+1, j-1 {\n\t\tif word[i] != word[j] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc main() {\n\tfmt.Println(isPalindrome(\"racecar\")) // true\n\tfmt.Println(isPalindrome(\"hello\"))   // false\n}\n```"
  },
  {
    "task": "Write a script to see if a password meets a minimum length requirement.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tpassword := \"examplePassword\"\n\tminLength := 8\n\n\tif len(password) >= minLength {\n\t\tfmt.Println(\"Password meets the minimum length requirement.\")\n\t} else {\n\t\tfmt.Println(\"Password does not meet the minimum length requirement.\")\n\t}\n}\n```"
  },
  {
    "task": "Implement a system that decides if a point is inside a circle based on its coordinates.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\ntype Point struct {\n\tx, y float64\n}\n\ntype Circle struct {\n\tcenter Point\n\tradius float64\n}\n\nfunc isPointInsideCircle(p Point, c Circle) bool {\n\tdistanceSquared := math.Pow(p.x-c.center.x, 2) + math.Pow(p.y-c.center.y, 2)\n\tradiusSquared := math.Pow(c.radius, 2)\n\treturn distanceSquared <= radiusSquared\n}\n\nfunc main() {\n\tp := Point{3, 4}\n\tc := Circle{Point{0, 0}, 5}\n\n\tif isPointInsideCircle(p, c) {\n\t\tfmt.Println(\"The point is inside the circle.\")\n\t} else {\n\t\tfmt.Println(\"The point is outside the circle.\")\n\t}\n}\n```"
  },
  {
    "task": "Design a program that checks if a shopping cart total exceeds a certain budget.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tbudget := 100.0\n\tshoppingCartTotal := 150.0\n\t\n\tif shoppingCartTotal > budget {\n\t\tfmt.Println(\"The shopping cart total exceeds the budget.\")\n\t} else {\n\t\tfmt.Println(\"The shopping cart total is within the budget.\")\n\t}\n}\n```"
  },
  {
    "task": "Create a function that compares two players' scores and returns the winner.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc compareScores(score1, score2 int) string {\n\tif score1 > score2 {\n\t\treturn \"Player 1 wins\"\n\t} else if score2 > score1 {\n\t\treturn \"Player 2 wins\"\n\t} else {\n\t\treturn \"It's a tie\"\n\t}\n}\n\nfunc main() {\n\tfmt.Println(compareScores(10, 20)) // Example usage\n}\n```"
  },
  {
    "task": "Write a program to determine if one string is a substring of another.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc isSubstring(s1, s2 string) bool {\n\treturn strings.Contains(s1, s2)\n}\n\nfunc main() {\n\tstr1 := \"Hello, World!\"\n\tstr2 := \"World\"\n\tstr3 := \"world\"\n\n\tfmt.Println(isSubstring(str1, str2)) // true\n\tfmt.Println(isSubstring(str1, str3)) // false\n}\n```"
  },
  {
    "task": "Build a utility that checks if a number is a prime number.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc isPrime(n int) bool {\n\tif n <= 1 {\n\t\treturn false\n\t}\n\tif n <= 3 {\n\t\treturn true\n\t}\n\tif n%2 == 0 || n%3 == 0 {\n\t\treturn false\n\t}\n\tfor i := 5; i*i <= n; i += 6 {\n\t\tif n%i == 0 || n%(i+2) == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc main() {\n\tnumber := 29\n\tif isPrime(number) {\n\t\tfmt.Printf(\"%d is a prime number.\\n\", number)\n\t} else {\n\t\tfmt.Printf(\"%d is not a prime number.\\n\", number)\n\t}\n}\n```"
  },
  {
    "task": "Write a function that checks if a given number is a perfect square.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc isPerfectSquare(num int) bool {\n\tif num < 0 {\n\t\treturn false\n\t}\n\tsqrt := int(math.Sqrt(float64(num)))\n\treturn sqrt*sqrt == num\n}\n\nfunc main() {\n\tfmt.Println(isPerfectSquare(16)) // true\n\tfmt.Println(isPerfectSquare(14)) // false\n}\n```"
  },
  {
    "task": "Create a system that determines if a person is eligible for a senior citizen discount based on their age.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc isEligibleForSeniorDiscount(age int) bool {\n\treturn age >= 65\n}\n\nfunc main() {\n\tage := 70\n\tif isEligibleForSeniorDiscount(age) {\n\t\tfmt.Println(\"Eligible for senior citizen discount.\")\n\t} else {\n\t\tfmt.Println(\"Not eligible for senior citizen discount.\")\n\t}\n}\n```"
  },
  {
    "task": "Develop a feature to check if a date falls on a weekend.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc isWeekend(date time.Time) bool {\n\tweekday := date.Weekday()\n\treturn weekday == time.Saturday || weekday == time.Sunday\n}\n\nfunc main() {\n\tdate := time.Date(2023, 10, 15, 0, 0, 0, 0, time.UTC)\n\tif isWeekend(date) {\n\t\tfmt.Println(\"The date falls on a weekend.\")\n\t} else {\n\t\tfmt.Println(\"The date does not fall on a weekend.\")\n\t}\n}\n```"
  },
  {
    "task": "Design a program that sees if a given email address is in the correct format.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"regexp\"\n)\n\nfunc isValidEmail(email string) bool {\n\t// Simple regex for validating an email address\n\tre := regexp.MustCompile(`^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$`)\n\treturn re.MatchString(email)\n}\n\nfunc main() {\n\temail := \"example@example.com\"\n\tif isValidEmail(email) {\n\t\tfmt.Println(\"Valid email format\")\n\t} else {\n\t\tfmt.Println(\"Invalid email format\")\n\t}\n}\n```"
  },
  {
    "task": "Implement a test to check if a rectangle's area is larger than a triangle's area.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    // Rectangle dimensions\n    rectWidth := 10.0\n    rectHeight := 5.0\n\n    // Triangle dimensions\n    triBase := 8.0\n    triHeight := 5.0\n\n    // Calculate areas\n    rectArea := rectWidth * rectHeight\n    triArea := 0.5 * triBase * triHeight\n\n    // Comparison\n    if rectArea > triArea {\n        fmt.Println(\"The rectangle's area is larger than the triangle's area.\")\n    } else {\n        fmt.Println(\"The rectangle's area is not larger than the triangle's area.\")\n    }\n}\n```"
  },
  {
    "task": "Write a function that verifies if two rectangles overlap each other.",
    "code": "```go\npackage main\n\ntype Rectangle struct {\n\tx1, y1, x2, y2 int\n}\n\nfunc doRectanglesOverlap(r1, r2 Rectangle) bool {\n\treturn !(r2.x1 >= r1.x2 || r2.x2 <= r1.x1 || r2.y1 >= r1.y2 || r2.y2 <= r1.y1)\n}\n\nfunc main() {\n\tr1 := Rectangle{0, 0, 2, 2}\n\tr2 := Rectangle{1, 1, 3, 3}\n\toverlap := doRectanglesOverlap(r1, r2)\n\tprintln(overlap)\n}\n```"
  },
  {
    "task": "Create a script to compare two strings lexicographically.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tstr1 := \"apple\"\n\tstr2 := \"banana\"\n\n\tif str1 < str2 {\n\t\tfmt.Println(str1, \"is less than\", str2)\n\t} else if str1 > str2 {\n\t\tfmt.Println(str1, \"is greater than\", str2)\n\t} else {\n\t\tfmt.Println(str1, \"is equal to\", str2)\n\t}\n}\n```"
  },
  {
    "task": "Build a program that checks if a list of numbers is in ascending order.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc isAscending(numbers []int) bool {\n\tfor i := 0; i < len(numbers)-1; i++ {\n\t\tif numbers[i] > numbers[i+1] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc main() {\n\tnumbers := []int{1, 2, 3, 4, 5}\n\tfmt.Println(\"Is ascending:\", isAscending(numbers))\n}\n```"
  },
  {
    "task": "Design a system to compare the heights of two buildings.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc compareHeights(building1Height, building2Height float64) string {\n\tif building1Height > building2Height {\n\t\treturn \"Building 1 is taller than Building 2.\"\n\t} else if building1Height < building2Height {\n\t\treturn \"Building 2 is taller than Building 1.\"\n\t} else {\n\t\treturn \"Both buildings have the same height.\"\n\t}\n}\n\nfunc main() {\n\tbuilding1Height := 150.5\n\tbuilding2Height := 200.0\n\n\tresult := compareHeights(building1Height, building2Height)\n\tfmt.Println(result)\n}\n```"
  },
  {
    "task": "Write a feature that determines if a given time is before noon.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc isBeforeNoon(t time.Time) bool {\n\tnoon := time.Date(t.Year(), t.Month(), t.Day(), 12, 0, 0, 0, t.Location())\n\treturn t.Before(noon)\n}\n\nfunc main() {\n\tnow := time.Now()\n\tfmt.Println(\"Is the current time before noon?\", isBeforeNoon(now))\n}\n```"
  },
  {
    "task": "Implement a function to check if a given number is a power of two.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc isPowerOfTwo(n int) bool {\n\treturn n > 0 && (n&(n-1)) == 0\n}\n\nfunc main() {\n\tfmt.Println(isPowerOfTwo(1))  // true\n\tfmt.Println(isPowerOfTwo(2))  // true\n\tfmt.Println(isPowerOfTwo(3))  // false\n\tfmt.Println(isPowerOfTwo(4))  // true\n\tfmt.Println(isPowerOfTwo(5))  // false\n}\n```"
  },
  {
    "task": "Create a program that determines if a word is longer than another word.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tword1 := \"example\"\n\tword2 := \"test\"\n\t\n\tif len(word1) > len(word2) {\n\t\tfmt.Println(\"The first word is longer than the second word.\")\n\t} else if len(word1) < len(word2) {\n\t\tfmt.Println(\"The second word is longer than the first word.\")\n\t} else {\n\t\tfmt.Println(\"Both words are of the same length.\")\n\t}\n}\n```"
  },
  {
    "task": "Develop a function to compare the lengths of two lists and return the longer one.",
    "code": "```go\npackage main\n\nfunc longerList(list1, list2 []int) []int {\n\tif len(list1) > len(list2) {\n\t\treturn list1\n\t}\n\treturn list2\n}\n\nfunc main() {\n\t// Example usage\n\tlist1 := []int{1, 2, 3, 4}\n\tlist2 := []int{5, 6, 7}\n\n\tlonger := longerList(list1, list2)\n\tfmt.Println(longer)\n}\n```"
  },
  {
    "task": "Write a script to see if a user's input matches a pre-defined secret code.",
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tsecretCode := \"open-sesame\"\n\treader := bufio.NewReader(os.Stdin)\n\tfmt.Print(\"Enter the secret code: \")\n\tuserInput, _ := reader.ReadString('\\n')\n\tuserInput = strings.TrimSpace(userInput)\n\n\tif userInput == secretCode {\n\t\tfmt.Println(\"Access granted.\")\n\t} else {\n\t\tfmt.Println(\"Access denied.\")\n\t}\n}\n```"
  },
  {
    "task": "Build a utility that checks if a given year is in the 21st century.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc is21stCentury(year int) bool {\n\treturn year >= 2001 && year <= 2100\n}\n\nfunc main() {\n\tyears := []int{1999, 2000, 2001, 2050, 2100, 2101}\n\tfor _, year := range years {\n\t\tif is21stCentury(year) {\n\t\t\tfmt.Printf(\"%d is in the 21st century.\\n\", year)\n\t\t} else {\n\t\t\tfmt.Printf(\"%d is not in the 21st century.\\n\", year)\n\t\t}\n\t}\n}\n```"
  },
  {
    "task": "Create a logic that determines if a book's publication year is after 2000.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tpublicationYear := 2005\n\n\tif publicationYear > 2000 {\n\t\tfmt.Println(\"The book's publication year is after 2000.\")\n\t} else {\n\t\tfmt.Println(\"The book's publication year is 2000 or before.\")\n\t}\n}\n```"
  },
  {
    "task": "Design a feature to see if a number is divisible by both 3 and 5.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc isDivisibleBy3And5(n int) bool {\n\treturn n%3 == 0 && n%5 == 0\n}\n\nfunc main() {\n\tnumber := 15\n\tif isDivisibleBy3And5(number) {\n\t\tfmt.Println(\"The number is divisible by both 3 and 5.\")\n\t} else {\n\t\tfmt.Println(\"The number is not divisible by both 3 and 5.\")\n\t}\n}\n```"
  },
  {
    "task": "Implement a system that checks if a student's GPA is above a certain threshold.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc isGpaAboveThreshold(gpa, threshold float64) bool {\n\treturn gpa > threshold\n}\n\nfunc main() {\n\tstudentGPA := 3.5\n\tthreshold := 3.0\n\n\tif isGpaAboveThreshold(studentGPA, threshold) {\n\t\tfmt.Println(\"The student's GPA is above the threshold.\")\n\t} else {\n\t\tfmt.Println(\"The student's GPA is not above the threshold.\")\n\t}\n}\n```"
  },
  {
    "task": "Write a function to determine if a given angle is acute, right, or obtuse.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc classifyAngle(angle int) string {\n\tif angle < 90 {\n\t\treturn \"Acute\"\n\t} else if angle == 90 {\n\t\treturn \"Right\"\n\t} else if angle > 90 {\n\t\treturn \"Obtuse\"\n\t}\n\treturn \"Invalid\"\n}\n\nfunc main() {\n\tfmt.Println(classifyAngle(45))  // Acute\n\tfmt.Println(classifyAngle(90))  // Right\n\tfmt.Println(classifyAngle(120)) // Obtuse\n}\n```"
  },
  {
    "task": "Develop a program that compares the lengths of two strings and returns the shorter one.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc shorterString(s1, s2 string) string {\n\tif len(s1) < len(s2) {\n\t\treturn s1\n\t}\n\treturn s2\n}\n\nfunc main() {\n\tstr1 := \"hello\"\n\tstr2 := \"world!\"\n\tfmt.Println(\"Shorter string:\", shorterString(str1, str2))\n}\n```"
  },
  {
    "task": "Create a script to verify if a username is unique within a list.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc isUsernameUnique(username string, userList []string) bool {\n\tfor _, user := range userList {\n\t\tif user == username {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc main() {\n\tuserList := []string{\"alice\", \"bob\", \"charlie\"}\n\tusername := \"dave\"\n\n\tif isUsernameUnique(username, userList) {\n\t\tfmt.Println(\"Username is unique.\")\n\t} else {\n\t\tfmt.Println(\"Username is not unique.\")\n\t}\n}\n```"
  },
  {
    "task": "Build a tool that checks if a job applicant meets all the listed qualifications.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype Applicant struct {\n\tage         int\n\texperience  int // in years\n\thasDegree   bool\n\tisCertified bool\n}\n\nfunc qualifies(applicant Applicant) bool {\n\treturn applicant.age >= 18 &&\n\t\tapplicant.experience >= 2 &&\n\t\tapplicant.hasDegree &&\n\t\tapplicant.isCertified\n}\n\nfunc main() {\n\tapplicant := Applicant{age: 25, experience: 3, hasDegree: true, isCertified: true}\n\tif qualifies(applicant) {\n\t\tfmt.Println(\"The applicant meets all the qualifications.\")\n\t} else {\n\t\tfmt.Println(\"The applicant does not meet all the qualifications.\")\n\t}\n}\n```"
  },
  {
    "task": "Write a feature to see if a vehicle's speed exceeds the speed limit.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc isSpeeding(vehicleSpeed, speedLimit int) bool {\n\treturn vehicleSpeed > speedLimit\n}\n\nfunc main() {\n\tvehicleSpeed := 80\n\tspeedLimit := 65\n\n\tif isSpeeding(vehicleSpeed, speedLimit) {\n\t\tfmt.Println(\"The vehicle is speeding.\")\n\t} else {\n\t\tfmt.Println(\"The vehicle is within the speed limit.\")\n\t}\n}\n```"
  },
  {
    "task": "Design a system that determines whether a given point is above or below the x-axis.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\ntype Point struct {\n\tx, y float64\n}\n\nfunc (p Point) AboveXAxis() bool {\n\treturn p.y > 0\n}\n\nfunc (p Point) BelowXAxis() bool {\n\treturn p.y < 0\n}\n\nfunc main() {\n\tp := Point{3, -4}\n\n\tif p.AboveXAxis() {\n\t\tfmt.Println(\"The point is above the x-axis.\")\n\t} else if p.BelowXAxis() {\n\t\tfmt.Println(\"The point is below the x-axis.\")\n\t} else {\n\t\tfmt.Println(\"The point is on the x-axis.\")\n\t}\n}\n```"
  },
  {
    "task": "Create a function that checks if a given word appears in a sentence.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc containsWord(sentence, word string) bool {\n\twords := strings.Fields(sentence)\n\tfor _, w := range words {\n\t\tif w == word {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\nfunc main() {\n\tsentence := \"The quick brown fox jumps over the lazy dog\"\n\tword := \"fox\"\n\tfmt.Println(containsWord(sentence, word)) // Output: true\n}\n```"
  },
  {
    "task": "Implement a program that identifies whether a given number is negative or positive.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    var number int\n    fmt.Print(\"Enter a number: \")\n    fmt.Scan(&number)\n    \n    if number < 0 {\n        fmt.Println(\"The number is negative.\")\n    } else if number > 0 {\n        fmt.Println(\"The number is positive.\")\n    } else {\n        fmt.Println(\"The number is zero.\")\n    }\n}\n```"
  },
  {
    "task": "Write a script to see if the sum of two numbers is greater than 100.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    a := 45\n    b := 60\n\n    if a+b > 100 {\n        fmt.Println(\"The sum is greater than 100.\")\n    } else {\n        fmt.Println(\"The sum is not greater than 100.\")\n    }\n}\n```"
  },
  {
    "task": "Build a utility that checks if a file exists in a specified directory.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"path/filepath\"\n)\n\nfunc fileExists(directory, filename string) bool {\n\tpath := filepath.Join(directory, filename)\n\tif _, err := os.Stat(path); err == nil {\n\t\treturn true\n\t} else if os.IsNotExist(err) {\n\t\treturn false\n\t}\n\treturn false\n}\n\nfunc main() {\n\tdirectory := \"./some/directory\"\n\tfilename := \"file.txt\"\n\tif fileExists(directory, filename) {\n\t\tfmt.Printf(\"File %s exists in directory %s\\n\", filename, directory)\n\t} else {\n\t\tfmt.Printf(\"File %s does not exist in directory %s\\n\", filename, directory)\n\t}\n}\n```"
  },
  {
    "task": "Develop a system to compare the weights of two different objects.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc compareWeights(weight1, weight2 float64) string {\n\tif weight1 > weight2 {\n\t\treturn \"Object 1 is heavier than Object 2.\"\n\t} else if weight1 < weight2 {\n\t\treturn \"Object 1 is lighter than Object 2.\"\n\t}\n\treturn \"Both objects have the same weight.\"\n}\n\nfunc main() {\n\tweight1 := 5.5  // Example weight of object 1\n\tweight2 := 7.2  // Example weight of object 2\n\tresult := compareWeights(weight1, weight2)\n\tfmt.Println(result)\n}\n```"
  },
  {
    "task": "Create a logic to determine if a number falls within a defined range.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc isWithinRange(number, lowerBound, upperBound int) bool {\n\treturn number >= lowerBound && number <= upperBound\n}\n\nfunc main() {\n\tnumber := 7\n\tlowerBound := 5\n\tupperBound := 10\n\n\tif isWithinRange(number, lowerBound, upperBound) {\n\t\tfmt.Println(\"The number is within the range.\")\n\t} else {\n\t\tfmt.Println(\"The number is outside the range.\")\n\t}\n}\n```"
  },
  {
    "task": "Design a program that checks if an employee worked overtime based on hours worked.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\thoursWorked := 45\n\tovertimeThreshold := 40\n\n\tif hoursWorked > overtimeThreshold {\n\t\tfmt.Println(\"The employee worked overtime.\")\n\t} else {\n\t\tfmt.Println(\"The employee did not work overtime.\")\n\t}\n}\n```"
  },
  {
    "task": "Write a function to compare two dates and determine which is earlier.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc compareDates(date1, date2 string) string {\n\tlayout := \"2006-01-02\"\n\td1, err1 := time.Parse(layout, date1)\n\td2, err2 := time.Parse(layout, date2)\n\n\tif err1 != nil || err2 != nil {\n\t\treturn \"Invalid date format\"\n\t}\n\n\tif d1.Before(d2) {\n\t\treturn \"Date1 is earlier\"\n\t} else if d1.After(d2) {\n\t\treturn \"Date2 is earlier\"\n\t}\n\treturn \"Dates are the same\"\n}\n\nfunc main() {\n\tfmt.Println(compareDates(\"2023-01-01\", \"2023-01-02\"))\n\tfmt.Println(compareDates(\"2023-01-02\", \"2023-01-01\"))\n\tfmt.Println(compareDates(\"2023-01-01\", \"2023-01-01\"))\n}\n```"
  },
  {
    "task": "Create a script that verifies if a given word starts with a vowel.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc startsWithVowel(word string) bool {\n\tif len(word) == 0 {\n\t\treturn false\n\t}\n\tfirstChar := strings.ToLower(string(word[0]))\n\treturn firstChar == \"a\" || firstChar == \"e\" || firstChar == \"i\" || firstChar == \"o\" || firstChar == \"u\"\n}\n\nfunc main() {\n\tword := \"example\"\n\tif startsWithVowel(word) {\n\t\tfmt.Println(\"The word starts with a vowel.\")\n\t} else {\n\t\tfmt.Println(\"The word does not start with a vowel.\")\n\t}\n}\n```"
  },
  {
    "task": "Build a utility that checks if a number is even or odd.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc isEven(n int) bool {\n\treturn n%2 == 0\n}\n\nfunc main() {\n\tnumber := 5\n\tif isEven(number) {\n\t\tfmt.Println(\"Even\")\n\t} else {\n\t\tfmt.Println(\"Odd\")\n\t}\n}\n```"
  },
  {
    "task": "Implement a system that determines if a string contains only numeric characters.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"unicode\"\n)\n\nfunc isNumeric(s string) bool {\n\tfor _, ch := range s {\n\t\tif !unicode.IsDigit(ch) {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc main() {\n\tfmt.Println(isNumeric(\"12345\"))  // true\n\tfmt.Println(isNumeric(\"123a5\"))  // false\n}\n```"
  },
  {
    "task": "Write a function to see if a given character is a vowel or consonant.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc isVowelOrConsonant(c rune) string {\n\tvowels := \"aeiouAEIOU\"\n\tif strings.ContainsRune(vowels, c) {\n\t\treturn \"vowel\"\n\t}\n\tif (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') {\n\t\treturn \"consonant\"\n\t}\n\treturn \"not a letter\"\n}\n\nfunc main() {\n\tfmt.Println(isVowelOrConsonant('a')) // vowel\n\tfmt.Println(isVowelOrConsonant('z')) // consonant\n\tfmt.Println(isVowelOrConsonant('A')) // vowel\n\tfmt.Println(isVowelOrConsonant('Z')) // consonant\n\tfmt.Println(isVowelOrConsonant('1')) // not a letter\n}\n```"
  },
  {
    "task": "Create a program that checks if a point lies within a specified rectangle.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype Point struct {\n\tx, y float64\n}\n\ntype Rectangle struct {\n\tx1, y1, x2, y2 float64 // Top-left (x1, y1) and bottom-right (x2, y2) corners\n}\n\nfunc isPointInRectangle(p Point, r Rectangle) bool {\n\treturn p.x >= r.x1 && p.x <= r.x2 && p.y >= r.y1 && p.y <= r.y2\n}\n\nfunc main() {\n\tpoint := Point{3, 4}\n\trectangle := Rectangle{2, 3, 5, 7}\n\n\tif isPointInRectangle(point, rectangle) {\n\t\tfmt.Println(\"The point is inside the rectangle.\")\n\t} else {\n\t\tfmt.Println(\"The point is outside the rectangle.\")\n\t}\n}\n```"
  },
  {
    "task": "Develop a feature to compare two lists and return the common elements.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc commonElements(list1, list2 []int) []int {\n\tcommon := []int{}\n\tm := make(map[int]bool)\n\n\tfor _, item := range list1 {\n\t\tm[item] = true\n\t}\n\n\tfor _, item := range list2 {\n\t\tif m[item] {\n\t\t\tcommon = append(common, item)\n\t\t}\n\t}\n\n\treturn common\n}\n\nfunc main() {\n\tlist1 := []int{1, 2, 3, 4, 5}\n\tlist2 := []int{3, 4, 5, 6, 7}\n\tresult := commonElements(list1, list2)\n\tfmt.Println(result)\n}\n```"
  },
  {
    "task": "Design a function that determines if a text contains any uppercase letters.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"unicode\"\n)\n\nfunc containsUppercase(text string) bool {\n\tfor _, r := range text {\n\t\tif unicode.IsUpper(r) {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\nfunc main() {\n\tfmt.Println(containsUppercase(\"hello\")) // Output: false\n\tfmt.Println(containsUppercase(\"Hello\")) // Output: true\n}\n```"
  },
  {
    "task": "Implement a script to check if a given sentence is a question.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc isQuestion(sentence string) bool {\n\ttrimmedSentence := strings.TrimSpace(sentence)\n\treturn len(trimmedSentence) > 0 && trimmedSentence[len(trimmedSentence)-1] == '?'\n}\n\nfunc main() {\n\tsentence := \"Is this a question?\"\n\tfmt.Println(isQuestion(sentence))\n}\n```"
  },
  {
    "task": "Write a program to determine if a temperature is measured in Celsius or Fahrenheit.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc main() {\n\tvar temp string\n\tfmt.Println(\"Enter the temperature with unit (e.g., 30C or 86F):\")\n\tfmt.Scanln(&temp)\n\n\tunit := strings.ToUpper(temp[len(temp)-1:])\n\tif unit == \"C\" {\n\t\tfmt.Println(\"The temperature is in Celsius.\")\n\t} else if unit == \"F\" {\n\t\tfmt.Println(\"The temperature is in Fahrenheit.\")\n\t} else {\n\t\tfmt.Println(\"Unknown unit.\")\n\t}\n}\n```"
  },
  {
    "task": "Create a system that verifies if a student is enrolled in a particular course.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc isStudentEnrolled(student string, course string, enrollments map[string][]string) bool {\n\tcourses, exists := enrollments[student]\n\tif !exists {\n\t\treturn false\n\t}\n\tfor _, enrolledCourse := range courses {\n\t\tif enrolledCourse == course {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\nfunc main() {\n\tenrollments := map[string][]string{\n\t\t\"Alice\": {\"Math\", \"Science\"},\n\t\t\"Bob\":   {\"English\", \"History\"},\n\t}\n\n\tstudent := \"Alice\"\n\tcourse := \"Math\"\n\tenrolled := isStudentEnrolled(student, course, enrollments)\n\tfmt.Printf(\"Is %s enrolled in %s? %v\\n\", student, course, enrolled)\n}\n```"
  },
  {
    "task": "Build a utility to check if a given string is a valid hexadecimal number.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"regexp\"\n)\n\nfunc isValidHex(s string) bool {\n\tmatch, _ := regexp.MatchString(`^[0-9a-fA-F]+$`, s)\n\treturn match\n}\n\nfunc main() {\n\ttests := []string{\"1a\", \"GZ\", \"123\", \"abcdef\", \"ABCDEF\", \"123G\", \"\"}\n\tfor _, test := range tests {\n\t\tfmt.Printf(\"Is '%s' a valid hex? %v\\n\", test, isValidHex(test))\n\t}\n}\n```"
  },
  {
    "task": "Write a function to see if two circles intersect based on their radii and center points.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\ntype Circle struct {\n\tx, y, radius float64\n}\n\nfunc circlesIntersect(c1, c2 Circle) bool {\n\tdistance := math.Sqrt(math.Pow(c2.x-c1.x, 2) + math.Pow(c2.y-c1.y, 2))\n\treturn distance <= (c1.radius + c2.radius)\n}\n\nfunc main() {\n\tcircle1 := Circle{x: 0, y: 0, radius: 5}\n\tcircle2 := Circle{x: 3, y: 4, radius: 2}\n\tfmt.Println(circlesIntersect(circle1, circle2)) // Output: true\n}\n```"
  },
  {
    "task": "Develop a program that checks if a given number is within 10% of another number.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc isWithinTenPercent(a, b float64) bool {\n\ttenPercent := 0.1 * a\n\treturn math.Abs(a-b) <= tenPercent\n}\n\nfunc main() {\n\tvar num1, num2 float64\n\tfmt.Print(\"Enter first number: \")\n\tfmt.Scan(&num1)\n\tfmt.Print(\"Enter second number: \")\n\tfmt.Scan(&num2)\n\n\tif isWithinTenPercent(num1, num2) {\n\t\tfmt.Println(\"The numbers are within 10% of each other.\")\n\t} else {\n\t\tfmt.Println(\"The numbers are not within 10% of each other.\")\n\t}\n}\n```"
  },
  {
    "task": "Create a feature to determine if a character is alphanumeric.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"unicode\"\n)\n\nfunc isAlphanumeric(c rune) bool {\n\treturn unicode.IsLetter(c) || unicode.IsDigit(c)\n}\n\nfunc main() {\n\tcharacter := 'a'\n\tfmt.Printf(\"Is '%c' alphanumeric? %v\\n\", character, isAlphanumeric(character))\n\t\n\tcharacter = '1'\n\tfmt.Printf(\"Is '%c' alphanumeric? %v\\n\", character, isAlphanumeric(character))\n\t\n\tcharacter = '#'\n\tfmt.Printf(\"Is '%c' alphanumeric? %v\\n\", character, isAlphanumeric(character))\n}\n```"
  },
  {
    "task": "Implement a system to compare the profit margins of two products.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tproduct1Revenue := 1000.0\n\tproduct1Cost := 600.0\n\tproduct2Revenue := 800.0\n\tproduct2Cost := 500.0\n\n\tprofitMargin1 := calculateProfitMargin(product1Revenue, product1Cost)\n\tprofitMargin2 := calculateProfitMargin(product2Revenue, product2Cost)\n\n\tif profitMargin1 > profitMargin2 {\n\t\tfmt.Println(\"Product 1 has a higher profit margin.\")\n\t} else if profitMargin1 < profitMargin2 {\n\t\tfmt.Println(\"Product 2 has a higher profit margin.\")\n\t} else {\n\t\tfmt.Println(\"Both products have the same profit margin.\")\n\t}\n}\n\nfunc calculateProfitMargin(revenue, cost float64) float64 {\n\treturn (revenue - cost) / revenue\n}\n```"
  },
  {
    "task": "Design a script to check if a given string contains any special characters.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"regexp\"\n)\n\nfunc containsSpecialCharacters(s string) bool {\n\tre := regexp.MustCompile(`[^a-zA-Z0-9]`)\n\treturn re.MatchString(s)\n}\n\nfunc main() {\n\tstr := \"Hello, World!\"\n\tif containsSpecialCharacters(str) {\n\t\tfmt.Println(\"The string contains special characters.\")\n\t} else {\n\t\tfmt.Println(\"The string does not contain any special characters.\")\n\t}\n}\n```"
  },
  {
    "task": "Write a function to verify if a number is a multiple of another number.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc isMultiple(a, b int) bool {\n\treturn a%b == 0\n}\n\nfunc main() {\n\tfmt.Println(isMultiple(10, 2)) // true\n\tfmt.Println(isMultiple(10, 3)) // false\n}\n```"
  },
  {
    "task": "Create a program that checks if a date is a holiday based on a list of holidays.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\tholidays := []string{\n\t\t\"2023-01-01\", // New Year's Day\n\t\t\"2023-07-04\", // Independence Day\n\t\t\"2023-12-25\", // Christmas Day\n\t}\n\n\tcheckDate := \"2023-07-04\"\n\tisHoliday := false\n\n\tfor _, holiday := range holidays {\n\t\tif checkDate == holiday {\n\t\t\tisHoliday = true\n\t\t\tbreak\n\t\t}\n\t}\n\n\tif isHoliday {\n\t\tfmt.Println(\"The date is a holiday.\")\n\t} else {\n\t\tfmt.Println(\"The date is not a holiday.\")\n\t}\n}\n```"
  },
  {
    "task": "Build a utility to compare two text files and highlight the differences.",
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc readLines(filepath string) ([]string, error) {\n\tfile, err := os.Open(filepath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer file.Close()\n\n\tvar lines []string\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\treturn lines, scanner.Err()\n}\n\nfunc compareFiles(file1Lines, file2Lines []string) {\n\tmaxLines := len(file1Lines)\n\tif len(file2Lines) > maxLines {\n\t\tmaxLines = len(file2Lines)\n\t}\n\n\tfor i := 0; i < maxLines; i++ {\n\t\tvar line1, line2 string\n\t\tif i < len(file1Lines) {\n\t\t\tline1 = file1Lines[i]\n\t\t}\n\t\tif i < len(file2Lines) {\n\t\t\tline2 = file2Lines[i]\n\t\t}\n\n\t\tif line1 != line2 {\n\t\t\tfmt.Printf(\"Difference at line %d:\\n\", i+1)\n\t\t\tfmt.Printf(\"File1: %s\\n\", line1)\n\t\t\tfmt.Printf(\"File2: %s\\n\", line2)\n\t\t}\n\t}\n}\n\nfunc main() {\n\tif len(os.Args) < 3 {\n\t\tfmt.Println(\"Usage: go run compare.go <file1> <file2>\")\n\t\treturn\n\t}\n\n\tfile1Path := os.Args[1]\n\tfile2Path := os.Args[2]\n\n\tfile1Lines, err := readLines(file1Path)\n\tif err != nil {\n\t\tfmt.Println(\"Error reading file1:\", err)\n\t\treturn\n\t}\n\n\tfile2Lines, err := readLines(file2Path)\n\tif err != nil {\n\t\tfmt.Println(\"Error reading file2:\", err)\n\t\treturn\n\t}\n\n\tcompareFiles(file1Lines, file2Lines)\n}\n```"
  },
  {
    "task": "Develop a function to determine if a given password is strong based on length and character diversity.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"unicode\"\n)\n\nfunc isStrongPassword(password string) bool {\n\tif len(password) < 8 {\n\t\treturn false\n\t}\n\n\tvar hasUpper, hasLower, hasDigit, hasSpecial bool\n\tfor _, char := range password {\n\t\tswitch {\n\t\tcase unicode.IsUpper(char):\n\t\t\thasUpper = true\n\t\tcase unicode.IsLower(char):\n\t\t\thasLower = true\n\t\tcase unicode.IsDigit(char):\n\t\t\thasDigit = true\n\t\tcase unicode.IsPunct(char) || unicode.IsSymbol(char):\n\t\t\thasSpecial = true\n\t\t}\n\t}\n\n\treturn hasUpper && hasLower && hasDigit && hasSpecial\n}\n\nfunc main() {\n\tpasswords := []string{\"Passw0rd!\", \"weakpass\", \"Short1!\", \"StrongPass1@!\"}\n\tfor _, pwd := range passwords {\n\t\tfmt.Printf(\"Password: %s, Strong: %t\\n\", pwd, isStrongPassword(pwd))\n\t}\n}\n```"
  },
  {
    "task": "Write a script to see if a number is within a specified distance from zero.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc isWithinDistanceFromZero(number, distance float64) bool {\n\treturn math.Abs(number) <= distance\n}\n\nfunc main() {\n\tnumber := 5.0\n\tdistance := 10.0\n\n\tif isWithinDistanceFromZero(number, distance) {\n\t\tfmt.Println(\"The number is within the specified distance from zero.\")\n\t} else {\n\t\tfmt.Println(\"The number is not within the specified distance from zero.\")\n\t}\n}\n```"
  },
  {
    "task": "Create a system to check if a book title is available in a library database.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc isBookAvailable(library []string, title string) bool {\n\tfor _, book := range library {\n\t\tif book == title {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\nfunc main() {\n\tlibrary := []string{\"The Great Gatsby\", \"1984\", \"To Kill a Mockingbird\", \"Moby Dick\"}\n\ttitle := \"1984\"\n\n\tif isBookAvailable(library, title) {\n\t\tfmt.Println(\"The book is available in the library.\")\n\t} else {\n\t\tfmt.Println(\"The book is not available in the library.\")\n\t}\n}\n```"
  },
  {
    "task": "Implement a feature that determines if a user has administrator privileges.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\ntype User struct {\n\tName      string\n\tIsAdmin   bool\n}\n\nfunc hasAdminPrivileges(user User) bool {\n\treturn user.IsAdmin\n}\n\nfunc main() {\n\tuser1 := User{Name: \"Alice\", IsAdmin: true}\n\tuser2 := User{Name: \"Bob\", IsAdmin: false}\n\n\tfmt.Println(\"User1 has admin privileges:\", hasAdminPrivileges(user1))\n\tfmt.Println(\"User2 has admin privileges:\", hasAdminPrivileges(user2))\n}\n```"
  },
  {
    "task": "Design a function to compare the brightness of two colors.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\ntype Color struct {\n\tR, G, B int\n}\n\nfunc brightness(c Color) float64 {\n\treturn 0.299*float64(c.R) + 0.587*float64(c.G) + 0.114*float64(c.B)\n}\n\nfunc compareBrightness(c1, c2 Color) string {\n\tb1 := brightness(c1)\n\tb2 := brightness(c2)\n\n\tif b1 > b2 {\n\t\treturn \"Color 1 is brighter\"\n\t} else if b1 < b2 {\n\t\treturn \"Color 2 is brighter\"\n\t} else {\n\t\treturn \"Both colors have the same brightness\"\n\t}\n}\n\nfunc main() {\n\tcolor1 := Color{R: 255, G: 255, B: 255}\n\tcolor2 := Color{R: 0, G: 0, B: 0}\n\n\tresult := compareBrightness(color1, color2)\n\tfmt.Println(result)\n}\n```"
  },
  {
    "task": "Write a program to verify if a number is a valid credit card number using the Luhn algorithm.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n)\n\nfunc isValidCreditCardNumber(number string) bool {\n\tsum := 0\n\talt := false\n\n\tfor i := len(number) - 1; i >= 0; i-- {\n\t\tn, err := strconv.Atoi(string(number[i]))\n\t\tif err != nil {\n\t\t\treturn false\n\t\t}\n\n\t\tif alt {\n\t\t\tn *= 2\n\t\t\tif n > 9 {\n\t\t\t\tn -= 9\n\t\t\t}\n\t\t}\n\n\t\tsum += n\n\t\talt = !alt\n\t}\n\n\treturn sum%10 == 0\n}\n\nfunc main() {\n\tnumber := \"1234567812345670\"\n\tif isValidCreditCardNumber(number) {\n\t\tfmt.Println(\"Valid credit card number\")\n\t} else {\n\t\tfmt.Println(\"Invalid credit card number\")\n\t}\n}\n```"
  },
  {
    "task": "Create a script to determine if a given string is a valid IP address.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net\"\n)\n\nfunc isValidIP(ip string) bool {\n\treturn net.ParseIP(ip) != nil\n}\n\nfunc main() {\n\tip := \"192.168.1.1\"\n\tif isValidIP(ip) {\n\t\tfmt.Println(\"Valid IP address\")\n\t} else {\n\t\tfmt.Println(\"Invalid IP address\")\n\t}\n}\n```"
  },
  {
    "task": "Build a utility that checks if a number is part of an arithmetic sequence.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc isPartOfArithmeticSequence(a, d, n, x int) bool {\n\tfor i := 0; i < n; i++ {\n\t\tif a+i*d == x {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\nfunc main() {\n\t// Example usage\n\ta := 2  // First term of the sequence\n\td := 3  // Common difference\n\tn := 10 // Number of terms\n\tx := 20 // Number to check\n\n\tif isPartOfArithmeticSequence(a, d, n, x) {\n\t\tfmt.Printf(\"%d is part of the arithmetic sequence.\\n\", x)\n\t} else {\n\t\tfmt.Printf(\"%d is not part of the arithmetic sequence.\\n\", x)\n\t}\n}\n```"
  },
  {
    "task": "Develop a feature to compare the efficiency of two algorithms based on time complexity.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc algorithm1(n int) {\n\tsum := 0\n\tfor i := 0; i < n; i++ {\n\t\tsum += i\n\t}\n}\n\nfunc algorithm2(n int) {\n\tsum := 0\n\tfor i := 0; i < n; i++ {\n\t\tfor j := 0; j < n; j++ {\n\t\t\tsum += i + j\n\t\t}\n\t}\n}\n\nfunc measureTime(algorithm func(int), n int) time.Duration {\n\tstart := time.Now()\n\talgorithm(n)\n\treturn time.Since(start)\n}\n\nfunc compareAlgorithms(n int) {\n\ttime1 := measureTime(algorithm1, n)\n\ttime2 := measureTime(algorithm2, n)\n\n\tfmt.Printf(\"Algorithm 1 took: %v\\n\", time1)\n\tfmt.Printf(\"Algorithm 2 took: %v\\n\", time2)\n\n\tif time1 < time2 {\n\t\tfmt.Println(\"Algorithm 1 is more efficient based on time complexity.\")\n\t} else if time1 > time2 {\n\t\tfmt.Println(\"Algorithm 2 is more efficient based on time complexity.\")\n\t} else {\n\t\tfmt.Println(\"Both algorithms have similar time complexity.\")\n\t}\n}\n\nfunc main() {\n\tn := 1000\n\tcompareAlgorithms(n)\n}\n```"
  },
  {
    "task": "Write a function to see if a given date falls in a leap year.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc isLeapYear(year int) bool {\n\tif (year%4 == 0 && year%100 != 0) || (year%400 == 0) {\n\t\treturn true\n\t}\n\treturn false\n}\n\nfunc dateFallsInLeapYear(year int, month int, day int) bool {\n\treturn isLeapYear(year)\n}\n\nfunc main() {\n\tfmt.Println(dateFallsInLeapYear(2020, 1, 1)) // true\n\tfmt.Println(dateFallsInLeapYear(2021, 1, 1)) // false\n}\n```"
  },
  {
    "task": "Create a program that determines if a user's subscription is active based on the current date.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\tcurrentDate := time.Now()\n\tsubscriptionEndDate := time.Date(2023, time.December, 31, 23, 59, 59, 0, time.UTC)\n\n\tif currentDate.Before(subscriptionEndDate) {\n\t\tfmt.Println(\"Subscription is active.\")\n\t} else {\n\t\tfmt.Println(\"Subscription has expired.\")\n\t}\n}\n```"
  },
  {
    "task": "Design a tool to check if a user\u2019s input is a palindrome phrase, ignoring spaces and punctuation.",
    "code": "```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n\t\"unicode\"\n)\n\nfunc isPalindrome(s string) bool {\n\tvar filtered []rune\n\tfor _, r := range s {\n\t\tif unicode.IsLetter(r) {\n\t\t\tfiltered = append(filtered, unicode.ToLower(r))\n\t\t}\n\t}\n\tn := len(filtered)\n\tfor i := 0; i < n/2; i++ {\n\t\tif filtered[i] != filtered[n-i-1] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc main() {\n\treader := bufio.NewReader(os.Stdin)\n\tfmt.Print(\"Enter a phrase: \")\n\tinput, _ := reader.ReadString('\\n')\n\tinput = strings.TrimSpace(input)\n\tif isPalindrome(input) {\n\t\tfmt.Println(\"The phrase is a palindrome.\")\n\t} else {\n\t\tfmt.Println(\"The phrase is not a palindrome.\")\n\t}\n}\n```"
  },
  {
    "task": "Implement a system to verify if a given number is part of the Fibonacci sequence.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc isFibonacci(n int) bool {\n\tif n < 0 {\n\t\treturn false\n\t}\n\ta, b := 0, 1\n\tfor a < n {\n\t\ta, b = b, a+b\n\t}\n\treturn a == n\n}\n\nfunc main() {\n\tnumber := 21\n\tif isFibonacci(number) {\n\t\tfmt.Printf(\"%d is a Fibonacci number.\\n\", number)\n\t} else {\n\t\tfmt.Printf(\"%d is not a Fibonacci number.\\n\", number)\n\t}\n}\n```"
  },
  {
    "task": "Write a program to compare the elevation of two geographic locations.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc compareElevation(elevation1, elevation2 float64) string {\n\tif elevation1 > elevation2 {\n\t\treturn \"Location 1 is higher than Location 2.\"\n\t} else if elevation1 < elevation2 {\n\t\treturn \"Location 2 is higher than Location 1.\"\n\t} else {\n\t\treturn \"Both locations have the same elevation.\"\n\t}\n}\n\nfunc main() {\n\tlocation1Elevation := 500.0 // Example elevation in meters\n\tlocation2Elevation := 450.0 // Example elevation in meters\n\n\tresult := compareElevation(location1Elevation, location2Elevation)\n\tfmt.Println(result)\n}\n```"
  },
  {
    "task": "Create a function to determine if a given string is a valid JSON format.",
    "code": "```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n)\n\nfunc isValidJSON(s string) bool {\n\tvar js json.RawMessage\n\treturn json.Unmarshal([]byte(s), &js) == nil\n}\n\nfunc main() {\n\tfmt.Println(isValidJSON(`{\"name\": \"John\", \"age\": 30}`)) // true\n\tfmt.Println(isValidJSON(`{\"name\": \"John\", \"age\": 30`))  // false\n}\n```"
  },
  {
    "task": "Build a utility that checks if a number is a factorial of any integer.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc isFactorial(num int) bool {\n\tif num < 0 {\n\t\treturn false\n\t}\n\t\n\tfactorial := 1\n\tfor i := 1; factorial <= num; i++ {\n\t\tif factorial == num {\n\t\t\treturn true\n\t\t}\n\t\tfactorial *= i\n\t}\n\treturn false\n}\n\nfunc main() {\n\ttests := []int{1, 2, 6, 24, 120, 720, 5, 10}\n\tfor _, num := range tests {\n\t\tresult := isFactorial(num)\n\t\tfmt.Printf(\"%d is a factorial: %t\\n\", num, result)\n\t}\n}\n```"
  },
  {
    "task": "Develop a feature to compare the widths of two ribbons and return the wider one.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc widerRibbon(width1, width2 float64) float64 {\n\tif width1 > width2 {\n\t\treturn width1\n\t}\n\treturn width2\n}\n\nfunc main() {\n\tribbon1 := 5.2\n\tribbon2 := 4.8\n\n\twider := widerRibbon(ribbon1, ribbon2)\n\tfmt.Printf(\"The wider ribbon has a width of: %.2f\\n\", wider)\n}\n```"
  },
  {
    "task": "Write a script to see if a word is present in a list of banned words.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc isBannedWord(word string, bannedWords []string) bool {\n\tfor _, bannedWord := range bannedWords {\n\t\tif word == bannedWord {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\nfunc main() {\n\tbannedWords := []string{\"badword1\", \"badword2\", \"badword3\"}\n\twordToCheck := \"example\"\n\n\tif isBannedWord(wordToCheck, bannedWords) {\n\t\tfmt.Println(\"The word is banned.\")\n\t} else {\n\t\tfmt.Println(\"The word is not banned.\")\n\t}\n}\n```"
  },
  {
    "task": "Design a system to determine if a patient's temperature is in the normal range.",
    "code": "```go\npackage main\n\nimport \"fmt\"\n\nfunc isTemperatureNormal(temp float64) bool {\n\tconst normalMin, normalMax = 36.5, 37.5\n\treturn temp >= normalMin && temp <= normalMax\n}\n\nfunc main() {\n\tpatientTemperature := 37.0\n\tif isTemperatureNormal(patientTemperature) {\n\t\tfmt.Println(\"The patient's temperature is normal.\")\n\t} else {\n\t\tfmt.Println(\"The patient's temperature is not normal.\")\n\t}\n}\n```"
  },
  {
    "task": "Create a program that checks if a given time is during business hours.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc isBusinessHours(t time.Time) bool {\n\tstart := time.Date(t.Year(), t.Month(), t.Day(), 9, 0, 0, 0, t.Location())\n\tend := time.Date(t.Year(), t.Month(), t.Day(), 17, 0, 0, 0, t.Location())\n\treturn t.After(start) && t.Before(end)\n}\n\nfunc main() {\n\tnow := time.Now()\n\tif isBusinessHours(now) {\n\t\tfmt.Println(\"The given time is during business hours.\")\n\t} else {\n\t\tfmt.Println(\"The given time is outside business hours.\")\n\t}\n}\n```"
  },
  {
    "task": "Implement a function to see if a number is a triangular number.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc isTriangularNumber(n int) bool {\n\tif n < 0 {\n\t\treturn false\n\t}\n\tx := (math.Sqrt(8*float64(n)+1) - 1) / 2\n\treturn x == float64(int(x))\n}\n\nfunc main() {\n\tfmt.Println(isTriangularNumber(6))  // true\n\tfmt.Println(isTriangularNumber(10)) // true\n\tfmt.Println(isTriangularNumber(4))  // false\n}\n```"
  },
  {
    "task": "Write a feature to compare the number of vowels in two given strings.",
    "code": "```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc countVowels(s string) int {\n\tvowels := \"aeiouAEIOU\"\n\tcount := 0\n\tfor _, char := range s {\n\t\tif strings.ContainsRune(vowels, char) {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\nfunc compareVowelCount(s1, s2 string) string {\n\tv1 := countVowels(s1)\n\tv2 := countVowels(s2)\n\n\tif v1 > v2 {\n\t\treturn \"First string has more vowels.\"\n\t} else if v1 < v2 {\n\t\treturn \"Second string has more vowels.\"\n\t} else {\n\t\treturn \"Both strings have the same number of vowels.\"\n\t}\n}\n\nfunc main() {\n\tstr1 := \"hello\"\n\tstr2 := \"world\"\n\tresult := compareVowelCount(str1, str2)\n\tfmt.Println(result)\n}\n```"
  }
]