[
  {
    "task": "Create a function that calculates the sum of two numbers and returns the result.",
    "code": "```haskell\nsumTwoNumbers :: Num a => a -> a -> a\nsumTwoNumbers x y = x + y\n```"
  },
  {
    "task": "Design a function that takes a string and returns its length.",
    "code": "```haskell\nstringLength :: String -> Int\nstringLength str = length str\n```"
  },
  {
    "task": "Write a function that checks if a number is prime and returns a boolean value.",
    "code": "```haskell\nisPrime :: Int -> Bool\nisPrime n\n  | n <= 1 = False\n  | otherwise = null [x | x <- [2..floor (sqrt (fromIntegral n))], n `mod` x == 0]\n```"
  },
  {
    "task": "Implement a function that returns the highest value in a list of integers.",
    "code": "```haskell\nmaximumValue :: [Int] -> Int\nmaximumValue [] = error \"Empty list\"\nmaximumValue xs = maximum xs\n```"
  },
  {
    "task": "Create a function that accepts a list of words and returns the longest word.",
    "code": "```haskell\nlongestWord :: [String] -> String\nlongestWord = foldl1 (\\acc x -> if length x > length acc then x else acc)\n```"
  },
  {
    "task": "Write a function that takes a temperature in Celsius and returns the equivalent in Fahrenheit.",
    "code": "```haskell\ncelsiusToFahrenheit :: Double -> Double\ncelsiusToFahrenheit celsius = (celsius * 9/5) + 32\n```"
  },
  {
    "task": "Develop a function that returns the factorial of a given number.",
    "code": "```haskell\nfactorial :: Integer -> Integer\nfactorial 0 = 1\nfactorial n = n * factorial (n - 1)\n```"
  },
  {
    "task": "Implement a function that receives a date and returns the day of the week.",
    "code": "```haskell\nimport Data.Time.Calendar\nimport Data.Time.Calendar.WeekDate\n\ndayOfWeek :: Integer -> Int -> Int -> String\ndayOfWeek year month day = \n    let (_, _, weekday) = toWeekDate (fromGregorian year month day)\n    in case weekday of\n        1 -> \"Monday\"\n        2 -> \"Tuesday\"\n        3 -> \"Wednesday\"\n        4 -> \"Thursday\"\n        5 -> \"Friday\"\n        6 -> \"Saturday\"\n        7 -> \"Sunday\"\n        _ -> error \"Invalid day\"\n```"
  },
  {
    "task": "Write a function that calculates the area of a circle given its radius and returns the value.",
    "code": "```haskell\nareaOfCircle :: Floating a => a -> a\nareaOfCircle radius = pi * radius * radius\n```"
  },
  {
    "task": "Create a function that converts a string to uppercase and returns the modified string.",
    "code": "```haskell\nimport Data.Char (toUpper)\n\ntoUpperString :: String -> String\ntoUpperString = map toUpper\n```"
  },
  {
    "task": "Design a function that returns the reverse of a given list.",
    "code": "```haskell\nreverseList :: [a] -> [a]\nreverseList = reverse\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns a dictionary with character frequencies.",
    "code": "```haskell\nimport Data.Map (Map)\nimport qualified Data.Map as Map\n\ncharFrequencies :: String -> Map Char Int\ncharFrequencies = foldr (\\c -> Map.insertWith (+) c 1) Map.empty\n```"
  },
  {
    "task": "Write a function that returns the first non-repeating character in a string.",
    "code": "```haskell\nimport Data.List (find)\nimport qualified Data.Map as Map\n\nfirstNonRepeatingChar :: String -> Maybe Char\nfirstNonRepeatingChar s = find (\\c -> Map.findWithDefault 0 c freqMap == 1) s\n  where\n    freqMap = Map.fromListWith (+) [(c, 1) | c <- s]\n```"
  },
  {
    "task": "Create a function that takes a list of numbers and returns a new list with only even numbers.",
    "code": "```haskell\nfilterEven :: [Int] -> [Int]\nfilterEven = filter even\n```"
  },
  {
    "task": "Develop a function that receives a sentence and returns the word count.",
    "code": "```haskell\nwordCount :: String -> Int\nwordCount sentence = length (words sentence)\n```"
  },
  {
    "task": "Implement a function that returns the smallest element in an array.",
    "code": "```haskell\nsmallestElement :: Ord a => [a] -> Maybe a\nsmallestElement [] = Nothing\nsmallestElement xs = Just (minimum xs)\n```"
  },
  {
    "task": "Write a function that takes two strings and returns true if they are anagrams.",
    "code": "```haskell\nimport Data.List (sort)\n\nareAnagrams :: String -> String -> Bool\nareAnagrams s1 s2 = sort s1 == sort s2\n```"
  },
  {
    "task": "Create a function that accepts an integer and returns a list of its divisors.",
    "code": "```haskell\ndivisors :: Int -> [Int]\ndivisors n = [x | x <- [1..n], n `mod` x == 0]\n```"
  },
  {
    "task": "Design a function that returns the square root of a given number.",
    "code": "```haskell\nsquareRoot :: Floating a => a -> a\nsquareRoot x = sqrt x\n```"
  },
  {
    "task": "Implement a function that accepts a list and returns it sorted in ascending order.",
    "code": "```haskell\nsortList :: Ord a => [a] -> [a]\nsortList = sort\n```"
  },
  {
    "task": "Write a function that checks whether a given year is a leap year and returns a boolean.",
    "code": "```haskell\nisLeapYear :: Int -> Bool\nisLeapYear year = (year `mod` 4 == 0 && year `mod` 100 /= 0) || (year `mod` 400 == 0)\n```"
  },
  {
    "task": "Create a function that receives a list of numbers and returns their average.",
    "code": "```haskell\naverage :: Fractional a => [a] -> a\naverage xs = sum xs / fromIntegral (length xs)\n```"
  },
  {
    "task": "Develop a function that returns the nth Fibonacci number.",
    "code": "```haskell\nfibonacci :: Integer -> Integer\nfibonacci n\n  | n <= 0    = 0\n  | n == 1    = 1\n  | otherwise = fibonacci (n - 1) + fibonacci (n - 2)\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns it with vowels removed.",
    "code": "```haskell\nremoveVowels :: String -> String\nremoveVowels = filter (`notElem` \"aeiouAEIOU\")\n```"
  },
  {
    "task": "Write a function that takes two dates and returns the number of days between them.",
    "code": "```haskell\nimport Data.Time.Calendar (Day, diffDays)\n\ndaysBetween :: Day -> Day -> Integer\ndaysBetween date1 date2 = abs $ diffDays date1 date2\n```"
  },
  {
    "task": "Create a function that returns the last element of a list.",
    "code": "```haskell\nlastElement :: [a] -> Maybe a\nlastElement [] = Nothing\nlastElement xs = Just (last xs)\n```"
  },
  {
    "task": "Design a function that calculates the GCD of two numbers and returns it.",
    "code": "```haskell\ngcdCalc :: Integral a => a -> a -> a\ngcdCalc a 0 = a\ngcdCalc a b = gcdCalc b (a `mod` b)\n```"
  },
  {
    "task": "Implement a function that takes a list and returns a tuple with the min and max values.",
    "code": "```haskell\nminMax :: Ord a => [a] -> (a, a)\nminMax [] = error \"List cannot be empty\"\nminMax xs = (minimum xs, maximum xs)\n```"
  },
  {
    "task": "Write a function that converts a binary string to its decimal representation and returns it.",
    "code": "```haskell\nbinaryToDecimal :: String -> Int\nbinaryToDecimal = foldl (\\acc x -> acc * 2 + digitToInt x) 0\n  where digitToInt c = if c == '1' then 1 else 0\n```"
  },
  {
    "task": "Create a function that accepts a dictionary and returns a list of its keys.",
    "code": "```haskell\nimport qualified Data.Map as Map\n\nkeysList :: Map.Map k v -> [k]\nkeysList = Map.keys\n```"
  },
  {
    "task": "Develop a function that returns the concatenation of two strings.",
    "code": "```haskell\nconcatenateStrings :: String -> String -> String\nconcatenateStrings str1 str2 = str1 ++ str2\n```"
  },
  {
    "task": "Implement a function that receives a list and returns a new list with duplicates removed.",
    "code": "```haskell\nremoveDuplicates :: (Eq a) => [a] -> [a]\nremoveDuplicates = foldl (\\seen x -> if x `elem` seen then seen else seen ++ [x]) []\n```"
  },
  {
    "task": "Write a function that returns the intersection of two lists.",
    "code": "```haskell\nintersection :: Eq a => [a] -> [a] -> [a]\nintersection xs ys = [x | x <- xs, x `elem` ys]\n```"
  },
  {
    "task": "Create a function that takes an integer and returns whether it is even or odd as a string.",
    "code": "```haskell\nevenOrOdd :: Int -> String\nevenOrOdd n = if even n then \"even\" else \"odd\"\n```"
  },
  {
    "task": "Design a function that returns the number of vowels in a given string.",
    "code": "```haskell\ncountVowels :: String -> Int\ncountVowels = length . filter (`elem` \"aeiouAEIOU\")\n```"
  },
  {
    "task": "Implement a function that counts the occurrences of a substring within a string and returns it.",
    "code": "```haskell\ncountOccurrences :: String -> String -> Int\ncountOccurrences _ [] = 0\ncountOccurrences sub str@(x:xs)\n    | take len str == sub = 1 + countOccurrences sub (drop len str)\n    | otherwise = countOccurrences sub xs\n  where len = length sub\n```"
  },
  {
    "task": "Write a function that accepts a list of numbers and returns them sorted in descending order.",
    "code": "```haskell\nsortDescending :: Ord a => [a] -> [a]\nsortDescending = reverse . sort\n```"
  },
  {
    "task": "Create a function that returns the median of a list of numbers.",
    "code": "```haskell\nimport Data.List (sort)\n\nmedian :: (Fractional a, Ord a) => [a] -> a\nmedian [] = error \"Empty list\"\nmedian xs = if odd n\n            then sorted !! mid\n            else (sorted !! mid + sorted !! (mid - 1)) / 2\n  where\n    sorted = sort xs\n    n = length xs\n    mid = n `div` 2\n```"
  },
  {
    "task": "Develop a function that receives a sentence and returns it with words in reverse order.",
    "code": "```haskell\nreverseWords :: String -> String\nreverseWords = unwords . reverse . words\n```"
  },
  {
    "task": "Implement a function that returns the sum of all elements in a matrix.",
    "code": "```haskell\nsumMatrix :: Num a => [[a]] -> a\nsumMatrix = sum . map sum\n```"
  },
  {
    "task": "Write a function that accepts a string and returns true if it is a palindrome.",
    "code": "```haskell\nisPalindrome :: String -> Bool\nisPalindrome s = s == reverse s\n```"
  },
  {
    "task": "Create a function that takes a number and returns its binary representation as a string.",
    "code": "```haskell\ntoBinaryString :: Int -> String\ntoBinaryString n = go n \"\"\n  where\n    go 0 acc = if null acc then \"0\" else acc\n    go m acc = go (m `div` 2) (let (q, r) = m `quotRem` 2 in show r ++ acc)\n```"
  },
  {
    "task": "Design a function that returns the number of words in a paragraph.",
    "code": "```haskell\ncountWords :: String -> Int\ncountWords paragraph = length (words paragraph)\n```"
  },
  {
    "task": "Implement a function that accepts a list and returns the index of its maximum element.",
    "code": "```haskell\nimport Data.List (elemIndex)\nimport Data.Maybe (fromJust)\n\nindexOfMax :: Ord a => [a] -> Int\nindexOfMax xs = fromJust $ elemIndex (maximum xs) xs\n```"
  },
  {
    "task": "Write a function that takes a list of grades and returns the highest grade.",
    "code": "```haskell\nhighestGrade :: Ord a => [a] -> a\nhighestGrade = maximum\n```"
  },
  {
    "task": "Create a function that returns the product of all positive integers up to a given number.",
    "code": "```haskell\nproductUpTo :: Integer -> Integer\nproductUpTo n = product [1..n]\n```"
  },
  {
    "task": "Develop a function that receives a string and returns a new string with spaces replaced by hyphens.",
    "code": "```haskell\nreplaceSpaces :: String -> String\nreplaceSpaces = map (\\c -> if c == ' ' then '-' else c)\n```"
  },
  {
    "task": "Implement a function that takes a list of integers and returns their sum.",
    "code": "```haskell\nsumList :: [Int] -> Int\nsumList = sum\n```"
  },
  {
    "task": "Write a function that checks if a string is a valid email address and returns a boolean.",
    "code": "```haskell\nimport Text.Regex.Posix ((=~))\n\nisValidEmail :: String -> Bool\nisValidEmail email = email =~ \"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,}$\"\n```"
  },
  {
    "task": "Create a function that returns the decimal equivalent of a hexadecimal string.",
    "code": "```haskell\nhexToDecimal :: String -> Integer\nhexToDecimal hexStr = read (\"0x\" ++ hexStr) :: Integer\n```"
  },
  {
    "task": "Design a function that calculates and returns the body mass index based on height and weight.",
    "code": "```haskell\ncalculateBMI :: Float -> Float -> Float\ncalculateBMI weight height = weight / (height * height)\n```"
  },
  {
    "task": "Implement a function that returns the initials of a person's name given a full name.",
    "code": "```haskell\ninitials :: String -> String\ninitials name = unwords $ map ((:[]) . head) (words name)\n```"
  },
  {
    "task": "Write a function that accepts a list of names and returns them sorted alphabetically.",
    "code": "```haskell\nsortNames :: [String] -> [String]\nsortNames names = sort names\n```"
  },
  {
    "task": "Create a function that takes a list of integers and returns a list of their squares.",
    "code": "```haskell\nsquareList :: [Int] -> [Int]\nsquareList = map (^2)\n```"
  },
  {
    "task": "Develop a function that returns the common elements between two sets.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\ncommonElements :: (Ord a) => Set.Set a -> Set.Set a -> Set.Set a\ncommonElements set1 set2 = Set.intersection set1 set2\n```"
  },
  {
    "task": "Implement a function that receives a list of strings and returns the shortest string.",
    "code": "```haskell\nshortestString :: [String] -> String\nshortestString = foldr1 (\\x y -> if length x <= length y then x else y)\n```"
  },
  {
    "task": "Write a function that returns the sum of digits of a given integer.",
    "code": "```haskell\nsumOfDigits :: Integer -> Integer\nsumOfDigits n = sum $ map (read . (:[])) $ show $ abs n\n```"
  },
  {
    "task": "Create a function that takes a matrix and returns its transpose.",
    "code": "```haskell\ntransposeMatrix :: [[a]] -> [[a]]\ntransposeMatrix [] = []\ntransposeMatrix ([]:_) = []\ntransposeMatrix matrix = map head matrix : transposeMatrix (map tail matrix)\n```"
  },
  {
    "task": "Design a function that returns the percentage of uppercase letters in a string.",
    "code": "```haskell\npercentageUppercase :: String -> Double\npercentageUppercase str = \n    let totalChars = fromIntegral (length str)\n        uppercaseChars = fromIntegral (length (filter (`elem` ['A'..'Z']) str))\n    in if totalChars == 0 then 0 else (uppercaseChars / totalChars) * 100\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns it with each word capitalized.",
    "code": "```haskell\nimport Data.Char (toUpper)\n\ncapitalizeWords :: String -> String\ncapitalizeWords = unwords . map capitalize . words\n  where capitalize (x:xs) = toUpper x : xs\n        capitalize []     = []\n```"
  },
  {
    "task": "Write a function that takes a list and returns the difference between the max and min values.",
    "code": "```haskell\ndifferenceMaxMin :: (Ord a, Num a) => [a] -> a\ndifferenceMaxMin xs = maximum xs - minimum xs\n```"
  },
  {
    "task": "Create a function that returns a list containing the first n prime numbers.",
    "code": "```haskell\nisPrime :: Int -> Bool\nisPrime n | n < 2 = False\n          | otherwise = null [x | x <- [2..isqrt n], n `mod` x == 0]\n  where\n    isqrt = floor . sqrt . fromIntegral\n\nfirstNPrimes :: Int -> [Int]\nfirstNPrimes n = take n [x | x <- [2..], isPrime x]\n```"
  },
  {
    "task": "Develop a function that receives a dictionary and returns a new dictionary with keys and values swapped.",
    "code": "```haskell\nimport qualified Data.Map as Map\n\nswapDict :: (Ord v) => Map.Map k v -> Map.Map v k\nswapDict = Map.fromList . map (\\(k, v) -> (v, k)) . Map.toList\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns the frequency of each word.",
    "code": "```haskell\nimport Data.List (group, sort)\nimport Data.Char (toLower)\nimport qualified Data.Map as Map\n\nwordFrequency :: String -> Map.Map String Int\nwordFrequency = Map.fromListWith (+) . map (\\w -> (w, 1)) . words . map toLower\n```"
  },
  {
    "task": "Write a function that takes two numbers and returns their greatest common divisor.",
    "code": "```haskell\ngcd' :: Integral a => a -> a -> a\ngcd' 0 b = b\ngcd' a 0 = a\ngcd' a b = gcd' b (a `mod` b)\n```"
  },
  {
    "task": "Create a function that returns the number of consonants in a given string.",
    "code": "```haskell\ncountConsonants :: String -> Int\ncountConsonants = length . filter (`elem` consonants)\n  where\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n```"
  },
  {
    "task": "Design a function that checks if a number is a perfect square and returns a boolean.",
    "code": "```haskell\nisPerfectSquare :: Int -> Bool\nisPerfectSquare n = (round . sqrt $ fromIntegral n) ^ 2 == n\n```"
  },
  {
    "task": "Implement a function that takes a list of numbers and returns the mode.",
    "code": "```haskell\nimport Data.List\nimport Data.Ord\n\nmode :: (Ord a) => [a] -> a\nmode xs = head $ maximumBy (comparing length) $ group $ sort xs\n```"
  },
  {
    "task": "Write a function that accepts a string and returns a new string with characters in reverse order.",
    "code": "```haskell\nreverseString :: String -> String\nreverseString = reverse\n```"
  },
  {
    "task": "Create a function that returns the sum of all even numbers in a list.",
    "code": "```haskell\nsumEvenNumbers :: [Int] -> Int\nsumEvenNumbers lst = sum (filter even lst)\n```"
  },
  {
    "task": "Develop a function that receives two lists and returns their union.",
    "code": "```haskell\nlistUnion :: Eq a => [a] -> [a] -> [a]\nlistUnion xs ys = xs ++ filter (`notElem` xs) ys\n```"
  },
  {
    "task": "Implement a function that takes a string and returns the number of unique characters.",
    "code": "```haskell\nimport Data.Set (fromList, size)\n\ncountUniqueChars :: String -> Int\ncountUniqueChars str = size $ fromList str\n```"
  },
  {
    "task": "Write a function that returns the cube of a given number.",
    "code": "```haskell\ncube :: Num a => a -> a\ncube x = x * x * x\n```"
  },
  {
    "task": "Create a function that calculates the power of a number given a base and exponent and returns the result.",
    "code": "```haskell\npower :: (Num a, Integral b) => a -> b -> a\npower base exponent = base ^ exponent\n```"
  },
  {
    "task": "Design a function that accepts a URL and returns its domain name.",
    "code": "```haskell\nimport Network.URI (parseURI, uriRegName, uriAuthority)\n\ngetDomainName :: String -> Maybe String\ngetDomainName url = do\n    uri <- parseURI url\n    auth <- uriAuthority uri\n    return $ uriRegName auth\n```"
  },
  {
    "task": "Implement a function that takes a sentence and returns it with each letter shifted by one in the alphabet.",
    "code": "```haskell\nimport Data.Char (chr, ord, isAlpha)\n\nshiftChar :: Char -> Char\nshiftChar c\n  | isAlpha c = chr $ ord 'a' + mod (ord c - ord 'a' + 1) 26\n  | otherwise = c\n\nshiftSentence :: String -> String\nshiftSentence = map shiftChar\n```"
  },
  {
    "task": "Write a function that checks if a list is sorted and returns a boolean.",
    "code": "```haskell\nisSorted :: Ord a => [a] -> Bool\nisSorted [] = True\nisSorted [_] = True\nisSorted (x:y:xs) = x <= y && isSorted (y:xs)\n```"
  },
  {
    "task": "Create a function that returns the longest increasing subsequence in a list of numbers.",
    "code": "```haskell\nimport Data.List (tails, maximumBy)\nimport Data.Ord (comparing)\n\nlongestIncreasingSubsequence :: Ord a => [a] -> [a]\nlongestIncreasingSubsequence xs = maximumBy (comparing length) (filter increasing (subsequences xs))\n  where\n    increasing [] = True\n    increasing [_] = True\n    increasing (x:y:ys) = x < y && increasing (y:ys)\n\nsubsequences :: [a] -> [[a]]\nsubsequences [] = [[]]\nsubsequences (x:xs) = let tails' = subsequences xs in tails' ++ map (x:) tails'\n```"
  },
  {
    "task": "Develop a function that calculates and returns the compound interest for given principal, rate, and time.",
    "code": "```haskell\ncompoundInterest :: Double -> Double -> Int -> Double\ncompoundInterest principal rate time = principal * (1 + rate) ^ time\n```"
  },
  {
    "task": "Implement a function that accepts two strings and returns their longest common substring.",
    "code": "```haskell\nlongestCommonSubstring :: String -> String -> String\nlongestCommonSubstring s1 s2 = maximumBy (comparing length) [s | i <- [0..length s1 - 1], j <- [0..length s2 - 1], let s = commonPrefix (drop i s1) (drop j s2), not (null s)]\n  where\n    commonPrefix xs ys = map fst $ takeWhile (uncurry (==)) $ zip xs ys\n    maximumBy _ [] = []\n    maximumBy f xs = foldl1 (\\x y -> if f x y == GT then x else y) xs\n```"
  },
  {
    "task": "Write a function that takes a number and returns true if it is a palindrome.",
    "code": "```haskell\nisPalindrome :: Int -> Bool\nisPalindrome n = let s = show n in s == reverse s\n```"
  },
  {
    "task": "Create a function that returns the average length of words in a given sentence.",
    "code": "```haskell\naverageWordLength :: String -> Double\naverageWordLength sentence = totalLength / wordCount\n  where\n    wordsList = words sentence\n    wordCount = fromIntegral (length wordsList)\n    totalLength = fromIntegral (sum (map length wordsList))\n```"
  },
  {
    "task": "Design a function that checks if a string contains only digits and returns a boolean.",
    "code": "```haskell\nimport Data.Char (isDigit)\n\nisStringDigitsOnly :: String -> Bool\nisStringDigitsOnly = all isDigit\n```"
  },
  {
    "task": "Implement a function that receives a list of tuples and returns a list of the first elements.",
    "code": "```haskell\nfirstElements :: [(a, b)] -> [a]\nfirstElements = map fst\n```"
  },
  {
    "task": "Write a function that takes a year and returns the Chinese zodiac sign for that year.",
    "code": "```haskell\nchineseZodiac :: Int -> String\nchineseZodiac year = signs !! ((year - 4) `mod` 12)\n  where\n    signs = [\"Rat\", \"Ox\", \"Tiger\", \"Rabbit\", \"Dragon\", \"Snake\", \"Horse\", \"Goat\", \"Monkey\", \"Rooster\", \"Dog\", \"Pig\"]\n```"
  },
  {
    "task": "Create a function that returns the number of trailing zeros in a factorial of a given number.",
    "code": "```haskell\ntrailingZeros :: Integer -> Integer\ntrailingZeros n\n  | n < 0     = 0\n  | otherwise = sum $ takeWhile (>0) $ map (\\x -> n `div` (5^x)) [1..]\n```"
  },
  {
    "task": "Develop a function that accepts a list and returns a new list with elements multiplied by their index.",
    "code": "```haskell\nmultiplyByIndex :: [Int] -> [Int]\nmultiplyByIndex lst = [x * i | (x, i) <- zip lst [0..]]\n```"
  },
  {
    "task": "Implement a function that receives a string and returns a dictionary of word lengths.",
    "code": "```haskell\nimport Data.Map (Map)\nimport qualified Data.Map as Map\nimport Data.List.Split (wordsBy)\nimport Data.Char (isAlpha)\n\nwordLengths :: String -> Map String Int\nwordLengths s = Map.fromList [(word, length word) | word <- wordsBy (not . isAlpha) s]\n```"
  },
  {
    "task": "Write a function that takes a list of integers and returns a list of numbers that are divisible by 3.",
    "code": "```haskell\ndivisibleByThree :: [Int] -> [Int]\ndivisibleByThree xs = filter (\\x -> x `mod` 3 == 0) xs\n```"
  },
  {
    "task": "Create a function that returns the result of a quadratic equation given its coefficients.",
    "code": "```haskell\nquadraticEquation :: (Floating a, Ord a) => a -> a -> a -> (a, a)\nquadraticEquation a b c\n  | discriminant < 0 = error \"No real roots\"\n  | otherwise = ((-b + sqrt discriminant) / (2 * a), (-b - sqrt discriminant) / (2 * a))\n  where\n    discriminant = b * b - 4 * a * c\n```"
  },
  {
    "task": "Design a function that checks if two lists have any elements in common and returns a boolean.",
    "code": "```haskell\nhaveCommonElements :: Eq a => [a] -> [a] -> Bool\nhaveCommonElements xs ys = any (`elem` ys) xs\n```"
  },
  {
    "task": "Implement a function that accepts a list and returns the sum of its elements using recursion.",
    "code": "```haskell\nsumList :: Num a => [a] -> a\nsumList [] = 0\nsumList (x:xs) = x + sumList xs\n```"
  },
  {
    "task": "Write a function that takes a list of numbers and returns the variance.",
    "code": "```haskell\nvariance :: (Floating a) => [a] -> a\nvariance xs = let mean = sum xs / fromIntegral (length xs)\n                  sqDiffs = map (\\x -> (x - mean) ^ 2) xs\n              in sum sqDiffs / fromIntegral (length xs)\n```"
  },
  {
    "task": "Create a function that returns the ASCII value of a given character.",
    "code": "```haskell\nasciiValue :: Char -> Int\nasciiValue c = fromEnum c\n```"
  },
  {
    "task": "Develop a function that takes a number and returns the number of bits required for its binary representation.",
    "code": "```haskell\nbitsRequired :: Int -> Int\nbitsRequired n = length (toBinary n)\n  where\n    toBinary 0 = \"\"\n    toBinary x = toBinary (x `div` 2) ++ show (x `mod` 2)\n```"
  }
]