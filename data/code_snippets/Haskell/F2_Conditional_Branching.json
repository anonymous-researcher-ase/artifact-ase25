[
  {
    "task": "Write a program that checks if a number is even or odd and outputs the result.",
    "code": "```haskell\ncheckEvenOrOdd :: Int -> String\ncheckEvenOrOdd n =\n  if even n\n    then \"Even\"\n    else \"Odd\"\n\nmain :: IO ()\nmain = do\n  putStrLn \"Enter a number:\"\n  input <- getLine\n  let number = read input :: Int\n  putStrLn $ checkEvenOrOdd number\n```"
  },
  {
    "task": "Create a function that determines if a given year is a leap year.",
    "code": "```haskell\nisLeapYear :: Int -> Bool\nisLeapYear year\n  | year `mod` 400 == 0 = True\n  | year `mod` 100 == 0 = False\n  | year `mod` 4 == 0 = True\n  | otherwise = False\n```"
  },
  {
    "task": "Develop a script that categorizes an input number as positive, negative, or zero.",
    "code": "```haskell\ncategorizeNumber :: Int -> String\ncategorizeNumber n\n  | n > 0     = \"positive\"\n  | n < 0     = \"negative\"\n  | otherwise = \"zero\"\n\nmain :: IO ()\nmain = do\n  putStrLn \"Enter a number:\"\n  input <- getLine\n  let number = read input :: Int\n  putStrLn $ \"The number is \" ++ categorizeNumber number\n```"
  },
  {
    "task": "Implement a system that grants access only if a correct password and username are provided.",
    "code": "```haskell\ngrantAccess :: String -> String -> String\ngrantAccess username password\n  | username == \"admin\" && password == \"secret\" = \"Access Granted\"\n  | otherwise = \"Access Denied\"\n\nmain :: IO ()\nmain = do\n  putStrLn \"Enter Username:\"\n  user <- getLine\n  putStrLn \"Enter Password:\"\n  pass <- getLine\n  putStrLn (grantAccess user pass)\n```"
  },
  {
    "task": "Design a program that outputs 'Fizz' for numbers divisible by 3, 'Buzz' for numbers divisible by 5, and 'FizzBuzz' for numbers divisible by both.",
    "code": "```haskell\nfizzBuzz :: Int -> String\nfizzBuzz n\n  | n `mod` 15 == 0 = \"FizzBuzz\"\n  | n `mod` 3 == 0  = \"Fizz\"\n  | n `mod` 5 == 0  = \"Buzz\"\n  | otherwise       = show n\n\nmain :: IO ()\nmain = mapM_ (putStrLn . fizzBuzz) [1..100]\n```"
  },
  {
    "task": "Write a function to determine if a character is a vowel or a consonant.",
    "code": "```haskell\nisVowelOrConsonant :: Char -> String\nisVowelOrConsonant c\n  | c `elem` \"aeiouAEIOU\" = \"Vowel\"\n  | c `elem` ['a'..'z'] || c `elem` ['A'..'Z'] = \"Consonant\"\n  | otherwise = \"Not a letter\"\n```"
  },
  {
    "task": "Create a program that assigns letter grades based on numerical scores.",
    "code": "```haskell\nassignGrade :: Int -> String\nassignGrade score\n  | score >= 90 = \"A\"\n  | score >= 80 = \"B\"\n  | score >= 70 = \"C\"\n  | score >= 60 = \"D\"\n  | otherwise   = \"F\"\n\nmain :: IO ()\nmain = do\n  putStrLn \"Enter the numerical score:\"\n  input <- getLine\n  let score = read input :: Int\n  putStrLn $ \"The grade is: \" ++ assignGrade score\n```"
  },
  {
    "task": "Develop a routine that suggests clothing based on the current temperature.",
    "code": "```haskell\nsuggestClothing :: Int -> String\nsuggestClothing temperature\n    | temperature < 0  = \"Wear a heavy coat, gloves, and a scarf.\"\n    | temperature < 10 = \"Wear a coat and a warm hat.\"\n    | temperature < 20 = \"Wear a sweater or a light jacket.\"\n    | temperature < 30 = \"Wear a t-shirt and jeans.\"\n    | otherwise        = \"Wear shorts and a t-shirt.\"\n```"
  },
  {
    "task": "Implement a system that checks if a user is an adult or a minor based on their age.",
    "code": "```haskell\ncheckAge :: Int -> String\ncheckAge age = if age >= 18 then \"Adult\" else \"Minor\"\n```"
  },
  {
    "task": "Design a program that validates if a triangle can exist based on its side lengths.",
    "code": "```haskell\nisValidTriangle :: (Ord a, Num a) => a -> a -> a -> Bool\nisValidTriangle a b c = \n    a + b > c && a + c > b && b + c > a\n\nmain :: IO ()\nmain = do\n    putStrLn \"Enter the lengths of the three sides of the triangle:\"\n    a <- readLn\n    b <- readLn\n    c <- readLn\n    if isValidTriangle a b c\n        then putStrLn \"The triangle is valid.\"\n        else putStrLn \"The triangle is not valid.\"\n```"
  },
  {
    "task": "Write a function that determines the largest of three input numbers.",
    "code": "```haskell\nlargestOfThree :: (Ord a) => a -> a -> a -> a\nlargestOfThree x y z\n  | x >= y && x >= z = x\n  | y >= x && y >= z = y\n  | otherwise        = z\n```"
  },
  {
    "task": "Create a program that checks if a string is a palindrome.",
    "code": "```haskell\nisPalindrome :: String -> Bool\nisPalindrome str = str == reverse str\n\nmain :: IO ()\nmain = do\n    putStrLn \"Enter a string:\"\n    input <- getLine\n    if isPalindrome input\n        then putStrLn \"The string is a palindrome.\"\n        else putStrLn \"The string is not a palindrome.\"\n```"
  },
  {
    "task": "Develop a routine that calculates the total cost with a discount applied if applicable.",
    "code": "```haskell\ncalculateTotalCost :: Double -> Double -> Double\ncalculateTotalCost price discountRate\n  | discountRate > 0 = price * (1 - discountRate)\n  | otherwise = price\n```"
  },
  {
    "task": "Implement a system that checks if a person is eligible to vote based on age and citizenship.",
    "code": "```haskell\nisEligibleToVote :: Int -> Bool -> Bool\nisEligibleToVote age isCitizen =\n  if age >= 18 && isCitizen\n  then True\n  else False\n```"
  },
  {
    "task": "Design a function that returns the day of the week given a number from 1 to 7.",
    "code": "```haskell\ndayOfWeek :: Int -> String\ndayOfWeek n\n  | n == 1 = \"Monday\"\n  | n == 2 = \"Tuesday\"\n  | n == 3 = \"Wednesday\"\n  | n == 4 = \"Thursday\"\n  | n == 5 = \"Friday\"\n  | n == 6 = \"Saturday\"\n  | n == 7 = \"Sunday\"\n  | otherwise = \"Invalid day\"\n```"
  },
  {
    "task": "Write a program that determines if a word is found within a given sentence.",
    "code": "```haskell\nimport Data.List (isInfixOf)\n\nwordInSentence :: String -> String -> Bool\nwordInSentence word sentence = word `isInfixOf` sentence\n\nmain :: IO ()\nmain = do\n    putStrLn \"Enter a sentence:\"\n    sentence <- getLine\n    putStrLn \"Enter a word to search for:\"\n    word <- getLine\n    if wordInSentence word sentence\n       then putStrLn \"The word is in the sentence.\"\n       else putStrLn \"The word is not in the sentence.\"\n```"
  },
  {
    "task": "Create a script that checks if a number is within a specified range.",
    "code": "```haskell\ncheckNumberInRange :: Int -> Int -> Int -> String\ncheckNumberInRange num lower upper\n  | num >= lower && num <= upper = \"Number is within the range.\"\n  | otherwise = \"Number is out of range.\"\n\nmain :: IO ()\nmain = do\n  let number = 10\n      lowerBound = 5\n      upperBound = 15\n  putStrLn $ checkNumberInRange number lowerBound upperBound\n```"
  },
  {
    "task": "Develop a routine to decide if a user input is a valid email address.",
    "code": "```haskell\nimport Text.Regex.Posix\n\nisValidEmail :: String -> Bool\nisValidEmail email = email =~ \"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,}$\"\n```"
  },
  {
    "task": "Implement a program that categorizes a number as small, medium, or large.",
    "code": "```haskell\ncategorizeNumber :: (Ord a, Num a) => a -> String\ncategorizeNumber n\n  | n < 10    = \"small\"\n  | n < 100   = \"medium\"\n  | otherwise = \"large\"\n\nmain :: IO ()\nmain = do\n  let numbers = [1, 25, 150]\n  let categories = map categorizeNumber numbers\n  mapM_ putStrLn categories\n```"
  },
  {
    "task": "Design a function that outputs the season based on the month provided.",
    "code": "```haskell\nseasonFromMonth :: String -> String\nseasonFromMonth month = \n    case month of\n        \"December\" -> \"Winter\"\n        \"January\"  -> \"Winter\"\n        \"February\" -> \"Winter\"\n        \"March\"    -> \"Spring\"\n        \"April\"    -> \"Spring\"\n        \"May\"      -> \"Spring\"\n        \"June\"     -> \"Summer\"\n        \"July\"     -> \"Summer\"\n        \"August\"   -> \"Summer\"\n        \"September\" -> \"Autumn\"\n        \"October\"  -> \"Autumn\"\n        \"November\" -> \"Autumn\"\n        _          -> \"Invalid month\"\n```"
  },
  {
    "task": "Write a program that checks if a string contains only alphabetic characters.",
    "code": "```haskell\nimport Data.Char (isAlpha)\n\nisAlphabetic :: String -> Bool\nisAlphabetic str = all isAlpha str\n\nmain :: IO ()\nmain = do\n    putStrLn \"Enter a string:\"\n    input <- getLine\n    if isAlphabetic input\n        then putStrLn \"The string contains only alphabetic characters.\"\n        else putStrLn \"The string contains non-alphabetic characters.\"\n```"
  },
  {
    "task": "Create a routine that decides the type of triangle based on its angles.",
    "code": "```haskell\ntriangleType :: Int -> Int -> Int -> String\ntriangleType a b c\n    | a + b + c /= 180 = \"Not a triangle\"\n    | a <= 0 || b <= 0 || c <= 0 = \"Not a triangle\"\n    | a == 90 || b == 90 || c == 90 = \"Right triangle\"\n    | a > 90 || b > 90 || c > 90 = \"Obtuse triangle\"\n    | otherwise = \"Acute triangle\"\n```"
  },
  {
    "task": "Develop a program that suggests a meal based on the time of day.",
    "code": "```haskell\nimport Data.Time\n\nsuggestMeal :: IO ()\nsuggestMeal = do\n    currentTime <- getCurrentTime\n    let (hour, _, _) = toTimeOfDay (utctDayTime currentTime)\n    putStrLn $ case hour of\n        h | h >= 6 && h < 11 -> \"How about some breakfast?\"\n        h | h >= 11 && h < 17 -> \"It's time for lunch!\"\n        h | h >= 17 && h < 21 -> \"Dinner sounds good!\"\n        _ -> \"Maybe a late-night snack?\"\n\ntoTimeOfDay :: DiffTime -> (Int, Int, Int)\ntoTimeOfDay time = (hours, minutes, seconds)\n  where\n    totalSeconds = floor time\n    (hours, remainder) = totalSeconds `divMod` 3600\n    (minutes, seconds) = remainder `divMod` 60\n\nmain :: IO ()\nmain = suggestMeal\n```"
  },
  {
    "task": "Implement a function that determines if a point lies within a circle given its radius.",
    "code": "```haskell\nisPointInCircle :: (Floating a, Ord a) => a -> a -> a -> a -> Bool\nisPointInCircle radius x y centerX centerY =\n  let distanceSquared = (x - centerX) ^ 2 + (y - centerY) ^ 2\n  in distanceSquared <= radius ^ 2\n```"
  },
  {
    "task": "Design a script that calculates overtime pay based on hours worked.",
    "code": "```haskell\ncalculateOvertimePay :: Double -> Double -> Double\ncalculateOvertimePay hoursWorked hourlyRate\n  | hoursWorked > 40 = (hoursWorked - 40) * hourlyRate * 1.5\n  | otherwise = 0.0\n\nmain :: IO ()\nmain = do\n  putStrLn \"Enter hours worked:\"\n  hoursInput <- getLine\n  putStrLn \"Enter hourly rate:\"\n  rateInput <- getLine\n  let hoursWorked = read hoursInput :: Double\n  let hourlyRate = read rateInput :: Double\n  let overtimePay = calculateOvertimePay hoursWorked hourlyRate\n  putStrLn $ \"Overtime pay: $\" ++ show overtimePay\n```"
  },
  {
    "task": "Write a program that checks if two strings are anagrams of each other.",
    "code": "```haskell\nimport Data.List (sort)\n\nareAnagrams :: String -> String -> Bool\nareAnagrams str1 str2 = sort str1 == sort str2\n\nmain :: IO ()\nmain = do\n  let string1 = \"listen\"\n      string2 = \"silent\"\n  if areAnagrams string1 string2\n    then putStrLn \"The strings are anagrams.\"\n    else putStrLn \"The strings are not anagrams.\"\n```"
  },
  {
    "task": "Create a function that classifies numbers as prime or composite.",
    "code": "```haskell\nisPrime :: Int -> Bool\nisPrime n\n  | n <= 1 = False\n  | otherwise = null [x | x <- [2..isqrt n], n `mod` x == 0]\n  where\n    isqrt = floor . sqrt . fromIntegral\n\nclassifyNumber :: Int -> String\nclassifyNumber n\n  | isPrime n = \"Prime\"\n  | n > 1 = \"Composite\"\n  | otherwise = \"Neither\"\n\nmain :: IO ()\nmain = do\n  print $ classifyNumber 1    -- \"Neither\"\n  print $ classifyNumber 2    -- \"Prime\"\n  print $ classifyNumber 4    -- \"Composite\"\n  print $ classifyNumber 17   -- \"Prime\"\n  print $ classifyNumber 20   -- \"Composite\"\n```"
  },
  {
    "task": "Develop a routine to determine if a number is a power of two.",
    "code": "```haskell\nisPowerOfTwo :: Integer -> Bool\nisPowerOfTwo n\n  | n <= 0    = False\n  | otherwise = (n .&. (n - 1)) == 0\n```"
  },
  {
    "task": "Implement a program that checks if a list is sorted in ascending order.",
    "code": "```haskell\nisSorted :: Ord a => [a] -> Bool\nisSorted [] = True\nisSorted [_] = True\nisSorted (x:y:xs)\n  | x > y     = False\n  | otherwise = isSorted (y:xs)\n```"
  },
  {
    "task": "Design a function that suggests a sport based on the weather conditions.",
    "code": "```haskell\nsuggestSport :: String -> String\nsuggestSport weather\n  | weather == \"sunny\"   = \"Go for a run\"\n  | weather == \"rainy\"   = \"Play indoor basketball\"\n  | weather == \"snowy\"   = \"Go skiing\"\n  | weather == \"windy\"   = \"Try kite surfing\"\n  | otherwise            = \"Check weather conditions\"\n```"
  },
  {
    "task": "Write a program that determines if an entered date is valid.",
    "code": "```haskell\nimport Text.Read (readMaybe)\nimport Data.Time.Calendar (fromGregorianValid)\n\nisValidDate :: Integer -> Int -> Int -> Bool\nisValidDate year month day = case fromGregorianValid year month day of\n    Just _  -> True\n    Nothing -> False\n\nmain :: IO ()\nmain = do\n    putStrLn \"Enter year:\"\n    yearInput <- getLine\n    putStrLn \"Enter month:\"\n    monthInput <- getLine\n    putStrLn \"Enter day:\"\n    dayInput <- getLine\n\n    let maybeYear = readMaybe yearInput :: Maybe Integer\n    let maybeMonth = readMaybe monthInput :: Maybe Int\n    let maybeDay = readMaybe dayInput :: Maybe Int\n\n    case (maybeYear, maybeMonth, maybeDay) of\n        (Just year, Just month, Just day) ->\n            if isValidDate year month day\n                then putStrLn \"The date is valid.\"\n                else putStrLn \"The date is invalid.\"\n        _ -> putStrLn \"Invalid input.\"\n```"
  },
  {
    "task": "Create a script to decide which of two products to buy based on price and reviews.",
    "code": "```haskell\ntype Product = (String, Double, Double) -- (Name, Price, Rating)\n\ndecidePurchase :: Product -> Product -> String\ndecidePurchase product1@(name1, price1, rating1) product2@(name2, price2, rating2)\n    | rating1 > rating2 = name1\n    | rating2 > rating1 = name2\n    | price1 < price2 = name1\n    | price2 < price1 = name2\n    | otherwise = \"Either product\"\n\nmain :: IO ()\nmain = do\n    let product1 = (\"Product A\", 100.0, 4.5)\n    let product2 = (\"Product B\", 95.0, 4.5)\n    putStrLn $ \"You should buy: \" ++ decidePurchase(product1, product2)\n```"
  },
  {
    "task": "Develop a function that categorizes a person\u2019s BMI as underweight, normal, overweight, or obese.",
    "code": "```haskell\nbmiCategory :: Double -> String\nbmiCategory bmi\n  | bmi < 18.5  = \"Underweight\"\n  | bmi < 25.0  = \"Normal\"\n  | bmi < 30.0  = \"Overweight\"\n  | otherwise   = \"Obese\"\n```"
  },
  {
    "task": "Implement a program that checks if a credit card number is valid using the Luhn algorithm.",
    "code": "```haskell\nmodule Main where\n\nimport Data.Char (digitToInt, isDigit)\n\nluhnDouble :: Int -> Int\nluhnDouble n = let d = n * 2 in if d > 9 then d - 9 else d\n\nluhnAlgorithm :: String -> Bool\nluhnAlgorithm ccNumber\n    | all isDigit ccNumber =\n        let digits = map digitToInt (reverse ccNumber)\n            sumDigits = sum $ zipWith ($) (cycle [id, luhnDouble]) digits\n        in sumDigits `mod` 10 == 0\n    | otherwise = False\n\nmain :: IO ()\nmain = do\n    putStrLn \"Enter a credit card number:\"\n    ccNumber <- getLine\n    if luhnAlgorithm ccNumber\n        then putStrLn \"Credit card number is valid.\"\n        else putStrLn \"Credit card number is invalid.\"\n```"
  },
  {
    "task": "Design a routine that outputs a greeting based on the current time of day.",
    "code": "```haskell\nimport Data.Time\n\ngreeting :: IO ()\ngreeting = do\n    currentTime <- getCurrentTime\n    let (TimeOfDay hour _ _) = localTimeOfDay $ utcToLocalTime utc currentTime\n    putStrLn $ if hour < 12\n               then \"Good morning!\"\n               else if hour < 18\n                    then \"Good afternoon!\"\n                    else \"Good evening!\"\n```"
  },
  {
    "task": "Write a program that determines if a given word can be formed with a set of letters.",
    "code": "```haskell\nimport Data.List (delete)\n\ncanFormWord :: String -> String -> Bool\ncanFormWord [] _ = True\ncanFormWord (x:xs) letters =\n    if x `elem` letters\n        then canFormWord xs (delete x letters)\n        else False\n\nmain :: IO ()\nmain = do\n    let word = \"hello\"\n    let letters = \"ehlloo\"\n    print (canFormWord word letters)\n```"
  },
  {
    "task": "Create a function that outputs the appropriate greeting based on the day of the week.",
    "code": "```haskell\ngreeting :: String -> String\ngreeting day =\n  case day of\n    \"Monday\"    -> \"Start of the week! Hello!\"\n    \"Tuesday\"   -> \"Happy Tuesday!\"\n    \"Wednesday\" -> \"Midweek greetings!\"\n    \"Thursday\"  -> \"Almost weekend!\"\n    \"Friday\"    -> \"Happy Friday!\"\n    \"Saturday\"  -> \"Enjoy your weekend!\"\n    \"Sunday\"    -> \"Relax, it's Sunday!\"\n    _           -> \"Invalid day!\"\n```"
  },
  {
    "task": "Develop a system to determine if a person qualifies for a senior citizen discount.",
    "code": "```haskell\nqualifiesForDiscount :: Int -> Bool\nqualifiesForDiscount age = if age >= 65 then True else False\n```"
  },
  {
    "task": "Implement a function that checks if a number is a perfect square.",
    "code": "```haskell\nisPerfectSquare :: Integral a => a -> Bool\nisPerfectSquare n\n  | n < 0     = False\n  | otherwise = (root * root) == n\n  where root = floor (sqrt (fromIntegral n))\n```"
  },
  {
    "task": "Design a program that outputs the correct shipping cost based on weight and distance.",
    "code": "```haskell\ncalculateShippingCost :: Double -> Double -> Double\ncalculateShippingCost weight distance\n  | weight <= 0 || distance <= 0 = error \"Invalid weight or distance\"\n  | weight <= 1.0 = distance * 5.0\n  | weight <= 5.0 = distance * 4.0\n  | weight <= 10.0 = distance * 3.0\n  | otherwise = distance * 2.0\n\nmain :: IO ()\nmain = do\n  putStrLn \"Enter the weight of the package:\"\n  weightInput <- getLine\n  putStrLn \"Enter the distance to be shipped:\"\n  distanceInput <- getLine\n  let weight = read weightInput :: Double\n  let distance = read distanceInput :: Double\n  let cost = calculateShippingCost weight distance\n  putStrLn $ \"The shipping cost is: $\" ++ show cost\n```"
  },
  {
    "task": "Write a routine that chooses the correct pronoun based on gender input.",
    "code": "```haskell\nchoosePronoun :: String -> String\nchoosePronoun gender\n  | gender == \"male\"   = \"he\"\n  | gender == \"female\" = \"she\"\n  | otherwise          = \"they\"\n```"
  },
  {
    "task": "Create a program that checks if a user input is a palindrome number.",
    "code": "```haskell\nimport Control.Monad (forever)\n\nisPalindrome :: Integer -> Bool\nisPalindrome n = let s = show n in s == reverse s\n\nmain :: IO ()\nmain = forever $ do\n    putStrLn \"Enter a number:\"\n    input <- getLine\n    let number = read input :: Integer\n    if isPalindrome number\n        then putStrLn \"The number is a palindrome.\"\n        else putStrLn \"The number is not a palindrome.\"\n```"
  },
  {
    "task": "Develop a script to decide if a number is a perfect number.",
    "code": "```haskell\nisPerfectNumber :: Int -> Bool\nisPerfectNumber n\n  | n < 2     = False\n  | otherwise = sum (filter (\\x -> n `mod` x == 0) [1..n-1]) == n\n\nmain :: IO ()\nmain = do\n  let number = 28\n  if isPerfectNumber number\n    then putStrLn $ show number ++ \" is a perfect number.\"\n    else putStrLn $ show number ++ \" is not a perfect number.\"\n```"
  },
  {
    "task": "Implement a system that determines the winner in a rock-paper-scissors game.",
    "code": "```haskell\ndetermineWinner :: String -> String -> String\ndetermineWinner player1 player2\n    | player1 == player2 = \"It's a tie!\"\n    | (player1 == \"rock\" && player2 == \"scissors\") || \n      (player1 == \"scissors\" && player2 == \"paper\") || \n      (player1 == \"paper\" && player2 == \"rock\") = \"Player 1 wins!\"\n    | otherwise = \"Player 2 wins!\"\n```"
  },
  {
    "task": "Design a function that suggests a movie genre based on user mood.",
    "code": "```haskell\nsuggestGenre :: String -> String\nsuggestGenre mood\n    | mood == \"happy\"   = \"Comedy\"\n    | mood == \"sad\"     = \"Drama\"\n    | mood == \"excited\" = \"Action\"\n    | mood == \"relaxed\" = \"Romance\"\n    | mood == \"curious\" = \"Mystery\"\n    | mood == \"scared\"  = \"Horror\"\n    | otherwise         = \"Documentary\"\n```"
  },
  {
    "task": "Write a program that checks if a file extension is valid for an image file.",
    "code": "```haskell\nimport System.FilePath (takeExtension)\nimport Data.Char (toLower)\n\nisValidImageExtension :: String -> Bool\nisValidImageExtension filePath =\n  let ext = map toLower (takeExtension filePath)\n  in ext `elem` [\".jpg\", \".jpeg\", \".png\", \".gif\", \".bmp\", \".tiff\"]\n\nmain :: IO ()\nmain = do\n  putStrLn \"Enter the file path:\"\n  filePath <- getLine\n  if isValidImageExtension filePath\n    then putStrLn \"The file has a valid image extension.\"\n    else putStrLn \"The file does not have a valid image extension.\"\n```"
  },
  {
    "task": "Create a routine that decides the appropriate currency symbol based on country.",
    "code": "```haskell\ncurrencySymbol :: String -> String\ncurrencySymbol country = case country of\n    \"USA\" -> \"$\"\n    \"UK\" -> \"\u00a3\"\n    \"Japan\" -> \"\u00a5\"\n    \"India\" -> \"\u20b9\"\n    \"Eurozone\" -> \"\u20ac\"\n    _ -> \"Unknown\"\n```"
  },
  {
    "task": "Develop a function that determines if a string is a valid palindrome ignoring spaces and punctuation.",
    "code": "```haskell\nimport Data.Char (isAlpha, toLower)\n\nisPalindrome :: String -> Bool\nisPalindrome s = let filtered = map toLower (filter isAlpha s)\n                 in filtered == reverse filtered\n```"
  },
  {
    "task": "Implement a program that checks if a number is in the Fibonacci sequence.",
    "code": "```haskell\nisFibonacci :: Integer -> Bool\nisFibonacci n = n == 0 || isPerfectSquare (5 * n * n + 4) || isPerfectSquare (5 * n * n - 4)\n  where\n    isPerfectSquare x = let s = floor (sqrt (fromIntegral x)) in s * s == x\n```"
  },
  {
    "task": "Design a script to calculate the correct tip based on service quality rating.",
    "code": "```haskell\ncalculateTip :: Double -> String -> Double\ncalculateTip billAmount serviceQuality\n  | serviceQuality == \"excellent\" = billAmount * 0.20\n  | serviceQuality == \"good\"      = billAmount * 0.15\n  | serviceQuality == \"average\"   = billAmount * 0.10\n  | serviceQuality == \"poor\"      = billAmount * 0.05\n  | otherwise                     = 0.0\n\nmain :: IO ()\nmain = do\n  putStrLn \"Enter the bill amount:\"\n  billInput <- getLine\n  putStrLn \"Enter the service quality (excellent, good, average, poor):\"\n  qualityInput <- getLine\n  let billAmount = read billInput :: Double\n  let tip = calculateTip billAmount qualityInput\n  putStrLn $ \"The calculated tip is: \" ++ show tip\n```"
  },
  {
    "task": "Write a function that determines if a year is a century year.",
    "code": "```haskell\nisCenturyYear :: Int -> Bool\nisCenturyYear year = year `mod` 100 == 0\n```"
  },
  {
    "task": "Create a program that checks if a date falls on a weekend.",
    "code": "```haskell\nimport Data.Time.Calendar\nimport Data.Time.Calendar.WeekDate\n\nisWeekend :: Day -> Bool\nisWeekend date =\n  let (_, _, weekday) = toWeekDate date\n  in weekday == 6 || weekday == 7\n\nmain :: IO ()\nmain = do\n  let date = fromGregorian 2023 10 14\n  putStrLn $ if isWeekend date then \"Weekend\" else \"Weekday\"\n```"
  },
  {
    "task": "Develop a routine that suggests a book based on genre preference.",
    "code": "```haskell\nsuggestBook :: String -> String\nsuggestBook genre\n  | genre == \"Science Fiction\" = \"Dune by Frank Herbert\"\n  | genre == \"Fantasy\" = \"The Hobbit by J.R.R. Tolkien\"\n  | genre == \"Mystery\" = \"The Da Vinci Code by Dan Brown\"\n  | genre == \"Romance\" = \"Pride and Prejudice by Jane Austen\"\n  | genre == \"Horror\" = \"The Shining by Stephen King\"\n  | otherwise = \"No suggestion available for this genre\"\n```"
  },
  {
    "task": "Implement a system that determines if a student passes or fails based on their grades.",
    "code": "```haskell\ndeterminePassOrFail :: Int -> String\ndeterminePassOrFail grade\n  | grade >= 50 = \"Pass\"\n  | otherwise   = \"Fail\"\n\nmain :: IO ()\nmain = do\n  putStrLn \"Enter the student's grade:\"\n  input <- getLine\n  let grade = read input :: Int\n  putStrLn $ \"The student has \" ++ determinePassOrFail grade\n```"
  },
  {
    "task": "Design a function to validate if a string is a valid URL.",
    "code": "```haskell\nimport Network.URI (parseURI)\n\nisValidURL :: String -> Bool\nisValidURL url = case parseURI url of\n    Just _  -> True\n    Nothing -> False\n```"
  },
  {
    "task": "Write a program that checks if a point is inside a rectangle given its coordinates.",
    "code": "```haskell\nisPointInsideRectangle :: (Ord a, Num a) => (a, a) -> (a, a) -> (a, a) -> Bool\nisPointInsideRectangle (x, y) (x1, y1) (x2, y2) =\n  let (left, right) = if x1 < x2 then (x1, x2) else (x2, x1)\n      (bottom, top) = if y1 < y2 then (y1, y2) else (y2, y1)\n  in x >= left && x <= right && y >= bottom && y <= top\n```"
  },
  {
    "task": "Create a script to determine if a word can be constructed from a given set of letters.",
    "code": "```haskell\nimport Data.List (delete)\n\ncanConstruct :: String -> String -> Bool\ncanConstruct [] _ = True\ncanConstruct (x:xs) letters\n  | x `elem` letters = canConstruct xs (delete x letters)\n  | otherwise = False\n\nmain :: IO ()\nmain = do\n  putStrLn \"Enter the word:\"\n  word <- getLine\n  putStrLn \"Enter the set of letters:\"\n  letters <- getLine\n  if canConstruct word letters\n    then putStrLn \"The word can be constructed from the letters.\"\n    else putStrLn \"The word cannot be constructed from the letters.\"\n```"
  },
  {
    "task": "Develop a routine that calculates insurance premiums based on age and driving record.",
    "code": "```haskell\ncalculateInsurancePremium :: Int -> Bool -> Double\ncalculateInsurancePremium age hasGoodDrivingRecord\n  | age < 25 && not hasGoodDrivingRecord = 2000.0\n  | age < 25 && hasGoodDrivingRecord     = 1500.0\n  | age >= 25 && not hasGoodDrivingRecord = 1000.0\n  | otherwise                            = 750.0\n```"
  },
  {
    "task": "Implement a program that checks for palindrome sentences.",
    "code": "```haskell\nimport Data.Char (isAlpha, toLower)\n\nisPalindrome :: String -> Bool\nisPalindrome sentence =\n    let cleaned = map toLower $ filter isAlpha sentence\n    in cleaned == reverse cleaned\n\nmain :: IO ()\nmain = do\n    putStrLn \"Enter a sentence:\"\n    sentence <- getLine\n    if isPalindrome sentence\n        then putStrLn \"The sentence is a palindrome.\"\n        else putStrLn \"The sentence is not a palindrome.\"\n```"
  },
  {
    "task": "Design a function to evaluate if a string contains balanced parentheses.",
    "code": "```haskell\nisBalanced :: String -> Bool\nisBalanced = go 0\n  where\n    go count [] = count == 0\n    go count (x:xs)\n      | count < 0 = False\n      | x == '('  = go (count + 1) xs\n      | x == ')'  = go (count - 1) xs\n      | otherwise = go count xs\n```"
  },
  {
    "task": "Write a program that suggests a pet based on living conditions and preferences.",
    "code": "```haskell\nsuggestPet :: String -> String -> String\nsuggestPet livingCondition preference\n    | livingCondition == \"apartment\" && preference == \"low maintenance\" = \"Consider a fish or a hamster.\"\n    | livingCondition == \"apartment\" && preference == \"companionship\" = \"Consider a cat or a small dog.\"\n    | livingCondition == \"house\" && preference == \"guard\" = \"Consider a large dog.\"\n    | livingCondition == \"house\" && preference == \"exotic\" = \"Consider a snake or a parrot.\"\n    | livingCondition == \"farm\" && preference == \"working\" = \"Consider a horse or a sheepdog.\"\n    | otherwise = \"Consider visiting a local shelter for advice on suitable pets.\"\n\nmain :: IO ()\nmain = do\n    putStrLn \"Enter your living condition (apartment/house/farm):\"\n    livingCondition <- getLine\n    putStrLn \"Enter your preference (low maintenance/companionship/guard/exotic/working):\"\n    preference <- getLine\n    putStrLn $ suggestPet livingCondition preference\n```"
  },
  {
    "task": "Create a routine that determines if a phone number is valid based on format.",
    "code": "```haskell\nisValidPhoneNumber :: String -> Bool\nisValidPhoneNumber phoneNumber\n  | length phoneNumber == 10 && all isDigit phoneNumber = True\n  | length phoneNumber == 12 && checkWithDashes phoneNumber = True\n  | otherwise = False\n  where\n    checkWithDashes pn = all isDigit (take 3 pn) && pn !! 3 == '-' &&\n                         all isDigit (take 3 (drop 4 pn)) && pn !! 7 == '-' &&\n                         all isDigit (drop 8 pn)\n```"
  },
  {
    "task": "Develop a function that checks if two rectangles overlap.",
    "code": "```haskell\ntype Point = (Int, Int)\ntype Rectangle = (Point, Point)\n\noverlap :: Rectangle -> Rectangle -> Bool\noverlap ((x1, y1), (x2, y2)) ((x3, y3), (x4, y4))\n  | x1 >= x4 || x3 >= x2 = False\n  | y1 >= y4 || y3 >= y2 = False\n  | otherwise = True\n```"
  },
  {
    "task": "Implement a program that chooses a beverage based on user input time.",
    "code": "```haskell\nimport System.IO\n\nmain :: IO ()\nmain = do\n    putStrLn \"Enter the time in 24-hour format (e.g., 1300 for 1:00 PM):\"\n    hFlush stdout\n    timeInput <- getLine\n    let time = read timeInput :: Int\n    let beverage = chooseBeverage time\n    putStrLn $ \"Suggested beverage: \" ++ beverage\n\nchooseBeverage :: Int -> String\nchooseBeverage time\n    | time >= 600 && time < 1200 = \"Coffee\"\n    | time >= 1200 && time < 1700 = \"Tea\"\n    | time >= 1700 && time < 2100 = \"Juice\"\n    | otherwise = \"Water\"\n```"
  },
  {
    "task": "Design a script to determine if a URL is secure (HTTPS).",
    "code": "```haskell\nisSecureURL :: String -> Bool\nisSecureURL url = take 5 url == \"https:\"\n```"
  },
  {
    "task": "Write a function that outputs different messages based on the input number's divisibility.",
    "code": "```haskell\ndivisibilityMessage :: Int -> String\ndivisibilityMessage n\n    | n `mod` 3 == 0 && n `mod` 5 == 0 = \"Divisible by both 3 and 5\"\n    | n `mod` 3 == 0 = \"Divisible by 3\"\n    | n `mod` 5 == 0 = \"Divisible by 5\"\n    | otherwise = \"Not divisible by 3 or 5\"\n```"
  },
  {
    "task": "Create a program to decide if a person should bring an umbrella based on the weather forecast.",
    "code": "```haskell\nshouldBringUmbrella :: String -> String\nshouldBringUmbrella forecast\n  | forecast == \"rain\" = \"Yes, bring an umbrella.\"\n  | forecast == \"clear\" = \"No need for an umbrella.\"\n  | forecast == \"cloudy\" = \"Better safe than sorry, bring an umbrella just in case.\"\n  | otherwise = \"Weather forecast unclear, decide accordingly.\"\n\nmain :: IO ()\nmain = do\n  putStrLn \"Enter the weather forecast (rain, clear, cloudy):\"\n  forecast <- getLine\n  putStrLn (shouldBringUmbrella forecast)\n```"
  },
  {
    "task": "Develop a routine that checks if a chess move is valid.",
    "code": "```haskell\ntype Position = (Int, Int)\ntype Move = (Position, Position)\n\nisValidPosition :: Position -> Bool\nisValidPosition (x, y) = x >= 1 && x <= 8 && y >= 1 && y <= 8\n\nisValidMove :: Move -> Bool\nisValidMove (start, end) =\n  isValidPosition start && isValidPosition end && start /= end\n\nisValidChessMove :: Move -> Bool\nisValidChessMove move@(start, end)\n  | not (isValidMove move) = False\n  | otherwise = case move of\n      ((x1, y1), (x2, y2))\n        -- Example for a knight move\n        | abs (x1 - x2) == 2 && abs (y1 - y2) == 1 -> True\n        | abs (x1 - x2) == 1 && abs (y1 - y2) == 2 -> True\n        -- Example for a rook move\n        | x1 == x2 || y1 == y2 -> True\n        -- Example for a bishop move\n        | abs (x1 - x2) == abs (y1 - y2) -> True\n        -- Example for a queen move\n        | x1 == x2 || y1 == y2 || abs (x1 - x2) == abs (y1 - y2) -> True\n        -- Example for a king move\n        | abs (x1 - x2) <= 1 && abs (y1 - y2) <= 1 -> True\n        -- Example for a pawn move (simplified, only forward move)\n        | (x1 == x2 && y2 == y1 + 1) -> True\n        | otherwise -> False\n```"
  },
  {
    "task": "Implement a program that outputs the number of days in a given month.",
    "code": "```haskell\nmodule Main where\n\ndaysInMonth :: Int -> Int -> Int\ndaysInMonth month year\n    | month == 2 && isLeapYear year = 29\n    | month == 2                    = 28\n    | month `elem` [4, 6, 9, 11]    = 30\n    | month `elem` [1, 3, 5, 7, 8, 10, 12] = 31\n    | otherwise = error \"Invalid month\"\n\nisLeapYear :: Int -> Bool\nisLeapYear year\n    | year `mod` 400 == 0 = True\n    | year `mod` 100 == 0 = False\n    | year `mod` 4 == 0   = True\n    | otherwise           = False\n\nmain :: IO ()\nmain = do\n    putStrLn \"Enter month (1-12):\"\n    month <- readLn\n    putStrLn \"Enter year:\"\n    year <- readLn\n    let days = daysInMonth month year\n    putStrLn $ \"Number of days: \" ++ show days\n```"
  },
  {
    "task": "Design a function that validates if a string is a valid hexadecimal number.",
    "code": "```haskell\nisValidHex :: String -> Bool\nisValidHex = all isHexDigit\n\nisHexDigit :: Char -> Bool\nisHexDigit c\n  | c >= '0' && c <= '9' = True\n  | c >= 'a' && c <= 'f' = True\n  | c >= 'A' && c <= 'F' = True\n  | otherwise            = False\n```"
  },
  {
    "task": "Write a script that checks if a word is present in a list of predefined words.",
    "code": "```haskell\ncheckWordPresence :: String -> Bool\ncheckWordPresence word = word `elem` predefinedWords\n  where\n    predefinedWords = [\"apple\", \"banana\", \"cherry\", \"date\", \"fig\"]\n```"
  },
  {
    "task": "Create a routine to decide the correct tax bracket for a given income.",
    "code": "```haskell\ntaxBracket :: Double -> String\ntaxBracket income\n  | income <= 9875 = \"10%\"\n  | income <= 40125 = \"12%\"\n  | income <= 85525 = \"22%\"\n  | income <= 163300 = \"24%\"\n  | income <= 207350 = \"32%\"\n  | income <= 518400 = \"35%\"\n  | otherwise = \"37%\"\n\nmain :: IO ()\nmain = do\n  putStrLn \"Enter your income:\"\n  input <- getLine\n  let income = read input :: Double\n  putStrLn $ \"Your tax bracket is: \" ++ taxBracket income\n```"
  },
  {
    "task": "Develop a function that determines if a point is within a triangle.",
    "code": "```haskell\ntype Point = (Double, Double)\n\nisPointInTriangle :: Point -> Point -> Point -> Point -> Bool\nisPointInTriangle p a b c =\n    let sign (px, py) (qx, qy) (rx, ry) = (px - rx) * (qy - ry) - (qx - rx) * (py - ry)\n        d1 = sign p a b\n        d2 = sign p b c\n        d3 = sign p c a\n        has_neg = (d1 < 0) || (d2 < 0) || (d3 < 0)\n        has_pos = (d1 > 0) || (d2 > 0) || (d3 > 0)\n    in not (has_neg && has_pos)\n```"
  },
  {
    "task": "Implement a program that checks if a given string is a valid binary number.",
    "code": "```haskell\nisValidBinary :: String -> Bool\nisValidBinary str = all (`elem` \"01\") str\n\nmain :: IO ()\nmain = do\n    putStrLn \"Enter a string:\"\n    input <- getLine\n    if isValidBinary input\n        then putStrLn \"The string is a valid binary number.\"\n        else putStrLn \"The string is not a valid binary number.\"\n```"
  },
  {
    "task": "Design a system to evaluate the risk level of an investment based on criteria.",
    "code": "```haskell\ndata RiskLevel = Low | Medium | High deriving (Show, Eq)\n\nevaluateRisk :: Double -> Double -> RiskLevel\nevaluateRisk volatility returns\n  | volatility < 0.2 && returns > 5 = Low\n  | volatility < 0.5 && returns > 2 = Medium\n  | otherwise                       = High\n\nmain :: IO ()\nmain = do\n  let testCases = [(0.1, 6), (0.3, 3), (0.5, 1)]\n  mapM_ (\\(vol, ret) -> putStrLn $ \"Volatility: \" ++ show vol ++ \", Returns: \" ++ show ret ++ \" -> Risk Level: \" ++ show (evaluateRisk vol ret)) testCases\n```"
  },
  {
    "task": "Write a program that suggests a vacation destination based on budget and preferences.",
    "code": "```haskell\nmodule VacationSuggestion where\n\nsuggestDestination :: Int -> String -> String\nsuggestDestination budget preference\n  | budget < 500 && preference == \"beach\" = \"Consider a local beach resort.\"\n  | budget < 500 && preference == \"mountain\" = \"Explore nearby hiking trails.\"\n  | budget >= 500 && budget < 1000 && preference == \"beach\" = \"How about a trip to the Caribbean?\"\n  | budget >= 500 && budget < 1000 && preference == \"mountain\" = \"Visit the scenic Rockies.\"\n  | budget >= 1000 && preference == \"beach\" = \"Enjoy the beaches of Hawaii!\"\n  | budget >= 1000 && preference == \"mountain\" = \"Experience the majestic Alps.\"\n  | otherwise = \"Please provide a valid budget and preference.\"\n```"
  },
  {
    "task": "Create a routine that checks if a username is already taken in a database.",
    "code": "```haskell\nimport Database.SQLite.Simple\nimport Control.Exception (bracket)\n\nisUsernameTaken :: Connection -> String -> IO Bool\nisUsernameTaken conn username = do\n    result <- query conn \"SELECT COUNT(*) FROM users WHERE username = ?\" (Only username)\n    case result of\n        [Only count] -> return (count > (0 :: Int))\n        _            -> return False\n\nmain :: IO ()\nmain = bracket (open \"database.db\") close $ \\conn -> do\n    taken <- isUsernameTaken conn \"desiredUsername\"\n    putStrLn $ if taken\n               then \"Username is already taken.\"\n               else \"Username is available.\"\n```"
  },
  {
    "task": "Develop a function that determines if a string is a valid IPv4 address.",
    "code": "```haskell\nimport Data.List (elem)\n\nisValidIPv4 :: String -> Bool\nisValidIPv4 ip = length octets == 4 && all isValidOctet octets\n  where\n    octets = wordsWhen (== '.') ip\n    isValidOctet o = case reads o :: [(Int, String)] of\n        [(n, \"\")] -> n >= 0 && n <= 255\n        _         -> False\n\nwordsWhen :: (Char -> Bool) -> String -> [String]\nwordsWhen p s = case dropWhile p s of\n    \"\" -> []\n    s' -> w : wordsWhen p s''\n        where (w, s'') = break p s'\n```"
  },
  {
    "task": "Implement a program to decide which transportation method is quickest based on distance.",
    "code": "```haskell\nquickestTransport :: Double -> String\nquickestTransport distance\n    | distance <= 1.0 = \"Walking\"\n    | distance <= 5.0 = \"Bicycle\"\n    | distance <= 20.0 = \"Car\"\n    | otherwise = \"Train\"\n\nmain :: IO ()\nmain = do\n    putStrLn \"Enter the distance (in km):\"\n    input <- getLine\n    let distance = read input :: Double\n    putStrLn $ \"Quickest transportation method: \" ++ quickestTransport distance\n```"
  },
  {
    "task": "Design a script to validate if a number is a prime number.",
    "code": "```haskell\nisPrime :: Int -> Bool\nisPrime n\n  | n <= 1 = False\n  | n == 2 = True\n  | even n = False\n  | otherwise = null [x | x <- [3,5..floor . sqrt $ fromIntegral n], n `mod` x == 0]\n\nmain :: IO ()\nmain = do\n  putStrLn \"Enter a number:\"\n  input <- getLine\n  let number = read input :: Int\n  if isPrime number\n    then putStrLn \"The number is prime.\"\n    else putStrLn \"The number is not prime.\"\n```"
  },
  {
    "task": "Write a function that checks if a number is divisible by another number without remainder.",
    "code": "```haskell\nisDivisible :: Integral a => a -> a -> Bool\nisDivisible x y = if y == 0 then False else x `mod` y == 0\n```"
  },
  {
    "task": "Create a program that determines the type of a quadrilateral based on side lengths.",
    "code": "```haskell\ntypeOfQuadrilateral :: (Eq a, Num a) => a -> a -> a -> a -> String\ntypeOfQuadrilateral a b c d\n  | a == b && b == c && c == d = \"Square\"\n  | a == c && b == d = \"Rectangle\"\n  | a == b && c == d = \"Rhombus\"\n  | a == d && b == c = \"Rhombus\"\n  | otherwise = \"Other Quadrilateral\"\n\nmain :: IO ()\nmain = do\n  putStrLn \"Enter the lengths of the four sides of the quadrilateral:\"\n  a <- readLn\n  b <- readLn\n  c <- readLn\n  d <- readLn\n  putStrLn $ \"The quadrilateral is a: \" ++ typeOfQuadrilateral a b c d\n```"
  },
  {
    "task": "Develop a routine to check if a sentence contains all letters of the alphabet.",
    "code": "```haskell\nimport Data.Char (toLower)\nimport Data.List (nub)\n\ncontainsAllLetters :: String -> Bool\ncontainsAllLetters sentence = length (nub letters) == 26\n  where\n    letters = filter (`elem` ['a'..'z']) $ map toLower sentence\n\nmain :: IO ()\nmain = do\n    let sentence = \"The quick brown fox jumps over the lazy dog\"\n    if containsAllLetters sentence\n        then putStrLn \"The sentence contains all letters of the alphabet.\"\n        else putStrLn \"The sentence does not contain all letters of the alphabet.\"\n```"
  },
  {
    "task": "Implement a program that outputs the appropriate error message based on an error code.",
    "code": "```haskell\nmain :: IO ()\nmain = do\n    putStrLn \"Enter error code:\"\n    input <- getLine\n    let errorCode = read input :: Int\n    putStrLn $ case errorCode of\n        404 -> \"Error: Not Found\"\n        500 -> \"Error: Internal Server Error\"\n        403 -> \"Error: Forbidden\"\n        401 -> \"Error: Unauthorized\"\n        _   -> \"Error: Unknown code\"\n```"
  },
  {
    "task": "Design a function that categorizes a movie rating as G, PG, PG-13, or R.",
    "code": "```haskell\ncategorizeRating :: Int -> String\ncategorizeRating rating\n    | rating <= 0 = \"Invalid Rating\"\n    | rating <= 6 = \"G\"\n    | rating <= 12 = \"PG\"\n    | rating <= 16 = \"PG-13\"\n    | otherwise = \"R\"\n```"
  },
  {
    "task": "Write a script to check if a string is a valid Roman numeral.",
    "code": "```haskell\nisValidRomanNumeral :: String -> Bool\nisValidRomanNumeral \"\" = False\nisValidRomanNumeral s = all validRomanChar s && isProperRomanNumeral s\n\nvalidRomanChar :: Char -> Bool\nvalidRomanChar c = c `elem` \"IVXLCDM\"\n\nisProperRomanNumeral :: String -> Bool\nisProperRomanNumeral [] = True\nisProperRomanNumeral (x:xs) = case x of\n    'I' -> null xs || head xs `elem` \"IVX\" && isProperRomanNumeral xs\n    'V' -> null xs || head xs `elem` \"IX\" && isProperRomanNumeral xs\n    'X' -> null xs || head xs `elem` \"XLC\" && isProperRomanNumeral xs\n    'L' -> null xs || head xs `elem` \"XC\" && isProperRomanNumeral xs\n    'C' -> null xs || head xs `elem` \"CDM\" && isProperRomanNumeral xs\n    'D' -> null xs || head xs `elem` \"CM\" && isProperRomanNumeral xs\n    'M' -> isProperRomanNumeral xs\n    _   -> False\n```"
  },
  {
    "task": "Create a routine that decides if a person can retire based on age and years worked.",
    "code": "```haskell\ncanRetire :: Int -> Int -> Bool\ncanRetire age yearsWorked\n  | age >= 65 || yearsWorked >= 30 = True\n  | age >= 60 && yearsWorked >= 25 = True\n  | otherwise = False\n```"
  },
  {
    "task": "Develop a function that outputs a different emoji based on user mood input.",
    "code": "```haskell\nemojiForMood :: String -> String\nemojiForMood mood = case mood of\n    \"happy\"   -> \"\ud83d\ude0a\"\n    \"sad\"     -> \"\ud83d\ude22\"\n    \"angry\"   -> \"\ud83d\ude20\"\n    \"excited\" -> \"\ud83d\ude06\"\n    \"bored\"   -> \"\ud83d\ude10\"\n    \"tired\"   -> \"\ud83d\ude34\"\n    _         -> \"\ud83e\udd14\"\n```"
  },
  {
    "task": "Implement a program that checks if a password meets security requirements.",
    "code": "```haskell\nimport Data.Char (isUpper, isLower, isDigit)\n\nisSecurePassword :: String -> Bool\nisSecurePassword password = \n    let hasUpper = any isUpper password\n        hasLower = any isLower password\n        hasDigit = any isDigit password\n        longEnough = length password >= 8\n    in hasUpper && hasLower && hasDigit && longEnough\n\nmain :: IO ()\nmain = do\n    putStrLn \"Enter your password:\"\n    password <- getLine\n    if isSecurePassword password\n        then putStrLn \"Password is secure.\"\n        else putStrLn \"Password is not secure.\"\n```"
  },
  {
    "task": "Design a script to determine if a number is a palindrome when reversed.",
    "code": "```haskell\nisPalindrome :: (Show a, Eq a) => a -> Bool\nisPalindrome x = let s = show x in s == reverse s\n\nmain :: IO ()\nmain = do\n    putStrLn \"Enter a number:\"\n    input <- getLine\n    let number = read input :: Int\n    if isPalindrome number\n        then putStrLn \"The number is a palindrome.\"\n        else putStrLn \"The number is not a palindrome.\"\n```"
  },
  {
    "task": "Write a function that evaluates if a given day is a holiday.",
    "code": "```haskell\nisHoliday :: String -> Bool\nisHoliday day =\n  case day of\n    \"New Year's Day\" -> True\n    \"Independence Day\" -> True\n    \"Christmas Day\" -> True\n    _ -> False\n```"
  },
  {
    "task": "Create a program to decide if a library book is overdue based on the due date.",
    "code": "```haskell\nimport Data.Time\n\nisOverdue :: Day -> Day -> Bool\nisOverdue currentDate dueDate = currentDate > dueDate\n\nmain :: IO ()\nmain = do\n    putStrLn \"Enter the current date (YYYY-MM-DD):\"\n    currentDateInput <- getLine\n    putStrLn \"Enter the due date (YYYY-MM-DD):\"\n    dueDateInput <- getLine\n    let currentDate = parseDate currentDateInput\n    let dueDate = parseDate dueDateInput\n    case (currentDate, dueDate) of\n        (Just cd, Just dd) -> \n            if isOverdue cd dd\n                then putStrLn \"The book is overdue.\"\n                else putStrLn \"The book is not overdue.\"\n        _ -> putStrLn \"Invalid date format.\"\n\nparseDate :: String -> Maybe Day\nparseDate = parseTimeM True defaultTimeLocale \"%Y-%m-%d\"\n```"
  },
  {
    "task": "Develop a routine that checks if a given year is part of a leap century.",
    "code": "```haskell\nisLeapCentury :: Int -> Bool\nisLeapCentury year\n    | year `mod` 400 == 0 = True\n    | otherwise = False\n```"
  },
  {
    "task": "Implement a system to determine the correct category for a product based on user input.",
    "code": "```haskell\nimport System.IO (hFlush, stdout)\n\nproductCategory :: String -> String\nproductCategory product\n    | product == \"Electronics\" = \"Category: Electronics\"\n    | product == \"Clothing\"    = \"Category: Clothing\"\n    | product == \"Food\"        = \"Category: Food\"\n    | product == \"Books\"       = \"Category: Books\"\n    | otherwise                = \"Category: Unknown\"\n\nmain :: IO ()\nmain = do\n    putStr \"Enter product type: \"\n    hFlush stdout\n    product <- getLine\n    putStrLn (productCategory product)\n```"
  }
]