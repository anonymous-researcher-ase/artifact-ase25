[
  {
    "task": "Create a set to store unique usernames and demonstrate adding new ones.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nmain :: IO ()\nmain = do\n    let usernames = Set.fromList [\"alice\", \"bob\", \"carol\"]\n    let newUsers = [\"dave\", \"alice\", \"eve\"]\n    let updatedUsernames = Set.union usernames (Set.fromList newUsers)\n    print $ Set.toList updatedUsernames\n```"
  },
  {
    "task": "Write a function that returns the union of two sets of integers.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nunionSets :: Set.Set Int -> Set.Set Int -> Set.Set Int\nunionSets = Set.union\n```"
  },
  {
    "task": "Given two sets of strings, find their intersection.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nsetIntersection :: Set.Set String -> Set.Set String -> Set.Set String\nsetIntersection set1 set2 = Set.intersection set1 set2\n```"
  },
  {
    "task": "Implement a set to track visited web pages and check if a page has been visited.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\ntype URL = String\ntype VisitedPages = Set.Set URL\n\naddPage :: URL -> VisitedPages -> VisitedPages\naddPage = Set.insert\n\nhasVisited :: URL -> VisitedPages -> Bool\nhasVisited = Set.member\n\nmain :: IO ()\nmain = do\n    let visited = Set.empty\n    let visited1 = addPage \"https://example.com\" visited\n    print $ hasVisited \"https://example.com\" visited1\n    print $ hasVisited \"https://anotherexample.com\" visited1\n```"
  },
  {
    "task": "Create a set from a list of numbers and remove duplicates.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nremoveDuplicates :: Ord a => [a] -> [a]\nremoveDuplicates = Set.toList . Set.fromList\n```"
  },
  {
    "task": "Check if a set is a subset of another set.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nisSubset :: Ord a => Set.Set a -> Set.Set a -> Bool\nisSubset = Set.isSubsetOf\n```"
  },
  {
    "task": "Demonstrate adding and removing elements from a set of book titles.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nmain :: IO ()\nmain = do\n    let bookSet = Set.fromList [\"The Catcher in the Rye\", \"1984\", \"To Kill a Mockingbird\"]\n    \n    let bookSet' = Set.insert \"Brave New World\" bookSet\n    putStrLn \"After adding 'Brave New World':\"\n    print bookSet'\n    \n    let bookSet'' = Set.delete \"1984\" bookSet'\n    putStrLn \"After removing '1984':\"\n    print bookSet''\n```"
  },
  {
    "task": "Create a set and show how to clear all its elements.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nmain :: IO ()\nmain = do\n  let set = Set.fromList [1, 2, 3, 4, 5]\n  let clearedSet = Set.empty\n  print clearedSet\n```"
  },
  {
    "task": "Write a program to find the difference between two sets of employee IDs.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\ndifferenceOfSets :: Ord a => [a] -> [a] -> [a]\ndifferenceOfSets set1 set2 = Set.toList $ Set.difference (Set.fromList set1) (Set.fromList set2)\n\nmain :: IO ()\nmain = do\n    let employeeIDs1 = [1, 2, 3, 4, 5]\n    let employeeIDs2 = [4, 5, 6, 7]\n    print $ differenceOfSets employeeIDs1 employeeIDs2\n```"
  },
  {
    "task": "Implement a set to store unique email addresses and check membership.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\ntype EmailSet = Set.Set String\n\naddEmail :: String -> EmailSet -> EmailSet\naddEmail email set = Set.insert email set\n\nisEmailMember :: String -> EmailSet -> Bool\nisEmailMember email set = Set.member email set\n```"
  },
  {
    "task": "Use a set to determine if two lists have any common elements.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nhaveCommonElements :: Ord a => [a] -> [a] -> Bool\nhaveCommonElements list1 list2 =\n  let set1 = Set.fromList list1\n      set2 = Set.fromList list2\n   in not $ Set.null $ Set.intersection set1 set2\n```"
  },
  {
    "task": "Create a set to represent a group of students and update it with new entries.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nmain :: IO ()\nmain = do\n    let initialStudents = Set.fromList [\"Alice\", \"Bob\", \"Charlie\"]\n    let newEntries = Set.fromList [\"David\", \"Eve\"]\n    let updatedStudents = Set.union initialStudents newEntries\n    print updatedStudents\n```"
  },
  {
    "task": "Write a function to find symmetric difference between two sets of colors.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nsymmetricDifference :: Ord a => Set.Set a -> Set.Set a -> Set.Set a\nsymmetricDifference set1 set2 = (set1 `Set.difference` set2) `Set.union` (set2 `Set.difference` set1)\n```"
  },
  {
    "task": "Implement a set to store unique product codes and demonstrate iteration over it.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nmain :: IO ()\nmain = do\n    let productCodes = Set.fromList [\"P001\", \"P002\", \"P003\", \"P004\", \"P001\"]\n    mapM_ putStrLn (Set.toList productCodes)\n```"
  },
  {
    "task": "Create a set and demonstrate the use of the `discard` method.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nmain :: IO ()\nmain = do\n    let set1 = Set.fromList [1, 2, 3, 4, 5]\n    let set2 = Set.delete 3 set1\n    print set2\n```"
  },
  {
    "task": "Given a list of numbers, create a set and check if a specific number is present.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nisNumberPresent :: Ord a => a -> [a] -> Bool\nisNumberPresent num list = Set.member num (Set.fromList list)\n```"
  },
  {
    "task": "Use a set to find all unique words in a sentence.",
    "code": "```haskell\nimport Data.Set (Set)\nimport qualified Data.Set as Set\nimport Data.Char (isAlpha, toLower)\n\nuniqueWords :: String -> Set String\nuniqueWords sentence =\n    let wordsList = words $ map (\\c -> if isAlpha c then toLower c else ' ') sentence\n    in Set.fromList wordsList\n\nmain :: IO ()\nmain = do\n    let sentence = \"This is a test. This test is only a test.\"\n    print $ uniqueWords sentence\n```"
  },
  {
    "task": "Create a set from a sequence of characters and demonstrate set operations.",
    "code": "```haskell\nimport Data.Set (Set)\nimport qualified Data.Set as Set\n\nmain :: IO ()\nmain = do\n    let charSequence = \"haskell\"\n    let charSet = Set.fromList charSequence\n    let anotherSet = Set.fromList \"functional\"\n    \n    print $ \"Character Set: \" ++ show charSet\n    print $ \"Union: \" ++ show (Set.union charSet anotherSet)\n    print $ \"Intersection: \" ++ show (Set.intersection charSet anotherSet)\n    print $ \"Difference: \" ++ show (Set.difference charSet anotherSet)\n```"
  },
  {
    "task": "Write a function to merge two sets and return the result.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nmergeSets :: Ord a => Set.Set a -> Set.Set a -> Set.Set a\nmergeSets set1 set2 = Set.union set1 set2\n```"
  },
  {
    "task": "Implement a set to hold unique IP addresses and demonstrate basic operations.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\ntype IPAddress = String\n\nmain :: IO ()\nmain = do\n    let ipSet = Set.empty :: Set.Set IPAddress\n    let ipSet1 = Set.insert \"192.168.1.1\" ipSet\n    let ipSet2 = Set.insert \"10.0.0.1\" ipSet1\n    let ipSet3 = Set.insert \"192.168.1.1\" ipSet2 -- Attempt to insert duplicate\n\n    putStrLn \"Set of IP addresses:\"\n    print $ Set.toList ipSet3\n\n    let isMember = Set.member \"10.0.0.1\" ipSet3\n    putStrLn $ \"Is '10.0.0.1' in the set? \" ++ show isMember\n\n    let ipSet4 = Set.delete \"192.168.1.1\" ipSet3\n    putStrLn \"Set after deleting '192.168.1.1':\"\n    print $ Set.toList ipSet4\n```"
  },
  {
    "task": "Create a set and demonstrate how to find the size of the set.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nmain :: IO ()\nmain = do\n    let mySet = Set.fromList [1, 2, 3, 4, 5]\n    let setSize = Set.size mySet\n    print setSize\n```"
  },
  {
    "task": "Write a program to check if two sets of dates are disjoint.",
    "code": "```haskell\nimport Data.Set (Set)\nimport qualified Data.Set as Set\nimport Data.Time (Day)\n\nareDisjoint :: Set Day -> Set Day -> Bool\nareDisjoint set1 set2 = Set.null (Set.intersection set1 set2)\n```"
  },
  {
    "task": "Create a set to manage a collection of tags and demonstrate addition and removal.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\n-- Create an empty set of tags\nlet tags = Set.empty\n\n-- Add tags to the set\nlet tags' = Set.insert \"Haskell\" tags\nlet tags'' = Set.insert \"Functional\" tags'\nlet tags''' = Set.insert \"Programming\" tags''\n\n-- Remove a tag from the set\nlet finalTags = Set.delete \"Functional\" tags'''\n\n-- Output the final set of tags\nprint finalTags\n```"
  },
  {
    "task": "Implement a set to track unique inventory items in a store.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\ntype Inventory = Set.Set String\n\naddItem :: String -> Inventory -> Inventory\naddItem item inventory = Set.insert item inventory\n\nremoveItem :: String -> Inventory -> Inventory\nremoveItem item inventory = Set.delete item inventory\n\nisItemInInventory :: String -> Inventory -> Bool\nisItemInInventory item inventory = Set.member item inventory\n\nlistInventoryItems :: Inventory -> [String]\nlistInventoryItems inventory = Set.toList inventory\n```"
  },
  {
    "task": "Create a set of numbers and demonstrate conversion to a list.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\n-- Create a set of numbers\nnumbersSet :: Set.Set Int\nnumbersSet = Set.fromList [1, 2, 3, 4, 5]\n\n-- Convert the set to a list\nnumbersList :: [Int]\nnumbersList = Set.toList numbersSet\n```"
  },
  {
    "task": "Write a function that returns all elements present in either of two sets but not both.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nsymmetricDifference :: Ord a => Set.Set a -> Set.Set a -> Set.Set a\nsymmetricDifference set1 set2 = (set1 `Set.difference` set2) `Set.union` (set2 `Set.difference` set1)\n```"
  },
  {
    "task": "Use a set to manage a collection of unique transaction IDs.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\ntype TransactionID = String\ntype TransactionSet = Set.Set TransactionID\n\naddTransaction :: TransactionID -> TransactionSet -> TransactionSet\naddTransaction = Set.insert\n\nremoveTransaction :: TransactionID -> TransactionSet -> TransactionSet\nremoveTransaction = Set.delete\n\ntransactionExists :: TransactionID -> TransactionSet -> Bool\ntransactionExists = Set.member\n\nemptyTransactionSet :: TransactionSet\nemptyTransactionSet = Set.empty\n\n-- Example usage\nmain :: IO ()\nmain = do\n    let transactions = emptyTransactionSet\n    let transactions' = addTransaction \"txn1\" transactions\n    let transactions'' = addTransaction \"txn2\" transactions'\n    print $ transactionExists \"txn1\" transactions''\n    let transactions''' = removeTransaction \"txn1\" transactions''\n    print $ transactionExists \"txn1\" transactions'''\n```"
  },
  {
    "task": "Create a set of integers and demonstrate the `pop` operation.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nmain :: IO ()\nmain = do\n    let intSet = Set.fromList [1, 2, 3, 4, 5]\n    case Set.minView intSet of\n        Just (minElem, newSet) -> do\n            putStrLn $ \"Popped element: \" ++ show minElem\n            putStrLn $ \"New set: \" ++ show newSet\n        Nothing -> putStrLn \"The set is empty.\"\n```"
  },
  {
    "task": "Write a program to find the maximum element in a set of floating-point numbers.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nmaxInSet :: Set.Set Float -> Maybe Float\nmaxInSet s\n    | Set.null s = Nothing\n    | otherwise  = Just $ Set.findMax s\n\nmain :: IO ()\nmain = do\n    let numbers = Set.fromList [3.5, 7.2, 1.8, 9.4, 4.6]\n    print $ maxInSet numbers\n```"
  },
  {
    "task": "Create a set and demonstrate the use of the `update` method with another set.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nmain :: IO ()\nmain = do\n    let set1 = Set.fromList [1, 2, 3]\n    let set2 = Set.fromList [3, 4, 5]\n    let updatedSet = Set.union set1 set2\n    print updatedSet\n```"
  },
  {
    "task": "Implement a set to keep track of unique file extensions in a directory.",
    "code": "```haskell\nimport System.Directory (listDirectory)\nimport System.FilePath (takeExtension)\nimport qualified Data.Set as Set\n\ngetUniqueExtensions :: FilePath -> IO (Set.Set String)\ngetUniqueExtensions dir = do\n    files <- listDirectory dir\n    let extensions = map takeExtension files\n    return $ Set.fromList extensions\n```"
  },
  {
    "task": "Create a set of strings and demonstrate how to iterate over it in reverse order.",
    "code": "```haskell\nimport qualified Data.Set as Set\nimport Data.List (toDescList)\n\nmain :: IO ()\nmain = do\n    let stringSet = Set.fromList [\"apple\", \"banana\", \"cherry\"]\n    mapM_ putStrLn $ toDescList stringSet\n```"
  },
  {
    "task": "Write a function to check if a set is empty.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nisSetEmpty :: Set.Set a -> Bool\nisSetEmpty = Set.null\n```"
  },
  {
    "task": "Use a set to filter out duplicate entries from a list of participants.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nremoveDuplicates :: Ord a => [a] -> [a]\nremoveDuplicates = Set.toList . Set.fromList\n```"
  },
  {
    "task": "Create a set of tuples and demonstrate basic set operations.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\n-- Create a set of tuples\nlet set1 = Set.fromList [(1, 'a'), (2, 'b'), (3, 'c')]\nlet set2 = Set.fromList [(3, 'c'), (4, 'd'), (5, 'e')]\n\n-- Demonstrate basic set operations\nlet unionSet = Set.union set1 set2\nlet intersectionSet = Set.intersection set1 set2\nlet differenceSet = Set.difference set1 set2\n\n-- Print the results\nprint $ \"Union: \" ++ show unionSet\nprint $ \"Intersection: \" ++ show intersectionSet\nprint $ \"Difference: \" ++ show differenceSet\n```"
  },
  {
    "task": "Write a program to find the common elements between two sets of country names.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\ncommonCountries :: Set.Set String -> Set.Set String -> Set.Set String\ncommonCountries set1 set2 = Set.intersection set1 set2\n\nmain :: IO ()\nmain = do\n    let countries1 = Set.fromList [\"USA\", \"Canada\", \"Mexico\", \"Brazil\"]\n    let countries2 = Set.fromList [\"Brazil\", \"Argentina\", \"USA\", \"Chile\"]\n    let common = commonCountries countries1 countries2\n    print common\n```"
  },
  {
    "task": "Create a set of characters and demonstrate the use of the `issubset` method.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nmain :: IO ()\nmain = do\n    let set1 = Set.fromList ['a', 'b', 'c']\n    let set2 = Set.fromList ['a', 'b']\n    let isSubset = set2 `Set.isSubsetOf` set1\n    print isSubset\n```"
  },
  {
    "task": "Implement a set to manage a collection of unique hashtags from social media posts.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\ntype Hashtag = String\ntype HashtagSet = Set.Set Hashtag\n\naddHashtag :: HashtagSet -> Hashtag -> HashtagSet\naddHashtag = Set.insert\n\nremoveHashtag :: HashtagSet -> Hashtag -> HashtagSet\nremoveHashtag = Set.delete\n\nhasHashtag :: HashtagSet -> Hashtag -> Bool\nhasHashtag = Set.member\n\ncreateHashtagSet :: [Hashtag] -> HashtagSet\ncreateHashtagSet = Set.fromList\n\nlistHashtags :: HashtagSet -> [Hashtag]\nlistHashtags = Set.toList\n```"
  },
  {
    "task": "Create a set and demonstrate how to copy it to another set.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nmain :: IO ()\nmain = do\n    let originalSet = Set.fromList [1, 2, 3, 4, 5]\n    let copiedSet = Set.fromList (Set.toList originalSet)\n    print copiedSet\n```"
  },
  {
    "task": "Write a function that accepts two sets and returns a new set with elements found in both.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nintersection :: Ord a => Set.Set a -> Set.Set a -> Set.Set a\nintersection set1 set2 = Set.intersection set1 set2\n```"
  },
  {
    "task": "Use a set to determine the unique items purchased in a day.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nuniquePurchases :: Ord a => [a] -> Set.Set a\nuniquePurchases purchases = Set.fromList purchases\n\nmain :: IO ()\nmain = do\n    let purchases = [\"apple\", \"banana\", \"apple\", \"orange\", \"banana\"]\n    let uniqueItems = uniquePurchases purchases\n    print $ Set.toList uniqueItems\n```"
  },
  {
    "task": "Create a set of student IDs and demonstrate set comprehension to filter IDs.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\n-- Create a set of student IDs\nstudentIDs :: Set.Set Int\nstudentIDs = Set.fromList [101, 102, 103, 104, 105, 106, 107]\n\n-- Demonstrate set comprehension to filter IDs\nfilteredIDs :: Set.Set Int\nfilteredIDs = Set.filter (> 103) studentIDs\n\nmain :: IO ()\nmain = do\n    print filteredIDs\n```"
  },
  {
    "task": "Write a program to check if a set of strings is a superset of another set.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nisSuperset :: Ord a => Set.Set a -> Set.Set a -> Bool\nisSuperset set1 set2 = set2 `Set.isSubsetOf` set1\n\nmain :: IO ()\nmain = do\n    let set1 = Set.fromList [\"apple\", \"banana\", \"cherry\"]\n    let set2 = Set.fromList [\"banana\", \"cherry\"]\n    print (isSuperset set1 set2)\n```"
  },
  {
    "task": "Create a set of unique words from a text file.",
    "code": "```haskell\nimport qualified Data.Set as Set\nimport System.IO\n\nmain :: IO ()\nmain = do\n    content <- readFile \"yourfile.txt\"\n    let wordsSet = Set.fromList (words content)\n    print wordsSet\n```"
  },
  {
    "task": "Implement a set to store unique project identifiers and demonstrate membership testing.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nmain :: IO ()\nmain = do\n    let projectIds = Set.fromList [\"proj1\", \"proj2\", \"proj3\"]\n    let newId = \"proj4\"\n    let existingId = \"proj2\"\n    \n    putStrLn $ \"Is \" ++ newId ++ \" in the set? \" ++ show (Set.member newId projectIds)\n    putStrLn $ \"Is \" ++ existingId ++ \" in the set? \" ++ show (Set.member existingId projectIds)\n```"
  },
  {
    "task": "Create a set and demonstrate the `symmetric_difference_update` method.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nsymmetricDifferenceUpdate :: Ord a => Set.Set a -> Set.Set a -> Set.Set a\nsymmetricDifferenceUpdate setA setB = (setA `Set.difference` setB) `Set.union` (setB `Set.difference` setA)\n\nmain :: IO ()\nmain = do\n    let set1 = Set.fromList [1, 2, 3, 4]\n    let set2 = Set.fromList [3, 4, 5, 6]\n    let updatedSet = symmetricDifferenceUpdate set1 set2\n    print updatedSet\n```"
  },
  {
    "task": "Write a function to remove all elements from a set that are also in another set.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nremoveElements :: Ord a => Set.Set a -> Set.Set a -> Set.Set a\nremoveElements set1 set2 = Set.difference set1 set2\n```"
  },
  {
    "task": "Use a set to keep track of unique error codes from server logs.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\ngetUniqueErrorCodes :: [Int] -> Set.Set Int\ngetUniqueErrorCodes errorCodes = Set.fromList errorCodes\n\n-- Example usage\nmain :: IO ()\nmain = do\n    let errorCodes = [404, 500, 404, 200, 500, 403]\n    let uniqueErrorCodes = getUniqueErrorCodes errorCodes\n    print uniqueErrorCodes\n```"
  },
  {
    "task": "Create a set and demonstrate how to find all unique pairs of elements.",
    "code": "```haskell\nimport Data.Set (Set)\nimport qualified Data.Set as Set\n\nuniquePairs :: Ord a => [a] -> Set (a, a)\nuniquePairs xs = Set.fromList [(x, y) | x <- xs, y <- xs, x < y]\n\nmain :: IO ()\nmain = do\n    let elements = [1, 2, 3, 4]\n    let pairs = uniquePairs elements\n    print pairs\n```"
  },
  {
    "task": "Write a program to find the smallest element in a set of integers.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nfindSmallest :: Set.Set Int -> Maybe Int\nfindSmallest s = if Set.null s then Nothing else Just (Set.findMin s)\n\nmain :: IO ()\nmain = do\n    let integers = Set.fromList [5, 3, 8, 1, 9]\n    print $ findSmallest integers\n```"
  },
  {
    "task": "Create a set and demonstrate the `add` method with multiple elements.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nmain :: IO ()\nmain = do\n    let initialSet = Set.empty\n        setWithElements = Set.fromList [1, 2, 3, 4, 5]\n    print setWithElements\n```"
  },
  {
    "task": "Implement a set to manage a collection of unique author names.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\ntype Authors = Set.Set String\n\naddAuthor :: String -> Authors -> Authors\naddAuthor = Set.insert\n\nremoveAuthor :: String -> Authors -> Authors\nremoveAuthor = Set.delete\n\nauthorExists :: String -> Authors -> Bool\nauthorExists = Set.member\n\nemptyAuthors :: Authors\nemptyAuthors = Set.empty\n\nlistAuthors :: Authors -> [String]\nlistAuthors = Set.toList\n```"
  },
  {
    "task": "Create a set of integers and demonstrate converting it to a sorted list.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nmain :: IO ()\nmain = do\n    let intSet = Set.fromList [5, 3, 1, 4, 2]\n    let sortedList = Set.toAscList intSet\n    print sortedList\n```"
  },
  {
    "task": "Write a function that returns the union of multiple sets.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nunionOfSets :: (Ord a) => [Set.Set a] -> Set.Set a\nunionOfSets = Set.unions\n```"
  },
  {
    "task": "Use a set to identify unique characters in a string.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nuniqueChars :: String -> Set.Set Char\nuniqueChars = Set.fromList\n```"
  },
  {
    "task": "Create a set of prime numbers and demonstrate basic set operations.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nisPrime :: Int -> Bool\nisPrime n\n    | n <= 1    = False\n    | n == 2    = True\n    | otherwise = all (\\d -> n `mod` d /= 0) [2 .. floor (sqrt (fromIntegral n))]\n\nprimeSet :: Set.Set Int\nprimeSet = Set.fromList $ filter isPrime [1..20]\n\nmain :: IO ()\nmain = do\n    let anotherSet = Set.fromList [2, 3, 5, 7, 11, 13, 17, 19, 23]\n    print $ \"Prime Set: \" ++ show primeSet\n    print $ \"Union: \" ++ show (Set.union primeSet anotherSet)\n    print $ \"Intersection: \" ++ show (Set.intersection primeSet anotherSet)\n    print $ \"Difference: \" ++ show (Set.difference primeSet anotherSet)\n```"
  },
  {
    "task": "Create a set and demonstrate how to check for non-membership.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nmain :: IO ()\nmain = do\n    let mySet = Set.fromList [1, 2, 3, 4, 5]\n    let element = 6\n    if Set.notMember element mySet\n        then putStrLn $ show element ++ \" is not in the set.\"\n        else putStrLn $ show element ++ \" is in the set.\"\n```"
  },
  {
    "task": "Write a program to find the largest element in a set of numbers.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nlargestInSet :: (Ord a) => Set.Set a -> Maybe a\nlargestInSet s\n  | Set.null s = Nothing\n  | otherwise = Just $ Set.findMax s\n\nmain :: IO ()\nmain = do\n  let numbers = Set.fromList [1, 5, 3, 9, 2]\n  print $ largestInSet numbers\n```"
  },
  {
    "task": "Create a set of unique movie titles and demonstrate membership testing.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nmain :: IO ()\nmain = do\n    let movies = Set.fromList [\"Inception\", \"The Matrix\", \"Interstellar\", \"Inception\"]\n    let isMember = Set.member \"Inception\" movies\n    print isMember\n```"
  },
  {
    "task": "Implement a set to store unique keys from a dictionary.",
    "code": "```haskell\nimport qualified Data.Set as Set\nimport qualified Data.Map as Map\n\nextractUniqueKeys :: (Ord k) => Map.Map k v -> Set.Set k\nextractUniqueKeys dict = Set.fromList (Map.keys dict)\n```"
  },
  {
    "task": "Create a set and demonstrate the `difference_update` method.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nmain :: IO ()\nmain = do\n    let set1 = Set.fromList [1, 2, 3, 4, 5]\n        set2 = Set.fromList [4, 5, 6]\n        differenceUpdatedSet = Set.difference set1 set2\n    print differenceUpdatedSet\n```"
  },
  {
    "task": "Write a function to merge multiple sets into a single set.",
    "code": "```haskell\nimport Data.Set (Set, unions)\n\nmergeSets :: Ord a => [Set a] -> Set a\nmergeSets = unions\n```"
  },
  {
    "task": "Use a set to filter out duplicate letters from a word.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nfilterDuplicates :: String -> String\nfilterDuplicates word = go word Set.empty\n  where\n    go [] _ = []\n    go (x:xs) seen\n      | x `Set.member` seen = go xs seen\n      | otherwise           = x : go xs (Set.insert x seen)\n```"
  },
  {
    "task": "Create a set and demonstrate the use of the `isdisjoint` method.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nsetUsage :: IO ()\nsetUsage = do\n    let setA = Set.fromList [1, 2, 3, 4, 5]\n    let setB = Set.fromList [6, 7, 8]\n    let setC = Set.fromList [3, 9, 10]\n    \n    print (Set.null (Set.intersection setA setB))  -- Equivalent to isdisjoint\n    print (Set.null (Set.intersection setA setC))  -- Equivalent to isdisjoint\n```"
  },
  {
    "task": "Write a program to find all elements that are only in one of two sets.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nsymmetricDifference :: Ord a => Set.Set a -> Set.Set a -> Set.Set a\nsymmetricDifference set1 set2 = Set.union (Set.difference set1 set2) (Set.difference set2 set1)\n\nmain :: IO ()\nmain = do\n    let setA = Set.fromList [1, 2, 3, 4]\n    let setB = Set.fromList [3, 4, 5, 6]\n    print $ symmetricDifference setA setB\n```"
  },
  {
    "task": "Create a set of unique book authors and demonstrate basic set operations.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nmain :: IO ()\nmain = do\n    let authors1 = Set.fromList [\"Author A\", \"Author B\", \"Author C\"]\n    let authors2 = Set.fromList [\"Author B\", \"Author D\", \"Author E\"]\n\n    -- Union of two sets\n    let unionAuthors = Set.union authors1 authors2\n    print $ \"Union: \" ++ show unionAuthors\n\n    -- Intersection of two sets\n    let intersectionAuthors = Set.intersection authors1 authors2\n    print $ \"Intersection: \" ++ show intersectionAuthors\n\n    -- Difference of two sets\n    let differenceAuthors = Set.difference authors1 authors2\n    print $ \"Difference: \" ++ show differenceAuthors\n\n    -- Check membership\n    print $ \"Is 'Author A' in authors1? \" ++ show (Set.member \"Author A\" authors1)\n```"
  },
  {
    "task": "Implement a set to store unique phone numbers and check for duplicates.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\ntype PhoneNumber = String\n\naddPhoneNumber :: PhoneNumber -> Set.Set PhoneNumber -> (Set.Set PhoneNumber, Bool)\naddPhoneNumber number phoneSet\n    | Set.member number phoneSet = (phoneSet, True)  -- Duplicate found\n    | otherwise = (Set.insert number phoneSet, False)\n\nmain :: IO ()\nmain = do\n    let phoneNumbers = Set.empty\n    let (phoneNumbers1, isDuplicate1) = addPhoneNumber \"123-456-7890\" phoneNumbers\n    print (isDuplicate1)  -- False\n    let (phoneNumbers2, isDuplicate2) = addPhoneNumber \"123-456-7890\" phoneNumbers1\n    print (isDuplicate2)  -- True\n```"
  },
  {
    "task": "Create a set of floating-point numbers and demonstrate rounding each element.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nmain :: IO ()\nmain = do\n    let floatSet = Set.fromList [1.5, 2.3, 3.7, 4.8]\n    let roundedSet = Set.map round floatSet\n    print roundedSet\n```"
  },
  {
    "task": "Write a function that returns a set of all vowels present in a given sentence.",
    "code": "```haskell\nimport Data.Set (Set, fromList, intersection)\nimport Data.Char (toLower)\n\nvowelsInSentence :: String -> Set Char\nvowelsInSentence sentence = intersection vowels (fromList $ map toLower sentence)\n  where vowels = fromList \"aeiou\"\n```"
  },
  {
    "task": "Use a set to track unique session IDs for a web application.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\ntype SessionID = String\n\naddSessionID :: SessionID -> Set.Set SessionID -> Set.Set SessionID\naddSessionID sessionId sessions = Set.insert sessionId sessions\n\nremoveSessionID :: SessionID -> Set.Set SessionID -> Set.Set SessionID\nremoveSessionID sessionId sessions = Set.delete sessionId sessions\n\nisSessionIDActive :: SessionID -> Set.Set SessionID -> Bool\nisSessionIDActive sessionId sessions = Set.member sessionId sessions\n\nemptySessions :: Set.Set SessionID\nemptySessions = Set.empty\n```"
  },
  {
    "task": "Create a set of unique city names and demonstrate set operations with it.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nmain :: IO ()\nmain = do\n    let cities = Set.fromList [\"New York\", \"Los Angeles\", \"Chicago\", \"Houston\", \"Phoenix\"]\n    let moreCities = Set.fromList [\"Chicago\", \"Seattle\", \"Phoenix\", \"Denver\", \"San Francisco\"]\n    \n    putStrLn \"Unique Cities:\"\n    print cities\n    \n    putStrLn \"\\nUnion of Cities:\"\n    print (Set.union cities moreCities)\n    \n    putStrLn \"\\nIntersection of Cities:\"\n    print (Set.intersection cities moreCities)\n    \n    putStrLn \"\\nDifference of Cities (cities - moreCities):\"\n    print (Set.difference cities moreCities)\n```"
  },
  {
    "task": "Write a program to find the common elements in three sets.",
    "code": "```haskell\nimport Data.Set (Set)\nimport qualified Data.Set as Set\n\ncommonElements :: (Ord a) => Set a -> Set a -> Set a -> Set a\ncommonElements s1 s2 s3 = Set.intersection s1 (Set.intersection s2 s3)\n\nmain :: IO ()\nmain = do\n    let set1 = Set.fromList [1, 2, 3, 4, 5]\n    let set2 = Set.fromList [3, 4, 5, 6, 7]\n    let set3 = Set.fromList [2, 3, 5, 7, 9]\n    print $ commonElements set1 set2 set3\n```"
  },
  {
    "task": "Create a set and demonstrate how to remove an element by its value.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nmain :: IO ()\nmain = do\n    let initialSet = Set.fromList [1, 2, 3, 4, 5]\n    let modifiedSet = Set.delete 3 initialSet\n    print modifiedSet\n```"
  },
  {
    "task": "Implement a set to store a collection of unique ISBN numbers.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\ntype ISBN = String\ntype ISBNSet = Set.Set ISBN\n\naddISBN :: ISBN -> ISBNSet -> ISBNSet\naddISBN = Set.insert\n\nremoveISBN :: ISBN -> ISBNSet -> ISBNSet\nremoveISBN = Set.delete\n\ncontainsISBN :: ISBN -> ISBNSet -> Bool\ncontainsISBN = Set.member\n\nemptyISBNSet :: ISBNSet\nemptyISBNSet = Set.empty\n```"
  },
  {
    "task": "Create a set and demonstrate the `intersection_update` method.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nmain :: IO ()\nmain = do\n    let set1 = Set.fromList [1, 2, 3, 4, 5]\n        set2 = Set.fromList [3, 4, 5, 6, 7]\n        intersectionUpdatedSet = Set.intersection set1 set2\n    print intersectionUpdatedSet\n```"
  },
  {
    "task": "Write a function to generate a set of all unique elements in a list.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nuniqueElements :: Ord a => [a] -> Set.Set a\nuniqueElements = Set.fromList\n```"
  },
  {
    "task": "Use a set to determine the unique characters in two strings.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nuniqueCharacters :: String -> String -> Set.Set Char\nuniqueCharacters str1 str2 = Set.union (Set.fromList str1) (Set.fromList str2)\n```"
  },
  {
    "task": "Create a set of unique animal names and demonstrate the `discard` method.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nmain :: IO ()\nmain = do\n    let animals = Set.fromList [\"cat\", \"dog\", \"elephant\", \"tiger\"]\n    let animalsAfterDiscard = Set.delete \"dog\" animals\n    print animalsAfterDiscard\n```"
  },
  {
    "task": "Write a program to find all elements present in the first set but not in the second.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\ndifference :: Ord a => [a] -> [a] -> [a]\ndifference xs ys = Set.toList $ Set.difference (Set.fromList xs) (Set.fromList ys)\n\nmain :: IO ()\nmain = do\n    let set1 = [1, 2, 3, 4, 5]\n    let set2 = [3, 4, 5, 6, 7]\n    print $ difference set1 set2\n```"
  },
  {
    "task": "Create a set of integers and demonstrate using it to eliminate duplicates from a list.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nremoveDuplicates :: [Int] -> [Int]\nremoveDuplicates list = Set.toList (Set.fromList list)\n\nmain :: IO ()\nmain = do\n    let originalList = [1, 2, 2, 3, 4, 4, 5]\n    let uniqueList = removeDuplicates originalList\n    print uniqueList\n```"
  },
  {
    "task": "Implement a set to manage a collection of unique car models.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\ntype CarModel = String\ntype CarModelSet = Set.Set CarModel\n\naddCarModel :: CarModel -> CarModelSet -> CarModelSet\naddCarModel = Set.insert\n\nremoveCarModel :: CarModel -> CarModelSet -> CarModelSet\nremoveCarModel = Set.delete\n\nisCarModelPresent :: CarModel -> CarModelSet -> Bool\nisCarModelPresent = Set.member\n\nlistCarModels :: CarModelSet -> [CarModel]\nlistCarModels = Set.toList\n\nemptyCarModelSet :: CarModelSet\nemptyCarModelSet = Set.empty\n```"
  },
  {
    "task": "Create a set and demonstrate the use of the `clear` method.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nmain :: IO ()\nmain = do\n    let initialSet = Set.fromList [1, 2, 3, 4, 5]\n    let clearedSet = Set.empty\n    print clearedSet\n```"
  },
  {
    "task": "Write a function that finds the intersection of multiple sets.",
    "code": "```haskell\nimport Data.Set (Set, intersection, fromList, toList)\n\nintersectionOfSets :: Ord a => [Set a] -> Set a\nintersectionOfSets [] = fromList []\nintersectionOfSets (s:ss) = foldr intersection s ss\n\n-- Example usage:\n-- let set1 = fromList [1, 2, 3]\n-- let set2 = fromList [2, 3, 4]\n-- let set3 = fromList [3, 4, 5]\n-- toList (intersectionOfSets [set1, set2, set3]) -- Output: [3]\n```"
  },
  {
    "task": "Use a set to identify unique words in a paragraph.",
    "code": "```haskell\nimport qualified Data.Set as Set\nimport Data.Char (toLower, isAlpha)\n\nuniqueWords :: String -> Set.Set String\nuniqueWords paragraph = Set.fromList . words $ map toLower cleanedParagraph\n  where\n    cleanedParagraph = filter (\\c -> isAlpha c || c == ' ') paragraph\n\nmain :: IO ()\nmain = do\n  let paragraph = \"This is a test. This test is only a test.\"\n  print $ uniqueWords paragraph\n```"
  },
  {
    "task": "Create a set of unique country codes and demonstrate membership testing.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nmain :: IO ()\nmain = do\n    let countryCodes = Set.fromList [\"US\", \"CA\", \"GB\", \"AU\", \"DE\"]\n    print $ \"US\" `Set.member` countryCodes\n    print $ \"FR\" `Set.member` countryCodes\n```"
  },
  {
    "task": "Write a program to find the union of two sets and return it as a list.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nunionOfSets :: Ord a => [a] -> [a] -> [a]\nunionOfSets xs ys = Set.toList $ Set.union (Set.fromList xs) (Set.fromList ys)\n```"
  },
  {
    "task": "Create a set and demonstrate using it to check if all elements of another set are present.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nmain :: IO ()\nmain = do\n    let setA = Set.fromList [1, 2, 3, 4, 5]\n    let setB = Set.fromList [3, 4, 5]\n    let allPresent = setB `Set.isSubsetOf` setA\n    print allPresent\n```"
  },
  {
    "task": "Implement a set to store unique coupon codes and demonstrate adding new codes.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nmain :: IO ()\nmain = do\n    let initialCoupons = Set.fromList [\"SAVE10\", \"FREESHIP\", \"WELCOME\"]\n    let newCoupons = Set.fromList [\"WELCOME\", \"DISCOUNT20\", \"SAVE10\", \"NEWUSER\"]\n    let updatedCoupons = Set.union initialCoupons newCoupons\n    print updatedCoupons\n```"
  },
  {
    "task": "Create a set and demonstrate the `copy` method.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nmain :: IO ()\nmain = do\n    let originalSet = Set.fromList [1, 2, 3, 4, 5]\n    let copiedSet = Set.union originalSet Set.empty\n    print originalSet\n    print copiedSet\n```"
  },
  {
    "task": "Write a function to remove duplicates from a list using a set.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nremoveDuplicates :: Ord a => [a] -> [a]\nremoveDuplicates = Set.toList . Set.fromList\n```"
  },
  {
    "task": "Use a set to identify unique numbers in a sequence.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nuniqueNumbers :: (Ord a) => [a] -> [a]\nuniqueNumbers = Set.toList . Set.fromList\n```"
  },
  {
    "task": "Create a set of unique fruit names and demonstrate set operations with it.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\n-- Create a set of unique fruit names\nlet fruits = Set.fromList [\"apple\", \"banana\", \"cherry\", \"date\", \"fig\"]\n\n-- Demonstrate set operations\n-- Add a new fruit\nlet fruitsWithNew = Set.insert \"grape\" fruits\n\n-- Remove a fruit\nlet fruitsWithoutDate = Set.delete \"date\" fruits\n\n-- Check membership\nlet hasCherry = Set.member \"cherry\" fruits\n\n-- Union with another set\nlet moreFruits = Set.fromList [\"kiwi\", \"banana\", \"lemon\"]\nlet allFruits = Set.union fruits moreFruits\n\n-- Intersection with another set\nlet commonFruits = Set.intersection fruits moreFruits\n\n-- Difference between two sets\nlet uniqueFruits = Set.difference fruits moreFruits\n\n-- Print results\nprint fruits\nprint fruitsWithNew\nprint fruitsWithoutDate\nprint hasCherry\nprint allFruits\nprint commonFruits\nprint uniqueFruits\n```"
  }
]