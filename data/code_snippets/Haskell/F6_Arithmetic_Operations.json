[
  {
    "task": "Write a function that takes two numbers and returns their sum.",
    "code": "```haskell\nsumTwoNumbers :: Num a => a -> a -> a\nsumTwoNumbers x y = x + y\n```"
  },
  {
    "task": "Create a program that calculates the difference between two given integers.",
    "code": "```haskell\ncalculateDifference :: Int -> Int -> Int\ncalculateDifference x y = x - y\n\nmain :: IO ()\nmain = do\n    putStrLn \"Enter first integer:\"\n    input1 <- getLine\n    putStrLn \"Enter second integer:\"\n    input2 <- getLine\n    let x = read input1 :: Int\n    let y = read input2 :: Int\n    let difference = calculateDifference x y\n    putStrLn (\"The difference is: \" ++ show difference)\n```"
  },
  {
    "task": "Design a function to multiply two floating-point numbers and return the result.",
    "code": "```haskell\nmultiply :: Float -> Float -> Float\nmultiply x y = x * y\n```"
  },
  {
    "task": "Implement a function that divides two numbers and handles division by zero exceptions.",
    "code": "```haskell\nsafeDivide :: Double -> Double -> Either String Double\nsafeDivide _ 0 = Left \"Division by zero error\"\nsafeDivide x y = Right (x / y)\n```"
  },
  {
    "task": "Build a calculator that can perform addition, subtraction, multiplication, and division on user-provided inputs.",
    "code": "```haskell\nimport Text.Read (readMaybe)\n\nmain :: IO ()\nmain = do\n    putStrLn \"Enter first number:\"\n    input1 <- getLine\n    putStrLn \"Enter an operation (+, -, *, /):\"\n    operation <- getLine\n    putStrLn \"Enter second number:\"\n    input2 <- getLine\n\n    let maybeNum1 = readMaybe input1 :: Maybe Double\n    let maybeNum2 = readMaybe input2 :: Maybe Double\n\n    case (maybeNum1, maybeNum2) of\n        (Just num1, Just num2) -> \n            case operation of\n                \"+\" -> print (num1 + num2)\n                \"-\" -> print (num1 - num2)\n                \"*\" -> print (num1 * num2)\n                \"/\" -> if num2 /= 0 \n                       then print (num1 / num2) \n                       else putStrLn \"Error: Division by zero\"\n                _   -> putStrLn \"Invalid operation\"\n        _ -> putStrLn \"Invalid numbers\"\n```"
  },
  {
    "task": "Write a script to compute the average of a list of numbers using arithmetic operations.",
    "code": "```haskell\naverage :: Fractional a => [a] -> a\naverage xs = sum xs / fromIntegral (length xs)\n\nmain :: IO ()\nmain = do\n    let numbers = [1, 2, 3, 4, 5]\n    print (average numbers)\n```"
  },
  {
    "task": "Create a function that returns the remainder of the division of two integers.",
    "code": "```haskell\nremainder :: Int -> Int -> Int\nremainder a b = a `mod` b\n```"
  },
  {
    "task": "Develop a function that can add a variable number of arguments and return the total.",
    "code": "```haskell\nsumArgs :: Num a => [a] -> a\nsumArgs = sum\n```"
  },
  {
    "task": "Write a program that subtracts a series of numbers from an initial value.",
    "code": "```haskell\nsubtractSeries :: Num a => a -> [a] -> a\nsubtractSeries initialValue numbers = foldl (-) initialValue numbers\n\nmain :: IO ()\nmain = do\n  let initialValue = 100\n  let numbers = [10, 20, 5]\n  let result = subtractSeries initialValue numbers\n  print result\n```"
  },
  {
    "task": "Implement a function that multiplies all elements in an array and returns the product.",
    "code": "```haskell\nmultiplyArray :: Num a => [a] -> a\nmultiplyArray = product\n```"
  },
  {
    "task": "Design a program that divides a number by another and rounds the result to two decimal places.",
    "code": "```haskell\nimport Text.Printf\n\ndivideAndRound :: Double -> Double -> String\ndivideAndRound x y = printf \"%.2f\" (x / y)\n\nmain :: IO ()\nmain = do\n    let result = divideAndRound 10 3\n    putStrLn result\n```"
  },
  {
    "task": "Create a function that performs arithmetic operations on complex numbers.",
    "code": "```haskell\ndata Complex = Complex Double Double\n\naddComplex :: Complex -> Complex -> Complex\naddComplex (Complex a b) (Complex c d) = Complex (a + c) (b + d)\n\nsubtractComplex :: Complex -> Complex -> Complex\nsubtractComplex (Complex a b) (Complex c d) = Complex (a - c) (b - d)\n\nmultiplyComplex :: Complex -> Complex -> Complex\nmultiplyComplex (Complex a b) (Complex c d) = \n    Complex (a * c - b * d) (a * d + b * c)\n\ndivideComplex :: Complex -> Complex -> Complex\ndivideComplex (Complex a b) (Complex c d) = \n    Complex ((a * c + b * d) / denom) ((b * c - a * d) / denom)\n    where denom = c * c + d * d\n```"
  },
  {
    "task": "Write a function to calculate the area of a rectangle given its length and width using multiplication.",
    "code": "```haskell\nrectangleArea :: Double -> Double -> Double\nrectangleArea length width = length * width\n```"
  },
  {
    "task": "Build a program that converts a price in dollars to another currency using multiplication with exchange rates.",
    "code": "```haskell\nconvertCurrency :: Double -> Double -> Double\nconvertCurrency dollars exchangeRate = dollars * exchangeRate\n\nmain :: IO ()\nmain = do\n    putStrLn \"Enter amount in dollars:\"\n    inputDollars <- getLine\n    let dollars = read inputDollars :: Double\n    putStrLn \"Enter exchange rate:\"\n    inputRate <- getLine\n    let exchangeRate = read inputRate :: Double\n    let convertedAmount = convertCurrency dollars exchangeRate\n    putStrLn $ \"Converted amount: \" ++ show convertedAmount\n```"
  },
  {
    "task": "Implement a function that checks if a number is divisible by another and returns a boolean.",
    "code": "```haskell\nisDivisible :: Integral a => a -> a -> Bool\nisDivisible x y = x `mod` y == 0\n```"
  },
  {
    "task": "Write a script to sum the digits of an integer using arithmetic operations.",
    "code": "```haskell\nsumDigits :: Integer -> Integer\nsumDigits n\n  | n < 0     = sumDigits (-n)\n  | n < 10    = n\n  | otherwise = (n `mod` 10) + sumDigits (n `div` 10)\n\nmain :: IO ()\nmain = do\n  let number = 12345\n  print $ sumDigits number\n```"
  },
  {
    "task": "Develop a function that applies a discount percentage to a price using subtraction and multiplication.",
    "code": "```haskell\napplyDiscount :: Double -> Double -> Double\napplyDiscount price discountPercentage = price - (price * (discountPercentage / 100))\n```"
  },
  {
    "task": "Create a program to calculate the yearly salary given an hourly wage and hours worked per week.",
    "code": "```haskell\ncalculateYearlySalary :: Double -> Double -> Double\ncalculateYearlySalary hourlyWage hoursPerWeek = hourlyWage * hoursPerWeek * 52\n\nmain :: IO ()\nmain = do\n    let hourlyWage = 20.0         -- Example hourly wage\n    let hoursPerWeek = 40.0       -- Example hours worked per week\n    let yearlySalary = calculateYearlySalary hourlyWage hoursPerWeek\n    putStrLn $ \"Yearly Salary: $\" ++ show yearlySalary\n```"
  },
  {
    "task": "Design a function that calculates the compound interest over a given period using arithmetic operations.",
    "code": "```haskell\ncompoundInterest :: Double -> Double -> Int -> Double\ncompoundInterest principal rate years = principal * (1 + rate) ** fromIntegral years\n```"
  },
  {
    "task": "Write a program that scales a 2D point by a given factor using multiplication.",
    "code": "```haskell\nscalePoint :: (Num a) => a -> (a, a) -> (a, a)\nscalePoint factor (x, y) = (factor * x, factor * y)\n```"
  },
  {
    "task": "Implement a function that calculates the perimeter of a triangle given its side lengths.",
    "code": "```haskell\ncalculatePerimeter :: Num a => a -> a -> a -> a\ncalculatePerimeter a b c = a + b + c\n```"
  },
  {
    "task": "Create a function to determine if three sides can form a right triangle using the Pythagorean theorem.",
    "code": "```haskell\nisRightTriangle :: (Floating a, Ord a) => a -> a -> a -> Bool\nisRightTriangle a b c = \n    let [x, y, z] = reverse $ sort [a, b, c]\n    in x^2 == y^2 + z^2\n```"
  },
  {
    "task": "Write a script that calculates the total cost of items in a shopping cart using addition.",
    "code": "```haskell\ncalculateTotalCost :: [Double] -> Double\ncalculateTotalCost prices = sum prices\n\nmain :: IO ()\nmain = do\n    let shoppingCart = [19.99, 5.99, 3.50, 12.49]\n    let totalCost = calculateTotalCost shoppingCart\n    putStrLn $ \"Total cost: $\" ++ show totalCost\n```"
  },
  {
    "task": "Develop a function that returns the quotient and remainder of a division operation.",
    "code": "```haskell\nquotientAndRemainder :: Integral a => a -> a -> (a, a)\nquotientAndRemainder dividend divisor = (div dividend divisor, mod dividend divisor)\n```"
  },
  {
    "task": "Build a program that simulates a basic checkout system using arithmetic operations for totals and discounts.",
    "code": "```haskell\nmodule Checkout where\n\ntype Price = Double\ntype DiscountRate = Double\ntype Quantity = Int\n\ntotalCost :: [(Price, Quantity)] -> Price\ntotalCost items = sum [price * fromIntegral qty | (price, qty) <- items]\n\napplyDiscount :: Price -> DiscountRate -> Price\napplyDiscount total discountRate = total - (total * discountRate / 100)\n\ncheckout :: [(Price, Quantity)] -> DiscountRate -> Price\ncheckout items discountRate = applyDiscount (totalCost items) discountRate\n\n-- Example usage\nmain :: IO ()\nmain = do\n    let items = [(10.0, 2), (5.0, 3), (20.0, 1)]\n    let discount = 10.0\n    let total = checkout items discount\n    putStrLn $ \"Total cost after discount: \" ++ show total\n```"
  },
  {
    "task": "Implement a function to calculate the distance between two points on a plane using subtraction and square roots.",
    "code": "```haskell\ndistance :: Floating a => (a, a) -> (a, a) -> a\ndistance (x1, y1) (x2, y2) = sqrt ((x2 - x1) ^ 2 + (y2 - y1) ^ 2)\n```"
  },
  {
    "task": "Write a function that calculates the speed of a vehicle given distance and time using division.",
    "code": "```haskell\ncalculateSpeed :: Double -> Double -> Double\ncalculateSpeed distance time = distance / time\n```"
  },
  {
    "task": "Create a program to compute the total minutes in a given number of hours using multiplication.",
    "code": "```haskell\ncomputeTotalMinutes :: Int -> Int\ncomputeTotalMinutes hours = hours * 60\n```"
  },
  {
    "task": "Design a function that determines the number of dozens of eggs from a given total number of eggs.",
    "code": "```haskell\ndozensOfEggs :: Int -> Int\ndozensOfEggs n = n `div` 12\n```"
  },
  {
    "task": "Write a script to find the greatest common divisor of two numbers using arithmetic operations.",
    "code": "```haskell\ngcd' :: Integer -> Integer -> Integer\ngcd' a 0 = a\ngcd' a b = gcd' b (a `mod` b)\n\nmain :: IO ()\nmain = do\n    let num1 = 56\n    let num2 = 98\n    print $ gcd' num1 num2\n```"
  },
  {
    "task": "Develop a program that calculates the total weight of multiple items using addition.",
    "code": "```haskell\ntotalWeight :: [Double] -> Double\ntotalWeight weights = sum weights\n\nmain :: IO ()\nmain = do\n    let weights = [2.5, 3.1, 4.7]  -- Example weights\n    let total = totalWeight weights\n    putStrLn $ \"Total weight: \" ++ show total\n```"
  },
  {
    "task": "Implement a function to convert a temperature from Celsius to Fahrenheit using multiplication and addition.",
    "code": "```haskell\ncelsiusToFahrenheit :: Double -> Double\ncelsiusToFahrenheit celsius = celsius * (9 / 5) + 32\n```"
  },
  {
    "task": "Create a program that determines the age difference between two people given their birth years.",
    "code": "```haskell\nageDifference :: Int -> Int -> Int\nageDifference birthYear1 birthYear2 = abs (birthYear1 - birthYear2)\n\nmain :: IO ()\nmain = do\n    putStrLn \"Enter the birth year of the first person:\"\n    input1 <- getLine\n    let birthYear1 = read input1 :: Int\n    putStrLn \"Enter the birth year of the second person:\"\n    input2 <- getLine\n    let birthYear2 = read input2 :: Int\n    let difference = ageDifference birthYear1 birthYear2\n    putStrLn $ \"The age difference is \" ++ show difference ++ \" years.\"\n```"
  },
  {
    "task": "Write a function to calculate the final price after applying tax and discount using addition and subtraction.",
    "code": "```haskell\ncalculateFinalPrice :: Double -> Double -> Double -> Double\ncalculateFinalPrice price taxRate discount =\n  let priceWithTax = price + (price * taxRate)\n      finalPrice = priceWithTax - discount\n  in finalPrice\n```"
  },
  {
    "task": "Design a program to compute the net profit given total revenue and expenses.",
    "code": "```haskell\ncomputeNetProfit :: Double -> Double -> Double\ncomputeNetProfit revenue expenses = revenue - expenses\n\nmain :: IO ()\nmain = do\n    putStrLn \"Enter total revenue:\"\n    revenueInput <- getLine\n    let revenue = read revenueInput :: Double\n    putStrLn \"Enter total expenses:\"\n    expensesInput <- getLine\n    let expenses = read expensesInput :: Double\n    let netProfit = computeNetProfit revenue expenses\n    putStrLn $ \"Net Profit: \" ++ show netProfit\n```"
  },
  {
    "task": "Develop a function to calculate the BMI given weight and height using division and multiplication.",
    "code": "```haskell\ncalculateBMI :: Float -> Float -> Float\ncalculateBMI weight height = weight / (height * height)\n```"
  },
  {
    "task": "Create a function that calculates the midpoint between two numbers using addition and division.",
    "code": "```haskell\nmidpoint :: Fractional a => a -> a -> a\nmidpoint x y = (x + y) / 2\n```"
  },
  {
    "task": "Write a program that outputs the result of dividing a number by another with remainder.",
    "code": "```haskell\nmain :: IO ()\nmain = do\n    let dividend = 10\n    let divisor = 3\n    let (quotient, remainder) = dividend `divMod` divisor\n    putStrLn $ \"Quotient: \" ++ show quotient\n    putStrLn $ \"Remainder: \" ++ show remainder\n```"
  },
  {
    "task": "Implement a function to calculate the factorial of a number using multiplication.",
    "code": "```haskell\nfactorial :: Integer -> Integer\nfactorial 0 = 1\nfactorial n = n * factorial (n - 1)\n```"
  },
  {
    "task": "Build a script to find the average of three numbers using addition and division.",
    "code": "```haskell\naverageOfThree :: Fractional a => a -> a -> a -> a\naverageOfThree x y z = (x + y + z) / 3\n\nmain :: IO ()\nmain = do\n    let num1 = 10\n    let num2 = 20\n    let num3 = 30\n    print (averageOfThree num1 num2 num3)\n```"
  },
  {
    "task": "Create a program that simulates a simple bank account using arithmetic operations for deposits and withdrawals.",
    "code": "```haskell\nmodule BankAccount where\n\ndata Account = Account { balance :: Double } deriving Show\n\ndeposit :: Account -> Double -> Account\ndeposit (Account bal) amount = Account (bal + amount)\n\nwithdraw :: Account -> Double -> Account\nwithdraw (Account bal) amount\n  | amount <= bal = Account (bal - amount)\n  | otherwise = error \"Insufficient funds\"\n\nmain :: IO ()\nmain = do\n  let initialAccount = Account 1000.0\n  let accountAfterDeposit = deposit initialAccount 200.0\n  let accountAfterWithdrawal = withdraw accountAfterDeposit 150.0\n  print accountAfterWithdrawal\n```"
  },
  {
    "task": "Write a function that computes the cost per item given a total cost and quantity using division.",
    "code": "```haskell\ncostPerItem :: Fractional a => a -> a -> a\ncostPerItem totalCost quantity = totalCost / quantity\n```"
  },
  {
    "task": "Design a program that calculates the time required to travel a distance at a given speed.",
    "code": "```haskell\ncalculateTravelTime :: Double -> Double -> Double\ncalculateTravelTime distance speed = distance / speed\n\nmain :: IO ()\nmain = do\n    putStrLn \"Enter the distance to travel (in km):\"\n    distanceInput <- getLine\n    putStrLn \"Enter the speed (in km/h):\"\n    speedInput <- getLine\n    let distance = read distanceInput :: Double\n    let speed = read speedInput :: Double\n    let time = calculateTravelTime distance speed\n    putStrLn (\"Time required to travel: \" ++ show time ++ \" hours\")\n```"
  },
  {
    "task": "Develop a function that returns the absolute difference between two numbers.",
    "code": "```haskell\nabsoluteDifference :: Num a => a -> a -> a\nabsoluteDifference x y = abs (x - y)\n```"
  },
  {
    "task": "Implement a program to compute the geometric mean of a set of numbers using multiplication and roots.",
    "code": "```haskell\nimport Data.List (foldl')\n\ngeometricMean :: (Floating a) => [a] -> a\ngeometricMean xs = product xs ** (1 / fromIntegral (length xs))\n\nmain :: IO ()\nmain = do\n    let numbers = [1.0, 2.0, 3.0, 4.0, 5.0]\n    print $ geometricMean numbers\n```"
  },
  {
    "task": "Write a function to calculate the total interest paid on a loan using arithmetic operations.",
    "code": "```haskell\ncalculateTotalInterest :: Double -> Double -> Int -> Double\ncalculateTotalInterest principal rate years = totalInterest\n  where\n    totalInterest = principal * rate * fromIntegral years\n```"
  },
  {
    "task": "Create a program that calculates the sum of even numbers within a specified range.",
    "code": "```haskell\nsumOfEvens :: Int -> Int -> Int\nsumOfEvens start end = sum [x | x <- [start..end], even x]\n\nmain :: IO ()\nmain = do\n    let start = 1\n    let end = 10\n    print $ sumOfEvens start end\n```"
  },
  {
    "task": "Design a script to determine the final balance in a savings account after regular deposits and withdrawals.",
    "code": "```haskell\nmodule Main where\n\nimport Data.List (foldl')\n\ntype Balance = Double\ntype Transaction = Double\n\nfinalBalance :: Balance -> [Transaction] -> Balance\nfinalBalance initialBalance transactions = foldl' (+) initialBalance transactions\n\nmain :: IO ()\nmain = do\n    let initialBalance = 1000.0\n    let transactions = [200.0, -50.0, -100.0, 300.0, -20.0]\n    let balance = finalBalance initialBalance transactions\n    print balance\n```"
  },
  {
    "task": "Develop a function to compute the surface area of a cylinder given its radius and height.",
    "code": "```haskell\nsurfaceAreaCylinder :: Floating a => a -> a -> a\nsurfaceAreaCylinder radius height = 2 * pi * radius * (radius + height)\n```"
  },
  {
    "task": "Write a program that outputs the result of an arithmetic sequence given the first term and common difference.",
    "code": "```haskell\narithmeticSequence :: Int -> Int -> [Int]\narithmeticSequence firstTerm commonDifference = [firstTerm, firstTerm + commonDifference ..]\n\nmain :: IO ()\nmain = do\n    putStrLn \"Enter the first term:\"\n    firstTermStr <- getLine\n    putStrLn \"Enter the common difference:\"\n    commonDifferenceStr <- getLine\n    let firstTerm = read firstTermStr :: Int\n    let commonDifference = read commonDifferenceStr :: Int\n    print $ take 10 $ arithmeticSequence firstTerm commonDifference\n```"
  },
  {
    "task": "Implement a function that finds the average speed for a trip given total distance and time.",
    "code": "```haskell\naverageSpeed :: Fractional a => a -> a -> a\naverageSpeed distance time = distance / time\n```"
  },
  {
    "task": "Create a function to calculate the total cost of a road trip given fuel cost per mile and distance.",
    "code": "```haskell\ntotalCost :: Double -> Double -> Double\ntotalCost costPerMile distance = costPerMile * distance\n```"
  },
  {
    "task": "Write a script that determines the number of tiles required to cover a floor area using arithmetic operations.",
    "code": "```haskell\ntilesRequired :: Double -> Double -> Double -> Int\ntilesRequired floorLength floorWidth tileSide = ceiling (floorArea / tileArea)\n  where\n    floorArea = floorLength * floorWidth\n    tileArea = tileSide * tileSide\n\nmain :: IO ()\nmain = do\n  let floorLength = 10.0\n  let floorWidth = 12.0\n  let tileSide = 2.5\n  let requiredTiles = tilesRequired floorLength floorWidth tileSide\n  putStrLn $ \"Number of tiles required: \" ++ show requiredTiles\n```"
  },
  {
    "task": "Develop a program to calculate the amount of paint needed to cover a wall given its area.",
    "code": "```haskell\npaintNeeded :: Double -> Double -> Double\npaintNeeded areaPerLiter wallArea = wallArea / areaPerLiter\n\nmain :: IO ()\nmain = do\n    putStrLn \"Enter the area coverage per liter of paint:\"\n    areaPerLiterStr <- getLine\n    putStrLn \"Enter the area of the wall:\"\n    wallAreaStr <- getLine\n    let areaPerLiter = read areaPerLiterStr :: Double\n    let wallArea = read wallAreaStr :: Double\n    let litersNeeded = paintNeeded areaPerLiter wallArea\n    putStrLn $ \"Liters of paint needed: \" ++ show litersNeeded\n```"
  },
  {
    "task": "Build a function that calculates the price per unit weight given total price and weight.",
    "code": "```haskell\npricePerUnitWeight :: Fractional a => a -> a -> a\npricePerUnitWeight totalPrice weight = totalPrice / weight\n```"
  },
  {
    "task": "Implement a program that computes the volume of a rectangular prism given its dimensions.",
    "code": "```haskell\ncomputeVolume :: Double -> Double -> Double -> Double\ncomputeVolume length width height = length * width * height\n\nmain :: IO ()\nmain = do\n    putStrLn \"Enter the length of the prism:\"\n    lengthInput <- getLine\n    let length = read lengthInput :: Double\n    putStrLn \"Enter the width of the prism:\"\n    widthInput <- getLine\n    let width = read widthInput :: Double\n    putStrLn \"Enter the height of the prism:\"\n    heightInput <- getLine\n    let height = read heightInput :: Double\n    let volume = computeVolume length width height\n    putStrLn $ \"The volume of the rectangular prism is \" ++ show volume\n```"
  },
  {
    "task": "Write a function to find the percentage increase or decrease between two numbers.",
    "code": "```haskell\npercentageChange :: Fractional a => a -> a -> a\npercentageChange original new = ((new - original) / original) * 100\n```"
  },
  {
    "task": "Create a program to determine the number of complete weeks within a specified number of days.",
    "code": "```haskell\ncompleteWeeks :: Int -> Int\ncompleteWeeks days = days `div` 7\n\nmain :: IO ()\nmain = do\n    let days = 23\n    print (completeWeeks days)\n```"
  },
  {
    "task": "Design a function that calculates the break-even point for a business using cost and revenue data.",
    "code": "```haskell\nbreakEvenPoint :: (Fractional a, Ord a) => a -> a -> a -> a\nbreakEvenPoint fixedCosts variableCostPerUnit pricePerUnit\n  | pricePerUnit > variableCostPerUnit = fixedCosts / (pricePerUnit - variableCostPerUnit)\n  | otherwise = error \"No break-even point, price per unit must be greater than variable cost per unit\"\n```"
  },
  {
    "task": "Develop a program that converts a total number of seconds into hours, minutes, and seconds.",
    "code": "```haskell\nconvertSeconds :: Int -> (Int, Int, Int)\nconvertSeconds totalSeconds = (hours, minutes, seconds)\n  where\n    hours = totalSeconds `div` 3600\n    remainingSeconds = totalSeconds `mod` 3600\n    minutes = remainingSeconds `div` 60\n    seconds = remainingSeconds `mod` 60\n\nmain :: IO ()\nmain = do\n  let totalSeconds = 3661\n  let (h, m, s) = convertSeconds totalSeconds\n  putStrLn $ \"Hours: \" ++ show h ++ \", Minutes: \" ++ show m ++ \", Seconds: \" ++ show s\n```"
  },
  {
    "task": "Write a function that calculates the depreciation of an asset over time using arithmetic operations.",
    "code": "```haskell\ncalculateDepreciation :: Double -> Double -> Double -> Double\ncalculateDepreciation initialValue salvageValue usefulLife =\n  (initialValue - salvageValue) / usefulLife\n```"
  },
  {
    "task": "Create a program that computes the final exam grade needed to achieve a target course average.",
    "code": "```haskell\ncalculateFinalExamGrade :: Double -> Double -> Double -> Double -> Double\ncalculateFinalExamGrade currentAverage targetAverage finalExamWeight totalWeight =\n  let currentWeight = totalWeight - finalExamWeight\n      neededExamScore = (targetAverage * totalWeight - currentAverage * currentWeight) / finalExamWeight\n  in neededExamScore\n\nmain :: IO ()\nmain = do\n  putStrLn \"Enter current average:\"\n  currentAverage <- readLn\n  putStrLn \"Enter target average:\"\n  targetAverage <- readLn\n  putStrLn \"Enter final exam weight (as a percentage):\"\n  finalExamWeight <- readLn\n  putStrLn \"Enter total weight (as a percentage):\"\n  totalWeight <- readLn\n  let neededExamScore = calculateFinalExamGrade currentAverage targetAverage finalExamWeight totalWeight\n  putStrLn $ \"You need to score at least \" ++ show neededExamScore ++ \" on the final exam.\"\n```"
  },
  {
    "task": "Implement a function to calculate the total cost of groceries given prices and quantities of items.",
    "code": "```haskell\ntotalCost :: [(Double, Int)] -> Double\ntotalCost items = sum [price * fromIntegral quantity | (price, quantity) <- items]\n```"
  },
  {
    "task": "Write a script that determines the number of years required to double an investment using a fixed interest rate.",
    "code": "```haskell\nyearsToDoubleInvestment :: Double -> Int\nyearsToDoubleInvestment rate = ceiling $ logBase (1 + rate) 2\n\nmain :: IO ()\nmain = do\n    putStrLn \"Enter the interest rate (as a decimal):\"\n    rateInput <- getLine\n    let rate = read rateInput :: Double\n    let years = yearsToDoubleInvestment rate\n    putStrLn $ \"Years to double the investment: \" ++ show years\n```"
  },
  {
    "task": "Develop a function that computes the harmonic mean of a set of numbers using division and addition.",
    "code": "```haskell\nharmonicMean :: [Double] -> Double\nharmonicMean xs = fromIntegral (length xs) / sum (map (1.0 /) xs)\n```"
  },
  {
    "task": "Create a program to find the sum of the squares of numbers in a given range.",
    "code": "```haskell\nsumOfSquares :: Int -> Int -> Int\nsumOfSquares a b = sum [x * x | x <- [a..b]]\n\nmain :: IO ()\nmain = do\n    let a = 1\n    let b = 10\n    print (sumOfSquares a b)\n```"
  },
  {
    "task": "Design a function that calculates the energy consumption of an appliance given power and usage time.",
    "code": "```haskell\ncalculateEnergyConsumption :: Double -> Double -> Double\ncalculateEnergyConsumption power usageTime = power * usageTime\n```"
  },
  {
    "task": "Write a program that simulates a simple stock portfolio using arithmetic operations for buying and selling.",
    "code": "```haskell\ntype Portfolio = [(String, Int, Double)] -- (Stock Symbol, Quantity, Price per Share)\n\nbuyStock :: Portfolio -> String -> Int -> Double -> Portfolio\nbuyStock portfolio symbol quantity price =\n    case lookup symbol portfolio of\n        Just (q, p) -> map (\\(s, q', p') -> if s == symbol then (s, q + quantity, (p * fromIntegral q + price * fromIntegral quantity) / fromIntegral (q + quantity)) else (s, q', p')) portfolio\n        Nothing     -> (symbol, quantity, price) : portfolio\n\nsellStock :: Portfolio -> String -> Int -> Portfolio\nsellStock portfolio symbol quantity =\n    map (\\(s, q, p) -> if s == symbol then (s, q - quantity, p) else (s, q, p)) $ filter (\\(s, q, _) -> s /= symbol || q > quantity) portfolio\n\nmain :: IO ()\nmain = do\n    let portfolio = [(\"AAPL\", 10, 150.0), (\"GOOGL\", 5, 2800.0)]\n    let portfolioAfterBuy = buyStock portfolio \"AAPL\" 5 155.0\n    let portfolioAfterSell = sellStock portfolioAfterBuy \"GOOGL\" 2\n    print portfolioAfterSell\n```"
  },
  {
    "task": "Implement a function to calculate the gravitational force between two masses using multiplication and division.",
    "code": "```haskell\ngravitationalForce :: Double -> Double -> Double -> Double\ngravitationalForce m1 m2 r = (g * m1 * m2) / (r * r)\n  where g = 6.67430e-11\n```"
  },
  {
    "task": "Create a function that determines the price per square foot of a piece of real estate.",
    "code": "```haskell\npricePerSquareFoot :: Double -> Double -> Double\npricePerSquareFoot price area = price / area\n```"
  },
  {
    "task": "Write a script to compute the total interest earned on a savings account with monthly compounding.",
    "code": "```haskell\ncalculateInterest :: Double -> Double -> Int -> Double\ncalculateInterest principal rate months = \n    principal * ((1 + rate / 12) ^ months - 1)\n\nmain :: IO ()\nmain = do\n    let principal = 1000.0  -- Example principal amount\n    let annualRate = 0.05   -- Example annual interest rate (5%)\n    let months = 12         -- Example number of months\n    let totalInterest = calculateInterest principal annualRate months\n    print totalInterest\n```"
  },
  {
    "task": "Develop a program that calculates the calories burned during exercise given MET value and duration.",
    "code": "```haskell\ncalculateCalories :: Double -> Double -> Double -> Double\ncalculateCalories met weight duration = met * weight * duration / 60\n\nmain :: IO ()\nmain = do\n    putStrLn \"Enter MET value:\"\n    metStr <- getLine\n    putStrLn \"Enter weight in kg:\"\n    weightStr <- getLine\n    putStrLn \"Enter duration in minutes:\"\n    durationStr <- getLine\n    let met = read metStr :: Double\n    let weight = read weightStr :: Double\n    let duration = read durationStr :: Double\n    let calories = calculateCalories met weight duration\n    putStrLn $ \"Calories burned: \" ++ show calories\n```"
  },
  {
    "task": "Build a function that converts a speed from miles per hour to kilometers per hour using multiplication.",
    "code": "```haskell\nconvertMphToKph :: Double -> Double\nconvertMphToKph mph = mph * 1.60934\n```"
  },
  {
    "task": "Implement a program to find the number of days between two dates using arithmetic operations.",
    "code": "```haskell\nimport Data.Time.Calendar\n\ndaysBetweenDates :: Integer -> Int -> Int -> Integer -> Int -> Int -> Integer\ndaysBetweenDates year1 month1 day1 year2 month2 day2 = \n    let date1 = fromGregorian year1 month1 day1\n        date2 = fromGregorian year2 month2 day2\n    in diffDays date2 date1\n\nmain :: IO ()\nmain = do\n    let year1 = 2023\n    let month1 = 10\n    let day1 = 1\n    let year2 = 2023\n    let month2 = 10\n    let day2 = 15\n    print $ daysBetweenDates year1 month1 day1 year2 month2 day2\n```"
  },
  {
    "task": "Write a function to calculate the area of a circle given its radius.",
    "code": "```haskell\nareaOfCircle :: Floating a => a -> a\nareaOfCircle radius = pi * radius * radius\n```"
  },
  {
    "task": "Create a program that determines the total distance driven given trips with varying speeds and durations.",
    "code": "```haskell\ntype Trip = (Double, Double) -- (speed, duration)\n\ntotalDistance :: [Trip] -> Double\ntotalDistance trips = sum [speed * duration | (speed, duration) <- trips]\n\nmain :: IO ()\nmain = do\n  let trips = [(60, 2), (50, 1.5), (80, 2.5)] -- example trips\n  print $ totalDistance trips\n```"
  },
  {
    "task": "Design a function to compute the final price of an item after applying multiple discounts sequentially.",
    "code": "```haskell\napplyDiscounts :: Double -> [Double] -> Double\napplyDiscounts price discounts = foldl applyDiscount price discounts\n  where\n    applyDiscount p d = p * (1 - d / 100)\n```"
  },
  {
    "task": "Write a script that calculates the number of bricks needed to build a wall given wall dimensions and brick size.",
    "code": "```haskell\ncalculateBricks :: (Int, Int) -> (Int, Int) -> Int\ncalculateBricks (wallWidth, wallHeight) (brickWidth, brickHeight) =\n    let wallArea = wallWidth * wallHeight\n        brickArea = brickWidth * brickHeight\n    in wallArea `div` brickArea\n\nmain :: IO ()\nmain = do\n    let wallDimensions = (100, 200) -- Example wall dimensions: width=100, height=200\n        brickDimensions = (10, 20)  -- Example brick dimensions: width=10, height=20\n        numberOfBricks = calculateBricks wallDimensions brickDimensions\n    print numberOfBricks\n```"
  },
  {
    "task": "Develop a program to determine the number of pizzas required for a party given the number of people and slices per pizza.",
    "code": "```haskell\ncalculatePizzas :: Int -> Int -> Int -> Int\ncalculatePizzas people slicesPerPizza slicesPerPerson =\n  let totalSlicesNeeded = people * slicesPerPerson\n  in ceiling (fromIntegral totalSlicesNeeded / fromIntegral slicesPerPizza)\n\nmain :: IO ()\nmain = do\n  putStrLn \"Enter the number of people:\"\n  inputPeople <- getLine\n  let people = read inputPeople :: Int\n  putStrLn \"Enter the number of slices per pizza:\"\n  inputSlicesPerPizza <- getLine\n  let slicesPerPizza = read inputSlicesPerPizza :: Int\n  putStrLn \"Enter the number of slices each person will eat:\"\n  inputSlicesPerPerson <- getLine\n  let slicesPerPerson = read inputSlicesPerPerson :: Int\n  let pizzasNeeded = calculatePizzas people slicesPerPizza slicesPerPerson\n  putStrLn $ \"Number of pizzas required: \" ++ show pizzasNeeded\n```"
  },
  {
    "task": "Implement a function that calculates the total cost of a meal including tax and tip.",
    "code": "```haskell\ncalculateTotalCost :: Double -> Double -> Double -> Double\ncalculateTotalCost mealCost taxRate tipRate = mealCost + taxAmount + tipAmount\n  where\n    taxAmount = mealCost * taxRate / 100\n    tipAmount = mealCost * tipRate / 100\n```"
  },
  {
    "task": "Create a program to compute the average rainfall over a period using addition and division.",
    "code": "```haskell\naverageRainfall :: [Double] -> Double\naverageRainfall rainfalls = sum rainfalls / fromIntegral (length rainfalls)\n\nmain :: IO ()\nmain = do\n    let rainfalls = [5.2, 3.8, 4.0, 6.7, 2.9] -- Example rainfall data\n    let average = averageRainfall rainfalls\n    putStrLn $ \"The average rainfall is: \" ++ show average\n```"
  },
  {
    "task": "Write a function that determines the number of batches needed to produce a specific quantity of a product.",
    "code": "```haskell\nbatchesNeeded :: Int -> Int -> Int\nbatchesNeeded quantity batchSize = ceiling (fromIntegral quantity / fromIntegral batchSize)\n```"
  },
  {
    "task": "Design a program to calculate the total energy consumption of a household given individual appliance usage.",
    "code": "```haskell\nmodule Main where\n\ncalculateEnergyConsumption :: [(String, Double)] -> Double\ncalculateEnergyConsumption appliances = sum $ map snd appliances\n\nmain :: IO ()\nmain = do\n    let appliances = [(\"Fridge\", 150.0), (\"Washing Machine\", 500.0), (\"TV\", 100.0), (\"Oven\", 200.0)]\n    let totalEnergy = calculateEnergyConsumption appliances\n    putStrLn $ \"Total Energy Consumption: \" ++ show totalEnergy ++ \" kWh\"\n```"
  },
  {
    "task": "Develop a function that computes the body surface area of a person using height and weight.",
    "code": "```haskell\nbodySurfaceArea :: Double -> Double -> Double\nbodySurfaceArea height weight = 0.007184 * (height ** 0.725) * (weight ** 0.425)\n```"
  },
  {
    "task": "Build a script to calculate the monthly payment on a mortgage using principal, interest rate, and term.",
    "code": "```haskell\ncalculateMonthlyPayment :: Double -> Double -> Int -> Double\ncalculateMonthlyPayment principal annualRate years =\n  let monthlyRate = annualRate / 12 / 100\n      numberOfPayments = fromIntegral (years * 12)\n  in principal * monthlyRate / (1 - (1 + monthlyRate) ** (-numberOfPayments))\n\nmain :: IO ()\nmain = do\n  let principal = 200000  -- Example principal amount\n      annualRate = 5      -- Example annual interest rate as percentage\n      years = 30          -- Example term in years\n  print $ calculateMonthlyPayment principal annualRate years\n```"
  },
  {
    "task": "Implement a function to find the volume of a cone given its height and radius.",
    "code": "```haskell\nvolumeOfCone :: Floating a => a -> a -> a\nvolumeOfCone height radius = (1 / 3) * pi * radius^2 * height\n```"
  },
  {
    "task": "Write a program that estimates the cost of a trip using fuel efficiency and distance.",
    "code": "```haskell\ncalculateTripCost :: Double -> Double -> Double -> Double\ncalculateTripCost fuelEfficiency distance fuelCostPerUnit =\n  (distance / fuelEfficiency) * fuelCostPerUnit\n\nmain :: IO ()\nmain = do\n  let fuelEfficiency = 25.0 -- miles per gallon\n      distance = 300.0      -- miles\n      fuelCostPerUnit = 3.5 -- dollars per gallon\n      cost = calculateTripCost fuelEfficiency distance fuelCostPerUnit\n  putStrLn $ \"The estimated cost of the trip is: $\" ++ show cost\n```"
  }
]