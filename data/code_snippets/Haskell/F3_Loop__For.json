[
  {
    "task": "Write a program that prints numbers from 1 to 10 using a for loop.",
    "code": "```haskell\nmain :: IO ()\nmain = forM_ [1..10] print\n```"
  },
  {
    "task": "Create a loop that iterates over an array of names and prints each name.",
    "code": "```haskell\nmain :: IO ()\nmain = do\n  let names = [\"Alice\", \"Bob\", \"Charlie\", \"Diana\"]\n  forM_ names putStrLn\n```"
  },
  {
    "task": "Design a for loop to calculate the factorial of a given number.",
    "code": "```haskell\nfactorial :: Integer -> Integer\nfactorial n = product [1..n]\n\nmain :: IO ()\nmain = do\n    let number = 5\n    let result = factorial number\n    print result\n```"
  },
  {
    "task": "Implement a program that uses a for loop to sum all even numbers between 1 and 100.",
    "code": "```haskell\nmain :: IO ()\nmain = print $ sum [x | x <- [1..100], even x]\n```"
  },
  {
    "task": "Use a for loop to generate and print the Fibonacci sequence up to 20 terms.",
    "code": "```haskell\nmain :: IO ()\nmain = do\n    let n = 20\n    mapM_ print (take n (fibonacciSeq 0 1))\n  where\n    fibonacciSeq a b = a : fibonacciSeq b (a + b)\n```"
  },
  {
    "task": "Construct a for loop that prints the multiplication table for a given number.",
    "code": "```haskell\nmain :: IO ()\nmain = do\n    let number = 5  -- You can change this to any number you want the multiplication table for\n    forM_ [1..10] $ \\i -> do\n        putStrLn $ show number ++ \" x \" ++ show i ++ \" = \" ++ show (number * i)\n```"
  },
  {
    "task": "Write code to iterate through a list of student grades and print only those above a certain threshold.",
    "code": "```haskell\nprintGradesAboveThreshold :: [Int] -> Int -> IO ()\nprintGradesAboveThreshold grades threshold = \n    forM_ grades $ \\grade -> \n        when (grade > threshold) $ \n            print grade\n```"
  },
  {
    "task": "Create a for loop that appends the square of numbers 1 to 10 to a list.",
    "code": "```haskell\nsquares :: [Int]\nsquares = [x * x | x <- [1..10]]\n```"
  },
  {
    "task": "Develop a for loop that reverses a given string.",
    "code": "```haskell\nreverseString :: String -> String\nreverseString str = [str !! i | i <- [len-1, len-2 .. 0]]\n  where len = length str\n```"
  },
  {
    "task": "Build a program that uses a for loop to print all elements in a 2D matrix.",
    "code": "```haskell\nmain :: IO ()\nmain = do\n    let matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    forM_ matrix $ \\row -> \n        forM_ row $ \\element ->\n            print element\n```"
  },
  {
    "task": "Use a for loop to find the maximum value in an array of integers.",
    "code": "```haskell\nmaximumValue :: [Int] -> Int\nmaximumValue [] = error \"Empty list has no maximum value\"\nmaximumValue (x:xs) = foldl (\\acc y -> if y > acc then y else acc) x xs\n\nmain :: IO ()\nmain = do\n    let numbers = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]\n    print $ maximumValue numbers\n```"
  },
  {
    "task": "Write a program that uses a for loop to print the characters of a string, one per line.",
    "code": "```haskell\nmain :: IO ()\nmain = do\n    let str = \"Hello, World!\"\n    forM_ str $ \\char -> putStrLn [char]\n```"
  },
  {
    "task": "Create a for loop that counts the number of vowels in a given sentence.",
    "code": "```haskell\ncountVowels :: String -> Int\ncountVowels sentence = length [c | c <- sentence, c `elem` \"aeiouAEIOU\"]\n\nmain :: IO ()\nmain = do\n    let sentence = \"This is a sample sentence.\"\n    let vowelCount = countVowels sentence\n    print vowelCount\n```"
  },
  {
    "task": "Implement a for loop to check if a number is prime by testing divisibility.",
    "code": "```haskell\nisPrime :: Int -> Bool\nisPrime n\n  | n <= 1 = False\n  | otherwise = all (\\i -> n `mod` i /= 0) [2..(floor . sqrt . fromIntegral) n]\n```"
  },
  {
    "task": "Design a for loop that prints a pyramid pattern of asterisks with a given height.",
    "code": "```haskell\nprintPyramid :: Int -> IO ()\nprintPyramid n = forM_ [0..n-1] $ \\i -> do\n    let spaces = replicate (n - i - 1) ' '\n    let stars = replicate (2 * i + 1) '*'\n    putStrLn (spaces ++ stars)\n\nmain :: IO ()\nmain = do\n    let height = 5\n    printPyramid height\n```"
  },
  {
    "task": "Write a program that uses a for loop to calculate the sum of digits of a number.",
    "code": "```haskell\nsumOfDigits :: Int -> Int\nsumOfDigits n = sum [read [d] :: Int | d <- show n]\n\nmain :: IO ()\nmain = do\n    let number = 12345\n    print (sumOfDigits number)\n```"
  },
  {
    "task": "Construct a for loop to flatten a list of lists into a single list.",
    "code": "```haskell\nflatten :: [[a]] -> [a]\nflatten xss = [x | xs <- xss, x <- xs]\n```"
  },
  {
    "task": "Use a for loop to generate a list of random numbers and print them.",
    "code": "```haskell\nimport System.Random (randomRIO)\n\nmain :: IO ()\nmain = do\n    randomNumbers <- sequence [randomRIO (1, 100) | _ <- [1..10]]\n    print randomNumbers\n```"
  },
  {
    "task": "Create a for loop that iterates through a dictionary and prints its keys and values.",
    "code": "```haskell\nimport Data.Map (Map, fromList, toList)\n\nmain :: IO ()\nmain = do\n    let dict = fromList [(\"key1\", \"value1\"), (\"key2\", \"value2\"), (\"key3\", \"value3\")] :: Map String String\n    forM_ (toList dict) $ \\(key, value) -> do\n        putStrLn $ key ++ \": \" ++ value\n```"
  },
  {
    "task": "Develop a for loop that counts down from 10 to 1 and prints each number.",
    "code": "```haskell\nmain :: IO ()\nmain = forM_ [10,9..1] print\n```"
  },
  {
    "task": "Write code to multiply each element in an array by 2 using a for loop.",
    "code": "```haskell\nmultiplyByTwo :: [Int] -> [Int]\nmultiplyByTwo arr = [arr !! i * 2 | i <- [0..length arr - 1]]\n```"
  },
  {
    "task": "Create a for loop that calculates the average of numbers in a list.",
    "code": "```haskell\naverage :: [Double] -> Double\naverage xs = total / fromIntegral count\n  where\n    (total, count) = foldl (\\(sum, cnt) x -> (sum + x, cnt + 1)) (0, 0) xs\n\nmain :: IO ()\nmain = do\n    let numbers = [1.0, 2.0, 3.0, 4.0, 5.0]\n    print $ average numbers\n```"
  },
  {
    "task": "Implement a for loop to find duplicate elements in an array.",
    "code": "```haskell\nfindDuplicates :: Eq a => [a] -> [a]\nfindDuplicates arr = [x | x <- arr, count x arr > 1]\n  where\n    count y = length . filter (== y)\n\nmain :: IO ()\nmain = do\n  let array = [1, 2, 3, 2, 4, 5, 3, 6, 1]\n  let duplicates = findDuplicates array\n  print duplicates\n```"
  },
  {
    "task": "Design a for loop that removes all occurrences of a specific element from a list.",
    "code": "```haskell\nremoveElement :: Eq a => a -> [a] -> [a]\nremoveElement elem lst = [x | x <- lst, x /= elem]\n```"
  },
  {
    "task": "Use a for loop to simulate rolling a dice 100 times and count the occurrences of each face.",
    "code": "```haskell\nimport System.Random\nimport Control.Monad\nimport Data.Array\n\nmain :: IO ()\nmain = do\n    gen <- newStdGen\n    let rolls = take 100 $ randomRs (1, 6) gen :: [Int]\n    let counts = accumArray (+) 0 (1, 6) [(i, 1) | i <- rolls] :: Array Int Int\n    forM_ [1..6] $ \\face -> do\n        putStrLn $ \"Face \" ++ show face ++ \": \" ++ show (counts ! face)\n```"
  },
  {
    "task": "Write a for loop that prints all the prime numbers between 1 and 50.",
    "code": "```haskell\nisPrime :: Int -> Bool\nisPrime n\n  | n < 2     = False\n  | otherwise = null [x | x <- [2..floor (sqrt (fromIntegral n))], n `mod` x == 0]\n\nmain :: IO ()\nmain = forM_ [1..50] $ \\n -> when (isPrime n) (print n)\n```"
  },
  {
    "task": "Develop a for loop that extracts all the uppercase letters from a string.",
    "code": "```haskell\nextractUppercase :: String -> String\nextractUppercase str = [c | c <- str, c `elem` ['A'..'Z']]\n```"
  },
  {
    "task": "Create a for loop that checks if a list is sorted in ascending order.",
    "code": "```haskell\nisSorted :: Ord a => [a] -> Bool\nisSorted xs = all (\\(a, b) -> a <= b) (zip xs (tail xs))\n```"
  },
  {
    "task": "Implement a for loop to generate a list of the first 10 square numbers.",
    "code": "```haskell\nsquares :: [Int]\nsquares = [x^2 | x <- [1..10]]\n```"
  },
  {
    "task": "Write code to print all the elements of a list that are greater than a given number using a for loop.",
    "code": "```haskell\nmain :: IO ()\nmain = do\n  let list = [1, 5, 10, 15, 20]\n      threshold = 8\n  forM_ list $ \\x -> when (x > threshold) (print x)\n```"
  },
  {
    "task": "Construct a for loop that finds the smallest number in an array.",
    "code": "```haskell\nfindSmallest :: (Ord a) => [a] -> Maybe a\nfindSmallest [] = Nothing\nfindSmallest (x:xs) = Just (foldl (\\acc y -> if y < acc then y else acc) x xs)\n```"
  },
  {
    "task": "Develop a for loop that prints the first N lines of Pascal's Triangle.",
    "code": "```haskell\npascalsTriangle :: Int -> [[Int]]\npascalsTriangle n = iterate (\\row -> zipWith (+) (0:row) (row++[0])) [1]\n\nprintPascalsTriangle :: Int -> IO ()\nprintPascalsTriangle n = forM_ (take n (pascalsTriangle n)) print\n\nmain :: IO ()\nmain = do\n    let n = 10  -- You can change this value to print more or fewer lines.\n    printPascalsTriangle n\n```"
  },
  {
    "task": "Create a for loop that calculates the product of all elements in a list.",
    "code": "```haskell\ncalculateProduct :: Num a => [a] -> a\ncalculateProduct xs = foldl (\\acc x -> acc * x) 1 xs\n\nmain :: IO ()\nmain = do\n    let list = [1, 2, 3, 4, 5]\n    let product = calculateProduct list\n    print product\n```"
  },
  {
    "task": "Use a for loop to print numbers from 1 to 100, but replace multiples of 3 with 'Fizz'.",
    "code": "```haskell\nmain :: IO ()\nmain = forM_ [1..100] $ \\i ->\n    if i `mod` 3 == 0\n    then putStrLn \"Fizz\"\n    else print i\n```"
  },
  {
    "task": "Write a for loop that iterates over a string and counts the number of words.",
    "code": "```haskell\ncountWords :: String -> Int\ncountWords str = length $ words str\n\nmain :: IO ()\nmain = do\n  let text = \"This is a sample string with several words\"\n  let wordCount = countWords text\n  print wordCount\n```"
  },
  {
    "task": "Design a for loop that prints numbers from 1 to 50, but skips numbers divisible by 5.",
    "code": "```haskell\nmain :: IO ()\nmain = forM_ [1..50] $ \\i -> \n    when (i `mod` 5 /= 0) $ print i\n```"
  },
  {
    "task": "Implement a for loop that prints a checkerboard pattern of asterisks.",
    "code": "```haskell\nmain :: IO ()\nmain = forM_ [1..8] $ \\i -> do\n    putStrLn $ concat [if even (i + j) then \"*\" else \" \" | j <- [1..8]]\n```"
  },
  {
    "task": "Create a for loop that finds the index of a target value in a list.",
    "code": "```haskell\nfindIndex :: Eq a => a -> [a] -> Maybe Int\nfindIndex target list = go 0 list\n  where\n    go _ [] = Nothing\n    go i (x:xs)\n      | x == target = Just i\n      | otherwise = go (i + 1) xs\n\nmain :: IO ()\nmain = do\n  let target = 5\n  let list = [1, 2, 3, 4, 5, 6, 7]\n  print $ findIndex target list\n```"
  },
  {
    "task": "Use a for loop to concatenate a list of strings into a single string.",
    "code": "```haskell\nconcatenateStrings :: [String] -> String\nconcatenateStrings strs = foldl (\\acc s -> acc ++ s) \"\" strs\n```"
  },
  {
    "task": "Develop a for loop that rotates a list to the right by a given number of positions.",
    "code": "```haskell\nrotateRight :: [a] -> Int -> [a]\nrotateRight xs n = take len $ drop (len - n `mod` len) $ cycle xs\n  where len = length xs\n\nmain :: IO ()\nmain = do\n  let lst = [1, 2, 3, 4, 5]\n  let positions = 2\n  print $ rotateRight lst positions\n```"
  },
  {
    "task": "Write code that uses a for loop to insert an element into a sorted list while maintaining order.",
    "code": "```haskell\ninsertSorted :: Ord a => a -> [a] -> [a]\ninsertSorted x xs = let (before, after) = splitList x xs in before ++ [x] ++ after\n  where\n    splitList x lst = foldr (\\a (b, c) -> if a < x then (a:b, c) else (b, a:c)) ([], []) (reverse lst)\n```"
  },
  {
    "task": "Implement a for loop that counts the frequency of each character in a string.",
    "code": "```haskell\nimport Data.Map (Map)\nimport qualified Data.Map as Map\n\ncountFrequency :: String -> Map Char Int\ncountFrequency str = foldl updateFrequency Map.empty str\n  where\n    updateFrequency freqMap char = Map.insertWith (+) char 1 freqMap\n\nmain :: IO ()\nmain = do\n    let inputString = \"example string\"\n    let frequency = countFrequency inputString\n    print frequency\n```"
  },
  {
    "task": "Create a for loop that prints all subsets of a given set.",
    "code": "```haskell\nimport Data.List (subsequences)\n\nprintSubsets :: [a] -> IO ()\nprintSubsets set = do\n    let subs = subsequences set\n    forM_ subs print\n  where\n    forM_ = flip mapM_\n\nmain :: IO ()\nmain = do\n    let set = [1, 2, 3]  -- Example set\n    printSubsets set\n```"
  },
  {
    "task": "Design a for loop to generate all permutations of a string.",
    "code": "```haskell\nimport Data.List (permutations)\n\ngeneratePermutations :: String -> [String]\ngeneratePermutations s = [perm | perm <- permutations s]\n\nmain :: IO ()\nmain = do\n    let str = \"abc\"\n    let perms = generatePermutations str\n    mapM_ putStrLn perms\n```"
  },
  {
    "task": "Write a for loop that sorts an array in descending order.",
    "code": "```haskell\nimport Data.List (sortBy)\nimport Data.Ord (comparing)\n\nsortDescending :: Ord a => [a] -> [a]\nsortDescending arr = sortBy (flip compare) arr\n\nmain :: IO ()\nmain = do\n    let array = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]\n    let sortedArray = sortDescending array\n    print sortedArray\n```"
  },
  {
    "task": "Use a for loop to generate a sequence of random characters and print them.",
    "code": "```haskell\nimport System.Random (randomRIO)\n\nmain :: IO ()\nmain = do\n    sequence <- mapM (\\_ -> randomRIO ('a', 'z')) [1..10]\n    putStrLn sequence\n```"
  },
  {
    "task": "Construct a for loop that finds the common elements between two lists.",
    "code": "```haskell\ncommonElements :: Eq a => [a] -> [a] -> [a]\ncommonElements list1 list2 = [x | x <- list1, x `elem` list2]\n```"
  },
  {
    "task": "Develop a for loop to calculate and print the cumulative sum of a list.",
    "code": "```haskell\ncumulativeSum :: [Int] -> IO ()\ncumulativeSum list = go list 0\n  where\n    go [] _ = return ()\n    go (x:xs) acc = do\n      let newAcc = acc + x\n      print newAcc\n      go xs newAcc\n\nmain :: IO ()\nmain = do\n  let numbers = [1, 2, 3, 4, 5]\n  cumulativeSum numbers\n```"
  },
  {
    "task": "Create a for loop that prints a diamond pattern using asterisks.",
    "code": "```haskell\nprintDiamond :: Int -> IO ()\nprintDiamond n = do\n    let spaces i = replicate (n - i) ' '\n    let stars i = replicate (2 * i - 1) '*'\n    forM_ [1..n] $ \\i -> do\n        putStrLn (spaces i ++ stars i)\n    forM_ [n-1,n-2..1] $ \\i -> do\n        putStrLn (spaces i ++ stars i)\n\nmain :: IO ()\nmain = printDiamond 5\n```"
  },
  {
    "task": "Write a for loop that simulates a countdown timer from a specified number of seconds.",
    "code": "```haskell\ncountdown :: Int -> IO ()\ncountdown n = forM_ [n, n-1 .. 0] $ \\i -> do\n    putStrLn $ \"Time remaining: \" ++ show i ++ \" seconds\"\n    threadDelay 1000000\n```"
  },
  {
    "task": "Use a for loop to print the transpose of a matrix.",
    "code": "```haskell\ntransposeMatrix :: [[a]] -> [[a]]\ntransposeMatrix [] = []\ntransposeMatrix ([]:_) = []\ntransposeMatrix matrix = [map head matrix] ++ transposeMatrix (map tail matrix)\n\nprintTranspose :: Show a => [[a]] -> IO ()\nprintTranspose matrix = do\n    let transposed = transposeMatrix matrix\n    forM_ transposed print\n\nmain :: IO ()\nmain = do\n    let matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    printTranspose matrix\n```"
  },
  {
    "task": "Implement a for loop that reverses the order of words in a sentence.",
    "code": "```haskell\nreverseWords :: String -> String\nreverseWords sentence = unwords reversedWords\n  where\n    wordsList = words sentence\n    reversedWords = [wordsList !! i | i <- [length wordsList - 1, length wordsList - 2 .. 0]]\n```"
  },
  {
    "task": "Create a for loop that deletes elements from a list that are less than a given value.",
    "code": "```haskell\nfilterGreaterThan :: Ord a => a -> [a] -> [a]\nfilterGreaterThan threshold list = [x | x <- list, x >= threshold]\n```"
  },
  {
    "task": "Design a for loop to merge two sorted lists into a single sorted list.",
    "code": "```haskell\nmergeSortedLists :: Ord a => [a] -> [a] -> [a]\nmergeSortedLists xs ys = go xs ys []\n  where\n    go :: Ord a => [a] -> [a] -> [a] -> [a]\n    go [] ys acc = acc ++ ys\n    go xs [] acc = acc ++ xs\n    go (x:xs) (y:ys) acc\n      | x <= y    = go xs (y:ys) (acc ++ [x])\n      | otherwise = go (x:xs) ys (acc ++ [y])\n\nmain :: IO ()\nmain = do\n  let list1 = [1, 3, 5]\n  let list2 = [2, 4, 6]\n  let mergedList = mergeSortedLists list1 list2\n  print mergedList\n```"
  },
  {
    "task": "Write a for loop that calculates the power of a number using repeated multiplication.",
    "code": "```haskell\npower :: (Num a, Integral b) => a -> b -> a\npower base exponent = \n  let\n    loop acc 0 = acc\n    loop acc n = loop (acc * base) (n - 1)\n  in\n    loop 1 exponent\n```"
  },
  {
    "task": "Use a for loop to find the longest word in a list of words.",
    "code": "```haskell\nfindLongestWord :: [String] -> String\nfindLongestWord words = go \"\" words\n  where\n    go longest [] = longest\n    go longest (w:ws) =\n      let longest' = if length w > length longest then w else longest\n      in go longest' ws\n\nmain :: IO ()\nmain = do\n  let wordsList = [\"apple\", \"banana\", \"cherry\", \"date\"]\n  print $ findLongestWord wordsList\n```"
  },
  {
    "task": "Develop a for loop that sorts a list of tuples based on the second element.",
    "code": "```haskell\nsortBySecondElement :: Ord b => [(a, b)] -> [(a, b)]\nsortBySecondElement list = loop list (length list - 1)\n  where\n    loop lst n\n      | n <= 0    = lst\n      | otherwise = loop (singlePass lst) (n - 1)\n    singlePass (x1@(a1, b1):x2@(a2, b2):xs)\n      | b1 > b2   = x2 : singlePass (x1 : xs)\n      | otherwise = x1 : singlePass (x2 : xs)\n    singlePass xs = xs\n```"
  },
  {
    "task": "Create a for loop that replicates each character in a string a given number of times.",
    "code": "```haskell\nreplicateChars :: String -> Int -> String\nreplicateChars str n = concat [replicate n c | c <- str]\n```"
  },
  {
    "task": "Construct a for loop that replaces spaces in a string with hyphens.",
    "code": "```haskell\nreplaceSpacesWithHyphens :: String -> String\nreplaceSpacesWithHyphens str = [if c == ' ' then '-' else c | c <- str]\n```"
  },
  {
    "task": "Design a for loop to find the intersection of two sets.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nintersection :: Ord a => Set.Set a -> Set.Set a -> Set.Set a\nintersection setA setB = Set.fromList [x | x <- Set.toList setA, Set.member x setB]\n```"
  },
  {
    "task": "Write a for loop that generates a list of prime numbers up to a given number.",
    "code": "```haskell\nisPrime :: Int -> Bool\nisPrime n\n  | n < 2 = False\n  | otherwise = null [x | x <- [2..floor (sqrt (fromIntegral n))], n `mod` x == 0]\n\nprimesUpTo :: Int -> [Int]\nprimesUpTo limit = [n | n <- [2..limit], isPrime n]\n\nmain :: IO ()\nmain = do\n  let limit = 30\n  print $ primesUpTo limit\n```"
  },
  {
    "task": "Use a for loop to implement a simple text-based progress bar.",
    "code": "```haskell\nimport Control.Monad (forM_)\n\ndrawProgressBar :: Int -> Int -> IO ()\ndrawProgressBar total current = do\n  let percent = fromIntegral current / fromIntegral total * 100\n      barLength = 50\n      filledLength = round (percent / 100 * fromIntegral barLength)\n      bar = replicate filledLength '#' ++ replicate (barLength - filledLength) '-'\n  putStr $ \"\\r[\" ++ bar ++ \"] \" ++ show (round percent :: Int) ++ \"%\"\n\nmain :: IO ()\nmain = forM_ [1..100] $ \\i -> do\n  drawProgressBar 100 i\n  -- Simulate some work with a delay\n  threadDelay 50000\n  where\n    threadDelay = threadDelay' . (* 1000) -- Convert milliseconds to microseconds\n    threadDelay' = sequence_ . replicate\n```"
  },
  {
    "task": "Implement a for loop that finds and prints all palindromic numbers between 10 and 200.",
    "code": "```haskell\nmain :: IO ()\nmain = forM_ [10..200] $ \\n ->\n    when (show n == reverse (show n)) $ print n\n```"
  },
  {
    "task": "Create a for loop that multiplies corresponding elements of two lists and stores the result.",
    "code": "```haskell\nmultiplyLists :: [Int] -> [Int] -> [Int]\nmultiplyLists list1 list2 = [list1 !! i * list2 !! i | i <- [0 .. min (length list1) (length list2) - 1]]\n```"
  },
  {
    "task": "Develop a for loop that finds the difference between the largest and smallest numbers in a list.",
    "code": "```haskell\nfindDifference :: [Int] -> Int\nfindDifference xs = maximum xs - minimum xs\n\nmain :: IO ()\nmain = do\n    let numbers = [3, 8, 1, 5, 9]\n    print $ findDifference numbers\n```"
  },
  {
    "task": "Write a for loop that prints numbers from 1 to 100, replacing multiples of 5 with 'Buzz'.",
    "code": "```haskell\nmain :: IO ()\nmain = forM_ [1..100] $ \\i -> \n    if i `mod` 5 == 0 \n    then putStrLn \"Buzz\" \n    else print i\n```"
  },
  {
    "task": "Use a for loop to convert a list of integers into their binary representation.",
    "code": "```haskell\ntoBinary :: [Int] -> [String]\ntoBinary nums = [toBinaryString n | n <- nums]\n  where\n    toBinaryString 0 = \"0\"\n    toBinaryString n = reverse $ toBinaryStringHelper n\n    toBinaryStringHelper 0 = \"\"\n    toBinaryStringHelper n = let (q, r) = n `divMod` 2 in show r ++ toBinaryStringHelper q\n```"
  },
  {
    "task": "Design a for loop that fills a 2D array with consecutive numbers in a spiral pattern.",
    "code": "```haskell\nimport Data.Array\n\nspiralFill :: Int -> Int -> Array (Int, Int) Int\nspiralFill rows cols = array ((0, 0), (rows - 1, cols - 1)) elements\n  where\n    elements = [((r, c), spiralValue (r, c)) | r <- [0..rows-1], c <- [0..cols-1]]\n    spiralValue (r, c) = spiralValue' 0 r c 0 0 (rows - 1) (cols - 1) 1\n    spiralValue' layer r c top left bottom right n\n      | r == top && c >= left && c <= right = n + (c - left)\n      | c == right && r >= top && r <= bottom = n + (right - left) + (r - top)\n      | r == bottom && c <= right && c >= left = n + (right - left) + (bottom - top) + (right - c)\n      | c == left && r <= bottom && r >= top = n + 2 * (right - left) + (bottom - top) + (bottom - r)\n      | otherwise = spiralValue' (layer + 1) r c (top + 1) (left + 1) (bottom - 1) (right - 1) (n + 2 * (bottom - top + right - left))\n```"
  },
  {
    "task": "Create a for loop that iterates over a list and removes duplicates.",
    "code": "```haskell\nremoveDuplicates :: Eq a => [a] -> [a]\nremoveDuplicates list = foldl (\\acc x -> if x `elem` acc then acc else acc ++ [x]) [] list\n\nmain :: IO ()\nmain = do\n    let list = [1, 2, 2, 3, 4, 4, 5]\n    let uniqueList = removeDuplicates list\n    print uniqueList\n```"
  },
  {
    "task": "Implement a for loop to calculate the dot product of two vectors.",
    "code": "```haskell\ndotProduct :: Num a => [a] -> [a] -> a\ndotProduct v1 v2 = sum [v1 !! i * v2 !! i | i <- [0 .. length v1 - 1]]\n```"
  },
  {
    "task": "Write a for loop that prints a sequence of numbers in reverse order.",
    "code": "```haskell\nmain :: IO ()\nmain = forM_ [10,9..1] print\n```"
  },
  {
    "task": "Develop a for loop that computes the greatest common divisor (GCD) of two numbers.",
    "code": "```haskell\ngcdForLoop :: Int -> Int -> Int\ngcdForLoop a b = gcdLoop (abs a) (abs b)\n  where\n    gcdLoop x y = \n      if y == 0 then x\n      else\n        let\n          minVal = min x y\n          maxVal = max x y\n        in\n          forLoop minVal maxVal\n\n    forLoop minVal maxVal = \n      let\n        loop i acc =\n          if i > minVal then acc\n          else\n            if maxVal `mod` i == 0 && minVal `mod` i == 0\n            then loop (i + 1) i\n            else loop (i + 1) acc\n      in loop 1 1\n```"
  },
  {
    "task": "Construct a for loop that prints a square pattern of numbers with a given side length.",
    "code": "```haskell\nmain :: IO ()\nmain = do\n    let sideLength = 5  -- Example side length\n    forM_ [1..sideLength] $ \\_ -> do\n        forM_ [1..sideLength] $ \\j -> do\n            putStr (show j ++ \" \")\n        putStrLn \"\"\n```"
  },
  {
    "task": "Create a for loop that shifts all elements of a list to the left by one position.",
    "code": "```haskell\nshiftLeft :: [a] -> [a]\nshiftLeft [] = []\nshiftLeft xs = tail xs ++ [head xs]\n\nmain :: IO ()\nmain = do\n    let list = [1, 2, 3, 4, 5]\n    let shiftedList = shiftLeft list\n    print shiftedList\n```"
  },
  {
    "task": "Use a for loop to print the first 20 triangular numbers.",
    "code": "```haskell\nmain :: IO ()\nmain = forM_ [1..20] $ \\n -> print (n * (n + 1) `div` 2)\n```"
  },
  {
    "task": "Write a for loop that finds the first repeating character in a string.",
    "code": "```haskell\nimport qualified Data.Set as Set\n\nfirstRepeatingChar :: String -> Maybe Char\nfirstRepeatingChar str = go str Set.empty\n  where\n    go [] _ = Nothing\n    go (x:xs) seen\n      | x `Set.member` seen = Just x\n      | otherwise           = go xs (Set.insert x seen)\n\nmain :: IO ()\nmain = do\n  let input = \"swiss\"\n  print $ firstRepeatingChar input\n```"
  },
  {
    "task": "Design a for loop that transforms a list of temperatures from Celsius to Fahrenheit.",
    "code": "```haskell\ncelsiusToFahrenheit :: [Double] -> [Double]\ncelsiusToFahrenheit celsiusTemps = [c * 9/5 + 32 | c <- celsiusTemps]\n```"
  },
  {
    "task": "Implement a for loop to determine if a string is an isogram.",
    "code": "```haskell\nimport Data.Char (toLower)\nimport qualified Data.Set as Set\n\nisIsogram :: String -> Bool\nisIsogram str = go str Set.empty\n  where\n    go [] _ = True\n    go (x:xs) seen\n        | toLower x `Set.member` seen = False\n        | otherwise = go xs (Set.insert (toLower x) seen)\n\nmain :: IO ()\nmain = do\n    let testString = \"Dermatoglyphics\"\n    print (isIsogram testString)\n```"
  },
  {
    "task": "Use a for loop to create a histogram from a list of integers.",
    "code": "```haskell\nimport Data.List (group, sort)\nimport Data.Map (Map, fromListWith, toList)\n\ncreateHistogram :: [Int] -> [(Int, Int)]\ncreateHistogram xs = toList $ fromListWith (+) [(x, 1) | x <- xs]\n\nmain :: IO ()\nmain = do\n    let numbers = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n    let histogram = createHistogram numbers\n    mapM_ print histogram\n```"
  },
  {
    "task": "Create a for loop that prints the indexes of all occurrences of a particular element in a list.",
    "code": "```haskell\nimport Data.List (elemIndices)\n\nprintElementIndices :: Eq a => a -> [a] -> IO ()\nprintElementIndices element list = do\n    let indices = elemIndices element list\n    forM_ indices print\n\nmain :: IO ()\nmain = printElementIndices 3 [1, 2, 3, 4, 3, 5, 3]\n```"
  },
  {
    "task": "Write a for loop that checks if a given string is a palindrome.",
    "code": "```haskell\nisPalindrome :: String -> Bool\nisPalindrome str = all (\\i -> str !! i == str !! (len - i - 1)) [0..len `div` 2 - 1]\n  where len = length str\n```"
  },
  {
    "task": "Develop a for loop to simulate the behavior of a simple finite state machine.",
    "code": "```haskell\ndata State = StateA | StateB | StateC deriving (Show, Eq)\n\ntransition :: State -> State\ntransition StateA = StateB\ntransition StateB = StateC\ntransition StateC = StateA\n\nsimulateFSM :: Int -> [State]\nsimulateFSM steps = reverse $ go StateA steps []\n  where\n    go _ 0 acc = acc\n    go currentState n acc = go (transition currentState) (n - 1) (currentState : acc)\n\nmain :: IO ()\nmain = do\n  let steps = 10\n  let states = simulateFSM steps\n  mapM_ print states\n```"
  },
  {
    "task": "Design a for loop that finds the sum of all odd numbers in a list.",
    "code": "```haskell\nsumOfOdds :: [Int] -> Int\nsumOfOdds lst = sum [x | x <- lst, odd x]\n```"
  },
  {
    "task": "Use a for loop to count how many words start with a vowel in a given sentence.",
    "code": "```haskell\ncountVowelWords :: String -> Int\ncountVowelWords sentence = length [word | word <- words sentence, startsWithVowel word]\n  where\n    startsWithVowel word = case word of\n      [] -> False\n      (c:_) -> c `elem` \"aeiouAEIOU\"\n\nmain :: IO ()\nmain = do\n  let sentence = \"Example sentence to test the Haskell code\"\n  print $ countVowelWords sentence\n```"
  },
  {
    "task": "Implement a for loop that sorts a list of strings by their length.",
    "code": "```haskell\nimport Data.List (sortBy)\nimport Data.Ord (comparing)\n\nsortByLength :: [String] -> [String]\nsortByLength strs = sortBy (comparing length) strs\n\nmain :: IO ()\nmain = do\n    let strings = [\"apple\", \"banana\", \"pear\", \"grape\"]\n    let sortedStrings = sortByLength strings\n    print sortedStrings\n```"
  },
  {
    "task": "Write a for loop that prints the factorial of numbers from 1 to 10.",
    "code": "```haskell\nfactorial :: Integer -> Integer\nfactorial n = product [1..n]\n\nmain :: IO ()\nmain = do\n    forM_ [1..10] $ \\i -> do\n        print (factorial i)\n```"
  },
  {
    "task": "Create a for loop that replaces all instances of a substring in a string with another substring.",
    "code": "```haskell\nreplaceSubstring :: String -> String -> String -> String\nreplaceSubstring str old new = go str\n  where\n    go s\n      | null s = \"\"\n      | old `isPrefixOf` s = new ++ go (drop (length old) s)\n      | otherwise = head s : go (tail s)\n\nmain :: IO ()\nmain = do\n  let str = \"hello world, world is beautiful\"\n      old = \"world\"\n      new = \"Haskell\"\n      result = replaceSubstring str old new\n  putStrLn result\n```"
  },
  {
    "task": "Develop a for loop that squares each element in a list of numbers.",
    "code": "```haskell\nsquareList :: [Int] -> [Int]\nsquareList nums = [x * x | x <- nums]\n```"
  },
  {
    "task": "Use a for loop to reverse the order of elements in an array.",
    "code": "```haskell\nreverseArray :: [a] -> [a]\nreverseArray arr = reverseHelper arr []\n  where\n    reverseHelper :: [a] -> [a] -> [a]\n    reverseHelper [] acc     = acc\n    reverseHelper (x:xs) acc = reverseHelper xs (x:acc)\n\nmain :: IO ()\nmain = do\n  let arr = [1, 2, 3, 4, 5]\n  let reversedArr = reverseArray arr\n  print reversedArr\n```"
  },
  {
    "task": "Implement a for loop that tests if two strings are anagrams of each other.",
    "code": "```haskell\nareAnagrams :: String -> String -> Bool\nareAnagrams str1 str2 = length str1 == length str2 && sortedStr1 == sortedStr2\n  where\n    sortedStr1 = quicksort str1\n    sortedStr2 = quicksort str2\n\nquicksort :: Ord a => [a] -> [a]\nquicksort [] = []\nquicksort (x:xs) = quicksort lesser ++ [x] ++ quicksort greater\n  where\n    lesser = [y | y <- xs, y <= x]\n    greater = [y | y <- xs, y > x]\n\nmain :: IO ()\nmain = do\n  let str1 = \"listen\"\n  let str2 = \"silent\"\n  if areAnagrams str1 str2\n    then putStrLn \"The strings are anagrams.\"\n    else putStrLn \"The strings are not anagrams.\"\n```"
  },
  {
    "task": "Design a for loop to find and print all Armstrong numbers between 100 and 999.",
    "code": "```haskell\nmain :: IO ()\nmain = forM_ [100..999] $ \\n -> do\n    let digits = map (read . (:[])) (show n)\n        sumOfCubes = sum $ map (^3) digits\n    when (sumOfCubes == n) $ print n\n```"
  }
]