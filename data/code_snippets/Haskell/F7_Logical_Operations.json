[
  {
    "task": "Create a function that takes two boolean inputs and returns true if both are true using logical AND.",
    "code": "```haskell\nbothTrue :: Bool -> Bool -> Bool\nbothTrue x y = x && y\n```"
  },
  {
    "task": "Write a script to check if either of two given conditions are met using logical OR.",
    "code": "```haskell\ncheckConditions :: Bool -> Bool -> Bool\ncheckConditions condition1 condition2 = condition1 || condition2\n```"
  },
  {
    "task": "Develop a program that negates a boolean variable using logical NOT.",
    "code": "```haskell\nnegateBoolean :: Bool -> Bool\nnegateBoolean x = not x\n\nmain :: IO ()\nmain = do\n    let boolValue = True\n    print (negateBoolean boolValue)\n```"
  },
  {
    "task": "Implement a feature that determines if a number is within a specific range using logical operators.",
    "code": "```haskell\nisWithinRange :: Int -> Int -> Int -> Bool\nisWithinRange lower upper x = x >= lower && x <= upper\n```"
  },
  {
    "task": "Design a system that checks if a user has both read and write permissions using logical AND.",
    "code": "```haskell\ndata Permission = Read | Write deriving (Eq)\n\nhasReadAndWritePermissions :: [Permission] -> Bool\nhasReadAndWritePermissions permissions = Read `elem` permissions && Write `elem` permissions\n```"
  },
  {
    "task": "Write a function to verify if a string is neither empty nor null using logical NOT.",
    "code": "```haskell\nisNotEmptyOrNull :: String -> Bool\nisNotEmptyOrNull str = not (null str)\n```"
  },
  {
    "task": "Create a conditional statement that executes a block of code if either of two expressions are true using logical OR.",
    "code": "```haskell\nmain :: IO ()\nmain = do\n    let expression1 = True\n        expression2 = False\n    if expression1 || expression2\n        then putStrLn \"At least one expression is true.\"\n        else putStrLn \"Both expressions are false.\"\n```"
  },
  {
    "task": "Build a program that inverts the truth value of a given condition using logical NOT.",
    "code": "```haskell\ninvertCondition :: Bool -> Bool\ninvertCondition condition = not condition\n\nmain :: IO ()\nmain = do\n    let condition = True\n    putStrLn $ \"The inverted condition is: \" ++ show (invertCondition condition)\n```"
  },
  {
    "task": "Compose a function to return true if a list is not empty using logical NOT.",
    "code": "```haskell\nisNotEmpty :: [a] -> Bool\nisNotEmpty = not . null\n```"
  },
  {
    "task": "Develop a filter that selects items from a collection only if they meet multiple criteria using logical AND.",
    "code": "```haskell\nfilterWithCriteria :: (a -> Bool) -> (a -> Bool) -> [a] -> [a]\nfilterWithCriteria criterion1 criterion2 = filter (\\x -> criterion1 x && criterion2 x)\n\nmain :: IO ()\nmain = do\n  let collection = [1..10]\n  let criterion1 = (> 3)\n  let criterion2 = (< 8)\n  let result = filterWithCriteria criterion1 criterion2 collection\n  print result\n```"
  },
  {
    "task": "Write a script that checks if a value is outside a given range using logical OR.",
    "code": "```haskell\nisOutsideRange :: Ord a => a -> a -> a -> Bool\nisOutsideRange lower upper value = value < lower || value > upper\n\nmain :: IO ()\nmain = do\n    let lowerBound = 10\n    let upperBound = 20\n    let testValue = 25\n    putStrLn $ \"Is the value outside the range? \" ++ show (isOutsideRange lowerBound upperBound testValue)\n```"
  },
  {
    "task": "Create a small program to toggle a boolean flag using logical NOT.",
    "code": "```haskell\ntoggleFlag :: Bool -> Bool\ntoggleFlag flag = not flag\n\nmain :: IO ()\nmain = do\n    let initialFlag = True\n    print $ toggleFlag initialFlag\n```"
  },
  {
    "task": "Implement a feature that evaluates if a username is both unique and valid using logical AND.",
    "code": "```haskell\nisUniqueAndValid :: String -> [String] -> Bool\nisUniqueAndValid username existingUsernames =\n    isUnique username existingUsernames && isValid username\n\nisUnique :: String -> [String] -> Bool\nisUnique username existingUsernames = not (username `elem` existingUsernames)\n\nisValid :: String -> Bool\nisValid username = not (null username) && all (`elem` ['a'..'z'] ++ ['A'..'Z'] ++ ['0'..'9']) username\n```"
  },
  {
    "task": "Design a conditional to perform an action if neither of two flags are set using logical NOT.",
    "code": "```haskell\nperformAction :: Bool -> Bool -> IO ()\nperformAction flag1 flag2 = do\n    let neitherSet = not flag1 && not flag2\n    if neitherSet\n        then putStrLn \"Performing action because neither flag is set.\"\n        else return ()\n```"
  },
  {
    "task": "Write a function that returns true if at least one of multiple boolean inputs is true using logical OR.",
    "code": "```haskell\natLeastOneTrue :: [Bool] -> Bool\natLeastOneTrue = or\n```"
  },
  {
    "task": "Create a loop that continues executing as long as two conditions are both false using logical NOT and AND.",
    "code": "```haskell\nmain :: IO ()\nmain = loop False False\n  where\n    loop condition1 condition2\n      | not condition1 && not condition2 = do\n          putStrLn \"Looping...\"\n          -- Update conditions here based on your logic\n          loop condition1 condition2\n      | otherwise = return ()\n```"
  },
  {
    "task": "Develop a sequence that checks if a character is either a vowel or a consonant using logical OR.",
    "code": "```haskell\nisVowelOrConsonant :: Char -> String\nisVowelOrConsonant c\n  | isVowel c || isConsonant c = \"The character is either a vowel or a consonant.\"\n  | otherwise = \"The character is neither a vowel nor a consonant.\"\n\nisVowel :: Char -> Bool\nisVowel c = c `elem` \"aeiouAEIOU\"\n\nisConsonant :: Char -> Bool\nisConsonant c = c `elem` \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n```"
  },
  {
    "task": "Implement a validation that ensures a password is both of minimum length and contains numbers using logical AND.",
    "code": "```haskell\nisValidPassword :: String -> Bool\nisValidPassword password = length password >= minLength && any isDigit password\n  where\n    minLength = 8\n    isDigit c = c >= '0' && c <= '9'\n```"
  },
  {
    "task": "Compose a test to determine if a point is not within a circle using logical NOT.",
    "code": "```haskell\ntype Point = (Double, Double)\ntype Circle = (Point, Double)\n\nisPointOutsideCircle :: Point -> Circle -> Bool\nisPointOutsideCircle (px, py) ((cx, cy), radius) =\n  not (dx * dx + dy * dy <= radius * radius)\n  where\n    dx = px - cx\n    dy = py - cy\n```"
  },
  {
    "task": "Write a function to decide if a user is either an admin or an editor using logical OR.",
    "code": "```haskell\nisAdminOrEditor :: Bool -> Bool -> Bool\nisAdminOrEditor isAdmin isEditor = isAdmin || isEditor\n```"
  },
  {
    "task": "Create a conditional statement to trigger an alert if two sensors both detect motion using logical AND.",
    "code": "```haskell\ntriggerAlert :: Bool -> Bool -> Bool\ntriggerAlert sensor1 sensor2 = sensor1 && sensor2\n\nmain :: IO ()\nmain = do\n    let sensor1 = True  -- Example sensor input\n    let sensor2 = True  -- Example sensor input\n    if triggerAlert sensor1 sensor2\n        then putStrLn \"Alert: Motion detected by both sensors!\"\n        else putStrLn \"No alert: Motion not detected by both sensors.\"\n```"
  },
  {
    "task": "Design a program to validate an email format and ensure it contains a domain using logical AND.",
    "code": "```haskell\nimport Data.List (isInfixOf)\n\nisValidEmail :: String -> Bool\nisValidEmail email = \"@\" `isInfixOf` email && \".\" `isInfixOf` dropWhile (/= '@') email\n\nmain :: IO ()\nmain = do\n    putStrLn \"Enter an email address:\"\n    email <- getLine\n    if isValidEmail email\n        then putStrLn \"Valid email format.\"\n        else putStrLn \"Invalid email format.\"\n```"
  },
  {
    "task": "Develop a method to confirm that a transaction is neither fraudulent nor unauthorized using logical NOT.",
    "code": "```haskell\nisTransactionValid :: Bool -> Bool -> Bool\nisTransactionValid isFraudulent isUnauthorized = not isFraudulent && not isUnauthorized\n```"
  },
  {
    "task": "Write a function that outputs true if a file is either missing or empty using logical OR.",
    "code": "```haskell\nimport System.Directory (doesFileExist)\nimport System.IO (withFile, hFileSize, IOMode(ReadMode))\n\nfileIsMissingOrEmpty :: FilePath -> IO Bool\nfileIsMissingOrEmpty path = do\n    fileExists <- doesFileExist path\n    if not fileExists\n        then return True\n        else withFile path ReadMode $ \\h -> do\n            size <- hFileSize h\n            return (size == 0)\n```"
  },
  {
    "task": "Implement a system to check if a student's grade is neither failing nor incomplete using logical NOT.",
    "code": "```haskell\ncheckGrade :: String -> Bool\ncheckGrade grade = not (grade == \"Failing\" || grade == \"Incomplete\")\n\nmain :: IO ()\nmain = do\n    let grades = [\"A\", \"B\", \"Failing\", \"Incomplete\", \"C\"]\n    let results = map checkGrade grades\n    print results\n```"
  },
  {
    "task": "Create a script that executes a command if a file is both readable and writable using logical AND.",
    "code": "```haskell\nimport System.Directory (readable, writable, doesFileExist)\n\nexecuteIfReadableAndWritable :: FilePath -> IO () -> IO ()\nexecuteIfReadableAndWritable filePath command = do\n    fileExists <- doesFileExist filePath\n    isReadable <- readable filePath\n    isWritable <- writable filePath\n    if fileExists && isReadable && isWritable\n        then command\n        else return ()\n\nmain :: IO ()\nmain = executeIfReadableAndWritable \"yourfile.txt\" (putStrLn \"Executing command...\")\n```"
  },
  {
    "task": "Compose a function to determine if a temperature is not within a safe operating range using logical NOT.",
    "code": "```haskell\nisNotInSafeRange :: Int -> Bool\nisNotInSafeRange temp = not (temp >= 15 && temp <= 25)\n```"
  },
  {
    "task": "Design a check to see if a car is either out of fuel or needs maintenance using logical OR.",
    "code": "```haskell\ndata Car = Car { outOfFuel :: Bool, needsMaintenance :: Bool }\n\ncheckCarStatus :: Car -> Bool\ncheckCarStatus car = outOfFuel car || needsMaintenance car\n```"
  },
  {
    "task": "Develop a routine that ensures a network connection is both stable and secure using logical AND.",
    "code": "```haskell\nisStable :: Bool\nisStable = True -- Assume a function or check that determines stability\n\nisSecure :: Bool\nisSecure = True -- Assume a function or check that determines security\n\nisConnectionValid :: Bool\nisConnectionValid = isStable && isSecure\n```"
  },
  {
    "task": "Write a conditional to print a message if a user is not logged in using logical NOT.",
    "code": "```haskell\nmain :: IO ()\nmain = do\n    let userLoggedIn = False\n    if not userLoggedIn\n        then putStrLn \"User is not logged in\"\n        else return ()\n```"
  },
  {
    "task": "Create a function that checks if a number is both even and positive using logical AND.",
    "code": "```haskell\nisEvenAndPositive :: Int -> Bool\nisEvenAndPositive n = even n && n > 0\n```"
  },
  {
    "task": "Implement a feature that turns off a device if neither of two switches are on using logical NOT.",
    "code": "```haskell\nturnOffDevice :: Bool -> Bool -> Bool\nturnOffDevice switch1 switch2 = not (switch1 || switch2)\n```"
  },
  {
    "task": "Compose a script to alert if a server is either down or running slow using logical OR.",
    "code": "```haskell\nserverStatus :: Bool -> Bool -> String\nserverStatus isDown isSlow\n    | isDown || isSlow = \"Alert: Server is either down or running slow.\"\n    | otherwise        = \"Server is running normally.\"\n\nmain :: IO ()\nmain = do\n    let isDown = False   -- Example server down status\n    let isSlow = True    -- Example server slow status\n    putStrLn $ serverStatus isDown isSlow\n```"
  },
  {
    "task": "Design a validation method to ensure a form field is not empty using logical NOT.",
    "code": "```haskell\nisFieldNotEmpty :: String -> Bool\nisFieldNotEmpty fieldValue = not (null fieldValue)\n```"
  },
  {
    "task": "Write a program to determine if two strings are both non-empty using logical AND.",
    "code": "```haskell\nareBothNonEmpty :: String -> String -> Bool\nareBothNonEmpty str1 str2 = not (null str1) && not (null str2)\n\nmain :: IO ()\nmain = do\n  let str1 = \"Hello\"\n  let str2 = \"World\"\n  print (areBothNonEmpty str1 str2)\n```"
  },
  {
    "task": "Create a function that checks if a number is either prime or a perfect square using logical OR.",
    "code": "```haskell\nisPrime :: Int -> Bool\nisPrime n | n < 2 = False\n          | otherwise = null [x | x <- [2..isqrt n], n `mod` x == 0]\n\nisPerfectSquare :: Int -> Bool\nisPerfectSquare n = (isqrt n) ^ 2 == n\n\nisPrimeOrPerfectSquare :: Int -> Bool\nisPrimeOrPerfectSquare n = isPrime n || isPerfectSquare n\n\nisqrt :: Int -> Int\nisqrt = floor . sqrt . fromIntegral\n```"
  },
  {
    "task": "Develop a script to ensure a user is either an adult or has parental consent using logical OR.",
    "code": "```haskell\nhasParentalConsent :: Bool -> Bool -> Bool\nhasParentalConsent isAdult parentalConsent = isAdult || parentalConsent\n\nmain :: IO ()\nmain = do\n    let isAdult = False\n    let parentalConsent = True\n    if hasParentalConsent isAdult parentalConsent\n        then putStrLn \"Access granted.\"\n        else putStrLn \"Access denied.\"\n```"
  },
  {
    "task": "Implement a condition to execute a task if a variable is neither zero nor negative using logical NOT.",
    "code": "```haskell\nexecuteTask :: Int -> IO ()\nexecuteTask x = when (not (x <= 0)) $ putStrLn \"Executing task\"\n\nmain :: IO ()\nmain = executeTask 5\n```"
  },
  {
    "task": "Compose a method to verify if a system is both up-to-date and functioning using logical AND.",
    "code": "```haskell\nisSystemValid :: Bool -> Bool -> Bool\nisSystemValid isUpToDate isFunctioning = isUpToDate && isFunctioning\n```"
  },
  {
    "task": "Write a function that returns true if a list contains neither duplicates nor null values using logical NOT.",
    "code": "```haskell\nimport Data.List (nub)\nimport Data.Maybe (isNothing)\n\nnoDuplicatesOrNulls :: (Eq a) => [Maybe a] -> Bool\nnoDuplicatesOrNulls xs = not (length xs /= length (nub xs) || any isNothing xs)\n```"
  },
  {
    "task": "Create a script to perform an action if a temperature is either too high or too low using logical OR.",
    "code": "```haskell\ncheckTemperature :: Int -> String\ncheckTemperature temp\n  | temp < lowThreshold || temp > highThreshold = \"Action required: Temperature out of range!\"\n  | otherwise = \"Temperature is within the safe range.\"\n  where\n    lowThreshold = 10\n    highThreshold = 30\n\nmain :: IO ()\nmain = do\n  let temp = 35\n  putStrLn (checkTemperature temp)\n```"
  },
  {
    "task": "Design a feature to toggle an option if a setting is not enabled using logical NOT.",
    "code": "```haskell\ntoggleOption :: Bool -> Bool -> Bool\ntoggleOption setting option = if not setting then not option else option\n```"
  },
  {
    "task": "Develop a check to ensure a username is both available and meets length requirements using logical AND.",
    "code": "```haskell\nisUsernameValid :: String -> [String] -> Bool\nisUsernameValid username takenUsernames =\n  let isAvailable = not (username `elem` takenUsernames)\n      meetsLengthRequirements = length username >= 5 && length username <= 15\n  in isAvailable && meetsLengthRequirements\n```"
  },
  {
    "task": "Implement a function that returns true if a number is neither too large nor too small using logical NOT.",
    "code": "```haskell\nwithinBounds :: Int -> Bool\nwithinBounds x = not (x < lower || x > upper)\n  where\n    lower = 10\n    upper = 100\n```"
  },
  {
    "task": "Write a conditional to print a warning if a disk is either full or nearly full using logical OR.",
    "code": "```haskell\ndiskFull :: Bool\ndiskFull = True -- or False, depending on the disk status\n\ndiskNearlyFull :: Bool\ndiskNearlyFull = False -- or True, depending on the disk status\n\nmain :: IO ()\nmain = do\n    when (diskFull || diskNearlyFull) $ putStrLn \"Warning: Disk is either full or nearly full.\"\n```"
  },
  {
    "task": "Create a routine to validate that two dates are both within a valid range using logical AND.",
    "code": "```haskell\nimport Data.Time.Calendar (fromGregorianValid)\n\nisValidDate :: Integer -> Int -> Int -> Bool\nisValidDate year month day = case fromGregorianValid year month day of\n    Just _  -> True\n    Nothing -> False\n\nareDatesValid :: (Integer, Int, Int) -> (Integer, Int, Int) -> Bool\nareDatesValid (year1, month1, day1) (year2, month2, day2) =\n    isValidDate year1 month1 day1 && isValidDate year2 month2 day2\n```"
  },
  {
    "task": "Compose a function to decide if a person is either a minor or a senior using logical OR.",
    "code": "```haskell\nisMinorOrSenior :: Int -> Bool\nisMinorOrSenior age = age < 18 || age >= 65\n```"
  },
  {
    "task": "Design a script to execute a task if a condition is not met using logical NOT.",
    "code": "```haskell\nmain :: IO ()\nmain = do\n    let condition = False\n    if not condition\n        then putStrLn \"Executing the task because the condition is not met.\"\n        else putStrLn \"Condition is met, not executing the task.\"\n```"
  },
  {
    "task": "Develop a program to verify if a process is neither running nor scheduled using logical NOT.",
    "code": "```haskell\nisNeitherRunningNorScheduled :: Bool -> Bool -> Bool\nisNeitherRunningNorScheduled isRunning isScheduled = not (isRunning || isScheduled)\n\nmain :: IO ()\nmain = do\n    let processRunning = False\n    let processScheduled = False\n    print $ isNeitherRunningNorScheduled processRunning processScheduled\n```"
  },
  {
    "task": "Implement a feature that confirms a file is both accessible and not locked using logical AND.",
    "code": "```haskell\nimport System.Directory (doesFileExist, getPermissions, readable, writable)\nimport System.IO.Error (catchIOError)\n\nisAccessibleAndNotLocked :: FilePath -> IO Bool\nisAccessibleAndNotLocked path = do\n    fileExists <- doesFileExist path\n    if not fileExists\n        then return False\n        else do\n            perms <- getPermissions path\n            let isReadableAndWritable = readable perms && writable perms\n            isFileLocked <- catchIOError (readFile path >> return False) (const $ return True)\n            return (isReadableAndWritable && not isFileLocked)\n```"
  },
  {
    "task": "Write a script to check if a device is either offline or in maintenance mode using logical OR.",
    "code": "```haskell\nisDeviceUnavailable :: Bool -> Bool -> Bool\nisDeviceUnavailable isOffline inMaintenance = isOffline || inMaintenance\n\nmain :: IO ()\nmain = do\n    let offlineStatus = True\n    let maintenanceStatus = False\n    let unavailable = isDeviceUnavailable offlineStatus maintenanceStatus\n    putStrLn $ if unavailable then \"Device is unavailable\" else \"Device is available\"\n```"
  },
  {
    "task": "Create a function to ensure a password is both complex and unique using logical AND.",
    "code": "```haskell\nimport Data.List (nub)\n\nisComplex :: String -> Bool\nisComplex password = length password >= 8 && any (`elem` ['A'..'Z']) password && any (`elem` ['a'..'z']) password && any (`elem` ['0'..'9']) password\n\nisUnique :: String -> [String] -> Bool\nisUnique password history = password `notElem` history\n\nisComplexAndUnique :: String -> [String] -> Bool\nisComplexAndUnique password history = isComplex password && isUnique password history\n```"
  },
  {
    "task": "Design a validation that ensures a value is not negative using logical NOT.",
    "code": "```haskell\nisNonNegative :: (Ord a, Num a) => a -> Bool\nisNonNegative x = not (x < 0)\n```"
  },
  {
    "task": "Develop a check to see if a user has either exceeded their quota or is nearing it using logical OR.",
    "code": "```haskell\ncheckQuota :: Int -> Int -> Int -> Bool\ncheckQuota usage quota threshold = usage >= quota || usage >= threshold\n\n-- Example usage:\n-- checkQuota 95 100 90  -- True, nearing the quota\n-- checkQuota 105 100 90 -- True, exceeded the quota\n-- checkQuota 85 100 90  -- False, neither exceeded nor nearing the quota\n```"
  },
  {
    "task": "Implement a routine to confirm that a user is both authenticated and authorized using logical AND.",
    "code": "```haskell\nisAuthenticated :: Bool -> Bool\nisAuthenticated authStatus = authStatus\n\nisAuthorized :: Bool -> Bool\nisAuthorized authStatus = authStatus\n\nisAuthenticatedAndAuthorized :: Bool -> Bool -> Bool\nisAuthenticatedAndAuthorized authStatus authzStatus = \n    isAuthenticated authStatus && isAuthorized authzStatus\n\n-- Example usage\nmain :: IO ()\nmain = do\n    let userAuthenticated = True\n    let userAuthorized = True\n    if isAuthenticatedAndAuthorized userAuthenticated userAuthorized\n        then putStrLn \"User is authenticated and authorized.\"\n        else putStrLn \"User is not authenticated or not authorized.\"\n```"
  },
  {
    "task": "Compose a function to determine if a light is either on or blinking using logical OR.",
    "code": "```haskell\nisLightOnOrBlinking :: Bool -> Bool -> Bool\nisLightOnOrBlinking isOn isBlinking = isOn || isBlinking\n```"
  },
  {
    "task": "Write a script that executes a command if a network connection is neither weak nor unstable using logical NOT.",
    "code": "```haskell\nimport System.Process (callCommand)\n\nisWeakConnection :: IO Bool\nisWeakConnection = return False -- Placeholder for actual logic to check if connection is weak\n\nisUnstableConnection :: IO Bool\nisUnstableConnection = return False -- Placeholder for actual logic to check if connection is unstable\n\nexecuteCommandIfConnectionStable :: IO ()\nexecuteCommandIfConnectionStable = do\n    weak <- isWeakConnection\n    unstable <- isUnstableConnection\n    let stableConnection = not weak && not unstable\n    if stableConnection\n        then callCommand \"your-command-here\"\n        else return ()\n\nmain :: IO ()\nmain = executeCommandIfConnectionStable\n```"
  },
  {
    "task": "Create a program to verify that a sensor is both calibrated and active using logical AND.",
    "code": "```haskell\nisSensorReady :: Bool -> Bool -> Bool\nisSensorReady calibrated active = calibrated && active\n\nmain :: IO ()\nmain = do\n    let calibrated = True\n    let active = True\n    let sensorReady = isSensorReady calibrated active\n    print sensorReady\n```"
  },
  {
    "task": "Design a feature to alert if a process is either overdue or incomplete using logical OR.",
    "code": "```haskell\ndata Process = Process { overdue :: Bool, incomplete :: Bool }\n\nalert :: Process -> Bool\nalert process = overdue process || incomplete process\n```"
  },
  {
    "task": "Develop a script to check if a person is neither a guest nor a temporary user using logical NOT.",
    "code": "```haskell\nisNeitherGuestNorTemporary :: Bool -> Bool -> Bool\nisNeitherGuestNorTemporary isGuest isTemporary = not (isGuest || isTemporary)\n```"
  },
  {
    "task": "Implement a function to toggle a light if a switch is not pressed using logical NOT.",
    "code": "```haskell\ntoggleLight :: Bool -> Bool -> Bool\ntoggleLight lightOn switchPressed = lightOn /= not switchPressed\n```"
  },
  {
    "task": "Write a conditional to trigger an event if a file is either corrupted or missing using logical OR.",
    "code": "```haskell\nimport System.Directory (doesFileExist)\nimport System.IO (withFile, IOMode(ReadMode), hGetContents)\nimport Control.Exception (try, SomeException)\n\nisCorrupted :: FilePath -> IO Bool\nisCorrupted path = do\n    result <- try (withFile path ReadMode hGetContents) :: IO (Either SomeException String)\n    return $ either (const True) (const False) result\n\ntriggerEvent :: IO ()\ntriggerEvent = putStrLn \"Event Triggered: File is either corrupted or missing.\"\n\ncheckFile :: FilePath -> IO ()\ncheckFile path = do\n    fileExists <- doesFileExist path\n    corrupted <- isCorrupted path\n    if (not fileExists) || corrupted\n        then triggerEvent\n        else return ()\n```"
  },
  {
    "task": "Create a routine that verifies if a vehicle is both insured and registered using logical AND.",
    "code": "```haskell\nisVehicleValid :: Bool -> Bool -> Bool\nisVehicleValid insured registered = insured && registered\n```"
  },
  {
    "task": "Compose a method to check if an account is either overdrawn or flagged using logical OR.",
    "code": "```haskell\ndata Account = Account { balance :: Double, flagged :: Bool }\n\nisOverdrawnOrFlagged :: Account -> Bool\nisOverdrawnOrFlagged account = (balance account < 0) || flagged account\n```"
  },
  {
    "task": "Design a program to ensure an application is both installed and updated using logical AND.",
    "code": "```haskell\nisInstalled :: Bool -> Bool\nisInstalled installed = installed\n\nisUpdated :: Bool -> Bool\nisUpdated updated = updated\n\nisInstalledAndUpdated :: Bool -> Bool -> Bool\nisInstalledAndUpdated installed updated = isInstalled installed && isUpdated updated\n\nmain :: IO ()\nmain = do\n    let installed = True\n    let updated = True\n    let result = isInstalledAndUpdated installed updated\n    putStrLn (\"Application is both installed and updated: \" ++ show result)\n```"
  },
  {
    "task": "Develop a function that returns true if a number is neither divisible by 3 nor 5 using logical NOT.",
    "code": "```haskell\nnotDivisibleBy3Or5 :: Int -> Bool\nnotDivisibleBy3Or5 n = not (n `mod` 3 == 0 || n `mod` 5 == 0)\n```"
  },
  {
    "task": "Implement a script that alerts if a device is either overheating or underperforming using logical OR.",
    "code": "```haskell\nalertDevice :: Double -> Double -> Bool\nalertDevice temperature performance =\n  temperature > 75.0 || performance < 50.0\n\nmain :: IO ()\nmain = do\n  let temperature = 80.0\n  let performance = 45.0\n  if alertDevice temperature performance\n    then putStrLn \"Alert: Device is either overheating or underperforming.\"\n    else putStrLn \"Device is operating normally.\"\n```"
  },
  {
    "task": "Write a function to validate that a directory is both writable and not full using logical AND.",
    "code": "```haskell\nimport System.Directory\nimport System.IO.Error\nimport System.Posix.Files\n\n-- | Check if a directory is writable and not full\nisWritableAndNotFull :: FilePath -> IO Bool\nisWritableAndNotFull dir = do\n    writable <- isWritable dir\n    notFull <- isNotFull dir\n    return (writable && notFull)\n\n-- | Check if a directory is writable\nisWritable :: FilePath -> IO Bool\nisWritable dir = do\n    result <- tryIOError $ getPermissions dir\n    return $ case result of\n        Left _ -> False\n        Right perms -> writable perms\n\n-- | Check if a directory is not full (dummy implementation)\nisNotFull :: FilePath -> IO Bool\nisNotFull _ = return True  -- Replace with actual logic to check if the directory is not full\n```"
  },
  {
    "task": "Create a conditional statement that executes if a button is not clicked using logical NOT.",
    "code": "```haskell\nmain :: IO ()\nmain = do\n    let buttonClicked = False\n    if not buttonClicked\n        then putStrLn \"Button has not been clicked\"\n        else putStrLn \"Button has been clicked\"\n```"
  },
  {
    "task": "Design a check to ensure a transaction is both verified and complete using logical AND.",
    "code": "```haskell\nisTransactionValid :: Bool -> Bool -> Bool\nisTransactionValid isVerified isComplete = isVerified && isComplete\n```"
  },
  {
    "task": "Develop a routine to determine if a string is either uppercase or lowercase using logical OR.",
    "code": "```haskell\nimport Data.Char (isUpper, isLower)\n\nisUpperOrLower :: String -> Bool\nisUpperOrLower s = all isUpper s || all isLower s\n```"
  },
  {
    "task": "Implement a feature to execute a task if a variable is neither null nor undefined using logical NOT.",
    "code": "```haskell\nimport Data.Maybe (isJust)\n\nexecuteTask :: Maybe a -> IO ()\nexecuteTask x\n  | not (isJust x) = putStrLn \"Variable is null or undefined\"\n  | otherwise      = putStrLn \"Executing task\"\n```"
  },
  {
    "task": "Compose a function to return true if a date is either today or tomorrow using logical OR.",
    "code": "```haskell\nimport Data.Time\n\nisTodayOrTomorrow :: Day -> IO Bool\nisTodayOrTomorrow date = do\n    today <- utctDay <$> getCurrentTime\n    let tomorrow = addDays 1 today\n    return $ date == today || date == tomorrow\n```"
  },
  {
    "task": "Write a script to confirm that a system is both running and not in maintenance mode using logical AND.",
    "code": "```haskell\nisSystemRunning :: Bool\nisSystemRunning = True\n\nisInMaintenanceMode :: Bool\nisInMaintenanceMode = False\n\nisSystemOperational :: Bool\nisSystemOperational = isSystemRunning && not isInMaintenanceMode\n\nmain :: IO ()\nmain = do\n    if isSystemOperational\n        then putStrLn \"System is operational.\"\n        else putStrLn \"System is not operational.\"\n```"
  },
  {
    "task": "Create a program to verify if a text field is neither empty nor exceeds character limit using logical NOT.",
    "code": "```haskell\nverifyTextField :: String -> Int -> Bool\nverifyTextField text limit = not (null text) && not (length text > limit)\n\nmain :: IO ()\nmain = do\n    let text = \"example text\"\n    let limit = 20\n    print $ verifyTextField text limit\n```"
  },
  {
    "task": "Design a feature that checks if a user has either admin privileges or editor rights using logical OR.",
    "code": "```haskell\nhasAccess :: Bool -> Bool -> Bool\nhasAccess isAdmin isEditor = isAdmin || isEditor\n```"
  },
  {
    "task": "Develop a script to ensure a file is both present and not empty using logical AND.",
    "code": "```haskell\nimport System.Directory (doesFileExist)\nimport System.IO (withFile, IOMode(ReadMode), hFileSize)\n\nisFilePresentAndNotEmpty :: FilePath -> IO Bool\nisFilePresentAndNotEmpty path = do\n    fileExists <- doesFileExist path\n    if fileExists\n        then withFile path ReadMode $ \\handle -> do\n            size <- hFileSize handle\n            return (size > 0)\n        else return False\n```"
  },
  {
    "task": "Implement a condition to execute a command if a setting is not active using logical NOT.",
    "code": "```haskell\nexecuteIfNotActive :: Bool -> IO ()\nexecuteIfNotActive isActive =\n  if not isActive\n    then putStrLn \"Command executed because setting is not active\"\n    else return ()\n```"
  },
  {
    "task": "Compose a method to decide if a person is either eligible or exempt using logical OR.",
    "code": "```haskell\nisEligibleOrExempt :: Bool -> Bool -> Bool\nisEligibleOrExempt eligible exempt = eligible || exempt\n```"
  },
  {
    "task": "Write a function that returns true if a number is both greater than zero and less than ten using logical AND.",
    "code": "```haskell\nisBetweenZeroAndTen :: Int -> Bool\nisBetweenZeroAndTen x = x > 0 && x < 10\n```"
  },
  {
    "task": "Create a loop to continue as long as a condition is either true or false using logical OR.",
    "code": "```haskell\nimport Control.Monad (when)\n\nmain :: IO ()\nmain = loopFunction True False\n\nloopFunction :: Bool -> Bool -> IO ()\nloopFunction condition1 condition2 = do\n    when (condition1 || condition2) $ do\n        putStrLn \"Looping...\"\n        -- Update conditions as needed\n        let newCondition1 = False -- Example update\n        let newCondition2 = False -- Example update\n        loopFunction newCondition1 newCondition2\n```"
  },
  {
    "task": "Design a program to verify if an account is neither inactive nor suspended using logical NOT.",
    "code": "```haskell\naccountStatusCheck :: Bool -> Bool -> Bool\naccountStatusCheck isInactive isSuspended = not isInactive && not isSuspended\n```"
  },
  {
    "task": "Develop a feature to confirm that a document is both signed and verified using logical AND.",
    "code": "```haskell\nisDocumentValid :: Bool -> Bool -> Bool\nisDocumentValid isSigned isVerified = isSigned && isVerified\n```"
  },
  {
    "task": "Implement a script to alert if a network is either congested or down using logical OR.",
    "code": "```haskell\nalertNetworkStatus :: Bool -> Bool -> String\nalertNetworkStatus isCongested isDown\n  | isCongested || isDown = \"Alert: Network is either congested or down.\"\n  | otherwise = \"Network is operating normally.\"\n\nmain :: IO ()\nmain = do\n  let networkCongested = True\n  let networkDown = False\n  putStrLn $ alertNetworkStatus networkCongested networkDown\n```"
  },
  {
    "task": "Write a function to ensure a list is both sorted and unique using logical AND.",
    "code": "```haskell\nimport Data.List (nub, sort)\n\nensureSortedUnique :: Ord a => [a] -> [a]\nensureSortedUnique xs = let sorted = sort xs\n                            unique = nub xs\n                        in if sorted == unique then sorted else unique\n```"
  },
  {
    "task": "Create a conditional statement to execute if a task is not completed using logical NOT.",
    "code": "```haskell\ntaskCompleted :: Bool\ntaskCompleted = False\n\nmain :: IO ()\nmain = do\n    if not taskCompleted\n    then putStrLn \"The task is not completed.\"\n    else return ()\n```"
  },
  {
    "task": "Design a check to determine if a component is either faulty or missing using logical OR.",
    "code": "```haskell\nisComponentFaultyOrMissing :: Bool -> Bool -> Bool\nisComponentFaultyOrMissing isFaulty isMissing = isFaulty || isMissing\n```"
  },
  {
    "task": "Develop a routine to verify if a user is both online and available using logical AND.",
    "code": "```haskell\nisUserOnlineAndAvailable :: Bool -> Bool -> Bool\nisUserOnlineAndAvailable isOnline isAvailable = isOnline && isAvailable\n```"
  },
  {
    "task": "Implement a feature to toggle an alert if a condition is not satisfied using logical NOT.",
    "code": "```haskell\ntoggleAlert :: Bool -> Bool\ntoggleAlert condition = not condition\n```"
  },
  {
    "task": "Compose a function to return true if a transaction is either pending or failed using logical OR.",
    "code": "```haskell\nisTransactionPendingOrFailed :: String -> Bool\nisTransactionPendingOrFailed status = status == \"pending\" || status == \"failed\"\n```"
  },
  {
    "task": "Write a script to ensure a configuration is both correct and active using logical AND.",
    "code": "```haskell\nisConfigCorrect :: Bool -> Bool -> Bool\nisConfigCorrect isCorrect isActive = isCorrect && isActive\n\nmain :: IO ()\nmain = do\n    let configCorrect = True\n    let configActive = True\n    if isConfigCorrect configCorrect configActive\n        then putStrLn \"Configuration is both correct and active.\"\n        else putStrLn \"Configuration is either incorrect or inactive.\"\n```"
  }
]