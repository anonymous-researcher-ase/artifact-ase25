[
  {
    "task": "Create a list of the first ten positive integers and calculate their sum.",
    "code": "```haskell\nmain :: IO ()\nmain = do\n    let numbers = [1..10]\n    let sumOfNumbers = sum numbers\n    print sumOfNumbers\n```"
  },
  {
    "task": "Write a program to reverse the order of elements in a given list.",
    "code": "```haskell\nreverseList :: [a] -> [a]\nreverseList = reverse\n```"
  },
  {
    "task": "Implement a function that takes a list and returns the list with duplicates removed.",
    "code": "```haskell\nremoveDuplicates :: Eq a => [a] -> [a]\nremoveDuplicates = foldl (\\seen x -> if x `elem` seen then seen else seen ++ [x]) []\n```"
  },
  {
    "task": "Create a list of names and sort them in alphabetical order.",
    "code": "```haskell\nimport Data.List (sort)\n\nnames :: [String]\nnames = [\"Alice\", \"Bob\", \"Charlie\", \"David\"]\n\nsortedNames :: [String]\nsortedNames = sort names\n```"
  },
  {
    "task": "Write a function that appends a new element to an existing list.",
    "code": "```haskell\nappendElement :: [a] -> a -> [a]\nappendElement lst elem = lst ++ [elem]\n```"
  },
  {
    "task": "Generate a list of the first 20 even numbers.",
    "code": "```haskell\nevenNumbers :: [Int]\nevenNumbers = take 20 [x | x <- [2,4..]]\n```"
  },
  {
    "task": "Create a nested list (a list of lists) and access an element from the inner list.",
    "code": "```haskell\nnestedList :: [[Int]]\nnestedList = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\naccessElement :: Int\naccessElement = nestedList !! 1 !! 2\n```"
  },
  {
    "task": "Write a program that finds the maximum value in a list of integers.",
    "code": "```haskell\nfindMax :: [Int] -> Int\nfindMax [] = error \"Empty list\"\nfindMax (x:xs) = foldl max x xs\n\nmain :: IO ()\nmain = do\n    let numbers = [3, 5, 8, 2, 7, 10, 4]\n    print $ findMax numbers\n```"
  },
  {
    "task": "Implement a function to merge two lists into a single list without duplicates.",
    "code": "```haskell\nmergeLists :: Eq a => [a] -> [a] -> [a]\nmergeLists xs ys = xs ++ filter (`notElem` xs) ys\n```"
  },
  {
    "task": "Create a list from user input, then display the list in reverse order.",
    "code": "```haskell\nimport Control.Monad (replicateM)\n\nmain :: IO ()\nmain = do\n    putStrLn \"Enter the number of elements:\"\n    n <- readLn\n    putStrLn \"Enter the elements:\"\n    elements <- replicateM n getLine\n    putStrLn \"Reversed list:\"\n    mapM_ putStrLn (reverse elements)\n```"
  },
  {
    "task": "Write a function that takes a list and returns a new list containing only the even numbers.",
    "code": "```haskell\nfilterEvens :: [Int] -> [Int]\nfilterEvens lst = filter even lst\n```"
  },
  {
    "task": "Generate a list of squares for the numbers 1 through 10.",
    "code": "```haskell\nsquares :: [Int]\nsquares = [x * x | x <- [1..10]]\n```"
  },
  {
    "task": "Create a list of floating-point numbers and find their average.",
    "code": "```haskell\nnumbers :: [Float]\nnumbers = [1.5, 2.8, 3.7, 4.6, 5.9]\n\naverage :: [Float] -> Float\naverage xs = sum xs / fromIntegral (length xs)\n\nresult :: Float\nresult = average numbers\n```"
  },
  {
    "task": "Implement a program to rotate the elements of a list to the right by a given number of steps.",
    "code": "```haskell\nrotateRight :: Int -> [a] -> [a]\nrotateRight n xs = let len = length xs\n                       k = if len == 0 then 0 else n `mod` len\n                   in take len $ drop (len - k) $ cycle xs\n```"
  },
  {
    "task": "Write a function that checks if a list is a palindrome (reads the same forwards and backwards).",
    "code": "```haskell\nisPalindrome :: Eq a => [a] -> Bool\nisPalindrome xs = xs == reverse xs\n```"
  },
  {
    "task": "Create a list of random integers and count how many are greater than 50.",
    "code": "```haskell\nimport System.Random (randomRIO)\nimport Control.Monad (replicateM)\n\nmain :: IO ()\nmain = do\n    randomInts <- replicateM 10 (randomRIO (1, 100) :: IO Int)\n    let countGreaterThan50 = length (filter (> 50) randomInts)\n    print countGreaterThan50\n```"
  },
  {
    "task": "Write a program that removes the first occurrence of a specified element from a list.",
    "code": "```haskell\nremoveFirstOccurrence :: Eq a => a -> [a] -> [a]\nremoveFirstOccurrence _ [] = []\nremoveFirstOccurrence x (y:ys)\n  | x == y    = ys\n  | otherwise = y : removeFirstOccurrence x ys\n```"
  },
  {
    "task": "Implement a function that takes two lists and returns a list containing their intersection.",
    "code": "```haskell\nlistIntersection :: Eq a => [a] -> [a] -> [a]\nlistIntersection xs ys = [x | x <- xs, x `elem` ys]\n```"
  },
  {
    "task": "Create a list of prime numbers less than 100.",
    "code": "```haskell\nisPrime :: Int -> Bool\nisPrime n = n > 1 && all (\\x -> n `mod` x /= 0) [2..(floor . sqrt . fromIntegral) n]\n\nprimesBelow100 :: [Int]\nprimesBelow100 = filter isPrime [2..99]\n```"
  },
  {
    "task": "Write a function to split a list into two lists: one with even numbers and one with odd numbers.",
    "code": "```haskell\nsplitEvensOdds :: [Int] -> ([Int], [Int])\nsplitEvensOdds xs = (filter even xs, filter odd xs)\n```"
  },
  {
    "task": "Create a list of strings and convert all the strings to uppercase.",
    "code": "```haskell\nimport Data.Char (toUpper)\n\nmain :: IO ()\nmain = do\n    let strings = [\"hello\", \"world\", \"haskell\"]\n    let uppercasedStrings = map (map toUpper) strings\n    print uppercasedStrings\n```"
  },
  {
    "task": "Implement a program that removes all elements from a list that are less than a specified value.",
    "code": "```haskell\nremoveLessThan :: Ord a => a -> [a] -> [a]\nremoveLessThan threshold = filter (>= threshold)\n```"
  },
  {
    "task": "Write a function that takes a list and returns a new list with elements in random order.",
    "code": "```haskell\nimport System.Random (randomRIO)\n\nshuffle :: [a] -> IO [a]\nshuffle [] = return []\nshuffle xs = do\n    randomIndex <- randomRIO (0, length xs - 1)\n    let (before, (picked:after)) = splitAt randomIndex xs\n    rest <- shuffle (before ++ after)\n    return (picked : rest)\n```"
  },
  {
    "task": "Create a list of tuples where each tuple contains a number and its square.",
    "code": "```haskell\nnumbersAndSquares :: [(Int, Int)]\nnumbersAndSquares = [(x, x^2) | x <- [1..10]]\n```"
  },
  {
    "task": "Write a program to multiply all elements in a list by a given factor.",
    "code": "```haskell\nmultiplyList :: Num a => a -> [a] -> [a]\nmultiplyList factor = map (* factor)\n\nmain :: IO ()\nmain = do\n    let factor = 3\n    let numbers = [1, 2, 3, 4, 5]\n    print $ multiplyList factor numbers\n```"
  },
  {
    "task": "Implement a function that flattens a nested list.",
    "code": "```haskell\nflatten :: [[a]] -> [a]\nflatten = concat\n```"
  },
  {
    "task": "Create a list of dates and sort them chronologically.",
    "code": "```haskell\nimport Data.Time\n\nmain :: IO ()\nmain = do\n    let dates = [fromGregorian 2023 10 5, fromGregorian 2021 1 12, fromGregorian 2022 8 19]\n    let sortedDates = sort dates\n    print sortedDates\n```"
  },
  {
    "task": "Write a function that finds the index of the first occurrence of a given element in a list.",
    "code": "```haskell\nfindIndexOf :: Eq a => a -> [a] -> Maybe Int\nfindIndexOf _ [] = Nothing\nfindIndexOf x lst = findIndexHelper x lst 0\n  where\n    findIndexHelper _ [] _ = Nothing\n    findIndexHelper x (y:ys) idx\n      | x == y    = Just idx\n      | otherwise = findIndexHelper x ys (idx + 1)\n```"
  },
  {
    "task": "Generate a list of Fibonacci numbers up to a specified limit.",
    "code": "```haskell\nfibonacciUpTo :: Integer -> [Integer]\nfibonacciUpTo limit = takeWhile (<= limit) fibs\n  where fibs = 0 : 1 : zipWith (+) fibs (tail fibs)\n```"
  },
  {
    "task": "Create a list of booleans and determine if all are True.",
    "code": "```haskell\nallTrue :: [Bool] -> Bool\nallTrue = all (== True)\n\nbooleans :: [Bool]\nbooleans = [True, True, False, True]\n\nresult :: Bool\nresult = allTrue booleans\n```"
  },
  {
    "task": "Write a program to concatenate two lists.",
    "code": "```haskell\nconcatenateLists :: [a] -> [a] -> [a]\nconcatenateLists list1 list2 = list1 ++ list2\n```"
  },
  {
    "task": "Implement a function that returns the length of a list without using built-in functions.",
    "code": "```haskell\nlistLength :: [a] -> Int\nlistLength [] = 0\nlistLength (_:xs) = 1 + listLength xs\n```"
  },
  {
    "task": "Create a list of words and find the longest word.",
    "code": "```haskell\nimport Data.List (maximumBy)\nimport Data.Ord (comparing)\n\nlongestWord :: [String] -> String\nlongestWord = maximumBy (comparing length)\n\nmain :: IO ()\nmain = do\n    let wordsList = [\"apple\", \"banana\", \"cherry\", \"date\"]\n    print $ longestWord wordsList\n```"
  },
  {
    "task": "Write a function that takes a list and a predicate function, returning a list of elements that satisfy the predicate.",
    "code": "```haskell\nfilterWithPredicate :: (a -> Bool) -> [a] -> [a]\nfilterWithPredicate predicate xs = filter predicate xs\n```"
  },
  {
    "task": "Generate a list of strings and filter out those with less than 5 characters.",
    "code": "```haskell\nfilterStrings :: [String] -> [String]\nfilterStrings = filter (\\s -> length s >= 5)\n\nmain :: IO ()\nmain = do\n    let strings = [\"apple\", \"dog\", \"banana\", \"cat\", \"strawberry\"]\n    print $ filterStrings strings\n```"
  },
  {
    "task": "Create a list of mixed data types and separate them into lists by type.",
    "code": "```haskell\nimport Data.Typeable\n\nseparateByType :: [Any] -> ([Int], [String], [Bool])\nseparateByType xs = foldr separate ([], [], []) xs\n  where\n    separate x (ints, strs, bools)\n      | Just n <- cast x = (n:ints, strs, bools)\n      | Just s <- cast x = (ints, s:strs, bools)\n      | Just b <- cast x = (ints, strs, b:bools)\n      | otherwise = (ints, strs, bools)\n\nmain :: IO ()\nmain = do\n  let mixedList = [toDyn (1 :: Int), toDyn \"hello\", toDyn (True :: Bool), toDyn (42 :: Int), toDyn \"world\"]\n  let (integers, strings, booleans) = separateByType mixedList\n  print integers\n  print strings\n  print booleans\n```"
  },
  {
    "task": "Write a program to find the common elements between two lists.",
    "code": "```haskell\ncommonElements :: Eq a => [a] -> [a] -> [a]\ncommonElements xs ys = [x | x <- xs, x `elem` ys]\n\nmain :: IO ()\nmain = do\n    let list1 = [1, 2, 3, 4, 5]\n    let list2 = [4, 5, 6, 7, 8]\n    print (commonElements list1 list2)\n```"
  },
  {
    "task": "Implement a function to rotate the elements of a list to the left by a given number of steps.",
    "code": "```haskell\nrotateLeft :: Int -> [a] -> [a]\nrotateLeft _ [] = []\nrotateLeft n xs = let len = length xs in take len . drop (n `mod` len) $ cycle xs\n```"
  },
  {
    "task": "Create a list of numbers and find the product of all the elements.",
    "code": "```haskell\nnumbers :: [Int]\nnumbers = [1, 2, 3, 4, 5]\n\nproductOfNumbers :: Int\nproductOfNumbers = product numbers\n```"
  },
  {
    "task": "Write a function that removes all occurrences of a specified element from a list.",
    "code": "```haskell\nremoveElement :: Eq a => a -> [a] -> [a]\nremoveElement _ [] = []\nremoveElement el (x:xs)\n    | el == x   = removeElement el xs\n    | otherwise = x : removeElement el xs\n```"
  },
  {
    "task": "Generate a list of random numbers and find the median value.",
    "code": "```haskell\nimport System.Random\nimport Data.List\n\ngenerateRandomNumbers :: Int -> IO [Int]\ngenerateRandomNumbers n = replicateM n (randomRIO (1, 100))\n\nfindMedian :: [Int] -> Double\nfindMedian xs\n  | odd len   = fromIntegral $ sorted !! middle\n  | otherwise = ((fromIntegral (sorted !! middle) + fromIntegral (sorted !! (middle - 1))) / 2)\n  where\n    sorted = sort xs\n    len = length xs\n    middle = len `div` 2\n\nmain :: IO ()\nmain = do\n  randomNumbers <- generateRandomNumbers 10\n  let medianValue = findMedian randomNumbers\n  print randomNumbers\n  print medianValue\n```"
  },
  {
    "task": "Create a list of dictionaries and sort them by a specific key.",
    "code": "```haskell\nimport Data.List (sortBy)\nimport Data.Ord (comparing)\n\ntype Dict = [(String, String)]\n\nsortByKey :: String -> [Dict] -> [Dict]\nsortByKey key = sortBy (comparing (lookup key))\n\n-- Example usage:\nexampleDicts :: [Dict]\nexampleDicts = [ [(\"name\", \"Alice\"), (\"age\", \"30\")]\n               , [(\"name\", \"Bob\"), (\"age\", \"25\")]\n               , [(\"name\", \"Charlie\"), (\"age\", \"35\")]\n               ]\n\nsortedByAge :: [Dict]\nsortedByAge = sortByKey \"age\" exampleDicts\n```"
  },
  {
    "task": "Write a program to split a list into chunks of a specified size.",
    "code": "```haskell\nchunk :: Int -> [a] -> [[a]]\nchunk _ [] = []\nchunk n xs = take n xs : chunk n (drop n xs)\n```"
  },
  {
    "task": "Implement a function that takes a list and returns a dictionary with the frequency of each element.",
    "code": "```haskell\nimport Data.List (group, sort)\nimport qualified Data.Map as Map\n\nfrequency :: (Ord a) => [a] -> Map.Map a Int\nfrequency xs = Map.fromListWith (+) [(x, 1) | x <- xs]\n\n-- Alternatively, using group and sort\nfrequencyAlt :: (Ord a) => [a] -> Map.Map a Int\nfrequencyAlt xs = Map.fromList [(head g, length g) | g <- group (sort xs)]\n```"
  },
  {
    "task": "Create a list of integers and replace all negative numbers with zero.",
    "code": "```haskell\nreplaceNegativesWithZero :: [Int] -> [Int]\nreplaceNegativesWithZero = map (\\x -> if x < 0 then 0 else x)\n\nmain :: IO ()\nmain = do\n    let numbers = [-3, 7, -1, 4, -5, 6]\n    let result = replaceNegativesWithZero numbers\n    print result\n```"
  },
  {
    "task": "Write a function that returns the first n elements of a list.",
    "code": "```haskell\ntakeNElements :: Int -> [a] -> [a]\ntakeNElements n xs = take n xs\n```"
  },
  {
    "task": "Generate a list of strings and join them into a single string with spaces.",
    "code": "```haskell\nmain :: IO ()\nmain = do\n    let listOfStrings = [\"Hello\", \"world\", \"this\", \"is\", \"Haskell\"]\n    let joinedString = unwords listOfStrings\n    putStrLn joinedString\n```"
  },
  {
    "task": "Create a list of lists and find the sum of each inner list.",
    "code": "```haskell\nsumOfInnerLists :: [[Int]] -> [Int]\nsumOfInnerLists lists = map sum lists\n\nmain :: IO ()\nmain = do\n    let listOfLists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    let sums = sumOfInnerLists listOfLists\n    print sums\n```"
  },
  {
    "task": "Write a function that finds the second largest number in a list.",
    "code": "```haskell\nsecondLargest :: (Ord a) => [a] -> Maybe a\nsecondLargest xs\n  | length xs < 2 = Nothing\n  | otherwise = Just $ head $ drop 1 $ reverse $ quicksort xs\n  where\n    quicksort [] = []\n    quicksort (x:xs) =\n      let smallerSorted = quicksort [a | a <- xs, a <= x]\n          biggerSorted = quicksort [a | a <- xs, a > x]\n      in  smallerSorted ++ [x] ++ biggerSorted\n```"
  },
  {
    "task": "Generate a list of numbers and remove the duplicates while maintaining order.",
    "code": "```haskell\nimport Data.List (nub)\n\nremoveDuplicates :: Eq a => [a] -> [a]\nremoveDuplicates = nub\n\nmain :: IO ()\nmain = do\n    let numbers = [1, 2, 2, 3, 4, 4, 5]\n    let uniqueNumbers = removeDuplicates numbers\n    print uniqueNumbers\n```"
  },
  {
    "task": "Create a list of integers and partition it into two lists: one with numbers above the average and one below.",
    "code": "```haskell\npartitionByAverage :: [Int] -> ([Int], [Int])\npartitionByAverage xs = (filter (> avg) xs, filter (< avg) xs)\n  where\n    avg = fromIntegral (sum xs) / fromIntegral (length xs)\n\nmain :: IO ()\nmain = do\n  let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  let (aboveAvg, belowAvg) = partitionByAverage numbers\n  print aboveAvg\n  print belowAvg\n```"
  },
  {
    "task": "Write a program to find the longest increasing subsequence in a list of numbers.",
    "code": "```haskell\nimport Data.List (tails, maximumBy)\nimport Data.Ord (comparing)\n\nlongestIncreasingSubsequence :: Ord a => [a] -> [a]\nlongestIncreasingSubsequence xs = maximumBy (comparing length) (increasingSubsequences xs)\n\nincreasingSubsequences :: Ord a => [a] -> [[a]]\nincreasingSubsequences [] = [[]]\nincreasingSubsequences (x:xs) = subsequencesWith x (increasingSubsequences xs)\n  where\n    subsequencesWith _ [] = []\n    subsequencesWith y (s:ss)\n      | null s || y < head s = (y:s) : subsequencesWith y ss\n      | otherwise = subsequencesWith y ss\n\nmain :: IO ()\nmain = do\n  let numbers = [10, 22, 9, 33, 21, 50, 41, 60, 80]\n  print $ longestIncreasingSubsequence numbers\n```"
  },
  {
    "task": "Implement a function to zip two lists into a single list of tuples.",
    "code": "```haskell\nzipLists :: [a] -> [b] -> [(a, b)]\nzipLists = zip\n```"
  },
  {
    "task": "Create a list of characters and count the vowels.",
    "code": "```haskell\ncountVowels :: [Char] -> Int\ncountVowels chars = length $ filter (`elem` \"aeiouAEIOU\") chars\n\nmain :: IO ()\nmain = do\n    let chars = \"Hello, World!\"\n    let vowelCount = countVowels chars\n    print vowelCount\n```"
  },
  {
    "task": "Write a function that returns the last n elements of a list.",
    "code": "```haskell\nlastNElements :: Int -> [a] -> [a]\nlastNElements n xs = drop (length xs - n) xs\n```"
  },
  {
    "task": "Generate a list of numbers and split it into two lists: one with positive numbers and one with negative numbers.",
    "code": "```haskell\nsplitNumbers :: [Int] -> ([Int], [Int])\nsplitNumbers xs = (filter (> 0) xs, filter (< 0) xs)\n\nmain :: IO ()\nmain = do\n    let numbers = [-5, -2, -1, 0, 3, 6, 8]\n    let (positives, negatives) = splitNumbers numbers\n    print positives\n    print negatives\n```"
  },
  {
    "task": "Create a list of random integers and find the mode.",
    "code": "```haskell\nimport System.Random\nimport Data.List\nimport Data.Function\n\nrandomInts :: Int -> IO [Int]\nrandomInts n = replicateM n (randomRIO (1, 100))\n\nmode :: [Int] -> Int\nmode xs = head $ maximumBy (compare `on` length) $ group $ sort xs\n\nmain :: IO ()\nmain = do\n    nums <- randomInts 100\n    print nums\n    putStrLn $ \"Mode: \" ++ show (mode nums)\n```"
  },
  {
    "task": "Write a program to find the shortest path in a grid using a list to represent the path.",
    "code": "```haskell\nimport Data.List (minimumBy)\nimport Data.Ord (comparing)\nimport qualified Data.Set as Set\n\ntype Point = (Int, Int)\ntype Path = [Point]\ntype Grid = [[Int]]\n\nneighbors :: Point -> [Point]\nneighbors (x, y) = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n\nvalidPoint :: Grid -> Point -> Bool\nvalidPoint grid (x, y) = \n    x >= 0 && y >= 0 && x < length grid && y < length (head grid) && (grid !! x !! y) == 0\n\nshortestPath :: Grid -> Point -> Point -> Maybe Path\nshortestPath grid start end = bfs [[start]] (Set.singleton start)\n  where\n    bfs [] _ = Nothing\n    bfs (path:paths) visited\n        | current == end = Just path\n        | otherwise = bfs (paths ++ newPaths) (Set.union visited (Set.fromList newPoints))\n      where\n        current = head path\n        moves = filter (validPoint grid) (neighbors current)\n        newPoints = filter (`Set.notMember` visited) moves\n        newPaths = [p:path | p <- newPoints]\n\nmain :: IO ()\nmain = do\n    let grid = [[0, 1, 0, 0, 0],\n                [0, 1, 0, 1, 0],\n                [0, 0, 0, 1, 0],\n                [0, 0, 0, 0, 0]]\n    let start = (0, 0)\n    let end = (3, 4)\n    case shortestPath grid start end of\n        Just path -> print $ reverse path\n        Nothing -> putStrLn \"No path found\"\n```"
  },
  {
    "task": "Implement a function that takes a list and returns a list with elements doubled.",
    "code": "```haskell\ndoubleElements :: Num a => [a] -> [a]\ndoubleElements xs = [2 * x | x <- xs]\n```"
  },
  {
    "task": "Create a list of integers and sort them in descending order.",
    "code": "```haskell\nimport Data.List (sortBy)\nimport Data.Ord (Down(..))\n\nsortDescending :: [Int] -> [Int]\nsortDescending = sortBy (flip compare)\n\nmain :: IO ()\nmain = do\n    let numbers = [5, 1, 9, 3, 7]\n    let sortedNumbers = sortDescending numbers\n    print sortedNumbers\n```"
  },
  {
    "task": "Write a function that takes a list of intervals and merges overlapping intervals.",
    "code": "```haskell\nmergeIntervals :: [(Int, Int)] -> [(Int, Int)]\nmergeIntervals [] = []\nmergeIntervals intervals = foldr merge [] (sort intervals)\n  where\n    merge (x, y) [] = [(x, y)]\n    merge (x, y) ((sx, sy):rest)\n      | y >= sx   = (x, max y sy) : rest\n      | otherwise = (x, y) : (sx, sy) : rest\n```"
  },
  {
    "task": "Generate a list of random numbers and find the range (difference between max and min).",
    "code": "```haskell\nimport System.Random (randomRs, newStdGen)\n\nmain :: IO ()\nmain = do\n    gen <- newStdGen\n    let numbers = take 10 $ randomRs (1, 100) gen\n    let range = maximum numbers - minimum numbers\n    print (numbers, range)\n```"
  },
  {
    "task": "Create a list of strings and remove any that are palindromes.",
    "code": "```haskell\nremovePalindromes :: [String] -> [String]\nremovePalindromes = filter (\\s -> s /= reverse s)\n\nmain :: IO ()\nmain = do\n    let strings = [\"racecar\", \"hello\", \"world\", \"level\", \"example\"]\n    let nonPalindromes = removePalindromes strings\n    print nonPalindromes\n```"
  },
  {
    "task": "Write a program to cyclically permute the elements of a list.",
    "code": "```haskell\ncyclicPermute :: [a] -> [a]\ncyclicPermute [] = []\ncyclicPermute (x:xs) = xs ++ [x]\n```"
  },
  {
    "task": "Implement a function to create a list of cumulative sums from a list of numbers.",
    "code": "```haskell\ncumulativeSums :: Num a => [a] -> [a]\ncumulativeSums = scanl1 (+)\n```"
  },
  {
    "task": "Create a list of numbers and shift all zeros to the end.",
    "code": "```haskell\nshiftZerosToEnd :: [Int] -> [Int]\nshiftZerosToEnd xs = filter (/= 0) xs ++ filter (== 0) xs\n\nmain :: IO ()\nmain = do\n    let numbers = [0, 1, 0, 3, 12]\n    print $ shiftZerosToEnd numbers\n```"
  },
  {
    "task": "Write a program to simulate a queue using a list.",
    "code": "```haskell\nenqueue :: a -> [a] -> [a]\nenqueue x queue = queue ++ [x]\n\ndequeue :: [a] -> ([a], Maybe a)\ndequeue [] = ([], Nothing)\ndequeue (x:xs) = (xs, Just x)\n\nmain :: IO ()\nmain = do\n    let queue = [] :: [Int]\n    let queue1 = enqueue 1 queue\n    let queue2 = enqueue 2 queue1\n    let (queue3, item1) = dequeue queue2\n    let (queue4, item2) = dequeue queue3\n    print queue2\n    print item1\n    print queue4\n    print item2\n```"
  },
  {
    "task": "Generate a list of numbers and identify all prime numbers.",
    "code": "```haskell\nisPrime :: Int -> Bool\nisPrime n\n    | n < 2     = False\n    | otherwise = null [x | x <- [2..n-1], n `mod` x == 0]\n\nprimeNumbers :: [Int] -> [Int]\nprimeNumbers xs = [x | x <- xs, isPrime x]\n\nmain :: IO ()\nmain = do\n    let numbers = [1..100]\n    let primes = primeNumbers numbers\n    print primes\n```"
  },
  {
    "task": "Create a list of strings and group them by their starting letter.",
    "code": "```haskell\nimport Data.List\nimport Data.Function\n\ngroupByStartingLetter :: [String] -> [[String]]\ngroupByStartingLetter strs = groupBy ((==) `on` head) $ sortBy (compare `on` head) strs\n\n-- Example usage\nstrings :: [String]\nstrings = [\"apple\", \"apricot\", \"banana\", \"blueberry\", \"cherry\", \"cantaloupe\"]\n\ngroupedStrings :: [[String]]\ngroupedStrings = groupByStartingLetter strings\n```"
  },
  {
    "task": "Write a function that takes a list and returns a new list with all elements squared.",
    "code": "```haskell\nsquareList :: Num a => [a] -> [a]\nsquareList xs = [x * x | x <- xs]\n```"
  },
  {
    "task": "Generate a list of timestamps and find the time difference between consecutive elements.",
    "code": "```haskell\nimport Data.Time\nimport Data.Time.Clock.POSIX\n\ngenerateTimestamps :: IO [UTCTime]\ngenerateTimestamps = do\n    current <- getCurrentTime\n    let seconds = [0, 60, 120, 180, 240] -- Example intervals in seconds\n    return $ map (\\s -> addUTCTime (fromIntegral s) current) seconds\n\ntimeDifferences :: [UTCTime] -> [NominalDiffTime]\ntimeDifferences timestamps = zipWith diffUTCTime (tail timestamps) timestamps\n\nmain :: IO ()\nmain = do\n    timestamps <- generateTimestamps\n    let differences = timeDifferences timestamps\n    print differences\n```"
  },
  {
    "task": "Create a list of numbers and rotate it such that the smallest number is first.",
    "code": "```haskell\nrotateList :: Ord a => [a] -> [a]\nrotateList [] = []\nrotateList xs = let (left, right) = break (== minimum xs) xs in right ++ left\n\nmain :: IO ()\nmain = do\n    let numbers = [3, 8, 1, 4, 5]\n    print $ rotateList numbers\n```"
  },
  {
    "task": "Write a program to find all unique pairs in a list that sum up to a specific target.",
    "code": "```haskell\nimport Data.List (nub)\n\nuniquePairs :: (Eq a, Num a) => a -> [a] -> [(a, a)]\nuniquePairs target lst = nub [(x, y) | x <- lst, y <- lst, x /= y, x + y == target]\n\nmain :: IO ()\nmain = do\n    let lst = [1, 2, 3, 4, 5, 6]\n    let target = 7\n    print $ uniquePairs target lst\n```"
  },
  {
    "task": "Implement a function that returns true if a list contains a cycle.",
    "code": "```haskell\nhasCycle :: Eq a => [a] -> Bool\nhasCycle xs = hasCycle' xs []\n  where\n    hasCycle' [] _ = False\n    hasCycle' (y:ys) seen\n      | y `elem` seen = True\n      | otherwise = hasCycle' ys (y:seen)\n```"
  },
  {
    "task": "Create a list of numbers and find the contiguous subarray with the maximum sum.",
    "code": "```haskell\nmaxSubArray :: [Int] -> Int\nmaxSubArray xs = fst $ foldl step (minBound, 0) xs\n  where\n    step (maxSum, currentSum) x =\n      let newCurrentSum = max x (currentSum + x)\n          newMaxSum = max maxSum newCurrentSum\n      in (newMaxSum, newCurrentSum)\n\nmain :: IO ()\nmain = do\n  let numbers = [1, -3, 2, 1, -1, 3, -2, 3, -5]\n  print $ maxSubArray numbers\n```"
  },
  {
    "task": "Write a function that takes a list and a number, and finds two numbers in the list that sum to the given number.",
    "code": "```haskell\nfindPairWithSum :: [Int] -> Int -> Maybe (Int, Int)\nfindPairWithSum lst target = findPair lst []\n  where\n    findPair [] _ = Nothing\n    findPair (x:xs) seen =\n      let complement = target - x\n      in if complement `elem` seen\n         then Just (complement, x)\n         else findPair xs (x:seen)\n```"
  },
  {
    "task": "Generate a list of even numbers and filter out those that are greater than a specific value.",
    "code": "```haskell\nfilterEvens :: Int -> [Int]\nfilterEvens maxValue = filter (<= maxValue) [x | x <- [0,2..]]\n```"
  },
  {
    "task": "Create a list of characters and reverse the vowels only.",
    "code": "```haskell\nimport Data.Char (toLower)\n\nisVowel :: Char -> Bool\nisVowel c = toLower c `elem` \"aeiou\"\n\nreverseVowels :: [Char] -> [Char]\nreverseVowels cs = go cs (reverse (filter isVowel cs))\n  where\n    go [] _ = []\n    go (x:xs) vs\n      | isVowel x = head vs : go xs (tail vs)\n      | otherwise = x : go xs vs\n\nmain :: IO ()\nmain = do\n  let chars = \"Haskell Programming\"\n  let result = reverseVowels chars\n  putStrLn result\n```"
  },
  {
    "task": "Write a program to find all permutations of a list of elements.",
    "code": "```haskell\npermutations :: [a] -> [[a]]\npermutations [] = [[]]\npermutations xs = [x:ps | x <- xs, ps <- permutations (remove x xs)]\n  where\n    remove _ [] = []\n    remove y (z:zs)\n      | y == z    = zs\n      | otherwise = z : remove y zs\n```"
  },
  {
    "task": "Implement a function that takes a list and returns the most frequently occurring element.",
    "code": "```haskell\nimport Data.List\nimport Data.Ord\n\nmostFrequent :: (Ord a) => [a] -> Maybe a\nmostFrequent [] = Nothing\nmostFrequent xs = Just $ fst $ maximumBy (comparing snd) frequencies\n  where\n    frequencies = map (\\x -> (head x, length x)) . group . sort $ xs\n```"
  },
  {
    "task": "Create a list of numbers and calculate the variance.",
    "code": "```haskell\nnumbers :: [Double]\nnumbers = [1, 2, 3, 4, 5] -- Example list of numbers\n\nmean :: [Double] -> Double\nmean xs = sum xs / fromIntegral (length xs)\n\nvariance :: [Double] -> Double\nvariance xs = let m = mean xs\n              in sum (map (\\x -> (x - m) ^ 2) xs) / fromIntegral (length xs)\n\nmain :: IO ()\nmain = do\n    let var = variance numbers\n    print var\n```"
  },
  {
    "task": "Write a function to concatenate a list of lists into a single list.",
    "code": "```haskell\nconcatLists :: [[a]] -> [a]\nconcatLists = concat\n```"
  },
  {
    "task": "Generate a list of numbers and replace each element with the product of all other elements.",
    "code": "```haskell\nreplaceWithProduct :: [Int] -> [Int]\nreplaceWithProduct xs = map (\\x -> product (filter (/= x) xs)) xs\n```"
  },
  {
    "task": "Create a list of strings and find the common prefix.",
    "code": "```haskell\nimport Data.List (isPrefixOf, foldl1')\n\ncommonPrefix :: [String] -> String\ncommonPrefix [] = \"\"\ncommonPrefix strs = foldl1' common strs\n  where\n    common acc str = map fst . takeWhile (uncurry (==)) $ zip acc str\n\nmain :: IO ()\nmain = do\n    let strings = [\"flower\", \"flow\", \"flight\"]\n    putStrLn $ \"Common prefix: \" ++ commonPrefix strings\n```"
  },
  {
    "task": "Write a program to partition a list into two lists based on a predicate function.",
    "code": "```haskell\npartitionList :: (a -> Bool) -> [a] -> ([a], [a])\npartitionList _ [] = ([], [])\npartitionList p (x:xs) =\n  let (ys, zs) = partitionList p xs\n  in if p x then (x:ys, zs) else (ys, x:zs)\n```"
  },
  {
    "task": "Implement a function to find the kth smallest element in a list.",
    "code": "```haskell\nimport Data.List (sort)\n\nkthSmallest :: Ord a => Int -> [a] -> Maybe a\nkthSmallest k xs\n  | k > 0 && k <= length xs = Just (sort xs !! (k - 1))\n  | otherwise               = Nothing\n```"
  },
  {
    "task": "Create a list of integers and find the length of the longest contiguous sequence.",
    "code": "```haskell\nlongestContiguousSequence :: [Int] -> Int\nlongestContiguousSequence [] = 0\nlongestContiguousSequence (x:xs) = fst $ foldl checkContiguous (1, 1) (zip (x:xs) xs)\n  where\n    checkContiguous (longest, current) (prev, currentElem)\n      | currentElem == prev + 1 = (longest `max` (current + 1), current + 1)\n      | otherwise = (longest, 1)\n\nmain :: IO ()\nmain = do\n  let nums = [1, 2, 2, 3, 4, 5, 7, 8, 9, 10, 11, 3, 4, 5, 6]\n  print $ longestContiguousSequence nums\n```"
  },
  {
    "task": "Write a function that rotates elements in a list while maintaining the relative order of non-rotated elements.",
    "code": "```haskell\nrotateList :: [a] -> Int -> [a]\nrotateList xs n = take len . drop rot $ cycle xs\n  where len = length xs\n        rot = n `mod` len\n```"
  },
  {
    "task": "Generate a list of random numbers and sort them while maintaining the original index positions.",
    "code": "```haskell\nimport System.Random (randomRIO)\nimport Data.List (sortOn)\n\nrandomList :: Int -> IO [Int]\nrandomList n = mapM (\\_ -> randomRIO (0, 100)) [1..n]\n\nsortWithIndex :: [Int] -> [(Int, Int)]\nsortWithIndex lst = sortOn snd (zip [0..] lst)\n\nmain :: IO ()\nmain = do\n    lst <- randomList 10\n    let indexedSortedList = sortWithIndex lst\n    print indexedSortedList\n```"
  },
  {
    "task": "Create a list of numbers and find all subsets that sum up to a specific target.",
    "code": "```haskell\nimport Data.List (subsequences)\n\nfindSubsetsWithSum :: Int -> [Int] -> [[Int]]\nfindSubsetsWithSum target nums = filter ((== target) . sum) (subsequences nums)\n\nmain :: IO ()\nmain = do\n    let numbers = [1, 2, 3, 4, 5]\n    let targetSum = 5\n    let subsets = findSubsetsWithSum targetSum numbers\n    print subsets\n```"
  },
  {
    "task": "Write a program to simulate a stack using a list.",
    "code": "```haskell\nmodule Stack where\n\ntype Stack a = [a]\n\nemptyStack :: Stack a\nemptyStack = []\n\npush :: a -> Stack a -> Stack a\npush x stack = x : stack\n\npop :: Stack a -> (Maybe a, Stack a)\npop [] = (Nothing, [])\npop (x:xs) = (Just x, xs)\n\npeek :: Stack a -> Maybe a\npeek [] = Nothing\npeek (x:_) = Just x\n\nisEmpty :: Stack a -> Bool\nisEmpty = null\n```"
  }
]