[
  {
    "task": "Define an integer variable and assign it a value.",
    "code": "```haskell\nmyInt :: Int\nmyInt = 42\n```"
  },
  {
    "task": "Create a string variable to store your full name.",
    "code": "```haskell\nfullName :: String\nfullName = \"Your Full Name\"\n```"
  },
  {
    "task": "Define a boolean variable to represent if a feature is enabled.",
    "code": "```haskell\nisFeatureEnabled :: Bool\nisFeatureEnabled = True\n```"
  },
  {
    "task": "Declare a floating-point variable for storing temperature in Celsius.",
    "code": "```haskell\ntemperatureCelsius :: Float\ntemperatureCelsius = 0.0\n```"
  },
  {
    "task": "Create a variable to hold the current date and time.",
    "code": "```haskell\nimport Data.Time\n\nmain :: IO ()\nmain = do\n    currentDateTime <- getCurrentTime\n    print currentDateTime\n```"
  },
  {
    "task": "Define a list variable to store a collection of favorite book titles.",
    "code": "```haskell\nfavoriteBooks :: [String]\nfavoriteBooks = [\"The Hobbit\", \"1984\", \"Pride and Prejudice\", \"To Kill a Mockingbird\", \"The Great Gatsby\"]\n```"
  },
  {
    "task": "Create a dictionary variable to map student names to their grades.",
    "code": "```haskell\nstudentGrades :: [(String, Int)]\nstudentGrades = [(\"Alice\", 85), (\"Bob\", 90), (\"Charlie\", 78)]\n```"
  },
  {
    "task": "Declare a constant variable to represent the mathematical value of pi.",
    "code": "```haskell\npiValue :: Double\npiValue = 3.141592653589793\n```"
  },
  {
    "task": "Define a variable to store the user's age and ensure it is an integer.",
    "code": "```haskell\nuserAge :: Int\nuserAge = 30\n```"
  },
  {
    "task": "Create a variable to hold a complex number.",
    "code": "```haskell\ncomplexNumber :: (Complex Double)\ncomplexNumber = 3 :+ 4\n```"
  },
  {
    "task": "Define a variable to store a multiline text as a string.",
    "code": "```haskell\nmultilineText :: String\nmultilineText = \"This is line one.\\nThis is line two.\\nThis is line three.\"\n```"
  },
  {
    "task": "Declare a variable to store a person's height in meters as a floating-point number.",
    "code": "```haskell\nheightInMeters :: Float\nheightInMeters = 0.0\n```"
  },
  {
    "task": "Define a variable to hold the result of a mathematical expression.",
    "code": "```haskell\nresult :: Int\nresult = (3 + 5) * 2 - 4\n```"
  },
  {
    "task": "Create a variable to store a person's favorite color.",
    "code": "```haskell\nfavoriteColor :: String\nfavoriteColor = \"blue\"\n```"
  },
  {
    "task": "Declare a variable to store the number of items in a shopping cart.",
    "code": "```haskell\nnumberOfItemsInCart :: Int\nnumberOfItemsInCart = 0\n```"
  },
  {
    "task": "Define a variable to store a user\u2019s last login timestamp.",
    "code": "```haskell\nlastLoginTimestamp :: String\nlastLoginTimestamp = \"2023-10-01T12:34:56Z\"\n```"
  },
  {
    "task": "Create a variable to hold a function reference.",
    "code": "```haskell\nmyFunction :: Int -> Int\nmyFunction x = x + 1\n\nfunctionReference :: Int -> Int\nfunctionReference = myFunction\n```"
  },
  {
    "task": "Declare a variable to store a configuration setting.",
    "code": "```haskell\nconfigSetting :: String\nconfigSetting = \"exampleSetting\"\n```"
  },
  {
    "task": "Define a variable to keep track of a player's score in a game.",
    "code": "```haskell\nplayerScore :: Int\nplayerScore = 0\n```"
  },
  {
    "task": "Create a variable to store a list of prime numbers.",
    "code": "```haskell\nprimeNumbers :: [Int]\nprimeNumbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n```"
  },
  {
    "task": "Declare a variable to represent the state of a light switch (on/off).",
    "code": "```haskell\nlightSwitchState :: Bool\nlightSwitchState = False\n```"
  },
  {
    "task": "Define a variable to store an email address.",
    "code": "```haskell\nemailAddress :: String\nemailAddress = \"example@example.com\"\n```"
  },
  {
    "task": "Create a variable to hold the URL of a website.",
    "code": "```haskell\nwebsiteUrl :: String\nwebsiteUrl = \"http://example.com\"\n```"
  },
  {
    "task": "Declare a variable to store the status of a network connection.",
    "code": "```haskell\nnetworkStatus :: String\nnetworkStatus = \"Disconnected\"\n```"
  },
  {
    "task": "Define a variable to hold the result of a database query.",
    "code": "```haskell\nqueryResult :: IO (Maybe [String])\nqueryResult = do\n    -- Assume `runQuery` is a function that executes a database query\n    result <- runQuery \"SELECT * FROM table_name\"\n    return result\n```"
  },
  {
    "task": "Create a variable to store the dimensions of a rectangle.",
    "code": "```haskell\nwidth :: Float\nwidth = 10.0\n\nheight :: Float\nheight = 5.0\n```"
  },
  {
    "task": "Declare a variable to hold the name of a file to be opened.",
    "code": "```haskell\nfileName :: String\nfileName = \"example.txt\"\n```"
  },
  {
    "task": "Define a variable to store a person's phone number.",
    "code": "```haskell\nphoneNumber :: String\nphoneNumber = \"123-456-7890\"\n```"
  },
  {
    "task": "Create a variable to store the total cost of items in a cart.",
    "code": "```haskell\ntotalCost :: Double\ntotalCost = 0.0\n```"
  },
  {
    "task": "Declare a variable to store a list of to-do tasks.",
    "code": "```haskell\ntodoTasks :: [String]\ntodoTasks = []\n```"
  },
  {
    "task": "Define a variable to hold a user's profile information.",
    "code": "```haskell\ndata UserProfile = UserProfile\n  { name    :: String\n  , age     :: Int\n  , email   :: String\n  }\n\nuserProfile :: UserProfile\nuserProfile = UserProfile\n  { name = \"John Doe\"\n  , age = 30\n  , email = \"john.doe@example.com\"\n  }\n```"
  },
  {
    "task": "Create a variable to store an array of sensor readings.",
    "code": "```haskell\nsensorReadings :: [Double]\nsensorReadings = []\n```"
  },
  {
    "task": "Declare a variable to represent the number of attempts a user has to log in.",
    "code": "```haskell\nnumberOfAttempts :: Int\nnumberOfAttempts = 3\n```"
  },
  {
    "task": "Define a variable to store the maximum capacity of a container.",
    "code": "```haskell\nmaxCapacity :: Int\nmaxCapacity = 100\n```"
  },
  {
    "task": "Create a variable to store a list of city names.",
    "code": "```haskell\ncityNames :: [String]\ncityNames = [\"New York\", \"Los Angeles\", \"Chicago\", \"Houston\", \"Phoenix\"]\n```"
  },
  {
    "task": "Declare a variable to hold the age of a historical artifact.",
    "code": "```haskell\nartifactAge :: Int\nartifactAge = 0\n```"
  },
  {
    "task": "Define a variable to store an error message.",
    "code": "```haskell\nerrorMessage :: String\nerrorMessage = \"An error has occurred.\"\n```"
  },
  {
    "task": "Create a variable to hold the value of a currency conversion rate.",
    "code": "```haskell\nconversionRate :: Double\nconversionRate = 1.23\n```"
  },
  {
    "task": "Declare a variable to store the result of a coin toss (heads/tails).",
    "code": "```haskell\ncoinTossResult :: String\ncoinTossResult = \"heads\"\n```"
  },
  {
    "task": "Define a variable to track the number of likes on a post.",
    "code": "```haskell\nlikes :: Int\nlikes = 0\n```"
  },
  {
    "task": "Create a variable to hold the settings of a user's preferences.",
    "code": "```haskell\nuserPreferences :: [(String, String)]\nuserPreferences = [(\"theme\", \"dark\"), (\"language\", \"English\"), (\"notifications\", \"enabled\")]\n```"
  },
  {
    "task": "Declare a variable to store a person's birthdate.",
    "code": "```haskell\nbirthdate :: String\nbirthdate = \"YYYY-MM-DD\"\n```"
  },
  {
    "task": "Define a variable to represent a chess piece's position on a board.",
    "code": "```haskell\ntype Position = (Int, Int)\n\nchessPiecePosition :: Position\nchessPiecePosition = (1, 1)\n```"
  },
  {
    "task": "Create a variable to store the number of pages in a book.",
    "code": "```haskell\nnumberOfPages :: Int\nnumberOfPages = 350\n```"
  },
  {
    "task": "Declare a variable to store the highest score achieved in a game.",
    "code": "```haskell\nhighestScore :: Int\nhighestScore = 0\n```"
  },
  {
    "task": "Define a variable to store a list of ingredients for a recipe.",
    "code": "```haskell\ningredients :: [String]\ningredients = [\"flour\", \"sugar\", \"eggs\", \"milk\", \"butter\"]\n```"
  },
  {
    "task": "Create a variable to store the speed of a vehicle in km/h.",
    "code": "```haskell\nvehicleSpeedKmH :: Double\nvehicleSpeedKmH = 0.0\n```"
  },
  {
    "task": "Declare a variable to hold a person's middle initial.",
    "code": "```haskell\nmiddleInitial :: Char\nmiddleInitial = 'M'\n```"
  },
  {
    "task": "Define a variable to store the result of a temperature conversion.",
    "code": "```haskell\nlet temperatureCelsius = 25.0\n    temperatureFahrenheit = (temperatureCelsius * 9/5) + 32\n```"
  },
  {
    "task": "Create a variable to hold a list of registered usernames.",
    "code": "```haskell\nregisteredUsernames :: [String]\nregisteredUsernames = []\n```"
  },
  {
    "task": "Declare a variable to store the name of a country.",
    "code": "```haskell\ncountryName :: String\ncountryName = \"Unknown\"\n```"
  },
  {
    "task": "Define a variable to track the number of visits to a website.",
    "code": "```haskell\nnumberOfVisits :: Int\nnumberOfVisits = 0\n```"
  },
  {
    "task": "Create a variable to store the title of a movie.",
    "code": "```haskell\nmovieTitle :: String\nmovieTitle = \"Inception\"\n```"
  },
  {
    "task": "Declare a variable to hold the result of a random number generator.",
    "code": "```haskell\nimport System.Random (randomIO)\n\nmain :: IO ()\nmain = do\n    result <- randomIO :: IO Int\n    print result\n```"
  },
  {
    "task": "Define a variable to store a binary value.",
    "code": "```haskell\nbinaryValue :: Bool\nbinaryValue = True\n```"
  },
  {
    "task": "Create a variable to store a student's attendance record.",
    "code": "```haskell\nstudentAttendanceRecord :: [Bool]\nstudentAttendanceRecord = []\n```"
  },
  {
    "task": "Declare a variable to represent a traffic light's color.",
    "code": "```haskell\ntrafficLightColor :: String\ntrafficLightColor = \"Red\"\n```"
  },
  {
    "task": "Define a variable to store a person's occupation.",
    "code": "```haskell\noccupation :: String\noccupation = \"Software Engineer\"\n```"
  },
  {
    "task": "Create a variable to store the volume level of an audio player.",
    "code": "```haskell\nvolumeLevel :: Int\nvolumeLevel = 50\n```"
  },
  {
    "task": "Declare a variable to store the dimensions of a 3D object.",
    "code": "```haskell\ndimensions :: (Double, Double, Double)\ndimensions = (length, width, height)\n  where\n    length = 10.0\n    width = 5.0\n    height = 3.0\n```"
  },
  {
    "task": "Define a variable to hold the value of a stock price.",
    "code": "```haskell\nstockPrice :: Double\nstockPrice = 150.25\n```"
  },
  {
    "task": "Create a variable to store a list of holiday destinations.",
    "code": "```haskell\nholidayDestinations :: [String]\nholidayDestinations = [\"Paris\", \"Tokyo\", \"New York\", \"Sydney\", \"Rio de Janeiro\"]\n```"
  },
  {
    "task": "Declare a variable to store the status of an application process.",
    "code": "```haskell\nstatus :: String\nstatus = \"Idle\"\n```"
  },
  {
    "task": "Define a variable to store the current phase of the moon.",
    "code": "```haskell\ncurrentMoonPhase :: String\ncurrentMoonPhase = \"Full Moon\"\n```"
  },
  {
    "task": "Create a variable to hold the amount of memory used by an application.",
    "code": "```haskell\nmemoryUsed :: Int\nmemoryUsed = 1024  -- Example value in megabytes\n```"
  },
  {
    "task": "Declare a variable to store the current version of a software application.",
    "code": "```haskell\ncurrentVersion :: String\ncurrentVersion = \"1.0.0\"\n```"
  },
  {
    "task": "Define a variable to hold the number of chapters in a book.",
    "code": "```haskell\nnumberOfChapters :: Int\nnumberOfChapters = 10\n```"
  },
  {
    "task": "Create a variable to store information about a car's fuel efficiency.",
    "code": "```haskell\nfuelEfficiency :: Double\nfuelEfficiency = 25.0 -- Example value in miles per gallon\n```"
  },
  {
    "task": "Declare a variable to store a user's role in a system.",
    "code": "```haskell\nuserRole :: String\nuserRole = \"Admin\"\n```"
  },
  {
    "task": "Define a variable to store a list of programming languages known.",
    "code": "```haskell\nknownLanguages :: [String]\nknownLanguages = [\"Haskell\", \"Python\", \"Java\", \"C++\", \"JavaScript\"]\n```"
  },
  {
    "task": "Create a variable to track the progress of a download.",
    "code": "```haskell\ndownloadProgress :: Int\ndownloadProgress = 0\n```"
  },
  {
    "task": "Declare a variable to store the outcome of a survey question.",
    "code": "```haskell\noutcome :: String\noutcome = \"Yes\"\n```"
  },
  {
    "task": "Define a variable to hold a personal identification number.",
    "code": "```haskell\npersonalIdentificationNumber :: Int\npersonalIdentificationNumber = 123456789\n```"
  },
  {
    "task": "Create a variable to store the current weather conditions.",
    "code": "```haskell\ncurrentWeatherConditions :: String\ncurrentWeatherConditions = \"Sunny\"\n```"
  },
  {
    "task": "Declare a variable to hold the result of a multiplication operation.",
    "code": "```haskell\nresult :: Int\nresult = 5 * 7\n```"
  },
  {
    "task": "Define a variable to store the winner of a competition.",
    "code": "```haskell\nwinner :: String\nwinner = \"John Doe\"\n```"
  },
  {
    "task": "Create a variable to hold the name of a restaurant.",
    "code": "```haskell\nrestaurantName :: String\nrestaurantName = \"The Gourmet Kitchen\"\n```"
  },
  {
    "task": "Declare a variable to store the number of floors in a building.",
    "code": "```haskell\nnumberOfFloors :: Int\nnumberOfFloors = 10\n```"
  },
  {
    "task": "Define a variable to store a person's signature.",
    "code": "```haskell\nsignature :: String\nsignature = \"John Doe\"\n```"
  },
  {
    "task": "Create a variable to store the average grade of a class.",
    "code": "```haskell\naverageGrade :: Double\naverageGrade = 85.0\n```"
  },
  {
    "task": "Declare a variable to store the length of a movie in minutes.",
    "code": "```haskell\nlengthOfMovieInMinutes :: Int\nlengthOfMovieInMinutes = 120\n```"
  },
  {
    "task": "Define a variable to store the details of a meeting schedule.",
    "code": "```haskell\nmeetingSchedule :: (String, String, String)\nmeetingSchedule = (\"Project Update\", \"2023-10-20\", \"10:00 AM\")\n```"
  },
  {
    "task": "Create a variable to track the number of active users on a platform.",
    "code": "```haskell\nactiveUsers :: Int\nactiveUsers = 0\n```"
  },
  {
    "task": "Declare a variable to store the resolution of a screen.",
    "code": "```haskell\nscreenResolution :: (Int, Int)\nscreenResolution = (1920, 1080)\n```"
  },
  {
    "task": "Define a variable to store the content of a blog post.",
    "code": "```haskell\nblogPostContent :: String\nblogPostContent = \"This is the content of the blog post.\"\n```"
  },
  {
    "task": "Create a variable to hold a list of email contacts.",
    "code": "```haskell\nemailContacts :: [String]\nemailContacts = []\n```"
  },
  {
    "task": "Declare a variable to store the duration of an event.",
    "code": "```haskell\nduration :: Int\nduration = 0\n```"
  },
  {
    "task": "Define a variable to hold a list of completed tasks.",
    "code": "```haskell\ncompletedTasks :: [String]\ncompletedTasks = []\n```"
  },
  {
    "task": "Create a variable to store the name of a musical instrument.",
    "code": "```haskell\ninstrumentName :: String\ninstrumentName = \"Guitar\"\n```"
  },
  {
    "task": "Declare a variable to hold the result of a boolean expression.",
    "code": "```haskell\nresult :: Bool\nresult = True && False\n```"
  },
  {
    "task": "Define a variable to store the name of a planet.",
    "code": "```haskell\nplanetName :: String\nplanetName = \"Earth\"\n```"
  },
  {
    "task": "Create a variable to store the balance of a bank account.",
    "code": "```haskell\nbalance :: Double\nbalance = 0.0\n```"
  },
  {
    "task": "Declare a variable to store the outcome of a dice roll.",
    "code": "```haskell\ndiceRollOutcome :: Int\ndiceRollOutcome = 4\n```"
  },
  {
    "task": "Define a variable to store the current exchange rate.",
    "code": "```haskell\ncurrentExchangeRate :: Double\ncurrentExchangeRate = 1.12\n```"
  },
  {
    "task": "Create a variable to hold the name of a university.",
    "code": "```haskell\nuniversityName :: String\nuniversityName = \"Example University\"\n```"
  }
]