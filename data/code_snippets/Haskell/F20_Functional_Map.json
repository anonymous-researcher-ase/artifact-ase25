[
  {
    "task": "Convert a list of temperatures from Celsius to Fahrenheit using a map function.",
    "code": "```haskell\ncelsiusToFahrenheit :: [Double] -> [Double]\ncelsiusToFahrenheit = map (\\c -> c * (9/5) + 32)\n```"
  },
  {
    "task": "Use map to convert a list of lowercase words to uppercase.",
    "code": "```haskell\nimport Data.Char (toUpper)\n\ntoUpperCaseWords :: [String] -> [String]\ntoUpperCaseWords = map (map toUpper)\n\nmain :: IO ()\nmain = do\n    let wordsList = [\"hello\", \"world\", \"haskell\"]\n    let uppercasedWords = toUpperCaseWords wordsList\n    print uppercasedWords\n```"
  },
  {
    "task": "Apply map to add a prefix to each string in a list of filenames.",
    "code": "```haskell\naddPrefixToFilenames :: String -> [String] -> [String]\naddPrefixToFilenames prefix filenames = map (prefix ++) filenames\n```"
  },
  {
    "task": "Transform a list of numbers by squaring each element with a map function.",
    "code": "```haskell\nsquareList :: [Int] -> [Int]\nsquareList = map (^2)\n```"
  },
  {
    "task": "Convert a list of integers to their string representations using map.",
    "code": "```haskell\nconvertToString :: [Int] -> [String]\nconvertToString = map show\n```"
  },
  {
    "task": "Use map to compute the length of each string in a list of sentences.",
    "code": "```haskell\nsentenceLengths :: [String] -> [Int]\nsentenceLengths = map length\n```"
  },
  {
    "task": "Apply a discount to a list of prices using a map function.",
    "code": "```haskell\napplyDiscount :: Double -> [Double] -> [Double]\napplyDiscount discount = map (\\price -> price * (1 - discount))\n\n-- Example usage:\n-- applyDiscount 0.1 [100.0, 200.0, 300.0]\n-- Result: [90.0, 180.0, 270.0]\n```"
  },
  {
    "task": "Extract the first element from each tuple in a list of tuples with map.",
    "code": "```haskell\nextractFirstElements :: [(a, b)] -> [a]\nextractFirstElements = map fst\n```"
  },
  {
    "task": "Use map to round a list of floating-point numbers to two decimal places.",
    "code": "```haskell\nroundToTwoDecimals :: [Double] -> [Double]\nroundToTwoDecimals = map (fromIntegral . round . (*100) :: Double -> Double) . map (/100)\n```"
  },
  {
    "task": "Capitalize the first letter of each word in a list of names using map.",
    "code": "```haskell\nimport Data.Char (toUpper)\nimport Data.List (unwords)\n\ncapitalizeFirstLetter :: String -> String\ncapitalizeFirstLetter (x:xs) = toUpper x : xs\ncapitalizeFirstLetter [] = []\n\ncapitalizeNames :: [String] -> [String]\ncapitalizeNames = map (unwords . map capitalizeFirstLetter . words)\n```"
  },
  {
    "task": "Convert a list of JSON strings to corresponding dictionary objects with map.",
    "code": "```haskell\nimport Data.Aeson (decode)\nimport Data.ByteString.Lazy.Char8 (pack)\nimport Data.Maybe (mapMaybe)\n\njsonStringsToDicts :: [String] -> [Maybe Object]\njsonStringsToDicts = map (decode . pack)\n```"
  },
  {
    "task": "Use map to double the value of each number in a list.",
    "code": "```haskell\ndoubleValues :: [Int] -> [Int]\ndoubleValues = map (* 2)\n```"
  },
  {
    "task": "Transform a list of RGB tuples to hexadecimal color codes using map.",
    "code": "```haskell\nrgbToHex :: (Int, Int, Int) -> String\nrgbToHex (r, g, b) = \"#\" ++ toHex r ++ toHex g ++ toHex b\n  where\n    toHex x = let hex = \"0123456789ABCDEF\"\n              in [hex !! (x `div` 16), hex !! (x `mod` 16)]\n\ntransformToHex :: [(Int, Int, Int)] -> [String]\ntransformToHex = map rgbToHex\n```"
  },
  {
    "task": "Use map to compute the factorial of each number in a list.",
    "code": "```haskell\nfactorials :: [Integer] -> [Integer]\nfactorials = map factorial\n  where\n    factorial 0 = 1\n    factorial n = n * factorial (n - 1)\n```"
  },
  {
    "task": "Translate a list of English words to Spanish using a map function.",
    "code": "```haskell\nimport Data.Maybe (mapMaybe)\n\n-- Define a dictionary as an association list\ndictionary :: [(String, String)]\ndictionary = [(\"hello\", \"hola\"), (\"world\", \"mundo\"), (\"cat\", \"gato\"), (\"dog\", \"perro\")]\n\n-- Function to translate a single word\ntranslateWord :: String -> Maybe String\ntranslateWord word = lookup word dictionary\n\n-- Function to translate a list of words\ntranslateWords :: [String] -> [String]\ntranslateWords words = mapMaybe translateWord words\n\n-- Example usage\nmain :: IO ()\nmain = print $ translateWords [\"hello\", \"world\", \"unknown\", \"cat\"]\n```"
  },
  {
    "task": "Apply a map function to format a list of dates from one format to another.",
    "code": "```haskell\nimport Data.Time\nimport Data.Time.Format\n\nformatDates :: [String] -> [String]\nformatDates dates = map formatDate dates\n  where\n    inputFormat = \"%Y-%m-%d\"\n    outputFormat = \"%d/%m/%Y\"\n    formatDate dateStr = \n      case parseTimeM True defaultTimeLocale inputFormat dateStr of\n        Just date -> formatTime defaultTimeLocale outputFormat date\n        Nothing -> error \"Invalid date format\"\n```"
  },
  {
    "task": "Use map to check if each number in a list is even, returning a list of booleans.",
    "code": "```haskell\nisEvenList :: [Int] -> [Bool]\nisEvenList = map even\n```"
  },
  {
    "task": "Convert a list of binary strings to decimal numbers using map.",
    "code": "```haskell\nimport Data.Char (digitToInt)\n\nbinaryToDecimal :: String -> Int\nbinaryToDecimal = foldl (\\acc x -> acc * 2 + digitToInt x) 0\n\nconvertBinaryStringsToDecimals :: [String] -> [Int]\nconvertBinaryStringsToDecimals = map binaryToDecimal\n```"
  },
  {
    "task": "Use map to append a domain name to a list of user names to create email addresses.",
    "code": "```haskell\ncreateEmails :: String -> [String] -> [String]\ncreateEmails domain = map (++ ('@' : domain))\n\n-- Example usage:\n-- createEmails \"example.com\" [\"user1\", \"user2\", \"user3\"]\n-- Result: [\"user1@example.com\", \"user2@example.com\", \"user3@example.com\"]\n```"
  },
  {
    "task": "Calculate the area of each circle in a list of radii using a map function.",
    "code": "```haskell\ncalculateAreas :: [Double] -> [Double]\ncalculateAreas radii = map (\\r -> pi * r * r) radii\n```"
  },
  {
    "task": "Use map to strip whitespace from the start and end of each string in a list.",
    "code": "```haskell\nstripWhitespace :: [String] -> [String]\nstripWhitespace = map trim\n  where\n    trim = f . f\n    f = reverse . dropWhile (== ' ')\n```"
  },
  {
    "task": "Apply map to replace spaces with underscores in a list of file paths.",
    "code": "```haskell\nreplaceSpacesWithUnderscores :: [String] -> [String]\nreplaceSpacesWithUnderscores = map (map (\\c -> if c == ' ' then '_' else c))\n```"
  },
  {
    "task": "Convert a list of mixed-case strings to title case using map.",
    "code": "```haskell\nimport Data.Char (toUpper, toLower)\n\ntoTitleCase :: String -> String\ntoTitleCase [] = []\ntoTitleCase (x:xs) = toUpper x : map toLower xs\n\nconvertToTitleCase :: [String] -> [String]\nconvertToTitleCase = map toTitleCase\n```"
  },
  {
    "task": "Use map to filter out only the digits from a list of mixed alphanumeric strings.",
    "code": "```haskell\nimport Data.Char (isDigit)\n\nfilterDigits :: [String] -> [String]\nfilterDigits = map (filter isDigit)\n```"
  },
  {
    "task": "Apply map to convert a list of Unix timestamps to readable date strings.",
    "code": "```haskell\nimport Data.Time.Clock.POSIX (posixSecondsToUTCTime)\nimport Data.Time.Format (defaultTimeLocale, formatTime)\n\nconvertTimestamps :: [Int] -> [String]\nconvertTimestamps = map (formatTime defaultTimeLocale \"%Y-%m-%d %H:%M:%S\" . posixSecondsToUTCTime . fromIntegral)\n```"
  },
  {
    "task": "Transform a list of dictionary objects by extracting a specific key's value using map.",
    "code": "```haskell\nextractKey :: String -> [[(String, String)]] -> [String]\nextractKey key = map (maybe \"\" id . lookup key)\n```"
  },
  {
    "task": "Use map to compute the cube of each number in a list.",
    "code": "```haskell\ncubeList :: [Integer] -> [Integer]\ncubeList = map (^3)\n```"
  },
  {
    "task": "Translate a list of URLs to their respective domain names using a map function.",
    "code": "```haskell\nimport Network.URI (parseURI, uriRegName, uriAuthority)\n\ngetDomain :: String -> Maybe String\ngetDomain url = do\n    uri <- parseURI url\n    authority <- uriAuthority uri\n    return $ uriRegName authority\n\nextractDomains :: [String] -> [Maybe String]\nextractDomains = map getDomain\n\n-- Example usage\nurls = [\"http://www.example.com\", \"https://haskell.org\", \"ftp://ftp.funet.fi/pub/standards/RFC/rfc959.txt\"]\ndomains = extractDomains urls\n```"
  },
  {
    "task": "Use map to generate HTML list items from a list of text strings.",
    "code": "```haskell\ngenerateListItems :: [String] -> [String]\ngenerateListItems = map (\\s -> \"<li>\" ++ s ++ \"</li>\")\n\n-- Example usage:\n-- generateListItems [\"Item 1\", \"Item 2\", \"Item 3\"]\n-- Output: [\"<li>Item 1</li>\", \"<li>Item 2</li>\", \"<li>Item 3</li>\"]\n```"
  },
  {
    "task": "Convert a list of polar coordinates to Cartesian coordinates using map.",
    "code": "```haskell\ntype PolarCoord = (Double, Double)\ntype CartesianCoord = (Double, Double)\n\npolarToCartesian :: PolarCoord -> CartesianCoord\npolarToCartesian (r, theta) = (r * cos theta, r * sin theta)\n\nconvertListToCartesian :: [PolarCoord] -> [CartesianCoord]\nconvertListToCartesian = map polarToCartesian\n```"
  },
  {
    "task": "Use map to decode a list of Base64 encoded strings.",
    "code": "```haskell\nimport Data.ByteString.Base64 (decodeBase64)\nimport Data.ByteString.Char8 (pack, unpack)\n\ndecodeBase64Strings :: [String] -> [Either String String]\ndecodeBase64Strings = map decodeBase64String\n  where\n    decodeBase64String s = \n      case decodeBase64 (pack s) of\n        Left err -> Left (show err)\n        Right decoded -> Right (unpack decoded)\n```"
  },
  {
    "task": "Convert a list of English sentences to Pig Latin using a map function.",
    "code": "```haskell\ntoPigLatin :: String -> String\ntoPigLatin sentence = unwords $ map convertWordToPigLatin (words sentence)\n  where\n    convertWordToPigLatin word@(c:cs)\n      | elem c \"aeiouAEIOU\" = word ++ \"way\"\n      | otherwise = cs ++ [c] ++ \"ay\"\n\nconvertSentencesToPigLatin :: [String] -> [String]\nconvertSentencesToPigLatin = map toPigLatin\n```"
  },
  {
    "task": "Use map to anonymize a list of email addresses by masking them.",
    "code": "```haskell\nmaskEmail :: String -> String\nmaskEmail email = let (user, domain) = break (== '@') email\n                  in take 1 user ++ replicate (length user - 1) '*' ++ domain\n\nanonymizeEmails :: [String] -> [String]\nanonymizeEmails = map maskEmail\n```"
  },
  {
    "task": "Apply map to reverse each string in a list of words.",
    "code": "```haskell\nreverseWords :: [String] -> [String]\nreverseWords = map reverse\n```"
  },
  {
    "task": "Convert a list of hexadecimal color codes to RGB tuples using map.",
    "code": "```haskell\nimport Numeric (readHex)\n\nhexToRGB :: String -> (Int, Int, Int)\nhexToRGB ('#':hex) = let (r, g, b) = splitAt 2 hex in (toDec r, toDec (take 2 g), toDec (drop 2 g))\n  where toDec h = fst . head $ readHex h\n\nhexColorsToRGB :: [String] -> [(Int, Int, Int)]\nhexColorsToRGB = map hexToRGB\n```"
  },
  {
    "task": "Use map to increment each integer in a list by a constant value.",
    "code": "```haskell\nincrementList :: Int -> [Int] -> [Int]\nincrementList increment = map (+ increment)\n```"
  },
  {
    "task": "Calculate the square root of each number in a list using a map function.",
    "code": "```haskell\nimport Data.List\nimport Data.Function\nimport Data.Ord\nimport Data.Char\nimport qualified Data.Map as Map\nimport qualified Data.Set as Set\n\nsquareRoots :: [Double] -> [Double]\nsquareRoots = map sqrt\n```"
  },
  {
    "task": "Use map to convert a list of currency amounts from dollars to euros.",
    "code": "```haskell\nconvertToEuros :: [Double] -> [Double]\nconvertToEuros = map (\\dollars -> dollars * 0.85) -- Assuming 1 dollar = 0.85 euros\n```"
  },
  {
    "task": "Extract the domain from each email address in a list using map.",
    "code": "```haskell\nextractDomains :: [String] -> [String]\nextractDomains emails = map (drop 1 . dropWhile (/= '@')) emails\n```"
  },
  {
    "task": "Use map to serialize a list of objects into JSON strings.",
    "code": "```haskell\n{-# LANGUAGE OverloadedStrings #-}\n\nimport Data.Aeson (encode, ToJSON)\nimport Data.ByteString.Lazy.Char8 (unpack)\n\nserializeToJson :: ToJSON a => [a] -> [String]\nserializeToJson = map (unpack . encode)\n```"
  },
  {
    "task": "Transform a list of file sizes from bytes to kilobytes using map.",
    "code": "```haskell\ntransformSizesToKilobytes :: [Int] -> [Double]\ntransformSizesToKilobytes = map (\\bytes -> fromIntegral bytes / 1024.0)\n```"
  },
  {
    "task": "Use map to append a suffix to each string in a list of identifiers.",
    "code": "```haskell\nappendSuffix :: String -> [String] -> [String]\nappendSuffix suffix = map (++ suffix)\n\n-- Example usage:\n-- appendSuffix \"_suffix\" [\"id1\", \"id2\", \"id3\"]\n-- Result: [\"id1_suffix\", \"id2_suffix\", \"id3_suffix\"]\n```"
  },
  {
    "task": "Apply map to convert measurements from inches to centimeters in a list.",
    "code": "```haskell\nconvertToCentimeters :: [Double] -> [Double]\nconvertToCentimeters inches = map (\\inch -> inch * 2.54) inches\n```"
  },
  {
    "task": "Use map to encrypt a list of plaintext messages using a simple cipher.",
    "code": "```haskell\nimport Data.Char (chr, ord)\n\n-- A simple cipher function: shifts each character by a fixed offset\ncipher :: Int -> Char -> Char\ncipher offset c = chr $ ord c + offset\n\n-- Function to encrypt a single message\nencryptMessage :: Int -> String -> String\nencryptMessage offset message = map (cipher offset) message\n\n-- Encrypt a list of messages\nencryptMessages :: Int -> [String] -> [String]\nencryptMessages offset messages = map (encryptMessage offset) messages\n\n-- Example usage\nmain :: IO ()\nmain = do\n    let messages = [\"hello\", \"world\"]\n    let offset = 3\n    let encryptedMessages = encryptMessages offset messages\n    print encryptedMessages\n```"
  },
  {
    "task": "Transform a list of date strings to day of the week names using a map function.",
    "code": "```haskell\nimport Data.Time\nimport Data.Time.Format\n\ndateStringsToWeekdays :: [String] -> IO [String]\ndateStringsToWeekdays dates = mapM dateStringToWeekday dates\n  where\n    dateStringToWeekday :: String -> IO String\n    dateStringToWeekday dateStr = do\n      let parsedDate = parseTimeM True defaultTimeLocale \"%Y-%m-%d\" dateStr :: Maybe Day\n      case parsedDate of\n        Just day -> return $ formatTime defaultTimeLocale \"%A\" day\n        Nothing  -> return \"Invalid date\"\n```"
  },
  {
    "task": "Use map to derive the absolute value of each number in a list.",
    "code": "```haskell\nabsoluteValues :: [Int] -> [Int]\nabsoluteValues = map abs\n```"
  },
  {
    "task": "Convert a list of lowercase hexadecimal strings to uppercase using map.",
    "code": "```haskell\nimport Data.Char (toUpper)\n\ntoUpperHexList :: [String] -> [String]\ntoUpperHexList = map (map toUpper)\n```"
  },
  {
    "task": "Use map to find the maximum value in a list of lists of numbers.",
    "code": "```haskell\nmaximumInLists :: (Ord a, Num a) => [[a]] -> [a]\nmaximumInLists = map maximum\n```"
  },
  {
    "task": "Apply map to extract the year from each date in a list of date objects.",
    "code": "```haskell\nimport Data.Time (Day, toGregorian)\n\nextractYears :: [Day] -> [Integer]\nextractYears = map (\\date -> let (year, _, _) = toGregorian date in year)\n```"
  },
  {
    "task": "Use map to prepend a country code to each phone number in a list.",
    "code": "```haskell\nprependCountryCode :: String -> [String] -> [String]\nprependCountryCode countryCode = map (countryCode ++)\n\n-- Example usage:\n-- prependCountryCode \"+1\" [\"1234567890\", \"0987654321\"]\n-- Result: [\"+11234567890\", \"+10987654321\"]\n```"
  },
  {
    "task": "Capitalize the last letter of each word in a list using a map function.",
    "code": "```haskell\nimport Data.Char (toUpper)\n\ncapitalizeLast :: String -> String\ncapitalizeLast word = \n  let (initPart, lastChar) = splitAt (length word - 1) word\n  in initPart ++ [toUpper $ head lastChar]\n\ncapitalizeWords :: [String] -> [String]\ncapitalizeWords = map capitalizeLast\n```"
  },
  {
    "task": "Use map to transform a list of strings by removing all vowels.",
    "code": "```haskell\nremoveVowels :: String -> String\nremoveVowels = filter (`notElem` \"aeiouAEIOU\")\n\ntransformStrings :: [String] -> [String]\ntransformStrings = map removeVowels\n```"
  },
  {
    "task": "Convert a list of music notes to their corresponding frequencies using map.",
    "code": "```haskell\nnoteToFrequency :: String -> Double\nnoteToFrequency note = case note of\n    \"C\" -> 261.63\n    \"D\" -> 293.66\n    \"E\" -> 329.63\n    \"F\" -> 349.23\n    \"G\" -> 392.00\n    \"A\" -> 440.00\n    \"B\" -> 493.88\n    _   -> 0.0\n\nnotesToFrequencies :: [String] -> [Double]\nnotesToFrequencies notes = map noteToFrequency notes\n```"
  },
  {
    "task": "Use map to find the reciprocal of each number in a list.",
    "code": "```haskell\nreciprocals :: [Double] -> [Double]\nreciprocals = map (1 /)\n```"
  },
  {
    "task": "Transform a list of URLs to their shortened versions using a map function.",
    "code": "```haskell\nimport Data.List (isPrefixOf)\n\n-- Example URL shortening function\nshortenUrl :: String -> String\nshortenUrl url\n  | \"https://\" `isPrefixOf` url = \"short.ly/\" ++ drop 8 url\n  | \"http://\" `isPrefixOf` url = \"short.ly/\" ++ drop 7 url\n  | otherwise = url\n\n-- Transform a list of URLs to their shortened versions\nshortenUrls :: [String] -> [String]\nshortenUrls urls = map shortenUrl urls\n```"
  },
  {
    "task": "Use map to generate a list of initials from a list of full names.",
    "code": "```haskell\ninitials :: [String] -> [String]\ninitials = map (\\name -> map head (words name))\n```"
  },
  {
    "task": "Convert a list of decimal numbers to their binary string representations using map.",
    "code": "```haskell\ndecimalToBinary :: Int -> String\ndecimalToBinary 0 = \"0\"\ndecimalToBinary n = reverse (helper n)\n  where\n    helper 0 = \"\"\n    helper x = let (q, r) = x `divMod` 2 in show r ++ helper q\n\nconvertListToBinary :: [Int] -> [String]\nconvertListToBinary = map decimalToBinary\n```"
  },
  {
    "task": "Use map to adjust the brightness of each color in a list of RGB tuples.",
    "code": "```haskell\nadjustBrightness :: Double -> [(Int, Int, Int)] -> [(Int, Int, Int)]\nadjustBrightness factor = map (\\(r, g, b) -> (adjust r, adjust g, adjust b))\n  where\n    adjust x = min 255 (round (fromIntegral x * factor))\n\n-- Example usage\ncolors :: [(Int, Int, Int)]\ncolors = [(100, 150, 200), (50, 50, 50), (255, 255, 255)]\n\nbrightenedColors :: [(Int, Int, Int)]\nbrightenedColors = adjustBrightness 1.2 colors\n```"
  },
  {
    "task": "Apply map to filter out only alphabetic characters from a list of strings.",
    "code": "```haskell\nimport Data.Char (isAlpha)\n\nfilterAlpha :: [String] -> [String]\nfilterAlpha = map (filter isAlpha)\n```"
  },
  {
    "task": "Use map to compute the prime factorization of each number in a list.",
    "code": "```haskell\nimport Data.List (group)\n\nprimeFactors :: Int -> [Int]\nprimeFactors n = factor n 2\n  where\n    factor 1 _ = []\n    factor m d\n      | m `mod` d == 0 = d : factor (m `div` d) d\n      | d * d > m = [m]\n      | otherwise = factor m (d + 1)\n\nprimeFactorizations :: [Int] -> [[Int]]\nprimeFactorizations = map primeFactors\n```"
  },
  {
    "task": "Calculate the exponential of each number in a list using a map function.",
    "code": "```haskell\nimport Prelude hiding (map)\nimport Data.List (map)\nimport GHC.Float (powerDouble)\n\nexponentials :: [Double] -> [Double]\nexponentials = map (powerDouble 2)\n```"
  },
  {
    "task": "Use map to convert a list of text messages to morse code.",
    "code": "```haskell\nimport Data.Map (fromList, (!?))\nimport Data.Maybe (mapMaybe)\n\nmorseCodeMap :: [(Char, String)]\nmorseCodeMap = \n    [ ('A', \".-\"),   ('B', \"-...\"), ('C', \"-.-.\"), ('D', \"-..\"),  ('E', \".\")\n    , ('F', \"..-.\"), ('G', \"--.\"),  ('H', \"....\"), ('I', \"..\"),   ('J', \".---\")\n    , ('K', \"-.-\"),  ('L', \".-..\"), ('M', \"--\"),   ('N', \"-.\"),   ('O', \"---\")\n    , ('P', \".--.\"), ('Q', \"--.-\"), ('R', \".-.\"),  ('S', \"...\"),  ('T', \"-\")\n    , ('U', \"..-\"),  ('V', \"...-\"), ('W', \".--\"),  ('X', \"-..-\"), ('Y', \"-.--\")\n    , ('Z', \"--..\"), ('1', \".----\"),('2', \"..---\"),('3', \"...--\"),('4', \"....-\")\n    , ('5', \".....\"),('6', \"-....\"),('7', \"--...\"),('8', \"---..\"),('9', \"----.\")\n    , ('0', \"-----\"),(' ', \"/\")\n    ]\n\nmorseCodeDict :: Map Char String\nmorseCodeDict = fromList morseCodeMap\n\ntextToMorse :: String -> String\ntextToMorse = unwords . mapMaybe (`lookup` morseCodeDict) . map toUpper\n\nconvertMessagesToMorse :: [String] -> [String]\nconvertMessagesToMorse = map textToMorse\n```"
  },
  {
    "task": "Transform a list of JSON objects to XML strings using a map function.",
    "code": "```haskell\n{-# LANGUAGE OverloadedStrings #-}\n\nimport Data.Aeson (decode, Object)\nimport Data.Text (Text)\nimport qualified Data.ByteString.Lazy as B\nimport Text.XML.Light.Output (ppTopElement)\nimport Text.XML.Light.Types (Element)\nimport qualified Text.XML.Light as XML\n\njsonToXml :: B.ByteString -> Maybe Element\njsonToXml json = do\n    obj <- decode json :: Maybe Object\n    let xmlElements = map (\\(k, v) -> XML.Elem (XML.unode k (show v))) (toList obj)\n    return $ XML.unode \"root\" xmlElements\n\ntransformJsonListToXml :: [B.ByteString] -> [Maybe Text]\ntransformJsonListToXml jsonList = map (fmap (ppTopElement . jsonToXml)) jsonList\n```"
  },
  {
    "task": "Use map to extract the extension from each filename in a list.",
    "code": "```haskell\nextractExtensions :: [String] -> [String]\nextractExtensions = map (reverse . takeWhile (/= '.') . reverse)\n```"
  },
  {
    "task": "Convert a list of temperatures from Fahrenheit to Kelvin using map.",
    "code": "```haskell\nfahrenheitToKelvin :: [Double] -> [Double]\nfahrenheitToKelvin = map (\\f -> (f + 459.67) * (5/9))\n```"
  },
  {
    "task": "Use map to calculate the perimeter of each rectangle in a list of dimensions.",
    "code": "```haskell\ncalculatePerimeters :: [(Double, Double)] -> [Double]\ncalculatePerimeters = map (\\(length, width) -> 2 * (length + width))\n```"
  },
  {
    "task": "Apply map to format a list of phone numbers into a standard format.",
    "code": "```haskell\nformatPhoneNumbers :: [String] -> [String]\nformatPhoneNumbers = map formatNumber\n  where\n    formatNumber num = \"(\" ++ take 3 num ++ \") \" ++ take 3 (drop 3 num) ++ \"-\" ++ drop 6 num\n\n-- Example usage\nformattedNumbers = formatPhoneNumbers [\"1234567890\", \"0987654321\"]\n```"
  },
  {
    "task": "Use map to generate a hashed version of passwords from a list.",
    "code": "```haskell\nimport Data.Hashable (hash)\n\nhashPasswords :: [String] -> [Int]\nhashPasswords = map hash\n\nmain :: IO ()\nmain = do\n    let passwords = [\"password1\", \"12345\", \"letmein\"]\n    let hashedPasswords = hashPasswords passwords\n    print hashedPasswords\n```"
  },
  {
    "task": "Convert a list of text paragraphs to a word count using map.",
    "code": "```haskell\nparagraphsToWordCount :: [String] -> [Int]\nparagraphsToWordCount = map (length . words)\n```"
  },
  {
    "task": "Use map to remove punctuation from each string in a list of sentences.",
    "code": "```haskell\nimport Data.Char (isPunctuation)\n\nremovePunctuation :: String -> String\nremovePunctuation = filter (not . isPunctuation)\n\nremovePunctuationFromSentences :: [String] -> [String]\nremovePunctuationFromSentences = map removePunctuation\n```"
  },
  {
    "task": "Transform a list of URLs to their base domain using a map function.",
    "code": "```haskell\nimport Network.URI (parseURI, uriRegName, uriAuthority)\n\ngetBaseDomain :: String -> Maybe String\ngetBaseDomain url = do\n    uri <- parseURI url\n    authority <- uriAuthority uri\n    return $ uriRegName authority\n\ntransformUrlsToDomains :: [String] -> [Maybe String]\ntransformUrlsToDomains = map getBaseDomain\n```"
  },
  {
    "task": "Use map to translate a list of expressions to their symbolic algebraic forms.",
    "code": "```haskell\nimport Data.List (intercalate)\n\ndata Expr = Add Expr Expr\n          | Sub Expr Expr\n          | Mul Expr Expr\n          | Div Expr Expr\n          | Val Int\n\nshowExpr :: Expr -> String\nshowExpr (Val n) = show n\nshowExpr (Add e1 e2) = \"(\" ++ showExpr e1 ++ \" + \" ++ showExpr e2 ++ \")\"\nshowExpr (Sub e1 e2) = \"(\" ++ showExpr e1 ++ \" - \" ++ showExpr e2 ++ \")\"\nshowExpr (Mul e1 e2) = \"(\" ++ showExpr e1 ++ \" * \" ++ showExpr e2 ++ \")\"\nshowExpr (Div e1 e2) = \"(\" ++ showExpr e1 ++ \" / \" ++ showExpr e2 ++ \")\"\n\nexpressions :: [Expr]\nexpressions = [Add (Val 1) (Val 2), Sub (Val 5) (Val 3), Mul (Val 4) (Val 2)]\n\nsymbolicForms :: [String]\nsymbolicForms = map showExpr expressions\n\nmain :: IO ()\nmain = putStrLn $ intercalate \", \" symbolicForms\n```"
  },
  {
    "task": "Apply map to convert a list of ASCII codes to corresponding characters.",
    "code": "```haskell\nasciiToChars :: [Int] -> String\nasciiToChars = map chr\n```"
  },
  {
    "task": "Use map to transform a list of text strings to their lemmatized forms.",
    "code": "```haskell\nimport Text.Lemmatizer\n\nlemmatizeList :: [String] -> IO [String]\nlemmatizeList texts = do\n    lemmatizer <- defaultLemmatizer\n    return $ map (lemmatize lemmatizer) texts\n```"
  },
  {
    "task": "Convert a list of HTML strings to plain text using map.",
    "code": "```haskell\nimport Text.HTML.TagSoup\n\nhtmlToPlainText :: String -> String\nhtmlToPlainText = innerText . parseTags\n\nconvertHtmlListToPlainText :: [String] -> [String]\nconvertHtmlListToPlainText = map htmlToPlainText\n```"
  },
  {
    "task": "Use map to create a summary of each article in a list of texts.",
    "code": "```haskell\nsummarizeArticle :: String -> String\nsummarizeArticle = unwords . take 10 . words\n\nsummarizeArticles :: [String] -> [String]\nsummarizeArticles = map summarizeArticle\n```"
  },
  {
    "task": "Transform a list of paths to their absolute paths using a map function.",
    "code": "```haskell\nimport System.FilePath\nimport System.Directory\n\ntoAbsolutePaths :: [FilePath] -> IO [FilePath]\ntoAbsolutePaths paths = mapM makeAbsolute paths\n```"
  },
  {
    "task": "Use map to generate QR codes from a list of URLs.",
    "code": "```haskell\nimport Codec.QRCode\nimport Data.Text (pack)\n\ngenerateQRCode :: String -> Either String QRCode\ngenerateQRCode url = encodeText (pack url) Nothing Nothing Nothing\n\ngenerateQRCodes :: [String] -> [Either String QRCode]\ngenerateQRCodes urls = map generateQRCode urls\n```"
  },
  {
    "task": "Convert a list of angles from degrees to radians using map.",
    "code": "```haskell\nimport Data.List\n\ndegreesToRadians :: Floating a => a -> a\ndegreesToRadians degrees = degrees * (pi / 180)\n\nconvertListToRadians :: Floating a => [a] -> [a]\nconvertListToRadians = map degreesToRadians\n\n-- Example usage:\n-- let anglesInDegrees = [0, 30, 45, 60, 90, 180, 360]\n-- let anglesInRadians = convertListToRadians anglesInDegrees\n```"
  },
  {
    "task": "Use map to anonymize a list of IP addresses by masking parts of them.",
    "code": "```haskell\nanonymizeIPs :: [String] -> [String]\nanonymizeIPs = map maskIP\n  where\n    maskIP ip = let parts = split '.' ip in maskParts parts\n    maskParts (a:b:c:_) = a ++ \".\" ++ b ++ \".***.***\"\n    split delim s = case break (== delim) s of\n                      (l, s') -> l : case s' of\n                                       []      -> []\n                                       (_:s'') -> split delim s''\n```"
  },
  {
    "task": "Transform a list of tuples by swapping their elements using a map function.",
    "code": "```haskell\nswapTuples :: [(a, b)] -> [(b, a)]\nswapTuples = map (\\(x, y) -> (y, x))\n```"
  },
  {
    "task": "Use map to compute the greatest common divisor of pairs in a list of number pairs.",
    "code": "```haskell\nimport Data.List (map)\nimport Data.Function (on)\n\ngcdPairs :: [(Int, Int)] -> [Int]\ngcdPairs = map (uncurry gcd)\n```"
  },
  {
    "task": "Convert a list of file paths to their directory names using map.",
    "code": "```haskell\nimport System.FilePath (takeDirectory)\n\ngetDirectoryNames :: [FilePath] -> [FilePath]\ngetDirectoryNames = map takeDirectory\n```"
  },
  {
    "task": "Use map to replace each vowel in a list of strings with a specific character.",
    "code": "```haskell\nreplaceVowels :: Char -> [String] -> [String]\nreplaceVowels replacement = map (map replace)\n  where\n    vowels = \"aeiouAEIOU\"\n    replace c\n      | c `elem` vowels = replacement\n      | otherwise       = c\n```"
  },
  {
    "task": "Transform a list of integers to their hexadecimal representations using map.",
    "code": "```haskell\nimport Numeric (showHex)\n\nintegersToHex :: [Int] -> [String]\nintegersToHex = map (`showHex` \"\")\n```"
  },
  {
    "task": "Use map to apply a transformation matrix to a list of 2D vectors.",
    "code": "```haskell\ntype Vector2D = (Double, Double)\ntype Matrix2x2 = ((Double, Double), (Double, Double))\n\napplyMatrix :: Matrix2x2 -> Vector2D -> Vector2D\napplyMatrix ((a, b), (c, d)) (x, y) = (a*x + b*y, c*x + d*y)\n\ntransformVectors :: Matrix2x2 -> [Vector2D] -> [Vector2D]\ntransformVectors matrix vectors = map (applyMatrix matrix) vectors\n```"
  },
  {
    "task": "Convert a list of text strings to their phonetic alphabet equivalents using map.",
    "code": "```haskell\nphoneticAlphabet :: String -> String\nphoneticAlphabet word = concatMap (\\c -> case c of\n    'A' -> \"Alpha \"\n    'B' -> \"Bravo \"\n    'C' -> \"Charlie \"\n    'D' -> \"Delta \"\n    'E' -> \"Echo \"\n    'F' -> \"Foxtrot \"\n    'G' -> \"Golf \"\n    'H' -> \"Hotel \"\n    'I' -> \"India \"\n    'J' -> \"Juliett \"\n    'K' -> \"Kilo \"\n    'L' -> \"Lima \"\n    'M' -> \"Mike \"\n    'N' -> \"November \"\n    'O' -> \"Oscar \"\n    'P' -> \"Papa \"\n    'Q' -> \"Quebec \"\n    'R' -> \"Romeo \"\n    'S' -> \"Sierra \"\n    'T' -> \"Tango \"\n    'U' -> \"Uniform \"\n    'V' -> \"Victor \"\n    'W' -> \"Whiskey \"\n    'X' -> \"X-ray \"\n    'Y' -> \"Yankee \"\n    'Z' -> \"Zulu \"\n    _   -> \"\") word\n\nconvertToPhonetic :: [String] -> [String]\nconvertToPhonetic = map phoneticAlphabet\n```"
  },
  {
    "task": "Use map to determine if each word in a list is a palindrome, returning booleans.",
    "code": "```haskell\nisPalindrome :: String -> Bool\nisPalindrome s = s == reverse s\n\npalindromeMap :: [String] -> [Bool]\npalindromeMap = map isPalindrome\n```"
  },
  {
    "task": "Transform a list of dictionaries by renaming a specified key using a map function.",
    "code": "```haskell\nimport Data.Maybe (fromMaybe)\nimport Data.List (find)\nimport Data.Map (Map)\nimport qualified Data.Map as Map\n\nrenameKeyInDict :: Ord k => k -> k -> [Map k v] -> [Map k v]\nrenameKeyInDict oldKey newKey = map renameKey\n  where\n    renameKey dict = case Map.lookup oldKey dict of\n      Nothing -> dict\n      Just value -> Map.insert newKey value (Map.delete oldKey dict)\n```"
  },
  {
    "task": "Use map to compute the logarithm of each number in a list.",
    "code": "```haskell\nimport Data.List\nimport Prelude hiding (log)\nimport Data.Function\n\nlogarithms :: Floating a => [a] -> [a]\nlogarithms = map log\n```"
  },
  {
    "task": "Convert a list of image file paths to grayscale versions using map.",
    "code": "```haskell\nimport Codec.Picture\n\nconvertToGrayscale :: FilePath -> FilePath -> IO ()\nconvertToGrayscale inputPath outputPath = do\n    eImg <- readImage inputPath\n    case eImg of\n        Left err -> putStrLn $ \"Error loading image: \" ++ err\n        Right dynamicImg -> case dynamicImg of\n            ImageRGB8 img -> savePngImage outputPath (ImageRGB8 $ pixelMap pixelToGrayscale img)\n            _ -> putStrLn \"Unsupported image format\"\n\npixelToGrayscale :: PixelRGB8 -> PixelRGB8\npixelToGrayscale (PixelRGB8 r g b) = let gray = round (0.299 * fromIntegral r + 0.587 * fromIntegral g + 0.114 * fromIntegral b)\n                                     in PixelRGB8 gray gray gray\n\nconvertImagesToGrayscale :: [FilePath] -> [FilePath] -> IO ()\nconvertImagesToGrayscale inputPaths outputPaths = sequence_ $ zipWith convertToGrayscale inputPaths outputPaths\n\nmain :: IO ()\nmain = do\n    let inputPaths = [\"image1.png\", \"image2.jpg\", \"image3.bmp\"]\n    let outputPaths = [\"grayscale_image1.png\", \"grayscale_image2.jpg\", \"grayscale_image3.bmp\"]\n    convertImagesToGrayscale inputPaths outputPaths\n```"
  },
  {
    "task": "Use map to flatten a list of lists of strings into a single list of strings.",
    "code": "```haskell\nflatten :: [[String]] -> [String]\nflatten = concat . map id\n```"
  },
  {
    "task": "Transform a list of temperature readings to temperature anomalies using a map function.",
    "code": "```haskell\ntemperatureAnomalies :: [Double] -> [Double]\ntemperatureAnomalies readings = map (\\x -> x - mean) readings\n  where mean = sum readings / fromIntegral (length readings)\n```"
  }
]