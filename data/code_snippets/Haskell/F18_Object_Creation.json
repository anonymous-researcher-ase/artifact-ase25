[
  {
    "task": "Create a new instance of a class that represents a book, with properties for title, author, and ISBN number.",
    "code": "```haskell\ndata Book = Book {\n    title :: String,\n    author :: String,\n    isbn :: String\n}\n\ncreateBook :: String -> String -> String -> Book\ncreateBook t a i = Book { title = t, author = a, isbn = i }\n\nnewBook :: Book\nnewBook = createBook \"1984\" \"George Orwell\" \"1234567890\"\n```"
  },
  {
    "task": "Instantiate an object of a class named Car, and set its make, model, and year attributes.",
    "code": "```haskell\ndata Car = Car { make :: String, model :: String, year :: Int }\n\ncreateCar :: String -> String -> Int -> Car\ncreateCar make model year = Car { make = make, model = model, year = year }\n\nmyCar :: Car\nmyCar = createCar \"Toyota\" \"Camry\" 2023\n```"
  },
  {
    "task": "Develop a class to represent a rectangle, then create an object with specific width and height.",
    "code": "```haskell\ndata Rectangle = Rectangle { width :: Double, height :: Double }\n\ncreateRectangle :: Double -> Double -> Rectangle\ncreateRectangle w h = Rectangle { width = w, height = h }\n\nmyRectangle :: Rectangle\nmyRectangle = createRectangle 5.0 10.0\n```"
  },
  {
    "task": "Construct an object of a class Person, initializing it with a name and age.",
    "code": "```haskell\ndata Person = Person { name :: String, age :: Int }\n\ncreatePerson :: String -> Int -> Person\ncreatePerson n a = Person { name = n, age = a }\n\n-- Example of object creation\npersonInstance :: Person\npersonInstance = createPerson \"Alice\" 30\n```"
  },
  {
    "task": "Create a new object from a class called Circle, initializing it with a radius value.",
    "code": "```haskell\ndata Circle = Circle { radius :: Double }\n\ncreateCircle :: Double -> Circle\ncreateCircle r = Circle r\n\nnewCircle :: Circle\nnewCircle = createCircle 5.0\n```"
  },
  {
    "task": "Instantiate a class named Student with properties for name, student ID, and GPA.",
    "code": "```haskell\ndata Student = Student\n  { name :: String\n  , studentID :: Int\n  , gpa :: Double\n  }\n\ncreateStudent :: String -> Int -> Double -> Student\ncreateStudent n id g = Student {name = n, studentID = id, gpa = g}\n```"
  },
  {
    "task": "Design a class for a smartphone, then create an instance with specific brand, model, and storage capacity.",
    "code": "```haskell\ndata Smartphone = Smartphone\n  { brand :: String\n  , model :: String\n  , storageCapacity :: Int\n  } deriving (Show)\n\ncreateSmartphone :: String -> String -> Int -> Smartphone\ncreateSmartphone b m s = Smartphone b m s\n\nmySmartphone :: Smartphone\nmySmartphone = createSmartphone \"Apple\" \"iPhone 13\" 128\n```"
  },
  {
    "task": "Create an object of a class named BankAccount, initializing it with an account number and balance.",
    "code": "```haskell\ndata BankAccount = BankAccount {\n    accountNumber :: String,\n    balance :: Double\n} deriving (Show)\n\ncreateBankAccount :: String -> Double -> BankAccount\ncreateBankAccount accNum bal = BankAccount { accountNumber = accNum, balance = bal }\n\n-- Example object creation\nlet myAccount = createBankAccount \"123456789\" 1000.0\n```"
  },
  {
    "task": "Write a class for a movie, then instantiate it with a title, director, and release year.",
    "code": "```haskell\ndata Movie = Movie { title :: String, director :: String, releaseYear :: Int }\n\ncreateMovie :: String -> String -> Int -> Movie\ncreateMovie t d r = Movie { title = t, director = d, releaseYear = r }\n\nmyMovie :: Movie\nmyMovie = createMovie \"Inception\" \"Christopher Nolan\" 2010\n```"
  },
  {
    "task": "Define a class representing a point in 2D space and create an object with x and y coordinates.",
    "code": "```haskell\ndata Point = Point { x :: Double, y :: Double }\n\ncreatePoint :: Double -> Double -> Point\ncreatePoint xCoord yCoord = Point { x = xCoord, y = yCoord }\n\npoint :: Point\npoint = createPoint 3.0 4.0\n```"
  },
  {
    "task": "Create an instance of a class called Computer with attributes for CPU, RAM, and storage.",
    "code": "```haskell\ndata Computer = Computer\n  { cpu     :: String\n  , ram     :: Int\n  , storage :: Int\n  } deriving (Show)\n\ncreateComputer :: String -> Int -> Int -> Computer\ncreateComputer cpu' ram' storage' = Computer { cpu = cpu', ram = ram', storage = storage' }\n\n-- Example of creating a Computer instance\nmyComputer :: Computer\nmyComputer = createComputer \"Intel i7\" 16 512\n```"
  },
  {
    "task": "Design a class for a Song with properties for title, artist, and duration, and instantiate it.",
    "code": "```haskell\ndata Song = Song { title :: String, artist :: String, duration :: Int }\n\ncreateSong :: String -> String -> Int -> Song\ncreateSong t a d = Song { title = t, artist = a, duration = d }\n\nmySong :: Song\nmySong = createSong \"Imagine\" \"John Lennon\" 183\n```"
  },
  {
    "task": "Create a new instance of a class named Pet, initializing it with type, breed, and age.",
    "code": "```haskell\ndata Pet = Pet { petType :: String, breed :: String, age :: Int }\n\ncreatePet :: String -> String -> Int -> Pet\ncreatePet pType pBreed pAge = Pet { petType = pType, breed = pBreed, age = pAge }\n\nnewPet :: Pet\nnewPet = createPet \"Dog\" \"Labrador\" 3\n```"
  },
  {
    "task": "Instantiate an object of a class named House with attributes for address, number of bedrooms, and price.",
    "code": "```haskell\ndata House = House { address :: String, numberOfBedrooms :: Int, price :: Double }\n\ncreateHouse :: String -> Int -> Double -> House\ncreateHouse addr bedrooms priceValue = House { address = addr, numberOfBedrooms = bedrooms, price = priceValue }\n\nmain :: IO ()\nmain = do\n    let myHouse = createHouse \"123 Elm Street\" 3 250000.0\n    print myHouse\n```"
  },
  {
    "task": "Develop a class for a Camera, then create an object with resolution and zoom level attributes.",
    "code": "```haskell\ndata Camera = Camera { resolution :: String, zoomLevel :: Int }\n\ncreateCamera :: String -> Int -> Camera\ncreateCamera res zoom = Camera { resolution = res, zoomLevel = zoom }\n\nmyCamera :: Camera\nmyCamera = createCamera \"1920x1080\" 5\n```"
  },
  {
    "task": "Construct an object from a class named Bicycle with properties for brand, type, and gear count.",
    "code": "```haskell\ndata Bicycle = Bicycle { brand :: String, type_ :: String, gearCount :: Int }\n\ncreateBicycle :: String -> String -> Int -> Bicycle\ncreateBicycle b t g = Bicycle { brand = b, type_ = t, gearCount = g }\n\n-- Example of creating a Bicycle object\nmyBicycle :: Bicycle\nmyBicycle = createBicycle \"Trek\" \"Mountain\" 21\n```"
  },
  {
    "task": "Create a class for a book author with name and nationality, then instantiate it.",
    "code": "```haskell\ndata Author = Author { name :: String, nationality :: String }\n\ncreateAuthor :: String -> String -> Author\ncreateAuthor name nationality = Author name nationality\n\nmain :: IO ()\nmain = do\n    let author = createAuthor \"Gabriel Garcia Marquez\" \"Colombian\"\n    putStrLn $ \"Author: \" ++ name author ++ \", Nationality: \" ++ nationality author\n```"
  },
  {
    "task": "Define a class representing a video game with attributes for title, genre, and platform, and create an object.",
    "code": "```haskell\ndata VideoGame = VideoGame\n  { title :: String\n  , genre :: String\n  , platform :: String\n  }\n\ncreateVideoGame :: String -> String -> String -> VideoGame\ncreateVideoGame t g p = VideoGame { title = t, genre = g, platform = p }\n\nmyGame :: VideoGame\nmyGame = createVideoGame \"The Legend of Zelda\" \"Adventure\" \"Nintendo Switch\"\n```"
  },
  {
    "task": "Instantiate a class named Plane with properties for airline, model, and capacity.",
    "code": "```haskell\ndata Plane = Plane\n  { airline :: String\n  , model :: String\n  , capacity :: Int\n  }\n\ncreatePlane :: String -> String -> Int -> Plane\ncreatePlane airline model capacity = Plane airline model capacity\n```"
  },
  {
    "task": "Create a new object of a class called Lamp, initializing it with color and brightness level.",
    "code": "```haskell\ndata Lamp = Lamp { color :: String, brightness :: Int }\n\ncreateLamp :: String -> Int -> Lamp\ncreateLamp c b = Lamp { color = c, brightness = b }\n\n-- Example of creating a Lamp object\nmyLamp :: Lamp\nmyLamp = createLamp \"Blue\" 75\n```"
  },
  {
    "task": "Design a class for a TV show with properties for title, season, and episode count, then instantiate it.",
    "code": "```haskell\ndata TVShow = TVShow\n  { title       :: String\n  , season      :: Int\n  , episodeCount :: Int\n  }\n\ncreateTVShow :: String -> Int -> Int -> TVShow\ncreateTVShow t s e = TVShow t s e\n\nmyShow :: TVShow\nmyShow = createTVShow \"Example Show\" 1 10\n```"
  },
  {
    "task": "Instantiate an object of a class named Garden with attributes for size and number of plants.",
    "code": "```haskell\ndata Garden = Garden { size :: Int, numberOfPlants :: Int }\n\ncreateGarden :: Int -> Int -> Garden\ncreateGarden s n = Garden { size = s, numberOfPlants = n }\n\nmyGarden :: Garden\nmyGarden = createGarden 100 5\n```"
  },
  {
    "task": "Develop a class for a Train, then create an object with properties for type and number of carriages.",
    "code": "```haskell\ndata Train = Train {\n    trainType :: String,\n    numberOfCarriages :: Int\n}\n\ncreateTrain :: String -> Int -> Train\ncreateTrain tType nCarriages = Train tType nCarriages\n\nmyTrain :: Train\nmyTrain = createTrain \"Freight\" 10\n```"
  },
  {
    "task": "Define a class representing a planet with attributes for name, size, and distance from the sun, and create an object.",
    "code": "```haskell\ndata Planet = Planet { name :: String, size :: Double, distanceFromSun :: Double }\n\ncreatePlanet :: String -> Double -> Double -> Planet\ncreatePlanet n s d = Planet { name = n, size = s, distanceFromSun = d }\n\nearth :: Planet\nearth = createPlanet \"Earth\" 12742 149.6\n```"
  },
  {
    "task": "Create an instance of a class named Fridge with properties for brand and capacity.",
    "code": "```haskell\ndata Fridge = Fridge { brand :: String, capacity :: Int }\n\ncreateFridge :: String -> Int -> Fridge\ncreateFridge b c = Fridge { brand = b, capacity = c }\n\n-- Example of creating an instance\nmyFridge :: Fridge\nmyFridge = createFridge \"Samsung\" 300\n```"
  },
  {
    "task": "Design a class for a Restaurant with attributes for name, cuisine type, and location, then create an instance.",
    "code": "```haskell\ndata Restaurant = Restaurant\n  { name :: String\n  , cuisineType :: String\n  , location :: String\n  }\n\ncreateRestaurant :: String -> String -> String -> Restaurant\ncreateRestaurant n c l = Restaurant { name = n, cuisineType = c, location = l }\n\nmyRestaurant :: Restaurant\nmyRestaurant = createRestaurant \"Pasta Palace\" \"Italian\" \"Rome\"\n```"
  },
  {
    "task": "Create a new object from a class named Bookstore, initializing it with name and number of books.",
    "code": "```haskell\ndata Bookstore = Bookstore { name :: String, numberOfBooks :: Int }\n\ncreateBookstore :: String -> Int -> Bookstore\ncreateBookstore n numBooks = Bookstore { name = n, numberOfBooks = numBooks }\n\nmyBookstore :: Bookstore\nmyBookstore = createBookstore \"My Bookstore\" 100\n```"
  },
  {
    "task": "Instantiate a class named Library with properties for total books and number of members.",
    "code": "```haskell\ndata Library = Library\n  { totalBooks :: Int\n  , numberOfMembers :: Int\n  }\n\ncreateLibrary :: Int -> Int -> Library\ncreateLibrary books members = Library books members\n```"
  },
  {
    "task": "Write a class for a Beverage with properties for name, type, and volume, and instantiate it.",
    "code": "```haskell\ndata Beverage = Beverage\n  { name :: String\n  , btype :: String\n  , volume :: Double\n  } deriving (Show)\n\ncreateBeverage :: String -> String -> Double -> Beverage\ncreateBeverage n t v = Beverage { name = n, btype = t, volume = v }\n\nbeverageInstance :: Beverage\nbeverageInstance = createBeverage \"Cola\" \"Soda\" 330.0\n```"
  },
  {
    "task": "Create an object of a class named User with attributes for username, email, and password.",
    "code": "```haskell\ndata User = User\n  { username :: String\n  , email :: String\n  , password :: String\n  } deriving (Show)\n\ncreateUser :: String -> String -> String -> User\ncreateUser uname mail pwd = User uname mail pwd\n\n-- Example of creating a User object\nuser1 :: User\nuser1 = createUser \"username\" \"email@example.com\" \"password123\"\n```"
  },
  {
    "task": "Define a class for a Laptop with properties for brand, processor, and RAM, then instantiate it.",
    "code": "```haskell\ndata Laptop = Laptop {\n    brand :: String,\n    processor :: String,\n    ram :: Int\n} deriving (Show)\n\ncreateLaptop :: String -> String -> Int -> Laptop\ncreateLaptop b p r = Laptop { brand = b, processor = p, ram = r }\n\nmyLaptop :: Laptop\nmyLaptop = createLaptop \"Dell\" \"Intel i7\" 16\n```"
  },
  {
    "task": "Construct an object from a class named Mountain with attributes for name and elevation.",
    "code": "```haskell\ndata Mountain = Mountain { name :: String, elevation :: Int }\n\ncreateMountain :: String -> Int -> Mountain\ncreateMountain n e = Mountain { name = n, elevation = e }\n```"
  },
  {
    "task": "Create an instance of a class called Weather with properties for temperature, humidity, and condition.",
    "code": "```haskell\ndata Weather = Weather\n  { temperature :: Double\n  , humidity    :: Double\n  , condition   :: String\n  }\n\ncreateWeather :: Double -> Double -> String -> Weather\ncreateWeather temp hum cond = Weather { temperature = temp, humidity = hum, condition = cond }\n\n-- Example of creating an instance\nexampleWeather :: Weather\nexampleWeather = createWeather 25.0 60.0 \"Sunny\"\n```"
  },
  {
    "task": "Design a class for a Classroom with attributes for room number and capacity, then create an instance.",
    "code": "```haskell\ndata Classroom = Classroom { roomNumber :: Int, capacity :: Int }\n\ncreateClassroom :: Int -> Int -> Classroom\ncreateClassroom roomNum cap = Classroom { roomNumber = roomNum, capacity = cap }\n\nclassroomInstance :: Classroom\nclassroomInstance = createClassroom 101 30\n```"
  },
  {
    "task": "Instantiate an object of a class named Zoo with properties for name and number of animals.",
    "code": "```haskell\ndata Zoo = Zoo { name :: String, numberOfAnimals :: Int }\n\ncreateZoo :: String -> Int -> Zoo\ncreateZoo zooName zooNumberOfAnimals = Zoo { name = zooName, numberOfAnimals = zooNumberOfAnimals }\n\nmyZoo :: Zoo\nmyZoo = createZoo \"Central Zoo\" 150\n```"
  },
  {
    "task": "Develop a class for an Album with properties for name, artist, and release date, then instantiate it.",
    "code": "```haskell\ndata Album = Album\n  { name        :: String\n  , artist      :: String\n  , releaseDate :: String\n  }\n\ncreateAlbum :: String -> String -> String -> Album\ncreateAlbum n a r = Album { name = n, artist = a, releaseDate = r }\n\nmyAlbum :: Album\nmyAlbum = createAlbum \"Album Name\" \"Artist Name\" \"Release Date\"\n```"
  },
  {
    "task": "Create a new object from a class named Hotel, initializing it with name, location, and star rating.",
    "code": "```haskell\ndata Hotel = Hotel { name :: String, location :: String, starRating :: Int }\n\ncreateHotel :: String -> String -> Int -> Hotel\ncreateHotel name location starRating = Hotel name location starRating\n\nmyHotel :: Hotel\nmyHotel = createHotel \"Grand Plaza\" \"New York\" 5\n```"
  },
  {
    "task": "Write a class for a Recipe with properties for name, ingredients, and cooking time, and instantiate it.",
    "code": "```haskell\ndata Recipe = Recipe {\n    name :: String,\n    ingredients :: [String],\n    cookingTime :: Int\n}\n\ncreateRecipe :: String -> [String] -> Int -> Recipe\ncreateRecipe n i ct = Recipe { name = n, ingredients = i, cookingTime = ct }\n\nmain :: IO ()\nmain = do\n    let myRecipe = createRecipe \"Pasta\" [\"Noodles\", \"Tomato Sauce\", \"Cheese\"] 30\n    print myRecipe\n```"
  },
  {
    "task": "Define a class representing a Conference with attributes for name, date, and number of attendees, and create an object.",
    "code": "```haskell\ndata Conference = Conference { name :: String, date :: String, numberOfAttendees :: Int }\n\ncreateConference :: String -> String -> Int -> Conference\ncreateConference n d num = Conference n d num\n\nmain :: IO ()\nmain = do\n  let conference = createConference \"Tech Conference\" \"2023-10-15\" 150\n  print conference\n```"
  },
  {
    "task": "Create an instance of a class called Park with properties for name, location, and area.",
    "code": "```haskell\ndata Park = Park { name :: String, location :: String, area :: Double }\n\ncreatePark :: String -> String -> Double -> Park\ncreatePark name location area = Park { name = name, location = location, area = area }\n\n-- Example of creating a Park instance\ncentralPark :: Park\ncentralPark = createPark \"Central Park\" \"New York\" 843.0\n```"
  },
  {
    "task": "Design a class for a Bicycle with attributes for brand, type, and wheel size, then create an instance.",
    "code": "```haskell\ndata Bicycle = Bicycle\n  { brand    :: String\n  , bikeType :: String\n  , wheelSize :: Int\n  } deriving (Show)\n\ncreateBicycle :: String -> String -> Int -> Bicycle\ncreateBicycle b t w = Bicycle b t w\n\n-- Example of creating an instance\nmyBike :: Bicycle\nmyBike = createBicycle \"Trek\" \"Mountain\" 29\n```"
  },
  {
    "task": "Instantiate an object of a class named Festival with properties for name, location, and duration.",
    "code": "```haskell\ndata Festival = Festival\n  { name :: String\n  , location :: String\n  , duration :: Int\n  }\n\ncreateFestival :: String -> String -> Int -> Festival\ncreateFestival n l d = Festival { name = n, location = l, duration = d }\n\nexampleFestival :: Festival\nexampleFestival = createFestival \"Music Fest\" \"New York\" 3\n```"
  },
  {
    "task": "Develop a class for a Ship with properties for name, capacity, and type, then instantiate it.",
    "code": "```haskell\ndata Ship = Ship {\n    name :: String,\n    capacity :: Int,\n    shipType :: String\n}\n\ncreateShip :: String -> Int -> String -> Ship\ncreateShip n c t = Ship {name = n, capacity = c, shipType = t}\n\nmain :: IO ()\nmain = do\n    let myShip = createShip \"Titanic\" 3000 \"Passenger\"\n    putStrLn $ \"Ship Name: \" ++ name myShip\n    putStrLn $ \"Capacity: \" ++ show (capacity myShip)\n    putStrLn $ \"Type: \" ++ shipType myShip\n```"
  },
  {
    "task": "Create an object of a class named Currency with attributes for name, symbol, and exchange rate.",
    "code": "```haskell\ndata Currency = Currency { name :: String, symbol :: String, exchangeRate :: Double }\n\ncreateCurrency :: String -> String -> Double -> Currency\ncreateCurrency n s e = Currency { name = n, symbol = s, exchangeRate = e }\n```"
  },
  {
    "task": "Define a class for a Gadget with properties for name, brand, and functionality, then instantiate it.",
    "code": "```haskell\ndata Gadget = Gadget\n  { name :: String\n  , brand :: String\n  , functionality :: String\n  } deriving (Show)\n\ncreateGadget :: String -> String -> String -> Gadget\ncreateGadget n b f = Gadget { name = n, brand = b, functionality = f }\n\nmyGadget :: Gadget\nmyGadget = createGadget \"Smartphone\" \"TechBrand\" \"Communication\"\n```"
  },
  {
    "task": "Construct an object from a class named Bridge with attributes for name, length, and location.",
    "code": "```haskell\ndata Bridge = Bridge { name :: String, length :: Int, location :: String }\n\ncreateBridge :: String -> Int -> String -> Bridge\ncreateBridge n l loc = Bridge { name = n, length = l, location = loc }\n\n-- Example usage\nmain :: IO ()\nmain = do\n    let bridge = createBridge \"Golden Gate\" 2737 \"San Francisco\"\n    print bridge\n```"
  },
  {
    "task": "Create an instance of a class called Forest with properties for name, area, and tree species.",
    "code": "```haskell\ndata Forest = Forest { name :: String, area :: Double, treeSpecies :: [String] }\n\ncreateForest :: String -> Double -> [String] -> Forest\ncreateForest n a ts = Forest { name = n, area = a, treeSpecies = ts }\n\n-- Example of object creation\nexampleForest :: Forest\nexampleForest = createForest \"Amazon\" 5500.0 [\"Mahogany\", \"Cedar\", \"Oak\"]\n```"
  },
  {
    "task": "Design a class for a Sculpture with attributes for title, artist, and material, then create an instance.",
    "code": "```haskell\ndata Sculpture = Sculpture { title :: String, artist :: String, material :: String }\n\ncreateSculpture :: String -> String -> String -> Sculpture\ncreateSculpture t a m = Sculpture { title = t, artist = a, material = m }\n\nmySculpture :: Sculpture\nmySculpture = createSculpture \"The Thinker\" \"Auguste Rodin\" \"Bronze\"\n```"
  },
  {
    "task": "Instantiate an object of a class named Aquarium with properties for name and number of tanks.",
    "code": "```haskell\ndata Aquarium = Aquarium { name :: String, numberOfTanks :: Int }\n\ncreateAquarium :: String -> Int -> Aquarium\ncreateAquarium n t = Aquarium { name = n, numberOfTanks = t }\n\n-- Example usage:\n-- let myAquarium = createAquarium \"Sea World\" 5\n```"
  },
  {
    "task": "Develop a class for a Play with properties for title, playwright, and genre, then instantiate it.",
    "code": "```haskell\ndata Play = Play\n  { title :: String\n  , playwright :: String\n  , genre :: String\n  }\n\ncreatePlay :: String -> String -> String -> Play\ncreatePlay t p g = Play { title = t, playwright = p, genre = g }\n\nmyPlay :: Play\nmyPlay = createPlay \"Hamlet\" \"William Shakespeare\" \"Tragedy\"\n```"
  },
  {
    "task": "Create a new object from a class named Telescope, initializing it with type and focal length.",
    "code": "```haskell\ndata Telescope = Telescope { telescopeType :: String, focalLength :: Double }\n\ncreateTelescope :: String -> Double -> Telescope\ncreateTelescope tType fLength = Telescope tType fLength\n\n-- Example usage:\nnewTelescope = createTelescope \"Refractor\" 500.0\n```"
  },
  {
    "task": "Write a class for a Monument with properties for name, location, and year built, and instantiate it.",
    "code": "```haskell\ndata Monument = Monument\n  { name :: String\n  , location :: String\n  , yearBuilt :: Int\n  } deriving (Show)\n\ncreateMonument :: String -> String -> Int -> Monument\ncreateMonument n l y = Monument n l y\n\nexampleMonument :: Monument\nexampleMonument = createMonument \"Eiffel Tower\" \"Paris\" 1889\n```"
  },
  {
    "task": "Define a class representing a Star with attributes for name, size, and distance from Earth, and create an object.",
    "code": "```haskell\ndata Star = Star { name :: String, size :: Double, distanceFromEarth :: Double }\n\ncreateStar :: String -> Double -> Double -> Star\ncreateStar n s d = Star { name = n, size = s, distanceFromEarth = d }\n\nstarObject :: Star\nstarObject = createStar \"Sun\" 1.0 0.0\n```"
  },
  {
    "task": "Create an instance of a class called Festival with properties for name, location, and number of events.",
    "code": "```haskell\ndata Festival = Festival\n  { name :: String\n  , location :: String\n  , numberOfEvents :: Int\n  }\n\ncreateFestival :: String -> String -> Int -> Festival\ncreateFestival festivalName festivalLocation festivalEvents = \n  Festival { name = festivalName, location = festivalLocation, numberOfEvents = festivalEvents }\n\n-- Example instance creation\nmyFestival :: Festival\nmyFestival = createFestival \"Music Fest\" \"New York\" 10\n```"
  },
  {
    "task": "Design a class for a Clock with attributes for brand, type, and display, then create an instance.",
    "code": "```haskell\ndata Clock = Clock\n  { brand :: String\n  , clockType :: String\n  , display :: String\n  } deriving (Show)\n\ncreateClock :: String -> String -> String -> Clock\ncreateClock brand type_ display = Clock brand type_ display\n\nmyClock :: Clock\nmyClock = createClock \"Seiko\" \"Analog\" \"Digital\"\n```"
  },
  {
    "task": "Instantiate an object of a class named Stadium with properties for name, capacity, and location.",
    "code": "```haskell\ndata Stadium = Stadium { name :: String, capacity :: Int, location :: String }\n\ncreateStadium :: String -> Int -> String -> Stadium\ncreateStadium n c l = Stadium { name = n, capacity = c, location = l }\n\n-- Example of creating a Stadium object\nmyStadium :: Stadium\nmyStadium = createStadium \"National Stadium\" 50000 \"City Center\"\n```"
  },
  {
    "task": "Develop a class for a Potion with properties for name, effect, and duration, then instantiate it.",
    "code": "```haskell\ndata Potion = Potion {\n    name :: String,\n    effect :: String,\n    duration :: Int\n}\n\ncreatePotion :: String -> String -> Int -> Potion\ncreatePotion n e d = Potion { name = n, effect = e, duration = d }\n\nmain :: IO ()\nmain = do\n    let potion = createPotion \"Healing Potion\" \"Restores health\" 5\n    print potion\n```"
  },
  {
    "task": "Create an object of a class named Planet with attributes for name, mass, and orbital period.",
    "code": "```haskell\ndata Planet = Planet { name :: String, mass :: Double, orbitalPeriod :: Double }\n\ncreatePlanet :: String -> Double -> Double -> Planet\ncreatePlanet n m o = Planet { name = n, mass = m, orbitalPeriod = o }\n```"
  },
  {
    "task": "Define a class for a Lighthouse with properties for name, height, and light range, then instantiate it.",
    "code": "```haskell\ndata Lighthouse = Lighthouse {\n    name :: String,\n    height :: Int,\n    lightRange :: Int\n}\n\ncreateLighthouse :: String -> Int -> Int -> Lighthouse\ncreateLighthouse n h lr = Lighthouse { name = n, height = h, lightRange = lr }\n\nmyLighthouse :: Lighthouse\nmyLighthouse = createLighthouse \"Beacon Hill\" 30 10\n```"
  },
  {
    "task": "Construct an object from a class named Volcano with attributes for name, height, and eruption history.",
    "code": "```haskell\ndata Volcano = Volcano { name :: String, height :: Int, eruptionHistory :: [String] }\n\ncreateVolcano :: String -> Int -> [String] -> Volcano\ncreateVolcano vName vHeight vEruptionHistory = Volcano vName vHeight vEruptionHistory\n```"
  },
  {
    "task": "Create an instance of a class called Sculpture with properties for title, artist, and year created.",
    "code": "```haskell\ndata Sculpture = Sculpture\n  { title :: String\n  , artist :: String\n  , yearCreated :: Int\n  }\n\ncreateSculpture :: String -> String -> Int -> Sculpture\ncreateSculpture t a y = Sculpture { title = t, artist = a, yearCreated = y }\n```"
  },
  {
    "task": "Design a class for a Ship with attributes for name, type, and displacement, then create an instance.",
    "code": "```haskell\ndata Ship = Ship {\n    name :: String,\n    shipType :: String,\n    displacement :: Double\n}\n\ncreateShip :: String -> String -> Double -> Ship\ncreateShip n t d = Ship {\n    name = n,\n    shipType = t,\n    displacement = d\n}\n\nmyShip :: Ship\nmyShip = createShip \"USS Enterprise\" \"Aircraft Carrier\" 93000.0\n```"
  },
  {
    "task": "Instantiate an object of a class named Opera with properties for title, composer, and act count.",
    "code": "```haskell\ndata Opera = Opera { title :: String, composer :: String, actCount :: Int }\n\ncreateOpera :: String -> String -> Int -> Opera\ncreateOpera t c a = Opera { title = t, composer = c, actCount = a }\n\n-- Example Usage\nmyOpera :: Opera\nmyOpera = createOpera \"The Magic Flute\" \"Mozart\" 2\n```"
  },
  {
    "task": "Develop a class for a Waterfall with properties for name, height, and flow rate, then instantiate it.",
    "code": "```haskell\ndata Waterfall = Waterfall\n  { name :: String\n  , height :: Double\n  , flowRate :: Double\n  }\n\ncreateWaterfall :: String -> Double -> Double -> Waterfall\ncreateWaterfall n h f = Waterfall { name = n, height = h, flowRate = f }\n\nwaterfallInstance :: Waterfall\nwaterfallInstance = createWaterfall \"Angel Falls\" 979.0 300.0\n```"
  },
  {
    "task": "Create a new object from a class named Castle, initializing it with name, location, and year built.",
    "code": "```haskell\nmodule Main where\n\ndata Castle = Castle { name :: String, location :: String, yearBuilt :: Int } deriving Show\n\ncreateCastle :: String -> String -> Int -> Castle\ncreateCastle n l y = Castle { name = n, location = l, yearBuilt = y }\n\nmain :: IO ()\nmain = do\n    let myCastle = createCastle \"Winterfell\" \"The North\" 8000\n    print myCastle\n```"
  },
  {
    "task": "Write a class for a Cat with properties for name, breed, and color, and instantiate it.",
    "code": "```haskell\ndata Cat = Cat {\n    name :: String,\n    breed :: String,\n    color :: String\n}\n\ncreateCat :: String -> String -> String -> Cat\ncreateCat n b c = Cat { name = n, breed = b, color = c }\n\nmyCat :: Cat\nmyCat = createCat \"Whiskers\" \"Siamese\" \"Brown\"\n```"
  },
  {
    "task": "Define a class representing a Spaceship with attributes for name, speed, and crew capacity, and create an object.",
    "code": "```haskell\ndata Spaceship = Spaceship { name :: String, speed :: Double, crewCapacity :: Int }\n\ncreateSpaceship :: String -> Double -> Int -> Spaceship\ncreateSpaceship n s c = Spaceship { name = n, speed = s, crewCapacity = c }\n\nmySpaceship :: Spaceship\nmySpaceship = createSpaceship \"Galaxy Cruiser\" 25000.0 100\n```"
  },
  {
    "task": "Create an instance of a class called Robot with properties for name, model, and function.",
    "code": "```haskell\ndata Robot = Robot\n    { name    :: String\n    , model   :: String\n    , function :: String\n    }\n\ncreateRobot :: String -> String -> String -> Robot\ncreateRobot n m f = Robot { name = n, model = m, function = f }\n\nrobotInstance :: Robot\nrobotInstance = createRobot \"Robo1\" \"ModelX\" \"Assembling\"\n```"
  },
  {
    "task": "Design a class for a Computer Program with attributes for name, language, and lines of code, then create an instance.",
    "code": "```haskell\ndata ComputerProgram = ComputerProgram\n  { name :: String\n  , language :: String\n  , linesOfCode :: Int\n  }\n\ncreateProgram :: ComputerProgram\ncreateProgram = ComputerProgram\n  { name = \"Sample Program\"\n  , language = \"Haskell\"\n  , linesOfCode = 1000\n  }\n```"
  },
  {
    "task": "Instantiate an object of a class named Mountain with properties for name, range, and prominence.",
    "code": "```haskell\ndata Mountain = Mountain { name :: String, range :: String, prominence :: Int }\n\ncreateMountain :: String -> String -> Int -> Mountain\ncreateMountain n r p = Mountain { name = n, range = r, prominence = p }\n\nexampleMountain :: Mountain\nexampleMountain = createMountain \"Everest\" \"Himalayas\" 8848\n```"
  },
  {
    "task": "Develop a class for a Painting with properties for title, artist, and dimensions, then instantiate it.",
    "code": "```haskell\ndata Painting = Painting {\n  title :: String,\n  artist :: String,\n  dimensions :: (Int, Int)\n} deriving (Show)\n\ncreatePainting :: String -> String -> (Int, Int) -> Painting\ncreatePainting t a d = Painting {\n  title = t,\n  artist = a,\n  dimensions = d\n}\n\nmain :: IO ()\nmain = do\n  let myPainting = createPainting \"Starry Night\" \"Vincent van Gogh\" (73, 92)\n  print myPainting\n```"
  },
  {
    "task": "Create an object of a class named Symphony with attributes for title, composer, and movement count.",
    "code": "```haskell\ndata Symphony = Symphony\n  { title :: String\n  , composer :: String\n  , movementCount :: Int\n  }\n\ncreateSymphony :: String -> String -> Int -> Symphony\ncreateSymphony title composer movementCount = Symphony title composer movementCount\n```"
  },
  {
    "task": "Define a class for a Dinosaur with properties for name, period, and diet, then instantiate it.",
    "code": "```haskell\ndata Dinosaur = Dinosaur { name :: String, period :: String, diet :: String }\n\ncreateDinosaur :: String -> String -> String -> Dinosaur\ncreateDinosaur n p d = Dinosaur { name = n, period = p, diet = d }\n\nmain :: IO ()\nmain = do\n    let dino = createDinosaur \"Tyrannosaurus\" \"Cretaceous\" \"Carnivore\"\n    print dino\n```"
  },
  {
    "task": "Construct an object from a class named River with attributes for name, length, and basin size.",
    "code": "```haskell\ndata River = River\n  { name :: String\n  , length :: Double\n  , basinSize :: Double\n  }\n\ncreateRiver :: String -> Double -> Double -> River\ncreateRiver riverName riverLength riverBasinSize = River\n  { name = riverName\n  , length = riverLength\n  , basinSize = riverBasinSize\n  }\n\n-- Example of creating a River object\nexampleRiver :: River\nexampleRiver = createRiver \"Amazon\" 6400 7050000\n```"
  },
  {
    "task": "Create an instance of a class called Instrument with properties for name, type, and material.",
    "code": "```haskell\ndata Instrument = Instrument\n  { name     :: String\n  , instType :: String\n  , material :: String\n  } deriving (Show)\n\ncreateInstrument :: String -> String -> String -> Instrument\ncreateInstrument n t m = Instrument { name = n, instType = t, material = m }\n\n-- Example of creating an instance\nmyInstrument :: Instrument\nmyInstrument = createInstrument \"Guitar\" \"String\" \"Wood\"\n```"
  },
  {
    "task": "Design a class for a Planetarium with attributes for name, location, and dome size, then create an instance.",
    "code": "```haskell\ndata Planetarium = Planetarium\n  { name :: String\n  , location :: String\n  , domeSize :: Double\n  }\n\ncreatePlanetarium :: String -> String -> Double -> Planetarium\ncreatePlanetarium n l d = Planetarium n l d\n\nplanetariumInstance :: Planetarium\nplanetariumInstance = createPlanetarium \"Cosmic Center\" \"Greenwich\" 25.5\n```"
  },
  {
    "task": "Instantiate an object of a class named Island with properties for name, area, and population.",
    "code": "```haskell\ndata Island = Island\n    { name :: String\n    , area :: Double\n    , population :: Int\n    }\n\ncreateIsland :: String -> Double -> Int -> Island\ncreateIsland n a p = Island { name = n, area = a, population = p }\n\nmyIsland :: Island\nmyIsland = createIsland \"Paradise\" 123.4 1000\n```"
  },
  {
    "task": "Develop a class for a Space Station with properties for name, crew size, and modules, then instantiate it.",
    "code": "```haskell\ndata SpaceStation = SpaceStation\n  { name :: String\n  , crewSize :: Int\n  , modules :: [String]\n  }\n\ncreateSpaceStation :: String -> Int -> [String] -> SpaceStation\ncreateSpaceStation n cs m = SpaceStation { name = n, crewSize = cs, modules = m }\n\nspaceStationInstance :: SpaceStation\nspaceStationInstance = createSpaceStation \"International Space Station\" 6 [\"Habitat\", \"Laboratory\", \"Solar Panels\"]\n```"
  },
  {
    "task": "Create a new object from a class named Dinosaur, initializing it with species and period.",
    "code": "```haskell\ndata Dinosaur = Dinosaur { species :: String, period :: String }\n\ncreateDinosaur :: String -> String -> Dinosaur\ncreateDinosaur sp pr = Dinosaur { species = sp, period = pr }\n\n-- Example of creating a new Dinosaur object\nnewDinosaur :: Dinosaur\nnewDinosaur = createDinosaur \"Tyrannosaurus\" \"Cretaceous\"\n```"
  },
  {
    "task": "Write a class for a Tree with properties for species, height, and age, and instantiate it.",
    "code": "```haskell\ndata Tree = Tree { species :: String, height :: Double, age :: Int }\n\ncreateTree :: String -> Double -> Int -> Tree\ncreateTree s h a = Tree { species = s, height = h, age = a }\n\n-- Example instantiation\nmyTree :: Tree\nmyTree = createTree \"Oak\" 5.5 10\n```"
  },
  {
    "task": "Define a class representing a Firework with attributes for name, color, and duration, and create an object.",
    "code": "```haskell\ndata Firework = Firework { name :: String, color :: String, duration :: Int }\n\ncreateFirework :: String -> String -> Int -> Firework\ncreateFirework fireworkName fireworkColor fireworkDuration = Firework fireworkName fireworkColor fireworkDuration\n\nmyFirework :: Firework\nmyFirework = createFirework \"Sparkler\" \"Red\" 10\n```"
  },
  {
    "task": "Create an instance of a class called ComicBook with properties for title, author, and issue number.",
    "code": "```haskell\ndata ComicBook = ComicBook\n  { title :: String\n  , author :: String\n  , issueNumber :: Int\n  } deriving (Show)\n\ncreateComicBook :: String -> String -> Int -> ComicBook\ncreateComicBook t a i = ComicBook { title = t, author = a, issueNumber = i }\n\n-- Example of creating an instance\nmyComicBook :: ComicBook\nmyComicBook = createComicBook \"The Adventures\" \"John Doe\" 1\n```"
  },
  {
    "task": "Design a class for a Metropolis with attributes for name, population, and GDP, then create an instance.",
    "code": "```haskell\ndata Metropolis = Metropolis\n  { name :: String\n  , population :: Int\n  , gdp :: Double\n  }\n\ncreateMetropolis :: String -> Int -> Double -> Metropolis\ncreateMetropolis name population gdp = Metropolis name population gdp\n\nmetropolisInstance :: Metropolis\nmetropolisInstance = createMetropolis \"Metropolis City\" 1000000 500000.0\n```"
  },
  {
    "task": "Instantiate an object of a class named Dragon with properties for name, element, and age.",
    "code": "```haskell\ndata Dragon = Dragon { name :: String, element :: String, age :: Int }\n\ncreateDragon :: String -> String -> Int -> Dragon\ncreateDragon dragonName dragonElement dragonAge = Dragon { name = dragonName, element = dragonElement, age = dragonAge }\n\n-- Example instantiation\nmyDragon :: Dragon\nmyDragon = createDragon \"Smaug\" \"Fire\" 200\n```"
  },
  {
    "task": "Develop a class for a Novel with properties for title, author, and genre, then instantiate it.",
    "code": "```haskell\ndata Novel = Novel\n  { title :: String\n  , author :: String\n  , genre :: String\n  }\n\ncreateNovel :: String -> String -> String -> Novel\ncreateNovel t a g = Novel { title = t, author = a, genre = g }\n\nmyNovel :: Novel\nmyNovel = createNovel \"1984\" \"George Orwell\" \"Dystopian\"\n```"
  },
  {
    "task": "Create an object of a class named Satellite with attributes for name, orbit, and mission.",
    "code": "```haskell\ndata Satellite = Satellite\n    { name :: String\n    , orbit :: String\n    , mission :: String\n    } deriving (Show)\n\ncreateSatellite :: String -> String -> String -> Satellite\ncreateSatellite satelliteName satelliteOrbit satelliteMission =\n    Satellite { name = satelliteName, orbit = satelliteOrbit, mission = satelliteMission }\n\n-- Example of creating a Satellite object\nsatelliteExample :: Satellite\nsatelliteExample = createSatellite \"Hubble\" \"Low Earth Orbit\" \"Astronomy\"\n```"
  },
  {
    "task": "Define a class for a Castle with properties for name, location, and architectural style, then instantiate it.",
    "code": "```haskell\ndata Castle = Castle {\n    name :: String,\n    location :: String,\n    architecturalStyle :: String\n}\n\ncreateCastle :: String -> String -> String -> Castle\ncreateCastle n l a = Castle { name = n, location = l, architecturalStyle = a }\n\nmyCastle :: Castle\nmyCastle = createCastle \"Winterfell\" \"The North\" \"Gothic\"\n```"
  },
  {
    "task": "Construct an object from a class named Jungle with attributes for name, area, and biodiversity.",
    "code": "```haskell\ndata Jungle = Jungle {\n    name :: String,\n    area :: Double,\n    biodiversity :: Int\n}\n\ncreateJungle :: String -> Double -> Int -> Jungle\ncreateJungle jungleName jungleArea jungleBiodiversity = Jungle {\n    name = jungleName,\n    area = jungleArea,\n    biodiversity = jungleBiodiversity\n}\n\n-- Example of creating a Jungle object\nlet myJungle = createJungle \"Amazon\" 5500000 39000\n```"
  },
  {
    "task": "Create an instance of a class called Dinosaur with properties for species, size, and diet.",
    "code": "```haskell\ndata Dinosaur = Dinosaur\n  { species :: String\n  , size :: String\n  , diet :: String\n  } deriving (Show)\n\ncreateDinosaur :: String -> String -> String -> Dinosaur\ncreateDinosaur sp sz di = Dinosaur sp sz di\n\n-- Example instance\ndinoInstance = createDinosaur \"Tyrannosaurus\" \"Large\" \"Carnivore\"\n```"
  },
  {
    "task": "Design a class for a Superhero with attributes for name, powers, and alias, then create an instance.",
    "code": "```haskell\ndata Superhero = Superhero {\n    name :: String,\n    powers :: [String],\n    alias :: String\n}\n\ncreateSuperhero :: String -> [String] -> String -> Superhero\ncreateSuperhero n p a = Superhero { name = n, powers = p, alias = a }\n\nsuperman :: Superhero\nsuperman = createSuperhero \"Clark Kent\" [\"Super strength\", \"Flight\", \"X-ray vision\"] \"Superman\"\n```"
  }
]