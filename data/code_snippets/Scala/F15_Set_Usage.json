[
  {
    "task": "Create a set to store unique usernames and demonstrate adding new ones.",
    "code": "```scala\nobject UsernameSetDemo extends App {\n  var usernames: Set[String] = Set()\n\n  // Add new usernames\n  usernames += \"user1\"\n  usernames += \"user2\"\n  usernames += \"user3\"\n\n  // Print the set of usernames\n  println(usernames)\n}\n```"
  },
  {
    "task": "Write a function that returns the union of two sets of integers.",
    "code": "```scala\ndef unionOfSets(set1: Set[Int], set2: Set[Int]): Set[Int] = {\n  set1.union(set2)\n}\n```"
  },
  {
    "task": "Given two sets of strings, find their intersection.",
    "code": "```scala\nval set1 = Set(\"apple\", \"banana\", \"cherry\")\nval set2 = Set(\"banana\", \"cherry\", \"date\")\n\nval intersection = set1.intersect(set2)\n\nprintln(intersection)\n```"
  },
  {
    "task": "Implement a set to track visited web pages and check if a page has been visited.",
    "code": "```scala\nobject VisitedPagesTracker {\n  private var visitedPages: Set[String] = Set()\n\n  def visitPage(url: String): Unit = {\n    visitedPages += url\n  }\n\n  def hasVisited(url: String): Boolean = {\n    visitedPages.contains(url)\n  }\n}\n\n// Usage\nVisitedPagesTracker.visitPage(\"http://example.com\")\nprintln(VisitedPagesTracker.hasVisited(\"http://example.com\"))  // Output: true\nprintln(VisitedPagesTracker.hasVisited(\"http://another.com\"))  // Output: false\n```"
  },
  {
    "task": "Create a set from a list of numbers and remove duplicates.",
    "code": "```scala\nval numbers = List(1, 2, 2, 3, 4, 4, 5)\nval uniqueNumbers = numbers.toSet\n```"
  },
  {
    "task": "Check if a set is a subset of another set.",
    "code": "```scala\nobject SetSubsetExample {\n  def main(args: Array[String]): Unit = {\n    val setA = Set(1, 2, 3)\n    val setB = Set(1, 2, 3, 4, 5)\n\n    val isSubset = setA.subsetOf(setB)\n    println(s\"Set A is a subset of Set B: $isSubset\")\n  }\n}\n```"
  },
  {
    "task": "Demonstrate adding and removing elements from a set of book titles.",
    "code": "```scala\nobject BookSetExample extends App {\n  var bookSet: Set[String] = Set(\"The Hobbit\", \"1984\", \"Brave New World\")\n\n  // Add a book to the set\n  bookSet += \"To Kill a Mockingbird\"\n\n  // Remove a book from the set\n  bookSet -= \"1984\"\n\n  // Print the final set of books\n  println(bookSet)\n}\n```"
  },
  {
    "task": "Create a set and show how to clear all its elements.",
    "code": "```scala\nimport scala.collection.mutable\n\nval mySet = mutable.Set(1, 2, 3, 4, 5)\nmySet.clear()\n```"
  },
  {
    "task": "Write a program to find the difference between two sets of employee IDs.",
    "code": "```scala\nobject EmployeeSetDifference {\n  def main(args: Array[String]): Unit = {\n    val set1: Set[Int] = Set(101, 102, 103, 104)\n    val set2: Set[Int] = Set(103, 104, 105, 106)\n\n    val difference: Set[Int] = set1.diff(set2)\n\n    println(\"Difference between set1 and set2: \" + difference)\n  }\n}\n```"
  },
  {
    "task": "Implement a set to store unique email addresses and check membership.",
    "code": "```scala\nobject EmailSet {\n  def main(args: Array[String]): Unit = {\n    var emailSet: Set[String] = Set()\n\n    def addEmail(email: String): Unit = {\n      emailSet += email\n    }\n\n    def checkEmail(email: String): Boolean = {\n      emailSet.contains(email)\n    }\n\n    // Example usage\n    addEmail(\"example@example.com\")\n    addEmail(\"test@test.com\")\n\n    println(checkEmail(\"example@example.com\")) // true\n    println(checkEmail(\"notadded@example.com\")) // false\n  }\n}\n```"
  },
  {
    "task": "Use a set to determine if two lists have any common elements.",
    "code": "```scala\ndef haveCommonElements(list1: List[Int], list2: List[Int]): Boolean = {\n  val set1 = list1.toSet\n  list2.exists(set1.contains)\n}\n\n// Example usage\nval list1 = List(1, 2, 3, 4)\nval list2 = List(4, 5, 6)\nval result = haveCommonElements(list1, list2)\nprintln(result)  // Output: true\n```"
  },
  {
    "task": "Create a set to represent a group of students and update it with new entries.",
    "code": "```scala\nobject StudentSetExample extends App {\n  var students = Set(\"Alice\", \"Bob\", \"Charlie\")\n  students += \"David\"\n  students += \"Eve\"\n\n  println(students)\n}\n```"
  },
  {
    "task": "Write a function to find symmetric difference between two sets of colors.",
    "code": "```scala\ndef symmetricDifference(set1: Set[String], set2: Set[String]): Set[String] = {\n  (set1 diff set2) union (set2 diff set1)\n}\n\n// Example usage\nval colors1 = Set(\"red\", \"green\", \"blue\")\nval colors2 = Set(\"yellow\", \"green\", \"blue\")\nval result = symmetricDifference(colors1, colors2)\nprintln(result) // Output: Set(red, yellow)\n```"
  },
  {
    "task": "Implement a set to store unique product codes and demonstrate iteration over it.",
    "code": "```scala\nobject ProductCodeSetDemo extends App {\n  val productCodes: Set[String] = Set(\"P001\", \"P002\", \"P003\")\n\n  for (code <- productCodes) {\n    println(code)\n  }\n}\n```"
  },
  {
    "task": "Create a set and demonstrate the use of the `discard` method.",
    "code": "```scala\nobject SetExample extends App {\n  var mySet = Set(1, 2, 3, 4, 5)\n  mySet -= 3\n  println(mySet)\n}\n```"
  },
  {
    "task": "Given a list of numbers, create a set and check if a specific number is present.",
    "code": "```scala\nval numbers = List(1, 2, 3, 4, 5)\nval numbersSet = numbers.toSet\nval specificNumber = 3\nval isPresent = numbersSet.contains(specificNumber)\n```"
  },
  {
    "task": "Use a set to find all unique words in a sentence.",
    "code": "```scala\ndef uniqueWords(sentence: String): Set[String] = {\n  sentence.split(\"\\\\s+\").map(_.toLowerCase).toSet\n}\n\n// Example usage\nval sentence = \"This is a test. This test is only a test.\"\nval unique = uniqueWords(sentence)\nprintln(unique)\n```"
  },
  {
    "task": "Create a set from a sequence of characters and demonstrate set operations.",
    "code": "```scala\nobject SetUsageExample extends App {\n  val charSequence = Seq('a', 'b', 'c', 'a', 'd', 'b')\n  val charSet = charSequence.toSet\n\n  // Demonstrating set operations\n  val anotherSet = Set('b', 'c', 'e')\n\n  // Union\n  val unionSet = charSet union anotherSet\n  println(s\"Union: $unionSet\")\n\n  // Intersection\n  val intersectionSet = charSet intersect anotherSet\n  println(s\"Intersection: $intersectionSet\")\n\n  // Difference\n  val differenceSet = charSet diff anotherSet\n  println(s\"Difference: $differenceSet\")\n}\n```"
  },
  {
    "task": "Write a function to merge two sets and return the result.",
    "code": "```scala\ndef mergeSets[A](set1: Set[A], set2: Set[A]): Set[A] = {\n  set1 union set2\n}\n```"
  },
  {
    "task": "Implement a set to hold unique IP addresses and demonstrate basic operations.",
    "code": "```scala\nobject IPAddressSetDemo extends App {\n  // Initialize a set to hold unique IP addresses\n  var ipAddressSet: Set[String] = Set()\n\n  // Add IP addresses to the set\n  ipAddressSet += \"192.168.1.1\"\n  ipAddressSet += \"10.0.0.1\"\n  ipAddressSet += \"172.16.0.1\"\n\n  // Attempt to add a duplicate IP address\n  ipAddressSet += \"192.168.1.1\"\n\n  // Display the IP addresses in the set\n  println(\"Unique IP Addresses:\")\n  ipAddressSet.foreach(println)\n\n  // Check if a specific IP address is in the set\n  val ipToCheck = \"10.0.0.1\"\n  println(s\"Is $ipToCheck in the set? \" + ipAddressSet.contains(ipToCheck))\n\n  // Remove an IP address from the set\n  ipAddressSet -= \"172.16.0.1\"\n\n  // Display the IP addresses after removal\n  println(\"IP Addresses after removal:\")\n  ipAddressSet.foreach(println)\n}\n```"
  },
  {
    "task": "Create a set and demonstrate how to find the size of the set.",
    "code": "```scala\nval mySet = Set(1, 2, 3, 4, 5)\nval setSize = mySet.size\nprintln(setSize)\n```"
  },
  {
    "task": "Write a program to check if two sets of dates are disjoint.",
    "code": "```scala\nobject DisjointSets {\n  def main(args: Array[String]): Unit = {\n    val set1 = Set(\"2023-10-01\", \"2023-10-02\", \"2023-10-03\")\n    val set2 = Set(\"2023-10-04\", \"2023-10-05\", \"2023-10-06\")\n    \n    val isDisjoint = set1.intersect(set2).isEmpty\n    println(s\"Sets are disjoint: $isDisjoint\")\n  }\n}\n```"
  },
  {
    "task": "Create a set to manage a collection of tags and demonstrate addition and removal.",
    "code": "```scala\nobject TagManager {\n  def main(args: Array[String]): Unit = {\n    var tags: Set[String] = Set(\"Scala\", \"Programming\", \"Code\")\n\n    // Adding tags\n    tags += \"Development\"\n    tags += \"Software\"\n\n    // Removing a tag\n    tags -= \"Code\"\n\n    println(tags)\n  }\n}\n```"
  },
  {
    "task": "Implement a set to track unique inventory items in a store.",
    "code": "```scala\nobject Inventory {\n  def main(args: Array[String]): Unit = {\n    var inventorySet: Set[String] = Set()\n\n    def addItem(item: String): Unit = {\n      inventorySet += item\n    }\n\n    def removeItem(item: String): Unit = {\n      inventorySet -= item\n    }\n\n    def hasItem(item: String): Boolean = {\n      inventorySet.contains(item)\n    }\n\n    def listItems(): Set[String] = {\n      inventorySet\n    }\n\n    // Example usage\n    addItem(\"Apple\")\n    addItem(\"Banana\")\n    addItem(\"Apple\") // Duplicate item, will not be added again\n    println(listItems()) // Output: Set(Apple, Banana)\n    println(hasItem(\"Apple\")) // Output: true\n    removeItem(\"Apple\")\n    println(hasItem(\"Apple\")) // Output: false\n    println(listItems()) // Output: Set(Banana)\n  }\n}\n```"
  },
  {
    "task": "Create a set of numbers and demonstrate conversion to a list.",
    "code": "```scala\nval numberSet: Set[Int] = Set(1, 2, 3, 4, 5)\nval numberList: List[Int] = numberSet.toList\n```"
  },
  {
    "task": "Write a function that returns all elements present in either of two sets but not both.",
    "code": "```scala\ndef symmetricDifference[A](set1: Set[A], set2: Set[A]): Set[A] = {\n  (set1.diff(set2)).union(set2.diff(set1))\n}\n```"
  },
  {
    "task": "Use a set to manage a collection of unique transaction IDs.",
    "code": "```scala\nobject TransactionManager {\n  private var transactionIds: Set[String] = Set()\n\n  def addTransactionId(id: String): Unit = {\n    transactionIds += id\n  }\n\n  def removeTransactionId(id: String): Unit = {\n    transactionIds -= id\n  }\n\n  def hasTransactionId(id: String): Boolean = {\n    transactionIds.contains(id)\n  }\n\n  def getAllTransactionIds: Set[String] = {\n    transactionIds\n  }\n}\n```"
  },
  {
    "task": "Create a set of integers and demonstrate the `pop` operation.",
    "code": "```scala\nimport scala.collection.mutable\n\nval intSet: mutable.Set[Int] = mutable.Set(1, 2, 3, 4, 5)\n\n// Demonstrating the `remove` operation as Scala sets do not have `pop`\nif (intSet.nonEmpty) {\n  val element = intSet.head\n  intSet.remove(element)\n  println(s\"Removed element: $element\")\n}\n\nprintln(s\"Set after removal: $intSet\")\n```"
  },
  {
    "task": "Write a program to find the maximum element in a set of floating-point numbers.",
    "code": "```scala\nobject MaxInSet {\n  def main(args: Array[String]): Unit = {\n    val numbers: Set[Double] = Set(3.14, 1.59, 2.65, 5.35, 9.79)\n    val maxElement: Double = numbers.max\n    println(s\"The maximum element is: $maxElement\")\n  }\n}\n```"
  },
  {
    "task": "Create a set and demonstrate the use of the `update` method with another set.",
    "code": "```scala\n// Create the first set\nvar set1 = Set(1, 2, 3, 4)\n\n// Create another set\nval set2 = Set(3, 4, 5, 6)\n\n// Update set1 with set2\nset1 ++= set2\n\n// Output the updated set1\nprintln(set1)\n```"
  },
  {
    "task": "Implement a set to keep track of unique file extensions in a directory.",
    "code": "```scala\nimport java.io.File\n\ndef getUniqueFileExtensions(directoryPath: String): Set[String] = {\n  val directory = new File(directoryPath)\n  if (directory.exists && directory.isDirectory) {\n    val files = directory.listFiles\n    files.filter(_.isFile)\n         .map(_.getName)\n         .filter(_.contains(\".\"))\n         .map(_.split(\"\\\\.\").last)\n         .toSet\n  } else {\n    Set.empty[String]\n  }\n}\n\n// Example usage\nval uniqueExtensions = getUniqueFileExtensions(\"/path/to/directory\")\nprintln(uniqueExtensions)\n```"
  },
  {
    "task": "Create a set of strings and demonstrate how to iterate over it in reverse order.",
    "code": "```scala\nval stringSet = Set(\"apple\", \"banana\", \"cherry\")\nstringSet.toList.reverse.foreach(println)\n```"
  },
  {
    "task": "Write a function to check if a set is empty.",
    "code": "```scala\ndef isSetEmpty[T](set: Set[T]): Boolean = set.isEmpty\n```"
  },
  {
    "task": "Use a set to filter out duplicate entries from a list of participants.",
    "code": "```scala\nval participants = List(\"Alice\", \"Bob\", \"Charlie\", \"Alice\", \"David\", \"Bob\")\nval uniqueParticipants = participants.toSet.toList\n```"
  },
  {
    "task": "Create a set of tuples and demonstrate basic set operations.",
    "code": "```scala\nobject SetUsageExample extends App {\n  // Create a set of tuples\n  val tupleSet: Set[(Int, String)] = Set((1, \"Apple\"), (2, \"Banana\"), (3, \"Cherry\"))\n\n  // Add a new tuple to the set\n  val newSet = tupleSet + (4, \"Date\")\n\n  // Remove a tuple from the set\n  val removedSet = newSet - (2, \"Banana\")\n\n  // Check if a tuple exists in the set\n  val containsApple = removedSet.contains((1, \"Apple\"))\n\n  // Iterate over the set and print each tuple\n  removedSet.foreach(println)\n}\n```"
  },
  {
    "task": "Write a program to find the common elements between two sets of country names.",
    "code": "```scala\nobject CommonCountries {\n  def main(args: Array[String]): Unit = {\n    val set1 = Set(\"USA\", \"Canada\", \"Mexico\", \"Brazil\")\n    val set2 = Set(\"Brazil\", \"Argentina\", \"USA\", \"Chile\")\n\n    val commonElements = set1.intersect(set2)\n    println(s\"Common countries: ${commonElements.mkString(\", \")}\")\n  }\n}\n```"
  },
  {
    "task": "Create a set of characters and demonstrate the use of the `issubset` method.",
    "code": "```scala\nobject SetUsageExample extends App {\n  val set1: Set[Char] = Set('a', 'b', 'c')\n  val set2: Set[Char] = Set('a', 'b', 'c', 'd', 'e')\n\n  val isSubset = set1.subsetOf(set2)\n\n  println(s\"Is set1 a subset of set2? $isSubset\")\n}\n```"
  },
  {
    "task": "Implement a set to manage a collection of unique hashtags from social media posts.",
    "code": "```scala\nobject HashtagManager {\n  private var hashtags: Set[String] = Set()\n\n  def addHashtag(hashtag: String): Unit = {\n    hashtags += hashtag\n  }\n\n  def removeHashtag(hashtag: String): Unit = {\n    hashtags -= hashtag\n  }\n\n  def getAllHashtags: Set[String] = {\n    hashtags\n  }\n\n  def containsHashtag(hashtag: String): Boolean = {\n    hashtags.contains(hashtag)\n  }\n}\n```"
  },
  {
    "task": "Create a set and demonstrate how to copy it to another set.",
    "code": "```scala\nval originalSet = Set(1, 2, 3, 4, 5)\nval copiedSet = originalSet\n```"
  },
  {
    "task": "Write a function that accepts two sets and returns a new set with elements found in both.",
    "code": "```scala\ndef intersection[A](set1: Set[A], set2: Set[A]): Set[A] = {\n  set1.intersect(set2)\n}\n```"
  },
  {
    "task": "Use a set to determine the unique items purchased in a day.",
    "code": "```scala\nval itemsPurchased = List(\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"grape\")\nval uniqueItems = itemsPurchased.toSet\n\nprintln(uniqueItems)\n```"
  },
  {
    "task": "Create a set of student IDs and demonstrate set comprehension to filter IDs.",
    "code": "```scala\nobject StudentIDSetExample extends App {\n  val studentIDs: Set[Int] = Set(101, 102, 103, 104, 105, 106)\n  \n  // Set comprehension to filter IDs greater than 103\n  val filteredIDs: Set[Int] = for {\n    id <- studentIDs\n    if id > 103\n  } yield id\n\n  println(filteredIDs)\n}\n```"
  },
  {
    "task": "Write a program to check if a set of strings is a superset of another set.",
    "code": "```scala\nobject SupersetCheck {\n  def isSuperset(superset: Set[String], subset: Set[String]): Boolean = {\n    subset.forall(superset.contains)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val set1 = Set(\"apple\", \"banana\", \"cherry\")\n    val set2 = Set(\"banana\", \"apple\")\n\n    println(isSuperset(set1, set2)) // Output: true\n    println(isSuperset(set2, set1)) // Output: false\n  }\n}\n```"
  },
  {
    "task": "Create a set of unique words from a text file.",
    "code": "```scala\nimport scala.io.Source\n\nval filename = \"path/to/your/file.txt\"\nval wordsSet: Set[String] = Source.fromFile(filename)\n  .getLines()\n  .flatMap(_.split(\"\\\\W+\"))\n  .map(_.toLowerCase)\n  .toSet\n\nprintln(wordsSet)\n```"
  },
  {
    "task": "Implement a set to store unique project identifiers and demonstrate membership testing.",
    "code": "```scala\nobject ProjectIdentifierSet {\n  def main(args: Array[String]): Unit = {\n    // Create a set to store unique project identifiers\n    val projectIdentifiers = Set(\"proj-123\", \"proj-456\", \"proj-789\")\n\n    // Demonstrate membership testing\n    val testIdentifier = \"proj-123\"\n    if (projectIdentifiers.contains(testIdentifier)) {\n      println(s\"$testIdentifier is in the set.\")\n    } else {\n      println(s\"$testIdentifier is not in the set.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Create a set and demonstrate the `symmetric_difference_update` method.",
    "code": "```scala\nobject SetExample {\n  def symmetricDifferenceUpdate(set1: scala.collection.mutable.Set[Int], set2: scala.collection.mutable.Set[Int]): Unit = {\n    val intersection = set1.intersect(set2)\n    set1 ++= set2\n    set1 --= intersection\n  }\n\n  def main(args: Array[String]): Unit = {\n    val set1 = scala.collection.mutable.Set(1, 2, 3, 4)\n    val set2 = scala.collection.mutable.Set(3, 4, 5, 6)\n\n    println(s\"Set1 before: $set1\")\n    println(s\"Set2: $set2\")\n\n    symmetricDifferenceUpdate(set1, set2)\n\n    println(s\"Set1 after symmetricDifferenceUpdate: $set1\")\n  }\n}\n\nSetExample.main(Array())\n```"
  },
  {
    "task": "Write a function to remove all elements from a set that are also in another set.",
    "code": "```scala\ndef removeElements[A](set1: Set[A], set2: Set[A]): Set[A] = {\n  set1.diff(set2)\n}\n```"
  },
  {
    "task": "Use a set to keep track of unique error codes from server logs.",
    "code": "```scala\nobject ErrorCodeTracker {\n  def main(args: Array[String]): Unit = {\n    val errorLogs = List(\"404\", \"500\", \"404\", \"403\", \"500\", \"200\")\n    val uniqueErrorCodes = errorLogs.toSet\n    println(s\"Unique error codes: $uniqueErrorCodes\")\n  }\n}\n```"
  },
  {
    "task": "Create a set and demonstrate how to find all unique pairs of elements.",
    "code": "```scala\nobject SetUsageDemo extends App {\n  val elements = Set(1, 2, 3, 4)\n  \n  val uniquePairs = for {\n    a <- elements\n    b <- elements if a < b\n  } yield (a, b)\n\n  uniquePairs.foreach(println)\n}\n```"
  },
  {
    "task": "Write a program to find the smallest element in a set of integers.",
    "code": "```scala\nobject SmallestElementInSet {\n  def main(args: Array[String]): Unit = {\n    val numbers = Set(5, 3, 8, 1, 9, 2)\n    val smallest = numbers.min\n    println(s\"The smallest element is: $smallest\")\n  }\n}\n```"
  },
  {
    "task": "Create a set and demonstrate the `add` method with multiple elements.",
    "code": "```scala\nobject SetUsageExample extends App {\n  var mySet = Set[Int]()\n  \n  mySet += 1\n  mySet += 2\n  mySet += 3\n  \n  println(mySet)\n}\n```"
  },
  {
    "task": "Implement a set to manage a collection of unique author names.",
    "code": "```scala\nobject AuthorCollection {\n  def main(args: Array[String]): Unit = {\n    var authors: Set[String] = Set()\n\n    // Example usage\n    authors += \"George Orwell\"\n    authors += \"Virginia Woolf\"\n    authors += \"Mark Twain\"\n    authors += \"George Orwell\" // Duplicate entry, won't be added again\n\n    println(authors)\n  }\n}\n```"
  },
  {
    "task": "Create a set of integers and demonstrate converting it to a sorted list.",
    "code": "```scala\nval integerSet: Set[Int] = Set(5, 3, 8, 1, 4)\nval sortedList: List[Int] = integerSet.toList.sorted\n```"
  },
  {
    "task": "Write a function that returns the union of multiple sets.",
    "code": "```scala\ndef unionOfSets[T](sets: Set[T]*): Set[T] = {\n  sets.foldLeft(Set.empty[T])(_ union _)\n}\n```"
  },
  {
    "task": "Use a set to identify unique characters in a string.",
    "code": "```scala\nval inputString = \"example\"\nval uniqueChars = inputString.toSet\nprintln(uniqueChars)\n```"
  },
  {
    "task": "Create a set of prime numbers and demonstrate basic set operations.",
    "code": "```scala\nobject PrimeSetExample extends App {\n  val primeNumbers: Set[Int] = Set(2, 3, 5, 7, 11, 13, 17, 19, 23, 29)\n\n  // Basic Set Operations\n  val additionalPrimes = Set(31, 37)\n  val allPrimes = primeNumbers ++ additionalPrimes\n  val removedPrimes = allPrimes - 2\n\n  println(s\"Initial Prime Numbers: $primeNumbers\")\n  println(s\"Additional Primes: $additionalPrimes\")\n  println(s\"All Primes: $allPrimes\")\n  println(s\"Removed Prime 2: $removedPrimes\")\n  println(s\"Contains 5: ${primeNumbers.contains(5)}\")\n  println(s\"Contains 6: ${primeNumbers.contains(6)}\")\n}\n```"
  },
  {
    "task": "Create a set and demonstrate how to check for non-membership.",
    "code": "```scala\nobject SetUsageExample extends App {\n  val mySet = Set(1, 2, 3, 4, 5)\n  val elementToCheck = 6\n  val isNotMember = !mySet.contains(elementToCheck)\n  println(s\"Is $elementToCheck not a member of the set? $isNotMember\")\n}\n```"
  },
  {
    "task": "Write a program to find the largest element in a set of numbers.",
    "code": "```scala\nobject LargestElementInSet {\n  def main(args: Array[String]): Unit = {\n    val numbers = Set(3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5)\n    val largest = numbers.max\n    println(s\"The largest element is: $largest\")\n  }\n}\n```"
  },
  {
    "task": "Create a set of unique movie titles and demonstrate membership testing.",
    "code": "```scala\nobject MovieSetDemo extends App {\n  val movieTitles: Set[String] = Set(\"Inception\", \"The Matrix\", \"Interstellar\", \"The Matrix\")\n\n  // Demonstrate membership testing\n  val isInceptionInSet: Boolean = movieTitles.contains(\"Inception\")\n  val isAvatarInSet: Boolean = movieTitles.contains(\"Avatar\")\n\n  println(s\"Is 'Inception' in set? $isInceptionInSet\")\n  println(s\"Is 'Avatar' in set? $isAvatarInSet\")\n}\n```"
  },
  {
    "task": "Implement a set to store unique keys from a dictionary.",
    "code": "```scala\nval dictionary = Map(\"key1\" -> \"value1\", \"key2\" -> \"value2\", \"key3\" -> \"value3\")\nval uniqueKeys: Set[String] = dictionary.keySet\n```"
  },
  {
    "task": "Create a set and demonstrate the `difference_update` method.",
    "code": "```scala\nimport scala.collection.mutable\n\nval set1 = mutable.Set(1, 2, 3, 4, 5)\nval set2 = mutable.Set(3, 4, 5, 6, 7)\n\nset1 --= set2\n\nprintln(set1)\n```"
  },
  {
    "task": "Write a function to merge multiple sets into a single set.",
    "code": "```scala\ndef mergeSets[T](sets: Set[T]*): Set[T] = {\n  sets.flatten.toSet\n}\n```"
  },
  {
    "task": "Use a set to filter out duplicate letters from a word.",
    "code": "```scala\nval word = \"programming\"\nval uniqueLetters = word.toSet\nprintln(uniqueLetters.mkString)\n```"
  },
  {
    "task": "Create a set and demonstrate the use of the `isdisjoint` method.",
    "code": "```scala\nobject SetUsageDemo extends App {\n  val set1 = Set(1, 2, 3, 4, 5)\n  val set2 = Set(6, 7, 8, 9, 10)\n  val set3 = Set(3, 4, 5, 6)\n\n  val isDisjoint1 = set1.intersect(set2).isEmpty\n  val isDisjoint2 = set1.intersect(set3).isEmpty\n\n  println(s\"set1 and set2 are disjoint: $isDisjoint1\")\n  println(s\"set1 and set3 are disjoint: $isDisjoint2\")\n}\n```"
  },
  {
    "task": "Write a program to find all elements that are only in one of two sets.",
    "code": "```scala\nobject SetDifference {\n  def main(args: Array[String]): Unit = {\n    val set1 = Set(1, 2, 3, 4, 5)\n    val set2 = Set(4, 5, 6, 7, 8)\n\n    val uniqueToSet1 = set1.diff(set2)\n    val uniqueToSet2 = set2.diff(set1)\n    val result = uniqueToSet1 union uniqueToSet2\n\n    println(result)\n  }\n}\n```"
  },
  {
    "task": "Create a set of unique book authors and demonstrate basic set operations.",
    "code": "```scala\nobject SetUsageExample extends App {\n  val authors = Set(\"J.K. Rowling\", \"George R.R. Martin\", \"J.R.R. Tolkien\", \"Agatha Christie\", \"Isaac Asimov\")\n\n  // Add a new author to the set\n  val updatedAuthors = authors + \"Arthur C. Clarke\"\n\n  // Remove an author from the set\n  val reducedAuthors = updatedAuthors - \"Agatha Christie\"\n\n  // Check if an author is in the set\n  val hasTolkien = reducedAuthors.contains(\"J.R.R. Tolkien\")\n\n  // Print the set and the results of operations\n  println(s\"Original Authors: $authors\")\n  println(s\"Updated Authors: $updatedAuthors\")\n  println(s\"Reduced Authors: $reducedAuthors\")\n  println(s\"Set contains J.R.R. Tolkien: $hasTolkien\")\n}\n```"
  },
  {
    "task": "Implement a set to store unique phone numbers and check for duplicates.",
    "code": "```scala\nobject PhoneNumberSetApp extends App {\n  var phoneNumbers: Set[String] = Set()\n\n  def addPhoneNumber(number: String): Boolean = {\n    if (phoneNumbers.contains(number)) {\n      false\n    } else {\n      phoneNumbers += number\n      true\n    }\n  }\n\n  // Example usage:\n  println(addPhoneNumber(\"123-456-7890\")) // true, added\n  println(addPhoneNumber(\"123-456-7890\")) // false, duplicate\n  println(addPhoneNumber(\"098-765-4321\")) // true, added\n}\n```"
  },
  {
    "task": "Create a set of floating-point numbers and demonstrate rounding each element.",
    "code": "```scala\nval floatSet: Set[Double] = Set(3.14159, 2.71828, 1.61803)\nval roundedSet: Set[Long] = floatSet.map(math.round)\nprintln(roundedSet)\n```"
  },
  {
    "task": "Write a function that returns a set of all vowels present in a given sentence.",
    "code": "```scala\ndef findVowels(sentence: String): Set[Char] = {\n  val vowels = Set('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n  sentence.toSet.intersect(vowels)\n}\n```"
  },
  {
    "task": "Use a set to track unique session IDs for a web application.",
    "code": "```scala\nobject SessionTracker {\n  private var sessionIds: Set[String] = Set()\n\n  def addSession(sessionId: String): Unit = {\n    sessionIds += sessionId\n  }\n\n  def removeSession(sessionId: String): Unit = {\n    sessionIds -= sessionId\n  }\n\n  def isSessionActive(sessionId: String): Boolean = {\n    sessionIds.contains(sessionId)\n  }\n\n  def activeSessions: Set[String] = sessionIds\n}\n```"
  },
  {
    "task": "Create a set of unique city names and demonstrate set operations with it.",
    "code": "```scala\nobject CitySetExample extends App {\n  // Create a set of unique city names\n  val cities = Set(\"New York\", \"Los Angeles\", \"Chicago\", \"Houston\", \"Phoenix\")\n\n  // Add a city to the set\n  val updatedCities = cities + \"San Francisco\"\n\n  // Remove a city from the set\n  val reducedCities = updatedCities - \"Houston\"\n\n  // Check for a city in the set\n  val hasChicago = reducedCities.contains(\"Chicago\")\n\n  // Print the set\n  println(s\"Original Cities: $cities\")\n  println(s\"Updated Cities: $updatedCities\")\n  println(s\"Reduced Cities: $reducedCities\")\n  println(s\"Does the set contain Chicago? $hasChicago\")\n\n  // Demonstrate set operations (union, intersection, difference)\n  val additionalCities = Set(\"San Diego\", \"Dallas\", \"Phoenix\", \"Chicago\")\n  val unionCities = cities union additionalCities\n  val intersectCities = cities intersect additionalCities\n  val diffCities = cities diff additionalCities\n\n  println(s\"Union of Cities: $unionCities\")\n  println(s\"Intersection of Cities: $intersectCities\")\n  println(s\"Difference of Cities: $diffCities\")\n}\n```"
  },
  {
    "task": "Write a program to find the common elements in three sets.",
    "code": "```scala\nobject CommonElementsInSets {\n  def main(args: Array[String]): Unit = {\n    val set1 = Set(1, 2, 3, 4, 5)\n    val set2 = Set(3, 4, 5, 6, 7)\n    val set3 = Set(5, 6, 7, 8, 9)\n\n    val commonElements = set1.intersect(set2).intersect(set3)\n\n    println(s\"Common elements in all three sets: $commonElements\")\n  }\n}\n```"
  },
  {
    "task": "Create a set and demonstrate how to remove an element by its value.",
    "code": "```scala\nobject SetUsageExample extends App {\n  var mySet = Set(\"apple\", \"banana\", \"cherry\")\n  mySet -= \"banana\"\n  println(mySet)\n}\n```"
  },
  {
    "task": "Implement a set to store a collection of unique ISBN numbers.",
    "code": "```scala\nobject ISBNSet {\n  def main(args: Array[String]): Unit = {\n    var isbnNumbers: Set[String] = Set()\n\n    // Example usage\n    isbnNumbers += \"978-3-16-148410-0\"\n    isbnNumbers += \"0-306-40615-2\"\n    isbnNumbers += \"978-1-4028-9462-6\"\n\n    println(isbnNumbers)\n  }\n}\n```"
  },
  {
    "task": "Create a set and demonstrate the `intersection_update` method.",
    "code": "```scala\nimport scala.collection.mutable.Set\n\nval set1: Set[Int] = Set(1, 2, 3, 4, 5)\nval set2: Set[Int] = Set(3, 4, 5, 6, 7)\n\nset1.retain(set2.contains)\n\nprintln(set1)\n```"
  },
  {
    "task": "Write a function to generate a set of all unique elements in a list.",
    "code": "```scala\ndef uniqueElements[T](list: List[T]): Set[T] = {\n  list.toSet\n}\n```"
  },
  {
    "task": "Use a set to determine the unique characters in two strings.",
    "code": "```scala\ndef uniqueCharacters(str1: String, str2: String): Set[Char] = {\n  val set1 = str1.toSet\n  val set2 = str2.toSet\n  set1 union set2\n}\n\nval str1 = \"hello\"\nval str2 = \"world\"\nval uniqueChars = uniqueCharacters(str1, str2)\nprintln(uniqueChars)\n```"
  },
  {
    "task": "Create a set of unique animal names and demonstrate the `discard` method.",
    "code": "```scala\nobject AnimalSetDemo extends App {\n  val animalSet = scala.collection.mutable.Set(\"Lion\", \"Tiger\", \"Bear\", \"Wolf\")\n  animalSet -= \"Bear\"\n  println(animalSet)\n}\n```"
  },
  {
    "task": "Write a program to find all elements present in the first set but not in the second.",
    "code": "```scala\nobject SetDifference {\n  def main(args: Array[String]): Unit = {\n    val set1 = Set(1, 2, 3, 4, 5)\n    val set2 = Set(4, 5, 6, 7, 8)\n    \n    val difference = set1.diff(set2)\n    \n    println(s\"Elements in set1 but not in set2: $difference\")\n  }\n}\n```"
  },
  {
    "task": "Create a set of integers and demonstrate using it to eliminate duplicates from a list.",
    "code": "```scala\nobject SetUsageExample extends App {\n  val listWithDuplicates = List(1, 2, 2, 3, 4, 4, 5)\n  val set = listWithDuplicates.toSet\n  val listWithoutDuplicates = set.toList\n\n  println(listWithoutDuplicates)\n}\n```"
  },
  {
    "task": "Implement a set to manage a collection of unique car models.",
    "code": "```scala\nobject CarModels {\n  def main(args: Array[String]): Unit = {\n    var carModels: Set[String] = Set()\n\n    // Add car models\n    carModels += \"Toyota Corolla\"\n    carModels += \"Honda Civic\"\n    carModels += \"Ford Mustang\"\n\n    // Attempt to add a duplicate model\n    carModels += \"Toyota Corolla\"\n\n    // Print all unique car models\n    carModels.foreach(println)\n  }\n}\n```"
  },
  {
    "task": "Create a set and demonstrate the use of the `clear` method.",
    "code": "```scala\nimport scala.collection.mutable\n\nval mySet: mutable.Set[Int] = mutable.Set(1, 2, 3, 4, 5)\nprintln(s\"Original Set: $mySet\")\nmySet.clear()\nprintln(s\"Set after clear: $mySet\")\n```"
  },
  {
    "task": "Write a function that finds the intersection of multiple sets.",
    "code": "```scala\ndef findIntersection[T](sets: Set[T]*): Set[T] = {\n  if (sets.isEmpty) Set.empty[T]\n  else sets.reduce(_ intersect _)\n}\n```"
  },
  {
    "task": "Use a set to identify unique words in a paragraph.",
    "code": "```scala\nobject UniqueWords {\n  def main(args: Array[String]): Unit = {\n    val paragraph = \"This is a sample paragraph with some sample words and some unique words.\"\n    val words = paragraph.split(\"\\\\W+\").map(_.toLowerCase)\n    val uniqueWords = words.toSet\n    uniqueWords.foreach(println)\n  }\n}\n```"
  },
  {
    "task": "Create a set of unique country codes and demonstrate membership testing.",
    "code": "```scala\nobject CountryCodesSet {\n  def main(args: Array[String]): Unit = {\n    val countryCodes = Set(\"US\", \"CA\", \"MX\", \"FR\", \"DE\")\n    \n    // Demonstrate membership testing\n    println(countryCodes.contains(\"US\")) // true\n    println(countryCodes.contains(\"JP\")) // false\n  }\n}\n```"
  },
  {
    "task": "Write a program to find the union of two sets and return it as a list.",
    "code": "```scala\nobject SetUnion {\n  def unionOfSets(set1: Set[Int], set2: Set[Int]): List[Int] = {\n    (set1 union set2).toList\n  }\n\n  def main(args: Array[String]): Unit = {\n    val setA = Set(1, 2, 3, 4)\n    val setB = Set(3, 4, 5, 6)\n    val result = unionOfSets(setA, setB)\n    println(result)\n  }\n}\n```"
  },
  {
    "task": "Create a set and demonstrate using it to check if all elements of another set are present.",
    "code": "```scala\nobject SetUsageDemo extends App {\n  val setA: Set[Int] = Set(1, 2, 3, 4, 5)\n  val setB: Set[Int] = Set(3, 4, 5)\n\n  val allElementsPresent: Boolean = setB.subsetOf(setA)\n\n  println(s\"All elements of setB are present in setA: $allElementsPresent\")\n}\n```"
  },
  {
    "task": "Implement a set to store unique coupon codes and demonstrate adding new codes.",
    "code": "```scala\nobject CouponSetDemo extends App {\n  var couponCodes: Set[String] = Set()\n\n  def addCouponCode(code: String): Unit = {\n    couponCodes += code\n    println(s\"Added coupon code: $code\")\n  }\n\n  def showCouponCodes(): Unit = {\n    println(\"Current coupon codes in the set:\")\n    couponCodes.foreach(println)\n  }\n\n  // Demonstration of adding new coupon codes\n  addCouponCode(\"SAVE10\")\n  addCouponCode(\"DISCOUNT20\")\n  addCouponCode(\"SAVE10\") // Attempt to add a duplicate\n  addCouponCode(\"FREESHIP\")\n\n  showCouponCodes()\n}\n\nCouponSetDemo.main(Array.empty)\n```"
  },
  {
    "task": "Create a set and demonstrate the `copy` method.",
    "code": "```scala\nval originalSet = Set(1, 2, 3, 4, 5)\nval copiedSet = originalSet.toSet\n\nprintln(s\"Original Set: $originalSet\")\nprintln(s\"Copied Set: $copiedSet\")\n```"
  },
  {
    "task": "Write a function to remove duplicates from a list using a set.",
    "code": "```scala\ndef removeDuplicates[T](list: List[T]): List[T] = {\n  list.toSet.toList\n}\n```"
  },
  {
    "task": "Use a set to identify unique numbers in a sequence.",
    "code": "```scala\nval numbers = Seq(1, 2, 3, 2, 4, 1, 5)\nval uniqueNumbers = numbers.toSet\nprintln(uniqueNumbers)\n```"
  },
  {
    "task": "Create a set of unique fruit names and demonstrate set operations with it.",
    "code": "```scala\nobject FruitSetExample extends App {\n  val fruitSet = Set(\"apple\", \"banana\", \"orange\", \"apple\", \"kiwi\")\n\n  // Demonstrate basic set operations\n  val moreFruits = Set(\"mango\", \"banana\", \"grape\")\n\n  // Union\n  val unionSet = fruitSet union moreFruits\n  println(s\"Union: $unionSet\")\n\n  // Intersection\n  val intersectionSet = fruitSet intersect moreFruits\n  println(s\"Intersection: $intersectionSet\")\n\n  // Difference\n  val differenceSet = fruitSet diff moreFruits\n  println(s\"Difference: $differenceSet\")\n\n  // Check membership\n  println(s\"Contains 'banana': ${fruitSet.contains(\"banana\")}\")\n  println(s\"Contains 'mango': ${fruitSet.contains(\"mango\")}\")\n}\n```"
  }
]