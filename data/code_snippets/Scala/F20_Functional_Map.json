[
  {
    "task": "Convert a list of temperatures from Celsius to Fahrenheit using a map function.",
    "code": "```scala\nval celsiusTemps = List(0.0, 20.0, 37.0, 100.0)\nval fahrenheitTemps = celsiusTemps.map(c => c * 9.0 / 5.0 + 32.0)\n```"
  },
  {
    "task": "Use map to convert a list of lowercase words to uppercase.",
    "code": "```scala\nval words = List(\"apple\", \"banana\", \"cherry\")\nval uppercasedWords = words.map(_.toUpperCase)\n```"
  },
  {
    "task": "Apply map to add a prefix to each string in a list of filenames.",
    "code": "```scala\nval filenames = List(\"document.txt\", \"image.png\", \"presentation.pptx\")\nval prefix = \"new_\"\nval updatedFilenames = filenames.map(prefix + _)\n```"
  },
  {
    "task": "Transform a list of numbers by squaring each element with a map function.",
    "code": "```scala\nval numbers = List(1, 2, 3, 4, 5)\nval squaredNumbers = numbers.map(n => n * n)\n```"
  },
  {
    "task": "Convert a list of integers to their string representations using map.",
    "code": "```scala\nval numbers = List(1, 2, 3, 4, 5)\nval stringRepresentations = numbers.map(_.toString)\n```"
  },
  {
    "task": "Use map to compute the length of each string in a list of sentences.",
    "code": "```scala\nval sentences = List(\"Hello world\", \"Functional programming\", \"Scala is fun\")\nval lengths = sentences.map(_.length)\n```"
  },
  {
    "task": "Apply a discount to a list of prices using a map function.",
    "code": "```scala\nobject DiscountApp extends App {\n  val prices: List[Double] = List(100.0, 150.0, 200.0, 250.0)\n  val discount: Double = 0.1 // 10% discount\n  val discountedPrices: List[Double] = prices.map(price => price * (1 - discount))\n  println(discountedPrices)\n}\n```"
  },
  {
    "task": "Extract the first element from each tuple in a list of tuples with map.",
    "code": "```scala\nval tuples = List((1, \"a\"), (2, \"b\"), (3, \"c\"))\nval firstElements = tuples.map { case (first, _) => first }\n```"
  },
  {
    "task": "Use map to round a list of floating-point numbers to two decimal places.",
    "code": "```scala\nval numbers = List(3.14159, 2.71828, 1.61803)\nval roundedNumbers = numbers.map(num => BigDecimal(num).setScale(2, BigDecimal.RoundingMode.HALF_UP).toDouble)\n```"
  },
  {
    "task": "Capitalize the first letter of each word in a list of names using map.",
    "code": "```scala\nval names = List(\"alice\", \"bob\", \"charlie\")\nval capitalizedNames = names.map(_.split(\" \").map(_.capitalize).mkString(\" \"))\n```"
  },
  {
    "task": "Convert a list of JSON strings to corresponding dictionary objects with map.",
    "code": "```scala\nimport scala.util.parsing.json.JSON\n\nval jsonStrings: List[String] = List(\n  \"\"\"{\"name\": \"Alice\", \"age\": 30}\"\"\",\n  \"\"\"{\"name\": \"Bob\", \"age\": 25}\"\"\",\n  \"\"\"{\"name\": \"Charlie\", \"age\": 35}\"\"\"\n)\n\nval dictionaries: List[Option[Any]] = jsonStrings.map(JSON.parseFull)\n```"
  },
  {
    "task": "Use map to double the value of each number in a list.",
    "code": "```scala\nval numbers = List(1, 2, 3, 4, 5)\nval doubled = numbers.map(_ * 2)\n```"
  },
  {
    "task": "Transform a list of RGB tuples to hexadecimal color codes using map.",
    "code": "```scala\nval rgbList = List((255, 0, 0), (0, 255, 0), (0, 0, 255))\n\nval hexColors = rgbList.map { case (r, g, b) =>\n  f\"#$r%02X$g%02X$b%02X\"\n}\n\nprintln(hexColors)\n```"
  },
  {
    "task": "Use map to compute the factorial of each number in a list.",
    "code": "```scala\nval numbers = List(1, 2, 3, 4, 5)\n\ndef factorial(n: Int): Int = if (n == 0) 1 else n * factorial(n - 1)\n\nval factorials = numbers.map(factorial)\n\nprintln(factorials)\n```"
  },
  {
    "task": "Translate a list of English words to Spanish using a map function.",
    "code": "```scala\nval englishToSpanish = Map(\n  \"hello\" -> \"hola\",\n  \"world\" -> \"mundo\",\n  \"cat\" -> \"gato\",\n  \"dog\" -> \"perro\",\n  \"food\" -> \"comida\"\n)\n\nval englishWords = List(\"hello\", \"world\", \"cat\", \"dog\", \"food\")\n\nval spanishWords = englishWords.map(word => englishToSpanish.getOrElse(word, word))\n\nprintln(spanishWords)\n```"
  },
  {
    "task": "Apply a map function to format a list of dates from one format to another.",
    "code": "```scala\nimport java.time.LocalDate\nimport java.time.format.DateTimeFormatter\n\nval inputDates = List(\"2023-10-01\", \"2023-11-05\", \"2023-12-25\")\nval inputFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")\nval outputFormatter = DateTimeFormatter.ofPattern(\"dd/MM/yyyy\")\n\nval formattedDates = inputDates.map { dateStr =>\n  val date = LocalDate.parse(dateStr, inputFormatter)\n  date.format(outputFormatter)\n}\n\nformattedDates.foreach(println)\n```"
  },
  {
    "task": "Use map to check if each number in a list is even, returning a list of booleans.",
    "code": "```scala\nval numbers = List(1, 2, 3, 4, 5)\nval isEvenList = numbers.map(_ % 2 == 0)\n```"
  },
  {
    "task": "Convert a list of binary strings to decimal numbers using map.",
    "code": "```scala\nval binaryStrings = List(\"101\", \"110\", \"111\")\nval decimalNumbers = binaryStrings.map(Integer.parseInt(_, 2))\n```"
  },
  {
    "task": "Use map to append a domain name to a list of user names to create email addresses.",
    "code": "```scala\nval usernames = List(\"alice\", \"bob\", \"charlie\")\nval domain = \"@example.com\"\nval emails = usernames.map(username => username + domain)\n```"
  },
  {
    "task": "Calculate the area of each circle in a list of radii using a map function.",
    "code": "```scala\nval radii = List(1.0, 2.0, 3.0, 4.0, 5.0)\nval areas = radii.map(r => math.Pi * r * r)\n```"
  },
  {
    "task": "Use map to strip whitespace from the start and end of each string in a list.",
    "code": "```scala\nval strings = List(\"  hello \", \" world  \", \"  scala  \")\nval trimmedStrings = strings.map(_.trim)\n```"
  },
  {
    "task": "Apply map to replace spaces with underscores in a list of file paths.",
    "code": "```scala\nval filePaths = List(\"path/to/file one\", \"path/to/file two\", \"path/to/file three\")\nval updatedPaths = filePaths.map(_.replace(\" \", \"_\"))\n```"
  },
  {
    "task": "Convert a list of mixed-case strings to title case using map.",
    "code": "```scala\nval strings = List(\"hElLo WoRLd\", \"sCaLa ProGrAmMiNg\", \"fUnCtIoNaL mAp\")\n\nval titleCasedStrings = strings.map { str =>\n  str.split(\" \").map(word => word.toLowerCase.capitalize).mkString(\" \")\n}\n\nprintln(titleCasedStrings)\n```"
  },
  {
    "task": "Use map to filter out only the digits from a list of mixed alphanumeric strings.",
    "code": "```scala\nval mixedList = List(\"abc123\", \"def456\", \"ghi789\")\nval digitsList = mixedList.map(_.filter(_.isDigit))\nprintln(digitsList)\n```"
  },
  {
    "task": "Apply map to convert a list of Unix timestamps to readable date strings.",
    "code": "```scala\nimport java.time.Instant\nimport java.time.ZoneId\nimport java.time.format.DateTimeFormatter\n\nval timestamps = List(1609459200L, 1612137600L, 1614556800L)\n\nval dateFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\").withZone(ZoneId.systemDefault())\n\nval readableDates = timestamps.map(ts => dateFormatter.format(Instant.ofEpochSecond(ts)))\n\nreadableDates.foreach(println)\n```"
  },
  {
    "task": "Transform a list of dictionary objects by extracting a specific key's value using map.",
    "code": "```scala\nval listOfDicts = List(\n  Map(\"key1\" -> \"value1a\", \"key2\" -> \"value2a\"),\n  Map(\"key1\" -> \"value1b\", \"key2\" -> \"value2b\"),\n  Map(\"key1\" -> \"value1c\", \"key2\" -> \"value2c\")\n)\n\nval extractedValues = listOfDicts.map(_.get(\"key1\"))\n\nprintln(extractedValues)\n```"
  },
  {
    "task": "Use map to compute the cube of each number in a list.",
    "code": "```scala\nval numbers = List(1, 2, 3, 4, 5)\nval cubes = numbers.map(n => n * n * n)\n```"
  },
  {
    "task": "Translate a list of URLs to their respective domain names using a map function.",
    "code": "```scala\nval urls = List(\n  \"https://www.example.com/some-path\",\n  \"http://another-example.org/other-path\",\n  \"https://sub.domain.co.uk/path\"\n)\n\nval domains = urls.map { url =>\n  val uri = new java.net.URI(url)\n  uri.getHost\n}\n\ndomains.foreach(println)\n```"
  },
  {
    "task": "Use map to generate HTML list items from a list of text strings.",
    "code": "```scala\nval texts = List(\"Item 1\", \"Item 2\", \"Item 3\")\nval htmlListItems = texts.map(text => s\"<li>$text</li>\")\n```"
  },
  {
    "task": "Convert a list of polar coordinates to Cartesian coordinates using map.",
    "code": "```scala\nobject PolarToCartesian extends App {\n  case class PolarCoordinate(radius: Double, angle: Double)\n  case class CartesianCoordinate(x: Double, y: Double)\n\n  def polarToCartesian(polar: PolarCoordinate): CartesianCoordinate = {\n    val x = polar.radius * Math.cos(polar.angle)\n    val y = polar.radius * Math.sin(polar.angle)\n    CartesianCoordinate(x, y)\n  }\n\n  val polarCoordinates = List(\n    PolarCoordinate(1, Math.PI / 4),\n    PolarCoordinate(2, Math.PI / 2),\n    PolarCoordinate(3, Math.PI)\n  )\n\n  val cartesianCoordinates = polarCoordinates.map(polarToCartesian)\n\n  cartesianCoordinates.foreach(println)\n}\n```"
  },
  {
    "task": "Use map to decode a list of Base64 encoded strings.",
    "code": "```scala\nimport java.util.Base64\n\nobject Base64Decoder {\n  def main(args: Array[String]): Unit = {\n    val encodedStrings = List(\"SGVsbG8=\", \"V29ybGQ=\", \"U2NhbGE=\")\n    val decodedStrings = encodedStrings.map(encoded => new String(Base64.getDecoder.decode(encoded)))\n    decodedStrings.foreach(println)\n  }\n}\n```"
  },
  {
    "task": "Convert a list of English sentences to Pig Latin using a map function.",
    "code": "```scala\nobject PigLatinConverter extends App {\n  def toPigLatin(sentence: String): String = {\n    sentence.split(\" \").map { word =>\n      val firstVowelIndex = word.indexWhere(c => \"aeiou\".contains(c.toLower))\n      if (firstVowelIndex > 0) {\n        word.substring(firstVowelIndex) + word.substring(0, firstVowelIndex) + \"ay\"\n      } else {\n        word + \"way\"\n      }\n    }.mkString(\" \")\n  }\n\n  val sentences = List(\"hello world\", \"scala is fun\", \"functional programming\")\n  val pigLatinSentences = sentences.map(toPigLatin)\n  pigLatinSentences.foreach(println)\n}\n```"
  },
  {
    "task": "Use map to anonymize a list of email addresses by masking them.",
    "code": "```scala\nval emails = List(\"user1@example.com\", \"user2@example.com\", \"user3@example.com\")\n\ndef maskEmail(email: String): String = {\n  val atIndex = email.indexOf('@')\n  if (atIndex > 1) {\n    email(0) + \"****\" + email.substring(atIndex - 1)\n  } else {\n    \"****@****\"\n  }\n}\n\nval anonymizedEmails = emails.map(maskEmail)\n```"
  },
  {
    "task": "Apply map to reverse each string in a list of words.",
    "code": "```scala\nval words = List(\"hello\", \"world\", \"scala\", \"functional\")\nval reversedWords = words.map(_.reverse)\n```"
  },
  {
    "task": "Convert a list of hexadecimal color codes to RGB tuples using map.",
    "code": "```scala\nval hexColors = List(\"#FFFFFF\", \"#000000\", \"#FF5733\")\n\nval rgbColors = hexColors.map { hex =>\n  val r = Integer.parseInt(hex.substring(1, 3), 16)\n  val g = Integer.parseInt(hex.substring(3, 5), 16)\n  val b = Integer.parseInt(hex.substring(5, 7), 16)\n  (r, g, b)\n}\n\nprintln(rgbColors)\n```"
  },
  {
    "task": "Use map to increment each integer in a list by a constant value.",
    "code": "```scala\nval numbers = List(1, 2, 3, 4, 5)\nval incrementedNumbers = numbers.map(_ + 1)\n```"
  },
  {
    "task": "Calculate the square root of each number in a list using a map function.",
    "code": "```scala\nval numbers = List(1.0, 4.0, 9.0, 16.0, 25.0)\nval squareRoots = numbers.map(Math.sqrt)\n```"
  },
  {
    "task": "Use map to convert a list of currency amounts from dollars to euros.",
    "code": "```scala\nval dollarAmounts = List(10.0, 20.0, 30.0, 40.0, 50.0)\nval exchangeRate = 0.85\n\nval euroAmounts = dollarAmounts.map(_ * exchangeRate)\n\nprintln(euroAmounts)\n```"
  },
  {
    "task": "Extract the domain from each email address in a list using map.",
    "code": "```scala\nval emails = List(\"user1@example.com\", \"user2@test.org\", \"user3@domain.net\")\nval domains = emails.map(email => email.split(\"@\")(1))\n```"
  },
  {
    "task": "Use map to serialize a list of objects into JSON strings.",
    "code": "```scala\nimport play.api.libs.json.Json\n\ncase class MyObject(name: String, value: Int)\n\nobject SerializeToJson {\n  def main(args: Array[String]): Unit = {\n    val objects = List(\n      MyObject(\"obj1\", 10),\n      MyObject(\"obj2\", 20),\n      MyObject(\"obj3\", 30)\n    )\n\n    val jsonStrings = objects.map(obj => Json.toJson(obj).toString())\n\n    jsonStrings.foreach(println)\n  }\n}\n\nimplicit val myObjectWrites = Json.writes[MyObject]\n```"
  },
  {
    "task": "Transform a list of file sizes from bytes to kilobytes using map.",
    "code": "```scala\nval fileSizesInBytes = List(1024, 2048, 5120, 10240)\nval fileSizesInKilobytes = fileSizesInBytes.map(_ / 1024.0)\n```"
  },
  {
    "task": "Use map to append a suffix to each string in a list of identifiers.",
    "code": "```scala\nval identifiers = List(\"id1\", \"id2\", \"id3\")\nval suffix = \"_suffix\"\nval updatedIdentifiers = identifiers.map(_ + suffix)\n```"
  },
  {
    "task": "Apply map to convert measurements from inches to centimeters in a list.",
    "code": "```scala\nval inchesList = List(1.0, 2.5, 3.75, 5.0)\nval centimetersList = inchesList.map(_ * 2.54)\n```"
  },
  {
    "task": "Use map to encrypt a list of plaintext messages using a simple cipher.",
    "code": "```scala\nobject SimpleCipher {\n  def encryptMessage(message: String, shift: Int): String = {\n    message.map { char =>\n      if (char.isLetter) {\n        val offset = if (char.isUpper) 'A' else 'a'\n        ((char - offset + shift) % 26 + offset).toChar\n      } else {\n        char\n      }\n    }\n  }\n\n  def main(args: Array[String]): Unit = {\n    val messages = List(\"Hello\", \"World\", \"Scala\", \"Cipher\")\n    val shift = 3\n    val encryptedMessages = messages.map(encryptMessage(_, shift))\n    encryptedMessages.foreach(println)\n  }\n}\n```"
  },
  {
    "task": "Transform a list of date strings to day of the week names using a map function.",
    "code": "```scala\nimport java.time.LocalDate\nimport java.time.format.DateTimeFormatter\nimport java.time.format.DateTimeParseException\n\nval dateStrings = List(\"2023-10-01\", \"2023-10-02\", \"2023-10-03\")\n\nval formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")\n\nval dayOfWeekNames = dateStrings.map { dateString =>\n  try {\n    val localDate = LocalDate.parse(dateString, formatter)\n    localDate.getDayOfWeek.toString\n  } catch {\n    case _: DateTimeParseException => \"Invalid Date\"\n  }\n}\n\nprintln(dayOfWeekNames)\n```"
  },
  {
    "task": "Use map to derive the absolute value of each number in a list.",
    "code": "```scala\nval numbers = List(-3, 5, -7, 2, -1)\nval absoluteValues = numbers.map(math.abs)\n```"
  },
  {
    "task": "Convert a list of lowercase hexadecimal strings to uppercase using map.",
    "code": "```scala\nval hexStrings = List(\"a1\", \"b2\", \"c3\", \"d4\", \"e5\")\nval upperHexStrings = hexStrings.map(_.toUpperCase)\n```"
  },
  {
    "task": "Use map to find the maximum value in a list of lists of numbers.",
    "code": "```scala\nval lists = List(\n  List(1, 2, 3),\n  List(4, 5, 6),\n  List(7, 8, 9)\n)\n\nval maxValues = lists.map(_.max)\nval overallMax = maxValues.max\n\nprintln(overallMax)\n```"
  },
  {
    "task": "Apply map to extract the year from each date in a list of date objects.",
    "code": "```scala\nimport java.time.LocalDate\n\nval dates: List[LocalDate] = List(\n  LocalDate.of(2023, 10, 5),\n  LocalDate.of(2022, 8, 15),\n  LocalDate.of(2021, 12, 25)\n)\n\nval years: List[Int] = dates.map(_.getYear)\n```"
  },
  {
    "task": "Use map to prepend a country code to each phone number in a list.",
    "code": "```scala\nval phoneNumbers = List(\"1234567890\", \"2345678901\", \"3456789012\")\nval countryCode = \"+1\"\n\nval updatedNumbers = phoneNumbers.map(countryCode + _)\n\nprintln(updatedNumbers)\n```"
  },
  {
    "task": "Capitalize the last letter of each word in a list using a map function.",
    "code": "```scala\nval words = List(\"hello\", \"world\", \"scala\", \"functional\", \"programming\")\nval capitalizedWords = words.map(word => word.init + word.last.toUpper)\nprintln(capitalizedWords)\n```"
  },
  {
    "task": "Use map to transform a list of strings by removing all vowels.",
    "code": "```scala\nobject RemoveVowels extends App {\n  val strings = List(\"apple\", \"banana\", \"cherry\")\n  val vowels = Set('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n  \n  val result = strings.map(_.filterNot(vowels.contains))\n  \n  println(result)\n}\n```"
  },
  {
    "task": "Convert a list of music notes to their corresponding frequencies using map.",
    "code": "```scala\nobject NoteFrequencies {\n  def main(args: Array[String]): Unit = {\n    val noteToFrequency = Map(\n      \"C\" -> 261.63,\n      \"D\" -> 293.66,\n      \"E\" -> 329.63,\n      \"F\" -> 349.23,\n      \"G\" -> 392.00,\n      \"A\" -> 440.00,\n      \"B\" -> 493.88\n    )\n\n    val notes = List(\"C\", \"E\", \"G\", \"A\")\n    val frequencies = notes.map(noteToFrequency)\n    \n    println(frequencies)\n  }\n}\n```"
  },
  {
    "task": "Use map to find the reciprocal of each number in a list.",
    "code": "```scala\nval numbers = List(1.0, 2.0, 3.0, 4.0, 5.0)\nval reciprocals = numbers.map(1.0 / _)\n```"
  },
  {
    "task": "Transform a list of URLs to their shortened versions using a map function.",
    "code": "```scala\nobject URLShortener {\n  def main(args: Array[String]): Unit = {\n    val urls = List(\n      \"https://www.example.com\",\n      \"https://www.anotherexample.com\",\n      \"https://www.yetanotherexample.com\"\n    )\n\n    val shortenedUrls = urls.map(shortenUrl)\n\n    shortenedUrls.foreach(println)\n  }\n\n  def shortenUrl(url: String): String = {\n    // Placeholder for actual URL shortening logic\n    url.take(10) + \"...\"\n  }\n}\n```"
  },
  {
    "task": "Use map to generate a list of initials from a list of full names.",
    "code": "```scala\nval fullNames = List(\"John Doe\", \"Jane Smith\", \"Alice Johnson\")\nval initials = fullNames.map(name => name.split(\" \").map(_.charAt(0)).mkString)\nprintln(initials)\n```"
  },
  {
    "task": "Convert a list of decimal numbers to their binary string representations using map.",
    "code": "```scala\nval decimalNumbers = List(1, 2, 3, 4, 5)\nval binaryStrings = decimalNumbers.map(_.toBinaryString)\n```"
  },
  {
    "task": "Use map to adjust the brightness of each color in a list of RGB tuples.",
    "code": "```scala\nobject BrightnessAdjuster extends App {\n  val colors = List((100, 150, 200), (50, 75, 100), (200, 50, 25))\n  val brightnessFactor = 1.2\n\n  val adjustedColors = colors.map { case (r, g, b) =>\n    val adjust = (value: Int) => (value * brightnessFactor).toInt.min(255)\n    (adjust(r), adjust(g), adjust(b))\n  }\n\n  println(adjustedColors)\n}\n```"
  },
  {
    "task": "Apply map to filter out only alphabetic characters from a list of strings.",
    "code": "```scala\nval strings = List(\"a1b2\", \"c3d4\", \"e5f6\")\nval alphabeticStrings = strings.map(_.filter(_.isLetter))\n```"
  },
  {
    "task": "Use map to compute the prime factorization of each number in a list.",
    "code": "```scala\nobject PrimeFactorization {\n  def primeFactors(n: Int): List[Int] = {\n    def factors(n: Int, divisor: Int): List[Int] = {\n      if (n == 1) Nil\n      else if (n % divisor == 0) divisor :: factors(n / divisor, divisor)\n      else factors(n, divisor + 1)\n    }\n    factors(n, 2)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val numbers = List(12, 15, 28, 44)\n    val factorizations = numbers.map(primeFactors)\n    println(factorizations)\n  }\n}\n```"
  },
  {
    "task": "Calculate the exponential of each number in a list using a map function.",
    "code": "```scala\nval numbers = List(1.0, 2.0, 3.0, 4.0, 5.0)\nval exponentials = numbers.map(Math.exp)\n```"
  },
  {
    "task": "Use map to convert a list of text messages to morse code.",
    "code": "```scala\nobject MorseCodeConverter {\n  val morseCodeMap: Map[Char, String] = Map(\n    'A' -> \".-\", 'B' -> \"-...\", 'C' -> \"-.-.\", 'D' -> \"-..\", 'E' -> \".\",\n    'F' -> \"..-.\", 'G' -> \"--.\", 'H' -> \"....\", 'I' -> \"..\", 'J' -> \".---\",\n    'K' -> \"-.-\", 'L' -> \".-..\", 'M' -> \"--\", 'N' -> \"-.\", 'O' -> \"---\",\n    'P' -> \".--.\", 'Q' -> \"--.-\", 'R' -> \".-.\", 'S' -> \"...\", 'T' -> \"-\",\n    'U' -> \"..-\", 'V' -> \"...-\", 'W' -> \".--\", 'X' -> \"-..-\", 'Y' -> \"-.--\",\n    'Z' -> \"--..\", '0' -> \"-----\", '1' -> \".----\", '2' -> \"..---\", \n    '3' -> \"...--\", '4' -> \"....-\", '5' -> \".....\", '6' -> \"-....\", \n    '7' -> \"--...\", '8' -> \"---..\", '9' -> \"----.\"\n  )\n\n  def textToMorse(text: String): String = {\n    text.toUpperCase.map(c => morseCodeMap.getOrElse(c, \"\")).mkString(\" \")\n  }\n\n  def main(args: Array[String]): Unit = {\n    val messages = List(\"Hello World\", \"Scala\", \"Morse Code\")\n    val morseMessages = messages.map(textToMorse)\n    morseMessages.foreach(println)\n  }\n}\n```"
  },
  {
    "task": "Transform a list of JSON objects to XML strings using a map function.",
    "code": "```scala\nimport scala.util.parsing.json.JSON\nimport scala.xml.Elem\n\ndef jsonToXml(json: String): Elem = {\n  def parseJsonValue(value: Any): Elem = value match {\n    case map: Map[String, Any] =>\n      <object>\n        {map.map { case (k, v) => <field name={k}>{parseJsonValue(v)}</field> }}\n      </object>\n    case list: List[Any] =>\n      <array>\n        {list.map(parseJsonValue)}\n      </array>\n    case s: String => <string>{s}</string>\n    case num: Double => <number>{num.toString}</number>\n    case bool: Boolean => <boolean>{bool.toString}</boolean>\n    case null => <null/>\n    case _ => <unknown/>\n  }\n\n  JSON.parseFull(json) match {\n    case Some(parsedJson) => parseJsonValue(parsedJson)\n    case None => <error>Invalid JSON</error>\n  }\n}\n\ndef transformJsonListToXml(jsonList: List[String]): List[String] = {\n  jsonList.map(jsonToXml).map(_.toString())\n}\n\n// Example usage\nval jsonList = List(\n  \"\"\"{\"name\": \"John\", \"age\": 30}\"\"\",\n  \"\"\"{\"name\": \"Alice\", \"age\": 25, \"emails\": [\"alice@example.com\", \"alice.work@example.com\"]}\"\"\"\n)\nval xmlList = transformJsonListToXml(jsonList)\n```"
  },
  {
    "task": "Use map to extract the extension from each filename in a list.",
    "code": "```scala\nval filenames = List(\"document.pdf\", \"image.jpeg\", \"archive.zip\", \"notes.txt\")\nval extensions = filenames.map(filename => filename.split(\"\\\\.\").last)\n```"
  },
  {
    "task": "Convert a list of temperatures from Fahrenheit to Kelvin using map.",
    "code": "```scala\nobject TemperatureConverter {\n  def fahrenheitToKelvin(f: Double): Double = (f + 459.67) * 5 / 9\n\n  def main(args: Array[String]): Unit = {\n    val temperaturesInFahrenheit = List(32.0, 68.0, 98.6, 212.0)\n    val temperaturesInKelvin = temperaturesInFahrenheit.map(fahrenheitToKelvin)\n    println(temperaturesInKelvin)\n  }\n}\n```"
  },
  {
    "task": "Use map to calculate the perimeter of each rectangle in a list of dimensions.",
    "code": "```scala\nval dimensions = List((2, 3), (4, 5), (6, 7))\nval perimeters = dimensions.map { case (length, width) => 2 * (length + width) }\n```"
  },
  {
    "task": "Apply map to format a list of phone numbers into a standard format.",
    "code": "```scala\nval phoneNumbers = List(\"1234567890\", \"0987654321\", \"5556667777\")\n\nval formattedNumbers = phoneNumbers.map { number =>\n  val areaCode = number.substring(0, 3)\n  val centralOfficeCode = number.substring(3, 6)\n  val lineNumber = number.substring(6)\n  s\"($areaCode) $centralOfficeCode-$lineNumber\"\n}\n\nformattedNumbers.foreach(println)\n```"
  },
  {
    "task": "Use map to generate a hashed version of passwords from a list.",
    "code": "```scala\nimport java.security.MessageDigest\n\nobject PasswordHasher {\n  def hashPassword(password: String): String = {\n    val md = MessageDigest.getInstance(\"SHA-256\")\n    val hashedBytes = md.digest(password.getBytes(\"UTF-8\"))\n    hashedBytes.map(\"%02x\".format(_)).mkString\n  }\n\n  def main(args: Array[String]): Unit = {\n    val passwords = List(\"password123\", \"helloWorld\", \"securePass\")\n    val hashedPasswords = passwords.map(hashPassword)\n    hashedPasswords.foreach(println)\n  }\n}\n```"
  },
  {
    "task": "Convert a list of text paragraphs to a word count using map.",
    "code": "```scala\nval paragraphs = List(\n  \"Scala is a strong statically typed general-purpose programming language.\",\n  \"It provides support for functional programming and a strong static type system.\",\n  \"Designed to be concise, many of Scala's design decisions are aimed to address criticisms of Java.\"\n)\n\nval wordCounts = paragraphs.map(paragraph => paragraph.split(\"\\\\s+\").length)\n\nprintln(wordCounts)\n```"
  },
  {
    "task": "Use map to remove punctuation from each string in a list of sentences.",
    "code": "```scala\nval sentences = List(\"Hello, world!\", \"Scala is great.\", \"Functional programming!\")\nval cleanedSentences = sentences.map(_.replaceAll(\"\"\"[\\p{Punct}]\"\"\", \"\"))\n```"
  },
  {
    "task": "Transform a list of URLs to their base domain using a map function.",
    "code": "```scala\nval urls = List(\n  \"https://www.example.com/path\",\n  \"http://subdomain.example.org/anotherpath\",\n  \"https://example.net\",\n  \"http://www.example.com?query=123\"\n)\n\ndef getBaseDomain(url: String): String = {\n  val regex = \"\"\"^https?://(?:www\\.)?([^/]+)\"\"\".r\n  url match {\n    case regex(domain) => domain\n    case _ => \"\"\n  }\n}\n\nval baseDomains = urls.map(getBaseDomain)\n```"
  },
  {
    "task": "Use map to translate a list of expressions to their symbolic algebraic forms.",
    "code": "```scala\nobject SymbolicAlgebra {\n  def main(args: Array[String]): Unit = {\n    val expressions = List(\"1 + 2\", \"3 * 4\", \"5 - 6\", \"7 / 8\")\n    val symbolicForms = expressions.map {\n      case expr if expr.contains(\"+\") => expr.replace(\"+\", \" plus \")\n      case expr if expr.contains(\"*\") => expr.replace(\"*\", \" times \")\n      case expr if expr.contains(\"-\") => expr.replace(\"-\", \" minus \")\n      case expr if expr.contains(\"/\") => expr.replace(\"/\", \" divided by \")\n      case expr => expr\n    }\n    symbolicForms.foreach(println)\n  }\n}\n```"
  },
  {
    "task": "Apply map to convert a list of ASCII codes to corresponding characters.",
    "code": "```scala\nval asciiCodes = List(65, 66, 67, 68, 69)\nval characters = asciiCodes.map(_.toChar)\n```"
  },
  {
    "task": "Use map to transform a list of text strings to their lemmatized forms.",
    "code": "```scala\nimport scala.collection.JavaConverters._\nimport edu.stanford.nlp.simple.Document\n\nobject TextLemmatizer {\n  def main(args: Array[String]): Unit = {\n    val texts = List(\"running\", \"jumps\", \"better\", \"cats\")\n    \n    val lemmatizedTexts = texts.map(text => {\n      val doc = new Document(text)\n      doc.sentences().asScala.flatMap(_.lemmas().asScala).mkString(\" \")\n    })\n    \n    println(lemmatizedTexts)\n  }\n}\n```"
  },
  {
    "task": "Convert a list of HTML strings to plain text using map.",
    "code": "```scala\nval htmlList = List(\"<p>Hello</p>\", \"<div>World</div>\", \"<span>!</span>\")\nval plainTextList = htmlList.map(html => html.replaceAll(\"<[^>]*>\", \"\"))\n```"
  },
  {
    "task": "Use map to create a summary of each article in a list of texts.",
    "code": "```scala\nval articles = List(\n  \"Scala is a functional programming language.\",\n  \"It provides a blend of object-oriented and functional programming.\",\n  \"Scala's concise syntax makes it a great choice for developers.\"\n)\n\nval summaries = articles.map(article => s\"Summary: ${article.take(50)}...\")\n\nsummaries.foreach(println)\n```"
  },
  {
    "task": "Transform a list of paths to their absolute paths using a map function.",
    "code": "```scala\nimport java.nio.file.Paths\n\nval paths = List(\"path1\", \"path2\", \"path3\")\nval absolutePaths = paths.map(path => Paths.get(path).toAbsolutePath.toString)\n\nabsolutePaths.foreach(println)\n```"
  },
  {
    "task": "Use map to generate QR codes from a list of URLs.",
    "code": "```scala\nimport java.awt.image.BufferedImage\nimport java.io.File\nimport javax.imageio.ImageIO\n\nimport com.google.zxing.BarcodeFormat\nimport com.google.zxing.MultiFormatWriter\nimport com.google.zxing.client.j2se.MatrixToImageWriter\nimport com.google.zxing.common.BitMatrix\n\nobject QRCodeGenerator {\n  def generateQRCodeImage(url: String, filePath: String): Unit = {\n    val bitMatrix: BitMatrix = new MultiFormatWriter().encode(url, BarcodeFormat.QR_CODE, 200, 200)\n    val bufferedImage: BufferedImage = MatrixToImageWriter.toBufferedImage(bitMatrix)\n    ImageIO.write(bufferedImage, \"png\", new File(filePath))\n  }\n\n  def main(args: Array[String]): Unit = {\n    val urls = List(\n      \"https://example.com\",\n      \"https://anotherexample.com\",\n      \"https://yetanotherexample.com\"\n    )\n\n    urls.zipWithIndex.map { case (url, index) =>\n      generateQRCodeImage(url, s\"qr_code_$index.png\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Convert a list of angles from degrees to radians using map.",
    "code": "```scala\nval degrees = List(0.0, 30.0, 45.0, 60.0, 90.0)\nval radians = degrees.map(deg => deg * math.Pi / 180)\n```"
  },
  {
    "task": "Use map to anonymize a list of IP addresses by masking parts of them.",
    "code": "```scala\nobject AnonymizeIPs extends App {\n  val ipAddresses = List(\"192.168.1.1\", \"172.16.0.1\", \"10.0.0.1\")\n  \n  def maskIp(ip: String): String = {\n    val parts = ip.split(\"\\\\.\")\n    s\"${parts(0)}.${parts(1)}.xxx.xxx\"\n  }\n\n  val anonymizedIPs = ipAddresses.map(maskIp)\n  \n  println(anonymizedIPs)\n}\n```"
  },
  {
    "task": "Transform a list of tuples by swapping their elements using a map function.",
    "code": "```scala\nval tuples = List((1, 'a'), (2, 'b'), (3, 'c'))\nval swappedTuples = tuples.map { case (x, y) => (y, x) }\n```"
  },
  {
    "task": "Use map to compute the greatest common divisor of pairs in a list of number pairs.",
    "code": "```scala\nobject GCDMapExample extends App {\n  val pairs = List((48, 18), (56, 98), (101, 103), (60, 48))\n\n  def gcd(a: Int, b: Int): Int = {\n    if (b == 0) a else gcd(b, a % b)\n  }\n\n  val gcdResults = pairs.map { case (a, b) => gcd(a, b) }\n\n  println(gcdResults)\n}\n```"
  },
  {
    "task": "Convert a list of file paths to their directory names using map.",
    "code": "```scala\nval filePaths = List(\"/home/user/docs/file1.txt\", \"/home/user/docs/file2.txt\", \"/home/user/photos/photo.jpg\")\n\nval directoryNames = filePaths.map { path =>\n  val separatorIndex = path.lastIndexOf(\"/\")\n  if (separatorIndex != -1) path.substring(0, separatorIndex) else \"\"\n}\n\nprintln(directoryNames)\n```"
  },
  {
    "task": "Use map to replace each vowel in a list of strings with a specific character.",
    "code": "```scala\nval strings = List(\"apple\", \"orange\", \"grape\")\nval vowels = Set('a', 'e', 'i', 'o', 'u')\nval replacementChar = '*'\n\nval updatedStrings = strings.map { str =>\n  str.map { char =>\n    if (vowels.contains(char.toLower)) replacementChar else char\n  }\n}\n\nprintln(updatedStrings)\n```"
  },
  {
    "task": "Transform a list of integers to their hexadecimal representations using map.",
    "code": "```scala\nval numbers = List(10, 15, 255, 1024)\nval hexNumbers = numbers.map(_.toHexString)\n```"
  },
  {
    "task": "Use map to apply a transformation matrix to a list of 2D vectors.",
    "code": "```scala\nobject Transform2DVectors {\n  def main(args: Array[String]): Unit = {\n    val vectors = List((1.0, 2.0), (3.0, 4.0), (5.0, 6.0))\n    val transformationMatrix = ((2.0, 0.0), (0.0, 2.0))\n\n    val transformedVectors = vectors.map { case (x, y) =>\n      (\n        transformationMatrix._1._1 * x + transformationMatrix._1._2 * y,\n        transformationMatrix._2._1 * x + transformationMatrix._2._2 * y\n      )\n    }\n\n    println(transformedVectors)\n  }\n}\n```"
  },
  {
    "task": "Convert a list of text strings to their phonetic alphabet equivalents using map.",
    "code": "```scala\nobject PhoneticAlphabetConverter {\n  val phoneticMap = Map(\n    \"A\" -> \"Alpha\", \"B\" -> \"Bravo\", \"C\" -> \"Charlie\", \"D\" -> \"Delta\", \n    \"E\" -> \"Echo\", \"F\" -> \"Foxtrot\", \"G\" -> \"Golf\", \"H\" -> \"Hotel\", \n    \"I\" -> \"India\", \"J\" -> \"Juliett\", \"K\" -> \"Kilo\", \"L\" -> \"Lima\", \n    \"M\" -> \"Mike\", \"N\" -> \"November\", \"O\" -> \"Oscar\", \"P\" -> \"Papa\", \n    \"Q\" -> \"Quebec\", \"R\" -> \"Romeo\", \"S\" -> \"Sierra\", \"T\" -> \"Tango\", \n    \"U\" -> \"Uniform\", \"V\" -> \"Victor\", \"W\" -> \"Whiskey\", \"X\" -> \"X-ray\", \n    \"Y\" -> \"Yankee\", \"Z\" -> \"Zulu\"\n  )\n\n  def convertToPhonetic(textList: List[String]): List[List[String]] = {\n    textList.map(_.toUpperCase.map(phoneticMap.getOrElse(_, \"\")).toList)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val texts = List(\"Hello\", \"World\")\n    val phoneticTexts = convertToPhonetic(texts)\n    println(phoneticTexts)\n  }\n}\n```"
  },
  {
    "task": "Use map to determine if each word in a list is a palindrome, returning booleans.",
    "code": "```scala\nval words = List(\"level\", \"world\", \"radar\", \"hello\", \"civic\")\nval isPalindrome = words.map(word => word == word.reverse)\n```"
  },
  {
    "task": "Transform a list of dictionaries by renaming a specified key using a map function.",
    "code": "```scala\nval list = List(\n  Map(\"oldKey\" -> \"value1\", \"anotherKey\" -> \"value2\"),\n  Map(\"oldKey\" -> \"value3\", \"anotherKey\" -> \"value4\")\n)\n\nval transformedList = list.map { dict =>\n  dict.map {\n    case (\"oldKey\", value) => \"newKey\" -> value\n    case other => other\n  }\n}\n\nprintln(transformedList)\n```"
  },
  {
    "task": "Use map to compute the logarithm of each number in a list.",
    "code": "```scala\nimport scala.math.log\n\nval numbers = List(1.0, 2.0, 3.0, 4.0, 5.0)\nval logarithms = numbers.map(log)\n```"
  },
  {
    "task": "Convert a list of image file paths to grayscale versions using map.",
    "code": "```scala\ndef convertToGrayscale(imagePath: String): String = {\n  // Placeholder for actual grayscale conversion logic\n  imagePath.replace(\".jpg\", \"_grayscale.jpg\")\n}\n\nval imagePaths = List(\"image1.jpg\", \"image2.jpg\", \"image3.jpg\")\nval grayscaleImages = imagePaths.map(convertToGrayscale)\n```"
  },
  {
    "task": "Use map to flatten a list of lists of strings into a single list of strings.",
    "code": "```scala\nval listOfLists: List[List[String]] = List(List(\"Hello\", \"World\"), List(\"Functional\", \"Map\"), List(\"Scala\", \"Code\"))\nval flattenedList: List[String] = listOfLists.flatten\n```"
  },
  {
    "task": "Transform a list of temperature readings to temperature anomalies using a map function.",
    "code": "```scala\nval temperatureReadings = List(15.5, 16.0, 14.8, 17.2, 15.0)\nval averageTemperature = temperatureReadings.sum / temperatureReadings.length\n\nval temperatureAnomalies = temperatureReadings.map(reading => reading - averageTemperature)\n```"
  }
]