[
  {
    "task": "Write a program that prints numbers from 1 to 10 using a for loop.",
    "code": "```scala\nobject PrintNumbers {\n  def main(args: Array[String]): Unit = {\n    for (i <- 1 to 10) {\n      println(i)\n    }\n  }\n}\n```"
  },
  {
    "task": "Create a loop that iterates over an array of names and prints each name.",
    "code": "```scala\nobject NamePrinter {\n  def main(args: Array[String]): Unit = {\n    val names = Array(\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\")\n    for (name <- names) {\n      println(name)\n    }\n  }\n}\n```"
  },
  {
    "task": "Design a for loop to calculate the factorial of a given number.",
    "code": "```scala\ndef factorial(n: Int): Int = {\n  var result = 1\n  for (i <- 1 to n) {\n    result *= i\n  }\n  result\n}\n```"
  },
  {
    "task": "Implement a program that uses a for loop to sum all even numbers between 1 and 100.",
    "code": "```scala\nobject SumEvenNumbers extends App {\n  var sum = 0\n  for (i <- 1 to 100 if i % 2 == 0) {\n    sum += i\n  }\n  println(sum)\n}\n```"
  },
  {
    "task": "Use a for loop to generate and print the Fibonacci sequence up to 20 terms.",
    "code": "```scala\nobject FibonacciSequence extends App {\n  var a = 0\n  var b = 1\n\n  for (_ <- 0 until 20) {\n    println(a)\n    val next = a + b\n    a = b\n    b = next\n  }\n}\n```"
  },
  {
    "task": "Construct a for loop that prints the multiplication table for a given number.",
    "code": "```scala\nobject MultiplicationTable {\n  def printTable(number: Int): Unit = {\n    for (i <- 1 to 10) {\n      println(s\"$number x $i = ${number * i}\")\n    }\n  }\n\n  def main(args: Array[String]): Unit = {\n    printTable(5) // You can change the number here\n  }\n}\n```"
  },
  {
    "task": "Write code to iterate through a list of student grades and print only those above a certain threshold.",
    "code": "```scala\nobject GradeFilter {\n  def main(args: Array[String]): Unit = {\n    val grades = List(85, 92, 78, 88, 95, 67)\n    val threshold = 80\n\n    for (grade <- grades if grade > threshold) {\n      println(grade)\n    }\n  }\n}\n```"
  },
  {
    "task": "Create a for loop that appends the square of numbers 1 to 10 to a list.",
    "code": "```scala\nval squares = for (i <- 1 to 10) yield i * i\n```"
  },
  {
    "task": "Develop a for loop that reverses a given string.",
    "code": "```scala\ndef reverseString(input: String): String = {\n  var reversed = \"\"\n  for (i <- input.length - 1 to 0 by -1) {\n    reversed += input(i)\n  }\n  reversed\n}\n\n// Example usage\nval originalString = \"Hello, World!\"\nval reversedString = reverseString(originalString)\nprintln(reversedString) // Output: !dlroW ,olleH\n```"
  },
  {
    "task": "Build a program that uses a for loop to print all elements in a 2D matrix.",
    "code": "```scala\nobject MatrixPrinter {\n  def main(args: Array[String]): Unit = {\n    val matrix = Array(\n      Array(1, 2, 3),\n      Array(4, 5, 6),\n      Array(7, 8, 9)\n    )\n    \n    for (row <- matrix) {\n      for (element <- row) {\n        println(element)\n      }\n    }\n  }\n}\n```"
  },
  {
    "task": "Use a for loop to find the maximum value in an array of integers.",
    "code": "```scala\nobject MaxValueFinder {\n  def findMaxValue(arr: Array[Int]): Int = {\n    var max = Int.MinValue\n    for (num <- arr) {\n      if (num > max) {\n        max = num\n      }\n    }\n    max\n  }\n\n  def main(args: Array[String]): Unit = {\n    val numbers = Array(3, 5, 7, 2, 8, -1, 4)\n    println(s\"The maximum value is: ${findMaxValue(numbers)}\")\n  }\n}\n```"
  },
  {
    "task": "Write a program that uses a for loop to print the characters of a string, one per line.",
    "code": "```scala\nobject PrintCharacters {\n  def main(args: Array[String]): Unit = {\n    val str = \"Hello, World!\"\n    for (ch <- str) {\n      println(ch)\n    }\n  }\n}\n```"
  },
  {
    "task": "Create a for loop that counts the number of vowels in a given sentence.",
    "code": "```scala\nobject VowelCounter {\n  def main(args: Array[String]): Unit = {\n    val sentence = \"Your example sentence goes here.\"\n    val vowels = \"aeiouAEIOU\"\n    var count = 0\n\n    for (char <- sentence) {\n      if (vowels.contains(char)) {\n        count += 1\n      }\n    }\n\n    println(s\"Number of vowels: $count\")\n  }\n}\n```"
  },
  {
    "task": "Implement a for loop to check if a number is prime by testing divisibility.",
    "code": "```scala\ndef isPrime(number: Int): Boolean = {\n  if (number <= 1) return false\n  for (i <- 2 until number) {\n    if (number % i == 0) return false\n  }\n  true\n}\n```"
  },
  {
    "task": "Design a for loop that prints a pyramid pattern of asterisks with a given height.",
    "code": "```scala\ndef printPyramid(height: Int): Unit = {\n  for (i <- 0 until height) {\n    val spaces = \" \" * (height - i - 1)\n    val stars = \"*\" * (2 * i + 1)\n    println(spaces + stars)\n  }\n}\n\nprintPyramid(5)\n```"
  },
  {
    "task": "Write a program that uses a for loop to calculate the sum of digits of a number.",
    "code": "```scala\nobject SumOfDigits {\n  def main(args: Array[String]): Unit = {\n    val number = 12345\n    val sumOfDigits = number.toString.map(_.asDigit).sum\n    println(s\"Sum of digits: $sumOfDigits\")\n  }\n}\n```"
  },
  {
    "task": "Construct a for loop to flatten a list of lists into a single list.",
    "code": "```scala\nval listOfLists = List(List(1, 2, 3), List(4, 5), List(6, 7, 8))\nval flattenedList = (for {\n  sublist <- listOfLists\n  element <- sublist\n} yield element).toList\n```"
  },
  {
    "task": "Use a for loop to generate a list of random numbers and print them.",
    "code": "```scala\nimport scala.util.Random\n\nobject RandomNumbers {\n  def main(args: Array[String]): Unit = {\n    val randomNumbers = for (_ <- 1 to 10) yield Random.nextInt(100)\n    randomNumbers.foreach(println)\n  }\n}\n```"
  },
  {
    "task": "Create a for loop that iterates through a dictionary and prints its keys and values.",
    "code": "```scala\nval dictionary = Map(\"a\" -> 1, \"b\" -> 2, \"c\" -> 3)\n\nfor ((key, value) <- dictionary) {\n  println(s\"Key: $key, Value: $value\")\n}\n```"
  },
  {
    "task": "Develop a for loop that counts down from 10 to 1 and prints each number.",
    "code": "```scala\nfor (i <- 10 to 1 by -1) {\n  println(i)\n}\n```"
  },
  {
    "task": "Write code to multiply each element in an array by 2 using a for loop.",
    "code": "```scala\nval array = Array(1, 2, 3, 4, 5)\nval result = new Array[Int](array.length)\n\nfor (i <- array.indices) {\n  result(i) = array(i) * 2\n}\n```"
  },
  {
    "task": "Create a for loop that calculates the average of numbers in a list.",
    "code": "```scala\nval numbers = List(1, 2, 3, 4, 5)\nvar sum = 0\nfor (number <- numbers) {\n  sum += number\n}\nval average = sum.toDouble / numbers.length\nprintln(s\"Average: $average\")\n```"
  },
  {
    "task": "Implement a for loop to find duplicate elements in an array.",
    "code": "```scala\nobject DuplicateFinder extends App {\n  val array = Array(1, 2, 3, 4, 5, 1, 6, 2, 7)\n  var duplicates = Set[Int]()\n  var seen = Set[Int]()\n\n  for (element <- array) {\n    if (seen.contains(element)) {\n      duplicates += element\n    } else {\n      seen += element\n    }\n  }\n\n  println(s\"Duplicate elements: ${duplicates.mkString(\", \")}\")\n}\n```"
  },
  {
    "task": "Design a for loop that removes all occurrences of a specific element from a list.",
    "code": "```scala\ndef removeElement[T](list: List[T], element: T): List[T] = {\n  val result = for (item <- list if item != element) yield item\n  result\n}\n\n// Example usage:\nval originalList = List(1, 2, 3, 2, 4)\nval updatedList = removeElement(originalList, 2)\nprintln(updatedList) // Output: List(1, 3, 4)\n```"
  },
  {
    "task": "Use a for loop to simulate rolling a dice 100 times and count the occurrences of each face.",
    "code": "```scala\nobject DiceRollSimulation extends App {\n  val occurrences = Array.fill(6)(0)\n\n  for (_ <- 1 to 100) {\n    val roll = scala.util.Random.nextInt(6) + 1\n    occurrences(roll - 1) += 1\n  }\n\n  occurrences.zipWithIndex.foreach { case (count, face) =>\n    println(s\"Face ${face + 1}: $count times\")\n  }\n}\n```"
  },
  {
    "task": "Write a for loop that prints all the prime numbers between 1 and 50.",
    "code": "```scala\nobject PrimeNumbers {\n  def main(args: Array[String]): Unit = {\n    for (num <- 2 to 50) {\n      if (isPrime(num)) println(num)\n    }\n  }\n\n  def isPrime(n: Int): Boolean = {\n    if (n <= 1) return false\n    for (i <- 2 until n) {\n      if (n % i == 0) return false\n    }\n    true\n  }\n}\n```"
  },
  {
    "task": "Develop a for loop that extracts all the uppercase letters from a string.",
    "code": "```scala\nval inputString = \"Extract UPPerCase Letters\"\nval uppercaseLetters = for {\n  char <- inputString\n  if char.isUpper\n} yield char\n\nprintln(uppercaseLetters)\n```"
  },
  {
    "task": "Create a for loop that checks if a list is sorted in ascending order.",
    "code": "```scala\nval list = List(1, 2, 3, 4, 5)\nvar isSorted = true\n\nfor (i <- 0 until list.length - 1 if isSorted) {\n  if (list(i) > list(i + 1)) {\n    isSorted = false\n  }\n}\n\nprintln(s\"List is sorted: $isSorted\")\n```"
  },
  {
    "task": "Implement a for loop to generate a list of the first 10 square numbers.",
    "code": "```scala\nval squares = for (i <- 1 to 10) yield i * i\n```"
  },
  {
    "task": "Write code to print all the elements of a list that are greater than a given number using a for loop.",
    "code": "```scala\nval numbers = List(1, 5, 10, 15, 20)\nval threshold = 10\n\nfor (number <- numbers if number > threshold) {\n  println(number)\n}\n```"
  },
  {
    "task": "Construct a for loop that finds the smallest number in an array.",
    "code": "```scala\nobject FindSmallest extends App {\n  val numbers = Array(3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5)\n  var smallest = numbers(0)\n  \n  for (num <- numbers) {\n    if (num < smallest) {\n      smallest = num\n    }\n  }\n  \n  println(s\"The smallest number is: $smallest\")\n}\n```"
  },
  {
    "task": "Develop a for loop that prints the first N lines of Pascal's Triangle.",
    "code": "```scala\ndef printPascalsTriangle(n: Int): Unit = {\n  for (line <- 0 until n) {\n    var c = 1\n    for (i <- 0 to line) {\n      print(s\"$c \")\n      c = c * (line - i) / (i + 1)\n    }\n    println()\n  }\n}\n\n// Example usage:\nprintPascalsTriangle(5)\n```"
  },
  {
    "task": "Create a for loop that calculates the product of all elements in a list.",
    "code": "```scala\nval numbers = List(1, 2, 3, 4, 5)\nvar product = 1\nfor (number <- numbers) {\n  product *= number\n}\n```"
  },
  {
    "task": "Use a for loop to print numbers from 1 to 100, but replace multiples of 3 with 'Fizz'.",
    "code": "```scala\nfor (i <- 1 to 100) {\n  if (i % 3 == 0) println(\"Fizz\")\n  else println(i)\n}\n```"
  },
  {
    "task": "Write a for loop that iterates over a string and counts the number of words.",
    "code": "```scala\nval inputString = \"This is a sample string to count words\"\nvar wordCount = 0\n\nfor (i <- inputString.split(\"\\\\s+\")) {\n  if (i.nonEmpty) {\n    wordCount += 1\n  }\n}\n\nprintln(s\"Number of words: $wordCount\")\n```"
  },
  {
    "task": "Design a for loop that prints numbers from 1 to 50, but skips numbers divisible by 5.",
    "code": "```scala\nfor (i <- 1 to 50 if i % 5 != 0) {\n  println(i)\n}\n```"
  },
  {
    "task": "Implement a for loop that prints a checkerboard pattern of asterisks.",
    "code": "```scala\nobject CheckerboardPattern {\n  def main(args: Array[String]): Unit = {\n    val size = 8\n    for (i <- 0 until size) {\n      for (j <- 0 until size) {\n        if ((i + j) % 2 == 0) print(\"*\") else print(\" \")\n      }\n      println()\n    }\n  }\n}\n```"
  },
  {
    "task": "Create a for loop that finds the index of a target value in a list.",
    "code": "```scala\nval list = List(1, 2, 3, 4, 5)\nval target = 3\nvar index = -1\n\nfor (i <- list.indices) {\n  if (list(i) == target) {\n    index = i\n  }\n}\n\nprintln(index)\n```"
  },
  {
    "task": "Use a for loop to concatenate a list of strings into a single string.",
    "code": "```scala\nval strings = List(\"Hello\", \"World\", \"Scala\", \"is\", \"fun\")\nvar result = \"\"\nfor (str <- strings) {\n  result += str\n}\n```"
  },
  {
    "task": "Develop a for loop that rotates a list to the right by a given number of positions.",
    "code": "```scala\ndef rotateRight[A](lst: List[A], positions: Int): List[A] = {\n  val len = lst.length\n  val shift = if (len == 0) 0 else positions % len\n  (0 until len).map(i => lst((len - shift + i) % len)).toList\n}\n```"
  },
  {
    "task": "Write code that uses a for loop to insert an element into a sorted list while maintaining order.",
    "code": "```scala\ndef insertIntoSortedList(sortedList: List[Int], element: Int): List[Int] = {\n  (for (i <- 0 to sortedList.length) yield {\n    if (i < sortedList.length && sortedList(i) < element) sortedList(i)\n    else if (i == sortedList.length || sortedList(i) >= element) element\n    else sortedList(i)\n  }).toList\n}\n\nval sortedList = List(1, 3, 4, 7, 9)\nval elementToInsert = 5\nval updatedList = insertIntoSortedList(sortedList, elementToInsert)\n\nprintln(updatedList)\n```"
  },
  {
    "task": "Implement a for loop that counts the frequency of each character in a string.",
    "code": "```scala\nval inputString = \"example string\"\nval frequencyMap = scala.collection.mutable.Map[Char, Int]()\n\nfor (char <- inputString) {\n  frequencyMap(char) = frequencyMap.getOrElse(char, 0) + 1\n}\n\nprintln(frequencyMap)\n```"
  },
  {
    "task": "Create a for loop that prints all subsets of a given set.",
    "code": "```scala\nobject Subsets {\n  def main(args: Array[String]): Unit = {\n    val set = Set(1, 2, 3)\n    val subsets = generateSubsets(set)\n    for (subset <- subsets) {\n      println(subset)\n    }\n  }\n\n  def generateSubsets[T](set: Set[T]): Set[Set[T]] = {\n    set.foldLeft(Set(Set.empty[T])) { (acc, elem) =>\n      acc ++ acc.map(_ + elem)\n    }\n  }\n}\n```"
  },
  {
    "task": "Design a for loop to generate all permutations of a string.",
    "code": "```scala\ndef permutations(s: String): List[String] = {\n  if (s.length == 1) List(s)\n  else {\n    for {\n      i <- s.indices.toList\n      perm <- permutations(s.take(i) + s.drop(i + 1))\n    } yield s(i) + perm\n  }\n}\n\n// Example usage\nval result = permutations(\"abc\")\nresult.foreach(println)\n```"
  },
  {
    "task": "Write a for loop that sorts an array in descending order.",
    "code": "```scala\nobject DescendingSort {\n  def main(args: Array[String]): Unit = {\n    val array = Array(5, 2, 9, 1, 5, 6)\n    for (i <- 0 until array.length - 1) {\n      for (j <- i + 1 until array.length) {\n        if (array(i) < array(j)) {\n          val temp = array(i)\n          array(i) = array(j)\n          array(j) = temp\n        }\n      }\n    }\n    println(array.mkString(\", \"))\n  }\n}\n```"
  },
  {
    "task": "Use a for loop to generate a sequence of random characters and print them.",
    "code": "```scala\nimport scala.util.Random\n\nval random = new Random\nval length = 10 // Define the length of the random sequence\n\nfor (_ <- 1 to length) {\n  val randomChar = (random.nextInt(26) + 'a').toChar\n  print(randomChar)\n}\nprintln()\n```"
  },
  {
    "task": "Construct a for loop that finds the common elements between two lists.",
    "code": "```scala\nval list1 = List(1, 2, 3, 4, 5)\nval list2 = List(4, 5, 6, 7, 8)\nval commonElements = for {\n  element <- list1\n  if list2.contains(element)\n} yield element\n\nprintln(commonElements)\n```"
  },
  {
    "task": "Develop a for loop to calculate and print the cumulative sum of a list.",
    "code": "```scala\nobject CumulativeSum {\n  def main(args: Array[String]): Unit = {\n    val numbers = List(1, 2, 3, 4, 5)\n    var cumulativeSum = 0\n\n    for (num <- numbers) {\n      cumulativeSum += num\n      println(cumulativeSum)\n    }\n  }\n}\n```"
  },
  {
    "task": "Create a for loop that prints a diamond pattern using asterisks.",
    "code": "```scala\nobject DiamondPattern {\n  def main(args: Array[String]): Unit = {\n    val n = 5\n    for (i <- 0 until n) {\n      for (j <- 0 until n - i - 1) print(\" \")\n      for (j <- 0 until 2 * i + 1) print(\"*\")\n      println()\n    }\n    for (i <- n - 2 to 0 by -1) {\n      for (j <- 0 until n - i - 1) print(\" \")\n      for (j <- 0 until 2 * i + 1) print(\"*\")\n      println()\n    }\n  }\n}\n```"
  },
  {
    "task": "Write a for loop that simulates a countdown timer from a specified number of seconds.",
    "code": "```scala\nobject CountdownTimer extends App {\n  val startTimeInSeconds = 10\n  for (seconds <- startTimeInSeconds to 0 by -1) {\n    println(s\"Time left: $seconds seconds\")\n    Thread.sleep(1000)\n  }\n  println(\"Countdown finished!\")\n}\n```"
  },
  {
    "task": "Use a for loop to print the transpose of a matrix.",
    "code": "```scala\nval matrix = Array(\n  Array(1, 2, 3),\n  Array(4, 5, 6),\n  Array(7, 8, 9)\n)\n\nfor (j <- matrix(0).indices) {\n  for (i <- matrix.indices) {\n    print(matrix(i)(j) + \" \")\n  }\n  println()\n}\n```"
  },
  {
    "task": "Implement a for loop that reverses the order of words in a sentence.",
    "code": "```scala\nobject ReverseWords extends App {\n  val sentence = \"The quick brown fox jumps over the lazy dog\"\n  val words = sentence.split(\" \")\n  val reversedSentence = (for (i <- words.indices.reverse) yield words(i)).mkString(\" \")\n  println(reversedSentence)\n}\n```"
  },
  {
    "task": "Create a for loop that deletes elements from a list that are less than a given value.",
    "code": "```scala\nval threshold = 5\nval originalList = List(1, 6, 3, 8, 4)\nval filteredList = for (x <- originalList if x >= threshold) yield x\nprintln(filteredList)\n```"
  },
  {
    "task": "Design a for loop to merge two sorted lists into a single sorted list.",
    "code": "```scala\ndef mergeSortedLists(list1: List[Int], list2: List[Int]): List[Int] = {\n  var i = 0\n  var j = 0\n  var mergedList = List[Int]()\n\n  while (i < list1.length && j < list2.length) {\n    if (list1(i) < list2(j)) {\n      mergedList = mergedList :+ list1(i)\n      i += 1\n    } else {\n      mergedList = mergedList :+ list2(j)\n      j += 1\n    }\n  }\n\n  for (k <- i until list1.length) {\n    mergedList = mergedList :+ list1(k)\n  }\n\n  for (k <- j until list2.length) {\n    mergedList = mergedList :+ list2(k)\n  }\n\n  mergedList\n}\n\n// Example usage:\n// val sortedList1 = List(1, 3, 5, 7)\n// val sortedList2 = List(2, 4, 6, 8)\n// println(mergeSortedLists(sortedList1, sortedList2)) // Output: List(1, 2, 3, 4, 5, 6, 7, 8)\n```"
  },
  {
    "task": "Write a for loop that calculates the power of a number using repeated multiplication.",
    "code": "```scala\ndef power(base: Double, exponent: Int): Double = {\n  var result = 1.0\n  for (_ <- 1 to exponent) {\n    result *= base\n  }\n  result\n}\n\n// Example usage\nval base = 2.0\nval exponent = 3\nval result = power(base, exponent)\nprintln(s\"$base raised to the power of $exponent is $result\")\n```"
  },
  {
    "task": "Use a for loop to find the longest word in a list of words.",
    "code": "```scala\nobject LongestWordFinder {\n  def main(args: Array[String]): Unit = {\n    val words = List(\"apple\", \"banana\", \"strawberry\", \"kiwi\", \"pineapple\")\n    var longestWord = \"\"\n    \n    for (word <- words) {\n      if (word.length > longestWord.length) {\n        longestWord = word\n      }\n    }\n    \n    println(s\"The longest word is: $longestWord\")\n  }\n}\n```"
  },
  {
    "task": "Develop a for loop that sorts a list of tuples based on the second element.",
    "code": "```scala\nval tuples = List((1, 3), (4, 1), (2, 2))\nval sortedTuples = tuples.sortBy(_._2)\n\nfor (tuple <- sortedTuples) {\n  println(tuple)\n}\n```"
  },
  {
    "task": "Create a for loop that replicates each character in a string a given number of times.",
    "code": "```scala\ndef replicateCharacters(input: String, times: Int): String = {\n  val builder = new StringBuilder\n  for (char <- input) {\n    for (_ <- 1 to times) {\n      builder.append(char)\n    }\n  }\n  builder.toString()\n}\n\n// Example usage\nval result = replicateCharacters(\"hello\", 3)\nprintln(result)  // Output: hhheeelllllooo\n```"
  },
  {
    "task": "Construct a for loop that replaces spaces in a string with hyphens.",
    "code": "```scala\nval input = \"This is a sample string\"\nval result = new StringBuilder\nfor (char <- input) {\n  if (char == ' ') result.append('-')\n  else result.append(char)\n}\nval output = result.toString\nprintln(output)\n```"
  },
  {
    "task": "Design a for loop to find the intersection of two sets.",
    "code": "```scala\nval set1 = Set(1, 2, 3, 4, 5)\nval set2 = Set(4, 5, 6, 7, 8)\n\nval intersection = for {\n  elem <- set1\n  if set2.contains(elem)\n} yield elem\n\nprintln(intersection)\n```"
  },
  {
    "task": "Write a for loop that generates a list of prime numbers up to a given number.",
    "code": "```scala\ndef isPrime(n: Int): Boolean = {\n  if (n <= 1) false\n  else if (n == 2) true\n  else !(2 until n).exists(n % _ == 0)\n}\n\ndef generatePrimes(limit: Int): List[Int] = {\n  (2 to limit).filter(isPrime).toList\n}\n\n// Example usage\nval limit = 30\nval primes = generatePrimes(limit)\nprintln(primes)\n```"
  },
  {
    "task": "Use a for loop to implement a simple text-based progress bar.",
    "code": "```scala\nobject ProgressBar {\n  def main(args: Array[String]): Unit = {\n    val totalSteps = 10\n    for (step <- 1 to totalSteps) {\n      val progress = \"=\" * step\n      val remaining = \" \" * (totalSteps - step)\n      print(s\"[$progress$remaining]\\r\")\n      Thread.sleep(500) // Simulate work with a delay\n    }\n    println()\n  }\n}\n```"
  },
  {
    "task": "Implement a for loop that finds and prints all palindromic numbers between 10 and 200.",
    "code": "```scala\nobject PalindromeFinder extends App {\n  for (number <- 10 to 200) {\n    val strNum = number.toString\n    if (strNum == strNum.reverse) {\n      println(number)\n    }\n  }\n}\n```"
  },
  {
    "task": "Create a for loop that multiplies corresponding elements of two lists and stores the result.",
    "code": "```scala\nval list1 = List(1, 2, 3)\nval list2 = List(4, 5, 6)\nval result = for ((a, b) <- list1.zip(list2)) yield a * b\n```"
  },
  {
    "task": "Develop a for loop that finds the difference between the largest and smallest numbers in a list.",
    "code": "```scala\nobject DifferenceCalculator {\n  def main(args: Array[String]): Unit = {\n    val numbers = List(3, 7, 2, 9, 5)\n    var min = Int.MaxValue\n    var max = Int.MinValue\n\n    for (number <- numbers) {\n      if (number < min) min = number\n      if (number > max) max = number\n    }\n\n    val difference = max - min\n    println(s\"The difference between the largest and smallest numbers is: $difference\")\n  }\n}\n```"
  },
  {
    "task": "Write a for loop that prints numbers from 1 to 100, replacing multiples of 5 with 'Buzz'.",
    "code": "```scala\nfor (i <- 1 to 100) {\n  if (i % 5 == 0) println(\"Buzz\")\n  else println(i)\n}\n```"
  },
  {
    "task": "Use a for loop to convert a list of integers into their binary representation.",
    "code": "```scala\nval numbers = List(1, 2, 3, 4, 5)\nval binaryNumbers = for (number <- numbers) yield number.toBinaryString\nprintln(binaryNumbers)\n```"
  },
  {
    "task": "Design a for loop that fills a 2D array with consecutive numbers in a spiral pattern.",
    "code": "```scala\nobject SpiralMatrix {\n  def generateSpiralMatrix(n: Int): Array[Array[Int]] = {\n    val matrix = Array.ofDim[Int](n, n)\n    var num = 1\n    var top = 0\n    var bottom = n - 1\n    var left = 0\n    var right = n - 1\n\n    while (top <= bottom && left <= right) {\n      for (i <- left to right) {\n        matrix(top)(i) = num\n        num += 1\n      }\n      top += 1\n\n      for (i <- top to bottom) {\n        matrix(i)(right) = num\n        num += 1\n      }\n      right -= 1\n\n      if (top <= bottom) {\n        for (i <- right to left by -1) {\n          matrix(bottom)(i) = num\n          num += 1\n        }\n        bottom -= 1\n      }\n\n      if (left <= right) {\n        for (i <- bottom to top by -1) {\n          matrix(i)(left) = num\n          num += 1\n        }\n        left += 1\n      }\n    }\n\n    matrix\n  }\n\n  def main(args: Array[String]): Unit = {\n    val n = 4 // Example size\n    val matrix = generateSpiralMatrix(n)\n    matrix.foreach(row => println(row.mkString(\" \")))\n  }\n}\n```"
  },
  {
    "task": "Create a for loop that iterates over a list and removes duplicates.",
    "code": "```scala\nval list = List(1, 2, 3, 2, 4, 1, 5)\nvar seen = Set[Int]()\nval result = for (x <- list if !seen(x)) yield {\n  seen += x\n  x\n}\nprintln(result)\n```"
  },
  {
    "task": "Implement a for loop to calculate the dot product of two vectors.",
    "code": "```scala\nobject DotProductCalculator {\n  def calculateDotProduct(vector1: Array[Int], vector2: Array[Int]): Int = {\n    var dotProduct = 0\n    for (i <- vector1.indices) {\n      dotProduct += vector1(i) * vector2(i)\n    }\n    dotProduct\n  }\n\n  def main(args: Array[String]): Unit = {\n    val vector1 = Array(1, 2, 3)\n    val vector2 = Array(4, 5, 6)\n    val result = calculateDotProduct(vector1, vector2)\n    println(s\"The dot product is: $result\")\n  }\n}\n```"
  },
  {
    "task": "Write a for loop that prints a sequence of numbers in reverse order.",
    "code": "```scala\nfor (i <- 10 to 1 by -1) {\n  println(i)\n}\n```"
  },
  {
    "task": "Develop a for loop that computes the greatest common divisor (GCD) of two numbers.",
    "code": "```scala\ndef gcd(a: Int, b: Int): Int = {\n  var x = math.abs(a)\n  var y = math.abs(b)\n  for (_ <- 1 to math.max(x, y)) {\n    val temp = y\n    y = x % y\n    x = temp\n    if (y == 0) return x\n  }\n  x\n}\n```"
  },
  {
    "task": "Construct a for loop that prints a square pattern of numbers with a given side length.",
    "code": "```scala\ndef printSquarePattern(sideLength: Int): Unit = {\n  for (_ <- 1 to sideLength) {\n    for (_ <- 1 to sideLength) {\n      print(sideLength + \" \")\n    }\n    println()\n  }\n}\n\n// Example usage:\nprintSquarePattern(5)\n```"
  },
  {
    "task": "Create a for loop that shifts all elements of a list to the left by one position.",
    "code": "```scala\nobject ShiftLeft {\n  def shiftLeft[T](list: List[T]): List[T] = {\n    if (list.isEmpty) list\n    else {\n      val shiftedList = for (i <- 1 until list.length) yield list(i)\n      shiftedList.toList :+ list.head\n    }\n  }\n  \n  def main(args: Array[String]): Unit = {\n    val list = List(1, 2, 3, 4, 5)\n    val shifted = shiftLeft(list)\n    println(shifted)\n  }\n}\n```"
  },
  {
    "task": "Use a for loop to print the first 20 triangular numbers.",
    "code": "```scala\nobject TriangularNumbers extends App {\n  for (n <- 1 to 20) {\n    val triangularNumber = n * (n + 1) / 2\n    println(triangularNumber)\n  }\n}\n```"
  },
  {
    "task": "Write a for loop that finds the first repeating character in a string.",
    "code": "```scala\ndef firstRepeatingCharacter(s: String): Option[Char] = {\n  val seen = scala.collection.mutable.Set[Char]()\n  for (c <- s) {\n    if (seen.contains(c)) return Some(c)\n    seen += c\n  }\n  None\n}\n\n// Example usage\nval result = firstRepeatingCharacter(\"scala\")\nprintln(result.getOrElse(\"No repeating character found\"))\n```"
  },
  {
    "task": "Design a for loop that transforms a list of temperatures from Celsius to Fahrenheit.",
    "code": "```scala\nval celsiusTemperatures = List(0.0, 20.0, 37.0, 100.0)\nval fahrenheitTemperatures = for (celsius <- celsiusTemperatures) yield celsius * 9 / 5 + 32\n```"
  },
  {
    "task": "Implement a for loop to determine if a string is an isogram.",
    "code": "```scala\ndef isIsogram(s: String): Boolean = {\n  val lowerCaseString = s.toLowerCase\n  for (i <- 0 until lowerCaseString.length) {\n    for (j <- i + 1 until lowerCaseString.length) {\n      if (lowerCaseString(i) == lowerCaseString(j)) {\n        return false\n      }\n    }\n  }\n  true\n}\n```"
  },
  {
    "task": "Use a for loop to create a histogram from a list of integers.",
    "code": "```scala\nval numbers = List(1, 2, 2, 3, 3, 3, 4, 4, 4, 4)\nval histogram = scala.collection.mutable.Map[Int, Int]().withDefaultValue(0)\n\nfor (num <- numbers) {\n  histogram(num) += 1\n}\n\nfor ((key, value) <- histogram) {\n  println(s\"$key: \" + \"#\" * value)\n}\n```"
  },
  {
    "task": "Create a for loop that prints the indexes of all occurrences of a particular element in a list.",
    "code": "```scala\nval list = List(1, 2, 3, 2, 4, 2, 5)\nval elementToFind = 2\n\nfor (i <- list.indices if list(i) == elementToFind) {\n  println(i)\n}\n```"
  },
  {
    "task": "Write a for loop that checks if a given string is a palindrome.",
    "code": "```scala\ndef isPalindrome(s: String): Boolean = {\n  val len = s.length\n  for (i <- 0 until len / 2) {\n    if (s(i) != s(len - 1 - i)) return false\n  }\n  true\n}\n\nval str = \"racecar\"\nprintln(isPalindrome(str)) // true or false\n```"
  },
  {
    "task": "Develop a for loop to simulate the behavior of a simple finite state machine.",
    "code": "```scala\nobject FiniteStateMachineSimulator extends App {\n  val states = List(\"State1\", \"State2\", \"State3\", \"State4\")\n  val transitions = Map(\n    \"State1\" -> \"State2\",\n    \"State2\" -> \"State3\",\n    \"State3\" -> \"State4\",\n    \"State4\" -> \"State1\"\n  )\n  \n  var currentState = \"State1\"\n  \n  for (_ <- 1 to 10) {\n    println(s\"Current State: $currentState\")\n    currentState = transitions(currentState)\n  }\n}\n```"
  },
  {
    "task": "Design a for loop that finds the sum of all odd numbers in a list.",
    "code": "```scala\nval numbers = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\nvar sumOfOdds = 0\n\nfor (number <- numbers if number % 2 != 0) {\n  sumOfOdds += number\n}\n\nprintln(s\"Sum of odd numbers: $sumOfOdds\")\n```"
  },
  {
    "task": "Use a for loop to count how many words start with a vowel in a given sentence.",
    "code": "```scala\nobject VowelCounter {\n  def main(args: Array[String]): Unit = {\n    val sentence = \"Enter your sentence here\"\n    val words = sentence.split(\"\\\\s+\")\n    val vowels = Set('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n    var count = 0\n\n    for (word <- words) {\n      if (word.nonEmpty && vowels.contains(word.charAt(0))) {\n        count += 1\n      }\n    }\n\n    println(s\"Number of words starting with a vowel: $count\")\n  }\n}\n```"
  },
  {
    "task": "Implement a for loop that sorts a list of strings by their length.",
    "code": "```scala\nval strings = List(\"apple\", \"banana\", \"pear\", \"kiwi\", \"grape\")\nval sortedStrings = (for (s <- strings) yield s).sortBy(_.length)\nprintln(sortedStrings)\n```"
  },
  {
    "task": "Write a for loop that prints the factorial of numbers from 1 to 10.",
    "code": "```scala\nobject Factorial extends App {\n  for (i <- 1 to 10) {\n    var factorial = 1\n    for (j <- 1 to i) {\n      factorial *= j\n    }\n    println(s\"Factorial of $i is $factorial\")\n  }\n}\n```"
  },
  {
    "task": "Create a for loop that replaces all instances of a substring in a string with another substring.",
    "code": "```scala\nobject ReplaceSubstring {\n  def replaceSubstring(input: String, target: String, replacement: String): String = {\n    var result = input\n    for (_ <- 0 until input.length - target.length + 1) {\n      result = result.replace(target, replacement)\n    }\n    result\n  }\n\n  def main(args: Array[String]): Unit = {\n    val original = \"hello world\"\n    val modified = replaceSubstring(original, \"world\", \"Scala\")\n    println(modified)\n  }\n}\n```"
  },
  {
    "task": "Develop a for loop that squares each element in a list of numbers.",
    "code": "```scala\nval numbers = List(1, 2, 3, 4, 5)\nval squaredNumbers = for (n <- numbers) yield n * n\n```"
  },
  {
    "task": "Use a for loop to reverse the order of elements in an array.",
    "code": "```scala\nobject ReverseArray {\n  def main(args: Array[String]): Unit = {\n    val array = Array(1, 2, 3, 4, 5)\n    val reversedArray = new Array[Int](array.length)\n    for (i <- array.indices) {\n      reversedArray(i) = array(array.length - 1 - i)\n    }\n    println(reversedArray.mkString(\", \"))\n  }\n}\n```"
  },
  {
    "task": "Implement a for loop that tests if two strings are anagrams of each other.",
    "code": "```scala\ndef areAnagrams(str1: String, str2: String): Boolean = {\n  if (str1.length != str2.length) return false\n\n  val countMap = scala.collection.mutable.Map[Char, Int]()\n\n  for (ch <- str1) {\n    countMap(ch) = countMap.getOrElse(ch, 0) + 1\n  }\n\n  for (ch <- str2) {\n    countMap(ch) = countMap.getOrElse(ch, 0) - 1\n  }\n\n  countMap.values.forall(_ == 0)\n}\n\n// Example usage\nval result = areAnagrams(\"listen\", \"silent\")\nprintln(result) // Output: true\n```"
  },
  {
    "task": "Design a for loop to find and print all Armstrong numbers between 100 and 999.",
    "code": "```scala\nobject ArmstrongNumbers {\n  def main(args: Array[String]): Unit = {\n    for (num <- 100 to 999) {\n      val digits = num.toString.map(_.asDigit)\n      val sumOfCubes = digits.map(digit => math.pow(digit, 3)).sum\n      if (sumOfCubes == num) {\n        println(num)\n      }\n    }\n  }\n}\n```"
  }
]