[
  {
    "task": "Write a function that checks if two strings are equal, ignoring case sensitivity.",
    "code": "```scala\ndef areStringsEqualIgnoreCase(str1: String, str2: String): Boolean = {\n  str1.equalsIgnoreCase(str2)\n}\n```"
  },
  {
    "task": "Create a program that determines if a number is greater than 10.",
    "code": "```scala\nobject NumberComparison {\n  def main(args: Array[String]): Unit = {\n    val number = 15\n    if (number > 10) {\n      println(s\"$number is greater than 10\")\n    } else {\n      println(s\"$number is not greater than 10\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Implement a feature that compares the current date to a given date and returns if it is in the future.",
    "code": "```scala\nimport java.time.LocalDate\n\ndef isFutureDate(givenDate: LocalDate): Boolean = {\n  val currentDate = LocalDate.now()\n  currentDate.isBefore(givenDate)\n}\n```"
  },
  {
    "task": "Design a system that checks if a user's age is less than 18 and restricts access if true.",
    "code": "```scala\nobject AgeChecker {\n  def main(args: Array[String]): Unit = {\n    val userAge = 17 // Example age\n    if (isUnderage(userAge)) {\n      println(\"Access restricted.\")\n    } else {\n      println(\"Access granted.\")\n    }\n  }\n\n  def isUnderage(age: Int): Boolean = {\n    age < 18\n  }\n}\n```"
  },
  {
    "task": "Build an algorithm that finds the maximum of three given integers.",
    "code": "```scala\nobject MaxOfThree {\n  def maxOfThree(a: Int, b: Int, c: Int): Int = {\n    if (a >= b && a >= c) a\n    else if (b >= a && b >= c) b\n    else c\n  }\n\n  def main(args: Array[String]): Unit = {\n    val num1 = 10\n    val num2 = 20\n    val num3 = 5\n    println(s\"The maximum of $num1, $num2, and $num3 is: \" + maxOfThree(num1, num2, num3))\n  }\n}\n```"
  },
  {
    "task": "Write a function that verifies if two arrays contain the same elements in the same order.",
    "code": "```scala\ndef arraysAreEqual[T](arr1: Array[T], arr2: Array[T]): Boolean = {\n  arr1.sameElements(arr2)\n}\n```"
  },
  {
    "task": "Create a script that checks if a product's price is within a specified range.",
    "code": "```scala\nobject PriceChecker {\n  def isPriceWithinRange(price: Double, minPrice: Double, maxPrice: Double): Boolean = {\n    price >= minPrice && price <= maxPrice\n  }\n\n  def main(args: Array[String]): Unit = {\n    val price = 150.0\n    val minPrice = 100.0\n    val maxPrice = 200.0\n\n    if (isPriceWithinRange(price, minPrice, maxPrice)) {\n      println(\"The price is within the specified range.\")\n    } else {\n      println(\"The price is not within the specified range.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Develop a tool that compares two versions of a software application and determines which is newer.",
    "code": "```scala\nobject VersionComparator {\n  def compareVersions(version1: String, version2: String): Int = {\n    val ver1Parts = version1.split(\"\\\\.\").map(_.toInt)\n    val ver2Parts = version2.split(\"\\\\.\").map(_.toInt)\n    val maxLength = math.max(ver1Parts.length, ver2Parts.length)\n\n    for (i <- 0 until maxLength) {\n      val v1 = if (i < ver1Parts.length) ver1Parts(i) else 0\n      val v2 = if (i < ver2Parts.length) ver2Parts(i) else 0\n      if (v1 != v2) return v1.compare(v2)\n    }\n    0\n  }\n\n  def main(args: Array[String]): Unit = {\n    val version1 = \"2.3.1\"\n    val version2 = \"2.3.0\"\n\n    compareVersions(version1, version2) match {\n      case 0 => println(\"Both versions are equal.\")\n      case 1 => println(s\"Version $version1 is newer.\")\n      case -1 => println(s\"Version $version2 is newer.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Implement a test to see if a given year is a leap year.",
    "code": "```scala\ndef isLeapYear(year: Int): Boolean = {\n  (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)\n}\n\n// Test cases\nprintln(isLeapYear(2020)) // true\nprintln(isLeapYear(1900)) // false\nprintln(isLeapYear(2000)) // true\nprintln(isLeapYear(2021)) // false\n```"
  },
  {
    "task": "Design a feature that tells if a student\u2019s grade is passing or failing based on a threshold.",
    "code": "```scala\nobject GradeEvaluator {\n  def isPassing(grade: Double, threshold: Double): Boolean = {\n    grade >= threshold\n  }\n\n  def main(args: Array[String]): Unit = {\n    val grade = 75.0\n    val threshold = 60.0\n    if (isPassing(grade, threshold)) {\n      println(\"Passing\")\n    } else {\n      println(\"Failing\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Write a function to compare two file sizes and return the larger one.",
    "code": "```scala\nimport java.io.File\n\ndef largerFileSize(file1: File, file2: File): File = {\n  if (file1.length > file2.length) file1 else file2\n}\n```"
  },
  {
    "task": "Build a program that checks if the temperature is below freezing point.",
    "code": "```scala\nobject TemperatureCheck {\n  def main(args: Array[String]): Unit = {\n    val temperature = -5 // Example temperature in Celsius\n    val freezingPoint = 0\n\n    if (temperature < freezingPoint) {\n      println(\"The temperature is below freezing point.\")\n    } else {\n      println(\"The temperature is above freezing point.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Create a logic that determines if a number is within the Fibonacci sequence.",
    "code": "```scala\nobject FibonacciChecker {\n  def isFibonacciNumber(n: Int): Boolean = {\n    def isPerfectSquare(x: Int): Boolean = {\n      val s = Math.sqrt(x).toInt\n      s * s == x\n    }\n\n    if (n < 0) false\n    else isPerfectSquare(5 * n * n + 4) || isPerfectSquare(5 * n * n - 4)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val number = 21 // Example number\n    println(s\"Is $number a Fibonacci number? ${isFibonacciNumber(number)}\")\n  }\n}\n```"
  },
  {
    "task": "Develop a function that checks if a given word is a palindrome.",
    "code": "```scala\ndef isPalindrome(word: String): Boolean = {\n  word == word.reverse\n}\n```"
  },
  {
    "task": "Write a script to see if a password meets a minimum length requirement.",
    "code": "```scala\nobject PasswordChecker {\n  def main(args: Array[String]): Unit = {\n    val password = \"examplePassword\"\n    val minLength = 8\n    val isValid = password.length >= minLength\n    println(s\"Password meets length requirement: $isValid\")\n  }\n}\n```"
  },
  {
    "task": "Implement a system that decides if a point is inside a circle based on its coordinates.",
    "code": "```scala\ncase class Point(x: Double, y: Double)\ncase class Circle(center: Point, radius: Double)\n\ndef isPointInsideCircle(point: Point, circle: Circle): Boolean = {\n  val distanceSquared = Math.pow(point.x - circle.center.x, 2) + Math.pow(point.y - circle.center.y, 2)\n  distanceSquared < Math.pow(circle.radius, 2)\n}\n\n// Example usage\nval point = Point(1.0, 2.0)\nval circle = Circle(Point(0.0, 0.0), 5.0)\n\nprintln(isPointInsideCircle(point, circle)) // Output: true or false\n```"
  },
  {
    "task": "Design a program that checks if a shopping cart total exceeds a certain budget.",
    "code": "```scala\nobject ShoppingCart {\n  def checkBudget(total: Double, budget: Double): Boolean = {\n    total > budget\n  }\n\n  def main(args: Array[String]): Unit = {\n    val total = 120.50\n    val budget = 100.00\n    if (checkBudget(total, budget)) {\n      println(\"The total exceeds the budget.\")\n    } else {\n      println(\"The total is within the budget.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Create a function that compares two players' scores and returns the winner.",
    "code": "```scala\ndef determineWinner(score1: Int, score2: Int): String = {\n  if (score1 > score2) {\n    \"Player 1 wins\"\n  } else if (score2 > score1) {\n    \"Player 2 wins\"\n  } else {\n    \"It's a tie\"\n  }\n}\n```"
  },
  {
    "task": "Write a program to determine if one string is a substring of another.",
    "code": "```scala\nobject SubstringCheck {\n  def isSubstring(mainString: String, subString: String): Boolean = {\n    mainString.contains(subString)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val mainString = \"Hello, World!\"\n    val subString = \"World\"\n    println(isSubstring(mainString, subString)) // Output: true\n  }\n}\n```"
  },
  {
    "task": "Build a utility that checks if a number is a prime number.",
    "code": "```scala\nobject PrimeChecker {\n  def isPrime(n: Int): Boolean = {\n    if (n <= 1) return false\n    for (i <- 2 to Math.sqrt(n).toInt) {\n      if (n % i == 0) return false\n    }\n    true\n  }\n\n  def main(args: Array[String]): Unit = {\n    val number = 29\n    println(s\"Is $number a prime number? ${isPrime(number)}\")\n  }\n}\n```"
  },
  {
    "task": "Write a function that checks if a given number is a perfect square.",
    "code": "```scala\ndef isPerfectSquare(num: Int): Boolean = {\n  val root = Math.sqrt(num).toInt\n  root * root == num\n}\n```"
  },
  {
    "task": "Create a system that determines if a person is eligible for a senior citizen discount based on their age.",
    "code": "```scala\nobject SeniorCitizenDiscount {\n  def isEligibleForDiscount(age: Int): Boolean = {\n    age >= 65\n  }\n  \n  def main(args: Array[String]): Unit = {\n    val age = 70\n    if (isEligibleForDiscount(age)) {\n      println(\"Eligible for senior citizen discount.\")\n    } else {\n      println(\"Not eligible for senior citizen discount.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Develop a feature to check if a date falls on a weekend.",
    "code": "```scala\nimport java.time.{DayOfWeek, LocalDate}\n\ndef isWeekend(date: LocalDate): Boolean = {\n  val dayOfWeek = date.getDayOfWeek\n  dayOfWeek == DayOfWeek.SATURDAY || dayOfWeek == DayOfWeek.SUNDAY\n}\n\n// Example usage:\n// val date = LocalDate.of(2023, 10, 14)\n// println(isWeekend(date))  // Output: true\n```"
  },
  {
    "task": "Design a program that sees if a given email address is in the correct format.",
    "code": "```scala\nobject EmailValidator {\n  def isValidEmail(email: String): Boolean = {\n    val emailRegex = \"^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$\"\n    email.matches(emailRegex)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val email = \"test@example.com\"\n    println(s\"Is the email '$email' valid? ${isValidEmail(email)}\")\n  }\n}\n```"
  },
  {
    "task": "Implement a test to check if a rectangle's area is larger than a triangle's area.",
    "code": "```scala\nobject AreaComparison {\n  def rectangleArea(length: Double, width: Double): Double = length * width\n\n  def triangleArea(base: Double, height: Double): Double = 0.5 * base * height\n\n  def isRectangleAreaLarger(length: Double, width: Double, base: Double, height: Double): Boolean = {\n    rectangleArea(length, width) > triangleArea(base, height)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val rectLength = 10.0\n    val rectWidth = 5.0\n    val triBase = 8.0\n    val triHeight = 6.0\n\n    println(isRectangleAreaLarger(rectLength, rectWidth, triBase, triHeight))\n  }\n}\n```"
  },
  {
    "task": "Write a function that verifies if two rectangles overlap each other.",
    "code": "```scala\ncase class Rectangle(x: Int, y: Int, width: Int, height: Int)\n\ndef doRectanglesOverlap(rect1: Rectangle, rect2: Rectangle): Boolean = {\n  !(rect1.x + rect1.width <= rect2.x || \n    rect2.x + rect2.width <= rect1.x || \n    rect1.y + rect1.height <= rect2.y || \n    rect2.y + rect2.height <= rect1.y)\n}\n```"
  },
  {
    "task": "Create a script to compare two strings lexicographically.",
    "code": "```scala\nobject StringComparison {\n  def main(args: Array[String]): Unit = {\n    val string1 = \"apple\"\n    val string2 = \"banana\"\n\n    if (string1 < string2) {\n      println(s\"\"\"\"$string1\" is lexicographically smaller than \"$string2\"\"\"\")\n    } else if (string1 > string2) {\n      println(s\"\"\"\"$string1\" is lexicographically greater than \"$string2\"\"\"\")\n    } else {\n      println(s\"\"\"\"$string1\" is equal to \"$string2\"\"\"\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Build a program that checks if a list of numbers is in ascending order.",
    "code": "```scala\nobject AscendingOrderCheck {\n  def isAscending(numbers: List[Int]): Boolean = {\n    numbers.sliding(2).forall { case List(a, b) => a <= b }\n  }\n\n  def main(args: Array[String]): Unit = {\n    val numbers = List(1, 2, 3, 4, 5)\n    println(isAscending(numbers))\n  }\n}\n```"
  },
  {
    "task": "Design a system to compare the heights of two buildings.",
    "code": "```scala\nobject BuildingComparison {\n  case class Building(name: String, height: Double)\n\n  def compareHeights(building1: Building, building2: Building): String = {\n    if (building1.height > building2.height) {\n      s\"${building1.name} is taller than ${building2.name}\"\n    } else if (building1.height < building2.height) {\n      s\"${building2.name} is taller than ${building1.name}\"\n    } else {\n      s\"${building1.name} and ${building2.name} are of the same height\"\n    }\n  }\n\n  def main(args: Array[String]): Unit = {\n    val building1 = Building(\"Building A\", 150.0)\n    val building2 = Building(\"Building B\", 200.0)\n    println(compareHeights(building1, building2))\n  }\n}\n```"
  },
  {
    "task": "Write a feature that determines if a given time is before noon.",
    "code": "```scala\ndef isBeforeNoon(hour: Int, minute: Int): Boolean = {\n  hour < 12 || (hour == 12 && minute == 0)\n}\n```"
  },
  {
    "task": "Implement a function to check if a given number is a power of two.",
    "code": "```scala\ndef isPowerOfTwo(n: Int): Boolean = {\n  if (n <= 0) false\n  else (n & (n - 1)) == 0\n}\n```"
  },
  {
    "task": "Create a program that determines if a word is longer than another word.",
    "code": "```scala\nobject WordComparison {\n  def main(args: Array[String]): Unit = {\n    val word1 = \"hello\"\n    val word2 = \"world\"\n    \n    if (word1.length > word2.length) {\n      println(s\"$word1 is longer than $word2\")\n    } else if (word1.length < word2.length) {\n      println(s\"$word2 is longer than $word1\")\n    } else {\n      println(s\"$word1 and $word2 are the same length\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Develop a function to compare the lengths of two lists and return the longer one.",
    "code": "```scala\ndef longerList[T](list1: List[T], list2: List[T]): List[T] = {\n  if (list1.length > list2.length) list1 else list2\n}\n```"
  },
  {
    "task": "Write a script to see if a user's input matches a pre-defined secret code.",
    "code": "```scala\nobject SecretCodeChecker {\n  def main(args: Array[String]): Unit = {\n    val secretCode = \"scala123\"\n    println(\"Enter the secret code:\")\n    val userInput = scala.io.StdIn.readLine()\n    \n    if (userInput == secretCode) {\n      println(\"Access granted.\")\n    } else {\n      println(\"Access denied.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Build a utility that checks if a given year is in the 21st century.",
    "code": "```scala\nobject CenturyChecker {\n  def is21stCentury(year: Int): Boolean = {\n    year >= 2001 && year <= 2100\n  }\n}\n```"
  },
  {
    "task": "Create a logic that determines if a book's publication year is after 2000.",
    "code": "```scala\ndef isPublishedAfter2000(publicationYear: Int): Boolean = {\n  publicationYear > 2000\n}\n\n// Example usage\nval publicationYear = 2005\nval result = isPublishedAfter2000(publicationYear)\nprintln(s\"Is the book published after 2000? $result\")\n```"
  },
  {
    "task": "Design a feature to see if a number is divisible by both 3 and 5.",
    "code": "```scala\ndef isDivisibleBy3And5(number: Int): Boolean = {\n  number % 3 == 0 && number % 5 == 0\n}\n```"
  },
  {
    "task": "Implement a system that checks if a student's GPA is above a certain threshold.",
    "code": "```scala\nobject GPAChecker {\n  def isGPAAboveThreshold(gpa: Double, threshold: Double): Boolean = {\n    gpa > threshold\n  }\n\n  def main(args: Array[String]): Unit = {\n    val studentGPA = 3.5\n    val threshold = 3.0\n    println(isGPAAboveThreshold(studentGPA, threshold))\n  }\n}\n```"
  },
  {
    "task": "Write a function to determine if a given angle is acute, right, or obtuse.",
    "code": "```scala\ndef classifyAngle(angle: Double): String = {\n  if (angle > 0 && angle < 90) \"Acute\"\n  else if (angle == 90) \"Right\"\n  else if (angle > 90 && angle < 180) \"Obtuse\"\n  else \"Invalid\"\n}\n```"
  },
  {
    "task": "Develop a program that compares the lengths of two strings and returns the shorter one.",
    "code": "```scala\nobject StringComparator {\n  def main(args: Array[String]): Unit = {\n    val string1 = \"Hello\"\n    val string2 = \"World!\"\n\n    val shorterString = if (string1.length < string2.length) string1 else string2\n    println(s\"The shorter string is: $shorterString\")\n  }\n}\n```"
  },
  {
    "task": "Create a script to verify if a username is unique within a list.",
    "code": "```scala\nobject UsernameChecker {\n  def isUsernameUnique(username: String, usernameList: List[String]): Boolean = {\n    !usernameList.contains(username)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val usernames = List(\"alice\", \"bob\", \"charlie\")\n    val newUsername = \"dave\"\n    println(s\"Is '$newUsername' unique? ${isUsernameUnique(newUsername, usernames)}\")\n  }\n}\n```"
  },
  {
    "task": "Build a tool that checks if a job applicant meets all the listed qualifications.",
    "code": "```scala\nobject JobApplicantChecker {\n  def meetsQualifications(applicant: Map[String, Any], qualifications: Map[String, Any]): Boolean = {\n    qualifications.forall { case (key, value) =>\n      applicant.get(key) match {\n        case Some(applicantValue) => applicantValue == value\n        case None => false\n      }\n    }\n  }\n\n  def main(args: Array[String]): Unit = {\n    val applicant = Map(\"degree\" -> \"Bachelor\", \"experience\" -> 5, \"skills\" -> Set(\"Scala\", \"Java\"))\n    val qualifications = Map(\"degree\" -> \"Bachelor\", \"experience\" -> 5, \"skills\" -> Set(\"Scala\", \"Java\"))\n\n    if (meetsQualifications(applicant, qualifications)) {\n      println(\"Applicant meets all qualifications.\")\n    } else {\n      println(\"Applicant does not meet all qualifications.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Write a feature to see if a vehicle's speed exceeds the speed limit.",
    "code": "```scala\nobject SpeedCheck {\n  def isSpeeding(vehicleSpeed: Double, speedLimit: Double): Boolean = {\n    vehicleSpeed > speedLimit\n  }\n\n  def main(args: Array[String]): Unit = {\n    val vehicleSpeed = 70.0\n    val speedLimit = 65.0\n    println(isSpeeding(vehicleSpeed, speedLimit)) // Output: true\n  }\n}\n```"
  },
  {
    "task": "Design a system that determines whether a given point is above or below the x-axis.",
    "code": "```scala\nobject PointPosition {\n  def determinePosition(y: Double): String = {\n    if (y > 0) \"Above the x-axis\"\n    else if (y < 0) \"Below the x-axis\"\n    else \"On the x-axis\"\n  }\n\n  def main(args: Array[String]): Unit = {\n    val pointY = 5.0 // Example point\n    println(determinePosition(pointY))\n  }\n}\n```"
  },
  {
    "task": "Create a function that checks if a given word appears in a sentence.",
    "code": "```scala\ndef containsWord(sentence: String, word: String): Boolean = {\n  sentence.split(\"\\\\s+\").contains(word)\n}\n```"
  },
  {
    "task": "Implement a program that identifies whether a given number is negative or positive.",
    "code": "```scala\nobject NumberCheck {\n  def main(args: Array[String]): Unit = {\n    val number = scala.io.StdIn.readInt()\n    if (number > 0) {\n      println(\"Positive\")\n    } else if (number < 0) {\n      println(\"Negative\")\n    } else {\n      println(\"Zero\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Write a script to see if the sum of two numbers is greater than 100.",
    "code": "```scala\nobject SumComparison {\n  def main(args: Array[String]): Unit = {\n    val num1 = 45\n    val num2 = 60\n    val sum = num1 + num2\n\n    if (sum > 100) {\n      println(\"The sum is greater than 100.\")\n    } else {\n      println(\"The sum is not greater than 100.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Build a utility that checks if a file exists in a specified directory.",
    "code": "```scala\nimport java.io.File\n\nobject FileChecker {\n  def fileExists(directory: String, filename: String): Boolean = {\n    val dir = new File(directory)\n    val file = new File(dir, filename)\n    file.exists()\n  }\n\n  def main(args: Array[String]): Unit = {\n    val directory = \"/path/to/directory\"\n    val filename = \"example.txt\"\n    println(s\"Does the file exist? ${fileExists(directory, filename)}\")\n  }\n}\n```"
  },
  {
    "task": "Develop a system to compare the weights of two different objects.",
    "code": "```scala\nobject WeightComparison {\n  def compareWeights(weight1: Double, weight2: Double): String = {\n    if (weight1 > weight2) {\n      \"Object 1 is heavier than Object 2\"\n    } else if (weight1 < weight2) {\n      \"Object 2 is heavier than Object 1\"\n    } else {\n      \"Both objects have the same weight\"\n    }\n  }\n\n  def main(args: Array[String]): Unit = {\n    val weight1 = 5.5\n    val weight2 = 7.3\n    println(compareWeights(weight1, weight2))\n  }\n}\n```"
  },
  {
    "task": "Create a logic to determine if a number falls within a defined range.",
    "code": "```scala\ndef isWithinRange(number: Int, lowerBound: Int, upperBound: Int): Boolean = {\n  number >= lowerBound && number <= upperBound\n}\n```"
  },
  {
    "task": "Design a program that checks if an employee worked overtime based on hours worked.",
    "code": "```scala\nobject OvertimeChecker {\n  def main(args: Array[String]): Unit = {\n    val standardHours = 40\n    val hoursWorked = 45 // Example input, can be replaced with user input or other data source\n\n    if (hoursWorked > standardHours) {\n      println(\"The employee worked overtime.\")\n    } else {\n      println(\"The employee did not work overtime.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Write a function to compare two dates and determine which is earlier.",
    "code": "```scala\nimport java.time.LocalDate\n\ndef compareDates(date1: LocalDate, date2: LocalDate): Int = {\n  if (date1.isBefore(date2)) -1\n  else if (date1.isAfter(date2)) 1\n  else 0\n}\n```"
  },
  {
    "task": "Create a script that verifies if a given word starts with a vowel.",
    "code": "```scala\nobject VowelChecker {\n  def startsWithVowel(word: String): Boolean = {\n    val vowels = Set('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n    word.nonEmpty && vowels.contains(word.head)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val word = \"example\"\n    println(s\"Does the word '$word' start with a vowel? ${startsWithVowel(word)}\")\n  }\n}\n```"
  },
  {
    "task": "Build a utility that checks if a number is even or odd.",
    "code": "```scala\nobject NumberUtility {\n  def isEven(number: Int): Boolean = number % 2 == 0\n\n  def isOdd(number: Int): Boolean = number % 2 != 0\n\n  def main(args: Array[String]): Unit = {\n    val testNumber = 5\n    println(s\"$testNumber is even: ${isEven(testNumber)}\")\n    println(s\"$testNumber is odd: ${isOdd(testNumber)}\")\n  }\n}\n```"
  },
  {
    "task": "Implement a system that determines if a string contains only numeric characters.",
    "code": "```scala\nobject NumericStringChecker {\n  def isNumeric(s: String): Boolean = {\n    s.forall(c => c >= '0' && c <= '9')\n  }\n\n  def main(args: Array[String]): Unit = {\n    val testString = \"123456\"\n    println(isNumeric(testString)) // Output: true\n\n    val testString2 = \"123a56\"\n    println(isNumeric(testString2)) // Output: false\n  }\n}\n```"
  },
  {
    "task": "Write a function to see if a given character is a vowel or consonant.",
    "code": "```scala\ndef isVowelOrConsonant(c: Char): String = {\n  if (\"aeiouAEIOU\".contains(c)) \"Vowel\" else \"Consonant\"\n}\n```"
  },
  {
    "task": "Create a program that checks if a point lies within a specified rectangle.",
    "code": "```scala\nobject PointInRectangle {\n  def main(args: Array[String]): Unit = {\n    val point = (5, 5)\n    val rectangleTopLeft = (2, 8)\n    val rectangleBottomRight = (10, 2)\n\n    val isWithinRectangle = \n      point._1 >= rectangleTopLeft._1 && \n      point._1 <= rectangleBottomRight._1 && \n      point._2 <= rectangleTopLeft._2 && \n      point._2 >= rectangleBottomRight._2\n\n    println(s\"Point $point is within rectangle: $isWithinRectangle\")\n  }\n}\n```"
  },
  {
    "task": "Develop a feature to compare two lists and return the common elements.",
    "code": "```scala\ndef findCommonElements[T](list1: List[T], list2: List[T]): List[T] = {\n  list1.intersect(list2)\n}\n\n// Example usage:\nval list1 = List(1, 2, 3, 4, 5)\nval list2 = List(3, 4, 5, 6, 7)\nval commonElements = findCommonElements(list1, list2)\nprintln(commonElements) // Output: List(3, 4, 5)\n```"
  },
  {
    "task": "Design a function that determines if a text contains any uppercase letters.",
    "code": "```scala\ndef containsUppercase(text: String): Boolean = {\n  text.exists(_.isUpper)\n}\n```"
  },
  {
    "task": "Implement a script to check if a given sentence is a question.",
    "code": "```scala\nobject QuestionChecker {\n  def isQuestion(sentence: String): Boolean = {\n    sentence.trim.endsWith(\"?\")\n  }\n\n  def main(args: Array[String]): Unit = {\n    val sentence = \"Is this a question?\"\n    println(s\"Is the sentence a question? ${isQuestion(sentence)}\")\n  }\n}\n```"
  },
  {
    "task": "Write a program to determine if a temperature is measured in Celsius or Fahrenheit.",
    "code": "```scala\nobject TemperatureCheck {\n  def isCelsius(temperature: String): Boolean = {\n    temperature.endsWith(\"C\")\n  }\n\n  def isFahrenheit(temperature: String): Boolean = {\n    temperature.endsWith(\"F\")\n  }\n\n  def main(args: Array[String]): Unit = {\n    val temp1 = \"25C\"\n    val temp2 = \"77F\"\n\n    println(s\"$temp1 is Celsius: ${isCelsius(temp1)}\")\n    println(s\"$temp1 is Fahrenheit: ${isFahrenheit(temp1)}\")\n    println(s\"$temp2 is Celsius: ${isCelsius(temp2)}\")\n    println(s\"$temp2 is Fahrenheit: ${isFahrenheit(temp2)}\")\n  }\n}\n```"
  },
  {
    "task": "Create a system that verifies if a student is enrolled in a particular course.",
    "code": "```scala\ncase class Student(name: String, enrolledCourses: List[String])\n\ndef isEnrolled(student: Student, course: String): Boolean = {\n  student.enrolledCourses.contains(course)\n}\n\n// Example usage\nval student = Student(\"Alice\", List(\"Mathematics\", \"Science\"))\nval course = \"Mathematics\"\nval isStudentEnrolled = isEnrolled(student, course)\nprintln(s\"Student is enrolled in $course: $isStudentEnrolled\")\n```"
  },
  {
    "task": "Build a utility to check if a given string is a valid hexadecimal number.",
    "code": "```scala\nobject HexValidator {\n  def isValidHex(hex: String): Boolean = {\n    val hexPattern = \"^[0-9a-fA-F]+$\".r\n    hexPattern.matches(hex)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val testCases = List(\"1a3f\", \"GHIJ\", \"123\", \"abcdef\", \"ABCDEF\", \"123xyz\")\n    testCases.foreach { testCase =>\n      println(s\"$testCase is valid hex: ${isValidHex(testCase)}\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Write a function to see if two circles intersect based on their radii and center points.",
    "code": "```scala\ncase class Point(x: Double, y: Double)\ncase class Circle(center: Point, radius: Double)\n\ndef doCirclesIntersect(circle1: Circle, circle2: Circle): Boolean = {\n  val dx = circle1.center.x - circle2.center.x\n  val dy = circle1.center.y - circle2.center.y\n  val distanceSquared = dx * dx + dy * dy\n  val radiusSum = circle1.radius + circle2.radius\n  distanceSquared <= radiusSum * radiusSum\n}\n```"
  },
  {
    "task": "Develop a program that checks if a given number is within 10% of another number.",
    "code": "```scala\nobject ComparisonOperations {\n  def isWithinTenPercent(num1: Double, num2: Double): Boolean = {\n    val margin = num2 * 0.1\n    num1 >= (num2 - margin) && num1 <= (num2 + margin)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val number1 = 95.0\n    val number2 = 100.0\n    println(isWithinTenPercent(number1, number2)) // Example usage\n  }\n}\n```"
  },
  {
    "task": "Create a feature to determine if a character is alphanumeric.",
    "code": "```scala\ndef isAlphanumeric(c: Char): Boolean = {\n  c.isLetterOrDigit\n}\n```"
  },
  {
    "task": "Implement a system to compare the profit margins of two products.",
    "code": "```scala\nobject ProfitMarginComparison {\n  case class Product(name: String, costPrice: Double, sellingPrice: Double) {\n    def profitMargin: Double = ((sellingPrice - costPrice) / costPrice) * 100\n  }\n\n  def compareProfitMargins(product1: Product, product2: Product): String = {\n    val margin1 = product1.profitMargin\n    val margin2 = product2.profitMargin\n\n    if (margin1 > margin2) s\"${product1.name} has a higher profit margin.\"\n    else if (margin1 < margin2) s\"${product2.name} has a higher profit margin.\"\n    else \"Both products have the same profit margin.\"\n  }\n\n  def main(args: Array[String]): Unit = {\n    val product1 = Product(\"Product A\", 50.0, 75.0)\n    val product2 = Product(\"Product B\", 30.0, 45.0)\n\n    println(compareProfitMargins(product1, product2))\n  }\n}\n```"
  },
  {
    "task": "Design a script to check if a given string contains any special characters.",
    "code": "```scala\nobject SpecialCharacterCheck {\n  def containsSpecialCharacters(s: String): Boolean = {\n    s.exists(ch => !ch.isLetterOrDigit)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val testString = \"Hello, World!\"\n    println(containsSpecialCharacters(testString))\n  }\n}\n```"
  },
  {
    "task": "Write a function to verify if a number is a multiple of another number.",
    "code": "```scala\ndef isMultipleOf(number: Int, divisor: Int): Boolean = {\n  number % divisor == 0\n}\n```"
  },
  {
    "task": "Create a program that checks if a date is a holiday based on a list of holidays.",
    "code": "```scala\nimport java.time.LocalDate\n\nobject HolidayChecker {\n  def isHoliday(date: LocalDate, holidays: List[LocalDate]): Boolean = {\n    holidays.contains(date)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val holidays = List(\n      LocalDate.of(2023, 12, 25), // Christmas\n      LocalDate.of(2023, 1, 1),   // New Year's Day\n      LocalDate.of(2023, 7, 4)    // Independence Day\n    )\n\n    val dateToCheck = LocalDate.of(2023, 12, 25)\n    println(s\"Is $dateToCheck a holiday? ${isHoliday(dateToCheck, holidays)}\")\n  }\n}\n```"
  },
  {
    "task": "Build a utility to compare two text files and highlight the differences.",
    "code": "```scala\nimport scala.io.Source\n\nobject FileComparator {\n  def compareFiles(file1Path: String, file2Path: String): Unit = {\n    val file1Lines = Source.fromFile(file1Path).getLines().toSeq\n    val file2Lines = Source.fromFile(file2Path).getLines().toSeq\n\n    val maxLength = math.max(file1Lines.length, file2Lines.length)\n\n    for (i <- 0 until maxLength) {\n      val line1 = if (i < file1Lines.length) file1Lines(i) else \"\"\n      val line2 = if (i < file2Lines.length) file2Lines(i) else \"\"\n\n      if (line1 != line2) {\n        println(s\"Difference at line ${i + 1}:\")\n        println(s\"File 1: $line1\")\n        println(s\"File 2: $line2\")\n      }\n    }\n  }\n\n  def main(args: Array[String]): Unit = {\n    if (args.length != 2) {\n      println(\"Usage: FileComparator <file1> <file2>\")\n    } else {\n      compareFiles(args(0), args(1))\n    }\n  }\n}\n```"
  },
  {
    "task": "Develop a function to determine if a given password is strong based on length and character diversity.",
    "code": "```scala\ndef isStrongPassword(password: String): Boolean = {\n  val minLength = 8\n  val hasUpperCase = password.exists(_.isUpper)\n  val hasLowerCase = password.exists(_.isLower)\n  val hasDigit = password.exists(_.isDigit)\n  val hasSpecialChar = password.exists(ch => \"!@#$%^&*()-_=+[]{}\".contains(ch))\n  \n  password.length >= minLength && hasUpperCase && hasLowerCase && hasDigit && hasSpecialChar\n}\n```"
  },
  {
    "task": "Write a script to see if a number is within a specified distance from zero.",
    "code": "```scala\nobject NumberDistanceChecker {\n  def isWithinDistanceFromZero(num: Int, distance: Int): Boolean = {\n    num >= -distance && num <= distance\n  }\n\n  def main(args: Array[String]): Unit = {\n    val number = 5\n    val distance = 10\n    println(isWithinDistanceFromZero(number, distance))\n  }\n}\n```"
  },
  {
    "task": "Create a system to check if a book title is available in a library database.",
    "code": "```scala\nobject LibraryDatabase {\n  val books: Set[String] = Set(\n    \"The Great Gatsby\",\n    \"1984\",\n    \"To Kill a Mockingbird\",\n    \"The Catcher in the Rye\"\n  )\n\n  def isBookAvailable(title: String): Boolean = {\n    books.contains(title)\n  }\n}\n\nobject LibraryApp extends App {\n  val titleToCheck = \"1984\"\n  val isAvailable = LibraryDatabase.isBookAvailable(titleToCheck)\n  println(s\"Is the book '$titleToCheck' available? $isAvailable\")\n}\n```"
  },
  {
    "task": "Implement a feature that determines if a user has administrator privileges.",
    "code": "```scala\nobject UserPrivileges {\n  def isAdmin(userRole: String): Boolean = {\n    userRole == \"admin\"\n  }\n\n  def main(args: Array[String]): Unit = {\n    val userRole1 = \"admin\"\n    val userRole2 = \"user\"\n\n    println(s\"User with role '$userRole1' is admin: ${isAdmin(userRole1)}\")\n    println(s\"User with role '$userRole2' is admin: ${isAdmin(userRole2)}\")\n  }\n}\n```"
  },
  {
    "task": "Design a function to compare the brightness of two colors.",
    "code": "```scala\nobject ColorComparison {\n  case class Color(red: Int, green: Int, blue: Int)\n\n  def compareBrightness(color1: Color, color2: Color): String = {\n    val brightness1 = 0.299 * color1.red + 0.587 * color1.green + 0.114 * color1.blue\n    val brightness2 = 0.299 * color2.red + 0.587 * color2.green + 0.114 * color2.blue\n\n    if (brightness1 > brightness2) {\n      \"Color1 is brighter\"\n    } else if (brightness1 < brightness2) {\n      \"Color2 is brighter\"\n    } else {\n      \"Both colors have the same brightness\"\n    }\n  }\n}\n```"
  },
  {
    "task": "Write a program to verify if a number is a valid credit card number using the Luhn algorithm.",
    "code": "```scala\nobject LuhnAlgorithm {\n  def isValidCreditCardNumber(number: String): Boolean = {\n    val digits = number.reverse.map(_.asDigit)\n    val sum = digits.zipWithIndex.map {\n      case (digit, index) =>\n        if (index % 2 == 1) {\n          val doubled = digit * 2\n          if (doubled > 9) doubled - 9 else doubled\n        } else {\n          digit\n        }\n    }.sum\n    sum % 10 == 0\n  }\n\n  def main(args: Array[String]): Unit = {\n    val creditCardNumber = \"1234567812345670\"\n    println(isValidCreditCardNumber(creditCardNumber))\n  }\n}\n```"
  },
  {
    "task": "Create a script to determine if a given string is a valid IP address.",
    "code": "```scala\nobject IpAddressValidator {\n  def isValidIpAddress(ip: String): Boolean = {\n    val parts = ip.split(\"\\\\.\")\n    if (parts.length != 4) return false\n    parts.forall(part =>\n      try {\n        val num = part.toInt\n        num >= 0 && num <= 255\n      } catch {\n        case _: NumberFormatException => false\n      }\n    )\n  }\n\n  def main(args: Array[String]): Unit = {\n    val testIp = \"192.168.1.1\"\n    println(s\"Is '$testIp' a valid IP address? ${isValidIpAddress(testIp)}\")\n  }\n}\n```"
  },
  {
    "task": "Build a utility that checks if a number is part of an arithmetic sequence.",
    "code": "```scala\nobject ArithmeticSequenceChecker {\n  def isPartOfArithmeticSequence(number: Int, start: Int, difference: Int): Boolean = {\n    if (difference == 0) return number == start\n    (number - start) % difference == 0 && (number - start) / difference >= 0\n  }\n}\n```"
  },
  {
    "task": "Develop a feature to compare the efficiency of two algorithms based on time complexity.",
    "code": "```scala\nobject AlgorithmEfficiencyComparison {\n\n  // Define a trait for algorithms with a method to get time complexity\n  trait Algorithm {\n    def timeComplexity: String\n  }\n\n  // Example algorithm implementations\n  class AlgorithmA extends Algorithm {\n    override def timeComplexity: String = \"O(n)\"\n  }\n\n  class AlgorithmB extends Algorithm {\n    override def timeComplexity: String = \"O(n^2)\"\n  }\n\n  // Compare two algorithms based on their time complexities\n  def compareAlgorithms(algo1: Algorithm, algo2: Algorithm): String = {\n    (algo1.timeComplexity, algo2.timeComplexity) match {\n      case (a, b) if a == b => \"Both algorithms have the same time complexity.\"\n      case (\"O(1)\", _) => \"Algorithm 1 is more efficient.\"\n      case (_, \"O(1)\") => \"Algorithm 2 is more efficient.\"\n      case (\"O(log n)\", \"O(n)\") => \"Algorithm 1 is more efficient.\"\n      case (\"O(n)\", \"O(log n)\") => \"Algorithm 2 is more efficient.\"\n      case (\"O(n)\", \"O(n^2)\") => \"Algorithm 1 is more efficient.\"\n      case (\"O(n^2)\", \"O(n)\") => \"Algorithm 2 is more efficient.\"\n      case _ => \"Complexity comparison not determined.\"\n    }\n  }\n\n  def main(args: Array[String]): Unit = {\n    val algo1 = new AlgorithmA\n    val algo2 = new AlgorithmB\n\n    println(compareAlgorithms(algo1, algo2))\n  }\n}\n```"
  },
  {
    "task": "Write a function to see if a given date falls in a leap year.",
    "code": "```scala\ndef isLeapYear(year: Int): Boolean = {\n  (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)\n}\n\ndef isDateInLeapYear(year: Int, month: Int, day: Int): Boolean = {\n  isLeapYear(year)\n}\n```"
  },
  {
    "task": "Create a program that determines if a user's subscription is active based on the current date.",
    "code": "```scala\nimport java.time.LocalDate\n\nobject SubscriptionChecker {\n  def isSubscriptionActive(expiryDate: LocalDate, currentDate: LocalDate = LocalDate.now()): Boolean = {\n    currentDate.isBefore(expiryDate) || currentDate.isEqual(expiryDate)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val expiryDate = LocalDate.of(2023, 12, 31) // Example expiry date\n    val active = isSubscriptionActive(expiryDate)\n    println(s\"Subscription active: $active\")\n  }\n}\n```"
  },
  {
    "task": "Design a tool to check if a user\u2019s input is a palindrome phrase, ignoring spaces and punctuation.",
    "code": "```scala\nobject PalindromeChecker {\n  def isPalindrome(input: String): Boolean = {\n    val sanitized = input.replaceAll(\"[\\\\s\\\\p{Punct}]\", \"\").toLowerCase\n    sanitized == sanitized.reverse\n  }\n\n  def main(args: Array[String]): Unit = {\n    println(\"Enter a phrase:\")\n    val input = scala.io.StdIn.readLine()\n    if (isPalindrome(input)) {\n      println(\"The input is a palindrome.\")\n    } else {\n      println(\"The input is not a palindrome.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Implement a system to verify if a given number is part of the Fibonacci sequence.",
    "code": "```scala\nobject FibonacciChecker {\n  def isFibonacci(num: Int): Boolean = {\n    def isPerfectSquare(x: Int): Boolean = {\n      val s = Math.sqrt(x).toInt\n      s * s == x\n    }\n\n    isPerfectSquare(5 * num * num + 4) || isPerfectSquare(5 * num * num - 4)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val number = 21\n    if (isFibonacci(number)) {\n      println(s\"$number is a Fibonacci number.\")\n    } else {\n      println(s\"$number is not a Fibonacci number.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Write a program to compare the elevation of two geographic locations.",
    "code": "```scala\nobject ElevationComparison {\n  def main(args: Array[String]): Unit = {\n    val elevation1 = 1500 // Elevation of location 1\n    val elevation2 = 2000 // Elevation of location 2\n\n    if (elevation1 > elevation2) {\n      println(\"Location 1 is higher than Location 2.\")\n    } else if (elevation1 < elevation2) {\n      println(\"Location 2 is higher than Location 1.\")\n    } else {\n      println(\"Both locations have the same elevation.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Create a function to determine if a given string is a valid JSON format.",
    "code": "```scala\nimport scala.util.parsing.json.JSON\n\ndef isValidJson(input: String): Boolean = {\n  JSON.parseFull(input).isDefined\n}\n```"
  },
  {
    "task": "Build a utility that checks if a number is a factorial of any integer.",
    "code": "```scala\nobject FactorialChecker {\n  def isFactorial(num: Int): Boolean = {\n    def factorial(n: Int): Int = if (n == 0) 1 else n * factorial(n - 1)\n\n    def checkFactorial(n: Int, fact: Int): Boolean = {\n      if (fact == num) true\n      else if (fact > num) false\n      else checkFactorial(n + 1, fact * n)\n    }\n\n    if (num < 0) false\n    else checkFactorial(1, 1)\n  }\n\n  def main(args: Array[String]): Unit = {\n    println(isFactorial(6))   // true, because 3! = 6\n    println(isFactorial(24))  // true, because 4! = 24\n    println(isFactorial(18))  // false\n  }\n}\n```"
  },
  {
    "task": "Develop a feature to compare the widths of two ribbons and return the wider one.",
    "code": "```scala\ndef widerRibbon(width1: Double, width2: Double): Double = {\n  if (width1 > width2) width1 else width2\n}\n```"
  },
  {
    "task": "Write a script to see if a word is present in a list of banned words.",
    "code": "```scala\nobject BannedWordsChecker {\n  def isBanned(word: String, bannedWords: List[String]): Boolean = {\n    bannedWords.contains(word)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val bannedWords = List(\"bannedWord1\", \"bannedWord2\", \"bannedWord3\")\n    val wordToCheck = \"exampleWord\"\n\n    if (isBanned(wordToCheck, bannedWords)) {\n      println(s\"The word '$wordToCheck' is banned.\")\n    } else {\n      println(s\"The word '$wordToCheck' is not banned.\")\n    }\n  }\n}\n\nBannedWordsChecker.main(Array())\n```"
  },
  {
    "task": "Design a system to determine if a patient's temperature is in the normal range.",
    "code": "```scala\nobject TemperatureCheck {\n  def isTemperatureNormal(temperature: Double): Boolean = {\n    val lowerBound = 36.5\n    val upperBound = 37.5\n    temperature >= lowerBound && temperature <= upperBound\n  }\n\n  def main(args: Array[String]): Unit = {\n    val patientTemperature = 37.0\n    if (isTemperatureNormal(patientTemperature)) {\n      println(\"Temperature is normal.\")\n    } else {\n      println(\"Temperature is not normal.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Create a program that checks if a given time is during business hours.",
    "code": "```scala\nobject BusinessHoursChecker extends App {\n  def isDuringBusinessHours(hour: Int, minute: Int): Boolean = {\n    val startHour = 9\n    val endHour = 17\n    (hour > startHour || (hour == startHour && minute >= 0)) &&\n    (hour < endHour || (hour == endHour && minute == 0))\n  }\n\n  val hour = 10 // example hour\n  val minute = 30 // example minute\n\n  if (isDuringBusinessHours(hour, minute)) {\n    println(\"The time is during business hours.\")\n  } else {\n    println(\"The time is outside business hours.\")\n  }\n}\n```"
  },
  {
    "task": "Implement a function to see if a number is a triangular number.",
    "code": "```scala\ndef isTriangularNumber(n: Int): Boolean = {\n  val x = (Math.sqrt(8 * n.toDouble + 1) - 1) / 2\n  x == x.toInt\n}\n```"
  },
  {
    "task": "Write a feature to compare the number of vowels in two given strings.",
    "code": "```scala\nobject VowelComparison {\n  def countVowels(s: String): Int = {\n    s.toLowerCase.count(c => \"aeiou\".contains(c))\n  }\n\n  def compareVowelCount(str1: String, str2: String): String = {\n    val count1 = countVowels(str1)\n    val count2 = countVowels(str2)\n\n    if (count1 > count2) \"First string has more vowels\"\n    else if (count1 < count2) \"Second string has more vowels\"\n    else \"Both strings have the same number of vowels\"\n  }\n\n  def main(args: Array[String]): Unit = {\n    val result = compareVowelCount(\"hello\", \"world\")\n    println(result)\n  }\n}\n```"
  }
]