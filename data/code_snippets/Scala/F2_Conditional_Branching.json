[
  {
    "task": "Write a program that checks if a number is even or odd and outputs the result.",
    "code": "```scala\nobject EvenOddChecker {\n  def main(args: Array[String]): Unit = {\n    val number = 42 // You can change this number to test other values\n    if (number % 2 == 0) {\n      println(s\"$number is even\")\n    } else {\n      println(s\"$number is odd\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Create a function that determines if a given year is a leap year.",
    "code": "```scala\ndef isLeapYear(year: Int): Boolean = {\n  if (year % 400 == 0) {\n    true\n  } else if (year % 100 == 0) {\n    false\n  } else if (year % 4 == 0) {\n    true\n  } else {\n    false\n  }\n}\n```"
  },
  {
    "task": "Develop a script that categorizes an input number as positive, negative, or zero.",
    "code": "```scala\nobject NumberCategorizer {\n  def main(args: Array[String]): Unit = {\n    val inputNumber = scala.io.StdIn.readLine(\"Enter a number: \").toInt\n\n    if (inputNumber > 0) {\n      println(\"The number is positive.\")\n    } else if (inputNumber < 0) {\n      println(\"The number is negative.\")\n    } else {\n      println(\"The number is zero.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Implement a system that grants access only if a correct password and username are provided.",
    "code": "```scala\nobject AccessControlSystem {\n  def main(args: Array[String]): Unit = {\n    val correctUsername = \"admin\"\n    val correctPassword = \"password123\"\n\n    def grantAccess(username: String, password: String): Boolean = {\n      if (username == correctUsername && password == correctPassword) {\n        true\n      } else {\n        false\n      }\n    }\n\n    // Example usage:\n    val usernameInput = \"admin\"\n    val passwordInput = \"password123\"\n\n    if (grantAccess(usernameInput, passwordInput)) {\n      println(\"Access Granted\")\n    } else {\n      println(\"Access Denied\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Design a program that outputs 'Fizz' for numbers divisible by 3, 'Buzz' for numbers divisible by 5, and 'FizzBuzz' for numbers divisible by both.",
    "code": "```scala\nobject FizzBuzz extends App {\n  for (i <- 1 to 100) {\n    if (i % 15 == 0) println(\"FizzBuzz\")\n    else if (i % 3 == 0) println(\"Fizz\")\n    else if (i % 5 == 0) println(\"Buzz\")\n    else println(i)\n  }\n}\n```"
  },
  {
    "task": "Write a function to determine if a character is a vowel or a consonant.",
    "code": "```scala\ndef checkCharacter(ch: Char): String = {\n  ch.toLower match {\n    case 'a' | 'e' | 'i' | 'o' | 'u' => \"Vowel\"\n    case _ => \"Consonant\"\n  }\n}\n```"
  },
  {
    "task": "Create a program that assigns letter grades based on numerical scores.",
    "code": "```scala\nobject GradeAssigner {\n  def main(args: Array[String]): Unit = {\n    val score = 85 // Example score\n    val grade = assignGrade(score)\n    println(s\"Score: $score, Grade: $grade\")\n  }\n\n  def assignGrade(score: Int): String = {\n    if (score >= 90) {\n      \"A\"\n    } else if (score >= 80) {\n      \"B\"\n    } else if (score >= 70) {\n      \"C\"\n    } else if (score >= 60) {\n      \"D\"\n    } else {\n      \"F\"\n    }\n  }\n}\n```"
  },
  {
    "task": "Develop a routine that suggests clothing based on the current temperature.",
    "code": "```scala\nobject ClothingSuggestion {\n  def suggestClothing(temperature: Int): String = {\n    if (temperature < 0) {\n      \"Wear a heavy coat and gloves.\"\n    } else if (temperature >= 0 && temperature <= 10) {\n      \"Wear a coat and a hat.\"\n    } else if (temperature > 10 && temperature <= 20) {\n      \"Wear a light jacket.\"\n    } else if (temperature > 20 && temperature <= 30) {\n      \"Wear a t-shirt and shorts.\"\n    } else {\n      \"Wear a tank top and stay cool.\"\n    }\n  }\n\n  def main(args: Array[String]): Unit = {\n    val currentTemperature = 15 // Example temperature\n    println(suggestClothing(currentTemperature))\n  }\n}\n```"
  },
  {
    "task": "Implement a system that checks if a user is an adult or a minor based on their age.",
    "code": "```scala\nobject AgeChecker {\n  def checkAge(age: Int): String = {\n    if (age >= 18) {\n      \"Adult\"\n    } else {\n      \"Minor\"\n    }\n  }\n\n  def main(args: Array[String]): Unit = {\n    val age = 20 // example age\n    println(s\"The user is an ${checkAge(age)}.\")\n  }\n}\n```"
  },
  {
    "task": "Design a program that validates if a triangle can exist based on its side lengths.",
    "code": "```scala\nobject TriangleValidator {\n  def isValidTriangle(a: Double, b: Double, c: Double): Boolean = {\n    if (a > 0 && b > 0 && c > 0) {\n      if (a + b > c && a + c > b && b + c > a) {\n        true\n      } else {\n        false\n      }\n    } else {\n      false\n    }\n  }\n\n  def main(args: Array[String]): Unit = {\n    val a = 3.0\n    val b = 4.0\n    val c = 5.0\n    if (isValidTriangle(a, b, c)) {\n      println(\"The triangle can exist.\")\n    } else {\n      println(\"The triangle cannot exist.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Write a function that determines the largest of three input numbers.",
    "code": "```scala\ndef largestOfThree(a: Int, b: Int, c: Int): Int = {\n  if (a >= b && a >= c) a\n  else if (b >= a && b >= c) b\n  else c\n}\n```"
  },
  {
    "task": "Create a program that checks if a string is a palindrome.",
    "code": "```scala\nobject PalindromeChecker {\n  def isPalindrome(s: String): Boolean = {\n    val cleanedString = s.toLowerCase.replaceAll(\"[^a-z0-9]\", \"\")\n    cleanedString == cleanedString.reverse\n  }\n\n  def main(args: Array[String]): Unit = {\n    val testString = \"A man, a plan, a canal, Panama\"\n    if (isPalindrome(testString)) {\n      println(s\"'$testString' is a palindrome.\")\n    } else {\n      println(s\"'$testString' is not a palindrome.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Develop a routine that calculates the total cost with a discount applied if applicable.",
    "code": "```scala\nobject DiscountCalculator {\n  def calculateTotalCost(items: List[Double], discountThreshold: Double, discountRate: Double): Double = {\n    val totalCost = items.sum\n    if (totalCost >= discountThreshold) {\n      totalCost * (1 - discountRate)\n    } else {\n      totalCost\n    }\n  }\n\n  def main(args: Array[String]): Unit = {\n    val items = List(29.99, 49.99, 9.99)\n    val discountThreshold = 50.0\n    val discountRate = 0.1\n    val totalCost = calculateTotalCost(items, discountThreshold, discountRate)\n    println(f\"Total cost after discount (if applicable): $$${totalCost}%.2f\")\n  }\n}\n```"
  },
  {
    "task": "Implement a system that checks if a person is eligible to vote based on age and citizenship.",
    "code": "```scala\nobject VotingEligibilityChecker {\n  def isEligibleToVote(age: Int, isCitizen: Boolean): Boolean = {\n    if (age >= 18 && isCitizen) {\n      true\n    } else {\n      false\n    }\n  }\n\n  def main(args: Array[String]): Unit = {\n    val age = 20\n    val isCitizen = true\n\n    if (isEligibleToVote(age, isCitizen)) {\n      println(\"Person is eligible to vote.\")\n    } else {\n      println(\"Person is not eligible to vote.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Design a function that returns the day of the week given a number from 1 to 7.",
    "code": "```scala\ndef dayOfWeek(number: Int): String = {\n  number match {\n    case 1 => \"Monday\"\n    case 2 => \"Tuesday\"\n    case 3 => \"Wednesday\"\n    case 4 => \"Thursday\"\n    case 5 => \"Friday\"\n    case 6 => \"Saturday\"\n    case 7 => \"Sunday\"\n    case _ => \"Invalid number\"\n  }\n}\n```"
  },
  {
    "task": "Write a program that determines if a word is found within a given sentence.",
    "code": "```scala\nobject WordInSentence {\n  def main(args: Array[String]): Unit = {\n    val sentence = \"This is a sample sentence\"\n    val word = \"sample\"\n    \n    if (sentence.contains(word)) {\n      println(s\"The word '$word' is found in the sentence.\")\n    } else {\n      println(s\"The word '$word' is not found in the sentence.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Create a script that checks if a number is within a specified range.",
    "code": "```scala\nobject RangeChecker {\n  def main(args: Array[String]): Unit = {\n    val number = 10\n    val lowerBound = 5\n    val upperBound = 15\n\n    if (number >= lowerBound && number <= upperBound) {\n      println(s\"$number is within the range.\")\n    } else {\n      println(s\"$number is out of the range.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Develop a routine to decide if a user input is a valid email address.",
    "code": "```scala\nimport scala.util.matching.Regex\nimport scala.io.StdIn.readLine\n\nobject EmailValidator {\n  def isValidEmail(email: String): Boolean = {\n    val emailPattern: Regex = \"^[\\\\w.-]+@[\\\\w.-]+\\\\.[a-zA-Z]{2,}$\".r\n    emailPattern.matches(email)\n  }\n\n  def main(args: Array[String]): Unit = {\n    println(\"Enter an email address:\")\n    val input = readLine()\n    if (isValidEmail(input)) {\n      println(\"Valid email address.\")\n    } else {\n      println(\"Invalid email address.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Implement a program that categorizes a number as small, medium, or large.",
    "code": "```scala\nobject NumberCategorizer extends App {\n  def categorizeNumber(num: Int): String = {\n    if (num < 10) {\n      \"small\"\n    } else if (num <= 100) {\n      \"medium\"\n    } else {\n      \"large\"\n    }\n  }\n\n  // Example usage\n  val number = 42\n  println(s\"The number $number is ${categorizeNumber(number)}.\")\n}\n```"
  },
  {
    "task": "Design a function that outputs the season based on the month provided.",
    "code": "```scala\ndef season(month: String): String = {\n  month.toLowerCase match {\n    case \"december\" | \"january\" | \"february\" => \"Winter\"\n    case \"march\" | \"april\" | \"may\" => \"Spring\"\n    case \"june\" | \"july\" | \"august\" => \"Summer\"\n    case \"september\" | \"october\" | \"november\" => \"Autumn\"\n    case _ => \"Invalid month\"\n  }\n}\n```"
  },
  {
    "task": "Write a program that checks if a string contains only alphabetic characters.",
    "code": "```scala\nobject AlphabeticCheck {\n  def isAlphabetic(s: String): Boolean = {\n    s.forall(_.isLetter)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val testString = \"HelloWorld\"\n    if (isAlphabetic(testString)) {\n      println(s\"The string '$testString' contains only alphabetic characters.\")\n    } else {\n      println(s\"The string '$testString' contains non-alphabetic characters.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Create a routine that decides the type of triangle based on its angles.",
    "code": "```scala\nobject TriangleType {\n  def triangleType(angle1: Int, angle2: Int, angle3: Int): String = {\n    if (angle1 + angle2 + angle3 != 180 || angle1 <= 0 || angle2 <= 0 || angle3 <= 0) {\n      \"Invalid\"\n    } else if (angle1 == 90 || angle2 == 90 || angle3 == 90) {\n      \"Right\"\n    } else if (angle1 < 90 && angle2 < 90 && angle3 < 90) {\n      \"Acute\"\n    } else {\n      \"Obtuse\"\n    }\n  }\n}\n```"
  },
  {
    "task": "Develop a program that suggests a meal based on the time of day.",
    "code": "```scala\nobject MealSuggester {\n  def suggestMeal(hour: Int): String = {\n    if (hour >= 5 && hour < 11) {\n      \"Breakfast\"\n    } else if (hour >= 11 && hour < 16) {\n      \"Lunch\"\n    } else if (hour >= 16 && hour < 21) {\n      \"Dinner\"\n    } else {\n      \"Snack\"\n    }\n  }\n\n  def main(args: Array[String]): Unit = {\n    val currentHour = java.time.LocalTime.now().getHour\n    println(s\"Suggested meal: ${suggestMeal(currentHour)}\")\n  }\n}\n```"
  },
  {
    "task": "Implement a function that determines if a point lies within a circle given its radius.",
    "code": "```scala\nobject Circle {\n  def isPointInsideCircle(x: Double, y: Double, radius: Double): Boolean = {\n    val distanceSquared = x * x + y * y\n    distanceSquared <= radius * radius\n  }\n}\n```"
  },
  {
    "task": "Design a script that calculates overtime pay based on hours worked.",
    "code": "```scala\nobject OvertimeCalculator {\n  def calculateOvertimePay(hoursWorked: Double, hourlyRate: Double): Double = {\n    val standardHours = 40\n    val overtimeRate = 1.5\n    \n    if (hoursWorked > standardHours) {\n      val overtimeHours = hoursWorked - standardHours\n      val overtimePay = overtimeHours * hourlyRate * overtimeRate\n      val standardPay = standardHours * hourlyRate\n      standardPay + overtimePay\n    } else {\n      hoursWorked * hourlyRate\n    }\n  }\n\n  def main(args: Array[String]): Unit = {\n    val hoursWorked = 45.0\n    val hourlyRate = 20.0\n    val totalPay = calculateOvertimePay(hoursWorked, hourlyRate)\n    println(s\"Total pay: $$${totalPay}\")\n  }\n}\n```"
  },
  {
    "task": "Write a program that checks if two strings are anagrams of each other.",
    "code": "```scala\nobject AnagramCheck {\n  def areAnagrams(s1: String, s2: String): Boolean = {\n    if (s1.length != s2.length) {\n      false\n    } else {\n      s1.sorted == s2.sorted\n    }\n  }\n\n  def main(args: Array[String]): Unit = {\n    val str1 = \"listen\"\n    val str2 = \"silent\"\n    println(areAnagrams(str1, str2)) // Output: true\n\n    val str3 = \"hello\"\n    val str4 = \"world\"\n    println(areAnagrams(str3, str4)) // Output: false\n  }\n}\n```"
  },
  {
    "task": "Create a function that classifies numbers as prime or composite.",
    "code": "```scala\ndef classifyNumber(n: Int): String = {\n  if (n <= 1) {\n    \"Neither prime nor composite\"\n  } else if (n == 2) {\n    \"Prime\"\n  } else {\n    var isPrime = true\n    for (i <- 2 until math.sqrt(n).toInt + 1) {\n      if (n % i == 0) {\n        isPrime = false\n      }\n    }\n    if (isPrime) \"Prime\" else \"Composite\"\n  }\n}\n```"
  },
  {
    "task": "Develop a routine to determine if a number is a power of two.",
    "code": "```scala\nobject PowerOfTwo {\n  def isPowerOfTwo(number: Int): Boolean = {\n    if (number <= 0) {\n      false\n    } else {\n      (number & (number - 1)) == 0\n    }\n  }\n}\n```"
  },
  {
    "task": "Implement a program that checks if a list is sorted in ascending order.",
    "code": "```scala\nobject CheckSorted {\n  def isSorted(list: List[Int]): Boolean = {\n    def checkAscending(list: List[Int]): Boolean = list match {\n      case Nil | _ :: Nil => true\n      case first :: second :: rest => \n        if (first <= second) checkAscending(second :: rest) \n        else false\n    }\n    checkAscending(list)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val sampleList = List(1, 2, 3, 4, 5)\n    println(s\"Is the list sorted? ${isSorted(sampleList)}\")\n  }\n}\n```"
  },
  {
    "task": "Design a function that suggests a sport based on the weather conditions.",
    "code": "```scala\ndef suggestSport(weather: String): String = {\n  weather.toLowerCase match {\n    case \"sunny\" => \"Tennis\"\n    case \"rainy\" => \"Swimming\"\n    case \"windy\" => \"Kite Surfing\"\n    case \"snowy\" => \"Skiing\"\n    case _ => \"Stay indoors\"\n  }\n}\n```"
  },
  {
    "task": "Write a program that determines if an entered date is valid.",
    "code": "```scala\nimport java.time.LocalDate\nimport java.time.format.DateTimeFormatter\nimport java.time.format.DateTimeParseException\n\nobject DateValidator {\n  def main(args: Array[String]): Unit = {\n    val dateStr = scala.io.StdIn.readLine(\"Enter a date (yyyy-MM-dd): \")\n    val isValid = isValidDate(dateStr)\n    if (isValid) {\n      println(s\"The date $dateStr is valid.\")\n    } else {\n      println(s\"The date $dateStr is invalid.\")\n    }\n  }\n\n  def isValidDate(dateStr: String): Boolean = {\n    val formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")\n    try {\n      LocalDate.parse(dateStr, formatter)\n      true\n    } catch {\n      case _: DateTimeParseException => false\n    }\n  }\n}\n```"
  },
  {
    "task": "Create a script to decide which of two products to buy based on price and reviews.",
    "code": "```scala\nobject ProductDecision extends App {\n  val productA = (\"Product A\", 49.99, 4.5) // (name, price, rating)\n  val productB = (\"Product B\", 59.99, 4.7)\n\n  def decideProduct(p1: (String, Double, Double), p2: (String, Double, Double)): String = {\n    if (p1._2 < p2._2 && p1._3 >= p2._3) {\n      s\"Buy ${p1._1}\"\n    } else if (p2._2 < p1._2 && p2._3 >= p1._3) {\n      s\"Buy ${p2._1}\"\n    } else if (p1._3 > p2._3) {\n      s\"Buy ${p1._1}\"\n    } else {\n      s\"Buy ${p2._1}\"\n    }\n  }\n\n  println(decideProduct(productA, productB))\n}\n```"
  },
  {
    "task": "Develop a function that categorizes a person\u2019s BMI as underweight, normal, overweight, or obese.",
    "code": "```scala\ndef categorizeBMI(weight: Double, height: Double): String = {\n  val bmi = weight / (height * height)\n  bmi match {\n    case x if x < 18.5 => \"Underweight\"\n    case x if x < 24.9 => \"Normal\"\n    case x if x < 29.9 => \"Overweight\"\n    case _ => \"Obese\"\n  }\n}\n```"
  },
  {
    "task": "Implement a program that checks if a credit card number is valid using the Luhn algorithm.",
    "code": "```scala\nobject LuhnAlgorithm {\n  def isValidCreditCardNumber(cardNumber: String): Boolean = {\n    val digits = cardNumber.replaceAll(\"\\\\s\", \"\").reverse.map(_.asDigit)\n    val checksum = digits.zipWithIndex.map { case (digit, idx) =>\n      if (idx % 2 == 1) {\n        val doubled = digit * 2\n        if (doubled > 9) doubled - 9 else doubled\n      } else {\n        digit\n      }\n    }.sum\n    checksum % 10 == 0\n  }\n\n  def main(args: Array[String]): Unit = {\n    val cardNumber = \"1234567812345670\" // Example card number\n    if (isValidCreditCardNumber(cardNumber)) {\n      println(s\"$cardNumber is a valid credit card number.\")\n    } else {\n      println(s\"$cardNumber is not a valid credit card number.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Design a routine that outputs a greeting based on the current time of day.",
    "code": "```scala\nimport java.time.LocalTime\n\nobject GreetingApp extends App {\n  val currentTime = LocalTime.now()\n  val hour = currentTime.getHour\n\n  val greeting = if (hour < 12) {\n    \"Good morning!\"\n  } else if (hour < 18) {\n    \"Good afternoon!\"\n  } else {\n    \"Good evening!\"\n  }\n\n  println(greeting)\n}\n```"
  },
  {
    "task": "Write a program that determines if a given word can be formed with a set of letters.",
    "code": "```scala\nobject WordFormationChecker {\n  def canFormWord(word: String, letters: String): Boolean = {\n    val lettersMap = letters.groupBy(identity).view.mapValues(_.length).toMap\n    val wordMap = word.groupBy(identity).view.mapValues(_.length).toMap\n\n    wordMap.forall { case (char, count) =>\n      lettersMap.getOrElse(char, 0) >= count\n    }\n  }\n\n  def main(args: Array[String]): Unit = {\n    val word = \"example\"\n    val letters = \"axemlpe\"\n    println(canFormWord(word, letters))\n  }\n}\n```"
  },
  {
    "task": "Create a function that outputs the appropriate greeting based on the day of the week.",
    "code": "```scala\ndef greetingForDay(dayOfWeek: String): String = {\n  dayOfWeek.toLowerCase match {\n    case \"monday\" => \"Happy Monday!\"\n    case \"tuesday\" => \"Terrific Tuesday!\"\n    case \"wednesday\" => \"Wonderful Wednesday!\"\n    case \"thursday\" => \"Thankful Thursday!\"\n    case \"friday\" => \"Fantastic Friday!\"\n    case \"saturday\" => \"Superb Saturday!\"\n    case \"sunday\" => \"Serene Sunday!\"\n    case _ => \"Invalid day!\"\n  }\n}\n```"
  },
  {
    "task": "Develop a system to determine if a person qualifies for a senior citizen discount.",
    "code": "```scala\nobject SeniorCitizenDiscount {\n  def qualifiesForDiscount(age: Int): Boolean = {\n    if (age >= 65) true else false\n  }\n\n  def main(args: Array[String]): Unit = {\n    val age = 70\n    if (qualifiesForDiscount(age)) {\n      println(\"The person qualifies for a senior citizen discount.\")\n    } else {\n      println(\"The person does not qualify for a senior citizen discount.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Implement a function that checks if a number is a perfect square.",
    "code": "```scala\ndef isPerfectSquare(n: Int): Boolean = {\n  if (n < 0) false\n  else {\n    val root = Math.sqrt(n).toInt\n    root * root == n\n  }\n}\n```"
  },
  {
    "task": "Design a program that outputs the correct shipping cost based on weight and distance.",
    "code": "```scala\nobject ShippingCostCalculator extends App {\n  def calculateShippingCost(weight: Double, distance: Int): Double = {\n    if (weight <= 0 || distance <= 0) {\n      0.0\n    } else if (weight <= 5) {\n      if (distance <= 100) 5.0 else 10.0\n    } else if (weight <= 20) {\n      if (distance <= 100) 10.0 else 20.0\n    } else {\n      if (distance <= 100) 20.0 else 40.0\n    }\n  }\n\n  val weight = 10.0\n  val distance = 150\n  println(s\"The shipping cost is: ${calculateShippingCost(weight, distance)}\")\n}\n```"
  },
  {
    "task": "Write a routine that chooses the correct pronoun based on gender input.",
    "code": "```scala\ndef choosePronoun(gender: String): String = {\n  gender.toLowerCase match {\n    case \"male\" => \"he\"\n    case \"female\" => \"she\"\n    case \"non-binary\" => \"they\"\n    case _ => \"they\"\n  }\n}\n```"
  },
  {
    "task": "Create a program that checks if a user input is a palindrome number.",
    "code": "```scala\nobject PalindromeChecker {\n  def isPalindrome(number: Int): Boolean = {\n    val str = number.toString\n    str == str.reverse\n  }\n\n  def main(args: Array[String]): Unit = {\n    println(\"Enter a number:\")\n    val input = scala.io.StdIn.readInt()\n    if (isPalindrome(input)) {\n      println(s\"$input is a palindrome number.\")\n    } else {\n      println(s\"$input is not a palindrome number.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Develop a script to decide if a number is a perfect number.",
    "code": "```scala\nobject PerfectNumberCheck {\n  def isPerfectNumber(n: Int): Boolean = {\n    if (n < 2) return false\n    val sumOfDivisors = (1 until n).filter(n % _ == 0).sum\n    sumOfDivisors == n\n  }\n\n  def main(args: Array[String]): Unit = {\n    val number = 28 // Example number\n    if (isPerfectNumber(number)) {\n      println(s\"$number is a perfect number.\")\n    } else {\n      println(s\"$number is not a perfect number.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Implement a system that determines the winner in a rock-paper-scissors game.",
    "code": "```scala\nobject RockPaperScissors extends App {\n  def determineWinner(player1: String, player2: String): String = {\n    (player1, player2) match {\n      case (p1, p2) if p1 == p2 => \"Draw\"\n      case (\"rock\", \"scissors\") | (\"scissors\", \"paper\") | (\"paper\", \"rock\") => \"Player 1 wins\"\n      case (\"scissors\", \"rock\") | (\"paper\", \"scissors\") | (\"rock\", \"paper\") => \"Player 2 wins\"\n      case _ => \"Invalid input\"\n    }\n  }\n\n  println(determineWinner(\"rock\", \"scissors\")) // Player 1 wins\n  println(determineWinner(\"rock\", \"rock\"))     // Draw\n  println(determineWinner(\"rock\", \"paper\"))    // Player 2 wins\n}\n```"
  },
  {
    "task": "Design a function that suggests a movie genre based on user mood.",
    "code": "```scala\ndef suggestGenre(mood: String): String = {\n  mood.toLowerCase match {\n    case \"happy\" => \"Comedy\"\n    case \"sad\" => \"Drama\"\n    case \"excited\" => \"Action\"\n    case \"romantic\" => \"Romance\"\n    case \"scared\" => \"Horror\"\n    case _ => \"Documentary\"\n  }\n}\n```"
  },
  {
    "task": "Write a program that checks if a file extension is valid for an image file.",
    "code": "```scala\nobject ImageFileValidator {\n  def isValidImageExtension(filename: String): Boolean = {\n    val validExtensions = Set(\"jpg\", \"jpeg\", \"png\", \"gif\", \"bmp\", \"tiff\", \"svg\")\n    val extension = filename.split(\"\\\\.\").lastOption.getOrElse(\"\").toLowerCase\n    validExtensions.contains(extension)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val testFileNames = List(\"photo.jpg\", \"document.pdf\", \"image.png\", \"graphic.svg\", \"animation.gif\")\n    testFileNames.foreach { filename =>\n      if (isValidImageExtension(filename)) {\n        println(s\"$filename is a valid image file.\")\n      } else {\n        println(s\"$filename is not a valid image file.\")\n      }\n    }\n  }\n}\n```"
  },
  {
    "task": "Create a routine that decides the appropriate currency symbol based on country.",
    "code": "```scala\ndef getCurrencySymbol(country: String): String = {\n  country.toLowerCase match {\n    case \"united states\" => \"$\"\n    case \"united kingdom\" => \"\u00a3\"\n    case \"european union\" => \"\u20ac\"\n    case \"japan\" => \"\u00a5\"\n    case \"india\" => \"\u20b9\"\n    case _ => \"Unknown\"\n  }\n}\n```"
  },
  {
    "task": "Develop a function that determines if a string is a valid palindrome ignoring spaces and punctuation.",
    "code": "```scala\ndef isValidPalindrome(s: String): Boolean = {\n  val filtered = s.toLowerCase.filter(_.isLetterOrDigit)\n  filtered == filtered.reverse\n}\n```"
  },
  {
    "task": "Implement a program that checks if a number is in the Fibonacci sequence.",
    "code": "```scala\nobject FibonacciChecker {\n  def isFibonacci(n: Int): Boolean = {\n    if (n < 0) return false\n\n    var a = 0\n    var b = 1\n\n    while (b < n) {\n      val temp = a\n      a = b\n      b = temp + a\n    }\n\n    b == n || a == n\n  }\n\n  def main(args: Array[String]): Unit = {\n    val number = 21 // Example number to check\n    if (isFibonacci(number)) {\n      println(s\"$number is in the Fibonacci sequence.\")\n    } else {\n      println(s\"$number is not in the Fibonacci sequence.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Design a script to calculate the correct tip based on service quality rating.",
    "code": "```scala\nobject TipCalculator {\n  def main(args: Array[String]): Unit = {\n    val serviceQuality = \"good\" // This can be \"poor\", \"average\", \"good\", or \"excellent\"\n    val billAmount = 100.0 // Example bill amount\n    val tipPercentage = serviceQuality match {\n      case \"poor\" => 0.05\n      case \"average\" => 0.10\n      case \"good\" => 0.15\n      case \"excellent\" => 0.20\n      case _ => 0.0\n    }\n    val tip = billAmount * tipPercentage\n    println(s\"The tip for a $serviceQuality service on a $$${billAmount} bill is: $$${tip}\")\n  }\n}\n```"
  },
  {
    "task": "Write a function that determines if a year is a century year.",
    "code": "```scala\ndef isCenturyYear(year: Int): Boolean = {\n  year % 100 == 0\n}\n```"
  },
  {
    "task": "Create a program that checks if a date falls on a weekend.",
    "code": "```scala\nimport java.time.{DayOfWeek, LocalDate}\n\nobject WeekendChecker {\n  def isWeekend(date: LocalDate): Boolean = {\n    val dayOfWeek = date.getDayOfWeek\n    dayOfWeek == DayOfWeek.SATURDAY || dayOfWeek == DayOfWeek.SUNDAY\n  }\n\n  def main(args: Array[String]): Unit = {\n    val date = LocalDate.of(2023, 10, 7) // Example date\n    if (isWeekend(date)) {\n      println(s\"$date is a weekend.\")\n    } else {\n      println(s\"$date is not a weekend.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Develop a routine that suggests a book based on genre preference.",
    "code": "```scala\nobject BookSuggester {\n  def suggestBook(genre: String): String = {\n    genre.toLowerCase match {\n      case \"science fiction\" => \"Dune by Frank Herbert\"\n      case \"fantasy\" => \"The Hobbit by J.R.R. Tolkien\"\n      case \"mystery\" => \"The Girl with the Dragon Tattoo by Stieg Larsson\"\n      case \"romance\" => \"Pride and Prejudice by Jane Austen\"\n      case \"horror\" => \"It by Stephen King\"\n      case \"non-fiction\" => \"Sapiens: A Brief History of Humankind by Yuval Noah Harari\"\n      case _ => \"Genre not recognized, try another one!\"\n    }\n  }\n\n  def main(args: Array[String]): Unit = {\n    val genre = \"fantasy\"\n    println(suggestBook(genre))\n  }\n}\n```"
  },
  {
    "task": "Implement a system that determines if a student passes or fails based on their grades.",
    "code": "```scala\nobject GradeEvaluator {\n  def main(args: Array[String]): Unit = {\n    val grade = 75 // Example grade\n\n    if (grade >= 50) {\n      println(\"Pass\")\n    } else {\n      println(\"Fail\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Design a function to validate if a string is a valid URL.",
    "code": "```scala\ndef isValidURL(url: String): Boolean = {\n  if (url == null || url.isEmpty) {\n    false\n  } else {\n    try {\n      val parsedUrl = new java.net.URL(url)\n      parsedUrl.getProtocol match {\n        case \"http\" | \"https\" => true\n        case _ => false\n      }\n    } catch {\n      case _: Exception => false\n    }\n  }\n}\n```"
  },
  {
    "task": "Write a program that checks if a point is inside a rectangle given its coordinates.",
    "code": "```scala\nobject PointInRectangle {\n  def isPointInsideRectangle(px: Double, py: Double, rx1: Double, ry1: Double, rx2: Double, ry2: Double): Boolean = {\n    val (left, right) = if (rx1 < rx2) (rx1, rx2) else (rx2, rx1)\n    val (bottom, top) = if (ry1 < ry2) (ry1, ry2) else (ry2, ry1)\n    px >= left && px <= right && py >= bottom && py <= top\n  }\n\n  def main(args: Array[String]): Unit = {\n    val px = 3.0\n    val py = 4.0\n    val rx1 = 1.0\n    val ry1 = 2.0\n    val rx2 = 5.0\n    val ry2 = 6.0\n\n    if (isPointInsideRectangle(px, py, rx1, ry1, rx2, ry2)) {\n      println(\"The point is inside the rectangle.\")\n    } else {\n      println(\"The point is outside the rectangle.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Create a script to determine if a word can be constructed from a given set of letters.",
    "code": "```scala\nobject WordConstruction {\n  def canConstructWord(word: String, letters: String): Boolean = {\n    val letterMap = letters.groupBy(identity).view.mapValues(_.length).toMap\n    word.forall(c => letterMap.getOrElse(c, 0) > 0 && {\n      letterMap.updated(c, letterMap(c) - 1)\n      true\n    })\n  }\n\n  def main(args: Array[String]): Unit = {\n    val word = \"hello\"\n    val letters = \"hleol\"\n    val result = canConstructWord(word, letters)\n    println(s\"Can construct word: $result\")\n  }\n}\n```"
  },
  {
    "task": "Develop a routine that calculates insurance premiums based on age and driving record.",
    "code": "```scala\ndef calculateInsurancePremium(age: Int, hasGoodDrivingRecord: Boolean): Double = {\n  if (age < 18) {\n    0.0 // Ineligible for insurance\n  } else if (age < 25) {\n    if (hasGoodDrivingRecord) 200.0 else 300.0\n  } else if (age < 65) {\n    if (hasGoodDrivingRecord) 150.0 else 250.0\n  } else {\n    if (hasGoodDrivingRecord) 180.0 else 280.0\n  }\n}\n\n// Example usage\nval premium = calculateInsurancePremium(30, true)\nprintln(s\"Insurance Premium: $$${premium}\")\n```"
  },
  {
    "task": "Implement a program that checks for palindrome sentences.",
    "code": "```scala\nobject PalindromeChecker {\n  def isPalindrome(sentence: String): Boolean = {\n    val cleaned = sentence.toLowerCase.replaceAll(\"[^a-zA-Z0-9]\", \"\")\n    cleaned == cleaned.reverse\n  }\n\n  def main(args: Array[String]): Unit = {\n    val sentences = List(\n      \"A man, a plan, a canal, Panama\",\n      \"This is not a palindrome\",\n      \"Was it a car or a cat I saw\",\n      \"No lemon, no melon\"\n    )\n\n    sentences.foreach { sentence =>\n      if (isPalindrome(sentence)) {\n        println(s\"'$sentence' is a palindrome.\")\n      } else {\n        println(s\"'$sentence' is not a palindrome.\")\n      }\n    }\n  }\n}\n```"
  },
  {
    "task": "Design a function to evaluate if a string contains balanced parentheses.",
    "code": "```scala\ndef isBalanced(s: String): Boolean = {\n  var balance = 0\n  for (char <- s) {\n    if (char == '(') balance += 1\n    else if (char == ')') balance -= 1\n    if (balance < 0) return false\n  }\n  balance == 0\n}\n```"
  },
  {
    "task": "Write a program that suggests a pet based on living conditions and preferences.",
    "code": "```scala\nobject PetSuggester {\n  def suggestPet(livingSpace: String, preference: String): String = {\n    (livingSpace.toLowerCase, preference.toLowerCase) match {\n      case (\"apartment\", \"quiet\") => \"Cat\"\n      case (\"apartment\", \"active\") => \"Small Dog\"\n      case (\"house\", \"quiet\") => \"Fish\"\n      case (\"house\", \"active\") => \"Large Dog\"\n      case (\"farm\", \"quiet\") => \"Goat\"\n      case (\"farm\", \"active\") => \"Horse\"\n      case _ => \"Hamster\"\n    }\n  }\n\n  def main(args: Array[String]): Unit = {\n    println(suggestPet(\"apartment\", \"quiet\"))\n    println(suggestPet(\"house\", \"active\"))\n  }\n}\n```"
  },
  {
    "task": "Create a routine that determines if a phone number is valid based on format.",
    "code": "```scala\ndef isValidPhoneNumber(phoneNumber: String): Boolean = {\n  if (phoneNumber.matches(\"\\\\(\\\\d{3}\\\\) \\\\d{3}-\\\\d{4}\")) {\n    true\n  } else {\n    false\n  }\n}\n\n// Example usage\nprintln(isValidPhoneNumber(\"(123) 456-7890\")) // Output: true\nprintln(isValidPhoneNumber(\"123-456-7890\"))   // Output: false\n```"
  },
  {
    "task": "Develop a function that checks if two rectangles overlap.",
    "code": "```scala\nobject RectangleOverlap {\n  case class Rectangle(x1: Int, y1: Int, x2: Int, y2: Int)\n\n  def doOverlap(rect1: Rectangle, rect2: Rectangle): Boolean = {\n    if (rect1.x1 >= rect2.x2 || rect2.x1 >= rect1.x2) false\n    else if (rect1.y1 >= rect2.y2 || rect2.y1 >= rect1.y2) false\n    else true\n  }\n}\n```"
  },
  {
    "task": "Implement a program that chooses a beverage based on user input time.",
    "code": "```scala\nobject BeverageChooser {\n  def main(args: Array[String]): Unit = {\n    println(\"Enter the time in 24-hour format (e.g., 13 for 1 PM):\")\n    val time = scala.io.StdIn.readInt()\n\n    val beverage = if (time >= 5 && time < 12) {\n      \"Coffee\"\n    } else if (time >= 12 && time < 17) {\n      \"Tea\"\n    } else if (time >= 17 && time < 21) {\n      \"Juice\"\n    } else {\n      \"Water\"\n    }\n\n    println(s\"The recommended beverage is: $beverage\")\n  }\n}\n```"
  },
  {
    "task": "Design a script to determine if a URL is secure (HTTPS).",
    "code": "```scala\nobject URLChecker {\n  def isSecure(url: String): Boolean = {\n    url.startsWith(\"https://\")\n  }\n\n  def main(args: Array[String]): Unit = {\n    val url = \"https://example.com\"\n    if (isSecure(url)) {\n      println(\"The URL is secure.\")\n    } else {\n      println(\"The URL is not secure.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Write a function that outputs different messages based on the input number's divisibility.",
    "code": "```scala\ndef divisibilityMessage(number: Int): String = {\n  if (number % 15 == 0) {\n    \"Divisible by both 3 and 5\"\n  } else if (number % 3 == 0) {\n    \"Divisible by 3\"\n  } else if (number % 5 == 0) {\n    \"Divisible by 5\"\n  } else {\n    \"Not divisible by 3 or 5\"\n  }\n}\n```"
  },
  {
    "task": "Create a program to decide if a person should bring an umbrella based on the weather forecast.",
    "code": "```scala\nobject UmbrellaDecision {\n  def main(args: Array[String]): Unit = {\n    val forecast = \"rainy\" // Example input: could be \"sunny\", \"cloudy\", \"rainy\", etc.\n    \n    val shouldBringUmbrella = if (forecast == \"rainy\" || forecast == \"stormy\") {\n      true\n    } else {\n      false\n    }\n    \n    println(\"Should bring an umbrella: \" + shouldBringUmbrella)\n  }\n}\n```"
  },
  {
    "task": "Develop a routine that checks if a chess move is valid.",
    "code": "```scala\nobject ChessValidator {\n  val boardSize = 8\n\n  def isValidMove(startRow: Int, startCol: Int, endRow: Int, endCol: Int, piece: String): Boolean = {\n    def isWithinBounds(row: Int, col: Int): Boolean =\n      row >= 0 && row < boardSize && col >= 0 && col < boardSize\n\n    if (!isWithinBounds(startRow, startCol) || !isWithinBounds(endRow, endCol)) {\n      false\n    } else {\n      piece.toLowerCase match {\n        case \"pawn\" =>\n          (startCol == endCol && endRow == startRow + 1) ||\n          (startRow == 1 && startCol == endCol && endRow == startRow + 2)\n\n        case \"knight\" =>\n          (math.abs(startRow - endRow) == 2 && math.abs(startCol - endCol) == 1) ||\n          (math.abs(startRow - endRow) == 1 && math.abs(startCol - endCol) == 2)\n\n        case \"bishop\" =>\n          math.abs(startRow - endRow) == math.abs(startCol - endCol)\n\n        case \"rook\" =>\n          startRow == endRow || startCol == endCol\n\n        case \"queen\" =>\n          (startRow == endRow || startCol == endCol) ||\n          (math.abs(startRow - endRow) == math.abs(startCol - endCol))\n\n        case \"king\" =>\n          math.abs(startRow - endRow) <= 1 && math.abs(startCol - endCol) <= 1\n\n        case _ => false\n      }\n    }\n  }\n\n  def main(args: Array[String]): Unit = {\n    println(isValidMove(0, 0, 0, 1, \"rook\")) // true\n    println(isValidMove(0, 0, 2, 1, \"knight\")) // true\n    println(isValidMove(0, 0, 1, 1, \"bishop\")) // true\n    println(isValidMove(0, 0, 2, 2, \"queen\")) // false\n  }\n}\n```"
  },
  {
    "task": "Implement a program that outputs the number of days in a given month.",
    "code": "```scala\nobject DaysInMonth {\n  def main(args: Array[String]): Unit = {\n    val month = scala.io.StdIn.readLine(\"Enter the month: \").toLowerCase\n    val days = month match {\n      case \"january\" | \"march\" | \"may\" | \"july\" | \"august\" | \"october\" | \"december\" => 31\n      case \"april\" | \"june\" | \"september\" | \"november\" => 30\n      case \"february\" => 28 // Assuming non-leap year\n      case _ => -1 // Invalid month\n    }\n    if (days != -1) {\n      println(s\"The number of days in $month is $days.\")\n    } else {\n      println(\"Invalid month entered.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Design a function that validates if a string is a valid hexadecimal number.",
    "code": "```scala\ndef isValidHexadecimal(s: String): Boolean = {\n  if (s.isEmpty) false\n  else {\n    val hexPattern = \"^[0-9a-fA-F]+$\".r\n    hexPattern.matches(s)\n  }\n}\n```"
  },
  {
    "task": "Write a script that checks if a word is present in a list of predefined words.",
    "code": "```scala\nobject WordChecker {\n  def main(args: Array[String]): Unit = {\n    val predefinedWords = List(\"apple\", \"banana\", \"orange\", \"grape\")\n    val wordToCheck = \"banana\"\n\n    if (predefinedWords.contains(wordToCheck)) {\n      println(s\"The word '$wordToCheck' is present in the list.\")\n    } else {\n      println(s\"The word '$wordToCheck' is not present in the list.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Create a routine to decide the correct tax bracket for a given income.",
    "code": "```scala\ndef determineTaxBracket(income: Double): String = {\n  if (income <= 9875) {\n    \"10%\"\n  } else if (income <= 40125) {\n    \"12%\"\n  } else if (income <= 85525) {\n    \"22%\"\n  } else if (income <= 163300) {\n    \"24%\"\n  } else if (income <= 207350) {\n    \"32%\"\n  } else if (income <= 518400) {\n    \"35%\"\n  } else {\n    \"37%\"\n  }\n}\n```"
  },
  {
    "task": "Develop a function that determines if a point is within a triangle.",
    "code": "```scala\ncase class Point(x: Double, y: Double)\n\ndef isPointInTriangle(p: Point, a: Point, b: Point, c: Point): Boolean = {\n  def sign(p1: Point, p2: Point, p3: Point): Double = {\n    (p1.x - p3.x) * (p2.y - p3.y) - (p2.x - p3.x) * (p1.y - p3.y)\n  }\n\n  val d1 = sign(p, a, b)\n  val d2 = sign(p, b, c)\n  val d3 = sign(p, c, a)\n\n  val hasNeg = (d1 < 0) || (d2 < 0) || (d3 < 0)\n  val hasPos = (d1 > 0) || (d2 > 0) || (d3 > 0)\n\n  !(hasNeg && hasPos)\n}\n```"
  },
  {
    "task": "Implement a program that checks if a given string is a valid binary number.",
    "code": "```scala\nobject BinaryValidator {\n  def isValidBinary(s: String): Boolean = {\n    s.forall(c => c == '0' || c == '1')\n  }\n\n  def main(args: Array[String]): Unit = {\n    val testString = \"101010\"\n    if (isValidBinary(testString)) {\n      println(s\"$testString is a valid binary number.\")\n    } else {\n      println(s\"$testString is not a valid binary number.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Design a system to evaluate the risk level of an investment based on criteria.",
    "code": "```scala\nobject InvestmentRiskEvaluator {\n  def evaluateRisk(investmentAmount: Double, durationInYears: Int, investmentType: String): String = {\n    if (investmentAmount < 5000) {\n      if (durationInYears < 5) {\n        \"Low Risk\"\n      } else {\n        \"Medium Risk\"\n      }\n    } else if (investmentAmount < 20000) {\n      if (investmentType == \"Stocks\") {\n        \"High Risk\"\n      } else {\n        \"Medium Risk\"\n      }\n    } else {\n      if (durationInYears >= 10 && investmentType == \"Bonds\") {\n        \"Low Risk\"\n      } else {\n        \"High Risk\"\n      }\n    }\n  }\n\n  def main(args: Array[String]): Unit = {\n    println(evaluateRisk(3000, 3, \"Bonds\")) // Low Risk\n    println(evaluateRisk(15000, 7, \"Stocks\")) // High Risk\n    println(evaluateRisk(25000, 12, \"Bonds\")) // Low Risk\n    println(evaluateRisk(25000, 8, \"Real Estate\")) // High Risk\n  }\n}\n```"
  },
  {
    "task": "Write a program that suggests a vacation destination based on budget and preferences.",
    "code": "```scala\nobject VacationSuggester extends App {\n  def suggestDestination(budget: Int, preference: String): String = {\n    if (budget > 3000) {\n      preference.toLowerCase match {\n        case \"beach\" => \"Maldives\"\n        case \"mountain\" => \"Swiss Alps\"\n        case \"city\" => \"New York City\"\n        case _ => \"Bora Bora\"\n      }\n    } else if (budget > 1000) {\n      preference.toLowerCase match {\n        case \"beach\" => \"Hawaii\"\n        case \"mountain\" => \"Rocky Mountains\"\n        case \"city\" => \"Paris\"\n        case _ => \"Thailand\"\n      }\n    } else {\n      preference.toLowerCase match {\n        case \"beach\" => \"Miami\"\n        case \"mountain\" => \"Appalachians\"\n        case \"city\" => \"Las Vegas\"\n        case _ => \"Staycation\"\n      }\n    }\n  }\n\n  // Example usage:\n  val budget = 2000\n  val preference = \"beach\"\n  println(s\"Suggested destination: ${suggestDestination(budget, preference)}\")\n}\n```"
  },
  {
    "task": "Create a routine that checks if a username is already taken in a database.",
    "code": "```scala\ndef isUsernameTaken(username: String, database: Set[String]): Boolean = {\n  if (database.contains(username)) {\n    true\n  } else {\n    false\n  }\n}\n```"
  },
  {
    "task": "Develop a function that determines if a string is a valid IPv4 address.",
    "code": "```scala\ndef isValidIPv4(ip: String): Boolean = {\n  val parts = ip.split(\"\\\\.\")\n  if (parts.length != 4) return false\n  for (part <- parts) {\n    if (!part.matches(\"\\\\d+\")) return false\n    val num = part.toInt\n    if (num < 0 || num > 255) return false\n  }\n  true\n}\n```"
  },
  {
    "task": "Implement a program to decide which transportation method is quickest based on distance.",
    "code": "```scala\nobject TransportationDecision {\n  def main(args: Array[String]): Unit = {\n    val distance = 10 // Example distance in kilometers\n\n    val transportationMethod = if (distance < 1) {\n      \"Walking\"\n    } else if (distance < 5) {\n      \"Biking\"\n    } else if (distance < 20) {\n      \"Driving\"\n    } else {\n      \"Public Transportation\"\n    }\n\n    println(s\"The quickest transportation method for $distance km is: $transportationMethod\")\n  }\n}\n```"
  },
  {
    "task": "Design a script to validate if a number is a prime number.",
    "code": "```scala\nobject PrimeCheck {\n  def isPrime(number: Int): Boolean = {\n    if (number <= 1) return false\n    if (number <= 3) return true\n    if (number % 2 == 0 || number % 3 == 0) return false\n    var i = 5\n    while (i * i <= number) {\n      if (number % i == 0 || number % (i + 2) == 0) return false\n      i += 6\n    }\n    true\n  }\n\n  def main(args: Array[String]): Unit = {\n    val number = 29 // example number\n    println(s\"Is $number a prime number? ${isPrime(number)}\")\n  }\n}\n```"
  },
  {
    "task": "Write a function that checks if a number is divisible by another number without remainder.",
    "code": "```scala\ndef isDivisible(dividend: Int, divisor: Int): Boolean = {\n  if (divisor == 0) {\n    throw new IllegalArgumentException(\"Divisor cannot be zero\")\n  }\n  dividend % divisor == 0\n}\n```"
  },
  {
    "task": "Create a program that determines the type of a quadrilateral based on side lengths.",
    "code": "```scala\nobject QuadrilateralType extends App {\n  def quadrilateralType(a: Int, b: Int, c: Int, d: Int): String = {\n    if (a <= 0 || b <= 0 || c <= 0 || d <= 0) {\n      \"Invalid\"\n    } else if (a == b && b == c && c == d) {\n      \"Square\"\n    } else if (a == c && b == d) {\n      \"Rectangle\"\n    } else if (a == b && c == d) {\n      \"Rhombus\"\n    } else if (a == d && b == c) {\n      \"Parallelogram\"\n    } else {\n      \"Other Quadrilateral\"\n    }\n  }\n\n  // Example usage\n  println(quadrilateralType(2, 2, 2, 2)) // Square\n  println(quadrilateralType(2, 3, 2, 3)) // Rectangle\n  println(quadrilateralType(2, 2, 3, 3)) // Rhombus\n  println(quadrilateralType(2, 3, 4, 3)) // Other Quadrilateral\n}\n```"
  },
  {
    "task": "Develop a routine to check if a sentence contains all letters of the alphabet.",
    "code": "```scala\nobject PangramChecker {\n  def isPangram(sentence: String): Boolean = {\n    val alphabet = ('a' to 'z').toSet\n    val lowerCaseSentence = sentence.toLowerCase\n    alphabet.forall(letter => lowerCaseSentence.contains(letter))\n  }\n\n  def main(args: Array[String]): Unit = {\n    val sentence = \"The quick brown fox jumps over the lazy dog\"\n    println(isPangram(sentence))  // Output: true\n  }\n}\n```"
  },
  {
    "task": "Implement a program that outputs the appropriate error message based on an error code.",
    "code": "```scala\nobject ErrorCodeHandler {\n  def main(args: Array[String]): Unit = {\n    val errorCode = 404 // Example error code, can be replaced with other values\n\n    val errorMessage = errorCode match {\n      case 400 => \"Bad Request\"\n      case 401 => \"Unauthorized\"\n      case 403 => \"Forbidden\"\n      case 404 => \"Not Found\"\n      case 500 => \"Internal Server Error\"\n      case _   => \"Unknown Error\"\n    }\n\n    println(s\"Error $errorCode: $errorMessage\")\n  }\n}\n```"
  },
  {
    "task": "Design a function that categorizes a movie rating as G, PG, PG-13, or R.",
    "code": "```scala\ndef categorizeMovieRating(rating: Int): String = {\n  if (rating >= 0 && rating <= 10) \"G\"\n  else if (rating >= 11 && rating <= 13) \"PG\"\n  else if (rating >= 14 && rating <= 16) \"PG-13\"\n  else if (rating >= 17) \"R\"\n  else \"Invalid rating\"\n}\n```"
  },
  {
    "task": "Write a script to check if a string is a valid Roman numeral.",
    "code": "```scala\nobject RomanNumeralValidator {\n  def isValidRomanNumeral(s: String): Boolean = {\n    val romanNumeralPattern = \"^M{0,4}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$\".r\n    s match {\n      case romanNumeralPattern() => true\n      case _ => false\n    }\n  }\n\n  def main(args: Array[String]): Unit = {\n    val testStrings = List(\"XII\", \"IV\", \"MMXXIII\", \"MMMM\", \"IIII\")\n    testStrings.foreach { s =>\n      println(s\"$s is valid Roman numeral: ${isValidRomanNumeral(s)}\")\n    }\n  }\n}\n\nRomanNumeralValidator.main(Array.empty)\n```"
  },
  {
    "task": "Create a routine that decides if a person can retire based on age and years worked.",
    "code": "```scala\nobject RetirementChecker {\n  def canRetire(age: Int, yearsWorked: Int): Boolean = {\n    if (age >= 65 || yearsWorked >= 30) {\n      true\n    } else {\n      false\n    }\n  }\n\n  def main(args: Array[String]): Unit = {\n    val age = 60\n    val yearsWorked = 32\n    println(s\"Can retire: ${canRetire(age, yearsWorked)}\")\n  }\n}\n```"
  },
  {
    "task": "Develop a function that outputs a different emoji based on user mood input.",
    "code": "```scala\ndef moodToEmoji(mood: String): String = {\n  mood.toLowerCase match {\n    case \"happy\" => \"\ud83d\ude0a\"\n    case \"sad\" => \"\ud83d\ude22\"\n    case \"angry\" => \"\ud83d\ude21\"\n    case \"excited\" => \"\ud83d\ude06\"\n    case \"bored\" => \"\ud83d\ude12\"\n    case \"confused\" => \"\ud83d\ude15\"\n    case _ => \"\ud83e\udd14\"\n  }\n}\n\n// Example usage\nprintln(moodToEmoji(\"happy\"))  // Outputs: \ud83d\ude0a\nprintln(moodToEmoji(\"sad\"))    // Outputs: \ud83d\ude22\nprintln(moodToEmoji(\"unknown\")) // Outputs: \ud83e\udd14\n```"
  },
  {
    "task": "Implement a program that checks if a password meets security requirements.",
    "code": "```scala\nobject PasswordChecker {\n  def main(args: Array[String]): Unit = {\n    val password = \"YourPassword123!\"\n\n    if (isSecure(password)) {\n      println(\"Password is secure.\")\n    } else {\n      println(\"Password does not meet security requirements.\")\n    }\n  }\n\n  def isSecure(password: String): Boolean = {\n    password.length >= 8 &&\n    password.exists(_.isUpper) &&\n    password.exists(_.isLower) &&\n    password.exists(_.isDigit) &&\n    password.exists(!_.isLetterOrDigit)\n  }\n}\n```"
  },
  {
    "task": "Design a script to determine if a number is a palindrome when reversed.",
    "code": "```scala\nobject PalindromeCheck {\n  def isPalindrome(number: Int): Boolean = {\n    val original = number.toString\n    val reversed = original.reverse\n    original == reversed\n  }\n\n  def main(args: Array[String]): Unit = {\n    val number = 12321\n    if (isPalindrome(number)) {\n      println(s\"$number is a palindrome.\")\n    } else {\n      println(s\"$number is not a palindrome.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Write a function that evaluates if a given day is a holiday.",
    "code": "```scala\ndef isHoliday(day: String): Boolean = {\n  day.toLowerCase match {\n    case \"saturday\" | \"sunday\" => true\n    case _ => false\n  }\n}\n```"
  },
  {
    "task": "Create a program to decide if a library book is overdue based on the due date.",
    "code": "```scala\nimport java.time.LocalDate\n\nobject LibraryBookChecker {\n  def main(args: Array[String]): Unit = {\n    val dueDate = LocalDate.of(2023, 10, 10) // Example due date\n    val currentDate = LocalDate.now()\n\n    if (currentDate.isAfter(dueDate)) {\n      println(\"The book is overdue.\")\n    } else {\n      println(\"The book is not overdue.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Develop a routine that checks if a given year is part of a leap century.",
    "code": "```scala\nobject LeapCenturyChecker {\n  def isLeapCentury(year: Int): Boolean = {\n    if (year % 100 == 0) {\n      if (year % 400 == 0) {\n        true\n      } else {\n        false\n      }\n    } else {\n      false\n    }\n  }\n}\n```"
  },
  {
    "task": "Implement a system to determine the correct category for a product based on user input.",
    "code": "```scala\nobject ProductCategorizer {\n  def categorizeProduct(productType: String): String = {\n    productType.toLowerCase match {\n      case \"electronics\" => \"Category: Electronics\"\n      case \"clothing\" => \"Category: Clothing\"\n      case \"groceries\" => \"Category: Groceries\"\n      case \"furniture\" => \"Category: Furniture\"\n      case _ => \"Category: Unknown\"\n    }\n  }\n\n  def main(args: Array[String]): Unit = {\n    println(\"Enter the product type:\")\n    val productType = scala.io.StdIn.readLine()\n    println(categorizeProduct(productType))\n  }\n}\n```"
  }
]