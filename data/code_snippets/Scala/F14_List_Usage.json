[
  {
    "task": "Create a list of the first ten positive integers and calculate their sum.",
    "code": "```scala\nval numbers = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\nval sum = numbers.sum\n```"
  },
  {
    "task": "Write a program to reverse the order of elements in a given list.",
    "code": "```scala\nobject ReverseListApp extends App {\n  def reverseList[T](list: List[T]): List[T] = {\n    list.reverse\n  }\n\n  val originalList = List(1, 2, 3, 4, 5)\n  val reversedList = reverseList(originalList)\n  println(reversedList)\n}\n```"
  },
  {
    "task": "Implement a function that takes a list and returns the list with duplicates removed.",
    "code": "```scala\ndef removeDuplicates[T](list: List[T]): List[T] = {\n  list.distinct\n}\n```"
  },
  {
    "task": "Create a list of names and sort them in alphabetical order.",
    "code": "```scala\nval names = List(\"Alice\", \"Charlie\", \"Bob\")\nval sortedNames = names.sorted\n```"
  },
  {
    "task": "Write a function that appends a new element to an existing list.",
    "code": "```scala\ndef appendToList[T](list: List[T], element: T): List[T] = {\n  list :+ element\n}\n```"
  },
  {
    "task": "Generate a list of the first 20 even numbers.",
    "code": "```scala\nval evenNumbers: List[Int] = List.tabulate(20)(n => n * 2)\n```"
  },
  {
    "task": "Create a nested list (a list of lists) and access an element from the inner list.",
    "code": "```scala\nobject NestedListExample extends App {\n  val nestedList: List[List[Int]] = List(\n    List(1, 2, 3),\n    List(4, 5, 6),\n    List(7, 8, 9)\n  )\n  \n  val element = nestedList(1)(2)\n  println(element)\n}\n```"
  },
  {
    "task": "Write a program that finds the maximum value in a list of integers.",
    "code": "```scala\nobject MaxValueInList extends App {\n  val numbers = List(3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5)\n  val maxValue = numbers.max\n  println(s\"The maximum value in the list is: $maxValue\")\n}\n```"
  },
  {
    "task": "Implement a function to merge two lists into a single list without duplicates.",
    "code": "```scala\ndef mergeWithoutDuplicates[T](list1: List[T], list2: List[T]): List[T] = {\n  (list1 ::: list2).distinct\n}\n```"
  },
  {
    "task": "Create a list from user input, then display the list in reverse order.",
    "code": "```scala\nobject ReverseListApp extends App {\n  import scala.io.StdIn.readLine\n\n  println(\"Enter elements separated by space:\")\n  val input = readLine()\n  val list = input.split(\" \").toList\n  val reversedList = list.reverse\n\n  println(\"Reversed list:\")\n  println(reversedList.mkString(\" \"))\n}\n```"
  },
  {
    "task": "Write a function that takes a list and returns a new list containing only the even numbers.",
    "code": "```scala\ndef filterEvenNumbers(numbers: List[Int]): List[Int] = {\n  numbers.filter(_ % 2 == 0)\n}\n```"
  },
  {
    "task": "Generate a list of squares for the numbers 1 through 10.",
    "code": "```scala\nval squares = (1 to 10).map(n => n * n).toList\n```"
  },
  {
    "task": "Create a list of floating-point numbers and find their average.",
    "code": "```scala\nval numbers: List[Double] = List(2.5, 3.6, 4.1, 5.0, 6.3)\nval average: Double = numbers.sum / numbers.size\n```"
  },
  {
    "task": "Implement a program to rotate the elements of a list to the right by a given number of steps.",
    "code": "```scala\nobject ListRotator {\n  def rotateRight[T](list: List[T], steps: Int): List[T] = {\n    if (list.isEmpty) list\n    else {\n      val effectiveSteps = steps % list.length\n      val splitIndex = list.length - effectiveSteps\n      val (left, right) = list.splitAt(splitIndex)\n      right ++ left\n    }\n  }\n\n  def main(args: Array[String]): Unit = {\n    val list = List(1, 2, 3, 4, 5)\n    val rotatedList = rotateRight(list, 2)\n    println(rotatedList)\n  }\n}\n```"
  },
  {
    "task": "Write a function that checks if a list is a palindrome (reads the same forwards and backwards).",
    "code": "```scala\ndef isPalindrome[T](list: List[T]): Boolean = {\n  list == list.reverse\n}\n```"
  },
  {
    "task": "Create a list of random integers and count how many are greater than 50.",
    "code": "```scala\nimport scala.util.Random\n\nval randomIntegers = List.fill(10)(Random.nextInt(100))\nval countGreaterThanFifty = randomIntegers.count(_ > 50)\n```"
  },
  {
    "task": "Write a program that removes the first occurrence of a specified element from a list.",
    "code": "```scala\nobject RemoveFirstOccurrence {\n  def removeFirstOccurrence[T](list: List[T], element: T): List[T] = {\n    val (before, atAndAfter) = list.span(_ != element)\n    before ::: atAndAfter.drop(1)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val list = List(1, 2, 3, 4, 2, 5)\n    val elementToRemove = 2\n    val updatedList = removeFirstOccurrence(list, elementToRemove)\n    println(updatedList)\n  }\n}\n```"
  },
  {
    "task": "Implement a function that takes two lists and returns a list containing their intersection.",
    "code": "```scala\ndef listIntersection[A](list1: List[A], list2: List[A]): List[A] = {\n  list1.filter(list2.toSet)\n}\n```"
  },
  {
    "task": "Create a list of prime numbers less than 100.",
    "code": "```scala\nobject PrimeNumbers {\n  def isPrime(n: Int): Boolean = {\n    if (n <= 1) false\n    else if (n == 2) true\n    else !(2 until Math.sqrt(n).toInt + 1).exists(n % _ == 0)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val primesUnder100 = (2 until 100).filter(isPrime).toList\n    println(primesUnder100)\n  }\n}\n```"
  },
  {
    "task": "Write a function to split a list into two lists: one with even numbers and one with odd numbers.",
    "code": "```scala\ndef splitEvenOdd(numbers: List[Int]): (List[Int], List[Int]) = {\n  val (evens, odds) = numbers.partition(_ % 2 == 0)\n  (evens, odds)\n}\n```"
  },
  {
    "task": "Create a list of strings and convert all the strings to uppercase.",
    "code": "```scala\nval strings = List(\"apple\", \"banana\", \"cherry\")\nval uppercasedStrings = strings.map(_.toUpperCase)\n```"
  },
  {
    "task": "Implement a program that removes all elements from a list that are less than a specified value.",
    "code": "```scala\nobject ListFilter {\n  def filterList(inputList: List[Int], threshold: Int): List[Int] = {\n    inputList.filter(_ >= threshold)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val numbers = List(1, 5, 10, 15, 20)\n    val threshold = 10\n    val filteredList = filterList(numbers, threshold)\n    println(filteredList)\n  }\n}\n```"
  },
  {
    "task": "Write a function that takes a list and returns a new list with elements in random order.",
    "code": "```scala\nimport scala.util.Random\n\ndef shuffleList[A](list: List[A]): List[A] = {\n  Random.shuffle(list)\n}\n```"
  },
  {
    "task": "Create a list of tuples where each tuple contains a number and its square.",
    "code": "```scala\nval numbers = List(1, 2, 3, 4, 5)\nval squaresList = numbers.map(n => (n, n * n))\n```"
  },
  {
    "task": "Write a program to multiply all elements in a list by a given factor.",
    "code": "```scala\nobject MultiplyList {\n  def multiplyListByFactor(lst: List[Int], factor: Int): List[Int] = {\n    lst.map(_ * factor)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val numbers = List(1, 2, 3, 4, 5)\n    val factor = 3\n    val multipliedList = multiplyListByFactor(numbers, factor)\n    println(multipliedList)\n  }\n}\n```"
  },
  {
    "task": "Implement a function that flattens a nested list.",
    "code": "```scala\ndef flattenList(nestedList: List[Any]): List[Any] = {\n  nestedList.flatMap {\n    case list: List[_] => flattenList(list)\n    case element => List(element)\n  }\n}\n```"
  },
  {
    "task": "Create a list of dates and sort them chronologically.",
    "code": "```scala\nimport java.time.LocalDate\n\nval dates = List(\n  LocalDate.of(2023, 10, 5),\n  LocalDate.of(2022, 1, 15),\n  LocalDate.of(2023, 3, 20),\n  LocalDate.of(2021, 8, 30)\n)\n\nval sortedDates = dates.sorted\n\nprintln(sortedDates)\n```"
  },
  {
    "task": "Write a function that finds the index of the first occurrence of a given element in a list.",
    "code": "```scala\ndef findFirstOccurrence[T](list: List[T], element: T): Option[Int] = {\n  list.indexOf(element) match {\n    case -1 => None\n    case index => Some(index)\n  }\n}\n```"
  },
  {
    "task": "Generate a list of Fibonacci numbers up to a specified limit.",
    "code": "```scala\ndef fibonacci(limit: Int): List[Int] = {\n  def fibHelper(a: Int, b: Int, acc: List[Int]): List[Int] = {\n    if (a > limit) acc\n    else fibHelper(b, a + b, acc :+ a)\n  }\n  fibHelper(0, 1, List())\n}\n\nval limit = 100\nval fibList = fibonacci(limit)\nprintln(fibList)\n```"
  },
  {
    "task": "Create a list of booleans and determine if all are True.",
    "code": "```scala\nval boolList = List(true, true, false, true)\nval allTrue = boolList.forall(identity)\n```"
  },
  {
    "task": "Write a program to concatenate two lists.",
    "code": "```scala\nobject ListConcatenation {\n  def main(args: Array[String]): Unit = {\n    val list1 = List(1, 2, 3)\n    val list2 = List(4, 5, 6)\n    val concatenatedList = list1 ::: list2\n    println(concatenatedList)\n  }\n}\n```"
  },
  {
    "task": "Implement a function that returns the length of a list without using built-in functions.",
    "code": "```scala\ndef listLength[T](lst: List[T]): Int = {\n  def lengthHelper(l: List[T], acc: Int): Int = l match {\n    case Nil => acc\n    case _ :: tail => lengthHelper(tail, acc + 1)\n  }\n  lengthHelper(lst, 0)\n}\n```"
  },
  {
    "task": "Create a list of words and find the longest word.",
    "code": "```scala\nobject LongestWordFinder extends App {\n  val words = List(\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\")\n  val longestWord = words.reduceLeft((a, b) => if (a.length > b.length) a else b)\n  println(s\"The longest word is: $longestWord\")\n}\n```"
  },
  {
    "task": "Write a function that takes a list and a predicate function, returning a list of elements that satisfy the predicate.",
    "code": "```scala\ndef filterList[T](list: List[T], predicate: T => Boolean): List[T] = {\n  list.filter(predicate)\n}\n```"
  },
  {
    "task": "Generate a list of strings and filter out those with less than 5 characters.",
    "code": "```scala\nval strings = List(\"apple\", \"banana\", \"fig\", \"kiwi\", \"mango\")\nval filteredStrings = strings.filter(_.length >= 5)\n```"
  },
  {
    "task": "Create a list of mixed data types and separate them into lists by type.",
    "code": "```scala\nval mixedList: List[Any] = List(1, \"hello\", 2.0, \"world\", 42, 3.14)\n\nval intList: List[Int] = mixedList.collect { case i: Int => i }\nval stringList: List[String] = mixedList.collect { case s: String => s }\nval doubleList: List[Double] = mixedList.collect { case d: Double => d }\n\nprintln(s\"Int List: $intList\")\nprintln(s\"String List: $stringList\")\nprintln(s\"Double List: $doubleList\")\n```"
  },
  {
    "task": "Write a program to find the common elements between two lists.",
    "code": "```scala\nobject CommonElementsFinder extends App {\n  val list1 = List(1, 2, 3, 4, 5)\n  val list2 = List(4, 5, 6, 7, 8)\n\n  val commonElements = list1.intersect(list2)\n  println(s\"Common elements: $commonElements\")\n}\n```"
  },
  {
    "task": "Implement a function to rotate the elements of a list to the left by a given number of steps.",
    "code": "```scala\ndef rotateLeft[T](list: List[T], steps: Int): List[T] = {\n  val size = list.size\n  if (size == 0) list\n  else {\n    val shift = steps % size\n    list.drop(shift) ++ list.take(shift)\n  }\n}\n```"
  },
  {
    "task": "Create a list of numbers and find the product of all the elements.",
    "code": "```scala\nobject ListProduct extends App {\n  val numbers = List(1, 2, 3, 4, 5)\n  val product = numbers.product\n  println(s\"The product of all elements is: $product\")\n}\n```"
  },
  {
    "task": "Write a function that removes all occurrences of a specified element from a list.",
    "code": "```scala\ndef removeOccurrences[T](list: List[T], element: T): List[T] = {\n  list.filterNot(_ == element)\n}\n```"
  },
  {
    "task": "Generate a list of random numbers and find the median value.",
    "code": "```scala\nimport scala.util.Random\n\nobject MedianFinder {\n  def main(args: Array[String]): Unit = {\n    val randomNumbers: List[Int] = List.fill(10)(Random.nextInt(100))\n    println(s\"Random Numbers: $randomNumbers\")\n    val sortedNumbers = randomNumbers.sorted\n    val median = if (sortedNumbers.size % 2 == 0) {\n      val middle = sortedNumbers.size / 2\n      (sortedNumbers(middle - 1) + sortedNumbers(middle)) / 2.0\n    } else {\n      sortedNumbers(sortedNumbers.size / 2)\n    }\n    println(s\"Median: $median\")\n  }\n}\n```"
  },
  {
    "task": "Create a list of dictionaries and sort them by a specific key.",
    "code": "```scala\nval list = List(\n  Map(\"name\" -> \"Alice\", \"age\" -> 30),\n  Map(\"name\" -> \"Bob\", \"age\" -> 25),\n  Map(\"name\" -> \"Charlie\", \"age\" -> 20)\n)\n\nval sortedList = list.sortBy(_(\"age\"))\n\nprintln(sortedList)\n```"
  },
  {
    "task": "Write a program to split a list into chunks of a specified size.",
    "code": "```scala\ndef chunkList[T](list: List[T], chunkSize: Int): List[List[T]] = {\n  list.grouped(chunkSize).toList\n}\n\n// Example usage\nval numbers = List(1, 2, 3, 4, 5, 6, 7, 8, 9)\nval chunked = chunkList(numbers, 3)\nprintln(chunked)  // Output: List(List(1, 2, 3), List(4, 5, 6), List(7, 8, 9))\n```"
  },
  {
    "task": "Implement a function that takes a list and returns a dictionary with the frequency of each element.",
    "code": "```scala\ndef frequencyMap[A](list: List[A]): Map[A, Int] = {\n  list.groupBy(identity).view.mapValues(_.size).toMap\n}\n```"
  },
  {
    "task": "Create a list of integers and replace all negative numbers with zero.",
    "code": "```scala\nobject ReplaceNegatives {\n  def main(args: Array[String]): Unit = {\n    val numbers = List(1, -2, 3, -4, 5)\n    val result = numbers.map(num => if (num < 0) 0 else num)\n    println(result)\n  }\n}\n```"
  },
  {
    "task": "Write a function that returns the first n elements of a list.",
    "code": "```scala\ndef firstNElements[A](list: List[A], n: Int): List[A] = {\n  list.take(n)\n}\n```"
  },
  {
    "task": "Generate a list of strings and join them into a single string with spaces.",
    "code": "```scala\nval stringList = List(\"Hello\", \"world\", \"this\", \"is\", \"Scala\")\nval joinedString = stringList.mkString(\" \")\n```"
  },
  {
    "task": "Create a list of lists and find the sum of each inner list.",
    "code": "```scala\nval listOfLists: List[List[Int]] = List(\n  List(1, 2, 3),\n  List(4, 5, 6),\n  List(7, 8, 9)\n)\n\nval sumsOfInnerLists: List[Int] = listOfLists.map(innerList => innerList.sum)\n\nprintln(sumsOfInnerLists)\n```"
  },
  {
    "task": "Write a function that finds the second largest number in a list.",
    "code": "```scala\ndef secondLargest(nums: List[Int]): Option[Int] = {\n  val distinctSorted = nums.distinct.sorted(Ordering[Int].reverse)\n  if (distinctSorted.size >= 2) Some(distinctSorted(1)) else None\n}\n```"
  },
  {
    "task": "Generate a list of numbers and remove the duplicates while maintaining order.",
    "code": "```scala\nval numbers = List(1, 2, 3, 2, 4, 1, 5, 3)\nval uniqueNumbers = numbers.foldLeft(List[Int]()) { (acc, num) =>\n  if (acc.contains(num)) acc else acc :+ num\n}\nprintln(uniqueNumbers)\n```"
  },
  {
    "task": "Create a list of integers and partition it into two lists: one with numbers above the average and one below.",
    "code": "```scala\nobject ListPartitioner extends App {\n  val numbers = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n  val average = numbers.sum.toDouble / numbers.length\n  \n  val (aboveAverage, belowAverage) = numbers.partition(_ > average)\n  \n  println(s\"Above average: $aboveAverage\")\n  println(s\"Below average: $belowAverage\")\n}\n```"
  },
  {
    "task": "Write a program to find the longest increasing subsequence in a list of numbers.",
    "code": "```scala\nobject LongestIncreasingSubsequence {\n  def longestIncreasingSubsequence(nums: List[Int]): List[Int] = {\n    if (nums.isEmpty) return List()\n\n    val lengths = Array.fill(nums.length)(1)\n    val previous = Array.fill(nums.length)(-1)\n\n    for (i <- nums.indices) {\n      for (j <- 0 until i) {\n        if (nums(j) < nums(i) && lengths(j) + 1 > lengths(i)) {\n          lengths(i) = lengths(j) + 1\n          previous(i) = j\n        }\n      }\n    }\n\n    val maxLength = lengths.max\n    val maxIndex = lengths.indexWhere(_ == maxLength)\n    var index = maxIndex\n    var lis = List[Int]()\n\n    while (index != -1) {\n      lis = nums(index) :: lis\n      index = previous(index)\n    }\n\n    lis\n  }\n\n  def main(args: Array[String]): Unit = {\n    val numbers = List(10, 9, 2, 5, 3, 7, 101, 18)\n    val lis = longestIncreasingSubsequence(numbers)\n    println(s\"Longest Increasing Subsequence: $lis\")\n  }\n}\n```"
  },
  {
    "task": "Implement a function to zip two lists into a single list of tuples.",
    "code": "```scala\ndef zipLists[A, B](list1: List[A], list2: List[B]): List[(A, B)] = {\n  list1.zip(list2)\n}\n```"
  },
  {
    "task": "Create a list of characters and count the vowels.",
    "code": "```scala\nobject VowelCounter extends App {\n  val chars = List('a', 'b', 'c', 'e', 'i', 'o', 'u', 'x', 'y', 'z')\n  val vowels = Set('a', 'e', 'i', 'o', 'u')\n  val vowelCount = chars.count(vowels.contains)\n  println(s\"Number of vowels: $vowelCount\")\n}\n```"
  },
  {
    "task": "Write a function that returns the last n elements of a list.",
    "code": "```scala\ndef lastNElements[A](list: List[A], n: Int): List[A] = {\n  list.takeRight(n)\n}\n```"
  },
  {
    "task": "Generate a list of numbers and split it into two lists: one with positive numbers and one with negative numbers.",
    "code": "```scala\nval numbers = List(3, -1, 7, -5, 0, 2, -8, 4)\nval (positiveNumbers, negativeNumbers) = numbers.partition(_ > 0)\n```"
  },
  {
    "task": "Create a list of random integers and find the mode.",
    "code": "```scala\nimport scala.util.Random\n\nobject ModeFinder {\n  def main(args: Array[String]): Unit = {\n    val random = new Random()\n    val randomIntegers = List.fill(100)(random.nextInt(100))\n    val mode = randomIntegers.groupBy(identity).maxBy(_._2.size)._1\n    println(s\"Random Integers: $randomIntegers\")\n    println(s\"Mode: $mode\")\n  }\n}\n```"
  },
  {
    "task": "Write a program to find the shortest path in a grid using a list to represent the path.",
    "code": "```scala\nobject ShortestPathInGrid {\n  case class Point(x: Int, y: Int)\n\n  def shortestPath(grid: Array[Array[Int]]): List[Point] = {\n    val directions = List(Point(0, 1), Point(1, 0), Point(0, -1), Point(-1, 0))\n    val rows = grid.length\n    val cols = grid(0).length\n    val queue = scala.collection.mutable.Queue[(Point, List[Point])]()\n    val visited = scala.collection.mutable.Set[Point]()\n    \n    queue.enqueue((Point(0, 0), List(Point(0, 0))))\n    visited.add(Point(0, 0))\n    \n    while (queue.nonEmpty) {\n      val (current, path) = queue.dequeue()\n      if (current == Point(rows - 1, cols - 1)) return path\n      \n      for (d <- directions) {\n        val next = Point(current.x + d.x, current.y + d.y)\n        if (next.x >= 0 && next.x < rows && \n            next.y >= 0 && next.y < cols && \n            grid(next.x)(next.y) == 0 && \n            !visited.contains(next)) {\n          visited.add(next)\n          queue.enqueue((next, path :+ next))\n        }\n      }\n    }\n    List()\n  }\n\n  def main(args: Array[String]): Unit = {\n    val grid = Array(\n      Array(0, 0, 0, 0),\n      Array(1, 1, 0, 1),\n      Array(0, 0, 0, 0),\n      Array(0, 1, 1, 0),\n      Array(0, 0, 0, 0)\n    )\n    val path = shortestPath(grid)\n    path.foreach(p => println(s\"(${p.x}, ${p.y})\"))\n  }\n}\n```"
  },
  {
    "task": "Implement a function that takes a list and returns a list with elements doubled.",
    "code": "```scala\ndef doubleElements(lst: List[Int]): List[Int] = {\n  lst.map(_ * 2)\n}\n```"
  },
  {
    "task": "Create a list of integers and sort them in descending order.",
    "code": "```scala\nobject Main extends App {\n  val integers = List(4, 1, 3, 2, 5)\n  val sortedIntegers = integers.sorted(Ordering[Int].reverse)\n  println(sortedIntegers)\n}\n```"
  },
  {
    "task": "Write a function that takes a list of intervals and merges overlapping intervals.",
    "code": "```scala\ndef mergeIntervals(intervals: List[(Int, Int)]): List[(Int, Int)] = {\n  if (intervals.isEmpty) return intervals\n\n  val sortedIntervals = intervals.sortBy(_._1)\n  val merged = sortedIntervals.tail.foldLeft(List(sortedIntervals.head)) {\n    case (mergedList, current) =>\n      val last = mergedList.last\n      if (last._2 >= current._1) {\n        mergedList.init :+ (last._1, last._2 max current._2)\n      } else {\n        mergedList :+ current\n      }\n  }\n  \n  merged\n}\n```"
  },
  {
    "task": "Generate a list of random numbers and find the range (difference between max and min).",
    "code": "```scala\nimport scala.util.Random\n\nobject ListRangeExample extends App {\n  val randomNumbers: List[Int] = List.fill(10)(Random.nextInt(100))\n  val range: Int = randomNumbers.max - randomNumbers.min\n  println(s\"Random Numbers: $randomNumbers\")\n  println(s\"Range: $range\")\n}\n```"
  },
  {
    "task": "Create a list of strings and remove any that are palindromes.",
    "code": "```scala\nval strings = List(\"level\", \"hello\", \"world\", \"radar\", \"scala\")\nval nonPalindromes = strings.filter(s => s != s.reverse)\n```"
  },
  {
    "task": "Write a program to cyclically permute the elements of a list.",
    "code": "```scala\nobject CyclicPermutation {\n  def cyclicPermute[T](list: List[T]): List[T] = {\n    list match {\n      case Nil => Nil\n      case head :: tail => tail :+ head\n    }\n  }\n\n  def main(args: Array[String]): Unit = {\n    val originalList = List(1, 2, 3, 4, 5)\n    val permutedList = cyclicPermute(originalList)\n    println(permutedList)\n  }\n}\n```"
  },
  {
    "task": "Implement a function to create a list of cumulative sums from a list of numbers.",
    "code": "```scala\ndef cumulativeSums(numbers: List[Int]): List[Int] = {\n  numbers.scanLeft(0)(_ + _).tail\n}\n```"
  },
  {
    "task": "Create a list of numbers and shift all zeros to the end.",
    "code": "```scala\nval numbers = List(0, 1, 0, 3, 12, 0, 5)\nval shifted = numbers.filter(_ != 0) ++ numbers.filter(_ == 0)\nprintln(shifted)\n```"
  },
  {
    "task": "Write a program to simulate a queue using a list.",
    "code": "```scala\nobject QueueSimulation {\n  def main(args: Array[String]): Unit = {\n    var queue: List[Int] = List()\n\n    def enqueue(element: Int): Unit = {\n      queue = queue :+ element\n      println(s\"Enqueued: $element\")\n    }\n\n    def dequeue(): Option[Int] = {\n      if (queue.nonEmpty) {\n        val element = queue.head\n        queue = queue.tail\n        println(s\"Dequeued: $element\")\n        Some(element)\n      } else {\n        println(\"Queue is empty\")\n        None\n      }\n    }\n\n    def displayQueue(): Unit = {\n      println(s\"Queue: ${queue.mkString(\", \")}\")\n    }\n\n    // Simulating queue operations\n    enqueue(1)\n    enqueue(2)\n    enqueue(3)\n    displayQueue()\n\n    dequeue()\n    displayQueue()\n\n    dequeue()\n    dequeue()\n    dequeue()\n  }\n}\n```"
  },
  {
    "task": "Generate a list of numbers and identify all prime numbers.",
    "code": "```scala\nobject PrimeNumbers {\n  def isPrime(n: Int): Boolean = {\n    if (n <= 1) false\n    else if (n == 2) true\n    else !(2 until n).exists(i => n % i == 0)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val numbers = List.range(1, 101)\n    val primeNumbers = numbers.filter(isPrime)\n    println(primeNumbers)\n  }\n}\n\nPrimeNumbers.main(Array())\n```"
  },
  {
    "task": "Create a list of strings and group them by their starting letter.",
    "code": "```scala\nval strings = List(\"apple\", \"banana\", \"apricot\", \"blueberry\", \"cherry\", \"avocado\")\nval groupedByStartingLetter = strings.groupBy(_.head)\n```"
  },
  {
    "task": "Write a function that takes a list and returns a new list with all elements squared.",
    "code": "```scala\ndef squareList(lst: List[Int]): List[Int] = {\n  lst.map(x => x * x)\n}\n```"
  },
  {
    "task": "Generate a list of timestamps and find the time difference between consecutive elements.",
    "code": "```scala\nimport java.time.LocalDateTime\nimport java.time.Duration\n\nval timestamps: List[LocalDateTime] = List(\n  LocalDateTime.now(),\n  LocalDateTime.now().plusHours(1),\n  LocalDateTime.now().plusHours(2),\n  LocalDateTime.now().plusHours(3)\n)\n\nval differences: List[Duration] = timestamps\n  .sliding(2)\n  .collect { case List(prev, next) => Duration.between(prev, next) }\n  .toList\n\ndifferences.foreach(println)\n```"
  },
  {
    "task": "Create a list of numbers and rotate it such that the smallest number is first.",
    "code": "```scala\nobject ListRotation extends App {\n  val numbers = List(3, 5, 2, 8, 1, 4)\n  val minIndex = numbers.indexOf(numbers.min)\n  val rotatedList = numbers.drop(minIndex) ++ numbers.take(minIndex)\n  println(rotatedList)\n}\n```"
  },
  {
    "task": "Write a program to find all unique pairs in a list that sum up to a specific target.",
    "code": "```scala\nobject UniquePairs {\n  def findPairs(nums: List[Int], target: Int): List[(Int, Int)] = {\n    val numSet = nums.toSet\n    nums.distinct.flatMap { num =>\n      val complement = target - num\n      if (numSet(complement) && num < complement) Some((num, complement)) else None\n    }\n  }\n\n  def main(args: Array[String]): Unit = {\n    val nums = List(1, 2, 3, 4, 5, 6)\n    val target = 7\n    val pairs = findPairs(nums, target)\n    pairs.foreach(println)\n  }\n}\n```"
  },
  {
    "task": "Implement a function that returns true if a list contains a cycle.",
    "code": "```scala\ndef hasCycle[T](list: List[T]): Boolean = {\n  @annotation.tailrec\n  def loop(slow: List[T], fast: List[T]): Boolean = (slow, fast) match {\n    case (_, Nil) | (_, _ :: Nil) => false\n    case (s :: slowTail, _ :: _ :: fastTail) =>\n      if (s eq fastTail.head) true\n      else loop(slowTail, fastTail)\n  }\n\n  loop(list, list)\n}\n```"
  },
  {
    "task": "Create a list of numbers and find the contiguous subarray with the maximum sum.",
    "code": "```scala\nobject MaxSubArraySum extends App {\n  def maxSubArray(nums: List[Int]): Int = {\n    var maxSoFar = nums.head\n    var maxEndingHere = nums.head\n\n    for (i <- 1 until nums.length) {\n      maxEndingHere = Math.max(nums(i), maxEndingHere + nums(i))\n      maxSoFar = Math.max(maxSoFar, maxEndingHere)\n    }\n\n    maxSoFar\n  }\n\n  val numbers = List(-2, 1, -3, 4, -1, 2, 1, -5, 4)\n  println(maxSubArray(numbers))\n}\n```"
  },
  {
    "task": "Write a function that takes a list and a number, and finds two numbers in the list that sum to the given number.",
    "code": "```scala\ndef findPairWithSum(numbers: List[Int], target: Int): Option[(Int, Int)] = {\n  numbers.combinations(2).find(_.sum == target).map(pair => (pair(0), pair(1)))\n}\n```"
  },
  {
    "task": "Generate a list of even numbers and filter out those that are greater than a specific value.",
    "code": "```scala\nval numbers = List.range(1, 101)\nval evenNumbers = numbers.filter(_ % 2 == 0)\nval filteredEvenNumbers = evenNumbers.filter(_ <= 50)\n```"
  },
  {
    "task": "Create a list of characters and reverse the vowels only.",
    "code": "```scala\nobject ReverseVowelsInList {\n  def reverseVowels(chars: List[Char]): List[Char] = {\n    val vowels = Set('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n    val vowelsInList = chars.filter(vowels.contains).reverse\n    var vowelIndex = 0\n\n    chars.map { char =>\n      if (vowels.contains(char)) {\n        val vowel = vowelsInList(vowelIndex)\n        vowelIndex += 1\n        vowel\n      } else {\n        char\n      }\n    }\n  }\n\n  def main(args: Array[String]): Unit = {\n    val charList = List('h', 'e', 'l', 'l', 'o', 'w', 'o', 'r', 'l', 'd')\n    val result = reverseVowels(charList)\n    println(result.mkString)\n  }\n}\n```"
  },
  {
    "task": "Write a program to find all permutations of a list of elements.",
    "code": "```scala\ndef permutations[T](list: List[T]): List[List[T]] = list match {\n  case Nil => List(Nil)\n  case _ => for {\n    i <- list.indices.toList\n    elem = list(i)\n    rest = list.take(i) ++ list.drop(i + 1)\n    perm <- permutations(rest)\n  } yield elem :: perm\n}\n\n// Example usage\nval elements = List(1, 2, 3)\nval result = permutations(elements)\nresult.foreach(println)\n```"
  },
  {
    "task": "Implement a function that takes a list and returns the most frequently occurring element.",
    "code": "```scala\ndef mostFrequentElement[T](list: List[T]): Option[T] = {\n  if (list.isEmpty) None\n  else {\n    list.groupBy(identity).view.mapValues(_.size).maxBy(_._2)._1\n  }\n}\n```"
  },
  {
    "task": "Create a list of numbers and calculate the variance.",
    "code": "```scala\nobject VarianceCalculator {\n  def main(args: Array[String]): Unit = {\n    val numbers = List(10, 20, 30, 40, 50)\n    val mean = numbers.sum.toDouble / numbers.size\n    val variance = numbers.map(n => math.pow(n - mean, 2)).sum / numbers.size\n    println(s\"The variance is: $variance\")\n  }\n}\n```"
  },
  {
    "task": "Write a function to concatenate a list of lists into a single list.",
    "code": "```scala\ndef concatenateLists[T](lists: List[List[T]]): List[T] = {\n  lists.flatten\n}\n```"
  },
  {
    "task": "Generate a list of numbers and replace each element with the product of all other elements.",
    "code": "```scala\nobject ListProduct {\n  def main(args: Array[String]): Unit = {\n    val numbers = List(1, 2, 3, 4, 5)\n    val productOfAll = numbers.product\n    val result = numbers.map(productOfAll / _)\n    println(result)\n  }\n}\n```"
  },
  {
    "task": "Create a list of strings and find the common prefix.",
    "code": "```scala\nobject CommonPrefixApp extends App {\n  val strings = List(\"scala\", \"scalable\", \"scallop\", \"scar\")\n  \n  def findCommonPrefix(strings: List[String]): String = {\n    if (strings.isEmpty) return \"\"\n    strings.reduce((prefix, str) => {\n      val minLength = math.min(prefix.length, str.length)\n      (0 until minLength).takeWhile(i => prefix(i) == str(i)).map(prefix(_)).mkString\n    })\n  }\n\n  val commonPrefix = findCommonPrefix(strings)\n  println(s\"Common Prefix: $commonPrefix\")\n}\n```"
  },
  {
    "task": "Write a program to partition a list into two lists based on a predicate function.",
    "code": "```scala\nobject ListPartitioner {\n  def partition[T](list: List[T], predicate: T => Boolean): (List[T], List[T]) = {\n    val (trueList, falseList) = list.partition(predicate)\n    (trueList, falseList)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val numbers = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    val (evens, odds) = partition(numbers, _ % 2 == 0)\n    println(s\"Evens: $evens\")\n    println(s\"Odds: $odds\")\n  }\n}\n```"
  },
  {
    "task": "Implement a function to find the kth smallest element in a list.",
    "code": "```scala\ndef kthSmallestElement[T](list: List[T], k: Int)(implicit ord: Ordering[T]): Option[T] = {\n  if (k > 0 && k <= list.size) Some(list.sorted(ord)(k - 1))\n  else None\n}\n```"
  },
  {
    "task": "Create a list of integers and find the length of the longest contiguous sequence.",
    "code": "```scala\nobject LongestContiguousSequence extends App {\n  val numbers = List(1, 2, 2, 3, 4, 1, 1, 2, 3, 3, 3, 4)\n  \n  def findLongestContiguousSequence(nums: List[Int]): Int = {\n    if (nums.isEmpty) return 0\n\n    var maxLen = 1\n    var currentLen = 1\n\n    for (i <- 1 until nums.length) {\n      if (nums(i) == nums(i - 1)) {\n        currentLen += 1\n      } else {\n        maxLen = math.max(maxLen, currentLen)\n        currentLen = 1\n      }\n    }\n    math.max(maxLen, currentLen)\n  }\n\n  val longestSequenceLength = findLongestContiguousSequence(numbers)\n  println(s\"Length of the longest contiguous sequence: $longestSequenceLength\")\n}\n```"
  },
  {
    "task": "Write a function that rotates elements in a list while maintaining the relative order of non-rotated elements.",
    "code": "```scala\ndef rotateList[A](lst: List[A], n: Int): List[A] = {\n  val size = lst.size\n  if (size == 0) lst\n  else {\n    val rotation = n % size\n    val splitPoint = if (rotation < 0) size + rotation else rotation\n    lst.drop(splitPoint) ++ lst.take(splitPoint)\n  }\n}\n```"
  },
  {
    "task": "Generate a list of random numbers and sort them while maintaining the original index positions.",
    "code": "```scala\nimport scala.util.Random\n\nobject ListUsageExample extends App {\n  val randomList = List.fill(10)(Random.nextInt(100))\n  val indexedList = randomList.zipWithIndex\n  val sortedIndexedList = indexedList.sortBy(_._1)\n  val resultList = sortedIndexedList.map(_._2).zipWithIndex.sortBy(_._1).map { case (_, newIndex) => randomList(newIndex) }\n  \n  println(s\"Original List: $randomList\")\n  println(s\"Sorted List by Original Indices: $resultList\")\n}\n```"
  },
  {
    "task": "Create a list of numbers and find all subsets that sum up to a specific target.",
    "code": "```scala\nobject SubsetsWithTargetSum {\n  def findSubsets(nums: List[Int], target: Int): List[List[Int]] = {\n    def helper(subset: List[Int], remaining: List[Int]): List[List[Int]] = {\n      if (remaining.isEmpty) {\n        if (subset.sum == target) List(subset) else Nil\n      } else {\n        helper(subset :+ remaining.head, remaining.tail) ++\n        helper(subset, remaining.tail)\n      }\n    }\n    helper(Nil, nums)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val nums = List(1, 2, 3, 4, 5)\n    val target = 5\n    val subsets = findSubsets(nums, target)\n    println(subsets)\n  }\n}\n```"
  },
  {
    "task": "Write a program to simulate a stack using a list.",
    "code": "```scala\nobject StackSimulation {\n  def main(args: Array[String]): Unit = {\n    var stack: List[Int] = List()\n\n    def push(element: Int): Unit = {\n      stack = element :: stack\n    }\n\n    def pop(): Option[Int] = {\n      if (stack.isEmpty) None\n      else {\n        val top = stack.head\n        stack = stack.tail\n        Some(top)\n      }\n    }\n\n    def peek(): Option[Int] = {\n      stack.headOption\n    }\n\n    def isEmpty: Boolean = {\n      stack.isEmpty\n    }\n\n    // Example usage\n    push(10)\n    push(20)\n    println(peek()) // Some(20)\n    println(pop())  // Some(20)\n    println(pop())  // Some(10)\n    println(isEmpty) // true\n  }\n}\n```"
  }
]