[
  {
    "task": "Create a new instance of a class that represents a book, with properties for title, author, and ISBN number.",
    "code": "```scala\nclass Book(val title: String, val author: String, val isbn: String)\n\nval newBook = new Book(\"The Great Gatsby\", \"F. Scott Fitzgerald\", \"978-0743273565\")\n```"
  },
  {
    "task": "Instantiate an object of a class named Car, and set its make, model, and year attributes.",
    "code": "```scala\nclass Car(var make: String, var model: String, var year: Int)\n\nval myCar = new Car(\"Toyota\", \"Corolla\", 2022)\n```"
  },
  {
    "task": "Develop a class to represent a rectangle, then create an object with specific width and height.",
    "code": "```scala\nclass Rectangle(val width: Double, val height: Double)\n\nval myRectangle = new Rectangle(5.0, 10.0)\n```"
  },
  {
    "task": "Construct an object of a class Person, initializing it with a name and age.",
    "code": "```scala\nclass Person(val name: String, val age: Int)\n\nval person = new Person(\"John Doe\", 30)\n```"
  },
  {
    "task": "Create a new object from a class called Circle, initializing it with a radius value.",
    "code": "```scala\nclass Circle(val radius: Double)\n\nval myCircle = new Circle(5.0)\n```"
  },
  {
    "task": "Instantiate a class named Student with properties for name, student ID, and GPA.",
    "code": "```scala\nclass Student(val name: String, val studentId: String, val gpa: Double)\n\nval student = new Student(\"John Doe\", \"S123456\", 3.5)\n```"
  },
  {
    "task": "Design a class for a smartphone, then create an instance with specific brand, model, and storage capacity.",
    "code": "```scala\nclass Smartphone(val brand: String, val model: String, val storageCapacity: Int)\n\nobject Main extends App {\n  val mySmartphone = new Smartphone(\"Apple\", \"iPhone 14\", 256)\n  println(s\"Brand: ${mySmartphone.brand}, Model: ${mySmartphone.model}, Storage: ${mySmartphone.storageCapacity}GB\")\n}\n```"
  },
  {
    "task": "Create an object of a class named BankAccount, initializing it with an account number and balance.",
    "code": "```scala\nclass BankAccount(val accountNumber: String, val balance: Double)\n\nobject Main extends App {\n  val account = new BankAccount(\"123456789\", 1000.0)\n}\n```"
  },
  {
    "task": "Write a class for a movie, then instantiate it with a title, director, and release year.",
    "code": "```scala\nclass Movie(val title: String, val director: String, val releaseYear: Int)\n\nval movie = new Movie(\"Inception\", \"Christopher Nolan\", 2010)\n```"
  },
  {
    "task": "Define a class representing a point in 2D space and create an object with x and y coordinates.",
    "code": "```scala\nclass Point(val x: Double, val y: Double)\n\nval point = new Point(3.0, 4.0)\n```"
  },
  {
    "task": "Create an instance of a class called Computer with attributes for CPU, RAM, and storage.",
    "code": "```scala\nclass Computer(val cpu: String, val ram: Int, val storage: Int)\n\nval myComputer = new Computer(\"Intel i7\", 16, 512)\n```"
  },
  {
    "task": "Design a class for a Song with properties for title, artist, and duration, and instantiate it.",
    "code": "```scala\nclass Song(val title: String, val artist: String, val duration: Int)\n\nobject Main extends App {\n  val song = new Song(\"Bohemian Rhapsody\", \"Queen\", 354)\n}\n```"
  },
  {
    "task": "Create a new instance of a class named Pet, initializing it with type, breed, and age.",
    "code": "```scala\nclass Pet(val petType: String, val breed: String, val age: Int)\n\nval myPet = new Pet(\"Dog\", \"Labrador\", 3)\n```"
  },
  {
    "task": "Instantiate an object of a class named House with attributes for address, number of bedrooms, and price.",
    "code": "```scala\nclass House(val address: String, val numberOfBedrooms: Int, val price: Double)\n\nval myHouse = new House(\"123 Main St\", 3, 250000.00)\n```"
  },
  {
    "task": "Develop a class for a Camera, then create an object with resolution and zoom level attributes.",
    "code": "```scala\nclass Camera(val resolution: String, val zoomLevel: Int)\n\nobject CameraApp extends App {\n  val camera = new Camera(\"1080p\", 4)\n  println(s\"Camera resolution: ${camera.resolution}, Zoom level: ${camera.zoomLevel}\")\n}\n```"
  },
  {
    "task": "Construct an object from a class named Bicycle with properties for brand, type, and gear count.",
    "code": "```scala\nclass Bicycle(val brand: String, val bicycleType: String, val gearCount: Int)\n\nval myBicycle = new Bicycle(\"Giant\", \"Mountain\", 21)\n```"
  },
  {
    "task": "Create a class for a book author with name and nationality, then instantiate it.",
    "code": "```scala\nclass Author(val name: String, val nationality: String)\n\nval author = new Author(\"Author Name\", \"Nationality\")\n```"
  },
  {
    "task": "Define a class representing a video game with attributes for title, genre, and platform, and create an object.",
    "code": "```scala\nclass VideoGame(val title: String, val genre: String, val platform: String)\n\nval game = new VideoGame(\"Cyberpunk 2077\", \"RPG\", \"PC\")\n```"
  },
  {
    "task": "Instantiate a class named Plane with properties for airline, model, and capacity.",
    "code": "```scala\nclass Plane(val airline: String, val model: String, val capacity: Int)\n\nval plane = new Plane(\"AirlineName\", \"ModelName\", 200)\n```"
  },
  {
    "task": "Create a new object of a class called Lamp, initializing it with color and brightness level.",
    "code": "```scala\nclass Lamp(val color: String, val brightnessLevel: Int)\n\nval lamp = new Lamp(\"blue\", 75)\n```"
  },
  {
    "task": "Design a class for a TV show with properties for title, season, and episode count, then instantiate it.",
    "code": "```scala\nclass TVShow(val title: String, val season: Int, val episodeCount: Int)\n\nval myShow = new TVShow(\"Example Show\", 1, 10)\n```"
  },
  {
    "task": "Instantiate an object of a class named Garden with attributes for size and number of plants.",
    "code": "```scala\nclass Garden(val size: Double, val numberOfPlants: Int)\n\nval myGarden = new Garden(500.0, 42)\n```"
  },
  {
    "task": "Develop a class for a Train, then create an object with properties for type and number of carriages.",
    "code": "```scala\nclass Train(val trainType: String, val numberOfCarriages: Int)\n\nobject TrainApp extends App {\n  val myTrain = new Train(\"Freight\", 20)\n  println(s\"Train Type: ${myTrain.trainType}, Number of Carriages: ${myTrain.numberOfCarriages}\")\n}\n```"
  },
  {
    "task": "Define a class representing a planet with attributes for name, size, and distance from the sun, and create an object.",
    "code": "```scala\nclass Planet(val name: String, val size: Double, val distanceFromSun: Double)\n\nobject PlanetApp extends App {\n  val earth = new Planet(\"Earth\", 12742, 149.6)\n  println(s\"Planet: ${earth.name}, Size: ${earth.size} km, Distance from Sun: ${earth.distanceFromSun} million km\")\n}\n```"
  },
  {
    "task": "Create an instance of a class named Fridge with properties for brand and capacity.",
    "code": "```scala\nclass Fridge(val brand: String, val capacity: Int)\n\nval myFridge = new Fridge(\"Samsung\", 300)\n```"
  },
  {
    "task": "Design a class for a Restaurant with attributes for name, cuisine type, and location, then create an instance.",
    "code": "```scala\nclass Restaurant(val name: String, val cuisineType: String, val location: String)\n\nval myRestaurant = new Restaurant(\"Gourmet Bistro\", \"French\", \"Downtown\")\n```"
  },
  {
    "task": "Create a new object from a class named Bookstore, initializing it with name and number of books.",
    "code": "```scala\nclass Bookstore(val name: String, val numberOfBooks: Int)\n\nval bookstore = new Bookstore(\"City Library\", 1000)\n```"
  },
  {
    "task": "Instantiate a class named Library with properties for total books and number of members.",
    "code": "```scala\nclass Library(val totalBooks: Int, val numberOfMembers: Int)\n\nobject Main extends App {\n  val library = new Library(1000, 150)\n}\n```"
  },
  {
    "task": "Write a class for a Beverage with properties for name, type, and volume, and instantiate it.",
    "code": "```scala\nclass Beverage(val name: String, val beverageType: String, val volume: Double)\n\nval myBeverage = new Beverage(\"Cola\", \"Soda\", 500.0)\n```"
  },
  {
    "task": "Create an object of a class named User with attributes for username, email, and password.",
    "code": "```scala\nclass User(val username: String, val email: String, val password: String)\n\nobject Main extends App {\n  val user = new User(\"exampleUser\", \"user@example.com\", \"securePassword\")\n}\n```"
  },
  {
    "task": "Define a class for a Laptop with properties for brand, processor, and RAM, then instantiate it.",
    "code": "```scala\nclass Laptop(val brand: String, val processor: String, val ram: Int)\n\nval myLaptop = new Laptop(\"Dell\", \"Intel i7\", 16)\n```"
  },
  {
    "task": "Construct an object from a class named Mountain with attributes for name and elevation.",
    "code": "```scala\nclass Mountain(val name: String, val elevation: Int)\n\nval mountain = new Mountain(\"Everest\", 8848)\n```"
  },
  {
    "task": "Create an instance of a class called Weather with properties for temperature, humidity, and condition.",
    "code": "```scala\nclass Weather(val temperature: Double, val humidity: Double, val condition: String)\n\nval weatherInstance = new Weather(25.0, 65.0, \"Sunny\")\n```"
  },
  {
    "task": "Design a class for a Classroom with attributes for room number and capacity, then create an instance.",
    "code": "```scala\nclass Classroom(val roomNumber: Int, val capacity: Int)\n\nval classroomInstance = new Classroom(101, 30)\n```"
  },
  {
    "task": "Instantiate an object of a class named Zoo with properties for name and number of animals.",
    "code": "```scala\nclass Zoo(val name: String, val numberOfAnimals: Int)\n\nval zooInstance = new Zoo(\"City Zoo\", 150)\n```"
  },
  {
    "task": "Develop a class for an Album with properties for name, artist, and release date, then instantiate it.",
    "code": "```scala\nclass Album(val name: String, val artist: String, val releaseDate: String)\n\nval album = new Album(\"The Dark Side of the Moon\", \"Pink Floyd\", \"1973-03-01\")\n```"
  },
  {
    "task": "Create a new object from a class named Hotel, initializing it with name, location, and star rating.",
    "code": "```scala\nclass Hotel(val name: String, val location: String, val starRating: Int)\n\nval myHotel = new Hotel(\"Grand Palace\", \"Paris\", 5)\n```"
  },
  {
    "task": "Write a class for a Recipe with properties for name, ingredients, and cooking time, and instantiate it.",
    "code": "```scala\nclass Recipe(val name: String, val ingredients: List[String], val cookingTime: Int)\n\nval myRecipe = new Recipe(\"Pasta\", List(\"pasta\", \"tomato sauce\", \"cheese\"), 30)\n```"
  },
  {
    "task": "Define a class representing a Conference with attributes for name, date, and number of attendees, and create an object.",
    "code": "```scala\nclass Conference(val name: String, val date: String, val numberOfAttendees: Int)\n\nval conference = new Conference(\"Tech Summit\", \"2023-11-15\", 250)\n```"
  },
  {
    "task": "Create an instance of a class called Park with properties for name, location, and area.",
    "code": "```scala\nclass Park(val name: String, val location: String, val area: Double)\n\nval centralPark = new Park(\"Central Park\", \"New York City\", 3.41)\n```"
  },
  {
    "task": "Design a class for a Bicycle with attributes for brand, type, and wheel size, then create an instance.",
    "code": "```scala\nclass Bicycle(val brand: String, val bicycleType: String, val wheelSize: Int)\n\nval myBicycle = new Bicycle(\"Giant\", \"Mountain\", 26)\n```"
  },
  {
    "task": "Instantiate an object of a class named Festival with properties for name, location, and duration.",
    "code": "```scala\nclass Festival(val name: String, val location: String, val duration: Int)\n\nval festival = new Festival(\"Summer Fest\", \"Central Park\", 3)\n```"
  },
  {
    "task": "Develop a class for a Ship with properties for name, capacity, and type, then instantiate it.",
    "code": "```scala\nclass Ship(val name: String, val capacity: Int, val shipType: String)\n\nobject Main extends App {\n  val ship = new Ship(\"Titanic\", 3000, \"Cruise\")\n}\n```"
  },
  {
    "task": "Create an object of a class named Currency with attributes for name, symbol, and exchange rate.",
    "code": "```scala\nclass Currency(val name: String, val symbol: String, val exchangeRate: Double)\n\nobject CurrencyApp {\n  def main(args: Array[String]): Unit = {\n    val currency = new Currency(\"Dollar\", \"$\", 1.0)\n    // Use the currency object as needed\n  }\n}\n```"
  },
  {
    "task": "Define a class for a Gadget with properties for name, brand, and functionality, then instantiate it.",
    "code": "```scala\nclass Gadget(val name: String, val brand: String, val functionality: String)\n\nval gadget = new Gadget(\"Smartphone\", \"TechBrand\", \"Communication\")\n```"
  },
  {
    "task": "Construct an object from a class named Bridge with attributes for name, length, and location.",
    "code": "```scala\nclass Bridge(val name: String, val length: Double, val location: String)\n\nval bridge = new Bridge(\"Golden Gate\", 2737.4, \"San Francisco\")\n```"
  },
  {
    "task": "Create an instance of a class called Forest with properties for name, area, and tree species.",
    "code": "```scala\nclass Forest(val name: String, val area: Double, val treeSpecies: List[String])\n\nval forestInstance = new Forest(\"Amazon\", 5500.0, List(\"Cedar\", \"Mahogany\", \"Teak\"))\n```"
  },
  {
    "task": "Design a class for a Sculpture with attributes for title, artist, and material, then create an instance.",
    "code": "```scala\nclass Sculpture(val title: String, val artist: String, val material: String)\n\nval mySculpture = new Sculpture(\"The Thinker\", \"Auguste Rodin\", \"Bronze\")\n```"
  },
  {
    "task": "Instantiate an object of a class named Aquarium with properties for name and number of tanks.",
    "code": "```scala\nclass Aquarium(val name: String, val numberOfTanks: Int)\n\nval myAquarium = new Aquarium(\"Ocean World\", 10)\n```"
  },
  {
    "task": "Develop a class for a Play with properties for title, playwright, and genre, then instantiate it.",
    "code": "```scala\nclass Play(val title: String, val playwright: String, val genre: String)\n\nval play = new Play(\"Hamlet\", \"William Shakespeare\", \"Tragedy\")\n```"
  },
  {
    "task": "Create a new object from a class named Telescope, initializing it with type and focal length.",
    "code": "```scala\nclass Telescope(val telescopeType: String, val focalLength: Double)\n\nval myTelescope = new Telescope(\"Refractor\", 900.0)\n```"
  },
  {
    "task": "Write a class for a Monument with properties for name, location, and year built, and instantiate it.",
    "code": "```scala\nclass Monument(val name: String, val location: String, val yearBuilt: Int)\n\nobject Main extends App {\n  val monument = new Monument(\"Eiffel Tower\", \"Paris\", 1889)\n}\n```"
  },
  {
    "task": "Define a class representing a Star with attributes for name, size, and distance from Earth, and create an object.",
    "code": "```scala\nclass Star(val name: String, val size: Double, val distanceFromEarth: Double)\n\nval myStar = new Star(\"Sirius\", 2.0, 8.6)\n```"
  },
  {
    "task": "Create an instance of a class called Festival with properties for name, location, and number of events.",
    "code": "```scala\nclass Festival(val name: String, val location: String, val numberOfEvents: Int)\n\nval festivalInstance = new Festival(\"Music Fest\", \"New York\", 10)\n```"
  },
  {
    "task": "Design a class for a Clock with attributes for brand, type, and display, then create an instance.",
    "code": "```scala\nclass Clock(val brand: String, val `type`: String, val display: String)\n\nobject Main extends App {\n  val myClock = new Clock(\"Seiko\", \"Analog\", \"Digital\")\n  println(s\"Brand: ${myClock.brand}, Type: ${myClock.`type`}, Display: ${myClock.display}\")\n}\n```"
  },
  {
    "task": "Instantiate an object of a class named Stadium with properties for name, capacity, and location.",
    "code": "```scala\nclass Stadium(val name: String, val capacity: Int, val location: String)\n\nval stadium = new Stadium(\"National Stadium\", 50000, \"City Center\")\n```"
  },
  {
    "task": "Develop a class for a Potion with properties for name, effect, and duration, then instantiate it.",
    "code": "```scala\nclass Potion(val name: String, val effect: String, val duration: Int)\n\nobject PotionApp extends App {\n  val healingPotion = new Potion(\"Healing Potion\", \"Restores Health\", 5)\n}\n```"
  },
  {
    "task": "Create an object of a class named Planet with attributes for name, mass, and orbital period.",
    "code": "```scala\nclass Planet(val name: String, val mass: Double, val orbitalPeriod: Double)\n\nobject Main extends App {\n  val earth = new Planet(\"Earth\", 5.972e24, 365.25)\n}\n```"
  },
  {
    "task": "Define a class for a Lighthouse with properties for name, height, and light range, then instantiate it.",
    "code": "```scala\nclass Lighthouse(val name: String, val height: Double, val lightRange: Double)\n\nval lighthouse = new Lighthouse(\"Hatteras\", 63.0, 24.0)\n```"
  },
  {
    "task": "Construct an object from a class named Volcano with attributes for name, height, and eruption history.",
    "code": "```scala\nclass Volcano(val name: String, val height: Double, val eruptionHistory: List[Int])\n\nobject Main extends App {\n  val volcano = new Volcano(\"Mount Vesuvius\", 1281.0, List(79, 472, 1631, 1944))\n}\n```"
  },
  {
    "task": "Create an instance of a class called Sculpture with properties for title, artist, and year created.",
    "code": "```scala\nclass Sculpture(val title: String, val artist: String, val yearCreated: Int)\n\nval sculpture = new Sculpture(\"The Thinker\", \"Auguste Rodin\", 1904)\n```"
  },
  {
    "task": "Design a class for a Ship with attributes for name, type, and displacement, then create an instance.",
    "code": "```scala\nclass Ship(val name: String, val shipType: String, val displacement: Double)\n\nval myShip = new Ship(\"Titanic\", \"Cruise\", 52310.0)\n```"
  },
  {
    "task": "Instantiate an object of a class named Opera with properties for title, composer, and act count.",
    "code": "```scala\nclass Opera(val title: String, val composer: String, val actCount: Int)\n\nval operaInstance = new Opera(\"La Traviata\", \"Giuseppe Verdi\", 3)\n```"
  },
  {
    "task": "Develop a class for a Waterfall with properties for name, height, and flow rate, then instantiate it.",
    "code": "```scala\nclass Waterfall(val name: String, val height: Double, val flowRate: Double)\n\nval waterfall = new Waterfall(\"Angel Falls\", 979.0, 500.0)\n```"
  },
  {
    "task": "Create a new object from a class named Castle, initializing it with name, location, and year built.",
    "code": "```scala\nclass Castle(val name: String, val location: String, val yearBuilt: Int)\n\nval myCastle = new Castle(\"Winterfell\", \"North\", 1200)\n```"
  },
  {
    "task": "Write a class for a Cat with properties for name, breed, and color, and instantiate it.",
    "code": "```scala\nclass Cat(val name: String, val breed: String, val color: String)\n\nval myCat = new Cat(\"Whiskers\", \"Siamese\", \"Gray\")\n```"
  },
  {
    "task": "Define a class representing a Spaceship with attributes for name, speed, and crew capacity, and create an object.",
    "code": "```scala\nclass Spaceship(val name: String, val speed: Double, val crewCapacity: Int)\n\nobject Main extends App {\n  val spaceship = new Spaceship(\"Galactic Voyager\", 50000.0, 100)\n}\n```"
  },
  {
    "task": "Create an instance of a class called Robot with properties for name, model, and function.",
    "code": "```scala\nclass Robot(val name: String, val model: String, val function: String)\n\nval robotInstance = new Robot(\"RoboHelper\", \"XJ9\", \"Assistance\")\n```"
  },
  {
    "task": "Design a class for a Computer Program with attributes for name, language, and lines of code, then create an instance.",
    "code": "```scala\nclass ComputerProgram(val name: String, val language: String, val linesOfCode: Int)\n\nval myProgram = new ComputerProgram(\"Text Editor\", \"Scala\", 1500)\n```"
  },
  {
    "task": "Instantiate an object of a class named Mountain with properties for name, range, and prominence.",
    "code": "```scala\nclass Mountain(val name: String, val range: String, val prominence: Double)\n\nval mountain = new Mountain(\"Everest\", \"Himalayas\", 8848.0)\n```"
  },
  {
    "task": "Develop a class for a Painting with properties for title, artist, and dimensions, then instantiate it.",
    "code": "```scala\nclass Painting(val title: String, val artist: String, val dimensions: (Double, Double))\n\nval painting = new Painting(\"Starry Night\", \"Vincent van Gogh\", (73.7, 92.1))\n```"
  },
  {
    "task": "Create an object of a class named Symphony with attributes for title, composer, and movement count.",
    "code": "```scala\nclass Symphony(val title: String, val composer: String, val movementCount: Int)\n\nval symphony = new Symphony(\"Symphony No. 5\", \"Ludwig van Beethoven\", 4)\n```"
  },
  {
    "task": "Define a class for a Dinosaur with properties for name, period, and diet, then instantiate it.",
    "code": "```scala\nclass Dinosaur(val name: String, val period: String, val diet: String)\n\nval dinosaur = new Dinosaur(\"Tyrannosaurus\", \"Cretaceous\", \"Carnivore\")\n```"
  },
  {
    "task": "Construct an object from a class named River with attributes for name, length, and basin size.",
    "code": "```scala\nclass River(val name: String, val length: Double, val basinSize: Double)\n\nobject Main extends App {\n  val river = new River(\"Amazon\", 6400.0, 7050000.0)\n  println(s\"River Name: ${river.name}, Length: ${river.length} km, Basin Size: ${river.basinSize} km\u00b2\")\n}\n```"
  },
  {
    "task": "Create an instance of a class called Instrument with properties for name, type, and material.",
    "code": "```scala\nclass Instrument(val name: String, val instrumentType: String, val material: String)\n\nval instrumentInstance = new Instrument(\"Guitar\", \"String\", \"Wood\")\n```"
  },
  {
    "task": "Design a class for a Planetarium with attributes for name, location, and dome size, then create an instance.",
    "code": "```scala\nclass Planetarium(val name: String, val location: String, val domeSize: Double)\n\nval planetariumInstance = new Planetarium(\"Cosmos Planetarium\", \"New York\", 30.5)\n```"
  },
  {
    "task": "Instantiate an object of a class named Island with properties for name, area, and population.",
    "code": "```scala\nclass Island(val name: String, val area: Double, val population: Int)\n\nval myIsland = new Island(\"Paradise Island\", 123.45, 1000)\n```"
  },
  {
    "task": "Develop a class for a Space Station with properties for name, crew size, and modules, then instantiate it.",
    "code": "```scala\nclass SpaceStation(val name: String, val crewSize: Int, val modules: List[String])\n\nval spaceStation = new SpaceStation(\"International Space Station\", 6, List(\"Habitation Module\", \"Research Module\", \"Power Module\"))\n```"
  },
  {
    "task": "Create a new object from a class named Dinosaur, initializing it with species and period.",
    "code": "```scala\nclass Dinosaur(val species: String, val period: String)\n\nobject Main extends App {\n  val dinosaur = new Dinosaur(\"Tyrannosaurus Rex\", \"Cretaceous\")\n}\n```"
  },
  {
    "task": "Write a class for a Tree with properties for species, height, and age, and instantiate it.",
    "code": "```scala\nclass Tree(val species: String, val height: Double, val age: Int)\n\nval myTree = new Tree(\"Oak\", 5.5, 10)\n```"
  },
  {
    "task": "Define a class representing a Firework with attributes for name, color, and duration, and create an object.",
    "code": "```scala\nclass Firework(val name: String, val color: String, val duration: Int)\n\nval firework = new Firework(\"Sparkler\", \"Red\", 5)\n```"
  },
  {
    "task": "Create an instance of a class called ComicBook with properties for title, author, and issue number.",
    "code": "```scala\nclass ComicBook(val title: String, val author: String, val issueNumber: Int)\n\nval comic = new ComicBook(\"The Amazing Spider-Man\", \"Stan Lee\", 1)\n```"
  },
  {
    "task": "Design a class for a Metropolis with attributes for name, population, and GDP, then create an instance.",
    "code": "```scala\nclass Metropolis(val name: String, val population: Long, val gdp: Double)\n\nval metropolisInstance = new Metropolis(\"Example City\", 5000000, 35000000000.0)\n```"
  },
  {
    "task": "Instantiate an object of a class named Dragon with properties for name, element, and age.",
    "code": "```scala\nclass Dragon(val name: String, val element: String, val age: Int)\n\nval myDragon = new Dragon(\"Smaug\", \"Fire\", 100)\n```"
  },
  {
    "task": "Develop a class for a Novel with properties for title, author, and genre, then instantiate it.",
    "code": "```scala\nclass Novel(val title: String, val author: String, val genre: String)\n\nval novel = new Novel(\"1984\", \"George Orwell\", \"Dystopian\")\n```"
  },
  {
    "task": "Create an object of a class named Satellite with attributes for name, orbit, and mission.",
    "code": "```scala\nclass Satellite(val name: String, val orbit: String, val mission: String)\n\nobject Main extends App {\n  val satellite = new Satellite(\"Hubble\", \"Low Earth Orbit\", \"Astronomy\")\n}\n```"
  },
  {
    "task": "Define a class for a Castle with properties for name, location, and architectural style, then instantiate it.",
    "code": "```scala\nclass Castle(val name: String, val location: String, val architecturalStyle: String)\n\nval myCastle = new Castle(\"Winterfell\", \"The North\", \"Medieval\")\n```"
  },
  {
    "task": "Construct an object from a class named Jungle with attributes for name, area, and biodiversity.",
    "code": "```scala\nclass Jungle(val name: String, val area: Double, val biodiversity: Int)\n\nval jungle = new Jungle(\"Amazon\", 5500.5, 300)\n```"
  },
  {
    "task": "Create an instance of a class called Dinosaur with properties for species, size, and diet.",
    "code": "```scala\nclass Dinosaur(val species: String, val size: String, val diet: String)\n\nval dinosaurInstance = new Dinosaur(\"Tyrannosaurus\", \"Large\", \"Carnivore\")\n```"
  },
  {
    "task": "Design a class for a Superhero with attributes for name, powers, and alias, then create an instance.",
    "code": "```scala\nclass Superhero(val name: String, val powers: String, val alias: String)\n\nobject Main extends App {\n  val superhero = new Superhero(\"Clark Kent\", \"Super strength, Flight, X-ray vision\", \"Superman\")\n}\n```"
  }
]