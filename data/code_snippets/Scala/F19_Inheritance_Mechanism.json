[
  {
    "task": "Create a base class for a vehicle with methods for speed and fuel efficiency, then derive a car class that overrides these methods to provide specific implementations.",
    "code": "```scala\nclass Vehicle {\n  def speed: Double = 0.0\n  def fuelEfficiency: Double = 0.0\n}\n\nclass Car extends Vehicle {\n  override def speed: Double = 120.0\n  override def fuelEfficiency: Double = 15.0\n}\n```"
  },
  {
    "task": "Design a base class for a multimedia file with properties like duration and format, then extend it with a video class that includes resolution and frame rate.",
    "code": "```scala\n// Base class for a multimedia file\nclass MultimediaFile(val duration: Double, val format: String)\n\n// Extended class for a video file\nclass VideoFile(duration: Double, format: String, val resolution: String, val frameRate: Double)\n  extends MultimediaFile(duration, format)\n```"
  },
  {
    "task": "Develop a superclass for bank accounts with methods for deposit and withdrawal, then create a savings account subclass that overrides the withdrawal method to incorporate interest deductions.",
    "code": "```scala\nclass BankAccount(var balance: Double) {\n  def deposit(amount: Double): Unit = {\n    if (amount > 0) {\n      balance += amount\n    }\n  }\n\n  def withdraw(amount: Double): Unit = {\n    if (amount > 0 && amount <= balance) {\n      balance -= amount\n    }\n  }\n}\n\nclass SavingsAccount(balance: Double, val interestRate: Double) extends BankAccount(balance) {\n  override def withdraw(amount: Double): Unit = {\n    val interestDeduction = amount * interestRate\n    val totalAmount = amount + interestDeduction\n    if (totalAmount <= balance) {\n      balance -= totalAmount\n    }\n  }\n}\n```"
  },
  {
    "task": "Implement a base class for a geometric shape with methods to calculate area and perimeter, then create a rectangle subclass that provides specific calculations for these methods.",
    "code": "```scala\nabstract class GeometricShape {\n  def area: Double\n  def perimeter: Double\n}\n\nclass Rectangle(val width: Double, val height: Double) extends GeometricShape {\n  override def area: Double = width * height\n  override def perimeter: Double = 2 * (width + height)\n}\n```"
  },
  {
    "task": "Construct a parent class for employees with a method to calculate salary, then derive a manager class that overrides this method to include bonuses.",
    "code": "```scala\nclass Employee(val baseSalary: Double) {\n  def calculateSalary(): Double = baseSalary\n}\n\nclass Manager(baseSalary: Double, val bonus: Double) extends Employee(baseSalary) {\n  override def calculateSalary(): Double = baseSalary + bonus\n}\n```"
  },
  {
    "task": "Set up a base class for a library item with properties like title and author, and extend it with a book subclass that adds a number of pages property.",
    "code": "```scala\nclass LibraryItem(val title: String, val author: String)\n\nclass Book(title: String, author: String, val numberOfPages: Int) extends LibraryItem(title, author)\n```"
  },
  {
    "task": "Create a foundation class for an electronic device with a method to turn on and off, and derive a smartphone class that overrides the turn on method to require a passcode.",
    "code": "```scala\nclass ElectronicDevice {\n  def turnOn(): Unit = {\n    println(\"Device is now on.\")\n  }\n\n  def turnOff(): Unit = {\n    println(\"Device is now off.\")\n  }\n}\n\nclass Smartphone extends ElectronicDevice {\n  override def turnOn(): Unit = {\n    println(\"Enter passcode to turn on the device.\")\n    // Here you could add additional logic to verify passcode\n  }\n}\n\n// Example usage:\nval device = new ElectronicDevice\ndevice.turnOn()\ndevice.turnOff()\n\nval phone = new Smartphone\nphone.turnOn()\nphone.turnOff()\n```"
  },
  {
    "task": "Design a base class for an animal with a method to make a sound, then create a dog subclass that overrides this method to bark.",
    "code": "```scala\n// Base class\nclass Animal {\n  def makeSound(): Unit = {\n    println(\"Some generic animal sound\")\n  }\n}\n\n// Subclass\nclass Dog extends Animal {\n  override def makeSound(): Unit = {\n    println(\"Bark\")\n  }\n}\n\n// Example usage\nval animal = new Animal\nanimal.makeSound()\n\nval dog = new Dog\ndog.makeSound()\n```"
  },
  {
    "task": "Develop a superclass for meals with a method to calculate calories, then create a dessert subclass that overrides it to add extra sugar calories.",
    "code": "```scala\nclass Meal {\n  def calculateCalories(): Int = 0\n}\n\nclass Dessert extends Meal {\n  override def calculateCalories(): Int = {\n    val baseCalories = super.calculateCalories()\n    val sugarCalories = 100\n    baseCalories + sugarCalories\n  }\n}\n```"
  },
  {
    "task": "Implement a base class for a transportation mode with a method to calculate travel time, then extend it with a plane subclass that overrides the method to calculate based on speed.",
    "code": "```scala\nabstract class TransportationMode {\n  def calculateTravelTime(distance: Double): Double\n}\n\nclass Plane extends TransportationMode {\n  override def calculateTravelTime(distance: Double): Double = {\n    val speed = 900.0 // average speed in km/h\n    distance / speed\n  }\n}\n```"
  },
  {
    "task": "Construct a parent class for a musical instrument with a method to play sound, then derive a piano class that overrides the method to play specific notes.",
    "code": "```scala\nclass MusicalInstrument {\n  def playSound(): Unit = {\n    println(\"Playing a generic sound.\")\n  }\n}\n\nclass Piano extends MusicalInstrument {\n  override def playSound(): Unit = {\n    println(\"Playing specific piano notes.\")\n  }\n}\n\n// Example usage\nval instrument: MusicalInstrument = new MusicalInstrument\ninstrument.playSound()\n\nval piano: MusicalInstrument = new Piano\npiano.playSound()\n```"
  },
  {
    "task": "Set up a base class for a user account with a method to reset password, and extend it with an admin account subclass that overrides it to include security questions.",
    "code": "```scala\nclass UserAccount {\n  def resetPassword(): String = {\n    \"Password has been reset.\"\n  }\n}\n\nclass AdminAccount extends UserAccount {\n  override def resetPassword(): String = {\n    \"Password has been reset with security questions.\"\n  }\n}\n```"
  },
  {
    "task": "Create a foundational class for a beverage with properties like volume and temperature, and derive a coffee class that overrides the temperature property to be hot.",
    "code": "```scala\nclass Beverage(val volume: Double, val temperature: String)\n\nclass Coffee(volume: Double) extends Beverage(volume, \"hot\")\n```"
  },
  {
    "task": "Design a base class for a service appointment with a method to schedule time, then create a doctor appointment subclass that overrides this method to include consultation duration.",
    "code": "```scala\nclass ServiceAppointment {\n  def scheduleTime(time: String): Unit = {\n    println(s\"Service scheduled at $time.\")\n  }\n}\n\nclass DoctorAppointment extends ServiceAppointment {\n  override def scheduleTime(time: String): Unit = {\n    val consultationDuration = \"30 minutes\"\n    println(s\"Doctor appointment scheduled at $time with a consultation duration of $consultationDuration.\")\n  }\n}\n\n// Example usage\nval appointment1 = new ServiceAppointment\nappointment1.scheduleTime(\"10:00 AM\")\n\nval appointment2 = new DoctorAppointment\nappointment2.scheduleTime(\"11:00 AM\")\n```"
  },
  {
    "task": "Develop a superclass for electronic gadgets with a method to calculate battery life, then extend it with a laptop class that overrides this method to consider usage patterns.",
    "code": "```scala\n// Superclass for electronic gadgets\nclass ElectronicGadget {\n  def calculateBatteryLife(hours: Int): String = {\n    s\"Battery life is approximately $hours hours.\"\n  }\n}\n\n// Subclass for Laptop\nclass Laptop extends ElectronicGadget {\n  override def calculateBatteryLife(hours: Int): String = {\n    val adjustedHours = hours * 0.8 // Adjust for usage patterns\n    s\"Adjusted battery life for laptop usage is approximately $adjustedHours hours.\"\n  }\n}\n\n// Example usage\nobject GadgetApp extends App {\n  val genericGadget = new ElectronicGadget\n  println(genericGadget.calculateBatteryLife(10)) // Output: Battery life is approximately 10 hours.\n\n  val myLaptop = new Laptop\n  println(myLaptop.calculateBatteryLife(10)) // Output: Adjusted battery life for laptop usage is approximately 8.0 hours.\n}\n```"
  },
  {
    "task": "Implement a base class for a website component with a method to render content, then create a blog post subclass that overrides this method to include author information.",
    "code": "```scala\nabstract class WebsiteComponent {\n  def renderContent(): String\n}\n\nclass BlogPost(val title: String, val content: String, val author: String) extends WebsiteComponent {\n  override def renderContent(): String = {\n    s\"Title: $title\\nContent: $content\\nAuthor: $author\"\n  }\n}\n```"
  },
  {
    "task": "Construct a parent class for a recipe with methods for ingredients and instructions, then derive a cake recipe class that overrides these methods to add baking steps.",
    "code": "```scala\n// Define a parent class for a recipe\nabstract class Recipe {\n  def ingredients(): List[String]\n  def instructions(): List[String]\n}\n\n// Derive a cake recipe class that overrides methods\nclass CakeRecipe extends Recipe {\n  override def ingredients(): List[String] = {\n    List(\"2 cups flour\", \"1 cup sugar\", \"1/2 cup butter\", \"2 eggs\", \"1 tsp vanilla extract\", \"1 cup milk\")\n  }\n\n  override def instructions(): List[String] = {\n    List(\n      \"Preheat the oven to 350 degrees F (175 degrees C).\",\n      \"In a large bowl, cream together the butter and sugar.\",\n      \"Beat in the eggs one at a time, then stir in the vanilla.\",\n      \"Combine flour and baking powder, add to the creamed mixture and mix well.\",\n      \"Finally stir in the milk until batter is smooth.\",\n      \"Pour or spoon batter into the prepared pan.\",\n      \"Bake for 30 to 40 minutes in the preheated oven.\"\n    )\n  }\n}\n```"
  },
  {
    "task": "Set up a base class for a plant with methods for sunlight and water needs, and extend it with a cactus subclass that overrides these methods to require less water.",
    "code": "```scala\n// Base class for a plant\nclass Plant {\n  def sunlightNeeds(): String = {\n    \"Regular sunlight needed\"\n  }\n\n  def waterNeeds(): String = {\n    \"Regular water needed\"\n  }\n}\n\n// Subclass for a cactus\nclass Cactus extends Plant {\n  override def sunlightNeeds(): String = {\n    \"Regular sunlight needed\"\n  }\n\n  override def waterNeeds(): String = {\n    \"Less water needed\"\n  }\n}\n```"
  },
  {
    "task": "Create a foundational class for a building with properties like height and material, and derive a skyscraper class that overrides the height property to be significantly taller.",
    "code": "```scala\nclass Building(val height: Double, val material: String)\n\nclass Skyscraper(material: String) extends Building(height = 300.0, material)\n```"
  },
  {
    "task": "Design a base class for a payment method with a method to process transactions, then create a credit card subclass that overrides this method to include credit limits.",
    "code": "```scala\n// Base class for a payment method\nabstract class PaymentMethod {\n  def processTransaction(amount: Double): Unit\n}\n\n// Subclass for a credit card\nclass CreditCard(private var creditLimit: Double) extends PaymentMethod {\n  override def processTransaction(amount: Double): Unit = {\n    if (amount <= creditLimit) {\n      creditLimit -= amount\n      println(s\"Transaction approved. New credit limit: $$creditLimit\")\n    } else {\n      println(\"Transaction denied. Insufficient credit limit.\")\n    }\n  }\n}\n\n// Example usage\nobject PaymentApp {\n  def main(args: Array[String]): Unit = {\n    val creditCard = new CreditCard(1000.0)\n    creditCard.processTransaction(200.0)\n    creditCard.processTransaction(900.0)\n  }\n}\n```"
  },
  {
    "task": "Develop a superclass for a computer program with methods for input and output, then extend it with a game subclass that overrides these methods to include player interactions.",
    "code": "```scala\n// Superclass for a computer program\nabstract class ComputerProgram {\n  def input(): Unit\n  def output(): Unit\n}\n\n// Subclass for a game\nclass Game extends ComputerProgram {\n  override def input(): Unit = {\n    println(\"Player input received.\")\n    // Handle player input here\n  }\n\n  override def output(): Unit = {\n    println(\"Displaying game output.\")\n    // Display game output here\n  }\n}\n\n// Example usage\nval game = new Game()\ngame.input()\ngame.output()\n```"
  },
  {
    "task": "Implement a base class for a dining establishment with a method to calculate wait time, then create a fast food subclass that overrides this method to be shorter.",
    "code": "```scala\nclass DiningEstablishment {\n  def calculateWaitTime(): Int = {\n    30 // Default wait time in minutes\n  }\n}\n\nclass FastFood extends DiningEstablishment {\n  override def calculateWaitTime(): Int = {\n    10 // Shorter wait time for fast food\n  }\n}\n```"
  },
  {
    "task": "Construct a parent class for a social media profile with methods for posting and liking, then derive a business profile class that overrides these methods to include promotions.",
    "code": "```scala\n// Parent class for a social media profile\nclass SocialMediaProfile {\n  def post(content: String): Unit = {\n    println(s\"Posting content: $content\")\n  }\n  \n  def like(contentId: Int): Unit = {\n    println(s\"Liking content with ID: $contentId\")\n  }\n}\n\n// Derived class for a business profile\nclass BusinessProfile extends SocialMediaProfile {\n  override def post(content: String): Unit = {\n    println(s\"Posting business content with promotion: $content\")\n  }\n  \n  override def like(contentId: Int): Unit = {\n    println(s\"Liking content with ID (business account): $contentId\")\n  }\n}\n```"
  },
  {
    "task": "Set up a base class for an educational course with methods for syllabus and grading, and extend it with an online course subclass that overrides these methods for remote learning.",
    "code": "```scala\n// Base class for an educational course\nabstract class EducationalCourse {\n  def syllabus(): String\n  def grading(): String\n}\n\n// Subclass for an online course\nclass OnlineCourse extends EducationalCourse {\n  override def syllabus(): String = {\n    \"Online syllabus includes video lectures, online quizzes, and discussion forums.\"\n  }\n\n  override def grading(): String = {\n    \"Grading is based on online assignments, quizzes, and participation in forums.\"\n  }\n}\n\n// Example usage\nobject Main extends App {\n  val onlineCourse = new OnlineCourse()\n  println(onlineCourse.syllabus())\n  println(onlineCourse.grading())\n}\n```"
  },
  {
    "task": "Create a foundational class for a sports team with properties like team name and coach, and derive a football team class that overrides the coach property with a specific person.",
    "code": "```scala\nclass SportsTeam(val teamName: String, val coach: String)\n\nclass FootballTeam(teamName: String, override val coach: String) extends SportsTeam(teamName, coach)\n\n// Example usage\nval footballTeam = new FootballTeam(\"Warriors\", \"John Smith\")\nprintln(s\"Team: ${footballTeam.teamName}, Coach: ${footballTeam.coach}\")\n```"
  },
  {
    "task": "Design a base class for a document with methods for printing and saving, then create a PDF document subclass that overrides these methods to include encryption.",
    "code": "```scala\n// Base class for a document\nabstract class Document {\n  def print(): Unit\n  def save(): Unit\n}\n\n// PDF document subclass with encryption\nclass PDFDocument extends Document {\n  override def print(): Unit = {\n    println(\"Printing the PDF document with encryption.\")\n  }\n\n  override def save(): Unit = {\n    println(\"Saving the PDF document with encryption.\")\n  }\n}\n\n// Example usage\nobject Main extends App {\n  val pdfDoc = new PDFDocument()\n  pdfDoc.print()\n  pdfDoc.save()\n}\n```"
  },
  {
    "task": "Develop a superclass for a retail product with methods for pricing and discount, then extend it with an electronics product class that overrides the discount method to offer more.",
    "code": "```scala\n// Superclass for a retail product\nclass RetailProduct(val name: String, val price: Double) {\n  def getPrice: Double = price\n\n  def getDiscountedPrice(discountPercentage: Double): Double = {\n    price - (price * discountPercentage / 100)\n  }\n}\n\n// Subclass for an electronics product\nclass ElectronicsProduct(name: String, price: Double) extends RetailProduct(name, price) {\n  override def getDiscountedPrice(discountPercentage: Double): Double = {\n    super.getDiscountedPrice(discountPercentage + 10) // Offer more discount\n  }\n}\n\n// Usage example\nobject Main extends App {\n  val genericProduct = new RetailProduct(\"Generic Product\", 100.0)\n  println(s\"${genericProduct.name} discounted price: ${genericProduct.getDiscountedPrice(10.0)}\")\n\n  val electronicProduct = new ElectronicsProduct(\"Electronic Product\", 100.0)\n  println(s\"${electronicProduct.name} discounted price: ${electronicProduct.getDiscountedPrice(10.0)}\")\n}\n```"
  },
  {
    "task": "Implement a base class for a subscription service with a method to renew membership, then create a monthly subscription subclass that overrides this method for automatic renewal.",
    "code": "```scala\nabstract class SubscriptionService {\n  def renewMembership(): Unit\n}\n\nclass MonthlySubscription extends SubscriptionService {\n  override def renewMembership(): Unit = {\n    println(\"Automatic monthly renewal.\")\n  }\n}\n\n// Example usage\nval monthlySub = new MonthlySubscription\nmonthlySub.renewMembership()\n```"
  },
  {
    "task": "Construct a parent class for a language translator with a method to translate text, then derive a French translator class that overrides this method for French language specifics.",
    "code": "```scala\n// Parent class\nclass LanguageTranslator {\n  def translate(text: String): String = {\n    \"Translation in generic language\"\n  }\n}\n\n// Derived class\nclass FrenchTranslator extends LanguageTranslator {\n  override def translate(text: String): String = {\n    // Perform specific French translation\n    \"Traduction en fran\u00e7ais\"\n  }\n}\n```"
  },
  {
    "task": "Set up a base class for a customer order with methods for placing and tracking, and extend it with a food order subclass that overrides tracking for delivery status.",
    "code": "```scala\nclass CustomerOrder {\n  def placeOrder(): String = {\n    \"Order has been placed.\"\n  }\n\n  def trackOrder(): String = {\n    \"Tracking order.\"\n  }\n}\n\nclass FoodOrder extends CustomerOrder {\n  override def trackOrder(): String = {\n    \"Tracking food order delivery status.\"\n  }\n}\n\n// Example usage\nval order1 = new CustomerOrder\nprintln(order1.placeOrder())\nprintln(order1.trackOrder())\n\nval order2 = new FoodOrder\nprintln(order2.placeOrder())\nprintln(order2.trackOrder())\n```"
  },
  {
    "task": "Create a foundational class for an artwork with properties like artist and medium, and derive a painting class that overrides the medium property to be 'canvas'.",
    "code": "```scala\nclass Artwork(val artist: String, val medium: String)\n\nclass Painting(artist: String) extends Artwork(artist, \"canvas\")\n```"
  },
  {
    "task": "Design a base class for a computer network with methods for connectivity and bandwidth, then create a wireless network subclass that overrides these methods for signal strength.",
    "code": "```scala\nabstract class ComputerNetwork {\n  def connectivity: String\n  def bandwidth: Double\n}\n\nclass WirelessNetwork extends ComputerNetwork {\n  override def connectivity: String = \"Wireless Connectivity\"\n  override def bandwidth: Double = 150.0 // Example bandwidth value\n\n  def signalStrength: Int = 80 // Example signal strength value\n}\n```"
  },
  {
    "task": "Develop a superclass for a messaging app with methods for sending and receiving messages, then extend it with a secure messaging subclass that overrides these methods for encryption.",
    "code": "```scala\n// Superclass for a messaging app\nabstract class MessagingApp {\n  def sendMessage(message: String, recipient: String): Unit\n  def receiveMessage(sender: String): String\n}\n\n// Subclass for secure messaging with encryption\nclass SecureMessagingApp extends MessagingApp {\n  override def sendMessage(message: String, recipient: String): Unit = {\n    val encryptedMessage = encrypt(message)\n    println(s\"Sending encrypted message to $recipient: $encryptedMessage\")\n  }\n\n  override def receiveMessage(sender: String): String = {\n    val encryptedMessage = \"Encrypted message from sender\"\n    val decryptedMessage = decrypt(encryptedMessage)\n    println(s\"Received encrypted message from $sender: $decryptedMessage\")\n    decryptedMessage\n  }\n\n  private def encrypt(message: String): String = {\n    // Simple encryption logic (placeholder)\n    message.reverse\n  }\n\n  private def decrypt(encryptedMessage: String): String = {\n    // Simple decryption logic (placeholder)\n    encryptedMessage.reverse\n  }\n}\n```"
  },
  {
    "task": "Implement a base class for a travel itinerary with methods for destinations and activities, then create a vacation itinerary subclass that overrides these methods for leisure activities.",
    "code": "```scala\n// Base class for travel itinerary\nclass TravelItinerary {\n  def destinations(): List[String] = {\n    List(\"General Destination\")\n  }\n\n  def activities(): List[String] = {\n    List(\"General Activity\")\n  }\n}\n\n// Subclass for vacation itinerary\nclass VacationItinerary extends TravelItinerary {\n  override def destinations(): List[String] = {\n    List(\"Beach\", \"Mountain Resort\")\n  }\n\n  override def activities(): List[String] = {\n    List(\"Swimming\", \"Hiking\", \"Sunbathing\")\n  }\n}\n\n// Example usage\nobject ItineraryApp extends App {\n  val vacation = new VacationItinerary\n  println(\"Destinations: \" + vacation.destinations().mkString(\", \"))\n  println(\"Activities: \" + vacation.activities().mkString(\", \"))\n}\n```"
  },
  {
    "task": "Construct a parent class for a healthcare record with methods for patient data and treatment history, then derive a pediatric record class that overrides these methods for child-specific data.",
    "code": "```scala\n// Parent class for healthcare record\nclass HealthcareRecord {\n  def patientData(): String = {\n    \"Patient data information\"\n  }\n\n  def treatmentHistory(): String = {\n    \"General treatment history\"\n  }\n}\n\n// Derived class for pediatric record\nclass PediatricRecord extends HealthcareRecord {\n  override def patientData(): String = {\n    \"Child-specific patient data\"\n  }\n\n  override def treatmentHistory(): String = {\n    \"Child-specific treatment history\"\n  }\n}\n\n// Example usage\nobject Main extends App {\n  val generalRecord = new HealthcareRecord\n  println(generalRecord.patientData())\n  println(generalRecord.treatmentHistory())\n\n  val pediatricRecord = new PediatricRecord\n  println(pediatricRecord.patientData())\n  println(pediatricRecord.treatmentHistory())\n}\n```"
  },
  {
    "task": "Set up a base class for a culinary dish with methods for preparation and serving, and extend it with an appetizer subclass that overrides these methods for smaller portions.",
    "code": "```scala\nabstract class CulinaryDish {\n  def prepare(): String\n  def serve(): String\n}\n\nclass Appetizer extends CulinaryDish {\n  override def prepare(): String = \"Preparing appetizer in smaller portions.\"\n  override def serve(): String = \"Serving appetizer on small plates.\"\n}\n```"
  },
  {
    "task": "Create a foundational class for a book collection with properties like genre and author, and derive a mystery collection class that overrides the genre property to be 'mystery'.",
    "code": "```scala\nclass BookCollection(var genre: String, var author: String)\n\nclass MysteryCollection(author: String) extends BookCollection(\"mystery\", author)\n```"
  },
  {
    "task": "Design a base class for a file storage system with methods for saving and deleting files, then create a cloud storage subclass that overrides these methods for remote access.",
    "code": "```scala\n// Base class for file storage system\nabstract class FileStorage {\n  def saveFile(filename: String): Unit\n  def deleteFile(filename: String): Unit\n}\n\n// Cloud storage subclass\nclass CloudStorage extends FileStorage {\n  override def saveFile(filename: String): Unit = {\n    println(s\"Saving $filename to cloud storage.\")\n    // Implementation for saving file to cloud\n  }\n\n  override def deleteFile(filename: String): Unit = {\n    println(s\"Deleting $filename from cloud storage.\")\n    // Implementation for deleting file from cloud\n  }\n}\n\n// Usage example\nobject StorageApp extends App {\n  val cloudStorage = new CloudStorage\n  cloudStorage.saveFile(\"example.txt\")\n  cloudStorage.deleteFile(\"example.txt\")\n}\n```"
  },
  {
    "task": "Develop a superclass for a seasonal sale event with methods for discounts and promotions, then extend it with a summer sale subclass that overrides these methods for summer items.",
    "code": "```scala\n// Superclass for a seasonal sale event\nclass SeasonalSaleEvent {\n  def discount(itemPrice: Double): Double = {\n    itemPrice * 0.9 // Default 10% discount\n  }\n\n  def promotion(): String = {\n    \"Buy one, get one 50% off!\"\n  }\n}\n\n// Subclass for a summer sale\nclass SummerSale extends SeasonalSaleEvent {\n  override def discount(itemPrice: Double): Double = {\n    itemPrice * 0.8 // 20% discount for summer items\n  }\n\n  override def promotion(): String = {\n    \"Summer special: Free shipping on all orders!\"\n  }\n}\n```"
  },
  {
    "task": "Implement a base class for a personal budget with methods for income and expenses, then create a student budget subclass that overrides these methods for tuition and fees.",
    "code": "```scala\nclass PersonalBudget {\n  protected var totalIncome: Double = 0.0\n  protected var totalExpenses: Double = 0.0\n\n  def addIncome(amount: Double): Unit = {\n    totalIncome += amount\n  }\n\n  def addExpense(amount: Double): Unit = {\n    totalExpenses += amount\n  }\n\n  def getBalance: Double = {\n    totalIncome - totalExpenses\n  }\n}\n\nclass StudentBudget extends PersonalBudget {\n  private var tuitionFees: Double = 0.0\n\n  override def addIncome(amount: Double): Unit = {\n    totalIncome += amount * 0.8 // Simulating some scholarship cut\n  }\n\n  override def addExpense(amount: Double): Unit = {\n    tuitionFees += amount\n    totalExpenses += amount * 1.1 // Additional fees/charges\n  }\n\n  def getTuitionFees: Double = tuitionFees\n}\n```"
  },
  {
    "task": "Construct a parent class for a fitness routine with methods for exercises and duration, then derive a yoga routine class that overrides these methods for flexibility exercises.",
    "code": "```scala\nclass FitnessRoutine {\n  def exercise(): String = \"General exercise\"\n  def duration(): Int = 30\n}\n\nclass YogaRoutine extends FitnessRoutine {\n  override def exercise(): String = \"Flexibility exercises\"\n  override def duration(): Int = 60\n}\n```"
  },
  {
    "task": "Set up a base class for a transportation ticket with methods for pricing and validity, and extend it with an airline ticket subclass that overrides these methods for baggage allowance.",
    "code": "```scala\nabstract class TransportationTicket {\n  def pricing(): Double\n  def validity(): String\n}\n\nclass AirlineTicket extends TransportationTicket {\n  override def pricing(): Double = {\n    // Implement airline-specific pricing logic\n    250.0\n  }\n\n  override def validity(): String = {\n    // Implement airline-specific validity logic\n    \"Valid for 1 year\"\n  }\n\n  def baggageAllowance(): Int = {\n    // Implement baggage allowance logic\n    30\n  }\n}\n```"
  },
  {
    "task": "Create a foundational class for a digital photo album with properties like album name and date, and derive a vacation album class that overrides the date property to be specific.",
    "code": "```scala\nclass DigitalPhotoAlbum(val albumName: String, val date: String)\n\nclass VacationAlbum(albumName: String, vacationDate: String) extends DigitalPhotoAlbum(albumName, vacationDate) {\n  override val date: String = vacationDate\n}\n```"
  },
  {
    "task": "Design a base class for a home appliance with methods for power usage and warranty, then create a refrigerator subclass that overrides these methods for energy efficiency.",
    "code": "```scala\n// Base class for a home appliance\nabstract class HomeAppliance {\n  def powerUsage(): String\n  def warranty(): String\n}\n\n// Subclass for a refrigerator\nclass Refrigerator extends HomeAppliance {\n  override def powerUsage(): String = \"Energy efficient power usage: 100 kWh/year\"\n  override def warranty(): String = \"Refrigerator warranty: 2 years\"\n}\n\n// Example usage\nobject Main extends App {\n  val fridge = new Refrigerator\n  println(fridge.powerUsage())\n  println(fridge.warranty())\n}\n```"
  },
  {
    "task": "Develop a superclass for a software update with methods for versioning and patch notes, then extend it with a security update subclass that overrides these methods for vulnerabilities.",
    "code": "```scala\nabstract class SoftwareUpdate {\n  def versioning(): String\n  def patchNotes(): String\n}\n\nclass SecurityUpdate extends SoftwareUpdate {\n  override def versioning(): String = {\n    \"Security Update Version 1.0\"\n  }\n\n  override def patchNotes(): String = {\n    \"Fixed vulnerabilities in authentication module\"\n  }\n}\n```"
  },
  {
    "task": "Implement a base class for a musical performance with methods for rehearsal and execution, then create a concert performance subclass that overrides these methods for live audience.",
    "code": "```scala\nclass MusicalPerformance {\n  def rehearsal(): Unit = {\n    println(\"Rehearsing the performance.\")\n  }\n  \n  def execution(): Unit = {\n    println(\"Executing the performance.\")\n  }\n}\n\nclass ConcertPerformance extends MusicalPerformance {\n  override def rehearsal(): Unit = {\n    println(\"Rehearsing the concert for a live audience.\")\n  }\n  \n  override def execution(): Unit = {\n    println(\"Performing the concert live for the audience.\")\n  }\n}\n```"
  },
  {
    "task": "Construct a parent class for an academic degree with methods for course requirements and credits, then derive a master's degree class that overrides these methods for advanced studies.",
    "code": "```scala\n// Parent class for an academic degree\nclass AcademicDegree {\n  def courseRequirements(): String = {\n    \"General education and core courses\"\n  }\n\n  def credits(): Int = {\n    120\n  }\n}\n\n// Derived class for a master's degree\nclass MastersDegree extends AcademicDegree {\n  override def courseRequirements(): String = {\n    \"Advanced courses and thesis requirement\"\n  }\n\n  override def credits(): Int = {\n    60\n  }\n}\n```"
  },
  {
    "task": "Set up a base class for a weather forecast with methods for temperature and conditions, and extend it with a winter forecast subclass that overrides these methods for snow conditions.",
    "code": "```scala\nclass WeatherForecast {\n  def temperature: String = \"Temperature information not available\"\n  def conditions: String = \"Weather conditions not available\"\n}\n\nclass WinterForecast extends WeatherForecast {\n  override def temperature: String = \"Cold with temperatures below freezing\"\n  override def conditions: String = \"Expect snow and icy conditions\"\n}\n```"
  },
  {
    "task": "Create a foundational class for a personal diary with properties like date and entries, and derive a travel diary class that overrides the date property with travel dates.",
    "code": "```scala\nclass PersonalDiary(val date: String, val entries: List[String])\n\nclass TravelDiary(travelDate: String, entries: List[String])\n  extends PersonalDiary(travelDate, entries)\n```"
  },
  {
    "task": "Design a base class for a pet with methods for feeding and grooming, then create a cat subclass that overrides these methods with specific food preferences.",
    "code": "```scala\nclass Pet {\n  def feed(): Unit = {\n    println(\"Feeding the pet with generic food.\")\n  }\n\n  def groom(): Unit = {\n    println(\"Grooming the pet.\")\n  }\n}\n\nclass Cat extends Pet {\n  override def feed(): Unit = {\n    println(\"Feeding the cat with fish.\")\n  }\n\n  override def groom(): Unit = {\n    println(\"Brushing the cat's fur.\")\n  }\n}\n\n// Example usage:\nval pet = new Pet()\npet.feed()\npet.groom()\n\nval cat = new Cat()\ncat.feed()\ncat.groom()\n```"
  },
  {
    "task": "Develop a superclass for a software library with methods for installation and updates, then extend it with a graphics library subclass that overrides these methods for rendering capabilities.",
    "code": "```scala\n// Superclass\nabstract class SoftwareLibrary {\n  def install(): Unit = {\n    println(\"Installing the software library...\")\n  }\n\n  def update(): Unit = {\n    println(\"Updating the software library...\")\n  }\n}\n\n// Subclass\nclass GraphicsLibrary extends SoftwareLibrary {\n  override def install(): Unit = {\n    println(\"Installing the graphics library with rendering capabilities...\")\n  }\n\n  override def update(): Unit = {\n    println(\"Updating the graphics library with enhanced rendering features...\")\n  }\n}\n\n// Example usage\nobject LibraryApp extends App {\n  val softwareLibrary: SoftwareLibrary = new SoftwareLibrary {}\n  softwareLibrary.install()\n  softwareLibrary.update()\n\n  val graphicsLibrary: GraphicsLibrary = new GraphicsLibrary\n  graphicsLibrary.install()\n  graphicsLibrary.update()\n}\n```"
  },
  {
    "task": "Implement a base class for a political campaign with methods for fundraising and events, then create a presidential campaign subclass that overrides these methods for national scale.",
    "code": "```scala\n// Base class for a political campaign\nclass PoliticalCampaign {\n  def fundraise(): Unit = {\n    println(\"Fundraising for the campaign.\")\n  }\n\n  def organizeEvent(): Unit = {\n    println(\"Organizing a local campaign event.\")\n  }\n}\n\n// Subclass for a presidential campaign\nclass PresidentialCampaign extends PoliticalCampaign {\n  override def fundraise(): Unit = {\n    println(\"Fundraising on a national scale for the presidential campaign.\")\n  }\n\n  override def organizeEvent(): Unit = {\n    println(\"Organizing a national campaign event.\")\n  }\n}\n\n// Example usage\nobject CampaignApp extends App {\n  val campaign = new PresidentialCampaign\n  campaign.fundraise()\n  campaign.organizeEvent()\n}\n```"
  },
  {
    "task": "Construct a parent class for an automotive part with methods for durability and replacement, then derive an engine part class that overrides these methods for performance.",
    "code": "```scala\nclass AutomotivePart {\n  def durability(): String = {\n    \"Standard durability\"\n  }\n\n  def replacement(): String = {\n    \"Standard replacement procedure\"\n  }\n}\n\nclass EnginePart extends AutomotivePart {\n  override def durability(): String = {\n    \"High performance durability\"\n  }\n\n  override def replacement(): String = {\n    \"Performance engine replacement procedure\"\n  }\n}\n```"
  },
  {
    "task": "Set up a base class for an online tutorial with methods for lessons and quizzes, and extend it with a coding tutorial subclass that overrides these methods for interactive exercises.",
    "code": "```scala\n// Base class\nabstract class OnlineTutorial {\n  def lesson(): Unit = {\n    println(\"This is a general lesson.\")\n  }\n\n  def quiz(): Unit = {\n    println(\"This is a general quiz.\")\n  }\n}\n\n// Subclass\nclass CodingTutorial extends OnlineTutorial {\n  override def lesson(): Unit = {\n    println(\"This is an interactive coding lesson.\")\n  }\n\n  override def quiz(): Unit = {\n    println(\"This is an interactive coding quiz.\")\n  }\n}\n\n// Example usage\nobject Main extends App {\n  val generalTutorial: OnlineTutorial = new OnlineTutorial {}\n  generalTutorial.lesson()\n  generalTutorial.quiz()\n\n  val codingTutorial: OnlineTutorial = new CodingTutorial\n  codingTutorial.lesson()\n  codingTutorial.quiz()\n}\n```"
  },
  {
    "task": "Create a foundational class for a personal collection with properties like item type and value, and derive a stamp collection class that overrides the item type property to be 'stamps'.",
    "code": "```scala\nclass Collection {\n  val itemType: String = \"generic\"\n  val value: Double = 0.0\n}\n\nclass StampCollection extends Collection {\n  override val itemType: String = \"stamps\"\n}\n```"
  },
  {
    "task": "Design a base class for a video game character with methods for health and abilities, then create a warrior character subclass that overrides these methods for strength.",
    "code": "```scala\n// Base class for a video game character\nclass GameCharacter {\n  def health: Int = 100\n\n  def abilities: String = \"Basic Abilities\"\n}\n\n// Subclass for a warrior character\nclass Warrior extends GameCharacter {\n  override def health: Int = 150\n\n  override def abilities: String = \"Strength\"\n}\n\n// Example usage\nobject Main extends App {\n  val basicCharacter = new GameCharacter\n  val warrior = new Warrior\n\n  println(s\"Basic Character Health: ${basicCharacter.health}, Abilities: ${basicCharacter.abilities}\")\n  println(s\"Warrior Health: ${warrior.health}, Abilities: ${warrior.abilities}\")\n}\n```"
  },
  {
    "task": "Develop a superclass for an event planner with methods for scheduling and budgeting, then extend it with a wedding planner subclass that overrides these methods for ceremony details.",
    "code": "```scala\n// Superclass for an event planner\nclass EventPlanner {\n  def schedule(): String = {\n    \"Scheduling the event...\"\n  }\n\n  def budget(): String = {\n    \"Calculating the event budget...\"\n  }\n}\n\n// Subclass for a wedding planner\nclass WeddingPlanner extends EventPlanner {\n  override def schedule(): String = {\n    \"Scheduling the wedding ceremony...\"\n  }\n\n  override def budget(): String = {\n    \"Calculating the wedding budget with ceremony details...\"\n  }\n}\n\n// Example usage\nobject PlannerApp extends App {\n  val eventPlanner = new EventPlanner\n  println(eventPlanner.schedule())\n  println(eventPlanner.budget())\n\n  val weddingPlanner = new WeddingPlanner\n  println(weddingPlanner.schedule())\n  println(weddingPlanner.budget())\n}\n```"
  },
  {
    "task": "Implement a base class for a software feature with methods for functionality and user feedback, then create a beta feature subclass that overrides these methods for testing.",
    "code": "```scala\n// Base class for a software feature\nclass SoftwareFeature {\n  def functionality(): String = {\n    \"Performing standard functionality.\"\n  }\n\n  def userFeedback(): String = {\n    \"User feedback: Satisfied.\"\n  }\n}\n\n// Subclass for a beta feature\nclass BetaFeature extends SoftwareFeature {\n  override def functionality(): String = {\n    \"Performing beta functionality for testing.\"\n  }\n\n  override def userFeedback(): String = {\n    \"User feedback: Needs improvement.\"\n  }\n}\n```"
  },
  {
    "task": "Construct a parent class for a gardening tool with methods for usage and maintenance, then derive a lawn mower class that overrides these methods for grass cutting.",
    "code": "```scala\n// Parent class for a gardening tool\nabstract class GardeningTool {\n  def usage(): String\n  def maintenance(): String\n}\n\n// Derived class for a lawn mower\nclass LawnMower extends GardeningTool {\n  override def usage(): String = \"Use the lawn mower for cutting grass.\"\n  override def maintenance(): String = \"Clean and oil the lawn mower regularly after use.\"\n}\n\n// Example usage\nobject Main extends App {\n  val mower = new LawnMower\n  println(mower.usage())\n  println(mower.maintenance())\n}\n```"
  },
  {
    "task": "Set up a base class for a household chore with methods for time and effort, and extend it with a cleaning chore subclass that overrides these methods for dirt removal.",
    "code": "```scala\n// Base class for a household chore\nabstract class HouseholdChore {\n  def time(): Int\n  def effort(): String\n}\n\n// Subclass for a cleaning chore\nclass CleaningChore extends HouseholdChore {\n  override def time(): Int = 60  // Example time for cleaning\n  override def effort(): String = \"High\"  // Example effort level for cleaning\n}\n\n// Example usage\nobject Main extends App {\n  val cleaning = new CleaningChore\n  println(s\"Time required: ${cleaning.time()} minutes\")\n  println(s\"Effort level: ${cleaning.effort()}\")\n}\n```"
  },
  {
    "task": "Create a foundational class for a personal project with properties like name and deadline, and derive a coding project class that overrides the deadline property for milestones.",
    "code": "```scala\nclass PersonalProject(val name: String, val deadline: String)\n\nclass CodingProject(name: String, override val deadline: String, val milestoneDeadline: String) extends PersonalProject(name, deadline)\n```"
  },
  {
    "task": "Design a base class for a holiday celebration with methods for traditions and activities, then create a Christmas celebration subclass that overrides these methods for gift exchange.",
    "code": "```scala\n// Base class for a holiday celebration\nabstract class HolidayCelebration {\n  def traditions(): Unit\n  def activities(): Unit\n}\n\n// Christmas celebration subclass\nclass ChristmasCelebration extends HolidayCelebration {\n  override def traditions(): Unit = {\n    println(\"Traditional Christmas dinner with family and friends.\")\n  }\n  \n  override def activities(): Unit = {\n    println(\"Gift exchange among family members and friends.\")\n  }\n}\n\n// Example usage\nval christmas = new ChristmasCelebration()\nchristmas.traditions()\nchristmas.activities()\n```"
  },
  {
    "task": "Develop a superclass for a customer feedback system with methods for collecting and analyzing, then extend it with a product feedback subclass that overrides these methods for reviews.",
    "code": "```scala\n// Superclass for customer feedback\nabstract class CustomerFeedback {\n  def collectFeedback(): String = {\n    \"Collecting general customer feedback\"\n  }\n\n  def analyzeFeedback(feedback: String): String = {\n    s\"Analyzing general feedback: $feedback\"\n  }\n}\n\n// Subclass for product feedback\nclass ProductFeedback extends CustomerFeedback {\n  override def collectFeedback(): String = {\n    \"Collecting product-specific customer reviews\"\n  }\n\n  override def analyzeFeedback(feedback: String): String = {\n    s\"Analyzing product review: $feedback\"\n  }\n}\n\n// Example usage\nobject FeedbackSystem {\n  def main(args: Array[String]): Unit = {\n    val generalFeedback = new CustomerFeedback {}\n    println(generalFeedback.collectFeedback())\n    println(generalFeedback.analyzeFeedback(\"Great service!\"))\n\n    val productFeedback = new ProductFeedback()\n    println(productFeedback.collectFeedback())\n    println(productFeedback.analyzeFeedback(\"Excellent product quality!\"))\n  }\n}\n```"
  },
  {
    "task": "Implement a base class for a civic service with methods for public engagement and policy, then create a community service subclass that overrides these methods for local impact.",
    "code": "```scala\n// Base class for a civic service\nabstract class CivicService {\n  def publicEngagement(): String\n  def policy(): String\n}\n\n// Subclass for community service\nclass CommunityService extends CivicService {\n  override def publicEngagement(): String = {\n    \"Community engagement through local workshops and events.\"\n  }\n\n  override def policy(): String = {\n    \"Implementing policies that address local community needs.\"\n  }\n}\n\n// Example usage\nobject Main extends App {\n  val service: CivicService = new CommunityService\n  println(service.publicEngagement())\n  println(service.policy())\n}\n```"
  },
  {
    "task": "Construct a parent class for a culinary ingredient with methods for flavor and preparation, then derive a spice ingredient class that overrides these methods for seasoning.",
    "code": "```scala\nclass CulinaryIngredient {\n  def flavor(): String = {\n    \"Generic flavor\"\n  }\n\n  def preparation(): String = {\n    \"Generic preparation\"\n  }\n}\n\nclass SpiceIngredient extends CulinaryIngredient {\n  override def flavor(): String = {\n    \"Spicy flavor\"\n  }\n\n  override def preparation(): String = {\n    \"Ground into powder\"\n  }\n}\n```"
  },
  {
    "task": "Set up a base class for a scientific experiment with methods for hypothesis and testing, and extend it with a chemistry experiment subclass that overrides these methods for reactions.",
    "code": "```scala\n// Base class for a scientific experiment\nabstract class ScientificExperiment {\n  def hypothesis(): String\n  def testing(): String\n}\n\n// Subclass for a chemistry experiment\nclass ChemistryExperiment extends ScientificExperiment {\n  override def hypothesis(): String = {\n    \"If two chemicals are mixed, then a reaction will occur.\"\n  }\n  \n  override def testing(): String = {\n    \"Mix the chemicals and observe the reaction.\"\n  }\n}\n\n// Example usage\nval experiment: ScientificExperiment = new ChemistryExperiment()\nprintln(experiment.hypothesis())\nprintln(experiment.testing())\n```"
  },
  {
    "task": "Create a foundational class for an inventory system with properties like item ID and quantity, and derive a warehouse inventory class that overrides the quantity property for bulk storage.",
    "code": "```scala\nclass InventoryItem(val itemId: String, val quantity: Int)\n\nclass WarehouseInventory(itemId: String, override val quantity: Int) extends InventoryItem(itemId, quantity)\n```"
  },
  {
    "task": "Design a base class for a travel agency with methods for itinerary and bookings, then create a luxury travel subclass that overrides these methods for premium services.",
    "code": "```scala\nabstract class TravelAgency {\n  def itinerary(): String\n  def bookings(): String\n}\n\nclass LuxuryTravel extends TravelAgency {\n  override def itinerary(): String = {\n    \"Luxury itinerary with exclusive experiences.\"\n  }\n  \n  override def bookings(): String = {\n    \"Premium bookings with first-class accommodations.\"\n  }\n}\n```"
  },
  {
    "task": "Develop a superclass for an educational tool with methods for teaching and assessment, then extend it with a math tool subclass that overrides these methods for problem-solving.",
    "code": "```scala\n// Superclass for an educational tool\nabstract class EducationalTool {\n  def teach(): Unit\n  def assess(): Unit\n}\n\n// Subclass for a math tool\nclass MathTool extends EducationalTool {\n  override def teach(): Unit = {\n    println(\"Teaching math concepts and problem-solving techniques.\")\n  }\n\n  override def assess(): Unit = {\n    println(\"Assessing math problem-solving skills.\")\n  }\n}\n\n// Usage example\nobject Main extends App {\n  val mathTool = new MathTool\n  mathTool.teach()\n  mathTool.assess()\n}\n```"
  },
  {
    "task": "Implement a base class for a community project with methods for planning and execution, then create a park renovation subclass that overrides these methods for landscaping.",
    "code": "```scala\n// Base class for community project\nabstract class CommunityProject {\n  def plan(): String\n  def execute(): String\n}\n\n// Subclass for park renovation\nclass ParkRenovation extends CommunityProject {\n  override def plan(): String = {\n    \"Planning the park renovation with landscaping focus.\"\n  }\n\n  override def execute(): String = {\n    \"Executing the park renovation with landscaping activities.\"\n  }\n}\n\n// Example usage\nobject Main extends App {\n  val project: CommunityProject = new ParkRenovation\n  println(project.plan())\n  println(project.execute())\n}\n```"
  },
  {
    "task": "Construct a parent class for a digital marketing strategy with methods for targeting and engagement, then derive a social media strategy class that overrides these methods for platforms.",
    "code": "```scala\n// Parent class for a digital marketing strategy\nabstract class DigitalMarketingStrategy {\n  def targeting(): String = {\n    \"General targeting strategy\"\n  }\n\n  def engagement(): String = {\n    \"General engagement strategy\"\n  }\n}\n\n// Derived class for a social media strategy\nclass SocialMediaStrategy extends DigitalMarketingStrategy {\n  override def targeting(): String = {\n    \"Targeting strategy specific to social media platforms\"\n  }\n\n  override def engagement(): String = {\n    \"Engagement strategy specific to social media platforms\"\n  }\n}\n\n// Example usage\nobject StrategyExample {\n  def main(args: Array[String]): Unit = {\n    val strategy: DigitalMarketingStrategy = new SocialMediaStrategy()\n    println(strategy.targeting())\n    println(strategy.engagement())\n  }\n}\n```"
  },
  {
    "task": "Set up a base class for a scientific publication with methods for research and review, and extend it with a journal article subclass that overrides these methods for peer review.",
    "code": "```scala\nabstract class ScientificPublication {\n  def research(): String\n  def review(): String\n}\n\nclass JournalArticle extends ScientificPublication {\n  override def research(): String = \"Conducting detailed research for a journal article.\"\n  override def review(): String = \"Performing peer review for a journal article.\"\n}\n```"
  },
  {
    "task": "Create a foundational class for a software module with properties like name and dependencies, and derive a user interface module class that overrides the dependencies property for UI libraries.",
    "code": "```scala\nclass Module(val name: String, val dependencies: List[String])\n\nclass UserInterfaceModule(name: String, override val dependencies: List[String] = List(\"UI Library 1\", \"UI Library 2\")) \n  extends Module(name, dependencies)\n```"
  },
  {
    "task": "Design a base class for a fashion line with methods for design and production, then create a summer collection subclass that overrides these methods for seasonal trends.",
    "code": "```scala\nabstract class FashionLine {\n  def design(): String\n  def production(): String\n}\n\nclass SummerCollection extends FashionLine {\n  override def design(): String = {\n    \"Designing summer collection with light fabrics and bright colors.\"\n  }\n\n  override def production(): String = {\n    \"Producing summer collection with emphasis on breathability and comfort.\"\n  }\n}\n\n// Example usage\nval summerCollection = new SummerCollection()\nprintln(summerCollection.design())\nprintln(summerCollection.production())\n```"
  },
  {
    "task": "Develop a superclass for a family tree with methods for ancestry and descendants, then extend it with a royal lineage subclass that overrides these methods for historical accuracy.",
    "code": "```scala\nclass FamilyTree {\n  def ancestry(person: String): List[String] = {\n    // Return a list of ancestors for the given person\n    List()\n  }\n\n  def descendants(person: String): List[String] = {\n    // Return a list of descendants for the given person\n    List()\n  }\n}\n\nclass RoyalLineage extends FamilyTree {\n  override def ancestry(person: String): List[String] = {\n    // Return a historically accurate list of ancestors for the given royal person\n    List()\n  }\n\n  override def descendants(person: String): List[String] = {\n    // Return a historically accurate list of descendants for the given royal person\n    List()\n  }\n}\n```"
  },
  {
    "task": "Implement a base class for a musical score with methods for composition and arrangement, then create a symphony subclass that overrides these methods for orchestration.",
    "code": "```scala\nabstract class MusicalScore {\n  def composition(): String\n  def arrangement(): String\n}\n\nclass Symphony extends MusicalScore {\n  override def composition(): String = {\n    \"Symphony composition\"\n  }\n  \n  override def arrangement(): String = {\n    \"Symphony arrangement\"\n  }\n}\n\nobject Main extends App {\n  val symphony = new Symphony\n  println(symphony.composition())\n  println(symphony.arrangement())\n}\n```"
  },
  {
    "task": "Construct a parent class for a historical record with methods for events and dates, then derive a war history class that overrides these methods for battles.",
    "code": "```scala\nclass HistoricalRecord {\n  def events: String = \"General historical events\"\n  def dates: String = \"General historical dates\"\n}\n\nclass WarHistory extends HistoricalRecord {\n  override def events: String = \"Battle events\"\n  override def dates: String = \"Battle dates\"\n}\n```"
  },
  {
    "task": "Set up a base class for a pet adoption service with methods for application and approval, and extend it with a dog adoption subclass that overrides these methods for breed compatibility.",
    "code": "```scala\n// Base class for pet adoption service\nclass PetAdoptionService {\n  def applyForAdoption(petType: String): String = {\n    s\"Application submitted for a $petType.\"\n  }\n\n  def approveAdoption(petType: String): String = {\n    s\"Application approved for $petType adoption.\"\n  }\n}\n\n// Subclass for dog adoption with breed compatibility checks\nclass DogAdoptionService extends PetAdoptionService {\n  override def applyForAdoption(petType: String): String = {\n    if (petType.toLowerCase == \"dog\") {\n      \"Application submitted for a dog.\"\n    } else {\n      \"Application submitted for the wrong pet type.\"\n    }\n  }\n\n  override def approveAdoption(petType: String): String = {\n    if (petType.toLowerCase == \"dog\") {\n      \"Application approved for dog adoption with breed compatibility checked.\"\n    } else {\n      \"Approval denied due to breed incompatibility.\"\n    }\n  }\n}\n```"
  },
  {
    "task": "Create a foundational class for a financial report with properties like fiscal year and summary, and derive an annual report class that overrides the fiscal year property for yearly data.",
    "code": "```scala\nclass FinancialReport(val fiscalYear: String, val summary: String)\n\nclass AnnualReport(override val fiscalYear: String, summary: String) extends FinancialReport(fiscalYear, summary)\n```"
  },
  {
    "task": "Design a base class for a movie franchise with methods for casting and production, then create a sequel subclass that overrides these methods for continuity.",
    "code": "```scala\n// Base class for the movie franchise\nabstract class MovieFranchise {\n  def casting(): String\n  def production(): String\n}\n\n// Subclass for the sequel\nclass MovieSequel extends MovieFranchise {\n  override def casting(): String = {\n    \"Casting for the sequel with original actors and new additions.\"\n  }\n  \n  override def production(): String = {\n    \"Production for the sequel maintaining continuity with enhanced visuals.\"\n  }\n}\n\n// Example usage\nobject Main extends App {\n  val sequel = new MovieSequel\n  println(sequel.casting())\n  println(sequel.production())\n}\n```"
  },
  {
    "task": "Develop a superclass for a real estate listing with methods for pricing and description, then extend it with a luxury listing subclass that overrides these methods for high-end features.",
    "code": "```scala\n// Superclass for a real estate listing\nabstract class RealEstateListing {\n  def pricing: String\n  def description: String\n}\n\n// Subclass for a luxury listing\nclass LuxuryListing extends RealEstateListing {\n  override def pricing: String = \"Price upon request for luxury features.\"\n  override def description: String = \"Luxury listing with high-end amenities and features.\"\n}\n\n// Example usage\nobject RealEstateApp extends App {\n  val luxuryListing = new LuxuryListing\n  println(luxuryListing.pricing)\n  println(luxuryListing.description)\n}\n```"
  },
  {
    "task": "Implement a base class for a mobile app with methods for user interface and performance, then create a gaming app subclass that overrides these methods for graphics and speed.",
    "code": "```scala\n// Base class for a mobile app\nclass MobileApp {\n  def userInterface(): String = {\n    \"Standard User Interface\"\n  }\n\n  def performance(): String = {\n    \"Standard Performance\"\n  }\n}\n\n// Subclass for a gaming app\nclass GamingApp extends MobileApp {\n  override def userInterface(): String = {\n    \"Enhanced Gaming Graphics Interface\"\n  }\n\n  override def performance(): String = {\n    \"High-Speed Performance\"\n  }\n}\n\n// Example usage\nobject AppDemo {\n  def main(args: Array[String]): Unit = {\n    val gameApp = new GamingApp\n    println(gameApp.userInterface())  // Output: Enhanced Gaming Graphics Interface\n    println(gameApp.performance())    // Output: High-Speed Performance\n  }\n}\n```"
  },
  {
    "task": "Construct a parent class for a corporate policy with methods for compliance and enforcement, then derive an HR policy class that overrides these methods for employee relations.",
    "code": "```scala\n// Parent class for corporate policy\nabstract class CorporatePolicy {\n  def compliance(): String = {\n    \"Corporate compliance guidelines.\"\n  }\n\n  def enforcement(): String = {\n    \"Corporate enforcement mechanisms.\"\n  }\n}\n\n// Derived HR policy class\nclass HRPolicy extends CorporatePolicy {\n  override def compliance(): String = {\n    \"HR compliance guidelines for employee relations.\"\n  }\n\n  override def enforcement(): String = {\n    \"HR enforcement mechanisms for employee relations.\"\n  }\n}\n```"
  },
  {
    "task": "Set up a base class for a scientific calculator with methods for basic operations and advanced functions, and extend it with a graphing calculator subclass that overrides these methods for plotting.",
    "code": "```scala\n// Base class for a scientific calculator\nclass ScientificCalculator {\n  def add(x: Double, y: Double): Double = x + y\n  def subtract(x: Double, y: Double): Double = x - y\n  def multiply(x: Double, y: Double): Double = x * y\n  def divide(x: Double, y: Double): Double = x / y\n\n  def sin(x: Double): Double = math.sin(x)\n  def cos(x: Double): Double = math.cos(x)\n  def tan(x: Double): Double = math.tan(x)\n  def log(x: Double): Double = math.log(x)\n}\n\n// Subclass for a graphing calculator\nclass GraphingCalculator extends ScientificCalculator {\n  override def add(x: Double, y: Double): Double = {\n    plot(\"add\", x, y)\n    super.add(x, y)\n  }\n\n  override def subtract(x: Double, y: Double): Double = {\n    plot(\"subtract\", x, y)\n    super.subtract(x, y)\n  }\n\n  override def multiply(x: Double, y: Double): Double = {\n    plot(\"multiply\", x, y)\n    super.multiply(x, y)\n  }\n\n  override def divide(x: Double, y: Double): Double = {\n    plot(\"divide\", x, y)\n    super.divide(x, y)\n  }\n\n  override def sin(x: Double): Double = {\n    plot(\"sin\", x)\n    super.sin(x)\n  }\n\n  override def cos(x: Double): Double = {\n    plot(\"cos\", x)\n    super.cos(x)\n  }\n\n  override def tan(x: Double): Double = {\n    plot(\"tan\", x)\n    super.tan(x)\n  }\n\n  override def log(x: Double): Double = {\n    plot(\"log\", x)\n    super.log(x)\n  }\n\n  private def plot(operation: String, values: Double*): Unit = {\n    println(s\"Plotting $operation with values: ${values.mkString(\", \")}\")\n  }\n}\n```"
  },
  {
    "task": "Create a foundational class for a children's book with properties like age group and illustrations, and derive a picture book class that overrides the illustrations property to be more prominent.",
    "code": "```scala\nclass ChildrensBook(val ageGroup: String, val illustrations: String)\n\nclass PictureBook(ageGroup: String, override val illustrations: String) \n  extends ChildrensBook(ageGroup, illustrations) {\n  override def toString: String = s\"PictureBook(ageGroup: $ageGroup, illustrations: $illustrations)\"\n}\n\n// Example usage\nval book = new PictureBook(\"3-5 years\", \"Highly Illustrated\")\nprintln(book)\n```"
  },
  {
    "task": "Design a base class for a cooking class with methods for ingredients and techniques, then create a baking class subclass that overrides these methods for dough preparation.",
    "code": "```scala\n// Base class for a cooking class\nabstract class CookingClass {\n  def ingredients(): String\n  def techniques(): String\n}\n\n// Subclass for a baking class\nclass BakingClass extends CookingClass {\n  override def ingredients(): String = {\n    \"Flour, Water, Yeast, Salt\"\n  }\n\n  override def techniques(): String = {\n    \"Kneading, Fermenting, Baking\"\n  }\n}\n\n// Usage example\nval baking = new BakingClass()\nprintln(baking.ingredients())\nprintln(baking.techniques())\n```"
  },
  {
    "task": "Develop a superclass for a public transportation system with methods for routes and schedules, then extend it with a metro system subclass that overrides these methods for urban areas.",
    "code": "```scala\n// Superclass for public transportation system\nabstract class PublicTransportationSystem {\n  def getRoutes: List[String]\n  def getSchedules: Map[String, String]\n}\n\n// Subclass for metro system\nclass MetroSystem extends PublicTransportationSystem {\n  override def getRoutes: List[String] = List(\"Route A\", \"Route B\", \"Route C\")\n  \n  override def getSchedules: Map[String, String] = Map(\n    \"Route A\" -> \"06:00 AM - 10:00 PM\",\n    \"Route B\" -> \"06:30 AM - 09:30 PM\",\n    \"Route C\" -> \"07:00 AM - 08:00 PM\"\n  )\n}\n```"
  },
  {
    "task": "Implement a base class for a music store inventory with methods for stock and sales, then create a vinyl record subclass that overrides these methods for collectible items.",
    "code": "```scala\nabstract class MusicStoreInventory {\n  def stock(item: String, quantity: Int): Unit\n  def sales(item: String, quantity: Int): Unit\n}\n\nclass VinylRecord extends MusicStoreInventory {\n  override def stock(item: String, quantity: Int): Unit = {\n    println(s\"Stocking $quantity collectible $item vinyl records.\")\n  }\n\n  override def sales(item: String, quantity: Int): Unit = {\n    println(s\"Selling $quantity collectible $item vinyl records.\")\n  }\n}\n```"
  },
  {
    "task": "Construct a parent class for a legal contract with methods for terms and conditions, then derive a rental agreement class that overrides these methods for tenant rights.",
    "code": "```scala\n// Parent class for a legal contract\nabstract class LegalContract {\n  def termsAndConditions(): String\n}\n\n// Derived class for a rental agreement\nclass RentalAgreement extends LegalContract {\n  override def termsAndConditions(): String = {\n    \"Terms and conditions specific to tenant rights.\"\n  }\n}\n\n// Example usage\nobject Main extends App {\n  val rentalAgreement = new RentalAgreement()\n  println(rentalAgreement.termsAndConditions())\n}\n```"
  },
  {
    "task": "Set up a base class for a journalism piece with methods for reporting and editing, and extend it with an investigative article subclass that overrides these methods for in-depth analysis.",
    "code": "```scala\nabstract class JournalismPiece {\n  def report(): String\n  def edit(): String\n}\n\nclass InvestigativeArticle extends JournalismPiece {\n  override def report(): String = \"Reporting with in-depth analysis and extensive research.\"\n  override def edit(): String = \"Editing with fact-checking and detailed scrutiny.\"\n}\n```"
  },
  {
    "task": "Create a foundational class for a wildlife reserve with properties like area and species, and derive a bird sanctuary class that overrides the species property for avians.",
    "code": "```scala\nclass WildlifeReserve(val area: Double, val species: String)\n\nclass BirdSanctuary(area: Double) extends WildlifeReserve(area, \"Avians\")\n```"
  },
  {
    "task": "Design a base class for a subscription box service with methods for curation and delivery, then create a gourmet food box subclass that overrides these methods for artisanal products.",
    "code": "```scala\n// Base class representing a subscription box service\nabstract class SubscriptionBox {\n  def curate(): String\n  def deliver(): String\n}\n\n// Subclass for gourmet food box\nclass GourmetFoodBox extends SubscriptionBox {\n  override def curate(): String = {\n    \"Curating artisanal gourmet food products.\"\n  }\n\n  override def deliver(): String = {\n    \"Delivering gourmet food box with artisanal products.\"\n  }\n}\n\n// Example usage\nobject Main extends App {\n  val gourmetBox = new GourmetFoodBox\n  println(gourmetBox.curate())\n  println(gourmetBox.deliver())\n}\n```"
  },
  {
    "task": "Develop a superclass for a fitness app with methods for tracking and motivation, then extend it with a running app subclass that overrides these methods for pace and distance.",
    "code": "```scala\n// Superclass for a fitness app\nabstract class FitnessApp {\n  def track(): String\n  def motivate(): String\n}\n\n// Subclass for a running app\nclass RunningApp extends FitnessApp {\n  override def track(): String = \"Tracking pace and distance for your run.\"\n  override def motivate(): String = \"Keep running! You're doing great!\"\n}\n\n// Example usage\nobject Main extends App {\n  val app: FitnessApp = new RunningApp\n  println(app.track())\n  println(app.motivate())\n}\n```"
  },
  {
    "task": "Implement a base class for a digital portfolio with methods for showcasing and updating, then create an artist portfolio subclass that overrides these methods for galleries.",
    "code": "```scala\n// Base class for a digital portfolio\nabstract class DigitalPortfolio {\n  def showcase(): Unit\n  def update(): Unit\n}\n\n// Artist portfolio subclass\nclass ArtistPortfolio extends DigitalPortfolio {\n  override def showcase(): Unit = {\n    println(\"Showcasing artist galleries\")\n  }\n\n  override def update(): Unit = {\n    println(\"Updating artist portfolio\")\n  }\n}\n```"
  },
  {
    "task": "Construct a parent class for a gaming console with methods for performance and compatibility, then derive a next-gen console class that overrides these methods for new features.",
    "code": "```scala\n// Parent class for a gaming console\nclass GamingConsole {\n  def performance(): String = {\n    \"Standard performance\"\n  }\n\n  def compatibility(): String = {\n    \"Compatible with previous generation games\"\n  }\n}\n\n// Derived next-gen console class\nclass NextGenConsole extends GamingConsole {\n  override def performance(): String = {\n    \"Enhanced performance with ray tracing and 4K support\"\n  }\n\n  override def compatibility(): String = {\n    \"Backward compatibility with all previous generation games\"\n  }\n}\n```"
  },
  {
    "task": "Set up a base class for a cultural festival with methods for events and participation, and extend it with a music festival subclass that overrides these methods for performances.",
    "code": "```scala\n// Base class for a cultural festival\nclass CulturalFestival {\n  def events(): String = {\n    \"General cultural events are happening.\"\n  }\n\n  def participation(): String = {\n    \"Everyone is welcome to participate in the cultural festival.\"\n  }\n}\n\n// Subclass for a music festival\nclass MusicFestival extends CulturalFestival {\n  override def events(): String = {\n    \"Live music performances are scheduled.\"\n  }\n\n  override def participation(): String = {\n    \"Musicians and music enthusiasts are invited to join the music festival.\"\n  }\n}\n\n// Example usage\nobject FestivalApp extends App {\n  val culturalFest = new CulturalFestival\n  println(culturalFest.events())\n  println(culturalFest.participation())\n\n  val musicFest = new MusicFestival\n  println(musicFest.events())\n  println(musicFest.participation())\n}\n```"
  }
]