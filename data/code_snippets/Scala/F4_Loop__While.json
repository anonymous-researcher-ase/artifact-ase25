[
  {
    "task": "Create a program that continuously asks the user to enter a number until they input a negative number.",
    "code": "```scala\nimport scala.io.StdIn.readLine\n\nobject Main {\n  def main(args: Array[String]): Unit = {\n    var number = 0\n    while (number >= 0) {\n      print(\"Enter a number: \")\n      number = readLine().toInt\n    }\n  }\n}\n```"
  },
  {
    "task": "Write a function that doubles a number and repeats the process until the number is greater than 1000.",
    "code": "```scala\ndef doubleUntilGreaterThan1000(n: Int): Int = {\n  var number = n\n  while (number <= 1000) {\n    number *= 2\n  }\n  number\n}\n```"
  },
  {
    "task": "Develop a routine to keep printing 'Hello, World!' until a counter reaches 10.",
    "code": "```scala\nobject HelloWorldLoop {\n  def main(args: Array[String]): Unit = {\n    var counter = 0\n    while (counter < 10) {\n      println(\"Hello, World!\")\n      counter += 1\n    }\n  }\n}\n```"
  },
  {
    "task": "Construct a loop that checks if a randomly generated number is even, repeating until an odd number is found.",
    "code": "```scala\nimport scala.util.Random\n\nval random = new Random()\nvar number = random.nextInt()\n\nwhile (number % 2 == 0) {\n  number = random.nextInt()\n}\n```"
  },
  {
    "task": "Design a countdown timer that prints each second until it reaches zero.",
    "code": "```scala\nobject CountdownTimer {\n  def main(args: Array[String]): Unit = {\n    var timeLeft = 10 // Set the countdown start time here\n    while (timeLeft >= 0) {\n      println(timeLeft)\n      Thread.sleep(1000) // Pause for 1 second\n      timeLeft -= 1\n    }\n  }\n}\n```"
  },
  {
    "task": "Implement a system where a user can keep adding items to a list until they type 'stop'.",
    "code": "```scala\nimport scala.io.StdIn.readLine\n\nobject AddItemsToList {\n  def main(args: Array[String]): Unit = {\n    var items = List[String]()\n    var input = \"\"\n\n    while (input != \"stop\") {\n      println(\"Enter an item (or type 'stop' to finish):\")\n      input = readLine()\n      if (input != \"stop\") {\n        items = items :+ input\n      }\n    }\n\n    println(\"Items in the list:\")\n    items.foreach(println)\n  }\n}\n```"
  },
  {
    "task": "Write a script that simulates rolling a die and continues until a six is rolled.",
    "code": "```scala\nimport scala.util.Random\n\nobject RollDice extends App {\n  val random = new Random\n  var roll = 0\n\n  while (roll != 6) {\n    roll = random.nextInt(6) + 1\n    println(s\"Rolled: $roll\")\n  }\n}\n```"
  },
  {
    "task": "Create a program that asks for a password and keeps prompting until the correct password is entered.",
    "code": "```scala\nimport scala.io.StdIn.readLine\n\nobject PasswordChecker {\n  def main(args: Array[String]): Unit = {\n    val correctPassword = \"secret\"\n    var enteredPassword = \"\"\n\n    while (enteredPassword != correctPassword) {\n      print(\"Enter password: \")\n      enteredPassword = readLine()\n    }\n\n    println(\"Access granted.\")\n  }\n}\n```"
  },
  {
    "task": "Design a loop that calculates the sum of entered numbers until the user enters zero.",
    "code": "```scala\nimport scala.io.StdIn._\n\nobject SumUntilZero {\n  def main(args: Array[String]): Unit = {\n    var sum = 0\n    var input = -1\n\n    while (input != 0) {\n      print(\"Enter a number (0 to stop): \")\n      input = readInt()\n      sum += input\n    }\n\n    println(s\"Total sum: $sum\")\n  }\n}\n```"
  },
  {
    "task": "Implement a feature that prints Fibonacci numbers until a number exceeds 100.",
    "code": "```scala\nobject FibonacciPrinter extends App {\n  var a = 0\n  var b = 1\n  while (a <= 100) {\n    println(a)\n    val next = a + b\n    a = b\n    b = next\n  }\n}\n```"
  },
  {
    "task": "Develop a loop that keeps halving a number until it becomes less than one.",
    "code": "```scala\nvar number = 100.0\nwhile (number >= 1) {\n  number /= 2\n}\n```"
  },
  {
    "task": "Write a program that asks for names and keeps storing them until the user enters 'done'.",
    "code": "```scala\nimport scala.io.StdIn.readLine\n\nobject NameCollector {\n  def main(args: Array[String]): Unit = {\n    var names = List[String]()\n    var input = \"\"\n    \n    while (input != \"done\") {\n      input = readLine(\"Enter a name (or 'done' to finish): \")\n      if (input != \"done\") {\n        names = names :+ input\n      }\n    }\n    \n    println(\"Collected names: \" + names.mkString(\", \"))\n  }\n}\n```"
  },
  {
    "task": "Create a process that keeps flipping a coin, recording results until there have been five heads.",
    "code": "```scala\nobject CoinFlip {\n  def main(args: Array[String]): Unit = {\n    var headsCount = 0\n    val random = new scala.util.Random\n\n    while (headsCount < 5) {\n      val flip = random.nextBoolean() // true for heads, false for tails\n      if (flip) {\n        headsCount += 1\n      }\n      println(s\"Flip result: ${if (flip) \"Heads\" else \"Tails\"}\")\n    }\n    println(\"Reached five heads!\")\n  }\n}\n```"
  },
  {
    "task": "Implement a countdown that decreases by two each time, starting from 20, until it reaches zero.",
    "code": "```scala\nvar number = 20\nwhile (number >= 0) {\n  println(number)\n  number -= 2\n}\n```"
  },
  {
    "task": "Design a solution that repeatedly asks for user input and repeats it back until they type 'exit'.",
    "code": "```scala\nimport scala.io.StdIn\n\nvar input = \"\"\nwhile (input != \"exit\") {\n  input = StdIn.readLine(\"Enter something (type 'exit' to quit): \")\n  if (input != \"exit\") {\n    println(s\"You entered: $input\")\n  }\n}\n```"
  },
  {
    "task": "Develop a loop to simulate a bank account balance, repeatedly deducting a fee until the balance is below zero.",
    "code": "```scala\nobject BankAccountSimulation {\n  def main(args: Array[String]): Unit = {\n    var balance: Double = 100.0 // Initial balance\n    val fee: Double = 10.0 // Fee to deduct\n\n    while (balance >= 0) {\n      balance -= fee\n      println(s\"Current balance: $$balance\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Create a sequence generator that multiplies a number by three each time until it reaches or exceeds 100.",
    "code": "```scala\nobject SequenceGenerator {\n  def main(args: Array[String]): Unit = {\n    var number = 1\n    while (number < 100) {\n      println(number)\n      number *= 3\n    }\n  }\n}\n```"
  },
  {
    "task": "Write a program that keeps generating random numbers between 1 and 10 until it gets a five.",
    "code": "```scala\nimport scala.util.Random\n\nobject RandomUntilFive extends App {\n  val random = new Random\n  var number = 0\n\n  while (number != 5) {\n    number = random.nextInt(10) + 1\n    println(number)\n  }\n}\n```"
  },
  {
    "task": "Implement a system to keep checking the temperature and only stop when it falls below freezing.",
    "code": "```scala\nobject TemperatureChecker {\n  def main(args: Array[String]): Unit = {\n    var temperature = 10 // Initial temperature value\n\n    while (temperature >= 0) {\n      println(s\"Current temperature: $temperature\u00b0C\")\n      // Simulate temperature drop\n      temperature -= 1\n    }\n\n    println(\"Temperature has fallen below freezing.\")\n  }\n}\n```"
  },
  {
    "task": "Construct a quiz game that continues asking questions until the player answers incorrectly.",
    "code": "```scala\nobject QuizGame {\n  def main(args: Array[String]): Unit = {\n    val questionsAndAnswers = Map(\n      \"What is the capital of France?\" -> \"Paris\",\n      \"What is 2 + 2?\" -> \"4\",\n      \"What is the largest planet in our solar system?\" -> \"Jupiter\"\n    )\n\n    val iter = questionsAndAnswers.iterator\n    var correct = true\n\n    while (iter.hasNext && correct) {\n      val (question, answer) = iter.next()\n      println(question)\n      val userAnswer = scala.io.StdIn.readLine()\n\n      if (userAnswer != answer) {\n        println(\"Incorrect answer. Game over.\")\n        correct = false\n      } else {\n        println(\"Correct!\")\n      }\n    }\n\n    if (correct) {\n      println(\"Congratulations! You answered all questions correctly.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Write a function that calculates factorials of a number, repeating the process for numbers 1 through 5.",
    "code": "```scala\ndef factorial(n: Int): Int = {\n  var result = 1\n  var i = n\n  while (i > 0) {\n    result *= i\n    i -= 1\n  }\n  result\n}\n\nvar num = 1\nwhile (num <= 5) {\n  println(s\"Factorial of $num is ${factorial(num)}\")\n  num += 1\n}\n```"
  },
  {
    "task": "Create a loop that prints all even numbers between 1 and 50.",
    "code": "```scala\nvar number = 2\nwhile (number <= 50) {\n  println(number)\n  number += 2\n}\n```"
  },
  {
    "task": "Design a program that continuously asks for user input until a palindrome is entered.",
    "code": "```scala\nobject PalindromeChecker extends App {\n  def isPalindrome(s: String): Boolean = s == s.reverse\n\n  var input = \"\"\n  while (!isPalindrome(input)) {\n    println(\"Enter a palindrome:\")\n    input = scala.io.StdIn.readLine()\n  }\n  println(\"You entered a palindrome!\")\n}\n```"
  },
  {
    "task": "Implement a countdown that decreases by one each second, starting from 100.",
    "code": "```scala\nimport scala.concurrent.duration._\nimport scala.concurrent._\nimport ExecutionContext.Implicits.global\n\ndef countdown(start: Int): Unit = {\n  var count = start\n  while (count >= 0) {\n    println(count)\n    count -= 1\n    Thread.sleep(1000)\n  }\n}\n\ncountdown(100)\n```"
  },
  {
    "task": "Write a script that repeatedly asks for a number and adds it to a total until the total exceeds 500.",
    "code": "```scala\nimport scala.io.StdIn.readLine\n\nobject TotalExceeds500 {\n  def main(args: Array[String]): Unit = {\n    var total = 0\n    while (total <= 500) {\n      print(\"Enter a number: \")\n      val number = readLine().toInt\n      total += number\n    }\n    println(s\"Total exceeded 500: $total\")\n  }\n}\n\nTotalExceeds500.main(Array())\n```"
  },
  {
    "task": "Create a loop that generates random letters until the letter 'Z' appears.",
    "code": "```scala\nimport scala.util.Random\n\nobject RandomLetterGenerator extends App {\n  val random = new Random()\n  var letter = ' '\n\n  while (letter != 'Z') {\n    letter = (random.nextInt(26) + 'A').toChar\n    println(letter)\n  }\n}\n```"
  },
  {
    "task": "Write a process that continues prompting for two numbers and prints their sum if it's even.",
    "code": "```scala\nobject SumEvenChecker extends App {\n  import scala.io.StdIn.readLine\n\n  var continue = true\n  while (continue) {\n    val num1 = readLine(\"Enter first number: \").toInt\n    val num2 = readLine(\"Enter second number: \").toInt\n    val sum = num1 + num2\n    if (sum % 2 == 0) {\n      println(s\"The sum of $num1 and $num2 is even: $sum\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Develop a loop that simulates a traffic light sequence until a manual stop command is received.",
    "code": "```scala\nobject TrafficLightSimulator {\n  def main(args: Array[String]): Unit = {\n    var command = \"\"\n    val trafficLightSequence = Array(\"Red\", \"Green\", \"Yellow\")\n    var index = 0\n\n    while (command != \"stop\") {\n      println(s\"Traffic Light: ${trafficLightSequence(index)}\")\n      index = (index + 1) % trafficLightSequence.length\n\n      // Simulate waiting time for each light\n      Thread.sleep(1000)\n\n      // You can replace this with actual input from the user\n      // Here it's set to automatically stop after one full cycle for demonstration\n      if (index == 0) command = \"stop\"\n    }\n  }\n}\n```"
  },
  {
    "task": "Implement a feature that keeps printing numbers in reverse order starting from 10.",
    "code": "```scala\nvar number = 10\nwhile (number >= 1) {\n  println(number)\n  number -= 1\n}\n```"
  },
  {
    "task": "Create a program that rolls two dice and continues until the sum is exactly seven.",
    "code": "```scala\nimport scala.util.Random\n\nobject RollDiceUntilSeven extends App {\n  val random = new Random()\n\n  def rollDie(): Int = random.nextInt(6) + 1\n\n  var sum = 0\n  while (sum != 7) {\n    val die1 = rollDie()\n    val die2 = rollDie()\n    sum = die1 + die2\n    println(s\"Rolled: $die1 and $die2, Sum: $sum\")\n  }\n}\n```"
  },
  {
    "task": "Design a loop that keeps asking for ages and prints the average once a negative age is entered.",
    "code": "```scala\nimport scala.io.StdIn.readLine\n\nobject AverageAgeCalculator extends App {\n  var sum = 0\n  var count = 0\n  var age = 0\n\n  while (age >= 0) {\n    println(\"Enter age (negative to quit):\")\n    age = readLine().toInt\n    if (age >= 0) {\n      sum += age\n      count += 1\n    }\n  }\n\n  if (count > 0) {\n    val average = sum.toDouble / count\n    println(s\"Average age: $average\")\n  } else {\n    println(\"No valid ages entered.\")\n  }\n}\n```"
  },
  {
    "task": "Write a routine that squares numbers starting from 1 until the square is greater than 500.",
    "code": "```scala\nvar number = 1\nwhile (number * number <= 500) {\n  println(number * number)\n  number += 1\n}\n```"
  },
  {
    "task": "Implement a system to ask for a string and append it to a file until 'end' is typed.",
    "code": "```scala\nimport java.io._\n\nobject AppendToFile {\n  def main(args: Array[String]): Unit = {\n    val writer = new BufferedWriter(new FileWriter(\"output.txt\", true))\n    var input = \"\"\n\n    while (input != \"end\") {\n      print(\"Enter a string (type 'end' to finish): \")\n      input = scala.io.StdIn.readLine()\n      if (input != \"end\") {\n        writer.write(input)\n        writer.newLine()\n      }\n    }\n\n    writer.close()\n  }\n}\n```"
  },
  {
    "task": "Create a script that checks if a number is prime, repeating for each number entered by the user.",
    "code": "```scala\nimport scala.io.StdIn.readLine\n\ndef isPrime(n: Int): Boolean = {\n  if (n <= 1) false\n  else if (n == 2) true\n  else if (n % 2 == 0) false\n  else {\n    var i = 3\n    while (i * i <= n) {\n      if (n % i == 0) return false\n      i += 2\n    }\n    true\n  }\n}\n\nvar continue = true\nwhile (continue) {\n  val input = readLine(\"Enter a number (or type 'exit' to quit): \")\n  if (input.toLowerCase == \"exit\") {\n    continue = false\n  } else {\n    try {\n      val number = input.toInt\n      if (isPrime(number)) println(s\"$number is a prime number.\")\n      else println(s\"$number is not a prime number.\")\n    } catch {\n      case _: NumberFormatException => println(\"Please enter a valid number.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Develop a countdown that prints numbers starting from 50 down to 1.",
    "code": "```scala\nvar number = 50\nwhile (number >= 1) {\n  println(number)\n  number -= 1\n}\n```"
  },
  {
    "task": "Write a program that keeps doubling the value of a variable until it exceeds 200.",
    "code": "```scala\nobject DoubleUntilExceeds200 {\n  def main(args: Array[String]): Unit = {\n    var value = 1\n    while (value <= 200) {\n      value *= 2\n    }\n    println(s\"Final value: $value\")\n  }\n}\n```"
  },
  {
    "task": "Design a loop that keeps generating a random string of letters until a specific word is formed.",
    "code": "```scala\nimport scala.util.Random\n\nobject RandomStringGenerator extends App {\n  val targetWord = \"hello\"\n  val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\n  def generateRandomString(length: Int): String = {\n    val sb = new StringBuilder(length)\n    for (_ <- 1 to length) {\n      sb.append(alphabet(Random.nextInt(alphabet.length)))\n    }\n    sb.toString()\n  }\n\n  var randomString = \"\"\n  while (randomString != targetWord) {\n    randomString = generateRandomString(targetWord.length)\n    println(s\"Generated: $randomString\")\n  }\n  println(s\"Target word '$targetWord' formed!\")\n}\n```"
  },
  {
    "task": "Implement a system that continuously fetches data from a sensor until a threshold is crossed.",
    "code": "```scala\nobject SensorSystem {\n  def main(args: Array[String]): Unit = {\n    val threshold = 100\n    var sensorValue = 0\n\n    while (sensorValue <= threshold) {\n      sensorValue = fetchDataFromSensor()\n      println(s\"Current sensor value: $sensorValue\")\n    }\n\n    println(\"Threshold crossed. Stopping data fetch.\")\n  }\n\n  def fetchDataFromSensor(): Int = {\n    // Replace with actual sensor data fetching logic\n    scala.util.Random.nextInt(150)\n  }\n}\n```"
  },
  {
    "task": "Create a game where a player guesses a number, and the game continues until the player guesses correctly.",
    "code": "```scala\nimport scala.io.StdIn._\n\nobject NumberGuessingGame extends App {\n  val targetNumber = scala.util.Random.nextInt(100) + 1\n  var guessedCorrectly = false\n  \n  while (!guessedCorrectly) {\n    println(\"Guess a number between 1 and 100:\")\n    val playerGuess = readInt()\n    \n    if (playerGuess == targetNumber) {\n      println(\"Congratulations! You've guessed the correct number.\")\n      guessedCorrectly = true\n    } else {\n      println(\"Wrong guess, try again!\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Write a loop that continues to add random numbers to a list until the list has 10 even numbers.",
    "code": "```scala\nimport scala.util.Random\n\nobject RandomEvenNumbers {\n  def main(args: Array[String]): Unit = {\n    val random = new Random()\n    var evenNumbers = List[Int]()\n\n    while (evenNumbers.size < 10) {\n      val num = random.nextInt()\n      if (num % 2 == 0) {\n        evenNumbers = num :: evenNumbers\n      }\n    }\n\n    println(evenNumbers)\n  }\n}\n```"
  },
  {
    "task": "Design a routine that keeps removing elements from a list until it is empty.",
    "code": "```scala\nobject ListRemover {\n  def removeAllElements(list: List[Int]): List[Int] = {\n    var mutableList = list\n    while (mutableList.nonEmpty) {\n      mutableList = mutableList.tail\n    }\n    mutableList\n  }\n}\n```"
  },
  {
    "task": "Implement a sequence that prints the alphabet repeatedly until interrupted by the user.",
    "code": "```scala\nobject AlphabetLoop {\n  def main(args: Array[String]): Unit = {\n    val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    while (true) {\n      alphabet.foreach(print)\n    }\n  }\n}\n```"
  },
  {
    "task": "Create a program that continuously checks for updates and stops once an update is available.",
    "code": "```scala\nobject UpdateChecker {\n  def main(args: Array[String]): Unit = {\n    var updateAvailable = false\n    \n    while (!updateAvailable) {\n      updateAvailable = checkForUpdates()\n    }\n    \n    println(\"Update available!\")\n  }\n  \n  def checkForUpdates(): Boolean = {\n    // Simulate checking for update\n    // For demonstration, assume an update becomes available after some condition\n    scala.util.Random.nextBoolean()\n  }\n}\n```"
  },
  {
    "task": "Write a function that keeps dividing a number by two until it results in a fractional value.",
    "code": "```scala\ndef divideUntilFractional(number: Double): Double = {\n  var result = number\n  while (result % 1 == 0) {\n    result /= 2\n  }\n  result\n}\n```"
  },
  {
    "task": "Develop a loop that keeps asking for student's grades and calculates the average until a grade of -1 is entered.",
    "code": "```scala\nimport scala.io.StdIn._\n\nvar sum = 0.0\nvar count = 0\n\nvar input = 0.0\nwhile (input != -1) {\n  println(\"Enter a grade (or -1 to finish):\")\n  input = readDouble()\n  if (input != -1) {\n    sum += input\n    count += 1\n  }\n}\n\nif (count > 0) {\n  val average = sum / count\n  println(s\"The average grade is: $average\")\n} else {\n  println(\"No grades were entered.\")\n}\n```"
  },
  {
    "task": "Design a feature that continuously monitors a file for changes and stops when no changes are detected for a minute.",
    "code": "```scala\nimport java.nio.file.{Files, Paths, StandardWatchEventKinds, WatchService}\nimport java.util.concurrent.TimeUnit\n\nobject FileMonitor {\n  def main(args: Array[String]): Unit = {\n    val path = Paths.get(\"path/to/your/file\")\n    val watchService: WatchService = path.getFileSystem.newWatchService()\n    path.getParent.register(watchService, StandardWatchEventKinds.ENTRY_MODIFY)\n\n    var lastModifiedTime = Files.getLastModifiedTime(path)\n    var noChangeDuration = 0L\n\n    while (noChangeDuration < 60000) {\n      val key = watchService.poll(1, TimeUnit.SECONDS)\n      if (key != null) {\n        val events = key.pollEvents()\n        val currentTime = Files.getLastModifiedTime(path)\n\n        if (currentTime != lastModifiedTime) {\n          lastModifiedTime = currentTime\n          noChangeDuration = 0L\n        } else {\n          noChangeDuration += 1000L\n        }\n        \n        key.reset()\n      } else {\n        noChangeDuration += 1000L\n      }\n    }\n    \n    watchService.close()\n  }\n}\n```"
  },
  {
    "task": "Implement a process where a motor runs until a certain distance is reached.",
    "code": "```scala\nobject MotorControl {\n  def main(args: Array[String]): Unit = {\n    var distance = 0\n    val targetDistance = 100 // Example target distance\n\n    while (distance < targetDistance) {\n      runMotor()\n      distance += measureDistance()\n    }\n  }\n\n  def runMotor(): Unit = {\n    // Code to run the motor\n  }\n\n  def measureDistance(): Int = {\n    // Code to measure the distance traveled\n    1 // Example distance increment\n  }\n}\n```"
  },
  {
    "task": "Create a script that keeps generating random numbers and stops when it generates a prime number.",
    "code": "```scala\nimport scala.util.Random\n\ndef isPrime(num: Int): Boolean = {\n  if (num <= 1) false\n  else if (num == 2) true\n  else !(2 until num).exists(num % _ == 0)\n}\n\nval random = new Random()\nvar foundPrime = false\n\nwhile (!foundPrime) {\n  val num = random.nextInt(100) + 1 // Generate numbers between 1 and 100\n  if (isPrime(num)) {\n    println(s\"Prime number found: $num\")\n    foundPrime = true\n  }\n}\n```"
  },
  {
    "task": "Write a program that asks for the user's favorite color and keeps asking until they say 'blue'.",
    "code": "```scala\nimport scala.io.StdIn.readLine\n\nobject FavoriteColorApp {\n  def main(args: Array[String]): Unit = {\n    var color = \"\"\n    while (color != \"blue\") {\n      println(\"What is your favorite color?\")\n      color = readLine()\n    }\n    println(\"Thank you!\")\n  }\n}\n```"
  },
  {
    "task": "Develop a loop that continuously prints the time every second until a key is pressed.",
    "code": "```scala\nimport java.time.LocalTime\nimport scala.io.StdIn.readLine\n\nobject TimePrinter extends App {\n  var continue = true\n\n  new Thread(() => {\n    readLine()\n    continue = false\n  }).start()\n\n  while (continue) {\n    println(LocalTime.now())\n    Thread.sleep(1000)\n  }\n}\n```"
  },
  {
    "task": "Create a system to keep downloading data from a server until the connection is lost.",
    "code": "```scala\nimport scala.util.Random\n\nobject DataDownloader {\n  def main(args: Array[String]): Unit = {\n    var connectionActive = true\n\n    while (connectionActive) {\n      connectionActive = downloadDataFromServer()\n    }\n  }\n\n  def downloadDataFromServer(): Boolean = {\n    // Simulate data downloading and randomly lose connection\n    println(\"Downloading data...\")\n    Thread.sleep(1000) // Simulate time delay\n    Random.nextBoolean() // Randomly returns true or false to simulate connection status\n  }\n}\n```"
  },
  {
    "task": "Write a process to keep a light on until the ambient light level is sufficient.",
    "code": "```scala\nvar lightOn = true\nvar ambientLightLevel = 0\nval sufficientLightLevel = 50\n\nwhile (lightOn) {\n  // Simulate reading the ambient light level from a sensor\n  ambientLightLevel = readAmbientLightSensor()\n\n  if (ambientLightLevel >= sufficientLightLevel) {\n    lightOn = false\n  } else {\n    turnLightOn()\n  }\n}\n\ndef readAmbientLightSensor(): Int = {\n  // Placeholder for sensor reading logic\n  scala.util.Random.nextInt(100)\n}\n\ndef turnLightOn(): Unit = {\n  println(\"Light is on\")\n}\n```"
  },
  {
    "task": "Implement a feature that continuously plays a sound until the user presses a button.",
    "code": "```scala\nimport scala.io.StdIn.readLine\n\nobject SoundPlayer {\n  def main(args: Array[String]): Unit = {\n    var playSound = true\n\n    while (playSound) {\n      // Simulate playing sound\n      println(\"Playing sound...\")\n\n      // Check if the user wants to stop\n      println(\"Press 'q' to stop the sound.\")\n      val input = readLine()\n\n      if (input.toLowerCase == \"q\") {\n        playSound = false\n      }\n    }\n\n    println(\"Sound stopped.\")\n  }\n}\n```"
  },
  {
    "task": "Design a program that keeps multiplying a matrix by itself until its determinant is greater than 1000.",
    "code": "```scala\nimport breeze.linalg._\n\nobject MatrixMultiplier {\n  def main(args: Array[String]): Unit = {\n    var matrix = DenseMatrix((1.0, 2.0), (3.0, 4.0))\n    while (det(matrix) <= 1000) {\n      matrix = matrix * matrix\n    }\n    println(matrix)\n  }\n}\n```"
  },
  {
    "task": "Create a script that keeps prompting the user to guess a word until they get it right.",
    "code": "```scala\nimport scala.io.StdIn.readLine\n\nobject GuessWordApp extends App {\n  val secretWord = \"scala\"\n  var guessedWord = \"\"\n\n  while (guessedWord != secretWord) {\n    println(\"Guess the word:\")\n    guessedWord = readLine()\n  }\n\n  println(\"Congratulations! You guessed the word.\")\n}\n```"
  },
  {
    "task": "Write a loop that simulates a car's fuel consumption and stops when the tank is empty.",
    "code": "```scala\nobject FuelConsumptionSimulator extends App {\n  var fuel = 50  // Assume the tank starts with 50 units of fuel\n\n  while (fuel > 0) {\n    println(s\"Current fuel level: $fuel units\")\n    fuel -= 5  // Simulate fuel consumption\n  }\n\n  println(\"The tank is empty.\")\n}\n```"
  },
  {
    "task": "Develop a routine that keeps checking if a file exists and stops once it does.",
    "code": "```scala\nimport java.io.File\n\ndef checkFileExists(filePath: String): Unit = {\n  while (!new File(filePath).exists()) {\n    // Optionally, you can add a sleep here to avoid busy waiting\n    Thread.sleep(1000)\n  }\n}\n\n// Example usage\ncheckFileExists(\"path/to/your/file.txt\")\n```"
  },
  {
    "task": "Implement a feature that continuously calculates the square root of a number until it's less than 0.1.",
    "code": "```scala\nimport scala.math.sqrt\n\nobject SquareRootCalculator {\n  def main(args: Array[String]): Unit = {\n    var number = 100.0 // You can set this to any initial value you'd like\n    while (number >= 0.1) {\n      number = sqrt(number)\n      println(number)\n    }\n  }\n}\n```"
  },
  {
    "task": "Create a system that prints 'Processing...' every second until a task is complete.",
    "code": "```scala\nobject TaskProcessor {\n  def main(args: Array[String]): Unit = {\n    var taskComplete = false\n\n    while (!taskComplete) {\n      println(\"Processing...\")\n      Thread.sleep(1000)\n\n      // Logic to check if the task is complete\n      // taskComplete = checkTaskCompletion() // This is a placeholder for actual completion logic\n    }\n  }\n}\n```"
  },
  {
    "task": "Write a loop that repeatedly checks the status of a process until it reports 'complete'.",
    "code": "```scala\nvar status = \"\"\nwhile (status != \"complete\") {\n  // Here you would normally check the actual process status.\n  // For this example, let's assume we have a function checkProcessStatus()\n  // that returns the status of the process as a String.\n  status = checkProcessStatus()\n}\n```"
  },
  {
    "task": "Design a routine to keep pinging a server and alert when the connection is lost.",
    "code": "```scala\nimport scala.util.{Try, Failure}\n\ndef pingServer(serverUrl: String): Boolean = {\n  // Here you would implement the actual ping logic, e.g., using a library or HTTP request\n  // For illustration, let's assume it returns true for success\n  true\n}\n\ndef alertConnectionLost(): Unit = {\n  println(\"Alert: Connection to server is lost!\")\n}\n\nval serverUrl = \"http://example.com\"\nvar isConnected = true\n\nwhile (isConnected) {\n  isConnected = Try(pingServer(serverUrl)) match {\n    case Failure(_) => false\n    case _ => true\n  }\n  \n  if (!isConnected) {\n    alertConnectionLost()\n  }\n}\n```"
  },
  {
    "task": "Implement a loop that counts down from 100 by fives until it reaches zero.",
    "code": "```scala\nvar count = 100\nwhile (count >= 0) {\n  println(count)\n  count -= 5\n}\n```"
  },
  {
    "task": "Create a script that keeps track of inventory items being added or removed until an end signal is given.",
    "code": "```scala\nobject InventoryTracker {\n  def main(args: Array[String]): Unit = {\n    var inventory = Map[String, Int]()\n    var continue = true\n\n    while (continue) {\n      println(\"Enter command (add/remove item, end to stop):\")\n      val input = scala.io.StdIn.readLine()\n      \n      input.split(\" \") match {\n        case Array(\"add\", item) =>\n          inventory = inventory.updated(item, inventory.getOrElse(item, 0) + 1)\n          println(s\"Added $item. Current count: ${inventory(item)}\")\n        \n        case Array(\"remove\", item) if inventory.contains(item) && inventory(item) > 0 =>\n          inventory = inventory.updated(item, inventory(item) - 1)\n          println(s\"Removed $item. Current count: ${inventory(item)}\")\n        \n        case Array(\"remove\", item) =>\n          println(s\"Cannot remove $item, not enough stock or item does not exist.\")\n        \n        case Array(\"end\") =>\n          continue = false\n          println(\"Ending inventory tracking.\")\n        \n        case _ =>\n          println(\"Invalid command.\")\n      }\n    }\n  }\n}\n```"
  },
  {
    "task": "Write a program that keeps calculating the power of two for numbers until a result is greater than 1000.",
    "code": "```scala\nobject PowerOfTwo {\n  def main(args: Array[String]): Unit = {\n    var n = 1\n    var result = 1\n    while (result <= 1000) {\n      result = math.pow(2, n).toInt\n      println(s\"2^$n = $result\")\n      n += 1\n    }\n  }\n}\n```"
  },
  {
    "task": "Develop a sequence that keeps appending random numbers to an array until its length is 20.",
    "code": "```scala\nimport scala.util.Random\n\nval random = new Random()\nval numbers = scala.collection.mutable.ArrayBuffer[Int]()\n\nwhile (numbers.length < 20) {\n  numbers.append(random.nextInt())\n}\n```"
  },
  {
    "task": "Implement a routine that continuously rotates an image until it matches a reference orientation.",
    "code": "```scala\nimport java.awt.image.BufferedImage\nimport java.io.File\nimport javax.imageio.ImageIO\n\ndef rotateImage(image: BufferedImage): BufferedImage = {\n  val width = image.getWidth\n  val height = image.getHeight\n  val rotatedImage = new BufferedImage(height, width, image.getType)\n  for (x <- 0 until width) {\n    for (y <- 0 until height) {\n      rotatedImage.setRGB(y, width - 1 - x, image.getRGB(x, y))\n    }\n  }\n  rotatedImage\n}\n\ndef imagesMatch(img1: BufferedImage, img2: BufferedImage): Boolean = {\n  if (img1.getWidth != img2.getWidth || img1.getHeight != img2.getHeight) {\n    return false\n  }\n  for (x <- 0 until img1.getWidth) {\n    for (y <- 0 until img1.getHeight) {\n      if (img1.getRGB(x, y) != img2.getRGB(x, y)) {\n        return false\n      }\n    }\n  }\n  true\n}\n\ndef rotateUntilMatch(sourceImagePath: String, referenceImagePath: String): Unit = {\n  val sourceImage = ImageIO.read(new File(sourceImagePath))\n  val referenceImage = ImageIO.read(new File(referenceImagePath))\n\n  var currentImage = sourceImage\n  while (!imagesMatch(currentImage, referenceImage)) {\n    currentImage = rotateImage(currentImage)\n  }\n}\n\n// Example usage\nrotateUntilMatch(\"source.png\", \"reference.png\")\n```"
  },
  {
    "task": "Design a loop that keeps printing random jokes until the user stops it.",
    "code": "```scala\nimport scala.util.Random\nimport scala.io.StdIn.readLine\n\nobject RandomJokes {\n  def main(args: Array[String]): Unit = {\n    val jokes = Array(\n      \"Why don't scientists trust atoms? Because they make up everything!\",\n      \"What do you get if you cross a cat with a dark horse? Kitty Perry.\",\n      \"Why did the scarecrow win an award? Because he was outstanding in his field!\",\n      \"Why couldn't the bicycle stand up by itself? It was two tired!\"\n    )\n\n    var continue = true\n    while (continue) {\n      val randomJoke = jokes(Random.nextInt(jokes.length))\n      println(randomJoke)\n      println(\"Do you want to hear another joke? (yes/no)\")\n      val response = readLine()\n      if (response.toLowerCase != \"yes\") {\n        continue = false\n      }\n    }\n  }\n}\n```"
  },
  {
    "task": "Create a program that accepts user feedback and continues until a positive feedback is received.",
    "code": "```scala\nimport scala.io.StdIn.readLine\n\nobject FeedbackApp {\n  def main(args: Array[String]): Unit = {\n    var feedback = \"\"\n    while (!feedback.toLowerCase.contains(\"good\") && \n           !feedback.toLowerCase.contains(\"great\") && \n           !feedback.toLowerCase.contains(\"excellent\")) {\n      println(\"Please provide your feedback:\")\n      feedback = readLine()\n    }\n    println(\"Thank you for your positive feedback!\")\n  }\n}\n```"
  },
  {
    "task": "Write a loop that repeatedly reads sensor data and stops when a stable reading is observed.",
    "code": "```scala\nvar stableReading = false\n\ndef readSensorData(): Int = {\n  // Simulate reading sensor data\n  scala.util.Random.nextInt(100)\n}\n\ndef isStable(reading: Int): Boolean = {\n  // Define your criteria for a stable reading\n  reading > 90\n}\n\nwhile (!stableReading) {\n  val reading = readSensorData()\n  stableReading = isStable(reading)\n}\n```"
  },
  {
    "task": "Develop a system that simulates a stopwatch, counting seconds until stopped manually.",
    "code": "```scala\nobject Stopwatch {\n  def main(args: Array[String]): Unit = {\n    var seconds = 0\n    var running = true\n    val startTime = System.currentTimeMillis()\n\n    while (running) {\n      if (System.currentTimeMillis() - startTime >= seconds * 1000) {\n        println(s\"Elapsed time: $seconds seconds\")\n        seconds += 1\n      }\n      if (System.in.available() > 0) {\n        running = false\n      }\n    }\n  }\n}\n```"
  },
  {
    "task": "Create a script that continues adding random integers to a sum until the sum exceeds 100.",
    "code": "```scala\nimport scala.util.Random\n\nobject SumUntilExceeds100 extends App {\n  var sum = 0\n  val random = new Random()\n\n  while (sum <= 100) {\n    sum += random.nextInt(100)\n  }\n\n  println(s\"Final sum: $sum\")\n}\n```"
  },
  {
    "task": "Implement a process to track a moving object until it stops.",
    "code": "```scala\nobject MovingObjectTracker {\n  def main(args: Array[String]): Unit = {\n    var position = 0\n    var isMoving = true\n\n    while (isMoving) {\n      // Simulate object movement\n      position += 1\n      \n      // Check if the object has stopped\n      // For this example, we'll assume it stops at position 10\n      if (position >= 10) {\n        isMoving = false\n      }\n    }\n\n    println(s\"Object stopped at position $position\")\n  }\n}\n```"
  },
  {
    "task": "Design a routine to keep checking user login attempts until a successful login occurs.",
    "code": "```scala\nimport scala.io.StdIn.readLine\n\nobject LoginRoutine {\n  def main(args: Array[String]): Unit = {\n    val correctUsername = \"user\"\n    val correctPassword = \"pass\"\n    var loginSuccessful = false\n\n    while (!loginSuccessful) {\n      println(\"Enter username:\")\n      val username = readLine()\n      println(\"Enter password:\")\n      val password = readLine()\n\n      if (username == correctUsername && password == correctPassword) {\n        loginSuccessful = true\n        println(\"Login successful!\")\n      } else {\n        println(\"Login failed, please try again.\")\n      }\n    }\n  }\n}\n```"
  },
  {
    "task": "Write a loop that repeatedly calculates the area of a circle for radii from 1 to 10.",
    "code": "```scala\nvar radius = 1\nval pi = 3.14159\n\nwhile (radius <= 10) {\n  val area = pi * radius * radius\n  println(s\"Radius: $radius, Area: $area\")\n  radius += 1\n}\n```"
  },
  {
    "task": "Create a program that continues flipping a card from a deck until an ace is drawn.",
    "code": "```scala\nimport scala.util.Random\n\nobject CardFlipper {\n  def main(args: Array[String]): Unit = {\n    val deck = List(\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\")\n    val random = new Random()\n\n    var card = \"\"\n    while (card != \"A\") {\n      card = deck(random.nextInt(deck.size))\n      println(s\"Flipped card: $card\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Develop a loop that keeps asking for a word and stores it until a word with more than five letters is entered.",
    "code": "```scala\nimport scala.io.StdIn.readLine\n\nvar words = List[String]()\nvar input = \"\"\n\nwhile (input.length <= 5) {\n  input = readLine(\"Enter a word: \")\n  if (input.length <= 5) {\n    words = words :+ input\n  }\n}\n```"
  },
  {
    "task": "Implement a feature that continuously calculates the exponential growth of a population until it doubles.",
    "code": "```scala\nobject ExponentialGrowth extends App {\n  var population = 1000.0\n  val growthRate = 0.05\n  val targetPopulation = population * 2\n\n  while (population < targetPopulation) {\n    population += population * growthRate\n  }\n\n  println(s\"Doubled population: $population\")\n}\n```"
  },
  {
    "task": "Write a script that repeats a string a certain number of times until a limit is reached.",
    "code": "```scala\nobject RepeatString {\n  def main(args: Array[String]): Unit = {\n    val inputString = \"Hello\"\n    val repeatLimit = 5\n    var count = 0\n\n    while (count < repeatLimit) {\n      println(inputString)\n      count += 1\n    }\n  }\n}\n```"
  },
  {
    "task": "Create a routine that keeps accessing an API endpoint until it returns a specific result.",
    "code": "```scala\nimport scala.concurrent.{Future, Await}\nimport scala.concurrent.ExecutionContext.Implicits.global\nimport scala.concurrent.duration._\nimport scalaj.http._\n\ndef accessApiUntilSpecificResult(endpoint: String, expectedResult: String): String = {\n  var result = \"\"\n  while (result != expectedResult) {\n    val responseFuture: Future[String] = Future {\n      Http(endpoint).asString.body\n    }\n    result = Await.result(responseFuture, 10.seconds)\n  }\n  result\n}\n\n// Example usage\nval endpoint = \"https://api.example.com/data\"\nval expectedResult = \"desiredResult\"\nval finalResult = accessApiUntilSpecificResult(endpoint, expectedResult)\nprintln(finalResult)\n```"
  },
  {
    "task": "Design a loop that continues to fetch stock prices until a certain price threshold is crossed.",
    "code": "```scala\nimport scala.util.Random\n\nobject StockPriceFetcher {\n  def main(args: Array[String]): Unit = {\n    val priceThreshold = 150.00\n    var currentPrice = 0.0\n\n    while (currentPrice <= priceThreshold) {\n      currentPrice = fetchStockPrice()\n      println(f\"Current Stock Price: $$${currentPrice}%.2f\")\n    }\n    \n    println(\"Threshold crossed!\")\n  }\n\n  def fetchStockPrice(): Double = {\n    // Simulate fetching a stock price\n    val random = new Random()\n    100.0 + random.nextDouble() * 100.0\n  }\n}\n```"
  },
  {
    "task": "Implement a process that keeps monitoring CPU usage until it drops below 10%.",
    "code": "```scala\nimport java.lang.management.ManagementFactory\nimport com.sun.management.OperatingSystemMXBean\n\nobject CPUMonitor {\n  def main(args: Array[String]): Unit = {\n    val osBean = ManagementFactory.getPlatformMXBean(classOf[OperatingSystemMXBean])\n\n    def getCpuLoad: Double = osBean.getSystemCpuLoad * 100\n\n    while (getCpuLoad >= 10) {\n      println(s\"Current CPU Load: ${getCpuLoad}%\")\n      Thread.sleep(1000)\n    }\n\n    println(\"CPU Load has dropped below 10%.\")\n  }\n}\n```"
  },
  {
    "task": "Write a program that asks for a series of numbers and prints the largest once a negative number is entered.",
    "code": "```scala\nimport scala.io.StdIn._\n\nobject LargestNumberFinder {\n  def main(args: Array[String]): Unit = {\n    var largest = Int.MinValue\n    var input = 0\n\n    while (input >= 0) {\n      print(\"Enter a number: \")\n      input = readInt()\n      if (input > largest && input >= 0) {\n        largest = input\n      }\n    }\n\n    println(s\"The largest number entered is: $largest\")\n  }\n}\n```"
  },
  {
    "task": "Develop a system that keeps a heater on until the room reaches a desired temperature.",
    "code": "```scala\nobject HeaterControl {\n  def main(args: Array[String]): Unit = {\n    var currentTemperature = 15.0 // Starting temperature\n    val desiredTemperature = 22.0 // Desired temperature\n    val heatingRate = 0.5 // Increase in temperature per loop iteration\n\n    while (currentTemperature < desiredTemperature) {\n      println(s\"Current Temperature: $currentTemperature\u00b0C - Heater is ON\")\n      currentTemperature += heatingRate\n    }\n\n    println(s\"Desired Temperature: $desiredTemperature\u00b0C reached - Heater is OFF\")\n  }\n}\n```"
  },
  {
    "task": "Create a loop that repeatedly checks if a door is open and alerts if it remains open for too long.",
    "code": "```scala\nvar doorIsOpen = true\nvar alertCounter = 0\nval alertThreshold = 5\n\nwhile (doorIsOpen) {\n  // Simulate checking if the door is still open\n  doorIsOpen = checkDoorStatus()\n  \n  if (doorIsOpen) {\n    alertCounter += 1\n    if (alertCounter >= alertThreshold) {\n      println(\"Alert: The door has been open for too long!\")\n      // Optionally break the loop or reset alertCounter\n    }\n  } else {\n    alertCounter = 0\n  }\n}\n\n// Dummy function to simulate door status check\ndef checkDoorStatus(): Boolean = {\n  // Replace with actual logic to check the door status\n  true\n}\n```"
  },
  {
    "task": "Implement a feature that keeps adding random characters to a string until its length is 8.",
    "code": "```scala\nimport scala.util.Random\n\nobject RandomStringGenerator extends App {\n  val random = new Random\n  val sb = new StringBuilder\n\n  while (sb.length < 8) {\n    val randomChar = (random.nextInt(26) + 'a').toChar\n    sb.append(randomChar)\n  }\n\n  println(sb.toString)\n}\n```"
  },
  {
    "task": "Design a routine that simulates a race and continues until a participant crosses the finish line.",
    "code": "```scala\nobject RaceSimulation {\n  def main(args: Array[String]): Unit = {\n    val finishLine = 100\n    var participantPosition = 0\n\n    while (participantPosition < finishLine) {\n      participantPosition += scala.util.Random.nextInt(10) + 1\n      println(s\"Participant is at position: $participantPosition\")\n    }\n\n    println(\"Participant has crossed the finish line!\")\n  }\n}\n```"
  },
  {
    "task": "Write a script that keeps checking an email inbox until a specific email is received.",
    "code": "```scala\nimport javax.mail._\nimport javax.mail.internet._\nimport java.util.Properties\n\nobject EmailChecker {\n  def checkEmail(username: String, password: String, subjectToFind: String): Unit = {\n    val properties = new Properties()\n    properties.put(\"mail.store.protocol\", \"imaps\")\n    \n    val session = Session.getDefaultInstance(properties, null)\n    val store = session.getStore(\"imaps\")\n    store.connect(\"imap.gmail.com\", username, password)\n\n    val inbox = store.getFolder(\"INBOX\")\n    inbox.open(Folder.READ_ONLY)\n    \n    var emailFound = false\n    \n    while (!emailFound) {\n      val messages = inbox.getMessages\n      for (message <- messages) {\n        if (message.getSubject == subjectToFind) {\n          emailFound = true\n        }\n      }\n      if (!emailFound) {\n        Thread.sleep(60000) // Check every minute\n      }\n    }\n    \n    inbox.close(false)\n    store.close()\n  }\n  \n  def main(args: Array[String]): Unit = {\n    val username = \"your-email@gmail.com\"\n    val password = \"your-password\"\n    val subjectToFind = \"Specific Subject\"\n    \n    checkEmail(username, password, subjectToFind)\n    println(s\"Email with subject '$subjectToFind' received.\")\n  }\n}\n```"
  },
  {
    "task": "Create a loop that continues to play a video on repeat until the user interrupts.",
    "code": "```scala\nimport scala.io.StdIn.readLine\n\nobject VideoPlayer {\n  def main(args: Array[String]): Unit = {\n    var playing = true\n\n    while (playing) {\n      println(\"Playing video...\")\n\n      println(\"Press 'q' to quit or any other key to replay.\")\n      val input = readLine()\n\n      if (input.toLowerCase == \"q\") {\n        playing = false\n      }\n    }\n    \n    println(\"Video stopped.\")\n  }\n}\n```"
  },
  {
    "task": "Develop a process that keeps scanning for Bluetooth devices until a specific device is found.",
    "code": "```scala\nvar deviceFound = false\nval targetDevice = \"TargetDeviceName\"\n\nwhile (!deviceFound) {\n  val availableDevices = scanForBluetoothDevices()\n  if (availableDevices.contains(targetDevice)) {\n    deviceFound = true\n  }\n}\n\ndef scanForBluetoothDevices(): List[String] = {\n  // Placeholder for actual scanning logic\n  List(\"Device1\", \"Device2\", \"TargetDeviceName\")\n}\n```"
  },
  {
    "task": "Implement a script that continuously captures images from a webcam until a motion is detected.",
    "code": "```scala\nimport org.opencv.core._\nimport org.opencv.videoio.VideoCapture\nimport org.opencv.imgproc.Imgproc\nimport org.opencv.core.Core._\nimport org.opencv.core.CvType._\nimport org.opencv.core.Mat\n\nobject MotionDetection {\n  System.loadLibrary(Core.NATIVE_LIBRARY_NAME)\n\n  def main(args: Array[String]): Unit = {\n    val capture = new VideoCapture(0)\n    if (!capture.isOpened) {\n      println(\"Error: Could not open video.\")\n      return\n    }\n    \n    val frame = new Mat()\n    val prevFrame = new Mat()\n    val diffFrame = new Mat()\n    var motionDetected = false\n\n    while (!motionDetected) {\n      capture.read(frame)\n      if (!frame.empty()) {\n        if (!prevFrame.empty()) {\n          Core.absdiff(frame, prevFrame, diffFrame)\n          Imgproc.cvtColor(diffFrame, diffFrame, Imgproc.COLOR_BGR2GRAY)\n          val threshold = 25\n          val nonZeroCount = Core.countNonZero(diffFrame)\n          if (nonZeroCount > threshold) {\n            motionDetected = true\n          }\n        }\n        frame.copyTo(prevFrame)\n      }\n    }\n\n    capture.release()\n    println(\"Motion detected, stopping capture.\")\n  }\n}\n```"
  },
  {
    "task": "Design a program that keeps playing a sound file until the user presses a mute button.",
    "code": "```scala\nimport javax.sound.sampled._\nimport java.io.File\nimport scala.io.StdIn\n\nobject SoundPlayer {\n  def main(args: Array[String]): Unit = {\n    val audioFile = new File(\"your-sound-file.wav\")\n    val audioStream = AudioSystem.getAudioInputStream(audioFile)\n    val format = audioStream.getFormat\n    val info = new DataLine.Info(classOf[Clip], format)\n    val clip = AudioSystem.getLine(info).asInstanceOf[Clip]\n\n    clip.open(audioStream)\n\n    def isMutePressed: Boolean = {\n      println(\"Press 'm' to mute the sound.\")\n      StdIn.readLine().equalsIgnoreCase(\"m\")\n    }\n\n    while (!isMutePressed) {\n      clip.setFramePosition(0)\n      clip.start()\n      while (clip.isRunning && !isMutePressed) {\n        Thread.sleep(100)\n      }\n      clip.stop()\n    }\n\n    clip.close()\n  }\n}\n```"
  },
  {
    "task": "Create a loop that repeatedly generates a random password until it meets certain security criteria.",
    "code": "```scala\nimport scala.util.Random\n\nobject PasswordGenerator {\n  def main(args: Array[String]): Unit = {\n    val random = new Random()\n    val passwordLength = 12\n\n    def generatePassword(): String = {\n      val chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()\"\n      (1 to passwordLength).map(_ => chars(random.nextInt(chars.length))).mkString\n    }\n\n    def isSecure(password: String): Boolean = {\n      password.exists(_.isLower) && password.exists(_.isUpper) &&\n      password.exists(_.isDigit) && password.exists(\"!@#$%^&*()\".contains(_))\n    }\n\n    var password = \"\"\n    while (!isSecure(password)) {\n      password = generatePassword()\n    }\n\n    println(s\"Generated secure password: $password\")\n  }\n}\n```"
  },
  {
    "task": "Write a process that keeps checking for file changes in a directory and logs them until stopped.",
    "code": "```scala\nimport java.nio.file._\nimport java.nio.file.StandardWatchEventKinds._\nimport scala.jdk.CollectionConverters._\n\nobject DirectoryWatcher extends App {\n  val dir = Paths.get(\"path/to/directory\")\n  val watchService = FileSystems.getDefault.newWatchService()\n  dir.register(watchService, ENTRY_CREATE, ENTRY_DELETE, ENTRY_MODIFY)\n\n  def logChanges(): Unit = {\n    var continueWatching = true\n    while (continueWatching) {\n      val key = watchService.take()\n      val events = key.pollEvents().asScala\n      for (event <- events) {\n        println(s\"Change detected: ${event.kind()} in ${event.context()}\")\n      }\n      continueWatching = key.reset()\n    }\n  }\n\n  logChanges()\n}\n```"
  }
]