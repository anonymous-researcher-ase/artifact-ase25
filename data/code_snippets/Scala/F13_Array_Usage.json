[
  {
    "task": "Create a function that initializes an array with the first ten prime numbers.",
    "code": "```scala\ndef initializePrimeArray(): Array[Int] = {\n  Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29)\n}\n```"
  },
  {
    "task": "Write a program to reverse the elements of a given array.",
    "code": "```scala\nobject ReverseArray {\n  def main(args: Array[String]): Unit = {\n    val array = Array(1, 2, 3, 4, 5)\n    val reversedArray = array.reverse\n    println(reversedArray.mkString(\", \"))\n  }\n}\n```"
  },
  {
    "task": "Implement an algorithm that finds the maximum value in an array of integers.",
    "code": "```scala\nobject MaxValueInArray {\n  def findMaxValue(arr: Array[Int]): Int = {\n    if (arr.isEmpty) throw new IllegalArgumentException(\"Array is empty\")\n    arr.max\n  }\n\n  def main(args: Array[String]): Unit = {\n    val numbers = Array(1, 5, 3, 9, 2)\n    println(s\"The maximum value is: ${findMaxValue(numbers)}\")\n  }\n}\n```"
  },
  {
    "task": "Design a routine to rotate an array to the right by a given number of steps.",
    "code": "```scala\ndef rotateArrayRight(arr: Array[Int], steps: Int): Array[Int] = {\n  val n = arr.length\n  val k = steps % n\n  val rotatedArr = new Array[Int](n)\n  for (i <- arr.indices) {\n    rotatedArr((i + k) % n) = arr(i)\n  }\n  rotatedArr\n}\n\n// Example usage:\n// val arr = Array(1, 2, 3, 4, 5)\n// val rotated = rotateArrayRight(arr, 2)\n// println(rotated.mkString(\", \")) // Output: 4, 5, 1, 2, 3\n```"
  },
  {
    "task": "Develop a function to merge two sorted arrays into one sorted array.",
    "code": "```scala\ndef mergeSortedArrays(arr1: Array[Int], arr2: Array[Int]): Array[Int] = {\n  val mergedArray = new Array[Int](arr1.length + arr2.length)\n  var i = 0\n  var j = 0\n  var k = 0\n\n  while (i < arr1.length && j < arr2.length) {\n    if (arr1(i) <= arr2(j)) {\n      mergedArray(k) = arr1(i)\n      i += 1\n    } else {\n      mergedArray(k) = arr2(j)\n      j += 1\n    }\n    k += 1\n  }\n\n  while (i < arr1.length) {\n    mergedArray(k) = arr1(i)\n    i += 1\n    k += 1\n  }\n\n  while (j < arr2.length) {\n    mergedArray(k) = arr2(j)\n    j += 1\n    k += 1\n  }\n\n  mergedArray\n}\n```"
  },
  {
    "task": "Create a method to remove duplicate values from an array.",
    "code": "```scala\ndef removeDuplicates(arr: Array[Int]): Array[Int] = {\n  arr.distinct\n}\n```"
  },
  {
    "task": "Write a script to calculate the sum of all elements in an array.",
    "code": "```scala\nobject ArraySum {\n  def main(args: Array[String]): Unit = {\n    val numbers = Array(1, 2, 3, 4, 5)\n    val sum = numbers.sum\n    println(s\"The sum of the array elements is: $sum\")\n  }\n}\n```"
  },
  {
    "task": "Construct a function that finds the second largest element in an array.",
    "code": "```scala\ndef secondLargest(arr: Array[Int]): Option[Int] = {\n  if (arr.length < 2) None\n  else {\n    var first = Int.MinValue\n    var second = Int.MinValue\n    for (num <- arr) {\n      if (num > first) {\n        second = first\n        first = num\n      } else if (num > second && num != first) {\n        second = num\n      }\n    }\n    if (second == Int.MinValue) None else Some(second)\n  }\n}\n```"
  },
  {
    "task": "Design a program to check if an array contains a specific value.",
    "code": "```scala\nobject ArrayChecker {\n  def contains(array: Array[Int], value: Int): Boolean = {\n    array.contains(value)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val numbers = Array(1, 2, 3, 4, 5)\n    val valueToCheck = 3\n    println(contains(numbers, valueToCheck)) // Output: true\n  }\n}\n```"
  },
  {
    "task": "Implement a function to sort an array of strings alphabetically.",
    "code": "```scala\ndef sortArray(arr: Array[String]): Array[String] = {\n  arr.sorted\n}\n\n// Example usage:\nval strings = Array(\"banana\", \"apple\", \"orange\")\nval sortedStrings = sortArray(strings)\nprintln(sortedStrings.mkString(\", \"))\n```"
  },
  {
    "task": "Create a method to search for a value in an array using binary search.",
    "code": "```scala\nobject BinarySearch {\n  def binarySearch(arr: Array[Int], target: Int): Int = {\n    var left = 0\n    var right = arr.length - 1\n\n    while (left <= right) {\n      val mid = left + (right - left) / 2\n      if (arr(mid) == target) {\n        return mid\n      } else if (arr(mid) < target) {\n        left = mid + 1\n      } else {\n        right = mid - 1\n      }\n    }\n    -1\n  }\n}\n```"
  },
  {
    "task": "Write a routine to calculate the average of numbers in an array.",
    "code": "```scala\ndef calculateAverage(numbers: Array[Double]): Double = {\n  if (numbers.isEmpty) 0.0\n  else numbers.sum / numbers.length\n}\n```"
  },
  {
    "task": "Develop a function to find the intersection of two arrays.",
    "code": "```scala\ndef findIntersection(arr1: Array[Int], arr2: Array[Int]): Array[Int] = {\n  arr1.intersect(arr2)\n}\n```"
  },
  {
    "task": "Implement a method to find the union of two arrays without duplicates.",
    "code": "```scala\ndef unionWithoutDuplicates(arr1: Array[Int], arr2: Array[Int]): Array[Int] = {\n  (arr1 ++ arr2).distinct\n}\n\n// Example usage\nval array1 = Array(1, 2, 3, 4)\nval array2 = Array(3, 4, 5, 6)\nval result = unionWithoutDuplicates(array1, array2)\nprintln(result.mkString(\", \"))\n```"
  },
  {
    "task": "Create a program that shifts all zeroes in an array to the end.",
    "code": "```scala\nobject ZeroShifter {\n  def shiftZeroesToEnd(arr: Array[Int]): Array[Int] = {\n    val nonZeroes = arr.filter(_ != 0)\n    val zeroesCount = arr.length - nonZeroes.length\n    nonZeroes ++ Array.fill(zeroesCount)(0)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val array = Array(0, 1, 0, 3, 12)\n    val result = shiftZeroesToEnd(array)\n    println(result.mkString(\", \"))\n  }\n}\n```"
  },
  {
    "task": "Write a function to split an array into two parts at a given index.",
    "code": "```scala\ndef splitArray[T](arr: Array[T], index: Int): (Array[T], Array[T]) = {\n  (arr.take(index), arr.drop(index))\n}\n```"
  },
  {
    "task": "Design a script to find all pairs in an array that sum up to a specific target.",
    "code": "```scala\nobject ArrayPairsSum extends App {\n  def findPairsWithSum(arr: Array[Int], target: Int): Array[(Int, Int)] = {\n    val pairs = scala.collection.mutable.ArrayBuffer[(Int, Int)]()\n    for (i <- arr.indices) {\n      for (j <- i + 1 until arr.length) {\n        if (arr(i) + arr(j) == target) {\n          pairs += ((arr(i), arr(j)))\n        }\n      }\n    }\n    pairs.toArray\n  }\n\n  val array = Array(2, 4, 3, 5, 7, -1, 0)\n  val target = 6\n  val result = findPairsWithSum(array, target)\n  result.foreach { case (x, y) => println(s\"($x, $y)\") }\n}\n```"
  },
  {
    "task": "Construct a method to remove all occurrences of a specific value from an array.",
    "code": "```scala\ndef removeOccurrences(arr: Array[Int], value: Int): Array[Int] = {\n  arr.filter(_ != value)\n}\n```"
  },
  {
    "task": "Write a function to find the longest increasing subsequence in an array.",
    "code": "```scala\ndef longestIncreasingSubsequence(arr: Array[Int]): Array[Int] = {\n  if (arr.isEmpty) return Array()\n  \n  val n = arr.length\n  val lis = Array.fill(n)(1)\n  val prev = Array.fill(n)(-1)\n  \n  for (i <- 1 until n) {\n    for (j <- 0 until i) {\n      if (arr(i) > arr(j) && lis(i) < lis(j) + 1) {\n        lis(i) = lis(j) + 1\n        prev(i) = j\n      }\n    }\n  }\n  \n  var maxLength = 0\n  var maxIndex = 0\n  for (i <- lis.indices) {\n    if (lis(i) > maxLength) {\n      maxLength = lis(i)\n      maxIndex = i\n    }\n  }\n  \n  val result = scala.collection.mutable.ArrayBuffer[Int]()\n  while (maxIndex != -1) {\n    result.prepend(arr(maxIndex))\n    maxIndex = prev(maxIndex)\n  }\n  \n  result.toArray\n}\n\n// Example usage:\n// val array = Array(10, 9, 2, 5, 3, 7, 101, 18)\n// val lis = longestIncreasingSubsequence(array)\n// println(lis.mkString(\", \"))  // Output: 2, 3, 7, 101\n```"
  },
  {
    "task": "Develop an algorithm to find the missing number in a sequential array.",
    "code": "```scala\nobject MissingNumber {\n  def findMissingNumber(arr: Array[Int]): Int = {\n    val n = arr.length + 1\n    val totalSum = n * (n + 1) / 2\n    val arrSum = arr.sum\n    totalSum - arrSum\n  }\n\n  def main(args: Array[String]): Unit = {\n    val arr = Array(1, 2, 4, 5, 6)\n    println(s\"The missing number is: ${findMissingNumber(arr)}\")\n  }\n}\n```"
  },
  {
    "task": "Create a program to find the common elements between two arrays.",
    "code": "```scala\nobject CommonElementsFinder {\n  def main(args: Array[String]): Unit = {\n    val array1 = Array(1, 2, 3, 4, 5)\n    val array2 = Array(4, 5, 6, 7, 8)\n\n    val commonElements = array1.intersect(array2)\n\n    println(\"Common elements: \" + commonElements.mkString(\", \"))\n  }\n}\n```"
  },
  {
    "task": "Implement a function to move all negative numbers to the beginning of an array.",
    "code": "```scala\ndef moveNegativesToFront(arr: Array[Int]): Array[Int] = {\n  arr.filter(_ < 0) ++ arr.filter(_ >= 0)\n}\n\n// Example usage\nval array = Array(1, -2, 3, -4, 5)\nval result = moveNegativesToFront(array)\nprintln(result.mkString(\", \"))\n```"
  },
  {
    "task": "Write a method to check if an array is a palindrome.",
    "code": "```scala\ndef isPalindrome(arr: Array[Int]): Boolean = {\n  arr.sameElements(arr.reverse)\n}\n```"
  },
  {
    "task": "Design a routine to create a new array that is the element-wise sum of two input arrays.",
    "code": "```scala\ndef elementWiseSum(arr1: Array[Int], arr2: Array[Int]): Array[Int] = {\n  require(arr1.length == arr2.length, \"Arrays must be of the same length\")\n  val result = new Array[Int](arr1.length)\n  for (i <- arr1.indices) {\n    result(i) = arr1(i) + arr2(i)\n  }\n  result\n}\n```"
  },
  {
    "task": "Create a function to find the product of all elements in an array, excluding the current element.",
    "code": "```scala\ndef productExcludingSelf(nums: Array[Int]): Array[Int] = {\n  val n = nums.length\n  val result = Array.fill(n)(1)\n  \n  var prefixProduct = 1\n  for (i <- nums.indices) {\n    result(i) = prefixProduct\n    prefixProduct *= nums(i)\n  }\n  \n  var suffixProduct = 1\n  for (i <- nums.indices.reverse) {\n    result(i) *= suffixProduct\n    suffixProduct *= nums(i)\n  }\n  \n  result\n}\n```"
  },
  {
    "task": "Develop a script to remove elements from an array that are smaller than a given threshold.",
    "code": "```scala\nobject ArrayFilter {\n  def main(args: Array[String]): Unit = {\n    val array = Array(1, 5, 8, 3, 10, 2)\n    val threshold = 5\n    val filteredArray = array.filter(_ >= threshold)\n    println(filteredArray.mkString(\", \"))\n  }\n}\n```"
  },
  {
    "task": "Implement a method to clone an array without using built-in functions.",
    "code": "```scala\ndef cloneArray[T](array: Array[T]): Array[T] = {\n  val clonedArray = new Array[T](array.length)\n  for (i <- array.indices) {\n    clonedArray(i) = array(i)\n  }\n  clonedArray\n}\n```"
  },
  {
    "task": "Create a program that rotates a 2D array (matrix) 90 degrees clockwise.",
    "code": "```scala\nobject MatrixRotation {\n  def rotate90Clockwise(matrix: Array[Array[Int]]): Array[Array[Int]] = {\n    val n = matrix.length\n    val rotatedMatrix = Array.ofDim[Int](n, n)\n    for (i <- 0 until n) {\n      for (j <- 0 until n) {\n        rotatedMatrix(j)(n - 1 - i) = matrix(i)(j)\n      }\n    }\n    rotatedMatrix\n  }\n\n  def main(args: Array[String]): Unit = {\n    val originalMatrix = Array(\n      Array(1, 2, 3),\n      Array(4, 5, 6),\n      Array(7, 8, 9)\n    )\n\n    val rotatedMatrix = rotate90Clockwise(originalMatrix)\n\n    rotatedMatrix.foreach(row => println(row.mkString(\" \")))\n  }\n}\n```"
  },
  {
    "task": "Write a function to find the kth smallest element in an unsorted array.",
    "code": "```scala\nobject KthSmallestElement {\n  def findKthSmallest(arr: Array[Int], k: Int): Int = {\n    val sortedArray = arr.sorted\n    sortedArray(k - 1)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val array = Array(3, 1, 2, 5, 4)\n    val k = 3\n    println(findKthSmallest(array, k))  // Output: 3\n  }\n}\n```"
  },
  {
    "task": "Design a routine to partition an array into even and odd numbers.",
    "code": "```scala\ndef partitionEvenOdd(arr: Array[Int]): Array[Int] = {\n  val (evens, odds) = arr.partition(_ % 2 == 0)\n  evens ++ odds\n}\n\n// Example usage\nval numbers = Array(1, 2, 3, 4, 5, 6, 7, 8, 9)\nval partitioned = partitionEvenOdd(numbers)\nprintln(partitioned.mkString(\", \"))\n```"
  },
  {
    "task": "Create a method to merge overlapping intervals in an array.",
    "code": "```scala\nobject IntervalMerger {\n  def mergeIntervals(intervals: Array[Array[Int]]): Array[Array[Int]] = {\n    if (intervals.isEmpty) return intervals\n\n    val sortedIntervals = intervals.sortBy(_(0))\n    val mergedIntervals = scala.collection.mutable.ArrayBuffer[Array[Int]]()\n\n    var currentInterval = sortedIntervals(0)\n    for (i <- 1 until sortedIntervals.length) {\n      val nextInterval = sortedIntervals(i)\n      if (currentInterval(1) >= nextInterval(0)) {\n        currentInterval(1) = math.max(currentInterval(1), nextInterval(1))\n      } else {\n        mergedIntervals.append(currentInterval)\n        currentInterval = nextInterval\n      }\n    }\n    mergedIntervals.append(currentInterval)\n    mergedIntervals.toArray\n  }\n}\n```"
  },
  {
    "task": "Develop a function to count the frequency of each unique element in an array.",
    "code": "```scala\ndef countFrequencies(arr: Array[Int]): Map[Int, Int] = {\n  arr.groupBy(identity).view.mapValues(_.length).toMap\n}\n\n// Example usage\nval sampleArray = Array(1, 2, 2, 3, 3, 3, 4)\nval frequencies = countFrequencies(sampleArray)\nprintln(frequencies)\n```"
  },
  {
    "task": "Write a program to generate all possible subsets of an array.",
    "code": "```scala\nobject SubsetsGenerator {\n  def subsets(nums: Array[Int]): List[List[Int]] = {\n    nums.foldLeft(List(List.empty[Int]))((acc, num) => acc ++ acc.map(_ :+ num))\n  }\n\n  def main(args: Array[String]): Unit = {\n    val nums = Array(1, 2, 3)\n    val result = subsets(nums)\n    result.foreach(println)\n  }\n}\n```"
  },
  {
    "task": "Implement a routine to cyclically permute the elements of an array.",
    "code": "```scala\ndef cyclicallyPermuteArray[T](arr: Array[T]): Array[T] = {\n  if (arr.isEmpty) arr\n  else arr.last +: arr.init\n}\n\n// Example usage:\nval originalArray = Array(1, 2, 3, 4, 5)\nval permutedArray = cyclicallyPermuteArray(originalArray)\nprintln(permutedArray.mkString(\", \"))\n```"
  },
  {
    "task": "Create a function that checks if two arrays are equal regardless of element order.",
    "code": "```scala\ndef arraysEqualUnordered[T](array1: Array[T], array2: Array[T]): Boolean = {\n  array1.sorted.sameElements(array2.sorted)\n}\n```"
  },
  {
    "task": "Design a script to initialize an array with random integers within a specified range.",
    "code": "```scala\nimport scala.util.Random\n\nobject RandomArray {\n  def main(args: Array[String]): Unit = {\n    val arraySize = 10 // specify the size of the array\n    val minValue = 1   // specify the minimum value of the range\n    val maxValue = 100 // specify the maximum value of the range\n\n    val randomArray = Array.fill(arraySize)(Random.between(minValue, maxValue + 1))\n\n    println(randomArray.mkString(\", \"))\n  }\n}\n```"
  },
  {
    "task": "Write a method to convert an array of integers to a single concatenated number.",
    "code": "```scala\ndef concatenateArrayToInt(arr: Array[Int]): Int = {\n  arr.mkString(\"\").toInt\n}\n```"
  },
  {
    "task": "Develop a function to find the median value of an unsorted array.",
    "code": "```scala\ndef findMedian(arr: Array[Int]): Double = {\n  val sortedArr = arr.sorted\n  val n = sortedArr.length\n  if (n % 2 == 1) {\n    sortedArr(n / 2)\n  } else {\n    (sortedArr(n / 2 - 1) + sortedArr(n / 2)) / 2.0\n  }\n}\n```"
  },
  {
    "task": "Create a routine to determine if an array is sorted in ascending order.",
    "code": "```scala\ndef isSortedAscending(arr: Array[Int]): Boolean = {\n  arr.sliding(2).forall { case Array(x, y) => x <= y }\n}\n```"
  },
  {
    "task": "Implement a method to find the longest contiguous subarray with equal number of 0s and 1s.",
    "code": "```scala\nobject LongestSubarray {\n  def findMaxLength(nums: Array[Int]): Int = {\n    val map = scala.collection.mutable.Map[Int, Int]()\n    map(0) = -1\n    var maxLength = 0\n    var count = 0\n\n    for (i <- nums.indices) {\n      count += (if (nums(i) == 1) 1 else -1)\n      if (map.contains(count)) {\n        maxLength = math.max(maxLength, i - map(count))\n      } else {\n        map(count) = i\n      }\n    }\n\n    maxLength\n  }\n\n  def main(args: Array[String]): Unit = {\n    val nums = Array(0, 1, 0, 1, 0, 1, 1, 0)\n    println(findMaxLength(nums)) // Example usage\n  }\n}\n```"
  },
  {
    "task": "Write a function to interleave two arrays of equal length.",
    "code": "```scala\ndef interleaveArrays[T](array1: Array[T], array2: Array[T]): Array[T] = {\n  val interleaved = new Array[T](array1.length + array2.length)\n  for (i <- array1.indices) {\n    interleaved(2 * i) = array1(i)\n    interleaved(2 * i + 1) = array2(i)\n  }\n  interleaved\n}\n```"
  },
  {
    "task": "Design a program to replace each element in an array with the next greatest element.",
    "code": "```scala\nobject NextGreatestElement {\n  def replaceWithNextGreatest(arr: Array[Int]): Array[Int] = {\n    val n = arr.length\n    if (n == 0) return arr\n    val result = new Array[Int](n)\n    var maxFromRight = arr(n - 1)\n    result(n - 1) = -1\n\n    for (i <- n - 2 to 0 by -1) {\n      result(i) = maxFromRight\n      if (arr(i) > maxFromRight) {\n        maxFromRight = arr(i)\n      }\n    }\n    result\n  }\n\n  def main(args: Array[String]): Unit = {\n    val arr = Array(16, 17, 4, 3, 5, 2)\n    val result = replaceWithNextGreatest(arr)\n    println(result.mkString(\", \"))\n  }\n}\n```"
  },
  {
    "task": "Create a function to calculate the dot product of two numeric arrays.",
    "code": "```scala\ndef dotProduct(arr1: Array[Double], arr2: Array[Double]): Double = {\n  require(arr1.length == arr2.length, \"Arrays must be of the same length\")\n  (arr1 zip arr2).map { case (x, y) => x * y }.sum\n}\n```"
  },
  {
    "task": "Develop a script to find the first recurring element in an array.",
    "code": "```scala\nobject FirstRecurringElement {\n  def findFirstRecurring(arr: Array[Int]): Option[Int] = {\n    val seen = scala.collection.mutable.Set[Int]()\n    for (element <- arr) {\n      if (seen.contains(element)) {\n        return Some(element)\n      }\n      seen.add(element)\n    }\n    None\n  }\n\n  def main(args: Array[String]): Unit = {\n    val array = Array(2, 5, 1, 2, 3, 5, 1, 2, 4)\n    val result = findFirstRecurring(array)\n    println(result.getOrElse(\"No recurring elements\"))\n  }\n}\n```"
  },
  {
    "task": "Write a method to check if an array is a subset of another array.",
    "code": "```scala\ndef isSubset(arr1: Array[Int], arr2: Array[Int]): Boolean = {\n  arr1.forall(arr2.contains)\n}\n\n// Example usage\nval array1 = Array(1, 2, 3)\nval array2 = Array(1, 2, 3, 4, 5)\nprintln(isSubset(array1, array2))  // Output: true\n```"
  },
  {
    "task": "Implement a function to add a specific value to each element in an array.",
    "code": "```scala\ndef addValueToArray(arr: Array[Int], value: Int): Array[Int] = {\n  arr.map(_ + value)\n}\n\n// Example usage\nval originalArray = Array(1, 2, 3, 4, 5)\nval incrementedArray = addValueToArray(originalArray, 3)\nprintln(incrementedArray.mkString(\", \"))  // Output: 4, 5, 6, 7, 8\n```"
  },
  {
    "task": "Create a program that finds the largest product of three numbers in an array.",
    "code": "```scala\nobject LargestProduct {\n  def largestProductOfThree(nums: Array[Int]): Int = {\n    val sortedNums = nums.sorted\n    val n = sortedNums.length\n    math.max(\n      sortedNums(n - 1) * sortedNums(n - 2) * sortedNums(n - 3),\n      sortedNums(0) * sortedNums(1) * sortedNums(n - 1)\n    )\n  }\n\n  def main(args: Array[String]): Unit = {\n    val nums = Array(1, 10, 2, 6, 5, 3)\n    println(largestProductOfThree(nums))\n  }\n}\n```"
  },
  {
    "task": "Design a routine to find all unique permutations of an array.",
    "code": "```scala\ndef permuteUnique(nums: Array[Int]): List[List[Int]] = {\n  def backtrack(path: List[Int], used: Array[Boolean], result: ListBuffer[List[Int]]): Unit = {\n    if (path.length == nums.length) {\n      result += path\n    } else {\n      for (i <- nums.indices) {\n        if (used(i) || (i > 0 && nums(i) == nums(i - 1) && !used(i - 1))) {\n          // Skip duplicate\n        } else {\n          used(i) = true\n          backtrack(path :+ nums(i), used, result)\n          used(i) = false\n        }\n      }\n    }\n  }\n\n  val sortedNums = nums.sorted\n  val result = ListBuffer[List[Int]]()\n  backtrack(List(), Array.fill(nums.length)(false), result)\n  result.toList\n}\n\nval nums = Array(1, 1, 2)\nprintln(permuteUnique(nums))\n```"
  },
  {
    "task": "Write a function to transpose a square matrix represented as a 2D array.",
    "code": "```scala\ndef transpose(matrix: Array[Array[Int]]): Array[Array[Int]] = {\n  val n = matrix.length\n  val transposed = Array.ofDim[Int](n, n)\n  for (i <- 0 until n) {\n    for (j <- 0 until n) {\n      transposed(i)(j) = matrix(j)(i)\n    }\n  }\n  transposed\n}\n```"
  },
  {
    "task": "Develop a method to find the longest common prefix in an array of strings.",
    "code": "```scala\nobject LongestCommonPrefix {\n  def longestCommonPrefix(strs: Array[String]): String = {\n    if (strs.isEmpty) return \"\"\n    var prefix = strs(0)\n    for (i <- 1 until strs.length) {\n      while (!strs(i).startsWith(prefix)) {\n        prefix = prefix.substring(0, prefix.length - 1)\n        if (prefix.isEmpty) return \"\"\n      }\n    }\n    prefix\n  }\n\n  def main(args: Array[String]): Unit = {\n    val strs = Array(\"flower\", \"flow\", \"flight\")\n    println(longestCommonPrefix(strs)) // Output: \"fl\"\n  }\n}\n```"
  },
  {
    "task": "Implement a function to flatten a multi-dimensional array into a single array.",
    "code": "```scala\ndef flattenArray(arr: Array[Any]): Array[Any] = {\n  arr.flatMap {\n    case a: Array[_] => flattenArray(a)\n    case e => Array(e)\n  }\n}\n\n// Example usage\nval multiDimArray: Array[Any] = Array(Array(1, 2, Array(3, 4)), Array(5, Array(6, 7)))\nval flattenedArray: Array[Any] = flattenArray(multiDimArray)\nprintln(flattenedArray.mkString(\", \"))\n```"
  },
  {
    "task": "Create a script to shift elements of an array to the left by a given number of positions.",
    "code": "```scala\nobject ArrayShiftLeft {\n  def shiftLeft(arr: Array[Int], positions: Int): Array[Int] = {\n    val n = arr.length\n    val shift = positions % n\n    arr.slice(shift, n) ++ arr.slice(0, shift)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val arr = Array(1, 2, 3, 4, 5)\n    val positions = 2\n    val shiftedArr = shiftLeft(arr, positions)\n    println(shiftedArr.mkString(\"Array(\", \", \", \")\"))\n  }\n}\n```"
  },
  {
    "task": "Write a routine to sort an array of objects based on a specific property.",
    "code": "```scala\ncase class Item(property: Int)\n\nobject ArraySorter {\n  def sortByProperty(items: Array[Item]): Array[Item] = {\n    items.sortBy(_.property)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val items = Array(Item(3), Item(1), Item(2))\n    val sortedItems = sortByProperty(items)\n    println(sortedItems.mkString(\", \"))\n  }\n}\n```"
  },
  {
    "task": "Design a program to find the smallest missing positive integer in an array.",
    "code": "```scala\nobject SmallestMissingPositive {\n  def findSmallestMissingPositive(nums: Array[Int]): Int = {\n    val n = nums.length\n    for (i <- 0 until n) {\n      while (nums(i) > 0 && nums(i) <= n && nums(nums(i) - 1) != nums(i)) {\n        val correctIndex = nums(i) - 1\n        val temp = nums(i)\n        nums(i) = nums(correctIndex)\n        nums(correctIndex) = temp\n      }\n    }\n    for (i <- 0 until n) {\n      if (nums(i) != i + 1) return i + 1\n    }\n    n + 1\n  }\n\n  def main(args: Array[String]): Unit = {\n    val nums = Array(3, 4, -1, 1)\n    println(findSmallestMissingPositive(nums)) // Output: 2\n  }\n}\n```"
  },
  {
    "task": "Create a function to calculate the cumulative sum of an array.",
    "code": "```scala\ndef cumulativeSum(arr: Array[Int]): Array[Int] = {\n  val result = new Array[Int](arr.length)\n  for (i <- arr.indices) {\n    result(i) = arr(i) + (if (i > 0) result(i - 1) else 0)\n  }\n  result\n}\n```"
  },
  {
    "task": "Develop a function to remove consecutive duplicate elements in an array.",
    "code": "```scala\ndef removeConsecutiveDuplicates(arr: Array[Int]): Array[Int] = {\n  if (arr.isEmpty) arr\n  else arr.head +: arr.sliding(2).collect { case Array(x, y) if x != y => y }.toArray\n}\n\n// Example usage\nval array = Array(1, 1, 2, 2, 3, 3, 3, 4, 4, 5)\nval result = removeConsecutiveDuplicates(array)\nprintln(result.mkString(\", \")) // Output: 1, 2, 3, 4, 5\n```"
  },
  {
    "task": "Implement a method to find the majority element in an array, if any.",
    "code": "```scala\nobject MajorityElementFinder {\n  def findMajorityElement(nums: Array[Int]): Option[Int] = {\n    if (nums.isEmpty) return None\n\n    var candidate = nums(0)\n    var count = 0\n\n    for (num <- nums) {\n      if (count == 0) {\n        candidate = num\n      }\n      count += (if (num == candidate) 1 else -1)\n    }\n\n    val majorityCount = nums.count(_ == candidate)\n    if (majorityCount > nums.length / 2) Some(candidate) else None\n  }\n}\n```"
  },
  {
    "task": "Write a script to split an array into chunks of a given size.",
    "code": "```scala\ndef chunkArray[T](arr: Array[T], chunkSize: Int): Array[Array[T]] = {\n  arr.grouped(chunkSize).toArray\n}\n\n// Example usage\nval array = Array(1, 2, 3, 4, 5, 6, 7, 8, 9)\nval chunked = chunkArray(array, 3)\nchunked.foreach(chunk => println(chunk.mkString(\", \")))\n```"
  },
  {
    "task": "Create a program to calculate the difference between the largest and smallest values in an array.",
    "code": "```scala\nobject ArrayDifference {\n  def main(args: Array[String]): Unit = {\n    val numbers = Array(3, 5, 1, 9, 7)\n    val max = numbers.max\n    val min = numbers.min\n    val difference = max - min\n    println(s\"The difference between the largest and smallest values is: $difference\")\n  }\n}\n```"
  },
  {
    "task": "Design a routine to find the starting index of a target subarray in a larger array.",
    "code": "```scala\ndef findSubarrayIndex(arr: Array[Int], subarr: Array[Int]): Int = {\n  if (subarr.isEmpty) return 0\n  for (i <- arr.indices) {\n    if (i + subarr.length <= arr.length && arr.slice(i, i + subarr.length).sameElements(subarr)) {\n      return i\n    }\n  }\n  -1\n}\n\n// Example usage\nval arr = Array(1, 2, 3, 4, 5)\nval subarr = Array(3, 4)\nval index = findSubarrayIndex(arr, subarr)\nprintln(index)\n```"
  },
  {
    "task": "Write a function to compress an array by eliminating zero values.",
    "code": "```scala\ndef compressArray(arr: Array[Int]): Array[Int] = {\n  arr.filter(_ != 0)\n}\n\n// Example usage:\n// val compressed = compressArray(Array(1, 0, 2, 0, 3))\n// println(compressed.mkString(\", \")) // Output: 1, 2, 3\n```"
  },
  {
    "task": "Develop a method to determine if an array can be split into two parts with equal sums.",
    "code": "```scala\nobject ArraySplitEqualSum {\n  def canBeSplitWithEqualSum(arr: Array[Int]): Boolean = {\n    val totalSum = arr.sum\n    if (totalSum % 2 != 0) return false\n    val target = totalSum / 2\n    var currentSum = 0\n    for (num <- arr) {\n      currentSum += num\n      if (currentSum == target) return true\n    }\n    false\n  }\n\n  def main(args: Array[String]): Unit = {\n    val arr = Array(1, 2, 3, 4, 5, 5)\n    println(canBeSplitWithEqualSum(arr)) // Output: true\n  }\n}\n```"
  },
  {
    "task": "Implement a function to round each element in an array to the nearest integer.",
    "code": "```scala\ndef roundArrayElements(arr: Array[Double]): Array[Int] = {\n  arr.map(_.round.toInt)\n}\n```"
  },
  {
    "task": "Create a routine to generate an array of the Fibonacci sequence up to a given number.",
    "code": "```scala\ndef fibonacciArray(n: Int): Array[Int] = {\n  if (n <= 0) return Array()\n  if (n == 1) return Array(0)\n  \n  val fibs = Array.ofDim[Int](n)\n  fibs(0) = 0\n  fibs(1) = 1\n  \n  for (i <- 2 until n) {\n    fibs(i) = fibs(i - 1) + fibs(i - 2)\n  }\n  \n  fibs\n}\n```"
  },
  {
    "task": "Write a program to find the longest repeating sequence in an array.",
    "code": "```scala\nobject LongestRepeatingSequence {\n  def longestRepeatingSequence(arr: Array[Int]): Array[Int] = {\n    if (arr.isEmpty) return Array.empty[Int]\n\n    var maxLength = 0\n    var maxStartIndex = 0\n    for (start <- arr.indices) {\n      for (end <- start + 1 until arr.length) {\n        val subArray = arr.slice(start, end)\n        if (subArray.length > maxLength && isRepeating(arr, subArray)) {\n          maxLength = subArray.length\n          maxStartIndex = start\n        }\n      }\n    }\n    arr.slice(maxStartIndex, maxStartIndex + maxLength)\n  }\n\n  def isRepeating(arr: Array[Int], subArr: Array[Int]): Boolean = {\n    val subArrLength = subArr.length\n    for (i <- subArrLength until arr.length by subArrLength) {\n      if (!arr.slice(i, i + subArrLength).sameElements(subArr)) {\n        return false\n      }\n    }\n    true\n  }\n\n  def main(args: Array[String]): Unit = {\n    val arr = Array(1, 2, 3, 1, 2, 3, 1, 2)\n    val result = longestRepeatingSequence(arr)\n    println(result.mkString(\", \"))\n  }\n}\n```"
  },
  {
    "task": "Design a function to multiply each element of an array by its index.",
    "code": "```scala\ndef multiplyElementsByIndex(arr: Array[Int]): Array[Int] = {\n  arr.zipWithIndex.map { case (value, index) => value * index }\n}\n```"
  },
  {
    "task": "Create a method to convert an array of characters into a single string.",
    "code": "```scala\nobject ArrayToString {\n  def convertArrayToString(chars: Array[Char]): String = {\n    chars.mkString\n  }\n}\n```"
  },
  {
    "task": "Develop a function to fill an array with a specified value.",
    "code": "```scala\ndef fillArray[T](size: Int, value: T): Array[T] = {\n  Array.fill(size)(value)\n}\n```"
  },
  {
    "task": "Implement a routine to determine if an array has any duplicate elements.",
    "code": "```scala\ndef hasDuplicates(arr: Array[Int]): Boolean = {\n  arr.distinct.length != arr.length\n}\n```"
  },
  {
    "task": "Write a script to reverse the order of words in an array of strings.",
    "code": "```scala\nobject ReverseWordsArray {\n  def main(args: Array[String]): Unit = {\n    val words = Array(\"Scala\", \"is\", \"fun\")\n    val reversedWords = words.reverse\n    println(reversedWords.mkString(\" \"))\n  }\n}\n```"
  },
  {
    "task": "Create a function to calculate the total number of distinct elements in an array.",
    "code": "```scala\ndef countDistinctElements(arr: Array[Int]): Int = {\n  arr.distinct.length\n}\n\n// Example usage\nval exampleArray = Array(1, 2, 3, 2, 4, 1)\nval distinctCount = countDistinctElements(exampleArray)\nprintln(s\"Number of distinct elements: $distinctCount\")\n```"
  },
  {
    "task": "Design a program to find the largest gap between consecutive elements in a sorted array.",
    "code": "```scala\nobject LargestGap {\n  def findLargestGap(arr: Array[Int]): Int = {\n    if (arr.length < 2) return 0\n    var maxGap = 0\n    for (i <- 1 until arr.length) {\n      val gap = arr(i) - arr(i - 1)\n      if (gap > maxGap) {\n        maxGap = gap\n      }\n    }\n    maxGap\n  }\n\n  def main(args: Array[String]): Unit = {\n    val sortedArray = Array(1, 3, 6, 10, 15)\n    println(findLargestGap(sortedArray))\n  }\n}\n```"
  },
  {
    "task": "Write a routine to perform element-wise multiplication of two arrays.",
    "code": "```scala\ndef elementWiseMultiplication(arr1: Array[Int], arr2: Array[Int]): Array[Int] = {\n  (arr1 zip arr2).map { case (x, y) => x * y }\n}\n```"
  },
  {
    "task": "Develop a method to split a string into an array of words.",
    "code": "```scala\ndef splitStringIntoWords(input: String): Array[String] = {\n  input.split(\"\\\\s+\")\n}\n```"
  },
  {
    "task": "Implement a function to find the longest contiguous subarray with a sum less than a target.",
    "code": "```scala\ndef longestSubarrayWithSumLessThanTarget(arr: Array[Int], target: Int): Array[Int] = {\n  var start = 0\n  var end = 0\n  var currentSum = 0\n  var maxLength = 0\n  var bestStart = 0\n\n  while (end < arr.length) {\n    currentSum += arr(end)\n    while (currentSum >= target && start <= end) {\n      currentSum -= arr(start)\n      start += 1\n    }\n    if (end - start + 1 > maxLength) {\n      maxLength = end - start + 1\n      bestStart = start\n    }\n    end += 1\n  }\n\n  arr.slice(bestStart, bestStart + maxLength)\n}\n```"
  },
  {
    "task": "Create a script to rotate a 2D array (matrix) 180 degrees.",
    "code": "```scala\nobject RotateMatrix180Degrees {\n  def rotate180(matrix: Array[Array[Int]]): Array[Array[Int]] = {\n    val numRows = matrix.length\n    val numCols = if (numRows > 0) matrix(0).length else 0\n    val rotatedMatrix = Array.ofDim[Int](numRows, numCols)\n    \n    for (i <- 0 until numRows) {\n      for (j <- 0 until numCols) {\n        rotatedMatrix(numRows - i - 1)(numCols - j - 1) = matrix(i)(j)\n      }\n    }\n    rotatedMatrix\n  }\n\n  def main(args: Array[String]): Unit = {\n    val matrix = Array(\n      Array(1, 2, 3),\n      Array(4, 5, 6),\n      Array(7, 8, 9)\n    )\n    \n    val rotatedMatrix = rotate180(matrix)\n    rotatedMatrix.foreach(row => println(row.mkString(\" \")))\n  }\n}\n```"
  },
  {
    "task": "Write a program to convert an array of binary digits to its decimal equivalent.",
    "code": "```scala\nobject BinaryToDecimal {\n  def main(args: Array[String]): Unit = {\n    val binaryArray = Array(1, 0, 1, 1) // Example binary array\n    val decimalValue = binaryToDecimal(binaryArray)\n    println(s\"Decimal equivalent: $decimalValue\")\n  }\n\n  def binaryToDecimal(binaryArray: Array[Int]): Int = {\n    binaryArray.reverse.zipWithIndex.map {\n      case (bit, index) => bit * math.pow(2, index).toInt\n    }.sum\n  }\n}\n```"
  },
  {
    "task": "Design a function to return a new array with elements squared from the input array.",
    "code": "```scala\ndef squareElements(arr: Array[Int]): Array[Int] = {\n  arr.map(x => x * x)\n}\n```"
  },
  {
    "task": "Create a method to check if all elements in an array are unique.",
    "code": "```scala\ndef allElementsUnique(arr: Array[Int]): Boolean = {\n  arr.distinct.length == arr.length\n}\n```"
  },
  {
    "task": "Develop a routine to find the indices of all occurrences of a specific element in an array.",
    "code": "```scala\nobject ArrayIndicesFinder {\n  def findIndices(arr: Array[Int], element: Int): Array[Int] = {\n    arr.zipWithIndex.collect { case (value, index) if value == element => index }\n  }\n\n  def main(args: Array[String]): Unit = {\n    val array = Array(1, 2, 3, 4, 2, 5, 2)\n    val element = 2\n    val indices = findIndices(array, element)\n    println(indices.mkString(\", \"))\n  }\n}\n```"
  },
  {
    "task": "Implement a function to merge multiple arrays into one.",
    "code": "```scala\ndef mergeArrays[T](arrays: Array[T]*): Array[T] = {\n  arrays.flatten.toArray\n}\n```"
  },
  {
    "task": "Write a script to convert an array of integers into a formatted string.",
    "code": "```scala\nobject ArrayToString {\n  def main(args: Array[String]): Unit = {\n    val numbers: Array[Int] = Array(1, 2, 3, 4, 5)\n    val formattedString: String = numbers.mkString(\", \")\n    println(formattedString)\n  }\n}\n```"
  },
  {
    "task": "Create a program to find the largest sum of any contiguous subarray.",
    "code": "```scala\nobject LargestSumSubarray {\n  def findLargestSumSubarray(arr: Array[Int]): Int = {\n    var maxSoFar = Int.MinValue\n    var maxEndingHere = 0\n\n    for (i <- arr.indices) {\n      maxEndingHere += arr(i)\n      if (maxSoFar < maxEndingHere) {\n        maxSoFar = maxEndingHere\n      }\n      if (maxEndingHere < 0) {\n        maxEndingHere = 0\n      }\n    }\n    maxSoFar\n  }\n\n  def main(args: Array[String]): Unit = {\n    val arr = Array(-2, 1, -3, 4, -1, 2, 1, -5, 4)\n    println(s\"Largest sum of contiguous subarray: ${findLargestSumSubarray(arr)}\")\n  }\n}\n```"
  },
  {
    "task": "Design a function to compare two arrays and return the differences.",
    "code": "```scala\ndef compareArrays[T](arr1: Array[T], arr2: Array[T]): (Array[T], Array[T]) = {\n  val onlyInArr1 = arr1.diff(arr2)\n  val onlyInArr2 = arr2.diff(arr1)\n  (onlyInArr1, onlyInArr2)\n}\n```"
  },
  {
    "task": "Write a method to find the longest subarray with elements in arithmetic progression.",
    "code": "```scala\nobject LongestAPSubarray {\n  def longestAPSubarray(arr: Array[Int]): Array[Int] = {\n    if (arr.length < 2) return arr\n\n    var maxLength = 2\n    var currentLength = 2\n    var endIdx = 1\n\n    for (i <- 2 until arr.length) {\n      if (arr(i) - arr(i - 1) == arr(i - 1) - arr(i - 2)) {\n        currentLength += 1\n      } else {\n        if (currentLength > maxLength) {\n          maxLength = currentLength\n          endIdx = i - 1\n        }\n        currentLength = 2\n      }\n    }\n\n    if (currentLength > maxLength) {\n      maxLength = currentLength\n      endIdx = arr.length - 1\n    }\n\n    arr.slice(endIdx - maxLength + 1, endIdx + 1)\n  }\n}\n```"
  },
  {
    "task": "Develop a routine to remove elements from an array based on a predicate function.",
    "code": "```scala\nobject ArrayUtils {\n  def removeIf[T](array: Array[T], predicate: T => Boolean): Array[T] = {\n    array.filterNot(predicate)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val numbers = Array(1, 2, 3, 4, 5, 6)\n    val result = removeIf(numbers, (x: Int) => x % 2 == 0)\n    println(result.mkString(\", \"))\n  }\n}\n```"
  },
  {
    "task": "Implement a function to determine if two arrays have any common elements.",
    "code": "```scala\ndef haveCommonElements(arr1: Array[Int], arr2: Array[Int]): Boolean = {\n  arr1.exists(arr2.contains)\n}\n\n// Example usage\nval array1 = Array(1, 2, 3, 4, 5)\nval array2 = Array(5, 6, 7, 8, 9)\nprintln(haveCommonElements(array1, array2)) // Output: true\n```"
  },
  {
    "task": "Create a script to initialize an empty array and populate it with user input.",
    "code": "```scala\nimport scala.io.StdIn.readLine\n\nobject UserInputArray {\n  def main(args: Array[String]): Unit = {\n    val arraySize = readLine(\"Enter the number of elements: \").toInt\n    val userArray = new Array[String](arraySize)\n    \n    for (i <- 0 until arraySize) {\n      userArray(i) = readLine(s\"Enter element $i: \")\n    }\n\n    println(\"Array populated with user input:\")\n    userArray.foreach(println)\n  }\n}\n```"
  },
  {
    "task": "Write a program to find the maximum sum of non-adjacent elements in an array.",
    "code": "```scala\nobject MaxSumNonAdjacent {\n  def maxSumNonAdjacent(nums: Array[Int]): Int = {\n    if (nums.isEmpty) return 0\n    \n    var include = nums(0)\n    var exclude = 0\n\n    for (i <- 1 until nums.length) {\n      val newExclude = Math.max(include, exclude)\n      include = exclude + nums(i)\n      exclude = newExclude\n    }\n\n    Math.max(include, exclude)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val nums = Array(3, 2, 5, 10, 7)\n    println(maxSumNonAdjacent(nums)) // Output: 15\n  }\n}\n```"
  },
  {
    "task": "Design a function to shuffle an array randomly.",
    "code": "```scala\nimport scala.util.Random\n\ndef shuffleArray[A](array: Array[A]): Array[A] = {\n  val random = new Random\n  val shuffledArray = array.clone()\n  for (i <- shuffledArray.indices.reverse) {\n    val j = random.nextInt(i + 1)\n    val temp = shuffledArray(i)\n    shuffledArray(i) = shuffledArray(j)\n    shuffledArray(j) = temp\n  }\n  shuffledArray\n}\n```"
  },
  {
    "task": "Create a method to generate a new array where each element is the cumulative product of the input array.",
    "code": "```scala\ndef cumulativeProduct(arr: Array[Int]): Array[Int] = {\n  if (arr.isEmpty) return Array()\n  val result = new Array[Int](arr.length)\n  result(0) = arr(0)\n  for (i <- 1 until arr.length) {\n    result(i) = result(i - 1) * arr(i)\n  }\n  result\n}\n```"
  },
  {
    "task": "Develop a routine to find the largest element in each row of a 2D array.",
    "code": "```scala\nobject MaxInRows {\n  def findMaxInEachRow(matrix: Array[Array[Int]]): Array[Int] = {\n    matrix.map(_.max)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val matrix = Array(\n      Array(1, 2, 3),\n      Array(4, 5, 6),\n      Array(7, 8, 9)\n    )\n    val result = findMaxInEachRow(matrix)\n    result.foreach(println)\n  }\n}\n```"
  },
  {
    "task": "Implement a function to count the number of negative numbers in an array.",
    "code": "```scala\ndef countNegativeNumbers(arr: Array[Int]): Int = {\n  arr.count(_ < 0)\n}\n```"
  },
  {
    "task": "Write a script to find the longest subarray with all distinct elements.",
    "code": "```scala\nobject LongestDistinctSubarray {\n  def longestDistinctSubarray(arr: Array[Int]): Array[Int] = {\n    var start = 0\n    var maxLength = 0\n    var maxStart = 0\n    val seen = scala.collection.mutable.Map[Int, Int]()\n\n    for (end <- arr.indices) {\n      val current = arr(end)\n      if (seen.contains(current) && seen(current) >= start) {\n        start = seen(current) + 1\n      }\n      seen(current) = end\n      if (end - start + 1 > maxLength) {\n        maxLength = end - start + 1\n        maxStart = start\n      }\n    }\n    arr.slice(maxStart, maxStart + maxLength)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val array = Array(1, 2, 1, 3, 4, 3, 5, 6)\n    val result = longestDistinctSubarray(array)\n    println(result.mkString(\", \"))\n  }\n}\n```"
  }
]