[
  {
    "task": "Create a function that calculates the sum of two numbers and returns the result.",
    "code": "```scala\ndef sum(a: Int, b: Int): Int = {\n  a + b\n}\n```"
  },
  {
    "task": "Design a function that takes a string and returns its length.",
    "code": "```scala\ndef stringLength(input: String): Int = {\n  input.length\n}\n```"
  },
  {
    "task": "Write a function that checks if a number is prime and returns a boolean value.",
    "code": "```scala\ndef isPrime(n: Int): Boolean = {\n  if (n <= 1) return false\n  for (i <- 2 to Math.sqrt(n).toInt) {\n    if (n % i == 0) return false\n  }\n  true\n}\n```"
  },
  {
    "task": "Implement a function that returns the highest value in a list of integers.",
    "code": "```scala\ndef maxInList(numbers: List[Int]): Int = {\n  numbers.max\n}\n```"
  },
  {
    "task": "Create a function that accepts a list of words and returns the longest word.",
    "code": "```scala\ndef longestWord(words: List[String]): String = {\n  words.foldLeft(\"\")((longest, current) => if (current.length > longest.length) current else longest)\n}\n```"
  },
  {
    "task": "Write a function that takes a temperature in Celsius and returns the equivalent in Fahrenheit.",
    "code": "```scala\ndef celsiusToFahrenheit(celsius: Double): Double = {\n  celsius * 9.0 / 5.0 + 32.0\n}\n```"
  },
  {
    "task": "Develop a function that returns the factorial of a given number.",
    "code": "```scala\ndef factorial(n: Int): BigInt = {\n  def factHelper(x: Int, accumulator: BigInt): BigInt = {\n    if (x <= 1) accumulator\n    else factHelper(x - 1, x * accumulator)\n  }\n  factHelper(n, 1)\n}\n```"
  },
  {
    "task": "Implement a function that receives a date and returns the day of the week.",
    "code": "```scala\nimport java.time.LocalDate\nimport java.time.format.DateTimeFormatter\n\ndef getDayOfWeek(date: String): String = {\n  val formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")\n  val localDate = LocalDate.parse(date, formatter)\n  localDate.getDayOfWeek.toString\n}\n```"
  },
  {
    "task": "Write a function that calculates the area of a circle given its radius and returns the value.",
    "code": "```scala\ndef calculateCircleArea(radius: Double): Double = {\n  math.Pi * radius * radius\n}\n```"
  },
  {
    "task": "Create a function that converts a string to uppercase and returns the modified string.",
    "code": "```scala\ndef toUpperCase(input: String): String = {\n  input.toUpperCase\n}\n```"
  },
  {
    "task": "Design a function that returns the reverse of a given list.",
    "code": "```scala\ndef reverseList[T](list: List[T]): List[T] = {\n  list.reverse\n}\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns a dictionary with character frequencies.",
    "code": "```scala\ndef characterFrequencies(s: String): Map[Char, Int] = {\n  s.foldLeft(Map.empty[Char, Int]) { (freqMap, char) =>\n    freqMap + (char -> (freqMap.getOrElse(char, 0) + 1))\n  }\n}\n```"
  },
  {
    "task": "Write a function that returns the first non-repeating character in a string.",
    "code": "```scala\ndef firstNonRepeatingCharacter(s: String): Option[Char] = {\n  s.groupBy(identity).collectFirst {\n    case (char, occurrences) if occurrences.length == 1 => char\n  }\n}\n```"
  },
  {
    "task": "Create a function that takes a list of numbers and returns a new list with only even numbers.",
    "code": "```scala\ndef filterEvenNumbers(numbers: List[Int]): List[Int] = {\n  numbers.filter(_ % 2 == 0)\n}\n```"
  },
  {
    "task": "Develop a function that receives a sentence and returns the word count.",
    "code": "```scala\ndef wordCount(sentence: String): Int = {\n  sentence.split(\"\\\\s+\").length\n}\n```"
  },
  {
    "task": "Implement a function that returns the smallest element in an array.",
    "code": "```scala\ndef findSmallestElement(arr: Array[Int]): Int = {\n  arr.min\n}\n```"
  },
  {
    "task": "Write a function that takes two strings and returns true if they are anagrams.",
    "code": "```scala\ndef areAnagrams(s1: String, s2: String): Boolean = {\n  s1.toLowerCase.sorted == s2.toLowerCase.sorted\n}\n```"
  },
  {
    "task": "Create a function that accepts an integer and returns a list of its divisors.",
    "code": "```scala\ndef findDivisors(n: Int): List[Int] = {\n  (1 to n).filter(n % _ == 0).toList\n}\n```"
  },
  {
    "task": "Design a function that returns the square root of a given number.",
    "code": "```scala\nobject SquareRootCalculator {\n  def squareRoot(x: Double): Double = {\n    math.sqrt(x)\n  }\n}\n```"
  },
  {
    "task": "Implement a function that accepts a list and returns it sorted in ascending order.",
    "code": "```scala\ndef sortListAsc(lst: List[Int]): List[Int] = {\n  lst.sorted\n}\n```"
  },
  {
    "task": "Write a function that checks whether a given year is a leap year and returns a boolean.",
    "code": "```scala\ndef isLeapYear(year: Int): Boolean = {\n  (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)\n}\n```"
  },
  {
    "task": "Create a function that receives a list of numbers and returns their average.",
    "code": "```scala\ndef average(numbers: List[Double]): Double = {\n  if (numbers.isEmpty) 0.0 else numbers.sum / numbers.length\n}\n```"
  },
  {
    "task": "Develop a function that returns the nth Fibonacci number.",
    "code": "```scala\ndef fibonacci(n: Int): Int = {\n  def fibHelper(a: Int, b: Int, count: Int): Int = {\n    if (count == 0) a\n    else fibHelper(b, a + b, count - 1)\n  }\n  fibHelper(0, 1, n)\n}\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns it with vowels removed.",
    "code": "```scala\ndef removeVowels(input: String): String = {\n  input.filterNot(\"aeiouAEIOU\".contains(_))\n}\n```"
  },
  {
    "task": "Write a function that takes two dates and returns the number of days between them.",
    "code": "```scala\nimport java.time.LocalDate\nimport java.time.temporal.ChronoUnit\n\ndef daysBetween(date1: LocalDate, date2: LocalDate): Long = {\n  ChronoUnit.DAYS.between(date1, date2)\n}\n```"
  },
  {
    "task": "Create a function that returns the last element of a list.",
    "code": "```scala\ndef getLastElement[T](list: List[T]): Option[T] = list.lastOption\n```"
  },
  {
    "task": "Design a function that calculates the GCD of two numbers and returns it.",
    "code": "```scala\ndef gcd(a: Int, b: Int): Int = {\n  if (b == 0) a else gcd(b, a % b)\n}\n```"
  },
  {
    "task": "Implement a function that takes a list and returns a tuple with the min and max values.",
    "code": "```scala\ndef minMax(list: List[Int]): (Int, Int) = {\n  (list.min, list.max)\n}\n```"
  },
  {
    "task": "Write a function that converts a binary string to its decimal representation and returns it.",
    "code": "```scala\ndef binaryToDecimal(binary: String): Int = {\n  Integer.parseInt(binary, 2)\n}\n```"
  },
  {
    "task": "Create a function that accepts a dictionary and returns a list of its keys.",
    "code": "```scala\ndef getKeys(dict: Map[Any, Any]): List[Any] = {\n  dict.keys.toList\n}\n```"
  },
  {
    "task": "Develop a function that returns the concatenation of two strings.",
    "code": "```scala\ndef concatenateStrings(str1: String, str2: String): String = {\n  str1 + str2\n}\n```"
  },
  {
    "task": "Implement a function that receives a list and returns a new list with duplicates removed.",
    "code": "```scala\ndef removeDuplicates[T](list: List[T]): List[T] = {\n  list.distinct\n}\n```"
  },
  {
    "task": "Write a function that returns the intersection of two lists.",
    "code": "```scala\ndef intersection[T](list1: List[T], list2: List[T]): List[T] = {\n  list1.filter(list2.contains)\n}\n```"
  },
  {
    "task": "Create a function that takes an integer and returns whether it is even or odd as a string.",
    "code": "```scala\ndef evenOrOdd(n: Int): String = {\n  if (n % 2 == 0) \"even\" else \"odd\"\n}\n```"
  },
  {
    "task": "Design a function that returns the number of vowels in a given string.",
    "code": "```scala\ndef countVowels(input: String): Int = {\n  val vowels = Set('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n  input.count(vowels.contains)\n}\n```"
  },
  {
    "task": "Implement a function that counts the occurrences of a substring within a string and returns it.",
    "code": "```scala\ndef countOccurrences(mainString: String, subString: String): Int = {\n  mainString.sliding(subString.length).count(window => window == subString)\n}\n```"
  },
  {
    "task": "Write a function that accepts a list of numbers and returns them sorted in descending order.",
    "code": "```scala\ndef sortDescending(numbers: List[Int]): List[Int] = {\n  numbers.sorted(Ordering[Int].reverse)\n}\n```"
  },
  {
    "task": "Create a function that returns the median of a list of numbers.",
    "code": "```scala\ndef median(numbers: List[Double]): Double = {\n  val sortedNumbers = numbers.sorted\n  val size = sortedNumbers.size\n  if (size % 2 == 0) {\n    (sortedNumbers(size / 2 - 1) + sortedNumbers(size / 2)) / 2\n  } else {\n    sortedNumbers(size / 2)\n  }\n}\n```"
  },
  {
    "task": "Develop a function that receives a sentence and returns it with words in reverse order.",
    "code": "```scala\ndef reverseWords(sentence: String): String = {\n  sentence.split(\" \").reverse.mkString(\" \")\n}\n```"
  },
  {
    "task": "Implement a function that returns the sum of all elements in a matrix.",
    "code": "```scala\ndef sumMatrix(matrix: Array[Array[Int]]): Int = {\n  matrix.flatten.sum\n}\n```"
  },
  {
    "task": "Write a function that accepts a string and returns true if it is a palindrome.",
    "code": "```scala\ndef isPalindrome(s: String): Boolean = {\n  val cleaned = s.replaceAll(\"[^a-zA-Z0-9]\", \"\").toLowerCase\n  cleaned == cleaned.reverse\n}\n```"
  },
  {
    "task": "Create a function that takes a number and returns its binary representation as a string.",
    "code": "```scala\ndef toBinaryString(number: Int): String = {\n  number.toBinaryString\n}\n```"
  },
  {
    "task": "Design a function that returns the number of words in a paragraph.",
    "code": "```scala\ndef countWords(paragraph: String): Int = {\n  paragraph.split(\"\\\\s+\").count(_.nonEmpty)\n}\n```"
  },
  {
    "task": "Implement a function that accepts a list and returns the index of its maximum element.",
    "code": "```scala\ndef indexOfMaxElement(list: List[Int]): Option[Int] = {\n  if (list.isEmpty) None\n  else Some(list.zipWithIndex.maxBy(_._1)._2)\n}\n```"
  },
  {
    "task": "Write a function that takes a list of grades and returns the highest grade.",
    "code": "```scala\ndef highestGrade(grades: List[Int]): Int = {\n  grades.max\n}\n```"
  },
  {
    "task": "Create a function that returns the product of all positive integers up to a given number.",
    "code": "```scala\ndef productUpTo(n: Int): Int = {\n  if (n <= 0) 1\n  else (1 to n).product\n}\n```"
  },
  {
    "task": "Develop a function that receives a string and returns a new string with spaces replaced by hyphens.",
    "code": "```scala\ndef replaceSpacesWithHyphens(input: String): String = {\n  input.replace(\" \", \"-\")\n}\n```"
  },
  {
    "task": "Implement a function that takes a list of integers and returns their sum.",
    "code": "```scala\ndef sumOfList(numbers: List[Int]): Int = {\n  numbers.sum\n}\n```"
  },
  {
    "task": "Write a function that checks if a string is a valid email address and returns a boolean.",
    "code": "```scala\ndef isValidEmail(email: String): Boolean = {\n  val emailRegex = \"^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$\"\n  email.matches(emailRegex)\n}\n```"
  },
  {
    "task": "Create a function that returns the decimal equivalent of a hexadecimal string.",
    "code": "```scala\ndef hexToDecimal(hex: String): Int = {\n  Integer.parseInt(hex, 16)\n}\n```"
  },
  {
    "task": "Design a function that calculates and returns the body mass index based on height and weight.",
    "code": "```scala\nobject BMICalculator {\n  def calculateBMI(weight: Double, height: Double): Double = {\n    weight / (height * height)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val bmi = calculateBMI(70, 1.75)\n    println(f\"BMI is: $bmi%.2f\")\n  }\n}\n```"
  },
  {
    "task": "Implement a function that returns the initials of a person's name given a full name.",
    "code": "```scala\ndef getInitials(fullName: String): String = {\n  fullName.split(\" \").map(_.charAt(0).toUpper).mkString(\"\")\n}\n```"
  },
  {
    "task": "Write a function that accepts a list of names and returns them sorted alphabetically.",
    "code": "```scala\ndef sortNames(names: List[String]): List[String] = {\n  names.sorted\n}\n```"
  },
  {
    "task": "Create a function that takes a list of integers and returns a list of their squares.",
    "code": "```scala\ndef squareList(nums: List[Int]): List[Int] = {\n  nums.map(n => n * n)\n}\n```"
  },
  {
    "task": "Develop a function that returns the common elements between two sets.",
    "code": "```scala\ndef commonElements[T](set1: Set[T], set2: Set[T]): Set[T] = {\n  set1.intersect(set2)\n}\n```"
  },
  {
    "task": "Implement a function that receives a list of strings and returns the shortest string.",
    "code": "```scala\ndef shortestString(strings: List[String]): String = {\n  strings.minBy(_.length)\n}\n```"
  },
  {
    "task": "Write a function that returns the sum of digits of a given integer.",
    "code": "```scala\ndef sumOfDigits(n: Int): Int = {\n  n.abs.toString.map(_.asDigit).sum\n}\n```"
  },
  {
    "task": "Create a function that takes a matrix and returns its transpose.",
    "code": "```scala\ndef transpose(matrix: Array[Array[Int]]): Array[Array[Int]] = {\n  if (matrix.isEmpty) Array.empty[Array[Int]]\n  else Array.tabulate(matrix(0).length, matrix.length)((i, j) => matrix(j)(i))\n}\n```"
  },
  {
    "task": "Design a function that returns the percentage of uppercase letters in a string.",
    "code": "```scala\ndef percentageOfUppercase(s: String): Double = {\n  if (s.isEmpty) 0.0\n  else {\n    val uppercaseCount = s.count(_.isUpper)\n    (uppercaseCount.toDouble / s.length) * 100\n  }\n}\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns it with each word capitalized.",
    "code": "```scala\ndef capitalizeWords(input: String): String = {\n  input.split(\" \").map(_.capitalize).mkString(\" \")\n}\n```"
  },
  {
    "task": "Write a function that takes a list and returns the difference between the max and min values.",
    "code": "```scala\ndef maxMinDifference(lst: List[Int]): Int = {\n  if (lst.isEmpty) 0\n  else lst.max - lst.min\n}\n```"
  },
  {
    "task": "Create a function that returns a list containing the first n prime numbers.",
    "code": "```scala\nobject PrimeNumbers {\n  def isPrime(num: Int): Boolean = {\n    if (num <= 1) return false\n    for (i <- 2 to Math.sqrt(num).toInt) {\n      if (num % i == 0) return false\n    }\n    true\n  }\n\n  def firstNPrimes(n: Int): List[Int] = {\n    var primes = List[Int]()\n    var num = 2\n    while (primes.length < n) {\n      if (isPrime(num)) {\n        primes = primes :+ num\n      }\n      num += 1\n    }\n    primes\n  }\n}\n```"
  },
  {
    "task": "Develop a function that receives a dictionary and returns a new dictionary with keys and values swapped.",
    "code": "```scala\ndef swapDictionary[K, V](dict: Map[K, V]): Map[V, K] = {\n  dict.map(_.swap)\n}\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns the frequency of each word.",
    "code": "```scala\ndef wordFrequency(text: String): Map[String, Int] = {\n  text.split(\"\\\\s+\").foldLeft(Map.empty[String, Int]) {\n    (freq, word) => freq + (word -> (freq.getOrElse(word, 0) + 1))\n  }\n}\n```"
  },
  {
    "task": "Write a function that takes two numbers and returns their greatest common divisor.",
    "code": "```scala\ndef gcd(a: Int, b: Int): Int = {\n  if (b == 0) a else gcd(b, a % b)\n}\n```"
  },
  {
    "task": "Create a function that returns the number of consonants in a given string.",
    "code": "```scala\ndef countConsonants(input: String): Int = {\n  val consonants = \"bcdfghjklmnpqrstvwxyz\"\n  input.toLowerCase.count(char => consonants.contains(char))\n}\n```"
  },
  {
    "task": "Design a function that checks if a number is a perfect square and returns a boolean.",
    "code": "```scala\ndef isPerfectSquare(num: Int): Boolean = {\n  val sqrt = math.sqrt(num)\n  sqrt == sqrt.toInt\n}\n```"
  },
  {
    "task": "Implement a function that takes a list of numbers and returns the mode.",
    "code": "```scala\ndef findMode(numbers: List[Int]): Option[Int] = {\n  if (numbers.isEmpty) None\n  else {\n    val numberFrequency = numbers.groupBy(identity).view.mapValues(_.size)\n    val maxFrequency = numberFrequency.values.max\n    numberFrequency.filter(_._2 == maxFrequency).keys.headOption\n  }\n}\n```"
  },
  {
    "task": "Write a function that accepts a string and returns a new string with characters in reverse order.",
    "code": "```scala\ndef reverseString(input: String): String = {\n  input.reverse\n}\n```"
  },
  {
    "task": "Create a function that returns the sum of all even numbers in a list.",
    "code": "```scala\ndef sumOfEvens(numbers: List[Int]): Int = {\n  numbers.filter(_ % 2 == 0).sum\n}\n```"
  },
  {
    "task": "Develop a function that receives two lists and returns their union.",
    "code": "```scala\ndef union[T](list1: List[T], list2: List[T]): List[T] = {\n  (list1 ++ list2).distinct\n}\n```"
  },
  {
    "task": "Implement a function that takes a string and returns the number of unique characters.",
    "code": "```scala\ndef countUniqueCharacters(s: String): Int = {\n  s.toSet.size\n}\n```"
  },
  {
    "task": "Write a function that returns the cube of a given number.",
    "code": "```scala\ndef cube(x: Double): Double = {\n  x * x * x\n}\n```"
  },
  {
    "task": "Create a function that calculates the power of a number given a base and exponent and returns the result.",
    "code": "```scala\ndef power(base: Double, exponent: Int): Double = {\n  Math.pow(base, exponent)\n}\n```"
  },
  {
    "task": "Design a function that accepts a URL and returns its domain name.",
    "code": "```scala\ndef getDomainName(url: String): String = {\n  val pattern = \"^(?:https?://)?(?:www\\\\.)?([^/]+)\".r\n  pattern.findFirstMatchIn(url) match {\n    case Some(m) => m.group(1)\n    case None => \"\"\n  }\n}\n```"
  },
  {
    "task": "Implement a function that takes a sentence and returns it with each letter shifted by one in the alphabet.",
    "code": "```scala\ndef shiftSentence(sentence: String): String = {\n  sentence.map {\n    case c if c.isLetter =>\n      val base = if (c.isLower) 'a' else 'A'\n      ((c - base + 1) % 26 + base).toChar\n    case c => c\n  }\n}\n```"
  },
  {
    "task": "Write a function that checks if a list is sorted and returns a boolean.",
    "code": "```scala\ndef isSorted[T](list: List[T])(implicit ord: Ordering[T]): Boolean = {\n  list match {\n    case Nil => true\n    case _ :: Nil => true\n    case x :: y :: rest => ord.lteq(x, y) && isSorted(y :: rest)\n  }\n}\n```"
  },
  {
    "task": "Create a function that returns the longest increasing subsequence in a list of numbers.",
    "code": "```scala\ndef longestIncreasingSubsequence(nums: List[Int]): List[Int] = {\n  if (nums.isEmpty) return List()\n\n  val lengths = Array.fill(nums.length)(1)\n  val previous = Array.fill(nums.length)(-1)\n\n  for (i <- nums.indices; j <- 0 until i) {\n    if (nums(j) < nums(i) && lengths(j) + 1 > lengths(i)) {\n      lengths(i) = lengths(j) + 1\n      previous(i) = j\n    }\n  }\n\n  val maxLengthIndex = lengths.indices.maxBy(lengths)\n  def buildSequence(index: Int, acc: List[Int]): List[Int] = {\n    if (index == -1) acc\n    else buildSequence(previous(index), nums(index) :: acc)\n  }\n\n  buildSequence(maxLengthIndex, Nil)\n}\n```"
  },
  {
    "task": "Develop a function that calculates and returns the compound interest for given principal, rate, and time.",
    "code": "```scala\nobject CompoundInterestCalculator {\n  def calculateCompoundInterest(principal: Double, rate: Double, time: Double): Double = {\n    principal * Math.pow((1 + rate), time)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val principal = 1000.0\n    val rate = 0.05\n    val time = 10.0\n    val compoundInterest = calculateCompoundInterest(principal, rate, time)\n    println(s\"Compound Interest: $compoundInterest\")\n  }\n}\n```"
  },
  {
    "task": "Implement a function that accepts two strings and returns their longest common substring.",
    "code": "```scala\nobject LongestCommonSubstring {\n  def longestCommonSubstring(s1: String, s2: String): String = {\n    val dp = Array.ofDim[Int](s1.length + 1, s2.length + 1)\n    var maxLength = 0\n    var endIndex = 0\n\n    for (i <- 1 to s1.length; j <- 1 to s2.length) {\n      if (s1(i - 1) == s2(j - 1)) {\n        dp(i)(j) = dp(i - 1)(j - 1) + 1\n        if (dp(i)(j) > maxLength) {\n          maxLength = dp(i)(j)\n          endIndex = i\n        }\n      }\n    }\n\n    s1.substring(endIndex - maxLength, endIndex)\n  }\n}\n```"
  },
  {
    "task": "Write a function that takes a number and returns true if it is a palindrome.",
    "code": "```scala\ndef isPalindrome(number: Int): Boolean = {\n  val str = number.toString\n  str == str.reverse\n}\n```"
  },
  {
    "task": "Create a function that returns the average length of words in a given sentence.",
    "code": "```scala\ndef averageWordLength(sentence: String): Double = {\n  val words = sentence.split(\"\\\\s+\").filter(_.nonEmpty)\n  if (words.isEmpty) 0.0\n  else words.map(_.length).sum.toDouble / words.length\n}\n```"
  },
  {
    "task": "Design a function that checks if a string contains only digits and returns a boolean.",
    "code": "```scala\ndef isDigitsOnly(input: String): Boolean = {\n  input.forall(_.isDigit)\n}\n```"
  },
  {
    "task": "Implement a function that receives a list of tuples and returns a list of the first elements.",
    "code": "```scala\ndef getFirstElements[T](tuples: List[(T, _)]): List[T] = {\n  tuples.map(_._1)\n}\n```"
  },
  {
    "task": "Write a function that takes a year and returns the Chinese zodiac sign for that year.",
    "code": "```scala\ndef chineseZodiac(year: Int): String = {\n  val zodiacSigns = Array(\n    \"Monkey\", \"Rooster\", \"Dog\", \"Pig\", \"Rat\", \"Ox\",\n    \"Tiger\", \"Rabbit\", \"Dragon\", \"Snake\", \"Horse\", \"Goat\"\n  )\n  zodiacSigns((year - 1900) % 12)\n}\n```"
  },
  {
    "task": "Create a function that returns the number of trailing zeros in a factorial of a given number.",
    "code": "```scala\ndef trailingZeros(n: Int): Int = {\n  var count = 0\n  var i = 5\n  while (n / i >= 1) {\n    count += n / i\n    i *= 5\n  }\n  count\n}\n```"
  },
  {
    "task": "Develop a function that accepts a list and returns a new list with elements multiplied by their index.",
    "code": "```scala\ndef multiplyByIndex(lst: List[Int]): List[Int] = {\n  lst.zipWithIndex.map { case (value, index) => value * index }\n}\n```"
  },
  {
    "task": "Implement a function that receives a string and returns a dictionary of word lengths.",
    "code": "```scala\ndef wordLengths(s: String): Map[String, Int] = {\n  s.split(\"\\\\s+\").map(word => word -> word.length).toMap\n}\n```"
  },
  {
    "task": "Write a function that takes a list of integers and returns a list of numbers that are divisible by 3.",
    "code": "```scala\ndef divisibleByThree(numbers: List[Int]): List[Int] = {\n  numbers.filter(_ % 3 == 0)\n}\n```"
  },
  {
    "task": "Create a function that returns the result of a quadratic equation given its coefficients.",
    "code": "```scala\ndef quadraticEquation(a: Double, b: Double, c: Double): (Double, Double) = {\n  val discriminant = math.sqrt(b * b - 4 * a * c)\n  val root1 = (-b + discriminant) / (2 * a)\n  val root2 = (-b - discriminant) / (2 * a)\n  (root1, root2)\n}\n```"
  },
  {
    "task": "Design a function that checks if two lists have any elements in common and returns a boolean.",
    "code": "```scala\ndef haveCommonElements[A](list1: List[A], list2: List[A]): Boolean = {\n  list1.exists(list2.contains)\n}\n```"
  },
  {
    "task": "Implement a function that accepts a list and returns the sum of its elements using recursion.",
    "code": "```scala\ndef sumListRecursive(lst: List[Int]): Int = {\n  lst match {\n    case Nil => 0\n    case head :: tail => head + sumListRecursive(tail)\n  }\n}\n```"
  },
  {
    "task": "Write a function that takes a list of numbers and returns the variance.",
    "code": "```scala\ndef variance(numbers: List[Double]): Double = {\n  val mean = numbers.sum / numbers.length\n  val squaredDiffs = numbers.map(num => math.pow(num - mean, 2))\n  squaredDiffs.sum / numbers.length\n}\n```"
  },
  {
    "task": "Create a function that returns the ASCII value of a given character.",
    "code": "```scala\ndef getAsciiValue(char: Char): Int = char.toInt\n```"
  },
  {
    "task": "Develop a function that takes a number and returns the number of bits required for its binary representation.",
    "code": "```scala\ndef bitsRequired(n: Int): Int = {\n  if (n == 0) 1 else n.toBinaryString.length\n}\n```"
  }
]