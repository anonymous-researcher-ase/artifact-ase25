[
  {
    "task": "Write a function that takes two numbers and returns their sum.",
    "code": "```scala\ndef sum(a: Double, b: Double): Double = a + b\n```"
  },
  {
    "task": "Create a program that calculates the difference between two given integers.",
    "code": "```scala\nobject ArithmeticOperations {\n  def main(args: Array[String]): Unit = {\n    val num1 = 10\n    val num2 = 5\n    val difference = num1 - num2\n    println(s\"The difference is: $difference\")\n  }\n}\n```"
  },
  {
    "task": "Design a function to multiply two floating-point numbers and return the result.",
    "code": "```scala\ndef multiply(a: Double, b: Double): Double = a * b\n```"
  },
  {
    "task": "Implement a function that divides two numbers and handles division by zero exceptions.",
    "code": "```scala\ndef safeDivide(numerator: Double, denominator: Double): Either[String, Double] = {\n  if (denominator == 0) {\n    Left(\"Error: Division by zero\")\n  } else {\n    Right(numerator / denominator)\n  }\n}\n```"
  },
  {
    "task": "Build a calculator that can perform addition, subtraction, multiplication, and division on user-provided inputs.",
    "code": "```scala\nobject Calculator {\n  def main(args: Array[String]): Unit = {\n    val scanner = new java.util.Scanner(System.in)\n\n    println(\"Enter first number: \")\n    val num1 = scanner.nextDouble()\n\n    println(\"Enter second number: \")\n    val num2 = scanner.nextDouble()\n\n    println(\"Choose operation (+, -, *, /): \")\n    val operation = scanner.next()\n\n    val result = operation match {\n      case \"+\" => num1 + num2\n      case \"-\" => num1 - num2\n      case \"*\" => num1 * num2\n      case \"/\" => if (num2 != 0) num1 / num2 else {\n        println(\"Error: Division by zero\")\n        Double.NaN\n      }\n      case _ =>\n        println(\"Invalid operation\")\n        Double.NaN\n    }\n\n    if (!result.isNaN) {\n      println(s\"Result: $result\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Write a script to compute the average of a list of numbers using arithmetic operations.",
    "code": "```scala\nobject AverageCalculator {\n  def main(args: Array[String]): Unit = {\n    val numbers = List(10.0, 20.0, 30.0, 40.0, 50.0)\n    val sum = numbers.sum\n    val average = sum / numbers.length\n    println(s\"The average is: $average\")\n  }\n}\n```"
  },
  {
    "task": "Create a function that returns the remainder of the division of two integers.",
    "code": "```scala\ndef remainder(a: Int, b: Int): Int = a % b\n```"
  },
  {
    "task": "Develop a function that can add a variable number of arguments and return the total.",
    "code": "```scala\ndef addNumbers(numbers: Int*): Int = {\n  numbers.sum\n}\n```"
  },
  {
    "task": "Write a program that subtracts a series of numbers from an initial value.",
    "code": "```scala\nobject SubtractSeries {\n  def main(args: Array[String]): Unit = {\n    val initialValue: Int = 100\n    val numbersToSubtract: List[Int] = List(10, 20, 5, 15)\n    val result: Int = numbersToSubtract.foldLeft(initialValue)(_ - _)\n    println(s\"Result after subtraction: $result\")\n  }\n}\n```"
  },
  {
    "task": "Implement a function that multiplies all elements in an array and returns the product.",
    "code": "```scala\ndef multiplyArrayElements(arr: Array[Int]): Int = {\n  arr.product\n}\n```"
  },
  {
    "task": "Design a program that divides a number by another and rounds the result to two decimal places.",
    "code": "```scala\nobject ArithmeticOperations {\n  def main(args: Array[String]): Unit = {\n    val dividend = 10.0\n    val divisor = 3.0\n    val result = BigDecimal(dividend / divisor).setScale(2, BigDecimal.RoundingMode.HALF_UP).toDouble\n    println(result)\n  }\n}\n```"
  },
  {
    "task": "Create a function that performs arithmetic operations on complex numbers.",
    "code": "```scala\ncase class Complex(real: Double, imaginary: Double) {\n  def +(that: Complex): Complex = {\n    Complex(this.real + that.real, this.imaginary + that.imaginary)\n  }\n\n  def -(that: Complex): Complex = {\n    Complex(this.real - that.real, this.imaginary - that.imaginary)\n  }\n\n  def *(that: Complex): Complex = {\n    Complex(this.real * that.real - this.imaginary * that.imaginary, \n            this.real * that.imaginary + this.imaginary * that.real)\n  }\n\n  def /(that: Complex): Complex = {\n    val denominator = that.real * that.real + that.imaginary * that.imaginary\n    Complex((this.real * that.real + this.imaginary * that.imaginary) / denominator,\n            (this.imaginary * that.real - this.real * that.imaginary) / denominator)\n  }\n}\n\nobject ComplexOperations {\n  def performOperation(a: Complex, b: Complex, operation: String): Complex = {\n    operation match {\n      case \"add\" => a + b\n      case \"subtract\" => a - b\n      case \"multiply\" => a * b\n      case \"divide\" => a / b\n      case _ => throw new IllegalArgumentException(\"Invalid operation\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Write a function to calculate the area of a rectangle given its length and width using multiplication.",
    "code": "```scala\ndef calculateRectangleArea(length: Double, width: Double): Double = {\n  length * width\n}\n```"
  },
  {
    "task": "Build a program that converts a price in dollars to another currency using multiplication with exchange rates.",
    "code": "```scala\nobject CurrencyConverter {\n  def convert(amount: Double, exchangeRate: Double): Double = {\n    amount * exchangeRate\n  }\n\n  def main(args: Array[String]): Unit = {\n    val dollars = 100.0\n    val exchangeRate = 0.85 // Example exchange rate for USD to another currency\n    val convertedAmount = convert(dollars, exchangeRate)\n    println(s\"Converted Amount: $convertedAmount\")\n  }\n}\n```"
  },
  {
    "task": "Implement a function that checks if a number is divisible by another and returns a boolean.",
    "code": "```scala\ndef isDivisible(dividend: Int, divisor: Int): Boolean = {\n  dividend % divisor == 0\n}\n```"
  },
  {
    "task": "Write a script to sum the digits of an integer using arithmetic operations.",
    "code": "```scala\nobject SumOfDigits {\n  def sumDigits(n: Int): Int = {\n    var number = n\n    var sum = 0\n    while (number != 0) {\n      sum += number % 10\n      number /= 10\n    }\n    sum\n  }\n\n  def main(args: Array[String]): Unit = {\n    val number = 12345\n    println(s\"The sum of the digits of $number is: ${sumDigits(number)}\")\n  }\n}\n```"
  },
  {
    "task": "Develop a function that applies a discount percentage to a price using subtraction and multiplication.",
    "code": "```scala\ndef applyDiscount(price: Double, discountPercentage: Double): Double = {\n  val discountAmount = price * (discountPercentage / 100)\n  price - discountAmount\n}\n```"
  },
  {
    "task": "Create a program to calculate the yearly salary given an hourly wage and hours worked per week.",
    "code": "```scala\nobject SalaryCalculator {\n  def main(args: Array[String]): Unit = {\n    val hourlyWage: Double = 25.0 // Example hourly wage\n    val hoursPerWeek: Double = 40.0 // Example hours worked per week\n\n    val yearlySalary: Double = calculateYearlySalary(hourlyWage, hoursPerWeek)\n    println(f\"Yearly Salary: $$${yearlySalary}%.2f\")\n  }\n\n  def calculateYearlySalary(hourlyWage: Double, hoursPerWeek: Double): Double = {\n    val weeksPerYear: Double = 52.0\n    hourlyWage * hoursPerWeek * weeksPerYear\n  }\n}\n```"
  },
  {
    "task": "Design a function that calculates the compound interest over a given period using arithmetic operations.",
    "code": "```scala\nobject CompoundInterestCalculator {\n  def calculateCompoundInterest(principal: Double, rate: Double, timesCompounded: Int, years: Int): Double = {\n    principal * Math.pow(1 + rate / timesCompounded, timesCompounded * years)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val principal = 1000.0\n    val rate = 0.05\n    val timesCompounded = 4\n    val years = 5\n    val compoundInterest = calculateCompoundInterest(principal, rate, timesCompounded, years)\n    println(s\"Compound Interest: $$compoundInterest\")\n  }\n}\n```"
  },
  {
    "task": "Write a program that scales a 2D point by a given factor using multiplication.",
    "code": "```scala\nobject PointScaler {\n  case class Point(x: Double, y: Double)\n\n  def scalePoint(point: Point, factor: Double): Point = {\n    Point(point.x * factor, point.y * factor)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val point = Point(3.0, 4.0)\n    val factor = 2.5\n    val scaledPoint = scalePoint(point, factor)\n    println(s\"Scaled Point: (${scaledPoint.x}, ${scaledPoint.y})\")\n  }\n}\n```"
  },
  {
    "task": "Implement a function that calculates the perimeter of a triangle given its side lengths.",
    "code": "```scala\nobject TrianglePerimeter {\n  def calculatePerimeter(side1: Double, side2: Double, side3: Double): Double = {\n    side1 + side2 + side3\n  }\n}\n```"
  },
  {
    "task": "Create a function to determine if three sides can form a right triangle using the Pythagorean theorem.",
    "code": "```scala\ndef isRightTriangle(a: Double, b: Double, c: Double): Boolean = {\n  val sides = List(a, b, c).sorted\n  val (x, y, z) = (sides(0), sides(1), sides(2))\n  Math.abs(x * x + y * y - z * z) < 1e-10\n}\n```"
  },
  {
    "task": "Write a script that calculates the total cost of items in a shopping cart using addition.",
    "code": "```scala\nobject ShoppingCart {\n  def main(args: Array[String]): Unit = {\n    val prices = List(19.99, 5.49, 3.75, 12.89)\n    val totalCost = prices.sum\n    println(f\"Total cost: $$${totalCost}%.2f\")\n  }\n}\n```"
  },
  {
    "task": "Develop a function that returns the quotient and remainder of a division operation.",
    "code": "```scala\nobject ArithmeticOperations {\n  def divisionWithRemainder(dividend: Int, divisor: Int): (Int, Int) = {\n    val quotient = dividend / divisor\n    val remainder = dividend % divisor\n    (quotient, remainder)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val (q, r) = divisionWithRemainder(10, 3)\n    println(s\"Quotient: $q, Remainder: $r\")\n  }\n}\n```"
  },
  {
    "task": "Build a program that simulates a basic checkout system using arithmetic operations for totals and discounts.",
    "code": "```scala\nobject CheckoutSystem {\n  def main(args: Array[String]): Unit = {\n    val items = List(\n      (\"Apple\", 2.50, 3),\n      (\"Banana\", 1.20, 2),\n      (\"Milk\", 3.00, 1)\n    )\n\n    val subtotal = items.map { case (_, price, quantity) => price * quantity }.sum\n\n    val discountPercentage = 10.0\n    val discountAmount = (discountPercentage / 100) * subtotal\n    val total = subtotal - discountAmount\n\n    println(f\"Subtotal: $$${subtotal}%.2f\")\n    println(f\"Discount (${discountPercentage}%): $$${discountAmount}%.2f\")\n    println(f\"Total: $$${total}%.2f\")\n  }\n}\n```"
  },
  {
    "task": "Implement a function to calculate the distance between two points on a plane using subtraction and square roots.",
    "code": "```scala\nobject DistanceCalculator {\n  def calculateDistance(x1: Double, y1: Double, x2: Double, y2: Double): Double = {\n    val dx = x2 - x1\n    val dy = y2 - y1\n    Math.sqrt(dx * dx + dy * dy)\n  }\n}\n```"
  },
  {
    "task": "Write a function that calculates the speed of a vehicle given distance and time using division.",
    "code": "```scala\nobject SpeedCalculator {\n  def calculateSpeed(distance: Double, time: Double): Double = {\n    distance / time\n  }\n}\n```"
  },
  {
    "task": "Create a program to compute the total minutes in a given number of hours using multiplication.",
    "code": "```scala\nobject MinutesCalculator {\n  def main(args: Array[String]): Unit = {\n    val hours = 5 // Example input\n    val minutesPerHour = 60\n    val totalMinutes = hours * minutesPerHour\n    println(s\"Total minutes in $hours hours: $totalMinutes\")\n  }\n}\n```"
  },
  {
    "task": "Design a function that determines the number of dozens of eggs from a given total number of eggs.",
    "code": "```scala\ndef dozensOfEggs(totalEggs: Int): Int = totalEggs / 12\n```"
  },
  {
    "task": "Write a script to find the greatest common divisor of two numbers using arithmetic operations.",
    "code": "```scala\nobject GCDCalculator {\n  def gcd(a: Int, b: Int): Int = {\n    if (b == 0) a else gcd(b, a % b)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val num1 = 56\n    val num2 = 98\n    println(s\"The GCD of $num1 and $num2 is ${gcd(num1, num2)}\")\n  }\n}\n\nGCDCalculator.main(Array())\n```"
  },
  {
    "task": "Develop a program that calculates the total weight of multiple items using addition.",
    "code": "```scala\nobject TotalWeightCalculator {\n  def main(args: Array[String]): Unit = {\n    val weights = List(2.5, 3.0, 1.75, 4.25, 2.0)\n    val totalWeight = weights.sum\n    println(s\"Total weight: $totalWeight\")\n  }\n}\n```"
  },
  {
    "task": "Implement a function to convert a temperature from Celsius to Fahrenheit using multiplication and addition.",
    "code": "```scala\nobject TemperatureConverter {\n  def celsiusToFahrenheit(celsius: Double): Double = {\n    celsius * 9.0 / 5.0 + 32.0\n  }\n\n  def main(args: Array[String]): Unit = {\n    val celsius = 25.0\n    println(s\"$celsius\u00b0C is ${celsiusToFahrenheit(celsius)}\u00b0F\")\n  }\n}\n```"
  },
  {
    "task": "Create a program that determines the age difference between two people given their birth years.",
    "code": "```scala\nobject AgeDifferenceCalculator {\n  def main(args: Array[String]): Unit = {\n    val birthYearPerson1 = 1985\n    val birthYearPerson2 = 1990\n\n    val ageDifference = math.abs(birthYearPerson1 - birthYearPerson2)\n\n    println(s\"The age difference is $ageDifference years.\")\n  }\n}\n```"
  },
  {
    "task": "Write a function to calculate the final price after applying tax and discount using addition and subtraction.",
    "code": "```scala\ndef calculateFinalPrice(initialPrice: Double, taxRate: Double, discount: Double): Double = {\n  val priceWithTax = initialPrice + (initialPrice * taxRate)\n  val finalPrice = priceWithTax - discount\n  finalPrice\n}\n```"
  },
  {
    "task": "Design a program to compute the net profit given total revenue and expenses.",
    "code": "```scala\nobject NetProfitCalculator {\n  def computeNetProfit(totalRevenue: Double, totalExpenses: Double): Double = {\n    totalRevenue - totalExpenses\n  }\n\n  def main(args: Array[String]): Unit = {\n    val totalRevenue = 10000.0\n    val totalExpenses = 7500.0\n    val netProfit = computeNetProfit(totalRevenue, totalExpenses)\n    println(s\"Net Profit: $$${netProfit}\")\n  }\n}\n```"
  },
  {
    "task": "Develop a function to calculate the BMI given weight and height using division and multiplication.",
    "code": "```scala\nobject BMICalculator {\n  def calculateBMI(weight: Double, height: Double): Double = {\n    weight / (height * height)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val weight = 70.0 // example weight in kilograms\n    val height = 1.75 // example height in meters\n    val bmi = calculateBMI(weight, height)\n    println(f\"Your BMI is: $bmi%.2f\")\n  }\n}\n```"
  },
  {
    "task": "Create a function that calculates the midpoint between two numbers using addition and division.",
    "code": "```scala\ndef calculateMidpoint(a: Double, b: Double): Double = {\n  (a + b) / 2\n}\n```"
  },
  {
    "task": "Write a program that outputs the result of dividing a number by another with remainder.",
    "code": "```scala\nobject ArithmeticOperations {\n  def main(args: Array[String]): Unit = {\n    val dividend = 10\n    val divisor = 3\n    val quotient = dividend / divisor\n    val remainder = dividend % divisor\n    println(s\"Quotient: $quotient, Remainder: $remainder\")\n  }\n}\n```"
  },
  {
    "task": "Implement a function to calculate the factorial of a number using multiplication.",
    "code": "```scala\ndef factorial(n: Int): Int = {\n  (1 to n).product\n}\n```"
  },
  {
    "task": "Build a script to find the average of three numbers using addition and division.",
    "code": "```scala\nobject AverageCalculator {\n  def main(args: Array[String]): Unit = {\n    val num1 = 10\n    val num2 = 20\n    val num3 = 30\n\n    val sum = num1 + num2 + num3\n    val average = sum / 3.0\n\n    println(s\"The average of the three numbers is: $average\")\n  }\n}\n```"
  },
  {
    "task": "Create a program that simulates a simple bank account using arithmetic operations for deposits and withdrawals.",
    "code": "```scala\nclass BankAccount(var balance: Double) {\n  def deposit(amount: Double): Unit = {\n    if (amount > 0) {\n      balance += amount\n    }\n  }\n\n  def withdraw(amount: Double): Unit = {\n    if (amount > 0 && amount <= balance) {\n      balance -= amount\n    }\n  }\n\n  def getBalance: Double = balance\n}\n\nobject BankSimulation extends App {\n  val account = new BankAccount(100.0)\n  account.deposit(50.0)\n  account.withdraw(20.0)\n  println(s\"Current balance: ${account.getBalance}\")\n}\n```"
  },
  {
    "task": "Write a function that computes the cost per item given a total cost and quantity using division.",
    "code": "```scala\ndef costPerItem(totalCost: Double, quantity: Int): Double = {\n  totalCost / quantity\n}\n```"
  },
  {
    "task": "Design a program that calculates the time required to travel a distance at a given speed.",
    "code": "```scala\nobject TravelTimeCalculator extends App {\n  def calculateTravelTime(distance: Double, speed: Double): Double = {\n    distance / speed\n  }\n\n  val distance = 150.0 // Example distance in kilometers\n  val speed = 60.0     // Example speed in kilometers per hour\n\n  val travelTime = calculateTravelTime(distance, speed)\n  println(s\"Time required to travel $distance km at $speed km/h is $travelTime hours\")\n}\n```"
  },
  {
    "task": "Develop a function that returns the absolute difference between two numbers.",
    "code": "```scala\nobject ArithmeticOperations {\n  def absoluteDifference(a: Int, b: Int): Int = {\n    math.abs(a - b)\n  }\n}\n```"
  },
  {
    "task": "Implement a program to compute the geometric mean of a set of numbers using multiplication and roots.",
    "code": "```scala\nobject GeometricMeanCalculator {\n  def geometricMean(numbers: Seq[Double]): Double = {\n    val product = numbers.product\n    Math.pow(product, 1.0 / numbers.size)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val numbers = Seq(2.0, 4.0, 8.0)\n    val result = geometricMean(numbers)\n    println(s\"The geometric mean is $result\")\n  }\n}\n```"
  },
  {
    "task": "Write a function to calculate the total interest paid on a loan using arithmetic operations.",
    "code": "```scala\ndef totalInterestPaid(principal: Double, annualRate: Double, years: Int): Double = {\n  val totalAmount = principal * Math.pow(1 + annualRate / 100, years)\n  totalAmount - principal\n}\n```"
  },
  {
    "task": "Create a program that calculates the sum of even numbers within a specified range.",
    "code": "```scala\nobject SumOfEvenNumbers extends App {\n  def sumOfEvenNumbersInRange(start: Int, end: Int): Int = {\n    (start to end).filter(_ % 2 == 0).sum\n  }\n\n  val start = 1\n  val end = 10\n  val sum = sumOfEvenNumbersInRange(start, end)\n  println(s\"The sum of even numbers from $start to $end is $sum\")\n}\n```"
  },
  {
    "task": "Design a script to determine the final balance in a savings account after regular deposits and withdrawals.",
    "code": "```scala\nobject SavingsAccount {\n  def main(args: Array[String]): Unit = {\n    val initialBalance: Double = 1000.0 // Starting balance\n    val deposits: List[Double] = List(200.0, 150.0, 300.0) // Regular deposits\n    val withdrawals: List[Double] = List(100.0, 50.0, 25.0) // Regular withdrawals\n\n    val totalDeposits: Double = deposits.sum\n    val totalWithdrawals: Double = withdrawals.sum\n\n    val finalBalance: Double = initialBalance + totalDeposits - totalWithdrawals\n\n    println(s\"Final balance in the savings account: $$${finalBalance}\")\n  }\n}\n```"
  },
  {
    "task": "Develop a function to compute the surface area of a cylinder given its radius and height.",
    "code": "```scala\nobject CylinderSurfaceArea {\n  def computeSurfaceArea(radius: Double, height: Double): Double = {\n    val lateralSurfaceArea = 2 * Math.PI * radius * height\n    val topAndBottomArea = 2 * Math.PI * radius * radius\n    lateralSurfaceArea + topAndBottomArea\n  }\n\n  def main(args: Array[String]): Unit = {\n    val radius = 5.0\n    val height = 10.0\n    println(s\"Surface area of the cylinder: ${computeSurfaceArea(radius, height)}\")\n  }\n}\n```"
  },
  {
    "task": "Write a program that outputs the result of an arithmetic sequence given the first term and common difference.",
    "code": "```scala\nobject ArithmeticSequence {\n  def main(args: Array[String]): Unit = {\n    val firstTerm = 5\n    val commonDifference = 3\n    val numberOfTerms = 10\n\n    for (n <- 0 until numberOfTerms) {\n      val term = firstTerm + n * commonDifference\n      println(term)\n    }\n  }\n}\n```"
  },
  {
    "task": "Implement a function that finds the average speed for a trip given total distance and time.",
    "code": "```scala\ndef averageSpeed(totalDistance: Double, totalTime: Double): Double = {\n  totalDistance / totalTime\n}\n```"
  },
  {
    "task": "Create a function to calculate the total cost of a road trip given fuel cost per mile and distance.",
    "code": "```scala\nobject RoadTripCalculator {\n  def totalCost(fuelCostPerMile: Double, distance: Double): Double = {\n    fuelCostPerMile * distance\n  }\n}\n```"
  },
  {
    "task": "Write a script that determines the number of tiles required to cover a floor area using arithmetic operations.",
    "code": "```scala\nobject TileCalculator extends App {\n  def calculateTiles(floorLength: Double, floorWidth: Double, tileLength: Double, tileWidth: Double): Int = {\n    val floorArea = floorLength * floorWidth\n    val tileArea = tileLength * tileWidth\n    Math.ceil(floorArea / tileArea).toInt\n  }\n\n  val floorLength = 10.0 // Example floor length in meters\n  val floorWidth = 5.0   // Example floor width in meters\n  val tileLength = 0.5   // Example tile length in meters\n  val tileWidth = 0.5    // Example tile width in meters\n\n  val numberOfTiles = calculateTiles(floorLength, floorWidth, tileLength, tileWidth)\n  println(s\"Number of tiles required: $numberOfTiles\")\n}\n```"
  },
  {
    "task": "Develop a program to calculate the amount of paint needed to cover a wall given its area.",
    "code": "```scala\nobject PaintCalculator {\n  def main(args: Array[String]): Unit = {\n    val wallHeight: Double = 3.0 // in meters\n    val wallWidth: Double = 4.0 // in meters\n    val areaPerLiter: Double = 10.0 // area covered by one liter of paint in square meters\n\n    val wallArea: Double = wallHeight * wallWidth\n    val paintNeeded: Double = wallArea / areaPerLiter\n\n    println(f\"Paint needed: $paintNeeded%.2f liters\")\n  }\n}\n```"
  },
  {
    "task": "Build a function that calculates the price per unit weight given total price and weight.",
    "code": "```scala\ndef pricePerUnitWeight(totalPrice: Double, weight: Double): Double = {\n  totalPrice / weight\n}\n```"
  },
  {
    "task": "Implement a program that computes the volume of a rectangular prism given its dimensions.",
    "code": "```scala\nobject RectangularPrismVolumeCalculator {\n  def calculateVolume(length: Double, width: Double, height: Double): Double = {\n    length * width * height\n  }\n\n  def main(args: Array[String]): Unit = {\n    val length = 5.0\n    val width = 3.0\n    val height = 2.0\n\n    val volume = calculateVolume(length, width, height)\n    println(s\"The volume of the rectangular prism is: $volume\")\n  }\n}\n```"
  },
  {
    "task": "Write a function to find the percentage increase or decrease between two numbers.",
    "code": "```scala\ndef percentageChange(originalValue: Double, newValue: Double): Double = {\n  ((newValue - originalValue) / originalValue) * 100\n}\n```"
  },
  {
    "task": "Create a program to determine the number of complete weeks within a specified number of days.",
    "code": "```scala\nobject CompleteWeeksCalculator {\n  def main(args: Array[String]): Unit = {\n    val days = 45  // Example number of days\n    val completeWeeks = days / 7\n    println(s\"Number of complete weeks: $completeWeeks\")\n  }\n}\n```"
  },
  {
    "task": "Design a function that calculates the break-even point for a business using cost and revenue data.",
    "code": "```scala\nobject BreakEvenCalculator {\n  def calculateBreakEvenPoint(fixedCosts: Double, variableCostPerUnit: Double, pricePerUnit: Double): Option[Int] = {\n    if (pricePerUnit > variableCostPerUnit) {\n      Some((fixedCosts / (pricePerUnit - variableCostPerUnit)).ceil.toInt)\n    } else {\n      None\n    }\n  }\n\n  def main(args: Array[String]): Unit = {\n    val fixedCosts = 10000.0\n    val variableCostPerUnit = 50.0\n    val pricePerUnit = 75.0\n\n    calculateBreakEvenPoint(fixedCosts, variableCostPerUnit, pricePerUnit) match {\n      case Some(units) => println(s\"Break-even point is $units units.\")\n      case None => println(\"No break-even point.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Develop a program that converts a total number of seconds into hours, minutes, and seconds.",
    "code": "```scala\nobject TimeConverter {\n  def convertSeconds(totalSeconds: Int): (Int, Int, Int) = {\n    val hours = totalSeconds / 3600\n    val minutes = (totalSeconds % 3600) / 60\n    val seconds = totalSeconds % 60\n    (hours, minutes, seconds)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val totalSeconds = 3661 // Example total seconds\n    val (hours, minutes, seconds) = convertSeconds(totalSeconds)\n    println(s\"$totalSeconds seconds is $hours hours, $minutes minutes, and $seconds seconds.\")\n  }\n}\n```"
  },
  {
    "task": "Write a function that calculates the depreciation of an asset over time using arithmetic operations.",
    "code": "```scala\nobject DepreciationCalculator {\n  def calculateDepreciation(initialValue: Double, depreciationRate: Double, years: Int): Double = {\n    initialValue * Math.pow(1 - depreciationRate, years)\n  }\n}\n```"
  },
  {
    "task": "Create a program that computes the final exam grade needed to achieve a target course average.",
    "code": "```scala\nobject FinalExamGradeCalculator {\n  def main(args: Array[String]): Unit = {\n    val currentAverage = 85.0  // Example current average\n    val targetAverage = 90.0   // Example target average\n    val weightOfFinal = 0.4    // Example weight of the final exam\n\n    val finalExamGradeNeeded = computeFinalExamGradeNeeded(currentAverage, targetAverage, weightOfFinal)\n    println(s\"Final exam grade needed: $finalExamGradeNeeded\")\n  }\n\n  def computeFinalExamGradeNeeded(currentAverage: Double, targetAverage: Double, weightOfFinal: Double): Double = {\n    val weightOfCurrent = 1.0 - weightOfFinal\n    (targetAverage - weightOfCurrent * currentAverage) / weightOfFinal\n  }\n}\n```"
  },
  {
    "task": "Implement a function to calculate the total cost of groceries given prices and quantities of items.",
    "code": "```scala\ndef calculateTotalCost(prices: List[Double], quantities: List[Int]): Double = {\n  (prices zip quantities).map { case (price, quantity) => price * quantity }.sum\n}\n```"
  },
  {
    "task": "Write a script that determines the number of years required to double an investment using a fixed interest rate.",
    "code": "```scala\nobject InvestmentDoubling {\n  def main(args: Array[String]): Unit = {\n    val principal = 1000.0\n    val interestRate = 0.05\n    var years = 0\n    var amount = principal\n\n    while (amount < 2 * principal) {\n      amount += amount * interestRate\n      years += 1\n    }\n\n    println(s\"Years required to double the investment: $years\")\n  }\n}\n```"
  },
  {
    "task": "Develop a function that computes the harmonic mean of a set of numbers using division and addition.",
    "code": "```scala\ndef harmonicMean(numbers: Seq[Double]): Double = {\n  val n = numbers.length\n  n / numbers.map(1.0 / _).sum\n}\n```"
  },
  {
    "task": "Create a program to find the sum of the squares of numbers in a given range.",
    "code": "```scala\nobject SumOfSquares extends App {\n  def sumOfSquares(start: Int, end: Int): Int = {\n    (start to end).map(n => n * n).sum\n  }\n\n  // Example usage\n  val start = 1\n  val end = 10\n  println(s\"The sum of squares from $start to $end is: ${sumOfSquares(start, end)}\")\n}\n```"
  },
  {
    "task": "Design a function that calculates the energy consumption of an appliance given power and usage time.",
    "code": "```scala\nobject EnergyCalculator {\n  def calculateEnergyConsumption(power: Double, time: Double): Double = {\n    power * time\n  }\n\n  def main(args: Array[String]): Unit = {\n    val power = 1500.0 // in watts\n    val time = 3.0 // in hours\n    val energyConsumption = calculateEnergyConsumption(power, time)\n    println(s\"Energy Consumption: $energyConsumption Wh\")\n  }\n}\n```"
  },
  {
    "task": "Write a program that simulates a simple stock portfolio using arithmetic operations for buying and selling.",
    "code": "```scala\nobject StockPortfolio extends App {\n  var cash: Double = 10000.0\n  var stocks: Map[String, (Int, Double)] = Map()\n\n  def buyStock(stockSymbol: String, quantity: Int, pricePerStock: Double): Unit = {\n    val cost = quantity * pricePerStock\n    if (cash >= cost) {\n      cash -= cost\n      stocks.get(stockSymbol) match {\n        case Some((existingQty, avgPrice)) =>\n          val newQty = existingQty + quantity\n          val newAvgPrice = (existingQty * avgPrice + cost) / newQty\n          stocks = stocks.updated(stockSymbol, (newQty, newAvgPrice))\n        case None =>\n          stocks += (stockSymbol -> (quantity, pricePerStock))\n      }\n      println(s\"Bought $quantity of $stockSymbol at $$${pricePerStock} each. Total cost: $$${cost}.\")\n    } else {\n      println(s\"Insufficient funds to buy $quantity of $stockSymbol at $$${pricePerStock} each.\")\n    }\n  }\n\n  def sellStock(stockSymbol: String, quantity: Int, pricePerStock: Double): Unit = {\n    stocks.get(stockSymbol) match {\n      case Some((existingQty, avgPrice)) if existingQty >= quantity =>\n        val revenue = quantity * pricePerStock\n        cash += revenue\n        val newQty = existingQty - quantity\n        if (newQty > 0) {\n          stocks = stocks.updated(stockSymbol, (newQty, avgPrice))\n        } else {\n          stocks -= stockSymbol\n        }\n        println(s\"Sold $quantity of $stockSymbol at $$${pricePerStock} each. Total revenue: $$${revenue}.\")\n      case Some((existingQty, _)) =>\n        println(s\"Insufficient stock to sell. Available: $existingQty, Requested: $quantity.\")\n      case None =>\n        println(s\"No stock available to sell for $stockSymbol.\")\n    }\n  }\n\n  def portfolioSummary(): Unit = {\n    println(s\"Current cash: $$${cash}\")\n    if (stocks.isEmpty) {\n      println(\"No stocks in the portfolio.\")\n    } else {\n      println(\"Stock Portfolio:\")\n      stocks.foreach { case (symbol, (quantity, avgPrice)) =>\n        println(s\"Stock: $symbol, Quantity: $quantity, Average Price: $$${avgPrice}\")\n      }\n    }\n  }\n\n  // Example usage\n  buyStock(\"AAPL\", 10, 150.0)\n  buyStock(\"GOOGL\", 5, 1000.0)\n  sellStock(\"AAPL\", 5, 155.0)\n  portfolioSummary()\n}\n```"
  },
  {
    "task": "Implement a function to calculate the gravitational force between two masses using multiplication and division.",
    "code": "```scala\nobject GravitationalForceCalculator {\n  def calculateForce(mass1: Double, mass2: Double, distance: Double): Double = {\n    val gravitationalConstant = 6.67430e-11\n    (gravitationalConstant * mass1 * mass2) / (distance * distance)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val mass1 = 5.972e24  // Example: Earth's mass in kg\n    val mass2 = 7.348e22  // Example: Moon's mass in kg\n    val distance = 3.844e8 // Example: Distance between Earth and Moon in meters\n    val force = calculateForce(mass1, mass2, distance)\n    println(s\"The gravitational force is $force N\")\n  }\n}\n```"
  },
  {
    "task": "Create a function that determines the price per square foot of a piece of real estate.",
    "code": "```scala\nobject RealEstateCalculator {\n  def pricePerSquareFoot(price: Double, area: Double): Double = {\n    price / area\n  }\n}\n```"
  },
  {
    "task": "Write a script to compute the total interest earned on a savings account with monthly compounding.",
    "code": "```scala\nobject SavingsAccountInterest {\n  def main(args: Array[String]): Unit = {\n    val principal = 1000.0 // Initial amount of money\n    val annualRate = 0.05 // Annual interest rate\n    val years = 5 // Number of years the money is invested or borrowed\n\n    val totalAmount = principal * Math.pow(1 + annualRate / 12, 12 * years)\n    val totalInterest = totalAmount - principal\n\n    println(f\"Total interest earned: $$${totalInterest}%.2f\")\n  }\n}\n```"
  },
  {
    "task": "Develop a program that calculates the calories burned during exercise given MET value and duration.",
    "code": "```scala\nobject CaloriesBurnedCalculator {\n  def calculateCaloriesBurned(met: Double, weightKg: Double, durationHours: Double): Double = {\n    met * weightKg * durationHours\n  }\n\n  def main(args: Array[String]): Unit = {\n    val metValue = 8.0 // Example MET value for running\n    val weightKg = 70.0 // Example weight in kilograms\n    val durationHours = 1.0 // Example duration in hours\n\n    val caloriesBurned = calculateCaloriesBurned(metValue, weightKg, durationHours)\n    println(s\"Calories burned: $caloriesBurned\")\n  }\n}\n```"
  },
  {
    "task": "Build a function that converts a speed from miles per hour to kilometers per hour using multiplication.",
    "code": "```scala\nobject SpeedConverter {\n  def mphToKph(mph: Double): Double = {\n    mph * 1.60934\n  }\n}\n```"
  },
  {
    "task": "Implement a program to find the number of days between two dates using arithmetic operations.",
    "code": "```scala\nimport java.time.LocalDate\nimport java.time.temporal.ChronoUnit\n\nobject DaysBetweenDates {\n  def main(args: Array[String]): Unit = {\n    val date1 = LocalDate.of(2023, 10, 1)\n    val date2 = LocalDate.of(2023, 10, 20)\n    \n    val daysBetween = ChronoUnit.DAYS.between(date1, date2)\n    \n    println(s\"Number of days between $date1 and $date2: $daysBetween\")\n  }\n}\n```"
  },
  {
    "task": "Write a function to calculate the area of a circle given its radius.",
    "code": "```scala\ndef calculateCircleArea(radius: Double): Double = {\n  val pi = Math.PI\n  pi * radius * radius\n}\n```"
  },
  {
    "task": "Create a program that determines the total distance driven given trips with varying speeds and durations.",
    "code": "```scala\nobject TotalDistanceCalculator {\n  case class Trip(speed: Double, duration: Double)\n\n  def calculateTotalDistance(trips: List[Trip]): Double = {\n    trips.map(trip => trip.speed * trip.duration).sum\n  }\n\n  def main(args: Array[String]): Unit = {\n    val trips = List(\n      Trip(60.0, 1.5),\n      Trip(80.0, 2.0),\n      Trip(50.0, 1.0)\n    )\n    val totalDistance = calculateTotalDistance(trips)\n    println(s\"Total Distance Driven: $totalDistance km\")\n  }\n}\n```"
  },
  {
    "task": "Design a function to compute the final price of an item after applying multiple discounts sequentially.",
    "code": "```scala\ndef computeFinalPrice(initialPrice: Double, discounts: List[Double]): Double = {\n  discounts.foldLeft(initialPrice)((price, discount) => price * (1 - discount))\n}\n\n// Example usage:\nval initialPrice = 100.0\nval discounts = List(0.1, 0.05, 0.2) // 10%, 5%, and 20% discounts\nval finalPrice = computeFinalPrice(initialPrice, discounts)\nprintln(f\"Final Price: $$${finalPrice}%.2f\")\n```"
  },
  {
    "task": "Write a script that calculates the number of bricks needed to build a wall given wall dimensions and brick size.",
    "code": "```scala\nobject WallCalculator {\n  def main(args: Array[String]): Unit = {\n    val wallLength = 10.0 // Example wall length in meters\n    val wallHeight = 3.0  // Example wall height in meters\n    val brickLength = 0.2 // Example brick length in meters\n    val brickHeight = 0.1 // Example brick height in meters\n\n    val wallArea = wallLength * wallHeight\n    val brickArea = brickLength * brickHeight\n\n    val bricksNeeded = Math.ceil(wallArea / brickArea).toInt\n\n    println(s\"Number of bricks needed: $bricksNeeded\")\n  }\n}\n```"
  },
  {
    "task": "Develop a program to determine the number of pizzas required for a party given the number of people and slices per pizza.",
    "code": "```scala\nobject PizzaCalculator {\n  def calculatePizzas(people: Int, slicesPerPerson: Int, slicesPerPizza: Int): Int = {\n    val totalSlicesNeeded = people * slicesPerPerson\n    val pizzasNeeded = (totalSlicesNeeded + slicesPerPizza - 1) / slicesPerPizza\n    pizzasNeeded\n  }\n\n  def main(args: Array[String]): Unit = {\n    val people = 10\n    val slicesPerPerson = 3\n    val slicesPerPizza = 8\n    val pizzas = calculatePizzas(people, slicesPerPerson, slicesPerPizza)\n    println(s\"Pizzas needed: $pizzas\")\n  }\n}\n```"
  },
  {
    "task": "Implement a function that calculates the total cost of a meal including tax and tip.",
    "code": "```scala\nobject MealCostCalculator {\n  def calculateTotalCost(mealCost: Double, taxRate: Double, tipRate: Double): Double = {\n    val taxAmount = mealCost * taxRate / 100\n    val tipAmount = mealCost * tipRate / 100\n    mealCost + taxAmount + tipAmount\n  }\n\n  def main(args: Array[String]): Unit = {\n    val mealCost = 50.0\n    val taxRate = 8.0\n    val tipRate = 15.0\n    val totalCost = calculateTotalCost(mealCost, taxRate, tipRate)\n    println(f\"Total cost of the meal is: $$${totalCost}%.2f\")\n  }\n}\n```"
  },
  {
    "task": "Create a program to compute the average rainfall over a period using addition and division.",
    "code": "```scala\nobject AverageRainfallCalculator {\n  def main(args: Array[String]): Unit = {\n    val rainfallData = List(10.5, 12.3, 9.8, 11.0, 13.2)\n    val totalRainfall = rainfallData.sum\n    val averageRainfall = totalRainfall / rainfallData.length\n    println(s\"Average Rainfall: $averageRainfall\")\n  }\n}\n```"
  },
  {
    "task": "Write a function that determines the number of batches needed to produce a specific quantity of a product.",
    "code": "```scala\nobject BatchCalculator {\n  def numberOfBatches(totalQuantity: Int, batchSize: Int): Int = {\n    math.ceil(totalQuantity.toDouble / batchSize).toInt\n  }\n\n  def main(args: Array[String]): Unit = {\n    val totalQuantity = 100\n    val batchSize = 15\n    println(s\"Number of batches needed: ${numberOfBatches(totalQuantity, batchSize)}\")\n  }\n}\n```"
  },
  {
    "task": "Design a program to calculate the total energy consumption of a household given individual appliance usage.",
    "code": "```scala\nobject EnergyConsumptionCalculator {\n\n  def calculateTotalEnergyConsumption(appliances: Map[String, Double]): Double = {\n    appliances.values.sum\n  }\n\n  def main(args: Array[String]): Unit = {\n    val applianceUsage: Map[String, Double] = Map(\n      \"Refrigerator\" -> 150.0,\n      \"Washing Machine\" -> 500.0,\n      \"Television\" -> 100.0,\n      \"Air Conditioner\" -> 1200.0\n    )\n    \n    val totalEnergy = calculateTotalEnergyConsumption(applianceUsage)\n    println(s\"Total Energy Consumption: $totalEnergy kWh\")\n  }\n}\n```"
  },
  {
    "task": "Develop a function that computes the body surface area of a person using height and weight.",
    "code": "```scala\nobject BodySurfaceAreaCalculator {\n  def bodySurfaceArea(heightInCm: Double, weightInKg: Double): Double = {\n    0.007184 * Math.pow(heightInCm, 0.725) * Math.pow(weightInKg, 0.425)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val height = 180.0 // example height in cm\n    val weight = 75.0  // example weight in kg\n    val bsa = bodySurfaceArea(height, weight)\n    println(s\"Body Surface Area: $bsa square meters\")\n  }\n}\n```"
  },
  {
    "task": "Build a script to calculate the monthly payment on a mortgage using principal, interest rate, and term.",
    "code": "```scala\nobject MortgageCalculator {\n  def main(args: Array[String]): Unit = {\n    val principal = 200000.0\n    val annualInterestRate = 5.0\n    val termInYears = 30\n\n    val monthlyPayment = calculateMonthlyPayment(principal, annualInterestRate, termInYears)\n    println(f\"Monthly Payment: $$${monthlyPayment}%.2f\")\n  }\n\n  def calculateMonthlyPayment(principal: Double, annualInterestRate: Double, termInYears: Int): Double = {\n    val monthlyInterestRate = annualInterestRate / 100 / 12\n    val numberOfPayments = termInYears * 12\n    principal * (monthlyInterestRate * Math.pow(1 + monthlyInterestRate, numberOfPayments)) / \n      (Math.pow(1 + monthlyInterestRate, numberOfPayments) - 1)\n  }\n}\n```"
  },
  {
    "task": "Implement a function to find the volume of a cone given its height and radius.",
    "code": "```scala\nobject ConeVolumeCalculator {\n  def volumeOfCone(radius: Double, height: Double): Double = {\n    val pi = math.Pi\n    (1.0 / 3) * pi * math.pow(radius, 2) * height\n  }\n}\n```"
  },
  {
    "task": "Write a program that estimates the cost of a trip using fuel efficiency and distance.",
    "code": "```scala\nobject TripCostEstimator {\n  def main(args: Array[String]): Unit = {\n    val distance: Double = 350.0 // distance in miles\n    val fuelEfficiency: Double = 25.0 // miles per gallon\n    val fuelPrice: Double = 3.5 // price per gallon in dollars\n\n    val gallonsNeeded: Double = distance / fuelEfficiency\n    val totalCost: Double = gallonsNeeded * fuelPrice\n\n    println(f\"Estimated cost of the trip: $$${totalCost}%.2f\")\n  }\n}\n```"
  }
]