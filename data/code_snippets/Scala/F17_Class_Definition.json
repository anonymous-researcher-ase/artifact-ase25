[
  {
    "task": "Define a class representing a book with attributes for title, author, and number of pages, and a method to display the book's information.",
    "code": "```scala\nclass Book(val title: String, val author: String, val numberOfPages: Int) {\n  def displayInfo(): Unit = {\n    println(s\"Title: $title, Author: $author, Pages: $numberOfPages\")\n  }\n}\n```"
  },
  {
    "task": "Create a class for a bank account that includes attributes for account number, balance, and a method to deposit funds.",
    "code": "```scala\nclass BankAccount(val accountNumber: String, var balance: Double) {\n  def deposit(amount: Double): Unit = {\n    if (amount > 0) {\n      balance += amount\n    }\n  }\n}\n```"
  },
  {
    "task": "Design a class for a vehicle with properties for make, model, and year, and a method to start the engine.",
    "code": "```scala\nclass Vehicle(val make: String, val model: String, val year: Int) {\n  def startEngine(): Unit = {\n    println(s\"The engine of $make $model ($year) is starting.\")\n  }\n}\n```"
  },
  {
    "task": "Implement a class that models a student with attributes for name, ID, and grades, and a method to calculate the GPA.",
    "code": "```scala\nclass Student(val name: String, val id: Int, val grades: List[Double]) {\n  def calculateGPA(): Double = {\n    if (grades.isEmpty) 0.0 else grades.sum / grades.length\n  }\n}\n```"
  },
  {
    "task": "Construct a class for a rectangle that has attributes for width and height, and methods to calculate area and perimeter.",
    "code": "```scala\nclass Rectangle(val width: Double, val height: Double) {\n  def area: Double = width * height\n  def perimeter: Double = 2 * (width + height)\n}\n```"
  },
  {
    "task": "Formulate a class for a smartphone with properties for brand, model, and battery life, and a method to make a call.",
    "code": "```scala\nclass Smartphone(val brand: String, val model: String, var batteryLife: Int) {\n  def makeCall(number: String): Unit = {\n    println(s\"Calling $number...\")\n    // Assume making a call reduces battery life by 1 unit\n    batteryLife -= 1\n  }\n}\n```"
  },
  {
    "task": "Build a class representing a movie with attributes for title, director, and duration, and a method to play the movie.",
    "code": "```scala\nclass Movie(val title: String, val director: String, val duration: Int) {\n  def play(): Unit = {\n    println(s\"Playing movie: $title\")\n  }\n}\n```"
  },
  {
    "task": "Create a class for an employee with attributes for name, position, and salary, and a method to display their profile.",
    "code": "```scala\nclass Employee(val name: String, val position: String, val salary: Double) {\n  def displayProfile(): Unit = {\n    println(s\"Name: $name, Position: $position, Salary: $$salary\")\n  }\n}\n```"
  },
  {
    "task": "Design a class for a library that includes attributes for name, location, and books available, and a method to add a new book.",
    "code": "```scala\nclass Library(var name: String, var location: String, var books: List[String]) {\n  def addBook(newBook: String): Unit = {\n    books = newBook :: books\n  }\n}\n```"
  },
  {
    "task": "Develop a class for a shopping cart with properties for items and total cost, and methods to add and remove items.",
    "code": "```scala\nclass ShoppingCart {\n  private var items: List[String] = List()\n  private var totalCost: Double = 0.0\n\n  def addItem(item: String, cost: Double): Unit = {\n    items = item :: items\n    totalCost += cost\n  }\n\n  def removeItem(item: String, cost: Double): Unit = {\n    if (items.contains(item)) {\n      items = items.filterNot(_ == item)\n      totalCost -= cost\n    }\n  }\n\n  def getTotalCost: Double = totalCost\n\n  def getItems: List[String] = items\n}\n```"
  },
  {
    "task": "Implement a class for a thermostat with attributes for current temperature and desired temperature, and a method to adjust the temperature.",
    "code": "```scala\nclass Thermostat(var currentTemperature: Double, var desiredTemperature: Double) {\n  def adjustTemperature(): Unit = {\n    if (currentTemperature < desiredTemperature) {\n      currentTemperature += 1\n    } else if (currentTemperature > desiredTemperature) {\n      currentTemperature -= 1\n    }\n  }\n}\n```"
  },
  {
    "task": "Formulate a class for a person with attributes for first name, last name, and age, and a method to return the full name.",
    "code": "```scala\nclass Person(val firstName: String, val lastName: String, val age: Int) {\n  def fullName: String = s\"$firstName $lastName\"\n}\n```"
  },
  {
    "task": "Construct a class for a game character with properties for health, strength, and inventory, and a method to attack.",
    "code": "```scala\nclass GameCharacter(var health: Int, var strength: Int, val inventory: List[String]) {\n  def attack(target: GameCharacter): Unit = {\n    target.health -= this.strength\n  }\n}\n```"
  },
  {
    "task": "Create a class for a calendar event with attributes for title, date, and location, and a method to reschedule the event.",
    "code": "```scala\nclass CalendarEvent(var title: String, var date: String, var location: String) {\n  def reschedule(newDate: String): Unit = {\n    date = newDate\n  }\n}\n```"
  },
  {
    "task": "Design a class representing a song with properties for title, artist, and duration, and a method to play the song.",
    "code": "```scala\nclass Song(val title: String, val artist: String, val duration: Int) {\n  def play(): Unit = {\n    println(s\"Playing song: $title by $artist\")\n  }\n}\n```"
  },
  {
    "task": "Develop a class for an order in an e-commerce system with attributes for order ID, customer, and items, and a method to calculate total price.",
    "code": "```scala\nclass Order(val orderId: String, val customer: String, val items: List[(String, Double)]) {\n  def calculateTotalPrice(): Double = {\n    items.map(_._2).sum\n  }\n}\n```"
  },
  {
    "task": "Build a class for a social media post with attributes for content, author, and timestamp, and a method to like the post.",
    "code": "```scala\nclass SocialMediaPost(val content: String, val author: String, val timestamp: String) {\n  private var likes: Int = 0\n\n  def likePost(): Unit = {\n    likes += 1\n  }\n\n  def getLikes: Int = likes\n}\n```"
  },
  {
    "task": "Create a class for a computer with properties for processor, RAM, and storage, and a method to display system specifications.",
    "code": "```scala\nclass Computer(val processor: String, val ram: Int, val storage: Int) {\n  def displaySpecifications(): Unit = {\n    println(s\"Processor: $processor, RAM: ${ram}GB, Storage: ${storage}GB\")\n  }\n}\n```"
  },
  {
    "task": "Implement a class for a restaurant menu item with attributes for name, price, and description, and a method to update the price.",
    "code": "```scala\nclass MenuItem(var name: String, var price: Double, var description: String) {\n  def updatePrice(newPrice: Double): Unit = {\n    price = newPrice\n  }\n}\n```"
  },
  {
    "task": "Design a class for a package delivery with attributes for tracking number, destination, and status, and a method to update the status.",
    "code": "```scala\nclass PackageDelivery(var trackingNumber: String, var destination: String, var status: String) {\n  def updateStatus(newStatus: String): Unit = {\n    status = newStatus\n  }\n}\n```"
  },
  {
    "task": "Construct a class representing a pet with attributes for species, age, and name, and a method to display its details.",
    "code": "```scala\nclass Pet(val species: String, val age: Int, val name: String) {\n  def displayDetails(): Unit = {\n    println(s\"Species: $species, Age: $age, Name: $name\")\n  }\n}\n```"
  },
  {
    "task": "Formulate a class for a product in a store with properties for SKU, name, and price, and a method to apply a discount.",
    "code": "```scala\nclass Product(val sku: String, val name: String, var price: Double) {\n  def applyDiscount(discountPercentage: Double): Unit = {\n    price -= price * (discountPercentage / 100)\n  }\n}\n```"
  },
  {
    "task": "Develop a class for a university course with attributes for course code, title, and credits, and a method to enroll a student.",
    "code": "```scala\nclass UniversityCourse(val courseCode: String, val title: String, val credits: Int) {\n  private var enrolledStudents: List[String] = List()\n\n  def enrollStudent(studentName: String): Unit = {\n    enrolledStudents = studentName :: enrolledStudents\n  }\n}\n```"
  },
  {
    "task": "Create a class for a smart light bulb with attributes for color, brightness, and state (on/off), and a method to change the color.",
    "code": "```scala\nclass SmartLightBulb(var color: String, var brightness: Int, var state: Boolean) {\n  def changeColor(newColor: String): Unit = {\n    color = newColor\n  }\n}\n```"
  },
  {
    "task": "Design a class for a blog post with properties for title, content, and date published, and a method to edit the content.",
    "code": "```scala\nimport java.time.LocalDate\n\nclass BlogPost(var title: String, var content: String, var datePublished: LocalDate) {\n  def editContent(newContent: String): Unit = {\n    content = newContent\n  }\n}\n```"
  },
  {
    "task": "Build a class for a bank transaction with attributes for transaction ID, amount, and type, and a method to reverse the transaction.",
    "code": "```scala\nclass BankTransaction(val transactionId: String, var amount: Double, var transactionType: String) {\n  def reverseTransaction(): Unit = {\n    amount = -amount\n    transactionType = if (transactionType == \"credit\") \"debit\" else \"credit\"\n  }\n}\n```"
  },
  {
    "task": "Implement a class for a city with properties for name, population, and area, and a method to calculate population density.",
    "code": "```scala\nclass City(val name: String, val population: Int, val area: Double) {\n  def populationDensity: Double = population / area\n}\n```"
  },
  {
    "task": "Construct a class for a library member with attributes for member ID, name, and borrowed books, and a method to borrow a book.",
    "code": "```scala\nclass LibraryMember(val memberId: Int, val name: String) {\n  private var borrowedBooks: List[String] = List()\n\n  def borrowBook(bookTitle: String): Unit = {\n    borrowedBooks = bookTitle :: borrowedBooks\n  }\n\n  def getBorrowedBooks: List[String] = borrowedBooks\n}\n```"
  },
  {
    "task": "Create a class for a flight reservation with attributes for flight number, passenger name, and seat number, and a method to change the seat.",
    "code": "```scala\nclass FlightReservation(var flightNumber: String, var passengerName: String, var seatNumber: String) {\n  def changeSeat(newSeatNumber: String): Unit = {\n    seatNumber = newSeatNumber\n  }\n}\n```"
  },
  {
    "task": "Develop a class for a digital photo album with properties for album name, photos, and a method to add a new photo.",
    "code": "```scala\nclass PhotoAlbum(var albumName: String, var photos: List[String]) {\n  def addPhoto(photo: String): Unit = {\n    photos = photos :+ photo\n  }\n}\n```"
  },
  {
    "task": "Design a class for a task in a to-do list with attributes for description, deadline, and status, and a method to mark it as complete.",
    "code": "```scala\nclass Task(var description: String, var deadline: String, var status: String) {\n  def markAsComplete(): Unit = {\n    status = \"Complete\"\n  }\n}\n```"
  },
  {
    "task": "Formulate a class for a conference speaker with attributes for name, topic, and time slot, and a method to update the time slot.",
    "code": "```scala\nclass ConferenceSpeaker(var name: String, var topic: String, var timeSlot: String) {\n  def updateTimeSlot(newTimeSlot: String): Unit = {\n    this.timeSlot = newTimeSlot\n  }\n}\n```"
  },
  {
    "task": "Construct a class for a real estate property with attributes for address, price, and square footage, and a method to change the price.",
    "code": "```scala\nclass RealEstateProperty(var address: String, var price: Double, var squareFootage: Double) {\n  def changePrice(newPrice: Double): Unit = {\n    price = newPrice\n  }\n}\n```"
  },
  {
    "task": "Create a class for a weather forecast with properties for temperature, humidity, and condition, and a method to update the forecast.",
    "code": "```scala\nclass WeatherForecast(var temperature: Double, var humidity: Double, var condition: String) {\n  def updateForecast(newTemperature: Double, newHumidity: Double, newCondition: String): Unit = {\n    temperature = newTemperature\n    humidity = newHumidity\n    condition = newCondition\n  }\n}\n```"
  },
  {
    "task": "Build a class for a musical instrument with attributes for type, brand, and model, and a method to play a note.",
    "code": "```scala\nclass MusicalInstrument(val instrumentType: String, val brand: String, val model: String) {\n  def playNote(note: String): Unit = {\n    println(s\"Playing note $note on a $brand $instrumentType ($model).\")\n  }\n}\n```"
  },
  {
    "task": "Design a class for a sports team with attributes for team name, players, and coach, and a method to add a new player.",
    "code": "```scala\nclass SportsTeam(var teamName: String, var players: List[String], var coach: String) {\n  def addPlayer(newPlayer: String): Unit = {\n    players = players :+ newPlayer\n  }\n}\n```"
  },
  {
    "task": "Implement a class for a podcast episode with attributes for title, duration, and host, and a method to play the episode.",
    "code": "```scala\nclass PodcastEpisode(val title: String, val duration: Double, val host: String) {\n  def play(): Unit = {\n    println(s\"Playing episode: $title\")\n  }\n}\n```"
  },
  {
    "task": "Develop a class for a space mission with properties for mission name, crew, and launch date, and a method to launch the mission.",
    "code": "```scala\nclass SpaceMission(val missionName: String, val crew: List[String], val launchDate: String) {\n  def launchMission(): Unit = {\n    println(s\"Launching mission: $missionName with crew: ${crew.mkString(\", \")} on $launchDate.\")\n  }\n}\n```"
  },
  {
    "task": "Create a class for a virtual assistant with attributes for name, language, and skills, and a method to add a new skill.",
    "code": "```scala\nclass VirtualAssistant(var name: String, var language: String, var skills: List[String]) {\n  def addSkill(newSkill: String): Unit = {\n    skills = skills :+ newSkill\n  }\n}\n```"
  },
  {
    "task": "Formulate a class for a news article with attributes for headline, content, and author, and a method to publish the article.",
    "code": "```scala\nclass NewsArticle(val headline: String, val content: String, val author: String) {\n  def publish(): Unit = {\n    println(s\"Headline: $headline\")\n    println(s\"Content: $content\")\n    println(s\"Author: $author\")\n  }\n}\n```"
  },
  {
    "task": "Construct a class for a hiking trail with attributes for trail name, length, and difficulty, and a method to update the difficulty.",
    "code": "```scala\nclass HikingTrail(var trailName: String, var length: Double, var difficulty: String) {\n  def updateDifficulty(newDifficulty: String): Unit = {\n    difficulty = newDifficulty\n  }\n}\n```"
  },
  {
    "task": "Design a class for a subscription service with properties for service name, subscriber count, and subscription fee, and a method to update the fee.",
    "code": "```scala\nclass SubscriptionService(var serviceName: String, var subscriberCount: Int, var subscriptionFee: Double) {\n  def updateFee(newFee: Double): Unit = {\n    subscriptionFee = newFee\n  }\n}\n```"
  },
  {
    "task": "Build a class for a digital wallet with attributes for balance, transaction history, and a method to add funds.",
    "code": "```scala\nclass DigitalWallet {\n  private var balance: Double = 0.0\n  private var transactionHistory: List[String] = List()\n\n  def addFunds(amount: Double): Unit = {\n    balance += amount\n    transactionHistory = transactionHistory :+ s\"Added $$${amount}\"\n  }\n\n  def getBalance: Double = balance\n\n  def getTransactionHistory: List[String] = transactionHistory\n}\n```"
  },
  {
    "task": "Implement a class for a cooking recipe with attributes for name, ingredients, and instructions, and a method to update the instructions.",
    "code": "```scala\nclass CookingRecipe(var name: String, var ingredients: List[String], var instructions: String) {\n  def updateInstructions(newInstructions: String): Unit = {\n    instructions = newInstructions\n  }\n}\n```"
  },
  {
    "task": "Develop a class for a time zone with properties for zone name, offset, and a method to convert time from another time zone.",
    "code": "```scala\nclass TimeZone(val zoneName: String, val offset: Int) {\n  def convertTime(time: Int, fromOffset: Int): Int = {\n    val utcTime = time - fromOffset\n    val convertedTime = utcTime + offset\n    convertedTime\n  }\n}\n```"
  },
  {
    "task": "Create a class for a camera with attributes for resolution, brand, and model, and a method to take a picture.",
    "code": "```scala\nclass Camera(val resolution: String, val brand: String, val model: String) {\n  def takePicture(): Unit = {\n    println(s\"Taking a picture with the $brand $model at $resolution resolution.\")\n  }\n}\n```"
  },
  {
    "task": "Design a class for a gaming console with properties for brand, model, and storage capacity, and a method to install a game.",
    "code": "```scala\nclass GamingConsole(val brand: String, val model: String, var storageCapacity: Int) {\n  def installGame(gameSize: Int): Unit = {\n    if (storageCapacity >= gameSize) {\n      storageCapacity -= gameSize\n      println(s\"Game installed. Remaining storage: $storageCapacity GB\")\n    } else {\n      println(\"Not enough storage to install the game.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Formulate a class for a museum exhibit with attributes for exhibit name, artist, and year, and a method to update the year.",
    "code": "```scala\nclass MuseumExhibit(var exhibitName: String, var artist: String, var year: Int) {\n  def updateYear(newYear: Int): Unit = {\n    year = newYear\n  }\n}\n```"
  },
  {
    "task": "Construct a class for a fitness tracker with attributes for steps, calories burned, and heart rate, and a method to add steps.",
    "code": "```scala\nclass FitnessTracker(var steps: Int, var caloriesBurned: Int, var heartRate: Int) {\n  def addSteps(additionalSteps: Int): Unit = {\n    steps += additionalSteps\n  }\n}\n```"
  },
  {
    "task": "Build a class for an aquarium with properties for tank size, fish species, and water temperature, and a method to add a new fish.",
    "code": "```scala\nclass Aquarium(var tankSize: Double, var fishSpecies: List[String], var waterTemperature: Double) {\n  def addFish(newFish: String): Unit = {\n    fishSpecies = fishSpecies :+ newFish\n  }\n}\n```"
  },
  {
    "task": "Create a class for a chat message with attributes for sender, content, and timestamp, and a method to edit the content.",
    "code": "```scala\nimport java.time.LocalDateTime\n\nclass ChatMessage(var sender: String, var content: String, val timestamp: LocalDateTime) {\n  def editContent(newContent: String): Unit = {\n    content = newContent\n  }\n}\n```"
  },
  {
    "task": "Design a class for a vending machine with properties for items available, prices, and a method to dispense an item.",
    "code": "```scala\nclass VendingMachine(var itemsAvailable: Map[String, Int], var prices: Map[String, Double]) {\n  def dispenseItem(item: String): Option[String] = {\n    if (itemsAvailable.contains(item) && itemsAvailable(item) > 0) {\n      itemsAvailable = itemsAvailable.updated(item, itemsAvailable(item) - 1)\n      Some(s\"Dispensed: $item\")\n    } else {\n      None\n    }\n  }\n}\n```"
  },
  {
    "task": "Implement a class for a digital clock with attributes for current time, time zone, and a method to set an alarm.",
    "code": "```scala\nclass DigitalClock(var currentTime: String, var timeZone: String) {\n  private var alarmTime: Option[String] = None\n\n  def setAlarm(time: String): Unit = {\n    alarmTime = Some(time)\n  }\n\n  def getAlarm: Option[String] = {\n    alarmTime\n  }\n}\n```"
  },
  {
    "task": "Develop a class for a historical figure with attributes for name, birthdate, and achievements, and a method to add an achievement.",
    "code": "```scala\nclass HistoricalFigure(var name: String, var birthdate: String, var achievements: List[String]) {\n\n  def addAchievement(achievement: String): Unit = {\n    achievements = achievements :+ achievement\n  }\n\n}\n```"
  },
  {
    "task": "Formulate a class for a travel itinerary with attributes for destinations, travel dates, and activities, and a method to add a destination.",
    "code": "```scala\nclass TravelItinerary(var destinations: List[String], \n                      var travelDates: List[String], \n                      var activities: List[String]) {\n\n  def addDestination(destination: String): Unit = {\n    destinations = destinations :+ destination\n  }\n}\n```"
  },
  {
    "task": "Construct a class for a fashion brand with properties for brand name, founder, and product lines, and a method to launch a new product line.",
    "code": "```scala\nclass FashionBrand(var brandName: String, var founder: String, var productLines: List[String]) {\n  def launchNewProductLine(newLine: String): Unit = {\n    productLines = productLines :+ newLine\n  }\n}\n```"
  },
  {
    "task": "Create a class for a video game with attributes for title, genre, and rating, and a method to update the rating.",
    "code": "```scala\nclass VideoGame(var title: String, var genre: String, var rating: Double) {\n  def updateRating(newRating: Double): Unit = {\n    rating = newRating\n  }\n}\n```"
  },
  {
    "task": "Build a class for a scientific experiment with attributes for experiment name, hypothesis, and results, and a method to record results.",
    "code": "```scala\nclass ScientificExperiment(var experimentName: String, var hypothesis: String) {\n  private var results: String = \"\"\n\n  def recordResults(newResults: String): Unit = {\n    results = newResults\n  }\n\n  def getResults: String = results\n}\n```"
  },
  {
    "task": "Design a class for a gourmet dish with properties for dish name, ingredients, and cooking time, and a method to change cooking time.",
    "code": "```scala\nclass GourmetDish(var dishName: String, var ingredients: List[String], private var cookingTime: Int) {\n  def changeCookingTime(newCookingTime: Int): Unit = {\n    cookingTime = newCookingTime\n  }\n}\n```"
  },
  {
    "task": "Implement a class for a political office with attributes for office title, holder, and term length, and a method to change the holder.",
    "code": "```scala\nclass PoliticalOffice(var officeTitle: String, var holder: String, var termLength: Int) {\n  def changeHolder(newHolder: String): Unit = {\n    holder = newHolder\n  }\n}\n```"
  },
  {
    "task": "Develop a class for an astronomical object with properties for name, type, and distance from Earth, and a method to update the distance.",
    "code": "```scala\nclass AstronomicalObject(var name: String, var objType: String, var distanceFromEarth: Double) {\n  def updateDistance(newDistance: Double): Unit = {\n    distanceFromEarth = newDistance\n  }\n}\n```"
  },
  {
    "task": "Formulate a class for a public transportation route with attributes for route number, stops, and schedule, and a method to add a stop.",
    "code": "```scala\nclass PublicTransportationRoute(var routeNumber: String, var stops: List[String], var schedule: Map[String, String]) {\n  def addStop(newStop: String): Unit = {\n    stops = stops :+ newStop\n  }\n}\n```"
  },
  {
    "task": "Construct a class for a board game with properties for game name, player count, and rules, and a method to change the rules.",
    "code": "```scala\nclass BoardGame(var gameName: String, var playerCount: Int, var rules: String) {\n  def changeRules(newRules: String): Unit = {\n    rules = newRules\n  }\n}\n```"
  },
  {
    "task": "Create a class for a customer loyalty program with attributes for program name, points, and rewards, and a method to redeem points.",
    "code": "```scala\nclass CustomerLoyaltyProgram(val programName: String, var points: Int, var rewards: List[String]) {\n  \n  def redeemPoints(pointsToRedeem: Int): Boolean = {\n    if (pointsToRedeem <= points) {\n      points -= pointsToRedeem\n      true\n    } else {\n      false\n    }\n  }\n}\n```"
  },
  {
    "task": "Design a class for an art gallery with properties for gallery name, location, and exhibitions, and a method to add a new exhibition.",
    "code": "```scala\nclass ArtGallery(var galleryName: String, var location: String) {\n  private var exhibitions: List[String] = List()\n\n  def addExhibition(exhibition: String): Unit = {\n    exhibitions = exhibitions :+ exhibition\n  }\n\n  def getExhibitions: List[String] = exhibitions\n}\n```"
  },
  {
    "task": "Build a class for a personal blog with attributes for blog name, posts, and a method to add a new post.",
    "code": "```scala\nclass PersonalBlog(var blogName: String) {\n  private var posts: List[String] = List()\n\n  def addPost(post: String): Unit = {\n    posts = posts :+ post\n  }\n\n  def getPosts: List[String] = posts\n}\n```"
  },
  {
    "task": "Implement a class for a mobile application with properties for app name, version, and developer, and a method to update the version.",
    "code": "```scala\nclass MobileApp(var appName: String, var version: String, var developer: String) {\n  def updateVersion(newVersion: String): Unit = {\n    version = newVersion\n  }\n}\n```"
  },
  {
    "task": "Develop a class for a language translator with attributes for source language, target language, and translation method, and a method to translate a text.",
    "code": "```scala\nclass LanguageTranslator(val sourceLanguage: String, val targetLanguage: String, val translationMethod: String) {\n  \n  def translate(text: String): String = {\n    // Placeholder for translation logic\n    s\"Translated text from $sourceLanguage to $targetLanguage using $translationMethod: $text\"\n  }\n}\n```"
  },
  {
    "task": "Formulate a class for a culinary school with properties for school name, courses offered, and a method to add a new course.",
    "code": "```scala\nclass CulinarySchool(var schoolName: String, var coursesOffered: List[String]) {\n  def addCourse(newCourse: String): Unit = {\n    coursesOffered = coursesOffered :+ newCourse\n  }\n}\n```"
  },
  {
    "task": "Construct a class for a musical band with attributes for band name, members, and genre, and a method to add a new member.",
    "code": "```scala\nclass Band(var bandName: String, var members: List[String], var genre: String) {\n  def addMember(newMember: String): Unit = {\n    members = newMember :: members\n  }\n}\n```"
  },
  {
    "task": "Create a class for a television series with properties for series title, episodes, and network, and a method to add a new episode.",
    "code": "```scala\nclass TelevisionSeries(var title: String, var episodes: List[String], var network: String) {\n  def addEpisode(episode: String): Unit = {\n    episodes = episodes :+ episode\n  }\n}\n```"
  },
  {
    "task": "Design a class for a wildlife reserve with attributes for reserve name, species protected, and area size, and a method to expand the area.",
    "code": "```scala\nclass WildlifeReserve(val reserveName: String, val speciesProtected: List[String], var areaSize: Double) {\n  def expandArea(additionalSize: Double): Unit = {\n    areaSize += additionalSize\n  }\n}\n```"
  },
  {
    "task": "Build a class for a luxury car with properties for brand, model, and price, and a method to update the price.",
    "code": "```scala\nclass LuxuryCar(var brand: String, var model: String, var price: Double) {\n  def updatePrice(newPrice: Double): Unit = {\n    price = newPrice\n  }\n}\n```"
  },
  {
    "task": "Implement a class for a scientific journal with attributes for journal name, articles, and impact factor, and a method to add a new article.",
    "code": "```scala\nclass ScientificJournal(var journalName: String, var impactFactor: Double) {\n  private var articles: List[String] = List()\n\n  def addArticle(article: String): Unit = {\n    articles = articles :+ article\n  }\n\n  def getArticles: List[String] = articles\n}\n```"
  },
  {
    "task": "Develop a class for a historical monument with properties for monument name, location, and year established, and a method to update the location.",
    "code": "```scala\nclass HistoricalMonument(var name: String, var location: String, var yearEstablished: Int) {\n  def updateLocation(newLocation: String): Unit = {\n    location = newLocation\n  }\n}\n```"
  },
  {
    "task": "Formulate a class for an educational course with attributes for course title, instructor, and syllabus, and a method to update the syllabus.",
    "code": "```scala\nclass Course(var title: String, var instructor: String, var syllabus: String) {\n  def updateSyllabus(newSyllabus: String): Unit = {\n    syllabus = newSyllabus\n  }\n}\n```"
  },
  {
    "task": "Construct a class for a city park with properties for park name, facilities, and opening hours, and a method to add a new facility.",
    "code": "```scala\nclass CityPark(var parkName: String, var facilities: List[String], var openingHours: String) {\n  def addFacility(newFacility: String): Unit = {\n    facilities = facilities :+ newFacility\n  }\n}\n```"
  },
  {
    "task": "Create a class for a fitness class with attributes for class name, instructor, and schedule, and a method to update the schedule.",
    "code": "```scala\nclass FitnessClass(var className: String, var instructor: String, var schedule: String) {\n  def updateSchedule(newSchedule: String): Unit = {\n    schedule = newSchedule\n  }\n}\n```"
  },
  {
    "task": "Design a class for a virtual reality game with properties for game name, platform, and VR compatibility, and a method to change the platform.",
    "code": "```scala\nclass VirtualRealityGame(var gameName: String, var platform: String, var vrCompatible: Boolean) {\n  def changePlatform(newPlatform: String): Unit = {\n    platform = newPlatform\n  }\n}\n```"
  },
  {
    "task": "Build a class for a mountain range with attributes for range name, highest peak, and countries covered, and a method to add a new peak.",
    "code": "```scala\nclass MountainRange(var rangeName: String, var highestPeak: String, var countriesCovered: List[String]) {\n  private var peaks: List[String] = List(highestPeak)\n\n  def addNewPeak(peak: String): Unit = {\n    peaks = peak :: peaks\n  }\n}\n```"
  },
  {
    "task": "Implement a class for a documentary film with properties for title, director, and subject, and a method to update the subject.",
    "code": "```scala\nclass DocumentaryFilm(var title: String, var director: String, var subject: String) {\n  def updateSubject(newSubject: String): Unit = {\n    subject = newSubject\n  }\n}\n```"
  },
  {
    "task": "Develop a class for a classical music composition with attributes for composition name, composer, and duration, and a method to change the duration.",
    "code": "```scala\nclass ClassicalMusicComposition(var compositionName: String, var composer: String, var duration: Double) {\n  def changeDuration(newDuration: Double): Unit = {\n    duration = newDuration\n  }\n}\n```"
  },
  {
    "task": "Formulate a class for a public library with properties for library name, books available, and membership, and a method to add a new book.",
    "code": "```scala\nclass PublicLibrary(val libraryName: String, var booksAvailable: List[String], var membership: Int) {\n  def addBook(newBook: String): Unit = {\n    booksAvailable = newBook :: booksAvailable\n  }\n}\n```"
  },
  {
    "task": "Construct a class for a tech startup with attributes for startup name, founder, and funding, and a method to raise additional funding.",
    "code": "```scala\nclass TechStartup(val name: String, val founder: String, var funding: Double) {\n  def raiseFunding(amount: Double): Unit = {\n    funding += amount\n  }\n}\n```"
  }
]