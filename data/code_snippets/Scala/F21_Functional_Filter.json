[
  {
    "task": "Filter out all even numbers from a list of integers.",
    "code": "```scala\nval numbers = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\nval oddNumbers = numbers.filter(_ % 2 != 0)\n```"
  },
  {
    "task": "Select all words from a list that start with the letter 'a'.",
    "code": "```scala\nval words = List(\"apple\", \"banana\", \"avocado\", \"cherry\", \"apricot\")\nval wordsStartingWithA = words.filter(_.startsWith(\"a\"))\n```"
  },
  {
    "task": "Find all positive numbers in a collection of integers.",
    "code": "```scala\nval numbers = List(-10, 2, -3, 4, 5, -6)\nval positiveNumbers = numbers.filter(_ > 0)\n```"
  },
  {
    "task": "Extract all employees who are older than 30 from an employee directory.",
    "code": "```scala\ncase class Employee(name: String, age: Int)\n\nval employees = List(\n  Employee(\"Alice\", 28),\n  Employee(\"Bob\", 35),\n  Employee(\"Charlie\", 32),\n  Employee(\"Diana\", 29)\n)\n\nval olderThan30 = employees.filter(_.age > 30)\n\nprintln(olderThan30)\n```"
  },
  {
    "task": "List all cities with a population greater than one million from a dataset.",
    "code": "```scala\ncase class City(name: String, population: Int)\n\nval cities = List(\n  City(\"New York\", 8419000),\n  City(\"Los Angeles\", 3980000),\n  City(\"Chicago\", 2716000),\n  City(\"Houston\", 2328000),\n  City(\"Phoenix\", 1690000),\n  City(\"San Antonio\", 1547000),\n  City(\"Dallas\", 1340000),\n  City(\"San Diego\", 1424000),\n  City(\"San Jose\", 1027000),\n  City(\"Austin\", 995000)\n)\n\nval largeCities = cities.filter(_.population > 1000000)\n\nprintln(largeCities)\n```"
  },
  {
    "task": "Filter out products that are out of stock from a product list.",
    "code": "```scala\ncase class Product(name: String, inStock: Boolean)\n\nval products = List(\n  Product(\"Laptop\", true),\n  Product(\"Smartphone\", false),\n  Product(\"Tablet\", true),\n  Product(\"Headphones\", false)\n)\n\nval inStockProducts = products.filter(_.inStock)\n\ninStockProducts.foreach(println)\n```"
  },
  {
    "task": "Select all students who have passed with a grade above 70 from a list of student scores.",
    "code": "```scala\ncase class Student(name: String, grade: Int)\n\nval students = List(\n  Student(\"Alice\", 85),\n  Student(\"Bob\", 67),\n  Student(\"Charlie\", 72),\n  Student(\"David\", 90)\n)\n\nval passedStudents = students.filter(_.grade > 70)\n```"
  },
  {
    "task": "Identify all strings in an array that contain the substring 'cat'.",
    "code": "```scala\nval strings = Array(\"concatenate\", \"dog\", \"catalog\", \"scatter\", \"elephant\")\nval filteredStrings = strings.filter(_.contains(\"cat\"))\n```"
  },
  {
    "task": "Extract all transactions above $1000 from a financial record.",
    "code": "```scala\nval transactions = List(500, 1500, 2500, 750, 1200)\nval highValueTransactions = transactions.filter(_ > 1000)\n```"
  },
  {
    "task": "Filter out all non-prime numbers from a list of numbers.",
    "code": "```scala\nobject PrimeFilter {\n  def isPrime(n: Int): Boolean = {\n    if (n <= 1) false\n    else if (n == 2) true\n    else !(2 until n).exists(n % _ == 0)\n  }\n\n  def filterPrimes(numbers: List[Int]): List[Int] = {\n    numbers.filter(isPrime)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val numbers = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    val primes = filterPrimes(numbers)\n    println(primes)\n  }\n}\n```"
  },
  {
    "task": "Select all books with more than 300 pages from a library catalog.",
    "code": "```scala\ncase class Book(title: String, pages: Int)\n\ndef filterBooks(books: List[Book]): List[Book] = {\n  books.filter(_.pages > 300)\n}\n\n// Example usage\nval libraryCatalog = List(\n  Book(\"Book One\", 150),\n  Book(\"Book Two\", 350),\n  Book(\"Book Three\", 275),\n  Book(\"Book Four\", 400)\n)\n\nval booksWithMoreThan300Pages = filterBooks(libraryCatalog)\n```"
  },
  {
    "task": "Identify all users who have logged in within the past week from a user database.",
    "code": "```scala\nimport java.time.LocalDateTime\nimport java.time.temporal.ChronoUnit\n\ncase class User(id: Int, name: String, lastLogin: LocalDateTime)\n\ndef usersLoggedInPastWeek(users: List[User]): List[User] = {\n  val oneWeekAgo = LocalDateTime.now().minus(1, ChronoUnit.WEEKS)\n  users.filter(_.lastLogin.isAfter(oneWeekAgo))\n}\n\n// Example usage\nval users = List(\n  User(1, \"Alice\", LocalDateTime.now().minusDays(1)),\n  User(2, \"Bob\", LocalDateTime.now().minusDays(10)),\n  User(3, \"Charlie\", LocalDateTime.now().minusDays(5))\n)\n\nval recentUsers = usersLoggedInPastWeek(users)\n```"
  },
  {
    "task": "Extract all URLs that contain 'https' from a list of web addresses.",
    "code": "```scala\nval webAddresses = List(\n  \"http://example.com\",\n  \"https://secure.example.com\",\n  \"ftp://files.example.com\",\n  \"https://example.org\"\n)\n\nval httpsUrls = webAddresses.filter(_.contains(\"https\"))\n\nprintln(httpsUrls)\n```"
  },
  {
    "task": "Find all movies released after the year 2000 from a movie database.",
    "code": "```scala\ncase class Movie(title: String, year: Int)\n\ndef findMoviesAfter2000(movies: List[Movie]): List[Movie] = {\n  movies.filter(_.year > 2000)\n}\n\n// Example usage\nval movieDatabase = List(\n  Movie(\"The Matrix\", 1999),\n  Movie(\"Inception\", 2010),\n  Movie(\"Avatar\", 2009),\n  Movie(\"The Lord of the Rings: The Fellowship of the Ring\", 2001)\n)\n\nval moviesAfter2000 = findMoviesAfter2000(movieDatabase)\nprintln(moviesAfter2000)\n```"
  },
  {
    "task": "Select all tasks with a priority level of 'high' from a task management system.",
    "code": "```scala\ncase class Task(id: Int, name: String, priority: String)\n\nval tasks = List(\n  Task(1, \"Task 1\", \"low\"),\n  Task(2, \"Task 2\", \"medium\"),\n  Task(3, \"Task 3\", \"high\"),\n  Task(4, \"Task 4\", \"high\")\n)\n\nval highPriorityTasks = tasks.filter(_.priority == \"high\")\n```"
  },
  {
    "task": "Filter out all words longer than five characters from a text document.",
    "code": "```scala\nimport scala.io.Source\n\ndef filterWords(filePath: String): Seq[String] = {\n  val source = Source.fromFile(filePath)\n  val words = source.getLines().flatMap(_.split(\"\\\\s+\")).toSeq\n  source.close()\n  words.filter(_.length <= 5)\n}\n\nval filteredWords = filterWords(\"path/to/text/document.txt\")\nfilteredWords.foreach(println)\n```"
  },
  {
    "task": "Extract all odd numbers from a sequence of integers.",
    "code": "```scala\nval numbers = Seq(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\nval oddNumbers = numbers.filter(_ % 2 != 0)\n```"
  },
  {
    "task": "Select all files larger than 10MB from a list of files.",
    "code": "```scala\nval files = List(\"file1.txt\" -> 5000000L, \"file2.txt\" -> 15000000L, \"file3.txt\" -> 12000000L)\n\nval largeFiles = files.filter { case (_, size) => size > 10 * 1024 * 1024 }\n\nprintln(largeFiles)\n```"
  },
  {
    "task": "Identify all events occurring on weekends from an event schedule.",
    "code": "```scala\nimport java.time.LocalDate\nimport java.time.DayOfWeek\n\ncase class Event(name: String, date: LocalDate)\n\nval events = List(\n  Event(\"Conference\", LocalDate.of(2023, 10, 6)),\n  Event(\"Workshop\", LocalDate.of(2023, 10, 7)),\n  Event(\"Seminar\", LocalDate.of(2023, 10, 8)),\n  Event(\"Meetup\", LocalDate.of(2023, 10, 9))\n)\n\nval weekendEvents = events.filter(event => \n  event.date.getDayOfWeek == DayOfWeek.SATURDAY || \n  event.date.getDayOfWeek == DayOfWeek.SUNDAY\n)\n\nweekendEvents.foreach(println)\n```"
  },
  {
    "task": "Find all emails from a specific domain in an email list.",
    "code": "```scala\nval emails = List(\"user1@example.com\", \"user2@sample.com\", \"user3@example.com\", \"user4@test.com\")\nval domain = \"example.com\"\nval filteredEmails = emails.filter(email => email.endsWith(s\"@$domain\"))\nprintln(filteredEmails)\n```"
  },
  {
    "task": "Filter out all people not living in a specific city from a contact list.",
    "code": "```scala\ncase class Person(name: String, city: String)\n\ndef filterByCity(contacts: List[Person], city: String): List[Person] = {\n  contacts.filter(_.city == city)\n}\n```"
  },
  {
    "task": "Select all rectangles with an area greater than 50 from a list of rectangles.",
    "code": "```scala\ncase class Rectangle(width: Double, height: Double) {\n  def area: Double = width * height\n}\n\nval rectangles: List[Rectangle] = List(\n  Rectangle(5, 11),\n  Rectangle(4, 12),\n  Rectangle(7, 6),\n  Rectangle(3, 9)\n)\n\nval largeRectangles: List[Rectangle] = rectangles.filter(_.area > 50)\n```"
  },
  {
    "task": "Extract all elements that are not null from a collection.",
    "code": "```scala\nval collection: List[Any] = List(1, null, \"hello\", null, 5.5)\nval filteredCollection = collection.filter(_ != null)\n```"
  },
  {
    "task": "Identify all registered voters over the age of 18 from a voter registration list.",
    "code": "```scala\ncase class Voter(name: String, age: Int, registered: Boolean)\n\ndef filterRegisteredVotersOver18(voters: List[Voter]): List[Voter] = {\n  voters.filter(voter => voter.registered && voter.age > 18)\n}\n```"
  },
  {
    "task": "Select all cars manufactured after 2015 from a vehicle registry.",
    "code": "```scala\ncase class Car(manufacturerYear: Int)\n\nval vehicleRegistry: List[Car] = List(\n  Car(2010),\n  Car(2016),\n  Car(2018),\n  Car(2014)\n)\n\nval carsAfter2015: List[Car] = vehicleRegistry.filter(_.manufacturerYear > 2015)\n```"
  },
  {
    "task": "Filter out all negative numbers from a dataset of integers.",
    "code": "```scala\nval dataset: List[Int] = List(1, -2, 3, -4, 5)\nval filteredDataset: List[Int] = dataset.filter(_ >= 0)\n```"
  },
  {
    "task": "Extract all characters from a string that are uppercase.",
    "code": "```scala\nval extractUppercase: String => String = _.filter(_.isUpper)\n```"
  },
  {
    "task": "Identify all projects with a deadline within the next month from a project database.",
    "code": "```scala\nimport java.time.LocalDate\n\ncase class Project(name: String, deadline: LocalDate)\n\ndef projectsDueNextMonth(projects: List[Project]): List[Project] = {\n  val today = LocalDate.now()\n  val nextMonth = today.plusMonths(1)\n  projects.filter(p => p.deadline.isAfter(today) && p.deadline.isBefore(nextMonth))\n}\n\n// Example usage\nval projects = List(\n  Project(\"Project A\", LocalDate.now().plusDays(10)),\n  Project(\"Project B\", LocalDate.now().plusDays(40)),\n  Project(\"Project C\", LocalDate.now().plusDays(20))\n)\n\nval dueNextMonth = projectsDueNextMonth(projects)\ndueNextMonth.foreach(println)\n```"
  },
  {
    "task": "Select all athletes with a score higher than 90 from a competition result list.",
    "code": "```scala\ncase class Athlete(name: String, score: Int)\n\nval competitionResults = List(\n  Athlete(\"John Doe\", 85),\n  Athlete(\"Jane Smith\", 92),\n  Athlete(\"Emily Johnson\", 88),\n  Athlete(\"Michael Brown\", 95)\n)\n\nval highScorers = competitionResults.filter(_.score > 90)\n```"
  },
  {
    "task": "Filter out all strings that do not contain vowels from a list of words.",
    "code": "```scala\nval words = List(\"sky\", \"apple\", \"rhythm\", \"orange\", \"fly\")\nval vowels = Set('a', 'e', 'i', 'o', 'u')\n\nval filteredWords = words.filter(word => word.exists(char => vowels.contains(char)))\n\nprintln(filteredWords)\n```"
  },
  {
    "task": "Extract all dates that fall on a weekday from a calendar.",
    "code": "```scala\nimport java.time.LocalDate\nimport java.time.DayOfWeek\n\nval calendar: List[LocalDate] = List(\n  LocalDate.of(2023, 10, 1),\n  LocalDate.of(2023, 10, 2),\n  LocalDate.of(2023, 10, 3),\n  LocalDate.of(2023, 10, 4),\n  LocalDate.of(2023, 10, 5),\n  LocalDate.of(2023, 10, 6),\n  LocalDate.of(2023, 10, 7)\n)\n\nval weekdays: List[LocalDate] = calendar.filter(date => \n  !Set(DayOfWeek.SATURDAY, DayOfWeek.SUNDAY).contains(date.getDayOfWeek)\n)\n\nweekdays.foreach(println)\n```"
  },
  {
    "task": "Find all software versions that are stable releases from a list of software versions.",
    "code": "```scala\nval softwareVersions = List(\"1.0.0-alpha\", \"1.0.0\", \"2.0.0-beta\", \"2.0.0\", \"3.0.0-RC\", \"3.0.0\")\n\nval stableVersions = softwareVersions.filter(version => !version.contains(\"-\"))\n\nprintln(stableVersions)\n```"
  },
  {
    "task": "Select all temperatures above freezing from a weather report.",
    "code": "```scala\nval temperatures = List(30, 45, 28, 50, 31, 29, 32)\nval aboveFreezing = temperatures.filter(_ > 32)\n```"
  },
  {
    "task": "Identify all countries with a GDP per capita above $40,000 from a country dataset.",
    "code": "```scala\ncase class Country(name: String, gdpPerCapita: Double)\n\nval countries = List(\n  Country(\"CountryA\", 45000),\n  Country(\"CountryB\", 39000),\n  Country(\"CountryC\", 42000)\n)\n\nval wealthyCountries = countries.filter(_.gdpPerCapita > 40000)\n\nwealthyCountries.foreach(country => println(country.name))\n```"
  },
  {
    "task": "Filter out all names shorter than four letters from a roster.",
    "code": "```scala\nval roster = List(\"Tom\", \"Alice\", \"Bob\", \"John\", \"Eve\")\nval filteredRoster = roster.filter(_.length >= 4)\n```"
  },
  {
    "task": "Extract all numbers divisible by five from a sequence.",
    "code": "```scala\nval numbers = Seq(1, 5, 10, 12, 15, 20, 22, 25)\nval divisibleByFive = numbers.filter(_ % 5 == 0)\n```"
  },
  {
    "task": "Select all movies with a rating above 4 stars from a film review site.",
    "code": "```scala\ncase class Movie(title: String, rating: Double)\n\nval movies = List(\n  Movie(\"Inception\", 4.8),\n  Movie(\"Interstellar\", 4.6),\n  Movie(\"The Dark Knight\", 4.9),\n  Movie(\"Avatar\", 4.0),\n  Movie(\"Titanic\", 3.9)\n)\n\nval highRatedMovies = movies.filter(_.rating > 4.0)\n```"
  },
  {
    "task": "Find all jobs with a salary above $50,000 from a job listing.",
    "code": "```scala\ncase class Job(title: String, salary: Double)\n\nval jobListings = List(\n  Job(\"Software Engineer\", 75000),\n  Job(\"Data Analyst\", 48000),\n  Job(\"Project Manager\", 90000),\n  Job(\"UX Designer\", 50000)\n)\n\nval highSalaryJobs = jobListings.filter(_.salary > 50000)\n\nhighSalaryJobs.foreach(println)\n```"
  },
  {
    "task": "Filter out all entries without an email address from a contact form submission list.",
    "code": "```scala\nval contacts = List(\n  Map(\"name\" -> \"Alice\", \"email\" -> \"alice@example.com\"),\n  Map(\"name\" -> \"Bob\", \"phone\" -> \"123-456-7890\"),\n  Map(\"name\" -> \"Charlie\", \"email\" -> \"charlie@example.com\"),\n  Map(\"name\" -> \"David\")\n)\n\nval filteredContacts = contacts.filter(contact => contact.contains(\"email\"))\n\nfilteredContacts.foreach(println)\n```"
  },
  {
    "task": "Identify all animals weighing more than 50kg from a zoo inventory.",
    "code": "```scala\ncase class Animal(name: String, weight: Double)\n\nval zooInventory = List(\n  Animal(\"Elephant\", 5000),\n  Animal(\"Tiger\", 300),\n  Animal(\"Kangaroo\", 55),\n  Animal(\"Panda\", 70),\n  Animal(\"Monkey\", 40),\n  Animal(\"Parrot\", 1)\n)\n\nval heavyAnimals = zooInventory.filter(_.weight > 50)\n\nheavyAnimals.foreach(animal => println(animal.name))\n```"
  },
  {
    "task": "Select all songs with a duration longer than three minutes from a playlist.",
    "code": "```scala\ncase class Song(title: String, duration: Int)\n\ndef filterLongSongs(playlist: List[Song]): List[Song] = {\n  playlist.filter(song => song.duration > 180)\n}\n```"
  },
  {
    "task": "Extract all accounts with a balance below zero from a bank statement.",
    "code": "```scala\ncase class Account(accountNumber: String, balance: Double)\n\nval bankStatement: List[Account] = List(\n  Account(\"123\", 100.0),\n  Account(\"456\", -50.0),\n  Account(\"789\", 200.0),\n  Account(\"012\", -10.0)\n)\n\nval accountsBelowZero: List[Account] = bankStatement.filter(_.balance < 0)\n```"
  },
  {
    "task": "Filter out all non-alphabetic characters from a string of text.",
    "code": "```scala\nval text = \"Sample text with numbers 123 and symbols #!@\"\nval filteredText = text.filter(_.isLetter)\nprintln(filteredText)\n```"
  },
  {
    "task": "Select all participants who scored above average in a competition.",
    "code": "```scala\nval participants = List((\"Alice\", 85), (\"Bob\", 78), (\"Charlie\", 90), (\"David\", 72), (\"Eve\", 88))\n\nval scores = participants.map(_._2)\nval averageScore = scores.sum.toDouble / scores.length\n\nval aboveAverageParticipants = participants.filter(_._2 > averageScore)\n\naboveAverageParticipants.foreach(println)\n```"
  },
  {
    "task": "Find all houses priced under $300,000 from a real estate database.",
    "code": "```scala\ncase class House(price: Int)\n\ndef filterAffordableHouses(houses: List[House]): List[House] = {\n  houses.filter(_.price < 300000)\n}\n\n// Example usage\nval houseList = List(House(250000), House(350000), House(280000))\nval affordableHouses = filterAffordableHouses(houseList)\n```"
  },
  {
    "task": "Identify all plants that bloom in spring from a botanical catalog.",
    "code": "```scala\ncase class Plant(name: String, bloomingSeason: String)\n\nval catalog = List(\n  Plant(\"Rose\", \"Spring\"),\n  Plant(\"Tulip\", \"Spring\"),\n  Plant(\"Daisy\", \"Summer\"),\n  Plant(\"Sunflower\", \"Summer\"),\n  Plant(\"Lavender\", \"Spring\")\n)\n\nval springPlants = catalog.filter(_.bloomingSeason == \"Spring\")\n```"
  },
  {
    "task": "Extract all passwords that are longer than eight characters from a user database.",
    "code": "```scala\nval userDatabase: List[String] = List(\"password123\", \"12345678\", \"securepassword\", \"short\", \"anotherlongpassword\")\n\nval filteredPasswords: List[String] = userDatabase.filter(_.length > 8)\n\nfilteredPasswords.foreach(println)\n```"
  },
  {
    "task": "Filter out all projects that are not yet started from a project management tool.",
    "code": "```scala\ncase class Project(name: String, status: String)\n\nval projects = List(\n  Project(\"Project A\", \"Not Started\"),\n  Project(\"Project B\", \"In Progress\"),\n  Project(\"Project C\", \"Completed\"),\n  Project(\"Project D\", \"Not Started\")\n)\n\nval startedProjects = projects.filter(_.status != \"Not Started\")\n\nprintln(startedProjects)\n```"
  },
  {
    "task": "Select all days with temperatures exceeding 25\u00b0C from a climate report.",
    "code": "```scala\nval climateReport = List((\"Monday\", 22), (\"Tuesday\", 27), (\"Wednesday\", 30), (\"Thursday\", 18), (\"Friday\", 26))\n\nval hotDays = climateReport.filter { case (_, temperature) => temperature > 25 }\n\nprintln(hotDays)\n```"
  },
  {
    "task": "Find all recipes that are vegetarian from a cookbook.",
    "code": "```scala\ncase class Recipe(name: String, ingredients: List[String], isVegetarian: Boolean)\n\ndef findVegetarianRecipes(cookbook: List[Recipe]): List[Recipe] = {\n  cookbook.filter(_.isVegetarian)\n}\n\n// Example usage\nval cookbook = List(\n  Recipe(\"Spaghetti Bolognese\", List(\"pasta\", \"meat\", \"tomato sauce\"), false),\n  Recipe(\"Vegetable Stir Fry\", List(\"broccoli\", \"carrot\", \"soy sauce\"), true),\n  Recipe(\"Grilled Cheese Sandwich\", List(\"bread\", \"cheese\", \"butter\"), true)\n)\n\nval vegetarianRecipes = findVegetarianRecipes(cookbook)\nprintln(vegetarianRecipes)\n```"
  },
  {
    "task": "Identify all articles that mention a specific keyword from a news feed.",
    "code": "```scala\nval keyword = \"specificKeyword\"\nval newsFeed: List[String] = List(\n  \"Article about technology and innovation\",\n  \"Breaking news: specificKeyword spotted in the wild\",\n  \"The impact of specificKeyword on the economy\",\n  \"A day in the life of a programmer\"\n)\n\nval filteredArticles: List[String] = newsFeed.filter(_.contains(keyword))\n\nfilteredArticles.foreach(println)\n```"
  },
  {
    "task": "Extract all files with the '.jpg' extension from a directory.",
    "code": "```scala\nimport java.io.File\n\ndef listJpgFiles(dir: String): List[String] = {\n  new File(dir).listFiles\n    .filter(_.isFile)\n    .map(_.getName)\n    .filter(_.endsWith(\".jpg\"))\n    .toList\n}\n\nval jpgFiles = listJpgFiles(\"/path/to/directory\")\n```"
  },
  {
    "task": "Filter out all transactions that are not categorized from a financial statement.",
    "code": "```scala\ncase class Transaction(amount: Double, category: Option[String])\n\nval transactions: List[Transaction] = List(\n  Transaction(100.0, Some(\"Groceries\")),\n  Transaction(50.0, None),\n  Transaction(75.0, Some(\"Utilities\")),\n  Transaction(20.0, None)\n)\n\nval categorizedTransactions: List[Transaction] = transactions.filter(_.category.isDefined)\n```"
  },
  {
    "task": "Select all paintings created before 1900 from an art gallery collection.",
    "code": "```scala\ncase class Painting(title: String, artist: String, year: Int)\n\nval gallery = List(\n  Painting(\"Starry Night\", \"Vincent van Gogh\", 1889),\n  Painting(\"The Persistence of Memory\", \"Salvador Dal\u00ed\", 1931),\n  Painting(\"Mona Lisa\", \"Leonardo da Vinci\", 1503),\n  Painting(\"The Scream\", \"Edvard Munch\", 1893)\n)\n\nval paintingsBefore1900 = gallery.filter(_.year < 1900)\n```"
  },
  {
    "task": "Find all students with perfect attendance from a school record.",
    "code": "```scala\ncase class Student(name: String, attendance: Int)\n\ndef perfectAttendance(students: List[Student]): List[Student] = {\n  students.filter(_.attendance == 100)\n}\n\n// Example usage\nval students = List(\n  Student(\"Alice\", 100),\n  Student(\"Bob\", 95),\n  Student(\"Charlie\", 100)\n)\n\nval studentsWithPerfectAttendance = perfectAttendance(students)\nprintln(studentsWithPerfectAttendance)\n```"
  },
  {
    "task": "Identify all messages sent by a specific user from a chat application.",
    "code": "```scala\ncase class Message(sender: String, content: String)\n\ndef filterMessagesByUser(messages: List[Message], user: String): List[Message] = {\n  messages.filter(_.sender == user)\n}\n\n// Example usage:\nval allMessages = List(\n  Message(\"Alice\", \"Hello!\"),\n  Message(\"Bob\", \"Hi!\"),\n  Message(\"Alice\", \"How are you?\"),\n  Message(\"Charlie\", \"Good morning!\")\n)\n\nval userMessages = filterMessagesByUser(allMessages, \"Alice\")\n```"
  },
  {
    "task": "Extract all elements greater than 100 from an array of numbers.",
    "code": "```scala\nval numbers = Array(50, 150, 200, 75, 100, 125)\nval greaterThan100 = numbers.filter(_ > 100)\n```"
  },
  {
    "task": "Filter out all words that do not end in 'ed' from a paragraph.",
    "code": "```scala\nval paragraph = \"This is a tested method that should be applied and evaluated.\"\nval words = paragraph.split(\"\\\\s+\")\nval filteredWords = words.filter(_.endsWith(\"ed\"))\nfilteredWords.foreach(println)\n```"
  },
  {
    "task": "Select all flights departing before noon from a flight schedule.",
    "code": "```scala\ncase class Flight(departureTime: String)\n\nval flights = List(\n  Flight(\"09:30\"),\n  Flight(\"12:15\"),\n  Flight(\"11:45\"),\n  Flight(\"14:00\")\n)\n\nval flightsBeforeNoon = flights.filter { flight =>\n  val Array(hours, minutes) = flight.departureTime.split(\":\").map(_.toInt)\n  hours < 12\n}\n\nflightsBeforeNoon.foreach(println)\n```"
  },
  {
    "task": "Find all products priced above $20 from an online store inventory.",
    "code": "```scala\ncase class Product(name: String, price: Double)\n\nval inventory = List(\n  Product(\"Product1\", 15.99),\n  Product(\"Product2\", 25.50),\n  Product(\"Product3\", 30.00),\n  Product(\"Product4\", 10.00)\n)\n\nval productsAbove20 = inventory.filter(_.price > 20.0)\n\nprintln(productsAbove20)\n```"
  },
  {
    "task": "Identify all sessions longer than one hour from a webinar series.",
    "code": "```scala\ncase class Session(title: String, durationInMinutes: Int)\n\ndef filterLongSessions(sessions: List[Session]): List[Session] = {\n  sessions.filter(_.durationInMinutes > 60)\n}\n\n// Example usage:\nval sessions = List(\n  Session(\"Session 1\", 45),\n  Session(\"Session 2\", 75),\n  Session(\"Session 3\", 120)\n)\n\nval longSessions = filterLongSessions(sessions)\nprintln(longSessions)\n```"
  },
  {
    "task": "Extract all images with a resolution higher than 1080p from a photo library.",
    "code": "```scala\ncase class Image(width: Int, height: Int, path: String)\n\ndef extractHighResolutionImages(library: List[Image]): List[Image] = {\n  library.filter(image => image.width > 1920 && image.height > 1080)\n}\n\n// Example usage\nval photoLibrary = List(\n  Image(1920, 1080, \"image1.jpg\"),\n  Image(2560, 1440, \"image2.jpg\"),\n  Image(3840, 2160, \"image3.jpg\"),\n  Image(1280, 720, \"image4.jpg\")\n)\n\nval highResImages = extractHighResolutionImages(photoLibrary)\n```"
  },
  {
    "task": "Filter out all responses that are not 'yes' or 'no' from a survey result.",
    "code": "```scala\nval surveyResponses = List(\"yes\", \"no\", \"maybe\", \"yes\", \"no\", \"unknown\")\n\nval filteredResponses = surveyResponses.filter(response => response == \"yes\" || response == \"no\")\n\nprintln(filteredResponses)\n```"
  },
  {
    "task": "Select all tweets with more than 100 likes from a Twitter feed.",
    "code": "```scala\ncase class Tweet(content: String, likes: Int)\n\ndef filterPopularTweets(tweets: List[Tweet]): List[Tweet] = {\n  tweets.filter(_.likes > 100)\n}\n\n// Example usage\nval tweets = List(\n  Tweet(\"Hello World!\", 50),\n  Tweet(\"Scala is awesome!\", 150),\n  Tweet(\"Functional programming rocks!\", 200)\n)\n\nval popularTweets = filterPopularTweets(tweets)\n```"
  },
  {
    "task": "Find all links that are broken from a webpage.",
    "code": "```scala\nimport scala.io.Source\nimport scala.util.Try\nimport java.net.{HttpURLConnection, URL}\n\nobject BrokenLinksFinder {\n  def getLinksFromWebpage(url: String): Seq[String] = {\n    val pattern = \"\"\"href=[\"'](http[s]?://[^\"']+)[\"']\"\"\".r\n    val content = Source.fromURL(url).mkString\n    pattern.findAllMatchIn(content).map(_.group(1)).toSeq\n  }\n\n  def isLinkBroken(link: String): Boolean = {\n    Try {\n      val connection = new URL(link).openConnection().asInstanceOf[HttpURLConnection]\n      connection.setRequestMethod(\"HEAD\")\n      connection.connect()\n      val responseCode = connection.getResponseCode\n      responseCode >= 400\n    }.getOrElse(true)\n  }\n\n  def findBrokenLinks(url: String): Seq[String] = {\n    val links = getLinksFromWebpage(url)\n    links.filter(isLinkBroken)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val url = \"http://example.com\"\n    val brokenLinks = findBrokenLinks(url)\n    println(\"Broken Links:\")\n    brokenLinks.foreach(println)\n  }\n}\n```"
  },
  {
    "task": "Identify all machines that are currently offline from a network monitoring tool.",
    "code": "```scala\ncase class Machine(id: String, status: String)\n\ndef offlineMachines(machines: List[Machine]): List[Machine] = {\n  machines.filter(_.status == \"offline\")\n}\n\n// Example usage\nval machines = List(\n  Machine(\"machine1\", \"offline\"),\n  Machine(\"machine2\", \"online\"),\n  Machine(\"machine3\", \"offline\")\n)\n\nval offline = offlineMachines(machines)\nprintln(offline)\n```"
  },
  {
    "task": "Extract all invoices with a due date in the current month from an accounting system.",
    "code": "```scala\nimport java.time.LocalDate\n\ncase class Invoice(id: Int, dueDate: LocalDate)\n\ndef invoicesDueThisMonth(invoices: List[Invoice]): List[Invoice] = {\n  val now = LocalDate.now()\n  invoices.filter(invoice => \n    invoice.dueDate.getYear == now.getYear && invoice.dueDate.getMonth == now.getMonth\n  )\n}\n```"
  },
  {
    "task": "Filter out all lines in a file that start with a '#' from a configuration file.",
    "code": "```scala\nimport scala.io.Source\n\ndef filterComments(filePath: String): Seq[String] = {\n  val source = Source.fromFile(filePath)\n  val filteredLines = source.getLines().filterNot(_.startsWith(\"#\")).toSeq\n  source.close()\n  filteredLines\n}\n\n// Example usage:\n// val lines = filterComments(\"config.txt\")\n// lines.foreach(println)\n```"
  },
  {
    "task": "Select all posts with a comment count higher than 50 from a blog.",
    "code": "```scala\ncase class Post(title: String, commentCount: Int)\n\nval posts = List(\n  Post(\"Post 1\", 40),\n  Post(\"Post 2\", 60),\n  Post(\"Post 3\", 30),\n  Post(\"Post 4\", 70)\n)\n\nval filteredPosts = posts.filter(_.commentCount > 50)\n```"
  },
  {
    "task": "Find all offers that expire within the next week from a promotional database.",
    "code": "```scala\nimport java.time.{LocalDate, Period}\n\ncase class Offer(name: String, expiryDate: LocalDate)\n\ndef offersExpiringWithinAWeek(offers: List[Offer]): List[Offer] = {\n  val today = LocalDate.now()\n  offers.filter(offer => {\n    val daysUntilExpiry = Period.between(today, offer.expiryDate).getDays\n    daysUntilExpiry >= 0 && daysUntilExpiry <= 7\n  })\n}\n\n// Example usage:\nval promotionalOffers = List(\n  Offer(\"Offer1\", LocalDate.now().plusDays(3)),\n  Offer(\"Offer2\", LocalDate.now().plusDays(10)),\n  Offer(\"Offer3\", LocalDate.now().plusDays(7))\n)\n\nval expiringOffers = offersExpiringWithinAWeek(promotionalOffers)\nprintln(expiringOffers)\n```"
  },
  {
    "task": "Identify all items that are on sale from a shopping catalog.",
    "code": "```scala\ncase class Item(name: String, price: Double, onSale: Boolean)\n\nval catalog: List[Item] = List(\n  Item(\"Laptop\", 999.99, false),\n  Item(\"Smartphone\", 499.99, true),\n  Item(\"Tablet\", 299.99, false),\n  Item(\"Headphones\", 89.99, true),\n  Item(\"Smartwatch\", 199.99, true)\n)\n\nval itemsOnSale: List[Item] = catalog.filter(_.onSale)\n\nitemsOnSale.foreach(item => println(s\"${item.name} is on sale for ${item.price}\"))\n```"
  },
  {
    "task": "Extract all notes that mention 'urgent' from a meeting record.",
    "code": "```scala\nval meetingRecord = List(\n  \"Discuss project timeline\",\n  \"Budget review - urgent\",\n  \"Team building activities\",\n  \"Client feedback - urgent\",\n  \"Office supplies ordering\"\n)\n\nval urgentNotes = meetingRecord.filter(_.toLowerCase.contains(\"urgent\"))\n\nprintln(urgentNotes)\n```"
  },
  {
    "task": "Filter out all numbers that do not have a remainder when divided by two from a list.",
    "code": "```scala\nval numbers = List(1, 2, 3, 4, 5, 6)\nval filteredNumbers = numbers.filter(_ % 2 != 0)\n```"
  },
  {
    "task": "Select all concerts happening in the summer from an event calendar.",
    "code": "```scala\ncase class Event(name: String, date: String)\n\ndef isSummerEvent(event: Event): Boolean = {\n  val summerMonths = Set(\"June\", \"July\", \"August\")\n  summerMonths.exists(month => event.date.contains(month))\n}\n\nval events = List(\n  Event(\"Concert A\", \"June 15, 2023\"),\n  Event(\"Concert B\", \"December 10, 2023\"),\n  Event(\"Concert C\", \"July 22, 2023\"),\n  Event(\"Concert D\", \"March 5, 2023\")\n)\n\nval summerConcerts = events.filter(isSummerEvent)\n```"
  },
  {
    "task": "Find all users with more than 1000 followers from a social media platform.",
    "code": "```scala\ncase class User(username: String, followers: Int)\n\nval users = List(\n  User(\"alice\", 500),\n  User(\"bob\", 1500),\n  User(\"carol\", 2000),\n  User(\"dave\", 800)\n)\n\nval usersWithMoreThan1000Followers = users.filter(_.followers > 1000)\n\nprintln(usersWithMoreThan1000Followers)\n```"
  },
  {
    "task": "Identify all stocks with a growth rate above 10% from a financial portfolio.",
    "code": "```scala\ncase class Stock(name: String, growthRate: Double)\n\nval portfolio: List[Stock] = List(\n  Stock(\"AAPL\", 12.5),\n  Stock(\"GOOGL\", 8.3),\n  Stock(\"MSFT\", 15.0),\n  Stock(\"TSLA\", 9.7)\n)\n\nval highGrowthStocks: List[Stock] = portfolio.filter(_.growthRate > 10.0)\n\nhighGrowthStocks\n```"
  },
  {
    "task": "Extract all reviews that have a five-star rating from a product review site.",
    "code": "```scala\ncase class Review(rating: Int, content: String)\n\ndef filterFiveStarReviews(reviews: List[Review]): List[Review] = {\n  reviews.filter(_.rating == 5)\n}\n```"
  },
  {
    "task": "Filter out all emails that are not flagged from an inbox.",
    "code": "```scala\ncase class Email(subject: String, flagged: Boolean)\n\ndef filterFlaggedEmails(emails: List[Email]): List[Email] = {\n  emails.filter(_.flagged)\n}\n\n// Example usage\nval inbox = List(\n  Email(\"Meeting\", true),\n  Email(\"Lunch\", false),\n  Email(\"Project Update\", true)\n)\n\nval flaggedEmails = filterFlaggedEmails(inbox)\n```"
  },
  {
    "task": "Select all entries with a timestamp from the past 24 hours from a log file.",
    "code": "```scala\nimport java.time.{LocalDateTime, ZoneOffset}\nimport scala.io.Source\n\ncase class LogEntry(timestamp: LocalDateTime, message: String)\n\ndef parseLogEntry(line: String): Option[LogEntry] = {\n  val parts = line.split(\" \", 2)\n  if (parts.length == 2) {\n    val timestamp = LocalDateTime.parse(parts(0))\n    Some(LogEntry(timestamp, parts(1)))\n  } else {\n    None\n  }\n}\n\ndef filterRecentEntries(logFile: String): List[LogEntry] = {\n  val now = LocalDateTime.now(ZoneOffset.UTC)\n  val cutoff = now.minusDays(1)\n\n  Source.fromFile(logFile)\n    .getLines()\n    .flatMap(parseLogEntry)\n    .filter(_.timestamp.isAfter(cutoff))\n    .toList\n}\n\n// Usage\nval recentEntries = filterRecentEntries(\"path/to/logfile.log\")\n```"
  },
  {
    "task": "Find all books by a specific author from a library database.",
    "code": "```scala\ncase class Book(title: String, author: String)\n\ndef booksByAuthor(library: List[Book], author: String): List[Book] = {\n  library.filter(_.author == author)\n}\n\n// Example usage:\nval library = List(\n  Book(\"1984\", \"George Orwell\"),\n  Book(\"Animal Farm\", \"George Orwell\"),\n  Book(\"Brave New World\", \"Aldous Huxley\")\n)\n\nval orwellBooks = booksByAuthor(library, \"George Orwell\")\n```"
  },
  {
    "task": "Identify all donations above $500 from a charity fundraiser report.",
    "code": "```scala\nval donations = List(250, 600, 1500, 400, 750, 200)\n\nval largeDonations = donations.filter(_ > 500)\n\nprintln(largeDonations)\n```"
  },
  {
    "task": "Extract all assignments due in the next week from a course syllabus.",
    "code": "```scala\nimport java.time.LocalDate\n\ncase class Assignment(name: String, dueDate: LocalDate)\n\ndef assignmentsDueNextWeek(assignments: List[Assignment], today: LocalDate): List[Assignment] = {\n  val nextWeek = today.plusWeeks(1)\n  assignments.filter(assignment => \n    !assignment.dueDate.isBefore(today) && assignment.dueDate.isBefore(nextWeek)\n  )\n}\n```"
  },
  {
    "task": "Filter out all movies that are not in English from a streaming service.",
    "code": "```scala\ncase class Movie(title: String, language: String)\n\ndef filterEnglishMovies(movies: List[Movie]): List[Movie] = {\n  movies.filter(_.language == \"English\")\n}\n\n// Example usage:\nval allMovies = List(\n  Movie(\"Inception\", \"English\"),\n  Movie(\"Am\u00e9lie\", \"French\"),\n  Movie(\"Parasite\", \"Korean\"),\n  Movie(\"The Dark Knight\", \"English\")\n)\n\nval englishMovies = filterEnglishMovies(allMovies)\n```"
  },
  {
    "task": "Select all landmarks located in Europe from a travel guide.",
    "code": "```scala\ncase class Landmark(name: String, location: String)\n\nval landmarks = List(\n  Landmark(\"Eiffel Tower\", \"Europe\"),\n  Landmark(\"Statue of Liberty\", \"North America\"),\n  Landmark(\"Colosseum\", \"Europe\"),\n  Landmark(\"Great Wall of China\", \"Asia\")\n)\n\nval europeanLandmarks = landmarks.filter(_.location == \"Europe\")\n\neuropeanLandmarks.foreach(println)\n```"
  },
  {
    "task": "Find all contracts that are set to renew next month from a contract management system.",
    "code": "```scala\nimport java.time.LocalDate\n\ncase class Contract(id: Int, renewalDate: LocalDate)\n\ndef findRenewingContracts(contracts: List[Contract]): List[Contract] = {\n  val nextMonth = LocalDate.now().plusMonths(1).getMonth\n  contracts.filter(_.renewalDate.getMonth == nextMonth)\n}\n\n// Example usage\nval contracts = List(\n  Contract(1, LocalDate.of(2023, 11, 15)),\n  Contract(2, LocalDate.of(2023, 12, 20)),\n  Contract(3, LocalDate.of(2024, 1, 5))\n)\n\nval renewingContracts = findRenewingContracts(contracts)\n```"
  },
  {
    "task": "Identify all volunteer hours logged in the past year from a non-profit organization database.",
    "code": "```scala\nimport java.time.LocalDate\n\ncase class VolunteerLog(volunteerId: Int, hours: Double, date: LocalDate)\n\ndef filterVolunteerHours(logs: List[VolunteerLog]): List[VolunteerLog] = {\n  val oneYearAgo = LocalDate.now().minusYears(1)\n  logs.filter(_.date.isAfter(oneYearAgo))\n}\n\n// Example usage\nval logs = List(\n  VolunteerLog(1, 5.0, LocalDate.of(2022, 10, 5)),\n  VolunteerLog(2, 8.0, LocalDate.of(2023, 5, 10)),\n  VolunteerLog(3, 4.0, LocalDate.of(2021, 3, 15))\n)\n\nval recentLogs = filterVolunteerHours(logs)\nprintln(recentLogs)\n```"
  },
  {
    "task": "Extract all elements that are not strings from a mixed-type list.",
    "code": "```scala\nval mixedList: List[Any] = List(1, \"apple\", 2.5, 'c', \"banana\", 42, true)\nval nonStrings = mixedList.filter {\n  case _: String => false\n  case _ => true\n}\n```"
  },
  {
    "task": "Filter out all orders that are not yet shipped from an e-commerce system.",
    "code": "```scala\ncase class Order(id: Int, status: String)\n\nval orders = List(\n  Order(1, \"shipped\"),\n  Order(2, \"pending\"),\n  Order(3, \"shipped\"),\n  Order(4, \"processing\")\n)\n\nval shippedOrders = orders.filter(_.status == \"shipped\")\n\nshippedOrders.foreach(println)\n```"
  },
  {
    "task": "Select all emails sent from a specific address in an email server.",
    "code": "```scala\ncase class Email(from: String, subject: String, body: String)\n\ndef filterEmailsBySender(emails: List[Email], sender: String): List[Email] = {\n  emails.filter(_.from == sender)\n}\n\n// Example usage:\n// val emails = List(\n//   Email(\"example@example.com\", \"Subject 1\", \"Body 1\"),\n//   Email(\"sender@example.com\", \"Subject 2\", \"Body 2\"),\n//   Email(\"example@example.com\", \"Subject 3\", \"Body 3\")\n// )\n// val filteredEmails = filterEmailsBySender(emails, \"sender@example.com\")\n```"
  },
  {
    "task": "Find all passwords with at least one special character from a security database.",
    "code": "```scala\nval passwords = List(\"password123\", \"pass@word\", \"admin!\", \"user123\")\n\nval specialCharacters = \"!@#$%^&*()-_=+[]{}|;:',.<>?/`~\"\n\nval passwordsWithSpecialChar = passwords.filter(password => password.exists(specialCharacters.contains(_)))\n\nprintln(passwordsWithSpecialChar)\n```"
  },
  {
    "task": "Identify all courses with a prerequisite from a university catalog.",
    "code": "```scala\ncase class Course(name: String, prerequisite: Option[String])\n\nval courses = List(\n  Course(\"Calculus\", None),\n  Course(\"Physics\", Some(\"Calculus\")),\n  Course(\"Literature\", None),\n  Course(\"Algorithms\", Some(\"Data Structures\"))\n)\n\nval coursesWithPrerequisites = courses.filter(_.prerequisite.isDefined)\n\ncoursesWithPrerequisites.foreach(course => println(course.name))\n```"
  },
  {
    "task": "Extract all genes associated with a specific trait from a genetic database.",
    "code": "```scala\ncase class Gene(id: String, traits: List[String])\n\ndef filterGenesByTrait(genes: List[Gene], targetTrait: String): List[Gene] = {\n  genes.filter(gene => gene.traits.contains(targetTrait))\n}\n\n// Example usage\nval genesDatabase = List(\n  Gene(\"gene1\", List(\"traitA\", \"traitB\")),\n  Gene(\"gene2\", List(\"traitC\")),\n  Gene(\"gene3\", List(\"traitA\", \"traitD\"))\n)\n\nval associatedGenes = filterGenesByTrait(genesDatabase, \"traitA\")\n```"
  },
  {
    "task": "Filter out all investments with a risk level below medium from a portfolio.",
    "code": "```scala\ncase class Investment(name: String, riskLevel: String)\n\ndef filterInvestments(portfolio: List[Investment]): List[Investment] = {\n  val riskThreshold = Set(\"medium\", \"high\")\n  portfolio.filter(investment => riskThreshold.contains(investment.riskLevel))\n}\n\n// Example usage:\nval portfolio = List(\n  Investment(\"Investment1\", \"low\"),\n  Investment(\"Investment2\", \"medium\"),\n  Investment(\"Investment3\", \"high\"),\n  Investment(\"Investment4\", \"low\")\n)\n\nval filteredPortfolio = filterInvestments(portfolio)\n```"
  },
  {
    "task": "Select all calls longer than five minutes from a call log.",
    "code": "```scala\ncase class CallLog(caller: String, durationMinutes: Int)\n\nval callLogs = List(\n  CallLog(\"Alice\", 3),\n  CallLog(\"Bob\", 7),\n  CallLog(\"Charlie\", 10),\n  CallLog(\"Diana\", 4)\n)\n\nval longCalls = callLogs.filter(_.durationMinutes > 5)\n```"
  }
]