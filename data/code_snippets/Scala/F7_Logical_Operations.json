[
  {
    "task": "Create a function that takes two boolean inputs and returns true if both are true using logical AND.",
    "code": "```scala\ndef bothTrue(a: Boolean, b: Boolean): Boolean = a && b\n```"
  },
  {
    "task": "Write a script to check if either of two given conditions are met using logical OR.",
    "code": "```scala\nobject LogicalOperationsExample {\n  def main(args: Array[String]): Unit = {\n    val condition1 = true\n    val condition2 = false\n\n    if (condition1 || condition2) {\n      println(\"At least one condition is met.\")\n    } else {\n      println(\"Neither condition is met.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Develop a program that negates a boolean variable using logical NOT.",
    "code": "```scala\nobject LogicalNotExample {\n  def main(args: Array[String]): Unit = {\n    val booleanVariable: Boolean = true\n    val negatedVariable: Boolean = !booleanVariable\n    println(s\"Original: $booleanVariable, Negated: $negatedVariable\")\n  }\n}\n```"
  },
  {
    "task": "Implement a feature that determines if a number is within a specific range using logical operators.",
    "code": "```scala\nobject RangeChecker {\n  def isWithinRange(number: Int, lowerBound: Int, upperBound: Int): Boolean = {\n    number >= lowerBound && number <= upperBound\n  }\n\n  def main(args: Array[String]): Unit = {\n    val number = 10\n    val lowerBound = 5\n    val upperBound = 15\n    val result = isWithinRange(number, lowerBound, upperBound)\n    println(s\"Is $number within range [$lowerBound, $upperBound]? $result\")\n  }\n}\n```"
  },
  {
    "task": "Design a system that checks if a user has both read and write permissions using logical AND.",
    "code": "```scala\nobject PermissionChecker {\n  def hasReadAndWritePermissions(readPermission: Boolean, writePermission: Boolean): Boolean = {\n    readPermission && writePermission\n  }\n\n  def main(args: Array[String]): Unit = {\n    val userHasReadPermission = true\n    val userHasWritePermission = false\n\n    if (hasReadAndWritePermissions(userHasReadPermission, userHasWritePermission)) {\n      println(\"User has both read and write permissions.\")\n    } else {\n      println(\"User does not have both read and write permissions.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Write a function to verify if a string is neither empty nor null using logical NOT.",
    "code": "```scala\ndef isStringValid(input: String): Boolean = {\n  !(input == null || input.isEmpty)\n}\n```"
  },
  {
    "task": "Create a conditional statement that executes a block of code if either of two expressions are true using logical OR.",
    "code": "```scala\nobject LogicalOperations {\n  def main(args: Array[String]): Unit = {\n    val expression1 = true\n    val expression2 = false\n    \n    if (expression1 || expression2) {\n      println(\"At least one expression is true.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Build a program that inverts the truth value of a given condition using logical NOT.",
    "code": "```scala\nobject LogicalNotExample {\n  def invertCondition(condition: Boolean): Boolean = {\n    !condition\n  }\n\n  def main(args: Array[String]): Unit = {\n    val originalCondition = true\n    val invertedCondition = invertCondition(originalCondition)\n    println(s\"Original: $originalCondition, Inverted: $invertedCondition\")\n  }\n}\n```"
  },
  {
    "task": "Compose a function to return true if a list is not empty using logical NOT.",
    "code": "```scala\ndef isNotEmpty(list: List[Any]): Boolean = {\n  !list.isEmpty\n}\n```"
  },
  {
    "task": "Develop a filter that selects items from a collection only if they meet multiple criteria using logical AND.",
    "code": "```scala\nval items = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\nval filteredItems = items.filter(item => item > 3 && item % 2 == 0)\n\nprintln(filteredItems)\n```"
  },
  {
    "task": "Write a script that checks if a value is outside a given range using logical OR.",
    "code": "```scala\nobject RangeCheck {\n  def isOutsideRange(value: Int, lowerBound: Int, upperBound: Int): Boolean = {\n    value < lowerBound || value > upperBound\n  }\n\n  def main(args: Array[String]): Unit = {\n    val value = 10\n    val lowerBound = 5\n    val upperBound = 15\n\n    if (isOutsideRange(value, lowerBound, upperBound)) {\n      println(s\"$value is outside the range $lowerBound to $upperBound\")\n    } else {\n      println(s\"$value is inside the range $lowerBound to $upperBound\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Create a small program to toggle a boolean flag using logical NOT.",
    "code": "```scala\nobject ToggleFlag {\n  def main(args: Array[String]): Unit = {\n    var flag: Boolean = true\n    println(s\"Initial flag: $flag\")\n    flag = !flag\n    println(s\"Toggled flag: $flag\")\n  }\n}\n```"
  },
  {
    "task": "Implement a feature that evaluates if a username is both unique and valid using logical AND.",
    "code": "```scala\ndef isUnique(username: String, existingUsernames: Set[String]): Boolean = {\n  !existingUsernames.contains(username)\n}\n\ndef isValid(username: String): Boolean = {\n  username.nonEmpty && !username.contains(\" \")\n}\n\ndef isUniqueAndValid(username: String, existingUsernames: Set[String]): Boolean = {\n  isUnique(username, existingUsernames) && isValid(username)\n}\n\n// Example usage\nval existingUsernames = Set(\"user1\", \"user2\", \"admin\")\nval username = \"newUser\"\n\nval result = isUniqueAndValid(username, existingUsernames)\nprintln(s\"Is the username '$username' unique and valid? $result\")\n```"
  },
  {
    "task": "Design a conditional to perform an action if neither of two flags are set using logical NOT.",
    "code": "```scala\nobject LogicalOperationsExample {\n  def main(args: Array[String]): Unit = {\n    val flag1 = false\n    val flag2 = false\n\n    if (!flag1 && !flag2) {\n      println(\"Neither flag1 nor flag2 is set.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Write a function that returns true if at least one of multiple boolean inputs is true using logical OR.",
    "code": "```scala\ndef atLeastOneTrue(inputs: Boolean*): Boolean = {\n  inputs.contains(true)\n}\n```"
  },
  {
    "task": "Create a loop that continues executing as long as two conditions are both false using logical NOT and AND.",
    "code": "```scala\nobject LogicalOperationsExample {\n  def main(args: Array[String]): Unit = {\n    var conditionA = false\n    var conditionB = false\n\n    while (!(conditionA && conditionB)) {\n      // Your loop logic here\n\n      // Example change to conditions to eventually break the loop\n      conditionA = true\n      conditionB = true\n    }\n  }\n}\n```"
  },
  {
    "task": "Develop a sequence that checks if a character is either a vowel or a consonant using logical OR.",
    "code": "```scala\nobject VowelConsonantChecker {\n  def isVowelOrConsonant(char: Char): String = {\n    val vowels = \"aeiouAEIOU\"\n    if (vowels.contains(char) || char.isLetter) \"Vowel or Consonant\"\n    else \"Neither\"\n  }\n\n  def main(args: Array[String]): Unit = {\n    val chars = Seq('a', 'b', '1', 'E', 'z', '!')\n    val results = chars.map(isVowelOrConsonant)\n    results.foreach(println)\n  }\n}\n```"
  },
  {
    "task": "Implement a validation that ensures a password is both of minimum length and contains numbers using logical AND.",
    "code": "```scala\ndef isValidPassword(password: String, minLength: Int): Boolean = {\n  def containsNumber(s: String): Boolean = s.exists(_.isDigit)\n\n  password.length >= minLength && containsNumber(password)\n}\n\n// Example usage\nval password = \"pass1234\"\nval minLength = 8\nprintln(isValidPassword(password, minLength)) // Output: true or false based on the password\n```"
  },
  {
    "task": "Compose a test to determine if a point is not within a circle using logical NOT.",
    "code": "```scala\nobject PointInCircleTest {\n  case class Point(x: Double, y: Double)\n  case class Circle(center: Point, radius: Double)\n\n  def isOutsideCircle(point: Point, circle: Circle): Boolean = {\n    val dx = point.x - circle.center.x\n    val dy = point.y - circle.center.y\n    val distanceSquared = dx * dx + dy * dy\n    !(distanceSquared <= circle.radius * circle.radius)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val point = Point(5, 5)\n    val circle = Circle(Point(0, 0), 3)\n    println(isOutsideCircle(point, circle)) // Expected: true\n  }\n}\n```"
  },
  {
    "task": "Write a function to decide if a user is either an admin or an editor using logical OR.",
    "code": "```scala\ndef isAdminOrEditor(userRole: String): Boolean = {\n  userRole == \"admin\" || userRole == \"editor\"\n}\n```"
  },
  {
    "task": "Create a conditional statement to trigger an alert if two sensors both detect motion using logical AND.",
    "code": "```scala\nobject MotionAlert {\n  def main(args: Array[String]): Unit = {\n    val sensor1DetectedMotion = true\n    val sensor2DetectedMotion = true\n\n    if (sensor1DetectedMotion && sensor2DetectedMotion) {\n      println(\"Alert: Both sensors detected motion!\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Design a program to validate an email format and ensure it contains a domain using logical AND.",
    "code": "```scala\nobject EmailValidator {\n  def isValidEmail(email: String): Boolean = {\n    val atSymbolPresent = email.contains(\"@\")\n    val domainPresent = email.split(\"@\").lift(1).exists(_.contains(\".\"))\n    atSymbolPresent && domainPresent\n  }\n\n  def main(args: Array[String]): Unit = {\n    val email = \"test@example.com\"\n    println(s\"Is the email '$email' valid? ${isValidEmail(email)}\")\n  }\n}\n```"
  },
  {
    "task": "Develop a method to confirm that a transaction is neither fraudulent nor unauthorized using logical NOT.",
    "code": "```scala\nobject TransactionValidator {\n  def isTransactionValid(isFraudulent: Boolean, isUnauthorized: Boolean): Boolean = {\n    !(isFraudulent || isUnauthorized)\n  }\n}\n```"
  },
  {
    "task": "Write a function that outputs true if a file is either missing or empty using logical OR.",
    "code": "```scala\nimport java.io.File\n\ndef isFileMissingOrEmpty(filePath: String): Boolean = {\n  val file = new File(filePath)\n  !file.exists() || file.length() == 0\n}\n```"
  },
  {
    "task": "Implement a system to check if a student's grade is neither failing nor incomplete using logical NOT.",
    "code": "```scala\nobject GradeChecker {\n  def isPassingGrade(grade: String): Boolean = {\n    !(grade == \"Failing\" || grade == \"Incomplete\")\n  }\n\n  def main(args: Array[String]): Unit = {\n    val grade = \"Incomplete\"\n    if (isPassingGrade(grade)) {\n      println(\"The student's grade is passing.\")\n    } else {\n      println(\"The student's grade is either failing or incomplete.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Create a script that executes a command if a file is both readable and writable using logical AND.",
    "code": "```scala\nimport java.io.File\n\nobject FileCheck {\n  def main(args: Array[String]): Unit = {\n    val filePath = \"path/to/your/file.txt\"\n    val file = new File(filePath)\n\n    if (file.canRead && file.canWrite) {\n      println(s\"The file $filePath is both readable and writable. Executing command...\")\n      // Execute your command here\n    } else {\n      println(s\"The file $filePath is not both readable and writable.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Compose a function to determine if a temperature is not within a safe operating range using logical NOT.",
    "code": "```scala\ndef isTemperatureUnsafe(temperature: Double): Boolean = {\n  val safeMin = 18.0\n  val safeMax = 25.0\n  !(temperature >= safeMin && temperature <= safeMax)\n}\n```"
  },
  {
    "task": "Design a check to see if a car is either out of fuel or needs maintenance using logical OR.",
    "code": "```scala\nobject CarCheck {\n  def needsAttention(isOutOfFuel: Boolean, needsMaintenance: Boolean): Boolean = {\n    isOutOfFuel || needsMaintenance\n  }\n\n  def main(args: Array[String]): Unit = {\n    val outOfFuel = true\n    val needsMaintenance = false\n\n    if (needsAttention(outOfFuel, needsMaintenance)) {\n      println(\"The car needs attention.\")\n    } else {\n      println(\"The car is fine.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Develop a routine that ensures a network connection is both stable and secure using logical AND.",
    "code": "```scala\ndef isConnectionStable: Boolean = {\n  // Placeholder for actual stability check logic\n  true\n}\n\ndef isConnectionSecure: Boolean = {\n  // Placeholder for actual security check logic\n  true\n}\n\ndef isConnectionStableAndSecure: Boolean = {\n  isConnectionStable && isConnectionSecure\n}\n```"
  },
  {
    "task": "Write a conditional to print a message if a user is not logged in using logical NOT.",
    "code": "```scala\nval userLoggedIn = false\n\nif (!userLoggedIn) {\n  println(\"User is not logged in.\")\n}\n```"
  },
  {
    "task": "Create a function that checks if a number is both even and positive using logical AND.",
    "code": "```scala\ndef isEvenAndPositive(number: Int): Boolean = {\n  number % 2 == 0 && number > 0\n}\n```"
  },
  {
    "task": "Implement a feature that turns off a device if neither of two switches are on using logical NOT.",
    "code": "```scala\nobject DeviceController {\n  def turnOffDevice(switch1: Boolean, switch2: Boolean): Boolean = {\n    !(switch1 || switch2)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val switch1 = false\n    val switch2 = false\n    val isDeviceOff = turnOffDevice(switch1, switch2)\n    println(s\"Device is turned off: $isDeviceOff\")\n  }\n}\n```"
  },
  {
    "task": "Compose a script to alert if a server is either down or running slow using logical OR.",
    "code": "```scala\nobject ServerAlert {\n  def main(args: Array[String]): Unit = {\n    val isServerDown = true\n    val isServerSlow = false\n\n    if (isServerDown || isServerSlow) {\n      println(\"Alert: The server is either down or running slow!\")\n    } else {\n      println(\"The server is running normally.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Design a validation method to ensure a form field is not empty using logical NOT.",
    "code": "```scala\ndef isFieldNotEmpty(field: String): Boolean = {\n  !(field.isEmpty)\n}\n```"
  },
  {
    "task": "Write a program to determine if two strings are both non-empty using logical AND.",
    "code": "```scala\nobject StringCheck {\n  def areBothNonEmpty(str1: String, str2: String): Boolean = {\n    str1.nonEmpty && str2.nonEmpty\n  }\n\n  def main(args: Array[String]): Unit = {\n    val string1 = \"Hello\"\n    val string2 = \"World\"\n    println(areBothNonEmpty(string1, string2)) // Output: true\n\n    val string3 = \"\"\n    println(areBothNonEmpty(string1, string3)) // Output: false\n  }\n}\n```"
  },
  {
    "task": "Create a function that checks if a number is either prime or a perfect square using logical OR.",
    "code": "```scala\nobject NumberCheck {\n  def isPrime(n: Int): Boolean = {\n    if (n <= 1) return false\n    if (n <= 3) return true\n    if (n % 2 == 0 || n % 3 == 0) return false\n    var i = 5\n    while (i * i <= n) {\n      if (n % i == 0 || n % (i + 2) == 0) return false\n      i += 6\n    }\n    true\n  }\n\n  def isPerfectSquare(n: Int): Boolean = {\n    val sqrt = math.sqrt(n).toInt\n    sqrt * sqrt == n\n  }\n\n  def isPrimeOrPerfectSquare(n: Int): Boolean = {\n    isPrime(n) || isPerfectSquare(n)\n  }\n}\n```"
  },
  {
    "task": "Develop a script to ensure a user is either an adult or has parental consent using logical OR.",
    "code": "```scala\nobject UserConsent {\n  def main(args: Array[String]): Unit = {\n    val isAdult: Boolean = true\n    val hasParentalConsent: Boolean = false\n\n    if (isAdult || hasParentalConsent) {\n      println(\"Access granted.\")\n    } else {\n      println(\"Access denied.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Implement a condition to execute a task if a variable is neither zero nor negative using logical NOT.",
    "code": "```scala\nobject LogicalOperationsExample {\n  def main(args: Array[String]): Unit = {\n    val number = 5 // Example variable\n\n    if (!(number <= 0)) {\n      println(\"Executing task because the number is neither zero nor negative.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Compose a method to verify if a system is both up-to-date and functioning using logical AND.",
    "code": "```scala\ndef isSystemUpToDateAndFunctioning(isUpToDate: Boolean, isFunctioning: Boolean): Boolean = {\n  isUpToDate && isFunctioning\n}\n```"
  },
  {
    "task": "Write a function that returns true if a list contains neither duplicates nor null values using logical NOT.",
    "code": "```scala\ndef noDuplicatesOrNulls(list: List[Any]): Boolean = {\n  val containsNull = list.contains(null)\n  val hasDuplicates = list.distinct.size != list.size\n  !(containsNull || hasDuplicates)\n}\n```"
  },
  {
    "task": "Create a script to perform an action if a temperature is either too high or too low using logical OR.",
    "code": "```scala\nobject TemperatureCheck {\n  def main(args: Array[String]): Unit = {\n    val temperature = 25 // Example temperature value\n    val tooHigh = 30\n    val tooLow = 10\n\n    if (temperature > tooHigh || temperature < tooLow) {\n      println(\"Action required: Temperature is out of the safe range.\")\n    } else {\n      println(\"Temperature is within the safe range.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Design a feature to toggle an option if a setting is not enabled using logical NOT.",
    "code": "```scala\nobject ToggleFeature {\n  def toggleOptionIfSettingNotEnabled(settingEnabled: Boolean, option: Boolean): Boolean = {\n    if (!settingEnabled) !option else option\n  }\n\n  def main(args: Array[String]): Unit = {\n    val settingEnabled = false\n    val option = true\n    val newOption = toggleOptionIfSettingNotEnabled(settingEnabled, option)\n    println(s\"New Option Value: $newOption\")\n  }\n}\n```"
  },
  {
    "task": "Develop a check to ensure a username is both available and meets length requirements using logical AND.",
    "code": "```scala\ndef isValidUsername(username: String, isAvailable: Boolean): Boolean = {\n  val minLength = 5\n  val maxLength = 15\n  isAvailable && username.length >= minLength && username.length <= maxLength\n}\n```"
  },
  {
    "task": "Implement a function that returns true if a number is neither too large nor too small using logical NOT.",
    "code": "```scala\ndef isValidNumber(n: Int): Boolean = {\n  !(n > 100 || n < 10)\n}\n```"
  },
  {
    "task": "Write a conditional to print a warning if a disk is either full or nearly full using logical OR.",
    "code": "```scala\nobject DiskCheck {\n  def main(args: Array[String]): Unit = {\n    val diskFull = true\n    val diskNearlyFull = false\n\n    if (diskFull || diskNearlyFull) {\n      println(\"Warning: Disk is full or nearly full.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Create a routine to validate that two dates are both within a valid range using logical AND.",
    "code": "```scala\nimport java.time.LocalDate\n\nobject DateValidator {\n  def areDatesValid(date1: LocalDate, date2: LocalDate, startDate: LocalDate, endDate: LocalDate): Boolean = {\n    def isDateWithinRange(date: LocalDate): Boolean = {\n      !date.isBefore(startDate) && !date.isAfter(endDate)\n    }\n    isDateWithinRange(date1) && isDateWithinRange(date2)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val date1 = LocalDate.of(2023, 4, 15)\n    val date2 = LocalDate.of(2023, 5, 10)\n    val startDate = LocalDate.of(2023, 1, 1)\n    val endDate = LocalDate.of(2023, 12, 31)\n\n    println(areDatesValid(date1, date2, startDate, endDate))\n  }\n}\n```"
  },
  {
    "task": "Compose a function to decide if a person is either a minor or a senior using logical OR.",
    "code": "```scala\ndef isMinorOrSenior(age: Int): Boolean = {\n  age < 18 || age >= 65\n}\n```"
  },
  {
    "task": "Design a script to execute a task if a condition is not met using logical NOT.",
    "code": "```scala\nobject LogicalNotExample {\n  def main(args: Array[String]): Unit = {\n    val condition = false\n    if (!condition) {\n      executeTask()\n    }\n  }\n\n  def executeTask(): Unit = {\n    println(\"Task executed because condition is not met.\")\n  }\n}\n```"
  },
  {
    "task": "Develop a program to verify if a process is neither running nor scheduled using logical NOT.",
    "code": "```scala\nobject ProcessChecker {\n  def main(args: Array[String]): Unit = {\n    val isRunning = false\n    val isScheduled = false\n\n    if (!isRunning && !isScheduled) {\n      println(\"The process is neither running nor scheduled.\")\n    } else {\n      println(\"The process is either running or scheduled.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Implement a feature that confirms a file is both accessible and not locked using logical AND.",
    "code": "```scala\nimport java.nio.file.{Files, Paths, StandardOpenOption}\nimport java.nio.channels.FileChannel\n\ndef isFileAccessibleAndNotLocked(filePath: String): Boolean = {\n  val path = Paths.get(filePath)\n  if (Files.exists(path) && Files.isReadable(path)) {\n    try {\n      val channel = FileChannel.open(path, StandardOpenOption.READ)\n      channel.close()\n      true\n    } catch {\n      case _: Exception => false\n    }\n  } else {\n    false\n  }\n}\n```"
  },
  {
    "task": "Write a script to check if a device is either offline or in maintenance mode using logical OR.",
    "code": "```scala\nobject DeviceStatusChecker {\n  def main(args: Array[String]): Unit = {\n    val isOffline = true\n    val isInMaintenance = false\n\n    if (isOffline || isInMaintenance) {\n      println(\"The device is either offline or in maintenance mode.\")\n    } else {\n      println(\"The device is online and not in maintenance mode.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Create a function to ensure a password is both complex and unique using logical AND.",
    "code": "```scala\nobject PasswordValidator {\n  private var usedPasswords: Set[String] = Set()\n\n  def isPasswordValid(password: String): Boolean = {\n    val isComplex = password.exists(_.isDigit) &&\n      password.exists(_.isLetter) &&\n      password.length >= 8\n\n    val isUnique = !usedPasswords.contains(password)\n\n    val isValid = isComplex && isUnique\n\n    if (isValid) {\n      usedPasswords += password\n    }\n\n    isValid\n  }\n}\n```"
  },
  {
    "task": "Design a validation that ensures a value is not negative using logical NOT.",
    "code": "```scala\ndef isNonNegative(value: Int): Boolean = {\n  !(value < 0)\n}\n\n// Example usage\nval number = 5\nprintln(s\"Is the number non-negative? ${isNonNegative(number)}\")\n```"
  },
  {
    "task": "Develop a check to see if a user has either exceeded their quota or is nearing it using logical OR.",
    "code": "```scala\ndef checkQuota(exceeded: Boolean, nearing: Boolean): Boolean = {\n  exceeded || nearing\n}\n\n// Example usage\nval userExceededQuota = false\nval userNearingQuota = true\n\nval result = checkQuota(userExceededQuota, userNearingQuota)\nprintln(s\"User has either exceeded or is nearing their quota: $result\")\n```"
  },
  {
    "task": "Implement a routine to confirm that a user is both authenticated and authorized using logical AND.",
    "code": "```scala\ndef isAuthenticated(user: User): Boolean = {\n  // Logic to check if user is authenticated\n  true // placeholder for actual authentication logic\n}\n\ndef isAuthorized(user: User): Boolean = {\n  // Logic to check if user is authorized\n  true // placeholder for actual authorization logic\n}\n\ndef isUserAuthenticatedAndAuthorized(user: User): Boolean = {\n  isAuthenticated(user) && isAuthorized(user)\n}\n```"
  },
  {
    "task": "Compose a function to determine if a light is either on or blinking using logical OR.",
    "code": "```scala\ndef isLightOnOrBlinking(isOn: Boolean, isBlinking: Boolean): Boolean = {\n  isOn || isBlinking\n}\n```"
  },
  {
    "task": "Write a script that executes a command if a network connection is neither weak nor unstable using logical NOT.",
    "code": "```scala\nobject NetworkCheck {\n  def main(args: Array[String]): Unit = {\n    val isWeakConnection = false\n    val isUnstableConnection = false\n\n    if (!(isWeakConnection || isUnstableConnection)) {\n      executeCommand()\n    }\n  }\n\n  def executeCommand(): Unit = {\n    println(\"Executing command as the network is stable and strong.\")\n  }\n}\n```"
  },
  {
    "task": "Create a program to verify that a sensor is both calibrated and active using logical AND.",
    "code": "```scala\nobject SensorCheck {\n  def main(args: Array[String]): Unit = {\n    val isCalibrated = true\n    val isActive = true\n    \n    val isValidSensor = isCalibrated && isActive\n\n    println(s\"Sensor is valid: $isValidSensor\")\n  }\n}\n```"
  },
  {
    "task": "Design a feature to alert if a process is either overdue or incomplete using logical OR.",
    "code": "```scala\nobject ProcessAlert {\n  def isAlert(overdue: Boolean, incomplete: Boolean): Boolean = {\n    overdue || incomplete\n  }\n\n  def main(args: Array[String]): Unit = {\n    val processOverdue = true\n    val processIncomplete = false\n\n    if (isAlert(processOverdue, processIncomplete)) {\n      println(\"Alert: The process is either overdue or incomplete.\")\n    } else {\n      println(\"The process is on track.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Develop a script to check if a person is neither a guest nor a temporary user using logical NOT.",
    "code": "```scala\nobject UserCheck {\n  def main(args: Array[String]): Unit = {\n    val isGuest = false\n    val isTemporaryUser = false\n\n    val isNeitherGuestNorTemporaryUser = !isGuest && !isTemporaryUser\n\n    println(s\"Is the person neither a guest nor a temporary user? $isNeitherGuestNorTemporaryUser\")\n  }\n}\n```"
  },
  {
    "task": "Implement a function to toggle a light if a switch is not pressed using logical NOT.",
    "code": "```scala\nobject LightToggle {\n  def toggleLight(isSwitchPressed: Boolean): Boolean = {\n    !isSwitchPressed\n  }\n\n  def main(args: Array[String]): Unit = {\n    val isSwitchPressed = false\n    val isLightOn = toggleLight(isSwitchPressed)\n    println(s\"Light is ${if (isLightOn) \"ON\" else \"OFF\"}\")\n  }\n}\n```"
  },
  {
    "task": "Write a conditional to trigger an event if a file is either corrupted or missing using logical OR.",
    "code": "```scala\nval isFileCorrupted = true // Example condition for corrupted file\nval isFileMissing = false  // Example condition for missing file\n\nif (isFileCorrupted || isFileMissing) {\n  println(\"Triggering event: File is either corrupted or missing.\")\n}\n```"
  },
  {
    "task": "Create a routine that verifies if a vehicle is both insured and registered using logical AND.",
    "code": "```scala\nobject VehicleStatusChecker {\n  def isVehicleEligible(isInsured: Boolean, isRegistered: Boolean): Boolean = {\n    isInsured && isRegistered\n  }\n\n  def main(args: Array[String]): Unit = {\n    val insured = true\n    val registered = true\n    println(s\"Vehicle is eligible: ${isVehicleEligible(insured, registered)}\")\n  }\n}\n```"
  },
  {
    "task": "Compose a method to check if an account is either overdrawn or flagged using logical OR.",
    "code": "```scala\nobject AccountChecker {\n  def isAccountOverdrawnOrFlagged(balance: Double, isFlagged: Boolean): Boolean = {\n    balance < 0 || isFlagged\n  }\n}\n```"
  },
  {
    "task": "Design a program to ensure an application is both installed and updated using logical AND.",
    "code": "```scala\nobject ApplicationCheck {\n  def main(args: Array[String]): Unit = {\n    val isInstalled = true\n    val isUpdated = true\n\n    if (isInstalled && isUpdated) {\n      println(\"The application is both installed and updated.\")\n    } else {\n      println(\"The application is either not installed or not updated.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Develop a function that returns true if a number is neither divisible by 3 nor 5 using logical NOT.",
    "code": "```scala\ndef isNotDivisibleBy3Or5(number: Int): Boolean = {\n  !(number % 3 == 0 || number % 5 == 0)\n}\n```"
  },
  {
    "task": "Implement a script that alerts if a device is either overheating or underperforming using logical OR.",
    "code": "```scala\nobject DeviceStatusChecker {\n  def main(args: Array[String]): Unit = {\n    val temperature = 85 // Example temperature in Celsius\n    val performance = 50 // Example performance score out of 100\n\n    if (isOverheating(temperature) || isUnderperforming(performance)) {\n      println(\"Alert: Device is either overheating or underperforming!\")\n    }\n  }\n\n  def isOverheating(temp: Int): Boolean = {\n    temp > 80\n  }\n\n  def isUnderperforming(performance: Int): Boolean = {\n    performance < 60\n  }\n}\n```"
  },
  {
    "task": "Write a function to validate that a directory is both writable and not full using logical AND.",
    "code": "```scala\nimport java.io.File\n\ndef isDirectoryWritableAndNotFull(directoryPath: String): Boolean = {\n  val directory = new File(directoryPath)\n  val writable = directory.canWrite\n  val notFull = directory.getFreeSpace > 0\n  writable && notFull\n}\n```"
  },
  {
    "task": "Create a conditional statement that executes if a button is not clicked using logical NOT.",
    "code": "```scala\nvar buttonClicked = false\n\nif (!buttonClicked) {\n  println(\"Button has not been clicked.\")\n}\n```"
  },
  {
    "task": "Design a check to ensure a transaction is both verified and complete using logical AND.",
    "code": "```scala\ndef isTransactionValid(isVerified: Boolean, isComplete: Boolean): Boolean = {\n  isVerified && isComplete\n}\n\n// Example usage:\nval transactionVerified = true\nval transactionComplete = true\n\nval isValid = isTransactionValid(transactionVerified, transactionComplete)\nprintln(s\"Transaction is valid: $isValid\")\n```"
  },
  {
    "task": "Develop a routine to determine if a string is either uppercase or lowercase using logical OR.",
    "code": "```scala\ndef isUpperOrLower(s: String): Boolean = {\n  s.forall(_.isUpper) || s.forall(_.isLower)\n}\n\n// Example usage:\nval result1 = isUpperOrLower(\"HELLO\") // true\nval result2 = isUpperOrLower(\"hello\") // true\nval result3 = isUpperOrLower(\"Hello\") // false\n```"
  },
  {
    "task": "Implement a feature to execute a task if a variable is neither null nor undefined using logical NOT.",
    "code": "```scala\nobject TaskExecutor {\n  def executeTask(variable: Any): Unit = {\n    if (variable != null && variable != None) {\n      println(\"Executing task...\")\n      // Add the task execution logic here\n    } else {\n      println(\"Variable is null or undefined.\")\n    }\n  }\n  \n  def main(args: Array[String]): Unit = {\n    val someVariable: Any = \"Some value\"\n    executeTask(someVariable)\n  }\n}\n```"
  },
  {
    "task": "Compose a function to return true if a date is either today or tomorrow using logical OR.",
    "code": "```scala\nimport java.time.LocalDate\n\ndef isTodayOrTomorrow(date: LocalDate): Boolean = {\n  val today = LocalDate.now()\n  val tomorrow = today.plusDays(1)\n  date.isEqual(today) || date.isEqual(tomorrow)\n}\n```"
  },
  {
    "task": "Write a script to confirm that a system is both running and not in maintenance mode using logical AND.",
    "code": "```scala\nobject SystemCheck {\n  def main(args: Array[String]): Unit = {\n    val isRunning = true\n    val isInMaintenanceMode = false\n\n    if (isRunning && !isInMaintenanceMode) {\n      println(\"System is running and not in maintenance mode.\")\n    } else {\n      println(\"System check failed.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Create a program to verify if a text field is neither empty nor exceeds character limit using logical NOT.",
    "code": "```scala\nobject TextFieldValidator {\n  def isValidTextField(text: String, charLimit: Int): Boolean = {\n    !(text.isEmpty || text.length > charLimit)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val textField = \"Sample Text\"\n    val charLimit = 20\n    println(isValidTextField(textField, charLimit)) // Output: true\n  }\n}\n```"
  },
  {
    "task": "Design a feature that checks if a user has either admin privileges or editor rights using logical OR.",
    "code": "```scala\nobject UserPrivileges {\n  def hasAdminOrEditorRights(isAdmin: Boolean, isEditor: Boolean): Boolean = {\n    isAdmin || isEditor\n  }\n\n  def main(args: Array[String]): Unit = {\n    val userIsAdmin = true\n    val userIsEditor = false\n    val hasPrivileges = hasAdminOrEditorRights(userIsAdmin, userIsEditor)\n    println(s\"User has admin or editor rights: $hasPrivileges\")\n  }\n}\n```"
  },
  {
    "task": "Develop a script to ensure a file is both present and not empty using logical AND.",
    "code": "```scala\nimport java.io.File\n\nobject FileCheck {\n  def main(args: Array[String]): Unit = {\n    val filePath = \"path/to/your/file.txt\"\n    val file = new File(filePath)\n\n    if (file.exists() && file.length() > 0) {\n      println(\"File is present and not empty.\")\n    } else {\n      println(\"File is either missing or empty.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Implement a condition to execute a command if a setting is not active using logical NOT.",
    "code": "```scala\nobject SettingsCheck {\n  def main(args: Array[String]): Unit = {\n    val isSettingActive = false\n\n    if (!isSettingActive) {\n      println(\"Executing command as the setting is not active.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Compose a method to decide if a person is either eligible or exempt using logical OR.",
    "code": "```scala\ndef isEligibleOrExempt(isEligible: Boolean, isExempt: Boolean): Boolean = {\n  isEligible || isExempt\n}\n```"
  },
  {
    "task": "Write a function that returns true if a number is both greater than zero and less than ten using logical AND.",
    "code": "```scala\ndef isNumberInRange(number: Int): Boolean = {\n  number > 0 && number < 10\n}\n```"
  },
  {
    "task": "Create a loop to continue as long as a condition is either true or false using logical OR.",
    "code": "```scala\nvar condition1 = true\nvar condition2 = false\n\nwhile (condition1 || condition2) {\n  // Your loop logic here\n  condition1 = false  // Update condition1\n  condition2 = false  // Update condition2\n}\n```"
  },
  {
    "task": "Design a program to verify if an account is neither inactive nor suspended using logical NOT.",
    "code": "```scala\nobject AccountStatusChecker {\n  def isAccountActive(isInactive: Boolean, isSuspended: Boolean): Boolean = {\n    !(isInactive || isSuspended)\n  }\n\n  def main(args: Array[String]): Unit = {\n    // Example usage\n    val accountInactive = false\n    val accountSuspended = false\n\n    val isActive = isAccountActive(accountInactive, accountSuspended)\n    println(s\"Is the account active? $isActive\")\n  }\n}\n```"
  },
  {
    "task": "Develop a feature to confirm that a document is both signed and verified using logical AND.",
    "code": "```scala\nobject DocumentChecker {\n  def isSignedAndVerified(isSigned: Boolean, isVerified: Boolean): Boolean = {\n    isSigned && isVerified\n  }\n\n  def main(args: Array[String]): Unit = {\n    val documentSigned = true\n    val documentVerified = true\n\n    val result = isSignedAndVerified(documentSigned, documentVerified)\n    println(s\"Document is signed and verified: $result\")\n  }\n}\n```"
  },
  {
    "task": "Implement a script to alert if a network is either congested or down using logical OR.",
    "code": "```scala\nobject NetworkAlert {\n  def main(args: Array[String]): Unit = {\n    val isCongested: Boolean = true // Example value, replace with actual condition\n    val isDown: Boolean = false // Example value, replace with actual condition\n\n    if (isCongested || isDown) {\n      println(\"Alert: The network is either congested or down.\")\n    } else {\n      println(\"The network is operating normally.\")\n    }\n  }\n}\n```"
  },
  {
    "task": "Write a function to ensure a list is both sorted and unique using logical AND.",
    "code": "```scala\ndef ensureSortedUnique[T](list: List[T])(implicit ord: Ordering[T]): List[T] = {\n  val sortedList = list.sorted\n  sortedList.distinct.filter(item => sortedList.contains(item) && sortedList.count(_ == item) == 1)\n}\n```"
  },
  {
    "task": "Create a conditional statement to execute if a task is not completed using logical NOT.",
    "code": "```scala\nval taskCompleted = false\n\nif (!taskCompleted) {\n  println(\"Executing task because it is not completed.\")\n}\n```"
  },
  {
    "task": "Design a check to determine if a component is either faulty or missing using logical OR.",
    "code": "```scala\nobject ComponentChecker {\n  def isFaultyOrMissing(isFaulty: Boolean, isMissing: Boolean): Boolean = {\n    isFaulty || isMissing\n  }\n\n  def main(args: Array[String]): Unit = {\n    val componentFaulty = true\n    val componentMissing = false\n\n    val result = isFaultyOrMissing(componentFaulty, componentMissing)\n    println(s\"Component is faulty or missing: $result\")\n  }\n}\n```"
  },
  {
    "task": "Develop a routine to verify if a user is both online and available using logical AND.",
    "code": "```scala\nobject UserStatusChecker {\n  def isUserOnlineAndAvailable(isOnline: Boolean, isAvailable: Boolean): Boolean = {\n    isOnline && isAvailable\n  }\n\n  def main(args: Array[String]): Unit = {\n    val userOnline = true\n    val userAvailable = true\n\n    val result = isUserOnlineAndAvailable(userOnline, userAvailable)\n    println(s\"User is both online and available: $result\")\n  }\n}\n```"
  },
  {
    "task": "Implement a feature to toggle an alert if a condition is not satisfied using logical NOT.",
    "code": "```scala\nclass AlertSystem {\n  private var alertOn: Boolean = false\n\n  def toggleAlert(condition: Boolean): Unit = {\n    if (!condition) {\n      alertOn = !alertOn\n    }\n  }\n\n  def isAlertOn: Boolean = alertOn\n}\n```"
  },
  {
    "task": "Compose a function to return true if a transaction is either pending or failed using logical OR.",
    "code": "```scala\ndef isTransactionPendingOrFailed(status: String): Boolean = {\n  status == \"pending\" || status == \"failed\"\n}\n```"
  },
  {
    "task": "Write a script to ensure a configuration is both correct and active using logical AND.",
    "code": "```scala\nobject ConfigChecker {\n  def main(args: Array[String]): Unit = {\n    val isConfigCorrect = true // This should be determined by your logic\n    val isConfigActive = true // This should be determined by your logic\n\n    if (isConfigCorrect && isConfigActive) {\n      println(\"The configuration is both correct and active.\")\n    } else {\n      println(\"The configuration is either incorrect or inactive.\")\n    }\n  }\n}\n```"
  }
]