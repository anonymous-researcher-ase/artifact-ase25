[
  {
    "task": "Write a program that prints numbers from 1 to 10 using a for loop.",
    "code": "```fortran\nprogram print_numbers\n    implicit none\n    integer :: i\n\n    do i = 1, 10\n        print *, i\n    end do\n\nend program print_numbers\n```"
  },
  {
    "task": "Create a loop that iterates over an array of names and prints each name.",
    "code": "```fortran\nprogram print_names\n    implicit none\n    character(len=20) :: names(5)\n    integer :: i\n\n    names = ['Alice', 'Bob', 'Charlie', 'David', 'Eve']\n\n    do i = 1, size(names)\n        print *, trim(names(i))\n    end do\nend program print_names\n```"
  },
  {
    "task": "Design a for loop to calculate the factorial of a given number.",
    "code": "```fortran\nprogram factorial_calculation\n    implicit none\n    integer :: n, i\n    integer :: factorial\n\n    print *, 'Enter a positive integer:'\n    read *, n\n\n    factorial = 1\n    do i = 1, n\n        factorial = factorial * i\n    end do\n\n    print *, 'Factorial of', n, 'is', factorial\nend program factorial_calculation\n```"
  },
  {
    "task": "Implement a program that uses a for loop to sum all even numbers between 1 and 100.",
    "code": "```fortran\nprogram sum_even_numbers\n    implicit none\n    integer :: sum, i\n\n    sum = 0\n    do i = 1, 100\n        if (mod(i, 2) == 0) then\n            sum = sum + i\n        end if\n    end do\n\n    print *, 'Sum of even numbers between 1 and 100 is:', sum\nend program sum_even_numbers\n```"
  },
  {
    "task": "Use a for loop to generate and print the Fibonacci sequence up to 20 terms.",
    "code": "```fortran\nprogram fibonacci_sequence\n    implicit none\n    integer :: i, n\n    integer, parameter :: max_terms = 20\n    integer :: a(max_terms)\n\n    a(1) = 0\n    a(2) = 1\n\n    do i = 3, max_terms\n        a(i) = a(i-1) + a(i-2)\n    end do\n\n    do i = 1, max_terms\n        print *, a(i)\n    end do\nend program fibonacci_sequence\n```"
  },
  {
    "task": "Construct a for loop that prints the multiplication table for a given number.",
    "code": "```fortran\nprogram multiplication_table\n    implicit none\n    integer :: i, number\n\n    number = 5  ! You can change this number to any desired value\n\n    do i = 1, 10\n        print *, number, ' x ', i, ' = ', number * i\n    end do\n\nend program multiplication_table\n```"
  },
  {
    "task": "Write code to iterate through a list of student grades and print only those above a certain threshold.",
    "code": "```fortran\nprogram filter_grades\n  implicit none\n  integer, parameter :: n = 5\n  integer :: i\n  real, dimension(n) :: grades\n  real :: threshold\n\n  grades = [82.5, 67.0, 90.0, 74.5, 88.0]\n  threshold = 75.0\n\n  do i = 1, n\n    if (grades(i) > threshold) then\n      print *, \"Grade above threshold:\", grades(i)\n    end if\n  end do\nend program filter_grades\n```"
  },
  {
    "task": "Create a for loop that appends the square of numbers 1 to 10 to a list.",
    "code": "```fortran\nprogram square_numbers\n    integer, parameter :: n = 10\n    integer :: i\n    integer, dimension(n) :: squares\n\n    do i = 1, n\n        squares(i) = i * i\n    end do\nend program square_numbers\n```"
  },
  {
    "task": "Develop a for loop that reverses a given string.",
    "code": "```fortran\nprogram reverse_string\n    implicit none\n    character(len=100) :: input_string, reversed_string\n    integer :: i, str_len\n\n    input_string = \"example\"\n    str_len = len_trim(input_string)\n    reversed_string = \"\"\n\n    do i = str_len, 1, -1\n        reversed_string(str_len-i+1:str_len-i+1) = input_string(i:i)\n    end do\n\n    print *, \"Reversed string: \", trim(reversed_string)\nend program reverse_string\n```"
  },
  {
    "task": "Build a program that uses a for loop to print all elements in a 2D matrix.",
    "code": "```fortran\nprogram print_matrix\n    implicit none\n    integer, parameter :: rows = 3, cols = 3\n    integer :: matrix(rows, cols)\n    integer :: i, j\n\n    ! Initialize the matrix with some values\n    matrix = reshape((/ 1, 2, 3, 4, 5, 6, 7, 8, 9 /), shape(matrix))\n\n    ! Loop through the matrix and print each element\n    do i = 1, rows\n        do j = 1, cols\n            print *, matrix(i, j)\n        end do\n    end do\nend program print_matrix\n```"
  },
  {
    "task": "Use a for loop to find the maximum value in an array of integers.",
    "code": "```fortran\nprogram find_max\n    implicit none\n    integer, parameter :: n = 10\n    integer :: i, max_val\n    integer, dimension(n) :: arr = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3]\n\n    max_val = arr(1)\n    do i = 2, n\n        if (arr(i) > max_val) then\n            max_val = arr(i)\n        end if\n    end do\n\n    print *, \"Maximum value in the array is:\", max_val\nend program find_max\n```"
  },
  {
    "task": "Write a program that uses a for loop to print the characters of a string, one per line.",
    "code": "```fortran\nprogram print_characters\n    implicit none\n    character(len=*) :: str\n    integer :: i\n\n    str = \"Hello, World!\"\n    \n    do i = 1, len(str)\n        print *, str(i:i)\n    end do\nend program print_characters\n```"
  },
  {
    "task": "Create a for loop that counts the number of vowels in a given sentence.",
    "code": "```fortran\nprogram count_vowels\n    implicit none\n    character(len=100) :: sentence\n    integer :: i, count\n\n    count = 0\n    print *, 'Enter a sentence:'\n    read(*,'(A)') sentence\n\n    do i = 1, len_trim(sentence)\n        select case (sentence(i:i))\n        case ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n            count = count + 1\n        end select\n    end do\n\n    print *, 'Number of vowels:', count\nend program count_vowels\n```"
  },
  {
    "task": "Implement a for loop to check if a number is prime by testing divisibility.",
    "code": "```fortran\nprogram check_prime\n  implicit none\n  integer :: number, i\n  logical :: is_prime\n\n  print *, \"Enter a number:\"\n  read *, number\n\n  if (number <= 1) then\n     is_prime = .false.\n  else\n     is_prime = .true.\n     do i = 2, number - 1\n        if (mod(number, i) == 0) then\n           is_prime = .false.\n           exit\n        end if\n     end do\n  end if\n\n  if (is_prime) then\n     print *, number, \"is a prime number.\"\n  else\n     print *, number, \"is not a prime number.\"\n  end if\nend program check_prime\n```"
  },
  {
    "task": "Design a for loop that prints a pyramid pattern of asterisks with a given height.",
    "code": "```fortran\nprogram pyramid_pattern\n  implicit none\n  integer :: i, j, k, height\n\n  print *, \"Enter the height of the pyramid:\"\n  read *, height\n\n  do i = 1, height\n     do j = 1, height - i\n        write(*,'(A)', advance='no') ' '\n     end do\n     do k = 1, (2 * i - 1)\n        write(*,'(A)', advance='no') '*'\n     end do\n     print *, ''\n  end do\n\nend program pyramid_pattern\n```"
  },
  {
    "task": "Write a program that uses a for loop to calculate the sum of digits of a number.",
    "code": "```fortran\nprogram sum_of_digits\n    implicit none\n    integer :: number, sum, digit\n\n    print *, \"Enter a number:\"\n    read *, number\n\n    sum = 0\n    do while (number > 0)\n        digit = mod(number, 10)\n        sum = sum + digit\n        number = number / 10\n    end do\n\n    print *, \"The sum of the digits is:\", sum\nend program sum_of_digits\n```"
  },
  {
    "task": "Construct a for loop to flatten a list of lists into a single list.",
    "code": "```fortran\nprogram flatten_list\n    implicit none\n    integer, dimension(:,:), allocatable :: list_of_lists\n    integer, dimension(:), allocatable :: flattened_list\n    integer :: i, j, idx, num_lists, list_size\n\n    ! Example: List of lists with 3 lists, each containing 3 elements\n    num_lists = 3\n    list_size = 3\n    allocate(list_of_lists(num_lists, list_size))\n    allocate(flattened_list(num_lists * list_size))\n    \n    ! Initialize list_of_lists with some values\n    list_of_lists = reshape([1, 2, 3, 4, 5, 6, 7, 8, 9], shape(list_of_lists))\n\n    idx = 1\n    do i = 1, num_lists\n        do j = 1, list_size\n            flattened_list(idx) = list_of_lists(i, j)\n            idx = idx + 1\n        end do\n    end do\nend program flatten_list\n```"
  },
  {
    "task": "Use a for loop to generate a list of random numbers and print them.",
    "code": "```fortran\nprogram random_numbers\n  implicit none\n  integer :: i\n  real :: rand_num\n\n  call random_seed()\n\n  do i = 1, 10\n    call random_number(rand_num)\n    print *, rand_num\n  end do\n\nend program random_numbers\n```"
  },
  {
    "task": "Create a for loop that iterates through a dictionary and prints its keys and values.",
    "code": "```fortran\nprogram iterate_dictionary\n    implicit none\n    integer, parameter :: n = 3\n    character(len=20), dimension(n) :: keys\n    integer, dimension(n) :: values\n    integer :: i\n\n    ! example dictionary keys and values\n    keys = ['key1', 'key2', 'key3']\n    values = [1, 2, 3]\n\n    do i = 1, n\n        print *, 'Key:', keys(i), 'Value:', values(i)\n    end do\nend program iterate_dictionary\n```"
  },
  {
    "task": "Develop a for loop that counts down from 10 to 1 and prints each number.",
    "code": "```fortran\nprogram countdown\n    implicit none\n    integer :: i\n\n    do i = 10, 1, -1\n        print *, i\n    end do\nend program countdown\n```"
  },
  {
    "task": "Write code to multiply each element in an array by 2 using a for loop.",
    "code": "```fortran\nprogram multiply_array\n    implicit none\n    integer, parameter :: n = 10\n    integer :: i\n    integer :: array(n)\n\n    ! Initialize the array with values 1 to n\n    do i = 1, n\n        array(i) = i\n    end do\n\n    ! Multiply each element by 2\n    do i = 1, n\n        array(i) = array(i) * 2\n    end do\n\nend program multiply_array\n```"
  },
  {
    "task": "Create a for loop that calculates the average of numbers in a list.",
    "code": "```fortran\nprogram calculate_average\n    implicit none\n    integer, parameter :: n = 5\n    real :: numbers(n) = [1.0, 2.0, 3.0, 4.0, 5.0]\n    real :: sum, average\n    integer :: i\n\n    sum = 0.0\n    do i = 1, n\n        sum = sum + numbers(i)\n    end do\n    average = sum / n\n\n    print *, \"The average is: \", average\nend program calculate_average\n```"
  },
  {
    "task": "Implement a for loop to find duplicate elements in an array.",
    "code": "```fortran\nprogram find_duplicates\n    implicit none\n    integer, parameter :: n = 10\n    integer :: i, j\n    integer :: arr(n) = [1, 2, 3, 2, 5, 6, 7, 8, 9, 1]\n    logical :: found_duplicate\n\n    do i = 1, n - 1\n        found_duplicate = .false.\n        do j = i + 1, n\n            if (arr(i) == arr(j)) then\n                found_duplicate = .true.\n                exit\n            end if\n        end do\n        if (found_duplicate) then\n            print *, \"Duplicate element found:\", arr(i)\n        end if\n    end do\nend program find_duplicates\n```"
  },
  {
    "task": "Design a for loop that removes all occurrences of a specific element from a list.",
    "code": "```fortran\nprogram remove_element\n    implicit none\n    integer, parameter :: n = 10\n    integer :: i, j, count\n    integer, dimension(n) :: list = [1, 2, 3, 4, 5, 3, 7, 3, 9, 10]\n    integer, dimension(n) :: new_list\n    integer :: element_to_remove\n    \n    element_to_remove = 3\n    count = 0\n\n    do i = 1, n\n        if (list(i) /= element_to_remove) then\n            count = count + 1\n            new_list(count) = list(i)\n        end if\n    end do\n\n    ! Output the new list\n    do j = 1, count\n        print *, new_list(j)\n    end do\nend program remove_element\n```"
  },
  {
    "task": "Use a for loop to simulate rolling a dice 100 times and count the occurrences of each face.",
    "code": "```fortran\nprogram dice_roll\n  implicit none\n  integer :: i, face\n  integer, dimension(6) :: count = 0\n  call random_seed()\n  do i = 1, 100\n    call random_number(face)\n    face = int(face * 6) + 1\n    count(face) = count(face) + 1\n  end do\n  print *, \"Occurrences of each face:\"\n  do i = 1, 6\n    print *, \"Face \", i, \": \", count(i)\n  end do\nend program dice_roll\n```"
  },
  {
    "task": "Write a for loop that prints all the prime numbers between 1 and 50.",
    "code": "```fortran\nprogram print_primes\n  implicit none\n  integer :: i, j\n  logical :: is_prime\n\n  do i = 2, 50\n    is_prime = .true.\n    do j = 2, int(sqrt(real(i)))\n      if (mod(i, j) == 0) then\n        is_prime = .false.\n        exit\n      endif\n    end do\n    if (is_prime) then\n      print *, i\n    end if\n  end do\nend program print_primes\n```"
  },
  {
    "task": "Develop a for loop that extracts all the uppercase letters from a string.",
    "code": "```fortran\nprogram extract_uppercase\n    implicit none\n    character(len=100) :: inputString\n    character(len=100) :: upperCaseLetters\n    integer :: i, lenInput, j\n\n    inputString = \"Example String With Uppercase Letters\"\n    upperCaseLetters = \"\"\n    lenInput = len_trim(inputString)\n    j = 1\n\n    do i = 1, lenInput\n        if (ichar(inputString(i:i)) >= ichar('A') .and. ichar(inputString(i:i)) <= ichar('Z')) then\n            upperCaseLetters(j:j) = inputString(i:i)\n            j = j + 1\n        end if\n    end do\n\n    print *, trim(upperCaseLetters)\nend program extract_uppercase\n```"
  },
  {
    "task": "Create a for loop that checks if a list is sorted in ascending order.",
    "code": "```fortran\nprogram check_sorted\n    implicit none\n    integer :: i\n    logical :: is_sorted\n    integer, parameter :: n = 5\n    integer :: list(n) = [1, 2, 3, 4, 5]\n\n    is_sorted = .true.\n\n    do i = 1, n - 1\n        if (list(i) > list(i + 1)) then\n            is_sorted = .false.\n            exit\n        end if\n    end do\n\n    print *, 'List is sorted:', is_sorted\nend program check_sorted\n```"
  },
  {
    "task": "Implement a for loop to generate a list of the first 10 square numbers.",
    "code": "```fortran\nprogram square_numbers\n    implicit none\n    integer :: i\n    integer, dimension(10) :: squares\n\n    do i = 1, 10\n        squares(i) = i * i\n    end do\n\n    print *, squares\nend program square_numbers\n```"
  },
  {
    "task": "Write code to print all the elements of a list that are greater than a given number using a for loop.",
    "code": "```fortran\nprogram print_greater_elements\n    implicit none\n    integer, parameter :: n = 5\n    integer :: i\n    integer, parameter :: threshold = 10\n    integer, dimension(n) :: list = [5, 15, 8, 22, 13]\n\n    do i = 1, n\n        if (list(i) > threshold) then\n            print *, list(i)\n        end if\n    end do\nend program print_greater_elements\n```"
  },
  {
    "task": "Construct a for loop that finds the smallest number in an array.",
    "code": "```fortran\nprogram find_smallest\n    implicit none\n    integer, parameter :: n = 10\n    integer :: array(n) = [34, 7, 23, 32, 5, 62, 31, 12, 44, 2]\n    integer :: i, smallest\n\n    smallest = array(1)\n    do i = 2, n\n        if (array(i) < smallest) then\n            smallest = array(i)\n        end if\n    end do\n\n    print *, \"The smallest number is\", smallest\nend program find_smallest\n```"
  },
  {
    "task": "Develop a for loop that prints the first N lines of Pascal's Triangle.",
    "code": "```fortran\nprogram pascals_triangle\n    implicit none\n    integer :: n, i, j\n    integer, allocatable :: row(:), prev_row(:)\n\n    n = 10  ! You can change this to the desired number of lines\n\n    allocate(row(n))\n    allocate(prev_row(n))\n\n    prev_row(1) = 1\n    print *, prev_row(1)\n\n    do i = 2, n\n        row(1) = 1\n        do j = 2, i - 1\n            row(j) = prev_row(j - 1) + prev_row(j)\n        end do\n        row(i) = 1\n\n        do j = 1, i\n            print *, row(j),\n        end do\n        print *\n\n        prev_row(:i) = row(:i)\n    end do\n\n    deallocate(row)\n    deallocate(prev_row)\nend program pascals_triangle\n```"
  },
  {
    "task": "Create a for loop that calculates the product of all elements in a list.",
    "code": "```fortran\nprogram calculate_product\n    implicit none\n    integer, parameter :: n = 5\n    integer :: i\n    integer :: product\n    integer, dimension(n) :: list\n\n    list = [1, 2, 3, 4, 5]\n    product = 1\n\n    do i = 1, n\n        product = product * list(i)\n    end do\n\n    print *, \"Product of all elements:\", product\nend program calculate_product\n```"
  },
  {
    "task": "Use a for loop to print numbers from 1 to 100, but replace multiples of 3 with 'Fizz'.",
    "code": "```fortran\nprogram fizzBuzz\n  implicit none\n  integer :: i\n\n  do i = 1, 100\n    if (mod(i, 3) == 0) then\n      print *, \"Fizz\"\n    else\n      print *, i\n    end if\n  end do\n\nend program fizzBuzz\n```"
  },
  {
    "task": "Write a for loop that iterates over a string and counts the number of words.",
    "code": "```fortran\nprogram count_words\n    implicit none\n    character(len=*), parameter :: text = \"This is a sample string with multiple words\"\n    integer :: i, count, length\n    logical :: in_word\n\n    count = 0\n    in_word = .false.\n    length = len_trim(text)\n\n    do i = 1, length\n        if (text(i:i) /= ' ') then\n            if (.not. in_word) then\n                count = count + 1\n                in_word = .true.\n            end if\n        else\n            in_word = .false.\n        end if\n    end do\n\n    print *, \"Number of words:\", count\nend program count_words\n```"
  },
  {
    "task": "Design a for loop that prints numbers from 1 to 50, but skips numbers divisible by 5.",
    "code": "```fortran\nprogram skip_multiples_of_five\n    implicit none\n    integer :: i\n\n    do i = 1, 50\n        if (mod(i, 5) /= 0) then\n            print *, i\n        end if\n    end do\nend program skip_multiples_of_five\n```"
  },
  {
    "task": "Implement a for loop that prints a checkerboard pattern of asterisks.",
    "code": "```fortran\nprogram checkerboard\n    implicit none\n    integer :: i, j, n\n\n    n = 8  ! Define the size of the checkerboard\n\n    do i = 1, n\n        do j = 1, n\n            if (mod(i + j, 2) == 0) then\n                write(*, '(A)', advance=\"no\") '*'\n            else\n                write(*, '(A)', advance=\"no\") ' '\n            end if\n        end do\n        write(*, *)\n    end do\nend program checkerboard\n```"
  },
  {
    "task": "Create a for loop that finds the index of a target value in a list.",
    "code": "```fortran\nprogram find_index\n  implicit none\n  integer, parameter :: n = 10\n  integer :: list(n) = (/ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 /)\n  integer :: target, i, index\n\n  target = 5\n  index = -1\n\n  do i = 1, n\n    if (list(i) == target) then\n      index = i\n      exit\n    end if\n  end do\n\n  print *, \"Index of target:\", index\n\nend program find_index\n```"
  },
  {
    "task": "Use a for loop to concatenate a list of strings into a single string.",
    "code": "```fortran\nprogram concatenate_strings\n    implicit none\n    character(len=200) :: concatenated_string\n    character(len=20), dimension(5) :: string_list\n    integer :: i\n\n    ! Initialize the list of strings\n    string_list = (/ 'Hello', ' ', 'Fortran', ' ', 'World' /)\n\n    ! Initialize the concatenated string\n    concatenated_string = ''\n\n    ! Concatenate the strings using a for loop\n    do i = 1, size(string_list)\n        concatenated_string = concatenated_string // string_list(i)\n    end do\n\n    ! Output the concatenated string\n    print *, trim(concatenated_string)\nend program concatenate_strings\n```"
  },
  {
    "task": "Develop a for loop that rotates a list to the right by a given number of positions.",
    "code": "```fortran\nprogram rotate_list\n    implicit none\n    integer, parameter :: n = 5\n    integer :: i, num_positions, temp\n    integer, dimension(n) :: list\n\n    ! Initialize the list\n    list = (/ 1, 2, 3, 4, 5 /)\n    num_positions = 2  ! Number of positions to rotate\n\n    ! Rotate the list to the right by num_positions\n    do i = 1, num_positions\n        temp = list(n)\n        list(2:n) = list(1:n-1)\n        list(1) = temp\n    end do\n\n    ! Output the rotated list\n    do i = 1, n\n        print *, list(i)\n    end do\nend program rotate_list\n```"
  },
  {
    "task": "Write code that uses a for loop to insert an element into a sorted list while maintaining order.",
    "code": "```fortran\nprogram insert_sorted\n    implicit none\n    integer, parameter :: n = 5\n    integer :: sorted_list(n + 1) = [2, 4, 6, 8, 10, 0]  ! extra space for the new element\n    integer :: new_element, i, j\n\n    new_element = 7\n\n    do i = 1, n\n        if (new_element < sorted_list(i)) then\n            do j = n, i, -1\n                sorted_list(j + 1) = sorted_list(j)\n            end do\n            sorted_list(i) = new_element\n            exit\n        end if\n    end do\n\n    if (i > n) then\n        sorted_list(n + 1) = new_element\n    end if\n\n    print *, \"Sorted list with new element:\"\n    print *, sorted_list\nend program insert_sorted\n```"
  },
  {
    "task": "Implement a for loop that counts the frequency of each character in a string.",
    "code": "```fortran\nprogram count_characters\n    implicit none\n    character(len=100) :: input_string\n    integer :: i, j, count(256)\n    integer :: length, ascii_code\n\n    ! Initialize count array\n    count = 0\n\n    ! Get the input string\n    input_string = \"example string with characters\"\n\n    ! Find the length of the string\n    length = len_trim(adjustl(input_string))\n\n    ! Count the frequency of each character\n    do i = 1, length\n        ascii_code = ichar(input_string(i:i))\n        count(ascii_code) = count(ascii_code) + 1\n    end do\n\n    ! Print the frequency of each character\n    do j = 0, 255\n        if (count(j) > 0) then\n            print *, char(j), ':', count(j)\n        end if\n    end do\nend program count_characters\n```"
  },
  {
    "task": "Create a for loop that prints all subsets of a given set.",
    "code": "```fortran\nprogram subsets\n  implicit none\n  integer, parameter :: n = 3\n  integer :: i, j\n  integer :: set(n) = [1, 2, 3]\n  integer :: num_subsets\n\n  num_subsets = 2**n\n\n  do i = 0, num_subsets - 1\n     write(*, '(A)', advance='no') 'Subset: {'\n     do j = 0, n - 1\n        if (i .and. (1 << j) /= 0) then\n           write(*, '(I0)', advance='no') set(j + 1)\n           if (j < n - 1 .and. i .and. (1 << (j + 1)) /= 0) then\n              write(*, '(A)', advance='no') ', '\n           end if\n        end if\n     end do\n     write(*, '(A)') '}'\n  end do\nend program subsets\n```"
  },
  {
    "task": "Design a for loop to generate all permutations of a string.",
    "code": "```fortran\nprogram string_permutations\n  implicit none\n  character(len=100) :: str\n  character(len=100) :: perm\n  integer :: i, len\n\n  str = \"abc\"  ! Example string\n  len = len_trim(str)\n\n  call permute(str, 1, len)\n\ncontains\n\n  recursive subroutine permute(str, l, r)\n    character(len=*), intent(inout) :: str\n    integer, intent(in) :: l, r\n    integer :: i\n\n    if (l == r) then\n      print *, str\n    else\n      do i = l, r\n        call swap(str(l:l), str(i:i))\n        call permute(str, l+1, r)\n        call swap(str(l:l), str(i:i))  ! backtrack\n      end do\n    end if\n  end subroutine permute\n\n  subroutine swap(a, b)\n    character(len=1), intent(inout) :: a, b\n    character(len=1) :: temp\n\n    temp = a\n    a = b\n    b = temp\n  end subroutine swap\n\nend program string_permutations\n```"
  },
  {
    "task": "Write a for loop that sorts an array in descending order.",
    "code": "```fortran\nprogram sort_descending\n  implicit none\n  integer, parameter :: n = 5\n  integer :: i, j, temp\n  integer :: array(n) = [3, 1, 4, 5, 2]\n\n  do i = 1, n-1\n     do j = i+1, n\n        if (array(i) < array(j)) then\n           temp = array(i)\n           array(i) = array(j)\n           array(j) = temp\n        end if\n     end do\n  end do\n\n  print *, array\nend program sort_descending\n```"
  },
  {
    "task": "Use a for loop to generate a sequence of random characters and print them.",
    "code": "```fortran\nprogram RandomCharacters\n    implicit none\n    integer :: i, n\n    character(len=1) :: random_char\n\n    call random_seed()\n    n = 10  ! Number of random characters to generate\n\n    do i = 1, n\n        call random_char_generator(random_char)\n        print *, random_char\n    end do\ncontains\n    subroutine random_char_generator(char)\n        character(len=1), intent(out) :: char\n        real :: r\n        call random_number(r)\n        char = char(iachar('A') + int(r * 26))\n    end subroutine random_char_generator\nend program RandomCharacters\n```"
  },
  {
    "task": "Construct a for loop that finds the common elements between two lists.",
    "code": "```fortran\nprogram find_common_elements\n    implicit none\n    integer, parameter :: n = 5\n    integer :: list1(n) = [1, 2, 3, 4, 5]\n    integer :: list2(n) = [3, 4, 5, 6, 7]\n    integer :: i, j\n\n    print *, \"Common elements:\"\n    do i = 1, n\n        do j = 1, n\n            if (list1(i) == list2(j)) then\n                print *, list1(i)\n            end if\n        end do\n    end do\nend program find_common_elements\n```"
  },
  {
    "task": "Develop a for loop to calculate and print the cumulative sum of a list.",
    "code": "```fortran\nprogram cumulative_sum\n    implicit none\n    integer, parameter :: n = 10\n    integer :: i\n    integer :: list(n)\n    integer :: cum_sum\n\n    list = (/1, 2, 3, 4, 5, 6, 7, 8, 9, 10/)\n    cum_sum = 0\n\n    do i = 1, n\n        cum_sum = cum_sum + list(i)\n        print *, \"Cumulative sum after element\", i, \"is\", cum_sum\n    end do\nend program cumulative_sum\n```"
  },
  {
    "task": "Create a for loop that prints a diamond pattern using asterisks.",
    "code": "```fortran\nprogram diamond_pattern\n  implicit none\n  integer :: n, i, j, k\n\n  n = 5  ! Change this value for a larger or smaller diamond\n\n  ! Upper part of the diamond\n  do i = 1, n\n     do j = 1, n-i\n        write(*,'(A)', advance=\"no\") ' '\n     end do\n     do k = 1, 2*i-1\n        write(*,'(A)', advance=\"no\") '*'\n     end do\n     print *\n  end do\n\n  ! Lower part of the diamond\n  do i = n-1, 1, -1\n     do j = 1, n-i\n        write(*,'(A)', advance=\"no\") ' '\n     end do\n     do k = 1, 2*i-1\n        write(*,'(A)', advance=\"no\") '*'\n     end do\n     print *\n  end do\n  \nend program diamond_pattern\n```"
  },
  {
    "task": "Write a for loop that simulates a countdown timer from a specified number of seconds.",
    "code": "```fortran\nprogram countdown_timer\n    implicit none\n    integer :: i\n    integer, parameter :: start_time = 10  ! specify the countdown start time here\n\n    do i = start_time, 1, -1\n        print *, \"Time remaining: \", i, \" seconds\"\n    end do\n\n    print *, \"Countdown finished!\"\nend program countdown_timer\n```"
  },
  {
    "task": "Use a for loop to print the transpose of a matrix.",
    "code": "```fortran\nprogram transpose_matrix\n  implicit none\n  integer, parameter :: n = 3, m = 3\n  integer :: i, j\n  integer :: matrix(n, m) = reshape((/ 1, 2, 3, 4, 5, 6, 7, 8, 9 /), shape(matrix))\n  integer :: transpose(m, n)\n\n  do i = 1, n\n     do j = 1, m\n        transpose(j, i) = matrix(i, j)\n     end do\n  end do\n\n  do i = 1, m\n     do j = 1, n\n        print *, transpose(i, j)\n     end do\n  end do\n\nend program transpose_matrix\n```"
  },
  {
    "task": "Implement a for loop that reverses the order of words in a sentence.",
    "code": "```fortran\nprogram reverse_words\n    implicit none\n    character(len=100) :: sentence\n    character(len=100), dimension(20) :: words\n    integer :: i, word_count, start, end\n\n    sentence = \"This is a sample sentence\"\n    word_count = 0\n    start = 1\n    end = 0\n\n    ! Split the sentence into words\n    do i = 1, len_trim(sentence)\n        if (sentence(i:i) == ' ' .or. i == len_trim(sentence)) then\n            if (i == len_trim(sentence)) end = i\n            words(word_count + 1) = sentence(start:end)\n            word_count = word_count + 1\n            start = i + 1\n            end = i\n        else\n            end = i\n        end if\n    end do\n\n    ! Print the words in reverse order\n    do i = word_count, 1, -1\n        write(*, '(A)', advance='no') trim(words(i))\n        if (i > 1) write(*, '(A)', advance='no') ' '\n    end do\n    print*\n\nend program reverse_words\n```"
  },
  {
    "task": "Create a for loop that deletes elements from a list that are less than a given value.",
    "code": "```fortran\nprogram filter_list\n    implicit none\n    integer, parameter :: n = 10\n    integer :: i, j, threshold\n    integer :: list(n) = [3, 7, 2, 9, 1, 8, 5, 4, 6, 10]\n    \n    threshold = 5\n    j = 1\n    do i = 1, n\n        if (list(i) >= threshold) then\n            list(j) = list(i)\n            j = j + 1\n        end if\n    end do\n    \n    do i = j, n\n        list(i) = 0\n    end do\n    \n    print *, list\nend program filter_list\n```"
  },
  {
    "task": "Design a for loop to merge two sorted lists into a single sorted list.",
    "code": "```fortran\nprogram merge_sorted_lists\n  implicit none\n  integer, parameter :: n = 5, m = 5\n  integer :: list1(n) = [1, 3, 5, 7, 9]\n  integer :: list2(m) = [2, 4, 6, 8, 10]\n  integer :: merged_list(n+m)\n  integer :: i, j, k\n\n  i = 1\n  j = 1\n  k = 1\n\n  do while (i <= n .and. j <= m)\n    if (list1(i) < list2(j)) then\n      merged_list(k) = list1(i)\n      i = i + 1\n    else\n      merged_list(k) = list2(j)\n      j = j + 1\n    end if\n    k = k + 1\n  end do\n\n  do while (i <= n)\n    merged_list(k) = list1(i)\n    i = i + 1\n    k = k + 1\n  end do\n\n  do while (j <= m)\n    merged_list(k) = list2(j)\n    j = j + 1\n    k = k + 1\n  end do\n\n  print *, \"Merged List: \", merged_list\n\nend program merge_sorted_lists\n```"
  },
  {
    "task": "Write a for loop that calculates the power of a number using repeated multiplication.",
    "code": "```fortran\nprogram power_calculation\n  implicit none\n  integer :: base, exponent, result, i\n\n  ! Initialize the base and exponent\n  base = 2\n  exponent = 3\n  result = 1\n\n  ! For loop to calculate power using repeated multiplication\n  do i = 1, exponent\n    result = result * base\n  end do\n\n  print *, \"The result is:\", result\nend program power_calculation\n```"
  },
  {
    "task": "Use a for loop to find the longest word in a list of words.",
    "code": "```fortran\nprogram find_longest_word\n    implicit none\n    character(len=100), dimension(:), allocatable :: words\n    character(len=100) :: current_word, longest_word\n    integer :: i, num_words, max_length\n\n    words = [ \"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\" ]\n    num_words = size(words)\n    longest_word = \"\"\n    max_length = 0\n\n    do i = 1, num_words\n        current_word = words(i)\n        if (len_trim(current_word) > max_length) then\n            longest_word = current_word\n            max_length = len_trim(current_word)\n        end if\n    end do\n\n    print *, \"The longest word is:\", trim(longest_word)\nend program find_longest_word\n```"
  },
  {
    "task": "Develop a for loop that sorts a list of tuples based on the second element.",
    "code": "```fortran\nprogram sort_tuples\n  implicit none\n  integer, parameter :: n = 5\n  integer :: i, j\n  real :: temp1\n  integer :: temp2\n  real, dimension(n) :: values\n  integer, dimension(n) :: keys\n  real, dimension(n) :: temp_values\n  integer, dimension(n) :: temp_keys\n\n  ! Example data\n  values = [4.0, 2.0, 5.0, 3.0, 1.0]\n  keys = [10, 20, 30, 40, 50]\n\n  ! Sort tuples based on second element (values)\n  do i = 1, n\n     do j = i+1, n\n        if (values(i) > values(j)) then\n           ! Swap values\n           temp1 = values(i)\n           values(i) = values(j)\n           values(j) = temp1\n\n           ! Swap corresponding keys\n           temp2 = keys(i)\n           keys(i) = keys(j)\n           keys(j) = temp2\n        end if\n     end do\n  end do\n\n  ! Output sorted tuples\n  do i = 1, n\n     print *, keys(i), values(i)\n  end do\nend program sort_tuples\n```"
  },
  {
    "task": "Create a for loop that replicates each character in a string a given number of times.",
    "code": "```fortran\nprogram replicate_characters\n    implicit none\n    character(len=100) :: input_string\n    character(len=1000) :: output_string\n    integer :: i, j, num_replicate, len_input\n    \n    input_string = \"example\"\n    num_replicate = 3\n    len_input = len_trim(input_string)\n    output_string = \"\"\n\n    do i = 1, len_input\n        do j = 1, num_replicate\n            output_string = trim(output_string) // input_string(i:i)\n        end do\n    end do\n\n    print *, trim(output_string)\nend program replicate_characters\n```"
  },
  {
    "task": "Construct a for loop that replaces spaces in a string with hyphens.",
    "code": "```fortran\nprogram replace_spaces\n    implicit none\n    character(len=100) :: inputString\n    integer :: i\n\n    inputString = \"This is an example string with spaces\"\n\n    do i = 1, len_trim(inputString)\n        if (inputString(i:i) == ' ') then\n            inputString(i:i) = '-'\n        end if\n    end do\n\n    print *, trim(inputString)\nend program replace_spaces\n```"
  },
  {
    "task": "Design a for loop to find the intersection of two sets.",
    "code": "```fortran\nprogram set_intersection\n    implicit none\n    integer, parameter :: n1 = 5, n2 = 5\n    integer :: set1(n1) = [1, 2, 3, 4, 5]\n    integer :: set2(n2) = [3, 4, 5, 6, 7]\n    integer :: i, j\n\n    print *, \"Intersection of the sets: \"\n    do i = 1, n1\n        do j = 1, n2\n            if (set1(i) == set2(j)) then\n                print *, set1(i)\n            end if\n        end do\n    end do\nend program set_intersection\n```"
  },
  {
    "task": "Write a for loop that generates a list of prime numbers up to a given number.",
    "code": "```fortran\nprogram generate_primes\n    implicit none\n    integer :: n, i, j\n    logical :: is_prime\n    integer, allocatable :: primes(:)\n\n    print *, \"Enter the upper limit for prime numbers:\"\n    read *, n\n\n    allocate(primes(n))\n    primes = 0\n\n    do i = 2, n\n        is_prime = .true.\n        do j = 2, i - 1\n            if (mod(i, j) == 0) then\n                is_prime = .false.\n                exit\n            end if\n        end do\n        if (is_prime) then\n            primes(i) = i\n        end if\n    end do\n\n    print *, \"Prime numbers up to\", n, \":\"\n    do i = 2, n\n        if (primes(i) /= 0) then\n            print *, primes(i)\n        end if\n    end do\n\n    deallocate(primes)\nend program generate_primes\n```"
  },
  {
    "task": "Use a for loop to implement a simple text-based progress bar.",
    "code": "```fortran\nprogram progress_bar\n  implicit none\n  integer :: i, total_steps\n  character(len=50) :: bar\n\n  total_steps = 50\n  bar = repeat(' ', total_steps)\n\n  do i = 1, total_steps\n     bar(i:i) = '#'\n     write(*,'(A, I3, A, A)') '[', i * 2, '%]', bar, ']'\n     call sleep(1)\n  end do\nend program progress_bar\n```"
  },
  {
    "task": "Implement a for loop that finds and prints all palindromic numbers between 10 and 200.",
    "code": "```fortran\nprogram find_palindromes\n  implicit none\n  integer :: i, reversed, original, digit\n\n  do i = 10, 200\n    original = i\n    reversed = 0\n\n    do while (original > 0)\n      digit = mod(original, 10)\n      reversed = reversed * 10 + digit\n      original = original / 10\n    end do\n\n    if (reversed == i) then\n      print *, i\n    end if\n  end do\nend program find_palindromes\n```"
  },
  {
    "task": "Create a for loop that multiplies corresponding elements of two lists and stores the result.",
    "code": "```fortran\nprogram multiply_lists\n    implicit none\n    integer, parameter :: n = 5\n    integer :: i\n    integer :: list1(n) = [1, 2, 3, 4, 5]\n    integer :: list2(n) = [6, 7, 8, 9, 10]\n    integer :: result(n)\n\n    do i = 1, n\n        result(i) = list1(i) * list2(i)\n    end do\n\nend program multiply_lists\n```"
  },
  {
    "task": "Develop a for loop that finds the difference between the largest and smallest numbers in a list.",
    "code": "```fortran\nprogram find_difference\n    implicit none\n    integer, parameter :: n = 5\n    integer :: i\n    integer :: numbers(n) = [3, 1, 4, 1, 5]\n    integer :: min_val, max_val, difference\n\n    min_val = numbers(1)\n    max_val = numbers(1)\n\n    do i = 2, n\n        if (numbers(i) < min_val) then\n            min_val = numbers(i)\n        end if\n        if (numbers(i) > max_val) then\n            max_val = numbers(i)\n        end if\n    end do\n\n    difference = max_val - min_val\n\n    print *, \"Difference: \", difference\nend program find_difference\n```"
  },
  {
    "task": "Write a for loop that prints numbers from 1 to 100, replacing multiples of 5 with 'Buzz'.",
    "code": "```fortran\nprogram buzz_replacer\n    implicit none\n    integer :: i\n\n    do i = 1, 100\n        if (mod(i, 5) == 0) then\n            print *, 'Buzz'\n        else\n            print *, i\n        end if\n    end do\nend program buzz_replacer\n```"
  },
  {
    "task": "Use a for loop to convert a list of integers into their binary representation.",
    "code": "```fortran\nprogram convert_to_binary\n  implicit none\n  integer :: i\n  integer, dimension(5) :: numbers = [3, 5, 7, 10, 15]\n  character(len=32) :: binary_representation\n  \n  do i = 1, size(numbers)\n     write(binary_representation, '(B32)') numbers(i)\n     print *, trim(adjustl(binary_representation))\n  end do\nend program convert_to_binary\n```"
  },
  {
    "task": "Design a for loop that fills a 2D array with consecutive numbers in a spiral pattern.",
    "code": "```fortran\nprogram spiral_fill\n    implicit none\n    integer, parameter :: n = 5, m = 5\n    integer :: arr(n, m)\n    integer :: num, top, bottom, left, right, i\n\n    num = 1\n    top = 1\n    bottom = n\n    left = 1\n    right = m\n\n    do while (num <= n * m)\n        ! Fill the top row\n        do i = left, right\n            arr(top, i) = num\n            num = num + 1\n        end do\n        top = top + 1\n\n        ! Fill the right column\n        do i = top, bottom\n            arr(i, right) = num\n            num = num + 1\n        end do\n        right = right - 1\n\n        ! Fill the bottom row\n        if (top <= bottom) then\n            do i = right, left, -1\n                arr(bottom, i) = num\n                num = num + 1\n            end do\n            bottom = bottom - 1\n        end if\n\n        ! Fill the left column\n        if (left <= right) then\n            do i = bottom, top, -1\n                arr(i, left) = num\n                num = num + 1\n            end do\n            left = left + 1\n        end if\n    end do\n\n    ! Output the array\n    do i = 1, n\n        print *, arr(i, :)\n    end do\nend program spiral_fill\n```"
  },
  {
    "task": "Create a for loop that iterates over a list and removes duplicates.",
    "code": "```fortran\nprogram remove_duplicates\n    implicit none\n    integer, parameter :: n = 10\n    integer :: i, j, k\n    integer, dimension(n) :: list, unique_list\n    integer :: unique_count\n\n    ! Example list with duplicates\n    list = [1, 2, 3, 2, 4, 5, 3, 6, 7, 5]\n\n    unique_count = 0\n    do i = 1, n\n        ! Check if list(i) is already in unique_list\n        do j = 1, unique_count\n            if (list(i) == unique_list(j)) exit\n        end do\n        \n        ! If not found, add to unique_list\n        if (j > unique_count) then\n            unique_count = unique_count + 1\n            unique_list(unique_count) = list(i)\n        end if\n    end do\n\n    ! Output the unique list\n    print *, \"Unique List: \", (unique_list(k), k = 1, unique_count)\nend program remove_duplicates\n```"
  },
  {
    "task": "Implement a for loop to calculate the dot product of two vectors.",
    "code": "```fortran\nprogram dot_product\n  implicit none\n  integer, parameter :: n = 5\n  real :: vector1(n), vector2(n), dot_product\n  integer :: i\n\n  ! Initialize vectors\n  vector1 = (/ 1.0, 2.0, 3.0, 4.0, 5.0 /)\n  vector2 = (/ 5.0, 4.0, 3.0, 2.0, 1.0 /)\n\n  ! Calculate dot product\n  dot_product = 0.0\n  do i = 1, n\n     dot_product = dot_product + vector1(i) * vector2(i)\n  end do\n\n  print *, 'Dot Product:', dot_product\nend program dot_product\n```"
  },
  {
    "task": "Write a for loop that prints a sequence of numbers in reverse order.",
    "code": "```fortran\nprogram reverse_sequence\n    implicit none\n    integer :: i\n\n    do i = 10, 1, -1\n        print *, i\n    end do\nend program reverse_sequence\n```"
  },
  {
    "task": "Develop a for loop that computes the greatest common divisor (GCD) of two numbers.",
    "code": "```fortran\nprogram gcd_for\n  implicit none\n  integer :: a, b, i, gcd\n\n  ! Example values, you can change these\n  a = 48\n  b = 18\n\n  do i = 1, min(a, b)\n     if (mod(a, i) == 0 .and. mod(b, i) == 0) then\n        gcd = i\n     end if\n  end do\n\n  print *, \"GCD of\", a, \"and\", b, \"is\", gcd\nend program gcd_for\n```"
  },
  {
    "task": "Construct a for loop that prints a square pattern of numbers with a given side length.",
    "code": "```fortran\nprogram square_pattern\n  implicit none\n  integer :: i, j, n\n\n  ! Set the side length of the square\n  n = 5\n\n  ! Loop to print the square pattern\n  do i = 1, n\n     do j = 1, n\n        write(*,'(I1)', advance='no') j\n     end do\n     print *\n  end do\n\nend program square_pattern\n```"
  },
  {
    "task": "Create a for loop that shifts all elements of a list to the left by one position.",
    "code": "```fortran\nprogram shift_left\n    implicit none\n    integer, parameter :: n = 5\n    integer :: arr(n) = [1, 2, 3, 4, 5]\n    integer :: i\n\n    do i = 1, n - 1\n        arr(i) = arr(i + 1)\n    end do\n    arr(n) = 0  ! Optional: Assign a value to the last element\n\n    print *, arr\nend program shift_left\n```"
  },
  {
    "task": "Use a for loop to print the first 20 triangular numbers.",
    "code": "```fortran\nprogram triangular_numbers\n    integer :: i, triangular\n\n    do i = 1, 20\n        triangular = i * (i + 1) / 2\n        print *, triangular\n    end do\nend program triangular_numbers\n```"
  },
  {
    "task": "Write a for loop that finds the first repeating character in a string.",
    "code": "```fortran\nprogram find_first_repeating_character\n    implicit none\n    character(len=*), parameter :: str = \"example string\"\n    integer :: i, j, length\n    logical :: found\n\n    length = len_trim(str)\n    found = .false.\n\n    do i = 1, length\n        do j = i + 1, length\n            if (str(i:i) == str(j:j)) then\n                print *, \"First repeating character: \", str(i:i)\n                found = .true.\n                exit\n            end if\n        end do\n        if (found) exit\n    end do\n\n    if (.not. found) then\n        print *, \"No repeating character found.\"\n    end if\nend program find_first_repeating_character\n```"
  },
  {
    "task": "Design a for loop that transforms a list of temperatures from Celsius to Fahrenheit.",
    "code": "```fortran\nprogram CelsiusToFahrenheit\n    implicit none\n    real :: celsius_temperatures(5) = [0.0, 10.0, 20.0, 30.0, 40.0]\n    real :: fahrenheit_temperatures(5)\n    integer :: i\n\n    do i = 1, size(celsius_temperatures)\n        fahrenheit_temperatures(i) = celsius_temperatures(i) * 9.0 / 5.0 + 32.0\n    end do\nend program CelsiusToFahrenheit\n```"
  },
  {
    "task": "Implement a for loop to determine if a string is an isogram.",
    "code": "```fortran\nprogram isogram_check\n    implicit none\n    character(len=100) :: inputString\n    logical :: isIsogram\n    integer :: i, j\n\n    ! Initialize input string and isIsogram flag\n    inputString = \"example\"\n    isIsogram = .true.\n\n    ! Convert to lowercase for uniformity\n    inputString = adjustl(trim(inputString))\n    inputString = tolowercase(inputString)\n\n    ! Check for isogram using nested loops\n    do i = 1, len_trim(inputString)\n        do j = i + 1, len_trim(inputString)\n            if (inputString(i:i) == inputString(j:j)) then\n                isIsogram = .false.\n                exit\n            end if\n        end do\n        if (.not. isIsogram) exit\n    end do\n\n    ! Output result\n    if (isIsogram) then\n        print *, \"The string is an isogram.\"\n    else\n        print *, \"The string is not an isogram.\"\n    end if\n\ncontains\n\n    ! Function to convert string to lowercase\n    pure function tolowercase(str) result(lowerStr)\n        character(len=*), intent(in) :: str\n        character(len=len(str)) :: lowerStr\n        integer :: k\n\n        do k = 1, len(str)\n            select case (str(k:k))\n                case ('A':'Z')\n                    lowerStr(k:k) = char(iachar(str(k:k)) + 32)\n                case default\n                    lowerStr(k:k) = str(k:k)\n            end select\n        end do\n    end function tolowercase\n\nend program isogram_check\n```"
  },
  {
    "task": "Use a for loop to create a histogram from a list of integers.",
    "code": "```fortran\nprogram histogram\n  implicit none\n  integer, parameter :: n = 10\n  integer :: data(n) = [3, 5, 1, 2, 7, 5, 3, 2, 5, 6]\n  integer :: i, j, max_value\n\n  max_value = maxval(data)\n\n  do i = 1, max_value\n    write(*, '(I2, \": \")', advance=\"no\") i\n    do j = 1, n\n      if (data(j) >= i) then\n        write(*, '(A)', advance=\"no\") \"*\"\n      else\n        write(*, '(A)', advance=\"no\") \" \"\n      end if\n    end do\n    write(*, *)\n  end do\nend program histogram\n```"
  },
  {
    "task": "Create a for loop that prints the indexes of all occurrences of a particular element in a list.",
    "code": "```fortran\nprogram find_occurrences\n    implicit none\n    integer, parameter :: n = 10\n    integer :: i, count, target\n    integer, dimension(n) :: list\n\n    ! Initialize the list and target element\n    list = (/ 3, 5, 7, 5, 9, 5, 2, 5, 8, 5 /)\n    target = 5\n\n    ! Print indexes of occurrences of target\n    do i = 1, n\n        if (list(i) == target) then\n            print *, i\n        end if\n    end do\nend program find_occurrences\n```"
  },
  {
    "task": "Write a for loop that checks if a given string is a palindrome.",
    "code": "```fortran\nprogram check_palindrome\n  implicit none\n  character(len=100) :: str\n  integer :: i, len\n  logical :: is_palindrome\n\n  ! Input the string\n  print *, \"Enter a string:\"\n  read(*, '(A)') str\n\n  ! Remove trailing spaces\n  len = len_trim(str)\n  str = str(1:len)\n\n  is_palindrome = .true.\n\n  do i = 1, len / 2\n    if (str(i:i) /= str(len-i+1:len-i+1)) then\n      is_palindrome = .false.\n      exit\n    end if\n  end do\n  \n  if (is_palindrome) then\n    print *, \"The string is a palindrome.\"\n  else\n    print *, \"The string is not a palindrome.\"\n  end if\nend program check_palindrome\n```"
  },
  {
    "task": "Develop a for loop to simulate the behavior of a simple finite state machine.",
    "code": "```fortran\nprogram finite_state_machine\n  implicit none\n  integer :: state, i\n  integer, parameter :: num_steps = 10\n\n  ! Initial state\n  state = 0\n\n  do i = 1, num_steps\n    select case (state)\n    case (0)\n      print *, \"State 0: Transition to State 1\"\n      state = 1\n    case (1)\n      print *, \"State 1: Transition to State 2\"\n      state = 2\n    case (2)\n      print *, \"State 2: Transition to State 0\"\n      state = 0\n    end select\n  end do\nend program finite_state_machine\n```"
  },
  {
    "task": "Design a for loop that finds the sum of all odd numbers in a list.",
    "code": "```fortran\nprogram sum_of_odds\n    implicit none\n    integer :: i, sum, n\n    integer, dimension(:), allocatable :: numbers\n\n    ! Example list of numbers\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    n = size(numbers)\n    sum = 0\n\n    do i = 1, n\n        if (mod(numbers(i), 2) /= 0) then\n            sum = sum + numbers(i)\n        end if\n    end do\n\n    print *, \"Sum of odd numbers:\", sum\nend program sum_of_odds\n```"
  },
  {
    "task": "Use a for loop to count how many words start with a vowel in a given sentence.",
    "code": "```fortran\nprogram count_vowel_words\n    implicit none\n    character(len=100) :: sentence\n    integer :: i, count\n    character(len=1) :: first_letter\n    integer :: length\n    character(len=20) :: word\n\n    sentence = \"An example sentence with some words starting with vowels\"\n    count = 0\n\n    length = len(trim(sentence))\n    do i = 1, length\n        if (i == 1 .or. (sentence(i-1:i-1) == ' ' .and. i <= length)) then\n            word = adjustl(scan(sentence(i:), ' '))\n            if (len_trim(word) > 0) then\n                first_letter = tolower(word(1:1))\n                if (first_letter == 'a' .or. first_letter == 'e' .or. first_letter == 'i' .or. &\n                    first_letter == 'o' .or. first_letter == 'u') then\n                    count = count + 1\n                end if\n            end if\n        end if\n    end do\n\n    print *, \"Number of words starting with a vowel:\", count\nend program count_vowel_words\n```"
  },
  {
    "task": "Implement a for loop that sorts a list of strings by their length.",
    "code": "```fortran\nprogram sort_strings_by_length\n    implicit none\n    integer, parameter :: n = 5\n    character(len=20) :: strings(n) = [\"apple\", \"banana\", \"kiwi\", \"strawberry\", \"grape\"]\n    integer :: i, j\n    character(len=20) :: temp\n\n    do i = 1, n-1\n        do j = i+1, n\n            if (len_trim(strings(i)) > len_trim(strings(j))) then\n                temp = strings(i)\n                strings(i) = strings(j)\n                strings(j) = temp\n            end if\n        end do\n    end do\n\n    do i = 1, n\n        print *, trim(strings(i))\n    end do\nend program sort_strings_by_length\n```"
  },
  {
    "task": "Write a for loop that prints the factorial of numbers from 1 to 10.",
    "code": "```fortran\nprogram factorial\n    implicit none\n    integer :: i, j, fact\n\n    do i = 1, 10\n        fact = 1\n        do j = 1, i\n            fact = fact * j\n        end do\n        print *, 'Factorial of', i, 'is', fact\n    end do\nend program factorial\n```"
  },
  {
    "task": "Create a for loop that replaces all instances of a substring in a string with another substring.",
    "code": "```fortran\nprogram replace_substring\n    implicit none\n    character(len=100) :: str, old_sub, new_sub\n    integer :: i, pos\n\n    str = \"Hello, world! World is vast.\"\n    old_sub = \"World\"\n    new_sub = \"Earth\"\n\n    do i = 1, len(str)\n        pos = index(str, old_sub)\n        if (pos == 0) exit\n        str = str(1:pos-1) // new_sub // str(pos+len_trim(old_sub):)\n    end do\n\n    print *, str\nend program replace_substring\n```"
  },
  {
    "task": "Develop a for loop that squares each element in a list of numbers.",
    "code": "```fortran\nprogram square_elements\n    implicit none\n    integer, parameter :: n = 5\n    integer :: i\n    integer :: numbers(n) = [1, 2, 3, 4, 5]\n    integer :: squared_numbers(n)\n\n    do i = 1, n\n        squared_numbers(i) = numbers(i)**2\n    end do\n\n    print *, 'Squared numbers:', squared_numbers\nend program square_elements\n```"
  },
  {
    "task": "Use a for loop to reverse the order of elements in an array.",
    "code": "```fortran\nprogram reverse_array\n    implicit none\n    integer, parameter :: n = 5\n    integer :: arr(n) = [1, 2, 3, 4, 5]\n    integer :: rev(n)\n    integer :: i\n\n    do i = 1, n\n        rev(i) = arr(n-i+1)\n    end do\n\n    print *, 'Reversed array: ', rev\nend program reverse_array\n```"
  },
  {
    "task": "Implement a for loop that tests if two strings are anagrams of each other.",
    "code": "```fortran\nprogram anagram_test\n  implicit none\n  character(len=100) :: str1, str2\n  integer :: i\n  integer, dimension(26) :: count1 = 0, count2 = 0\n  logical :: is_anagram = .true.\n\n  ! Example strings\n  str1 = \"listen\"\n  str2 = \"silent\"\n\n  if (len_trim(str1) /= len_trim(str2)) then\n    is_anagram = .false.\n  else\n    do i = 1, len_trim(str1)\n      count1(iachar(str1(i:i)) - iachar('a') + 1) = count1(iachar(str1(i:i)) - iachar('a') + 1) + 1\n      count2(iachar(str2(i:i)) - iachar('a') + 1) = count2(iachar(str2(i:i)) - iachar('a') + 1) + 1\n    end do\n\n    do i = 1, 26\n      if (count1(i) /= count2(i)) then\n        is_anagram = .false.\n        exit\n      end if\n    end do\n  end if\n  \n  if (is_anagram) then\n    print *, \"The strings are anagrams.\"\n  else\n    print *, \"The strings are not anagrams.\"\n  end if\n\nend program anagram_test\n```"
  },
  {
    "task": "Design a for loop to find and print all Armstrong numbers between 100 and 999.",
    "code": "```fortran\nprogram armstrong_numbers\n  implicit none\n  integer :: num, sum, rem, temp\n\n  do num = 100, 999\n     temp = num\n     sum = 0\n     do\n        rem = mod(temp, 10)\n        sum = sum + rem**3\n        temp = temp / 10\n        if (temp == 0) exit\n     end do\n     if (sum == num) then\n        print *, num\n     end if\n  end do\nend program armstrong_numbers\n```"
  }
]