[
  {
    "task": "Write a program that checks if a number is even or odd and outputs the result.",
    "code": "```fortran\nprogram check_even_odd\n    implicit none\n    integer :: num\n\n    print *, \"Enter an integer: \"\n    read *, num\n\n    if (mod(num, 2) == 0) then\n        print *, \"The number is even.\"\n    else\n        print *, \"The number is odd.\"\n    end if\nend program check_even_odd\n```"
  },
  {
    "task": "Create a function that determines if a given year is a leap year.",
    "code": "```fortran\nfunction isLeapYear(year) result(isLeap)\n    integer, intent(in) :: year\n    logical :: isLeap\n\n    if (mod(year, 4) == 0) then\n        if (mod(year, 100) == 0) then\n            if (mod(year, 400) == 0) then\n                isLeap = .true.\n            else\n                isLeap = .false.\n            end if\n        else\n            isLeap = .true.\n        end if\n    else\n        isLeap = .false.\n    end if\nend function isLeapYear\n```"
  },
  {
    "task": "Develop a script that categorizes an input number as positive, negative, or zero.",
    "code": "```fortran\nprogram categorize_number\n    implicit none\n    real :: number\n\n    print *, \"Enter a number:\"\n    read *, number\n\n    if (number > 0.0) then\n        print *, \"The number is positive.\"\n    else if (number < 0.0) then\n        print *, \"The number is negative.\"\n    else\n        print *, \"The number is zero.\"\n    end if\nend program categorize_number\n```"
  },
  {
    "task": "Implement a system that grants access only if a correct password and username are provided.",
    "code": "```fortran\nprogram AccessControl\n  implicit none\n\n  character(len=20) :: correctUsername, correctPassword\n  character(len=20) :: inputUsername, inputPassword\n\n  correctUsername = \"admin\"\n  correctPassword = \"password123\"\n\n  print *, \"Enter username:\"\n  read *, inputUsername\n  print *, \"Enter password:\"\n  read *, inputPassword\n\n  if (trim(inputUsername) == correctUsername .and. trim(inputPassword) == correctPassword) then\n    print *, \"Access granted.\"\n  else\n    print *, \"Access denied.\"\n  end if\n\nend program AccessControl\n```"
  },
  {
    "task": "Design a program that outputs 'Fizz' for numbers divisible by 3, 'Buzz' for numbers divisible by 5, and 'FizzBuzz' for numbers divisible by both.",
    "code": "```fortran\nprogram fizzbuzz\n  implicit none\n  integer :: i\n  do i = 1, 100\n    if (mod(i, 15) == 0) then\n      print *, 'FizzBuzz'\n    else if (mod(i, 3) == 0) then\n      print *, 'Fizz'\n    else if (mod(i, 5) == 0) then\n      print *, 'Buzz'\n    else\n      print *, i\n    end if\n  end do\nend program fizzbuzz\n```"
  },
  {
    "task": "Write a function to determine if a character is a vowel or a consonant.",
    "code": "```fortran\nprogram check_char\n  implicit none\n  character(len=1) :: ch\n  logical :: is_vowel\n\n  print *, 'Enter a character:'\n  read *, ch\n\n  is_vowel = is_vowel_function(ch)\n\n  if (is_vowel) then\n     print *, ch, 'is a vowel.'\n  else\n     print *, ch, 'is a consonant.'\n  end if\n\ncontains\n\n  logical function is_vowel_function(c)\n    character(len=1), intent(in) :: c\n    character(len=1) :: lowercase_c\n\n    lowercase_c = achar(iachar(c) + 32 * ((c >= 'A') .and. (c <= 'Z')))\n\n    if (lowercase_c == 'a' .or. lowercase_c == 'e' .or. lowercase_c == 'i' .or. &\n        lowercase_c == 'o' .or. lowercase_c == 'u') then\n       is_vowel_function = .true.\n    else\n       is_vowel_function = .false.\n    end if\n  end function is_vowel_function\n\nend program check_char\n```"
  },
  {
    "task": "Create a program that assigns letter grades based on numerical scores.",
    "code": "```fortran\nprogram grade_assignment\n    implicit none\n    integer :: score\n    character(len=1) :: grade\n\n    print *, \"Enter the numerical score (0-100):\"\n    read *, score\n\n    if (score >= 90) then\n        grade = 'A'\n    else if (score >= 80) then\n        grade = 'B'\n    else if (score >= 70) then\n        grade = 'C'\n    else if (score >= 60) then\n        grade = 'D'\n    else\n        grade = 'F'\n    end if\n\n    print *, \"The letter grade is: \", grade\nend program grade_assignment\n```"
  },
  {
    "task": "Develop a routine that suggests clothing based on the current temperature.",
    "code": "```fortran\nprogram clothing_suggestion\n  implicit none\n  real :: temperature\n\n  print *, \"Enter the current temperature in Celsius:\"\n  read *, temperature\n\n  call suggest_clothing(temperature)\n\ncontains\n\n  subroutine suggest_clothing(temp)\n    real, intent(in) :: temp\n\n    if (temp < 0.0) then\n      print *, \"It's freezing! Wear a heavy coat, hat, and gloves.\"\n    else if (temp >= 0.0 .and. temp < 10.0) then\n      print *, \"It's cold! Wear a coat and a hat.\"\n    else if (temp >= 10.0 .and. temp < 20.0) then\n      print *, \"It's cool. Wear a light jacket or sweater.\"\n    else if (temp >= 20.0 .and. temp < 30.0) then\n      print *, \"It's warm. Wear a t-shirt and shorts.\"\n    else\n      print *, \"It's hot! Wear light, breathable clothing.\"\n    end if\n\n  end subroutine suggest_clothing\n\nend program clothing_suggestion\n```"
  },
  {
    "task": "Implement a system that checks if a user is an adult or a minor based on their age.",
    "code": "```fortran\nprogram age_checker\n    implicit none\n    integer :: age\n\n    ! Ask the user for their age\n    print *, 'Enter your age:'\n    read *, age\n\n    ! Check if the user is an adult or a minor\n    if (age >= 18) then\n        print *, 'You are an adult.'\n    else\n        print *, 'You are a minor.'\n    end if\nend program age_checker\n```"
  },
  {
    "task": "Design a program that validates if a triangle can exist based on its side lengths.",
    "code": "```fortran\nprogram triangle_validator\n    implicit none\n    real :: a, b, c\n\n    print *, 'Enter the lengths of the three sides of the triangle:'\n    read(*,*) a, b, c\n\n    if (a > 0.0 .and. b > 0.0 .and. c > 0.0) then\n        if (a + b > c .and. a + c > b .and. b + c > a) then\n            print *, 'The triangle is valid.'\n        else\n            print *, 'The triangle is not valid.'\n        end if\n    else\n        print *, 'Side lengths must be positive.'\n    end if\nend program triangle_validator\n```"
  },
  {
    "task": "Write a function that determines the largest of three input numbers.",
    "code": "```fortran\nfunction largest_of_three(a, b, c) result(largest)\n    implicit none\n    real, intent(in) :: a, b, c\n    real :: largest\n\n    if (a >= b .and. a >= c) then\n        largest = a\n    else if (b >= a .and. b >= c) then\n        largest = b\n    else\n        largest = c\n    end if\nend function largest_of_three\n```"
  },
  {
    "task": "Create a program that checks if a string is a palindrome.",
    "code": "```fortran\nprogram palindrome_check\n  implicit none\n  character(len=100) :: input_string\n  integer :: i, n\n  logical :: is_palindrome\n\n  ! Initialize\n  is_palindrome = .true.\n\n  ! Read input\n  print *, 'Enter a string:'\n  read *, input_string\n\n  ! Determine the length of the string\n  n = len_trim(input_string)\n\n  ! Check for palindrome\n  do i = 1, n / 2\n    if (input_string(i:i) /= input_string(n-i+1:n-i+1)) then\n      is_palindrome = .false.\n      exit\n    end if\n  end do\n\n  ! Output result\n  if (is_palindrome) then\n    print *, 'The string is a palindrome.'\n  else\n    print *, 'The string is not a palindrome.'\n  end if\n\nend program palindrome_check\n```"
  },
  {
    "task": "Develop a routine that calculates the total cost with a discount applied if applicable.",
    "code": "```fortran\nPROGRAM CalculateTotalCost\n  IMPLICIT NONE\n  REAL :: originalCost, totalCost\n  REAL, PARAMETER :: discountThreshold = 100.0, discountRate = 0.1\n\n  PRINT *, 'Enter the original cost:'\n  READ *, originalCost\n\n  IF (originalCost > discountThreshold) THEN\n    totalCost = originalCost * (1.0 - discountRate)\n  ELSE\n    totalCost = originalCost\n  END IF\n\n  PRINT *, 'The total cost is:', totalCost\nEND PROGRAM CalculateTotalCost\n```"
  },
  {
    "task": "Implement a system that checks if a person is eligible to vote based on age and citizenship.",
    "code": "```fortran\nprogram voting_eligibility\n    implicit none\n    integer :: age\n    logical :: is_citizen\n\n    ! Example input\n    age = 20\n    is_citizen = .true.\n\n    if (age >= 18) then\n        if (is_citizen) then\n            print *, \"Eligible to vote.\"\n        else\n            print *, \"Not eligible to vote: Not a citizen.\"\n        end if\n    else\n        print *, \"Not eligible to vote: Underage.\"\n    end if\nend program voting_eligibility\n```"
  },
  {
    "task": "Design a function that returns the day of the week given a number from 1 to 7.",
    "code": "```fortran\nfunction day_of_week(n) result(day)\n    integer, intent(in) :: n\n    character(len=10) :: day\n\n    select case (n)\n    case (1)\n        day = \"Monday\"\n    case (2)\n        day = \"Tuesday\"\n    case (3)\n        day = \"Wednesday\"\n    case (4)\n        day = \"Thursday\"\n    case (5)\n        day = \"Friday\"\n    case (6)\n        day = \"Saturday\"\n    case (7)\n        day = \"Sunday\"\n    case default\n        day = \"Invalid\"\n    end select\nend function day_of_week\n```"
  },
  {
    "task": "Write a program that determines if a word is found within a given sentence.",
    "code": "```fortran\nprogram find_word\n    implicit none\n    character(len=100) :: sentence\n    character(len=20) :: word\n    integer :: pos\n\n    ! Input sentence and word\n    print *, \"Enter a sentence:\"\n    read '(A)', sentence\n    print *, \"Enter a word to find:\"\n    read '(A)', word\n\n    ! Find the position of the word in the sentence\n    pos = index(sentence, word)\n\n    ! Conditional branching to determine if the word was found\n    if (pos /= 0) then\n        print *, \"The word was found in the sentence.\"\n    else\n        print *, \"The word was not found in the sentence.\"\n    end if\nend program find_word\n```"
  },
  {
    "task": "Create a script that checks if a number is within a specified range.",
    "code": "```fortran\nprogram check_number_in_range\n    implicit none\n    integer :: number, lower_bound, upper_bound\n\n    ! Initialize the number and the range bounds\n    number = 10\n    lower_bound = 5\n    upper_bound = 15\n\n    ! Conditional branching to check if the number is within the range\n    if (number >= lower_bound .and. number <= upper_bound) then\n        print *, \"The number is within the range.\"\n    else\n        print *, \"The number is not within the range.\"\n    end if\n\nend program check_number_in_range\n```"
  },
  {
    "task": "Develop a routine to decide if a user input is a valid email address.",
    "code": "```fortran\nprogram ValidateEmail\n  implicit none\n  character(len=100) :: email\n  logical :: isValid\n\n  print *, \"Enter the email address to validate:\"\n  read *, email\n\n  isValid = validateEmail(email)\n\n  if (isValid) then\n     print *, \"The email address is valid.\"\n  else\n     print *, \"The email address is invalid.\"\n  end if\n\ncontains\n\n  logical function validateEmail(email)\n    character(len=*), intent(in) :: email\n    integer :: atPos, dotPos\n\n    atPos = index(email, '@')\n    dotPos = index(email, '.', back=atPos+1)\n\n    if (atPos > 1 .and. dotPos > atPos + 1 .and. len(trim(email)) > dotPos) then\n      validateEmail = .true.\n    else\n      validateEmail = .false.\n    end if\n  end function validateEmail\n\nend program ValidateEmail\n```"
  },
  {
    "task": "Implement a program that categorizes a number as small, medium, or large.",
    "code": "```fortran\nprogram categorize_number\n    implicit none\n    integer :: number\n\n    print *, \"Enter a number: \"\n    read *, number\n\n    if (number < 10) then\n        print *, \"The number is small.\"\n    else if (number >= 10 .and. number <= 100) then\n        print *, \"The number is medium.\"\n    else\n        print *, \"The number is large.\"\n    end if\nend program categorize_number\n```"
  },
  {
    "task": "Design a function that outputs the season based on the month provided.",
    "code": "```fortran\nprogram determine_season\n  implicit none\n  integer :: month\n  character(len=10) :: season\n\n  print *, \"Enter the month as a number (1-12):\"\n  read *, month\n\n  season = get_season(month)\n  print *, \"The season is: \", season\n\ncontains\n\n  function get_season(month) result(season)\n    integer, intent(in) :: month\n    character(len=10) :: season\n\n    select case(month)\n    case(12, 1, 2)\n      season = 'Winter'\n    case(3, 4, 5)\n      season = 'Spring'\n    case(6, 7, 8)\n      season = 'Summer'\n    case(9, 10, 11)\n      season = 'Autumn'\n    case default\n      season = 'Unknown'\n    end select\n  end function get_season\n\nend program determine_season\n```"
  },
  {
    "task": "Write a program that checks if a string contains only alphabetic characters.",
    "code": "```fortran\nprogram check_alphabetic\n    implicit none\n    character(len=100) :: input_string\n    logical :: is_alphabetic\n    integer :: i\n\n    print *, 'Enter a string:'\n    read *, input_string\n\n    is_alphabetic = .true.\n\n    do i = 1, len_trim(input_string)\n        if (.not.(iachar(input_string(i:i)) >= iachar('A') .and. iachar(input_string(i:i)) <= iachar('Z') .or. &\n                  iachar(input_string(i:i)) >= iachar('a') .and. iachar(input_string(i:i)) <= iachar('z'))) then\n            is_alphabetic = .false.\n            exit\n        end if\n    end do\n\n    if (is_alphabetic) then\n        print *, 'The string contains only alphabetic characters.'\n    else\n        print *, 'The string contains non-alphabetic characters.'\n    end if\nend program check_alphabetic\n```"
  },
  {
    "task": "Create a routine that decides the type of triangle based on its angles.",
    "code": "```fortran\nprogram TriangleType\n    implicit none\n    real :: angle1, angle2, angle3\n    call GetTriangleType(angle1, angle2, angle3)\nend program TriangleType\n\nsubroutine GetTriangleType(a1, a2, a3)\n    implicit none\n    real, intent(in) :: a1, a2, a3\n    if (a1 + a2 + a3 /= 180.0) then\n        print *, \"Invalid triangle\"\n    else if (a1 <= 0.0 .or. a2 <= 0.0 .or. a3 <= 0.0) then\n        print *, \"Invalid triangle\"\n    else if (a1 == 90.0 .or. a2 == 90.0 .or. a3 == 90.0) then\n        print *, \"Right triangle\"\n    else if (a1 > 90.0 .or. a2 > 90.0 .or. a3 > 90.0) then\n        print *, \"Obtuse triangle\"\n    else\n        print *, \"Acute triangle\"\n    end if\nend subroutine GetTriangleType\n```"
  },
  {
    "task": "Develop a program that suggests a meal based on the time of day.",
    "code": "```fortran\nprogram meal_suggestion\n    implicit none\n    integer :: hour\n    character(len=20) :: meal\n\n    print *, \"Enter the current hour (0-23):\"\n    read *, hour\n\n    if (hour >= 0 .and. hour < 12) then\n        meal = \"Breakfast\"\n    else if (hour >= 12 .and. hour < 17) then\n        meal = \"Lunch\"\n    else if (hour >= 17 .and. hour < 21) then\n        meal = \"Dinner\"\n    else if (hour >= 21 .and. hour < 24) then\n        meal = \"Snack\"\n    else\n        meal = \"Invalid hour\"\n    end if\n\n    print *, \"Suggested meal:\", meal\nend program meal_suggestion\n```"
  },
  {
    "task": "Implement a function that determines if a point lies within a circle given its radius.",
    "code": "```fortran\nprogram CircleCheck\n  implicit none\n  real :: radius, x, y\n\n  print *, 'Enter the radius of the circle:'\n  read *, radius\n  print *, 'Enter the x and y coordinates of the point:'\n  read *, x, y\n\n  if (isPointInCircle(radius, x, y)) then\n     print *, 'The point lies within the circle.'\n  else\n     print *, 'The point does not lie within the circle.'\n  endif\n\ncontains\n\n  logical function isPointInCircle(r, xCoord, yCoord)\n    real, intent(in) :: r, xCoord, yCoord\n    real :: distanceSquared\n\n    distanceSquared = xCoord**2 + yCoord**2\n    if (distanceSquared <= r**2) then\n      isPointInCircle = .true.\n    else\n      isPointInCircle = .false.\n    endif\n  end function isPointInCircle\n\nend program CircleCheck\n```"
  },
  {
    "task": "Design a script that calculates overtime pay based on hours worked.",
    "code": "```fortran\nprogram OvertimePay\n    implicit none\n    real :: hoursWorked, hourlyRate, overtimePay, overtimeHours, regularHours\n    real, parameter :: overtimeMultiplier = 1.5\n\n    ! Input hours worked and hourly rate\n    print *, \"Enter hours worked: \"\n    read *, hoursWorked\n    print *, \"Enter hourly rate: \"\n    read *, hourlyRate\n\n    ! Calculate overtime pay\n    if (hoursWorked > 40.0) then\n        regularHours = 40.0\n        overtimeHours = hoursWorked - 40.0\n        overtimePay = regularHours * hourlyRate + overtimeHours * hourlyRate * overtimeMultiplier\n    else\n        overtimePay = hoursWorked * hourlyRate\n    end if\n\n    ! Output the overtime pay\n    print *, \"Total pay: \", overtimePay\n\nend program OvertimePay\n```"
  },
  {
    "task": "Write a program that checks if two strings are anagrams of each other.",
    "code": "```fortran\nprogram anagram_check\n    implicit none\n    character(len=100) :: str1, str2\n    integer :: i\n    logical :: is_anagram\n\n    print *, 'Enter first string:'\n    read(*,'(A)') str1\n    print *, 'Enter second string:'\n    read(*,'(A)') str2\n\n    is_anagram = .true.\n\n    if (len_trim(str1) /= len_trim(str2)) then\n        is_anagram = .false.\n    else\n        call sort_string(trim(str1))\n        call sort_string(trim(str2))\n        if (str1 /= str2) then\n            is_anagram = .false.\n        end if\n    end if\n\n    if (is_anagram) then\n        print *, 'The strings are anagrams.'\n    else\n        print *, 'The strings are not anagrams.'\n    end if\n\ncontains\n\n    subroutine sort_string(s)\n        character(len=100) :: s\n        integer :: i, j\n        character(len=1) :: temp\n\n        do i = 1, len_trim(s)-1\n            do j = i+1, len_trim(s)\n                if (s(i:i) > s(j:j)) then\n                    temp = s(i:i)\n                    s(i:i) = s(j:j)\n                    s(j:j) = temp\n                end if\n            end do\n        end do\n    end subroutine sort_string\n\nend program anagram_check\n```"
  },
  {
    "task": "Create a function that classifies numbers as prime or composite.",
    "code": "```fortran\nprogram PrimeCompositeClassifier\n  implicit none\n  integer :: num\n  logical :: isPrime\n\n  print *, \"Enter a number to classify:\"\n  read *, num\n\n  isPrime = classifyNumber(num)\n\n  if (isPrime) then\n     print *, \"The number \", num, \" is prime.\"\n  else\n     print *, \"The number \", num, \" is composite.\"\n  end if\n\ncontains\n\n  logical function classifyNumber(n)\n    integer, intent(in) :: n\n    integer :: i\n\n    if (n <= 1) then\n       classifyNumber = .false.\n       return\n    end if\n\n    do i = 2, int(sqrt(real(n)))\n       if (mod(n, i) == 0) then\n          classifyNumber = .false.\n          return\n       end if\n    end do\n\n    classifyNumber = .true.\n  end function classifyNumber\n\nend program PrimeCompositeClassifier\n```"
  },
  {
    "task": "Develop a routine to determine if a number is a power of two.",
    "code": "```fortran\nprogram PowerOfTwo\n  implicit none\n  integer :: number\n\n  print *, \"Enter a number:\"\n  read *, number\n\n  if (isPowerOfTwo(number)) then\n    print *, \"The number is a power of two.\"\n  else\n    print *, \"The number is not a power of two.\"\n  end if\n\ncontains\n\n  logical function isPowerOfTwo(n)\n    integer, intent(in) :: n\n    if (n <= 0) then\n      isPowerOfTwo = .false.\n    else\n      isPowerOfTwo = (iand(n, n - 1) == 0)\n    end if\n  end function isPowerOfTwo\n\nend program PowerOfTwo\n```"
  },
  {
    "task": "Implement a program that checks if a list is sorted in ascending order.",
    "code": "```fortran\nprogram check_sorted\n  implicit none\n  integer, parameter :: n = 5\n  integer :: i\n  integer :: list(n) = [1, 3, 5, 7, 9]\n  logical :: is_sorted\n\n  is_sorted = .true.\n  do i = 1, n - 1\n    if (list(i) > list(i+1)) then\n      is_sorted = .false.\n      exit\n    end if\n  end do\n\n  if (is_sorted) then\n    print *, \"The list is sorted in ascending order.\"\n  else\n    print *, \"The list is not sorted in ascending order.\"\n  end if\nend program check_sorted\n```"
  },
  {
    "task": "Design a function that suggests a sport based on the weather conditions.",
    "code": "```fortran\nprogram suggest_sport\n  implicit none\n\n  character(len=20) :: weather_condition\n  character(len=20) :: sport\n\n  print *, \"Enter the current weather condition (sunny, rainy, snowy, windy):\"\n  read *, weather_condition\n\n  sport = sport_suggestion(weather_condition)\n\n  print *, \"Suggested sport:\", sport\n\ncontains\n\n  function sport_suggestion(weather) result(sport)\n    implicit none\n    character(len=20), intent(in) :: weather\n    character(len=20) :: sport\n\n    select case (trim(adjustl(weather)))\n    case (\"sunny\")\n      sport = \"tennis\"\n    case (\"rainy\")\n      sport = \"swimming\"\n    case (\"snowy\")\n      sport = \"skiing\"\n    case (\"windy\")\n      sport = \"cycling\"\n    case default\n      sport = \"unknown\"\n    end select\n  end function sport_suggestion\n\nend program suggest_sport\n```"
  },
  {
    "task": "Write a program that determines if an entered date is valid.",
    "code": "```fortran\nprogram check_date\n    implicit none\n    integer :: year, month, day\n    logical :: is_leap_year, is_valid_date\n\n    print *, \"Enter year, month, day:\"\n    read *, year, month, day\n\n    is_leap_year = .false.\n    if (mod(year, 400) == 0) then\n        is_leap_year = .true.\n    else if (mod(year, 100) == 0) then\n        is_leap_year = .false.\n    else if (mod(year, 4) == 0) then\n        is_leap_year = .true.\n    end if\n\n    is_valid_date = .false.\n    select case (month)\n    case (1, 3, 5, 7, 8, 10, 12)\n        if (day >= 1 .and. day <= 31) is_valid_date = .true.\n    case (4, 6, 9, 11)\n        if (day >= 1 .and. day <= 30) is_valid_date = .true.\n    case (2)\n        if (is_leap_year .and. day >= 1 .and. day <= 29) then\n            is_valid_date = .true.\n        else if (.not. is_leap_year .and. day >= 1 .and. day <= 28) then\n            is_valid_date = .true.\n        end if\n    end select\n\n    if (is_valid_date) then\n        print *, \"The date is valid.\"\n    else\n        print *, \"The date is invalid.\"\n    end if\nend program check_date\n```"
  },
  {
    "task": "Create a script to decide which of two products to buy based on price and reviews.",
    "code": "```fortran\nprogram product_choice\n  implicit none\n  real :: price1, price2\n  integer :: reviews1, reviews2\n\n  ! Example input values\n  price1 = 50.0\n  reviews1 = 120\n  price2 = 45.0\n  reviews2 = 80\n\n  if ((price1 < price2 .and. reviews1 >= reviews2) .or. (reviews1 > reviews2 .and. price1 <= price2)) then\n    print *, \"Buy product 1\"\n  else\n    print *, \"Buy product 2\"\n  end if\n\nend program product_choice\n```"
  },
  {
    "task": "Develop a function that categorizes a person\u2019s BMI as underweight, normal, overweight, or obese.",
    "code": "```fortran\nprogram BMICategorizer\n    implicit none\n    real :: weight, height, bmi\n    character(len=10) :: category\n\n    print *, \"Enter weight in kilograms:\"\n    read *, weight\n    print *, \"Enter height in meters:\"\n    read *, height\n\n    bmi = weight / (height * height)\n    category = categorize_bmi(bmi)\n\n    print *, \"Your BMI is: \", bmi\n    print *, \"BMI Category: \", category\n\ncontains\n\n    function categorize_bmi(bmi) result(category)\n        real, intent(in) :: bmi\n        character(len=10) :: category\n\n        if (bmi < 18.5) then\n            category = \"Underweight\"\n        else if (bmi < 25.0) then\n            category = \"Normal\"\n        else if (bmi < 30.0) then\n            category = \"Overweight\"\n        else\n            category = \"Obese\"\n        end if\n    end function categorize_bmi\n\nend program BMICategorizer\n```"
  },
  {
    "task": "Implement a program that checks if a credit card number is valid using the Luhn algorithm.",
    "code": "```fortran\nprogram luhn_check\n    implicit none\n    character(len=19) :: card_number\n    integer :: len, i, sum, digit, double_digit\n\n    print *, \"Enter the credit card number:\"\n    read(*,*) card_number\n\n    len = len_trim(adjustl(card_number))\n    sum = 0\n\n    do i = len, 1, -1\n        if (i < len) then\n            digit = iachar(card_number(i:i)) - iachar('0')\n            if (mod(len-i, 2) == 0) then\n                double_digit = 2 * digit\n                if (double_digit > 9) then\n                    double_digit = double_digit - 9\n                end if\n                sum = sum + double_digit\n            else\n                sum = sum + digit\n            end if\n        end if\n    end do\n\n    if (mod(sum, 10) == 0) then\n        print *, \"The credit card number is valid.\"\n    else\n        print *, \"The credit card number is not valid.\"\n    end if\n\nend program luhn_check\n```"
  },
  {
    "task": "Design a routine that outputs a greeting based on the current time of day.",
    "code": "```fortran\nprogram GreetingBasedOnTime\n    implicit none\n    integer :: hour\n    character(len=20) :: greeting\n\n    print *, \"Enter the current hour (0-23):\"\n    read *, hour\n\n    if (hour >= 0 .and. hour < 12) then\n        greeting = \"Good Morning\"\n    else if (hour >= 12 .and. hour < 18) then\n        greeting = \"Good Afternoon\"\n    else if (hour >= 18 .and. hour < 24) then\n        greeting = \"Good Evening\"\n    else\n        greeting = \"Invalid hour\"\n    end if\n\n    print *, greeting\nend program GreetingBasedOnTime\n```"
  },
  {
    "task": "Write a program that determines if a given word can be formed with a set of letters.",
    "code": "```fortran\nprogram word_formable\n  implicit none\n  character(len=100) :: word\n  character(len=100) :: letters\n  integer :: i, j\n  logical :: formable\n\n  print *, 'Enter the word:'\n  read(*, '(A)') word\n  print *, 'Enter the set of letters:'\n  read(*, '(A)') letters\n\n  formable = .true.\n\n  do i = 1, len_trim(word)\n    formable = .false.\n    do j = 1, len_trim(letters)\n      if (word(i:i) == letters(j:j)) then\n        letters(j:j) = ' '\n        formable = .true.\n        exit\n      end if\n    end do\n    if (.not. formable) exit\n  end do\n\n  if (formable) then\n    print *, 'The word can be formed.'\n  else\n    print *, 'The word cannot be formed.'\n  end if\nend program word_formable\n```"
  },
  {
    "task": "Create a function that outputs the appropriate greeting based on the day of the week.",
    "code": "```fortran\nprogram greeting_by_day\n    implicit none\n    character(len=20) :: day\n    character(len=50) :: greeting\n\n    print *, 'Enter the day of the week:'\n    read *, day\n\n    call get_greeting(day, greeting)\n    print *, greeting\n\ncontains\n\n    subroutine get_greeting(day, greeting)\n        character(len=*), intent(in) :: day\n        character(len=50), intent(out) :: greeting\n\n        select case (trim(adjustl(day)))\n        case ('Monday')\n            greeting = 'Happy Monday!'\n        case ('Tuesday')\n            greeting = 'Terrific Tuesday!'\n        case ('Wednesday')\n            greeting = 'Wonderful Wednesday!'\n        case ('Thursday')\n            greeting = 'Thoughtful Thursday!'\n        case ('Friday')\n            greeting = 'Fantastic Friday!'\n        case ('Saturday')\n            greeting = 'Superb Saturday!'\n        case ('Sunday')\n            greeting = 'Sunny Sunday!'\n        case default\n            greeting = 'Invalid day!'\n        end select\n    end subroutine get_greeting\n\nend program greeting_by_day\n```"
  },
  {
    "task": "Develop a system to determine if a person qualifies for a senior citizen discount.",
    "code": "```fortran\nprogram SeniorCitizenDiscount\n  implicit none\n  integer :: age\n  logical :: qualifies\n\n  print *, 'Enter age:'\n  read *, age\n\n  if (age >= 65) then\n     qualifies = .true.\n  else\n     qualifies = .false.\n  end if\n\n  if (qualifies) then\n     print *, 'Person qualifies for a senior citizen discount.'\n  else\n     print *, 'Person does not qualify for a senior citizen discount.'\n  end if\n\nend program SeniorCitizenDiscount\n```"
  },
  {
    "task": "Implement a function that checks if a number is a perfect square.",
    "code": "```fortran\nprogram checkPerfectSquare\n  implicit none\n  integer :: number\n  logical :: result\n\n  print *, \"Enter a number:\"\n  read *, number\n\n  result = isPerfectSquare(number)\n  if (result) then\n    print *, \"The number is a perfect square.\"\n  else\n    print *, \"The number is not a perfect square.\"\n  end if\nend program checkPerfectSquare\n\nlogical function isPerfectSquare(n)\n  implicit none\n  integer, intent(in) :: n\n  integer :: sqrt_n\n\n  if (n < 0) then\n    isPerfectSquare = .false.\n    return\n  end if\n\n  sqrt_n = int(sqrt(real(n)))\n  isPerfectSquare = (sqrt_n * sqrt_n == n)\nend function isPerfectSquare\n```"
  },
  {
    "task": "Design a program that outputs the correct shipping cost based on weight and distance.",
    "code": "```fortran\nprogram shipping_cost\n    implicit none\n    real :: weight, distance, cost\n\n    print *, \"Enter the weight of the package (kg):\"\n    read *, weight\n    print *, \"Enter the distance of the shipment (km):\"\n    read *, distance\n\n    if (weight <= 0.0 .or. distance <= 0.0) then\n        print *, \"Invalid input. Weight and distance must be positive.\"\n    else if (weight <= 5.0) then\n        if (distance <= 100.0) then\n            cost = 5.0\n        else\n            cost = 10.0\n        end if\n    else if (weight <= 20.0) then\n        if (distance <= 100.0) then\n            cost = 15.0\n        else\n            cost = 25.0\n        end if\n    else\n        if (distance <= 100.0) then\n            cost = 30.0\n        else\n            cost = 50.0\n        end if\n    end if\n\n    print *, \"The shipping cost is: $\", cost\n\nend program shipping_cost\n```"
  },
  {
    "task": "Write a routine that chooses the correct pronoun based on gender input.",
    "code": "```fortran\nprogram choose_pronoun\n    implicit none\n    character(len=10) :: gender\n    character(len=10) :: pronoun\n\n    print *, 'Enter gender (male/female/other): '\n    read *, gender\n\n    select case (trim(adjustl(gender)))\n    case ('male')\n        pronoun = 'he'\n    case ('female')\n        pronoun = 'she'\n    case ('other')\n        pronoun = 'they'\n    case default\n        pronoun = 'unknown'\n    end select\n\n    print *, 'The pronoun is: ', pronoun\n\nend program choose_pronoun\n```"
  },
  {
    "task": "Create a program that checks if a user input is a palindrome number.",
    "code": "```fortran\nprogram palindrome_check\n    implicit none\n    integer :: number, reversed, temp, digit\n\n    print *, 'Enter a number:'\n    read *, number\n\n    reversed = 0\n    temp = number\n\n    do while (temp /= 0)\n        digit = mod(temp, 10)\n        reversed = reversed * 10 + digit\n        temp = temp / 10\n    end do\n\n    if (number == reversed) then\n        print *, 'The number is a palindrome.'\n    else\n        print *, 'The number is not a palindrome.'\n    end if\nend program palindrome_check\n```"
  },
  {
    "task": "Develop a script to decide if a number is a perfect number.",
    "code": "```fortran\nprogram perfect_number\n  implicit none\n  integer :: n, i, sum\n\n  print*, 'Enter a number:'\n  read*, n\n  sum = 0\n\n  do i = 1, n-1\n    if (mod(n, i) == 0) then\n      sum = sum + i\n    end if\n  end do\n\n  if (sum == n) then\n    print*, n, 'is a perfect number.'\n  else\n    print*, n, 'is not a perfect number.'\n  end if\nend program perfect_number\n```"
  },
  {
    "task": "Implement a system that determines the winner in a rock-paper-scissors game.",
    "code": "```fortran\nprogram rock_paper_scissors\n    implicit none\n    character(len=10) :: player1, player2\n\n    print *, \"Enter choice for Player 1 (rock, paper, or scissors):\"\n    read *, player1\n    print *, \"Enter choice for Player 2 (rock, paper, or scissors):\"\n    read *, player2\n\n    if (player1 == player2) then\n        print *, \"It's a tie!\"\n    else if ((player1 == \"rock\" .and. player2 == \"scissors\") .or. &\n             (player1 == \"scissors\" .and. player2 == \"paper\") .or. &\n             (player1 == \"paper\" .and. player2 == \"rock\")) then\n        print *, \"Player 1 wins!\"\n    else\n        print *, \"Player 2 wins!\"\n    end if\nend program rock_paper_scissors\n```"
  },
  {
    "task": "Design a function that suggests a movie genre based on user mood.",
    "code": "```fortran\nprogram suggest_genre\n    implicit none\n    character(len=20) :: mood\n    print *, 'Enter your mood:'\n    read *, mood\n    print *, 'Suggested movie genre:', suggest_movie_genre(mood)\ncontains\n    function suggest_movie_genre(mood) result(genre)\n        character(len=20), intent(in) :: mood\n        character(len=20) :: genre\n\n        select case (trim(adjustl(mood)))\n        case ('happy')\n            genre = 'Comedy'\n        case ('sad')\n            genre = 'Drama'\n        case ('excited')\n            genre = 'Action'\n        case ('romantic')\n            genre = 'Romance'\n        case ('scared')\n            genre = 'Horror'\n        case default\n            genre = 'Documentary'\n        end select\n    end function suggest_movie_genre\nend program suggest_genre\n```"
  },
  {
    "task": "Write a program that checks if a file extension is valid for an image file.",
    "code": "```fortran\nprogram check_image_extension\n    implicit none\n    character(len=100) :: filename\n    character(len=4) :: extension\n\n    print *, 'Enter the filename with extension:'\n    read(*, '(A)') filename\n\n    extension = filename(len_trim(filename)-3:)\n\n    select case (extension)\n    case ('.jpg', '.png', '.bmp', '.gif', '.tif')\n        print *, 'The file extension is valid for an image file.'\n    case default\n        print *, 'The file extension is not valid for an image file.'\n    end select\nend program check_image_extension\n```"
  },
  {
    "task": "Create a routine that decides the appropriate currency symbol based on country.",
    "code": "```fortran\nprogram CurrencySymbol\n    implicit none\n    character(len=20) :: country\n    character(len=2) :: currency_symbol\n\n    print *, \"Enter the country:\"\n    read *, country\n\n    select case (trim(adjustl(country)))\n    case ('United States', 'USA')\n        currency_symbol = '$'\n    case ('United Kingdom', 'UK')\n        currency_symbol = '\u00a3'\n    case ('Japan')\n        currency_symbol = '\u00a5'\n    case ('Eurozone', 'Germany', 'France', 'Spain', 'Italy')\n        currency_symbol = '\u20ac'\n    case default\n        currency_symbol = '?'\n    end select\n\n    print *, \"The currency symbol for \", trim(adjustl(country)), \" is \", currency_symbol\n\nend program CurrencySymbol\n```"
  },
  {
    "task": "Develop a function that determines if a string is a valid palindrome ignoring spaces and punctuation.",
    "code": "```fortran\nmodule palindrome_module\ncontains\n    logical function is_valid_palindrome(s)\n        character(len=*), intent(in) :: s\n        integer :: i, j\n        character(len=len(s)) :: filtered\n        integer :: filtered_len\n\n        filtered = ''\n        filtered_len = 0\n\n        do i = 1, len(s)\n            if (iachar(s(i:i)) >= iachar('A') .and. iachar(s(i:i)) <= iachar('Z')) then\n                filtered_len = filtered_len + 1\n                filtered(filtered_len:filtered_len) = achar(iachar(s(i:i)) + iachar('a') - iachar('A'))\n            else if (iachar(s(i:i)) >= iachar('a') .and. iachar(s(i:i)) <= iachar('z')) then\n                filtered_len = filtered_len + 1\n                filtered(filtered_len:filtered_len) = s(i:i)\n            end if\n        end do\n\n        is_valid_palindrome = .true.\n        do i = 1, filtered_len / 2\n            if (filtered(i:i) /= filtered(filtered_len-i+1:filtered_len-i+1)) then\n                is_valid_palindrome = .false.\n                exit\n            end if\n        end do\n    end function is_valid_palindrome\nend module palindrome_module\n```"
  },
  {
    "task": "Implement a program that checks if a number is in the Fibonacci sequence.",
    "code": "```fortran\nprogram check_fibonacci\n  implicit none\n  integer :: num, a, b, temp\n\n  print *, 'Enter a number:'\n  read *, num\n\n  a = 0\n  b = 1\n  if (num == a .or. num == b) then\n    print *, 'The number is in the Fibonacci sequence.'\n  else\n    do\n      temp = a + b\n      a = b\n      b = temp\n\n      if (b == num) then\n        print *, 'The number is in the Fibonacci sequence.'\n        exit\n      else if (b > num) then\n        print *, 'The number is not in the Fibonacci sequence.'\n        exit\n      end if\n    end do\n  end if\nend program check_fibonacci\n```"
  },
  {
    "task": "Design a script to calculate the correct tip based on service quality rating.",
    "code": "```fortran\nprogram calculate_tip\n  implicit none\n  real :: bill_amount, tip\n  integer :: rating\n\n  print *, 'Enter the bill amount:'\n  read *, bill_amount\n  print *, 'Enter the service quality rating (1-5):'\n  read *, rating\n\n  select case (rating)\n  case (1)\n     tip = bill_amount * 0.05\n  case (2)\n     tip = bill_amount * 0.10\n  case (3)\n     tip = bill_amount * 0.15\n  case (4)\n     tip = bill_amount * 0.20\n  case (5)\n     tip = bill_amount * 0.25\n  case default\n     tip = 0.0\n     print *, 'Invalid rating. No tip calculated.'\n  end select\n\n  if (tip > 0.0) then\n     print *, 'The calculated tip is:', tip\n  end if\nend program calculate_tip\n```"
  },
  {
    "task": "Write a function that determines if a year is a century year.",
    "code": "```fortran\nprogram CenturyYearCheck\n  implicit none\n  integer :: year\n\n  print *, \"Enter a year:\"\n  read *, year\n\n  if (isCenturyYear(year)) then\n     print *, year, \"is a century year.\"\n  else\n     print *, year, \"is not a century year.\"\n  end if\n\ncontains\n\n  logical function isCenturyYear(year)\n    integer, intent(in) :: year\n\n    if (mod(year, 100) == 0) then\n      isCenturyYear = .true.\n    else\n      isCenturyYear = .false.\n    end if\n  end function isCenturyYear\n\nend program CenturyYearCheck\n```"
  },
  {
    "task": "Create a program that checks if a date falls on a weekend.",
    "code": "```fortran\nprogram check_weekend\n    implicit none\n    integer :: year, month, day\n    integer :: day_of_week\n\n    ! Input date\n    print *, \"Enter year, month, day:\"\n    read *, year, month, day\n\n    ! Calculate day of the week using Zeller's Congruence\n    if (month <= 2) then\n        month = month + 12\n        year = year - 1\n    end if\n\n    day_of_week = (day + 13*(month + 1)/5 + year + year/4 - year/100 + year/400) mod 7\n\n    if (day_of_week == 0 .or. day_of_week == 6) then\n        print *, \"The date falls on a weekend.\"\n    else\n        print *, \"The date does not fall on a weekend.\"\n    end if\nend program check_weekend\n```"
  },
  {
    "task": "Develop a routine that suggests a book based on genre preference.",
    "code": "```fortran\nprogram suggest_book\n    implicit none\n    character(len=20) :: genre\n    character(len=50) :: book\n\n    print *, 'Enter your preferred genre: '\n    read(*, '(A)') genre\n\n    select case (trim(adjustl(genre)))\n    case ('Science Fiction')\n        book = 'Dune by Frank Herbert'\n    case ('Fantasy')\n        book = 'The Hobbit by J.R.R. Tolkien'\n    case ('Mystery')\n        book = 'The Da Vinci Code by Dan Brown'\n    case ('Romance')\n        book = 'Pride and Prejudice by Jane Austen'\n    case ('Horror')\n        book = 'It by Stephen King'\n    case default\n        book = 'Unknown Genre'\n    end select\n\n    print *, 'Suggested Book: ', book\nend program suggest_book\n```"
  },
  {
    "task": "Implement a system that determines if a student passes or fails based on their grades.",
    "code": "```fortran\nprogram pass_or_fail\n    implicit none\n    real :: grade\n    character(len=10) :: result\n\n    print *, 'Enter the student''s grade:'\n    read *, grade\n\n    if (grade >= 50.0) then\n        result = 'Pass'\n    else\n        result = 'Fail'\n    end if\n\n    print *, 'The student''s result is:', result\nend program pass_or_fail\n```"
  },
  {
    "task": "Design a function to validate if a string is a valid URL.",
    "code": "```fortran\nmodule url_validation\n  implicit none\ncontains\n  logical function is_valid_url(url)\n    character(len=*), intent(in) :: url\n    integer :: i\n    logical :: has_protocol, has_dot\n\n    has_protocol = .false.\n    has_dot = .false.\n\n    if (len(url) < 7) then\n      is_valid_url = .false.\n      return\n    end if\n\n    if (url(1:7) == 'http://' .or. url(1:8) == 'https://') then\n      has_protocol = .true.\n    end if\n\n    do i = 1, len(url)\n      if (url(i:i) == '.') then\n        has_dot = .true.\n        exit\n      end if\n    end do\n\n    if (has_protocol .and. has_dot) then\n      is_valid_url = .true.\n    else\n      is_valid_url = .false.\n    end if\n\n  end function is_valid_url\nend module url_validation\n```"
  },
  {
    "task": "Write a program that checks if a point is inside a rectangle given its coordinates.",
    "code": "```fortran\nprogram check_point_in_rectangle\n    implicit none\n    real :: x, y\n    real :: x1, y1, x2, y2\n\n    ! Define the rectangle by two opposite corners (x1, y1) and (x2, y2)\n    x1 = 1.0\n    y1 = 1.0\n    x2 = 4.0\n    y2 = 3.0\n\n    ! Input the point coordinates\n    print *, 'Enter the x coordinate of the point:'\n    read *, x\n    print *, 'Enter the y coordinate of the point:'\n    read *, y\n\n    ! Check if the point is inside the rectangle\n    if (x >= min(x1, x2) .and. x <= max(x1, x2) .and. &\n        y >= min(y1, y2) .and. y <= max(y1, y2)) then\n        print *, 'The point is inside the rectangle.'\n    else\n        print *, 'The point is outside the rectangle.'\n    end if\nend program check_point_in_rectangle\n```"
  },
  {
    "task": "Create a script to determine if a word can be constructed from a given set of letters.",
    "code": "```fortran\nprogram can_construct_word\n  implicit none\n  character(len=100) :: word, letters\n  integer :: i, j\n  logical :: can_construct\n\n  ! Example inputs\n  word = \"hello\"\n  letters = \"ehlol\"\n\n  can_construct = .true.\n\n  do i = 1, len_trim(word)\n     if (index(letters, word(i:i)) == 0) then\n        can_construct = .false.\n        exit\n     else\n        j = index(letters, word(i:i))\n        letters(j:j) = ' '\n     end if\n  end do\n\n  if (can_construct) then\n     print *, \"The word can be constructed from the letters.\"\n  else\n     print *, \"The word cannot be constructed from the letters.\"\n  end if\n\nend program can_construct_word\n```"
  },
  {
    "task": "Develop a routine that calculates insurance premiums based on age and driving record.",
    "code": "```fortran\nprogram InsurancePremium\n    implicit none\n    integer :: age\n    character(len=1) :: drivingRecord\n    real :: premium\n\n    write(*,*) 'Enter age:'\n    read(*,*) age\n    write(*,*) 'Enter driving record (G for good, P for poor):'\n    read(*,*) drivingRecord\n\n    if (age < 25) then\n        if (drivingRecord == 'G') then\n            premium = 200.0\n        else if (drivingRecord == 'P') then\n            premium = 300.0\n        else\n            premium = 0.0\n        end if\n    else\n        if (drivingRecord == 'G') then\n            premium = 100.0\n        else if (drivingRecord == 'P') then\n            premium = 200.0\n        else\n            premium = 0.0\n        end if\n    end if\n\n    if (premium > 0) then\n        write(*,*) 'The insurance premium is: ', premium\n    else\n        write(*,*) 'Invalid input for driving record.'\n    end if\nend program InsurancePremium\n```"
  },
  {
    "task": "Implement a program that checks for palindrome sentences.",
    "code": "```fortran\nprogram PalindromeCheck\n    implicit none\n    character(len=100) :: sentence\n    logical :: is_palindrome\n    integer :: i, len_sentence\n\n    print *, 'Enter a sentence:'\n    read(*,'(A)') sentence\n\n    sentence = adjustl(sentence)\n    len_sentence = len_trim(sentence)\n    \n    is_palindrome = .true.\n    \n    do i = 1, len_sentence / 2\n        if (sentence(i:i) /= sentence(len_sentence-i+1:len_sentence-i+1)) then\n            is_palindrome = .false.\n            exit\n        end if\n    end do\n\n    if (is_palindrome) then\n        print *, 'The sentence is a palindrome.'\n    else\n        print *, 'The sentence is not a palindrome.'\n    end if\nend program PalindromeCheck\n```"
  },
  {
    "task": "Design a function to evaluate if a string contains balanced parentheses.",
    "code": "```fortran\nmodule balance_checker\ncontains\n    logical function is_balanced(input_string)\n        implicit none\n        character(len=*), intent(in) :: input_string\n        integer :: open_parens, i\n\n        open_parens = 0\n        do i = 1, len(input_string)\n            select case (input_string(i:i))\n            case ('(')\n                open_parens = open_parens + 1\n            case (')')\n                open_parens = open_parens - 1\n            end select\n            if (open_parens < 0) then\n                is_balanced = .false.\n                return\n            end if\n        end do\n        is_balanced = (open_parens == 0)\n    end function is_balanced\nend module balance_checker\n```"
  },
  {
    "task": "Write a program that suggests a pet based on living conditions and preferences.",
    "code": "```fortran\nprogram pet_suggestion\n    implicit none\n    character(len=20) :: living_condition, preference, pet\n\n    print *, \"Enter your living condition (apartment/house):\"\n    read *, living_condition\n    print *, \"Enter your preference (quiet/active):\"\n    read *, preference\n\n    if (living_condition == \"apartment\") then\n        if (preference == \"quiet\") then\n            pet = \"cat\"\n        else if (preference == \"active\") then\n            pet = \"small dog\"\n        else\n            pet = \"unknown\"\n        end if\n    else if (living_condition == \"house\") then\n        if (preference == \"quiet\") then\n            pet = \"fish\"\n        else if (preference == \"active\") then\n            pet = \"large dog\"\n        else\n            pet = \"unknown\"\n        end if\n    else\n        pet = \"unknown\"\n    end if\n\n    print *, \"Suggested pet:\", pet\n\nend program pet_suggestion\n```"
  },
  {
    "task": "Create a routine that determines if a phone number is valid based on format.",
    "code": "```fortran\nprogram PhoneNumberValidation\n    implicit none\n    character(len=20) :: phoneNumber\n    logical :: isValid\n\n    ! Example phone number input\n    phoneNumber = \"(123) 456-7890\"\n    isValid = isValidPhoneNumber(phoneNumber)\n    print *, \"Phone number valid:\", isValid\n\ncontains\n\n    logical function isValidPhoneNumber(phone) result(isValid)\n        character(len=*), intent(in) :: phone\n        integer :: i, n\n\n        n = len_trim(phone)\n        isValid = .false.\n\n        ! Check if phone number has the expected length\n        if (n /= 14) return\n\n        ! Check format (XXX) XXX-XXXX\n        if (phone(1:1) /= '(') return\n        if (phone(5:5) /= ')') return\n        if (phone(6:6) /= ' ') return\n        if (phone(10:10) /= '-') return\n\n        ! Check if the rest are digits\n        do i = 2, 4\n            if (.not.isDigit(phone(i:i))) return\n        end do\n        do i = 7, 9\n            if (.not.isDigit(phone(i:i))) return\n        end do\n        do i = 11, 14\n            if (.not.isDigit(phone(i:i))) return\n        end do\n\n        ! Passed all checks\n        isValid = .true.\n    end function isValidPhoneNumber\n\n    logical function isDigit(char) result(isDigit)\n        character(len=1), intent(in) :: char\n        isDigit = char >= '0' .and. char <= '9'\n    end function isDigit\n\nend program PhoneNumberValidation\n```"
  },
  {
    "task": "Develop a function that checks if two rectangles overlap.",
    "code": "```fortran\nmodule rectangle_overlap\n  implicit none\ncontains\n\n  logical function check_overlap(x1, y1, w1, h1, x2, y2, w2, h2)\n    real, intent(in) :: x1, y1, w1, h1\n    real, intent(in) :: x2, y2, w2, h2\n\n    ! Calculate the boundaries of the rectangles\n    real :: left1, right1, top1, bottom1\n    real :: left2, right2, top2, bottom2\n\n    left1 = x1\n    right1 = x1 + w1\n    top1 = y1\n    bottom1 = y1 + h1\n\n    left2 = x2\n    right2 = x2 + w2\n    top2 = y2\n    bottom2 = y2 + h2\n\n    ! Check for no overlap condition\n    if (right1 <= left2 .or. right2 <= left1 .or. &\n        bottom1 <= top2 .or. bottom2 <= top1) then\n      check_overlap = .false.\n    else\n      check_overlap = .true.\n    end if\n  end function check_overlap\n\nend module rectangle_overlap\n```"
  },
  {
    "task": "Implement a program that chooses a beverage based on user input time.",
    "code": "```fortran\nprogram beverage_selector\n    implicit none\n    integer :: time\n    character(len=20) :: beverage\n\n    write(*,*) 'Enter the time in 24-hour format (0-23):'\n    read(*,*) time\n\n    select case (time)\n    case (0:11)\n        beverage = 'Coffee'\n    case (12:16)\n        beverage = 'Tea'\n    case (17:23)\n        beverage = 'Juice'\n    case default\n        beverage = 'Invalid time'\n    end select\n\n    write(*,*) 'Suggested beverage:', beverage\nend program beverage_selector\n```"
  },
  {
    "task": "Design a script to determine if a URL is secure (HTTPS).",
    "code": "```fortran\nprogram check_https\n    implicit none\n    character(len=256) :: url\n    logical :: is_secure\n\n    print *, \"Enter a URL:\"\n    read *, url\n\n    is_secure = .false.\n\n    if (len_trim(url) >= 5) then\n        if (url(1:5) == \"https\") then\n            is_secure = .true.\n        end if\n    end if\n\n    if (is_secure) then\n        print *, \"The URL is secure.\"\n    else\n        print *, \"The URL is not secure.\"\n    end if\nend program check_https\n```"
  },
  {
    "task": "Write a function that outputs different messages based on the input number's divisibility.",
    "code": "```fortran\nprogram conditional_branching\n    implicit none\n\n    integer :: num\n\n    print *, \"Enter a number:\"\n    read *, num\n\n    call check_divisibility(num)\n\ncontains\n\n    subroutine check_divisibility(n)\n        integer, intent(in) :: n\n\n        if (mod(n, 2) == 0 .and. mod(n, 3) == 0) then\n            print *, \"The number is divisible by both 2 and 3.\"\n        else if (mod(n, 2) == 0) then\n            print *, \"The number is divisible by 2.\"\n        else if (mod(n, 3) == 0) then\n            print *, \"The number is divisible by 3.\"\n        else\n            print *, \"The number is not divisible by 2 or 3.\"\n        end if\n\n    end subroutine check_divisibility\n\nend program conditional_branching\n```"
  },
  {
    "task": "Create a program to decide if a person should bring an umbrella based on the weather forecast.",
    "code": "```fortran\nprogram UmbrellaDecision\n    implicit none\n    character(len=20) :: weather\n    logical :: bringUmbrella\n\n    print *, \"Enter the weather forecast (e.g., 'sunny', 'rainy', 'cloudy'):\"\n    read(*, '(A)') weather\n\n    select case (trim(adjustl(weather)))\n    case ('rainy', 'Rainy', 'RAINY')\n        bringUmbrella = .true.\n    case default\n        bringUmbrella = .false.\n    end select\n\n    if (bringUmbrella) then\n        print *, \"You should bring an umbrella.\"\n    else\n        print *, \"No need to bring an umbrella.\"\n    end if\nend program UmbrellaDecision\n```"
  },
  {
    "task": "Develop a routine that checks if a chess move is valid.",
    "code": "```fortran\nprogram check_chess_move\n    implicit none\n    character(len=2) :: start_pos, end_pos\n    logical :: is_valid\n\n    ! Example input: start_pos='e2', end_pos='e4'\n    print *, 'Enter start position (e.g., e2):'\n    read *, start_pos\n    print *, 'Enter end position (e.g., e4):'\n    read *, end_pos\n\n    is_valid = check_move_validity(start_pos, end_pos)\n    if (is_valid) then\n        print *, 'The move is valid.'\n    else\n        print *, 'The move is invalid.'\n    end if\nend program check_chess_move\n\nlogical function check_move_validity(start_pos, end_pos)\n    implicit none\n    character(len=2), intent(in) :: start_pos, end_pos\n    integer :: start_file, start_rank, end_file, end_rank\n\n    start_file = iachar(start_pos(1:1)) - iachar('a') + 1\n    start_rank = iachar(start_pos(2:2)) - iachar('1') + 1\n    end_file = iachar(end_pos(1:1)) - iachar('a') + 1\n    end_rank = iachar(end_pos(2:2)) - iachar('1') + 1\n\n    if (start_file < 1 .or. start_file > 8 .or. &\n        start_rank < 1 .or. start_rank > 8 .or. &\n        end_file < 1 .or. end_file > 8 .or. &\n        end_rank < 1 .or. end_rank > 8) then\n        check_move_validity = .false.\n        return\n    end if\n\n    if (abs(end_file - start_file) <= 1 .and. &\n        abs(end_rank - start_rank) <= 1) then\n        check_move_validity = .true.\n    else\n        check_move_validity = .false.\n    end if\nend function check_move_validity\n```"
  },
  {
    "task": "Implement a program that outputs the number of days in a given month.",
    "code": "```fortran\nprogram days_in_month\n    implicit none\n    integer :: month, days\n\n    print *, \"Enter month number (1-12):\"\n    read *, month\n\n    select case (month)\n    case (1, 3, 5, 7, 8, 10, 12)\n        days = 31\n    case (4, 6, 9, 11)\n        days = 30\n    case (2)\n        days = 28\n    case default\n        print *, \"Invalid month\"\n        stop\n    end select\n\n    print *, \"Number of days:\", days\n\nend program days_in_month\n```"
  },
  {
    "task": "Design a function that validates if a string is a valid hexadecimal number.",
    "code": "```fortran\nprogram validate_hex\n  implicit none\n  character(len=100) :: input_string\n  logical :: is_hex\n\n  print *, 'Enter a string to check if it is a valid hexadecimal number:'\n  read(*, '(A)') input_string\n\n  is_hex = validate_hexadecimal(input_string)\n\n  if (is_hex) then\n     print *, 'The string is a valid hexadecimal number.'\n  else\n     print *, 'The string is not a valid hexadecimal number.'\n  end if\n\ncontains\n\n  logical function validate_hexadecimal(str)\n    character(len=*), intent(in) :: str\n    integer :: i\n    character(len=1) :: c\n\n    validate_hexadecimal = .true.\n    do i = 1, len_trim(str)\n      c = str(i:i)\n      if (.not.((c >= '0' .and. c <= '9') .or. &\n                (c >= 'A' .and. c <= 'F') .or. &\n                (c >= 'a' .and. c <= 'f'))) then\n        validate_hexadecimal = .false.\n        return\n      end if\n    end do\n  end function validate_hexadecimal\n\nend program validate_hex\n```"
  },
  {
    "task": "Write a script that checks if a word is present in a list of predefined words.",
    "code": "```fortran\nprogram check_word\n    implicit none\n    character(len=20) :: word\n    logical :: found\n    integer :: i\n    character(len=20), dimension(5) :: word_list = (/ \"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\" /)\n\n    print *, \"Enter a word to check:\"\n    read *, word\n\n    found = .false.\n    do i = 1, size(word_list)\n        if (trim(word_list(i)) == trim(word)) then\n            found = .true.\n            exit\n        end if\n    end do\n\n    if (found) then\n        print *, \"The word is in the list.\"\n    else\n        print *, \"The word is not in the list.\"\n    end if\nend program check_word\n```"
  },
  {
    "task": "Create a routine to decide the correct tax bracket for a given income.",
    "code": "```fortran\nprogram tax_bracket\n  implicit none\n  real :: income\n  character(len=20) :: bracket\n\n  print *, \"Enter the income:\"\n  read *, income\n\n  call determine_bracket(income, bracket)\n  print *, \"The tax bracket is:\", bracket\n\ncontains\n\n  subroutine determine_bracket(income, bracket)\n    real, intent(in) :: income\n    character(len=20), intent(out) :: bracket\n\n    if (income < 9875.0) then\n      bracket = '10% Bracket'\n    else if (income < 40125.0) then\n      bracket = '12% Bracket'\n    else if (income < 85525.0) then\n      bracket = '22% Bracket'\n    else if (income < 163300.0) then\n      bracket = '24% Bracket'\n    else if (income < 207350.0) then\n      bracket = '32% Bracket'\n    else if (income < 518400.0) then\n      bracket = '35% Bracket'\n    else\n      bracket = '37% Bracket'\n    end if\n\n  end subroutine determine_bracket\n\nend program tax_bracket\n```"
  },
  {
    "task": "Develop a function that determines if a point is within a triangle.",
    "code": "```fortran\nmodule geometry\n  implicit none\ncontains\n  logical function is_point_in_triangle(px, py, x1, y1, x2, y2, x3, y3)\n    real, intent(in) :: px, py\n    real, intent(in) :: x1, y1, x2, y2, x3, y3\n    real :: area, area1, area2, area3\n\n    area = triangle_area(x1, y1, x2, y2, x3, y3)\n    area1 = triangle_area(px, py, x2, y2, x3, y3)\n    area2 = triangle_area(x1, y1, px, py, x3, y3)\n    area3 = triangle_area(x1, y1, x2, y2, px, py)\n\n    if (abs(area - (area1 + area2 + area3)) < 1.0e-6) then\n      is_point_in_triangle = .true.\n    else\n      is_point_in_triangle = .false.\n    end if\n  end function is_point_in_triangle\n\n  real function triangle_area(x1, y1, x2, y2, x3, y3)\n    real, intent(in) :: x1, y1, x2, y2, x3, y3\n    triangle_area = 0.5 * abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))\n  end function triangle_area\nend module geometry\n```"
  },
  {
    "task": "Implement a program that checks if a given string is a valid binary number.",
    "code": "```fortran\nprogram check_binary\n    implicit none\n    character(len=100) :: input_string\n    integer :: i, len\n    logical :: is_binary\n\n    print *, \"Enter a string:\"\n    read(*, '(A)') input_string\n\n    len = len_trim(input_string)\n    is_binary = .true.\n\n    do i = 1, len\n        if (input_string(i:i) /= '0' .and. input_string(i:i) /= '1') then\n            is_binary = .false.\n            exit\n        end if\n    end do\n\n    if (is_binary) then\n        print *, \"The string is a valid binary number.\"\n    else\n        print *, \"The string is not a valid binary number.\"\n    end if\n\nend program check_binary\n```"
  },
  {
    "task": "Design a system to evaluate the risk level of an investment based on criteria.",
    "code": "```fortran\nprogram InvestmentRiskEvaluator\n  implicit none\n  real :: investmentAmount\n  character(len=20) :: riskLevel\n\n  ! Read investment amount\n  print *, 'Enter the investment amount:'\n  read *, investmentAmount\n\n  ! Determine risk level based on amount\n  if (investmentAmount < 1000.0) then\n    riskLevel = 'Low Risk'\n  else if (investmentAmount >= 1000.0 .and. investmentAmount < 10000.0) then\n    riskLevel = 'Medium Risk'\n  else \n    riskLevel = 'High Risk'\n  end if\n\n  ! Output the risk level\n  print *, 'The investment risk level is:', riskLevel\nend program InvestmentRiskEvaluator\n```"
  },
  {
    "task": "Write a program that suggests a vacation destination based on budget and preferences.",
    "code": "```fortran\nprogram vacation_suggestion\n    implicit none\n    real :: budget\n    character(len=20) :: preference\n    character(len=50) :: destination\n\n    print *, \"Enter your budget (in USD):\"\n    read *, budget\n    print *, \"Enter your preference (beach, mountains, city):\"\n    read *, preference\n\n    select case (trim(adjustl(preference)))\n    case ('beach')\n        if (budget < 1000.0) then\n            destination = \"Camping at a local beach\"\n        else if (budget < 3000.0) then\n            destination = \"Miami Beach, Florida\"\n        else\n            destination = \"Maldives\"\n        end if\n    case ('mountains')\n        if (budget < 1000.0) then\n            destination = \"Local hiking trip\"\n        else if (budget < 3000.0) then\n            destination = \"Rocky Mountains, Colorado\"\n        else\n            destination = \"Swiss Alps\"\n        end if\n    case ('city')\n        if (budget < 1000.0) then\n            destination = \"Weekend in a nearby city\"\n        else if (budget < 3000.0) then\n            destination = \"New York City\"\n        else\n            destination = \"Tokyo, Japan\"\n        end if\n    case default\n        destination = \"Please enter a valid preference.\"\n    end select\n\n    print *, \"Suggested destination:\", trim(destination)\nend program vacation_suggestion\n```"
  },
  {
    "task": "Create a routine that checks if a username is already taken in a database.",
    "code": "```fortran\nprogram check_username\n  implicit none\n  character(len=50) :: username\n  logical :: is_taken\n\n  print *, \"Enter username to check:\"\n  read *, username\n\n  is_taken = check_if_taken(username)\n\n  if (is_taken) then\n     print *, \"Username is already taken.\"\n  else\n     print *, \"Username is available.\"\n  end if\ncontains\n  logical function check_if_taken(name)\n    character(len=50), intent(in) :: name\n    character(len=50), dimension(5) :: database\n    integer :: i\n\n    database = (/ 'user1', 'user2', 'user3', 'user4', 'user5' /)\n    check_if_taken = .false.\n\n    do i = 1, size(database)\n       if (trim(adjustl(name)) == trim(adjustl(database(i)))) then\n          check_if_taken = .true.\n          exit\n       end if\n    end do\n  end function check_if_taken\nend program check_username\n```"
  },
  {
    "task": "Develop a function that determines if a string is a valid IPv4 address.",
    "code": "```fortran\nmodule ipv4_validation\ncontains\n    logical function isValidIPv4Address(ip)\n        character(len=*), intent(in) :: ip\n        integer :: i, num, segments\n        character(len=15) :: segment\n        logical :: isNumber\n        \n        segments = 0\n        segment = ''\n        \n        do i = 1, len(ip)\n            select case (ip(i:i))\n            case ('0':'9')\n                segment = trim(adjustl(segment)) // ip(i:i)\n            case ('.')\n                if (len_trim(segment) == 0) exit\n                read(segment, '(I)', IOSTAT=isNumber) num\n                if (.not. isNumber .or. num < 0 .or. num > 255) exit\n                segments = segments + 1\n                segment = ''\n            case default\n                exit\n            end select\n        end do\n        \n        if (len_trim(segment) /= 0) then\n            read(segment, '(I)', IOSTAT=isNumber) num\n            if (isNumber .and. num >= 0 .and. num <= 255) then\n                segments = segments + 1\n            end if\n        end if\n        \n        isValidIPv4Address = (segments == 4)\n    end function isValidIPv4Address\nend module ipv4_validation\n```"
  },
  {
    "task": "Implement a program to decide which transportation method is quickest based on distance.",
    "code": "```fortran\nprogram quickest_transport\n    implicit none\n    real :: distance\n    character(len=20) :: transport_method\n\n    print *, 'Enter the distance in kilometers:'\n    read *, distance\n\n    if (distance < 1.0) then\n        transport_method = 'Walking'\n    else if (distance >= 1.0 .and. distance < 5.0) then\n        transport_method = 'Bicycle'\n    else if (distance >= 5.0 .and. distance < 20.0) then\n        transport_method = 'Car'\n    else\n        transport_method = 'Train'\n    end if\n\n    print *, 'The quickest transportation method is:', transport_method\nend program quickest_transport\n```"
  },
  {
    "task": "Design a script to validate if a number is a prime number.",
    "code": "```fortran\nprogram check_prime\n    implicit none\n    integer :: number, i\n    logical :: is_prime\n\n    print *, \"Enter a number:\"\n    read *, number\n\n    if (number <= 1) then\n        print *, \"The number is not prime.\"\n    else\n        is_prime = .true.\n        do i = 2, int(sqrt(real(number)))\n            if (mod(number, i) == 0) then\n                is_prime = .false.\n                exit\n            end if\n        end do\n\n        if (is_prime) then\n            print *, \"The number is prime.\"\n        else\n            print *, \"The number is not prime.\"\n        end if\n    end if\nend program check_prime\n```"
  },
  {
    "task": "Write a function that checks if a number is divisible by another number without remainder.",
    "code": "```fortran\nprogram divisibility_check\n  implicit none\n\n  print *, is_divisible(10, 2)\n  print *, is_divisible(10, 3)\n\ncontains\n\n  logical function is_divisible(a, b)\n    integer, intent(in) :: a, b\n\n    if (b == 0) then\n      is_divisible = .false.\n    else\n      is_divisible = mod(a, b) == 0\n    end if\n  end function is_divisible\n\nend program divisibility_check\n```"
  },
  {
    "task": "Create a program that determines the type of a quadrilateral based on side lengths.",
    "code": "```fortran\nprogram QuadrilateralType\n    implicit none\n    real :: a, b, c, d\n    print *, \"Enter the lengths of the four sides:\"\n    read *, a, b, c, d\n\n    if (a <= 0.0 .or. b <= 0.0 .or. c <= 0.0 .or. d <= 0.0) then\n        print *, \"Invalid side lengths\"\n    else if (a == b .and. b == c .and. c == d) then\n        print *, \"Square\"\n    else if ((a == c .and. b == d) .or. (a == b .and. c == d) .or. (a == d .and. b == c)) then\n        print *, \"Rectangle\"\n    else if (a == c .and. b == d) then\n        print *, \"Rhombus\"\n    else\n        print *, \"Quadrilateral\"\n    end if\nend program QuadrilateralType\n```"
  },
  {
    "task": "Develop a routine to check if a sentence contains all letters of the alphabet.",
    "code": "```fortran\nprogram pangram_check\n    implicit none\n    character(len=*), parameter :: alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    character(len=1000) :: sentence\n    logical :: is_pangram\n    integer :: i\n\n    print *, 'Enter a sentence:'\n    read(*,'(A)') sentence\n\n    is_pangram = .true.\n\n    do i = 1, len(alphabet)\n        if (index(adjustl(to_lower(sentence)), alphabet(i:i)) == 0) then\n            is_pangram = .false.\n            exit\n        end if\n    end do\n\n    if (is_pangram) then\n        print *, 'The sentence is a pangram.'\n    else\n        print *, 'The sentence is not a pangram.'\n    end if\ncontains\n    function to_lower(str)\n        implicit none\n        character(len=*), intent(in) :: str\n        character(len=len(str)) :: to_lower\n        integer :: j\n\n        to_lower = str\n        do j = 1, len(str)\n            if (iachar(to_lower(j:j)) >= iachar('A') .and. iachar(to_lower(j:j)) <= iachar('Z')) then\n                to_lower(j:j) = achar(iachar(to_lower(j:j)) + 32)\n            end if\n        end do\n    end function to_lower\nend program pangram_check\n```"
  },
  {
    "task": "Implement a program that outputs the appropriate error message based on an error code.",
    "code": "```fortran\nprogram error_message\n  integer :: error_code\n\n  print *, \"Enter error code:\"\n  read *, error_code\n\n  select case (error_code)\n  case (1)\n     print *, \"Error 1: File not found.\"\n  case (2)\n     print *, \"Error 2: Access denied.\"\n  case (3)\n     print *, \"Error 3: Disk full.\"\n  case (4)\n     print *, \"Error 4: Illegal operation.\"\n  case default\n     print *, \"Unknown error code.\"\n  end select\n\nend program error_message\n```"
  },
  {
    "task": "Design a function that categorizes a movie rating as G, PG, PG-13, or R.",
    "code": "```fortran\nprogram MovieRating\n  implicit none\n  integer :: rating\n  character(len=5) :: category\n  \n  print *, 'Enter movie rating:'\n  read *, rating\n  \n  category = categorizeRating(rating)\n  \n  print *, 'The movie category is: ', category\n\ncontains\n\n  function categorizeRating(rating) result(category)\n    integer, intent(in) :: rating\n    character(len=5) :: category\n\n    select case (rating)\n    case (0:6)\n      category = 'G'\n    case (7:12)\n      category = 'PG'\n    case (13:16)\n      category = 'PG-13'\n    case (17:18)\n      category = 'R'\n    case default\n      category = 'NA'\n    end select\n\n  end function categorizeRating\n\nend program MovieRating\n```"
  },
  {
    "task": "Write a script to check if a string is a valid Roman numeral.",
    "code": "```fortran\nprogram check_roman_numeral\n    implicit none\n    character(len=100) :: input_str\n    logical :: is_valid\n\n    print *, 'Enter a string:'\n    read(*, '(A)') input_str\n\n    is_valid = is_roman_numeral(input_str)\n\n    if (is_valid) then\n        print *, 'The string is a valid Roman numeral.'\n    else\n        print *, 'The string is not a valid Roman numeral.'\n    end if\n\ncontains\n\n    function is_roman_numeral(s) result(valid)\n        character(len=*), intent(in) :: s\n        logical :: valid\n        integer :: i, len_s\n        character(len=1) :: current_char, next_char\n        logical :: valid_char\n\n        len_s = len_trim(s)\n        valid = .true.\n\n        do i = 1, len_s\n            current_char = s(i:i)\n            valid_char = current_char == 'I' .or. current_char == 'V' .or. &\n                         current_char == 'X' .or. current_char == 'L' .or. &\n                         current_char == 'C' .or. current_char == 'D' .or. &\n                         current_char == 'M'\n\n            if (.not. valid_char) then\n                valid = .false.\n                return\n            end if\n\n            if (i < len_s) then\n                next_char = s(i+1:i+1)\n                if (current_char == 'I' .and. (next_char == 'L' .or. next_char == 'C' .or. next_char == 'D' .or. next_char == 'M')) then\n                    valid = .false.\n                    return\n                end if\n                if (current_char == 'V' .and. (next_char == 'X' .or. next_char == 'L' .or. next_char == 'C' .or. next_char == 'D' .or. next_char == 'M')) then\n                    valid = .false.\n                    return\n                end if\n                if (current_char == 'X' .and. (next_char == 'D' .or. next_char == 'M')) then\n                    valid = .false.\n                    return\n                end if\n                if (current_char == 'L' .and. (next_char == 'C' .or. next_char == 'D' .or. next_char == 'M')) then\n                    valid = .false.\n                    return\n                end if\n                if (current_char == 'C' .and. next_char == 'M') then\n                    valid = .false.\n                    return\n                end if\n            end if\n        end do\n\n    end function is_roman_numeral\n\nend program check_roman_numeral\n```"
  },
  {
    "task": "Create a routine that decides if a person can retire based on age and years worked.",
    "code": "```fortran\nprogram retirement_check\n  implicit none\n  integer :: age, years_worked\n  logical :: can_retire\n\n  ! Example input values\n  age = 65\n  years_worked = 30\n\n  call check_retirement(age, years_worked, can_retire)\n\n  if (can_retire) then\n     print *, \"The person can retire.\"\n  else\n     print *, \"The person cannot retire.\"\n  end if\n\ncontains\n\n  subroutine check_retirement(age, years_worked, can_retire)\n    integer, intent(in) :: age, years_worked\n    logical, intent(out) :: can_retire\n\n    if (age >= 65 .or. years_worked >= 30) then\n       can_retire = .true.\n    else\n       can_retire = .false.\n    end if\n  end subroutine check_retirement\n\nend program retirement_check\n```"
  },
  {
    "task": "Develop a function that outputs a different emoji based on user mood input.",
    "code": "```fortran\nprogram mood_emoji\n    implicit none\n    character(len=100) :: mood\n    character(len=1) :: emoji\n\n    print *, \"Enter your mood (happy, sad, angry, surprised):\"\n    read(*, '(A)') mood\n\n    emoji = mood_to_emoji(trim(adjustl(mood)))\n    print *, \"Emoji:\", emoji\n\ncontains\n\n    function mood_to_emoji(mood) result(emoji)\n        character(len=100), intent(in) :: mood\n        character(len=1) :: emoji\n\n        select case (mood)\n        case ('happy')\n            emoji = '\ud83d\ude0a'\n        case ('sad')\n            emoji = '\ud83d\ude22'\n        case ('angry')\n            emoji = '\ud83d\ude20'\n        case ('surprised')\n            emoji = '\ud83d\ude32'\n        case default\n            emoji = '\u2753'\n        end select\n    end function mood_to_emoji\n\nend program mood_emoji\n```"
  },
  {
    "task": "Implement a program that checks if a password meets security requirements.",
    "code": "```fortran\nprogram PasswordCheck\n  implicit none\n  character(len=20) :: password\n  logical :: hasUpper, hasLower, hasDigit, isValid\n  integer :: i\n\n  print *, 'Enter password:'\n  read *, password\n\n  hasUpper = .false.\n  hasLower = .false.\n  hasDigit = .false.\n\n  do i = 1, len_trim(password)\n    if (iachar(password(i:i)) >= iachar('A') .and. iachar(password(i:i)) <= iachar('Z')) then\n      hasUpper = .true.\n    end if\n    if (iachar(password(i:i)) >= iachar('a') .and. iachar(password(i:i)) <= iachar('z')) then\n      hasLower = .true.\n    end if\n    if (iachar(password(i:i)) >= iachar('0') .and. iachar(password(i:i)) <= iachar('9')) then\n      hasDigit = .true.\n    end if\n  end do\n\n  isValid = (hasUpper .and. hasLower .and. hasDigit .and. len_trim(password) >= 8)\n\n  if (isValid) then\n    print *, 'Password is valid.'\n  else\n    print *, 'Password is invalid.'\n  end if\nend program PasswordCheck\n```"
  },
  {
    "task": "Design a script to determine if a number is a palindrome when reversed.",
    "code": "```fortran\nprogram palindrome_check\n    implicit none\n    integer :: num, reversed, original, remainder\n\n    print *, 'Enter a number:'\n    read *, num\n    original = num\n    reversed = 0\n\n    do while (num /= 0)\n        remainder = mod(num, 10)\n        reversed = reversed * 10 + remainder\n        num = num / 10\n    end do\n\n    if (original == reversed) then\n        print *, 'The number is a palindrome.'\n    else\n        print *, 'The number is not a palindrome.'\n    end if\nend program palindrome_check\n```"
  },
  {
    "task": "Write a function that evaluates if a given day is a holiday.",
    "code": "```fortran\nprogram check_holiday\n    implicit none\n    character(len=10) :: day\n    logical :: is_holiday\n\n    print *, \"Enter the day:\"\n    read(*, '(A)') day\n\n    is_holiday = isHoliday(day)\n\n    if (is_holiday) then\n        print *, day, \"is a holiday.\"\n    else\n        print *, day, \"is not a holiday.\"\n    end if\nend program check_holiday\n\nlogical function isHoliday(day)\n    implicit none\n    character(len=*), intent(in) :: day\n\n    select case (trim(adjustl(day)))\n    case ('NewYear', 'Christmas', 'IndependenceDay')\n        isHoliday = .true.\n    case default\n        isHoliday = .false.\n    end select\nend function isHoliday\n```"
  },
  {
    "task": "Create a program to decide if a library book is overdue based on the due date.",
    "code": "```fortran\nprogram check_overdue\n  implicit none\n  integer :: due_day, due_month, due_year\n  integer :: return_day, return_month, return_year\n  logical :: is_overdue\n\n  ! Example values for demonstration\n  due_day = 15\n  due_month = 10\n  due_year = 2023\n  \n  return_day = 20\n  return_month = 10\n  return_year = 2023\n\n  if (return_year > due_year) then\n    is_overdue = .true.\n  else if (return_year == due_year) then\n    if (return_month > due_month) then\n      is_overdue = .true.\n    else if (return_month == due_month) then\n      if (return_day > due_day) then\n        is_overdue = .true.\n      else\n        is_overdue = .false.\n      endif\n    else\n      is_overdue = .false.\n    endif\n  else\n    is_overdue = .false.\n  endif\n\n  if (is_overdue) then\n    print *, 'The book is overdue.'\n  else\n    print *, 'The book is not overdue.'\n  endif\nend program check_overdue\n```"
  },
  {
    "task": "Develop a routine that checks if a given year is part of a leap century.",
    "code": "```fortran\nprogram LeapCentury\n    implicit none\n    integer :: year\n    logical :: isLeapCentury\n\n    print *, \"Enter a year:\"\n    read *, year\n\n    isLeapCentury = is_leap_century(year)\n    if (isLeapCentury) then\n        print *, \"The year\", year, \"is part of a leap century.\"\n    else\n        print *, \"The year\", year, \"is not part of a leap century.\"\n    end if\n\ncontains\n\n    logical function is_leap_century(year)\n        integer, intent(in) :: year\n        if (mod(year, 100) == 0 .and. mod(year, 400) == 0) then\n            is_leap_century = .true.\n        else\n            is_leap_century = .false.\n        end if\n    end function is_leap_century\n\nend program LeapCentury\n```"
  },
  {
    "task": "Implement a system to determine the correct category for a product based on user input.",
    "code": "```fortran\nprogram ProductCategory\n    implicit none\n    character(len=100) :: productType\n    character(len=100) :: category\n\n    print *, 'Enter the product type:'\n    read *, productType\n\n    select case (trim(adjustl(productType)))\n    case ('Electronics')\n        category = 'Technology'\n    case ('Books')\n        category = 'Literature'\n    case ('Clothing')\n        category = 'Apparel'\n    case ('Food')\n        category = 'Groceries'\n    case default\n        category = 'Miscellaneous'\n    end select\n\n    print *, 'The category for the product is:', category\n\nend program ProductCategory\n```"
  }
]