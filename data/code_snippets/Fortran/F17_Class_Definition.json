[
  {
    "task": "Define a class representing a book with attributes for title, author, and number of pages, and a method to display the book's information.",
    "code": "```fortran\nmodule BookModule\n    implicit none\n    type :: Book\n        character(len=100) :: title\n        character(len=100) :: author\n        integer :: numPages\n    contains\n        procedure :: display => displayBook\n    end type Book\n\ncontains\n\n    subroutine displayBook(this)\n        class(Book), intent(in) :: this\n        print *, 'Title: ', trim(this%title)\n        print *, 'Author: ', trim(this%author)\n        print *, 'Number of Pages: ', this%numPages\n    end subroutine displayBook\n\nend module BookModule\n```"
  },
  {
    "task": "Create a class for a bank account that includes attributes for account number, balance, and a method to deposit funds.",
    "code": "```fortran\nmodule BankModule\n  implicit none\n  type :: BankAccount\n    integer :: accountNumber\n    real :: balance\n  contains\n    procedure :: deposit\n  end type BankAccount\n\ncontains\n\n  subroutine deposit(this, amount)\n    class(BankAccount), intent(inout) :: this\n    real, intent(in) :: amount\n    this%balance = this%balance + amount\n  end subroutine deposit\n\nend module BankModule\n```"
  },
  {
    "task": "Design a class for a vehicle with properties for make, model, and year, and a method to start the engine.",
    "code": "```fortran\nmodule VehicleModule\n    implicit none\n    private\n    type, public :: Vehicle\n        character(len=100) :: make\n        character(len=100) :: model\n        integer :: year\n    contains\n        procedure :: start_engine\n    end type Vehicle\ncontains\n    subroutine start_engine(this)\n        class(Vehicle), intent(inout) :: this\n        print *, \"Engine started for \", trim(this%make), \" \", trim(this%model), \"(\", this%year, \")\"\n    end subroutine start_engine\nend module VehicleModule\n```"
  },
  {
    "task": "Implement a class that models a student with attributes for name, ID, and grades, and a method to calculate the GPA.",
    "code": "```fortran\nmodule student_module\n    implicit none\n    private\n    public :: student\n\n    type :: student\n        character(len=50) :: name\n        integer :: id\n        real, dimension(:), allocatable :: grades\n    contains\n        procedure :: calculate_gpa\n    end type student\n\ncontains\n\n    function calculate_gpa(this) result(gpa)\n        class(student), intent(in) :: this\n        real :: gpa\n\n        if (size(this%grades) > 0) then\n            gpa = sum(this%grades) / real(size(this%grades))\n        else\n            gpa = 0.0\n        end if\n    end function calculate_gpa\n\nend module student_module\n```"
  },
  {
    "task": "Construct a class for a rectangle that has attributes for width and height, and methods to calculate area and perimeter.",
    "code": "```fortran\nmodule rectangle_module\n    implicit none\n    private\n    public :: rectangle\n\n    type :: rectangle\n        real :: width\n        real :: height\n    contains\n        procedure :: area\n        procedure :: perimeter\n    end type rectangle\n\ncontains\n\n    function area(self) result(a)\n        class(rectangle), intent(in) :: self\n        real :: a\n        a = self%width * self%height\n    end function area\n\n    function perimeter(self) result(p)\n        class(rectangle), intent(in) :: self\n        real :: p\n        p = 2.0 * (self%width + self%height)\n    end function perimeter\n\nend module rectangle_module\n```"
  },
  {
    "task": "Formulate a class for a smartphone with properties for brand, model, and battery life, and a method to make a call.",
    "code": "```fortran\nmodule smartphone_module\n  implicit none\n  private\n  type, public :: Smartphone\n    character(len=50) :: brand\n    character(len=50) :: model\n    integer :: battery_life\n  contains\n    procedure :: make_call\n  end type Smartphone\ncontains\n  subroutine make_call(self)\n    class(Smartphone), intent(inout) :: self\n    print *, \"Making a call from \", self%brand, \" \", self%model\n  end subroutine make_call\nend module smartphone_module\n```"
  },
  {
    "task": "Build a class representing a movie with attributes for title, director, and duration, and a method to play the movie.",
    "code": "```fortran\nmodule MovieModule\n  implicit none\n  type :: Movie\n    character(len=100) :: title\n    character(len=100) :: director\n    real :: duration\n  contains\n    procedure :: play => playMovie\n  end type Movie\n\ncontains\n\n  subroutine playMovie(this)\n    class(Movie), intent(inout) :: this\n    print *, \"Now playing:\", trim(this%title)\n  end subroutine playMovie\n\nend module MovieModule\n```"
  },
  {
    "task": "Create a class for an employee with attributes for name, position, and salary, and a method to display their profile.",
    "code": "```fortran\nmodule EmployeeModule\n    implicit none\n    private\n    public :: Employee\n\n    type :: Employee\n        character(len=100) :: name\n        character(len=50) :: position\n        real :: salary\n    contains\n        procedure :: displayProfile\n    end type Employee\n\ncontains\n\n    subroutine displayProfile(this)\n        class(Employee), intent(in) :: this\n\n        print *, \"Employee Profile\"\n        print *, \"----------------\"\n        print *, \"Name: \", trim(this%name)\n        print *, \"Position: \", trim(this%position)\n        print *, \"Salary: \", this%salary\n    end subroutine displayProfile\n\nend module EmployeeModule\n```"
  },
  {
    "task": "Design a class for a library that includes attributes for name, location, and books available, and a method to add a new book.",
    "code": "```fortran\nmodule library_module\n  implicit none\n  type :: Library\n    character(len=100) :: name\n    character(len=100) :: location\n    character(len=100), allocatable :: books(:)\n  contains\n    procedure :: add_book\n  end type Library\n\ncontains\n\n  subroutine add_book(this, new_book)\n    class(Library), intent(inout) :: this\n    character(len=100), intent(in) :: new_book\n    integer :: n\n\n    n = size(this%books)\n    if (allocated(this%books)) then\n      this%books = [this%books, new_book]\n    else\n      allocate(this%books(1))\n      this%books(1) = new_book\n    end if\n  end subroutine add_book\n\nend module library_module\n```"
  },
  {
    "task": "Develop a class for a shopping cart with properties for items and total cost, and methods to add and remove items.",
    "code": "```fortran\nmodule ShoppingCartModule\n    implicit none\n    private\n    public :: ShoppingCart\n\n    type :: Item\n        character(len=100) :: name\n        real :: price\n    end type Item\n\n    type :: ShoppingCart\n        type(Item), allocatable :: items(:)\n        real :: totalCost = 0.0\n    contains\n        procedure :: addItem\n        procedure :: removeItem\n        procedure :: updateTotalCost\n    end type ShoppingCart\n\ncontains\n\n    subroutine addItem(this, newItem)\n        class(ShoppingCart), intent(inout) :: this\n        type(Item), intent(in) :: newItem\n        integer :: n\n\n        n = size(this%items)\n        if (n == 0) then\n            allocate(this%items(1))\n            this%items(1) = newItem\n        else\n            allocate(this%items(n + 1))\n            this%items(1:n) = this%items(1:n)\n            this%items(n + 1) = newItem\n        end if\n        call this%updateTotalCost()\n    end subroutine addItem\n\n    subroutine removeItem(this, itemName)\n        class(ShoppingCart), intent(inout) :: this\n        character(len=100), intent(in) :: itemName\n        integer :: i, n\n\n        n = size(this%items)\n        do i = 1, n\n            if (this%items(i)%name == itemName) then\n                this%items(i:n-1) = this%items(i+1:n)\n                allocate(this%items(n-1))\n                exit\n            end if\n        end do\n        call this%updateTotalCost()\n    end subroutine removeItem\n\n    subroutine updateTotalCost(this)\n        class(ShoppingCart), intent(inout) :: this\n        integer :: i\n\n        this%totalCost = 0.0\n        do i = 1, size(this%items)\n            this%totalCost = this%totalCost + this%items(i)%price\n        end do\n    end subroutine updateTotalCost\n\nend module ShoppingCartModule\n```"
  },
  {
    "task": "Implement a class for a thermostat with attributes for current temperature and desired temperature, and a method to adjust the temperature.",
    "code": "```fortran\nmodule ThermostatModule\n    implicit none\n    private\n    type, public :: Thermostat\n        real :: current_temperature\n        real :: desired_temperature\n    contains\n        procedure :: adjust_temperature\n    end type Thermostat\n\ncontains\n\n    subroutine adjust_temperature(this)\n        class(Thermostat), intent(inout) :: this\n        real :: adjustment\n\n        adjustment = this%desired_temperature - this%current_temperature\n\n        ! Simple adjustment logic\n        if (adjustment /= 0.0) then\n            this%current_temperature = this%current_temperature + adjustment\n        end if\n    end subroutine adjust_temperature\n\nend module ThermostatModule\n```"
  },
  {
    "task": "Formulate a class for a person with attributes for first name, last name, and age, and a method to return the full name.",
    "code": "```fortran\nmodule person_module\n    implicit none\n    private\n    type, public :: Person\n        character(len=50) :: first_name\n        character(len=50) :: last_name\n        integer :: age\n    contains\n        procedure :: full_name\n    end type Person\ncontains\n    function full_name(this) result(name)\n        class(Person), intent(in) :: this\n        character(len=100) :: name\n        name = trim(this%first_name) // ' ' // trim(this%last_name)\n    end function full_name\nend module person_module\n```"
  },
  {
    "task": "Construct a class for a game character with properties for health, strength, and inventory, and a method to attack.",
    "code": "```fortran\nmodule GameCharacterModule\n  implicit none\n\n  type :: GameCharacter\n    integer :: health\n    integer :: strength\n    character(len=100), dimension(:), allocatable :: inventory\n  contains\n    procedure :: attack\n  end type GameCharacter\n\ncontains\n\n  subroutine attack(self)\n    class(GameCharacter), intent(inout) :: self\n    ! Attack method logic here\n    print *, \"Attacking with strength:\", self%strength\n  end subroutine attack\n\nend module GameCharacterModule\n```"
  },
  {
    "task": "Create a class for a calendar event with attributes for title, date, and location, and a method to reschedule the event.",
    "code": "```fortran\nmodule CalendarEventModule\n  implicit none\n  private\n  type, public :: CalendarEvent\n    character(len=:), allocatable :: title\n    character(len=:), allocatable :: date\n    character(len=:), allocatable :: location\n  contains\n    procedure :: reschedule => reschedule_event\n  end type CalendarEvent\n\ncontains\n\n  subroutine reschedule_event(self, new_date)\n    class(CalendarEvent), intent(inout) :: self\n    character(len=*), intent(in) :: new_date\n    \n    self%date = new_date\n  end subroutine reschedule_event\n\nend module CalendarEventModule\n```"
  },
  {
    "task": "Design a class representing a song with properties for title, artist, and duration, and a method to play the song.",
    "code": "```fortran\nmodule song_module\n  implicit none\n  type :: song\n    character(len=:), allocatable :: title\n    character(len=:), allocatable :: artist\n    real :: duration\n  contains\n    procedure :: play\n  end type song\n\ncontains\n\n  subroutine play(this)\n    class(song), intent(inout) :: this\n    print *, \"Playing:\", trim(this%title), \"by\", trim(this%artist), \"Duration:\", this%duration, \"minutes.\"\n  end subroutine play\n\nend module song_module\n```"
  },
  {
    "task": "Develop a class for an order in an e-commerce system with attributes for order ID, customer, and items, and a method to calculate total price.",
    "code": "```fortran\nmodule OrderModule\n  implicit none\n\n  type :: Item\n    real :: price\n    integer :: quantity\n  end type Item\n\n  type :: Order\n    integer :: orderID\n    character(len=50) :: customer\n    type(Item), allocatable :: items(:)\n\n    contains\n      procedure :: calculateTotalPrice\n  end type Order\n\ncontains\n\n  real function calculateTotalPrice(this) result(total)\n    class(Order), intent(in) :: this\n    integer :: i\n\n    total = 0.0\n    do i = 1, size(this%items)\n      total = total + this%items(i)%price * this%items(i)%quantity\n    end do\n  end function calculateTotalPrice\n\nend module OrderModule\n```"
  },
  {
    "task": "Build a class for a social media post with attributes for content, author, and timestamp, and a method to like the post.",
    "code": "```fortran\nmodule SocialMediaModule\n    implicit none\n    type :: SocialMediaPost\n        character(len=:), allocatable :: content\n        character(len=:), allocatable :: author\n        character(len=:), allocatable :: timestamp\n        integer :: likes = 0\n    contains\n        procedure :: likePost\n    end type SocialMediaPost\n\ncontains\n\n    subroutine likePost(this)\n        class(SocialMediaPost), intent(inout) :: this\n        this%likes = this%likes + 1\n    end subroutine likePost\n\nend module SocialMediaModule\n```"
  },
  {
    "task": "Create a class for a computer with properties for processor, RAM, and storage, and a method to display system specifications.",
    "code": "```fortran\nmodule ComputerModule\n  implicit none\n\n  type :: Computer\n     character(len=100) :: processor\n     integer :: ram\n     integer :: storage\n  contains\n     procedure :: displaySpecs\n  end type Computer\n\ncontains\n\n  subroutine displaySpecs(this)\n    class(Computer), intent(in) :: this\n    print *, 'Processor: ', this%processor\n    print *, 'RAM: ', this%ram, ' GB'\n    print *, 'Storage: ', this%storage, ' GB'\n  end subroutine displaySpecs\n\nend module ComputerModule\n```"
  },
  {
    "task": "Implement a class for a restaurant menu item with attributes for name, price, and description, and a method to update the price.",
    "code": "```fortran\nmodule MenuItemModule\n  implicit none\n  private\n  type, public :: MenuItem\n    character(len=:), allocatable :: name\n    real :: price\n    character(len=:), allocatable :: description\n  contains\n    procedure, public :: update_price\n  end type MenuItem\n\ncontains\n\n  subroutine update_price(this, new_price)\n    class(MenuItem), intent(inout) :: this\n    real, intent(in) :: new_price\n    this%price = new_price\n  end subroutine update_price\n\nend module MenuItemModule\n```"
  },
  {
    "task": "Design a class for a package delivery with attributes for tracking number, destination, and status, and a method to update the status.",
    "code": "```fortran\nmodule PackageModule\n    implicit none\n    type :: Package\n        character(len=20) :: trackingNumber\n        character(len=50) :: destination\n        character(len=20) :: status\n    contains\n        procedure :: updateStatus\n    end type Package\n\ncontains\n\n    subroutine updateStatus(this, newStatus)\n        class(Package), intent(inout) :: this\n        character(len=20), intent(in) :: newStatus\n        this%status = newStatus\n    end subroutine updateStatus\n\nend module PackageModule\n```"
  },
  {
    "task": "Construct a class representing a pet with attributes for species, age, and name, and a method to display its details.",
    "code": "```fortran\nmodule PetModule\n  implicit none\n  private\n  public :: Pet\n\n  type :: Pet\n    character(len=50) :: species\n    integer :: age\n    character(len=50) :: name\n  contains\n    procedure :: displayDetails\n  end type Pet\n\ncontains\n\n  subroutine displayDetails(this)\n    class(Pet), intent(in) :: this\n\n    print *, 'Species: ', trim(this%species)\n    print *, 'Age: ', this%age\n    print *, 'Name: ', trim(this%name)\n  end subroutine displayDetails\n\nend module PetModule\n```"
  },
  {
    "task": "Formulate a class for a product in a store with properties for SKU, name, and price, and a method to apply a discount.",
    "code": "```fortran\nmodule ProductModule\n  implicit none\n  private\n  public :: Product\n\n  type :: Product\n     character(len=20) :: SKU\n     character(len=50) :: name\n     real :: price\n  contains\n     procedure :: apply_discount\n  end type Product\n\ncontains\n\n  subroutine apply_discount(this, discount)\n    class(Product), intent(inout) :: this\n    real, intent(in) :: discount\n    this%price = this%price * (1.0 - discount)\n  end subroutine apply_discount\n\nend module ProductModule\n```"
  },
  {
    "task": "Develop a class for a university course with attributes for course code, title, and credits, and a method to enroll a student.",
    "code": "```fortran\nmodule course_module\n    implicit none\n    private\n    type, public :: Course\n        character(len=50) :: code\n        character(len=100) :: title\n        integer :: credits\n    contains\n        procedure :: enroll_student\n    end type Course\ncontains\n    subroutine enroll_student(self)\n        class(Course), intent(inout) :: self\n        print *, \"Student enrolled in course:\", self%code\n    end subroutine enroll_student\nend module course_module\n\nprogram university_program\n    use course_module\n    implicit none\n    type(Course) :: my_course\n\n    ! Initialize the course attributes\n    my_course%code = \"CS101\"\n    my_course%title = \"Introduction to Programming\"\n    my_course%credits = 4\n\n    ! Enroll a student in the course\n    call my_course%enroll_student()\nend program university_program\n```"
  },
  {
    "task": "Create a class for a smart light bulb with attributes for color, brightness, and state (on/off), and a method to change the color.",
    "code": "```fortran\nmodule SmartLightBulbModule\n    implicit none\n\n    type :: SmartLightBulb\n        character(len=20) :: color = 'White'\n        integer :: brightness = 100\n        logical :: state = .false.\n    contains\n        procedure :: changeColor\n    end type SmartLightBulb\n\ncontains\n\n    subroutine changeColor(this, newColor)\n        class(SmartLightBulb), intent(inout) :: this\n        character(len=*), intent(in) :: newColor\n        \n        this%color = newColor\n    end subroutine changeColor\n\nend module SmartLightBulbModule\n```"
  },
  {
    "task": "Design a class for a blog post with properties for title, content, and date published, and a method to edit the content.",
    "code": "```fortran\nmodule BlogModule\n  implicit none\n  private\n  type, public :: BlogPost\n    character(len=:), allocatable :: title\n    character(len=:), allocatable :: content\n    character(len=:), allocatable :: date_published\n  contains\n    procedure :: edit_content\n  end type BlogPost\n\ncontains\n\n  subroutine edit_content(this, new_content)\n    class(BlogPost), intent(inout) :: this\n    character(len=*), intent(in) :: new_content\n    this%content = new_content\n  end subroutine edit_content\n\nend module BlogModule\n```"
  },
  {
    "task": "Build a class for a bank transaction with attributes for transaction ID, amount, and type, and a method to reverse the transaction.",
    "code": "```fortran\nmodule BankTransactionModule\n    implicit none\n    private\n    public :: BankTransaction\n\n    type :: BankTransaction\n        integer :: transactionID\n        real :: amount\n        character(len=10) :: type\n    contains\n        procedure :: reverseTransaction\n    end type BankTransaction\n\ncontains\n\n    subroutine reverseTransaction(this)\n        class(BankTransaction), intent(inout) :: this\n        this%amount = -this%amount\n        if (this%type == 'credit') then\n            this%type = 'debit'\n        else if (this%type == 'debit') then\n            this%type = 'credit'\n        end if\n    end subroutine reverseTransaction\n\nend module BankTransactionModule\n```"
  },
  {
    "task": "Implement a class for a city with properties for name, population, and area, and a method to calculate population density.",
    "code": "```fortran\nmodule city_module\n  implicit none\n  private\n  public :: city\n\n  type :: city\n     character(len=:), allocatable :: name\n     integer :: population\n     real :: area\n   contains\n     procedure :: population_density\n  end type city\n\ncontains\n\n  function population_density(this) result(density)\n    class(city), intent(in) :: this\n    real :: density\n\n    if (this%area > 0.0) then\n      density = this%population / this%area\n    else\n      density = 0.0\n    end if\n  end function population_density\n\nend module city_module\n```"
  },
  {
    "task": "Construct a class for a library member with attributes for member ID, name, and borrowed books, and a method to borrow a book.",
    "code": "```fortran\nmodule library_module\n    implicit none\n    type :: LibraryMember\n        integer :: member_id\n        character(len=100) :: name\n        character(len=100), dimension(:), allocatable :: borrowed_books\n    contains\n        procedure :: borrow_book\n    end type LibraryMember\n\ncontains\n\n    subroutine borrow_book(this, book_name)\n        class(LibraryMember), intent(inout) :: this\n        character(len=100), intent(in) :: book_name\n        integer :: n\n\n        n = size(this%borrowed_books)\n        call move_alloc(this%borrowed_books, this%borrowed_books, source=[this%borrowed_books, book_name])\n    end subroutine borrow_book\n\nend module library_module\n```"
  },
  {
    "task": "Create a class for a flight reservation with attributes for flight number, passenger name, and seat number, and a method to change the seat.",
    "code": "```fortran\nmodule FlightReservationModule\n  implicit none\n  type :: FlightReservation\n    character(len=20) :: flightNumber\n    character(len=50) :: passengerName\n    character(len=5) :: seatNumber\n  contains\n    procedure :: changeSeat\n  end type FlightReservation\n\ncontains\n\n  subroutine changeSeat(self, newSeatNumber)\n    class(FlightReservation), intent(inout) :: self\n    character(len=5), intent(in) :: newSeatNumber\n\n    self%seatNumber = newSeatNumber\n  end subroutine changeSeat\n\nend module FlightReservationModule\n```"
  },
  {
    "task": "Develop a class for a digital photo album with properties for album name, photos, and a method to add a new photo.",
    "code": "```fortran\nmodule PhotoAlbumModule\n    implicit none\n    type :: PhotoAlbum\n        character(len=100) :: albumName\n        character(len=100), dimension(:), allocatable :: photos\n    contains\n        procedure :: addPhoto\n    end type PhotoAlbum\n\ncontains\n\n    subroutine addPhoto(this, newPhoto)\n        class(PhotoAlbum), intent(inout) :: this\n        character(len=100), intent(in) :: newPhoto\n        integer :: n\n\n        n = size(this%photos)\n        if (n == 0) then\n            allocate(this%photos(1))\n            this%photos(1) = newPhoto\n        else\n            allocate(this%photos(n+1))\n            this%photos(1:n) = this%photos(1:n)\n            this%photos(n+1) = newPhoto\n        end if\n    end subroutine addPhoto\n\nend module PhotoAlbumModule\n```"
  },
  {
    "task": "Design a class for a task in a to-do list with attributes for description, deadline, and status, and a method to mark it as complete.",
    "code": "```fortran\nmodule TaskModule\n  implicit none\n  private\n  type, public :: Task\n    character(len=100) :: description\n    character(len=20) :: deadline\n    logical :: status\n  contains\n    procedure :: markComplete\n  end type Task\ncontains\n  subroutine markComplete(this)\n    class(Task), intent(inout) :: this\n    this%status = .true.\n  end subroutine markComplete\nend module TaskModule\n```"
  },
  {
    "task": "Formulate a class for a conference speaker with attributes for name, topic, and time slot, and a method to update the time slot.",
    "code": "```fortran\nmodule speaker_module\n  implicit none\n  private\n  type, public :: Speaker\n    character(len=100) :: name\n    character(len=100) :: topic\n    character(len=100) :: time_slot\n  contains\n    procedure :: update_time_slot\n  end type Speaker\n\ncontains\n\n  subroutine update_time_slot(self, new_time_slot)\n    class(Speaker), intent(inout) :: self\n    character(len=100), intent(in) :: new_time_slot\n    self%time_slot = new_time_slot\n  end subroutine update_time_slot\n\nend module speaker_module\n```"
  },
  {
    "task": "Construct a class for a real estate property with attributes for address, price, and square footage, and a method to change the price.",
    "code": "```fortran\nmodule real_estate_module\n  implicit none\n  type :: Property\n    character(len=100) :: address\n    real :: price\n    real :: square_footage\n  contains\n    procedure :: change_price\n  end type Property\n\ncontains\n\n  subroutine change_price(self, new_price)\n    class(Property), intent(inout) :: self\n    real, intent(in) :: new_price\n    self%price = new_price\n  end subroutine change_price\n\nend module real_estate_module\n```"
  },
  {
    "task": "Create a class for a weather forecast with properties for temperature, humidity, and condition, and a method to update the forecast.",
    "code": "```fortran\nmodule WeatherModule\n  implicit none\n\n  type :: WeatherForecast\n     real :: temperature\n     real :: humidity\n     character(len=50) :: condition\n  contains\n     procedure :: updateForecast\n  end type WeatherForecast\n\ncontains\n\n  subroutine updateForecast(this, temp, hum, cond)\n    class(WeatherForecast), intent(inout) :: this\n    real, intent(in) :: temp\n    real, intent(in) :: hum\n    character(len=*), intent(in) :: cond\n\n    this%temperature = temp\n    this%humidity = hum\n    this%condition = cond\n  end subroutine updateForecast\n\nend module WeatherModule\n```"
  },
  {
    "task": "Build a class for a musical instrument with attributes for type, brand, and model, and a method to play a note.",
    "code": "```fortran\nmodule musical_instrument_module\n  implicit none\n  private\n  type, public :: MusicalInstrument\n    character(len=:), allocatable :: type\n    character(len=:), allocatable :: brand\n    character(len=:), allocatable :: model\n  contains\n    procedure :: play_note\n  end type MusicalInstrument\ncontains\n  subroutine play_note(self)\n    class(MusicalInstrument), intent(in) :: self\n    print *, \"Playing a note on the \", self%brand, \" \", self%model, \" (\", self%type, \")\"\n  end subroutine play_note\nend module musical_instrument_module\n```"
  },
  {
    "task": "Design a class for a sports team with attributes for team name, players, and coach, and a method to add a new player.",
    "code": "```fortran\nmodule TeamModule\n  implicit none\n  private\n  public :: Team\n\n  type :: Team\n    character(len=100) :: teamName\n    character(len=100), allocatable :: players(:)\n    character(len=100) :: coach\n  contains\n    procedure :: addPlayer\n  end type Team\n\ncontains\n\n  subroutine addPlayer(this, newPlayer)\n    class(Team), intent(inout) :: this\n    character(len=100), intent(in) :: newPlayer\n    integer :: n\n\n    n = size(this%players)\n    if (n == 0) then\n      allocate(this%players(1))\n      this%players(1) = newPlayer\n    else\n      allocate(this%players(n+1))\n      this%players(1:n) = this%players(1:n)\n      this%players(n+1) = newPlayer\n    end if\n  end subroutine addPlayer\n\nend module TeamModule\n```"
  },
  {
    "task": "Implement a class for a podcast episode with attributes for title, duration, and host, and a method to play the episode.",
    "code": "```fortran\nmodule podcast_module\n  implicit none\n  private\n  public :: PodcastEpisode\n\n  type :: PodcastEpisode\n     character(len=:), allocatable :: title\n     real :: duration\n     character(len=:), allocatable :: host\n   contains\n     procedure :: play\n  end type PodcastEpisode\n\ncontains\n\n  subroutine play(this)\n    class(PodcastEpisode), intent(inout) :: this\n    print *, 'Playing episode:', this%title\n    print *, 'Host:', this%host\n    print *, 'Duration:', this%duration, 'minutes'\n  end subroutine play\n\nend module podcast_module\n```"
  },
  {
    "task": "Develop a class for a space mission with properties for mission name, crew, and launch date, and a method to launch the mission.",
    "code": "```fortran\nmodule space_mission_module\n  implicit none\n  private\n  public :: space_mission\n\n  type :: space_mission\n     character(len=100) :: mission_name\n     character(len=100) :: crew\n     character(len=20) :: launch_date\n   contains\n     procedure :: launch_mission\n  end type space_mission\n\ncontains\n\n  subroutine launch_mission(this)\n    class(space_mission), intent(inout) :: this\n    print *, 'Launching mission:', this%mission_name\n    print *, 'Crew:', this%crew\n    print *, 'Launch Date:', this%launch_date\n  end subroutine launch_mission\n\nend module space_mission_module\n```"
  },
  {
    "task": "Create a class for a virtual assistant with attributes for name, language, and skills, and a method to add a new skill.",
    "code": "```fortran\nmodule VirtualAssistantModule\n    implicit none\n    type :: VirtualAssistant\n        character(len=50) :: name\n        character(len=20) :: language\n        character(len=100), allocatable :: skills(:)\n    contains\n        procedure :: addSkill => add_skill_to_assistant\n    end type VirtualAssistant\ncontains\n    subroutine add_skill_to_assistant(this, new_skill)\n        class(VirtualAssistant), intent(inout) :: this\n        character(len=100), intent(in) :: new_skill\n        integer :: n\n\n        n = size(this%skills)\n        if (n == 0) then\n            allocate(this%skills(1))\n            this%skills(1) = new_skill\n        else\n            allocate(this%skills(n + 1))\n            this%skills(1:n) = this%skills(1:n)\n            this%skills(n + 1) = new_skill\n        end if\n    end subroutine add_skill_to_assistant\nend module VirtualAssistantModule\n```"
  },
  {
    "task": "Formulate a class for a news article with attributes for headline, content, and author, and a method to publish the article.",
    "code": "```fortran\nmodule NewsArticleModule\n  implicit none\n  type :: NewsArticle\n    character(len=:), allocatable :: headline\n    character(len=:), allocatable :: content\n    character(len=:), allocatable :: author\n  contains\n    procedure :: publish\n  end type NewsArticle\n\ncontains\n\n  subroutine publish(article)\n    class(NewsArticle), intent(in) :: article\n    print *, \"Headline: \", article%headline\n    print *, \"Author: \", article%author\n    print *, \"Content: \", article%content\n  end subroutine publish\n\nend module NewsArticleModule\n```"
  },
  {
    "task": "Construct a class for a hiking trail with attributes for trail name, length, and difficulty, and a method to update the difficulty.",
    "code": "```fortran\nmodule trail_module\n  implicit none\n  private\n  public :: Trail\n\n  type :: Trail\n    character(len=100) :: name\n    real :: length\n    character(len=20) :: difficulty\n  contains\n    procedure :: update_difficulty\n  end type Trail\n\ncontains\n\n  subroutine update_difficulty(this, new_difficulty)\n    class(Trail), intent(inout) :: this\n    character(len=*), intent(in) :: new_difficulty\n\n    this%difficulty = new_difficulty\n  end subroutine update_difficulty\n\nend module trail_module\n```"
  },
  {
    "task": "Design a class for a subscription service with properties for service name, subscriber count, and subscription fee, and a method to update the fee.",
    "code": "```fortran\nmodule SubscriptionServiceModule\n    type :: SubscriptionService\n        character(len=50) :: serviceName\n        integer :: subscriberCount\n        real :: subscriptionFee\n    contains\n        procedure :: updateFee\n    end type SubscriptionService\n\ncontains\n\n    subroutine updateFee(this, newFee)\n        class(SubscriptionService), intent(inout) :: this\n        real, intent(in) :: newFee\n        this%subscriptionFee = newFee\n    end subroutine updateFee\n\nend module SubscriptionServiceModule\n```"
  },
  {
    "task": "Build a class for a digital wallet with attributes for balance, transaction history, and a method to add funds.",
    "code": "```fortran\nmodule WalletModule\n    implicit none\n    type :: DigitalWallet\n        real :: balance = 0.0\n        character(len=:), allocatable :: transactionHistory(:)\n    contains\n        procedure :: addFunds => addFundsMethod\n    end type DigitalWallet\n\ncontains\n\n    subroutine addFundsMethod(self, amount)\n        class(DigitalWallet), intent(inout) :: self\n        real, intent(in) :: amount\n        integer :: n\n\n        if (amount > 0.0) then\n            self%balance = self%balance + amount\n            n = size(self%transactionHistory, kind=4)\n            if (n == 0) then\n                allocate(character(len=50) :: self%transactionHistory(1))\n                self%transactionHistory(1) = 'Added funds: ' // trim(adjustl(toString(amount)))\n            else\n                call move_alloc(from=self%transactionHistory, to=self%transactionHistory, source=n+1)\n                self%transactionHistory(n+1) = 'Added funds: ' // trim(adjustl(toString(amount)))\n            end if\n        end if\n    end subroutine addFundsMethod\n\n    function toString(val) result(res)\n        real, intent(in) :: val\n        character(len=50) :: res\n        write(res, '(F10.2)') val\n    end function toString\n\nend module WalletModule\n```"
  },
  {
    "task": "Implement a class for a cooking recipe with attributes for name, ingredients, and instructions, and a method to update the instructions.",
    "code": "```fortran\nmodule RecipeModule\n    implicit none\n    private\n    public :: Recipe\n\n    type :: Recipe\n        character(len=:), allocatable :: name\n        character(len=:), allocatable :: ingredients\n        character(len=:), allocatable :: instructions\n    contains\n        procedure :: update_instructions\n    end type Recipe\n\ncontains\n\n    subroutine update_instructions(this, new_instructions)\n        class(Recipe), intent(inout) :: this\n        character(len=*), intent(in) :: new_instructions\n\n        this%instructions = new_instructions\n    end subroutine update_instructions\n\nend module RecipeModule\n```"
  },
  {
    "task": "Develop a class for a time zone with properties for zone name, offset, and a method to convert time from another time zone.",
    "code": "```fortran\nmodule timezone_module\n  implicit none\n  private\n  type, public :: TimeZone\n    character(len=100) :: zone_name\n    real :: offset\n  contains\n    procedure :: convert_time => convert_time_zone\n  end type TimeZone\n\ncontains\n\n  function convert_time_zone(this, time, other_zone) result(converted_time)\n    class(TimeZone), intent(in) :: this\n    real, intent(in) :: time\n    class(TimeZone), intent(in) :: other_zone\n    real :: converted_time\n    converted_time = time + (this%offset - other_zone%offset)\n  end function convert_time_zone\n\nend module timezone_module\n```"
  },
  {
    "task": "Create a class for a camera with attributes for resolution, brand, and model, and a method to take a picture.",
    "code": "```fortran\nmodule CameraModule\n    implicit none\n    type :: Camera\n        character(len=30) :: resolution\n        character(len=30) :: brand\n        character(len=30) :: model\n    contains\n        procedure :: takePicture\n    end type Camera\ncontains\n    subroutine takePicture(this)\n        class(Camera), intent(inout) :: this\n        print *, \"Taking a picture with \", this%brand, \" \", this%model, \" at \", this%resolution, \" resolution.\"\n    end subroutine takePicture\nend module CameraModule\n\nprogram CameraDemo\n    use CameraModule\n    implicit none\n    type(Camera) :: myCamera\n\n    myCamera%resolution = \"1920x1080\"\n    myCamera%brand = \"Canon\"\n    myCamera%model = \"EOS 80D\"\n\n    call myCamera%takePicture()\nend program CameraDemo\n```"
  },
  {
    "task": "Design a class for a gaming console with properties for brand, model, and storage capacity, and a method to install a game.",
    "code": "```fortran\nmodule gaming_console_module\n  implicit none\n  private\n  public :: gaming_console\n\n  type :: gaming_console\n     character(len=50) :: brand\n     character(len=50) :: model\n     integer :: storage_capacity\n   contains\n     procedure :: install_game\n  end type gaming_console\n\ncontains\n\n  subroutine install_game(self, game_size)\n    class(gaming_console), intent(inout) :: self\n    integer, intent(in) :: game_size\n\n    if (self%storage_capacity >= game_size) then\n      print *, \"Game installed successfully.\"\n      self%storage_capacity = self%storage_capacity - game_size\n    else\n      print *, \"Not enough storage to install the game.\"\n    end if\n  end subroutine install_game\n\nend module gaming_console_module\n```"
  },
  {
    "task": "Formulate a class for a museum exhibit with attributes for exhibit name, artist, and year, and a method to update the year.",
    "code": "```fortran\nmodule ExhibitModule\n  implicit none\n  type :: Exhibit\n    character(len=100) :: name\n    character(len=100) :: artist\n    integer :: year\n  contains\n    procedure :: update_year\n  end type Exhibit\n\ncontains\n\n  subroutine update_year(this, new_year)\n    class(Exhibit), intent(inout) :: this\n    integer, intent(in) :: new_year\n    this%year = new_year\n  end subroutine update_year\n\nend module ExhibitModule\n```"
  },
  {
    "task": "Construct a class for a fitness tracker with attributes for steps, calories burned, and heart rate, and a method to add steps.",
    "code": "```fortran\nmodule FitnessTrackerModule\n  implicit none\n  type :: FitnessTracker\n    integer :: steps\n    real :: calories_burned\n    real :: heart_rate\n  contains\n    procedure :: add_steps\n  end type FitnessTracker\n\ncontains\n\n  subroutine add_steps(this, additional_steps)\n    class(FitnessTracker), intent(inout) :: this\n    integer, intent(in) :: additional_steps\n    this%steps = this%steps + additional_steps\n  end subroutine add_steps\n  \nend module FitnessTrackerModule\n```"
  },
  {
    "task": "Build a class for an aquarium with properties for tank size, fish species, and water temperature, and a method to add a new fish.",
    "code": "```fortran\nmodule aquarium_mod\n    implicit none\n    private\n    type, public :: Aquarium\n        real :: tank_size\n        character(len=50) :: fish_species(100)\n        real :: water_temperature\n        integer :: num_fish = 0\n    contains\n        procedure, public :: add_fish => add_new_fish\n    end type Aquarium\n\ncontains\n\n    subroutine add_new_fish(self, species)\n        class(Aquarium), intent(inout) :: self\n        character(len=*), intent(in) :: species\n\n        if (self%num_fish < 100) then\n            self%num_fish = self%num_fish + 1\n            self%fish_species(self%num_fish) = species\n        else\n            print *, \"Cannot add more fish: Aquarium is full.\"\n        end if\n    end subroutine add_new_fish\n\nend module aquarium_mod\n```"
  },
  {
    "task": "Create a class for a chat message with attributes for sender, content, and timestamp, and a method to edit the content.",
    "code": "```fortran\nmodule ChatMessageModule\n  implicit none\n  private\n  public :: ChatMessage\n  \n  type :: ChatMessage\n    character(len=:), allocatable :: sender\n    character(len=:), allocatable :: content\n    character(len=:), allocatable :: timestamp\n  contains\n    procedure :: editContent\n  end type ChatMessage\n\ncontains\n\n  subroutine editContent(this, newContent)\n    class(ChatMessage), intent(inout) :: this\n    character(len=*), intent(in) :: newContent\n    this%content = newContent\n  end subroutine editContent\n\nend module ChatMessageModule\n```"
  },
  {
    "task": "Design a class for a vending machine with properties for items available, prices, and a method to dispense an item.",
    "code": "```fortran\nmodule vending_machine_module\n  implicit none\n  private\n  public :: vending_machine\n\n  type :: vending_machine\n    character(len=:), allocatable :: items(:)\n    real, allocatable :: prices(:)\n  contains\n    procedure :: dispense_item\n  end type vending_machine\n\ncontains\n\n  subroutine dispense_item(this, item_name)\n    class(vending_machine), intent(inout) :: this\n    character(len=*), intent(in) :: item_name\n    integer :: i\n    logical :: found\n\n    found = .false.\n    do i = 1, size(this%items)\n      if (trim(this%items(i)) == trim(item_name)) then\n        found = .true.\n        print *, 'Dispensing item:', trim(item_name)\n        print *, 'Price:', this%prices(i)\n        exit\n      end if\n    end do\n\n    if (.not. found) then\n      print *, 'Item not found:', trim(item_name)\n    end if\n\n  end subroutine dispense_item\n\nend module vending_machine_module\n```"
  },
  {
    "task": "Implement a class for a digital clock with attributes for current time, time zone, and a method to set an alarm.",
    "code": "```fortran\nmodule DigitalClockModule\n    implicit none\n    private\n    type, public :: DigitalClock\n        character(len=8) :: current_time\n        character(len=5) :: time_zone\n    contains\n        procedure :: set_alarm\n    end type DigitalClock\ncontains\n    subroutine set_alarm(this, alarm_time)\n        class(DigitalClock), intent(inout) :: this\n        character(len=8), intent(in) :: alarm_time\n        print *, 'Alarm set for', alarm_time\n    end subroutine set_alarm\nend module DigitalClockModule\n```"
  },
  {
    "task": "Develop a class for a historical figure with attributes for name, birthdate, and achievements, and a method to add an achievement.",
    "code": "```fortran\nmodule HistoricalFigureModule\n    implicit none\n    type :: HistoricalFigure\n        character(len=100) :: name\n        character(len=10) :: birthdate\n        character(len=500), allocatable :: achievements(:)\n    contains\n        procedure :: addAchievement\n    end type HistoricalFigure\n\ncontains\n\n    subroutine addAchievement(this, newAchievement)\n        class(HistoricalFigure), intent(inout) :: this\n        character(len=500), intent(in) :: newAchievement\n        integer :: n\n\n        if (.not. allocated(this%achievements)) then\n            allocate(this%achievements(1))\n            this%achievements(1) = newAchievement\n        else\n            n = size(this%achievements)\n            call move_alloc(this%achievements, this%achievements, source=this%achievements)\n            allocate(this%achievements(n+1))\n            this%achievements(1:n) = this%achievements\n            this%achievements(n+1) = newAchievement\n        end if\n    end subroutine addAchievement\n\nend module HistoricalFigureModule\n```"
  },
  {
    "task": "Formulate a class for a travel itinerary with attributes for destinations, travel dates, and activities, and a method to add a destination.",
    "code": "```fortran\nmodule travel_module\n    implicit none\n    type :: travel_itinerary\n        character(len=100), allocatable :: destinations(:)\n        character(len=10), allocatable :: travel_dates(:)\n        character(len=100), allocatable :: activities(:)\n    contains\n        procedure :: add_destination\n    end type travel_itinerary\n\ncontains\n\n    subroutine add_destination(this, new_destination)\n        class(travel_itinerary), intent(inout) :: this\n        character(len=100), intent(in) :: new_destination\n        integer :: n\n\n        n = size(this%destinations)\n        if (n == 0) then\n            allocate(this%destinations(1))\n            this%destinations(1) = new_destination\n        else\n            call move_alloc(this%destinations, this%destinations, source=this%destinations, mold=this%destinations)\n            allocate(this%destinations(n+1))\n            this%destinations(1:n) = this%destinations(1:n)\n            this%destinations(n+1) = new_destination\n        end if\n    end subroutine add_destination\n\nend module travel_module\n```"
  },
  {
    "task": "Construct a class for a fashion brand with properties for brand name, founder, and product lines, and a method to launch a new product line.",
    "code": "```fortran\nmodule fashion_brand_mod\n  implicit none\n  type :: FashionBrand\n    character(len=100) :: brand_name\n    character(len=100) :: founder\n    character(len=100), allocatable :: product_lines(:)\n  contains\n    procedure :: launch_product_line\n  end type FashionBrand\n\ncontains\n\n  subroutine launch_product_line(this, new_product_line)\n    class(FashionBrand), intent(inout) :: this\n    character(len=100), intent(in) :: new_product_line\n    integer :: n\n\n    if (.not.allocated(this%product_lines)) then\n      allocate(this%product_lines(1))\n      this%product_lines(1) = new_product_line\n    else\n      n = size(this%product_lines) + 1\n      call move_alloc(this%product_lines, this%product_lines)\n      allocate(this%product_lines(n))\n      this%product_lines(1:n-1) = this%product_lines(1:n-1)\n      this%product_lines(n) = new_product_line\n    end if\n  end subroutine launch_product_line\n\nend module fashion_brand_mod\n```"
  },
  {
    "task": "Create a class for a video game with attributes for title, genre, and rating, and a method to update the rating.",
    "code": "```fortran\nmodule VideoGameModule\n    implicit none\n    type :: VideoGame\n        character(len=:), allocatable :: title\n        character(len=:), allocatable :: genre\n        real :: rating\n    contains\n        procedure :: update_rating\n    end type VideoGame\n\ncontains\n\n    subroutine update_rating(this, new_rating)\n        class(VideoGame), intent(inout) :: this\n        real, intent(in) :: new_rating\n        this%rating = new_rating\n    end subroutine update_rating\n\nend module VideoGameModule\n```"
  },
  {
    "task": "Build a class for a scientific experiment with attributes for experiment name, hypothesis, and results, and a method to record results.",
    "code": "```fortran\nmodule ExperimentModule\n  implicit none\n  type :: Experiment\n    character(len=100) :: name\n    character(len=255) :: hypothesis\n    character(len=255) :: results\n  contains\n    procedure :: recordResults\n  end type Experiment\n\ncontains\n\n  subroutine recordResults(this, newResults)\n    class(Experiment), intent(inout) :: this\n    character(len=255), intent(in) :: newResults\n\n    this%results = newResults\n  end subroutine recordResults\n\nend module ExperimentModule\n```"
  },
  {
    "task": "Design a class for a gourmet dish with properties for dish name, ingredients, and cooking time, and a method to change cooking time.",
    "code": "```fortran\nmodule GourmetDishModule\n  implicit none\n  private\n  type, public :: GourmetDish\n    character(len=100) :: name\n    character(len=200) :: ingredients\n    real :: cookingTime\n  contains\n    procedure :: changeCookingTime\n  end type GourmetDish\n\ncontains\n\n  subroutine changeCookingTime(this, newTime)\n    class(GourmetDish), intent(inout) :: this\n    real, intent(in) :: newTime\n    this%cookingTime = newTime\n  end subroutine changeCookingTime\n\nend module GourmetDishModule\n```"
  },
  {
    "task": "Implement a class for a political office with attributes for office title, holder, and term length, and a method to change the holder.",
    "code": "```fortran\nmodule political_office_module\n  implicit none\n\n  type :: PoliticalOffice\n     character(len=:), allocatable :: title\n     character(len=:), allocatable :: holder\n     integer :: term_length\n  contains\n     procedure :: change_holder\n  end type PoliticalOffice\n\ncontains\n\n  subroutine change_holder(this, new_holder)\n    class(PoliticalOffice), intent(inout) :: this\n    character(len=*), intent(in) :: new_holder\n\n    this%holder = new_holder\n  end subroutine change_holder\n\nend module political_office_module\n```"
  },
  {
    "task": "Develop a class for an astronomical object with properties for name, type, and distance from Earth, and a method to update the distance.",
    "code": "```fortran\nmodule AstronomicalObjectModule\n    implicit none\n    private\n    type, public :: AstronomicalObject\n        character(len=50) :: name\n        character(len=20) :: type\n        real :: distance_from_earth\n    contains\n        procedure :: update_distance\n    end type AstronomicalObject\ncontains\n    subroutine update_distance(this, new_distance)\n        class(AstronomicalObject), intent(inout) :: this\n        real, intent(in) :: new_distance\n        this%distance_from_earth = new_distance\n    end subroutine update_distance\nend module AstronomicalObjectModule\n```"
  },
  {
    "task": "Formulate a class for a public transportation route with attributes for route number, stops, and schedule, and a method to add a stop.",
    "code": "```fortran\nmodule TransportationModule\n    implicit none\n    type :: Route\n        integer :: route_number\n        character(len=100), allocatable :: stops(:)\n        character(len=100), allocatable :: schedule(:)\n    contains\n        procedure :: add_stop\n    end type Route\n\ncontains\n\n    subroutine add_stop(this, new_stop)\n        class(Route), intent(inout) :: this\n        character(len=100), intent(in) :: new_stop\n        integer :: n\n\n        n = size(this%stops)\n        if (allocated(this%stops)) then\n            call move_alloc(this%stops, this%stops)\n            allocate(character(len=100) :: this%stops(n+1))\n            this%stops(1:n) = this%stops(1:n)\n        else\n            allocate(character(len=100) :: this%stops(1))\n        end if\n        this%stops(n+1) = new_stop\n    end subroutine add_stop\n\nend module TransportationModule\n```"
  },
  {
    "task": "Construct a class for a board game with properties for game name, player count, and rules, and a method to change the rules.",
    "code": "```fortran\nmodule BoardGameModule\n  implicit none\n  type :: BoardGame\n    character(len=100) :: gameName\n    integer :: playerCount\n    character(len=500) :: rules\n  contains\n    procedure :: changeRules\n  end type BoardGame\n\ncontains\n\n  subroutine changeRules(this, newRules)\n    class(BoardGame), intent(inout) :: this\n    character(len=*), intent(in) :: newRules\n    this%rules = newRules\n  end subroutine changeRules\n\nend module BoardGameModule\n```"
  },
  {
    "task": "Create a class for a customer loyalty program with attributes for program name, points, and rewards, and a method to redeem points.",
    "code": "```fortran\nmodule LoyaltyProgramModule\n  implicit none\n  private\n  public :: LoyaltyProgram\n\n  type :: LoyaltyProgram\n    character(len=100) :: programName\n    integer :: points\n    character(len=100) :: rewards\n  contains\n    procedure :: redeemPoints\n  end type LoyaltyProgram\n\ncontains\n\n  subroutine redeemPoints(self, pointsToRedeem)\n    class(LoyaltyProgram), intent(inout) :: self\n    integer, intent(in) :: pointsToRedeem\n\n    if (pointsToRedeem <= self%points) then\n      self%points = self%points - pointsToRedeem\n      print *, \"Redeemed\", pointsToRedeem, \"points. Remaining points:\", self%points\n    else\n      print *, \"Insufficient points to redeem.\"\n    end if\n  end subroutine redeemPoints\n\nend module LoyaltyProgramModule\n```"
  },
  {
    "task": "Design a class for an art gallery with properties for gallery name, location, and exhibitions, and a method to add a new exhibition.",
    "code": "```fortran\nmodule ArtGalleryModule\n    implicit none\n    private\n    type, public :: ArtGallery\n        character(len=:), allocatable :: name\n        character(len=:), allocatable :: location\n        character(len=:), allocatable, dimension(:) :: exhibitions\n    contains\n        procedure, public :: add_exhibition\n    end type ArtGallery\ncontains\n    subroutine add_exhibition(self, exhibition)\n        class(ArtGallery), intent(inout) :: self\n        character(len=*), intent(in) :: exhibition\n        integer :: n\n\n        n = size(self%exhibitions)\n        if (n == 0) then\n            allocate(character(len=len(exhibition)) :: self%exhibitions(1))\n            self%exhibitions(1) = exhibition\n        else\n            self%exhibitions = [self%exhibitions, trim(adjustl(exhibition))]\n        end if\n    end subroutine add_exhibition\nend module ArtGalleryModule\n```"
  },
  {
    "task": "Build a class for a personal blog with attributes for blog name, posts, and a method to add a new post.",
    "code": "```fortran\nmodule BlogModule\n    implicit none\n    type :: Blog\n        character(len=:), allocatable :: blogName\n        character(len=:), allocatable :: posts(:)\n    contains\n        procedure :: addPost\n    end type Blog\n\ncontains\n\n    subroutine addPost(this, newPost)\n        class(Blog), intent(inout) :: this\n        character(len=*), intent(in) :: newPost\n        integer :: n\n\n        n = size(this%posts) + 1\n        if (.not.allocated(this%posts)) then\n            allocate(character(len=len(newPost)) :: this%posts(1))\n        else\n            call move_alloc(this%posts, this%posts, source_mold=character(len=len(newPost)) :: this%posts(n))\n        end if\n        this%posts(n) = newPost\n    end subroutine addPost\n\nend module BlogModule\n```"
  },
  {
    "task": "Implement a class for a mobile application with properties for app name, version, and developer, and a method to update the version.",
    "code": "```fortran\nmodule MobileAppModule\n    implicit none\n    private\n    type, public :: MobileApp\n        character(len=:), allocatable :: app_name\n        character(len=:), allocatable :: version\n        character(len=:), allocatable :: developer\n    contains\n        procedure, public :: update_version\n    end type MobileApp\ncontains\n    subroutine update_version(this, new_version)\n        class(MobileApp), intent(inout) :: this\n        character(len=*), intent(in) :: new_version\n\n        this%version = new_version\n    end subroutine update_version\nend module MobileAppModule\n```"
  },
  {
    "task": "Develop a class for a language translator with attributes for source language, target language, and translation method, and a method to translate a text.",
    "code": "```fortran\nmodule TranslatorModule\n  implicit none\n  private\n  public :: Translator\n\n  type :: Translator\n    character(len=:), allocatable :: source_language\n    character(len=:), allocatable :: target_language\n    character(len=:), allocatable :: method\n  contains\n    procedure :: translate\n  end type Translator\n\ncontains\n\n  function translate(this, text) result(translated_text)\n    class(Translator), intent(in) :: this\n    character(len=*), intent(in) :: text\n    character(len=:), allocatable :: translated_text\n\n    ! Placeholder for translation logic\n    translated_text = text // \" (translated)\"\n  end function translate\n\nend module TranslatorModule\n```"
  },
  {
    "task": "Formulate a class for a culinary school with properties for school name, courses offered, and a method to add a new course.",
    "code": "```fortran\nmodule CulinarySchoolModule\n    implicit none\n    type :: CulinarySchool\n        character(len=100) :: schoolName\n        character(len=100), allocatable :: courses(:)\n    contains\n        procedure :: addCourse\n    end type CulinarySchool\n\ncontains\n\n    subroutine addCourse(self, newCourse)\n        class(CulinarySchool), intent(inout) :: self\n        character(len=*), intent(in) :: newCourse\n        integer :: n\n\n        if (.not.allocated(self%courses)) then\n            allocate(self%courses(1))\n            self%courses(1) = newCourse\n        else\n            n = size(self%courses)\n            allocate(self%courses(n+1))\n            self%courses(1:n) = self%courses(1:n)\n            self%courses(n+1) = newCourse\n        end if\n    end subroutine addCourse\n\nend module CulinarySchoolModule\n```"
  },
  {
    "task": "Construct a class for a musical band with attributes for band name, members, and genre, and a method to add a new member.",
    "code": "```fortran\nmodule band_module\n    implicit none\n    type :: Band\n        character(len=100) :: band_name\n        character(len=100) :: genre\n        character(len=100), allocatable :: members(:)\n    contains\n        procedure :: add_member\n    end type Band\n\ncontains\n\n    subroutine add_member(this, new_member)\n        class(Band), intent(inout) :: this\n        character(len=100), intent(in) :: new_member\n        integer :: n\n\n        n = size(this%members)\n        if (allocated(this%members)) then\n            this%members = [this%members, new_member]\n        else\n            allocate(this%members(1))\n            this%members(1) = new_member\n        end if\n    end subroutine add_member\n\nend module band_module\n```"
  },
  {
    "task": "Create a class for a television series with properties for series title, episodes, and network, and a method to add a new episode.",
    "code": "```fortran\nmodule TVSeriesModule\n    implicit none\n\n    type :: TVSeries\n        character(len=100) :: seriesTitle\n        character(len=100), allocatable :: episodes(:)\n        character(len=100) :: network\n    contains\n        procedure :: addEpisode\n    end type TVSeries\n\ncontains\n\n    subroutine addEpisode(this, newEpisode)\n        class(TVSeries), intent(inout) :: this\n        character(len=100), intent(in) :: newEpisode\n        integer :: n\n\n        if (.not.allocated(this%episodes)) then\n            allocate(this%episodes(1))\n            this%episodes(1) = newEpisode\n        else\n            n = size(this%episodes)\n            call move_alloc(this%episodes, this%episodes, source=resize(this%episodes, n+1))\n            this%episodes(n+1) = newEpisode\n        end if\n    end subroutine addEpisode\n\n    function resize(arr, new_size) result(resized_arr)\n        character(len=100), allocatable, intent(inout) :: arr(:)\n        integer, intent(in) :: new_size\n        character(len=100), allocatable :: resized_arr(:)\n\n        allocate(resized_arr(new_size))\n        resized_arr(:) = ''\n        if (allocated(arr)) then\n            resized_arr(1:size(arr)) = arr\n        end if\n    end function resize\n\nend module TVSeriesModule\n```"
  },
  {
    "task": "Design a class for a wildlife reserve with attributes for reserve name, species protected, and area size, and a method to expand the area.",
    "code": "```fortran\nmodule WildlifeReserveModule\n    implicit none\n    private\n    public :: WildlifeReserve\n\n    type :: WildlifeReserve\n        character(len=100) :: reserveName\n        character(len=100), allocatable :: speciesProtected(:)\n        real :: areaSize\n\n    contains\n        procedure :: expandArea\n    end type WildlifeReserve\n\ncontains\n\n    subroutine expandArea(this, additionalArea)\n        class(WildlifeReserve), intent(inout) :: this\n        real, intent(in) :: additionalArea\n\n        this%areaSize = this%areaSize + additionalArea\n    end subroutine expandArea\n\nend module WildlifeReserveModule\n```"
  },
  {
    "task": "Build a class for a luxury car with properties for brand, model, and price, and a method to update the price.",
    "code": "```fortran\nmodule luxury_car_module\n  implicit none\n  private\n  type, public :: LuxuryCar\n    character(len=:), allocatable :: brand\n    character(len=:), allocatable :: model\n    real :: price\n  contains\n    procedure, public :: update_price\n  end type LuxuryCar\ncontains\n  subroutine update_price(this, new_price)\n    class(LuxuryCar), intent(inout) :: this\n    real, intent(in) :: new_price\n    this%price = new_price\n  end subroutine update_price\nend module luxury_car_module\n```"
  },
  {
    "task": "Implement a class for a scientific journal with attributes for journal name, articles, and impact factor, and a method to add a new article.",
    "code": "```fortran\nmodule journal_module\n    implicit none\n    type :: Journal\n        character(len=100) :: name\n        integer :: num_articles = 0\n        character(len=100), allocatable :: articles(:)\n        real :: impact_factor\n\n    contains\n        procedure :: add_article\n    end type Journal\n\ncontains\n\n    subroutine add_article(this, new_article)\n        class(Journal), intent(inout) :: this\n        character(len=100), intent(in) :: new_article\n\n        ! Allocate more space and add the new article\n        if (.not. allocated(this%articles)) then\n            allocate(this%articles(1))\n        else\n            call move_alloc(this%articles, this%articles)\n            allocate(this%articles(this%num_articles + 1))\n            this%articles(:this%num_articles) = this%articles  ! Copy existing articles\n        end if\n\n        this%articles(this%num_articles + 1) = new_article\n        this%num_articles = this%num_articles + 1\n    end subroutine add_article\n\nend module journal_module\n```"
  },
  {
    "task": "Develop a class for a historical monument with properties for monument name, location, and year established, and a method to update the location.",
    "code": "```fortran\nmodule MonumentModule\n    implicit none\n    type :: Monument\n        character(len=100) :: name\n        character(len=100) :: location\n        integer :: year_established\n    contains\n        procedure :: update_location\n    end type Monument\ncontains\n    subroutine update_location(this, new_location)\n        class(Monument), intent(inout) :: this\n        character(len=100), intent(in) :: new_location\n        this%location = new_location\n    end subroutine update_location\nend module MonumentModule\n```"
  },
  {
    "task": "Formulate a class for an educational course with attributes for course title, instructor, and syllabus, and a method to update the syllabus.",
    "code": "```fortran\nmodule CourseModule\n    implicit none\n    type :: Course\n        character(len=100) :: title\n        character(len=100) :: instructor\n        character(len=500) :: syllabus\n    contains\n        procedure :: update_syllabus\n    end type Course\ncontains\n    subroutine update_syllabus(self, new_syllabus)\n        class(Course), intent(inout) :: self\n        character(len=500), intent(in) :: new_syllabus\n        self%syllabus = new_syllabus\n    end subroutine update_syllabus\nend module CourseModule\n```"
  },
  {
    "task": "Construct a class for a city park with properties for park name, facilities, and opening hours, and a method to add a new facility.",
    "code": "```fortran\nmodule park_module\n    implicit none\n    type :: CityPark\n        character(len=:), allocatable :: park_name\n        character(len=:), allocatable :: facilities(:)\n        character(len=:), allocatable :: opening_hours\n    contains\n        procedure :: add_facility\n    end type CityPark\n\ncontains\n\n    subroutine add_facility(this, new_facility)\n        class(CityPark), intent(inout) :: this\n        character(len=*), intent(in) :: new_facility\n        integer :: n\n\n        n = size(this%facilities)\n        allocate(character(len=len(new_facility)) :: this%facilities(n+1))\n        this%facilities(1:n) = this%facilities\n        this%facilities(n+1) = new_facility\n    end subroutine add_facility\n\nend module park_module\n```"
  },
  {
    "task": "Create a class for a fitness class with attributes for class name, instructor, and schedule, and a method to update the schedule.",
    "code": "```fortran\nmodule fitness_module\n  implicit none\n  type :: FitnessClass\n    character(len=100) :: class_name\n    character(len=100) :: instructor\n    character(len=100) :: schedule\n  contains\n    procedure :: update_schedule\n  end type FitnessClass\n\ncontains\n\n  subroutine update_schedule(this, new_schedule)\n    class(FitnessClass), intent(inout) :: this\n    character(len=100), intent(in) :: new_schedule\n    this%schedule = new_schedule\n  end subroutine update_schedule\n\nend module fitness_module\n```"
  },
  {
    "task": "Design a class for a virtual reality game with properties for game name, platform, and VR compatibility, and a method to change the platform.",
    "code": "```fortran\nmodule game_module\n  implicit none\n  private\n  public :: VRGame\n\n  type :: VRGame\n    character(len=:), allocatable :: name\n    character(len=:), allocatable :: platform\n    logical :: vr_compatible\n  contains\n    procedure :: change_platform\n  end type VRGame\n\ncontains\n\n  subroutine change_platform(self, new_platform)\n    class(VRGame), intent(inout) :: self\n    character(len=*), intent(in) :: new_platform\n\n    self%platform = new_platform\n  end subroutine change_platform\n\nend module game_module\n```"
  },
  {
    "task": "Build a class for a mountain range with attributes for range name, highest peak, and countries covered, and a method to add a new peak.",
    "code": "```fortran\nmodule MountainRangeModule\n    implicit none\n\n    type :: MountainRange\n        character(len=100) :: range_name\n        character(len=100) :: highest_peak\n        character(len=100), allocatable :: countries_covered(:)\n    contains\n        procedure :: add_peak\n    end type MountainRange\n\ncontains\n\n    subroutine add_peak(this, new_peak)\n        class(MountainRange), intent(inout) :: this\n        character(len=100), intent(in) :: new_peak\n\n        this%highest_peak = new_peak\n    end subroutine add_peak\n\nend module MountainRangeModule\n```"
  },
  {
    "task": "Implement a class for a documentary film with properties for title, director, and subject, and a method to update the subject.",
    "code": "```fortran\nmodule documentary_module\n  implicit none\n  private\n  type, public :: Documentary\n    character(len=100) :: title\n    character(len=100) :: director\n    character(len=100) :: subject\n  contains\n    procedure :: update_subject\n  end type Documentary\n\ncontains\n\n  subroutine update_subject(this, new_subject)\n    class(Documentary), intent(inout) :: this\n    character(len=100), intent(in) :: new_subject\n    this%subject = new_subject\n  end subroutine update_subject\n\nend module documentary_module\n```"
  },
  {
    "task": "Develop a class for a classical music composition with attributes for composition name, composer, and duration, and a method to change the duration.",
    "code": "```fortran\nmodule MusicCompositionModule\n  implicit none\n  private\n  type, public :: MusicComposition\n    character(len=100) :: compositionName\n    character(len=100) :: composer\n    real :: duration\n  contains\n    procedure :: changeDuration\n  end type MusicComposition\n\ncontains\n\n  subroutine changeDuration(this, newDuration)\n    class(MusicComposition), intent(inout) :: this\n    real, intent(in) :: newDuration\n\n    this%duration = newDuration\n  end subroutine changeDuration\n\nend module MusicCompositionModule\n```"
  },
  {
    "task": "Formulate a class for a public library with properties for library name, books available, and membership, and a method to add a new book.",
    "code": "```fortran\nmodule LibraryModule\n  implicit none\n\n  type :: Library\n    character(len=100) :: libraryName\n    character(len=100), allocatable :: books(:)\n    integer :: membership\n  contains\n    procedure :: addBook\n  end type Library\n\ncontains\n\n  subroutine addBook(self, newBook)\n    class(Library), intent(inout) :: self\n    character(len=100), intent(in) :: newBook\n    integer :: n\n\n    ! Determine the current number of books\n    if (allocated(self%books)) then\n      n = size(self%books)\n    else\n      n = 0\n    end if\n\n    ! Add the new book\n    call move_alloc(self%books, self%books, source=[self%books, newBook], mold=[character(len=100)::])\n\n  end subroutine addBook\n\nend module LibraryModule\n```"
  },
  {
    "task": "Construct a class for a tech startup with attributes for startup name, founder, and funding, and a method to raise additional funding.",
    "code": "```fortran\nmodule TechStartupModule\n  implicit none\n  private\n  public :: TechStartup\n\n  type :: TechStartup\n    character(len=:), allocatable :: startup_name\n    character(len=:), allocatable :: founder\n    real :: funding\n  contains\n    procedure :: raise_funding\n  end type TechStartup\n\ncontains\n\n  subroutine raise_funding(self, amount)\n    class(TechStartup), intent(inout) :: self\n    real, intent(in) :: amount\n\n    self%funding = self%funding + amount\n  end subroutine raise_funding\n\nend module TechStartupModule\n```"
  }
]