[
  {
    "task": "Define an integer variable and assign it a value.",
    "code": "```fortran\nprogram define_integer\n    implicit none\n    integer :: my_variable\n\n    my_variable = 42\nend program define_integer\n```"
  },
  {
    "task": "Create a string variable to store your full name.",
    "code": "```fortran\nprogram StoreName\n    implicit none\n    character(len=50) :: fullName\n\n    fullName = \"Your Full Name Here\"\nend program StoreName\n```"
  },
  {
    "task": "Define a boolean variable to represent if a feature is enabled.",
    "code": "```fortran\nlogical :: feature_enabled\n```"
  },
  {
    "task": "Declare a floating-point variable for storing temperature in Celsius.",
    "code": "```fortran\nreal :: temperatureCelsius\n```"
  },
  {
    "task": "Create a variable to hold the current date and time.",
    "code": "```fortran\nprogram CurrentDateTime\n    implicit none\n    character(len=30) :: currentDateTime\n\n    call date_and_time(values=currentDateTime)\n    print *, 'Current Date and Time: ', trim(currentDateTime)\nend program CurrentDateTime\n```"
  },
  {
    "task": "Define a list variable to store a collection of favorite book titles.",
    "code": "```fortran\nprogram favorite_books\n    implicit none\n    character(len=100), dimension(:), allocatable :: favorite_books\n\n    allocate(favorite_books(5))\n    favorite_books = [ \"The Great Gatsby\", \"To Kill a Mockingbird\", &\n                       \"1984\", \"Pride and Prejudice\", \"Moby Dick\" ]\nend program favorite_books\n```"
  },
  {
    "task": "Create a dictionary variable to map student names to their grades.",
    "code": "```fortran\nprogram student_grades\n    implicit none\n    character(len=20), dimension(:), allocatable :: student_names\n    integer, dimension(:), allocatable :: grades\n    allocate(student_names(3))\n    allocate(grades(3))\n    \n    student_names = ['Alice', 'Bob', 'Charlie']\n    grades = [90, 85, 95]\n    \n    print*, 'Student:', student_names(1), 'Grade:', grades(1)\n    print*, 'Student:', student_names(2), 'Grade:', grades(2)\n    print*, 'Student:', student_names(3), 'Grade:', grades(3)\n    \nend program student_grades\n```"
  },
  {
    "task": "Declare a constant variable to represent the mathematical value of pi.",
    "code": "```fortran\nprogram define_pi\n  implicit none\n\n  real, parameter :: pi = 3.141592653589793\n\nend program define_pi\n```"
  },
  {
    "task": "Define a variable to store the user's age and ensure it is an integer.",
    "code": "```fortran\nprogram store_age\n    implicit none\n    integer :: user_age\nend program store_age\n```"
  },
  {
    "task": "Create a variable to hold a complex number.",
    "code": "```fortran\nprogram complex_example\n  implicit none\n  complex :: complex_number\n\n  ! Example assignment\n  complex_number = (3.0, 4.0)\n\nend program complex_example\n```"
  },
  {
    "task": "Define a variable to store a multiline text as a string.",
    "code": "```fortran\nprogram multiline_text\n    implicit none\n    character(len=300) :: multiline_string\n\n    multiline_string = 'This is a multiline string. ' // &\n                       'It contains multiple lines of text. ' // &\n                       'Fortran can handle multiline strings.'\n\nend program multiline_text\n```"
  },
  {
    "task": "Declare a variable to store a person's height in meters as a floating-point number.",
    "code": "```fortran\nreal :: height_in_meters\n```"
  },
  {
    "task": "Define a variable to hold the result of a mathematical expression.",
    "code": "```fortran\nprogram VariableDefinition\n    implicit none\n    real :: result\n\n    result = (3.0 + 5.0) * 2.0 / (4.0 - 1.0)\n\nend program VariableDefinition\n```"
  },
  {
    "task": "Create a variable to store a person's favorite color.",
    "code": "```fortran\nprogram favoriteColor\n    implicit none\n    character(len=20) :: favoriteColor\nend program favoriteColor\n```"
  },
  {
    "task": "Declare a variable to store the number of items in a shopping cart.",
    "code": "```fortran\nprogram ShoppingCart\n    implicit none\n    integer :: numberOfItems\nend program ShoppingCart\n```"
  },
  {
    "task": "Define a variable to store a user\u2019s last login timestamp.",
    "code": "```fortran\nPROGRAM UserLastLogin\n  IMPLICIT NONE\n  CHARACTER(LEN=19) :: lastLoginTimestamp = '2023-10-15 14:30:00'\nEND PROGRAM UserLastLogin\n```"
  },
  {
    "task": "Create a variable to hold a function reference.",
    "code": "```fortran\nprogram function_reference\n  implicit none\n\n  interface\n     real function myFunction(x)\n       real, intent(in) :: x\n     end function myFunction\n  end interface\n\n  procedure(myFunction), pointer :: funcPtr\n\n  funcPtr => myFunction\n\nend program function_reference\n```"
  },
  {
    "task": "Declare a variable to store a configuration setting.",
    "code": "```fortran\nprogram config_setting\n    implicit none\n    integer :: config_setting\nend program config_setting\n```"
  },
  {
    "task": "Define a variable to keep track of a player's score in a game.",
    "code": "```fortran\nprogram player_score\n    implicit none\n    integer :: playerScore\n\n    playerScore = 0\n\nend program player_score\n```"
  },
  {
    "task": "Create a variable to store a list of prime numbers.",
    "code": "```fortran\nprogram prime_numbers\n    implicit none\n    integer, dimension(:), allocatable :: primes\n\n    ! Example: Allocating space and initializing with the first few prime numbers\n    allocate(primes(5))\n    primes = [2, 3, 5, 7, 11]\n\n    ! The list can be extended as needed\nend program prime_numbers\n```"
  },
  {
    "task": "Declare a variable to represent the state of a light switch (on/off).",
    "code": "```fortran\nlogical :: light_switch\n```"
  },
  {
    "task": "Define a variable to store an email address.",
    "code": "```fortran\nprogram store_email\n    implicit none\n    character(len=100) :: email_address\nend program store_email\n```"
  },
  {
    "task": "Create a variable to hold the URL of a website.",
    "code": "```fortran\nprogram website_url\n    implicit none\n    character(len=100) :: url\n\n    url = \"http://www.example.com\"\nend program website_url\n```"
  },
  {
    "task": "Declare a variable to store the status of a network connection.",
    "code": "```fortran\nPROGRAM NetworkStatus\n  IMPLICIT NONE\n  CHARACTER(LEN=20) :: connectionStatus\nEND PROGRAM NetworkStatus\n```"
  },
  {
    "task": "Define a variable to hold the result of a database query.",
    "code": "```fortran\nprogram query_result\n    implicit none\n    character(len=1024) :: queryResult\nend program query_result\n```"
  },
  {
    "task": "Create a variable to store the dimensions of a rectangle.",
    "code": "```fortran\nprogram rectangle_dimensions\n    implicit none\n    real :: length, width\n\n    ! The variables length and width will store the dimensions of the rectangle.\n    length = 0.0\n    width = 0.0\n\nend program rectangle_dimensions\n```"
  },
  {
    "task": "Declare a variable to hold the name of a file to be opened.",
    "code": "```fortran\ncharacter(len=256) :: filename\n```"
  },
  {
    "task": "Define a variable to store a person's phone number.",
    "code": "```fortran\nprogram storePhoneNumber\n    implicit none\n    character(len=15) :: phoneNumber\n\n    ! Example usage\n    phoneNumber = '+1234567890'\nend program storePhoneNumber\n```"
  },
  {
    "task": "Create a variable to store the total cost of items in a cart.",
    "code": "```fortran\nprogram cart_total\n    implicit none\n    real :: total_cost\n\n    total_cost = 0.0\n\n    print *, 'Total cost:', total_cost\nend program cart_total\n```"
  },
  {
    "task": "Declare a variable to store a list of to-do tasks.",
    "code": "```fortran\ncharacter(len=100), dimension(10) :: todo_tasks\n```"
  },
  {
    "task": "Define a variable to hold a user's profile information.",
    "code": "```fortran\nprogram userProfile\n    implicit none\n\n    type :: UserProfile\n        character(len=50) :: name\n        integer :: age\n        character(len=100) :: email\n    end type UserProfile\n\n    type(UserProfile) :: user\n\nend program userProfile\n```"
  },
  {
    "task": "Create a variable to store an array of sensor readings.",
    "code": "```fortran\nreal :: sensor_readings(100)\n```"
  },
  {
    "task": "Declare a variable to represent the number of attempts a user has to log in.",
    "code": "```fortran\ninteger :: number_of_attempts\n```"
  },
  {
    "task": "Define a variable to store the maximum capacity of a container.",
    "code": "```fortran\nprogram ContainerCapacity\n    implicit none\n    integer :: max_capacity\n\n    max_capacity = 100 ! Example value for maximum capacity\nend program ContainerCapacity\n```"
  },
  {
    "task": "Create a variable to store a list of city names.",
    "code": "```fortran\nprogram city_names\n    implicit none\n    character(len=100), dimension(10) :: cities\nend program city_names\n```"
  },
  {
    "task": "Declare a variable to hold the age of a historical artifact.",
    "code": "```fortran\ninteger :: artifact_age\n```"
  },
  {
    "task": "Define a variable to store an error message.",
    "code": "```fortran\ncharacter(len=100) :: errorMessage\n```"
  },
  {
    "task": "Create a variable to hold the value of a currency conversion rate.",
    "code": "```fortran\nPROGRAM CurrencyConversion\n  REAL :: conversion_rate\n  conversion_rate = 0.0\nEND PROGRAM CurrencyConversion\n```"
  },
  {
    "task": "Declare a variable to store the result of a coin toss (heads/tails).",
    "code": "```fortran\ncharacter(len=5) :: coin_toss_result\n```"
  },
  {
    "task": "Define a variable to track the number of likes on a post.",
    "code": "```fortran\nprogram track_likes\n    integer :: number_of_likes\n\n    ! Initial value\n    number_of_likes = 0\n\n    ! Code to update number_of_likes goes here\n\nend program track_likes\n```"
  },
  {
    "task": "Create a variable to hold the settings of a user's preferences.",
    "code": "```fortran\nprogram UserPreferences\n    implicit none\n    \n    type :: Preferences\n        character(len=100) :: theme\n        integer :: fontSize\n        logical :: notificationsEnabled\n    end type Preferences\n\n    type(Preferences) :: userSettings\n\n    ! Initialize the userSettings variable\n    userSettings%theme = \"Light\"\n    userSettings%fontSize = 12\n    userSettings%notificationsEnabled = .true.\n\nend program UserPreferences\n```"
  },
  {
    "task": "Declare a variable to store a person's birthdate.",
    "code": "```fortran\ncharacter(len=10) :: birthdate\n```"
  },
  {
    "task": "Define a variable to represent a chess piece's position on a board.",
    "code": "```fortran\nprogram chess_position\n    implicit none\n    integer :: piece_row\n    integer :: piece_column\n\n    piece_row = 1\n    piece_column = 1\n\nend program chess_position\n```"
  },
  {
    "task": "Create a variable to store the number of pages in a book.",
    "code": "```fortran\nprogram BookPages\n    implicit none\n    integer :: num_pages\n\n    ! Example usage\n    num_pages = 300\n    print *, 'Number of pages in the book:', num_pages\nend program BookPages\n```"
  },
  {
    "task": "Declare a variable to store the highest score achieved in a game.",
    "code": "```fortran\nPROGRAM GameScore\n  INTEGER :: highestScore\nEND PROGRAM GameScore\n```"
  },
  {
    "task": "Define a variable to store a list of ingredients for a recipe.",
    "code": "```fortran\nprogram Recipe\n    implicit none\n    character(len=20), dimension(5) :: ingredients\n\n    ingredients(1) = \"Flour\"\n    ingredients(2) = \"Sugar\"\n    ingredients(3) = \"Eggs\"\n    ingredients(4) = \"Butter\"\n    ingredients(5) = \"Milk\"\nend program Recipe\n```"
  },
  {
    "task": "Create a variable to store the speed of a vehicle in km/h.",
    "code": "```fortran\nprogram VehicleSpeed\n    implicit none\n    real :: speed_kmh\n\n    ! Example assignment\n    speed_kmh = 100.0\nend program VehicleSpeed\n```"
  },
  {
    "task": "Declare a variable to hold a person's middle initial.",
    "code": "```fortran\ncharacter :: middle_initial\n```"
  },
  {
    "task": "Define a variable to store the result of a temperature conversion.",
    "code": "```fortran\nprogram temperature_conversion\n    implicit none\n    real :: temperature_result\nend program temperature_conversion\n```"
  },
  {
    "task": "Create a variable to hold a list of registered usernames.",
    "code": "```fortran\nprogram username_list\n    implicit none\n    character(len=30), dimension(:), allocatable :: registered_usernames\nend program username_list\n```"
  },
  {
    "task": "Declare a variable to store the name of a country.",
    "code": "```fortran\ncharacter(len=100) :: country_name\n```"
  },
  {
    "task": "Define a variable to track the number of visits to a website.",
    "code": "```fortran\nPROGRAM TrackVisits\n    INTEGER :: number_of_visits\n\n    ! Initialize the variable\n    number_of_visits = 0\n\nEND PROGRAM TrackVisits\n```"
  },
  {
    "task": "Create a variable to store the title of a movie.",
    "code": "```fortran\nprogram MovieTitle\n    implicit none\n    character(len=100) :: movieTitle\nend program MovieTitle\n```"
  },
  {
    "task": "Declare a variable to hold the result of a random number generator.",
    "code": "```fortran\nprogram random_number_example\n    implicit none\n    real :: random_result\n\nend program random_number_example\n```"
  },
  {
    "task": "Define a variable to store a binary value.",
    "code": "```fortran\nPROGRAM BinaryVariable\n  IMPLICIT NONE\n  LOGICAL :: binaryValue\n\n  binaryValue = .TRUE.\nEND PROGRAM BinaryVariable\n```"
  },
  {
    "task": "Create a variable to store a student's attendance record.",
    "code": "```fortran\nprogram student_attendance\n    implicit none\n    logical :: student_attendance_record\nend program student_attendance\n```"
  },
  {
    "task": "Declare a variable to represent a traffic light's color.",
    "code": "```fortran\nPROGRAM TrafficLight\n  IMPLICIT NONE\n  CHARACTER(LEN=20) :: trafficLightColor\nEND PROGRAM TrafficLight\n```"
  },
  {
    "task": "Define a variable to store a person's occupation.",
    "code": "```fortran\nprogram OccupationStorage\n    implicit none\n    character(len=50) :: occupation\n\n    ! Example assignment\n    occupation = \"Software Engineer\"\nend program OccupationStorage\n```"
  },
  {
    "task": "Create a variable to store the volume level of an audio player.",
    "code": "```fortran\nprogram AudioPlayer\n    implicit none\n    integer :: volumeLevel\n\n    volumeLevel = 50  ! Example initialization\nend program AudioPlayer\n```"
  },
  {
    "task": "Declare a variable to store the dimensions of a 3D object.",
    "code": "```fortran\nreal :: length, width, height\n```"
  },
  {
    "task": "Define a variable to hold the value of a stock price.",
    "code": "```fortran\nprogram stock_price\n    implicit none\n    real :: stock_price\nend program stock_price\n```"
  },
  {
    "task": "Create a variable to store a list of holiday destinations.",
    "code": "```fortran\nprogram holiday_destinations\n    implicit none\n    character(len=50), dimension(5) :: destinations\n\n    destinations = ['Paris', 'Tokyo', 'New York', 'Sydney', 'Rome']\nend program holiday_destinations\n```"
  },
  {
    "task": "Declare a variable to store the status of an application process.",
    "code": "```fortran\nPROGRAM ApplicationStatus\n  IMPLICIT NONE\n  CHARACTER(LEN=20) :: status\nEND PROGRAM ApplicationStatus\n```"
  },
  {
    "task": "Define a variable to store the current phase of the moon.",
    "code": "```fortran\nprogram MoonPhase\n    implicit none\n    character(len=20) :: currentMoonPhase\nend program MoonPhase\n```"
  },
  {
    "task": "Create a variable to hold the amount of memory used by an application.",
    "code": "```fortran\nPROGRAM MemoryUsage\n  IMPLICIT NONE\n  INTEGER :: memoryUsed\nEND PROGRAM MemoryUsage\n```"
  },
  {
    "task": "Declare a variable to store the current version of a software application.",
    "code": "```fortran\nprogram versionControl\n    implicit none\n    character(len=10) :: currentVersion\n\n    currentVersion = \"v1.0.0\"\nend program versionControl\n```"
  },
  {
    "task": "Define a variable to hold the number of chapters in a book.",
    "code": "```fortran\nprogram BookChapters\n    implicit none\n    integer :: numChapters\nend program BookChapters\n```"
  },
  {
    "task": "Create a variable to store information about a car's fuel efficiency.",
    "code": "```fortran\nprogram CarFuelEfficiency\n    implicit none\n    real :: fuelEfficiency\n\n    ! Example assignment\n    fuelEfficiency = 25.5  ! miles per gallon\n\nend program CarFuelEfficiency\n```"
  },
  {
    "task": "Declare a variable to store a user's role in a system.",
    "code": "```fortran\nprogram userRole\n    implicit none\n    character(len=20) :: userRole\nend program userRole\n```"
  },
  {
    "task": "Define a variable to store a list of programming languages known.",
    "code": "```fortran\nprogram LanguageList\n    implicit none\n    character(len=20), dimension(5) :: known_languages\n\n    known_languages = (/ \"Python\", \"Fortran\", \"C++\", \"Java\", \"Ruby\" /)\nend program LanguageList\n```"
  },
  {
    "task": "Create a variable to track the progress of a download.",
    "code": "```fortran\nprogram download_tracker\n    implicit none\n    real :: download_progress\nend program download_tracker\n```"
  },
  {
    "task": "Declare a variable to store the outcome of a survey question.",
    "code": "```fortran\nPROGRAM SurveyOutcome\n    IMPLICIT NONE\n    INTEGER :: outcome\n\n    ! Variable 'outcome' will be used to store the result of a survey question\nEND PROGRAM SurveyOutcome\n```"
  },
  {
    "task": "Define a variable to hold a personal identification number.",
    "code": "```fortran\nprogram define_variable\n    implicit none\n    integer :: personal_id\n\n    ! Example assignment\n    personal_id = 123456789\nend program define_variable\n```"
  },
  {
    "task": "Create a variable to store the current weather conditions.",
    "code": "```fortran\nprogram WeatherCondition\n    implicit none\n    character(len=100) :: currentWeather\n\n    ! Example assignment\n    currentWeather = \"Sunny with a chance of rain\"\nend program WeatherCondition\n```"
  },
  {
    "task": "Declare a variable to hold the result of a multiplication operation.",
    "code": "```fortran\nprogram multiplication_result\n    implicit none\n    real :: result\n\n    ! Example usage\n    result = 5.0 * 3.0\nend program multiplication_result\n```"
  },
  {
    "task": "Define a variable to store the winner of a competition.",
    "code": "```fortran\nprogram competition_winner\n    implicit none\n    character(len=100) :: winner\n\n    ! Example usage\n    winner = \"John Doe\"\n    print *, \"The winner is: \", winner\nend program competition_winner\n```"
  },
  {
    "task": "Create a variable to hold the name of a restaurant.",
    "code": "```fortran\nprogram RestaurantName\n    implicit none\n    character(len=100) :: restaurantName\nend program RestaurantName\n```"
  },
  {
    "task": "Declare a variable to store the number of floors in a building.",
    "code": "```fortran\nPROGRAM BuildingFloors\n  INTEGER :: number_of_floors\nEND PROGRAM BuildingFloors\n```"
  },
  {
    "task": "Define a variable to store a person's signature.",
    "code": "```fortran\nprogram signature_example\n    implicit none\n    character(len=100) :: signature\nend program signature_example\n```"
  },
  {
    "task": "Create a variable to store the average grade of a class.",
    "code": "```fortran\nprogram AverageGrade\n    implicit none\n    real :: averageGrade\n\nend program AverageGrade\n```"
  },
  {
    "task": "Declare a variable to store the length of a movie in minutes.",
    "code": "```fortran\nprogram movie_length\n  implicit none\n  integer :: length_of_movie\nend program movie_length\n```"
  },
  {
    "task": "Define a variable to store the details of a meeting schedule.",
    "code": "```fortran\nprogram MeetingSchedule\n    implicit none\n    character(len=100) :: meetingDetails\n\n    meetingDetails = \"Team meeting on Monday at 10 AM in Room 101\"\nend program MeetingSchedule\n```"
  },
  {
    "task": "Create a variable to track the number of active users on a platform.",
    "code": "```fortran\nprogram ActiveUsersTracker\n    implicit none\n    integer :: active_users\n\n    ! Initialize the variable\n    active_users = 0\n\n    ! Other code logic would go here...\n\nend program ActiveUsersTracker\n```"
  },
  {
    "task": "Declare a variable to store the resolution of a screen.",
    "code": "```fortran\nprogram ScreenResolution\n    implicit none\n    integer :: screenResolution\nend program ScreenResolution\n```"
  },
  {
    "task": "Define a variable to store the content of a blog post.",
    "code": "```fortran\nprogram BlogPost\n    implicit none\n    character(len=1000) :: blogContent\nend program BlogPost\n```"
  },
  {
    "task": "Create a variable to hold a list of email contacts.",
    "code": "```fortran\nprogram email_contacts\n    implicit none\n    character(len=100), dimension(:), allocatable :: emailContacts\n\n    ! Example allocation for demonstration\n    allocate(emailContacts(10))\n\n    ! Assigning values to the array for demonstration\n    emailContacts(1) = 'example1@example.com'\n    emailContacts(2) = 'example2@example.com'\n    emailContacts(3) = 'example3@example.com'\n    ! Further assignments can be made as needed\n\nend program email_contacts\n```"
  },
  {
    "task": "Declare a variable to store the duration of an event.",
    "code": "```fortran\nprogram EventDuration\n    implicit none\n    real :: duration\nend program EventDuration\n```"
  },
  {
    "task": "Define a variable to hold a list of completed tasks.",
    "code": "```fortran\nprogram task_list\n    implicit none\n    character(len=100), dimension(:), allocatable :: completed_tasks\nend program task_list\n```"
  },
  {
    "task": "Create a variable to store the name of a musical instrument.",
    "code": "```fortran\nPROGRAM MusicalInstrument\n  IMPLICIT NONE\n  CHARACTER(LEN=50) :: instrumentName\nEND PROGRAM MusicalInstrument\n```"
  },
  {
    "task": "Declare a variable to hold the result of a boolean expression.",
    "code": "```fortran\nprogram BooleanVariable\n  implicit none\n  logical :: result\nend program BooleanVariable\n```"
  },
  {
    "task": "Define a variable to store the name of a planet.",
    "code": "```fortran\nprogram planet_name\n    implicit none\n    character(len=20) :: planet\n\nend program planet_name\n```"
  },
  {
    "task": "Create a variable to store the balance of a bank account.",
    "code": "```fortran\nprogram bank_account_balance\n    implicit none\n    real :: balance\nend program bank_account_balance\n```"
  },
  {
    "task": "Declare a variable to store the outcome of a dice roll.",
    "code": "```fortran\nprogram DiceRoll\n    implicit none\n    integer :: diceOutcome\nend program DiceRoll\n```"
  },
  {
    "task": "Define a variable to store the current exchange rate.",
    "code": "```fortran\nPROGRAM ExchangeRate\n  REAL :: currentExchangeRate\nEND PROGRAM ExchangeRate\n```"
  },
  {
    "task": "Create a variable to hold the name of a university.",
    "code": "```fortran\nprogram university_name\n    implicit none\n    character(len=50) :: universityName\nend program university_name\n```"
  }
]