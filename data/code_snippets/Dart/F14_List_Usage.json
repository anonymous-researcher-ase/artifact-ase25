[
  {
    "task": "Create a list of the first ten positive integers and calculate their sum.",
    "code": "```dart\nvoid main() {\n  List<int> numbers = List.generate(10, (index) => index + 1);\n  int sum = numbers.reduce((a, b) => a + b);\n  print(sum);\n}\n```"
  },
  {
    "task": "Write a program to reverse the order of elements in a given list.",
    "code": "```dart\nvoid main() {\n  List<int> numbers = [1, 2, 3, 4, 5];\n  List<int> reversedNumbers = numbers.reversed.toList();\n  print(reversedNumbers);\n}\n```"
  },
  {
    "task": "Implement a function that takes a list and returns the list with duplicates removed.",
    "code": "```dart\nList<T> removeDuplicates<T>(List<T> items) {\n  return items.toSet().toList();\n}\n```"
  },
  {
    "task": "Create a list of names and sort them in alphabetical order.",
    "code": "```dart\nvoid main() {\n  List<String> names = ['John', 'Alice', 'Bob', 'Daisy'];\n  names.sort();\n  print(names);\n}\n```"
  },
  {
    "task": "Write a function that appends a new element to an existing list.",
    "code": "```dart\nvoid appendElement(List<dynamic> list, dynamic element) {\n  list.add(element);\n}\n```"
  },
  {
    "task": "Generate a list of the first 20 even numbers.",
    "code": "```dart\nvoid main() {\n  List<int> evenNumbers = List.generate(20, (index) => 2 * index);\n  print(evenNumbers);\n}\n```"
  },
  {
    "task": "Create a nested list (a list of lists) and access an element from the inner list.",
    "code": "```dart\nvoid main() {\n  List<List<int>> nestedList = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ];\n\n  int element = nestedList[1][2];\n  print(element);\n}\n```"
  },
  {
    "task": "Write a program that finds the maximum value in a list of integers.",
    "code": "```dart\nvoid main() {\n  List<int> numbers = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5];\n  int maxValue = numbers[0];\n\n  for (int i = 1; i < numbers.length; i++) {\n    if (numbers[i] > maxValue) {\n      maxValue = numbers[i];\n    }\n  }\n\n  print('Maximum value: $maxValue');\n}\n```"
  },
  {
    "task": "Implement a function to merge two lists into a single list without duplicates.",
    "code": "```dart\nList<T> mergeLists<T>(List<T> list1, List<T> list2) {\n  return List<T>.from(Set<T>.from(list1)..addAll(list2));\n}\n```"
  },
  {
    "task": "Create a list from user input, then display the list in reverse order.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  List<String> userInputList = [];\n  \n  print('Enter items for the list (type \"done\" to finish):');\n  \n  while (true) {\n    String? input = stdin.readLineSync();\n    if (input == null || input.toLowerCase() == 'done') {\n      break;\n    }\n    userInputList.add(input);\n  }\n  \n  List<String> reversedList = userInputList.reversed.toList();\n  print('Reversed list: $reversedList');\n}\n```"
  },
  {
    "task": "Write a function that takes a list and returns a new list containing only the even numbers.",
    "code": "```dart\nList<int> getEvenNumbers(List<int> numbers) {\n  return numbers.where((number) => number.isEven).toList();\n}\n```"
  },
  {
    "task": "Generate a list of squares for the numbers 1 through 10.",
    "code": "```dart\nvoid main() {\n  List<int> squares = [for (var i = 1; i <= 10; i++) i * i];\n  print(squares);\n}\n```"
  },
  {
    "task": "Create a list of floating-point numbers and find their average.",
    "code": "```dart\nvoid main() {\n  List<double> numbers = [3.5, 7.2, 4.8, 6.0, 9.1];\n  double sum = numbers.reduce((a, b) => a + b);\n  double average = sum / numbers.length;\n  print('Average: $average');\n}\n```"
  },
  {
    "task": "Implement a program to rotate the elements of a list to the right by a given number of steps.",
    "code": "```dart\nList<int> rotateList(List<int> list, int steps) {\n  int length = list.length;\n  if (length == 0 || steps % length == 0) return list;\n  \n  steps = steps % length;\n  return list.sublist(length - steps)..addAll(list.sublist(0, length - steps));\n}\n\nvoid main() {\n  List<int> numbers = [1, 2, 3, 4, 5];\n  int steps = 2;\n  List<int> rotatedList = rotateList(numbers, steps);\n  print(rotatedList); // Output: [4, 5, 1, 2, 3]\n}\n```"
  },
  {
    "task": "Write a function that checks if a list is a palindrome (reads the same forwards and backwards).",
    "code": "```dart\nbool isPalindrome(List<dynamic> list) {\n  for (int i = 0; i < list.length ~/ 2; i++) {\n    if (list[i] != list[list.length - 1 - i]) {\n      return false;\n    }\n  }\n  return true;\n}\n```"
  },
  {
    "task": "Create a list of random integers and count how many are greater than 50.",
    "code": "```dart\nimport 'dart:math';\n\nvoid main() {\n  List<int> randomIntegers = List.generate(10, (_) => Random().nextInt(100));\n  int count = randomIntegers.where((int number) => number > 50).length;\n  print('Random integers: $randomIntegers');\n  print('Count greater than 50: $count');\n}\n```"
  },
  {
    "task": "Write a program that removes the first occurrence of a specified element from a list.",
    "code": "```dart\nvoid main() {\n  List<int> numbers = [1, 2, 3, 4, 5, 3];\n  int elementToRemove = 3;\n\n  removeFirstOccurrence(numbers, elementToRemove);\n  print(numbers);\n}\n\nvoid removeFirstOccurrence(List<int> list, int element) {\n  int index = list.indexOf(element);\n  if (index != -1) {\n    list.removeAt(index);\n  }\n}\n```"
  },
  {
    "task": "Implement a function that takes two lists and returns a list containing their intersection.",
    "code": "```dart\nList<T> intersection<T>(List<T> list1, List<T> list2) {\n  return list1.where((element) => list2.contains(element)).toList();\n}\n```"
  },
  {
    "task": "Create a list of prime numbers less than 100.",
    "code": "```dart\nvoid main() {\n  List<int> primeNumbers = [\n    2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, \n    53, 59, 61, 67, 71, 73, 79, 83, 89, 97\n  ];\n  print(primeNumbers);\n}\n```"
  },
  {
    "task": "Write a function to split a list into two lists: one with even numbers and one with odd numbers.",
    "code": "```dart\nvoid splitEvenOdd(List<int> numbers, List<int> even, List<int> odd) {\n  for (var number in numbers) {\n    if (number.isEven) {\n      even.add(number);\n    } else {\n      odd.add(number);\n    }\n  }\n}\n\nvoid main() {\n  List<int> numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  List<int> even = [];\n  List<int> odd = [];\n\n  splitEvenOdd(numbers, even, odd);\n\n  print('Even numbers: $even');\n  print('Odd numbers: $odd');\n}\n```"
  },
  {
    "task": "Create a list of strings and convert all the strings to uppercase.",
    "code": "```dart\nvoid main() {\n  List<String> strings = ['apple', 'banana', 'cherry'];\n  List<String> uppercasedStrings = strings.map((s) => s.toUpperCase()).toList();\n  print(uppercasedStrings);\n}\n```"
  },
  {
    "task": "Implement a program that removes all elements from a list that are less than a specified value.",
    "code": "```dart\nList<int> removeLessThan(List<int> numbers, int threshold) {\n  return numbers.where((number) => number >= threshold).toList();\n}\n\nvoid main() {\n  List<int> numbers = [1, 5, 8, 3, 9, 2];\n  int threshold = 5;\n  List<int> filteredNumbers = removeLessThan(numbers, threshold);\n  print(filteredNumbers);\n}\n```"
  },
  {
    "task": "Write a function that takes a list and returns a new list with elements in random order.",
    "code": "```dart\nimport 'dart:math';\n\nList<T> shuffleList<T>(List<T> list) {\n  var random = Random();\n  var newList = List<T>.from(list);\n  for (var i = newList.length - 1; i > 0; i--) {\n    var n = random.nextInt(i + 1);\n    var temp = newList[i];\n    newList[i] = newList[n];\n    newList[n] = temp;\n  }\n  return newList;\n}\n```"
  },
  {
    "task": "Create a list of tuples where each tuple contains a number and its square.",
    "code": "```dart\nvoid main() {\n  List<List<int>> numberSquares = List.generate(10, (index) {\n    int number = index + 1;\n    return [number, number * number];\n  });\n\n  print(numberSquares);\n}\n```"
  },
  {
    "task": "Write a program to multiply all elements in a list by a given factor.",
    "code": "```dart\nvoid main() {\n  List<int> numbers = [1, 2, 3, 4, 5];\n  int factor = 3;\n  \n  List<int> multipliedNumbers = numbers.map((number) => number * factor).toList();\n  \n  print(multipliedNumbers);\n}\n```"
  },
  {
    "task": "Implement a function that flattens a nested list.",
    "code": "```dart\nList<dynamic> flatten(List<dynamic> nestedList) {\n  List<dynamic> result = [];\n  for (var element in nestedList) {\n    if (element is List) {\n      result.addAll(flatten(element));\n    } else {\n      result.add(element);\n    }\n  }\n  return result;\n}\n```"
  },
  {
    "task": "Create a list of dates and sort them chronologically.",
    "code": "```dart\nvoid main() {\n  List<DateTime> dates = [\n    DateTime(2023, 10, 5),\n    DateTime(2021, 3, 15),\n    DateTime(2022, 7, 23),\n    DateTime(2020, 11, 30),\n  ];\n\n  dates.sort((a, b) => a.compareTo(b));\n\n  for (var date in dates) {\n    print(date);\n  }\n}\n```"
  },
  {
    "task": "Write a function that finds the index of the first occurrence of a given element in a list.",
    "code": "```dart\nint findFirstOccurrence(List<dynamic> list, dynamic element) {\n  return list.indexOf(element);\n}\n```"
  },
  {
    "task": "Generate a list of Fibonacci numbers up to a specified limit.",
    "code": "```dart\nList<int> generateFibonacci(int limit) {\n  List<int> fibonacci = [0, 1];\n  int nextNumber = 1;\n  \n  while (nextNumber <= limit) {\n    fibonacci.add(nextNumber);\n    int length = fibonacci.length;\n    nextNumber = fibonacci[length - 1] + fibonacci[length - 2];\n  }\n\n  return fibonacci.where((num) => num <= limit).toList();\n}\n\nvoid main() {\n  int limit = 100;\n  List<int> fibonacciNumbers = generateFibonacci(limit);\n  print(fibonacciNumbers);\n}\n```"
  },
  {
    "task": "Create a list of booleans and determine if all are True.",
    "code": "```dart\nvoid main() {\n  List<bool> booleanList = [true, true, true, true];\n  bool allTrue = booleanList.every((element) => element == true);\n  print(allTrue);\n}\n```"
  },
  {
    "task": "Write a program to concatenate two lists.",
    "code": "```dart\nvoid main() {\n  List<int> list1 = [1, 2, 3];\n  List<int> list2 = [4, 5, 6];\n  List<int> concatenatedList = list1 + list2;\n  print(concatenatedList);\n}\n```"
  },
  {
    "task": "Implement a function that returns the length of a list without using built-in functions.",
    "code": "```dart\nint getListLength(List list) {\n  int length = 0;\n  for (var item in list) {\n    length++;\n  }\n  return length;\n}\n```"
  },
  {
    "task": "Create a list of words and find the longest word.",
    "code": "```dart\nvoid main() {\n  List<String> words = ['apple', 'banana', 'cherry', 'date'];\n  String longestWord = words.reduce((a, b) => a.length > b.length ? a : b);\n  print(longestWord);\n}\n```"
  },
  {
    "task": "Write a function that takes a list and a predicate function, returning a list of elements that satisfy the predicate.",
    "code": "```dart\nList<T> filterList<T>(List<T> list, bool Function(T) predicate) {\n  return list.where(predicate).toList();\n}\n```"
  },
  {
    "task": "Generate a list of strings and filter out those with less than 5 characters.",
    "code": "```dart\nvoid main() {\n  List<String> strings = ['apple', 'bat', 'carrot', 'dog', 'elephant'];\n  List<String> filteredStrings = strings.where((s) => s.length >= 5).toList();\n  print(filteredStrings);\n}\n```"
  },
  {
    "task": "Create a list of mixed data types and separate them into lists by type.",
    "code": "```dart\nvoid main() {\n  List<dynamic> mixedList = [1, \"hello\", 3.14, true, \"world\", 42, false];\n  \n  List<int> intList = [];\n  List<String> stringList = [];\n  List<double> doubleList = [];\n  List<bool> boolList = [];\n\n  for (var item in mixedList) {\n    if (item is int) {\n      intList.add(item);\n    } else if (item is String) {\n      stringList.add(item);\n    } else if (item is double) {\n      doubleList.add(item);\n    } else if (item is bool) {\n      boolList.add(item);\n    }\n  }\n\n  print('Integers: $intList');\n  print('Strings: $stringList');\n  print('Doubles: $doubleList');\n  print('Booleans: $boolList');\n}\n```"
  },
  {
    "task": "Write a program to find the common elements between two lists.",
    "code": "```dart\nvoid main() {\n  List<int> list1 = [1, 2, 3, 4, 5];\n  List<int> list2 = [4, 5, 6, 7, 8];\n  \n  List<int> commonElements = list1.where((element) => list2.contains(element)).toList();\n  \n  print(commonElements);\n}\n```"
  },
  {
    "task": "Implement a function to rotate the elements of a list to the left by a given number of steps.",
    "code": "```dart\nList<T> rotateLeft<T>(List<T> list, int steps) {\n  if (list.isEmpty) return list;\n  int effectiveSteps = steps % list.length;\n  return list.sublist(effectiveSteps)..addAll(list.sublist(0, effectiveSteps));\n}\n```"
  },
  {
    "task": "Create a list of numbers and find the product of all the elements.",
    "code": "```dart\nvoid main() {\n  List<int> numbers = [2, 3, 4, 5];\n  int product = numbers.fold(1, (acc, num) => acc * num);\n  print(product);\n}\n```"
  },
  {
    "task": "Write a function that removes all occurrences of a specified element from a list.",
    "code": "```dart\nList<T> removeOccurrences<T>(List<T> list, T element) {\n  return list.where((item) => item != element).toList();\n}\n```"
  },
  {
    "task": "Generate a list of random numbers and find the median value.",
    "code": "```dart\nimport 'dart:math';\n\nvoid main() {\n  List<int> generateRandomNumbers(int count, int min, int max) {\n    final random = Random();\n    return List<int>.generate(count, (_) => min + random.nextInt(max - min + 1));\n  }\n\n  double findMedian(List<int> numbers) {\n    numbers.sort();\n    int middle = numbers.length ~/ 2;\n    if (numbers.length % 2 == 1) {\n      return numbers[middle].toDouble();\n    } else {\n      return (numbers[middle - 1] + numbers[middle]) / 2;\n    }\n  }\n\n  List<int> randomNumbers = generateRandomNumbers(10, 0, 100);\n  double median = findMedian(randomNumbers);\n\n  print('Random Numbers: $randomNumbers');\n  print('Median: $median');\n}\n```"
  },
  {
    "task": "Create a list of dictionaries and sort them by a specific key.",
    "code": "```dart\nvoid main() {\n  List<Map<String, dynamic>> listOfDicts = [\n    {'name': 'Alice', 'age': 30},\n    {'name': 'Bob', 'age': 25},\n    {'name': 'Charlie', 'age': 35},\n  ];\n\n  listOfDicts.sort((a, b) => a['age'].compareTo(b['age']));\n\n  print(listOfDicts);\n}\n```"
  },
  {
    "task": "Write a program to split a list into chunks of a specified size.",
    "code": "```dart\nList<List<T>> chunkList<T>(List<T> list, int chunkSize) {\n  List<List<T>> chunks = [];\n  for (int i = 0; i < list.length; i += chunkSize) {\n    int end = (i + chunkSize < list.length) ? i + chunkSize : list.length;\n    chunks.add(list.sublist(i, end));\n  }\n  return chunks;\n}\n\nvoid main() {\n  List<int> numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  int chunkSize = 3;\n  List<List<int>> result = chunkList(numbers, chunkSize);\n  print(result); // [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n}\n```"
  },
  {
    "task": "Implement a function that takes a list and returns a dictionary with the frequency of each element.",
    "code": "```dart\nMap<T, int> frequencyCount<T>(List<T> list) {\n  final Map<T, int> frequency = {};\n  for (var element in list) {\n    if (frequency.containsKey(element)) {\n      frequency[element] = frequency[element]! + 1;\n    } else {\n      frequency[element] = 1;\n    }\n  }\n  return frequency;\n}\n```"
  },
  {
    "task": "Create a list of integers and replace all negative numbers with zero.",
    "code": "```dart\nvoid main() {\n  List<int> numbers = [-3, 5, -2, 7, -1, 0, 4];\n  List<int> updatedNumbers = numbers.map((num) => num < 0 ? 0 : num).toList();\n  print(updatedNumbers);\n}\n```"
  },
  {
    "task": "Write a function that returns the first n elements of a list.",
    "code": "```dart\nList<T> firstNElements<T>(List<T> list, int n) {\n  return list.take(n).toList();\n}\n```"
  },
  {
    "task": "Generate a list of strings and join them into a single string with spaces.",
    "code": "```dart\nvoid main() {\n  List<String> stringList = ['Hello', 'world!', 'This', 'is', 'Dart.'];\n  String joinedString = stringList.join(' ');\n  print(joinedString);\n}\n```"
  },
  {
    "task": "Create a list of lists and find the sum of each inner list.",
    "code": "```dart\nvoid main() {\n  List<List<int>> listOfLists = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ];\n\n  List<int> sums = listOfLists.map((innerList) => innerList.reduce((a, b) => a + b)).toList();\n\n  print(sums);\n}\n```"
  },
  {
    "task": "Write a function that finds the second largest number in a list.",
    "code": "```dart\nint? findSecondLargest(List<int> numbers) {\n  if (numbers.length < 2) return null;\n  List<int> sortedNumbers = List.from(numbers)..sort();\n  return sortedNumbers[sortedNumbers.length - 2];\n}\n```"
  },
  {
    "task": "Generate a list of numbers and remove the duplicates while maintaining order.",
    "code": "```dart\nvoid main() {\n  List<int> numbers = [1, 2, 3, 1, 2, 4, 5, 3];\n  List<int> uniqueNumbers = [];\n  \n  for (var number in numbers) {\n    if (!uniqueNumbers.contains(number)) {\n      uniqueNumbers.add(number);\n    }\n  }\n  \n  print(uniqueNumbers);\n}\n```"
  },
  {
    "task": "Create a list of integers and partition it into two lists: one with numbers above the average and one below.",
    "code": "```dart\nvoid main() {\n  List<int> numbers = [1, 3, 5, 7, 9, 11];\n  double average = numbers.reduce((a, b) => a + b) / numbers.length;\n  \n  List<int> aboveAverage = numbers.where((n) => n > average).toList();\n  List<int> belowAverage = numbers.where((n) => n < average).toList();\n  \n  print('Above Average: $aboveAverage');\n  print('Below Average: $belowAverage');\n}\n```"
  },
  {
    "task": "Write a program to find the longest increasing subsequence in a list of numbers.",
    "code": "```dart\nList<int> longestIncreasingSubsequence(List<int> nums) {\n  if (nums.isEmpty) return [];\n\n  List<int> lis = List<int>.filled(nums.length, 1);\n  List<int> prev = List<int>.filled(nums.length, -1);\n\n  int maxLength = 0;\n  int maxIndex = -1;\n\n  for (int i = 0; i < nums.length; i++) {\n    for (int j = 0; j < i; j++) {\n      if (nums[i] > nums[j] && lis[i] < lis[j] + 1) {\n        lis[i] = lis[j] + 1;\n        prev[i] = j;\n      }\n    }\n    if (lis[i] > maxLength) {\n      maxLength = lis[i];\n      maxIndex = i;\n    }\n  }\n\n  List<int> longestSubsequence = [];\n  for (int i = maxIndex; i != -1; i = prev[i]) {\n    longestSubsequence.insert(0, nums[i]);\n  }\n\n  return longestSubsequence;\n}\n\nvoid main() {\n  List<int> nums = [10, 9, 2, 5, 3, 7, 101, 18];\n  List<int> result = longestIncreasingSubsequence(nums);\n  print(result);\n}\n```"
  },
  {
    "task": "Implement a function to zip two lists into a single list of tuples.",
    "code": "```dart\nList<List<dynamic>> zipLists(List<dynamic> list1, List<dynamic> list2) {\n  int minLength = list1.length < list2.length ? list1.length : list2.length;\n  List<List<dynamic>> zippedList = [];\n  \n  for (int i = 0; i < minLength; i++) {\n    zippedList.add([list1[i], list2[i]]);\n  }\n  \n  return zippedList;\n}\n```"
  },
  {
    "task": "Create a list of characters and count the vowels.",
    "code": "```dart\nvoid main() {\n  List<String> characters = ['a', 'b', 'c', 'e', 'i', 'o', 'u', 'x', 'y', 'z'];\n  int vowelCount = 0;\n  List<String> vowels = ['a', 'e', 'i', 'o', 'u'];\n\n  for (String char in characters) {\n    if (vowels.contains(char)) {\n      vowelCount++;\n    }\n  }\n\n  print('Number of vowels: $vowelCount');\n}\n```"
  },
  {
    "task": "Write a function that returns the last n elements of a list.",
    "code": "```dart\nList<T> lastNElements<T>(List<T> list, int n) {\n  if (n <= 0) {\n    return [];\n  }\n  return list.length <= n ? list : list.sublist(list.length - n);\n}\n```"
  },
  {
    "task": "Generate a list of numbers and split it into two lists: one with positive numbers and one with negative numbers.",
    "code": "```dart\nvoid main() {\n  List<int> numbers = [3, -1, 4, -2, -5, 6, -3, 7];\n  List<int> positiveNumbers = [];\n  List<int> negativeNumbers = [];\n\n  for (var number in numbers) {\n    if (number > 0) {\n      positiveNumbers.add(number);\n    } else if (number < 0) {\n      negativeNumbers.add(number);\n    }\n  }\n\n  print('Positive Numbers: $positiveNumbers');\n  print('Negative Numbers: $negativeNumbers');\n}\n```"
  },
  {
    "task": "Create a list of random integers and find the mode.",
    "code": "```dart\nimport 'dart:math';\n\nvoid main() {\n  List<int> numbers = List.generate(20, (_) => Random().nextInt(100));\n  Map<int, int> frequencyMap = {};\n\n  for (var number in numbers) {\n    frequencyMap[number] = (frequencyMap[number] ?? 0) + 1;\n  }\n\n  int mode = numbers[0];\n  int maxFrequency = 0;\n\n  frequencyMap.forEach((key, value) {\n    if (value > maxFrequency) {\n      maxFrequency = value;\n      mode = key;\n    }\n  });\n\n  print('Numbers: $numbers');\n  print('Mode: $mode');\n}\n```"
  },
  {
    "task": "Write a program to find the shortest path in a grid using a list to represent the path.",
    "code": "```dart\nimport 'dart:collection';\n\nclass Point {\n  final int x, y;\n  Point(this.x, this.y);\n}\n\nList<Point> findShortestPath(List<List<int>> grid, Point start, Point end) {\n  int rows = grid.length;\n  int cols = grid[0].length;\n  List<List<bool>> visited = List.generate(rows, (_) => List.filled(cols, false));\n  Queue<List<Point>> queue = Queue();\n  \n  queue.add([start]);\n  visited[start.x][start.y] = true;\n\n  List<Point> directions = [\n    Point(0, 1),\n    Point(1, 0),\n    Point(0, -1),\n    Point(-1, 0),\n  ];\n\n  while (queue.isNotEmpty) {\n    List<Point> path = queue.removeFirst();\n    Point current = path.last;\n\n    if (current.x == end.x && current.y == end.y) {\n      return path;\n    }\n\n    for (var dir in directions) {\n      int newX = current.x + dir.x;\n      int newY = current.y + dir.y;\n\n      if (newX >= 0 && newX < rows && newY >= 0 && newY < cols && !visited[newX][newY] && grid[newX][newY] == 0) {\n        visited[newX][newY] = true;\n        List<Point> newPath = List.from(path);\n        newPath.add(Point(newX, newY));\n        queue.add(newPath);\n      }\n    }\n  }\n\n  return [];\n}\n\nvoid main() {\n  List<List<int>> grid = [\n    [0, 0, 1],\n    [0, 0, 0],\n    [1, 0, 0]\n  ];\n  Point start = Point(0, 0);\n  Point end = Point(2, 2);\n  List<Point> shortestPath = findShortestPath(grid, start, end);\n  \n  for (var point in shortestPath) {\n    print('(${point.x}, ${point.y})');\n  }\n}\n```"
  },
  {
    "task": "Implement a function that takes a list and returns a list with elements doubled.",
    "code": "```dart\nList<int> doubleElements(List<int> inputList) {\n  return inputList.map((element) => element * 2).toList();\n}\n```"
  },
  {
    "task": "Create a list of integers and sort them in descending order.",
    "code": "```dart\nvoid main() {\n  List<int> numbers = [5, 3, 9, 1, 4];\n  numbers.sort((a, b) => b.compareTo(a));\n  print(numbers);\n}\n```"
  },
  {
    "task": "Write a function that takes a list of intervals and merges overlapping intervals.",
    "code": "```dart\nList<List<int>> mergeIntervals(List<List<int>> intervals) {\n  if (intervals.isEmpty) return [];\n  \n  // Sort intervals by the start time\n  intervals.sort((a, b) => a[0].compareTo(b[0]));\n  \n  List<List<int>> mergedIntervals = [intervals[0]];\n  \n  for (var i = 1; i < intervals.length; i++) {\n    var lastMerged = mergedIntervals.last;\n    var current = intervals[i];\n    \n    if (lastMerged[1] >= current[0]) {\n      // Overlapping intervals, merge them\n      lastMerged[1] = lastMerged[1] > current[1] ? lastMerged[1] : current[1];\n    } else {\n      // No overlap, add the current interval\n      mergedIntervals.add(current);\n    }\n  }\n  \n  return mergedIntervals;\n}\n```"
  },
  {
    "task": "Generate a list of random numbers and find the range (difference between max and min).",
    "code": "```dart\nimport 'dart:math';\n\nvoid main() {\n  List<int> randomNumbers = List.generate(10, (_) => Random().nextInt(100));\n  int maxNumber = randomNumbers.reduce((a, b) => a > b ? a : b);\n  int minNumber = randomNumbers.reduce((a, b) => a < b ? a : b);\n  int range = maxNumber - minNumber;\n  print('Random Numbers: $randomNumbers');\n  print('Range: $range');\n}\n```"
  },
  {
    "task": "Create a list of strings and remove any that are palindromes.",
    "code": "```dart\nvoid main() {\n  List<String> strings = ['level', 'hello', 'world', 'radar', 'dart'];\n  strings.removeWhere((s) => s == s.split('').reversed.join(''));\n  print(strings);\n}\n```"
  },
  {
    "task": "Write a program to cyclically permute the elements of a list.",
    "code": "```dart\nvoid cyclicallyPermute(List<int> list) {\n  if (list.isEmpty) return;\n  int lastElement = list.removeLast();\n  list.insert(0, lastElement);\n}\n\nvoid main() {\n  List<int> myList = [1, 2, 3, 4, 5];\n  print('Original List: $myList');\n  cyclicallyPermute(myList);\n  print('Permuted List: $myList');\n}\n```"
  },
  {
    "task": "Implement a function to create a list of cumulative sums from a list of numbers.",
    "code": "```dart\nList<int> cumulativeSums(List<int> numbers) {\n  List<int> result = [];\n  int sum = 0;\n  for (var number in numbers) {\n    sum += number;\n    result.add(sum);\n  }\n  return result;\n}\n```"
  },
  {
    "task": "Create a list of numbers and shift all zeros to the end.",
    "code": "```dart\nvoid main() {\n  List<int> numbers = [0, 1, 0, 3, 12];\n  List<int> nonZeroNumbers = numbers.where((num) => num != 0).toList();\n  int zeroCount = numbers.length - nonZeroNumbers.length;\n  List<int> result = [...nonZeroNumbers, ...List.filled(zeroCount, 0)];\n  print(result);\n}\n```"
  },
  {
    "task": "Write a program to simulate a queue using a list.",
    "code": "```dart\nvoid main() {\n  List<String> queue = [];\n\n  // Enqueue operation\n  void enqueue(String element) {\n    queue.add(element);\n    print('$element added to the queue');\n  }\n\n  // Dequeue operation\n  String? dequeue() {\n    if (queue.isNotEmpty) {\n      String element = queue.removeAt(0);\n      print('$element removed from the queue');\n      return element;\n    } else {\n      print('Queue is empty');\n      return null;\n    }\n  }\n\n  // Display queue\n  void displayQueue() {\n    print('Queue: $queue');\n  }\n\n  // Simulate queue operations\n  enqueue('Item 1');\n  enqueue('Item 2');\n  displayQueue();\n  dequeue();\n  displayQueue();\n  dequeue();\n  dequeue();\n}\n```"
  },
  {
    "task": "Generate a list of numbers and identify all prime numbers.",
    "code": "```dart\nbool isPrime(int number) {\n  if (number <= 1) return false;\n  for (int i = 2; i <= number ~/ 2; i++) {\n    if (number % i == 0) return false;\n  }\n  return true;\n}\n\nvoid main() {\n  List<int> numbers = List.generate(100, (index) => index);\n  List<int> primeNumbers = numbers.where(isPrime).toList();\n  print(primeNumbers);\n}\n```"
  },
  {
    "task": "Create a list of strings and group them by their starting letter.",
    "code": "```dart\nvoid main() {\n  List<String> words = ['apple', 'banana', 'apricot', 'blueberry', 'avocado'];\n  Map<String, List<String>> groupedByLetter = {};\n\n  for (var word in words) {\n    String startingLetter = word[0];\n    if (groupedByLetter.containsKey(startingLetter)) {\n      groupedByLetter[startingLetter]!.add(word);\n    } else {\n      groupedByLetter[startingLetter] = [word];\n    }\n  }\n\n  print(groupedByLetter);\n}\n```"
  },
  {
    "task": "Write a function that takes a list and returns a new list with all elements squared.",
    "code": "```dart\nList<int> squareElements(List<int> numbers) {\n  return numbers.map((number) => number * number).toList();\n}\n```"
  },
  {
    "task": "Generate a list of timestamps and find the time difference between consecutive elements.",
    "code": "```dart\nimport 'dart:core';\n\nvoid main() {\n  List<DateTime> timestamps = List.generate(5, (index) => DateTime.now().add(Duration(minutes: index * 5)));\n\n  List<Duration> differences = [];\n  for (int i = 0; i < timestamps.length - 1; i++) {\n    differences.add(timestamps[i + 1].difference(timestamps[i]));\n  }\n\n  print('Timestamps: $timestamps');\n  print('Differences: $differences');\n}\n```"
  },
  {
    "task": "Create a list of numbers and rotate it such that the smallest number is first.",
    "code": "```dart\nvoid main() {\n  List<int> numbers = [4, 2, 8, 6, 1, 3];\n  int minIndex = numbers.indexOf(numbers.reduce((a, b) => a < b ? a : b));\n  List<int> rotatedNumbers = [\n    ...numbers.sublist(minIndex),\n    ...numbers.sublist(0, minIndex)\n  ];\n  print(rotatedNumbers);\n}\n```"
  },
  {
    "task": "Write a program to find all unique pairs in a list that sum up to a specific target.",
    "code": "```dart\nvoid findPairs(List<int> nums, int target) {\n  List<List<int>> result = [];\n  Set<int> seen = {};\n\n  for (int num in nums) {\n    int complement = target - num;\n    if (seen.contains(complement)) {\n      List<int> pair = [complement, num]..sort();\n      if (!result.any((p) => p[0] == pair[0] && p[1] == pair[1])) {\n        result.add(pair);\n      }\n    }\n    seen.add(num);\n  }\n\n  for (var pair in result) {\n    print(pair);\n  }\n}\n\nvoid main() {\n  List<int> nums = [2, 4, 3, 3, 5, 1, 7, -1];\n  int target = 6;\n  findPairs(nums, target);\n}\n```"
  },
  {
    "task": "Implement a function that returns true if a list contains a cycle.",
    "code": "```dart\nbool hasCycle(List list) {\n  if (list.isEmpty) return false;\n  int slow = 0;\n  int fast = 0;\n  while (true) {\n    slow++;\n    fast += 2;\n    if (fast >= list.length || fast + 1 >= list.length) return false;\n    if (list[slow] == list[fast]) return true;\n  }\n}\n```"
  },
  {
    "task": "Create a list of numbers and find the contiguous subarray with the maximum sum.",
    "code": "```dart\nint maxSubArray(List<int> nums) {\n  int maxSum = nums[0];\n  int currentSum = nums[0];\n\n  for (int i = 1; i < nums.length; i++) {\n    currentSum = currentSum > 0 ? currentSum + nums[i] : nums[i];\n    maxSum = currentSum > maxSum ? currentSum : maxSum;\n  }\n\n  return maxSum;\n}\n\nvoid main() {\n  List<int> numbers = [2, -1, 3, -4, 5, 6, -2, 3];\n  int result = maxSubArray(numbers);\n  print('Maximum subarray sum is: $result');\n}\n```"
  },
  {
    "task": "Write a function that takes a list and a number, and finds two numbers in the list that sum to the given number.",
    "code": "```dart\nList<int>? findPairWithSum(List<int> numbers, int targetSum) {\n  Map<int, int> seenNumbers = {};\n  for (int number in numbers) {\n    int complement = targetSum - number;\n    if (seenNumbers.containsKey(complement)) {\n      return [complement, number];\n    }\n    seenNumbers[number] = 1;\n  }\n  return null;\n}\n```"
  },
  {
    "task": "Generate a list of even numbers and filter out those that are greater than a specific value.",
    "code": "```dart\nvoid main() {\n  int maxValue = 10;\n  List<int> numbers = List.generate(10, (index) => index * 2);\n  List<int> filteredNumbers = numbers.where((number) => number <= maxValue).toList();\n  print(filteredNumbers);\n}\n```"
  },
  {
    "task": "Create a list of characters and reverse the vowels only.",
    "code": "```dart\nvoid main() {\n  List<String> chars = ['h', 'e', 'l', 'l', 'o'];\n  List<int> vowelIndices = [];\n  List<String> vowels = [];\n\n  for (int i = 0; i < chars.length; i++) {\n    if ('aeiouAEIOU'.contains(chars[i])) {\n      vowelIndices.add(i);\n      vowels.add(chars[i]);\n    }\n  }\n\n  vowels = vowels.reversed.toList();\n  for (int i = 0; i < vowelIndices.length; i++) {\n    chars[vowelIndices[i]] = vowels[i];\n  }\n\n  print(chars); // Output should be ['h', 'o', 'l', 'l', 'e']\n}\n```"
  },
  {
    "task": "Write a program to find all permutations of a list of elements.",
    "code": "```dart\nList<List<T>> permute<T>(List<T> items) {\n  if (items.length == 0) return [[]];\n\n  List<List<T>> result = [];\n  for (int i = 0; i < items.length; i++) {\n    T item = items[i];\n    List<T> remainingItems = List.from(items)..removeAt(i);\n    for (List<T> perm in permute(remainingItems)) {\n      result.add([item, ...perm]);\n    }\n  }\n  return result;\n}\n\nvoid main() {\n  List<String> elements = ['a', 'b', 'c'];\n  List<List<String>> permutations = permute(elements);\n  for (var permutation in permutations) {\n    print(permutation);\n  }\n}\n```"
  },
  {
    "task": "Implement a function that takes a list and returns the most frequently occurring element.",
    "code": "```dart\ndynamic mostFrequentElement(List<dynamic> list) {\n  if (list.isEmpty) return null;\n  \n  Map<dynamic, int> frequencyMap = {};\n\n  for (var element in list) {\n    frequencyMap[element] = (frequencyMap[element] ?? 0) + 1;\n  }\n\n  dynamic mostFrequent;\n  int highestFrequency = 0;\n\n  frequencyMap.forEach((key, value) {\n    if (value > highestFrequency) {\n      highestFrequency = value;\n      mostFrequent = key;\n    }\n  });\n\n  return mostFrequent;\n}\n```"
  },
  {
    "task": "Create a list of numbers and calculate the variance.",
    "code": "```dart\nvoid main() {\n  List<double> numbers = [1.5, 2.3, 3.7, 4.6, 5.0];\n  \n  double mean = numbers.reduce((a, b) => a + b) / numbers.length;\n  double variance = numbers.map((n) => (n - mean) * (n - mean)).reduce((a, b) => a + b) / numbers.length;\n  \n  print('Variance: $variance');\n}\n```"
  },
  {
    "task": "Write a function to concatenate a list of lists into a single list.",
    "code": "```dart\nList<T> concatenateLists<T>(List<List<T>> listOfLists) {\n  return listOfLists.expand((list) => list).toList();\n}\n```"
  },
  {
    "task": "Generate a list of numbers and replace each element with the product of all other elements.",
    "code": "```dart\nList<int> generateProductList(List<int> numbers) {\n  int totalProduct = numbers.fold(1, (acc, num) => acc * num);\n  return numbers.map((num) => totalProduct ~/ num).toList();\n}\n\nvoid main() {\n  List<int> numbers = [1, 2, 3, 4, 5];\n  List<int> productList = generateProductList(numbers);\n  print(productList);\n}\n```"
  },
  {
    "task": "Create a list of strings and find the common prefix.",
    "code": "```dart\nvoid main() {\n  List<String> strings = [\"flower\", \"flow\", \"flight\"];\n  String commonPrefix = findCommonPrefix(strings);\n  print(commonPrefix);\n}\n\nString findCommonPrefix(List<String> strings) {\n  if (strings.isEmpty) return \"\";\n  String prefix = strings[0];\n  for (int i = 1; i < strings.length; i++) {\n    while (strings[i].indexOf(prefix) != 0) {\n      prefix = prefix.substring(0, prefix.length - 1);\n      if (prefix.isEmpty) return \"\";\n    }\n  }\n  return prefix;\n}\n```"
  },
  {
    "task": "Write a program to partition a list into two lists based on a predicate function.",
    "code": "```dart\nvoid main() {\n  List<int> numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  bool predicate(int number) => number % 2 == 0;\n\n  List<List<int>> partition(List<int> list, bool Function(int) predicate) {\n    List<int> trueList = [];\n    List<int> falseList = [];\n    for (var item in list) {\n      if (predicate(item)) {\n        trueList.add(item);\n      } else {\n        falseList.add(item);\n      }\n    }\n    return [trueList, falseList];\n  }\n\n  List<List<int>> result = partition(numbers, predicate);\n  print('True list: ${result[0]}');\n  print('False list: ${result[1]}');\n}\n```"
  },
  {
    "task": "Implement a function to find the kth smallest element in a list.",
    "code": "```dart\nint findKthSmallest(List<int> numbers, int k) {\n  numbers.sort();\n  return numbers[k - 1];\n}\n```"
  },
  {
    "task": "Create a list of integers and find the length of the longest contiguous sequence.",
    "code": "```dart\nvoid main() {\n  List<int> numbers = [1, 2, 2, 3, 4, 4, 4, 5, 6, 7, 8];\n  int longestSequence = 0;\n  int currentLength = 1;\n\n  for (int i = 1; i < numbers.length; i++) {\n    if (numbers[i] == numbers[i - 1]) {\n      currentLength++;\n    } else {\n      if (currentLength > longestSequence) {\n        longestSequence = currentLength;\n      }\n      currentLength = 1;\n    }\n  }\n  if (currentLength > longestSequence) {\n    longestSequence = currentLength;\n  }\n\n  print('Length of the longest contiguous sequence: $longestSequence');\n}\n```"
  },
  {
    "task": "Write a function that rotates elements in a list while maintaining the relative order of non-rotated elements.",
    "code": "```dart\nList<T> rotateList<T>(List<T> list, int k) {\n  if (list.isEmpty || k % list.length == 0) return list;\n  k %= list.length;\n  return list.sublist(list.length - k)..addAll(list.sublist(0, list.length - k));\n}\n```"
  },
  {
    "task": "Generate a list of random numbers and sort them while maintaining the original index positions.",
    "code": "```dart\nimport 'dart:math';\n\nvoid main() {\n  List<int> randomNumbers = List<int>.generate(10, (_) => Random().nextInt(100));\n  List<MapEntry<int, int>> indexedNumbers = randomNumbers.asMap().entries.toList();\n\n  indexedNumbers.sort((a, b) => a.value.compareTo(b.value));\n\n  List<int> sortedNumbers = List<int>.from(randomNumbers);\n  for (var entry in indexedNumbers) {\n    sortedNumbers[entry.key] = entry.value;\n  }\n\n  print('Original List: $randomNumbers');\n  print('Sorted List with Original Indexes: $sortedNumbers');\n}\n```"
  },
  {
    "task": "Create a list of numbers and find all subsets that sum up to a specific target.",
    "code": "```dart\nList<List<int>> findSubsetsThatSumToTarget(List<int> nums, int target) {\n  List<List<int>> result = [];\n\n  void backtrack(int start, int currentSum, List<int> subset) {\n    if (currentSum == target) {\n      result.add(List.from(subset));\n      return;\n    }\n    if (currentSum > target) {\n      return;\n    }\n    for (int i = start; i < nums.length; i++) {\n      subset.add(nums[i]);\n      backtrack(i + 1, currentSum + nums[i], subset);\n      subset.removeLast();\n    }\n  }\n\n  backtrack(0, 0, []);\n  return result;\n}\n\nvoid main() {\n  List<int> numbers = [1, 2, 3, 4, 5];\n  int target = 5;\n  List<List<int>> subsets = findSubsetsThatSumToTarget(numbers, target);\n  print(subsets);\n}\n```"
  },
  {
    "task": "Write a program to simulate a stack using a list.",
    "code": "```dart\nclass Stack<T> {\n  final List<T> _list = [];\n\n  void push(T value) {\n    _list.add(value);\n  }\n\n  T pop() {\n    if (_list.isEmpty) {\n      throw Exception('Stack is empty');\n    }\n    return _list.removeLast();\n  }\n\n  T peek() {\n    if (_list.isEmpty) {\n      throw Exception('Stack is empty');\n    }\n    return _list.last;\n  }\n\n  bool get isEmpty => _list.isEmpty;\n\n  int get size => _list.length;\n}\n\nvoid main() {\n  final stack = Stack<int>();\n  \n  stack.push(5);\n  stack.push(10);\n  stack.push(15);\n  \n  print(stack.pop());  // Output: 15\n  print(stack.peek()); // Output: 10\n  print(stack.isEmpty); // Output: false\n  print(stack.size);    // Output: 2\n}\n```"
  }
]