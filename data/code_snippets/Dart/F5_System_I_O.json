[
  {
    "task": "Write a program that reads a user's name and age from the input, then prints a greeting message using both values.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  stdout.write('Enter your name: ');\n  String? name = stdin.readLineSync();\n\n  stdout.write('Enter your age: ');\n  String? ageInput = stdin.readLineSync();\n  int? age = int.tryParse(ageInput ?? '');\n\n  if (name != null && age != null) {\n    print('Hello, $name! You are $age years old.');\n  } else {\n    print('Invalid input.');\n  }\n}\n```"
  },
  {
    "task": "Create a script that continuously reads numbers from the input and prints their running total until a negative number is entered.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  int runningTotal = 0;\n  while (true) {\n    stdout.write('Enter a number: ');\n    int? number = int.tryParse(stdin.readLineSync() ?? '');\n    if (number == null || number < 0) break;\n    runningTotal += number;\n    print('Running total: $runningTotal');\n  }\n}\n```"
  },
  {
    "task": "Design a program that asks the user for a sentence and outputs the number of words it contains.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  stdout.write('Please enter a sentence: ');\n  String? sentence = stdin.readLineSync();\n  if (sentence != null) {\n    int wordCount = sentence.trim().split(RegExp(r'\\s+')).length;\n    print('The sentence contains $wordCount words.');\n  }\n}\n```"
  },
  {
    "task": "Build a command-line tool that reads a list of integers and outputs them in sorted order.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  stdout.writeln('Enter a list of integers separated by spaces:');\n  String? input = stdin.readLineSync();\n  \n  if (input != null && input.isNotEmpty) {\n    List<int> numbers = input.split(' ').map(int.parse).toList();\n    numbers.sort();\n    stdout.writeln('Sorted list of integers: ${numbers.join(' ')}');\n  } else {\n    stdout.writeln('No input provided.');\n  }\n}\n```"
  },
  {
    "task": "Develop a program that reads a file name from the input, then prints the number of lines in that file.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  stdout.write('Enter file name: ');\n  String? fileName = stdin.readLineSync();\n\n  if (fileName != null) {\n    try {\n      final file = File(fileName);\n      final lines = file.readAsLinesSync();\n      print('Number of lines: ${lines.length}');\n    } catch (e) {\n      print('Error: $e');\n    }\n  }\n}\n```"
  },
  {
    "task": "Implement a calculator that reads two numbers and an operator (+, -, *, /) from the input and prints the result.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  print('Enter first number:');\n  double num1 = double.parse(stdin.readLineSync()!);\n\n  print('Enter an operator (+, -, *, /):');\n  String operator = stdin.readLineSync()!;\n\n  print('Enter second number:');\n  double num2 = double.parse(stdin.readLineSync()!);\n\n  double result;\n\n  switch (operator) {\n    case '+':\n      result = num1 + num2;\n      break;\n    case '-':\n      result = num1 - num2;\n      break;\n    case '*':\n      result = num1 * num2;\n      break;\n    case '/':\n      result = num1 / num2;\n      break;\n    default:\n      print('Invalid operator');\n      return;\n  }\n  \n  print('Result: $result');\n}\n```"
  },
  {
    "task": "Write a script that reads a user's full name and prints it in reverse order.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  stdout.write('Enter your full name: ');\n  String? fullName = stdin.readLineSync();\n  if (fullName != null) {\n    String reversedName = fullName.split('').reversed.join('');\n    print('Reversed name: $reversedName');\n  }\n}\n```"
  },
  {
    "task": "Create a program that asks for a word and checks if it is a palindrome, printing the appropriate message.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  stdout.write('Enter a word: ');\n  String? word = stdin.readLineSync();\n\n  if (word != null && word == word.split('').reversed.join('')) {\n    print('The word is a palindrome.');\n  } else {\n    print('The word is not a palindrome.');\n  }\n}\n```"
  },
  {
    "task": "Develop a tool that reads multiple lines of text and outputs the longest line.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  List<String> lines = [];\n  String? line;\n  while ((line = stdin.readLineSync()) != null && line.isNotEmpty) {\n    lines.add(line);\n  }\n  \n  String longestLine = lines.reduce((a, b) => a.length > b.length ? a : b);\n  print(longestLine);\n}\n```"
  },
  {
    "task": "Design a script that reads a number 'n' and prints the first 'n' Fibonacci numbers.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  stdout.write('Enter a number: ');\n  int? n = int.tryParse(stdin.readLineSync() ?? '');\n  if (n == null || n <= 0) {\n    print('Please enter a positive integer.');\n    return;\n  }\n\n  List<int> fibonacciNumbers = [0, 1];\n  while (fibonacciNumbers.length < n) {\n    int nextNumber = fibonacciNumbers[fibonacciNumbers.length - 1] +\n        fibonacciNumbers[fibonacciNumbers.length - 2];\n    fibonacciNumbers.add(nextNumber);\n  }\n\n  for (int i = 0; i < n; i++) {\n    stdout.write('${fibonacciNumbers[i]} ');\n  }\n  print('');\n}\n```"
  },
  {
    "task": "Write a program that takes a list of numbers from the input and prints only the even ones.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  print('Enter numbers separated by space:');\n  String? input = stdin.readLineSync();\n  if (input != null && input.isNotEmpty) {\n    List<int> numbers = input.split(' ').map(int.parse).toList();\n    for (var number in numbers) {\n      if (number % 2 == 0) {\n        print(number);\n      }\n    }\n  }\n}\n```"
  },
  {
    "task": "Create a script that reads a date (day, month, year) and prints the day of the week for that date.",
    "code": "```dart\nimport 'dart:io';\nimport 'package:intl/intl.dart';\n\nvoid main() {\n  print('Enter day: ');\n  int day = int.parse(stdin.readLineSync()!);\n\n  print('Enter month: ');\n  int month = int.parse(stdin.readLineSync()!);\n\n  print('Enter year: ');\n  int year = int.parse(stdin.readLineSync()!);\n\n  DateTime date = DateTime(year, month, day);\n  String dayOfWeek = DateFormat('EEEE').format(date);\n\n  print('The day of the week is: $dayOfWeek');\n}\n```"
  },
  {
    "task": "Develop a program that reads a paragraph and counts the frequency of each letter in the text.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  print('Enter a paragraph:');\n  String input = stdin.readLineSync() ?? '';\n  Map<String, int> letterFrequency = {};\n\n  for (var char in input.toLowerCase().runes) {\n    String letter = String.fromCharCode(char);\n    if (RegExp(r'[a-z]').hasMatch(letter)) {\n      letterFrequency[letter] = (letterFrequency[letter] ?? 0) + 1;\n    }\n  }\n\n  letterFrequency.forEach((letter, frequency) {\n    print('$letter: $frequency');\n  });\n}\n```"
  },
  {
    "task": "Build a tool that reads a text and a word, then prints the number of times the word appears in the text.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  print('Enter the text:');\n  String text = stdin.readLineSync() ?? '';\n\n  print('Enter the word to search:');\n  String word = stdin.readLineSync() ?? '';\n\n  int count = RegExp('\\\\b$word\\\\b').allMatches(text).length;\n  \n  print('The word \"$word\" appears $count times in the text.');\n}\n```"
  },
  {
    "task": "Implement a script that reads a temperature in Celsius and converts it to Fahrenheit, printing the result.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  stdout.write('Enter temperature in Celsius: ');\n  double? celsius = double.tryParse(stdin.readLineSync()!);\n  if (celsius != null) {\n    double fahrenheit = (celsius * 9 / 5) + 32;\n    print('Temperature in Fahrenheit: $fahrenheit');\n  } else {\n    print('Invalid input');\n  }\n}\n```"
  },
  {
    "task": "Write a program that continuously reads input until the word 'exit' is entered, then prints all entered inputs.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  List<String> inputs = [];\n  while (true) {\n    String? input = stdin.readLineSync();\n    if (input == 'exit') {\n      break;\n    }\n    if (input != null) {\n      inputs.add(input);\n    }\n  }\n  for (var input in inputs) {\n    print(input);\n  }\n}\n```"
  },
  {
    "task": "Create a tool that prompts for a filename, reads the file, and prints its content in uppercase.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  stdout.write('Enter filename: ');\n  String? filename = stdin.readLineSync();\n\n  if (filename != null) {\n    try {\n      File file = File(filename);\n      String contents = file.readAsStringSync();\n      print(contents.toUpperCase());\n    } catch (e) {\n      print('Error reading file: $e');\n    }\n  } else {\n    print('No filename entered.');\n  }\n}\n```"
  },
  {
    "task": "Develop a program that reads a series of email addresses and prints the unique domain names.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  print('Enter email addresses (blank line to finish):');\n  Set<String> domains = {};\n  while (true) {\n    String? input = stdin.readLineSync();\n    if (input == null || input.isEmpty) {\n      break;\n    }\n    List<String> parts = input.split('@');\n    if (parts.length == 2) {\n      domains.add(parts[1]);\n    }\n  }\n\n  print('Unique domain names:');\n  for (String domain in domains) {\n    print(domain);\n  }\n}\n```"
  },
  {
    "task": "Design a script that reads a string and prints whether it contains all the letters of the alphabet.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  print('Enter a string:');\n  String input = stdin.readLineSync() ?? '';\n  bool containsAllLetters = 'abcdefghijklmnopqrstuvwxyz'.runes.every((int rune) {\n    return input.toLowerCase().contains(String.fromCharCode(rune));\n  });\n  if (containsAllLetters) {\n    print('The string contains all the letters of the alphabet.');\n  } else {\n    print('The string does not contain all the letters of the alphabet.');\n  }\n}\n```"
  },
  {
    "task": "Write a program that reads a number and prints its factorial.",
    "code": "```dart\nimport 'dart:io';\n\nint factorial(int n) {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n}\n\nvoid main() {\n  stdout.write('Enter a number: ');\n  int number = int.parse(stdin.readLineSync()!);\n  int result = factorial(number);\n  print('Factorial of $number is $result');\n}\n```"
  },
  {
    "task": "Create a tool that reads a list of names and prints them in alphabetical order.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  print('Enter names separated by commas:');\n  String? input = stdin.readLineSync();\n  if (input != null) {\n    List<String> names = input.split(',').map((name) => name.trim()).toList();\n    names.sort();\n    print('Names in alphabetical order:');\n    for (var name in names) {\n      print(name);\n    }\n  }\n}\n```"
  },
  {
    "task": "Develop a program that asks for a sentence and prints each word on a new line.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  stdout.write('Enter a sentence: ');\n  String? sentence = stdin.readLineSync();\n  if (sentence != null) {\n    List<String> words = sentence.split(' ');\n    for (var word in words) {\n      print(word);\n    }\n  }\n}\n```"
  },
  {
    "task": "Build a script that reads a time in 12-hour format and converts it to 24-hour format.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  print('Enter time in 12-hour format (e.g., 02:30 PM):');\n  String? input = stdin.readLineSync();\n\n  if (input != null && input.contains(RegExp(r'^\\d{2}:\\d{2} (AM|PM)$'))) {\n    List<String> parts = input.split(' ');\n    String timePart = parts[0];\n    String period = parts[1];\n\n    List<String> timeComponents = timePart.split(':');\n    int hour = int.parse(timeComponents[0]);\n    String minute = timeComponents[1];\n\n    if (period == 'PM' && hour != 12) {\n      hour += 12;\n    } else if (period == 'AM' && hour == 12) {\n      hour = 0;\n    }\n\n    String hourString = hour < 10 ? '0$hour' : '$hour';\n    print('Converted time: $hourString:$minute');\n  } else {\n    print('Invalid format. Please enter time as HH:MM AM/PM.');\n  }\n}\n```"
  },
  {
    "task": "Implement a program that reads two strings and checks if they are anagrams, printing the result.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  print('Enter first string:');\n  String str1 = stdin.readLineSync()!;\n  \n  print('Enter second string:');\n  String str2 = stdin.readLineSync()!;\n  \n  if (areAnagrams(str1, str2)) {\n    print('The strings are anagrams.');\n  } else {\n    print('The strings are not anagrams.');\n  }\n}\n\nbool areAnagrams(String str1, String str2) {\n  List<String> list1 = str1.split('')..sort();\n  List<String> list2 = str2.split('')..sort();\n  return list1.join() == list2.join();\n}\n```"
  },
  {
    "task": "Write a tool that reads a paragraph and prints the first and last sentence.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  print('Enter a paragraph:');\n  String? input = stdin.readLineSync();\n\n  if (input != null && input.isNotEmpty) {\n    List<String> sentences = input.split(RegExp(r'(?<=[.!?])\\s+'));\n    if (sentences.isNotEmpty) {\n      print('First sentence: ${sentences.first}');\n      print('Last sentence: ${sentences.last}');\n    } else {\n      print('No complete sentences found.');\n    }\n  } else {\n    print('No input provided.');\n  }\n}\n```"
  },
  {
    "task": "Create a program that reads a binary number and converts it to decimal.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  print('Enter a binary number:');\n  String? binaryInput = stdin.readLineSync();\n\n  if (binaryInput != null) {\n    int decimal = int.parse(binaryInput, radix: 2);\n    print('Decimal value: $decimal');\n  } else {\n    print('Invalid input');\n  }\n}\n```"
  },
  {
    "task": "Develop a script that reads a series of scores and prints the average score.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  print('Enter scores separated by spaces:');\n  String? input = stdin.readLineSync();\n  \n  if (input != null && input.isNotEmpty) {\n    List<String> scoreStrings = input.split(' ');\n    List<double> scores = scoreStrings.map(double.parse).toList();\n    \n    double total = scores.reduce((a, b) => a + b);\n    double average = total / scores.length;\n    \n    print('Average score: $average');\n  } else {\n    print('No scores entered.');\n  }\n}\n```"
  },
  {
    "task": "Design a program that reads a list of integers and prints the prime numbers.",
    "code": "```dart\nimport 'dart:io';\n\nbool isPrime(int number) {\n  if (number <= 1) return false;\n  for (int i = 2; i <= number ~/ 2; i++) {\n    if (number % i == 0) return false;\n  }\n  return true;\n}\n\nvoid main() {\n  print(\"Enter a list of integers separated by spaces:\");\n  String? input = stdin.readLineSync();\n  if (input != null) {\n    List<String> inputList = input.split(' ');\n    List<int> numbers = inputList.map(int.parse).toList();\n    List<int> primes = numbers.where(isPrime).toList();\n    print(\"Prime numbers: ${primes.join(', ')}\");\n  }\n}\n```"
  },
  {
    "task": "Write a script that reads a word and prints its Pig Latin translation.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  stdout.write('Enter a word: ');\n  String? word = stdin.readLineSync();\n\n  if (word != null && word.isNotEmpty) {\n    String pigLatin = word.substring(1) + word[0] + 'ay';\n    print('Pig Latin: $pigLatin');\n  } else {\n    print('Invalid input.');\n  }\n}\n```"
  },
  {
    "task": "Create a tool that reads a matrix of numbers and prints its transpose.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  print('Enter the number of rows:');\n  int rows = int.parse(stdin.readLineSync()!);\n  print('Enter the number of columns:');\n  int columns = int.parse(stdin.readLineSync()!);\n\n  List<List<int>> matrix = List.generate(rows, (_) => List.filled(columns, 0));\n  print('Enter the matrix elements row by row:');\n  for (int i = 0; i < rows; i++) {\n    matrix[i] = stdin.readLineSync()!.split(' ').map(int.parse).toList();\n  }\n\n  List<List<int>> transpose = List.generate(columns, (_) => List.filled(rows, 0));\n  for (int i = 0; i < rows; i++) {\n    for (int j = 0; j < columns; j++) {\n      transpose[j][i] = matrix[i][j];\n    }\n  }\n\n  print('The transpose of the matrix is:');\n  for (var row in transpose) {\n    print(row.join(' '));\n  }\n}\n```"
  },
  {
    "task": "Implement a program that reads a URL and prints the domain name.",
    "code": "```dart\nimport 'dart:io';\nimport 'package:uri/uri.dart';\n\nvoid main() {\n  print('Enter a URL:');\n  String? input = stdin.readLineSync();\n  if (input != null) {\n    Uri uri = Uri.parse(input);\n    print('Domain name: ${uri.host}');\n  } else {\n    print('Invalid input.');\n  }\n}\n```"
  },
  {
    "task": "Write a script that reads a number and prints its multiplication table up to 12.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  stdout.write('Enter a number: ');\n  int number = int.parse(stdin.readLineSync()!);\n\n  for (int i = 1; i <= 12; i++) {\n    print('$number x $i = ${number * i}');\n  }\n}\n```"
  },
  {
    "task": "Develop a program that reads a list of dates and prints them in order of occurrence.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  print('Enter dates in the format YYYY-MM-DD, one per line. Enter an empty line to finish:');\n\n  List<DateTime> dates = [];\n  while (true) {\n    String? input = stdin.readLineSync();\n    if (input == null || input.isEmpty) break;\n    dates.add(DateTime.parse(input));\n  }\n\n  dates.sort();\n\n  print('Dates in order of occurrence:');\n  for (var date in dates) {\n    print(date.toIso8601String().split('T').first);\n  }\n}\n```"
  },
  {
    "task": "Create a tool that reads a text and prints it with each sentence capitalized.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  print('Enter text:');\n  String? input = stdin.readLineSync();\n  if (input != null) {\n    String result = input.split('. ').map((sentence) {\n      if (sentence.isNotEmpty) {\n        return sentence[0].toUpperCase() + sentence.substring(1);\n      }\n      return sentence;\n    }).join('. ');\n    print(result);\n  }\n}\n```"
  },
  {
    "task": "Design a program that reads a list of words and prints them in reverse alphabetical order.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  print('Enter words separated by spaces:');\n  String? input = stdin.readLineSync();\n  if (input != null) {\n    List<String> words = input.split(' ');\n    words.sort((a, b) => b.compareTo(a));\n    print('Words in reverse alphabetical order:');\n    for (var word in words) {\n      print(word);\n    }\n  }\n}\n```"
  },
  {
    "task": "Write a script that asks for two times and prints the difference in minutes.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  print('Enter first time (HH:mm):');\n  String? firstInput = stdin.readLineSync();\n  print('Enter second time (HH:mm):');\n  String? secondInput = stdin.readLineSync();\n\n  if (firstInput != null && secondInput != null) {\n    List<String> firstTimeParts = firstInput.split(':');\n    List<String> secondTimeParts = secondInput.split(':');\n    \n    if (firstTimeParts.length == 2 && secondTimeParts.length == 2) {\n      int firstHour = int.parse(firstTimeParts[0]);\n      int firstMinute = int.parse(firstTimeParts[1]);\n      int secondHour = int.parse(secondTimeParts[0]);\n      int secondMinute = int.parse(secondTimeParts[1]);\n\n      Duration firstTime = Duration(hours: firstHour, minutes: firstMinute);\n      Duration secondTime = Duration(hours: secondHour, minutes: secondMinute);\n\n      int differenceInMinutes = (secondTime - firstTime).inMinutes;\n      \n      print('Difference in minutes: $differenceInMinutes');\n    } else {\n      print('Invalid time format.');\n    }\n  } else {\n    print('Invalid input.');\n  }\n}\n```"
  },
  {
    "task": "Build a program that reads a text and prints the number of vowels and consonants.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  print('Enter a text:');\n  String? input = stdin.readLineSync()?.toLowerCase();\n  \n  if (input != null) {\n    int vowels = 0;\n    int consonants = 0;\n    for (var char in input.runes) {\n      if ('aeiou'.contains(String.fromCharCode(char))) {\n        vowels++;\n      } else if (RegExp(r'[a-z]').hasMatch(String.fromCharCode(char))) {\n        consonants++;\n      }\n    }\n    print('Number of vowels: $vowels');\n    print('Number of consonants: $consonants');\n  }\n}\n```"
  },
  {
    "task": "Implement a tool that reads a JSON object from input and prints its keys.",
    "code": "```dart\nimport 'dart:convert';\nimport 'dart:io';\n\nvoid main() {\n  // Read input from stdin\n  String input = stdin.readLineSync()!;\n  \n  // Decode the JSON object\n  Map<String, dynamic> jsonObject = jsonDecode(input);\n  \n  // Print the keys\n  for (String key in jsonObject.keys) {\n    print(key);\n  }\n}\n```"
  },
  {
    "task": "Write a program that reads a CSV file from input and prints each row as a dictionary.",
    "code": "```dart\nimport 'dart:convert';\nimport 'dart:io';\n\nvoid main() {\n  final input = stdin.readLineSync(encoding: utf8);\n  if (input == null) {\n    return;\n  }\n  final lines = input.split('\\n');\n  if (lines.isEmpty) {\n    return;\n  }\n\n  final headers = lines.first.split(',');\n  for (var i = 1; i < lines.length; i++) {\n    final values = lines[i].split(',');\n    if (values.length != headers.length) {\n      continue;\n    }\n    final Map<String, String> row = {};\n    for (var j = 0; j < headers.length; j++) {\n      row[headers[j]] = values[j];\n    }\n    print(row);\n  }\n}\n```"
  },
  {
    "task": "Create a script that reads a sentence and prints it with the words in reverse order.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  print('Enter a sentence:');\n  String? input = stdin.readLineSync();\n  if (input != null) {\n    List<String> words = input.split(' ');\n    String reversedSentence = words.reversed.join(' ');\n    print(reversedSentence);\n  }\n}\n```"
  },
  {
    "task": "Develop a tool that reads a list of numbers and prints their median.",
    "code": "```dart\nimport 'dart:convert';\nimport 'dart:io';\n\nvoid main() {\n  print('Enter a list of numbers separated by spaces:');\n  String? input = stdin.readLineSync(encoding: utf8);\n  if (input != null) {\n    List<double> numbers = input.split(' ').map(double.parse).toList();\n    numbers.sort();\n    double median;\n    int n = numbers.length;\n    if (n % 2 == 0) {\n      median = (numbers[n ~/ 2 - 1] + numbers[n ~/ 2]) / 2;\n    } else {\n      median = numbers[n ~/ 2];\n    }\n    print('The median is: $median');\n  } else {\n    print('No input provided.');\n  }\n}\n```"
  },
  {
    "task": "Design a program that reads a sequence of characters and prints the first non-repeated character.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  print('Enter a sequence of characters:');\n  String input = stdin.readLineSync() ?? '';\n  Map<String, int> charCount = {};\n\n  for (int i = 0; i < input.length; i++) {\n    String char = input[i];\n    charCount[char] = (charCount[char] ?? 0) + 1;\n  }\n\n  for (int i = 0; i < input.length; i++) {\n    if (charCount[input[i]] == 1) {\n      print('First non-repeated character: ${input[i]}');\n      return;\n    }\n  }\n\n  print('No non-repeated characters found.');\n}\n```"
  },
  {
    "task": "Write a script that reads a list of tuples and prints them sorted by the second element.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  print('Enter the number of tuples:');\n  int n = int.parse(stdin.readLineSync()!);\n  \n  List<List<dynamic>> tuples = [];\n  \n  for (int i = 0; i < n; i++) {\n    print('Enter tuple $i (format: element1,element2):');\n    String? input = stdin.readLineSync();\n    if (input != null) {\n      List<String> elements = input.split(',');\n      tuples.add([elements[0], elements[1]]);\n    }\n  }\n  \n  tuples.sort((a, b) => a[1].compareTo(b[1]));\n  \n  print('Sorted tuples:');\n  for (var tuple in tuples) {\n    print(tuple);\n  }\n}\n```"
  },
  {
    "task": "Create a program that reads a list of cities and prints them grouped by their starting letter.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  print('Enter cities (one per line, type \"done\" to finish):');\n  List<String> cities = [];\n  while (true) {\n    String? input = stdin.readLineSync();\n    if (input == null || input.toLowerCase() == 'done') break;\n    cities.add(input);\n  }\n\n  Map<String, List<String>> groupedCities = {};\n  for (String city in cities) {\n    String startingLetter = city[0].toUpperCase();\n    groupedCities.putIfAbsent(startingLetter, () => []).add(city);\n  }\n\n  for (String letter in groupedCities.keys) {\n    print('$letter: ${groupedCities[letter]?.join(', ')}');\n  }\n}\n```"
  },
  {
    "task": "Build a tool that reads a text and prints the longest word.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  print('Enter a text:');\n  String input = stdin.readLineSync() ?? '';\n  List<String> words = input.split(RegExp(r'\\s+'));\n  String longestWord = words.reduce((a, b) => a.length > b.length ? a : b);\n  print('Longest word: $longestWord');\n}\n```"
  },
  {
    "task": "Implement a program that reads a string and prints the number of unique characters.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  print('Enter a string:');\n  String input = stdin.readLineSync() ?? '';\n  Set<String> uniqueChars = input.split('').toSet();\n  print('Number of unique characters: ${uniqueChars.length}');\n}\n```"
  },
  {
    "task": "Write a script that reads two strings and prints the longest common substring.",
    "code": "```dart\nimport 'dart:io';\n\nString longestCommonSubstring(String str1, String str2) {\n  int maxLength = 0;\n  String longestSubstr = '';\n  List<List<int>> lengths = List.generate(str1.length + 1, (_) => List.filled(str2.length + 1, 0));\n\n  for (int i = 1; i <= str1.length; i++) {\n    for (int j = 1; j <= str2.length; j++) {\n      if (str1[i - 1] == str2[j - 1]) {\n        lengths[i][j] = lengths[i - 1][j - 1] + 1;\n        if (lengths[i][j] > maxLength) {\n          maxLength = lengths[i][j];\n          longestSubstr = str1.substring(i - maxLength, i);\n        }\n      }\n    }\n  }\n  return longestSubstr;\n}\n\nvoid main() {\n  print('Enter first string:');\n  String? str1 = stdin.readLineSync();\n  print('Enter second string:');\n  String? str2 = stdin.readLineSync();\n\n  if (str1 != null && str2 != null) {\n    String result = longestCommonSubstring(str1, str2);\n    print('Longest common substring: $result');\n  }\n}\n```"
  },
  {
    "task": "Develop a program that reads a chessboard position and prints all possible moves for a knight.",
    "code": "```dart\nimport 'dart:io';\n\nList<List<int>> knightMoves = [\n  [2, 1], [2, -1], [-2, 1], [-2, -1],\n  [1, 2], [1, -2], [-1, 2], [-1, -2]\n];\n\nbool isValidMove(int x, int y) {\n  return x >= 0 && x < 8 && y >= 0 && y < 8;\n}\n\nList<String> getKnightMoves(String position) {\n  int x = position[0].codeUnitAt(0) - 'a'.codeUnitAt(0);\n  int y = int.parse(position[1]) - 1;\n\n  List<String> moves = [];\n  for (var move in knightMoves) {\n    int newX = x + move[0];\n    int newY = y + move[1];\n    if (isValidMove(newX, newY)) {\n      moves.add('${String.fromCharCode(newX + 'a'.codeUnitAt(0))}${newY + 1}');\n    }\n  }\n  return moves;\n}\n\nvoid main() {\n  stdout.write('Enter a position: ');\n  String? position = stdin.readLineSync();\n\n  if (position != null && position.length == 2) {\n    List<String> moves = getKnightMoves(position);\n    print('Possible moves: ${moves.join(', ')}');\n  } else {\n    print('Invalid input.');\n  }\n}\n```"
  },
  {
    "task": "Create a tool that reads a list of numbers and prints the mode.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  print('Enter numbers separated by spaces:');\n  String? input = stdin.readLineSync();\n\n  if (input != null && input.isNotEmpty) {\n    List<String> numberStrings = input.split(' ');\n    List<int> numbers = numberStrings.map(int.parse).toList();\n\n    Map<int, int> frequencyMap = {};\n    for (var number in numbers) {\n      frequencyMap.update(number, (value) => value + 1, ifAbsent: () => 1);\n    }\n\n    int mode = numbers[0];\n    int maxFrequency = 0;\n\n    frequencyMap.forEach((key, value) {\n      if (value > maxFrequency) {\n        maxFrequency = value;\n        mode = key;\n      }\n    });\n\n    print('The mode is: $mode');\n  } else {\n    print('No input provided.');\n  }\n}\n```"
  },
  {
    "task": "Design a program that reads a list of file paths and prints the largest file.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  print('Enter file paths separated by space:');\n  String? input = stdin.readLineSync();\n  if (input != null) {\n    List<String> filePaths = input.split(' ');\n    File? largestFile;\n    int maxSize = 0;\n\n    for (var path in filePaths) {\n      File file = File(path);\n      if (file.existsSync()) {\n        int size = file.lengthSync();\n        if (size > maxSize) {\n          maxSize = size;\n          largestFile = file;\n        }\n      }\n    }\n\n    if (largestFile != null) {\n      print('The largest file is: ${largestFile.path}');\n    } else {\n      print('No valid files found.');\n    }\n  }\n}\n```"
  },
  {
    "task": "Write a script that reads a list of prices and prints the total cost with tax.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  const double taxRate = 0.08; // 8% tax\n  double total = 0.0;\n\n  print('Enter prices separated by space:');\n  String? input = stdin.readLineSync();\n\n  if (input != null && input.isNotEmpty) {\n    List<String> prices = input.split(' ');\n\n    for (String price in prices) {\n      double priceValue = double.tryParse(price) ?? 0.0;\n      total += priceValue;\n    }\n\n    double totalWithTax = total * (1 + taxRate);\n    print('Total cost with tax: \\$${totalWithTax.toStringAsFixed(2)}');\n  } else {\n    print('No prices were entered.');\n  }\n}\n```"
  },
  {
    "task": "Build a program that reads a list of temperatures and prints them in Fahrenheit.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  print('Enter temperatures in Celsius (comma-separated):');\n  String? input = stdin.readLineSync();\n  if (input != null) {\n    List<String> tempStrings = input.split(',');\n    List<double> tempsInCelsius = tempStrings.map((temp) => double.parse(temp.trim())).toList();\n    List<double> tempsInFahrenheit = tempsInCelsius.map((celsius) => celsius * 9 / 5 + 32).toList();\n    print('Temperatures in Fahrenheit: ${tempsInFahrenheit.join(', ')}');\n  }\n}\n```"
  },
  {
    "task": "Implement a tool that reads a list of book titles and prints them sorted by length.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  print('Enter book titles, one per line. Enter an empty line to finish:');\n  List<String> titles = [];\n  while (true) {\n    String? input = stdin.readLineSync();\n    if (input == null || input.isEmpty) {\n      break;\n    }\n    titles.add(input);\n  }\n  titles.sort((a, b) => a.length.compareTo(b.length));\n  print('Sorted book titles by length:');\n  for (var title in titles) {\n    print(title);\n  }\n}\n```"
  },
  {
    "task": "Write a program that reads a directory path and prints all file names.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  stdout.write('Enter a directory path: ');\n  String? path = stdin.readLineSync();\n  if (path != null) {\n    try {\n      Directory dir = Directory(path);\n      if (dir.existsSync()) {\n        dir.listSync().forEach((FileSystemEntity entity) {\n          if (entity is File) {\n            print(entity.path.split(Platform.pathSeparator).last);\n          }\n        });\n      } else {\n        print('Directory does not exist.');\n      }\n    } catch (e) {\n      print('Error: $e');\n    }\n  } else {\n    print('Invalid input.');\n  }\n}\n```"
  },
  {
    "task": "Create a script that reads a list of URLs and prints those with a secure connection.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  print('Enter URLs separated by spaces:');\n  String? input = stdin.readLineSync();\n  \n  if (input != null) {\n    List<String> urls = input.split(' ');\n    List<String> secureUrls = urls.where((url) => url.startsWith('https://')).toList();\n    \n    print('Secure URLs:');\n    for (var url in secureUrls) {\n      print(url);\n    }\n  }\n}\n```"
  },
  {
    "task": "Develop a tool that reads a sequence of numbers and prints if it is strictly increasing.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  print('Enter a sequence of numbers separated by spaces:');\n  String? input = stdin.readLineSync();\n  if (input != null && input.isNotEmpty) {\n    List<int> numbers = input.split(' ').map(int.parse).toList();\n    bool isStrictlyIncreasing = true;\n    for (int i = 0; i < numbers.length - 1; i++) {\n      if (numbers[i] >= numbers[i + 1]) {\n        isStrictlyIncreasing = false;\n        break;\n      }\n    }\n    print(isStrictlyIncreasing ? 'The sequence is strictly increasing.' : 'The sequence is not strictly increasing.');\n  } else {\n    print('No input provided.');\n  }\n}\n```"
  },
  {
    "task": "Design a program that reads a list of products and prints them grouped by category.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  Map<String, List<String>> categories = {};\n\n  print('Enter number of products:');\n  int numberOfProducts = int.parse(stdin.readLineSync()!);\n\n  for (int i = 0; i < numberOfProducts; i++) {\n    print('Enter product name:');\n    String productName = stdin.readLineSync()!;\n    print('Enter product category:');\n    String category = stdin.readLineSync()!;\n\n    if (categories.containsKey(category)) {\n      categories[category]!.add(productName);\n    } else {\n      categories[category] = [productName];\n    }\n  }\n\n  print('\\nProducts grouped by category:');\n  categories.forEach((category, products) {\n    print('\\nCategory: $category');\n    products.forEach((product) {\n      print(' - $product');\n    });\n  });\n}\n```"
  },
  {
    "task": "Write a script that reads a sentence and prints it with alternating word capitalization.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  stdout.write('Enter a sentence: ');\n  String? input = stdin.readLineSync();\n  \n  if (input != null) {\n    List<String> words = input.split(' ');\n    for (int i = 0; i < words.length; i++) {\n      words[i] = i.isEven \n          ? words[i].toLowerCase() \n          : words[i].toUpperCase();\n    }\n    print(words.join(' '));\n  }\n}\n```"
  },
  {
    "task": "Create a program that reads a list of grades and prints the highest and lowest grade.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  print('Enter grades separated by spaces:');\n  String? input = stdin.readLineSync();\n  if (input != null) {\n    List<int> grades = input.split(' ').map(int.parse).toList();\n    int highest = grades.reduce((a, b) => a > b ? a : b);\n    int lowest = grades.reduce((a, b) => a < b ? a : b);\n    print('Highest grade: $highest');\n    print('Lowest grade: $lowest');\n  }\n}\n```"
  },
  {
    "task": "Build a tool that reads a text and prints the number of sentences.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  print('Enter text:');\n  String? input = stdin.readLineSync();\n  if (input != null) {\n    int sentenceCount = input.split(RegExp(r'[.!?]')).where((s) => s.trim().isNotEmpty).length;\n    print('Number of sentences: $sentenceCount');\n  }\n}\n```"
  },
  {
    "task": "Implement a program that reads a list of integers and prints the sum of all odd numbers.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  print('Enter a list of integers separated by spaces:');\n  List<int> numbers = stdin.readLineSync()!\n      .split(' ')\n      .map(int.parse)\n      .toList();\n\n  int sumOfOdds = numbers.where((n) => n.isOdd).reduce((a, b) => a + b);\n\n  print('Sum of odd numbers: $sumOfOdds');\n}\n```"
  },
  {
    "task": "Write a script that reads a text and prints the shortest sentence.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  print('Enter text:');\n  String? input = stdin.readLineSync();\n  if (input != null && input.isNotEmpty) {\n    List<String> sentences = input.split(RegExp(r'[.!?]')).where((s) => s.trim().isNotEmpty).toList();\n    String shortestSentence = sentences.reduce((a, b) => a.trim().length <= b.trim().length ? a : b);\n    print('Shortest sentence: ${shortestSentence.trim()}');\n  }\n}\n```"
  },
  {
    "task": "Develop a program that reads a list of dictionaries and prints them sorted by a specific key.",
    "code": "```dart\nimport 'dart:convert';\nimport 'dart:io';\n\nvoid main() {\n  print('Enter a list of dictionaries in JSON format:');\n  var input = stdin.readLineSync();\n  if (input != null) {\n    List<dynamic> list = jsonDecode(input);\n    if (list is List<Map<String, dynamic>>) {\n      print('Enter the key to sort by:');\n      var key = stdin.readLineSync();\n      if (key != null) {\n        list.sort((a, b) => a[key].compareTo(b[key]));\n        for (var item in list) {\n          print(item);\n        }\n      }\n    }\n  }\n}\n```"
  },
  {
    "task": "Create a tool that reads a sequence of strings and prints the common prefix.",
    "code": "```dart\nimport 'dart:io';\n\nString commonPrefix(List<String> strings) {\n  if (strings.isEmpty) return '';\n  String prefix = strings[0];\n  for (int i = 1; i < strings.length; i++) {\n    while (strings[i].indexOf(prefix) != 0) {\n      prefix = prefix.substring(0, prefix.length - 1);\n      if (prefix.isEmpty) return '';\n    }\n  }\n  return prefix;\n}\n\nvoid main() {\n  print('Enter strings one by one. Enter a blank line to finish:');\n  List<String> strings = [];\n  while (true) {\n    String? input = stdin.readLineSync();\n    if (input == null || input.isEmpty) break;\n    strings.add(input);\n  }\n  String prefix = commonPrefix(strings);\n  print('Common prefix: $prefix');\n}\n```"
  },
  {
    "task": "Design a program that reads a number and prints all of its divisors.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  stdout.write('Enter a number: ');\n  int number = int.parse(stdin.readLineSync()!);\n\n  print('Divisors of $number are:');\n  for (int i = 1; i <= number; i++) {\n    if (number % i == 0) {\n      print(i);\n    }\n  }\n}\n```"
  },
  {
    "task": "Write a script that reads a text and prints each word with its length.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  print('Enter a text:');\n  String? input = stdin.readLineSync();\n\n  if (input != null && input.isNotEmpty) {\n    List<String> words = input.split(RegExp(r'\\s+'));\n    for (var word in words) {\n      print('$word: ${word.length}');\n    }\n  }\n}\n```"
  },
  {
    "task": "Build a program that reads a list of colors and prints them in a rainbow order.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  print('Enter colors separated by commas:');\n  String? input = stdin.readLineSync();\n  if (input != null) {\n    List<String> colors = input.split(',').map((color) => color.trim()).toList();\n    List<String> rainbowOrder = [\n      'red',\n      'orange',\n      'yellow',\n      'green',\n      'blue',\n      'indigo',\n      'violet'\n    ];\n    \n    List<String> sortedColors = colors\n        .where((color) => rainbowOrder.contains(color.toLowerCase()))\n        .toList();\n    \n    sortedColors.sort((a, b) =>\n        rainbowOrder.indexOf(a.toLowerCase()).compareTo(rainbowOrder.indexOf(b.toLowerCase())));\n    \n    print('Colors in rainbow order:');\n    for (var color in sortedColors) {\n      print(color);\n    }\n  }\n}\n```"
  },
  {
    "task": "Implement a tool that reads a list of names and prints them with their initials.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  print('Enter names separated by commas:');\n  String? input = stdin.readLineSync();\n  if (input != null) {\n    List<String> names = input.split(',');\n    for (String name in names) {\n      name = name.trim();\n      if (name.isNotEmpty) {\n        List<String> parts = name.split(' ');\n        String initials = parts.map((part) => part[0].toUpperCase()).join();\n        print('$name: $initials');\n      }\n    }\n  }\n}\n```"
  },
  {
    "task": "Write a program that reads a series of coordinates and prints the center point.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  List<List<double>> coordinates = [];\n  print('Enter coordinates (e.g., x y), one pair per line. Enter \"done\" to finish:');\n  \n  while (true) {\n    String? input = stdin.readLineSync();\n    if (input == null || input.toLowerCase() == 'done') {\n      break;\n    }\n    List<String> parts = input.split(' ');\n    if (parts.length == 2) {\n      try {\n        double x = double.parse(parts[0]);\n        double y = double.parse(parts[1]);\n        coordinates.add([x, y]);\n      } catch (e) {\n        print('Invalid input, please enter numeric values for coordinates.');\n      }\n    } else {\n      print('Please enter exactly two numbers for a coordinate.');\n    }\n  }\n\n  if (coordinates.isNotEmpty) {\n    double sumX = 0;\n    double sumY = 0;\n    for (var coordinate in coordinates) {\n      sumX += coordinate[0];\n      sumY += coordinate[1];\n    }\n    double centerX = sumX / coordinates.length;\n    double centerY = sumY / coordinates.length;\n    print('Center Point: ($centerX, $centerY)');\n  } else {\n    print('No coordinates entered.');\n  }\n}\n```"
  },
  {
    "task": "Create a script that reads a sentence and prints it with each vowel replaced by its uppercase form.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  stdout.write('Enter a sentence: ');\n  String sentence = stdin.readLineSync() ?? '';\n  String result = sentence.replaceAllMapped(\n    RegExp(r'[aeiou]'),\n    (match) => match.group(0)!.toUpperCase(),\n  );\n  print(result);\n}\n```"
  },
  {
    "task": "Develop a tool that reads a mathematical expression and evaluates its result.",
    "code": "```dart\nimport 'dart:io';\nimport 'package:expressions/expressions.dart';\n\nvoid main() {\n  print('Enter a mathematical expression:');\n  String? input = stdin.readLineSync();\n\n  if (input != null && input.isNotEmpty) {\n    try {\n      final expression = Expression.parse(input);\n      final evaluator = const ExpressionEvaluator();\n      var result = evaluator.eval(expression, null);\n      print('Result: $result');\n    } catch (e) {\n      print('Error evaluating expression: $e');\n    }\n  } else {\n    print('No expression entered.');\n  }\n}\n```"
  },
  {
    "task": "Design a program that reads a text and prints the first three words.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  print('Enter text:');\n  String? input = stdin.readLineSync();\n  if (input != null) {\n    List<String> words = input.split(' ');\n    for (int i = 0; i < words.length && i < 3; i++) {\n      print(words[i]);\n    }\n  }\n}\n```"
  },
  {
    "task": "Write a script that reads a list of numbers and prints them without duplicates.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  print('Enter numbers separated by spaces:');\n  String? input = stdin.readLineSync();\n  if (input != null) {\n    List<String> numbers = input.split(' ');\n    Set<String> uniqueNumbers = numbers.toSet();\n    print(uniqueNumbers.join(' '));\n  }\n}\n```"
  },
  {
    "task": "Create a program that reads a string and prints it with spaces between each character.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  stdout.write('Enter a string: ');\n  String? input = stdin.readLineSync();\n  if (input != null) {\n    String output = input.split('').join(' ');\n    print(output);\n  }\n}\n```"
  },
  {
    "task": "Build a tool that reads a list of events with dates and prints them by chronological order.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  List<Map<String, String>> events = [];\n  \n  print('Enter events and dates (format: Event YYYY-MM-DD), type \"done\" to finish:');\n  \n  while (true) {\n    String? input = stdin.readLineSync();\n    if (input == null || input.toLowerCase() == 'done') {\n      break;\n    }\n    \n    List<String> parts = input.split(' ');\n    if (parts.length < 2) {\n      print('Invalid format. Please enter in the format: Event YYYY-MM-DD');\n      continue;\n    }\n\n    String eventName = parts.sublist(0, parts.length - 1).join(' ');\n    String date = parts.last;\n\n    events.add({'event': eventName, 'date': date});\n  }\n\n  events.sort((a, b) => a['date']!.compareTo(b['date']!));\n\n  print('\\nEvents in chronological order:');\n  for (var event in events) {\n    print('${event['event']} on ${event['date']}');\n  }\n}\n```"
  },
  {
    "task": "Implement a program that reads a list of fractions and prints their sum as a reduced fraction.",
    "code": "```dart\nimport 'dart:io';\n\nint gcd(int a, int b) => b == 0 ? a : gcd(b, a % b);\n\nvoid main() {\n  stdout.write('Enter fractions (e.g., 1/2 3/4): ');\n  String? input = stdin.readLineSync();\n  \n  if (input == null || input.trim().isEmpty) {\n    print('No input provided.');\n    return;\n  }\n  \n  List<String> fractions = input.split(' ');\n  int numeratorSum = 0;\n  int denominator = 1;\n  \n  for (String fraction in fractions) {\n    List<String> parts = fraction.split('/');\n    int numerator = int.parse(parts[0]);\n    int denom = int.parse(parts[1]);\n    \n    // Convert all fractions to a common denominator\n    numeratorSum = numeratorSum * denom + numerator * denominator;\n    denominator *= denom;\n  }\n  \n  int divisor = gcd(numeratorSum.abs(), denominator.abs());\n  numeratorSum ~/= divisor;\n  denominator ~/= divisor;\n  \n  print('Sum of fractions: $numeratorSum/$denominator');\n}\n```"
  },
  {
    "task": "Write a script that reads a text and prints it with each consonant doubled.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  print('Enter text:');\n  String input = stdin.readLineSync() ?? '';\n  String result = input.replaceAllMapped(RegExp(r'(?i)[bcdfghjklmnpqrstvwxyz]'), (match) => '${match.group(0)}${match.group(0)}');\n  print(result);\n}\n```"
  },
  {
    "task": "Develop a program that reads a number and prints its representation in Roman numerals.",
    "code": "```dart\nimport 'dart:io';\n\nString toRoman(int number) {\n  var romanNumerals = {\n    1000: 'M',\n    900: 'CM',\n    500: 'D',\n    400: 'CD',\n    100: 'C',\n    90: 'XC',\n    50: 'L',\n    40: 'XL',\n    10: 'X',\n    9: 'IX',\n    5: 'V',\n    4: 'IV',\n    1: 'I'\n  };\n  \n  var result = StringBuffer();\n  romanNumerals.forEach((value, symbol) {\n    while (number >= value) {\n      result.write(symbol);\n      number -= value;\n    }\n  });\n  return result.toString();\n}\n\nvoid main() {\n  print('Enter a number:');\n  int? number = int.tryParse(stdin.readLineSync() ?? '');\n  if (number != null) {\n    print('Roman numeral: ${toRoman(number)}');\n  } else {\n    print('Invalid number');\n  }\n}\n```"
  },
  {
    "task": "Create a tool that reads a list of words and prints them with each letter in reverse order.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  print('Enter words separated by space:');\n  String? input = stdin.readLineSync();\n  if (input != null) {\n    List<String> words = input.split(' ');\n    for (var word in words) {\n      print(reverseString(word));\n    }\n  }\n}\n\nString reverseString(String str) {\n  return str.split('').reversed.join('');\n}\n```"
  },
  {
    "task": "Design a program that reads a set of points and prints the one closest to the origin.",
    "code": "```dart\nimport 'dart:io';\nimport 'dart:math';\n\nvoid main() {\n  List<Point> points = [];\n  print(\"Enter the number of points:\");\n  int n = int.parse(stdin.readLineSync()!);\n\n  for (int i = 0; i < n; i++) {\n    print(\"Enter point ${i + 1} coordinates (x, y):\");\n    List<String> input = stdin.readLineSync()!.split(' ');\n    double x = double.parse(input[0]);\n    double y = double.parse(input[1]);\n    points.add(Point(x, y));\n  }\n\n  Point closest = points.reduce((a, b) => a.distanceTo(Point(0, 0)) < b.distanceTo(Point(0, 0)) ? a : b);\n  print(\"The closest point to the origin is: (${closest.x}, ${closest.y})\");\n}\n```"
  },
  {
    "task": "Write a script that reads a text and prints the frequency of each word.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  print('Enter text:');\n  String input = stdin.readLineSync() ?? '';\n  \n  Map<String, int> wordFrequency = {};\n  \n  List<String> words = input.split(RegExp(r'\\s+'));\n  for (var word in words) {\n    if (word.isNotEmpty) {\n      word = word.toLowerCase();\n      wordFrequency[word] = (wordFrequency[word] ?? 0) + 1;\n    }\n  }\n  \n  wordFrequency.forEach((word, count) {\n    print('$word: $count');\n  });\n}\n```"
  },
  {
    "task": "Build a program that reads a list of integers and prints the second smallest.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  print('Enter integers separated by space:');\n  var input = stdin.readLineSync();\n  if (input != null && input.isNotEmpty) {\n    var numbers = input.split(' ').map(int.parse).toList()..sort();\n    if (numbers.length < 2) {\n      print('Not enough numbers to determine the second smallest.');\n    } else {\n      print('The second smallest number is: ${numbers[1]}');\n    }\n  } else {\n    print('No input provided.');\n  }\n}\n```"
  },
  {
    "task": "Implement a tool that reads a string and prints all its substrings.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  print('Enter a string:');\n  String input = stdin.readLineSync() ?? '';\n\n  for (int start = 0; start < input.length; start++) {\n    for (int end = start + 1; end <= input.length; end++) {\n      print(input.substring(start, end));\n    }\n  }\n}\n```"
  },
  {
    "task": "Write a program that reads a number and generates a random number up to that number.",
    "code": "```dart\nimport 'dart:io';\nimport 'dart:math';\n\nvoid main() {\n  stdout.write('Enter a number: ');\n  int maxNumber = int.parse(stdin.readLineSync()!);\n  Random random = Random();\n  int randomNumber = random.nextInt(maxNumber);\n  print('Random number: $randomNumber');\n}\n```"
  },
  {
    "task": "Create a script that reads a sentence and prints it with each word reversed.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  stdout.write('Enter a sentence: ');\n  String? input = stdin.readLineSync();\n  if (input != null) {\n    String reversed = input.split(' ').map((word) => word.split('').reversed.join('')).join(' ');\n    print(reversed);\n  }\n}\n```"
  },
  {
    "task": "Develop a tool that reads a text and prints it with each sentence on a new line.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  print('Enter text:');\n  String? input = stdin.readLineSync();\n  if (input != null) {\n    List<String> sentences = input.split(RegExp(r'(?<=[.!?])\\s*'));\n    for (var sentence in sentences) {\n      print(sentence);\n    }\n  }\n}\n```"
  },
  {
    "task": "Design a program that reads a list of numbers and prints the product of all negative numbers.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  print('Enter a list of numbers separated by space:');\n  List<String> input = stdin.readLineSync()!.split(' ');\n  List<int> numbers = input.map(int.parse).toList();\n\n  int product = 1;\n  bool hasNegative = false;\n\n  for (var number in numbers) {\n    if (number < 0) {\n      product *= number;\n      hasNegative = true;\n    }\n  }\n\n  if (hasNegative) {\n    print('Product of negative numbers: $product');\n  } else {\n    print('No negative numbers found.');\n  }\n}\n```"
  },
  {
    "task": "Write a script that reads a dictionary and prints the keys and values in sorted order.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  // Simulate reading a dictionary\n  Map<String, String> dictionary = {\n    'banana': 'fruit',\n    'carrot': 'vegetable',\n    'apple': 'fruit'\n  };\n\n  // Sort the keys\n  var sortedKeys = dictionary.keys.toList()..sort();\n\n  // Print the keys and values in sorted order\n  for (var key in sortedKeys) {\n    stdout.writeln('$key: ${dictionary[key]}');\n  }\n}\n```"
  },
  {
    "task": "Create a program that reads a text and prints the number of unique words.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  print('Enter text:');\n  String input = stdin.readLineSync() ?? '';\n  List<String> words = input.split(RegExp(r'\\s+'));\n  Set<String> uniqueWords = words.toSet();\n  print('Number of unique words: ${uniqueWords.length}');\n}\n```"
  }
]