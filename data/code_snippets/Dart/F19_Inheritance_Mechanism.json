[
  {
    "task": "Create a base class for a vehicle with methods for speed and fuel efficiency, then derive a car class that overrides these methods to provide specific implementations.",
    "code": "```dart\nabstract class Vehicle {\n  double speed();\n  double fuelEfficiency();\n}\n\nclass Car extends Vehicle {\n  @override\n  double speed() {\n    return 120.0; // Example speed in km/h\n  }\n\n  @override\n  double fuelEfficiency() {\n    return 15.0; // Example fuel efficiency in km/l\n  }\n}\n\nvoid main() {\n  Car myCar = Car();\n  print('Car speed: ${myCar.speed()} km/h');\n  print('Car fuel efficiency: ${myCar.fuelEfficiency()} km/l');\n}\n```"
  },
  {
    "task": "Design a base class for a multimedia file with properties like duration and format, then extend it with a video class that includes resolution and frame rate.",
    "code": "```dart\nclass MultimediaFile {\n  final double duration;\n  final String format;\n\n  MultimediaFile(this.duration, this.format);\n}\n\nclass VideoFile extends MultimediaFile {\n  final String resolution;\n  final double frameRate;\n\n  VideoFile(double duration, String format, this.resolution, this.frameRate)\n      : super(duration, format);\n}\n```"
  },
  {
    "task": "Develop a superclass for bank accounts with methods for deposit and withdrawal, then create a savings account subclass that overrides the withdrawal method to incorporate interest deductions.",
    "code": "```dart\nclass BankAccount {\n  double balance;\n\n  BankAccount(this.balance);\n\n  void deposit(double amount) {\n    balance += amount;\n  }\n\n  void withdraw(double amount) {\n    if (amount <= balance) {\n      balance -= amount;\n    }\n  }\n}\n\nclass SavingsAccount extends BankAccount {\n  double interestRate;\n\n  SavingsAccount(double balance, this.interestRate) : super(balance);\n\n  @override\n  void withdraw(double amount) {\n    double interestDeductions = amount * interestRate;\n    double totalAmount = amount + interestDeductions;\n    if (totalAmount <= balance) {\n      balance -= totalAmount;\n    }\n  }\n}\n```"
  },
  {
    "task": "Implement a base class for a geometric shape with methods to calculate area and perimeter, then create a rectangle subclass that provides specific calculations for these methods.",
    "code": "```dart\nabstract class GeometricShape {\n  double calculateArea();\n  double calculatePerimeter();\n}\n\nclass Rectangle extends GeometricShape {\n  final double width;\n  final double height;\n\n  Rectangle(this.width, this.height);\n\n  @override\n  double calculateArea() {\n    return width * height;\n  }\n\n  @override\n  double calculatePerimeter() {\n    return 2 * (width + height);\n  }\n}\n```"
  },
  {
    "task": "Construct a parent class for employees with a method to calculate salary, then derive a manager class that overrides this method to include bonuses.",
    "code": "```dart\nclass Employee {\n  double baseSalary;\n\n  Employee(this.baseSalary);\n\n  double calculateSalary() {\n    return baseSalary;\n  }\n}\n\nclass Manager extends Employee {\n  double bonus;\n\n  Manager(double baseSalary, this.bonus) : super(baseSalary);\n\n  @override\n  double calculateSalary() {\n    return baseSalary + bonus;\n  }\n}\n```"
  },
  {
    "task": "Set up a base class for a library item with properties like title and author, and extend it with a book subclass that adds a number of pages property.",
    "code": "```dart\nclass LibraryItem {\n  String title;\n  String author;\n\n  LibraryItem(this.title, this.author);\n}\n\nclass Book extends LibraryItem {\n  int numberOfPages;\n\n  Book(String title, String author, this.numberOfPages) : super(title, author);\n}\n```"
  },
  {
    "task": "Create a foundation class for an electronic device with a method to turn on and off, and derive a smartphone class that overrides the turn on method to require a passcode.",
    "code": "```dart\nclass ElectronicDevice {\n  bool isOn = false;\n\n  void turnOn() {\n    isOn = true;\n    print('Device is turned on.');\n  }\n\n  void turnOff() {\n    isOn = false;\n    print('Device is turned off.');\n  }\n}\n\nclass Smartphone extends ElectronicDevice {\n  @override\n  void turnOn({required String passcode}) {\n    if (passcode == '1234') {\n      isOn = true;\n      print('Smartphone is turned on.');\n    } else {\n      print('Incorrect passcode. Smartphone remains off.');\n    }\n  }\n}\n\nvoid main() {\n  var myDevice = ElectronicDevice();\n  myDevice.turnOn();\n  myDevice.turnOff();\n\n  var myPhone = Smartphone();\n  myPhone.turnOn(passcode: '0000'); // Incorrect passcode\n  myPhone.turnOn(passcode: '1234'); // Correct passcode\n}\n```"
  },
  {
    "task": "Design a base class for an animal with a method to make a sound, then create a dog subclass that overrides this method to bark.",
    "code": "```dart\nclass Animal {\n  void makeSound() {\n    print('Animal sound');\n  }\n}\n\nclass Dog extends Animal {\n  @override\n  void makeSound() {\n    print('Bark');\n  }\n}\n\nvoid main() {\n  Animal myAnimal = Animal();\n  myAnimal.makeSound();\n\n  Dog myDog = Dog();\n  myDog.makeSound();\n}\n```"
  },
  {
    "task": "Develop a superclass for meals with a method to calculate calories, then create a dessert subclass that overrides it to add extra sugar calories.",
    "code": "```dart\nclass Meal {\n  int baseCalories;\n\n  Meal(this.baseCalories);\n\n  int calculateCalories() {\n    return baseCalories;\n  }\n}\n\nclass Dessert extends Meal {\n  int sugarCalories;\n\n  Dessert(int baseCalories, this.sugarCalories) : super(baseCalories);\n\n  @override\n  int calculateCalories() {\n    return super.calculateCalories() + sugarCalories;\n  }\n}\n\nvoid main() {\n  Meal meal = Meal(500);\n  print('Meal calories: ${meal.calculateCalories()}');\n\n  Dessert dessert = Dessert(500, 200);\n  print('Dessert calories: ${dessert.calculateCalories()}');\n}\n```"
  },
  {
    "task": "Implement a base class for a transportation mode with a method to calculate travel time, then extend it with a plane subclass that overrides the method to calculate based on speed.",
    "code": "```dart\nclass TransportationMode {\n  double calculateTravelTime(double distance) {\n    // Default implementation\n    return distance;\n  }\n}\n\nclass Plane extends TransportationMode {\n  final double speed; // speed in km/h\n\n  Plane(this.speed);\n\n  @override\n  double calculateTravelTime(double distance) {\n    return distance / speed;\n  }\n}\n\nvoid main() {\n  Plane plane = Plane(900);\n  double travelTime = plane.calculateTravelTime(1800);\n  print('Travel time by plane: $travelTime hours');\n}\n```"
  },
  {
    "task": "Construct a parent class for a musical instrument with a method to play sound, then derive a piano class that overrides the method to play specific notes.",
    "code": "```dart\nclass MusicalInstrument {\n  void playSound() {\n    print('Playing a generic sound from a musical instrument.');\n  }\n}\n\nclass Piano extends MusicalInstrument {\n  @override\n  void playSound() {\n    print('Playing specific piano notes.');\n  }\n}\n\nvoid main() {\n  MusicalInstrument instrument = MusicalInstrument();\n  instrument.playSound();\n  \n  Piano piano = Piano();\n  piano.playSound();\n}\n```"
  },
  {
    "task": "Set up a base class for a user account with a method to reset password, and extend it with an admin account subclass that overrides it to include security questions.",
    "code": "```dart\nclass UserAccount {\n  String password;\n\n  UserAccount(this.password);\n\n  void resetPassword() {\n    password = 'new_password';\n  }\n}\n\nclass AdminAccount extends UserAccount {\n  AdminAccount(String password) : super(password);\n\n  @override\n  void resetPassword() {\n    // Prompt for security questions (not implemented)\n    password = 'new_secure_password';\n  }\n}\n```"
  },
  {
    "task": "Create a foundational class for a beverage with properties like volume and temperature, and derive a coffee class that overrides the temperature property to be hot.",
    "code": "```dart\nclass Beverage {\n  double volume;\n  String temperature;\n\n  Beverage(this.volume, this.temperature);\n}\n\nclass Coffee extends Beverage {\n  Coffee(double volume) : super(volume, 'hot');\n}\n\nvoid main() {\n  Coffee myCoffee = Coffee(250);\n  print('Volume: ${myCoffee.volume}ml, Temperature: ${myCoffee.temperature}');\n}\n```"
  },
  {
    "task": "Design a base class for a service appointment with a method to schedule time, then create a doctor appointment subclass that overrides this method to include consultation duration.",
    "code": "```dart\nclass ServiceAppointment {\n  String time;\n\n  ServiceAppointment(this.time);\n\n  void scheduleTime(String newTime) {\n    time = newTime;\n  }\n}\n\nclass DoctorAppointment extends ServiceAppointment {\n  int consultationDuration;\n\n  DoctorAppointment(String time, this.consultationDuration) : super(time);\n\n  @override\n  void scheduleTime(String newTime) {\n    time = newTime;\n    print('Scheduled doctor appointment at $time with a duration of $consultationDuration minutes.');\n  }\n}\n\nvoid main() {\n  DoctorAppointment appointment = DoctorAppointment('10:00 AM', 30);\n  appointment.scheduleTime('11:00 AM');\n}\n```"
  },
  {
    "task": "Develop a superclass for electronic gadgets with a method to calculate battery life, then extend it with a laptop class that overrides this method to consider usage patterns.",
    "code": "```dart\nclass ElectronicGadget {\n  int batteryCapacity; // in mAh\n  int powerConsumption; // in mAh per hour\n\n  ElectronicGadget(this.batteryCapacity, this.powerConsumption);\n\n  double calculateBatteryLife() {\n    return batteryCapacity / powerConsumption;\n  }\n}\n\nclass Laptop extends ElectronicGadget {\n  double usagePatternFactor;\n\n  Laptop(int batteryCapacity, int powerConsumption, this.usagePatternFactor)\n      : super(batteryCapacity, powerConsumption);\n\n  @override\n  double calculateBatteryLife() {\n    return (batteryCapacity / powerConsumption) * usagePatternFactor;\n  }\n}\n```"
  },
  {
    "task": "Implement a base class for a website component with a method to render content, then create a blog post subclass that overrides this method to include author information.",
    "code": "```dart\nclass WebsiteComponent {\n  String renderContent() {\n    return \"Rendering content of the website component.\";\n  }\n}\n\nclass BlogPost extends WebsiteComponent {\n  final String author;\n\n  BlogPost(this.author);\n\n  @override\n  String renderContent() {\n    return \"Rendering blog post content with author: $author.\";\n  }\n}\n\nvoid main() {\n  WebsiteComponent component = WebsiteComponent();\n  print(component.renderContent());\n\n  BlogPost post = BlogPost(\"John Doe\");\n  print(post.renderContent());\n}\n```"
  },
  {
    "task": "Construct a parent class for a recipe with methods for ingredients and instructions, then derive a cake recipe class that overrides these methods to add baking steps.",
    "code": "```dart\nclass Recipe {\n  String ingredients() {\n    return 'List of ingredients';\n  }\n\n  String instructions() {\n    return 'Instructions to prepare the recipe';\n  }\n}\n\nclass CakeRecipe extends Recipe {\n  @override\n  String ingredients() {\n    return 'List of cake ingredients';\n  }\n\n  @override\n  String instructions() {\n    return 'Instructions to bake the cake';\n  }\n}\n\nvoid main() {\n  CakeRecipe cake = CakeRecipe();\n  print(cake.ingredients());\n  print(cake.instructions());\n}\n```"
  },
  {
    "task": "Set up a base class for a plant with methods for sunlight and water needs, and extend it with a cactus subclass that overrides these methods to require less water.",
    "code": "```dart\nclass Plant {\n  void sunlightNeeds() {\n    print('Needs moderate sunlight.');\n  }\n\n  void waterNeeds() {\n    print('Needs regular watering.');\n  }\n}\n\nclass Cactus extends Plant {\n  @override\n  void waterNeeds() {\n    print('Needs minimal watering.');\n  }\n}\n\nvoid main() {\n  Plant genericPlant = Plant();\n  Cactus myCactus = Cactus();\n\n  genericPlant.sunlightNeeds();\n  genericPlant.waterNeeds();\n\n  myCactus.sunlightNeeds();\n  myCactus.waterNeeds();\n}\n```"
  },
  {
    "task": "Create a foundational class for a building with properties like height and material, and derive a skyscraper class that overrides the height property to be significantly taller.",
    "code": "```dart\nclass Building {\n  double height;\n  String material;\n\n  Building(this.height, this.material);\n}\n\nclass Skyscraper extends Building {\n  Skyscraper(String material) : super(300.0, material);\n}\n\nvoid main() {\n  Building building = Building(50.0, 'Concrete');\n  Skyscraper skyscraper = Skyscraper('Steel');\n\n  print('Building: ${building.height} meters, Material: ${building.material}');\n  print('Skyscraper: ${skyscraper.height} meters, Material: ${skyscraper.material}');\n}\n```"
  },
  {
    "task": "Design a base class for a payment method with a method to process transactions, then create a credit card subclass that overrides this method to include credit limits.",
    "code": "```dart\nclass PaymentMethod {\n  void processTransaction(double amount) {\n    print('Processing transaction of amount: \\$${amount.toStringAsFixed(2)}');\n  }\n}\n\nclass CreditCard extends PaymentMethod {\n  double creditLimit;\n\n  CreditCard(this.creditLimit);\n\n  @override\n  void processTransaction(double amount) {\n    if (amount <= creditLimit) {\n      print('Processing credit card transaction of amount: \\$${amount.toStringAsFixed(2)}');\n      creditLimit -= amount;\n    } else {\n      print('Transaction declined. Amount exceeds credit limit.');\n    }\n  }\n}\n\nvoid main() {\n  PaymentMethod payment = PaymentMethod();\n  payment.processTransaction(100.0);\n\n  CreditCard creditCard = CreditCard(500.0);\n  creditCard.processTransaction(100.0);\n  creditCard.processTransaction(600.0);\n}\n```"
  },
  {
    "task": "Develop a superclass for a computer program with methods for input and output, then extend it with a game subclass that overrides these methods to include player interactions.",
    "code": "```dart\nclass ComputerProgram {\n  void input() {\n    print(\"General input method\");\n  }\n\n  void output() {\n    print(\"General output method\");\n  }\n}\n\nclass Game extends ComputerProgram {\n  @override\n  void input() {\n    print(\"Game-specific player input\");\n  }\n\n  @override\n  void output() {\n    print(\"Game-specific player output\");\n  }\n}\n\nvoid main() {\n  ComputerProgram program = ComputerProgram();\n  program.input();\n  program.output();\n\n  Game game = Game();\n  game.input();\n  game.output();\n}\n```"
  },
  {
    "task": "Implement a base class for a dining establishment with a method to calculate wait time, then create a fast food subclass that overrides this method to be shorter.",
    "code": "```dart\nclass DiningEstablishment {\n  int calculateWaitTime() {\n    return 30; // default wait time in minutes\n  }\n}\n\nclass FastFood extends DiningEstablishment {\n  @override\n  int calculateWaitTime() {\n    return 5; // reduced wait time for fast food\n  }\n}\n\nvoid main() {\n  DiningEstablishment restaurant = DiningEstablishment();\n  FastFood fastFoodPlace = FastFood();\n\n  print('Restaurant wait time: ${restaurant.calculateWaitTime()} minutes');\n  print('Fast food wait time: ${fastFoodPlace.calculateWaitTime()} minutes');\n}\n```"
  },
  {
    "task": "Construct a parent class for a social media profile with methods for posting and liking, then derive a business profile class that overrides these methods to include promotions.",
    "code": "```dart\nclass SocialMediaProfile {\n  void post(String content) {\n    print('Posting: $content');\n  }\n\n  void like(String content) {\n    print('Liked: $content');\n  }\n}\n\nclass BusinessProfile extends SocialMediaProfile {\n  @override\n  void post(String content) {\n    print('Business Posting: $content with promotions');\n  }\n\n  @override\n  void like(String content) {\n    print('Liked: $content with an eye on potential promotions');\n  }\n}\n\nvoid main() {\n  SocialMediaProfile user = SocialMediaProfile();\n  user.post('Hello World');\n  user.like('Hello World');\n\n  BusinessProfile business = BusinessProfile();\n  business.post('New Product Launch');\n  business.like('New Product Launch');\n}\n```"
  },
  {
    "task": "Set up a base class for an educational course with methods for syllabus and grading, and extend it with an online course subclass that overrides these methods for remote learning.",
    "code": "```dart\nclass EducationalCourse {\n  void syllabus() {\n    print(\"General course syllabus.\");\n  }\n\n  void grading() {\n    print(\"Standard grading system.\");\n  }\n}\n\nclass OnlineCourse extends EducationalCourse {\n  @override\n  void syllabus() {\n    print(\"Online course syllabus tailored for remote learning.\");\n  }\n\n  @override\n  void grading() {\n    print(\"Online grading system with digital submissions.\");\n  }\n}\n\nvoid main() {\n  EducationalCourse generalCourse = EducationalCourse();\n  OnlineCourse onlineCourse = OnlineCourse();\n\n  generalCourse.syllabus();\n  generalCourse.grading();\n\n  onlineCourse.syllabus();\n  onlineCourse.grading();\n}\n```"
  },
  {
    "task": "Create a foundational class for a sports team with properties like team name and coach, and derive a football team class that overrides the coach property with a specific person.",
    "code": "```dart\nclass SportsTeam {\n  String teamName;\n  String coach;\n\n  SportsTeam(this.teamName, this.coach);\n}\n\nclass FootballTeam extends SportsTeam {\n  FootballTeam(String teamName) : super(teamName, 'Specific Coach');\n}\n\nvoid main() {\n  var footballTeam = FootballTeam('Tigers');\n  print('Team: ${footballTeam.teamName}, Coach: ${footballTeam.coach}');\n}\n```"
  },
  {
    "task": "Design a base class for a document with methods for printing and saving, then create a PDF document subclass that overrides these methods to include encryption.",
    "code": "```dart\nclass Document {\n  void printDocument() {\n    print('Printing document...');\n  }\n\n  void saveDocument() {\n    print('Saving document...');\n  }\n}\n\nclass PDFDocument extends Document {\n  @override\n  void printDocument() {\n    print('Printing encrypted PDF document...');\n  }\n\n  @override\n  void saveDocument() {\n    print('Saving encrypted PDF document...');\n  }\n}\n\nvoid main() {\n  Document doc = Document();\n  doc.printDocument();\n  doc.saveDocument();\n\n  PDFDocument pdfDoc = PDFDocument();\n  pdfDoc.printDocument();\n  pdfDoc.saveDocument();\n}\n```"
  },
  {
    "task": "Develop a superclass for a retail product with methods for pricing and discount, then extend it with an electronics product class that overrides the discount method to offer more.",
    "code": "```dart\nclass RetailProduct {\n  double price;\n\n  RetailProduct(this.price);\n\n  double getPrice() {\n    return price;\n  }\n\n  double getDiscount() {\n    return price * 0.1; // 10% discount\n  }\n}\n\nclass ElectronicsProduct extends RetailProduct {\n  ElectronicsProduct(double price) : super(price);\n\n  @override\n  double getDiscount() {\n    return price * 0.2; // 20% discount for electronics\n  }\n}\n\nvoid main() {\n  RetailProduct genericProduct = RetailProduct(100);\n  print('Generic Product Price: \\$${genericProduct.getPrice()}');\n  print('Generic Product Discount: \\$${genericProduct.getDiscount()}');\n\n  ElectronicsProduct electronicProduct = ElectronicsProduct(100);\n  print('Electronics Product Price: \\$${electronicProduct.getPrice()}');\n  print('Electronics Product Discount: \\$${electronicProduct.getDiscount()}');\n}\n```"
  },
  {
    "task": "Implement a base class for a subscription service with a method to renew membership, then create a monthly subscription subclass that overrides this method for automatic renewal.",
    "code": "```dart\nclass SubscriptionService {\n  void renewMembership() {\n    print('Renewing membership...');\n  }\n}\n\nclass MonthlySubscription extends SubscriptionService {\n  @override\n  void renewMembership() {\n    print('Automatically renewing monthly subscription...');\n  }\n}\n\nvoid main() {\n  SubscriptionService baseSubscription = SubscriptionService();\n  baseSubscription.renewMembership();\n\n  MonthlySubscription monthlySubscription = MonthlySubscription();\n  monthlySubscription.renewMembership();\n}\n```"
  },
  {
    "task": "Construct a parent class for a language translator with a method to translate text, then derive a French translator class that overrides this method for French language specifics.",
    "code": "```dart\nclass Translator {\n  String translate(String text) {\n    return \"Translated text: $text\";\n  }\n}\n\nclass FrenchTranslator extends Translator {\n  @override\n  String translate(String text) {\n    return \"Texte traduit en fran\u00e7ais: $text\";\n  }\n}\n\nvoid main() {\n  Translator translator = Translator();\n  print(translator.translate(\"Hello\"));\n\n  FrenchTranslator frenchTranslator = FrenchTranslator();\n  print(frenchTranslator.translate(\"Hello\"));\n}\n```"
  },
  {
    "task": "Set up a base class for a customer order with methods for placing and tracking, and extend it with a food order subclass that overrides tracking for delivery status.",
    "code": "```dart\nclass CustomerOrder {\n  void placeOrder() {\n    print('Order placed.');\n  }\n\n  void trackOrder() {\n    print('Tracking order...');\n  }\n}\n\nclass FoodOrder extends CustomerOrder {\n  @override\n  void trackOrder() {\n    print('Tracking food delivery status...');\n  }\n}\n\nvoid main() {\n  CustomerOrder customerOrder = CustomerOrder();\n  customerOrder.placeOrder();\n  customerOrder.trackOrder();\n\n  FoodOrder foodOrder = FoodOrder();\n  foodOrder.placeOrder();\n  foodOrder.trackOrder();\n}\n```"
  },
  {
    "task": "Create a foundational class for an artwork with properties like artist and medium, and derive a painting class that overrides the medium property to be 'canvas'.",
    "code": "```dart\nclass Artwork {\n  String artist;\n  String medium;\n\n  Artwork(this.artist, this.medium);\n}\n\nclass Painting extends Artwork {\n  Painting(String artist) : super(artist, 'canvas');\n}\n```"
  },
  {
    "task": "Design a base class for a computer network with methods for connectivity and bandwidth, then create a wireless network subclass that overrides these methods for signal strength.",
    "code": "```dart\nclass ComputerNetwork {\n  void connectivity() {\n    print(\"Establishing connectivity...\");\n  }\n\n  void bandwidth() {\n    print(\"Checking bandwidth...\");\n  }\n}\n\nclass WirelessNetwork extends ComputerNetwork {\n  @override\n  void connectivity() {\n    print(\"Establishing wireless connectivity...\");\n  }\n\n  @override\n  void bandwidth() {\n    print(\"Checking wireless bandwidth and signal strength...\");\n  }\n}\n\nvoid main() {\n  var network = WirelessNetwork();\n  network.connectivity();\n  network.bandwidth();\n}\n```"
  },
  {
    "task": "Develop a superclass for a messaging app with methods for sending and receiving messages, then extend it with a secure messaging subclass that overrides these methods for encryption.",
    "code": "```dart\nclass MessagingApp {\n  void sendMessage(String message) {\n    print(\"Sending message: $message\");\n  }\n\n  void receiveMessage(String message) {\n    print(\"Receiving message: $message\");\n  }\n}\n\nclass SecureMessagingApp extends MessagingApp {\n  @override\n  void sendMessage(String message) {\n    String encryptedMessage = _encrypt(message);\n    print(\"Sending encrypted message: $encryptedMessage\");\n  }\n\n  @override\n  void receiveMessage(String message) {\n    String decryptedMessage = _decrypt(message);\n    print(\"Receiving encrypted message: $decryptedMessage\");\n  }\n\n  String _encrypt(String message) {\n    // Simple encryption logic (for demonstration)\n    return message.split('').reversed.join('');\n  }\n\n  String _decrypt(String message) {\n    // Simple decryption logic (for demonstration)\n    return message.split('').reversed.join('');\n  }\n}\n```"
  },
  {
    "task": "Implement a base class for a travel itinerary with methods for destinations and activities, then create a vacation itinerary subclass that overrides these methods for leisure activities.",
    "code": "```dart\nclass TravelItinerary {\n  List<String> getDestinations() {\n    return ['Destination 1', 'Destination 2'];\n  }\n\n  List<String> getActivities() {\n    return ['Activity 1', 'Activity 2'];\n  }\n}\n\nclass VacationItinerary extends TravelItinerary {\n  @override\n  List<String> getDestinations() {\n    return ['Beach Resort', 'Mountain Cabin'];\n  }\n\n  @override\n  List<String> getActivities() {\n    return ['Swimming', 'Hiking'];\n  }\n}\n\nvoid main() {\n  VacationItinerary vacation = VacationItinerary();\n  print('Destinations: ${vacation.getDestinations()}');\n  print('Activities: ${vacation.getActivities()}');\n}\n```"
  },
  {
    "task": "Construct a parent class for a healthcare record with methods for patient data and treatment history, then derive a pediatric record class that overrides these methods for child-specific data.",
    "code": "```dart\nclass HealthcareRecord {\n  String patientData() {\n    return \"General patient data\";\n  }\n\n  String treatmentHistory() {\n    return \"General treatment history\";\n  }\n}\n\nclass PediatricRecord extends HealthcareRecord {\n  @override\n  String patientData() {\n    return \"Child-specific patient data\";\n  }\n\n  @override\n  String treatmentHistory() {\n    return \"Child-specific treatment history\";\n  }\n}\n\nvoid main() {\n  HealthcareRecord generalRecord = HealthcareRecord();\n  PediatricRecord childRecord = PediatricRecord();\n\n  print(generalRecord.patientData());\n  print(generalRecord.treatmentHistory());\n  print(childRecord.patientData());\n  print(childRecord.treatmentHistory());\n}\n```"
  },
  {
    "task": "Set up a base class for a culinary dish with methods for preparation and serving, and extend it with an appetizer subclass that overrides these methods for smaller portions.",
    "code": "```dart\nclass CulinaryDish {\n  void prepare() {\n    print('Preparing the dish...');\n  }\n\n  void serve() {\n    print('Serving the dish...');\n  }\n}\n\nclass Appetizer extends CulinaryDish {\n  @override\n  void prepare() {\n    print('Preparing the appetizer in smaller portions...');\n  }\n\n  @override\n  void serve() {\n    print('Serving the appetizer in smaller portions...');\n  }\n}\n\nvoid main() {\n  CulinaryDish dish = CulinaryDish();\n  dish.prepare();\n  dish.serve();\n\n  Appetizer appetizer = Appetizer();\n  appetizer.prepare();\n  appetizer.serve();\n}\n```"
  },
  {
    "task": "Create a foundational class for a book collection with properties like genre and author, and derive a mystery collection class that overrides the genre property to be 'mystery'.",
    "code": "```dart\nclass BookCollection {\n  String genre;\n  String author;\n\n  BookCollection(this.genre, this.author);\n}\n\nclass MysteryCollection extends BookCollection {\n  MysteryCollection(String author) : super('mystery', author);\n}\n\nvoid main() {\n  var mysteryBook = MysteryCollection('Agatha Christie');\n  print('Genre: ${mysteryBook.genre}, Author: ${mysteryBook.author}');\n}\n```"
  },
  {
    "task": "Design a base class for a file storage system with methods for saving and deleting files, then create a cloud storage subclass that overrides these methods for remote access.",
    "code": "```dart\nclass FileStorage {\n  void saveFile(String fileName) {\n    print('Saving $fileName locally.');\n  }\n\n  void deleteFile(String fileName) {\n    print('Deleting $fileName locally.');\n  }\n}\n\nclass CloudStorage extends FileStorage {\n  @override\n  void saveFile(String fileName) {\n    print('Saving $fileName to the cloud.');\n  }\n\n  @override\n  void deleteFile(String fileName) {\n    print('Deleting $fileName from the cloud.');\n  }\n}\n```"
  },
  {
    "task": "Develop a superclass for a seasonal sale event with methods for discounts and promotions, then extend it with a summer sale subclass that overrides these methods for summer items.",
    "code": "```dart\nclass SeasonalSale {\n  double getDiscount(double price) {\n    return price * 0.9; // 10% discount\n  }\n\n  String getPromotion() {\n    return \"Standard seasonal promotion!\";\n  }\n}\n\nclass SummerSale extends SeasonalSale {\n  @override\n  double getDiscount(double price) {\n    return price * 0.8; // 20% discount for summer\n  }\n\n  @override\n  String getPromotion() {\n    return \"Exclusive summer promotion!\";\n  }\n}\n```"
  },
  {
    "task": "Implement a base class for a personal budget with methods for income and expenses, then create a student budget subclass that overrides these methods for tuition and fees.",
    "code": "```dart\nclass PersonalBudget {\n  double income;\n  double expenses;\n\n  PersonalBudget(this.income, this.expenses);\n\n  void addIncome(double amount) {\n    income += amount;\n  }\n\n  void addExpense(double amount) {\n    expenses += amount;\n  }\n\n  double getBalance() {\n    return income - expenses;\n  }\n}\n\nclass StudentBudget extends PersonalBudget {\n  double tuition;\n  double fees;\n\n  StudentBudget(double income, double expenses, this.tuition, this.fees)\n      : super(income, expenses);\n\n  @override\n  void addIncome(double amount) {\n    income += amount * 0.9; // Example adjustment for student income\n  }\n\n  @override\n  void addExpense(double amount) {\n    expenses += amount + tuition + fees;\n  }\n}\n```"
  },
  {
    "task": "Construct a parent class for a fitness routine with methods for exercises and duration, then derive a yoga routine class that overrides these methods for flexibility exercises.",
    "code": "```dart\nclass FitnessRoutine {\n  void exercises() {\n    print('General exercises');\n  }\n\n  void duration() {\n    print('General duration');\n  }\n}\n\nclass YogaRoutine extends FitnessRoutine {\n  @override\n  void exercises() {\n    print('Flexibility exercises');\n  }\n\n  @override\n  void duration() {\n    print('Yoga duration');\n  }\n}\n\nvoid main() {\n  YogaRoutine yoga = YogaRoutine();\n  yoga.exercises();\n  yoga.duration();\n}\n```"
  },
  {
    "task": "Set up a base class for a transportation ticket with methods for pricing and validity, and extend it with an airline ticket subclass that overrides these methods for baggage allowance.",
    "code": "```dart\nclass TransportationTicket {\n  double getPrice() {\n    return 50.0; // Base pricing logic\n  }\n\n  bool isValid() {\n    return true; // Base validity logic\n  }\n}\n\nclass AirlineTicket extends TransportationTicket {\n  @override\n  double getPrice() {\n    return super.getPrice() + 100.0; // Additional cost for airline ticket\n  }\n\n  @override\n  bool isValid() {\n    return super.isValid(); // Airline ticket validity logic\n  }\n\n  int baggageAllowance() {\n    return 20; // Baggage allowance in kg\n  }\n}\n\nvoid main() {\n  AirlineTicket ticket = AirlineTicket();\n  print('Price: \\$${ticket.getPrice()}');\n  print('Valid: ${ticket.isValid()}');\n  print('Baggage Allowance: ${ticket.baggageAllowance()} kg');\n}\n```"
  },
  {
    "task": "Create a foundational class for a digital photo album with properties like album name and date, and derive a vacation album class that overrides the date property to be specific.",
    "code": "```dart\nclass PhotoAlbum {\n  String albumName;\n  DateTime date;\n\n  PhotoAlbum(this.albumName, this.date);\n}\n\nclass VacationAlbum extends PhotoAlbum {\n  VacationAlbum(String albumName, DateTime vacationDate)\n      : super(albumName, vacationDate);\n\n  @override\n  DateTime get date => super.date;\n}\n```"
  },
  {
    "task": "Design a base class for a home appliance with methods for power usage and warranty, then create a refrigerator subclass that overrides these methods for energy efficiency.",
    "code": "```dart\nclass HomeAppliance {\n  double powerUsage() {\n    return 1000.0; // Default power usage in watts\n  }\n\n  int warranty() {\n    return 1; // Default warranty in years\n  }\n}\n\nclass Refrigerator extends HomeAppliance {\n  @override\n  double powerUsage() {\n    return 800.0; // Energy-efficient power usage in watts\n  }\n\n  @override\n  int warranty() {\n    return 2; // Extended warranty in years for refrigerators\n  }\n}\n\nvoid main() {\n  HomeAppliance appliance = HomeAppliance();\n  Refrigerator fridge = Refrigerator();\n\n  print('Home Appliance Power Usage: ${appliance.powerUsage()} watts');\n  print('Home Appliance Warranty: ${appliance.warranty()} years');\n\n  print('Refrigerator Power Usage: ${fridge.powerUsage()} watts');\n  print('Refrigerator Warranty: ${fridge.warranty()} years');\n}\n```"
  },
  {
    "task": "Develop a superclass for a software update with methods for versioning and patch notes, then extend it with a security update subclass that overrides these methods for vulnerabilities.",
    "code": "```dart\nclass SoftwareUpdate {\n  String version;\n  String patchNotes;\n\n  SoftwareUpdate(this.version, this.patchNotes);\n\n  void displayVersion() {\n    print('Version: $version');\n  }\n\n  void displayPatchNotes() {\n    print('Patch Notes: $patchNotes');\n  }\n}\n\nclass SecurityUpdate extends SoftwareUpdate {\n  String vulnerabilities;\n\n  SecurityUpdate(String version, String patchNotes, this.vulnerabilities)\n      : super(version, patchNotes);\n\n  @override\n  void displayVersion() {\n    print('Security Update Version: $version');\n  }\n\n  @override\n  void displayPatchNotes() {\n    print('Security Patch Notes: $patchNotes');\n    print('Vulnerabilities: $vulnerabilities');\n  }\n}\n\nvoid main() {\n  var regularUpdate = SoftwareUpdate('1.0.1', 'Bug fixes and improvements.');\n  regularUpdate.displayVersion();\n  regularUpdate.displayPatchNotes();\n\n  var securityUpdate = SecurityUpdate('1.0.2', 'Security enhancements.', 'Fixed XSS, SQL Injection.');\n  securityUpdate.displayVersion();\n  securityUpdate.displayPatchNotes();\n}\n```"
  },
  {
    "task": "Implement a base class for a musical performance with methods for rehearsal and execution, then create a concert performance subclass that overrides these methods for live audience.",
    "code": "```dart\nclass MusicalPerformance {\n  void rehearsal() {\n    print('Rehearsing the performance');\n  }\n\n  void execution() {\n    print('Executing the performance');\n  }\n}\n\nclass ConcertPerformance extends MusicalPerformance {\n  @override\n  void rehearsal() {\n    print('Rehearsing for the concert in front of a live audience');\n  }\n\n  @override\n  void execution() {\n    print('Performing the concert for a live audience');\n  }\n}\n\nvoid main() {\n  var concert = ConcertPerformance();\n  concert.rehearsal();\n  concert.execution();\n}\n```"
  },
  {
    "task": "Construct a parent class for an academic degree with methods for course requirements and credits, then derive a master's degree class that overrides these methods for advanced studies.",
    "code": "```dart\nclass AcademicDegree {\n  void courseRequirements() {\n    print('General course requirements for an academic degree.');\n  }\n\n  void credits() {\n    print('Total credits needed for an academic degree.');\n  }\n}\n\nclass MastersDegree extends AcademicDegree {\n  @override\n  void courseRequirements() {\n    print('Advanced course requirements for a master\\'s degree.');\n  }\n\n  @override\n  void credits() {\n    print('Total credits needed for a master\\'s degree.');\n  }\n}\n\nvoid main() {\n  var degree = AcademicDegree();\n  degree.courseRequirements();\n  degree.credits();\n\n  var masters = MastersDegree();\n  masters.courseRequirements();\n  masters.credits();\n}\n```"
  },
  {
    "task": "Set up a base class for a weather forecast with methods for temperature and conditions, and extend it with a winter forecast subclass that overrides these methods for snow conditions.",
    "code": "```dart\nclass WeatherForecast {\n  double getTemperature() {\n    return 20.0; // Default temperature\n  }\n\n  String getConditions() {\n    return \"Clear skies\"; // Default conditions\n  }\n}\n\nclass WinterForecast extends WeatherForecast {\n  @override\n  double getTemperature() {\n    return -5.0; // Winter temperature\n  }\n\n  @override\n  String getConditions() {\n    return \"Snowy\"; // Winter conditions\n  }\n}\n\nvoid main() {\n  var summerForecast = WeatherForecast();\n  print(\"Summer Temperature: ${summerForecast.getTemperature()}\u00b0C\");\n  print(\"Summer Conditions: ${summerForecast.getConditions()}\");\n\n  var winterForecast = WinterForecast();\n  print(\"Winter Temperature: ${winterForecast.getTemperature()}\u00b0C\");\n  print(\"Winter Conditions: ${winterForecast.getConditions()}\");\n}\n```"
  },
  {
    "task": "Create a foundational class for a personal diary with properties like date and entries, and derive a travel diary class that overrides the date property with travel dates.",
    "code": "```dart\nclass PersonalDiary {\n  DateTime date;\n  List<String> entries;\n\n  PersonalDiary(this.date, this.entries);\n}\n\nclass TravelDiary extends PersonalDiary {\n  DateTime travelDate;\n\n  TravelDiary(DateTime travelDate, List<String> entries)\n      : this.travelDate = travelDate,\n        super(travelDate, entries);\n}\n```"
  },
  {
    "task": "Design a base class for a pet with methods for feeding and grooming, then create a cat subclass that overrides these methods with specific food preferences.",
    "code": "```dart\nclass Pet {\n  void feed() {\n    print(\"Feeding the pet.\");\n  }\n\n  void groom() {\n    print(\"Grooming the pet.\");\n  }\n}\n\nclass Cat extends Pet {\n  @override\n  void feed() {\n    print(\"Feeding the cat with cat food.\");\n  }\n\n  @override\n  void groom() {\n    print(\"Grooming the cat with a brush.\");\n  }\n}\n\nvoid main() {\n  Cat myCat = Cat();\n  myCat.feed();\n  myCat.groom();\n}\n```"
  },
  {
    "task": "Develop a superclass for a software library with methods for installation and updates, then extend it with a graphics library subclass that overrides these methods for rendering capabilities.",
    "code": "```dart\nclass SoftwareLibrary {\n  void install() {\n    print('Installing software library...');\n  }\n\n  void update() {\n    print('Updating software library...');\n  }\n}\n\nclass GraphicsLibrary extends SoftwareLibrary {\n  @override\n  void install() {\n    print('Installing graphics library with rendering capabilities...');\n  }\n\n  @override\n  void update() {\n    print('Updating graphics library with rendering enhancements...');\n  }\n}\n\nvoid main() {\n  SoftwareLibrary softwareLibrary = SoftwareLibrary();\n  softwareLibrary.install();\n  softwareLibrary.update();\n\n  GraphicsLibrary graphicsLibrary = GraphicsLibrary();\n  graphicsLibrary.install();\n  graphicsLibrary.update();\n}\n```"
  },
  {
    "task": "Implement a base class for a political campaign with methods for fundraising and events, then create a presidential campaign subclass that overrides these methods for national scale.",
    "code": "```dart\nclass Campaign {\n  void fundraise() {\n    print('Fundraising at a local level.');\n  }\n\n  void organizeEvents() {\n    print('Organizing events at a local level.');\n  }\n}\n\nclass PresidentialCampaign extends Campaign {\n  @override\n  void fundraise() {\n    print('Fundraising at a national level.');\n  }\n\n  @override\n  void organizeEvents() {\n    print('Organizing events at a national level.');\n  }\n}\n\nvoid main() {\n  Campaign localCampaign = Campaign();\n  localCampaign.fundraise();\n  localCampaign.organizeEvents();\n\n  PresidentialCampaign nationalCampaign = PresidentialCampaign();\n  nationalCampaign.fundraise();\n  nationalCampaign.organizeEvents();\n}\n```"
  },
  {
    "task": "Construct a parent class for an automotive part with methods for durability and replacement, then derive an engine part class that overrides these methods for performance.",
    "code": "```dart\nclass AutomotivePart {\n  void durability() {\n    print(\"Generic automotive part durability.\");\n  }\n\n  void replacement() {\n    print(\"Generic automotive part replacement.\");\n  }\n}\n\nclass EnginePart extends AutomotivePart {\n  @override\n  void durability() {\n    print(\"Engine part specific durability.\");\n  }\n\n  @override\n  void replacement() {\n    print(\"Engine part specific replacement.\");\n  }\n}\n\nvoid main() {\n  AutomotivePart part = AutomotivePart();\n  part.durability();\n  part.replacement();\n\n  EnginePart enginePart = EnginePart();\n  enginePart.durability();\n  enginePart.replacement();\n}\n```"
  },
  {
    "task": "Set up a base class for an online tutorial with methods for lessons and quizzes, and extend it with a coding tutorial subclass that overrides these methods for interactive exercises.",
    "code": "```dart\nclass OnlineTutorial {\n  void lessons() {\n    print('General lessons on various topics.');\n  }\n\n  void quizzes() {\n    print('General quizzes to test knowledge.');\n  }\n}\n\nclass CodingTutorial extends OnlineTutorial {\n  @override\n  void lessons() {\n    print('Interactive coding lessons with examples.');\n  }\n\n  @override\n  void quizzes() {\n    print('Interactive coding quizzes with real-time feedback.');\n  }\n}\n\nvoid main() {\n  var generalTutorial = OnlineTutorial();\n  generalTutorial.lessons();\n  generalTutorial.quizzes();\n\n  var codingTutorial = CodingTutorial();\n  codingTutorial.lessons();\n  codingTutorial.quizzes();\n}\n```"
  },
  {
    "task": "Create a foundational class for a personal collection with properties like item type and value, and derive a stamp collection class that overrides the item type property to be 'stamps'.",
    "code": "```dart\nclass PersonalCollection {\n  String itemType;\n  double value;\n\n  PersonalCollection(this.itemType, this.value);\n}\n\nclass StampCollection extends PersonalCollection {\n  StampCollection(double value) : super('stamps', value);\n}\n```"
  },
  {
    "task": "Design a base class for a video game character with methods for health and abilities, then create a warrior character subclass that overrides these methods for strength.",
    "code": "```dart\nclass GameCharacter {\n  int health;\n  List<String> abilities;\n\n  GameCharacter(this.health, this.abilities);\n\n  void showHealth() {\n    print('Health: $health');\n  }\n\n  void showAbilities() {\n    print('Abilities: ${abilities.join(', ')}');\n  }\n}\n\nclass Warrior extends GameCharacter {\n  Warrior(int health, List<String> abilities)\n      : super(health, abilities);\n\n  @override\n  void showHealth() {\n    print('Warrior Health: $health');\n  }\n\n  @override\n  void showAbilities() {\n    print('Warrior Abilities (Strength Enhanced): ${abilities.join(', ')}');\n  }\n}\n\nvoid main() {\n  Warrior warrior = Warrior(100, ['Slash', 'Block']);\n  warrior.showHealth();\n  warrior.showAbilities();\n}\n```"
  },
  {
    "task": "Develop a superclass for an event planner with methods for scheduling and budgeting, then extend it with a wedding planner subclass that overrides these methods for ceremony details.",
    "code": "```dart\nclass EventPlanner {\n  void schedule() {\n    print('Scheduling the event.');\n  }\n\n  void budget() {\n    print('Budgeting for the event.');\n  }\n}\n\nclass WeddingPlanner extends EventPlanner {\n  @override\n  void schedule() {\n    print('Scheduling the wedding ceremony.');\n  }\n\n  @override\n  void budget() {\n    print('Budgeting for the wedding ceremony.');\n  }\n}\n\nvoid main() {\n  EventPlanner genericEvent = EventPlanner();\n  genericEvent.schedule();\n  genericEvent.budget();\n  \n  WeddingPlanner weddingEvent = WeddingPlanner();\n  weddingEvent.schedule();\n  weddingEvent.budget();\n}\n```"
  },
  {
    "task": "Implement a base class for a software feature with methods for functionality and user feedback, then create a beta feature subclass that overrides these methods for testing.",
    "code": "```dart\nclass SoftwareFeature {\n  void functionality() {\n    print('Executing main feature functionality.');\n  }\n\n  void userFeedback() {\n    print('Collecting user feedback for main feature.');\n  }\n}\n\nclass BetaFeature extends SoftwareFeature {\n  @override\n  void functionality() {\n    print('Executing beta feature functionality for testing.');\n  }\n\n  @override\n  void userFeedback() {\n    print('Collecting user feedback for beta feature testing.');\n  }\n}\n\nvoid main() {\n  SoftwareFeature mainFeature = SoftwareFeature();\n  mainFeature.functionality();\n  mainFeature.userFeedback();\n\n  BetaFeature betaFeature = BetaFeature();\n  betaFeature.functionality();\n  betaFeature.userFeedback();\n}\n```"
  },
  {
    "task": "Construct a parent class for a gardening tool with methods for usage and maintenance, then derive a lawn mower class that overrides these methods for grass cutting.",
    "code": "```dart\nclass GardeningTool {\n  void use() {\n    print('Using the gardening tool.');\n  }\n\n  void maintain() {\n    print('Maintaining the gardening tool.');\n  }\n}\n\nclass LawnMower extends GardeningTool {\n  @override\n  void use() {\n    print('Using the lawn mower to cut grass.');\n  }\n\n  @override\n  void maintain() {\n    print('Maintaining the lawn mower.');\n  }\n}\n\nvoid main() {\n  LawnMower mower = LawnMower();\n  mower.use();\n  mower.maintain();\n}\n```"
  },
  {
    "task": "Set up a base class for a household chore with methods for time and effort, and extend it with a cleaning chore subclass that overrides these methods for dirt removal.",
    "code": "```dart\nclass HouseholdChore {\n  String time() {\n    return \"Time needed for the chore\";\n  }\n\n  String effort() {\n    return \"Effort needed for the chore\";\n  }\n}\n\nclass CleaningChore extends HouseholdChore {\n  @override\n  String time() {\n    return \"Time needed for cleaning\";\n  }\n\n  @override\n  String effort() {\n    return \"Effort needed for dirt removal\";\n  }\n}\n\nvoid main() {\n  HouseholdChore chore = HouseholdChore();\n  CleaningChore cleaning = CleaningChore();\n\n  print(chore.time());\n  print(chore.effort());\n  print(cleaning.time());\n  print(cleaning.effort());\n}\n```"
  },
  {
    "task": "Create a foundational class for a personal project with properties like name and deadline, and derive a coding project class that overrides the deadline property for milestones.",
    "code": "```dart\nclass Project {\n  String name;\n  DateTime deadline;\n\n  Project(this.name, this.deadline);\n}\n\nclass CodingProject extends Project {\n  DateTime milestoneDeadline;\n\n  CodingProject(String name, DateTime deadline, this.milestoneDeadline)\n      : super(name, deadline);\n\n  @override\n  DateTime get deadline => milestoneDeadline;\n}\n```"
  },
  {
    "task": "Design a base class for a holiday celebration with methods for traditions and activities, then create a Christmas celebration subclass that overrides these methods for gift exchange.",
    "code": "```dart\nclass HolidayCelebration {\n  void traditions() {\n    print(\"General holiday traditions.\");\n  }\n\n  void activities() {\n    print(\"General holiday activities.\");\n  }\n}\n\nclass ChristmasCelebration extends HolidayCelebration {\n  @override\n  void traditions() {\n    print(\"Christmas traditions include decorating a tree.\");\n  }\n\n  @override\n  void activities() {\n    print(\"Christmas activities include gift exchange.\");\n  }\n}\n\nvoid main() {\n  var celebration = ChristmasCelebration();\n  celebration.traditions();\n  celebration.activities();\n}\n```"
  },
  {
    "task": "Develop a superclass for a customer feedback system with methods for collecting and analyzing, then extend it with a product feedback subclass that overrides these methods for reviews.",
    "code": "```dart\nclass FeedbackSystem {\n  void collectFeedback() {\n    print('Collecting general feedback');\n  }\n\n  void analyzeFeedback() {\n    print('Analyzing general feedback');\n  }\n}\n\nclass ProductFeedback extends FeedbackSystem {\n  @override\n  void collectFeedback() {\n    print('Collecting product feedback');\n  }\n\n  @override\n  void analyzeFeedback() {\n    print('Analyzing product feedback');\n  }\n}\n\nvoid main() {\n  var generalFeedback = FeedbackSystem();\n  generalFeedback.collectFeedback();\n  generalFeedback.analyzeFeedback();\n\n  var productFeedback = ProductFeedback();\n  productFeedback.collectFeedback();\n  productFeedback.analyzeFeedback();\n}\n```"
  },
  {
    "task": "Implement a base class for a civic service with methods for public engagement and policy, then create a community service subclass that overrides these methods for local impact.",
    "code": "```dart\nclass CivicService {\n  void publicEngagement() {\n    print('Engaging with the public on a national level.');\n  }\n\n  void policy() {\n    print('Implementing policies on a national level.');\n  }\n}\n\nclass CommunityService extends CivicService {\n  @override\n  void publicEngagement() {\n    print('Engaging with the community on a local level.');\n  }\n\n  @override\n  void policy() {\n    print('Implementing policies to address local community issues.');\n  }\n}\n\nvoid main() {\n  CivicService nationalService = CivicService();\n  nationalService.publicEngagement();\n  nationalService.policy();\n\n  CommunityService localService = CommunityService();\n  localService.publicEngagement();\n  localService.policy();\n}\n```"
  },
  {
    "task": "Construct a parent class for a culinary ingredient with methods for flavor and preparation, then derive a spice ingredient class that overrides these methods for seasoning.",
    "code": "```dart\nclass Ingredient {\n  String flavor() {\n    return \"Generic flavor\";\n  }\n\n  String preparation() {\n    return \"Basic preparation\";\n  }\n}\n\nclass Spice extends Ingredient {\n  @override\n  String flavor() {\n    return \"Spicy flavor\";\n  }\n\n  @override\n  String preparation() {\n    return \"Grind into powder\";\n  }\n}\n\nvoid main() {\n  Ingredient genericIngredient = Ingredient();\n  Spice spice = Spice();\n\n  print(\"Generic Ingredient: Flavor - ${genericIngredient.flavor()}, Preparation - ${genericIngredient.preparation()}\");\n  print(\"Spice: Flavor - ${spice.flavor()}, Preparation - ${spice.preparation()}\");\n}\n```"
  },
  {
    "task": "Set up a base class for a scientific experiment with methods for hypothesis and testing, and extend it with a chemistry experiment subclass that overrides these methods for reactions.",
    "code": "```dart\nclass ScientificExperiment {\n  String hypothesis() {\n    return \"General hypothesis for scientific experiment.\";\n  }\n\n  String testing() {\n    return \"General testing method for scientific experiment.\";\n  }\n}\n\nclass ChemistryExperiment extends ScientificExperiment {\n  @override\n  String hypothesis() {\n    return \"Specific hypothesis for chemistry experiment.\";\n  }\n\n  @override\n  String testing() {\n    return \"Specific testing method for chemistry reactions.\";\n  }\n}\n\nvoid main() {\n  ScientificExperiment generalExperiment = ScientificExperiment();\n  ChemistryExperiment chemistryExperiment = ChemistryExperiment();\n\n  print(generalExperiment.hypothesis());\n  print(generalExperiment.testing());\n\n  print(chemistryExperiment.hypothesis());\n  print(chemistryExperiment.testing());\n}\n```"
  },
  {
    "task": "Create a foundational class for an inventory system with properties like item ID and quantity, and derive a warehouse inventory class that overrides the quantity property for bulk storage.",
    "code": "```dart\nclass InventoryItem {\n  final String itemId;\n  int quantity;\n\n  InventoryItem(this.itemId, this.quantity);\n}\n\nclass WarehouseInventory extends InventoryItem {\n  WarehouseInventory(String itemId, int quantity) : super(itemId, quantity);\n\n  @override\n  int get quantity => super.quantity * 100;\n\n  @override\n  set quantity(int newQuantity) {\n    super.quantity = newQuantity ~/ 100;\n  }\n}\n```"
  },
  {
    "task": "Design a base class for a travel agency with methods for itinerary and bookings, then create a luxury travel subclass that overrides these methods for premium services.",
    "code": "```dart\nclass TravelAgency {\n  void itinerary() {\n    print('Standard Itinerary');\n  }\n\n  void bookings() {\n    print('Standard Bookings');\n  }\n}\n\nclass LuxuryTravel extends TravelAgency {\n  @override\n  void itinerary() {\n    print('Luxury Itinerary with premium services');\n  }\n\n  @override\n  void bookings() {\n    print('Luxury Bookings with premium services');\n  }\n}\n\nvoid main() {\n  TravelAgency standardTravel = TravelAgency();\n  standardTravel.itinerary();\n  standardTravel.bookings();\n\n  LuxuryTravel luxuryTravel = LuxuryTravel();\n  luxuryTravel.itinerary();\n  luxuryTravel.bookings();\n}\n```"
  },
  {
    "task": "Develop a superclass for an educational tool with methods for teaching and assessment, then extend it with a math tool subclass that overrides these methods for problem-solving.",
    "code": "```dart\nclass EducationalTool {\n  void teach() {\n    print('Teaching a general subject...');\n  }\n\n  void assess() {\n    print('Assessing general knowledge...');\n  }\n}\n\nclass MathTool extends EducationalTool {\n  @override\n  void teach() {\n    print('Teaching a math concept...');\n  }\n\n  @override\n  void assess() {\n    print('Assessing math problem-solving skills...');\n  }\n}\n\nvoid main() {\n  var tool = EducationalTool();\n  tool.teach();\n  tool.assess();\n\n  var mathTool = MathTool();\n  mathTool.teach();\n  mathTool.assess();\n}\n```"
  },
  {
    "task": "Implement a base class for a community project with methods for planning and execution, then create a park renovation subclass that overrides these methods for landscaping.",
    "code": "```dart\nclass CommunityProject {\n  void plan() {\n    print('Planning the community project.');\n  }\n\n  void execute() {\n    print('Executing the community project.');\n  }\n}\n\nclass ParkRenovation extends CommunityProject {\n  @override\n  void plan() {\n    print('Planning the park renovation with landscaping details.');\n  }\n\n  @override\n  void execute() {\n    print('Executing the park renovation with landscaping.');\n  }\n}\n\nvoid main() {\n  CommunityProject project = CommunityProject();\n  project.plan();\n  project.execute();\n\n  ParkRenovation parkRenovation = ParkRenovation();\n  parkRenovation.plan();\n  parkRenovation.execute();\n}\n```"
  },
  {
    "task": "Construct a parent class for a digital marketing strategy with methods for targeting and engagement, then derive a social media strategy class that overrides these methods for platforms.",
    "code": "```dart\nclass DigitalMarketingStrategy {\n  void targeting() {\n    print(\"General targeting strategy.\");\n  }\n\n  void engagement() {\n    print(\"General engagement strategy.\");\n  }\n}\n\nclass SocialMediaStrategy extends DigitalMarketingStrategy {\n  @override\n  void targeting() {\n    print(\"Targeting strategy for social media platforms.\");\n  }\n\n  @override\n  void engagement() {\n    print(\"Engagement strategy specific to social media.\");\n  }\n}\n\nvoid main() {\n  DigitalMarketingStrategy strategy = DigitalMarketingStrategy();\n  strategy.targeting();\n  strategy.engagement();\n\n  SocialMediaStrategy socialMediaStrategy = SocialMediaStrategy();\n  socialMediaStrategy.targeting();\n  socialMediaStrategy.engagement();\n}\n```"
  },
  {
    "task": "Set up a base class for a scientific publication with methods for research and review, and extend it with a journal article subclass that overrides these methods for peer review.",
    "code": "```dart\nclass ScientificPublication {\n  void research() {\n    print('Conducting general research.');\n  }\n\n  void review() {\n    print('Performing general review.');\n  }\n}\n\nclass JournalArticle extends ScientificPublication {\n  @override\n  void research() {\n    print('Conducting research specific to journal article.');\n  }\n\n  @override\n  void review() {\n    print('Performing peer review for journal article.');\n  }\n}\n\nvoid main() {\n  ScientificPublication publication = ScientificPublication();\n  publication.research();\n  publication.review();\n\n  JournalArticle article = JournalArticle();\n  article.research();\n  article.review();\n}\n```"
  },
  {
    "task": "Create a foundational class for a software module with properties like name and dependencies, and derive a user interface module class that overrides the dependencies property for UI libraries.",
    "code": "```dart\nclass SoftwareModule {\n  String name;\n  List<String> dependencies;\n\n  SoftwareModule(this.name, this.dependencies);\n}\n\nclass UIModule extends SoftwareModule {\n  UIModule(String name) : super(name, [\"UI Library 1\", \"UI Library 2\"]);\n\n  @override\n  List<String> get dependencies => [\"UI Library 1\", \"UI Library 2\"];\n}\n```"
  },
  {
    "task": "Design a base class for a fashion line with methods for design and production, then create a summer collection subclass that overrides these methods for seasonal trends.",
    "code": "```dart\nclass FashionLine {\n  void design() {\n    print('Designing fashion line...');\n  }\n\n  void production() {\n    print('Producing fashion line...');\n  }\n}\n\nclass SummerCollection extends FashionLine {\n  @override\n  void design() {\n    print('Designing summer collection with seasonal trends...');\n  }\n\n  @override\n  void production() {\n    print('Producing summer collection with seasonal materials...');\n  }\n}\n\nvoid main() {\n  FashionLine fashionLine = FashionLine();\n  fashionLine.design();\n  fashionLine.production();\n\n  SummerCollection summerCollection = SummerCollection();\n  summerCollection.design();\n  summerCollection.production();\n}\n```"
  },
  {
    "task": "Develop a superclass for a family tree with methods for ancestry and descendants, then extend it with a royal lineage subclass that overrides these methods for historical accuracy.",
    "code": "```dart\nclass FamilyTree {\n  String name;\n\n  FamilyTree(this.name);\n\n  List<String> getAncestry() {\n    return ['Generic Ancestor 1', 'Generic Ancestor 2'];\n  }\n\n  List<String> getDescendants() {\n    return ['Generic Descendant 1', 'Generic Descendant 2'];\n  }\n}\n\nclass RoyalLineage extends FamilyTree {\n  RoyalLineage(String name) : super(name);\n\n  @override\n  List<String> getAncestry() {\n    return ['Royal Ancestor 1', 'Royal Ancestor 2'];\n  }\n\n  @override\n  List<String> getDescendants() {\n    return ['Royal Descendant 1', 'Royal Descendant 2'];\n  }\n}\n```"
  },
  {
    "task": "Implement a base class for a musical score with methods for composition and arrangement, then create a symphony subclass that overrides these methods for orchestration.",
    "code": "```dart\nclass MusicalScore {\n  void composition() {\n    print('Composing a musical score...');\n  }\n\n  void arrangement() {\n    print('Arranging the musical score...');\n  }\n}\n\nclass Symphony extends MusicalScore {\n  @override\n  void composition() {\n    print('Composing a symphony...');\n  }\n\n  @override\n  void arrangement() {\n    print('Orchestrating the symphony...');\n  }\n}\n\nvoid main() {\n  Symphony symphony = Symphony();\n  symphony.composition();\n  symphony.arrangement();\n}\n```"
  },
  {
    "task": "Construct a parent class for a historical record with methods for events and dates, then derive a war history class that overrides these methods for battles.",
    "code": "```dart\nclass HistoricalRecord {\n  void event() {\n    print('General historical event');\n  }\n\n  void date() {\n    print('General date');\n  }\n}\n\nclass WarHistory extends HistoricalRecord {\n  @override\n  void event() {\n    print('Battle event');\n  }\n\n  @override\n  void date() {\n    print('Battle date');\n  }\n}\n\nvoid main() {\n  WarHistory warHistory = WarHistory();\n  warHistory.event();\n  warHistory.date();\n}\n```"
  },
  {
    "task": "Set up a base class for a pet adoption service with methods for application and approval, and extend it with a dog adoption subclass that overrides these methods for breed compatibility.",
    "code": "```dart\nclass PetAdoptionService {\n  void apply(String applicant) {\n    print('Application received from $applicant.');\n  }\n\n  void approve(String applicant) {\n    print('Application approved for $applicant.');\n  }\n}\n\nclass DogAdoptionService extends PetAdoptionService {\n  @override\n  void apply(String applicant) {\n    print('Dog adoption application received from $applicant.');\n  }\n\n  @override\n  void approve(String applicant) {\n    print('Checking breed compatibility for $applicant.');\n    print('Dog adoption application approved for $applicant.');\n  }\n}\n\nvoid main() {\n  PetAdoptionService generalAdoption = PetAdoptionService();\n  generalAdoption.apply('Alice');\n  generalAdoption.approve('Alice');\n\n  DogAdoptionService dogAdoption = DogAdoptionService();\n  dogAdoption.apply('Bob');\n  dogAdoption.approve('Bob');\n}\n```"
  },
  {
    "task": "Create a foundational class for a financial report with properties like fiscal year and summary, and derive an annual report class that overrides the fiscal year property for yearly data.",
    "code": "```dart\nclass FinancialReport {\n  String fiscalYear;\n  String summary;\n\n  FinancialReport(this.fiscalYear, this.summary);\n}\n\nclass AnnualReport extends FinancialReport {\n  AnnualReport(String summary) : super('Annual', summary);\n}\n\nvoid main() {\n  var report = AnnualReport('This is the annual summary.');\n  print('Fiscal Year: ${report.fiscalYear}');\n  print('Summary: ${report.summary}');\n}\n```"
  },
  {
    "task": "Design a base class for a movie franchise with methods for casting and production, then create a sequel subclass that overrides these methods for continuity.",
    "code": "```dart\nclass MovieFranchise {\n  void casting() {\n    print('Original casting process.');\n  }\n\n  void production() {\n    print('Original production process.');\n  }\n}\n\nclass Sequel extends MovieFranchise {\n  @override\n  void casting() {\n    print('Continuity casting process for the sequel.');\n  }\n\n  @override\n  void production() {\n    print('Continuity production process for the sequel.');\n  }\n}\n\nvoid main() {\n  MovieFranchise original = MovieFranchise();\n  original.casting();\n  original.production();\n\n  Sequel sequel = Sequel();\n  sequel.casting();\n  sequel.production();\n}\n```"
  },
  {
    "task": "Develop a superclass for a real estate listing with methods for pricing and description, then extend it with a luxury listing subclass that overrides these methods for high-end features.",
    "code": "```dart\nclass RealEstateListing {\n  double price;\n  String description;\n\n  RealEstateListing(this.price, this.description);\n\n  String getPricing() {\n    return 'Price: \\$${price.toStringAsFixed(2)}';\n  }\n\n  String getDescription() {\n    return 'Description: $description';\n  }\n}\n\nclass LuxuryListing extends RealEstateListing {\n  LuxuryListing(double price, String description) : super(price, description);\n\n  @override\n  String getPricing() {\n    return 'Luxury Price: \\$${(price * 1.2).toStringAsFixed(2)}';\n  }\n\n  @override\n  String getDescription() {\n    return 'Luxury Description: $description with high-end features';\n  }\n}\n\nvoid main() {\n  var standardListing = RealEstateListing(250000, '3 bed, 2 bath');\n  print(standardListing.getPricing());\n  print(standardListing.getDescription());\n\n  var luxuryListing = LuxuryListing(500000, '5 bed, 4 bath with pool');\n  print(luxuryListing.getPricing());\n  print(luxuryListing.getDescription());\n}\n```"
  },
  {
    "task": "Implement a base class for a mobile app with methods for user interface and performance, then create a gaming app subclass that overrides these methods for graphics and speed.",
    "code": "```dart\nclass MobileApp {\n  void userInterface() {\n    print('Standard user interface');\n  }\n\n  void performance() {\n    print('Optimized for general use');\n  }\n}\n\nclass GamingApp extends MobileApp {\n  @override\n  void userInterface() {\n    print('Advanced gaming user interface');\n  }\n\n  @override\n  void performance() {\n    print('High-speed performance for gaming');\n  }\n}\n\nvoid main() {\n  MobileApp app = MobileApp();\n  app.userInterface();\n  app.performance();\n\n  GamingApp gameApp = GamingApp();\n  gameApp.userInterface();\n  gameApp.performance();\n}\n```"
  },
  {
    "task": "Construct a parent class for a corporate policy with methods for compliance and enforcement, then derive an HR policy class that overrides these methods for employee relations.",
    "code": "```dart\nclass CorporatePolicy {\n  void compliance() {\n    print(\"General corporate compliance rules.\");\n  }\n\n  void enforcement() {\n    print(\"General corporate policy enforcement.\");\n  }\n}\n\nclass HRPolicy extends CorporatePolicy {\n  @override\n  void compliance() {\n    print(\"HR-specific compliance rules for employee relations.\");\n  }\n\n  @override\n  void enforcement() {\n    print(\"HR-specific policy enforcement for employee relations.\");\n  }\n}\n\nvoid main() {\n  HRPolicy hrPolicy = HRPolicy();\n  hrPolicy.compliance();\n  hrPolicy.enforcement();\n}\n```"
  },
  {
    "task": "Set up a base class for a scientific calculator with methods for basic operations and advanced functions, and extend it with a graphing calculator subclass that overrides these methods for plotting.",
    "code": "```dart\nimport 'dart:math';\n\nclass ScientificCalculator {\n  double add(double a, double b) => a + b;\n  \n  double subtract(double a, double b) => a - b;\n  \n  double multiply(double a, double b) => a * b;\n  \n  double divide(double a, double b) {\n    if (b == 0) {\n      throw ArgumentError('Cannot divide by zero');\n    }\n    return a / b;\n  }\n  \n  double power(double base, double exponent) => pow(base, exponent);\n  \n  double squareRoot(double value) => sqrt(value);\n}\n\nclass GraphingCalculator extends ScientificCalculator {\n  @override\n  double add(double a, double b) {\n    // Implement graph plotting for addition here\n    return a + b;\n  }\n  \n  @override\n  double subtract(double a, double b) {\n    // Implement graph plotting for subtraction here\n    return a - b;\n  }\n  \n  @override\n  double multiply(double a, double b) {\n    // Implement graph plotting for multiplication here\n    return a * b;\n  }\n  \n  @override\n  double divide(double a, double b) {\n    if (b == 0) {\n      throw ArgumentError('Cannot divide by zero');\n    }\n    // Implement graph plotting for division here\n    return a / b;\n  }\n  \n  @override\n  double power(double base, double exponent) {\n    // Implement graph plotting for power here\n    return pow(base, exponent);\n  }\n  \n  @override\n  double squareRoot(double value) {\n    // Implement graph plotting for square root here\n    return sqrt(value);\n  }\n}\n```"
  },
  {
    "task": "Create a foundational class for a children's book with properties like age group and illustrations, and derive a picture book class that overrides the illustrations property to be more prominent.",
    "code": "```dart\nclass ChildrensBook {\n  String ageGroup;\n  String illustrations;\n\n  ChildrensBook(this.ageGroup, this.illustrations);\n}\n\nclass PictureBook extends ChildrensBook {\n  String illustrations;\n\n  PictureBook(String ageGroup, this.illustrations) : super(ageGroup, illustrations);\n\n  @override\n  String toString() {\n    return 'PictureBook(ageGroup: $ageGroup, illustrations: $illustrations)';\n  }\n}\n\nvoid main() {\n  var book = PictureBook('3-5 years', 'Colorful illustrations');\n  print(book);\n}\n```"
  },
  {
    "task": "Design a base class for a cooking class with methods for ingredients and techniques, then create a baking class subclass that overrides these methods for dough preparation.",
    "code": "```dart\nclass CookingClass {\n  void ingredients() {\n    print('General cooking ingredients');\n  }\n\n  void techniques() {\n    print('General cooking techniques');\n  }\n}\n\nclass BakingClass extends CookingClass {\n  @override\n  void ingredients() {\n    print('Flour, sugar, eggs, butter');\n  }\n\n  @override\n  void techniques() {\n    print('Mixing, kneading, baking');\n  }\n}\n\nvoid main() {\n  BakingClass bakingClass = BakingClass();\n  bakingClass.ingredients();\n  bakingClass.techniques();\n}\n```"
  },
  {
    "task": "Develop a superclass for a public transportation system with methods for routes and schedules, then extend it with a metro system subclass that overrides these methods for urban areas.",
    "code": "```dart\nclass PublicTransportSystem {\n  void routes() {\n    print('General routes for public transportation.');\n  }\n\n  void schedules() {\n    print('General schedules for public transportation.');\n  }\n}\n\nclass MetroSystem extends PublicTransportSystem {\n  @override\n  void routes() {\n    print('Specific metro routes for urban areas.');\n  }\n\n  @override\n  void schedules() {\n    print('Specific metro schedules for urban areas.');\n  }\n}\n\nvoid main() {\n  PublicTransportSystem transport = PublicTransportSystem();\n  transport.routes();\n  transport.schedules();\n\n  MetroSystem metro = MetroSystem();\n  metro.routes();\n  metro.schedules();\n}\n```"
  },
  {
    "task": "Implement a base class for a music store inventory with methods for stock and sales, then create a vinyl record subclass that overrides these methods for collectible items.",
    "code": "```dart\nclass MusicStoreItem {\n  int stock;\n  double price;\n\n  MusicStoreItem(this.stock, this.price);\n\n  void sell(int quantity) {\n    if (stock >= quantity) {\n      stock -= quantity;\n      print('$quantity item(s) sold.');\n    } else {\n      print('Insufficient stock.');\n    }\n  }\n\n  void restock(int quantity) {\n    stock += quantity;\n    print('$quantity item(s) restocked.');\n  }\n}\n\nclass VinylRecord extends MusicStoreItem {\n  VinylRecord(int stock, double price) : super(stock, price);\n\n  @override\n  void sell(int quantity) {\n    if (stock >= quantity) {\n      stock -= quantity;\n      double total = quantity * price;\n      print('$quantity collectible vinyl record(s) sold for \\$${total.toStringAsFixed(2)}.');\n    } else {\n      print('Insufficient collectible vinyl record stock.');\n    }\n  }\n\n  @override\n  void restock(int quantity) {\n    stock += quantity;\n    print('$quantity collectible vinyl record(s) restocked.');\n  }\n}\n```"
  },
  {
    "task": "Construct a parent class for a legal contract with methods for terms and conditions, then derive a rental agreement class that overrides these methods for tenant rights.",
    "code": "```dart\nclass LegalContract {\n  String termsAndConditions() {\n    return \"General terms and conditions for a legal contract.\";\n  }\n}\n\nclass RentalAgreement extends LegalContract {\n  @override\n  String termsAndConditions() {\n    return \"Specific terms and conditions for tenant rights in a rental agreement.\";\n  }\n}\n\nvoid main() {\n  LegalContract contract = LegalContract();\n  print(contract.termsAndConditions());\n\n  RentalAgreement rental = RentalAgreement();\n  print(rental.termsAndConditions());\n}\n```"
  },
  {
    "task": "Set up a base class for a journalism piece with methods for reporting and editing, and extend it with an investigative article subclass that overrides these methods for in-depth analysis.",
    "code": "```dart\nclass JournalismPiece {\n  void report() {\n    print('Reporting the news...');\n  }\n\n  void edit() {\n    print('Editing the piece...');\n  }\n}\n\nclass InvestigativeArticle extends JournalismPiece {\n  @override\n  void report() {\n    print('Conducting in-depth reporting...');\n  }\n\n  @override\n  void edit() {\n    print('Editing for investigative depth...');\n  }\n}\n\nvoid main() {\n  JournalismPiece article = JournalismPiece();\n  article.report();\n  article.edit();\n\n  InvestigativeArticle investigative = InvestigativeArticle();\n  investigative.report();\n  investigative.edit();\n}\n```"
  },
  {
    "task": "Create a foundational class for a wildlife reserve with properties like area and species, and derive a bird sanctuary class that overrides the species property for avians.",
    "code": "```dart\nclass WildlifeReserve {\n  double area;\n  String species;\n\n  WildlifeReserve(this.area, this.species);\n}\n\nclass BirdSanctuary extends WildlifeReserve {\n  BirdSanctuary(double area) : super(area, 'Avians');\n}\n\nvoid main() {\n  var reserve = WildlifeReserve(500.0, 'Various');\n  var sanctuary = BirdSanctuary(300.0);\n\n  print('Wildlife Reserve: Area: ${reserve.area}, Species: ${reserve.species}');\n  print('Bird Sanctuary: Area: ${sanctuary.area}, Species: ${sanctuary.species}');\n}\n```"
  },
  {
    "task": "Design a base class for a subscription box service with methods for curation and delivery, then create a gourmet food box subclass that overrides these methods for artisanal products.",
    "code": "```dart\nclass SubscriptionBox {\n  void curate() {\n    print('Curating items for the subscription box.');\n  }\n\n  void deliver() {\n    print('Delivering the subscription box.');\n  }\n}\n\nclass GourmetFoodBox extends SubscriptionBox {\n  @override\n  void curate() {\n    print('Curating artisanal gourmet food items for the box.');\n  }\n\n  @override\n  void deliver() {\n    print('Delivering the gourmet food box with care.');\n  }\n}\n\nvoid main() {\n  GourmetFoodBox gourmetBox = GourmetFoodBox();\n  gourmetBox.curate();\n  gourmetBox.deliver();\n}\n```"
  },
  {
    "task": "Develop a superclass for a fitness app with methods for tracking and motivation, then extend it with a running app subclass that overrides these methods for pace and distance.",
    "code": "```dart\nclass FitnessApp {\n  void track() {\n    print('Tracking activity...');\n  }\n\n  void motivate() {\n    print('Stay active and healthy!');\n  }\n}\n\nclass RunningApp extends FitnessApp {\n  @override\n  void track() {\n    print('Tracking pace and distance...');\n  }\n\n  @override\n  void motivate() {\n    print('Keep going! You can run faster and longer!');\n  }\n}\n\nvoid main() {\n  FitnessApp fitnessApp = FitnessApp();\n  fitnessApp.track();\n  fitnessApp.motivate();\n\n  RunningApp runningApp = RunningApp();\n  runningApp.track();\n  runningApp.motivate();\n}\n```"
  },
  {
    "task": "Implement a base class for a digital portfolio with methods for showcasing and updating, then create an artist portfolio subclass that overrides these methods for galleries.",
    "code": "```dart\n// Base class for a digital portfolio\nclass DigitalPortfolio {\n  void showcase() {\n    print('Showcasing digital portfolio.');\n  }\n\n  void update() {\n    print('Updating digital portfolio.');\n  }\n}\n\n// Subclass for an artist portfolio\nclass ArtistPortfolio extends DigitalPortfolio {\n  @override\n  void showcase() {\n    print('Showcasing artist portfolio in gallery.');\n  }\n\n  @override\n  void update() {\n    print('Updating artist portfolio with new artwork.');\n  }\n}\n\nvoid main() {\n  DigitalPortfolio portfolio = DigitalPortfolio();\n  portfolio.showcase();\n  portfolio.update();\n  \n  ArtistPortfolio artistPortfolio = ArtistPortfolio();\n  artistPortfolio.showcase();\n  artistPortfolio.update();\n}\n```"
  },
  {
    "task": "Construct a parent class for a gaming console with methods for performance and compatibility, then derive a next-gen console class that overrides these methods for new features.",
    "code": "```dart\nclass GamingConsole {\n  void performance() {\n    print('Standard performance');\n  }\n\n  void compatibility() {\n    print('Compatible with current gen games');\n  }\n}\n\nclass NextGenConsole extends GamingConsole {\n  @override\n  void performance() {\n    print('Enhanced performance with improved hardware');\n  }\n\n  @override\n  void compatibility() {\n    print('Backward compatibility with previous gen and supports next-gen games');\n  }\n}\n\nvoid main() {\n  GamingConsole console = GamingConsole();\n  console.performance();\n  console.compatibility();\n\n  NextGenConsole nextGenConsole = NextGenConsole();\n  nextGenConsole.performance();\n  nextGenConsole.compatibility();\n}\n```"
  },
  {
    "task": "Set up a base class for a cultural festival with methods for events and participation, and extend it with a music festival subclass that overrides these methods for performances.",
    "code": "```dart\nclass CulturalFestival {\n  void events() {\n    print(\"Cultural events include art exhibitions, food fairs, and workshops.\");\n  }\n\n  void participation() {\n    print(\"Participation is open for everyone with prior registration.\");\n  }\n}\n\nclass MusicFestival extends CulturalFestival {\n  @override\n  void events() {\n    print(\"Music festival events include live concerts, DJ nights, and jam sessions.\");\n  }\n\n  @override\n  void participation() {\n    print(\"Participation requires a ticket purchase.\");\n  }\n}\n\nvoid main() {\n  CulturalFestival culturalFestival = CulturalFestival();\n  culturalFestival.events();\n  culturalFestival.participation();\n\n  MusicFestival musicFestival = MusicFestival();\n  musicFestival.events();\n  musicFestival.participation();\n}\n```"
  }
]