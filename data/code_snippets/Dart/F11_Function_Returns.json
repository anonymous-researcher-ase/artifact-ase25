[
  {
    "task": "Create a function that calculates the sum of two numbers and returns the result.",
    "code": "```dart\nint sum(int a, int b) {\n  return a + b;\n}\n```"
  },
  {
    "task": "Design a function that takes a string and returns its length.",
    "code": "```dart\nint getStringLength(String input) {\n  return input.length;\n}\n```"
  },
  {
    "task": "Write a function that checks if a number is prime and returns a boolean value.",
    "code": "```dart\nbool isPrime(int number) {\n  if (number <= 1) return false;\n  for (int i = 2; i <= number ~/ 2; i++) {\n    if (number % i == 0) return false;\n  }\n  return true;\n}\n```"
  },
  {
    "task": "Implement a function that returns the highest value in a list of integers.",
    "code": "```dart\nint findMaxValue(List<int> numbers) {\n  if (numbers.isEmpty) {\n    throw ArgumentError('The list cannot be empty');\n  }\n  int maxValue = numbers[0];\n  for (int number in numbers) {\n    if (number > maxValue) {\n      maxValue = number;\n    }\n  }\n  return maxValue;\n}\n```"
  },
  {
    "task": "Create a function that accepts a list of words and returns the longest word.",
    "code": "```dart\nString longestWord(List<String> words) {\n  if (words.isEmpty) return '';\n  String longest = words[0];\n  for (var word in words) {\n    if (word.length > longest.length) {\n      longest = word;\n    }\n  }\n  return longest;\n}\n```"
  },
  {
    "task": "Write a function that takes a temperature in Celsius and returns the equivalent in Fahrenheit.",
    "code": "```dart\ndouble celsiusToFahrenheit(double celsius) {\n  return (celsius * 9 / 5) + 32;\n}\n```"
  },
  {
    "task": "Develop a function that returns the factorial of a given number.",
    "code": "```dart\nint factorial(int n) {\n  if (n < 0) {\n    throw ArgumentError(\"Negative numbers are not allowed.\");\n  }\n  return n <= 1 ? 1 : n * factorial(n - 1);\n}\n```"
  },
  {
    "task": "Implement a function that receives a date and returns the day of the week.",
    "code": "```dart\nimport 'package:intl/intl.dart';\n\nString getDayOfWeek(DateTime date) {\n  return DateFormat('EEEE').format(date);\n}\n```"
  },
  {
    "task": "Write a function that calculates the area of a circle given its radius and returns the value.",
    "code": "```dart\ndouble calculateAreaOfCircle(double radius) {\n  return 3.14159 * radius * radius;\n}\n```"
  },
  {
    "task": "Create a function that converts a string to uppercase and returns the modified string.",
    "code": "```dart\nString convertToUpperCase(String input) {\n  return input.toUpperCase();\n}\n```"
  },
  {
    "task": "Design a function that returns the reverse of a given list.",
    "code": "```dart\nList<T> reverseList<T>(List<T> list) {\n  return list.reversed.toList();\n}\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns a dictionary with character frequencies.",
    "code": "```dart\nMap<String, int> characterFrequencies(String input) {\n  Map<String, int> frequencies = {};\n  for (int i = 0; i < input.length; i++) {\n    String char = input[i];\n    frequencies[char] = (frequencies[char] ?? 0) + 1;\n  }\n  return frequencies;\n}\n```"
  },
  {
    "task": "Write a function that returns the first non-repeating character in a string.",
    "code": "```dart\nString? firstNonRepeatingCharacter(String input) {\n  Map<String, int> charCount = {};\n  \n  for (int i = 0; i < input.length; i++) {\n    String char = input[i];\n    charCount[char] = (charCount[char] ?? 0) + 1;\n  }\n  \n  for (int i = 0; i < input.length; i++) {\n    if (charCount[input[i]] == 1) {\n      return input[i];\n    }\n  }\n  \n  return null;\n}\n```"
  },
  {
    "task": "Create a function that takes a list of numbers and returns a new list with only even numbers.",
    "code": "```dart\nList<int> filterEvenNumbers(List<int> numbers) {\n  return numbers.where((number) => number.isEven).toList();\n}\n```"
  },
  {
    "task": "Develop a function that receives a sentence and returns the word count.",
    "code": "```dart\nint wordCount(String sentence) {\n  if (sentence.trim().isEmpty) {\n    return 0;\n  }\n  return sentence.split(RegExp(r'\\s+')).length;\n}\n```"
  },
  {
    "task": "Implement a function that returns the smallest element in an array.",
    "code": "```dart\nint findSmallestElement(List<int> array) {\n  if (array.isEmpty) {\n    throw ArgumentError('Array cannot be empty');\n  }\n  int smallest = array[0];\n  for (int i = 1; i < array.length; i++) {\n    if (array[i] < smallest) {\n      smallest = array[i];\n    }\n  }\n  return smallest;\n}\n```"
  },
  {
    "task": "Write a function that takes two strings and returns true if they are anagrams.",
    "code": "```dart\nbool areAnagrams(String str1, String str2) {\n  if (str1.length != str2.length) return false;\n  List<String> list1 = str1.split('')..sort();\n  List<String> list2 = str2.split('')..sort();\n  return list1.join() == list2.join();\n}\n```"
  },
  {
    "task": "Create a function that accepts an integer and returns a list of its divisors.",
    "code": "```dart\nList<int> findDivisors(int number) {\n  List<int> divisors = [];\n  for (int i = 1; i <= number; i++) {\n    if (number % i == 0) {\n      divisors.add(i);\n    }\n  }\n  return divisors;\n}\n```"
  },
  {
    "task": "Design a function that returns the square root of a given number.",
    "code": "```dart\nimport 'dart:math';\n\ndouble calculateSquareRoot(double number) {\n  return sqrt(number);\n}\n```"
  },
  {
    "task": "Implement a function that accepts a list and returns it sorted in ascending order.",
    "code": "```dart\nList<T> sortList<T extends Comparable>(List<T> list) {\n  list.sort();\n  return list;\n}\n```"
  },
  {
    "task": "Write a function that checks whether a given year is a leap year and returns a boolean.",
    "code": "```dart\nbool isLeapYear(int year) {\n  if (year % 4 == 0) {\n    if (year % 100 == 0) {\n      if (year % 400 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  } else {\n    return false;\n  }\n}\n```"
  },
  {
    "task": "Create a function that receives a list of numbers and returns their average.",
    "code": "```dart\ndouble calculateAverage(List<num> numbers) {\n  if (numbers.isEmpty) {\n    return 0;\n  }\n  num sum = numbers.reduce((a, b) => a + b);\n  return sum / numbers.length;\n}\n```"
  },
  {
    "task": "Develop a function that returns the nth Fibonacci number.",
    "code": "```dart\nint fibonacci(int n) {\n  if (n <= 0) return 0;\n  if (n == 1) return 1;\n  int a = 0, b = 1;\n  for (int i = 2; i <= n; i++) {\n    int temp = a + b;\n    a = b;\n    b = temp;\n  }\n  return b;\n}\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns it with vowels removed.",
    "code": "```dart\nString removeVowels(String input) {\n  return input.replaceAll(RegExp(r'[aeiouAEIOU]'), '');\n}\n```"
  },
  {
    "task": "Write a function that takes two dates and returns the number of days between them.",
    "code": "```dart\nint daysBetween(DateTime startDate, DateTime endDate) {\n  return endDate.difference(startDate).inDays;\n}\n```"
  },
  {
    "task": "Create a function that returns the last element of a list.",
    "code": "```dart\nT getLastElement<T>(List<T> list) {\n  return list.isNotEmpty ? list.last : null;\n}\n```"
  },
  {
    "task": "Design a function that calculates the GCD of two numbers and returns it.",
    "code": "```dart\nint gcd(int a, int b) {\n  while (b != 0) {\n    int temp = b;\n    b = a % b;\n    a = temp;\n  }\n  return a;\n}\n```"
  },
  {
    "task": "Implement a function that takes a list and returns a tuple with the min and max values.",
    "code": "```dart\nTuple2<int, int> findMinMax(List<int> numbers) {\n  if (numbers.isEmpty) {\n    throw ArgumentError('List cannot be empty');\n  }\n  int minVal = numbers.first;\n  int maxVal = numbers.first;\n  for (var number in numbers) {\n    if (number < minVal) {\n      minVal = number;\n    }\n    if (number > maxVal) {\n      maxVal = number;\n    }\n  }\n  return Tuple2(minVal, maxVal);\n}\n\nclass Tuple2<T1, T2> {\n  final T1 item1;\n  final T2 item2;\n\n  Tuple2(this.item1, this.item2);\n}\n```"
  },
  {
    "task": "Write a function that converts a binary string to its decimal representation and returns it.",
    "code": "```dart\nint binaryToDecimal(String binary) {\n  return int.parse(binary, radix: 2);\n}\n```"
  },
  {
    "task": "Create a function that accepts a dictionary and returns a list of its keys.",
    "code": "```dart\nList<K> getKeys<K, V>(Map<K, V> dictionary) {\n  return dictionary.keys.toList();\n}\n```"
  },
  {
    "task": "Develop a function that returns the concatenation of two strings.",
    "code": "```dart\nString concatenateStrings(String str1, String str2) {\n  return str1 + str2;\n}\n```"
  },
  {
    "task": "Implement a function that receives a list and returns a new list with duplicates removed.",
    "code": "```dart\nList<T> removeDuplicates<T>(List<T> items) {\n  return items.toSet().toList();\n}\n```"
  },
  {
    "task": "Write a function that returns the intersection of two lists.",
    "code": "```dart\nList<T> intersection<T>(List<T> list1, List<T> list2) {\n  return list1.toSet().intersection(list2.toSet()).toList();\n}\n```"
  },
  {
    "task": "Create a function that takes an integer and returns whether it is even or odd as a string.",
    "code": "```dart\nString evenOrOdd(int number) {\n  return number % 2 == 0 ? 'even' : 'odd';\n}\n```"
  },
  {
    "task": "Design a function that returns the number of vowels in a given string.",
    "code": "```dart\nint countVowels(String input) {\n  final vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n  return input.runes.where((char) => vowels.contains(String.fromCharCode(char))).length;\n}\n```"
  },
  {
    "task": "Implement a function that counts the occurrences of a substring within a string and returns it.",
    "code": "```dart\nint countOccurrences(String str, String subStr) {\n  if (subStr.isEmpty) return 0;\n  int count = 0;\n  int index = str.indexOf(subStr);\n  while (index != -1) {\n    count++;\n    index = str.indexOf(subStr, index + subStr.length);\n  }\n  return count;\n}\n```"
  },
  {
    "task": "Write a function that accepts a list of numbers and returns them sorted in descending order.",
    "code": "```dart\nList<num> sortDescending(List<num> numbers) {\n  numbers.sort((a, b) => b.compareTo(a));\n  return numbers;\n}\n```"
  },
  {
    "task": "Create a function that returns the median of a list of numbers.",
    "code": "```dart\ndouble findMedian(List<double> numbers) {\n  if (numbers.isEmpty) {\n    throw ArgumentError(\"The list cannot be empty\");\n  }\n  List<double> sortedNumbers = List.from(numbers)..sort();\n  int middleIndex = sortedNumbers.length ~/ 2;\n  if (sortedNumbers.length.isOdd) {\n    return sortedNumbers[middleIndex];\n  } else {\n    return (sortedNumbers[middleIndex - 1] + sortedNumbers[middleIndex]) / 2;\n  }\n}\n```"
  },
  {
    "task": "Develop a function that receives a sentence and returns it with words in reverse order.",
    "code": "```dart\nString reverseWords(String sentence) {\n  return sentence.split(' ').reversed.join(' ');\n}\n```"
  },
  {
    "task": "Implement a function that returns the sum of all elements in a matrix.",
    "code": "```dart\nint sumMatrix(List<List<int>> matrix) {\n  int sum = 0;\n  for (var row in matrix) {\n    for (var element in row) {\n      sum += element;\n    }\n  }\n  return sum;\n}\n```"
  },
  {
    "task": "Write a function that accepts a string and returns true if it is a palindrome.",
    "code": "```dart\nbool isPalindrome(String input) {\n  String reversed = input.split('').reversed.join('');\n  return input == reversed;\n}\n```"
  },
  {
    "task": "Create a function that takes a number and returns its binary representation as a string.",
    "code": "```dart\nString toBinary(int number) {\n  return number.toRadixString(2);\n}\n```"
  },
  {
    "task": "Design a function that returns the number of words in a paragraph.",
    "code": "```dart\nint countWords(String paragraph) {\n  if (paragraph.isEmpty) {\n    return 0;\n  }\n  List<String> words = paragraph.trim().split(RegExp(r'\\s+'));\n  return words.length;\n}\n```"
  },
  {
    "task": "Implement a function that accepts a list and returns the index of its maximum element.",
    "code": "```dart\nint indexOfMaxElement(List<num> list) {\n  if (list.isEmpty) return -1;\n  int maxIndex = 0;\n  for (int i = 1; i < list.length; i++) {\n    if (list[i] > list[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n}\n```"
  },
  {
    "task": "Write a function that takes a list of grades and returns the highest grade.",
    "code": "```dart\nint highestGrade(List<int> grades) {\n  return grades.reduce((a, b) => a > b ? a : b);\n}\n```"
  },
  {
    "task": "Create a function that returns the product of all positive integers up to a given number.",
    "code": "```dart\nint productOfIntegers(int n) {\n  int product = 1;\n  for (int i = 1; i <= n; i++) {\n    product *= i;\n  }\n  return product;\n}\n```"
  },
  {
    "task": "Develop a function that receives a string and returns a new string with spaces replaced by hyphens.",
    "code": "```dart\nString replaceSpaces(String input) {\n  return input.replaceAll(' ', '-');\n}\n```"
  },
  {
    "task": "Implement a function that takes a list of integers and returns their sum.",
    "code": "```dart\nint sumList(List<int> numbers) {\n  return numbers.fold(0, (sum, number) => sum + number);\n}\n```"
  },
  {
    "task": "Write a function that checks if a string is a valid email address and returns a boolean.",
    "code": "```dart\nbool isValidEmail(String email) {\n  final emailRegex = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$';\n  final regExp = RegExp(emailRegex);\n  return regExp.hasMatch(email);\n}\n```"
  },
  {
    "task": "Create a function that returns the decimal equivalent of a hexadecimal string.",
    "code": "```dart\nint hexToDecimal(String hex) {\n  return int.parse(hex, radix: 16);\n}\n```"
  },
  {
    "task": "Design a function that calculates and returns the body mass index based on height and weight.",
    "code": "```dart\ndouble calculateBMI(double weight, double height) {\n  if (height <= 0) {\n    throw ArgumentError('Height must be greater than zero.');\n  }\n  return weight / (height * height);\n}\n```"
  },
  {
    "task": "Implement a function that returns the initials of a person's name given a full name.",
    "code": "```dart\nString getInitials(String fullName) {\n  List<String> names = fullName.split(' ');\n  String initials = names.map((name) => name[0]).join();\n  return initials.toUpperCase();\n}\n```"
  },
  {
    "task": "Write a function that accepts a list of names and returns them sorted alphabetically.",
    "code": "```dart\nList<String> sortNames(List<String> names) {\n  names.sort();\n  return names;\n}\n```"
  },
  {
    "task": "Create a function that takes a list of integers and returns a list of their squares.",
    "code": "```dart\nList<int> squareList(List<int> numbers) {\n  return numbers.map((num) => num * num).toList();\n}\n```"
  },
  {
    "task": "Develop a function that returns the common elements between two sets.",
    "code": "```dart\nSet<T> commonElements<T>(Set<T> set1, Set<T> set2) {\n  return set1.intersection(set2);\n}\n```"
  },
  {
    "task": "Implement a function that receives a list of strings and returns the shortest string.",
    "code": "```dart\nString findShortestString(List<String> strings) {\n  if (strings.isEmpty) return '';\n  String shortest = strings[0];\n  for (var str in strings) {\n    if (str.length < shortest.length) {\n      shortest = str;\n    }\n  }\n  return shortest;\n}\n```"
  },
  {
    "task": "Write a function that returns the sum of digits of a given integer.",
    "code": "```dart\nint sumOfDigits(int number) {\n  int sum = 0;\n  number = number.abs(); // Convert to positive for negative numbers\n  while (number > 0) {\n    sum += number % 10;\n    number ~/= 10;\n  }\n  return sum;\n}\n```"
  },
  {
    "task": "Create a function that takes a matrix and returns its transpose.",
    "code": "```dart\nList<List<T>> transpose<T>(List<List<T>> matrix) {\n  if (matrix.isEmpty) return [];\n  int rowCount = matrix.length;\n  int colCount = matrix[0].length;\n  List<List<T>> transposedMatrix = List.generate(colCount, (_) => List.filled(rowCount, matrix[0][0]));\n  \n  for (int i = 0; i < rowCount; i++) {\n    for (int j = 0; j < colCount; j++) {\n      transposedMatrix[j][i] = matrix[i][j];\n    }\n  }\n  \n  return transposedMatrix;\n}\n```"
  },
  {
    "task": "Design a function that returns the percentage of uppercase letters in a string.",
    "code": "```dart\ndouble percentageOfUppercase(String input) {\n  if (input.isEmpty) return 0.0;\n  int uppercaseCount = input.split('').where((char) => char.toUpperCase() == char && char.toLowerCase() != char).length;\n  return (uppercaseCount / input.length) * 100;\n}\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns it with each word capitalized.",
    "code": "```dart\nString capitalizeWords(String input) {\n  return input.split(' ').map((word) => word.isNotEmpty ? '${word[0].toUpperCase()}${word.substring(1).toLowerCase()}' : '').join(' ');\n}\n```"
  },
  {
    "task": "Write a function that takes a list and returns the difference between the max and min values.",
    "code": "```dart\nint differenceBetweenMaxAndMin(List<int> numbers) {\n  if (numbers.isEmpty) return 0;\n  int maxValue = numbers.reduce((a, b) => a > b ? a : b);\n  int minValue = numbers.reduce((a, b) => a < b ? a : b);\n  return maxValue - minValue;\n}\n```"
  },
  {
    "task": "Create a function that returns a list containing the first n prime numbers.",
    "code": "```dart\nList<int> getFirstNPrimes(int n) {\n  List<int> primes = [];\n  int number = 2;\n  while (primes.length < n) {\n    if (isPrime(number)) {\n      primes.add(number);\n    }\n    number++;\n  }\n  return primes;\n}\n\nbool isPrime(int number) {\n  if (number < 2) return false;\n  for (int i = 2; i * i <= number; i++) {\n    if (number % i == 0) return false;\n  }\n  return true;\n}\n```"
  },
  {
    "task": "Develop a function that receives a dictionary and returns a new dictionary with keys and values swapped.",
    "code": "```dart\nMap<K, V> swapKeysAndValues<K, V>(Map<V, K> original) {\n  return original.map((key, value) => MapEntry(value, key));\n}\n```"
  },
  {
    "task": "Implement a function that accepts a string and returns the frequency of each word.",
    "code": "```dart\nMap<String, int> wordFrequency(String text) {\n  final words = text.split(RegExp(r'\\s+'));\n  final frequency = <String, int>{};\n  \n  for (var word in words) {\n    word = word.toLowerCase();\n    frequency[word] = (frequency[word] ?? 0) + 1;\n  }\n  \n  return frequency;\n}\n```"
  },
  {
    "task": "Write a function that takes two numbers and returns their greatest common divisor.",
    "code": "```dart\nint gcd(int a, int b) {\n  while (b != 0) {\n    int temp = b;\n    b = a % b;\n    a = temp;\n  }\n  return a;\n}\n```"
  },
  {
    "task": "Create a function that returns the number of consonants in a given string.",
    "code": "```dart\nint countConsonants(String input) {\n  final vowels = RegExp(r'[aeiouAEIOU]');\n  return input.replaceAll(vowels, '').replaceAll(RegExp(r'[^a-zA-Z]'), '').length;\n}\n```"
  },
  {
    "task": "Design a function that checks if a number is a perfect square and returns a boolean.",
    "code": "```dart\nbool isPerfectSquare(int number) {\n  if (number < 0) return false;\n  int root = number ~/ number.sqrt().toInt();\n  return root * root == number;\n}\n```"
  },
  {
    "task": "Implement a function that takes a list of numbers and returns the mode.",
    "code": "```dart\nList<int> findMode(List<int> numbers) {\n  Map<int, int> frequencyMap = {};\n  for (var number in numbers) {\n    frequencyMap[number] = (frequencyMap[number] ?? 0) + 1;\n  }\n  int maxFrequency = frequencyMap.values.reduce((a, b) => a > b ? a : b);\n  return frequencyMap.entries\n      .where((entry) => entry.value == maxFrequency)\n      .map((entry) => entry.key)\n      .toList();\n}\n```"
  },
  {
    "task": "Write a function that accepts a string and returns a new string with characters in reverse order.",
    "code": "```dart\nString reverseString(String input) {\n  return input.split('').reversed.join('');\n}\n```"
  },
  {
    "task": "Create a function that returns the sum of all even numbers in a list.",
    "code": "```dart\nint sumOfEvenNumbers(List<int> numbers) {\n  return numbers.where((number) => number.isEven).reduce((a, b) => a + b);\n}\n```"
  },
  {
    "task": "Develop a function that receives two lists and returns their union.",
    "code": "```dart\nList<T> union<T>(List<T> list1, List<T> list2) {\n  return list1.toSet().union(list2.toSet()).toList();\n}\n```"
  },
  {
    "task": "Implement a function that takes a string and returns the number of unique characters.",
    "code": "```dart\nint countUniqueCharacters(String input) {\n  return input.split('').toSet().length;\n}\n```"
  },
  {
    "task": "Write a function that returns the cube of a given number.",
    "code": "```dart\nint cube(int number) {\n  return number * number * number;\n}\n```"
  },
  {
    "task": "Create a function that calculates the power of a number given a base and exponent and returns the result.",
    "code": "```dart\ndouble calculatePower(double base, int exponent) {\n  return base == 0 && exponent == 0 ? double.nan : base == 0 ? 0 : base == 1 || exponent == 0 ? 1 : List.generate(exponent, (_) => base).reduce((a, b) => a * b);\n}\n```"
  },
  {
    "task": "Design a function that accepts a URL and returns its domain name.",
    "code": "```dart\nString getDomainName(String url) {\n  Uri uri = Uri.parse(url);\n  return uri.host;\n}\n```"
  },
  {
    "task": "Implement a function that takes a sentence and returns it with each letter shifted by one in the alphabet.",
    "code": "```dart\nString shiftSentence(String sentence) {\n  return String.fromCharCodes(sentence.runes.map((int rune) {\n    if ((rune >= 65 && rune < 90) || (rune >= 97 && rune < 122)) {\n      return rune + 1;\n    } else if (rune == 90) {\n      return 65;\n    } else if (rune == 122) {\n      return 97;\n    } else {\n      return rune;\n    }\n  }));\n}\n```"
  },
  {
    "task": "Write a function that checks if a list is sorted and returns a boolean.",
    "code": "```dart\nbool isSorted(List<num> list) {\n  for (int i = 0; i < list.length - 1; i++) {\n    if (list[i] > list[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n}\n```"
  },
  {
    "task": "Create a function that returns the longest increasing subsequence in a list of numbers.",
    "code": "```dart\nList<int> longestIncreasingSubsequence(List<int> nums) {\n  if (nums.isEmpty) return [];\n\n  List<int> dp = List<int>.filled(nums.length, 1);\n  List<int> prev = List<int>.filled(nums.length, -1);\n\n  for (int i = 1; i < nums.length; i++) {\n    for (int j = 0; j < i; j++) {\n      if (nums[i] > nums[j] && dp[i] < dp[j] + 1) {\n        dp[i] = dp[j] + 1;\n        prev[i] = j;\n      }\n    }\n  }\n\n  int maxIndex = 0;\n  for (int i = 1; i < dp.length; i++) {\n    if (dp[i] > dp[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n\n  List<int> lis = [];\n  for (int i = maxIndex; i >= 0; i = prev[i]) {\n    lis.add(nums[i]);\n    if (prev[i] == -1) break;\n  }\n\n  return lis.reversed.toList();\n}\n```"
  },
  {
    "task": "Develop a function that calculates and returns the compound interest for given principal, rate, and time.",
    "code": "```dart\ndouble calculateCompoundInterest(double principal, double rate, double time) {\n  return principal * (1 + rate).pow(time) - principal;\n}\n```"
  },
  {
    "task": "Implement a function that accepts two strings and returns their longest common substring.",
    "code": "```dart\nString longestCommonSubstring(String str1, String str2) {\n  int maxLength = 0;\n  int endingIndex = 0;\n  List<List<int>> table = List.generate(\n      str1.length + 1, (_) => List<int>.filled(str2.length + 1, 0));\n\n  for (int i = 1; i <= str1.length; i++) {\n    for (int j = 1; j <= str2.length; j++) {\n      if (str1[i - 1] == str2[j - 1]) {\n        table[i][j] = table[i - 1][j - 1] + 1;\n        if (table[i][j] > maxLength) {\n          maxLength = table[i][j];\n          endingIndex = i;\n        }\n      }\n    }\n  }\n  return str1.substring(endingIndex - maxLength, endingIndex);\n}\n```"
  },
  {
    "task": "Write a function that takes a number and returns true if it is a palindrome.",
    "code": "```dart\nbool isPalindrome(int number) {\n  String numStr = number.toString();\n  String reversedStr = numStr.split('').reversed.join('');\n  return numStr == reversedStr;\n}\n```"
  },
  {
    "task": "Create a function that returns the average length of words in a given sentence.",
    "code": "```dart\ndouble averageWordLength(String sentence) {\n  if (sentence.isEmpty) return 0.0;\n  List<String> words = sentence.split(RegExp(r'\\s+'));\n  int totalLength = words.fold(0, (sum, word) => sum + word.length);\n  return totalLength / words.length;\n}\n```"
  },
  {
    "task": "Design a function that checks if a string contains only digits and returns a boolean.",
    "code": "```dart\nbool containsOnlyDigits(String input) {\n  return RegExp(r'^\\d+$').hasMatch(input);\n}\n```"
  },
  {
    "task": "Implement a function that receives a list of tuples and returns a list of the first elements.",
    "code": "```dart\nList<T> getFirstElements<T>(List<List<T>> tuples) {\n  return tuples.map((tuple) => tuple[0]).toList();\n}\n```"
  },
  {
    "task": "Write a function that takes a year and returns the Chinese zodiac sign for that year.",
    "code": "```dart\nString getChineseZodiac(int year) {\n  List<String> zodiacSigns = [\n    'Monkey', 'Rooster', 'Dog', 'Pig', 'Rat', 'Ox', \n    'Tiger', 'Rabbit', 'Dragon', 'Snake', 'Horse', 'Goat'\n  ];\n  return zodiacSigns[year % 12];\n}\n```"
  },
  {
    "task": "Create a function that returns the number of trailing zeros in a factorial of a given number.",
    "code": "```dart\nint trailingZerosInFactorial(int n) {\n  int count = 0;\n  for (int i = 5; n ~/ i >= 1; i *= 5) {\n    count += n ~/ i;\n  }\n  return count;\n}\n```"
  },
  {
    "task": "Develop a function that accepts a list and returns a new list with elements multiplied by their index.",
    "code": "```dart\nList<int> multiplyByIndex(List<int> input) {\n  return List<int>.generate(input.length, (index) => input[index] * index);\n}\n```"
  },
  {
    "task": "Implement a function that receives a string and returns a dictionary of word lengths.",
    "code": "```dart\nMap<String, int> wordLengths(String input) {\n  return Map.fromIterable(\n    input.split(' '),\n    key: (word) => word,\n    value: (word) => word.length,\n  );\n}\n```"
  },
  {
    "task": "Write a function that takes a list of integers and returns a list of numbers that are divisible by 3.",
    "code": "```dart\nList<int> divisibleByThree(List<int> numbers) {\n  return numbers.where((number) => number % 3 == 0).toList();\n}\n```"
  },
  {
    "task": "Create a function that returns the result of a quadratic equation given its coefficients.",
    "code": "```dart\nimport 'dart:math';\n\nList<double> quadraticEquation(double a, double b, double c) {\n  double discriminant = b * b - 4 * a * c;\n  if (discriminant < 0) {\n    return []; // No real roots\n  } else if (discriminant == 0) {\n    double root = -b / (2 * a);\n    return [root];\n  } else {\n    double sqrtDiscriminant = sqrt(discriminant);\n    double root1 = (-b + sqrtDiscriminant) / (2 * a);\n    double root2 = (-b - sqrtDiscriminant) / (2 * a);\n    return [root1, root2];\n  }\n}\n```"
  },
  {
    "task": "Design a function that checks if two lists have any elements in common and returns a boolean.",
    "code": "```dart\nbool haveCommonElements(List list1, List list2) {\n  for (var element in list1) {\n    if (list2.contains(element)) {\n      return true;\n    }\n  }\n  return false;\n}\n```"
  },
  {
    "task": "Implement a function that accepts a list and returns the sum of its elements using recursion.",
    "code": "```dart\nint sumList(List<int> numbers, [int index = 0]) {\n  if (index >= numbers.length) {\n    return 0;\n  }\n  return numbers[index] + sumList(numbers, index + 1);\n}\n```"
  },
  {
    "task": "Write a function that takes a list of numbers and returns the variance.",
    "code": "```dart\ndouble calculateVariance(List<double> numbers) {\n  if (numbers.isEmpty) return 0.0;\n  \n  double mean = numbers.reduce((a, b) => a + b) / numbers.length;\n  double sumSquaredDiffs = numbers.map((num) => (num - mean) * (num - mean)).reduce((a, b) => a + b);\n  \n  return sumSquaredDiffs / numbers.length;\n}\n```"
  },
  {
    "task": "Create a function that returns the ASCII value of a given character.",
    "code": "```dart\nint getAsciiValue(String character) {\n  return character.codeUnitAt(0);\n}\n```"
  },
  {
    "task": "Develop a function that takes a number and returns the number of bits required for its binary representation.",
    "code": "```dart\nint numberOfBits(int number) {\n  if (number == 0) return 1;\n  return number.toRadixString(2).length;\n}\n```"
  }
]