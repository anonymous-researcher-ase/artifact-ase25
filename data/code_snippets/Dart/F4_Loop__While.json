[
  {
    "task": "Create a program that continuously asks the user to enter a number until they input a negative number.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  while (true) {\n    stdout.write('Enter a number: ');\n    int? number = int.tryParse(stdin.readLineSync()!);\n    if (number == null || number < 0) {\n      break;\n    }\n  }\n}\n```"
  },
  {
    "task": "Write a function that doubles a number and repeats the process until the number is greater than 1000.",
    "code": "```dart\nvoid doubleUntilGreaterThan1000(int number) {\n  while (number <= 1000) {\n    number *= 2;\n  }\n  print(number);\n}\n```"
  },
  {
    "task": "Develop a routine to keep printing 'Hello, World!' until a counter reaches 10.",
    "code": "```dart\nvoid main() {\n  int counter = 0;\n  while (counter < 10) {\n    print('Hello, World!');\n    counter++;\n  }\n}\n```"
  },
  {
    "task": "Construct a loop that checks if a randomly generated number is even, repeating until an odd number is found.",
    "code": "```dart\nimport 'dart:math';\n\nvoid main() {\n  Random random = Random();\n  int number;\n  \n  do {\n    number = random.nextInt(100); // Generate a random number between 0 and 99\n  } while (number % 2 == 0);\n  \n  print('Found an odd number: $number');\n}\n```"
  },
  {
    "task": "Design a countdown timer that prints each second until it reaches zero.",
    "code": "```dart\nvoid countdownTimer(int start) {\n  while (start >= 0) {\n    print('$start');\n    start--;\n    Future.delayed(Duration(seconds: 1), () {});\n  }\n}\n\nvoid main() {\n  countdownTimer(10); // Example: Countdown from 10\n}\n```"
  },
  {
    "task": "Implement a system where a user can keep adding items to a list until they type 'stop'.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  List<String> items = [];\n  String input;\n\n  while (true) {\n    stdout.write('Enter an item (or type \"stop\" to finish): ');\n    input = stdin.readLineSync() ?? '';\n\n    if (input.toLowerCase() == 'stop') {\n      break;\n    }\n\n    items.add(input);\n  }\n\n  print('Items: $items');\n}\n```"
  },
  {
    "task": "Write a script that simulates rolling a die and continues until a six is rolled.",
    "code": "```dart\nimport 'dart:math';\n\nvoid main() {\n  Random random = Random();\n  int roll = 0;\n\n  while (roll != 6) {\n    roll = random.nextInt(6) + 1;\n    print('Rolled: $roll');\n  }\n\n  print('A six was rolled!');\n}\n```"
  },
  {
    "task": "Create a program that asks for a password and keeps prompting until the correct password is entered.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  const correctPassword = 'secret';\n  String? inputPassword;\n\n  while (inputPassword != correctPassword) {\n    stdout.write('Enter password: ');\n    inputPassword = stdin.readLineSync();\n    if (inputPassword != correctPassword) {\n      print('Incorrect password, please try again.');\n    }\n  }\n\n  print('Access granted.');\n}\n```"
  },
  {
    "task": "Design a loop that calculates the sum of entered numbers until the user enters zero.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  int sum = 0;\n  int number;\n\n  do {\n    stdout.write('Enter a number (0 to stop): ');\n    number = int.parse(stdin.readLineSync()!);\n    sum += number;\n  } while (number != 0);\n\n  print('The sum of entered numbers is: $sum');\n}\n```"
  },
  {
    "task": "Implement a feature that prints Fibonacci numbers until a number exceeds 100.",
    "code": "```dart\nvoid main() {\n  int a = 0, b = 1;\n  while (a <= 100) {\n    print(a);\n    int temp = a;\n    a = b;\n    b = temp + b;\n  }\n}\n```"
  },
  {
    "task": "Develop a loop that keeps halving a number until it becomes less than one.",
    "code": "```dart\nvoid main() {\n  double number = 100.0;\n  \n  while (number >= 1) {\n    number /= 2;\n    print(number);\n  }\n}\n```"
  },
  {
    "task": "Write a program that asks for names and keeps storing them until the user enters 'done'.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  List<String> names = [];\n  while (true) {\n    stdout.write('Enter a name (or type \"done\" to finish): ');\n    String? input = stdin.readLineSync();\n    if (input == 'done') {\n      break;\n    } else if (input != null && input.isNotEmpty) {\n      names.add(input);\n    }\n  }\n  print('Names entered: $names');\n}\n```"
  },
  {
    "task": "Create a process that keeps flipping a coin, recording results until there have been five heads.",
    "code": "```dart\nimport 'dart:math';\n\nvoid main() {\n  int headsCount = 0;\n  Random random = Random();\n  \n  while (headsCount < 5) {\n    bool isHeads = random.nextBool();\n    if (isHeads) {\n      headsCount++;\n    }\n  }\n}\n```"
  },
  {
    "task": "Implement a countdown that decreases by two each time, starting from 20, until it reaches zero.",
    "code": "```dart\nvoid main() {\n  int count = 20;\n  while (count >= 0) {\n    print(count);\n    count -= 2;\n  }\n}\n```"
  },
  {
    "task": "Design a solution that repeatedly asks for user input and repeats it back until they type 'exit'.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  String? input;\n  while (true) {\n    stdout.write('Enter something (type \"exit\" to quit): ');\n    input = stdin.readLineSync();\n    if (input == 'exit') {\n      break;\n    }\n    print('You typed: $input');\n  }\n}\n```"
  },
  {
    "task": "Develop a loop to simulate a bank account balance, repeatedly deducting a fee until the balance is below zero.",
    "code": "```dart\nvoid main() {\n  double balance = 100.0; // Initial balance\n  double fee = 10.0; // Fee to deduct\n\n  while (balance >= 0) {\n    balance -= fee;\n    print('Current balance: \\$${balance}');\n  }\n}\n```"
  },
  {
    "task": "Create a sequence generator that multiplies a number by three each time until it reaches or exceeds 100.",
    "code": "```dart\nvoid main() {\n  int number = 1;\n  while (number < 100) {\n    print(number);\n    number *= 3;\n  }\n}\n```"
  },
  {
    "task": "Write a program that keeps generating random numbers between 1 and 10 until it gets a five.",
    "code": "```dart\nimport 'dart:math';\n\nvoid main() {\n  Random random = Random();\n  int number;\n  \n  do {\n    number = random.nextInt(10) + 1;\n    print(number);\n  } while (number != 5);\n}\n```"
  },
  {
    "task": "Implement a system to keep checking the temperature and only stop when it falls below freezing.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  double temperature;\n\n  do {\n    print('Enter the current temperature: ');\n    temperature = double.parse(stdin.readLineSync()!);\n  } while (temperature >= 0.0);\n\n  print('Temperature is below freezing. Stopping check.');\n}\n```"
  },
  {
    "task": "Construct a quiz game that continues asking questions until the player answers incorrectly.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  List<Map<String, String>> questions = [\n    {\n      'question': 'What is the capital of France?',\n      'answer': 'Paris',\n    },\n    {\n      'question': 'What is 2 + 2?',\n      'answer': '4',\n    },\n    {\n      'question': 'What is the color of the sky?',\n      'answer': 'blue',\n    },\n  ];\n\n  int index = 0;\n  while (index < questions.length) {\n    print(questions[index]['question']);\n    String? userAnswer = stdin.readLineSync();\n\n    if (userAnswer?.toLowerCase() != questions[index]['answer']?.toLowerCase()) {\n      print('Incorrect!');\n      break;\n    } else {\n      print('Correct!');\n      index++;\n    }\n  }\n  print('Game Over!');\n}\n```"
  },
  {
    "task": "Write a function that calculates factorials of a number, repeating the process for numbers 1 through 5.",
    "code": "```dart\nvoid calculateFactorials() {\n  int number = 1;\n  while (number <= 5) {\n    print('Factorial of $number is ${factorial(number)}');\n    number++;\n  }\n}\n\nint factorial(int n) {\n  int result = 1;\n  while (n > 1) {\n    result *= n;\n    n--;\n  }\n  return result;\n}\n\nvoid main() {\n  calculateFactorials();\n}\n```"
  },
  {
    "task": "Create a loop that prints all even numbers between 1 and 50.",
    "code": "```dart\nvoid main() {\n  int number = 2;\n  while (number <= 50) {\n    print(number);\n    number += 2;\n  }\n}\n```"
  },
  {
    "task": "Design a program that continuously asks for user input until a palindrome is entered.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  while (true) {\n    stdout.write('Enter a string: ');\n    String input = stdin.readLineSync() ?? '';\n    if (input == input.split('').reversed.join('')) {\n      print('Palindrome entered!');\n      break;\n    } else {\n      print('Not a palindrome, try again.');\n    }\n  }\n}\n```"
  },
  {
    "task": "Implement a countdown that decreases by one each second, starting from 100.",
    "code": "```dart\nimport 'dart:async';\n\nvoid main() {\n  int count = 100;\n  Timer.periodic(Duration(seconds: 1), (Timer timer) {\n    if (count < 0) {\n      timer.cancel();\n    } else {\n      print(count);\n      count--;\n    }\n  });\n}\n```"
  },
  {
    "task": "Write a script that repeatedly asks for a number and adds it to a total until the total exceeds 500.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  int total = 0;\n  while (total <= 500) {\n    stdout.write('Enter a number: ');\n    int? number = int.tryParse(stdin.readLineSync()!);\n    if (number != null) {\n      total += number;\n    }\n  }\n  print('Total exceeded 500. Final total: $total');\n}\n```"
  },
  {
    "task": "Create a loop that generates random letters until the letter 'Z' appears.",
    "code": "```dart\nimport 'dart:math';\n\nvoid main() {\n  final random = Random();\n  String letter = '';\n  \n  while (letter != 'Z') {\n    letter = String.fromCharCode(random.nextInt(26) + 65);\n    print(letter);\n  }\n}\n```"
  },
  {
    "task": "Write a process that continues prompting for two numbers and prints their sum if it's even.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  while (true) {\n    print('Enter first number:');\n    int num1 = int.parse(stdin.readLineSync()!);\n\n    print('Enter second number:');\n    int num2 = int.parse(stdin.readLineSync()!);\n\n    int sum = num1 + num2;\n\n    if (sum % 2 == 0) {\n      print('Sum is even: $sum');\n    }\n  }\n}\n```"
  },
  {
    "task": "Develop a loop that simulates a traffic light sequence until a manual stop command is received.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  bool continueLoop = true;\n  while (continueLoop) {\n    print('Traffic Light: Green');\n    sleep(Duration(seconds: 3));\n\n    print('Traffic Light: Yellow');\n    sleep(Duration(seconds: 1));\n\n    print('Traffic Light: Red');\n    sleep(Duration(seconds: 2));\n\n    print('Type \"stop\" to end the simulation or press Enter to continue:');\n    String? input = stdin.readLineSync();\n    if (input != null && input.toLowerCase() == 'stop') {\n      continueLoop = false;\n    }\n  }\n  print('Simulation stopped.');\n}\n```"
  },
  {
    "task": "Implement a feature that keeps printing numbers in reverse order starting from 10.",
    "code": "```dart\nvoid main() {\n  int number = 10;\n  while (number > 0) {\n    print(number);\n    number--;\n  }\n}\n```"
  },
  {
    "task": "Create a program that rolls two dice and continues until the sum is exactly seven.",
    "code": "```dart\nimport 'dart:math';\n\nvoid main() {\n  Random random = Random();\n  int die1, die2, sum;\n  \n  do {\n    die1 = random.nextInt(6) + 1;\n    die2 = random.nextInt(6) + 1;\n    sum = die1 + die2;\n  } while (sum != 7);\n}\n```"
  },
  {
    "task": "Design a loop that keeps asking for ages and prints the average once a negative age is entered.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  int sum = 0;\n  int count = 0;\n\n  while (true) {\n    stdout.write('Enter age: ');\n    int? age = int.tryParse(stdin.readLineSync()!);\n\n    if (age == null || age < 0) {\n      break;\n    }\n\n    sum += age;\n    count++;\n  }\n\n  if (count > 0) {\n    double average = sum / count;\n    print('Average age: $average');\n  } else {\n    print('No valid ages entered.');\n  }\n}\n```"
  },
  {
    "task": "Write a routine that squares numbers starting from 1 until the square is greater than 500.",
    "code": "```dart\nvoid main() {\n  int number = 1;\n  while (number * number <= 500) {\n    print(number * number);\n    number++;\n  }\n}\n```"
  },
  {
    "task": "Implement a system to ask for a string and append it to a file until 'end' is typed.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() async {\n  final file = File('output.txt');\n  await file.create();\n  final sink = file.openWrite(mode: FileMode.append);\n\n  while (true) {\n    stdout.write('Enter a string (type \"end\" to stop): ');\n    String input = stdin.readLineSync() ?? '';\n    if (input.toLowerCase() == 'end') {\n      break;\n    }\n    await sink.writeln(input);\n  }\n\n  await sink.close();\n}\n```"
  },
  {
    "task": "Create a script that checks if a number is prime, repeating for each number entered by the user.",
    "code": "```dart\nimport 'dart:io';\n\nbool isPrime(int number) {\n  if (number <= 1) return false;\n  for (int i = 2; i <= number ~/ 2; i++) {\n    if (number % i == 0) return false;\n  }\n  return true;\n}\n\nvoid main() {\n  while (true) {\n    stdout.write('Enter a number (or type \"exit\" to quit): ');\n    String? input = stdin.readLineSync();\n    if (input == null || input.toLowerCase() == 'exit') {\n      break;\n    }\n    int? number = int.tryParse(input);\n    if (number == null) {\n      print('Invalid input. Please enter a valid number.');\n      continue;\n    }\n    if (isPrime(number)) {\n      print('$number is a prime number.');\n    } else {\n      print('$number is not a prime number.');\n    }\n  }\n}\n```"
  },
  {
    "task": "Develop a countdown that prints numbers starting from 50 down to 1.",
    "code": "```dart\nvoid main() {\n  int number = 50;\n  while (number >= 1) {\n    print(number);\n    number--;\n  }\n}\n```"
  },
  {
    "task": "Write a program that keeps doubling the value of a variable until it exceeds 200.",
    "code": "```dart\nvoid main() {\n  int value = 1;\n  while (value <= 200) {\n    value *= 2;\n  }\n  print(value);\n}\n```"
  },
  {
    "task": "Design a loop that keeps generating a random string of letters until a specific word is formed.",
    "code": "```dart\nimport 'dart:math';\n\nvoid main() {\n  const targetWord = 'dart';\n  const letters = 'abcdefghijklmnopqrstuvwxyz';\n  final random = Random();\n  String generatedWord = '';\n\n  while (generatedWord != targetWord) {\n    generatedWord = List.generate(\n      targetWord.length,\n      (_) => letters[random.nextInt(letters.length)],\n    ).join();\n    print(generatedWord);\n  }\n\n  print('Target word \"$targetWord\" formed.');\n}\n```"
  },
  {
    "task": "Implement a system that continuously fetches data from a sensor until a threshold is crossed.",
    "code": "```dart\nimport 'dart:math';\n\nvoid main() {\n  final Random random = Random();\n  const int threshold = 100;\n  int sensorData = 0;\n\n  while (sensorData <= threshold) {\n    sensorData = fetchDataFromSensor(random);\n    print('Fetched data: $sensorData');\n  }\n\n  print('Threshold crossed with data: $sensorData');\n}\n\nint fetchDataFromSensor(Random random) {\n  return random.nextInt(150); // Simulates fetching data from a sensor\n}\n```"
  },
  {
    "task": "Create a game where a player guesses a number, and the game continues until the player guesses correctly.",
    "code": "```dart\nimport 'dart:io';\nimport 'dart:math';\n\nvoid main() {\n  Random random = Random();\n  int targetNumber = random.nextInt(100) + 1;\n  int? guess;\n\n  print('Guess the number between 1 and 100:');\n\n  while (guess != targetNumber) {\n    stdout.write('Enter your guess: ');\n    guess = int.tryParse(stdin.readLineSync()!);\n\n    if (guess == null) {\n      print('Please enter a valid number.');\n    } else if (guess < targetNumber) {\n      print('Too low! Try again.');\n    } else if (guess > targetNumber) {\n      print('Too high! Try again.');\n    } else {\n      print('Congratulations! You guessed the correct number.');\n    }\n  }\n}\n```"
  },
  {
    "task": "Write a loop that continues to add random numbers to a list until the list has 10 even numbers.",
    "code": "```dart\nimport 'dart:math';\n\nvoid main() {\n  List<int> evenNumbers = [];\n  Random random = Random();\n\n  while (evenNumbers.length < 10) {\n    int number = random.nextInt(100); // Generates a random number between 0 and 99\n    if (number % 2 == 0) {\n      evenNumbers.add(number);\n    }\n  }\n  \n  print(evenNumbers);\n}\n```"
  },
  {
    "task": "Design a routine that keeps removing elements from a list until it is empty.",
    "code": "```dart\nvoid removeElementsUntilEmpty(List<dynamic> list) {\n  while (list.isNotEmpty) {\n    list.removeLast();\n  }\n}\n\nvoid main() {\n  List<int> numbers = [1, 2, 3, 4, 5];\n  removeElementsUntilEmpty(numbers);\n  print(numbers); // Output: []\n}\n```"
  },
  {
    "task": "Implement a sequence that prints the alphabet repeatedly until interrupted by the user.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  while (true) {\n    for (var charCode = 'A'.codeUnitAt(0); charCode <= 'Z'.codeUnitAt(0); charCode++) {\n      stdout.write(String.fromCharCode(charCode));\n    }\n  }\n}\n```"
  },
  {
    "task": "Create a program that continuously checks for updates and stops once an update is available.",
    "code": "```dart\nimport 'dart:math';\n\nbool isUpdateAvailable() {\n  // Simulate update check logic\n  return Random().nextBool();\n}\n\nvoid main() {\n  bool updateAvailable = false;\n  \n  while (!updateAvailable) {\n    print('Checking for updates...');\n    updateAvailable = isUpdateAvailable();\n  }\n  \n  print('Update available!');\n}\n```"
  },
  {
    "task": "Write a function that keeps dividing a number by two until it results in a fractional value.",
    "code": "```dart\ndouble divideUntilFractional(double number) {\n  while (number % 1 == 0) {\n    number /= 2;\n  }\n  return number;\n}\n```"
  },
  {
    "task": "Develop a loop that keeps asking for student's grades and calculates the average until a grade of -1 is entered.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  int count = 0;\n  double sum = 0.0;\n  while (true) {\n    stdout.write('Enter student grade (-1 to stop): ');\n    double? grade = double.tryParse(stdin.readLineSync()!);\n    if (grade == -1) break;\n    if (grade != null) {\n      sum += grade;\n      count++;\n    }\n  }\n  double average = count > 0 ? sum / count : 0;\n  print('Average grade: $average');\n}\n```"
  },
  {
    "task": "Design a feature that continuously monitors a file for changes and stops when no changes are detected for a minute.",
    "code": "```dart\nimport 'dart:async';\nimport 'dart:io';\n\nvoid main() {\n  final filePath = 'path_to_your_file.txt';\n  final file = File(filePath);\n  DateTime lastModified = file.lastModifiedSync();\n\n  Timer? noChangeTimer;\n  bool changesDetected = false;\n\n  while (true) {\n    final currentModified = file.lastModifiedSync();\n    if (currentModified != lastModified) {\n      lastModified = currentModified;\n      changesDetected = true;\n      noChangeTimer?.cancel();\n      noChangeTimer = Timer(Duration(minutes: 1), () {\n        changesDetected = false;\n      });\n    }\n\n    if (!changesDetected) {\n      print('No changes detected for a minute. Stopping monitoring.');\n      break;\n    }\n\n    sleep(Duration(seconds: 1)); // Adjust the polling interval as needed\n  }\n}\n```"
  },
  {
    "task": "Implement a process where a motor runs until a certain distance is reached.",
    "code": "```dart\nvoid main() {\n  const int targetDistance = 100; // Example distance in some unit\n  int currentDistance = 0;\n\n  while (currentDistance < targetDistance) {\n    runMotor();\n    currentDistance += measureDistance();\n  }\n\n  stopMotor();\n}\n\nvoid runMotor() {\n  // Logic to start or keep the motor running\n}\n\nint measureDistance() {\n  // Logic to measure distance covered\n  return 10; // Example increment\n}\n\nvoid stopMotor() {\n  // Logic to stop the motor\n}\n```"
  },
  {
    "task": "Create a script that keeps generating random numbers and stops when it generates a prime number.",
    "code": "```dart\nimport 'dart:math';\n\nbool isPrime(int n) {\n  if (n <= 1) return false;\n  for (int i = 2; i <= sqrt(n); i++) {\n    if (n % i == 0) return false;\n  }\n  return true;\n}\n\nvoid main() {\n  Random random = Random();\n  int number;\n\n  do {\n    number = random.nextInt(100) + 1;\n    print('Generated number: $number');\n  } while (!isPrime(number));\n\n  print('Prime number found: $number');\n}\n```"
  },
  {
    "task": "Write a program that asks for the user's favorite color and keeps asking until they say 'blue'.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  String color;\n  do {\n    stdout.write('What is your favorite color? ');\n    color = stdin.readLineSync()!;\n  } while (color.toLowerCase() != 'blue');\n}\n```"
  },
  {
    "task": "Develop a loop that continuously prints the time every second until a key is pressed.",
    "code": "```dart\nimport 'dart:async';\nimport 'dart:io';\n\nvoid main() {\n  Timer? timer;\n  bool stop = false;\n\n  // Start a timer that prints the current time every second\n  timer = Timer.periodic(Duration(seconds: 1), (Timer t) {\n    if (!stop) {\n      print(DateTime.now());\n    } else {\n      t.cancel();\n    }\n  });\n\n  // Wait for a key press to stop the timer\n  stdin.listen((List<int> event) {\n    stop = true;\n  });\n}\n```"
  },
  {
    "task": "Create a system to keep downloading data from a server until the connection is lost.",
    "code": "```dart\nimport 'dart:io';\n\nvoid downloadData() {\n  bool connectionActive = true;\n\n  while (connectionActive) {\n    // Simulate data download\n    print('Downloading data...');\n    \n    // Simulate connection loss\n    if (Random().nextBool()) {\n      connectionActive = false;\n      print('Connection lost.');\n    }\n    \n    // Simulate delay between downloads\n    sleep(Duration(seconds: 1));\n  }\n}\n\nvoid main() {\n  downloadData();\n}\n```"
  },
  {
    "task": "Write a process to keep a light on until the ambient light level is sufficient.",
    "code": "```dart\nimport 'dart:math';\n\nvoid main() {\n  bool isLightOn = true;\n  Random random = Random();\n\n  while (isLightOn) {\n    int ambientLightLevel = random.nextInt(100); // Simulating ambient light level\n\n    if (ambientLightLevel >= 70) {\n      isLightOn = false;\n    }\n\n    print('Ambient Light Level: $ambientLightLevel, Light is On: $isLightOn');\n  }\n\n  print('Light turned off as ambient light level is sufficient.');\n}\n```"
  },
  {
    "task": "Implement a feature that continuously plays a sound until the user presses a button.",
    "code": "```dart\nimport 'dart:async';\nimport 'dart:html';\n\nvoid main() {\n  bool isPlaying = true;\n\n  // Function to simulate playing sound\n  void playSound() {\n    print('Sound is playing...');\n  }\n\n  // Button to stop the sound\n  ButtonElement stopButton = querySelector('#stopButton') as ButtonElement;\n  stopButton.onClick.listen((event) {\n    isPlaying = false;\n    print('Sound stopped.');\n  });\n\n  // Loop to continuously play sound\n  Timer.periodic(Duration(seconds: 1), (timer) {\n    if (isPlaying) {\n      playSound();\n    } else {\n      timer.cancel();\n    }\n  });\n}\n```"
  },
  {
    "task": "Design a program that keeps multiplying a matrix by itself until its determinant is greater than 1000.",
    "code": "```dart\nimport 'dart:math';\n\nList<List<double>> multiplyMatrices(List<List<double>> a, List<List<double>> b) {\n  int n = a.length;\n  List<List<double>> result = List.generate(n, (_) => List.filled(n, 0.0));\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < n; j++) {\n      for (int k = 0; k < n; k++) {\n        result[i][j] += a[i][k] * b[k][j];\n      }\n    }\n  }\n  return result;\n}\n\ndouble determinant(List<List<double>> matrix) {\n  int n = matrix.length;\n  if (n == 1) return matrix[0][0];\n  if (n == 2) return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0];\n  \n  double det = 0.0;\n  for (int p = 0; p < n; p++) {\n    List<List<double>> subMatrix = [];\n    for (int i = 1; i < n; i++) {\n      List<double> row = [];\n      for (int j = 0; j < n; j++) {\n        if (j != p) row.add(matrix[i][j]);\n      }\n      subMatrix.add(row);\n    }\n    det += pow(-1, p) * matrix[0][p] * determinant(subMatrix);\n  }\n  return det;\n}\n\nvoid main() {\n  List<List<double>> matrix = [\n    [2.0, 1.0],\n    [1.0, 2.0]\n  ];\n  \n  while (determinant(matrix) <= 1000) {\n    matrix = multiplyMatrices(matrix, matrix);\n  }\n}\n```"
  },
  {
    "task": "Create a script that keeps prompting the user to guess a word until they get it right.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  const secretWord = 'flutter';\n  String guess = '';\n\n  while (guess != secretWord) {\n    stdout.write('Guess the word: ');\n    guess = stdin.readLineSync()!;\n  }\n\n  print('Congratulations! You guessed the word.');\n}\n```"
  },
  {
    "task": "Write a loop that simulates a car's fuel consumption and stops when the tank is empty.",
    "code": "```dart\nvoid main() {\n  double fuel = 10.0; // Initial fuel in liters\n  double consumptionRate = 1.0; // Fuel consumption rate per loop iteration\n\n  while (fuel > 0) {\n    print('Fuel level: ${fuel.toStringAsFixed(2)} liters');\n    fuel -= consumptionRate;\n  }\n\n  print('The tank is empty.');\n}\n```"
  },
  {
    "task": "Develop a routine that keeps checking if a file exists and stops once it does.",
    "code": "```dart\nimport 'dart:io';\n\nvoid checkFileExists(String filePath) {\n  while (!File(filePath).existsSync()) {\n    // Wait before checking again\n    sleep(Duration(seconds: 1));\n  }\n}\n\nvoid main() {\n  String filePath = 'path/to/your/file.txt';\n  checkFileExists(filePath);\n  print('File exists!');\n}\n```"
  },
  {
    "task": "Implement a feature that continuously calculates the square root of a number until it's less than 0.1.",
    "code": "```dart\nimport 'dart:math';\n\nvoid main() {\n  double number = 100.0;\n  \n  while (number >= 0.1) {\n    number = sqrt(number);\n    print(number);\n  }\n}\n```"
  },
  {
    "task": "Create a system that prints 'Processing...' every second until a task is complete.",
    "code": "```dart\nimport 'dart:async';\n\nvoid main() {\n  bool taskComplete = false;\n  \n  Timer.periodic(Duration(seconds: 1), (timer) {\n    if (taskComplete) {\n      timer.cancel();\n    } else {\n      print('Processing...');\n    }\n  });\n\n  // Simulate task completion after 5 seconds\n  Future.delayed(Duration(seconds: 5), () {\n    taskComplete = true;\n  });\n}\n```"
  },
  {
    "task": "Write a loop that repeatedly checks the status of a process until it reports 'complete'.",
    "code": "```dart\nvoid main() {\n  String status = getStatus();\n  \n  while (status != 'complete') {\n    // Simulate checking the status\n    status = getStatus();\n  }\n}\n\n// Mock function to simulate getting the status of a process\nString getStatus() {\n  // Replace this with actual logic to check the status\n  return 'complete'; // Example: returning 'complete' for demonstration\n}\n```"
  },
  {
    "task": "Design a routine to keep pinging a server and alert when the connection is lost.",
    "code": "```dart\nimport 'dart:async';\n\nvoid main() {\n  pingServer();\n}\n\nvoid pingServer() async {\n  bool serverIsUp = true;\n\n  while (serverIsUp) {\n    serverIsUp = await checkServerStatus();\n    if (!serverIsUp) {\n      print('Connection lost!');\n    }\n    await Future.delayed(Duration(seconds: 5));\n  }\n}\n\nFuture<bool> checkServerStatus() async {\n  // Simulate a server check\n  // In real scenario, replace this with actual server check logic\n  return Future.value(DateTime.now().second % 2 == 0);\n}\n```"
  },
  {
    "task": "Implement a loop that counts down from 100 by fives until it reaches zero.",
    "code": "```dart\nvoid main() {\n  int count = 100;\n  while (count >= 0) {\n    print(count);\n    count -= 5;\n  }\n}\n```"
  },
  {
    "task": "Create a script that keeps track of inventory items being added or removed until an end signal is given.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  Map<String, int> inventory = {};\n  bool running = true;\n\n  while (running) {\n    print('Enter command (add/remove/show/end):');\n    String? command = stdin.readLineSync();\n\n    if (command == 'end') {\n      running = false;\n    } else if (command == 'add') {\n      print('Enter item name:');\n      String? item = stdin.readLineSync();\n      if (item != null) {\n        inventory[item] = (inventory[item] ?? 0) + 1;\n        print('Added $item. Total: ${inventory[item]}');\n      }\n    } else if (command == 'remove') {\n      print('Enter item name:');\n      String? item = stdin.readLineSync();\n      if (item != null && inventory.containsKey(item) && inventory[item]! > 0) {\n        inventory[item] = inventory[item]! - 1;\n        print('Removed $item. Total: ${inventory[item]}');\n      } else {\n        print('Item not found or inventory is empty.');\n      }\n    } else if (command == 'show') {\n      print('Current inventory: $inventory');\n    } else {\n      print('Invalid command.');\n    }\n  }\n\n  print('Inventory management ended.');\n}\n```"
  },
  {
    "task": "Write a program that keeps calculating the power of two for numbers until a result is greater than 1000.",
    "code": "```dart\nvoid main() {\n  int number = 1;\n  int result = 1;\n\n  while (result <= 1000) {\n    result = result * 2;\n    number++;\n  }\n}\n```"
  },
  {
    "task": "Develop a sequence that keeps appending random numbers to an array until its length is 20.",
    "code": "```dart\nimport 'dart:math';\n\nvoid main() {\n  List<int> numbers = [];\n  Random random = Random();\n\n  while (numbers.length < 20) {\n    numbers.add(random.nextInt(100)); // Random number between 0 and 99\n  }\n\n  print(numbers);\n}\n```"
  },
  {
    "task": "Implement a routine that continuously rotates an image until it matches a reference orientation.",
    "code": "```dart\nimport 'dart:math';\n\nclass Image {\n  double orientation;\n\n  Image(this.orientation);\n\n  void rotate(double angle) {\n    orientation = (orientation + angle) % 360;\n  }\n\n  bool matchesReference(double referenceOrientation) {\n    return orientation == referenceOrientation;\n  }\n}\n\nvoid main() {\n  Image image = Image(45.0);\n  double referenceOrientation = 0.0;\n  double rotationStep = 15.0; // Define a rotation step angle\n\n  while (!image.matchesReference(referenceOrientation)) {\n    image.rotate(rotationStep);\n  }\n\n  print('Image matched the reference orientation: ${image.orientation}');\n}\n```"
  },
  {
    "task": "Design a loop that keeps printing random jokes until the user stops it.",
    "code": "```dart\nimport 'dart:io';\nimport 'dart:math';\n\nvoid main() {\n  List<String> jokes = [\n    \"Why don't scientists trust atoms? Because they make up everything!\",\n    \"What do you get if you cross a cat with a dark horse? Kitty Perry.\",\n    \"Why was the math book sad? Because it had too many problems.\"\n  ];\n\n  Random random = Random();\n  String? input;\n\n  while (true) {\n    print(jokes[random.nextInt(jokes.length)]);\n    print('Press Enter to continue or type \"stop\" to end:');\n    input = stdin.readLineSync();\n    if (input?.toLowerCase() == 'stop') {\n      break;\n    }\n  }\n}\n```"
  },
  {
    "task": "Create a program that accepts user feedback and continues until a positive feedback is received.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  String feedback = '';\n  \n  while (!feedback.toLowerCase().contains('good')) {\n    stdout.write('Please enter your feedback: ');\n    feedback = stdin.readLineSync() ?? '';\n  }\n  \n  print('Thank you for your positive feedback!');\n}\n```"
  },
  {
    "task": "Write a loop that repeatedly reads sensor data and stops when a stable reading is observed.",
    "code": "```dart\nimport 'dart:math';\n\nvoid main() {\n  var random = Random();\n  int previousReading = random.nextInt(100);\n  int currentReading;\n\n  while (true) {\n    currentReading = random.nextInt(100);\n    if (currentReading == previousReading) {\n      break;\n    }\n    previousReading = currentReading;\n  }\n\n  print('Stable reading observed: $currentReading');\n}\n```"
  },
  {
    "task": "Develop a system that simulates a stopwatch, counting seconds until stopped manually.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  int seconds = 0;\n  print('Press Enter to stop the stopwatch.');\n  \n  while (!stdin.hasTerminal) {\n    sleep(Duration(seconds: 1));\n    seconds++;\n    print('Elapsed time: $seconds seconds');\n  }\n}\n```"
  },
  {
    "task": "Create a script that continues adding random integers to a sum until the sum exceeds 100.",
    "code": "```dart\nimport 'dart:math';\n\nvoid main() {\n  Random random = Random();\n  int sum = 0;\n  \n  while (sum <= 100) {\n    int randomNumber = random.nextInt(100) + 1;\n    sum += randomNumber;\n  }\n  \n  print('Final sum: $sum');\n}\n```"
  },
  {
    "task": "Implement a process to track a moving object until it stops.",
    "code": "```dart\nvoid trackMovingObject() {\n  bool isMoving = true;\n  int position = 0;\n\n  while (isMoving) {\n    // Simulate movement\n    position += 5;\n\n    // Check if the object has stopped\n    if (position >= 100) {\n      isMoving = false;\n    }\n\n    // Simulate tracking output\n    print('Tracking object at position: $position');\n  }\n\n  print('Object has stopped.');\n}\n\nvoid main() {\n  trackMovingObject();\n}\n```"
  },
  {
    "task": "Design a routine to keep checking user login attempts until a successful login occurs.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  bool loginSuccessful = false;\n\n  while (!loginSuccessful) {\n    stdout.write('Enter username: ');\n    String? username = stdin.readLineSync();\n    stdout.write('Enter password: ');\n    String? password = stdin.readLineSync();\n\n    if (isValidLogin(username, password)) {\n      loginSuccessful = true;\n      print('Login successful!');\n    } else {\n      print('Invalid credentials, please try again.');\n    }\n  }\n}\n\nbool isValidLogin(String? username, String? password) {\n  // Replace with actual validation logic\n  return username == 'user' && password == 'pass';\n}\n```"
  },
  {
    "task": "Write a loop that repeatedly calculates the area of a circle for radii from 1 to 10.",
    "code": "```dart\nimport 'dart:math';\n\nvoid main() {\n  int radius = 1;\n  while (radius <= 10) {\n    double area = pi * radius * radius;\n    print('Radius: $radius, Area: $area');\n    radius++;\n  }\n}\n```"
  },
  {
    "task": "Create a program that continues flipping a card from a deck until an ace is drawn.",
    "code": "```dart\nimport 'dart:math';\n\nvoid main() {\n  List<String> deck = [\n    '2', '3', '4', '5', '6', '7', '8', '9', '10', \n    'J', 'Q', 'K', 'A'\n  ];\n  Random random = Random();\n  String card;\n  \n  do {\n    card = deck[random.nextInt(deck.length)];\n    print('Flipped: $card');\n  } while (card != 'A');\n  \n  print('An ace was drawn.');\n}\n```"
  },
  {
    "task": "Develop a loop that keeps asking for a word and stores it until a word with more than five letters is entered.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  List<String> words = [];\n  while (true) {\n    stdout.write('Enter a word: ');\n    String? word = stdin.readLineSync();\n    if (word != null) {\n      words.add(word);\n      if (word.length > 5) {\n        break;\n      }\n    }\n  }\n  print('Stored words: $words');\n}\n```"
  },
  {
    "task": "Implement a feature that continuously calculates the exponential growth of a population until it doubles.",
    "code": "```dart\nvoid main() {\n  double initialPopulation = 1000;\n  double population = initialPopulation;\n  double growthRate = 0.05; // 5% growth rate per cycle\n\n  while (population < initialPopulation * 2) {\n    population += population * growthRate;\n  }\n\n  print('Population has doubled to: $population');\n}\n```"
  },
  {
    "task": "Write a script that repeats a string a certain number of times until a limit is reached.",
    "code": "```dart\nvoid main() {\n  String repeatString = \"Hello\";\n  int limit = 5;\n  int count = 0;\n  String result = \"\";\n\n  while (count < limit) {\n    result += repeatString;\n    count++;\n  }\n\n  print(result);\n}\n```"
  },
  {
    "task": "Create a routine that keeps accessing an API endpoint until it returns a specific result.",
    "code": "```dart\nimport 'dart:convert';\nimport 'dart:io';\n\nFuture<void> fetchDataUntilConditionMet() async {\n  final url = Uri.parse('https://example.com/api/endpoint');\n  HttpClient client = HttpClient();\n\n  bool conditionMet = false;\n\n  while (!conditionMet) {\n    HttpClientRequest request = await client.getUrl(url);\n    HttpClientResponse response = await request.close();\n\n    if (response.statusCode == 200) {\n      String responseBody = await response.transform(utf8.decoder).join();\n      Map<String, dynamic> data = json.decode(responseBody);\n\n      // Assume the condition is met if a specific key equals a specific value\n      if (data['key'] == 'specificResult') {\n        conditionMet = true;\n      }\n    } else {\n      print('Error: ${response.statusCode}');\n    }\n    await Future.delayed(Duration(seconds: 1)); // Optional delay between requests\n  }\n\n  client.close();\n}\n\nvoid main() {\n  fetchDataUntilConditionMet();\n}\n```"
  },
  {
    "task": "Design a loop that continues to fetch stock prices until a certain price threshold is crossed.",
    "code": "```dart\nimport 'dart:math';\n\nvoid main() {\n  double priceThreshold = 150.0;\n  double currentPrice = 100.0;\n\n  Random random = Random();\n\n  while (currentPrice <= priceThreshold) {\n    double change = random.nextDouble() * 10 - 5; // Random change between -5 and 5\n    currentPrice += change;\n    print('Current stock price: \\$${currentPrice.toStringAsFixed(2)}');\n  }\n\n  print('Price threshold crossed. Final price: \\$${currentPrice.toStringAsFixed(2)}');\n}\n```"
  },
  {
    "task": "Implement a process that keeps monitoring CPU usage until it drops below 10%.",
    "code": "```dart\nimport 'dart:math';\n\ndouble getCpuUsage() {\n  // Mock function to simulate CPU usage percentage\n  return Random().nextDouble() * 100;\n}\n\nvoid monitorCpuUsage() {\n  double cpuUsage = getCpuUsage();\n  while (cpuUsage >= 10) {\n    print('Current CPU Usage: $cpuUsage%');\n    cpuUsage = getCpuUsage();\n  }\n  print('CPU Usage dropped below 10%: $cpuUsage%');\n}\n\nvoid main() {\n  monitorCpuUsage();\n}\n```"
  },
  {
    "task": "Write a program that asks for a series of numbers and prints the largest once a negative number is entered.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  int? largest;\n  while (true) {\n    stdout.write('Enter a number: ');\n    int number = int.parse(stdin.readLineSync()!);\n    if (number < 0) break;\n    if (largest == null || number > largest) {\n      largest = number;\n    }\n  }\n  if (largest != null) {\n    print('The largest number is: $largest');\n  }\n}\n```"
  },
  {
    "task": "Develop a system that keeps a heater on until the room reaches a desired temperature.",
    "code": "```dart\nvoid main() {\n  double currentTemperature = 18.0; // Current room temperature\n  double desiredTemperature = 22.0; // Desired room temperature\n\n  while (currentTemperature < desiredTemperature) {\n    print('Heater is on. Current temperature: $currentTemperature\u00b0C');\n    currentTemperature += 0.5; // Simulate the heater warming up the room\n  }\n\n  print('Desired temperature reached: $currentTemperature\u00b0C. Heater is off.');\n}\n```"
  },
  {
    "task": "Create a loop that repeatedly checks if a door is open and alerts if it remains open for too long.",
    "code": "```dart\nvoid main() {\n  bool isDoorOpen = true;\n  int alertThreshold = 5; // number of iterations before alert\n  int counter = 0;\n\n  while (isDoorOpen) {\n    // Simulate door status check (in a real scenario, this would be a sensor reading)\n    \n    // Increment the counter each time the loop runs\n    counter++;\n\n    // Alert if door remains open beyond the threshold\n    if (counter > alertThreshold) {\n      print('Alert: The door has been open for too long!');\n      break;\n    }\n\n    // Simulate a condition where the door eventually closes\n    if (counter == alertThreshold + 2) {\n      isDoorOpen = false;\n    }\n  }\n}\n```"
  },
  {
    "task": "Implement a feature that keeps adding random characters to a string until its length is 8.",
    "code": "```dart\nimport 'dart:math';\n\nvoid main() {\n  const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n  final rnd = Random();\n  var result = '';\n\n  while (result.length < 8) {\n    result += chars[rnd.nextInt(chars.length)];\n  }\n\n  print(result);\n}\n```"
  },
  {
    "task": "Design a routine that simulates a race and continues until a participant crosses the finish line.",
    "code": "```dart\nimport 'dart:math';\n\nvoid main() {\n  Random random = Random();\n  int finishLine = 100;\n  int participantPosition = 0;\n\n  while (participantPosition < finishLine) {\n    int move = random.nextInt(10) + 1; // Random move between 1 and 10\n    participantPosition += move;\n    print('Participant moved to position: $participantPosition');\n  }\n\n  print('Participant crossed the finish line!');\n}\n```"
  },
  {
    "task": "Write a script that keeps checking an email inbox until a specific email is received.",
    "code": "```dart\nimport 'dart:async';\n\nbool checkEmailInbox() {\n  // This function should contain the logic to check the inbox\n  // and return true if the specific email is found.\n  // For demonstration, it returns false.\n  return false;\n}\n\nvoid main() {\n  bool emailReceived = false;\n\n  while (!emailReceived) {\n    emailReceived = checkEmailInbox();\n    \n    if (!emailReceived) {\n      // Wait for some time before checking again\n      Future.delayed(Duration(seconds: 5));\n    }\n  }\n\n  print('Specific email received!');\n}\n```"
  },
  {
    "task": "Create a loop that continues to play a video on repeat until the user interrupts.",
    "code": "```dart\nimport 'dart:io';\n\nvoid playVideo() {\n  print('Playing video...');\n  // Simulate video playing with a delay\n  sleep(Duration(seconds: 2));\n}\n\nvoid main() {\n  bool isPlaying = true;\n\n  while (isPlaying) {\n    playVideo();\n    print('Press \"q\" to stop.');\n    String? input = stdin.readLineSync();\n    if (input == 'q') {\n      isPlaying = false;\n    }\n  }\n\n  print('Video stopped.');\n}\n```"
  },
  {
    "task": "Develop a process that keeps scanning for Bluetooth devices until a specific device is found.",
    "code": "```dart\nimport 'dart:async';\n\nvoid main() {\n  scanForDevice('SpecificDeviceName');\n}\n\nvoid scanForDevice(String targetDeviceName) {\n  bool deviceFound = false;\n\n  while (!deviceFound) {\n    List<String> availableDevices = scanBluetoothDevices();\n\n    if (availableDevices.contains(targetDeviceName)) {\n      print('Device $targetDeviceName found!');\n      deviceFound = true;\n    } else {\n      print('Scanning...');\n    }\n  }\n}\n\nList<String> scanBluetoothDevices() {\n  // This is a stub function that simulates scanning for Bluetooth devices.\n  // Replace this with actual Bluetooth scanning code.\n  return ['Device1', 'Device2', 'SpecificDeviceName'];\n}\n```"
  },
  {
    "task": "Implement a script that continuously captures images from a webcam until a motion is detected.",
    "code": "```dart\nimport 'dart:async';\nimport 'dart:io';\n\nbool detectMotion() {\n  // Placeholder function for motion detection logic\n  // Returns true if motion is detected, otherwise false\n  return DateTime.now().second % 10 == 0; // Simulated motion detection\n}\n\nFuture<void> captureImage() async {\n  // Simulate image capture from webcam\n  print('Captured image at ${DateTime.now()}');\n  await Future.delayed(Duration(seconds: 1));\n}\n\nFuture<void> main() async {\n  while (true) {\n    await captureImage();\n    if (detectMotion()) {\n      print('Motion detected!');\n      break;\n    }\n  }\n}\n```"
  },
  {
    "task": "Design a program that keeps playing a sound file until the user presses a mute button.",
    "code": "```dart\nimport 'dart:async';\nimport 'dart:io';\n\nvoid main() {\n  bool isMuted = false;\n\n  void playSound() {\n    print(\"Playing sound...\");\n    // Simulate sound playing with a delay\n    sleep(Duration(seconds: 1));\n  }\n\n  void checkMute() {\n    print(\"Press 'm' to mute the sound.\");\n    String input = stdin.readLineSync() ?? '';\n    if (input.toLowerCase() == 'm') {\n      isMuted = true;\n    }\n  }\n\n  while (!isMuted) {\n    playSound();\n    checkMute();\n  }\n\n  print(\"Sound muted.\");\n}\n```"
  },
  {
    "task": "Create a loop that repeatedly generates a random password until it meets certain security criteria.",
    "code": "```dart\nimport 'dart:math';\n\nString generateRandomPassword(int length) {\n  const String chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#\\$%^&*()';\n  Random rnd = Random();\n  return List.generate(length, (index) => chars[rnd.nextInt(chars.length)]).join();\n}\n\nbool isPasswordSecure(String password) {\n  bool hasUpperCase = password.contains(RegExp(r'[A-Z]'));\n  bool hasLowerCase = password.contains(RegExp(r'[a-z]'));\n  bool hasDigit = password.contains(RegExp(r'\\d'));\n  bool hasSpecialChar = password.contains(RegExp(r'[!@#\\$%^&*()]'));\n  return hasUpperCase && hasLowerCase && hasDigit && hasSpecialChar;\n}\n\nvoid main() {\n  String password;\n  do {\n    password = generateRandomPassword(12);\n  } while (!isPasswordSecure(password));\n  print('Generated secure password: $password');\n}\n```"
  },
  {
    "task": "Write a process that keeps checking for file changes in a directory and logs them until stopped.",
    "code": "```dart\nimport 'dart:async';\nimport 'dart:io';\n\nvoid main() {\n  final directory = Directory('/path/to/directory');\n  final seenFiles = <String>{};\n\n  while (true) {\n    final currentFiles = directory.listSync().map((file) => file.path).toSet();\n    \n    final newFiles = currentFiles.difference(seenFiles);\n    final removedFiles = seenFiles.difference(currentFiles);\n    \n    for (var newFile in newFiles) {\n      print('New file detected: $newFile');\n    }\n    \n    for (var removedFile in removedFiles) {\n      print('File removed: $removedFile');\n    }\n    \n    seenFiles\n      ..clear()\n      ..addAll(currentFiles);\n\n    sleep(Duration(seconds: 1));\n  }\n}\n```"
  }
]