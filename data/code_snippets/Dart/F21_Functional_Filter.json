[
  {
    "task": "Filter out all even numbers from a list of integers.",
    "code": "```dart\nvoid main() {\n  List<int> numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  List<int> oddNumbers = numbers.where((number) => number.isOdd).toList();\n  print(oddNumbers);\n}\n```"
  },
  {
    "task": "Select all words from a list that start with the letter 'a'.",
    "code": "```dart\nvoid main() {\n  List<String> words = ['apple', 'banana', 'avocado', 'berry', 'apricot'];\n  List<String> filteredWords = words.where((word) => word.startsWith('a')).toList();\n  print(filteredWords);\n}\n```"
  },
  {
    "task": "Find all positive numbers in a collection of integers.",
    "code": "```dart\nvoid main() {\n  List<int> numbers = [-10, 3, 7, -2, 5, -8];\n  List<int> positiveNumbers = numbers.where((number) => number > 0).toList();\n  print(positiveNumbers);\n}\n```"
  },
  {
    "task": "Extract all employees who are older than 30 from an employee directory.",
    "code": "```dart\nclass Employee {\n  final String name;\n  final int age;\n\n  Employee(this.name, this.age);\n}\n\nvoid main() {\n  List<Employee> employees = [\n    Employee('Alice', 28),\n    Employee('Bob', 35),\n    Employee('Charlie', 32),\n    Employee('Diana', 29),\n    Employee('Eve', 40),\n  ];\n\n  List<Employee> olderThan30 = employees.where((e) => e.age > 30).toList();\n\n  olderThan30.forEach((e) => print('${e.name}, ${e.age}'));\n}\n```"
  },
  {
    "task": "List all cities with a population greater than one million from a dataset.",
    "code": "```dart\nvoid main() {\n  var cities = [\n    {'name': 'New York', 'population': 8419600},\n    {'name': 'Los Angeles', 'population': 3980400},\n    {'name': 'Chicago', 'population': 2716000},\n    {'name': 'Houston', 'population': 2328000},\n    {'name': 'Phoenix', 'population': 1690000},\n    {'name': 'Philadelphia', 'population': 1584200},\n    {'name': 'San Antonio', 'population': 1547200},\n    {'name': 'San Diego', 'population': 1423800},\n    {'name': 'Dallas', 'population': 1341000},\n    {'name': 'San Jose', 'population': 1035300},\n    {'name': 'Austin', 'population': 995000},\n    {'name': 'Jacksonville', 'population': 911500},\n  ];\n\n  var largeCities = cities\n      .where((city) => city['population'] > 1000000)\n      .map((city) => city['name'])\n      .toList();\n\n  print(largeCities);\n}\n```"
  },
  {
    "task": "Filter out products that are out of stock from a product list.",
    "code": "```dart\nclass Product {\n  String name;\n  bool inStock;\n\n  Product(this.name, this.inStock);\n}\n\nvoid main() {\n  List<Product> products = [\n    Product('Laptop', true),\n    Product('Phone', false),\n    Product('Tablet', true),\n  ];\n\n  List<Product> inStockProducts = products.where((product) => product.inStock).toList();\n\n  for (var product in inStockProducts) {\n    print(product.name);\n  }\n}\n```"
  },
  {
    "task": "Select all students who have passed with a grade above 70 from a list of student scores.",
    "code": "```dart\nvoid main() {\n  List<Map<String, dynamic>> students = [\n    {'name': 'Alice', 'grade': 85},\n    {'name': 'Bob', 'grade': 65},\n    {'name': 'Charlie', 'grade': 95},\n    {'name': 'David', 'grade': 70},\n    {'name': 'Eve', 'grade': 78},\n  ];\n\n  var passedStudents = students.where((student) => student['grade'] > 70);\n\n  for (var student in passedStudents) {\n    print(student['name']);\n  }\n}\n```"
  },
  {
    "task": "Identify all strings in an array that contain the substring 'cat'.",
    "code": "```dart\nvoid main() {\n  List<String> strings = ['catfish', 'dog', 'caterpillar', 'bird', 'concatenate'];\n  List<String> filteredStrings = strings.where((s) => s.contains('cat')).toList();\n  print(filteredStrings);\n}\n```"
  },
  {
    "task": "Extract all transactions above $1000 from a financial record.",
    "code": "```dart\nvoid main() {\n  List<Map<String, dynamic>> transactions = [\n    {'id': 1, 'amount': 1500},\n    {'id': 2, 'amount': 800},\n    {'id': 3, 'amount': 1200},\n    {'id': 4, 'amount': 500},\n    {'id': 5, 'amount': 2000},\n  ];\n\n  List<Map<String, dynamic>> filteredTransactions = transactions\n      .where((transaction) => transaction['amount'] > 1000)\n      .toList();\n\n  print(filteredTransactions);\n}\n```"
  },
  {
    "task": "Filter out all non-prime numbers from a list of numbers.",
    "code": "```dart\nbool isPrime(int number) {\n  if (number <= 1) return false;\n  for (int i = 2; i * i <= number; i++) {\n    if (number % i == 0) return false;\n  }\n  return true;\n}\n\nList<int> filterPrimes(List<int> numbers) {\n  return numbers.where(isPrime).toList();\n}\n\nvoid main() {\n  List<int> numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  List<int> primes = filterPrimes(numbers);\n  print(primes);\n}\n```"
  },
  {
    "task": "Select all books with more than 300 pages from a library catalog.",
    "code": "```dart\nclass Book {\n  final String title;\n  final int pages;\n\n  Book(this.title, this.pages);\n}\n\nvoid main() {\n  var libraryCatalog = [\n    Book('Book One', 250),\n    Book('Book Two', 320),\n    Book('Book Three', 150),\n    Book('Book Four', 450),\n  ];\n\n  var booksWithMoreThan300Pages = libraryCatalog.where((book) => book.pages > 300);\n\n  booksWithMoreThan300Pages.forEach((book) => print(book.title));\n}\n```"
  },
  {
    "task": "Identify all users who have logged in within the past week from a user database.",
    "code": "```dart\nclass User {\n  String name;\n  DateTime lastLogin;\n\n  User(this.name, this.lastLogin);\n}\n\nList<User> filterRecentLogins(List<User> users) {\n  DateTime oneWeekAgo = DateTime.now().subtract(Duration(days: 7));\n  return users.where((user) => user.lastLogin.isAfter(oneWeekAgo)).toList();\n}\n\nvoid main() {\n  List<User> users = [\n    User('Alice', DateTime.now().subtract(Duration(days: 1))),\n    User('Bob', DateTime.now().subtract(Duration(days: 8))),\n    User('Charlie', DateTime.now().subtract(Duration(days: 5))),\n  ];\n\n  List<User> recentLogins = filterRecentLogins(users);\n  for (var user in recentLogins) {\n    print(user.name);\n  }\n}\n```"
  },
  {
    "task": "Extract all URLs that contain 'https' from a list of web addresses.",
    "code": "```dart\nvoid main() {\n  List<String> webAddresses = [\n    'http://example.com',\n    'https://secure.com',\n    'ftp://filetransfer.com',\n    'https://example.org'\n  ];\n\n  List<String> httpsURLs = webAddresses.where((url) => url.contains('https')).toList();\n\n  print(httpsURLs);\n}\n```"
  },
  {
    "task": "Find all movies released after the year 2000 from a movie database.",
    "code": "```dart\nclass Movie {\n  final String title;\n  final int releaseYear;\n\n  Movie(this.title, this.releaseYear);\n}\n\nvoid main() {\n  List<Movie> movieDatabase = [\n    Movie('The Matrix', 1999),\n    Movie('Inception', 2010),\n    Movie('Gladiator', 2000),\n    Movie('The Dark Knight', 2008),\n  ];\n\n  List<Movie> moviesAfter2000 =\n      movieDatabase.where((movie) => movie.releaseYear > 2000).toList();\n\n  for (var movie in moviesAfter2000) {\n    print(movie.title);\n  }\n}\n```"
  },
  {
    "task": "Select all tasks with a priority level of 'high' from a task management system.",
    "code": "```dart\nclass Task {\n  final String name;\n  final String priority;\n\n  Task(this.name, this.priority);\n}\n\nvoid main() {\n  List<Task> tasks = [\n    Task('Task 1', 'low'),\n    Task('Task 2', 'medium'),\n    Task('Task 3', 'high'),\n    Task('Task 4', 'high'),\n  ];\n\n  List<Task> highPriorityTasks = tasks.where((task) => task.priority == 'high').toList();\n\n  highPriorityTasks.forEach((task) => print(task.name));\n}\n```"
  },
  {
    "task": "Filter out all words longer than five characters from a text document.",
    "code": "```dart\nvoid main() {\n  String text = \"Example words in a text document for filtering.\";\n  List<String> words = text.split(' ');\n  List<String> filteredWords = words.where((word) => word.length <= 5).toList();\n  print(filteredWords);\n}\n```"
  },
  {
    "task": "Extract all odd numbers from a sequence of integers.",
    "code": "```dart\nvoid main() {\n  List<int> numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  List<int> oddNumbers = numbers.where((number) => number.isOdd).toList();\n  print(oddNumbers);\n}\n```"
  },
  {
    "task": "Select all files larger than 10MB from a list of files.",
    "code": "```dart\nclass File {\n  final String name;\n  final int sizeInBytes;\n\n  File(this.name, this.sizeInBytes);\n}\n\nvoid main() {\n  List<File> files = [\n    File('file1.txt', 5000000),\n    File('file2.txt', 15000000),\n    File('file3.txt', 8000000),\n    File('file4.txt', 20000000),\n  ];\n\n  List<File> largeFiles = files.where((file) => file.sizeInBytes > 10 * 1024 * 1024).toList();\n\n  for (var file in largeFiles) {\n    print(file.name);\n  }\n}\n```"
  },
  {
    "task": "Identify all events occurring on weekends from an event schedule.",
    "code": "```dart\nvoid main() {\n  List<Map<String, dynamic>> events = [\n    {'name': 'Conference', 'date': DateTime(2023, 10, 7)}, // Saturday\n    {'name': 'Board Meeting', 'date': DateTime(2023, 10, 9)}, // Monday\n    {'name': 'Workshop', 'date': DateTime(2023, 10, 8)}, // Sunday\n    {'name': 'Team Lunch', 'date': DateTime(2023, 10, 10)}, // Tuesday\n  ];\n\n  List<Map<String, dynamic>> weekendEvents = events.where((event) {\n    DateTime date = event['date'];\n    return date.weekday == DateTime.saturday || date.weekday == DateTime.sunday;\n  }).toList();\n\n  print(weekendEvents);\n}\n```"
  },
  {
    "task": "Find all emails from a specific domain in an email list.",
    "code": "```dart\nList<String> filterEmailsByDomain(List<String> emails, String domain) {\n  return emails.where((email) => email.endsWith('@$domain')).toList();\n}\n\nvoid main() {\n  List<String> emails = [\n    'user1@example.com',\n    'user2@test.com',\n    'user3@example.com',\n    'user4@sample.com'\n  ];\n  String domain = 'example.com';\n  List<String> filteredEmails = filterEmailsByDomain(emails, domain);\n  print(filteredEmails);\n}\n```"
  },
  {
    "task": "Filter out all people not living in a specific city from a contact list.",
    "code": "```dart\nclass Contact {\n  String name;\n  String city;\n\n  Contact(this.name, this.city);\n}\n\nList<Contact> filterContactsByCity(List<Contact> contacts, String city) {\n  return contacts.where((contact) => contact.city == city).toList();\n}\n\nvoid main() {\n  List<Contact> contacts = [\n    Contact('Alice', 'New York'),\n    Contact('Bob', 'Los Angeles'),\n    Contact('Charlie', 'New York')\n  ];\n\n  List<Contact> filteredContacts = filterContactsByCity(contacts, 'New York');\n\n  filteredContacts.forEach((contact) => print(contact.name));\n}\n```"
  },
  {
    "task": "Select all rectangles with an area greater than 50 from a list of rectangles.",
    "code": "```dart\nclass Rectangle {\n  final double width;\n  final double height;\n  \n  Rectangle(this.width, this.height);\n  \n  double get area => width * height;\n}\n\nvoid main() {\n  List<Rectangle> rectangles = [\n    Rectangle(5, 10),\n    Rectangle(10, 6),\n    Rectangle(4, 12),\n    Rectangle(3, 3),\n    Rectangle(8, 7),\n  ];\n  \n  List<Rectangle> largeRectangles = rectangles.where((r) => r.area > 50).toList();\n  print(largeRectangles);\n}\n```"
  },
  {
    "task": "Extract all elements that are not null from a collection.",
    "code": "```dart\nvoid main() {\n  List<String?> items = ['apple', null, 'banana', null, 'cherry'];\n  List<String> nonNullItems = items.whereType<String>().toList();\n  print(nonNullItems);\n}\n```"
  },
  {
    "task": "Identify all registered voters over the age of 18 from a voter registration list.",
    "code": "```dart\nclass Voter {\n  String name;\n  int age;\n\n  Voter(this.name, this.age);\n}\n\nvoid main() {\n  List<Voter> voterList = [\n    Voter('Alice', 20),\n    Voter('Bob', 17),\n    Voter('Charlie', 25),\n    Voter('David', 16),\n    Voter('Eva', 30)\n  ];\n\n  List<Voter> registeredVoters = voterList.where((voter) => voter.age > 18).toList();\n\n  registeredVoters.forEach((voter) => print(voter.name));\n}\n```"
  },
  {
    "task": "Select all cars manufactured after 2015 from a vehicle registry.",
    "code": "```dart\nclass Car {\n  final String model;\n  final int year;\n\n  Car(this.model, this.year);\n}\n\nvoid main() {\n  List<Car> vehicleRegistry = [\n    Car('Toyota Camry', 2014),\n    Car('Honda Accord', 2018),\n    Car('Tesla Model S', 2020),\n    Car('Ford Focus', 2015),\n  ];\n\n  List<Car> filteredCars = vehicleRegistry.where((car) => car.year > 2015).toList();\n\n  for (var car in filteredCars) {\n    print('${car.model}, ${car.year}');\n  }\n}\n```"
  },
  {
    "task": "Filter out all negative numbers from a dataset of integers.",
    "code": "```dart\nvoid main() {\n  List<int> dataset = [3, -1, 4, -2, 5, -3];\n  List<int> positiveNumbers = dataset.where((number) => number >= 0).toList();\n  print(positiveNumbers);\n}\n```"
  },
  {
    "task": "Extract all characters from a string that are uppercase.",
    "code": "```dart\nString extractUppercase(String input) {\n  return input.split('').where((char) => char.toUpperCase() == char && char.toLowerCase() != char).join();\n}\n\nvoid main() {\n  String result = extractUppercase(\"Hello World\");\n  print(result); // Outputs: HW\n}\n```"
  },
  {
    "task": "Identify all projects with a deadline within the next month from a project database.",
    "code": "```dart\nimport 'package:intl/intl.dart';\n\nclass Project {\n  String name;\n  DateTime deadline;\n\n  Project(this.name, this.deadline);\n}\n\nList<Project> filterProjectsDueNextMonth(List<Project> projects) {\n  final now = DateTime.now();\n  final nextMonth = DateTime(now.year, now.month + 1, now.day);\n\n  return projects.where((project) {\n    return project.deadline.isAfter(now) && project.deadline.isBefore(nextMonth);\n  }).toList();\n}\n\nvoid main() {\n  List<Project> projects = [\n    Project('Project 1', DateTime(2023, 11, 15)),\n    Project('Project 2', DateTime(2023, 12, 5)),\n    Project('Project 3', DateTime(2023, 10, 25)),\n  ];\n\n  List<Project> dueNextMonth = filterProjectsDueNextMonth(projects);\n  dueNextMonth.forEach((project) => print(project.name));\n}\n```"
  },
  {
    "task": "Select all athletes with a score higher than 90 from a competition result list.",
    "code": "```dart\nclass Athlete {\n  String name;\n  int score;\n\n  Athlete(this.name, this.score);\n}\n\nvoid main() {\n  List<Athlete> results = [\n    Athlete('Alice', 95),\n    Athlete('Bob', 85),\n    Athlete('Charlie', 92),\n    Athlete('Diana', 88),\n  ];\n\n  List<Athlete> highScorers = results.where((athlete) => athlete.score > 90).toList();\n  \n  for (var athlete in highScorers) {\n    print('${athlete.name}: ${athlete.score}');\n  }\n}\n```"
  },
  {
    "task": "Filter out all strings that do not contain vowels from a list of words.",
    "code": "```dart\nvoid main() {\n  List<String> words = ['sky', 'apple', 'fly', 'orange', 'rhythm'];\n  List<String> filteredWords = words.where((word) => word.contains(RegExp(r'[aeiouAEIOU]'))).toList();\n  print(filteredWords);\n}\n```"
  },
  {
    "task": "Extract all dates that fall on a weekday from a calendar.",
    "code": "```dart\nimport 'package:intl/intl.dart';\n\nList<DateTime> filterWeekdays(List<DateTime> dates) {\n  return dates.where((date) {\n    int dayOfWeek = date.weekday;\n    return dayOfWeek >= DateTime.monday && dayOfWeek <= DateTime.friday;\n  }).toList();\n}\n\nvoid main() {\n  List<DateTime> calendar = [\n    DateTime(2023, 10, 2), // Monday\n    DateTime(2023, 10, 3), // Tuesday\n    DateTime(2023, 10, 4), // Wednesday\n    DateTime(2023, 10, 5), // Thursday\n    DateTime(2023, 10, 6), // Friday\n    DateTime(2023, 10, 7), // Saturday\n    DateTime(2023, 10, 8), // Sunday\n  ];\n\n  List<DateTime> weekdays = filterWeekdays(calendar);\n  weekdays.forEach((date) => print(DateFormat('yyyy-MM-dd').format(date)));\n}\n```"
  },
  {
    "task": "Find all software versions that are stable releases from a list of software versions.",
    "code": "```dart\nvoid main() {\n  List<String> softwareVersions = [\n    '1.0.0-alpha',\n    '1.0.0',\n    '2.0.0-beta',\n    '2.0.0',\n    '3.0.0-rc',\n    '3.0.0'\n  ];\n\n  List<String> stableReleases = softwareVersions.where((version) {\n    return !version.contains('-');\n  }).toList();\n\n  print(stableReleases); // Output: [1.0.0, 2.0.0, 3.0.0]\n}\n```"
  },
  {
    "task": "Select all temperatures above freezing from a weather report.",
    "code": "```dart\nvoid main() {\n  List<int> temperatures = [32, 27, 40, 15, 50, 28];\n  List<int> aboveFreezing = temperatures.where((temp) => temp > 32).toList();\n  print(aboveFreezing);\n}\n```"
  },
  {
    "task": "Identify all countries with a GDP per capita above $40,000 from a country dataset.",
    "code": "```dart\nvoid main() {\n  List<Map<String, dynamic>> countries = [\n    {'name': 'CountryA', 'gdpPerCapita': 45000},\n    {'name': 'CountryB', 'gdpPerCapita': 35000},\n    {'name': 'CountryC', 'gdpPerCapita': 50000},\n    {'name': 'CountryD', 'gdpPerCapita': 30000},\n  ];\n\n  var highGdpCountries = countries\n      .where((country) => country['gdpPerCapita'] > 40000)\n      .map((country) => country['name'])\n      .toList();\n\n  print(highGdpCountries);\n}\n```"
  },
  {
    "task": "Filter out all names shorter than four letters from a roster.",
    "code": "```dart\nvoid main() {\n  List<String> roster = ['Ana', 'John', 'Mike', 'Zoe', 'Eli'];\n  List<String> filteredRoster = roster.where((name) => name.length >= 4).toList();\n  print(filteredRoster);\n}\n```"
  },
  {
    "task": "Extract all numbers divisible by five from a sequence.",
    "code": "```dart\nvoid main() {\n  List<int> numbers = [1, 5, 10, 12, 15, 20, 23];\n  List<int> divisibleByFive = numbers.where((number) => number % 5 == 0).toList();\n  print(divisibleByFive);\n}\n```"
  },
  {
    "task": "Select all movies with a rating above 4 stars from a film review site.",
    "code": "```dart\nclass Movie {\n  final String title;\n  final double rating;\n\n  Movie(this.title, this.rating);\n}\n\nvoid main() {\n  List<Movie> movies = [\n    Movie('Movie A', 3.5),\n    Movie('Movie B', 4.5),\n    Movie('Movie C', 4.7),\n    Movie('Movie D', 2.9),\n    Movie('Movie E', 4.0)\n  ];\n\n  List<Movie> highRatedMovies = movies.where((movie) => movie.rating > 4.0).toList();\n\n  highRatedMovies.forEach((movie) => print(movie.title));\n}\n```"
  },
  {
    "task": "Find all jobs with a salary above $50,000 from a job listing.",
    "code": "```dart\nclass Job {\n  String title;\n  int salary;\n\n  Job(this.title, this.salary);\n}\n\nvoid main() {\n  List<Job> jobs = [\n    Job('Developer', 70000),\n    Job('Designer', 40000),\n    Job('Manager', 60000),\n  ];\n\n  var highSalaryJobs = jobs.where((job) => job.salary > 50000).toList();\n  \n  for (var job in highSalaryJobs) {\n    print('${job.title}: ${job.salary}');\n  }\n}\n```"
  },
  {
    "task": "Filter out all entries without an email address from a contact form submission list.",
    "code": "```dart\nvoid main() {\n  List<Map<String, String>> contacts = [\n    {'name': 'Alice', 'email': 'alice@example.com'},\n    {'name': 'Bob', 'email': ''},\n    {'name': 'Charlie', 'email': 'charlie@example.com'},\n    {'name': 'David'},\n  ];\n\n  var filteredContacts = contacts.where((contact) => contact.containsKey('email') && contact['email']!.isNotEmpty).toList();\n\n  print(filteredContacts);\n}\n```"
  },
  {
    "task": "Identify all animals weighing more than 50kg from a zoo inventory.",
    "code": "```dart\nclass Animal {\n  String name;\n  double weight;\n\n  Animal(this.name, this.weight);\n}\n\nvoid main() {\n  List<Animal> zooInventory = [\n    Animal('Elephant', 5000.0),\n    Animal('Tiger', 300.0),\n    Animal('Monkey', 30.0),\n    Animal('Giraffe', 800.0),\n    Animal('Kangaroo', 55.0),\n  ];\n\n  List<Animal> heavyAnimals = zooInventory.where((animal) => animal.weight > 50).toList();\n\n  for (var animal in heavyAnimals) {\n    print(animal.name);\n  }\n}\n```"
  },
  {
    "task": "Select all songs with a duration longer than three minutes from a playlist.",
    "code": "```dart\nclass Song {\n  final String title;\n  final int duration; // Duration in seconds\n\n  Song(this.title, this.duration);\n}\n\nvoid main() {\n  List<Song> playlist = [\n    Song('Song One', 200),\n    Song('Song Two', 180),\n    Song('Song Three', 250),\n    Song('Song Four', 240),\n  ];\n\n  List<Song> filteredSongs = playlist.where((song) => song.duration > 180).toList();\n\n  for (var song in filteredSongs) {\n    print(song.title);\n  }\n}\n```"
  },
  {
    "task": "Extract all accounts with a balance below zero from a bank statement.",
    "code": "```dart\nclass Account {\n  String id;\n  double balance;\n\n  Account(this.id, this.balance);\n}\n\nList<Account> filterNegativeBalances(List<Account> accounts) {\n  return accounts.where((account) => account.balance < 0).toList();\n}\n\nvoid main() {\n  List<Account> bankStatement = [\n    Account('001', 150.0),\n    Account('002', -50.0),\n    Account('003', -200.0),\n    Account('004', 300.0),\n  ];\n\n  List<Account> negativeBalances = filterNegativeBalances(bankStatement);\n\n  for (var account in negativeBalances) {\n    print('Account ID: ${account.id}, Balance: ${account.balance}');\n  }\n}\n```"
  },
  {
    "task": "Filter out all non-alphabetic characters from a string of text.",
    "code": "```dart\nString filterAlphabetic(String input) {\n  return input.replaceAll(RegExp(r'[^a-zA-Z]'), '');\n}\n\nvoid main() {\n  String text = \"Hello, World! 123\";\n  String filteredText = filterAlphabetic(text);\n  print(filteredText); // Output: HelloWorld\n}\n```"
  },
  {
    "task": "Select all participants who scored above average in a competition.",
    "code": "```dart\nvoid main() {\n  final participants = [\n    {'name': 'Alice', 'score': 85},\n    {'name': 'Bob', 'score': 67},\n    {'name': 'Charlie', 'score': 95},\n    {'name': 'Diana', 'score': 78},\n    {'name': 'Eve', 'score': 88},\n  ];\n  \n  final averageScore = participants\n      .map((p) => p['score'] as int)\n      .reduce((a, b) => a + b) / participants.length;\n  \n  final aboveAverage = participants\n      .where((p) => p['score'] as int > averageScore)\n      .toList();\n  \n  print(aboveAverage);\n}\n```"
  },
  {
    "task": "Find all houses priced under $300,000 from a real estate database.",
    "code": "```dart\nclass House {\n  final String address;\n  final double price;\n\n  House(this.address, this.price);\n}\n\nvoid main() {\n  List<House> houses = [\n    House('123 Elm St', 250000),\n    House('456 Oak Ave', 320000),\n    House('789 Maple Rd', 275000),\n    House('101 Pine Dr', 290000),\n  ];\n\n  List<House> affordableHouses = houses.where((house) => house.price < 300000).toList();\n\n  affordableHouses.forEach((house) => print(house.address));\n}\n```"
  },
  {
    "task": "Identify all plants that bloom in spring from a botanical catalog.",
    "code": "```dart\nclass Plant {\n  final String name;\n  final List<String> bloomingSeasons;\n\n  Plant(this.name, this.bloomingSeasons);\n}\n\nvoid main() {\n  List<Plant> catalog = [\n    Plant('Rose', ['spring', 'summer']),\n    Plant('Tulip', ['spring']),\n    Plant('Sunflower', ['summer']),\n    Plant('Daffodil', ['spring', 'winter']),\n  ];\n\n  List<Plant> springBloomingPlants = catalog\n      .where((plant) => plant.bloomingSeasons.contains('spring'))\n      .toList();\n\n  springBloomingPlants.forEach((plant) => print(plant.name));\n}\n```"
  },
  {
    "task": "Extract all passwords that are longer than eight characters from a user database.",
    "code": "```dart\nvoid main() {\n  List<Map<String, String>> userDatabase = [\n    {'username': 'user1', 'password': 'short'},\n    {'username': 'user2', 'password': 'verylongpassword'},\n    {'username': 'user3', 'password': 'lengthy123'},\n    {'username': 'user4', 'password': 'tiny'},\n    {'username': 'user5', 'password': 'sufficientlylong'},\n  ];\n\n  List<String> longPasswords = userDatabase\n      .map((user) => user['password']!)\n      .where((password) => password.length > 8)\n      .toList();\n\n  print(longPasswords);\n}\n```"
  },
  {
    "task": "Filter out all projects that are not yet started from a project management tool.",
    "code": "```dart\nclass Project {\n  final String name;\n  final bool isStarted;\n\n  Project(this.name, this.isStarted);\n}\n\nvoid main() {\n  List<Project> projects = [\n    Project('Project Alpha', true),\n    Project('Project Beta', false),\n    Project('Project Gamma', true),\n    Project('Project Delta', false),\n  ];\n\n  List<Project> startedProjects = projects.where((project) => project.isStarted).toList();\n\n  print(startedProjects.map((project) => project.name).toList());\n}\n```"
  },
  {
    "task": "Select all days with temperatures exceeding 25\u00b0C from a climate report.",
    "code": "```dart\nvoid main() {\n  List<Map<String, dynamic>> climateReport = [\n    {'day': 'Monday', 'temperature': 22},\n    {'day': 'Tuesday', 'temperature': 27},\n    {'day': 'Wednesday', 'temperature': 30},\n    {'day': 'Thursday', 'temperature': 24},\n    {'day': 'Friday', 'temperature': 26}\n  ];\n\n  List<Map<String, dynamic>> hotDays = climateReport\n      .where((report) => report['temperature'] > 25)\n      .toList();\n\n  print(hotDays);\n}\n```"
  },
  {
    "task": "Find all recipes that are vegetarian from a cookbook.",
    "code": "```dart\nclass Recipe {\n  final String name;\n  final bool isVegetarian;\n  \n  Recipe(this.name, this.isVegetarian);\n}\n\nvoid main() {\n  List<Recipe> cookbook = [\n    Recipe('Spaghetti Bolognese', false),\n    Recipe('Vegetable Stir Fry', true),\n    Recipe('Chicken Curry', false),\n    Recipe('Caprese Salad', true)\n  ];\n\n  List<Recipe> vegetarianRecipes = cookbook.where((recipe) => recipe.isVegetarian).toList();\n\n  vegetarianRecipes.forEach((recipe) => print(recipe.name));\n}\n```"
  },
  {
    "task": "Identify all articles that mention a specific keyword from a news feed.",
    "code": "```dart\nclass Article {\n  String title;\n  String content;\n\n  Article(this.title, this.content);\n}\n\nList<Article> filterArticlesByKeyword(List<Article> articles, String keyword) {\n  return articles\n      .where((article) => article.content.contains(keyword))\n      .toList();\n}\n\nvoid main() {\n  var articles = [\n    Article('Tech News', 'Latest update on technology and gadgets.'),\n    Article('Sports Highlights', 'Football season highlights and scores.'),\n    Article('Health Tips', 'Tips for a healthy lifestyle and diet.'),\n    Article('Business Trends', 'New trends in the business world.'),\n  ];\n\n  String keyword = 'technology';\n  List<Article> filteredArticles = filterArticlesByKeyword(articles, keyword);\n\n  filteredArticles.forEach((article) => print(article.title));\n}\n```"
  },
  {
    "task": "Extract all files with the '.jpg' extension from a directory.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  final directory = Directory('path/to/directory');\n  final jpgFiles = directory\n      .listSync()\n      .where((entity) => entity is File && entity.path.endsWith('.jpg'))\n      .toList();\n\n  for (var file in jpgFiles) {\n    print(file.path);\n  }\n}\n```"
  },
  {
    "task": "Filter out all transactions that are not categorized from a financial statement.",
    "code": "```dart\nclass Transaction {\n  final String? category;\n  // Other fields\n\n  Transaction(this.category);\n}\n\nList<Transaction> filterUncategorizedTransactions(List<Transaction> transactions) {\n  return transactions.where((transaction) => transaction.category != null).toList();\n}\n```"
  },
  {
    "task": "Select all paintings created before 1900 from an art gallery collection.",
    "code": "```dart\nclass Painting {\n  final String title;\n  final int year;\n\n  Painting(this.title, this.year);\n}\n\nvoid main() {\n  List<Painting> gallery = [\n    Painting('Starry Night', 1889),\n    Painting('The Persistence of Memory', 1931),\n    Painting('Mona Lisa', 1503),\n    Painting('The Scream', 1893),\n  ];\n\n  List<Painting> paintingsBefore1900 = gallery.where((painting) => painting.year < 1900).toList();\n\n  for (var painting in paintingsBefore1900) {\n    print('${painting.title}, ${painting.year}');\n  }\n}\n```"
  },
  {
    "task": "Find all students with perfect attendance from a school record.",
    "code": "```dart\nclass Student {\n  final String name;\n  final int attendance;\n\n  Student(this.name, this.attendance);\n}\n\nvoid main() {\n  List<Student> students = [\n    Student('Alice', 100),\n    Student('Bob', 98),\n    Student('Charlie', 100),\n    Student('David', 95),\n  ];\n\n  List<Student> perfectAttendanceStudents =\n      students.where((student) => student.attendance == 100).toList();\n\n  perfectAttendanceStudents.forEach((student) => print(student.name));\n}\n```"
  },
  {
    "task": "Identify all messages sent by a specific user from a chat application.",
    "code": "```dart\nclass Message {\n  final String sender;\n  final String content;\n\n  Message(this.sender, this.content);\n}\n\nList<Message> filterMessagesByUser(List<Message> messages, String user) {\n  return messages.where((message) => message.sender == user).toList();\n}\n\nvoid main() {\n  List<Message> chatMessages = [\n    Message('Alice', 'Hello!'),\n    Message('Bob', 'Hi!'),\n    Message('Alice', 'How are you?'),\n    Message('Charlie', 'Good morning!'),\n  ];\n\n  String userToFilter = 'Alice';\n  List<Message> filteredMessages = filterMessagesByUser(chatMessages, userToFilter);\n\n  filteredMessages.forEach((message) => print('Sender: ${message.sender}, Content: ${message.content}'));\n}\n```"
  },
  {
    "task": "Extract all elements greater than 100 from an array of numbers.",
    "code": "```dart\nvoid main() {\n  List<int> numbers = [50, 150, 200, 75, 300, 20];\n  List<int> filteredNumbers = numbers.where((number) => number > 100).toList();\n  print(filteredNumbers);\n}\n```"
  },
  {
    "task": "Filter out all words that do not end in 'ed' from a paragraph.",
    "code": "```dart\nvoid main() {\n  String paragraph = \"The excited child played and enjoyed the park. She liked the red slide and the swing.\";\n  List<String> words = paragraph.split(' ');\n  List<String> filteredWords = words.where((word) => word.endsWith('ed')).toList();\n  \n  print(filteredWords);\n}\n```"
  },
  {
    "task": "Select all flights departing before noon from a flight schedule.",
    "code": "```dart\nclass Flight {\n  String flightNumber;\n  DateTime departureTime;\n\n  Flight(this.flightNumber, this.departureTime);\n}\n\nvoid main() {\n  List<Flight> flights = [\n    Flight('AA123', DateTime(2023, 10, 1, 9, 30)),\n    Flight('BA456', DateTime(2023, 10, 1, 14, 45)),\n    Flight('CA789', DateTime(2023, 10, 1, 11, 15)),\n    Flight('DA012', DateTime(2023, 10, 1, 13, 10)),\n    Flight('EA345', DateTime(2023, 10, 1, 10, 0)),\n  ];\n\n  List<Flight> morningFlights = flights\n      .where((flight) => flight.departureTime.hour < 12)\n      .toList();\n\n  for (var flight in morningFlights) {\n    print('Flight ${flight.flightNumber} departs at ${flight.departureTime}');\n  }\n}\n```"
  },
  {
    "task": "Find all products priced above $20 from an online store inventory.",
    "code": "```dart\nvoid main() {\n  List<Map<String, dynamic>> inventory = [\n    {'name': 'Product 1', 'price': 15.0},\n    {'name': 'Product 2', 'price': 25.0},\n    {'name': 'Product 3', 'price': 30.0},\n    {'name': 'Product 4', 'price': 10.0},\n    {'name': 'Product 5', 'price': 50.0},\n  ];\n\n  List<Map<String, dynamic>> productsAbove20 = inventory\n      .where((product) => product['price'] > 20.0)\n      .toList();\n\n  print(productsAbove20);\n}\n```"
  },
  {
    "task": "Identify all sessions longer than one hour from a webinar series.",
    "code": "```dart\nclass Session {\n  final String title;\n  final Duration duration;\n\n  Session(this.title, this.duration);\n}\n\nvoid main() {\n  List<Session> sessions = [\n    Session('Intro to Dart', Duration(minutes: 30)),\n    Session('Advanced Flutter', Duration(hours: 1, minutes: 15)),\n    Session('State Management', Duration(hours: 2)),\n    Session('Networking in Dart', Duration(minutes: 45)),\n  ];\n\n  List<Session> longSessions = sessions.where((session) => session.duration > Duration(hours: 1)).toList();\n\n  for (var session in longSessions) {\n    print(session.title);\n  }\n}\n```"
  },
  {
    "task": "Extract all images with a resolution higher than 1080p from a photo library.",
    "code": "```dart\nclass Image {\n  final int width;\n  final int height;\n  final String url;\n\n  Image(this.width, this.height, this.url);\n}\n\nvoid main() {\n  List<Image> photoLibrary = [\n    Image(1920, 1080, 'url1.jpg'),\n    Image(2560, 1440, 'url2.jpg'),\n    Image(1024, 768, 'url3.jpg'),\n    Image(3840, 2160, 'url4.jpg'),\n  ];\n\n  List<Image> highResolutionImages = photoLibrary.where((image) {\n    return image.width > 1920 || image.height > 1080;\n  }).toList();\n\n  highResolutionImages.forEach((image) => print(image.url));\n}\n```"
  },
  {
    "task": "Filter out all responses that are not 'yes' or 'no' from a survey result.",
    "code": "```dart\nvoid main() {\n  List<String> surveyResponses = ['yes', 'no', 'maybe', 'yes', 'no', 'unknown'];\n  List<String> filteredResponses = surveyResponses.where((response) => response == 'yes' || response == 'no').toList();\n  print(filteredResponses);\n}\n```"
  },
  {
    "task": "Select all tweets with more than 100 likes from a Twitter feed.",
    "code": "```dart\nclass Tweet {\n  final String content;\n  final int likes;\n\n  Tweet(this.content, this.likes);\n}\n\nvoid main() {\n  List<Tweet> twitterFeed = [\n    Tweet(\"Hello World!\", 150),\n    Tweet(\"Dart is great!\", 95),\n    Tweet(\"Follow me for more updates\", 200),\n    Tweet(\"Just another tweet\", 60),\n  ];\n\n  List<Tweet> popularTweets = twitterFeed.where((tweet) => tweet.likes > 100).toList();\n\n  for (var tweet in popularTweets) {\n    print(tweet.content);\n  }\n}\n```"
  },
  {
    "task": "Find all links that are broken from a webpage.",
    "code": "```dart\nimport 'dart:async';\nimport 'dart:convert';\nimport 'dart:io';\n\nFuture<List<Uri>> findBrokenLinks(Uri webpage) async {\n  final client = HttpClient();\n  final request = await client.getUrl(webpage);\n  final response = await request.close();\n  final body = await response.transform(utf8.decoder).join();\n  final linkRegExp = RegExp(r'href=\"(http[s]?://[^\"]+)\"');\n  final links = linkRegExp.allMatches(body).map((match) => Uri.parse(match.group(1)!)).toList();\n\n  final brokenLinks = <Uri>[];\n\n  await Future.wait(links.map((link) async {\n    try {\n      final request = await client.getUrl(link);\n      final response = await request.close();\n      if (response.statusCode != 200) {\n        brokenLinks.add(link);\n      }\n    } catch (_) {\n      brokenLinks.add(link);\n    }\n  }));\n\n  client.close();\n  return brokenLinks;\n}\n\nvoid main() async {\n  final brokenLinks = await findBrokenLinks(Uri.parse('https://example.com'));\n  brokenLinks.forEach(print);\n}\n```"
  },
  {
    "task": "Identify all machines that are currently offline from a network monitoring tool.",
    "code": "```dart\nclass Machine {\n  final String name;\n  final bool isOnline;\n\n  Machine(this.name, this.isOnline);\n}\n\nvoid main() {\n  List<Machine> machines = [\n    Machine('Machine1', true),\n    Machine('Machine2', false),\n    Machine('Machine3', true),\n    Machine('Machine4', false),\n  ];\n\n  List<Machine> offlineMachines = machines.where((machine) => !machine.isOnline).toList();\n\n  offlineMachines.forEach((machine) => print(machine.name));\n}\n```"
  },
  {
    "task": "Extract all invoices with a due date in the current month from an accounting system.",
    "code": "```dart\nimport 'package:intl/intl.dart';\n\nclass Invoice {\n  DateTime dueDate;\n  Invoice(this.dueDate);\n}\n\nList<Invoice> filterInvoices(List<Invoice> invoices) {\n  final now = DateTime.now();\n  final currentMonth = now.month;\n  final currentYear = now.year;\n\n  return invoices.where((invoice) {\n    final dueDate = invoice.dueDate;\n    return dueDate.month == currentMonth && dueDate.year == currentYear;\n  }).toList();\n}\n```"
  },
  {
    "task": "Filter out all lines in a file that start with a '#' from a configuration file.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() async {\n  final file = File('config.txt');\n  final lines = await file.readAsLines();\n  final filteredLines = lines.where((line) => !line.trim().startsWith('#'));\n  filteredLines.forEach(print);\n}\n```"
  },
  {
    "task": "Select all posts with a comment count higher than 50 from a blog.",
    "code": "```dart\nclass Post {\n  final String title;\n  final int commentCount;\n\n  Post(this.title, this.commentCount);\n}\n\nvoid main() {\n  List<Post> posts = [\n    Post('First Post', 45),\n    Post('Second Post', 75),\n    Post('Third Post', 30),\n    Post('Fourth Post', 100),\n  ];\n\n  List<Post> filteredPosts = posts.where((post) => post.commentCount > 50).toList();\n\n  filteredPosts.forEach((post) => print(post.title));\n}\n```"
  },
  {
    "task": "Find all offers that expire within the next week from a promotional database.",
    "code": "```dart\nimport 'dart:core';\n\nclass Offer {\n  final DateTime expiryDate;\n  Offer(this.expiryDate);\n}\n\nList<Offer> filterOffersExpiringNextWeek(List<Offer> offers) {\n  final now = DateTime.now();\n  final nextWeek = now.add(Duration(days: 7));\n  return offers.where((offer) => offer.expiryDate.isAfter(now) && offer.expiryDate.isBefore(nextWeek)).toList();\n}\n\nvoid main() {\n  List<Offer> offers = [\n    Offer(DateTime.now().add(Duration(days: 3))),\n    Offer(DateTime.now().add(Duration(days: 8))),\n    Offer(DateTime.now().add(Duration(days: 5))),\n  ];\n  List<Offer> filteredOffers = filterOffersExpiringNextWeek(offers);\n  print(filteredOffers.length); // Example output use\n}\n```"
  },
  {
    "task": "Identify all items that are on sale from a shopping catalog.",
    "code": "```dart\nclass Item {\n  String name;\n  bool onSale;\n\n  Item(this.name, this.onSale);\n}\n\nvoid main() {\n  List<Item> catalog = [\n    Item('Shirt', false),\n    Item('Pants', true),\n    Item('Hat', false),\n    Item('Shoes', true)\n  ];\n\n  List<Item> onSaleItems = catalog.where((item) => item.onSale).toList();\n\n  onSaleItems.forEach((item) => print(item.name));\n}\n```"
  },
  {
    "task": "Extract all notes that mention 'urgent' from a meeting record.",
    "code": "```dart\nvoid main() {\n  List<String> meetingNotes = [\n    \"Discuss project timeline\",\n    \"urgent: finalize budget\",\n    \"Team lunch scheduled\",\n    \"urgent: client feedback needed\",\n    \"Prepare presentation slides\"\n  ];\n\n  List<String> urgentNotes = meetingNotes.where((note) => note.contains('urgent')).toList();\n\n  print(urgentNotes);\n}\n```"
  },
  {
    "task": "Filter out all numbers that do not have a remainder when divided by two from a list.",
    "code": "```dart\nvoid main() {\n  List<int> numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  List<int> filteredNumbers = numbers.where((number) => number % 2 != 0).toList();\n  print(filteredNumbers);\n}\n```"
  },
  {
    "task": "Select all concerts happening in the summer from an event calendar.",
    "code": "```dart\nclass Event {\n  final String name;\n  final String season;\n\n  Event(this.name, this.season);\n}\n\nvoid main() {\n  List<Event> eventCalendar = [\n    Event('Concert A', 'Winter'),\n    Event('Concert B', 'Summer'),\n    Event('Concert C', 'Spring'),\n    Event('Concert D', 'Summer'),\n  ];\n\n  List<Event> summerConcerts = eventCalendar.where((event) => event.season == 'Summer').toList();\n\n  summerConcerts.forEach((concert) => print(concert.name));\n}\n```"
  },
  {
    "task": "Find all users with more than 1000 followers from a social media platform.",
    "code": "```dart\nclass User {\n  final String name;\n  final int followers;\n\n  User(this.name, this.followers);\n}\n\nvoid main() {\n  List<User> users = [\n    User('Alice', 500),\n    User('Bob', 1500),\n    User('Charlie', 2000),\n    User('David', 800),\n  ];\n\n  List<User> usersWithMoreFollowers = users.where((user) => user.followers > 1000).toList();\n\n  for (var user in usersWithMoreFollowers) {\n    print(user.name);\n  }\n}\n```"
  },
  {
    "task": "Identify all stocks with a growth rate above 10% from a financial portfolio.",
    "code": "```dart\nclass Stock {\n  final String name;\n  final double growthRate;\n\n  Stock(this.name, this.growthRate);\n}\n\nvoid main() {\n  List<Stock> portfolio = [\n    Stock('Stock A', 12.5),\n    Stock('Stock B', 8.0),\n    Stock('Stock C', 15.3),\n    Stock('Stock D', 9.5),\n    Stock('Stock E', 11.0),\n  ];\n\n  List<Stock> highGrowthStocks = portfolio.where((stock) => stock.growthRate > 10.0).toList();\n\n  highGrowthStocks.forEach((stock) => print(stock.name));\n}\n```"
  },
  {
    "task": "Extract all reviews that have a five-star rating from a product review site.",
    "code": "```dart\nclass Review {\n  final String content;\n  final int rating;\n\n  Review(this.content, this.rating);\n}\n\nvoid main() {\n  List<Review> reviews = [\n    Review(\"Great product!\", 5),\n    Review(\"Not bad\", 3),\n    Review(\"Excellent!\", 5),\n    Review(\"Could be better\", 4),\n  ];\n\n  List<Review> fiveStarReviews = reviews.where((review) => review.rating == 5).toList();\n\n  fiveStarReviews.forEach((review) => print(review.content));\n}\n```"
  },
  {
    "task": "Filter out all emails that are not flagged from an inbox.",
    "code": "```dart\nvoid main() {\n  List<Map<String, dynamic>> inbox = [\n    {'email': 'email1@example.com', 'flagged': true},\n    {'email': 'email2@example.com', 'flagged': false},\n    {'email': 'email3@example.com', 'flagged': true},\n  ];\n\n  List<Map<String, dynamic>> flaggedEmails = inbox.where((email) => email['flagged'] == true).toList();\n\n  print(flaggedEmails);\n}\n```"
  },
  {
    "task": "Select all entries with a timestamp from the past 24 hours from a log file.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  final logFile = File('log.txt');\n  final lines = logFile.readAsLinesSync();\n  final now = DateTime.now();\n  final past24HoursEntries = lines.where((line) {\n    final timestamp = DateTime.parse(line.split(' ')[0]);\n    return now.difference(timestamp).inHours < 24;\n  });\n\n  for (final entry in past24HoursEntries) {\n    print(entry);\n  }\n}\n```"
  },
  {
    "task": "Find all books by a specific author from a library database.",
    "code": "```dart\nclass Book {\n  final String title;\n  final String author;\n\n  Book(this.title, this.author);\n}\n\nList<Book> filterBooksByAuthor(List<Book> books, String author) {\n  return books.where((book) => book.author == author).toList();\n}\n\nvoid main() {\n  final library = [\n    Book('Book One', 'Author A'),\n    Book('Book Two', 'Author B'),\n    Book('Book Three', 'Author A'),\n    Book('Book Four', 'Author C'),\n  ];\n\n  final booksByAuthorA = filterBooksByAuthor(library, 'Author A');\n  booksByAuthorA.forEach((book) => print(book.title));\n}\n```"
  },
  {
    "task": "Identify all donations above $500 from a charity fundraiser report.",
    "code": "```dart\nvoid main() {\n  List<double> donations = [100.0, 250.0, 700.0, 1500.0, 50.0, 800.0];\n  List<double> largeDonations = donations.where((donation) => donation > 500).toList();\n  print(largeDonations);\n}\n```"
  },
  {
    "task": "Extract all assignments due in the next week from a course syllabus.",
    "code": "```dart\nclass Assignment {\n  final String title;\n  final DateTime dueDate;\n  \n  Assignment(this.title, this.dueDate);\n}\n\nList<Assignment> filterAssignmentsDueNextWeek(List<Assignment> assignments) {\n  final now = DateTime.now();\n  final nextWeek = now.add(Duration(days: 7));\n  \n  return assignments.where((assignment) =>\n      assignment.dueDate.isAfter(now) && assignment.dueDate.isBefore(nextWeek)).toList();\n}\n```"
  },
  {
    "task": "Filter out all movies that are not in English from a streaming service.",
    "code": "```dart\nclass Movie {\n  final String title;\n  final String language;\n\n  Movie(this.title, this.language);\n}\n\nList<Movie> filterEnglishMovies(List<Movie> movies) {\n  return movies.where((movie) => movie.language == 'English').toList();\n}\n\nvoid main() {\n  var movies = [\n    Movie('Inception', 'English'),\n    Movie('Am\u00e9lie', 'French'),\n    Movie('Parasite', 'Korean'),\n    Movie('The Dark Knight', 'English')\n  ];\n\n  var englishMovies = filterEnglishMovies(movies);\n  englishMovies.forEach((movie) => print(movie.title));\n}\n```"
  },
  {
    "task": "Select all landmarks located in Europe from a travel guide.",
    "code": "```dart\nvoid main() {\n  var landmarks = [\n    {'name': 'Eiffel Tower', 'location': 'Europe'},\n    {'name': 'Great Wall of China', 'location': 'Asia'},\n    {'name': 'Colosseum', 'location': 'Europe'},\n    {'name': 'Statue of Liberty', 'location': 'North America'},\n  ];\n\n  var europeanLandmarks = landmarks.where((landmark) => landmark['location'] == 'Europe');\n\n  print(europeanLandmarks.toList());\n}\n```"
  },
  {
    "task": "Find all contracts that are set to renew next month from a contract management system.",
    "code": "```dart\nclass Contract {\n  DateTime renewalDate;\n  Contract(this.renewalDate);\n}\n\nList<Contract> findContractsRenewingNextMonth(List<Contract> contracts) {\n  DateTime now = DateTime.now();\n  DateTime nextMonth = DateTime(now.year, now.month + 1);\n  \n  return contracts.where((contract) {\n    return contract.renewalDate.year == nextMonth.year &&\n           contract.renewalDate.month == nextMonth.month;\n  }).toList();\n}\n```"
  },
  {
    "task": "Identify all volunteer hours logged in the past year from a non-profit organization database.",
    "code": "```dart\nimport 'package:intl/intl.dart';\n\nclass VolunteerLog {\n  DateTime date;\n  int hours;\n\n  VolunteerLog(this.date, this.hours);\n}\n\nvoid main() {\n  final logs = [\n    VolunteerLog(DateTime(2023, 1, 10), 5),\n    VolunteerLog(DateTime(2022, 11, 23), 3),\n    VolunteerLog(DateTime(2021, 6, 12), 4),\n    // Add more logs as needed\n  ];\n\n  final oneYearAgo = DateTime.now().subtract(Duration(days: 365));\n  final recentLogs = logs.where((log) => log.date.isAfter(oneYearAgo)).toList();\n\n  print(recentLogs.map((log) => 'Date: ${DateFormat('yyyy-MM-dd').format(log.date)}, Hours: ${log.hours}').join('\\n'));\n}\n```"
  },
  {
    "task": "Extract all elements that are not strings from a mixed-type list.",
    "code": "```dart\nvoid main() {\n  List<dynamic> mixedList = [1, 'hello', 3.14, 'world', true, 'Dart', 42];\n  List<dynamic> nonStrings = mixedList.where((element) => element is! String).toList();\n  print(nonStrings);\n}\n```"
  },
  {
    "task": "Filter out all orders that are not yet shipped from an e-commerce system.",
    "code": "```dart\nclass Order {\n  final String status;\n  Order(this.status);\n}\n\nvoid main() {\n  List<Order> orders = [\n    Order('shipped'),\n    Order('pending'),\n    Order('shipped'),\n    Order('processing'),\n  ];\n\n  List<Order> shippedOrders = orders.where((order) => order.status == 'shipped').toList();\n\n  print(shippedOrders.length); // Outputs: 2\n}\n```"
  },
  {
    "task": "Select all emails sent from a specific address in an email server.",
    "code": "```dart\nclass Email {\n  String sender;\n  String subject;\n  String body;\n\n  Email(this.sender, this.subject, this.body);\n}\n\nList<Email> filterEmailsBySender(List<Email> emails, String specificAddress) {\n  return emails.where((email) => email.sender == specificAddress).toList();\n}\n\nvoid main() {\n  List<Email> emails = [\n    Email('example1@example.com', 'Subject 1', 'Body 1'),\n    Email('specific@example.com', 'Subject 2', 'Body 2'),\n    Email('example2@example.com', 'Subject 3', 'Body 3'),\n    Email('specific@example.com', 'Subject 4', 'Body 4'),\n  ];\n\n  String specificAddress = 'specific@example.com';\n  List<Email> filteredEmails = filterEmailsBySender(emails, specificAddress);\n\n  print(filteredEmails.map((email) => email.subject).toList());\n}\n```"
  },
  {
    "task": "Find all passwords with at least one special character from a security database.",
    "code": "```dart\nvoid main() {\n  List<String> passwords = [\n    'password1!',\n    'securePass',\n    'pass@word2',\n    'simplepass',\n    'strong#Password'\n  ];\n\n  RegExp specialCharRegExp = RegExp(r'[!@#$%^&*(),.?\":{}|<>]');\n\n  List<String> passwordsWithSpecialChars = passwords.where((password) {\n    return specialCharRegExp.hasMatch(password);\n  }).toList();\n\n  print(passwordsWithSpecialChars);\n}\n```"
  },
  {
    "task": "Identify all courses with a prerequisite from a university catalog.",
    "code": "```dart\nclass Course {\n  String name;\n  String? prerequisite;\n\n  Course(this.name, [this.prerequisite]);\n}\n\nvoid main() {\n  List<Course> catalog = [\n    Course('Mathematics', 'Algebra'),\n    Course('Physics', 'Mathematics'),\n    Course('History'),\n    Course('Chemistry', 'Physics'),\n    Course('Biology')\n  ];\n\n  List<Course> coursesWithPrerequisite = catalog\n      .where((course) => course.prerequisite != null)\n      .toList();\n\n  for (var course in coursesWithPrerequisite) {\n    print(course.name);\n  }\n}\n```"
  },
  {
    "task": "Extract all genes associated with a specific trait from a genetic database.",
    "code": "```dart\nclass Gene {\n  final String name;\n  final List<String> traits;\n\n  Gene(this.name, this.traits);\n}\n\nList<Gene> extractGenesWithTrait(List<Gene> genes, String trait) {\n  return genes.where((gene) => gene.traits.contains(trait)).toList();\n}\n\nvoid main() {\n  List<Gene> geneticDatabase = [\n    Gene('Gene1', ['TraitA', 'TraitB']),\n    Gene('Gene2', ['TraitC']),\n    Gene('Gene3', ['TraitA', 'TraitD']),\n    Gene('Gene4', ['TraitE']),\n  ];\n\n  String specificTrait = 'TraitA';\n  List<Gene> associatedGenes = extractGenesWithTrait(geneticDatabase, specificTrait);\n\n  associatedGenes.forEach((gene) => print(gene.name));\n}\n```"
  },
  {
    "task": "Filter out all investments with a risk level below medium from a portfolio.",
    "code": "```dart\nvoid main() {\n  List<Map<String, dynamic>> portfolio = [\n    {'name': 'Investment A', 'risk': 'low'},\n    {'name': 'Investment B', 'risk': 'medium'},\n    {'name': 'Investment C', 'risk': 'high'},\n    {'name': 'Investment D', 'risk': 'medium'},\n  ];\n\n  List<Map<String, dynamic>> filteredPortfolio = portfolio.where((investment) {\n    return investment['risk'] == 'medium' || investment['risk'] == 'high';\n  }).toList();\n\n  print(filteredPortfolio);\n}\n```"
  },
  {
    "task": "Select all calls longer than five minutes from a call log.",
    "code": "```dart\nclass Call {\n  final String caller;\n  final Duration duration;\n\n  Call(this.caller, this.duration);\n}\n\nvoid main() {\n  List<Call> callLog = [\n    Call('Alice', Duration(minutes: 3)),\n    Call('Bob', Duration(minutes: 10)),\n    Call('Charlie', Duration(minutes: 7)),\n    Call('David', Duration(minutes: 4)),\n  ];\n\n  List<Call> longCalls = callLog.where((call) => call.duration > Duration(minutes: 5)).toList();\n\n  longCalls.forEach((call) => print('Caller: ${call.caller}, Duration: ${call.duration.inMinutes} minutes'));\n}\n```"
  }
]