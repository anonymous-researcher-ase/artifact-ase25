[
  {
    "task": "Create a function that takes two boolean inputs and returns true if both are true using logical AND.",
    "code": "```dart\nbool bothAreTrue(bool a, bool b) {\n  return a && b;\n}\n```"
  },
  {
    "task": "Write a script to check if either of two given conditions are met using logical OR.",
    "code": "```dart\nvoid main() {\n  bool condition1 = true; // Example condition 1\n  bool condition2 = false; // Example condition 2\n  \n  if (condition1 || condition2) {\n    print('At least one condition is met.');\n  } else {\n    print('Neither condition is met.');\n  }\n}\n```"
  },
  {
    "task": "Develop a program that negates a boolean variable using logical NOT.",
    "code": "```dart\nvoid main() {\n  bool originalValue = true;\n  bool negatedValue = !originalValue;\n  print('Original: $originalValue, Negated: $negatedValue');\n}\n```"
  },
  {
    "task": "Implement a feature that determines if a number is within a specific range using logical operators.",
    "code": "```dart\nbool isWithinRange(int number, int lowerBound, int upperBound) {\n  return number >= lowerBound && number <= upperBound;\n}\n\nvoid main() {\n  int number = 10;\n  int lowerBound = 5;\n  int upperBound = 15;\n  \n  if (isWithinRange(number, lowerBound, upperBound)) {\n    print('$number is within the range.');\n  } else {\n    print('$number is not within the range.');\n  }\n}\n```"
  },
  {
    "task": "Design a system that checks if a user has both read and write permissions using logical AND.",
    "code": "```dart\nclass UserPermissions {\n  bool hasReadPermission;\n  bool hasWritePermission;\n\n  UserPermissions(this.hasReadPermission, this.hasWritePermission);\n\n  bool hasReadAndWritePermissions() {\n    return hasReadPermission && hasWritePermission;\n  }\n}\n\nvoid main() {\n  UserPermissions user = UserPermissions(true, true);\n  bool canReadAndWrite = user.hasReadAndWritePermissions();\n\n  print('User has both read and write permissions: $canReadAndWrite');\n}\n```"
  },
  {
    "task": "Write a function to verify if a string is neither empty nor null using logical NOT.",
    "code": "```dart\nbool isValidString(String? input) {\n  return !(input == null || input.isEmpty);\n}\n```"
  },
  {
    "task": "Create a conditional statement that executes a block of code if either of two expressions are true using logical OR.",
    "code": "```dart\nvoid main() {\n  bool condition1 = true; // Example condition\n  bool condition2 = false; // Example condition\n\n  if (condition1 || condition2) {\n    // Block of code to execute if either condition1 or condition2 is true\n    print('At least one condition is true.');\n  }\n}\n```"
  },
  {
    "task": "Build a program that inverts the truth value of a given condition using logical NOT.",
    "code": "```dart\nvoid main() {\n  bool condition = true;\n  bool invertedCondition = !condition;\n  print('Original condition: $condition');\n  print('Inverted condition: $invertedCondition');\n}\n```"
  },
  {
    "task": "Compose a function to return true if a list is not empty using logical NOT.",
    "code": "```dart\nbool isListNotEmpty(List list) {\n  return !list.isEmpty;\n}\n```"
  },
  {
    "task": "Develop a filter that selects items from a collection only if they meet multiple criteria using logical AND.",
    "code": "```dart\nvoid main() {\n  List<Map<String, dynamic>> items = [\n    {'name': 'Item1', 'price': 100, 'inStock': true},\n    {'name': 'Item2', 'price': 150, 'inStock': false},\n    {'name': 'Item3', 'price': 200, 'inStock': true},\n    {'name': 'Item4', 'price': 250, 'inStock': true},\n  ];\n\n  List<Map<String, dynamic>> filteredItems = items.where((item) {\n    return item['price'] > 100 && item['inStock'] == true;\n  }).toList();\n\n  print(filteredItems);\n}\n```"
  },
  {
    "task": "Write a script that checks if a value is outside a given range using logical OR.",
    "code": "```dart\nvoid main() {\n  int value = 25;\n  int lowerBound = 10;\n  int upperBound = 20;\n\n  bool isOutsideRange = value < lowerBound || value > upperBound;\n\n  print('Value is outside the range: $isOutsideRange');\n}\n```"
  },
  {
    "task": "Create a small program to toggle a boolean flag using logical NOT.",
    "code": "```dart\nvoid main() {\n  bool flag = true;\n  print('Initial flag: $flag');\n  \n  // Toggle the flag using logical NOT\n  flag = !flag;\n  print('Toggled flag: $flag');\n  \n  // Toggle again\n  flag = !flag;\n  print('Toggled again: $flag');\n}\n```"
  },
  {
    "task": "Implement a feature that evaluates if a username is both unique and valid using logical AND.",
    "code": "```dart\nclass UserValidator {\n  List<String> existingUsernames = ['user1', 'user2', 'user3'];\n\n  bool isUsernameValidAndUnique(String username) {\n    bool isValid = username.length >= 5;\n    bool isUnique = !existingUsernames.contains(username);\n    return isValid && isUnique;\n  }\n}\n\nvoid main() {\n  var validator = UserValidator();\n  print(validator.isUsernameValidAndUnique('user4')); // true\n  print(validator.isUsernameValidAndUnique('user1')); // false\n}\n```"
  },
  {
    "task": "Design a conditional to perform an action if neither of two flags are set using logical NOT.",
    "code": "```dart\nvoid performActionIfNeitherFlagSet(bool flag1, bool flag2) {\n  if (!flag1 && !flag2) {\n    // Perform the action here\n    print('Neither flag is set. Performing action.');\n  }\n}\n\nvoid main() {\n  bool flag1 = false;\n  bool flag2 = false;\n\n  performActionIfNeitherFlagSet(flag1, flag2);\n}\n```"
  },
  {
    "task": "Write a function that returns true if at least one of multiple boolean inputs is true using logical OR.",
    "code": "```dart\nbool atLeastOneTrue(List<bool> inputs) {\n  return inputs.contains(true);\n}\n```"
  },
  {
    "task": "Create a loop that continues executing as long as two conditions are both false using logical NOT and AND.",
    "code": "```dart\nvoid main() {\n  bool condition1 = false;\n  bool condition2 = false;\n\n  while (!condition1 && !condition2) {\n    // Loop body\n\n    // Example logic to eventually exit the loop\n    // Modify condition1 or condition2 to true to exit the loop\n    condition1 = true;\n  }\n}\n```"
  },
  {
    "task": "Develop a sequence that checks if a character is either a vowel or a consonant using logical OR.",
    "code": "```dart\nvoid checkCharacter(String character) {\n  if (character.length != 1) {\n    print('Please enter a single character.');\n    return;\n  }\n\n  String lowerChar = character.toLowerCase();\n  \n  if (lowerChar == 'a' || lowerChar == 'e' || lowerChar == 'i' || lowerChar == 'o' || lowerChar == 'u') {\n    print('$character is a vowel.');\n  } else if (RegExp(r'^[a-z]$').hasMatch(lowerChar)) {\n    print('$character is a consonant.');\n  } else {\n    print('$character is not a valid alphabetic character.');\n  }\n}\n\nvoid main() {\n  checkCharacter('A'); // Example usage\n  checkCharacter('b');\n  checkCharacter('1');\n}\n```"
  },
  {
    "task": "Implement a validation that ensures a password is both of minimum length and contains numbers using logical AND.",
    "code": "```dart\nbool validatePassword(String password) {\n  const int minLength = 8;\n  bool hasNumbers = password.contains(RegExp(r'\\d'));\n  \n  return password.length >= minLength && hasNumbers;\n}\n```"
  },
  {
    "task": "Compose a test to determine if a point is not within a circle using logical NOT.",
    "code": "```dart\nclass Point {\n  final double x;\n  final double y;\n\n  Point(this.x, this.y);\n}\n\nclass Circle {\n  final Point center;\n  final double radius;\n\n  Circle(this.center, this.radius);\n}\n\nbool isPointOutsideCircle(Point point, Circle circle) {\n  double dx = point.x - circle.center.x;\n  double dy = point.y - circle.center.y;\n  double distanceSquared = dx * dx + dy * dy;\n  double radiusSquared = circle.radius * circle.radius;\n  return !(distanceSquared <= radiusSquared);\n}\n\nvoid main() {\n  Point point = Point(3, 4);\n  Circle circle = Circle(Point(0, 0), 5);\n\n  bool result = isPointOutsideCircle(point, circle);\n  print(result);\n}\n```"
  },
  {
    "task": "Write a function to decide if a user is either an admin or an editor using logical OR.",
    "code": "```dart\nbool isAdminOrEditor(String role) {\n  return role == 'admin' || role == 'editor';\n}\n```"
  },
  {
    "task": "Create a conditional statement to trigger an alert if two sensors both detect motion using logical AND.",
    "code": "```dart\nvoid checkMotion(bool sensor1, bool sensor2) {\n  if (sensor1 && sensor2) {\n    print('Alert: Both sensors detect motion!');\n  }\n}\n```"
  },
  {
    "task": "Design a program to validate an email format and ensure it contains a domain using logical AND.",
    "code": "```dart\nbool isValidEmail(String email) {\n  return email.contains('@') && email.split('@').last.contains('.');\n}\n\nvoid main() {\n  String email = 'example@example.com';\n  if (isValidEmail(email)) {\n    print('Valid email format.');\n  } else {\n    print('Invalid email format.');\n  }\n}\n```"
  },
  {
    "task": "Develop a method to confirm that a transaction is neither fraudulent nor unauthorized using logical NOT.",
    "code": "```dart\nclass TransactionValidator {\n  bool isTransactionValid(bool isFraudulent, bool isUnauthorized) {\n    return !(isFraudulent || isUnauthorized);\n  }\n}\n\nvoid main() {\n  var validator = TransactionValidator();\n  bool isFraudulent = false;\n  bool isUnauthorized = false;\n  bool isValid = validator.isTransactionValid(isFraudulent, isUnauthorized);\n  print('Transaction is valid: $isValid');\n}\n```"
  },
  {
    "task": "Write a function that outputs true if a file is either missing or empty using logical OR.",
    "code": "```dart\nimport 'dart:io';\n\nbool isFileMissingOrEmpty(String filePath) {\n  final file = File(filePath);\n  return !file.existsSync() || file.lengthSync() == 0;\n}\n```"
  },
  {
    "task": "Implement a system to check if a student's grade is neither failing nor incomplete using logical NOT.",
    "code": "```dart\nbool isGradeValid(String grade) {\n  return !(grade == 'F' || grade == 'Incomplete');\n}\n\nvoid main() {\n  String studentGrade = 'B';\n\n  if (isGradeValid(studentGrade)) {\n    print('Grade is valid.');\n  } else {\n    print('Grade is either failing or incomplete.');\n  }\n}\n```"
  },
  {
    "task": "Create a script that executes a command if a file is both readable and writable using logical AND.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  File file = File('example.txt');\n\n  if (file.existsSync() && file.readAsStringSync() != null && file.writeAsStringSync('') != null) {\n    print('The file is both readable and writable.');\n    // Execute your command here\n  } else {\n    print('The file is not readable or writable.');\n  }\n}\n```"
  },
  {
    "task": "Compose a function to determine if a temperature is not within a safe operating range using logical NOT.",
    "code": "```dart\nbool isTemperatureUnsafe(int temperature, int safeMin, int safeMax) {\n  return !(temperature >= safeMin && temperature <= safeMax);\n}\n```"
  },
  {
    "task": "Design a check to see if a car is either out of fuel or needs maintenance using logical OR.",
    "code": "```dart\nbool isCarOutOfFuelOrNeedsMaintenance(bool outOfFuel, bool needsMaintenance) {\n  return outOfFuel || needsMaintenance;\n}\n\nvoid main() {\n  bool outOfFuel = true;\n  bool needsMaintenance = false;\n  \n  bool result = isCarOutOfFuelOrNeedsMaintenance(outOfFuel, needsMaintenance);\n  print('Car is out of fuel or needs maintenance: $result');\n}\n```"
  },
  {
    "task": "Develop a routine that ensures a network connection is both stable and secure using logical AND.",
    "code": "```dart\nbool isNetworkStable() {\n  // Placeholder for actual network stability check\n  return true; // Assume the network is stable\n}\n\nbool isNetworkSecure() {\n  // Placeholder for actual network security check\n  return true; // Assume the network is secure\n}\n\nbool isNetworkConnectionStableAndSecure() {\n  return isNetworkStable() && isNetworkSecure();\n}\n\nvoid main() {\n  if (isNetworkConnectionStableAndSecure()) {\n    print('Network connection is stable and secure.');\n  } else {\n    print('Network connection is not stable and/or secure.');\n  }\n}\n```"
  },
  {
    "task": "Write a conditional to print a message if a user is not logged in using logical NOT.",
    "code": "```dart\nvoid main() {\n  bool isLoggedIn = false;\n\n  if (!isLoggedIn) {\n    print('User is not logged in.');\n  }\n}\n```"
  },
  {
    "task": "Create a function that checks if a number is both even and positive using logical AND.",
    "code": "```dart\nbool isEvenAndPositive(int number) {\n  return number > 0 && number % 2 == 0;\n}\n```"
  },
  {
    "task": "Implement a feature that turns off a device if neither of two switches are on using logical NOT.",
    "code": "```dart\nbool switch1 = false;\nbool switch2 = false;\n\nbool deviceStatus = !(switch1 || switch2);\n\nvoid main() {\n  if (!deviceStatus) {\n    print('Device is off');\n  } else {\n    print('Device is on');\n  }\n}\n```"
  },
  {
    "task": "Compose a script to alert if a server is either down or running slow using logical OR.",
    "code": "```dart\nvoid main() {\n  bool isServerDown = true; // Example status\n  bool isServerSlow = false; // Example status\n\n  if (isServerDown || isServerSlow) {\n    print('Alert: Server is either down or running slow.');\n  }\n}\n```"
  },
  {
    "task": "Design a validation method to ensure a form field is not empty using logical NOT.",
    "code": "```dart\nbool isFieldNotEmpty(String fieldValue) {\n  return !(fieldValue.isEmpty);\n}\n```"
  },
  {
    "task": "Write a program to determine if two strings are both non-empty using logical AND.",
    "code": "```dart\nvoid main() {\n  String str1 = 'Hello';\n  String str2 = 'World';\n  \n  bool areBothNonEmpty = str1.isNotEmpty && str2.isNotEmpty;\n  print('Are both strings non-empty? $areBothNonEmpty');\n}\n```"
  },
  {
    "task": "Create a function that checks if a number is either prime or a perfect square using logical OR.",
    "code": "```dart\nbool isPrime(int n) {\n  if (n <= 1) return false;\n  for (int i = 2; i * i <= n; i++) {\n    if (n % i == 0) return false;\n  }\n  return true;\n}\n\nbool isPerfectSquare(int n) {\n  int sqrtN = n ~/ (n.toDouble().sqrt().toInt());\n  return (sqrtN * sqrtN == n);\n}\n\nbool isPrimeOrPerfectSquare(int n) {\n  return isPrime(n) || isPerfectSquare(n);\n}\n```"
  },
  {
    "task": "Develop a script to ensure a user is either an adult or has parental consent using logical OR.",
    "code": "```dart\nvoid main() {\n  bool isAdult = false;\n  bool hasParentalConsent = true;\n\n  if (isAdult || hasParentalConsent) {\n    print('Access granted.');\n  } else {\n    print('Access denied.');\n  }\n}\n```"
  },
  {
    "task": "Implement a condition to execute a task if a variable is neither zero nor negative using logical NOT.",
    "code": "```dart\nvoid executeTaskIfPositive(int number) {\n  if (!(number <= 0)) {\n    // Task to execute\n    print('Executing task because number is positive.');\n  }\n}\n\nvoid main() {\n  int myNumber = 5;\n  executeTaskIfPositive(myNumber);\n}\n```"
  },
  {
    "task": "Compose a method to verify if a system is both up-to-date and functioning using logical AND.",
    "code": "```dart\nbool isSystemValid(bool isUpToDate, bool isFunctioning) {\n  return isUpToDate && isFunctioning;\n}\n```"
  },
  {
    "task": "Write a function that returns true if a list contains neither duplicates nor null values using logical NOT.",
    "code": "```dart\nbool hasNoDuplicatesOrNulls(List<dynamic> list) {\n  return list.toSet().length == list.length && !list.contains(null);\n}\n```"
  },
  {
    "task": "Create a script to perform an action if a temperature is either too high or too low using logical OR.",
    "code": "```dart\nvoid main() {\n  double temperature = 105.0; // Example temperature value\n  double lowerLimit = 32.0;\n  double upperLimit = 100.0;\n\n  if (temperature < lowerLimit || temperature > upperLimit) {\n    print('Temperature is out of range.');\n  } else {\n    print('Temperature is within the safe range.');\n  }\n}\n```"
  },
  {
    "task": "Design a feature to toggle an option if a setting is not enabled using logical NOT.",
    "code": "```dart\nclass Settings {\n  bool settingEnabled = false;\n  bool optionToggled = false;\n\n  void toggleOption() {\n    if (!settingEnabled) {\n      optionToggled = !optionToggled;\n    }\n  }\n}\n\nvoid main() {\n  Settings settings = Settings();\n  settings.toggleOption();\n  print('Option Toggled: ${settings.optionToggled}');\n}\n```"
  },
  {
    "task": "Develop a check to ensure a username is both available and meets length requirements using logical AND.",
    "code": "```dart\nbool isUsernameValid(String username, List<String> unavailableUsernames) {\n  const int minLength = 5;\n  const int maxLength = 15;\n  bool isAvailable = !unavailableUsernames.contains(username);\n  bool meetsLengthRequirements = username.length >= minLength && username.length <= maxLength;\n  return isAvailable && meetsLengthRequirements;\n}\n```"
  },
  {
    "task": "Implement a function that returns true if a number is neither too large nor too small using logical NOT.",
    "code": "```dart\nbool isNeitherTooLargeNorTooSmall(int number) {\n  int lowerLimit = 10;\n  int upperLimit = 100;\n  return !(number < lowerLimit || number > upperLimit);\n}\n```"
  },
  {
    "task": "Write a conditional to print a warning if a disk is either full or nearly full using logical OR.",
    "code": "```dart\nvoid checkDiskSpace(bool isFull, bool isNearlyFull) {\n  if (isFull || isNearlyFull) {\n    print('Warning: Disk is full or nearly full.');\n  }\n}\n\nvoid main() {\n  // Example usage\n  bool diskFull = false;\n  bool diskNearlyFull = true;\n  \n  checkDiskSpace(diskFull, diskNearlyFull);\n}\n```"
  },
  {
    "task": "Create a routine to validate that two dates are both within a valid range using logical AND.",
    "code": "```dart\nbool areDatesValid(DateTime date1, DateTime date2, DateTime startDate, DateTime endDate) {\n  return (date1.isAfter(startDate) && date1.isBefore(endDate)) &&\n         (date2.isAfter(startDate) && date2.isBefore(endDate));\n}\n```"
  },
  {
    "task": "Compose a function to decide if a person is either a minor or a senior using logical OR.",
    "code": "```dart\nbool isMinorOrSenior(int age) {\n  return age < 18 || age >= 65;\n}\n```"
  },
  {
    "task": "Design a script to execute a task if a condition is not met using logical NOT.",
    "code": "```dart\nvoid main() {\n  bool condition = false;\n\n  if (!condition) {\n    executeTask();\n  }\n}\n\nvoid executeTask() {\n  print('Task executed because condition was not met.');\n}\n```"
  },
  {
    "task": "Develop a program to verify if a process is neither running nor scheduled using logical NOT.",
    "code": "```dart\nvoid main() {\n  bool isRunning = false;\n  bool isScheduled = false;\n\n  if (!isRunning && !isScheduled) {\n    print('The process is neither running nor scheduled.');\n  } else {\n    print('The process is either running or scheduled.');\n  }\n}\n```"
  },
  {
    "task": "Implement a feature that confirms a file is both accessible and not locked using logical AND.",
    "code": "```dart\nimport 'dart:io';\n\nbool isFileAccessibleAndNotLocked(String filePath) {\n  File file = File(filePath);\n  return file.existsSync() && !fileStat(filePath).type.isNotLocked;\n}\n\nvoid main() {\n  String path = 'example.txt';\n  bool result = isFileAccessibleAndNotLocked(path);\n  print('File is accessible and not locked: $result');\n}\n\nFileStat fileStat(String filePath) {\n  FileStat stat = FileStat.statSync(filePath);\n  return stat;\n}\n\nextension on FileSystemEntityType {\n  bool get isNotLocked => this != FileSystemEntityType.notFound;\n}\n```"
  },
  {
    "task": "Write a script to check if a device is either offline or in maintenance mode using logical OR.",
    "code": "```dart\nvoid main() {\n  bool isOffline = true; // Example status\n  bool isInMaintenanceMode = false; // Example status\n\n  if (isOffline || isInMaintenanceMode) {\n    print(\"The device is either offline or in maintenance mode.\");\n  } else {\n    print(\"The device is online and not in maintenance mode.\");\n  }\n}\n```"
  },
  {
    "task": "Create a function to ensure a password is both complex and unique using logical AND.",
    "code": "```dart\nSet<String> usedPasswords = {};\n\nbool isComplexAndUniquePassword(String password) {\n  bool isComplex = password.length >= 8 &&\n                   RegExp(r'[A-Z]').hasMatch(password) &&\n                   RegExp(r'[a-z]').hasMatch(password) &&\n                   RegExp(r'[0-9]').hasMatch(password) &&\n                   RegExp(r'[!@#\\$%\\^&\\*]').hasMatch(password);\n  \n  bool isUnique = !usedPasswords.contains(password);\n  \n  bool isValid = isComplex && isUnique;\n  \n  if (isValid) {\n    usedPasswords.add(password);\n  }\n  \n  return isValid;\n}\n```"
  },
  {
    "task": "Design a validation that ensures a value is not negative using logical NOT.",
    "code": "```dart\nbool isNotNegative(int value) {\n  return !(value < 0);\n}\n\nvoid main() {\n  int value = 5;\n  print(isNotNegative(value)); // Output: true\n  value = -3;\n  print(isNotNegative(value)); // Output: false\n}\n```"
  },
  {
    "task": "Develop a check to see if a user has either exceeded their quota or is nearing it using logical OR.",
    "code": "```dart\nbool checkQuotaStatus(int currentUsage, int quota, int warningThreshold) {\n  return currentUsage >= quota || currentUsage >= warningThreshold;\n}\n```"
  },
  {
    "task": "Implement a routine to confirm that a user is both authenticated and authorized using logical AND.",
    "code": "```dart\nbool isAuthenticated = true; // Example value\nbool isAuthorized = true; // Example value\n\nbool checkAccess() {\n  return isAuthenticated && isAuthorized;\n}\n\nvoid main() {\n  if (checkAccess()) {\n    print('User has access.');\n  } else {\n    print('Access denied.');\n  }\n}\n```"
  },
  {
    "task": "Compose a function to determine if a light is either on or blinking using logical OR.",
    "code": "```dart\nbool isLightOnOrBlinking(bool isOn, bool isBlinking) {\n  return isOn || isBlinking;\n}\n```"
  },
  {
    "task": "Write a script that executes a command if a network connection is neither weak nor unstable using logical NOT.",
    "code": "```dart\nvoid main() {\n  bool isNetworkWeak = false;\n  bool isNetworkUnstable = false;\n\n  if (!isNetworkWeak && !isNetworkUnstable) {\n    executeCommand();\n  }\n}\n\nvoid executeCommand() {\n  print('Executing command...');\n}\n```"
  },
  {
    "task": "Create a program to verify that a sensor is both calibrated and active using logical AND.",
    "code": "```dart\nvoid main() {\n  bool isCalibrated = true;\n  bool isActive = true;\n\n  if (isCalibrated && isActive) {\n    print('Sensor is both calibrated and active.');\n  } else {\n    print('Sensor is not properly set.');\n  }\n}\n```"
  },
  {
    "task": "Design a feature to alert if a process is either overdue or incomplete using logical OR.",
    "code": "```dart\nbool isProcessOverdue(bool overdue, bool incomplete) {\n  return overdue || incomplete;\n}\n\nvoid main() {\n  bool overdue = true; // Example value\n  bool incomplete = false; // Example value\n\n  if (isProcessOverdue(overdue, incomplete)) {\n    print('Alert: The process is either overdue or incomplete.');\n  } else {\n    print('The process is on track.');\n  }\n}\n```"
  },
  {
    "task": "Develop a script to check if a person is neither a guest nor a temporary user using logical NOT.",
    "code": "```dart\nvoid main() {\n  bool isGuest = false;\n  bool isTemporaryUser = false;\n\n  if (!isGuest && !isTemporaryUser) {\n    print('The person is neither a guest nor a temporary user.');\n  } else {\n    print('The person is either a guest or a temporary user.');\n  }\n}\n```"
  },
  {
    "task": "Implement a function to toggle a light if a switch is not pressed using logical NOT.",
    "code": "```dart\nbool toggleLight(bool isSwitchPressed, bool isLightOn) {\n  if (!isSwitchPressed) {\n    isLightOn = !isLightOn;\n  }\n  return isLightOn;\n}\n```"
  },
  {
    "task": "Write a conditional to trigger an event if a file is either corrupted or missing using logical OR.",
    "code": "```dart\nbool isFileCorrupted = true;\nbool isFileMissing = false;\n\nif (isFileCorrupted || isFileMissing) {\n  triggerEvent();\n}\n\nvoid triggerEvent() {\n  print('Event triggered due to file issue.');\n}\n```"
  },
  {
    "task": "Create a routine that verifies if a vehicle is both insured and registered using logical AND.",
    "code": "```dart\nbool isVehicleEligible(bool isInsured, bool isRegistered) {\n  return isInsured && isRegistered;\n}\n```"
  },
  {
    "task": "Compose a method to check if an account is either overdrawn or flagged using logical OR.",
    "code": "```dart\nclass Account {\n  bool isOverdrawn;\n  bool isFlagged;\n\n  Account(this.isOverdrawn, this.isFlagged);\n\n  bool isOverdrawnOrFlagged() {\n    return isOverdrawn || isFlagged;\n  }\n}\n\nvoid main() {\n  Account account1 = Account(true, false);\n  Account account2 = Account(false, true);\n  Account account3 = Account(false, false);\n\n  print(account1.isOverdrawnOrFlagged()); // true\n  print(account2.isOverdrawnOrFlagged()); // true\n  print(account3.isOverdrawnOrFlagged()); // false\n}\n```"
  },
  {
    "task": "Design a program to ensure an application is both installed and updated using logical AND.",
    "code": "```dart\nvoid main() {\n  bool isInstalled = true; // Change this value to test\n  bool isUpdated = true;   // Change this value to test\n\n  if (isInstalled && isUpdated) {\n    print('The application is both installed and updated.');\n  } else {\n    print('The application is not ready.');\n  }\n}\n```"
  },
  {
    "task": "Develop a function that returns true if a number is neither divisible by 3 nor 5 using logical NOT.",
    "code": "```dart\nbool isNotDivisibleBy3Or5(int number) {\n  return !(number % 3 == 0 || number % 5 == 0);\n}\n```"
  },
  {
    "task": "Implement a script that alerts if a device is either overheating or underperforming using logical OR.",
    "code": "```dart\nvoid checkDeviceStatus(bool isOverheating, bool isUnderperforming) {\n  if (isOverheating || isUnderperforming) {\n    print('Alert: Device is either overheating or underperforming!');\n  } else {\n    print('Device is functioning normally.');\n  }\n}\n\nvoid main() {\n  bool overheating = true; // Example value\n  bool underperforming = false; // Example value\n\n  checkDeviceStatus(overheating, underperforming);\n}\n```"
  },
  {
    "task": "Write a function to validate that a directory is both writable and not full using logical AND.",
    "code": "```dart\nimport 'dart:io';\n\nbool isDirectoryWritableAndNotFull(Directory directory) {\n  final bool isWritable = directory.statSync().modeString().contains('w');\n  final bool isNotFull = directory.statSync().size < directory.statSync().deviceSize;\n  return isWritable && isNotFull;\n}\n```"
  },
  {
    "task": "Create a conditional statement that executes if a button is not clicked using logical NOT.",
    "code": "```dart\nbool isButtonClicked = false;\n\nif (!isButtonClicked) {\n  // Execute desired action here\n}\n```"
  },
  {
    "task": "Design a check to ensure a transaction is both verified and complete using logical AND.",
    "code": "```dart\nbool isTransactionValid(bool isVerified, bool isComplete) {\n  return isVerified && isComplete;\n}\n\nvoid main() {\n  bool transactionVerified = true;\n  bool transactionComplete = true;\n\n  if (isTransactionValid(transactionVerified, transactionComplete)) {\n    print('Transaction is valid.');\n  } else {\n    print('Transaction is invalid.');\n  }\n}\n```"
  },
  {
    "task": "Develop a routine to determine if a string is either uppercase or lowercase using logical OR.",
    "code": "```dart\nbool isUpperCaseOrLowerCase(String input) {\n  return input == input.toUpperCase() || input == input.toLowerCase();\n}\n```"
  },
  {
    "task": "Implement a feature to execute a task if a variable is neither null nor undefined using logical NOT.",
    "code": "```dart\nvoid executeTaskIfNotNullOrUndefined(dynamic variable) {\n  if (!(variable == null)) {\n    // Execute the task\n    print(\"Executing task...\");\n  }\n}\n\nvoid main() {\n  var a;\n  var b = 5;\n\n  executeTaskIfNotNullOrUndefined(a); // Will not execute the task\n  executeTaskIfNotNullOrUndefined(b); // Will execute the task\n}\n```"
  },
  {
    "task": "Compose a function to return true if a date is either today or tomorrow using logical OR.",
    "code": "```dart\nbool isTodayOrTomorrow(DateTime date) {\n  DateTime today = DateTime.now();\n  DateTime tomorrow = today.add(Duration(days: 1));\n  return date.year == today.year && date.month == today.month && date.day == today.day ||\n         date.year == tomorrow.year && date.month == tomorrow.month && date.day == tomorrow.day;\n}\n```"
  },
  {
    "task": "Write a script to confirm that a system is both running and not in maintenance mode using logical AND.",
    "code": "```dart\nvoid main() {\n  bool isRunning = true; // Assume true means the system is running.\n  bool isInMaintenanceMode = false; // Assume false means the system is not in maintenance mode.\n\n  if (isRunning && !isInMaintenanceMode) {\n    print('System is operational.');\n  } else {\n    print('System is not operational.');\n  }\n}\n```"
  },
  {
    "task": "Create a program to verify if a text field is neither empty nor exceeds character limit using logical NOT.",
    "code": "```dart\nvoid main() {\n  String textField = \"Input text\";\n  int charLimit = 10;\n\n  bool isValid = !(textField.isEmpty || textField.length > charLimit);\n\n  print(\"Text field is valid: $isValid\");\n}\n```"
  },
  {
    "task": "Design a feature that checks if a user has either admin privileges or editor rights using logical OR.",
    "code": "```dart\nbool hasAccess(bool isAdmin, bool isEditor) {\n  return isAdmin || isEditor;\n}\n\nvoid main() {\n  bool userIsAdmin = true;\n  bool userIsEditor = false;\n  \n  if (hasAccess(userIsAdmin, userIsEditor)) {\n    print('User has access.');\n  } else {\n    print('User does not have access.');\n  }\n}\n```"
  },
  {
    "task": "Develop a script to ensure a file is both present and not empty using logical AND.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  final filePath = 'path/to/your/file.txt';\n  final file = File(filePath);\n\n  if (file.existsSync() && file.lengthSync() > 0) {\n    print('The file is present and not empty.');\n  } else {\n    print('The file is either missing or empty.');\n  }\n}\n```"
  },
  {
    "task": "Implement a condition to execute a command if a setting is not active using logical NOT.",
    "code": "```dart\nvoid executeIfNotActive(bool isActive) {\n  if (!isActive) {\n    // Command to execute if the setting is not active\n    print('Executing command because the setting is not active.');\n  }\n}\n\nvoid main() {\n  bool settingActive = false;\n  executeIfNotActive(settingActive);\n}\n```"
  },
  {
    "task": "Compose a method to decide if a person is either eligible or exempt using logical OR.",
    "code": "```dart\nbool isEligibleOrExempt(bool isEligible, bool isExempt) {\n  return isEligible || isExempt;\n}\n```"
  },
  {
    "task": "Write a function that returns true if a number is both greater than zero and less than ten using logical AND.",
    "code": "```dart\nbool isBetweenZeroAndTen(int number) {\n  return number > 0 && number < 10;\n}\n```"
  },
  {
    "task": "Create a loop to continue as long as a condition is either true or false using logical OR.",
    "code": "```dart\nvoid main() {\n  bool condition1 = false;\n  bool condition2 = true;\n  \n  while (condition1 || condition2) {\n    // Loop body\n    // Set condition1 and condition2 to false to exit the loop\n    condition1 = false;\n    condition2 = false;\n  }\n}\n```"
  },
  {
    "task": "Design a program to verify if an account is neither inactive nor suspended using logical NOT.",
    "code": "```dart\nvoid main() {\n  bool isInactive = false;\n  bool isSuspended = false;\n\n  bool isActive = !(isInactive || isSuspended);\n\n  print('Account is active: $isActive');\n}\n```"
  },
  {
    "task": "Develop a feature to confirm that a document is both signed and verified using logical AND.",
    "code": "```dart\nbool isDocumentSigned = true; // Example value\nbool isDocumentVerified = true; // Example value\n\nbool isDocumentValid() {\n  return isDocumentSigned && isDocumentVerified;\n}\n\nvoid main() {\n  if (isDocumentValid()) {\n    print('The document is both signed and verified.');\n  } else {\n    print('The document is not valid.');\n  }\n}\n```"
  },
  {
    "task": "Implement a script to alert if a network is either congested or down using logical OR.",
    "code": "```dart\nvoid main() {\n  bool isNetworkCongested = true; // Example condition\n  bool isNetworkDown = false;     // Example condition\n  \n  if (isNetworkCongested || isNetworkDown) {\n    print('Alert: The network is either congested or down.');\n  }\n}\n```"
  },
  {
    "task": "Write a function to ensure a list is both sorted and unique using logical AND.",
    "code": "```dart\nList<int> sortedAndUnique(List<int> input) {\n  return input.toSet().toList()..sort();\n}\n```"
  },
  {
    "task": "Create a conditional statement to execute if a task is not completed using logical NOT.",
    "code": "```dart\nvoid main() {\n  bool isTaskCompleted = false;\n\n  if (!isTaskCompleted) {\n    print('The task is not completed.');\n  }\n}\n```"
  },
  {
    "task": "Design a check to determine if a component is either faulty or missing using logical OR.",
    "code": "```dart\nbool isComponentFaultyOrMissing(bool isFaulty, bool isMissing) {\n  return isFaulty || isMissing;\n}\n```"
  },
  {
    "task": "Develop a routine to verify if a user is both online and available using logical AND.",
    "code": "```dart\nbool isUserOnlineAndAvailable(bool isOnline, bool isAvailable) {\n  return isOnline && isAvailable;\n}\n\nvoid main() {\n  bool userOnline = true;\n  bool userAvailable = true;\n\n  bool result = isUserOnlineAndAvailable(userOnline, userAvailable);\n  print('User is online and available: $result');\n}\n```"
  },
  {
    "task": "Implement a feature to toggle an alert if a condition is not satisfied using logical NOT.",
    "code": "```dart\nvoid main() {\n  bool condition = false;\n  bool alert = !condition;\n\n  print('Alert is ${alert ? 'ON' : 'OFF'}');\n}\n```"
  },
  {
    "task": "Compose a function to return true if a transaction is either pending or failed using logical OR.",
    "code": "```dart\nbool isTransactionPendingOrFailed(String status) {\n  return status == 'pending' || status == 'failed';\n}\n```"
  },
  {
    "task": "Write a script to ensure a configuration is both correct and active using logical AND.",
    "code": "```dart\nvoid main() {\n  bool isConfigCorrect = true; // Example value\n  bool isActive = true;        // Example value\n\n  if (isConfigCorrect && isActive) {\n    print(\"Configuration is correct and active.\");\n  } else {\n    print(\"Configuration is either incorrect or not active.\");\n  }\n}\n```"
  }
]