[
  {
    "task": "Create a program that reads a CSV file using a library designed for parsing CSV data.",
    "code": "```dart\nimport 'dart:io';\nimport 'package:csv/csv.dart';\n\nvoid main() async {\n  final file = File('data.csv');\n  final contents = await file.readAsString();\n  final csvTable = CsvToListConverter().convert(contents);\n\n  for (var row in csvTable) {\n    print(row);\n  }\n}\n```"
  },
  {
    "task": "Implement a function that generates a random number using a standard library for random number generation.",
    "code": "```dart\nimport 'dart:math';\n\nint generateRandomNumber() {\n  final random = Random();\n  return random.nextInt(100); // Generates a random number between 0 and 99\n}\n\nvoid main() {\n  print(generateRandomNumber());\n}\n```"
  },
  {
    "task": "Use a third-party library to send an HTTP GET request to a public API and print the response.",
    "code": "```dart\nimport 'dart:convert';\nimport 'package:http/http.dart' as http;\n\nvoid main() async {\n  final url = Uri.parse('https://api.publicapis.org/entries');\n  final response = await http.get(url);\n\n  if (response.statusCode == 200) {\n    final data = jsonDecode(response.body);\n    print(data);\n  } else {\n    print('Request failed with status: ${response.statusCode}.');\n  }\n}\n```"
  },
  {
    "task": "Write a script that extracts the text from a PDF file using a library for PDF manipulation.",
    "code": "```dart\nimport 'dart:io';\nimport 'package:pdf_text/pdf_text.dart';\n\nFuture<void> extractTextFromPDF(String filePath) async {\n  final File file = File(filePath);\n  final PDFDoc pdfDoc = await PDFDoc.fromFile(file);\n  \n  for (int i = 1; i <= pdfDoc.length; i++) {\n    String text = await pdfDoc.pageAt(i).text;\n    print('Page $i:\\n$text\\n');\n  }\n}\n\nvoid main() async {\n  String filePath = 'example.pdf'; // Replace with your file path\n  await extractTextFromPDF(filePath);\n}\n```"
  },
  {
    "task": "Develop a tool that resizes images by integrating an image processing library.",
    "code": "```dart\nimport 'dart:io';\nimport 'package:image/image.dart';\n\nvoid resizeImage(String inputPath, String outputPath, int width, int height) {\n  // Read the image from file\n  final imageFile = File(inputPath);\n  final imageBytes = imageFile.readAsBytesSync();\n  final image = decodeImage(imageBytes);\n\n  if (image == null) {\n    print('Error: Unable to decode image.');\n    return;\n  }\n\n  // Resize the image\n  final resizedImage = copyResize(image, width: width, height: height);\n\n  // Save the resized image to file\n  final outputBytes = encodeJpg(resizedImage);\n  File(outputPath).writeAsBytesSync(outputBytes);\n\n  print('Image resized and saved to $outputPath');\n}\n\nvoid main() {\n  final inputImagePath = 'path/to/input/image.jpg';\n  final outputImagePath = 'path/to/output/image.jpg';\n  final newWidth = 200;\n  final newHeight = 200;\n\n  resizeImage(inputImagePath, outputImagePath, newWidth, newHeight);\n}\n```"
  },
  {
    "task": "Create a program that connects to a database using a library for database interaction.",
    "code": "```dart\nimport 'package:mysql1/mysql1.dart';\n\nFuture<void> connectToDatabase() async {\n  final settings = ConnectionSettings(\n    host: 'localhost',\n    port: 3306,\n    user: 'yourUsername',\n    password: 'yourPassword',\n    db: 'yourDatabase',\n  );\n\n  final connection = await MySqlConnection.connect(settings);\n\n  try {\n    var results = await connection.query('SELECT * FROM yourTable');\n    for (var row in results) {\n      print('Row: ${row[0]}, ${row[1]}');\n    }\n  } finally {\n    await connection.close();\n  }\n}\n\nvoid main() async {\n  await connectToDatabase();\n}\n```"
  },
  {
    "task": "Build an application that converts Markdown text to HTML using a Markdown parsing library.",
    "code": "```dart\nimport 'package:markdown/markdown.dart' as md;\n\nvoid main() {\n  String markdownText = '''\n# Markdown to HTML\nThis is a simple **markdown** to HTML converter.\n- Item 1\n- Item 2\n''';\n\n  String html = md.markdownToHtml(markdownText);\n  print(html);\n}\n```"
  },
  {
    "task": "Use a library to transform XML data into JSON format for easier manipulation.",
    "code": "```dart\nimport 'dart:convert';\nimport 'package:xml2json/xml2json.dart';\n\nvoid main() {\n  final xml = '''\n  <note>\n    <to>Tove</to>\n    <from>Jani</from>\n    <heading>Reminder</heading>\n    <body>Don't forget me this weekend!</body>\n  </note>\n  ''';\n\n  final xml2json = Xml2Json();\n  xml2json.parse(xml);\n  final jsonString = xml2json.toParker();\n  final jsonData = json.decode(jsonString);\n\n  print(jsonData);\n}\n```"
  },
  {
    "task": "Implement a feature that schedules tasks at regular intervals using a scheduler library.",
    "code": "```dart\nimport 'package:cron/cron.dart';\n\nvoid main() {\n  final cron = Cron();\n\n  cron.schedule(Schedule.parse('*/5 * * * *'), () async {\n    print('Task running every 5 minutes');\n  });\n\n  // Keep the program running\n  Future.delayed(Duration(hours: 1), () => cron.close());\n}\n```"
  },
  {
    "task": "Develop a chat application that utilizes a library for WebSocket communication.",
    "code": "```dart\nimport 'dart:html' as html;\nimport 'dart:convert';\n\nvoid main() {\n  final chatApp = ChatApplication('ws://your-server-url');\n  chatApp.connect();\n  \n  html.querySelector('#sendButton')?.onClick.listen((_) {\n    final messageInput = html.querySelector('#messageInput') as html.InputElement?;\n    final message = messageInput?.value;\n    if (message != null && message.isNotEmpty) {\n      chatApp.sendMessage(message);\n      messageInput?.value = '';\n    }\n  });\n}\n\nclass ChatApplication {\n  final String url;\n  html.WebSocket? _webSocket;\n\n  ChatApplication(this.url);\n\n  void connect() {\n    _webSocket = html.WebSocket(url);\n\n    _webSocket?.onOpen.listen((event) {\n      print('Connected to WebSocket');\n    });\n\n    _webSocket?.onMessage.listen((html.MessageEvent event) {\n      final data = event.data;\n      if (data != null) {\n        final message = jsonDecode(data);\n        displayMessage(message);\n      }\n    });\n\n    _webSocket?.onClose.listen((event) {\n      print('Disconnected from WebSocket');\n    });\n  }\n\n  void sendMessage(String message) {\n    if (_webSocket?.readyState == html.WebSocket.OPEN) {\n      _webSocket?.send(jsonEncode({'message': message}));\n    }\n  }\n\n  void displayMessage(Map<String, dynamic> message) {\n    final messagesList = html.querySelector('#messagesList');\n    final messageElement = html.LIElement();\n    messageElement.text = message['message'];\n    messagesList?.append(messageElement);\n  }\n}\n```"
  },
  {
    "task": "Create a game that uses a library to handle physics simulations for realistic movements.",
    "code": "```dart\nimport 'package:forge2d/forge2d.dart';\n\nvoid main() {\n  final world = World(Vector2(0, -9.8)); // Gravity vector\n  final groundBody = Body(BodyDef()..position = Vector2(0, -10));\n  final groundBox = PolygonShape();\n  groundBox.setAsBoxXY(50, 10);\n  groundBody.createFixtureFromShape(groundBox);\n\n  final dynamicBodyDef = BodyDef()\n    ..type = BodyType.dynamic\n    ..position = Vector2(0, 4);\n  final dynamicBody = world.createBody(dynamicBodyDef);\n  final dynamicBox = PolygonShape();\n  dynamicBox.setAsBoxXY(1, 1);\n  dynamicBody.createFixtureFromShape(dynamicBox, 1.0);\n\n  const timeStep = 1.0 / 60.0;\n  const velocityIterations = 6;\n  const positionIterations = 2;\n\n  for (var i = 0; i < 60; i++) {\n    world.stepDt(timeStep, velocityIterations, positionIterations);\n    final position = dynamicBody.position;\n    final angle = dynamicBody.angle;\n    print('Step $i: Position = (${position.x}, ${position.y}), Angle = $angle');\n  }\n}\n```"
  },
  {
    "task": "Write a function that hashes a string using a cryptographic hashing library.",
    "code": "```dart\nimport 'dart:convert';\nimport 'package:crypto/crypto.dart';\n\nString hashString(String input) {\n  var bytes = utf8.encode(input);\n  var digest = sha256.convert(bytes);\n  return digest.toString();\n}\n```"
  },
  {
    "task": "Build a program that validates email addresses using a library for regular expression matching.",
    "code": "```dart\nimport 'package:validators/validators.dart';\n\nbool validateEmail(String email) {\n  return isEmail(email);\n}\n\nvoid main() {\n  String email = 'example@test.com';\n  if (validateEmail(email)) {\n    print('Email is valid.');\n  } else {\n    print('Email is invalid.');\n  }\n}\n```"
  },
  {
    "task": "Implement a feature that reads and writes Excel files using a library tailored for Excel file manipulation.",
    "code": "```dart\nimport 'dart:io';\nimport 'package:excel/excel.dart';\n\nvoid main() {\n  // Reading Excel file\n  var file = \"example.xlsx\"; // Path to your Excel file\n  var bytes = File(file).readAsBytesSync();\n  var excel = Excel.decodeBytes(bytes);\n\n  for (var table in excel.tables.keys) {\n    print('Table: $table');\n    var sheet = excel.tables[table];\n    for (var row in sheet!.rows) {\n      print('$row');\n    }\n  }\n\n  // Writing Excel file\n  var newExcel = Excel.createExcel();\n  Sheet newSheet = newExcel['Sheet1'];\n  \n  newSheet.appendRow(['Name', 'Age', 'City']);\n  newSheet.appendRow(['Alice', 25, 'New York']);\n  newSheet.appendRow(['Bob', 30, 'Los Angeles']);\n\n  var outputFile = File('output.xlsx');\n  outputFile.createSync(recursive: true);\n  outputFile.writeAsBytesSync(newExcel.save()!);\n}\n```"
  },
  {
    "task": "Use a library to translate text from one language to another in your application.",
    "code": "```dart\nimport 'package:translator/translator.dart';\n\nvoid main() async {\n  final translator = GoogleTranslator();\n\n  String text = \"Hello, how are you?\";\n  var translation = await translator.translate(text, from: 'en', to: 'es');\n  \n  print(translation.text); // Output: Hola, \u00bfc\u00f3mo est\u00e1s?\n}\n```"
  },
  {
    "task": "Create a script that generates QR codes using a library for QR code creation.",
    "code": "```dart\nimport 'package:qr_flutter/qr_flutter.dart';\nimport 'dart:io';\nimport 'dart:ui';\n\nvoid main() async {\n  final qrCodeData = 'https://example.com';\n  final qrCodeSize = 200.0;\n\n  final qrPainter = QrPainter(\n    data: qrCodeData,\n    version: QrVersions.auto,\n    gapless: false,\n  );\n\n  final picData = await qrPainter.toImageData(qrCodeSize, format: ImageByteFormat.png);\n  final file = File('qrcode.png');\n\n  await file.writeAsBytes(picData!.buffer.asUint8List());\n  print('QR Code generated and saved as qrcode.png');\n}\n```"
  },
  {
    "task": "Build an app that plays audio files using a library for audio processing.",
    "code": "```dart\nimport 'package:flutter/material.dart';\nimport 'package:audioplayers/audioplayers.dart';\n\nvoid main() => runApp(AudioApp());\n\nclass AudioApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Audio Player',\n      home: AudioPlayerScreen(),\n    );\n  }\n}\n\nclass AudioPlayerScreen extends StatefulWidget {\n  @override\n  _AudioPlayerScreenState createState() => _AudioPlayerScreenState();\n}\n\nclass _AudioPlayerScreenState extends State<AudioPlayerScreen> {\n  final AudioPlayer _audioPlayer = AudioPlayer();\n  bool isPlaying = false;\n\n  void _togglePlayPause() async {\n    if (isPlaying) {\n      await _audioPlayer.pause();\n    } else {\n      await _audioPlayer.play(UrlSource('https://www.example.com/audio.mp3'));\n    }\n    setState(() {\n      isPlaying = !isPlaying;\n    });\n  }\n\n  @override\n  void dispose() {\n    _audioPlayer.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Audio Player'),\n      ),\n      body: Center(\n        child: ElevatedButton(\n          onPressed: _togglePlayPause,\n          child: Text(isPlaying ? 'Pause' : 'Play'),\n        ),\n      ),\n    );\n  }\n}\n```"
  },
  {
    "task": "Develop a tool that scrapes web pages for specific data using a web scraping library.",
    "code": "```dart\nimport 'package:http/http.dart' as http;\nimport 'package:html/parser.dart' show parse;\n\nFuture<void> scrapeWebPage(String url) async {\n  final response = await http.get(Uri.parse(url));\n\n  if (response.statusCode == 200) {\n    final document = parse(response.body);\n    // Replace 'selector' with the actual CSS selector needed to target specific data\n    final elements = document.querySelectorAll('selector');\n\n    for (var element in elements) {\n      // Process and print the data\n      print(element.text);\n    }\n  } else {\n    print('Failed to load page');\n  }\n}\n\nvoid main() {\n  scrapeWebPage('https://example.com');\n}\n```"
  },
  {
    "task": "Implement a service that sends emails using a library that facilitates SMTP communication.",
    "code": "```dart\nimport 'package:mailer/mailer.dart';\nimport 'package:mailer/smtp_server.dart';\n\nclass EmailService {\n  final String username;\n  final String password;\n  final SmtpServer smtpServer;\n\n  EmailService(this.username, this.password)\n      : smtpServer = SmtpServer('smtp.example.com',\n            username: username, password: password);\n\n  Future<void> sendEmail(\n      String from, List<String> to, String subject, String body) async {\n    final message = Message()\n      ..from = Address(from)\n      ..recipients.addAll(to)\n      ..subject = subject\n      ..text = body;\n\n    try {\n      final sendReport = await send(message, smtpServer);\n      print('Message sent: ' + sendReport.toString());\n    } on MailerException catch (e) {\n      print('Message not sent. \\n' + e.toString());\n    }\n  }\n}\n\nvoid main() {\n  final emailService = EmailService('your-email@example.com', 'your-password');\n  emailService.sendEmail(\n      'your-email@example.com', ['recipient@example.com'], 'Test Subject', 'Test Body');\n}\n```"
  },
  {
    "task": "Create a program that visualizes data in charts using a charting library.",
    "code": "```dart\nimport 'package:flutter/material.dart';\nimport 'package:fl_chart/fl_chart.dart';\n\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(\n          title: Text('Chart Visualization'),\n        ),\n        body: Padding(\n          padding: const EdgeInsets.all(16.0),\n          child: LineChartSample(),\n        ),\n      ),\n    );\n  }\n}\n\nclass LineChartSample extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return LineChart(\n      LineChartData(\n        gridData: FlGridData(show: true),\n        titlesData: FlTitlesData(\n          leftTitles: SideTitles(showTitles: true),\n          bottomTitles: SideTitles(showTitles: true),\n        ),\n        borderData: FlBorderData(\n          show: true,\n          border: Border.all(color: Colors.black, width: 1),\n        ),\n        lineBarsData: [\n          LineChartBarData(\n            spots: [\n              FlSpot(0, 1),\n              FlSpot(1, 3),\n              FlSpot(2, 2),\n              FlSpot(3, 5),\n              FlSpot(4, 3.1),\n              FlSpot(5, 4),\n              FlSpot(6, 3),\n            ],\n            isCurved: true,\n            colors: [Colors.blue],\n            barWidth: 4,\n            belowBarData: BarAreaData(show: false),\n          ),\n        ],\n      ),\n    );\n  }\n}\n```"
  },
  {
    "task": "Write a script that compresses files into a zip archive using a standard library.",
    "code": "```dart\nimport 'dart:io';\nimport 'dart:convert';\nimport 'package:archive/archive.dart';\nimport 'package:archive/archive_io.dart';\n\nvoid main() {\n  final files = ['file1.txt', 'file2.txt']; // Replace with your file paths\n  final encoder = ZipFileEncoder();\n  encoder.create('output.zip');\n\n  for (var filePath in files) {\n    final file = File(filePath);\n    encoder.addFile(file);\n  }\n\n  encoder.close();\n  print('Files have been compressed into output.zip');\n}\n```"
  },
  {
    "task": "Use a library to parse command-line arguments in your application.",
    "code": "```dart\nimport 'package:args/args.dart';\n\nvoid main(List<String> arguments) {\n  final parser = ArgParser()\n    ..addOption('name', abbr: 'n', help: 'Your name')\n    ..addFlag('help', abbr: 'h', negatable: false, help: 'Show help');\n\n  final argResults = parser.parse(arguments);\n\n  if (argResults['help'] as bool) {\n    print('Usage: dart app.dart [options]');\n    print(parser.usage);\n    return;\n  }\n\n  final name = argResults['name'] as String?;\n  if (name != null) {\n    print('Hello, $name!');\n  } else {\n    print('Hello, World!');\n  }\n}\n```"
  },
  {
    "task": "Build a weather application that displays data from a weather API using a library for JSON parsing.",
    "code": "```dart\nimport 'dart:convert';\nimport 'package:http/http.dart' as http;\n\nvoid main() async {\n  final weatherData = await fetchWeatherData();\n  print('Temperature: ${weatherData['main']['temp']}\u00b0C');\n}\n\nFuture<Map<String, dynamic>> fetchWeatherData() async {\n  const apiKey = 'your_api_key';\n  const city = 'London';\n  final url =\n      'https://api.openweathermap.org/data/2.5/weather?q=$city&appid=$apiKey&units=metric';\n\n  final response = await http.get(Uri.parse(url));\n  if (response.statusCode == 200) {\n    return jsonDecode(response.body);\n  } else {\n    throw Exception('Failed to load weather data');\n  }\n}\n```"
  },
  {
    "task": "Create a video player application using a library that handles video playback.",
    "code": "```dart\nimport 'package:flutter/material.dart';\nimport 'package:video_player/video_player.dart';\n\nvoid main() => runApp(VideoPlayerApp());\n\nclass VideoPlayerApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Video Player',\n      home: VideoPlayerScreen(),\n    );\n  }\n}\n\nclass VideoPlayerScreen extends StatefulWidget {\n  @override\n  _VideoPlayerScreenState createState() => _VideoPlayerScreenState();\n}\n\nclass _VideoPlayerScreenState extends State<VideoPlayerScreen> {\n  late VideoPlayerController _controller;\n\n  @override\n  void initState() {\n    super.initState();\n    _controller = VideoPlayerController.network(\n      'https://www.example.com/video.mp4',\n    )..initialize().then((_) {\n        setState(() {});\n      });\n  }\n\n  @override\n  void dispose() {\n    super.dispose();\n    _controller.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Video Player'),\n      ),\n      body: Center(\n        child: _controller.value.isInitialized\n            ? AspectRatio(\n                aspectRatio: _controller.value.aspectRatio,\n                child: VideoPlayer(_controller),\n              )\n            : CircularProgressIndicator(),\n      ),\n      floatingActionButton: FloatingActionButton(\n        onPressed: () {\n          setState(() {\n            _controller.value.isPlaying\n                ? _controller.pause()\n                : _controller.play();\n          });\n        },\n        child: Icon(\n          _controller.value.isPlaying ? Icons.pause : Icons.play_arrow,\n        ),\n      ),\n    );\n  }\n}\n```"
  },
  {
    "task": "Develop a system that logs application events using a logging library for better traceability.",
    "code": "```dart\nimport 'package:logging/logging.dart';\n\nvoid main() {\n  // Initialize the logger\n  final Logger logger = Logger('AppLogger');\n\n  // Configure the logger\n  Logger.root.level = Level.ALL; // Set the desired logging level\n  Logger.root.onRecord.listen((record) {\n    print('${record.level.name}: ${record.time}: ${record.message}');\n  });\n\n  // Log some application events\n  logger.info('Application started');\n  logger.warning('This is a warning');\n  logger.severe('This is a severe error');\n\n  // Simulate some events\n  performAction(logger, 'User logged in');\n  performAction(logger, 'Data loaded');\n  performAction(logger, 'User logged out');\n}\n\nvoid performAction(Logger logger, String message) {\n  logger.info(message);\n}\n```"
  },
  {
    "task": "Implement a feature that encrypts and decrypts data using a library for encryption.",
    "code": "```dart\nimport 'package:encrypt/encrypt.dart';\n\nclass EncryptionService {\n  final Key key;\n  final IV iv;\n  final Encrypter encrypter;\n\n  EncryptionService(String keyString)\n      : key = Key.fromUtf8(keyString),\n        iv = IV.fromLength(16),\n        encrypter = Encrypter(AES(Key.fromUtf8(keyString)));\n\n  String encrypt(String plainText) {\n    final encrypted = encrypter.encrypt(plainText, iv: iv);\n    return encrypted.base64;\n  }\n\n  String decrypt(String encryptedText) {\n    final decrypted = encrypter.decrypt64(encryptedText, iv: iv);\n    return decrypted;\n  }\n}\n\nvoid main() {\n  final encryptionService = EncryptionService('my32charsecretencryptionkey!');\n\n  final encrypted = encryptionService.encrypt('Hello, Dart!');\n  print('Encrypted: $encrypted');\n\n  final decrypted = encryptionService.decrypt(encrypted);\n  print('Decrypted: $decrypted');\n}\n```"
  },
  {
    "task": "Write a program that fetches and displays cryptocurrency prices using a third-party library for API interaction.",
    "code": "```dart\nimport 'package:http/http.dart' as http;\nimport 'dart:convert';\n\nFuture<void> fetchCryptoPrices() async {\n  final url = Uri.parse('https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,ethereum&vs_currencies=usd');\n  \n  try {\n    final response = await http.get(url);\n    if (response.statusCode == 200) {\n      final data = jsonDecode(response.body);\n      print('Bitcoin Price: \\$${data['bitcoin']['usd']}');\n      print('Ethereum Price: \\$${data['ethereum']['usd']}');\n    } else {\n      print('Failed to fetch prices. Status code: ${response.statusCode}');\n    }\n  } catch (e) {\n    print('Error: $e');\n  }\n}\n\nvoid main() {\n  fetchCryptoPrices();\n}\n```"
  },
  {
    "task": "Use a library to implement OAuth authentication for secure user login in your application.",
    "code": "```dart\nimport 'package:flutter/material.dart';\nimport 'package:flutter_web_auth/flutter_web_auth.dart';\nimport 'package:http/http.dart' as http;\nimport 'dart:convert';\n\nvoid main() {\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'OAuth Demo',\n      home: LoginScreen(),\n    );\n  }\n}\n\nclass LoginScreen extends StatefulWidget {\n  @override\n  _LoginScreenState createState() => _LoginScreenState();\n}\n\nclass _LoginScreenState extends State<LoginScreen> {\n  Future<void> _authenticate() async {\n    final clientId = 'your_client_id';\n    final redirectUri = 'your_redirect_uri';\n    final authorizationEndpoint = 'https://provider.com/oauth2/authorize';\n    final tokenEndpoint = 'https://provider.com/oauth2/token';\n\n    final url = Uri.parse('$authorizationEndpoint?response_type=code&client_id=$clientId&redirect_uri=$redirectUri');\n    final result = await FlutterWebAuth.authenticate(url: url.toString(), callbackUrlScheme: 'myapp');\n\n    final code = Uri.parse(result).queryParameters['code'];\n\n    final response = await http.post(\n      Uri.parse(tokenEndpoint),\n      headers: {'Content-Type': 'application/x-www-form-urlencoded'},\n      body: {\n        'grant_type': 'authorization_code',\n        'code': code,\n        'redirect_uri': redirectUri,\n        'client_id': clientId,\n        'client_secret': 'your_client_secret',\n      },\n    );\n\n    if (response.statusCode == 200) {\n      final body = json.decode(response.body);\n      final accessToken = body['access_token'];\n      print('Access Token: $accessToken');\n    } else {\n      print('Failed to authenticate');\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Login Screen'),\n      ),\n      body: Center(\n        child: ElevatedButton(\n          onPressed: _authenticate,\n          child: Text('Login with OAuth'),\n        ),\n      ),\n    );\n  }\n}\n```"
  },
  {
    "task": "Build a calculator that evaluates mathematical expressions using a math parsing library.",
    "code": "```dart\nimport 'package:expressions/expressions.dart';\n\nvoid main() {\n  final expression = '3 + 4 * 2 / ( 1 - 5 ) ^ 2 ^ 3';\n  final evaluator = const ExpressionEvaluator();\n\n  final parsedExpression = Expression.parse(expression);\n  final result = evaluator.eval(parsedExpression, {});\n\n  print('The result of the expression \"$expression\" is: $result');\n}\n```"
  },
  {
    "task": "Create a chatbot that integrates a natural language processing library for understanding user input.",
    "code": "```dart\nimport 'package:flutter/material.dart';\nimport 'package:dialogflow_grpc/dialogflow_grpc.dart';\nimport 'package:dialogflow_grpc/generated/google/cloud/dialogflow/v2/session.pb.dart';\n\nvoid main() {\n  runApp(ChatBotApp());\n}\n\nclass ChatBotApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'ChatBot',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: ChatScreen(),\n    );\n  }\n}\n\nclass ChatScreen extends StatefulWidget {\n  @override\n  _ChatScreenState createState() => _ChatScreenState();\n}\n\nclass _ChatScreenState extends State<ChatScreen> {\n  final List<String> messages = [];\n  final TextEditingController controller = TextEditingController();\n  DialogflowGrpcV2Beta1 dialogflow;\n\n  @override\n  void initState() {\n    super.initState();\n    initDialogflow();\n  }\n\n  Future<void> initDialogflow() async {\n    final serviceAccount = ServiceAccount.fromString(\n        await DefaultAssetBundle.of(context).loadString('assets/your_service_account.json'));\n    dialogflow = DialogflowGrpcV2Beta1.viaServiceAccount(serviceAccount);\n  }\n\n  Future<void> sendMessage(String message) async {\n    setState(() {\n      messages.add('You: $message');\n    });\n    DetectIntentResponse data = await dialogflow.detectIntent(message, 'en-US');\n    String fulfillmentText = data.queryResult.fulfillmentText;\n    setState(() {\n      messages.add('Bot: $fulfillmentText');\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('ChatBot'),\n      ),\n      body: Column(\n        children: <Widget>[\n          Expanded(\n            child: ListView.builder(\n              itemCount: messages.length,\n              itemBuilder: (context, index) {\n                return ListTile(\n                  title: Text(messages[index]),\n                );\n              },\n            ),\n          ),\n          Padding(\n            padding: const EdgeInsets.all(8.0),\n            child: Row(\n              children: <Widget>[\n                Expanded(\n                  child: TextField(\n                    controller: controller,\n                    decoration: InputDecoration(hintText: 'Type a message'),\n                  ),\n                ),\n                IconButton(\n                  icon: Icon(Icons.send),\n                  onPressed: () {\n                    if (controller.text.isNotEmpty) {\n                      sendMessage(controller.text);\n                      controller.clear();\n                    }\n                  },\n                ),\n              ],\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n```"
  },
  {
    "task": "Develop a tool that detects faces in images using a computer vision library.",
    "code": "```dart\nimport 'dart:io';\nimport 'package:image/image.dart' as img;\nimport 'package:tflite/tflite.dart';\n\nvoid main() async {\n  // Load the model\n  String? res = await Tflite.loadModel(\n    model: 'assets/ssd_mobilenet.tflite',\n    labels: 'assets/labels.txt',\n  );\n\n  if (res != null) {\n    print('Model loaded successfully.');\n  } else {\n    print('Failed to load model.');\n    return;\n  }\n\n  // Load the image\n  final imageFile = File('assets/sample_image.jpg');\n  final imageBytes = await imageFile.readAsBytes();\n  final image = img.decodeImage(imageBytes);\n\n  if (image == null) {\n    print('Failed to decode image.');\n    return;\n  }\n\n  // Detect faces\n  var recognitions = await Tflite.detectObjectOnImage(\n    path: imageFile.path,\n    numResultsPerClass: 1,\n  );\n\n  if (recognitions != null && recognitions.isNotEmpty) {\n    for (var recognition in recognitions) {\n      print('Detected: ${recognition['detectedClass']} with confidence ${recognition['confidenceInClass']}');\n    }\n  } else {\n    print('No faces detected.');\n  }\n\n  // Dispose the resources\n  await Tflite.close();\n}\n```"
  },
  {
    "task": "Implement a program that converts date and time across different time zones using a library for date manipulation.",
    "code": "```dart\nimport 'package:intl/intl.dart';\nimport 'package:timezone/timezone.dart' as tz;\nimport 'package:timezone/data/latest.dart' as tzdata;\n\nvoid main() {\n  tzdata.initializeTimeZones();\n\n  // Define the source and target time zones\n  var sourceTimeZone = 'America/New_York';\n  var targetTimeZone = 'Europe/London';\n\n  // Create a date and time in the source time zone\n  var format = DateFormat('yyyy-MM-dd HH:mm:ss');\n  var sourceDateTime = format.parse('2023-10-30 15:00:00');\n  var nyLocation = tz.getLocation(sourceTimeZone);\n  var nyTime = tz.TZDateTime.from(sourceDateTime, nyLocation);\n\n  // Convert the date and time to the target time zone\n  var londonLocation = tz.getLocation(targetTimeZone);\n  var londonTime = nyTime.toLocal().add(londonLocation.timeZoneOffset);\n\n  print('Original (NY): ${format.format(nyTime)}');\n  print('Converted (London): ${format.format(londonTime)}');\n}\n```"
  },
  {
    "task": "Write a utility that uploads files to a cloud storage service using a library that interfaces with the service's API.",
    "code": "```dart\nimport 'dart:io';\nimport 'package:cloud_storage/cloud_storage.dart';\n\nclass CloudUploader {\n  final CloudStorageService _storageService;\n\n  CloudUploader(this._storageService);\n\n  Future<void> uploadFile(File file, String destinationPath) async {\n    try {\n      await _storageService.upload(\n        file: file,\n        destinationPath: destinationPath,\n      );\n      print('File uploaded successfully.');\n    } catch (e) {\n      print('Failed to upload file: $e');\n    }\n  }\n}\n\nvoid main() async {\n  final storageService = CloudStorageService(apiKey: 'your-api-key');\n  final uploader = CloudUploader(storageService);\n\n  final file = File('path/to/your/file.txt');\n  await uploader.uploadFile(file, 'destination/path/on/cloud');\n}\n```"
  },
  {
    "task": "Create a real-time chat system using a library that supports asynchronous communication.",
    "code": "```dart\nimport 'dart:async';\nimport 'package:web_socket_channel/web_socket_channel.dart';\n\nclass ChatService {\n  final WebSocketChannel _channel;\n  final StreamController<String> _messageController = StreamController.broadcast();\n\n  ChatService(String url)\n      : _channel = WebSocketChannel.connect(Uri.parse(url)) {\n    _channel.stream.listen((message) {\n      _messageController.add(message);\n    });\n  }\n\n  Stream<String> get messages => _messageController.stream;\n\n  void sendMessage(String message) {\n    _channel.sink.add(message);\n  }\n\n  void close() {\n    _channel.sink.close();\n    _messageController.close();\n  }\n}\n\nvoid main() {\n  final chatService = ChatService('ws://example.com/chat');\n\n  chatService.messages.listen((message) {\n    print('Received: $message');\n  });\n\n  chatService.sendMessage('Hello, world!');\n\n  // Simulate sending a message after 5 seconds\n  Future.delayed(Duration(seconds: 5), () {\n    chatService.sendMessage('Another message');\n  });\n}\n```"
  },
  {
    "task": "Use a library to generate and manipulate UUIDs for unique identification in your application.",
    "code": "```dart\nimport 'package:uuid/uuid.dart';\n\nvoid main() {\n  var uuid = Uuid();\n\n  // Generate a new UUID\n  String uniqueId = uuid.v4();\n\n  // Output the generated UUID\n  print('Generated UUID: $uniqueId');\n\n  // You can also manipulate or parse UUIDs using the Uuid library\n  var parsedUuid = uuid.parse(uniqueId);\n  print('Parsed UUID: $parsedUuid');\n}\n```"
  },
  {
    "task": "Build a desktop application that uses a library for creating graphical user interfaces.",
    "code": "```dart\nimport 'package:flutter/material.dart';\nimport 'package:desktop_window/desktop_window.dart';\n\nvoid main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n  await DesktopWindow.setWindowSize(Size(800, 600));\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Desktop App',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: MyHomePage(),\n    );\n  }\n}\n\nclass MyHomePage extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Desktop Application'),\n      ),\n      body: Center(\n        child: Text('Hello, Desktop!'),\n      ),\n    );\n  }\n}\n```"
  },
  {
    "task": "Develop an algorithm that finds the shortest path in a graph using a library that provides graph algorithms.",
    "code": "```dart\nimport 'package:graphs/graphs.dart';\n\nvoid main() {\n  // Sample graph represented as an adjacency list\n  final graph = {\n    'A': {'B': 1, 'C': 4},\n    'B': {'A': 1, 'C': 2, 'D': 5},\n    'C': {'A': 4, 'B': 2, 'D': 1},\n    'D': {'B': 5, 'C': 1},\n  };\n\n  final shortestPath = dijkstraShortestPath(graph, 'A', 'D');\n  print('Shortest path from A to D: $shortestPath');\n}\n\nList<String> dijkstraShortestPath(Map<String, Map<String, int>> graph, String start, String end) {\n  final dijkstra = Dijkstra(graph);\n  return dijkstra.findPathFrom(start).to(end);\n}\n```"
  },
  {
    "task": "Create a digital clock application that uses a library for handling time events.",
    "code": "```dart\nimport 'package:flutter/material.dart';\nimport 'package:intl/intl.dart';\nimport 'dart:async';\n\nvoid main() {\n  runApp(DigitalClockApp());\n}\n\nclass DigitalClockApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: ClockScreen(),\n    );\n  }\n}\n\nclass ClockScreen extends StatefulWidget {\n  @override\n  _ClockScreenState createState() => _ClockScreenState();\n}\n\nclass _ClockScreenState extends State<ClockScreen> {\n  String _timeString;\n\n  @override\n  void initState() {\n    super.initState();\n    _timeString = _formatTime(DateTime.now());\n    Timer.periodic(Duration(seconds: 1), (Timer t) => _getTime());\n  }\n\n  void _getTime() {\n    final String formattedTime = _formatTime(DateTime.now());\n    setState(() {\n      _timeString = formattedTime;\n    });\n  }\n\n  String _formatTime(DateTime time) {\n    return DateFormat('HH:mm:ss').format(time);\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Digital Clock'),\n      ),\n      body: Center(\n        child: Text(\n          _timeString,\n          style: TextStyle(fontSize: 48),\n        ),\n      ),\n    );\n  }\n}\n```"
  },
  {
    "task": "Write a program that uses a library to convert between different units of measurement.",
    "code": "```dart\nimport 'package:units_converter/units_converter.dart';\n\nvoid main() {\n  var length = Length();\n  length.convert(LENGTH.meters, LENGTH.kilometers, 1000);\n  print('1000 meters in kilometers: ${length.kilometers} km');\n\n  var temperature = Temperature();\n  temperature.convert(TEMPERATURE.celsius, TEMPERATURE.fahrenheit, 25);\n  print('25 degrees Celsius in Fahrenheit: ${temperature.fahrenheit} \u00b0F');\n}\n```"
  },
  {
    "task": "Use a library to implement a caching mechanism for improving application performance.",
    "code": "```dart\nimport 'package:cached_network_image/cached_network_image.dart';\n\nclass ImageCache {\n  final String imageUrl;\n\n  ImageCache(this.imageUrl);\n\n  Widget getImage() {\n    return CachedNetworkImage(\n      imageUrl: imageUrl,\n      placeholder: (context, url) => CircularProgressIndicator(),\n      errorWidget: (context, url, error) => Icon(Icons.error),\n    );\n  }\n}\n\nvoid main() {\n  var imageCache = ImageCache('https://example.com/image.png');\n  runApp(MaterialApp(\n    home: Scaffold(\n      appBar: AppBar(title: Text('Image Cache Example')),\n      body: Center(child: imageCache.getImage()),\n    ),\n  ));\n}\n```"
  },
  {
    "task": "Build an e-commerce platform that integrates a payment processing library for handling transactions.",
    "code": "```dart\n// Importing necessary libraries\nimport 'package:payment_processing/payment_processing.dart';\n\n// E-commerce platform class\nclass ECommercePlatform {\n  // Payment processor instance\n  final PaymentProcessor paymentProcessor;\n\n  // Constructor accepting a payment processor\n  ECommercePlatform(this.paymentProcessor);\n\n  // Method to handle transactions\n  Future<void> processTransaction(double amount, String currency, String paymentMethod) async {\n    try {\n      // Create a transaction\n      Transaction transaction = Transaction(\n        amount: amount,\n        currency: currency,\n        paymentMethod: paymentMethod,\n      );\n\n      // Process the transaction using the payment library\n      final result = await paymentProcessor.process(transaction);\n\n      // Check transaction result\n      if (result.isSuccess) {\n        print('Transaction successful: ${result.transactionId}');\n      } else {\n        print('Transaction failed: ${result.errorMessage}');\n      }\n    } catch (e) {\n      print('Error processing transaction: $e');\n    }\n  }\n}\n\n// Example usage\nvoid main() {\n  // Initialize a payment processor\n  PaymentProcessor paymentProcessor = PaymentProcessor(apiKey: 'your_api_key');\n\n  // Create an instance of the e-commerce platform\n  ECommercePlatform platform = ECommercePlatform(paymentProcessor);\n\n  // Process a transaction\n  platform.processTransaction(99.99, 'USD', 'credit_card');\n}\n```"
  },
  {
    "task": "Create a to-do list application that stores data locally using a library for file management.",
    "code": "```dart\nimport 'dart:convert';\nimport 'dart:io';\n\nclass Todo {\n  String title;\n  bool isDone;\n\n  Todo({\n    required this.title,\n    this.isDone = false,\n  });\n\n  Map<String, dynamic> toJson() => {\n        'title': title,\n        'isDone': isDone,\n      };\n\n  factory Todo.fromJson(Map<String, dynamic> json) {\n    return Todo(\n      title: json['title'],\n      isDone: json['isDone'],\n    );\n  }\n}\n\nclass TodoList {\n  List<Todo> _todos = [];\n  final String _filePath = 'todos.json';\n\n  TodoList() {\n    _loadFromFile();\n  }\n\n  void addTodo(String title) {\n    _todos.add(Todo(title: title));\n    _saveToFile();\n  }\n\n  void toggleTodoStatus(int index) {\n    if (index >= 0 && index < _todos.length) {\n      _todos[index].isDone = !_todos[index].isDone;\n      _saveToFile();\n    }\n  }\n\n  void removeTodoAt(int index) {\n    if (index >= 0 && index < _todos.length) {\n      _todos.removeAt(index);\n      _saveToFile();\n    }\n  }\n\n  List<Todo> get todos => List.unmodifiable(_todos);\n\n  void _saveToFile() {\n    final file = File(_filePath);\n    final jsonString = jsonEncode(_todos.map((todo) => todo.toJson()).toList());\n    file.writeAsStringSync(jsonString);\n  }\n\n  void _loadFromFile() {\n    final file = File(_filePath);\n    if (file.existsSync()) {\n      final jsonString = file.readAsStringSync();\n      final List<dynamic> jsonData = jsonDecode(jsonString);\n      _todos = jsonData.map((e) => Todo.fromJson(e)).toList();\n    }\n  }\n}\n\nvoid main() {\n  final todoList = TodoList();\n  todoList.addTodo(\"Buy groceries\");\n  todoList.addTodo(\"Read a book\");\n  print(todoList.todos);\n\n  todoList.toggleTodoStatus(0);\n  print(todoList.todos);\n\n  todoList.removeTodoAt(1);\n  print(todoList.todos);\n}\n```"
  },
  {
    "task": "Develop a system that monitors server health using a library that provides network utilities.",
    "code": "```dart\nimport 'dart:async';\nimport 'package:http/http.dart' as http;\n\nclass ServerHealthMonitor {\n  final String serverUrl;\n\n  ServerHealthMonitor(this.serverUrl);\n\n  Future<void> checkServerHealth() async {\n    try {\n      final response = await http.get(Uri.parse(serverUrl));\n      if (response.statusCode == 200) {\n        print('Server is healthy');\n      } else {\n        print('Server responded with status code: ${response.statusCode}');\n      }\n    } catch (e) {\n      print('Failed to connect to server: $e');\n    }\n  }\n\n  void startMonitoring(Duration interval) {\n    Timer.periodic(interval, (timer) => checkServerHealth());\n  }\n}\n\nvoid main() {\n  final monitor = ServerHealthMonitor('http://your-server-url.com');\n  monitor.startMonitoring(Duration(seconds: 60));\n}\n```"
  },
  {
    "task": "Implement a program that detects language from a given text using a language detection library.",
    "code": "```dart\nimport 'package:language_detect/language_detect.dart';\n\nvoid main() {\n  final detector = LanguageDetector();\n  detector.addLanguages(['en', 'es', 'fr', 'de', 'it']); // Add languages you want to detect\n\n  String text = \"Bonjour tout le monde\"; // Example text\n  final detectedLanguage = detector.detect(text);\n\n  print('Detected language: $detectedLanguage');\n}\n```"
  },
  {
    "task": "Write a script that sends notifications to a mobile device using a push notification library.",
    "code": "```dart\nimport 'package:firebase_messaging/firebase_messaging.dart';\n\nvoid main() async {\n  FirebaseMessaging messaging = FirebaseMessaging.instance;\n\n  // Request permission for push notifications\n  NotificationSettings settings = await messaging.requestPermission(\n    alert: true,\n    announcement: false,\n    badge: true,\n    carPlay: false,\n    criticalAlert: false,\n    provisional: false,\n    sound: true,\n  );\n\n  if (settings.authorizationStatus == AuthorizationStatus.authorized) {\n    print('User granted permission');\n  } else if (settings.authorizationStatus == AuthorizationStatus.provisional) {\n    print('User granted provisional permission');\n  } else {\n    print('User declined or has not accepted permission');\n  }\n\n  // Receiving messages\n  FirebaseMessaging.onMessage.listen((RemoteMessage message) {\n    print('Received a message: ${message.notification?.title}');\n  });\n\n  // Sending a test notification\n  String? token = await messaging.getToken();\n  print('Token: $token');\n}\n```"
  },
  {
    "task": "Use a library to generate reports in PDF format from application data.",
    "code": "```dart\nimport 'dart:io';\nimport 'package:pdf/pdf.dart';\nimport 'package:pdf/widgets.dart' as pw;\n\nvoid main() {\n  final pdf = pw.Document();\n\n  pdf.addPage(\n    pw.Page(\n      build: (pw.Context context) => pw.Center(\n        child: pw.Text('Hello, PDF!'),\n      ),\n    ),\n  );\n\n  final file = File('example.pdf');\n  file.writeAsBytesSync(pdf.save());\n}\n```"
  },
  {
    "task": "Build a program that performs statistical analysis on datasets using a statistical computing library.",
    "code": "```dart\nimport 'package:statistics/statistics.dart';\n\nvoid main() {\n  // Example dataset\n  List<double> dataset = [10.5, 23.4, 22.1, 18.7, 30.2, 25.3, 19.8];\n\n  // Calculate mean\n  double mean = dataset.statistics.mean;\n  print('Mean: $mean');\n\n  // Calculate median\n  double median = dataset.statistics.median;\n  print('Median: $median');\n\n  // Calculate standard deviation\n  double stdDev = dataset.statistics.standardDeviation;\n  print('Standard Deviation: $stdDev');\n\n  // Calculate variance\n  double variance = dataset.statistics.variance;\n  print('Variance: $variance');\n\n  // Calculate min and max\n  double min = dataset.statistics.min;\n  double max = dataset.statistics.max;\n  print('Min: $min, Max: $max');\n}\n```"
  },
  {
    "task": "Create an image gallery application that uses a library for image caching and lazy loading.",
    "code": "```dart\nimport 'package:flutter/material.dart';\nimport 'package:cached_network_image/cached_network_image.dart';\n\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Image Gallery',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: ImageGallery(),\n    );\n  }\n}\n\nclass ImageGallery extends StatelessWidget {\n  final List<String> imageUrls = [\n    'https://example.com/image1.jpg',\n    'https://example.com/image2.jpg',\n    'https://example.com/image3.jpg',\n    // Add more image URLs\n  ];\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Image Gallery'),\n      ),\n      body: GridView.builder(\n        gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(\n          crossAxisCount: 2,\n        ),\n        itemCount: imageUrls.length,\n        itemBuilder: (context, index) {\n          return CachedNetworkImage(\n            imageUrl: imageUrls[index],\n            placeholder: (context, url) => CircularProgressIndicator(),\n            errorWidget: (context, url, error) => Icon(Icons.error),\n            fit: BoxFit.cover,\n          );\n        },\n      ),\n    );\n  }\n}\n```"
  },
  {
    "task": "Develop a machine learning model that predicts outcomes using a machine learning library.",
    "code": "```dart\nimport 'package:ml_linalg/linalg.dart';\nimport 'package:ml_algo/ml_algo.dart';\n\nvoid main() {\n  // Sample data\n  final samples = Matrix.fromList([\n    [5.1, 3.5, 1.4, 0.2],\n    [4.9, 3.0, 1.4, 0.2],\n    [4.7, 3.2, 1.3, 0.2],\n    [4.6, 3.1, 1.5, 0.2],\n    [5.0, 3.6, 1.4, 0.2],\n  ]);\n\n  final labels = Matrix.fromList([\n    [1],\n    [1],\n    [1],\n    [1],\n    [1],\n  ]);\n\n  // Create and train a logistic regression model\n  final logisticRegressor = LogisticRegressor(samples, labels);\n\n  // Predict outcomes\n  final prediction = logisticRegressor.predict(Matrix.fromList([\n    [5.8, 2.7, 5.1, 1.9]\n  ]));\n\n  print('Predicted outcome: $prediction');\n}\n```"
  },
  {
    "task": "Implement a feature that automatically formats code according to style guidelines using a code formatter library.",
    "code": "```dart\nimport 'package:dart_style/dart_style.dart';\n\nString formatCode(String sourceCode) {\n  final formatter = DartFormatter();\n  return formatter.format(sourceCode);\n}\n\nvoid main() {\n  String rawCode = \"\"\"\nvoid main() {\n   print('Hello, world!');\n   }\n\"\"\";\n\n  String formattedCode = formatCode(rawCode);\n  print(formattedCode);\n}\n```"
  },
  {
    "task": "Write a program that generates barcodes using a library for barcode generation.",
    "code": "```dart\nimport 'package:barcode/barcode.dart';\nimport 'dart:io';\n\nvoid main() {\n  final barcode = Barcode.code128();\n  final svg = barcode.toSvg('Hello Dart!', width: 200, height: 80, drawText: false);\n\n  File('barcode.svg').writeAsStringSync(svg);\n}\n```"
  },
  {
    "task": "Use a library to create interactive maps for displaying geographical data in your application.",
    "code": "```dart\nimport 'package:flutter/material.dart';\nimport 'package:flutter_map/flutter_map.dart';\nimport 'package:latlong2/latlong.dart';\n\nvoid main() {\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: MapScreen(),\n    );\n  }\n}\n\nclass MapScreen extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Interactive Map'),\n      ),\n      body: FlutterMap(\n        options: MapOptions(\n          center: LatLng(51.5, -0.09),\n          zoom: 13.0,\n        ),\n        layers: [\n          TileLayerOptions(\n            urlTemplate:\n                'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n            subdomains: ['a', 'b', 'c'],\n          ),\n          MarkerLayerOptions(\n            markers: [\n              Marker(\n                width: 80.0,\n                height: 80.0,\n                point: LatLng(51.5, -0.09),\n                builder: (ctx) => Container(\n                  child: Icon(\n                    Icons.location_on,\n                    color: Colors.red,\n                    size: 40.0,\n                  ),\n                ),\n              ),\n            ],\n          ),\n        ],\n      ),\n    );\n  }\n}\n```"
  },
  {
    "task": "Build a simulation that models fluid dynamics using a library for physics simulations.",
    "code": "```dart\nimport 'package:flame/flame.dart';\nimport 'package:forge2d/forge2d.dart';\n\nvoid main() {\n  Flame.device.fullScreen();\n  Flame.device.setOrientation(DeviceOrientation.portraitUp);\n\n  final world = World(Vector2(0, 10)); // Gravity\n\n  final groundBodyDef = BodyDef()\n    ..type = BodyType.static\n    ..position = Vector2(0, 20);\n  final groundBody = world.createBody(groundBodyDef);\n\n  final groundShape = PolygonShape();\n  groundShape.setAsBox(50.0, 10.0);\n\n  groundBody.createFixtureFromShape(groundShape);\n\n  final particleBodyDef = BodyDef()\n    ..type = BodyType.dynamic\n    ..position = Vector2(0, 5);\n  final particleBody = world.createBody(particleBodyDef);\n\n  final particleShape = CircleShape()..radius = 1.0;\n  final particleFixtureDef = FixtureDef()\n    ..shape = particleShape\n    ..density = 1.0\n    ..friction = 0.3\n    ..restitution = 0.5;\n\n  particleBody.createFixture(particleFixtureDef);\n\n  for (int i = 0; i < 60; i++) {\n    world.stepDt(1 / 60, 8, 3);\n  }\n}\n```"
  },
  {
    "task": "Create a program that reads barcodes from images using a library for barcode scanning.",
    "code": "```dart\nimport 'dart:io';\nimport 'package:image/image.dart' as img;\nimport 'package:zxing2/qrcode.dart';\n\nvoid main() {\n  final imagePath = 'path/to/your/barcode_image.png';\n  final image = img.decodeImage(File(imagePath).readAsBytesSync());\n\n  if (image != null) {\n    final source = RGBLuminanceSource(image.width, image.height, image.getBytes());\n    final bitmap = BinaryBitmap(GlobalHistogramBinarizer(source));\n    final reader = MultiFormatReader();\n\n    try {\n      final result = reader.decode(bitmap);\n      print('Barcode text: ${result.text}');\n    } catch (e) {\n      print('Error decoding barcode: $e');\n    }\n  } else {\n    print('Error loading image.');\n  }\n}\n```"
  },
  {
    "task": "Develop a feature that performs spell checking using a library for text processing.",
    "code": "```dart\nimport 'package:spell_check_english/spell_check_english.dart';\n\nvoid main() {\n  final spellChecker = SpellCheckEnglish();\n\n  String text = \"Ths is a smple txt with som speling erors.\";\n\n  List<SpellingCorrection> corrections = spellChecker.check(text);\n\n  if (corrections.isEmpty) {\n    print(\"No spelling errors found.\");\n  } else {\n    for (var correction in corrections) {\n      print(\n          \"Incorrect word: ${correction.bad} -> Suggestions: ${correction.suggestions.join(', ')}\");\n    }\n  }\n}\n```"
  },
  {
    "task": "Implement a service that aggregates news articles from various sources using a library for web content aggregation.",
    "code": "```dart\nimport 'package:http/http.dart' as http;\nimport 'dart:convert';\n\nclass NewsAggregatorService {\n  final List<String> sources;\n\n  NewsAggregatorService(this.sources);\n\n  Future<List<Article>> fetchArticles() async {\n    List<Article> articles = [];\n    for (var source in sources) {\n      final response = await http.get(Uri.parse(source));\n      if (response.statusCode == 200) {\n        final List<dynamic> data = json.decode(response.body);\n        articles.addAll(data.map((item) => Article.fromJson(item)).toList());\n      }\n    }\n    return articles;\n  }\n}\n\nclass Article {\n  final String title;\n  final String description;\n  final String url;\n\n  Article({required this.title, required this.description, required this.url});\n\n  factory Article.fromJson(Map<String, dynamic> json) {\n    return Article(\n      title: json['title'],\n      description: json['description'],\n      url: json['url'],\n    );\n  }\n}\n```"
  },
  {
    "task": "Write a script that converts spoken language to text using a speech recognition library.",
    "code": "```dart\nimport 'package:speech_to_text/speech_to_text.dart' as stt;\n\nvoid main() async {\n  final stt.SpeechToText speech = stt.SpeechToText();\n\n  bool available = await speech.initialize(\n    onStatus: (status) => print('Status: $status'),\n    onError: (error) => print('Error: $error'),\n  );\n\n  if (available) {\n    speech.listen(onResult: (result) {\n      print('Recognized text: ${result.recognizedWords}');\n    });\n  } else {\n    print('The user has denied the use of speech recognition.');\n  }\n}\n```"
  },
  {
    "task": "Use a library to implement a feature that tracks user behavior in a web application.",
    "code": "```dart\nimport 'package:universal_html/html.dart' as html;\nimport 'package:js/js.dart';\n\n@JS()\nexternal void trackEvent(String eventName, dynamic eventData);\n\nvoid main() {\n  html.window.onClick.listen((event) {\n    trackEvent('click', {\n      'x': event.client.x,\n      'y': event.client.y,\n      'target': event.target.toString()\n    });\n  });\n\n  html.window.onKeyPress.listen((event) {\n    trackEvent('keypress', {\n      'key': event.key,\n      'code': event.code\n    });\n  });\n}\n```"
  },
  {
    "task": "Build a program that analyzes sentiment in social media posts using a sentiment analysis library.",
    "code": "```dart\nimport 'package:sentiment_dart/sentiment_dart.dart';\n\nvoid main() {\n  var sentiment = Sentiment();\n  var socialMediaPosts = [\n    \"I love this product! It's amazing.\",\n    \"This is the worst experience I've ever had.\",\n    \"It's okay, not great but not terrible either.\"\n  ];\n\n  for (var post in socialMediaPosts) {\n    var analysis = sentiment.analysis(post);\n    print('Post: \"$post\"');\n    print('Sentiment Score: ${analysis['score']}');\n    print('Positive Words: ${analysis['positive']}');\n    print('Negative Words: ${analysis['negative']}\\n');\n  }\n}\n```"
  },
  {
    "task": "Create a utility that detects plagiarism in text using a library for text comparison.",
    "code": "```dart\nimport 'package:string_similarity/string_similarity.dart';\n\nclass PlagiarismDetector {\n  final double threshold;\n\n  PlagiarismDetector({this.threshold = 0.8});\n\n  bool isPlagiarized(String original, String comparison) {\n    double similarity = original.similarityTo(comparison);\n    return similarity >= threshold;\n  }\n}\n\nvoid main() {\n  var detector = PlagiarismDetector();\n\n  String text1 = \"This is a sample text for plagiarism detection.\";\n  String text2 = \"This is a sample text for checking plagiarism.\";\n\n  bool result = detector.isPlagiarized(text1, text2);\n  print(result ? 'Plagiarism detected' : 'No plagiarism detected');\n}\n```"
  },
  {
    "task": "Develop a program that predicts weather trends using a library for time series forecasting.",
    "code": "```dart\nimport 'package:some_forecasting_package/forecasting.dart'; // Hypothetical library for time series forecasting\n\nvoid main() {\n  // Sample historical weather data (e.g., daily temperatures)\n  List<double> historicalData = [20.5, 21.0, 19.5, 22.0, 23.5, 21.5, 20.0];\n\n  // Initialize the forecasting model from the library\n  var model = TimeSeriesForecastingModel();\n\n  // Fit the model with the historical weather data\n  model.fit(historicalData);\n\n  // Predict future weather trends\n  List<double> forecast = model.predict(7); // Predict for the next 7 days\n\n  // Output the forecasted weather trends\n  print('Forecasted weather trends for the next 7 days: $forecast');\n}\n```"
  },
  {
    "task": "Implement a feature that performs facial recognition using a library specialized for biometric analysis.",
    "code": "```dart\nimport 'package:face_recognition/face_recognition.dart';\n\nvoid main() async {\n  // Initialize the face recognition library\n  await FaceRecognition.initialize();\n\n  // Load an image for facial recognition\n  final imagePath = 'assets/person.jpg';\n  final image = await loadImage(imagePath);\n\n  // Perform facial recognition\n  final result = await FaceRecognition.recognizeFace(image);\n\n  if (result.isNotEmpty) {\n    print('Face recognized: ${result.first}');\n  } else {\n    print('No face recognized.');\n  }\n}\n\nFuture<Image> loadImage(String path) async {\n  // Simulating loading an image from a file\n  return Image.asset(path);\n}\n```"
  },
  {
    "task": "Write a program that interacts with blockchain networks using a library for blockchain communication.",
    "code": "```dart\nimport 'package:web3dart/web3dart.dart';\nimport 'package:http/http.dart';\n\nvoid main() async {\n  // Connect to a blockchain network (e.g., Ethereum)\n  final client = Web3Client('https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID', Client());\n\n  // Example: Get the balance of an Ethereum address\n  final address = EthereumAddress.fromHex('0xYourEthereumAddress');\n  \n  EtherAmount balance = await client.getBalance(address);\n  print('Balance: ${balance.getValueInUnit(EtherUnit.ether)} ETH');\n\n  // Close the client connection\n  client.dispose();\n}\n```"
  },
  {
    "task": "Use a library to perform image recognition tasks in your application.",
    "code": "```dart\nimport 'package:tflite/tflite.dart';\n\nvoid main() async {\n  await loadModel();\n  await performImageRecognition('assets/sample_image.jpg');\n}\n\nFuture<void> loadModel() async {\n  String? res = await Tflite.loadModel(\n    model: \"assets/model.tflite\",\n    labels: \"assets/labels.txt\",\n  );\n  print(res);\n}\n\nFuture<void> performImageRecognition(String imagePath) async {\n  var recognitions = await Tflite.runModelOnImage(\n    path: imagePath,\n    numResults: 5,\n    threshold: 0.5,\n    imageMean: 127.5,\n    imageStd: 127.5,\n  );\n  print(recognitions);\n  await Tflite.close();\n}\n```"
  },
  {
    "task": "Build a program that converts audio files from one format to another using an audio conversion library.",
    "code": "```dart\nimport 'package:audioplayers/audioplayers.dart';\nimport 'package:audio_converter/audio_converter.dart';\n\nvoid main() async {\n  String inputFilePath = 'input.mp3';\n  String outputFilePath = 'output.wav';\n\n  AudioConverter converter = AudioConverter();\n  \n  try {\n    bool success = await converter.convert(inputFilePath, outputFilePath);\n    if (success) {\n      print('Audio conversion successful!');\n    } else {\n      print('Audio conversion failed.');\n    }\n  } catch (e) {\n    print('An error occurred: $e');\n  }\n}\n```"
  },
  {
    "task": "Create a web application that uses a library for rendering 3D graphics.",
    "code": "```dart\nimport 'dart:html';\nimport 'package:three_dart/three_dart.dart';\n\nvoid main() {\n  var renderer = WebGLRenderer();\n  document.body?.append(renderer.domElement);\n\n  var scene = Scene();\n  var camera = PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n\n  var geometry = BoxGeometry(1, 1, 1);\n  var material = MeshBasicMaterial({'color': 0x00ff00});\n  var cube = Mesh(geometry, material);\n\n  scene.add(cube);\n\n  camera.position.z = 5;\n\n  void animate(num time) {\n    window.requestAnimationFrame(animate);\n    cube.rotation.x += 0.01;\n    cube.rotation.y += 0.01;\n    renderer.render(scene, camera);\n  }\n\n  animate(0);\n}\n```"
  },
  {
    "task": "Develop a feature that performs currency conversion using a library for financial calculations.",
    "code": "```dart\nimport 'package:money2/money2.dart';\n\nvoid main() {\n  // Define a currency\n  final Currency usd = Currency.create('USD', 2);\n\n  // Create an amount in USD\n  Money amountInUSD = Money.fromInt(1000, usd); // $10.00\n\n  // Assume a conversion rate from USD to EUR\n  double conversionRate = 0.85;\n  \n  // Convert the amount to EUR\n  Money amountInEUR = amountInUSD * conversionRate;\n\n  // Output the result\n  print('Converted amount: ${amountInEUR.toString()} EUR');\n}\n```"
  },
  {
    "task": "Implement a program that manages user sessions using a library for session handling.",
    "code": "```dart\nimport 'package:shelf/shelf.dart';\nimport 'package:shelf/shelf_io.dart' as shelf_io;\nimport 'package:shelf_session/shelf_session.dart';\n\nvoid main() async {\n  final sessionHandler = SessionHandler();\n\n  final handler = const Pipeline()\n      .addMiddleware(sessionHandler.middleware)\n      .addHandler((Request request) {\n    final session = request.session;\n    session['counter'] = (session['counter'] ?? 0) + 1;\n    return Response.ok('Session counter: ${session['counter']}');\n  });\n\n  final server = await shelf_io.serve(handler, 'localhost', 8080);\n  print('Server running on localhost:${server.port}');\n}\n```"
  },
  {
    "task": "Write a script that automates browser actions using a browser automation library.",
    "code": "```dart\nimport 'package:puppeteer/puppeteer.dart';\n\nvoid main() async {\n  // Launch a new browser instance\n  var browser = await puppeteer.launch();\n  \n  // Open a new page\n  var page = await browser.newPage();\n  \n  // Navigate to a website\n  await page.goto('https://example.com');\n  \n  // Take a screenshot\n  await page.screenshot(options: ScreenshotOptions(path: 'screenshot.png'));\n  \n  // Close the browser\n  await browser.close();\n}\n```"
  },
  {
    "task": "Use a library to implement data serialization and deserialization in your application.",
    "code": "```dart\nimport 'dart:convert';\n\nclass Person {\n  String name;\n  int age;\n\n  Person(this.name, this.age);\n\n  // Serialize to JSON\n  String toJson() {\n    return jsonEncode({'name': name, 'age': age});\n  }\n\n  // Deserialize from JSON\n  factory Person.fromJson(String jsonString) {\n    Map<String, dynamic> jsonMap = jsonDecode(jsonString);\n    return Person(jsonMap['name'], jsonMap['age']);\n  }\n}\n\nvoid main() {\n  Person person = Person('Alice', 30);\n\n  // Serialize\n  String jsonString = person.toJson();\n  print('Serialized: $jsonString');\n\n  // Deserialize\n  Person deserializedPerson = Person.fromJson(jsonString);\n  print('Deserialized: ${deserializedPerson.name}, ${deserializedPerson.age}');\n}\n```"
  },
  {
    "task": "Build an application that generates interactive reports using a library for data visualization.",
    "code": "```dart\nimport 'package:charts_flutter/flutter.dart' as charts;\nimport 'package:flutter/material.dart';\n\nclass InteractiveReport extends StatelessWidget {\n  final List<charts.Series> seriesList;\n  final bool animate;\n\n  InteractiveReport(this.seriesList, {required this.animate});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Interactive Report'),\n      ),\n      body: Center(\n        child: charts.BarChart(\n          seriesList,\n          animate: animate,\n          behaviors: [\n            charts.SelectNearest(),\n            charts.DomainHighlighter(),\n          ],\n        ),\n      ),\n    );\n  }\n}\n\nclass ReportData {\n  final String category;\n  final int value;\n\n  ReportData(this.category, this.value);\n}\n\nList<charts.Series<ReportData, String>> _createSampleData() {\n  final data = [\n    ReportData('Category A', 25),\n    ReportData('Category B', 50),\n    ReportData('Category C', 30),\n  ];\n\n  return [\n    charts.Series<ReportData, String>(\n      id: 'Reports',\n      colorFn: (_, __) => charts.MaterialPalette.blue.shadeDefault,\n      domainFn: (ReportData data, _) => data.category,\n      measureFn: (ReportData data, _) => data.value,\n      data: data,\n    )\n  ];\n}\n\nvoid main() {\n  runApp(MaterialApp(\n    home: InteractiveReport(_createSampleData(), animate: true),\n  ));\n}\n```"
  },
  {
    "task": "Create a system that backs up and restores data using a library for file system operations.",
    "code": "```dart\nimport 'dart:io';\n\nclass FileSystemBackup {\n  final Directory sourceDir;\n  final Directory backupDir;\n\n  FileSystemBackup(this.sourceDir, this.backupDir);\n\n  Future<void> backup() async {\n    if (!await backupDir.exists()) {\n      await backupDir.create(recursive: true);\n    }\n    await for (var entity in sourceDir.list(recursive: true)) {\n      if (entity is File) {\n        final relativePath = entity.path.replaceFirst(sourceDir.path, '');\n        final backupFile = File('${backupDir.path}$relativePath');\n        await backupFile.create(recursive: true);\n        await entity.copy(backupFile.path);\n      }\n    }\n  }\n\n  Future<void> restore() async {\n    await for (var entity in backupDir.list(recursive: true)) {\n      if (entity is File) {\n        final relativePath = entity.path.replaceFirst(backupDir.path, '');\n        final originalFile = File('${sourceDir.path}$relativePath');\n        await originalFile.create(recursive: true);\n        await entity.copy(originalFile.path);\n      }\n    }\n  }\n}\n\nvoid main() async {\n  final sourceDir = Directory('path/to/source');\n  final backupDir = Directory('path/to/backup');\n\n  final backupSystem = FileSystemBackup(sourceDir, backupDir);\n  \n  await backupSystem.backup();\n  print('Backup completed.');\n\n  await backupSystem.restore();\n  print('Restore completed.');\n}\n```"
  },
  {
    "task": "Develop a feature that performs real-time language translation using a translation library.",
    "code": "```dart\nimport 'package:translator/translator.dart';\n\nclass RealTimeTranslator {\n  final GoogleTranslator _translator = GoogleTranslator();\n\n  Future<String> translateText(String text, String fromLang, String toLang) async {\n    try {\n      var translation = await _translator.translate(text, from: fromLang, to: toLang);\n      return translation.text;\n    } catch (e) {\n      return 'Error: Unable to translate text.';\n    }\n  }\n}\n\nvoid main() async {\n  var translator = RealTimeTranslator();\n  var translatedText = await translator.translateText('Hello, world!', 'en', 'es');\n  print(translatedText);\n}\n```"
  },
  {
    "task": "Implement a program that tracks stock market prices using a library for financial data retrieval.",
    "code": "```dart\nimport 'package:http/http.dart' as http;\nimport 'dart:convert';\n\nclass StockPriceTracker {\n  final String apiUrl;\n\n  StockPriceTracker(this.apiUrl);\n\n  Future<double?> getStockPrice(String symbol) async {\n    final response = await http.get(Uri.parse('$apiUrl/stock/$symbol/price'));\n    if (response.statusCode == 200) {\n      final data = jsonDecode(response.body);\n      return data['price'];\n    } else {\n      print('Failed to load stock price');\n      return null;\n    }\n  }\n}\n\nvoid main() async {\n  final tracker = StockPriceTracker('https://api.example.com');\n  final price = await tracker.getStockPrice('AAPL');\n  if (price != null) {\n    print('The current price of AAPL is \\$${price.toStringAsFixed(2)}');\n  }\n}\n```"
  },
  {
    "task": "Write a script that generates and validates JSON Web Tokens using a library for JWT handling.",
    "code": "```dart\nimport 'package:jaguar_jwt/jaguar_jwt.dart';\n\nvoid main() {\n  // Define a secret key\n  final String secret = 'your-256-bit-secret';\n\n  // Create a JWT\n  final claimSet = JwtClaim(\n    subject: 'user@example.com',\n    issuer: 'your-application',\n    audience: <String>['your-audience'],\n    otherClaims: <String, dynamic>{'typ': 'JWT'},\n    maxAge: const Duration(minutes: 5),\n  );\n  final token = issueJwtHS256(claimSet, secret);\n  print('Generated token: $token');\n\n  // Validate the JWT\n  try {\n    final JwtClaim decodedClaimSet = verifyJwtHS256Signature(token, secret);\n    print('Token is valid. Payload: ${decodedClaimSet.toJson()}');\n  } catch (e) {\n    print('Token validation failed: $e');\n  }\n}\n```"
  },
  {
    "task": "Use a library to build a feature that synchronizes data across multiple devices.",
    "code": "```dart\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_core/firebase_core.dart';\n\nclass DataSynchronizer {\n  final FirebaseFirestore _firestore;\n\n  DataSynchronizer(this._firestore);\n\n  Future<void> synchronizeData(String collectionName, Map<String, dynamic> data) async {\n    try {\n      // Add data to Firestore collection\n      await _firestore.collection(collectionName).add(data);\n    } catch (e) {\n      print('Error synchronizing data: $e');\n    }\n  }\n\n  Stream<QuerySnapshot> getDataStream(String collectionName) {\n    // Listen for changes in the Firestore collection\n    return _firestore.collection(collectionName).snapshots();\n  }\n}\n\nFuture<void> main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n  await Firebase.initializeApp();\n\n  final firestore = FirebaseFirestore.instance;\n  final synchronizer = DataSynchronizer(firestore);\n\n  final data = {\n    'device': 'Device1',\n    'syncTime': DateTime.now().toString(),\n  };\n\n  await synchronizer.synchronizeData('devices', data);\n\n  synchronizer.getDataStream('devices').listen((snapshot) {\n    for (var doc in snapshot.docs) {\n      print('Data from ${doc['device']}: ${doc['syncTime']}');\n    }\n  });\n}\n```"
  },
  {
    "task": "Build a program that implements pattern recognition using a library for machine learning.",
    "code": "```dart\nimport 'package:ml_linalg/matrix.dart';\nimport 'package:ml_linalg/vector.dart';\nimport 'package:ml_algo/ml_algo.dart';\n\nvoid main() {\n  // Sample data for training\n  final features = Matrix.fromList([\n    [5.1, 3.5, 1.4, 0.2],\n    [4.9, 3.0, 1.4, 0.2],\n    [4.7, 3.2, 1.3, 0.2],\n    [4.6, 3.1, 1.5, 0.2],\n    [5.0, 3.6, 1.4, 0.2],\n    [5.4, 3.9, 1.7, 0.4],\n    [4.6, 3.4, 1.4, 0.3],\n    [5.0, 3.4, 1.5, 0.2],\n    [4.4, 2.9, 1.4, 0.2],\n    [4.9, 3.1, 1.5, 0.1],\n  ]);\n\n  final labels = Vector.fromList([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);\n\n  // Create and train the classifier\n  final classifier = KnnClassifier(\n    features,\n    labels,\n    numberOfNeighbours: 3,\n  );\n\n  // Create a new sample for prediction\n  final testSample = Vector.fromList([5.0, 3.5, 1.5, 0.2]);\n\n  // Predict the class of the new sample\n  final predictedClass = classifier.predict(testSample);\n\n  print('Predicted class: $predictedClass');\n}\n```"
  },
  {
    "task": "Create an email client that uses a library for IMAP and POP3 communication.",
    "code": "```dart\nimport 'package:imap_client/imap_client.dart';\nimport 'package:pop3_client/pop3_client.dart';\n\nclass EmailClient {\n  final ImapClient _imapClient;\n  final Pop3Client _pop3Client;\n\n  EmailClient(String imapHost, int imapPort, String pop3Host, int pop3Port, String username, String password)\n      : _imapClient = ImapClient(imapHost, imapPort, username, password),\n        _pop3Client = Pop3Client(pop3Host, pop3Port, username, password);\n\n  Future<void> connectImap() async {\n    await _imapClient.connect();\n  }\n\n  Future<void> connectPop3() async {\n    await _pop3Client.connect();\n  }\n\n  Future<void> fetchEmailsImap() async {\n    var emails = await _imapClient.fetchEmails();\n    for (var email in emails) {\n      print(email.subject);\n    }\n  }\n\n  Future<void> fetchEmailsPop3() async {\n    var emails = await _pop3Client.fetchEmails();\n    for (var email in emails) {\n      print(email.subject);\n    }\n  }\n\n  Future<void> disconnectImap() async {\n    await _imapClient.disconnect();\n  }\n\n  Future<void> disconnectPop3() async {\n    await _pop3Client.disconnect();\n  }\n}\n\nvoid main() async {\n  var emailClient = EmailClient('imap.example.com', 993, 'pop3.example.com', 110, 'user@example.com', 'password');\n  await emailClient.connectImap();\n  await emailClient.fetchEmailsImap();\n  await emailClient.disconnectImap();\n\n  await emailClient.connectPop3();\n  await emailClient.fetchEmailsPop3();\n  await emailClient.disconnectPop3();\n}\n```"
  },
  {
    "task": "Develop a feature that analyzes network traffic using a library for network monitoring.",
    "code": "```dart\nimport 'package:network_monitoring/network_monitoring.dart';\n\nvoid main() {\n  final networkMonitor = NetworkMonitor();\n\n  networkMonitor.onTrafficAnalyzed.listen((trafficData) {\n    analyzeTraffic(trafficData);\n  });\n\n  networkMonitor.startMonitoring();\n}\n\nvoid analyzeTraffic(TrafficData data) {\n  print('Analyzing network traffic:');\n  print('Source IP: ${data.sourceIp}');\n  print('Destination IP: ${data.destinationIp}');\n  print('Packet Size: ${data.packetSize}');\n  // Add more analysis logic here\n}\n```"
  },
  {
    "task": "Implement a program that manages user authentication and authorization using a security library.",
    "code": "```dart\nimport 'package:shelf/shelf.dart';\nimport 'package:shelf/shelf_io.dart' as shelf_io;\nimport 'package:shelf_jwt/shelf_jwt.dart';\nimport 'package:shelf_router/shelf_router.dart';\n\nvoid main() async {\n  final secret = 'my-secret-key';\n  final issuer = 'my-issuer';\n\n  final router = Router()\n    ..post('/login', (Request request) async {\n      // Simulate user login and token generation\n      final token = issueJwtHS256(claims: JwtClaim(issuer: issuer), key: secret);\n      return Response.ok(token);\n    })\n    ..get('/secure-endpoint', (Request request) async {\n      return Response.ok('Access granted to secure endpoint');\n    });\n\n  final handler = const Pipeline()\n      .addMiddleware(logRequests())\n      .addMiddleware(jwtMiddleware(secret: secret))\n      .addHandler(router);\n\n  final server = await shelf_io.serve(handler, 'localhost', 8080);\n  print('Server running on localhost:${server.port}');\n}\n```"
  },
  {
    "task": "Write a script that generates word clouds from text data using a library for text visualization.",
    "code": "```dart\nimport 'package:word_cloud/word_cloud.dart';\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  final textData = \"Dart is a client-optimized language for fast apps on any platform.\";\n  final wordCloud = WordCloud(\n    text: textData,\n    options: WordCloudOptions(\n      fontFamily: 'sans-serif',\n      colors: [Colors.blue, Colors.red, Colors.green, Colors.purple],\n    ),\n  );\n\n  runApp(MaterialApp(\n    home: Scaffold(\n      appBar: AppBar(title: Text('Word Cloud Example')),\n      body: Center(child: WordCloudWidget(wordCloud)),\n    ),\n  ));\n}\n```"
  },
  {
    "task": "Use a library to create a feature that schedules and sends automated emails.",
    "code": "```dart\nimport 'package:mailer/mailer.dart';\nimport 'package:mailer/smtp_server.dart';\nimport 'package:cron/cron.dart';\n\nvoid main() {\n  final smtpServer = SmtpServer('smtp.example.com',\n      username: 'yourEmail@example.com', password: 'yourPassword');\n\n  final cron = Cron();\n\n  cron.schedule(Schedule.parse('*/5 * * * *'), () async {\n    final message = Message()\n      ..from = Address('yourEmail@example.com', 'Your Name')\n      ..recipients.add('recipient@example.com')\n      ..subject = 'Scheduled Email'\n      ..text = 'This is an automated email sent every 5 minutes.';\n\n    try {\n      final sendReport = await send(message, smtpServer);\n      print('Message sent: ' + sendReport.toString());\n    } on MailerException catch (e) {\n      print('Message not sent. ${e.toString()}');\n    }\n  });\n}\n```"
  },
  {
    "task": "Build a mobile application that accesses device sensors using a library for hardware interaction.",
    "code": "```dart\nimport 'package:flutter/material.dart';\nimport 'package:sensors_plus/sensors_plus.dart';\n\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Sensor App',\n      home: SensorPage(),\n    );\n  }\n}\n\nclass SensorPage extends StatefulWidget {\n  @override\n  _SensorPageState createState() => _SensorPageState();\n}\n\nclass _SensorPageState extends State<SensorPage> {\n  double _accelerometerX = 0.0;\n  double _accelerometerY = 0.0;\n  double _accelerometerZ = 0.0;\n\n  @override\n  void initState() {\n    super.initState();\n    accelerometerEvents.listen((AccelerometerEvent event) {\n      setState(() {\n        _accelerometerX = event.x;\n        _accelerometerY = event.y;\n        _accelerometerZ = event.z;\n      });\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Sensor Data'),\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            Text('Accelerometer:'),\n            Text('X: $_accelerometerX'),\n            Text('Y: $_accelerometerY'),\n            Text('Z: $_accelerometerZ'),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```"
  },
  {
    "task": "Create a system that audits and logs file system changes using a library for filesystem monitoring.",
    "code": "```dart\nimport 'dart:async';\nimport 'dart:io';\nimport 'package:watcher/watcher.dart';\n\nclass FileSystemAuditor {\n  final String path;\n  final DirectoryWatcher _directoryWatcher;\n  final StreamSubscription<WatchEvent> _subscription;\n\n  FileSystemAuditor(this.path)\n      : _directoryWatcher = DirectoryWatcher(path),\n        _subscription = DirectoryWatcher(path).events.listen((event) {\n          _logChange(event);\n        });\n\n  static void _logChange(WatchEvent event) {\n    final logEntry = 'Change type: ${event.type}, Path: ${event.path}';\n    print(logEntry);  // In a real system, this might write to a file or database\n  }\n\n  void start() {\n    _subscription.onData((event) {\n      _logChange(event);\n    });\n  }\n\n  void stop() {\n    _subscription.cancel();\n  }\n}\n\nvoid main() {\n  final auditor = FileSystemAuditor('/path/to/directory');\n  auditor.start();\n\n  // To stop the auditor, call:\n  // auditor.stop();\n}\n```"
  },
  {
    "task": "Develop a feature that visualizes geospatial data using a library for geographic information systems.",
    "code": "```dart\nimport 'package:flutter/material.dart';\nimport 'package:google_maps_flutter/google_maps_flutter.dart';\n\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: MapScreen(),\n    );\n  }\n}\n\nclass MapScreen extends StatefulWidget {\n  @override\n  _MapScreenState createState() => _MapScreenState();\n}\n\nclass _MapScreenState extends State<MapScreen> {\n  GoogleMapController? mapController;\n\n  final LatLng _center = const LatLng(37.7749, -122.4194);\n\n  void _onMapCreated(GoogleMapController controller) {\n    mapController = controller;\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Geospatial Data Visualization'),\n        backgroundColor: Colors.green[700],\n      ),\n      body: GoogleMap(\n        onMapCreated: _onMapCreated,\n        initialCameraPosition: CameraPosition(\n          target: _center,\n          zoom: 11.0,\n        ),\n      ),\n    );\n  }\n}\n```"
  },
  {
    "task": "Implement a program that performs clustering analysis using a library for statistical computing.",
    "code": "```dart\nimport 'package:ml_algo/ml_algo.dart';\nimport 'package:ml_dataframe/ml_dataframe.dart';\n\nvoid main() async {\n  // Sample data for clustering\n  final data = DataFrame([\n    {'feature1': 1.0, 'feature2': 2.0},\n    {'feature1': 1.5, 'feature2': 1.8},\n    {'feature1': 5.0, 'feature2': 8.0},\n    {'feature1': 8.0, 'feature2': 8.0},\n    {'feature1': 1.0, 'feature2': 0.6},\n    {'feature1': 9.0, 'feature2': 11.0},\n    {'feature1': 8.0, 'feature2': 2.0},\n    {'feature1': 10.0, 'feature2': 2.0},\n    {'feature1': 9.0, 'feature2': 3.0},\n  ]);\n\n  // Instantiate a k-means clustering algorithm\n  final kMeans = KMeans(\n    data,\n    3, // number of clusters\n  );\n\n  // Perform clustering\n  final clusters = kMeans.predict(data);\n\n  // Output the clustering results\n  print('Cluster assignments: ${clusters}');\n}\n```"
  },
  {
    "task": "Write a script that monitors and analyzes CPU and memory usage using a library for system diagnostics.",
    "code": "```dart\nimport 'dart:async';\nimport 'package:system_info2/system_info2.dart';\n\nvoid main() {\n  Timer.periodic(Duration(seconds: 5), (Timer t) {\n    final cpuLoad = SysInfo.processors.map((p) => p.cpuUsage).reduce((a, b) => a + b) / SysInfo.processors.length;\n    final totalMemory = SysInfo.getTotalPhysicalMemory();\n    final freeMemory = SysInfo.getFreePhysicalMemory();\n    final usedMemory = totalMemory - freeMemory;\n\n    print('CPU Load: ${(cpuLoad * 100).toStringAsFixed(2)}%');\n    print('Total Memory: ${(totalMemory / (1024 * 1024 * 1024)).toStringAsFixed(2)} GB');\n    print('Used Memory: ${(usedMemory / (1024 * 1024 * 1024)).toStringAsFixed(2)} GB');\n    print('Free Memory: ${(freeMemory / (1024 * 1024 * 1024)).toStringAsFixed(2)} GB');\n  });\n}\n```"
  },
  {
    "task": "Use a library to implement a feature that provides voice commands in your application.",
    "code": "```dart\nimport 'package:flutter/material.dart';\nimport 'package:speech_to_text/speech_to_text.dart' as stt;\n\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Voice Command App',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: VoiceCommandPage(),\n    );\n  }\n}\n\nclass VoiceCommandPage extends StatefulWidget {\n  @override\n  _VoiceCommandPageState createState() => _VoiceCommandPageState();\n}\n\nclass _VoiceCommandPageState extends State<VoiceCommandPage> {\n  late stt.SpeechToText _speech;\n  bool _isListening = false;\n  String _text = 'Press the button to start speaking';\n\n  @override\n  void initState() {\n    super.initState();\n    _speech = stt.SpeechToText();\n  }\n\n  void _listen() async {\n    if (!_isListening) {\n      bool available = await _speech.initialize(\n        onStatus: (val) => print('onStatus: $val'),\n        onError: (val) => print('onError: $val'),\n      );\n      if (available) {\n        setState(() => _isListening = true);\n        _speech.listen(\n          onResult: (val) => setState(() {\n            _text = val.recognizedWords;\n          }),\n        );\n      }\n    } else {\n      setState(() => _isListening = false);\n      _speech.stop();\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Voice Command'),\n      ),\n      body: Center(\n        child: Text(\n          _text,\n          style: TextStyle(fontSize: 24.0),\n        ),\n      ),\n      floatingActionButton: FloatingActionButton(\n        onPressed: _listen,\n        child: Icon(_isListening ? Icons.mic : Icons.mic_none),\n      ),\n    );\n  }\n}\n```"
  },
  {
    "task": "Build a tool that converts video files to different resolutions using a video processing library.",
    "code": "```dart\nimport 'package:ffmpeg_kit_flutter/ffmpeg_kit.dart';\n\nclass VideoConverter {\n  Future<void> convertVideoToResolution(String inputPath, String outputPath, String resolution) async {\n    String command = '-i $inputPath -vf scale=$resolution $outputPath';\n    await FFmpegKit.execute(command);\n  }\n}\n\nvoid main() async {\n  VideoConverter converter = VideoConverter();\n  await converter.convertVideoToResolution('input.mp4', 'output_720p.mp4', '1280:720');\n}\n```"
  },
  {
    "task": "Create a program that detects and classifies objects in images using a library for image recognition.",
    "code": "```dart\nimport 'package:tflite/tflite.dart';\n\nvoid main() async {\n  await loadModel();\n  List<dynamic>? recognitions = await recognizeImage('assets/example.jpg');\n  for (var recognition in recognitions!) {\n    print('Detected ${recognition['label']} with confidence ${recognition['confidence']}');\n  }\n}\n\nFuture<void> loadModel() async {\n  String? res = await Tflite.loadModel(\n    model: 'assets/mobilenet_v1_1.0_224.tflite',\n    labels: 'assets/labels.txt',\n  );\n  print(res);\n}\n\nFuture<List<dynamic>?> recognizeImage(String imagePath) async {\n  return await Tflite.runModelOnImage(\n    path: imagePath,\n    numResults: 5,\n    threshold: 0.5,\n    imageMean: 127.5,\n    imageStd: 127.5,\n  );\n}\n```"
  },
  {
    "task": "Develop a feature that generates synthetic test data using a data generation library.",
    "code": "```dart\nimport 'package:faker/faker.dart';\n\nvoid main() {\n  final faker = Faker();\n\n  // Generate synthetic test data\n  final name = faker.person.name();\n  final email = faker.internet.email();\n  final address = faker.address.streetAddress();\n\n  // Output the generated data\n  print('Name: $name');\n  print('Email: $email');\n  print('Address: $address');\n}\n```"
  },
  {
    "task": "Implement a script that interacts with IoT devices using a library for IoT communication.",
    "code": "```dart\nimport 'package:iot_comm/iot_comm.dart';\n\nvoid main() {\n  IoTDevice device = IoTDevice('device-id', 'device-key');\n\n  device.connect().then((_) {\n    print('Connected to IoT device.');\n\n    device.sendData({'temperature': 22.5, 'humidity': 60}).then((_) {\n      print('Data sent successfully.');\n    }).catchError((error) {\n      print('Failed to send data: $error');\n    });\n\n    device.listenForUpdates().listen((update) {\n      print('Received update from device: $update');\n    });\n  }).catchError((error) {\n    print('Failed to connect to device: $error');\n  });\n}\n```"
  },
  {
    "task": "Write a program that compresses and decompresses data using a data compression library.",
    "code": "```dart\nimport 'dart:convert';\nimport 'package:archive/archive.dart';\n\nvoid main() {\n  String inputString = \"This is a test string for compression and decompression.\";\n  List<int> inputBytes = utf8.encode(inputString);\n\n  // Compress the data\n  List<int> compressedBytes = GZipEncoder().encode(inputBytes);\n\n  // Decompress the data\n  List<int> decompressedBytes = GZipDecoder().decodeBytes(compressedBytes);\n\n  String outputString = utf8.decode(decompressedBytes);\n\n  print('Original: $inputString');\n  print('Compressed: $compressedBytes');\n  print('Decompressed: $outputString');\n}\n```"
  },
  {
    "task": "Use a library to implement a feature that generates dynamic web content from templates.",
    "code": "```dart\nimport 'package:mustache_template/mustache.dart';\n\nvoid main() {\n  // Define a Mustache template\n  var template = '''\n  <html>\n    <head><title>{{title}}</title></head>\n    <body>\n      <h1>{{header}}</h1>\n      <p>{{content}}</p>\n    </body>\n  </html>\n  ''';\n\n  // Create a mustache template object\n  var mustacheTemplate = Template(template);\n\n  // Define the data to render\n  var data = {\n    'title': 'Dynamic Page',\n    'header': 'Welcome to Dart!',\n    'content': 'This is a dynamically generated page using Mustache.'\n  };\n\n  // Render the template with the data\n  var output = mustacheTemplate.renderString(data);\n\n  // Output the rendered HTML\n  print(output);\n}\n```"
  },
  {
    "task": "Build an application that integrates with social media platforms using a library for API communication.",
    "code": "```dart\nimport 'package:http/http.dart' as http;\nimport 'dart:convert';\n\nclass SocialMediaAPI {\n  final String baseUrl;\n  final String apiKey;\n\n  SocialMediaAPI(this.baseUrl, this.apiKey);\n\n  Future<Map<String, dynamic>> fetchUserProfile(String userId) async {\n    final response = await http.get(\n      Uri.parse('$baseUrl/users/$userId'),\n      headers: {'Authorization': 'Bearer $apiKey'},\n    );\n\n    if (response.statusCode == 200) {\n      return json.decode(response.body);\n    } else {\n      throw Exception('Failed to load user profile');\n    }\n  }\n\n  Future<void> postStatus(String message) async {\n    final response = await http.post(\n      Uri.parse('$baseUrl/status'),\n      headers: {\n        'Authorization': 'Bearer $apiKey',\n        'Content-Type': 'application/json',\n      },\n      body: json.encode({'message': message}),\n    );\n\n    if (response.statusCode != 201) {\n      throw Exception('Failed to post status');\n    }\n  }\n}\n\nvoid main() async {\n  final api = SocialMediaAPI('https://api.socialmedia.com', 'your_api_key_here');\n\n  try {\n    final userProfile = await api.fetchUserProfile('user_id_here');\n    print('User Profile: ${userProfile['name']}');\n\n    await api.postStatus('Hello World!');\n    print('Status posted successfully.');\n  } catch (e) {\n    print('An error occurred: $e');\n  }\n}\n```"
  }
]