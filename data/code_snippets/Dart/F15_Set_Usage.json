[
  {
    "task": "Create a set to store unique usernames and demonstrate adding new ones.",
    "code": "```dart\nvoid main() {\n  var usernames = <String>{};\n\n  // Adding new usernames\n  usernames.add('user1');\n  usernames.add('user2');\n  usernames.add('user3');\n\n  // Trying to add a duplicate username\n  usernames.add('user1');\n\n  print(usernames);\n}\n```"
  },
  {
    "task": "Write a function that returns the union of two sets of integers.",
    "code": "```dart\nSet<int> unionOfSets(Set<int> set1, Set<int> set2) {\n  return set1.union(set2);\n}\n```"
  },
  {
    "task": "Given two sets of strings, find their intersection.",
    "code": "```dart\nvoid main() {\n  Set<String> set1 = {'apple', 'banana', 'cherry'};\n  Set<String> set2 = {'banana', 'cherry', 'date'};\n\n  Set<String> intersection = set1.intersection(set2);\n\n  print(intersection);\n}\n```"
  },
  {
    "task": "Implement a set to track visited web pages and check if a page has been visited.",
    "code": "```dart\nvoid main() {\n  Set<String> visitedPages = {};\n\n  void visitPage(String url) {\n    visitedPages.add(url);\n    print('Visited: $url');\n  }\n\n  bool hasVisited(String url) {\n    return visitedPages.contains(url);\n  }\n\n  // Example usage\n  visitPage('https://example.com');\n  visitPage('https://dart.dev');\n\n  print(hasVisited('https://example.com')); // true\n  print(hasVisited('https://flutter.dev')); // false\n}\n```"
  },
  {
    "task": "Create a set from a list of numbers and remove duplicates.",
    "code": "```dart\nvoid main() {\n  List<int> numbers = [1, 2, 2, 3, 4, 4, 5];\n  Set<int> uniqueNumbers = numbers.toSet();\n  print(uniqueNumbers);\n}\n```"
  },
  {
    "task": "Check if a set is a subset of another set.",
    "code": "```dart\nvoid main() {\n  Set<int> setA = {1, 2, 3};\n  Set<int> setB = {1, 2, 3, 4, 5};\n\n  bool isSubset = setA.every((element) => setB.contains(element));\n  print(isSubset);\n}\n```"
  },
  {
    "task": "Demonstrate adding and removing elements from a set of book titles.",
    "code": "```dart\nvoid main() {\n  // Create a set of book titles\n  Set<String> bookTitles = {'1984', 'To Kill a Mockingbird', 'The Great Gatsby'};\n\n  // Add a new book title to the set\n  bookTitles.add('Brave New World');\n\n  // Remove a book title from the set\n  bookTitles.remove('1984');\n\n  // Output the final set of book titles\n  print(bookTitles);\n}\n```"
  },
  {
    "task": "Create a set and show how to clear all its elements.",
    "code": "```dart\nvoid main() {\n  Set<int> mySet = {1, 2, 3, 4, 5};\n  mySet.clear();\n  print(mySet); // Output: {}\n}\n```"
  },
  {
    "task": "Write a program to find the difference between two sets of employee IDs.",
    "code": "```dart\nvoid main() {\n  Set<int> setA = {101, 102, 103, 104, 105};\n  Set<int> setB = {104, 105, 106, 107};\n\n  Set<int> difference = setA.difference(setB);\n  \n  print('Difference: $difference');\n}\n```"
  },
  {
    "task": "Implement a set to store unique email addresses and check membership.",
    "code": "```dart\nvoid main() {\n  Set<String> emailSet = {};\n\n  // Adding email addresses\n  emailSet.add('example1@example.com');\n  emailSet.add('example2@example.com');\n  emailSet.add('example3@example.com');\n  emailSet.add('example1@example.com'); // Duplicate, won't be added\n\n  // Check membership\n  String emailToCheck = 'example2@example.com';\n  if (emailSet.contains(emailToCheck)) {\n    print('$emailToCheck is in the set.');\n  } else {\n    print('$emailToCheck is not in the set.');\n  }\n}\n```"
  },
  {
    "task": "Use a set to determine if two lists have any common elements.",
    "code": "```dart\nbool haveCommonElements(List<dynamic> list1, List<dynamic> list2) {\n  Set<dynamic> set1 = Set.from(list1);\n  for (var element in list2) {\n    if (set1.contains(element)) {\n      return true;\n    }\n  }\n  return false;\n}\n```"
  },
  {
    "task": "Create a set to represent a group of students and update it with new entries.",
    "code": "```dart\nvoid main() {\n  var students = <String>{'Alice', 'Bob', 'Charlie'};\n  students.addAll({'David', 'Eva'});\n  print(students);\n}\n```"
  },
  {
    "task": "Write a function to find symmetric difference between two sets of colors.",
    "code": "```dart\nSet<String> symmetricDifference(Set<String> set1, Set<String> set2) {\n  final diff1 = set1.difference(set2);\n  final diff2 = set2.difference(set1);\n  return diff1.union(diff2);\n}\n```"
  },
  {
    "task": "Implement a set to store unique product codes and demonstrate iteration over it.",
    "code": "```dart\nvoid main() {\n  // Create a set to store unique product codes\n  Set<String> productCodes = {'A123', 'B456', 'C789'};\n\n  // Add some product codes\n  productCodes.add('D012');\n  productCodes.add('E345');\n\n  // Iterate over the set and print each product code\n  for (var code in productCodes) {\n    print(code);\n  }\n}\n```"
  },
  {
    "task": "Create a set and demonstrate the use of the `discard` method.",
    "code": "```dart\nvoid main() {\n  var numbers = <int>{1, 2, 3, 4, 5};\n  numbers.remove(3); // Discarding the element 3\n  print(numbers);\n}\n```"
  },
  {
    "task": "Given a list of numbers, create a set and check if a specific number is present.",
    "code": "```dart\nvoid main() {\n  List<int> numbers = [1, 2, 3, 4, 5];\n  Set<int> numberSet = numbers.toSet();\n  int specificNumber = 3;\n  bool isPresent = numberSet.contains(specificNumber);\n  print(isPresent);\n}\n```"
  },
  {
    "task": "Use a set to find all unique words in a sentence.",
    "code": "```dart\nvoid main() {\n  String sentence = \"This is a sentence with some words with some repetition\";\n  Set<String> uniqueWords = sentence.split(' ').toSet();\n  print(uniqueWords);\n}\n```"
  },
  {
    "task": "Create a set from a sequence of characters and demonstrate set operations.",
    "code": "```dart\nvoid main() {\n  // Create a set from a sequence of characters\n  var charSequence = 'abracadabra';\n  var charSet = Set.from(charSequence.split(''));\n\n  // Display the original set\n  print('Original Set: $charSet');\n\n  // Demonstrate a union operation with another set\n  var anotherSet = {'a', 'd', 'd', 'f', 'g'};\n  var unionSet = charSet.union(anotherSet);\n  print('Union of Sets: $unionSet');\n\n  // Demonstrate an intersection operation with another set\n  var intersectionSet = charSet.intersection(anotherSet);\n  print('Intersection of Sets: $intersectionSet');\n\n  // Demonstrate a difference operation with another set\n  var differenceSet = charSet.difference(anotherSet);\n  print('Difference of Sets: $differenceSet');\n}\n```"
  },
  {
    "task": "Write a function to merge two sets and return the result.",
    "code": "```dart\nSet<T> mergeSets<T>(Set<T> set1, Set<T> set2) {\n  return set1.union(set2);\n}\n```"
  },
  {
    "task": "Implement a set to hold unique IP addresses and demonstrate basic operations.",
    "code": "```dart\nvoid main() {\n  // Create a set to hold unique IP addresses\n  Set<String> ipAddresses = {};\n\n  // Add some IP addresses\n  ipAddresses.add('192.168.0.1');\n  ipAddresses.add('192.168.0.2');\n  ipAddresses.add('10.0.0.1');\n\n  // Attempt to add a duplicate IP address\n  ipAddresses.add('192.168.0.1');\n\n  // Display the IP addresses\n  print('Unique IP Addresses: $ipAddresses');\n\n  // Remove an IP address\n  ipAddresses.remove('10.0.0.1');\n\n  // Check if a specific IP address exists\n  bool contains = ipAddresses.contains('192.168.0.2');\n  print('Contains 192.168.0.2: $contains');\n\n  // Display the final set of IP addresses\n  print('Final IP Addresses: $ipAddresses');\n}\n```"
  },
  {
    "task": "Create a set and demonstrate how to find the size of the set.",
    "code": "```dart\nvoid main() {\n  var mySet = <int>{1, 2, 3, 4, 5};\n  print('Size of the set: ${mySet.length}');\n}\n```"
  },
  {
    "task": "Write a program to check if two sets of dates are disjoint.",
    "code": "```dart\nvoid main() {\n  Set<DateTime> set1 = {\n    DateTime(2023, 10, 1),\n    DateTime(2023, 10, 2),\n    DateTime(2023, 10, 3)\n  };\n\n  Set<DateTime> set2 = {\n    DateTime(2023, 10, 4),\n    DateTime(2023, 10, 5),\n    DateTime(2023, 10, 6)\n  };\n\n  bool areDisjoint = set1.intersection(set2).isEmpty;\n  print(areDisjoint ? 'Sets are disjoint' : 'Sets are not disjoint');\n}\n```"
  },
  {
    "task": "Create a set to manage a collection of tags and demonstrate addition and removal.",
    "code": "```dart\nvoid main() {\n  // Create a set to manage tags\n  Set<String> tags = {'dart', 'flutter', 'widgets'};\n\n  // Add a new tag\n  tags.add('state_management');\n\n  // Remove a tag\n  tags.remove('widgets');\n\n  // Display the current set of tags\n  print(tags);\n}\n```"
  },
  {
    "task": "Implement a set to track unique inventory items in a store.",
    "code": "```dart\nvoid main() {\n  Set<String> inventoryItems = Set<String>();\n\n  // Add items to the inventory\n  inventoryItems.add('Apples');\n  inventoryItems.add('Bananas');\n  inventoryItems.add('Oranges');\n\n  // Try adding a duplicate item\n  inventoryItems.add('Apples');\n\n  // Display the unique inventory items\n  print('Unique Inventory Items:');\n  for (var item in inventoryItems) {\n    print(item);\n  }\n}\n```"
  },
  {
    "task": "Create a set of numbers and demonstrate conversion to a list.",
    "code": "```dart\nvoid main() {\n  Set<int> numberSet = {1, 2, 3, 4, 5};\n  List<int> numberList = numberSet.toList();\n  print(numberList);\n}\n```"
  },
  {
    "task": "Write a function that returns all elements present in either of two sets but not both.",
    "code": "```dart\nSet<T> symmetricDifference<T>(Set<T> set1, Set<T> set2) {\n  return set1.difference(set2).union(set2.difference(set1));\n}\n```"
  },
  {
    "task": "Use a set to manage a collection of unique transaction IDs.",
    "code": "```dart\nvoid main() {\n  Set<String> transactionIDs = {};\n\n  // Adding transaction IDs\n  transactionIDs.add('TX123');\n  transactionIDs.add('TX456');\n  transactionIDs.add('TX789');\n\n  // Attempting to add a duplicate transaction ID\n  transactionIDs.add('TX123');\n\n  // Display the unique transaction IDs\n  for (var id in transactionIDs) {\n    print(id);\n  }\n}\n```"
  },
  {
    "task": "Create a set of integers and demonstrate the `pop` operation.",
    "code": "```dart\nvoid main() {\n  var integerSet = <int>{1, 2, 3, 4, 5};\n  \n  if (integerSet.isNotEmpty) {\n    var firstElement = integerSet.first;\n    integerSet.remove(firstElement);\n    print('Removed element: $firstElement');\n  }\n  \n  print('Remaining elements in the set: $integerSet');\n}\n```"
  },
  {
    "task": "Write a program to find the maximum element in a set of floating-point numbers.",
    "code": "```dart\nvoid main() {\n  Set<double> numbers = {3.7, 8.1, 5.5, 9.3, 2.6};\n  double maxElement = numbers.reduce((a, b) => a > b ? a : b);\n  print('Maximum element: $maxElement');\n}\n```"
  },
  {
    "task": "Create a set and demonstrate the use of the `update` method with another set.",
    "code": "```dart\nvoid main() {\n  var set1 = <int>{1, 2, 3};\n  var set2 = <int>{3, 4, 5};\n\n  set1.addAll(set2);\n\n  print(set1); // Output: {1, 2, 3, 4, 5}\n}\n```"
  },
  {
    "task": "Implement a set to keep track of unique file extensions in a directory.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  final directoryPath = 'your/directory/path';\n  final directory = Directory(directoryPath);\n\n  final fileExtensions = <String>{};\n\n  if (directory.existsSync()) {\n    directory.listSync().forEach((file) {\n      if (file is File) {\n        final extension = file.uri.pathSegments.last.split('.').last;\n        fileExtensions.add(extension);\n      }\n    });\n  }\n\n  print('Unique file extensions: $fileExtensions');\n}\n```"
  },
  {
    "task": "Create a set of strings and demonstrate how to iterate over it in reverse order.",
    "code": "```dart\nvoid main() {\n  var stringSet = <String>{'apple', 'banana', 'cherry'};\n  var stringList = stringSet.toList();\n  for (var item in stringList.reversed) {\n    print(item);\n  }\n}\n```"
  },
  {
    "task": "Write a function to check if a set is empty.",
    "code": "```dart\nbool isSetEmpty(Set<dynamic> inputSet) {\n  return inputSet.isEmpty;\n}\n```"
  },
  {
    "task": "Use a set to filter out duplicate entries from a list of participants.",
    "code": "```dart\nvoid main() {\n  List<String> participants = ['Alice', 'Bob', 'Alice', 'Charlie', 'Bob', 'David'];\n  Set<String> uniqueParticipants = Set<String>.from(participants);\n  print(uniqueParticipants.toList());\n}\n```"
  },
  {
    "task": "Create a set of tuples and demonstrate basic set operations.",
    "code": "```dart\nvoid main() {\n  // Create a set of tuples\n  var setOfTuples = <Set>[{1, 'a'}, {2, 'b'}, {3, 'c'}];\n\n  // Add a new tuple to the set\n  setOfTuples.add({4, 'd'});\n\n  // Remove a tuple from the set\n  setOfTuples.remove({2, 'b'});\n\n  // Check if a tuple is in the set\n  var containsTuple = setOfTuples.contains({1, 'a'});\n\n  // Print results\n  print('Set of tuples: $setOfTuples');\n  print('Contains (1, \\'a\\'): $containsTuple');\n}\n```"
  },
  {
    "task": "Write a program to find the common elements between two sets of country names.",
    "code": "```dart\nvoid main() {\n  Set<String> set1 = {'USA', 'Canada', 'Mexico', 'Germany'};\n  Set<String> set2 = {'Brazil', 'Germany', 'USA', 'Japan'};\n  \n  Set<String> commonElements = set1.intersection(set2);\n  \n  print('Common elements: $commonElements');\n}\n```"
  },
  {
    "task": "Create a set of characters and demonstrate the use of the `issubset` method.",
    "code": "```dart\nvoid main() {\n  Set<String> set1 = {'a', 'b', 'c'};\n  Set<String> set2 = {'a', 'b', 'c', 'd', 'e'};\n\n  bool isSubset = set1.every((element) => set2.contains(element));\n  print('Set1 is a subset of Set2: $isSubset');\n}\n```"
  },
  {
    "task": "Implement a set to manage a collection of unique hashtags from social media posts.",
    "code": "```dart\nvoid main() {\n  Set<String> hashtags = {};\n\n  // Example of adding hashtags\n  hashtags.add('#dart');\n  hashtags.add('#flutter');\n  hashtags.add('#dart'); // Duplicate, will not be added\n\n  // Example of removing a hashtag\n  hashtags.remove('#flutter');\n\n  // Checking if a hashtag exists\n  bool containsDart = hashtags.contains('#dart');\n\n  // Printing all unique hashtags\n  for (var hashtag in hashtags) {\n    print(hashtag);\n  }\n}\n```"
  },
  {
    "task": "Create a set and demonstrate how to copy it to another set.",
    "code": "```dart\nvoid main() {\n  // Create a set\n  Set<int> originalSet = {1, 2, 3, 4, 5};\n  \n  // Copy the set to another set\n  Set<int> copiedSet = Set.from(originalSet);\n  \n  // Output the copied set\n  print(copiedSet);\n}\n```"
  },
  {
    "task": "Write a function that accepts two sets and returns a new set with elements found in both.",
    "code": "```dart\nSet<T> intersection<T>(Set<T> set1, Set<T> set2) {\n  return set1.intersection(set2);\n}\n```"
  },
  {
    "task": "Use a set to determine the unique items purchased in a day.",
    "code": "```dart\nvoid main() {\n  List<String> itemsPurchased = [\n    'apple',\n    'banana',\n    'apple',\n    'orange',\n    'banana',\n    'kiwi'\n  ];\n\n  Set<String> uniqueItems = Set.from(itemsPurchased);\n\n  print('Unique items purchased: $uniqueItems');\n}\n```"
  },
  {
    "task": "Create a set of student IDs and demonstrate set comprehension to filter IDs.",
    "code": "```dart\nvoid main() {\n  Set<int> studentIds = {101, 102, 103, 104, 105};\n  Set<int> filteredIds = studentIds.where((id) => id > 102).toSet();\n  \n  print(filteredIds);\n}\n```"
  },
  {
    "task": "Write a program to check if a set of strings is a superset of another set.",
    "code": "```dart\nvoid main() {\n  Set<String> setA = {'apple', 'banana', 'cherry'};\n  Set<String> setB = {'banana', 'cherry'};\n\n  bool isSuperset = setA.containsAll(setB);\n\n  print(isSuperset);\n}\n```"
  },
  {
    "task": "Create a set of unique words from a text file.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() async {\n  final file = File('textfile.txt');\n  final contents = await file.readAsString();\n  final words = contents.split(RegExp(r'\\s+'));\n  final uniqueWords = words.toSet();\n  print(uniqueWords);\n}\n```"
  },
  {
    "task": "Implement a set to store unique project identifiers and demonstrate membership testing.",
    "code": "```dart\nvoid main() {\n  // Create a set to store unique project identifiers\n  Set<String> projectIdentifiers = {'proj1', 'proj2', 'proj3'};\n\n  // Add more identifiers\n  projectIdentifiers.add('proj4');\n  projectIdentifiers.add('proj5');\n\n  // Demonstrate membership testing\n  String testId = 'proj2';\n  if (projectIdentifiers.contains(testId)) {\n    print('$testId is in the set.');\n  } else {\n    print('$testId is not in the set.');\n  }\n\n  testId = 'proj10';\n  if (projectIdentifiers.contains(testId)) {\n    print('$testId is in the set.');\n  } else {\n    print('$testId is not in the set.');\n  }\n}\n```"
  },
  {
    "task": "Create a set and demonstrate the `symmetric_difference_update` method.",
    "code": "```dart\nvoid main() {\n  // Define two sets\n  var setA = <int>{1, 2, 3, 4, 5};\n  var setB = <int>{4, 5, 6, 7, 8};\n  \n  // Calculate symmetric difference\n  var symmetricDifference = setA.difference(setB).union(setB.difference(setA));\n  \n  // Update setA with the symmetric difference\n  setA = symmetricDifference;\n\n  // Output the updated setA\n  print(setA);\n}\n```"
  },
  {
    "task": "Write a function to remove all elements from a set that are also in another set.",
    "code": "```dart\nSet<T> removeElementsInAnotherSet<T>(Set<T> baseSet, Set<T> elementsToRemove) {\n  baseSet.removeAll(elementsToRemove);\n  return baseSet;\n}\n```"
  },
  {
    "task": "Use a set to keep track of unique error codes from server logs.",
    "code": "```dart\nvoid main() {\n  var errorCodes = <String>{};\n\n  // Sample server logs\n  var logs = [\n    'Error 404: Not Found',\n    'Error 500: Internal Server Error',\n    'Error 404: Not Found',\n    'Error 403: Forbidden',\n    'Error 500: Internal Server Error',\n  ];\n\n  // Extract error codes and add to set\n  for (var log in logs) {\n    var code = log.split(':')[0];\n    errorCodes.add(code);\n  }\n\n  // Output unique error codes\n  print('Unique error codes: $errorCodes');\n}\n```"
  },
  {
    "task": "Create a set and demonstrate how to find all unique pairs of elements.",
    "code": "```dart\nvoid main() {\n  Set<int> numbers = {1, 2, 3, 4};\n  Set<String> uniquePairs = {};\n\n  for (var num1 in numbers) {\n    for (var num2 in numbers) {\n      if (num1 != num2) {\n        var pair = (num1 < num2) ? '$num1, $num2' : '$num2, $num1';\n        uniquePairs.add('($pair)');\n      }\n    }\n  }\n\n  for (var pair in uniquePairs) {\n    print(pair);\n  }\n}\n```"
  },
  {
    "task": "Write a program to find the smallest element in a set of integers.",
    "code": "```dart\nvoid main() {\n  Set<int> numbers = {5, 3, 8, 1, 4};\n  int smallest = numbers.reduce((a, b) => a < b ? a : b);\n  print('The smallest element is $smallest');\n}\n```"
  },
  {
    "task": "Create a set and demonstrate the `add` method with multiple elements.",
    "code": "```dart\nvoid main() {\n  var mySet = <int>{}; // Creating a set\n  mySet.add(1); // Adding elements to the set\n  mySet.add(2);\n  mySet.add(3);\n  print(mySet); // Output: {1, 2, 3}\n}\n```"
  },
  {
    "task": "Implement a set to manage a collection of unique author names.",
    "code": "```dart\nvoid main() {\n  Set<String> authorNames = {};\n\n  // Adding authors\n  authorNames.add('J.K. Rowling');\n  authorNames.add('George R.R. Martin');\n  authorNames.add('J.R.R. Tolkien');\n\n  // Attempting to add a duplicate\n  authorNames.add('J.K. Rowling');\n\n  // Removing an author\n  authorNames.remove('George R.R. Martin');\n\n  // Checking if a specific author is in the set\n  bool hasTolkien = authorNames.contains('J.R.R. Tolkien');\n\n  // Printing the set\n  print(authorNames);\n\n  // Printing the result of the check\n  print('Contains J.R.R. Tolkien: $hasTolkien');\n}\n```"
  },
  {
    "task": "Create a set of integers and demonstrate converting it to a sorted list.",
    "code": "```dart\nvoid main() {\n  Set<int> integerSet = {5, 1, 3, 4, 2};\n  List<int> sortedList = integerSet.toList()..sort();\n  print(sortedList);\n}\n```"
  },
  {
    "task": "Write a function that returns the union of multiple sets.",
    "code": "```dart\nSet<T> unionOfSets<T>(Iterable<Set<T>> sets) {\n  return sets.fold(<T>{}, (acc, set) => acc..addAll(set));\n}\n```"
  },
  {
    "task": "Use a set to identify unique characters in a string.",
    "code": "```dart\nvoid main() {\n  String input = \"example string\";\n  Set<String> uniqueChars = Set<String>.from(input.split(''));\n  print(uniqueChars);\n}\n```"
  },
  {
    "task": "Create a set of prime numbers and demonstrate basic set operations.",
    "code": "```dart\nvoid main() {\n  // Create a set of prime numbers\n  Set<int> primeNumbers = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29};\n\n  // Demonstrate basic set operations\n\n  // Add an element\n  primeNumbers.add(31);\n\n  // Remove an element\n  primeNumbers.remove(2);\n\n  // Check if set contains an element\n  bool contains23 = primeNumbers.contains(23);\n\n  // Union with another set\n  Set<int> otherPrimes = {37, 41, 43};\n  Set<int> unionSet = primeNumbers.union(otherPrimes);\n\n  // Intersection with another set\n  Set<int> intersectionSet = primeNumbers.intersection(otherPrimes);\n\n  // Difference with another set\n  Set<int> differenceSet = primeNumbers.difference(otherPrimes);\n\n  // Output the results\n  print('Prime Numbers: $primeNumbers');\n  print('Contains 23: $contains23');\n  print('Union Set: $unionSet');\n  print('Intersection Set: $intersectionSet');\n  print('Difference Set: $differenceSet');\n}\n```"
  },
  {
    "task": "Create a set and demonstrate how to check for non-membership.",
    "code": "```dart\nvoid main() {\n  // Create a set\n  Set<String> fruits = {'apple', 'banana', 'orange'};\n\n  // Check for non-membership\n  String fruitToCheck = 'grape';\n  bool isNotMember = !fruits.contains(fruitToCheck);\n\n  // Output the result\n  print('$fruitToCheck is not in the set: $isNotMember');\n}\n```"
  },
  {
    "task": "Write a program to find the largest element in a set of numbers.",
    "code": "```dart\nvoid main() {\n  Set<int> numbers = {10, 20, 5, 30, 25};\n  int largest = numbers.reduce((a, b) => a > b ? a : b);\n  print('The largest element is: $largest');\n}\n```"
  },
  {
    "task": "Create a set of unique movie titles and demonstrate membership testing.",
    "code": "```dart\nvoid main() {\n  // Create a set of unique movie titles\n  var movieTitles = <String>{'Inception', 'The Matrix', 'Interstellar', 'Avatar'};\n\n  // Demonstrate membership testing\n  String movieToCheck = 'Inception';\n  if (movieTitles.contains(movieToCheck)) {\n    print('$movieToCheck is in the set.');\n  } else {\n    print('$movieToCheck is not in the set.');\n  }\n}\n```"
  },
  {
    "task": "Implement a set to store unique keys from a dictionary.",
    "code": "```dart\nvoid main() {\n  Map<String, dynamic> dictionary = {\n    'key1': 'value1',\n    'key2': 'value2',\n    'key3': 'value3'\n  };\n\n  Set<String> uniqueKeys = dictionary.keys.toSet();\n\n  print(uniqueKeys);\n}\n```"
  },
  {
    "task": "Create a set and demonstrate the `difference_update` method.",
    "code": "```dart\nvoid main() {\n  var setA = {1, 2, 3, 4, 5};\n  var setB = {4, 5, 6, 7};\n\n  // Demonstrating the difference_update feature\n  setA.removeAll(setB);\n\n  print(setA); // Output: {1, 2, 3}\n}\n```"
  },
  {
    "task": "Write a function to merge multiple sets into a single set.",
    "code": "```dart\nSet<T> mergeSets<T>(List<Set<T>> sets) {\n  return sets.fold<Set<T>>({}, (acc, set) => acc..addAll(set));\n}\n```"
  },
  {
    "task": "Use a set to filter out duplicate letters from a word.",
    "code": "```dart\nString filterDuplicates(String word) {\n  return Set.from(word.split('')).join();\n}\n\nvoid main() {\n  String word = \"programming\";\n  String filteredWord = filterDuplicates(word);\n  print(filteredWord);\n}\n```"
  },
  {
    "task": "Create a set and demonstrate the use of the `isdisjoint` method.",
    "code": "```dart\nvoid main() {\n  var setA = <int>{1, 2, 3, 4, 5};\n  var setB = <int>{6, 7, 8};\n  \n  bool disjoint = setA.intersection(setB).isEmpty;\n  \n  print('Are the sets disjoint? $disjoint');\n}\n```"
  },
  {
    "task": "Write a program to find all elements that are only in one of two sets.",
    "code": "```dart\nvoid main() {\n  Set<int> set1 = {1, 2, 3, 4};\n  Set<int> set2 = {3, 4, 5, 6};\n\n  Set<int> onlyInOne = set1.difference(set2).union(set2.difference(set1));\n\n  print(onlyInOne);\n}\n```"
  },
  {
    "task": "Create a set of unique book authors and demonstrate basic set operations.",
    "code": "```dart\nvoid main() {\n  // Create a set of unique book authors\n  Set<String> authors = {'J.K. Rowling', 'George Orwell', 'J.R.R. Tolkien', 'Agatha Christie'};\n\n  // Add a new author\n  authors.add('Isaac Asimov');\n\n  // Try to add a duplicate author\n  authors.add('J.K. Rowling');\n\n  // Remove an author\n  authors.remove('George Orwell');\n\n  // Check if an author is in the set\n  bool hasTolkien = authors.contains('J.R.R. Tolkien');\n\n  // Output the set and the check result\n  print(authors);\n  print('Set contains J.R.R. Tolkien: $hasTolkien');\n}\n```"
  },
  {
    "task": "Implement a set to store unique phone numbers and check for duplicates.",
    "code": "```dart\nvoid main() {\n  Set<String> phoneNumbers = {};\n\n  // Function to add a phone number and check for duplicates\n  bool addPhoneNumber(String phoneNumber) {\n    return phoneNumbers.add(phoneNumber);\n  }\n\n  // Example usage\n  print(addPhoneNumber(\"123-456-7890\")); // true, added successfully\n  print(addPhoneNumber(\"987-654-3210\")); // true, added successfully\n  print(addPhoneNumber(\"123-456-7890\")); // false, already exists\n}\n```"
  },
  {
    "task": "Create a set of floating-point numbers and demonstrate rounding each element.",
    "code": "```dart\nvoid main() {\n  Set<double> numbers = {3.14159, 2.71828, 1.41421};\n  Set<int> roundedNumbers = numbers.map((num) => num.round()).toSet();\n  print(roundedNumbers);\n}\n```"
  },
  {
    "task": "Write a function that returns a set of all vowels present in a given sentence.",
    "code": "```dart\nSet<String> findVowels(String sentence) {\n  final vowels = {'a', 'e', 'i', 'o', 'u'};\n  return sentence\n      .toLowerCase()\n      .split('')\n      .where((char) => vowels.contains(char))\n      .toSet();\n}\n```"
  },
  {
    "task": "Use a set to track unique session IDs for a web application.",
    "code": "```dart\nvoid main() {\n  Set<String> sessionIDs = {};\n\n  // Example of adding session IDs\n  sessionIDs.add('session123');\n  sessionIDs.add('session456');\n  sessionIDs.add('session789');\n\n  // Example of checking for a session ID\n  String newSession = 'session123';\n  if (!sessionIDs.contains(newSession)) {\n    sessionIDs.add(newSession);\n  }\n\n  // Example of removing a session ID\n  sessionIDs.remove('session456');\n\n  // Printing all unique session IDs\n  print('Unique session IDs: $sessionIDs');\n}\n```"
  },
  {
    "task": "Create a set of unique city names and demonstrate set operations with it.",
    "code": "```dart\nvoid main() {\n  // Create a set of unique city names\n  var cityNames = <String>{'New York', 'Los Angeles', 'Chicago', 'Houston'};\n\n  // Add a city to the set\n  cityNames.add('Phoenix');\n\n  // Attempt to add a duplicate city\n  cityNames.add('Chicago');\n\n  // Remove a city from the set\n  cityNames.remove('Houston');\n\n  // Check if a city is in the set\n  bool hasNewYork = cityNames.contains('New York');\n\n  // Print the resulting set of city names\n  print('City names: $cityNames');\n\n  // Print if New York is in the set\n  print('Contains New York: $hasNewYork');\n\n  // Demonstrate intersection with another set\n  var moreCities = <String>{'Seattle', 'Chicago', 'Miami'};\n  var intersection = cityNames.intersection(moreCities);\n  print('Intersection with moreCities: $intersection');\n\n  // Demonstrate union with another set\n  var union = cityNames.union(moreCities);\n  print('Union with moreCities: $union');\n\n  // Demonstrate difference with another set\n  var difference = cityNames.difference(moreCities);\n  print('Difference with moreCities: $difference');\n}\n```"
  },
  {
    "task": "Write a program to find the common elements in three sets.",
    "code": "```dart\nvoid main() {\n  Set<int> set1 = {1, 2, 3, 4, 5};\n  Set<int> set2 = {4, 5, 6, 7, 8};\n  Set<int> set3 = {5, 8, 9, 10};\n\n  Set<int> commonElements = set1.intersection(set2).intersection(set3);\n\n  print(commonElements);\n}\n```"
  },
  {
    "task": "Create a set and demonstrate how to remove an element by its value.",
    "code": "```dart\nvoid main() {\n  Set<String> fruits = {'apple', 'banana', 'cherry'};\n  fruits.remove('banana');\n  print(fruits);\n}\n```"
  },
  {
    "task": "Implement a set to store a collection of unique ISBN numbers.",
    "code": "```dart\nvoid main() {\n  Set<String> isbnNumbers = <String>{};\n\n  // Example usage\n  isbnNumbers.add('978-3-16-148410-0');\n  isbnNumbers.add('978-1-4028-9462-6');\n  isbnNumbers.add('978-0-596-52068-7');\n  isbnNumbers.add('978-3-16-148410-0'); // Duplicate, will not be added\n\n  print(isbnNumbers);\n}\n```"
  },
  {
    "task": "Create a set and demonstrate the `intersection_update` method.",
    "code": "```dart\nvoid main() {\n  Set<int> set1 = {1, 2, 3, 4, 5};\n  Set<int> set2 = {3, 4, 5, 6, 7};\n\n  set1.retainAll(set2);\n\n  print(set1); // Output: {3, 4, 5}\n}\n```"
  },
  {
    "task": "Write a function to generate a set of all unique elements in a list.",
    "code": "```dart\nSet<T> uniqueElements<T>(List<T> list) {\n  return list.toSet();\n}\n```"
  },
  {
    "task": "Use a set to determine the unique characters in two strings.",
    "code": "```dart\nvoid main() {\n  String string1 = \"hello\";\n  String string2 = \"world\";\n\n  Set<String> uniqueChars = {...string1.split(''), ...string2.split('')};\n\n  print(uniqueChars);\n}\n```"
  },
  {
    "task": "Create a set of unique animal names and demonstrate the `discard` method.",
    "code": "```dart\nvoid main() {\n  var animals = <String>{'lion', 'tiger', 'bear', 'elephant'};\n  animals.remove('tiger');\n  print(animals);\n}\n```"
  },
  {
    "task": "Write a program to find all elements present in the first set but not in the second.",
    "code": "```dart\nvoid main() {\n  Set<int> set1 = {1, 2, 3, 4, 5};\n  Set<int> set2 = {4, 5, 6, 7, 8};\n\n  Set<int> difference = set1.difference(set2);\n\n  print(difference);\n}\n```"
  },
  {
    "task": "Create a set of integers and demonstrate using it to eliminate duplicates from a list.",
    "code": "```dart\nvoid main() {\n  List<int> numbers = [1, 2, 2, 3, 4, 4, 5];\n  Set<int> uniqueNumbers = numbers.toSet();\n  print(uniqueNumbers);\n}\n```"
  },
  {
    "task": "Implement a set to manage a collection of unique car models.",
    "code": "```dart\nvoid main() {\n  Set<String> carModels = {'Tesla Model S', 'BMW 3 Series', 'Audi A4'};\n\n  // Add a new model\n  carModels.add('Mercedes-Benz C-Class');\n\n  // Attempt to add a duplicate model\n  carModels.add('Tesla Model S');\n\n  // Remove a model\n  carModels.remove('Audi A4');\n\n  // Check if a model exists\n  bool hasBMW = carModels.contains('BMW 3 Series');\n\n  // Print all car models\n  for (var model in carModels) {\n    print(model);\n  }\n}\n```"
  },
  {
    "task": "Create a set and demonstrate the use of the `clear` method.",
    "code": "```dart\nvoid main() {\n  // Create a set with initial values\n  Set<String> fruits = {'apple', 'banana', 'orange'};\n\n  // Clear the set\n  fruits.clear();\n\n  // Output the set to show it is empty\n  print(fruits);\n}\n```"
  },
  {
    "task": "Write a function that finds the intersection of multiple sets.",
    "code": "```dart\nSet<T> findIntersection<T>(List<Set<T>> sets) {\n  if (sets.isEmpty) return <T>{};\n  return sets.reduce((a, b) => a.intersection(b));\n}\n```"
  },
  {
    "task": "Use a set to identify unique words in a paragraph.",
    "code": "```dart\nvoid main() {\n  String paragraph = \"This is a sample paragraph with some sample words to identify unique words.\";\n  Set<String> uniqueWords = paragraph.split(' ').toSet();\n  print(uniqueWords);\n}\n```"
  },
  {
    "task": "Create a set of unique country codes and demonstrate membership testing.",
    "code": "```dart\nvoid main() {\n  // Create a set of unique country codes\n  var countryCodes = <String>{'US', 'CA', 'MX', 'FR', 'DE'};\n\n  // Demonstrate membership testing\n  print(countryCodes.contains('US')); // true\n  print(countryCodes.contains('IT')); // false\n}\n```"
  },
  {
    "task": "Write a program to find the union of two sets and return it as a list.",
    "code": "```dart\nList<T> unionOfSets<T>(Set<T> set1, Set<T> set2) {\n  return (set1.union(set2)).toList();\n}\n\nvoid main() {\n  Set<int> setA = {1, 2, 3, 4};\n  Set<int> setB = {3, 4, 5, 6};\n  List<int> result = unionOfSets(setA, setB);\n  print(result);\n}\n```"
  },
  {
    "task": "Create a set and demonstrate using it to check if all elements of another set are present.",
    "code": "```dart\nvoid main() {\n  Set<int> mainSet = {1, 2, 3, 4, 5};\n  Set<int> anotherSet = {2, 3};\n\n  bool containsAll = mainSet.containsAll(anotherSet);\n\n  print('Main set contains all elements of another set: $containsAll');\n}\n```"
  },
  {
    "task": "Implement a set to store unique coupon codes and demonstrate adding new codes.",
    "code": "```dart\nvoid main() {\n  // Create a set to store unique coupon codes\n  Set<String> couponCodes = {'SAVE10', 'WELCOME20', 'FREESHIP'};\n  \n  // Add new coupon codes\n  couponCodes.add('EXTRA15');\n  couponCodes.add('HOLIDAY25');\n  \n  // Attempt to add a duplicate code\n  couponCodes.add('SAVE10');\n  \n  // Print the set of coupon codes\n  print(couponCodes);\n}\n```"
  },
  {
    "task": "Create a set and demonstrate the `copy` method.",
    "code": "```dart\nvoid main() {\n  var originalSet = {1, 2, 3, 4, 5};\n  var copiedSet = Set.from(originalSet);\n  \n  print('Original Set: $originalSet');\n  print('Copied Set: $copiedSet');\n}\n```"
  },
  {
    "task": "Write a function to remove duplicates from a list using a set.",
    "code": "```dart\nList<T> removeDuplicates<T>(List<T> items) {\n  return items.toSet().toList();\n}\n```"
  },
  {
    "task": "Use a set to identify unique numbers in a sequence.",
    "code": "```dart\nvoid main() {\n  List<int> numbers = [1, 2, 3, 2, 4, 1, 5];\n  Set<int> uniqueNumbers = numbers.toSet();\n  print(uniqueNumbers);\n}\n```"
  },
  {
    "task": "Create a set of unique fruit names and demonstrate set operations with it.",
    "code": "```dart\nvoid main() {\n  // Create a set of unique fruit names\n  Set<String> fruits = {'apple', 'banana', 'cherry', 'date'};\n\n  // Add a fruit to the set\n  fruits.add('elderberry');\n\n  // Attempt to add a duplicate fruit\n  fruits.add('apple');\n\n  // Remove a fruit from the set\n  fruits.remove('banana');\n\n  // Check if a fruit is in the set\n  bool hasCherry = fruits.contains('cherry');\n\n  // Print the set of fruits\n  print(fruits);\n\n  // Print whether the set contains 'cherry'\n  print('Set contains cherry: $hasCherry');\n\n  // Demonstrate union with another set\n  Set<String> moreFruits = {'fig', 'grape', 'apple'};\n  Set<String> allFruits = fruits.union(moreFruits);\n  print('Union of fruits: $allFruits');\n\n  // Demonstrate intersection with another set\n  Set<String> commonFruits = fruits.intersection(moreFruits);\n  print('Intersection of fruits: $commonFruits');\n\n  // Demonstrate difference with another set\n  Set<String> uniqueFruits = fruits.difference(moreFruits);\n  print('Difference of fruits: $uniqueFruits');\n}\n```"
  }
]