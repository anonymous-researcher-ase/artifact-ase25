[
  {
    "task": "Create a function that initializes an array with the first ten prime numbers.",
    "code": "```dart\nList<int> initializePrimeArray() {\n  return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29];\n}\n```"
  },
  {
    "task": "Write a program to reverse the elements of a given array.",
    "code": "```dart\nvoid main() {\n  List<int> array = [1, 2, 3, 4, 5];\n  List<int> reversedArray = array.reversed.toList();\n  print(reversedArray);\n}\n```"
  },
  {
    "task": "Implement an algorithm that finds the maximum value in an array of integers.",
    "code": "```dart\nint findMaxValue(List<int> numbers) {\n  if (numbers.isEmpty) {\n    throw ArgumentError('The array must not be empty.');\n  }\n  int maxValue = numbers[0];\n  for (int i = 1; i < numbers.length; i++) {\n    if (numbers[i] > maxValue) {\n      maxValue = numbers[i];\n    }\n  }\n  return maxValue;\n}\n```"
  },
  {
    "task": "Design a routine to rotate an array to the right by a given number of steps.",
    "code": "```dart\nList<int> rotateArray(List<int> arr, int steps) {\n  if (arr.isEmpty) return arr;\n  int len = arr.length;\n  steps = steps % len; // In case steps > len\n  return arr.sublist(len - steps)..addAll(arr.sublist(0, len - steps));\n}\n\nvoid main() {\n  List<int> array = [1, 2, 3, 4, 5];\n  int steps = 2;\n  List<int> rotatedArray = rotateArray(array, steps);\n  print(rotatedArray); // Output: [4, 5, 1, 2, 3]\n}\n```"
  },
  {
    "task": "Develop a function to merge two sorted arrays into one sorted array.",
    "code": "```dart\nList<int> mergeSortedArrays(List<int> array1, List<int> array2) {\n  List<int> mergedArray = [];\n  int i = 0, j = 0;\n\n  while (i < array1.length && j < array2.length) {\n    if (array1[i] <= array2[j]) {\n      mergedArray.add(array1[i]);\n      i++;\n    } else {\n      mergedArray.add(array2[j]);\n      j++;\n    }\n  }\n\n  while (i < array1.length) {\n    mergedArray.add(array1[i]);\n    i++;\n  }\n\n  while (j < array2.length) {\n    mergedArray.add(array2[j]);\n    j++;\n  }\n\n  return mergedArray;\n}\n```"
  },
  {
    "task": "Create a method to remove duplicate values from an array.",
    "code": "```dart\nList<T> removeDuplicates<T>(List<T> array) {\n  return array.toSet().toList();\n}\n```"
  },
  {
    "task": "Write a script to calculate the sum of all elements in an array.",
    "code": "```dart\nvoid main() {\n  List<int> numbers = [1, 2, 3, 4, 5]; // Example array\n  int sum = 0;\n  \n  for (int number in numbers) {\n    sum += number;\n  }\n  \n  print('Sum of array elements: $sum');\n}\n```"
  },
  {
    "task": "Construct a function that finds the second largest element in an array.",
    "code": "```dart\nint findSecondLargest(List<int> arr) {\n  if (arr.length < 2) {\n    throw ArgumentError('Array must contain at least two elements');\n  }\n  int largest = arr[0] > arr[1] ? arr[0] : arr[1];\n  int secondLargest = arr[0] > arr[1] ? arr[1] : arr[0];\n  for (int i = 2; i < arr.length; i++) {\n    if (arr[i] > largest) {\n      secondLargest = largest;\n      largest = arr[i];\n    } else if (arr[i] > secondLargest && arr[i] != largest) {\n      secondLargest = arr[i];\n    }\n  }\n  return secondLargest;\n}\n```"
  },
  {
    "task": "Design a program to check if an array contains a specific value.",
    "code": "```dart\nbool containsValue(List<int> array, int value) {\n  return array.contains(value);\n}\n\nvoid main() {\n  List<int> numbers = [1, 2, 3, 4, 5];\n  int valueToCheck = 3;\n\n  if (containsValue(numbers, valueToCheck)) {\n    print('The array contains the value $valueToCheck.');\n  } else {\n    print('The array does not contain the value $valueToCheck.');\n  }\n}\n```"
  },
  {
    "task": "Implement a function to sort an array of strings alphabetically.",
    "code": "```dart\nList<String> sortStringsAlphabetically(List<String> strings) {\n  strings.sort();\n  return strings;\n}\n\nvoid main() {\n  List<String> strings = ['banana', 'apple', 'orange'];\n  List<String> sortedStrings = sortStringsAlphabetically(strings);\n  print(sortedStrings);\n}\n```"
  },
  {
    "task": "Create a method to search for a value in an array using binary search.",
    "code": "```dart\nint binarySearch(List<int> array, int target) {\n  int left = 0;\n  int right = array.length - 1;\n\n  while (left <= right) {\n    int mid = left + ((right - left) >> 1);\n\n    if (array[mid] == target) {\n      return mid;\n    } else if (array[mid] < target) {\n      left = mid + 1;\n    } else {\n      right = mid - 1;\n    }\n  }\n\n  return -1; // Target not found\n}\n```"
  },
  {
    "task": "Write a routine to calculate the average of numbers in an array.",
    "code": "```dart\ndouble calculateAverage(List<double> numbers) {\n  if (numbers.isEmpty) return 0.0;\n  double sum = numbers.reduce((a, b) => a + b);\n  return sum / numbers.length;\n}\n```"
  },
  {
    "task": "Develop a function to find the intersection of two arrays.",
    "code": "```dart\nList<int> findIntersection(List<int> array1, List<int> array2) {\n  return array1.where((element) => array2.contains(element)).toSet().toList();\n}\n\nvoid main() {\n  List<int> array1 = [1, 2, 3, 4, 5];\n  List<int> array2 = [4, 5, 6, 7, 8];\n  List<int> intersection = findIntersection(array1, array2);\n  print(intersection); // Output: [4, 5]\n}\n```"
  },
  {
    "task": "Implement a method to find the union of two arrays without duplicates.",
    "code": "```dart\nList<int> unionWithoutDuplicates(List<int> array1, List<int> array2) {\n  Set<int> resultSet = {};\n  resultSet.addAll(array1);\n  resultSet.addAll(array2);\n  return resultSet.toList();\n}\n```"
  },
  {
    "task": "Create a program that shifts all zeroes in an array to the end.",
    "code": "```dart\nvoid shiftZeroesToEnd(List<int> arr) {\n  int nonZeroIndex = 0;\n\n  for (int i = 0; i < arr.length; i++) {\n    if (arr[i] != 0) {\n      arr[nonZeroIndex++] = arr[i];\n    }\n  }\n\n  while (nonZeroIndex < arr.length) {\n    arr[nonZeroIndex++] = 0;\n  }\n}\n\nvoid main() {\n  List<int> arr = [0, 1, 0, 3, 12];\n  shiftZeroesToEnd(arr);\n  print(arr);\n}\n```"
  },
  {
    "task": "Write a function to split an array into two parts at a given index.",
    "code": "```dart\nList<List<T>> splitArray<T>(List<T> array, int index) {\n  if (index < 0 || index > array.length) {\n    throw RangeError('Index out of bounds');\n  }\n  List<T> firstPart = array.sublist(0, index);\n  List<T> secondPart = array.sublist(index);\n  return [firstPart, secondPart];\n}\n```"
  },
  {
    "task": "Design a script to find all pairs in an array that sum up to a specific target.",
    "code": "```dart\nvoid findPairsWithSum(List<int> arr, int target) {\n  for (int i = 0; i < arr.length - 1; i++) {\n    for (int j = i + 1; j < arr.length; j++) {\n      if (arr[i] + arr[j] == target) {\n        print('Pair found: (${arr[i]}, ${arr[j]})');\n      }\n    }\n  }\n}\n\nvoid main() {\n  List<int> array = [1, 2, 3, 4, 5, 6];\n  int targetSum = 7;\n  findPairsWithSum(array, targetSum);\n}\n```"
  },
  {
    "task": "Construct a method to remove all occurrences of a specific value from an array.",
    "code": "```dart\nList<int> removeOccurrences(List<int> array, int value) {\n  return array.where((element) => element != value).toList();\n}\n```"
  },
  {
    "task": "Write a function to find the longest increasing subsequence in an array.",
    "code": "```dart\nList<int> longestIncreasingSubsequence(List<int> nums) {\n  if (nums.isEmpty) return [];\n  \n  List<int> lengths = List.filled(nums.length, 1);\n  List<int> previous = List.filled(nums.length, -1);\n  int maxLength = 1;\n  int endIndex = 0;\n\n  for (int i = 1; i < nums.length; i++) {\n    for (int j = 0; j < i; j++) {\n      if (nums[i] > nums[j] && lengths[i] < lengths[j] + 1) {\n        lengths[i] = lengths[j] + 1;\n        previous[i] = j;\n      }\n    }\n    if (lengths[i] > maxLength) {\n      maxLength = lengths[i];\n      endIndex = i;\n    }\n  }\n\n  List<int> lis = [];\n  for (int i = endIndex; i >= 0; i = previous[i]) {\n    lis.add(nums[i]);\n    if (previous[i] == -1) break;\n  }\n\n  return lis.reversed.toList();\n}\n```"
  },
  {
    "task": "Develop an algorithm to find the missing number in a sequential array.",
    "code": "```dart\nint findMissingNumber(List<int> array) {\n  int n = array.length + 1;\n  int totalSum = n * (n + 1) ~/ 2;\n  int arraySum = array.reduce((a, b) => a + b);\n  return totalSum - arraySum;\n}\n\nvoid main() {\n  List<int> array = [1, 2, 4, 5, 6]; // Example array\n  int missingNumber = findMissingNumber(array);\n  print(\"The missing number is: $missingNumber\");\n}\n```"
  },
  {
    "task": "Create a program to find the common elements between two arrays.",
    "code": "```dart\nvoid main() {\n  List<int> array1 = [1, 2, 3, 4, 5];\n  List<int> array2 = [4, 5, 6, 7, 8];\n\n  List<int> commonElements = array1.where((element) => array2.contains(element)).toList();\n\n  print(commonElements);\n}\n```"
  },
  {
    "task": "Implement a function to move all negative numbers to the beginning of an array.",
    "code": "```dart\nList<int> moveNegativesToFront(List<int> arr) {\n  int j = 0;\n  for (int i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      if (i != j) {\n        int temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n      }\n      j++;\n    }\n  }\n  return arr;\n}\n```"
  },
  {
    "task": "Write a method to check if an array is a palindrome.",
    "code": "```dart\nbool isPalindrome(List<int> array) {\n  for (int i = 0; i < array.length ~/ 2; i++) {\n    if (array[i] != array[array.length - i - 1]) {\n      return false;\n    }\n  }\n  return true;\n}\n```"
  },
  {
    "task": "Design a routine to create a new array that is the element-wise sum of two input arrays.",
    "code": "```dart\nList<int> elementWiseSum(List<int> array1, List<int> array2) {\n  if (array1.length != array2.length) {\n    throw ArgumentError('Arrays must have the same length');\n  }\n  List<int> sumArray = List<int>.filled(array1.length, 0);\n  for (int i = 0; i < array1.length; i++) {\n    sumArray[i] = array1[i] + array2[i];\n  }\n  return sumArray;\n}\n```"
  },
  {
    "task": "Create a function to find the product of all elements in an array, excluding the current element.",
    "code": "```dart\nList<int> productExcludingCurrent(List<int> nums) {\n  int totalProduct = nums.fold(1, (product, num) => product * num);\n  return nums.map((num) => totalProduct ~/ num).toList();\n}\n```"
  },
  {
    "task": "Develop a script to remove elements from an array that are smaller than a given threshold.",
    "code": "```dart\nList<int> removeElementsBelowThreshold(List<int> array, int threshold) {\n  return array.where((element) => element >= threshold).toList();\n}\n\nvoid main() {\n  List<int> numbers = [1, 5, 8, 3, 10, 2];\n  int threshold = 5;\n  List<int> filteredNumbers = removeElementsBelowThreshold(numbers, threshold);\n  print(filteredNumbers); // Output: [5, 8, 10]\n}\n```"
  },
  {
    "task": "Implement a method to clone an array without using built-in functions.",
    "code": "```dart\nList<T> cloneArray<T>(List<T> array) {\n  List<T> clonedArray = [];\n  for (int i = 0; i < array.length; i++) {\n    clonedArray.add(array[i]);\n  }\n  return clonedArray;\n}\n```"
  },
  {
    "task": "Create a program that rotates a 2D array (matrix) 90 degrees clockwise.",
    "code": "```dart\nList<List<T>> rotateMatrix90DegreesClockwise<T>(List<List<T>> matrix) {\n  int n = matrix.length;\n  List<List<T>> rotatedMatrix = List.generate(\n    n,\n    (_) => List<T>.filled(n, null as T),\n  );\n\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < n; j++) {\n      rotatedMatrix[j][n - i - 1] = matrix[i][j];\n    }\n  }\n\n  return rotatedMatrix;\n}\n\nvoid main() {\n  List<List<int>> matrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n  ];\n\n  List<List<int>> rotatedMatrix = rotateMatrix90DegreesClockwise(matrix);\n\n  for (var row in rotatedMatrix) {\n    print(row);\n  }\n}\n```"
  },
  {
    "task": "Write a function to find the kth smallest element in an unsorted array.",
    "code": "```dart\nint findKthSmallest(List<int> array, int k) {\n  if (k < 1 || k > array.length) {\n    throw ArgumentError('k is out of range');\n  }\n  array.sort();\n  return array[k - 1];\n}\n```"
  },
  {
    "task": "Design a routine to partition an array into even and odd numbers.",
    "code": "```dart\nList<List<int>> partitionEvenOdd(List<int> numbers) {\n  List<int> evens = [];\n  List<int> odds = [];\n\n  for (var number in numbers) {\n    if (number % 2 == 0) {\n      evens.add(number);\n    } else {\n      odds.add(number);\n    }\n  }\n\n  return [evens, odds];\n}\n\nvoid main() {\n  List<int> numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  List<List<int>> partitioned = partitionEvenOdd(numbers);\n  print('Evens: ${partitioned[0]}');\n  print('Odds: ${partitioned[1]}');\n}\n```"
  },
  {
    "task": "Create a method to merge overlapping intervals in an array.",
    "code": "```dart\nList<List<int>> mergeIntervals(List<List<int>> intervals) {\n  if (intervals.isEmpty) return [];\n\n  intervals.sort((a, b) => a[0].compareTo(b[0]));\n\n  List<List<int>> merged = [];\n  List<int> currentInterval = intervals[0];\n\n  for (int i = 1; i < intervals.length; i++) {\n    if (currentInterval[1] >= intervals[i][0]) {\n      currentInterval[1] = currentInterval[1].isGreaterThan(intervals[i][1]) ? currentInterval[1] : intervals[i][1];\n    } else {\n      merged.add(currentInterval);\n      currentInterval = intervals[i];\n    }\n  }\n\n  merged.add(currentInterval);\n  return merged;\n}\n```"
  },
  {
    "task": "Develop a function to count the frequency of each unique element in an array.",
    "code": "```dart\nMap<T, int> countFrequency<T>(List<T> array) {\n  Map<T, int> frequencyMap = {};\n  for (var element in array) {\n    if (frequencyMap.containsKey(element)) {\n      frequencyMap[element] = frequencyMap[element]! + 1;\n    } else {\n      frequencyMap[element] = 1;\n    }\n  }\n  return frequencyMap;\n}\n```"
  },
  {
    "task": "Write a program to generate all possible subsets of an array.",
    "code": "```dart\nvoid generateSubsets(List<int> array) {\n  int n = array.length;\n  List<List<int>> subsets = [];\n  \n  for (int i = 0; i < (1 << n); i++) {\n    List<int> subset = [];\n    for (int j = 0; j < n; j++) {\n      if ((i & (1 << j)) != 0) {\n        subset.add(array[j]);\n      }\n    }\n    subsets.add(subset);\n  }\n  \n  for (var subset in subsets) {\n    print(subset);\n  }\n}\n\nvoid main() {\n  List<int> array = [1, 2, 3];\n  generateSubsets(array);\n}\n```"
  },
  {
    "task": "Implement a routine to cyclically permute the elements of an array.",
    "code": "```dart\nList<T> cyclicPermute<T>(List<T> array) {\n  if (array.isEmpty) return array;\n  T lastElement = array.removeLast();\n  array.insert(0, lastElement);\n  return array;\n}\n\nvoid main() {\n  List<int> numbers = [1, 2, 3, 4, 5];\n  print(cyclicPermute(numbers)); // Output: [5, 1, 2, 3, 4]\n}\n```"
  },
  {
    "task": "Create a function that checks if two arrays are equal regardless of element order.",
    "code": "```dart\nbool areArraysEqual(List<dynamic> array1, List<dynamic> array2) {\n  if (array1.length != array2.length) return false;\n  var sortedArray1 = List.from(array1)..sort();\n  var sortedArray2 = List.from(array2)..sort();\n  for (int i = 0; i < sortedArray1.length; i++) {\n    if (sortedArray1[i] != sortedArray2[i]) return false;\n  }\n  return true;\n}\n```"
  },
  {
    "task": "Design a script to initialize an array with random integers within a specified range.",
    "code": "```dart\nimport 'dart:math';\n\nvoid main() {\n  int length = 10; // length of the array\n  int min = 0; // minimum value of the random numbers\n  int max = 100; // maximum value of the random numbers\n\n  List<int> randomArray = List.generate(\n    length, \n    (index) => min + Random().nextInt(max - min + 1)\n  );\n\n  print(randomArray);\n}\n```"
  },
  {
    "task": "Write a method to convert an array of integers to a single concatenated number.",
    "code": "```dart\nint concatenateArrayToNumber(List<int> array) {\n  return int.parse(array.join());\n}\n\nvoid main() {\n  List<int> numbers = [1, 2, 3, 4, 5];\n  int result = concatenateArrayToNumber(numbers);\n  print(result); // Output: 12345\n}\n```"
  },
  {
    "task": "Develop a function to find the median value of an unsorted array.",
    "code": "```dart\ndouble findMedian(List<int> array) {\n  array.sort();\n  int n = array.length;\n  if (n % 2 == 0) {\n    return (array[n ~/ 2 - 1] + array[n ~/ 2]) / 2;\n  } else {\n    return array[n ~/ 2].toDouble();\n  }\n}\n```"
  },
  {
    "task": "Create a routine to determine if an array is sorted in ascending order.",
    "code": "```dart\nbool isSortedAscending(List<int> array) {\n  for (int i = 0; i < array.length - 1; i++) {\n    if (array[i] > array[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n}\n```"
  },
  {
    "task": "Implement a method to find the longest contiguous subarray with equal number of 0s and 1s.",
    "code": "```dart\nint findMaxLength(List<int> nums) {\n  Map<int, int> countMap = {0: -1};\n  int maxLength = 0;\n  int count = 0;\n\n  for (int i = 0; i < nums.length; i++) {\n    count += (nums[i] == 1) ? 1 : -1;\n    if (countMap.containsKey(count)) {\n      maxLength = maxLength > (i - countMap[count]!) ? maxLength : (i - countMap[count]!);\n    } else {\n      countMap[count] = i;\n    }\n  }\n\n  return maxLength;\n}\n```"
  },
  {
    "task": "Write a function to interleave two arrays of equal length.",
    "code": "```dart\nList<T> interleaveArrays<T>(List<T> array1, List<T> array2) {\n  if (array1.length != array2.length) {\n    throw ArgumentError('Arrays must have the same length');\n  }\n  List<T> interleavedArray = [];\n  for (int i = 0; i < array1.length; i++) {\n    interleavedArray.add(array1[i]);\n    interleavedArray.add(array2[i]);\n  }\n  return interleavedArray;\n}\n```"
  },
  {
    "task": "Design a program to replace each element in an array with the next greatest element.",
    "code": "```dart\nList<int> replaceWithNextGreatest(List<int> arr) {\n  int n = arr.length;\n  List<int> result = List<int>.filled(n, 0);\n  int maxFromRight = arr[n - 1];\n  result[n - 1] = -1;\n  \n  for (int i = n - 2; i >= 0; i--) {\n    int current = arr[i];\n    result[i] = maxFromRight;\n    if (current > maxFromRight) {\n      maxFromRight = current;\n    }\n  }\n  \n  return result;\n}\n\nvoid main() {\n  List<int> arr = [16, 17, 4, 3, 5, 2];\n  List<int> result = replaceWithNextGreatest(arr);\n  print(result);\n}\n```"
  },
  {
    "task": "Create a function to calculate the dot product of two numeric arrays.",
    "code": "```dart\ndouble dotProduct(List<double> array1, List<double> array2) {\n  if (array1.length != array2.length) {\n    throw ArgumentError('Arrays must have the same length');\n  }\n  double result = 0.0;\n  for (int i = 0; i < array1.length; i++) {\n    result += array1[i] * array2[i];\n  }\n  return result;\n}\n```"
  },
  {
    "task": "Develop a script to find the first recurring element in an array.",
    "code": "```dart\nint? findFirstRecurring(List<int> array) {\n  Set<int> seen = {};\n  for (var element in array) {\n    if (seen.contains(element)) {\n      return element;\n    }\n    seen.add(element);\n  }\n  return null;\n}\n\nvoid main() {\n  List<int> array = [2, 5, 1, 2, 3, 5, 1, 2, 4];\n  int? result = findFirstRecurring(array);\n  print(result); // Output: 2\n}\n```"
  },
  {
    "task": "Write a method to check if an array is a subset of another array.",
    "code": "```dart\nbool isSubset(List<int> array1, List<int> array2) {\n  Set<int> set1 = array1.toSet();\n  for (int element in array2) {\n    if (!set1.contains(element)) {\n      return false;\n    }\n  }\n  return true;\n}\n```"
  },
  {
    "task": "Implement a function to add a specific value to each element in an array.",
    "code": "```dart\nList<int> addValueToArray(List<int> array, int value) {\n  return array.map((element) => element + value).toList();\n}\n```"
  },
  {
    "task": "Create a program that finds the largest product of three numbers in an array.",
    "code": "```dart\nvoid main() {\n  List<int> numbers = [1, 10, 2, 6, 5, 3];\n  int n = numbers.length;\n  if (n < 3) {\n    print('Array should have at least three numbers.');\n    return;\n  }\n  \n  numbers.sort();\n  \n  int product1 = numbers[n - 1] * numbers[n - 2] * numbers[n - 3];\n  int product2 = numbers[0] * numbers[1] * numbers[n - 1];\n  \n  int largestProduct = product1 > product2 ? product1 : product2;\n  \n  print('Largest product of three numbers is: $largestProduct');\n}\n```"
  },
  {
    "task": "Design a routine to find all unique permutations of an array.",
    "code": "```dart\nList<List<int>> permuteUnique(List<int> nums) {\n  List<List<int>> results = [];\n  nums.sort();\n  _backtrack(nums, results, [], List<bool>.filled(nums.length, false));\n  return results;\n}\n\nvoid _backtrack(List<int> nums, List<List<int>> results, List<int> tempList, List<bool> used) {\n  if (tempList.length == nums.length) {\n    results.add(List.from(tempList));\n  } else {\n    for (int i = 0; i < nums.length; i++) {\n      if (used[i] || (i > 0 && nums[i] == nums[i - 1] && !used[i - 1])) continue;\n      used[i] = true;\n      tempList.add(nums[i]);\n      _backtrack(nums, results, tempList, used);\n      used[i] = false;\n      tempList.removeLast();\n    }\n  }\n}\n```"
  },
  {
    "task": "Write a function to transpose a square matrix represented as a 2D array.",
    "code": "```dart\nList<List<int>> transposeMatrix(List<List<int>> matrix) {\n  int n = matrix.length;\n  List<List<int>> transposed = List.generate(n, (_) => List.filled(n, 0));\n  \n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < n; j++) {\n      transposed[j][i] = matrix[i][j];\n    }\n  }\n  \n  return transposed;\n}\n```"
  },
  {
    "task": "Develop a method to find the longest common prefix in an array of strings.",
    "code": "```dart\nString longestCommonPrefix(List<String> strs) {\n  if (strs.isEmpty) return '';\n  \n  String prefix = strs[0];\n  for (int i = 1; i < strs.length; i++) {\n    while (strs[i].indexOf(prefix) != 0) {\n      prefix = prefix.substring(0, prefix.length - 1);\n      if (prefix.isEmpty) return '';\n    }\n  }\n  return prefix;\n}\n```"
  },
  {
    "task": "Implement a function to flatten a multi-dimensional array into a single array.",
    "code": "```dart\nList flatten(List<dynamic> array) {\n  List flattened = [];\n  for (var element in array) {\n    if (element is List) {\n      flattened.addAll(flatten(element));\n    } else {\n      flattened.add(element);\n    }\n  }\n  return flattened;\n}\n```"
  },
  {
    "task": "Create a script to shift elements of an array to the left by a given number of positions.",
    "code": "```dart\nList<int> shiftLeft(List<int> array, int positions) {\n  if (array.isEmpty || positions <= 0) return array;\n\n  int length = array.length;\n  positions = positions % length;\n  \n  return array.sublist(positions)..addAll(array.sublist(0, positions));\n}\n\nvoid main() {\n  List<int> array = [1, 2, 3, 4, 5];\n  int positions = 2;\n\n  List<int> shiftedArray = shiftLeft(array, positions);\n  print(shiftedArray);\n}\n```"
  },
  {
    "task": "Write a routine to sort an array of objects based on a specific property.",
    "code": "```dart\nclass Item {\n  String name;\n  int value;\n\n  Item(this.name, this.value);\n}\n\nvoid main() {\n  List<Item> items = [\n    Item('item1', 10),\n    Item('item2', 5),\n    Item('item3', 20),\n  ];\n\n  items.sort((a, b) => a.value.compareTo(b.value));\n\n  for (var item in items) {\n    print('${item.name}: ${item.value}');\n  }\n}\n```"
  },
  {
    "task": "Design a program to find the smallest missing positive integer in an array.",
    "code": "```dart\nint findSmallestMissingPositive(int[] nums) {\n  nums.sort();\n  int smallestMissing = 1;\n  for (var num in nums) {\n    if (num == smallestMissing) {\n      smallestMissing++;\n    }\n  }\n  return smallestMissing;\n}\n\nvoid main() {\n  List<int> nums = [3, 4, -1, 1];\n  print(findSmallestMissingPositive(nums)); // Output: 2\n}\n```"
  },
  {
    "task": "Create a function to calculate the cumulative sum of an array.",
    "code": "```dart\nList<int> cumulativeSum(List<int> array) {\n  List<int> result = [];\n  int sum = 0;\n  \n  for (int num in array) {\n    sum += num;\n    result.add(sum);\n  }\n  \n  return result;\n}\n```"
  },
  {
    "task": "Develop a function to remove consecutive duplicate elements in an array.",
    "code": "```dart\nList<T> removeConsecutiveDuplicates<T>(List<T> array) {\n  if (array.isEmpty) return [];\n  \n  List<T> result = [array.first];\n  \n  for (var i = 1; i < array.length; i++) {\n    if (array[i] != array[i - 1]) {\n      result.add(array[i]);\n    }\n  }\n  \n  return result;\n}\n```"
  },
  {
    "task": "Implement a method to find the majority element in an array, if any.",
    "code": "```dart\nint? findMajorityElement(List<int> nums) {\n  Map<int, int> countMap = {};\n  int majorityCount = nums.length ~/ 2;\n  \n  for (int num in nums) {\n    countMap[num] = (countMap[num] ?? 0) + 1;\n    if (countMap[num]! > majorityCount) {\n      return num;\n    }\n  }\n  \n  return null;\n}\n```"
  },
  {
    "task": "Write a script to split an array into chunks of a given size.",
    "code": "```dart\nList<List<T>> chunkArray<T>(List<T> array, int chunkSize) {\n  List<List<T>> chunks = [];\n  for (int i = 0; i < array.length; i += chunkSize) {\n    int end = (i + chunkSize < array.length) ? i + chunkSize : array.length;\n    chunks.add(array.sublist(i, end));\n  }\n  return chunks;\n}\n\nvoid main() {\n  List<int> array = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  int chunkSize = 3;\n  List<List<int>> result = chunkArray(array, chunkSize);\n  print(result);\n}\n```"
  },
  {
    "task": "Create a program to calculate the difference between the largest and smallest values in an array.",
    "code": "```dart\nvoid main() {\n  List<int> numbers = [10, 20, 5, 30, 50];\n  int maxValue = numbers.reduce((a, b) => a > b ? a : b);\n  int minValue = numbers.reduce((a, b) => a < b ? a : b);\n  int difference = maxValue - minValue;\n  print('Difference: $difference');\n}\n```"
  },
  {
    "task": "Design a routine to find the starting index of a target subarray in a larger array.",
    "code": "```dart\nint findSubarrayIndex(List<int> array, List<int> subarray) {\n  for (int i = 0; i <= array.length - subarray.length; i++) {\n    bool found = true;\n    for (int j = 0; j < subarray.length; j++) {\n      if (array[i + j] != subarray[j]) {\n        found = false;\n        break;\n      }\n    }\n    if (found) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nvoid main() {\n  List<int> array = [1, 2, 3, 4, 5, 6];\n  List<int> subarray = [3, 4];\n  int index = findSubarrayIndex(array, subarray);\n  print(index); // Output should be 2\n}\n```"
  },
  {
    "task": "Write a function to compress an array by eliminating zero values.",
    "code": "```dart\nList<int> compressArray(List<int> array) {\n  return array.where((value) => value != 0).toList();\n}\n\nvoid main() {\n  List<int> originalArray = [0, 1, 2, 0, 3, 0, 4, 5];\n  List<int> compressedArray = compressArray(originalArray);\n  print(compressedArray); // Output: [1, 2, 3, 4, 5]\n}\n```"
  },
  {
    "task": "Develop a method to determine if an array can be split into two parts with equal sums.",
    "code": "```dart\nbool canBeSplitIntoEqualSums(List<int> array) {\n  int totalSum = array.reduce((a, b) => a + b);\n  if (totalSum % 2 != 0) return false;\n\n  int targetSum = totalSum ~/ 2;\n  int currentSum = 0;\n\n  for (int num in array) {\n    currentSum += num;\n    if (currentSum == targetSum) return true;\n  }\n\n  return false;\n}\n\nvoid main() {\n  List<int> array = [1, 2, 3, 4, 6];\n  print(canBeSplitIntoEqualSums(array)); // Output: true\n}\n```"
  },
  {
    "task": "Implement a function to round each element in an array to the nearest integer.",
    "code": "```dart\nList<int> roundArrayElements(List<double> array) {\n  return array.map((element) => element.round()).toList();\n}\n```"
  },
  {
    "task": "Create a routine to generate an array of the Fibonacci sequence up to a given number.",
    "code": "```dart\nList<int> generateFibonacci(int n) {\n  if (n <= 0) return [];\n  List<int> fibonacci = [0];\n  if (n == 1) return fibonacci;\n  fibonacci.add(1);\n  for (int i = 2; i < n; i++) {\n    fibonacci.add(fibonacci[i - 1] + fibonacci[i - 2]);\n  }\n  return fibonacci;\n}\n\nvoid main() {\n  int n = 10; // Example: generate Fibonacci sequence for first 10 numbers\n  List<int> fibonacciSequence = generateFibonacci(n);\n  print(fibonacciSequence);\n}\n```"
  },
  {
    "task": "Write a program to find the longest repeating sequence in an array.",
    "code": "```dart\nList<int> findLongestRepeatingSequence(List<int> arr) {\n  if (arr.isEmpty) return [];\n\n  Map<int, int> countMap = {};\n  List<int> longestSequence = [];\n  List<int> currentSequence = [];\n\n  for (int i = 0; i < arr.length; i++) {\n    if (i > 0 && arr[i] == arr[i - 1]) {\n      currentSequence.add(arr[i]);\n    } else {\n      if (currentSequence.length > longestSequence.length) {\n        longestSequence = List.from(currentSequence);\n      }\n      currentSequence = [arr[i]];\n    }\n  }\n\n  if (currentSequence.length > longestSequence.length) {\n    longestSequence = List.from(currentSequence);\n  }\n\n  return longestSequence;\n}\n\nvoid main() {\n  List<int> array = [1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 5];\n  List<int> longestSequence = findLongestRepeatingSequence(array);\n  print(longestSequence);\n}\n```"
  },
  {
    "task": "Design a function to multiply each element of an array by its index.",
    "code": "```dart\nList<int> multiplyElementsByIndex(List<int> array) {\n  for (int i = 0; i < array.length; i++) {\n    array[i] *= i;\n  }\n  return array;\n}\n```"
  },
  {
    "task": "Create a method to convert an array of characters into a single string.",
    "code": "```dart\nString convertArrayToString(List<String> charArray) {\n  return charArray.join();\n}\n\nvoid main() {\n  List<String> charArray = ['H', 'e', 'l', 'l', 'o'];\n  String result = convertArrayToString(charArray);\n  print(result);  // Output: Hello\n}\n```"
  },
  {
    "task": "Develop a function to fill an array with a specified value.",
    "code": "```dart\nList<T> fillArray<T>(int length, T value) {\n  return List.filled(length, value);\n}\n\nvoid main() {\n  var filledArray = fillArray(5, 'Hello');\n  print(filledArray);\n}\n```"
  },
  {
    "task": "Implement a routine to determine if an array has any duplicate elements.",
    "code": "```dart\nbool hasDuplicates(List<dynamic> array) {\n  Set<dynamic> seen = {};\n  for (var element in array) {\n    if (seen.contains(element)) {\n      return true;\n    }\n    seen.add(element);\n  }\n  return false;\n}\n```"
  },
  {
    "task": "Write a script to reverse the order of words in an array of strings.",
    "code": "```dart\nvoid main() {\n  List<String> words = ['hello', 'world', 'this', 'is', 'dart'];\n  List<String> reversedWords = words.reversed.toList();\n  print(reversedWords);\n}\n```"
  },
  {
    "task": "Create a function to calculate the total number of distinct elements in an array.",
    "code": "```dart\nint countDistinctElements(List<dynamic> array) {\n  return array.toSet().length;\n}\n```"
  },
  {
    "task": "Design a program to find the largest gap between consecutive elements in a sorted array.",
    "code": "```dart\nvoid main() {\n  List<int> sortedArray = [1, 3, 6, 9, 15];\n  int largestGap = findLargestGap(sortedArray);\n  print('The largest gap is: $largestGap');\n}\n\nint findLargestGap(List<int> array) {\n  int largestGap = 0;\n  for (int i = 1; i < array.length; i++) {\n    int gap = array[i] - array[i - 1];\n    if (gap > largestGap) {\n      largestGap = gap;\n    }\n  }\n  return largestGap;\n}\n```"
  },
  {
    "task": "Write a routine to perform element-wise multiplication of two arrays.",
    "code": "```dart\nList<int> elementWiseMultiplication(List<int> array1, List<int> array2) {\n  if (array1.length != array2.length) {\n    throw ArgumentError('Arrays must have the same length.');\n  }\n  List<int> result = List<int>.filled(array1.length, 0);\n  for (int i = 0; i < array1.length; i++) {\n    result[i] = array1[i] * array2[i];\n  }\n  return result;\n}\n```"
  },
  {
    "task": "Develop a method to split a string into an array of words.",
    "code": "```dart\nList<String> splitStringIntoWords(String input) {\n  return input.split(' ');\n}\n```"
  },
  {
    "task": "Implement a function to find the longest contiguous subarray with a sum less than a target.",
    "code": "```dart\nList<int> longestContiguousSubarray(List<int> arr, int target) {\n  int maxLength = 0;\n  int start = 0;\n  int sum = 0;\n  int beginIndex = 0;\n\n  for (int end = 0; end < arr.length; end++) {\n    sum += arr[end];\n    \n    while (sum >= target && start <= end) {\n      sum -= arr[start];\n      start++;\n    }\n    \n    if (end - start + 1 > maxLength) {\n      maxLength = end - start + 1;\n      beginIndex = start;\n    }\n  }\n\n  return arr.sublist(beginIndex, beginIndex + maxLength);\n}\n```"
  },
  {
    "task": "Create a script to rotate a 2D array (matrix) 180 degrees.",
    "code": "```dart\nList<List<int>> rotateMatrix180(List<List<int>> matrix) {\n  int numRows = matrix.length;\n  int numCols = matrix[0].length;\n  List<List<int>> rotatedMatrix = List.generate(\n      numRows, (_) => List.filled(numCols, 0),\n      growable: false);\n\n  for (int i = 0; i < numRows; i++) {\n    for (int j = 0; j < numCols; j++) {\n      rotatedMatrix[numRows - i - 1][numCols - j - 1] = matrix[i][j];\n    }\n  }\n\n  return rotatedMatrix;\n}\n\nvoid main() {\n  List<List<int>> matrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ];\n\n  List<List<int>> result = rotateMatrix180(matrix);\n\n  for (var row in result) {\n    print(row);\n  }\n}\n```"
  },
  {
    "task": "Write a program to convert an array of binary digits to its decimal equivalent.",
    "code": "```dart\nvoid main() {\n  List<int> binaryArray = [1, 0, 1, 1];\n  int decimalValue = binaryToDecimal(binaryArray);\n  print(decimalValue);\n}\n\nint binaryToDecimal(List<int> binaryArray) {\n  int decimalValue = 0;\n  int length = binaryArray.length;\n  for (int i = 0; i < length; i++) {\n    decimalValue += binaryArray[length - 1 - i] * (1 << i);\n  }\n  return decimalValue;\n}\n```"
  },
  {
    "task": "Design a function to return a new array with elements squared from the input array.",
    "code": "```dart\nList<int> squareElements(List<int> inputArray) {\n  return inputArray.map((element) => element * element).toList();\n}\n```"
  },
  {
    "task": "Create a method to check if all elements in an array are unique.",
    "code": "```dart\nbool areAllElementsUnique(List<dynamic> array) {\n  Set<dynamic> seen = {};\n  for (var element in array) {\n    if (seen.contains(element)) {\n      return false;\n    }\n    seen.add(element);\n  }\n  return true;\n}\n```"
  },
  {
    "task": "Develop a routine to find the indices of all occurrences of a specific element in an array.",
    "code": "```dart\nList<int> findIndices(List<int> array, int element) {\n  List<int> indices = [];\n  for (int i = 0; i < array.length; i++) {\n    if (array[i] == element) {\n      indices.add(i);\n    }\n  }\n  return indices;\n}\n\nvoid main() {\n  List<int> array = [1, 2, 3, 2, 4, 2];\n  int element = 2;\n  List<int> result = findIndices(array, element);\n  print(result); // Output: [1, 3, 5]\n}\n```"
  },
  {
    "task": "Implement a function to merge multiple arrays into one.",
    "code": "```dart\nList<T> mergeArrays<T>(List<List<T>> arrays) {\n  List<T> mergedArray = [];\n  for (var array in arrays) {\n    mergedArray.addAll(array);\n  }\n  return mergedArray;\n}\n\nvoid main() {\n  var array1 = [1, 2, 3];\n  var array2 = [4, 5, 6];\n  var array3 = [7, 8, 9];\n  \n  var result = mergeArrays([array1, array2, array3]);\n  print(result); // [1, 2, 3, 4, 5, 6, 7, 8, 9]\n}\n```"
  },
  {
    "task": "Write a script to convert an array of integers into a formatted string.",
    "code": "```dart\nvoid main() {\n  List<int> numbers = [1, 2, 3, 4, 5];\n  String formattedString = numbers.join(', ');\n  print(formattedString);\n}\n```"
  },
  {
    "task": "Create a program to find the largest sum of any contiguous subarray.",
    "code": "```dart\nint maxSubArray(List<int> nums) {\n  int maxSum = nums[0];\n  int currentSum = nums[0];\n\n  for (int i = 1; i < nums.length; i++) {\n    currentSum = (currentSum > 0) ? currentSum + nums[i] : nums[i];\n    if (currentSum > maxSum) {\n      maxSum = currentSum;\n    }\n  }\n\n  return maxSum;\n}\n\nvoid main() {\n  List<int> nums = [1, -2, 3, 4, -1, 2, 1, -5, 4];\n  print(maxSubArray(nums)); // Output should be 9\n}\n```"
  },
  {
    "task": "Design a function to compare two arrays and return the differences.",
    "code": "```dart\nList<dynamic> findDifferences(List<dynamic> array1, List<dynamic> array2) {\n  List<dynamic> differences = [];\n  \n  for (var item in array1) {\n    if (!array2.contains(item)) {\n      differences.add(item);\n    }\n  }\n  \n  for (var item in array2) {\n    if (!array1.contains(item)) {\n      differences.add(item);\n    }\n  }\n  \n  return differences;\n}\n```"
  },
  {
    "task": "Write a method to find the longest subarray with elements in arithmetic progression.",
    "code": "```dart\nList<int> longestArithmeticSubarray(List<int> arr) {\n  if (arr.length < 2) return arr;\n  int maxLength = 1;\n  int currentLength = 1;\n  int start = 0;\n  for (int i = 1; i < arr.length; i++) {\n    if (i == 1 || arr[i] - arr[i - 1] == arr[i - 1] - arr[i - 2]) {\n      currentLength++;\n    } else {\n      currentLength = 2;\n    }\n    if (currentLength > maxLength) {\n      maxLength = currentLength;\n      start = i - currentLength + 1;\n    }\n  }\n  return arr.sublist(start, start + maxLength);\n}\n```"
  },
  {
    "task": "Develop a routine to remove elements from an array based on a predicate function.",
    "code": "```dart\nList<T> removeElements<T>(List<T> array, bool Function(T) predicate) {\n  return array.where((element) => !predicate(element)).toList();\n}\n\nvoid main() {\n  List<int> numbers = [1, 2, 3, 4, 5, 6];\n  List<int> filteredNumbers = removeElements(numbers, (n) => n % 2 == 0);\n  print(filteredNumbers); // Output: [1, 3, 5]\n}\n```"
  },
  {
    "task": "Implement a function to determine if two arrays have any common elements.",
    "code": "```dart\nbool haveCommonElements(List<dynamic> array1, List<dynamic> array2) {\n  for (var element in array1) {\n    if (array2.contains(element)) {\n      return true;\n    }\n  }\n  return false;\n}\n```"
  },
  {
    "task": "Create a script to initialize an empty array and populate it with user input.",
    "code": "```dart\nimport 'dart:io';\n\nvoid main() {\n  List<String> userInputArray = [];\n  print('Enter items to add to the array (type \"done\" to finish):');\n\n  while (true) {\n    String? input = stdin.readLineSync();\n    if (input == null || input.toLowerCase() == 'done') {\n      break;\n    }\n    userInputArray.add(input);\n  }\n\n  print('The populated array is: $userInputArray');\n}\n```"
  },
  {
    "task": "Write a program to find the maximum sum of non-adjacent elements in an array.",
    "code": "```dart\nint maxSumNonAdjacent(List<int> nums) {\n  if (nums.isEmpty) return 0;\n  int include = 0;\n  int exclude = 0;\n  for (var num in nums) {\n    int newExclude = (include > exclude) ? include : exclude;\n    include = exclude + num;\n    exclude = newExclude;\n  }\n  return (include > exclude) ? include : exclude;\n}\n\nvoid main() {\n  List<int> nums = [3, 2, 5, 10, 7];\n  int result = maxSumNonAdjacent(nums);\n  print(\"Maximum sum of non-adjacent elements: $result\");\n}\n```"
  },
  {
    "task": "Design a function to shuffle an array randomly.",
    "code": "```dart\nimport 'dart:math';\n\nvoid shuffleArray(List array) {\n  var random = Random();\n  for (int i = array.length - 1; i > 0; i--) {\n    int j = random.nextInt(i + 1);\n    var temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n}\n```"
  },
  {
    "task": "Create a method to generate a new array where each element is the cumulative product of the input array.",
    "code": "```dart\nList<int> cumulativeProduct(List<int> input) {\n  List<int> result = [];\n  int product = 1;\n  for (int num in input) {\n    product *= num;\n    result.add(product);\n  }\n  return result;\n}\n```"
  },
  {
    "task": "Develop a routine to find the largest element in each row of a 2D array.",
    "code": "```dart\nList<int> largestInRows(List<List<int>> matrix) {\n  List<int> largestElements = [];\n  for (var row in matrix) {\n    int largest = row[0];\n    for (var element in row) {\n      if (element > largest) {\n        largest = element;\n      }\n    }\n    largestElements.add(largest);\n  }\n  return largestElements;\n}\n```"
  },
  {
    "task": "Implement a function to count the number of negative numbers in an array.",
    "code": "```dart\nint countNegativeNumbers(List<int> numbers) {\n  int count = 0;\n  for (var number in numbers) {\n    if (number < 0) {\n      count++;\n    }\n  }\n  return count;\n}\n```"
  },
  {
    "task": "Write a script to find the longest subarray with all distinct elements.",
    "code": "```dart\nint longestDistinctSubarray(List<int> nums) {\n  int maxLength = 0;\n  int start = 0;\n  Map<int, int> indexMap = {};\n\n  for (int end = 0; end < nums.length; end++) {\n    if (indexMap.containsKey(nums[end])) {\n      start = indexMap[nums[end]]! + 1 > start ? indexMap[nums[end]]! + 1 : start;\n    }\n    indexMap[nums[end]] = end;\n    maxLength = (end - start + 1) > maxLength ? (end - start + 1) : maxLength;\n  }\n  \n  return maxLength;\n}\n\nvoid main() {\n  List<int> nums = [1, 2, 1, 3, 4, 2, 3];\n  print(longestDistinctSubarray(nums)); // Output: 4\n}\n```"
  }
]